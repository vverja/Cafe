#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.РасчетСебестоимостиТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.РасчетСебестоимостиТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.РасчетСебестоимостиТоваров);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Функция ПолноеИмяДокумента()
    Возврат "Документ.РасчетСебестоимостиТоваров";
КонецФункции 

Процедура СоздатьЗаданияПерерасчетаКомиссии_ДанныеДляОбновления(Параметры) Экспорт
	
	// Для документов "Расчет себестоимости товаров" 
    // необходим перерасчет себестоимости по прошедшим периодам 
	// для комиссионных товаров и давальческих материалов.
    // сам перерасчет себестоимости в обработчике не происходит, 
    // формируются только задания для перерасчета - записи регистра сведений ЗаданияКРасчетуСебестоимости
    
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, Месяц) КАК Месяц,
	|	СебестоимостьТоваров.Организация КАК Организация
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Обороты(
	|			,
	|			,
	|			Месяц,
	|			РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)) КАК СебестоимостьТоваров
	|;
	|
	|ВЫБРАТЬ
	|	РасчетСебестоимости.Ссылка
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК Строки
	|		ПО (Строки.Ссылка = РасчетСебестоимости.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Периоды КАК Периоды
	|		ПО (Периоды.Месяц = НАЧАЛОПЕРИОДА(РасчетСебестоимости.Дата, МЕСЯЦ))
	|			И (Периоды.Организация = Строки.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьТоваров КАК Стоимости
	|		ПО (Стоимости.Регистратор = РасчетСебестоимости.Ссылка)
	|			И (Стоимости.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию), ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)))
	|ГДЕ
	|	РасчетСебестоимости.Проведен
	|	И Стоимости.Регистратор ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
    ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );	
	
КонецПроцедуры

Процедура СоздатьЗаданияПерерасчетаКомиссии(Параметры) Экспорт
    
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента(), 
        МенеджерВременныхТаблиц
    );
    
    Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
    
	ЗапросПоДокументам = Новый Запрос;
    ЗапросПоДокументам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоДокументам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ДокументыКОбработке.Ссылка КАК Документ,
    |   НАЧАЛОПЕРИОДА(РасчетСебестоимостиТоваровОрганизации.Ссылка.Дата, МЕСЯЦ) КАК Месяц,
    |   РасчетСебестоимостиТоваровОрганизации.Организация КАК Организация
	|ИЗ
    |   ВТДляОбработки КАК ДокументыКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
	|		    ПО РасчетСебестоимостиТоваровОрганизации.Ссылка = ДокументыКОбработке.Ссылка
	|";
    
    ЗапросПоДокументам.Текст = СтрЗаменить(ЗапросПоДокументам.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
    
    Выборка = ЗапросПоДокументам.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка	
			
            РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(Выборка.Месяц, Выборка.Документ, Выборка.Организация);
            
            ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Документ);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Документ);
										
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента()
    );

КонецПроцедуры


#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

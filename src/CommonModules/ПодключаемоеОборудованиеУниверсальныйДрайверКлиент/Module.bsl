
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ТипОборудованияИспользуемый= "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудованияИспользуемый = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудованияИспользуемый) 
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка обращения к драйверу.';uk='Помилка звернення до драйвера.'"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционнаяБиблиотека  = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, 
										ИнтеграционнаяБиблиотека, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
		ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьОписание>.';uk='Помилка виклику методу <ОбъектДрайвера.ПолучитьОписание>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
		
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.';uk='Помилка виклику методу <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
	Иначе
		
		Если ТипОборудованияИспользуемый = "ПринтерЧеков" Или ТипОборудованияИспользуемый = "ФискальныйРегистратор" Тогда
			ВремВыходныеПараметры = Новый Массив();
			Если ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремВыходныеПараметры) Тогда
				ВремШиринаСтроки = ВремВыходныеПараметры[0];
				ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
			КонецЕсли;
			ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
		ИначеЕсли ТипОборудованияИспользуемый = "ЭквайринговыйТерминал" Тогда
			ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
			ПараметрыПодключения.Вставить("ТипТранзакции", "");
		ИначеЕсли ТипОборудованияИспользуемый = "СканерШтрихкода" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("Штрихкод");
			ВыходныеПараметры[1].Добавить("Barcode");
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательМагнитныхКарт" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("ДанныеКарты");
			ВыходныеПараметры[1].Добавить("TracksData");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		Результат = ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера.
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С УСТРОЙСТВАМИ ВВОДА ДАННЫХ
	
	// Обработка события от устройства.
	ИначеЕсли Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ
	
	// Открыть смену
	ИначеЕсли Команда = "OpenDay" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда
		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека
	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда
		Результат = ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать по шаблону
	ИначеЕсли Команда = "PrintReceiptByTemplate" ИЛИ Команда = "ПечатьЧекаПоШаблону" Тогда
		Результат = ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	//  Аннулирование чека
	ИначеЕсли Команда = "AnnulCheck" ИЛИ Команда = "АннулироватьЧек" Тогда
		ТипЧека       = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = АннулироватьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		ТипЧека       = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать чека внесения/выемки.
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		ТипИнкассации = ВходныеПараметры[0];
		Сумма         = ВходныеПараметры[1];
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать переодического отчета по датам
	ИначеЕсли Команда = "PrintPReportDate" ИЛИ Команда = "НапечататьПериодическийОтчетПоДатам" Тогда
		Результат = НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать периодического отчета по номерам
	ИначеЕсли Команда = "PrintPReportNumber" ИЛИ Команда = "НапечататьПериодическийОтчетПоНомерам" Тогда
		Результат = НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать нулевого чека
	ИначеЕсли Команда = "PrintNullReceipt" ИЛИ Команда = "НапечататьНулевойЧек" Тогда
		Результат = НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета о проданных товарах
	ИначеЕсли Команда = "PrintSoldReport" ИЛИ Команда = "НапечататьОтчетОПроданныхТоварах" Тогда
		Результат = НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЧЕКОВ
	
	// Открыть документ
	ИначеЕсли Команда = "OpenDocument" ИЛИ Команда = "ОткрытьДокумент"  Тогда
		Результат = ОткрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Закрыть документ
	ИначеЕсли Команда = "CloseDocument" ИЛИ Команда = "ЗакрытьДокумент"  Тогда
		Результат = ЗакрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать штрихкода
	ИначеЕсли Команда = "PrintBarCode" ИЛИ Команда = "ПечатьШтрихкода" Тогда
		ТипШтрихКода2 = ВходныеПараметры[0];
		ШтрихКод     = ВходныеПараметры[1];
		Результат = ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода2, ШтрихКод, ВыходныеПараметры);
		
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	
	// Функция возвращает, будет ли печать слип чеков на терминале.
	ИначеЕсли Команда = "PrintSlipOnTerminal" ИЛИ Команда = "ПечатьКвитанцийНаТерминале" Тогда
		Результат = ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Оплата платежной картой
	ИначеЕсли Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		НомерЧека  = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                            Сумма,  НомерКарты, НомерЧека, ВыходныеПараметры);
	// Возврат платежа
	ИначеЕсли Команда = "AuthorizeRefund" ИЛИ Команда = "ВернутьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Отмена платежа
	ИначеЕсли Команда = "AuthorizeVoid" ИЛИ Команда = "ОтменитьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Сверка итогов по картам
	ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
		Результат = ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Аварийная отмена платежа
	ИначеЕсли Команда = "EmergencyVoid" ИЛИ Команда = "АварийнаяОтменаОперации" Тогда
		Результат = АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Преавторизация платежа
	ИначеЕсли Команда = "AuthorizePreSales" ИЛИ Команда = "ПреавторизацияПоПлатежнойКарте" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		НомерЧека  = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, НомерКарты, НомерЧека, ВыходныеПараметры);
		
	// Отмена преавторизации платежа.
	ИначеЕсли Команда = "AuthorizeVoidPreSales" ИЛИ Команда = "ОтменитьПреавторизациюПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                                   Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	
	// Завершение преавторизации платежа.
	ИначеЕсли Команда = "AuthorizeCompletion" ИЛИ Команда = "ЗавершитьПреавторизациюПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
															Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ТЕРМИНАЛАМИ СБОРА ДАННЫМИ
	
	// Выгрузка таблицы в терминал сбора данных.
	ИначеЕсли Команда =  "UploadDirectory" ИЛИ Команда = "ВыгрузитьТаблицу" Тогда
		ТаблицаВыгрузки = ВходныеПараметры[1];
		Результат = ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                             ТаблицаВыгрузки, ВыходныеПараметры);
	// Загрузка таблицы из терминала сбора данных.
	ИначеЕсли Команда = "DownloadDocument" ИЛИ Команда = "ЗагрузитьТаблицу" Тогда
		Результат = ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Очищает загруженную ранее таблицу в терминале сбора данных.
	ИначеЕсли Команда = "ClearTable" ИЛИ Команда = "ОчиститьТаблицу" Тогда
		Результат = ОчиститьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ДИСПЛЕЯМИ ПОКУПАТЕЛЯ
	
	// Вывод строк на дисплей
	ИначеЕсли Команда = "DisplayText" ИЛИ Команда = "ВывестиСтрокуНаДисплейПокупателя" Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Очистка дисплея
	ИначеЕсли Команда = "ClearText" ИЛИ Команда = "ОчиститьДисплейПокупателя" Тогда
		Результат = ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получить параметры вывода
	ИначеЕсли Команда = "GetOutputOptions" ИЛИ Команда = "ПолучитьПараметрыВывода" Тогда
		Результат = ПолучитьПараметрыВывода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
	
	// Получить вес 
	ИначеЕсли Команда = "GetWeight" ИЛИ Команда = "ПолучитьВес" Тогда
		Результат = ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Установить вес тары 
	ИначеЕсли Команда = "Calibrate" ИЛИ Команда = "Тарировать" Тогда
		ВесТары = ?(ТипЗнч(ВходныеПараметры) = Тип("Массив") И ВходныеПараметры.Количество() > 0, ВходныеПараметры[0], 0);
		Результат = Тарировать(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ВЕСАМИ C ПЕЧАТЬЮ ЭТИКЕТОК
	
	// Выгрузка товаров в весы с печатью этикеток.
	ИначеЕсли Команда = "UploadGoods" ИЛИ Команда = "ВыгрузитьТовары" Тогда
		ТаблицаВыгрузки   = ВходныеПараметры[0];
		ЧастичнаяВыгрузка = ВходныеПараметры[1];
		Результат = ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ЧастичнаяВыгрузка, ВыходныеПараметры);
		
	// Очистить базу весов с печатью этикеток.
	ИначеЕсли Команда = "ClearBase" ИЛИ Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЭТИКЕТОК

	// Функция осуществляет печать этикеток на принтере этикеток.
	ИначеЕсли Команда = "PrintLabels" ИЛИ Команда = "ПечатьЭтикеток" Тогда
		ШаблонЭтикетки = ВходныеПараметры[0];
		МассивЭтикеток = ВходныеПараметры[1];
		Результат = ПечатьЭтикеток(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЭтикетки, МассивЭтикеток, ВыходныеПараметры);
	
	// Функция осуществляет инициализация принтера этикеток
	ИначеЕсли Команда = "InitializePrinter" ИЛИ Команда = "ИнициализацияПринтера" Тогда
		Результат = ИнициализацияПринтера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.';uk='Команда ""%Команда%"" не підтримується цим драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Размер пакета в элементах передаваемой информации в драйвер.
//
Функция РазмерПакетаПоУмолчанию() Экспорт
	
	РазмерПакета = 100;
	Возврат РазмерПакета;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляУстройствВводаДанных

// Функция осуществляет обработку внешних событий подключаемого оборудования.
//
Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	Если Событие = "Штрихкод" Или Событие = "Barcode" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanData");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(Штрихкод);
		ВыходныеПараметры[1].Добавить(Новый Массив());
		ВыходныеПараметры[1][1].Добавить(Данные);
		ВыходныеПараметры[1][1].Добавить(Штрихкод);
		ВыходныеПараметры[1][1].Добавить(0);
		Результат = Истина;
		
	ИначеЕсли Событие = "ДанныеКарты" Или Событие = "TracksData" Тогда
		
		КодКарты  = Данные;
		ПозицияПрефикса = 0;
		ПозицияСуффикса = 0;
		времКодКарты    = "";
		ДанныеКарты     = "";
		ПозицияДляЧтения = 1;
		
		ДанныеДорожек = Новый Массив();
		Для НомерДорожки = 1 По 3 Цикл
			ДанныеДорожек.Добавить("");
			ТекущаяДорожка = Параметры.ПараметрыДорожек[НомерДорожки - 1];
			Если ТекущаяДорожка.Использовать Тогда
				ПрефиксДрайвера = Символ(ТекущаяДорожка.Префикс);
				СуффиксДрайвера = Символ(ТекущаяДорожка.Суффикс);
				Если ПозицияДляЧтения < СтрДлина(КодКарты) Тогда
					ДанныеКарты = Сред(КодКарты, ПозицияДляЧтения);
					ПозицияПрефикса = Найти(ДанныеКарты, ПрефиксДрайвера);
					ПозицияСуффикса = Найти(ДанныеКарты, СуффиксДрайвера);
					
					времПозицияПрефикса = ?(ПозицияПрефикса = 0, 1, ПозицияПрефикса + СтрДлина(ПрефиксДрайвера));
					времДлинаДоСуффикса = ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты) + 1 - времПозицияПрефикса, ПозицияСуффикса - времПозицияПрефикса);
					времКодКарты = времКодКарты + Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса);
					ДанныеДорожек[НомерДорожки - 1] = Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса);
					ПозицияДляЧтения = ПозицияДляЧтения + ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты), ПозицияСуффикса + СтрДлина(СуффиксДрайвера) - 1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		КодКарты = времКодКарты;
		
		ВыходныеПараметры.Добавить("TracksData");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(КодКарты);
		ВыходныеПараметры[1].Добавить(Новый Массив);
		ВыходныеПараметры[1][1].Добавить(Сред(Данные,2));
		ВыходныеПараметры[1][1].Добавить(ДанныеДорожек);
		ВыходныеПараметры[1][1].Добавить(0);
		ВыходныеПараметры[1][1].Добавить(МенеджерОборудованияВызовСервера.РасшифроватьКодМагнитнойКарты(ДанныеДорожек, Параметры.ПараметрыДорожек));
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВысокогоУровня

// Функция осуществляет открытие смены.
//
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	// Заполнение выходных параметров.
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	// ВебЧек ПРРО +
	
	ПараметрыСостояния = "";
	НомерСмены         = 0;
	НомерДокумента     = 0;
	ВходныеПараметры = "";
	
	// Ветка на новый стандарт 2.5. Поддержка команды драйвера "ОткрытьСмену".
	
	Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
		ПараметрыОперации  = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
		Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
		Попытка
			Если не Результат Тогда
				//ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния);
				//ФискальныеДанныеСтруктура.СтатусСмены   = 2; // Открыта
				//ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
				Результат = Ложь;
		
				ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("" );
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

				
			КонецЕсли;
		Исключение
			Результат = Ложь;
						ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьСмену>.'")+ Символы.ПС );
			
			Возврат Результат;
		КонецПопытки;
		
		
		
	КонецЕсли;
	// ВебЧек ПРРО +
	
	
	// Ветка на новый стандарт 1.4. Поддержка команды драйвера "ОткрытьСмену".
	// ВебЧек ПРРО +
	
	Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 1004 и ПараметрыПодключения.РевизияИнтерфейса < 2004 Тогда
		// ВебЧек ПРРО -
		
		Попытка
			Ответ = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			КонецЕсли
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет печать чека.
//
Функция ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ШаблонЧека = МенеджерОборудованияКлиентПереопределяемый.СформироватьШаблонЧека(ВходныеПараметры);
	Возврат ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЧека, ВыходныеПараметры);
	
КонецФункции

// Осуществляет печать чека по шаблону.
//
Функция ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	       
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		Возврат МенеджерОборудованияКлиентПереопределяемый.ПечатьЧекаПоШаблону(ПодключаемоеОборудованиеУниверсальныйДрайверКлиент,
			ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
			
	ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		ОбщиеПараметры = ВходныеПараметры[0];
		ПозицииЧека    = ВходныеПараметры[1];
		ТаблицаОплат   = ВходныеПараметры[2];
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32); 
		ТекстЧека = МенеджерОборудованияКлиентПереопределяемый.СформироватьТексНефискальногоЧека(ШиринаСтроки, ОбщиеПараметры, ПозицииЧека, ТаблицаОплат);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
		
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
КонецФункции

// Осуществляет аннулирование чека.
//
Функция АннулироватьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВходныеПараметры, ВыходныеПараметры) 
	
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		ВремВходныеПараметры = Новый Массив();  
		ВремВходныеПараметры.Добавить(Неопределено);
		ВремВходныеПараметры.Добавить(Неопределено);
		ВремВходныеПараметры.Добавить(ВходныеПараметры);
		
		ТекстЧека = НСтр("ru='ЧЕК АННУЛИРОВАН';uk='ЧЕК АНУЛЬОВАНО'") ;
		ШаблонЧека = МенеджерОборудованияКлиентПереопределяемый.СформироватьШаблонЧека(ВремВходныеПараметры, ТекстЧека);
		Результат = ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЧека, ВыходныеПараметры);
		
	ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
		Если Результат Тогда
			Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
		
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь; 
	КонецЕсли;
	
	Возврат Результат;           
	
КонецФункции

// Осуществляет печать текста.
//
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	   
	Результат  = Истина;  
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		// Открываем документ
		Результат = ОткрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		// Печатаем строки чека
		Если Результат Тогда
			Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
				ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
				Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
			 	Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
					Результат = ЗакрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
					Результат = ОткрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
				Иначе
					Если НЕ НапечататьСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыделеннаяСтрока, ВыходныеПараметры) Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Закрываем документ
		Если Результат Тогда
			Результат = ЗакрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		// ВебЧек ПРРО +
		Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
		Результат = Истина;	
	иначе
		// ВебЧек ПРРО -

		// Открываем чек
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);
		// Печатаем строки чека
		Если Результат Тогда
			Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
				ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
				Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
					ТаблицаОплат = Новый Массив();
					Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
					Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);
				Иначе
					Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
					                                     ВыделеннаяСтрока, ВыходныеПараметры) Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Закрываем чек
		Если Результат Тогда
			ТаблицаОплат = Новый Массив();
			Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
		КонецЕсли;
		КонецЕсли;

	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхУстройств

// Функция осуществляет открытие нового чека.
//
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьЧек(ПараметрыПодключения.ИДУстройства, ФискальныйЧек, ТипЧека, Истина, НомерЧека, НомерСмены);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(0); // Номер документа
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьЧек>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет закрытие ранее открытого чека.
//
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	СуммаНаличнойОплаты     = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;
	СуммаБезналичнойОплаты3 = 0;
	
	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда
			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ЗакрытьЧек(ПараметрыПодключения.ИДУстройства,
		СуммаНаличнойОплаты, СуммаБезналичнойОплаты1, СуммаБезналичнойОплаты2, СуммаБезналичнойОплаты3);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьЧек>.';uk='Помилка виклику методу <ОбъектДрайвера.ЗакрытьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену ранее открытого чека.
//
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		СтрокаТекста = НСтр("ru='ЧЕК АННУЛИРОВАН';uk='ЧЕК АНУЛЬОВАНО'");  
		НапечататьСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);   
		Результат = ЗакрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	Иначе
		
		Попытка
			ОбъектДрайвера.ОтменитьЧек(ПараметрыПодключения.ИДУстройства);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьЧек>.';uk='Помилка виклику методу <ОбъектДрайвера.ОтменитьЧек>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;   
	
КонецФункции

// Функция осуществляет снятие отчета без гашения.
//
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		Если ВходныеПараметры = Неопределено Тогда
			ВходныеПараметры = Новый Массив();        
			ВходныеПараметры.Добавить(4);      // 1 - Тип чека (0-продажа, 1-возврат, 2-внесение, 3-выемка, 4-отчет без гашения, 5-отчет с гашением) 
			ВходныеПараметры.Добавить(Истина); // 2 - Признак фискального чека
		ИначеЕсли ВходныеПараметры.Количество() > 0 Тогда
			ВходныеПараметры[1] = 4;
		КонецЕсли;
		ВремВходныеПараметры = Новый Массив();  
		ВремВходныеПараметры.Добавить(Неопределено);
		ВремВходныеПараметры.Добавить(Неопределено);
		ВремВходныеПараметры.Добавить(ВходныеПараметры);
		
		ТекстЧека = НСтр("ru='НЕ ФИСКАЛЬНЫЙ РЕЖИМ';uk='НЕ ФІСКАЛЬНИЙ РЕЖИМ'");
		ШаблонЧека = МенеджерОборудованияКлиентПереопределяемый.СформироватьШаблонЧека(ВремВходныеПараметры, ТекстЧека);
		Результат = ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЧека, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
		
	Иначе
		
		Попытка
					// ВебЧек ПРРО +
			Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
					
					ПараметрыОперации  = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
				Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ПараметрыОперации);
				
						
					иначе
			Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);

						
		
				КонецЕсли;

		
		// ВебЧек ПРРО -

		
					Если НЕ Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			Иначе
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Функция осуществляет снятие отчета с гашением.
//
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		Если ВходныеПараметры = Неопределено Тогда
			ВходныеПараметры = Новый Массив();        
			ВходныеПараметры.Добавить(5);      // 1 - Тип чека (0-продажа, 1-возврат, 2-внесение, 3-выемка, 4-отчет без гашения, 5-отчет с гашением) 
			ВходныеПараметры.Добавить(Истина); // 2 - Признак фискального чека
		ИначеЕсли ВходныеПараметры.Количество() > 0 Тогда
			ВходныеПараметры[1] = 5;
		КонецЕсли;
		ВремВходныеПараметры = Новый Массив();  
		ВремВходныеПараметры.Добавить(Неопределено);
		ВремВходныеПараметры.Добавить(Неопределено);
		ВремВходныеПараметры.Добавить(ВходныеПараметры);
		
		ТекстЧека = НСтр("ru='НЕ ФИСКАЛЬНЫЙ РЕЖИМ';uk='НЕ ФІСКАЛЬНИЙ РЕЖИМ'");
		ШаблонЧека = МенеджерОборудованияКлиентПереопределяемый.СформироватьШаблонЧека(ВремВходныеПараметры, ТекстЧека);
		Результат = ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЧека, ВыходныеПараметры);
		Если Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
		
	Иначе
		// ВебЧек ПРРО +
		
		Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
			
			ПараметрыСостояния = "";
			НомерСмены         = 0;
			НомерДокумента     = 0;
			ВходныеПараметры = "";
			
			// Ветка на новый стандарт 2.5. Поддержка команды драйвера "ОткрытьСмену".
			
			Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
				ПараметрыОперации  = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
				Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
				Попытка
					Если не Результат Тогда
						//ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния);
						//ФискальныеДанныеСтруктура.СтатусСмены   = 2; // Открыта
						//ФискальныеДанныеСтруктура.НомерСменыККТ = НомерСмены;
						Результат = Ложь;
						ПоследняяОшибка = ""; 
						
						Результат = ОбъектДрайвера.ПолучитьОшибку (ПоследняяОшибка);
						
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьСмену>.'")+ Символы.ПС + ПоследняяОшибка);
						
						
					КонецЕсли;
				Исключение
					Результат = Ложь;
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьСмену>.'")+ Символы.ПС + ОписаниеОшибки());
					
					Возврат Результат;
				КонецПопытки;
				
				
				
			КонецЕсли;
			
			
			
		иначе
			// ВебЧек ПРРО -
			
			
			Попытка
				Результат = ОбъектДрайвера.НапечататьОтчетСГашением(ПараметрыПодключения.ИДУстройства);
				Если НЕ Результат Тогда
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Иначе
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			Исключение
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетСГашением>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетСГашением>.'") + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// ВебЧек ПРРО +

// Функция осуществляет фискализацию чека.
//
Функция ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	ПЕрем РезультатСтатус;
	Результат = Истина;
	ВходныеПараметрыСтатус ="";
	ВыходныеПараметрыСтату ="";
	РезультатСтатус = "";
	
	ДатаСеанса = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		
		ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеФискализацииЧека(ВходныеПараметры, ПараметрыПодключения);
		Если НЕ ПараметрыФискализации.Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
			Результат = Ложь;  
			Возврат Результат;
		КонецЕсли;
		
		Попытка
			Если ПараметрыФискализации.РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.Электронно, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML); 
			ИначеЕсли ПараметрыФискализации.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5)
				НомерСмены ="";
				НомерЧека ="";
				ВыходныеПараметрыСтатус = Новый Массив();
				ВыходныеПараметрыСтатус.Добавить(НомерСмены);
				ВыходныеПараметрыСтатус.Добавить(НомерЧека);
				//		ИначеЕсли ПодключенноеУстройство.ТипОборудованияИмя = "ККТ" Тогда
				ВходныеПараметрыСтатус = Новый Массив();
				
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.Электронно, 
				ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
				//РезультатСтатус = ПолучитьТекущееСостояние(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметрыСтатус, ВыходныеПараметрыСтатус);
				//    РезультатСтатус="";
				
			Иначе 
				Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор';uk='Адміністратор'"));
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Кассир, ПараметрыФискализации.Электронно, 
				ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.НомерЧекаККТ, ПараметрыФискализации.НомерСменыККТ, ПараметрыФискализации.ФискальныйПризнак, ПараметрыФискализации.АдресСайтаПроверки); 
			
			КонецЕсли;
			ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
		Исключение

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>.';uk='Помилка виклику методу <ОбъектДрайвера.СформироватьЧек>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		//
		Если Результат Тогда  
		//	МенеджерОборудованияВызовСервера.ОбработатьДанныеФискализацииЧека(ПараметрыФискализации);
		//	ВыходныеПараметры.Очистить();
		//	ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерСменыККТ);
		//	ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерЧекаККТ);
		//	ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		//	ВыходныеПараметры.Добавить(ПараметрыФискализации.ДатаВремяЧека);
		//	ВыходныеПараметры.Добавить(ПараметрыФискализации.ФискальныйПризнак);
		//	ВыходныеПараметры.Добавить(ПараметрыФискализации.АдресСайтаПроверки);
		//	ВыходныеПараметры.Добавить(ПараметрыФискализации.РегистрационныйНомерККТ);
		//	ВыходныеПараметры.Добавить(ПараметрыФискализации.ДанныеЧекаXML);
		//	ВыходныеПараметры.Добавить(ПараметрыФискализации);
		//	Если (ПараметрыФискализации.Отправляет1СSMS Или ПараметрыФискализации.Отправляет1СEmail) Тогда
		//		ПокупательEmail = ?(ВходныеПараметры.Отправляет1СEmail, ВходныеПараметры.ПокупательEmail, Неопределено);
		//		ПокупательНомер = ?(ВходныеПараметры.Отправляет1СSMS  , ВходныеПараметры.ПокупательНомер, Неопределено);
		//		ВходныеПараметры.НомерСмены = ПараметрыФискализации.НомерСменыККТ;
		//		ВходныеПараметры.НомерЧека  = ПараметрыФискализации.НомерЧекаККТ;
		//		ВходныеПараметры.Вставить("ФискальныйПризнак"      , ПараметрыФискализации.ФискальныйПризнак);
		//		ВходныеПараметры.Вставить("АдресСайтаПроверки"     , ПараметрыФискализации.АдресСайтаПроверки);
		//		ВходныеПараметры.Вставить("РегистрационныйНомерККТ", ПараметрыФискализации.РегистрационныйНомерККТ);
		//		МенеджерОборудованияКлиентПереопределяемый.НачатьОтправкуЭлектронногоЧека(ВходныеПараметры, ПараметрыФискализации.ТекстСообщения, ПокупательEmail, ПокупательНомер);
		//	КонецЕсли
	Иначе

			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
		
		
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ШаблонЧека = МенеджерОборудованияКлиент.СформироватьШаблонЧека(ВходныеПараметры, , ПараметрыПодключения.ТипОборудования);
		ОбщиеПараметры = ШаблонЧека[0];
		ВходныеПараметры[0].НефискальныеДокументы = ОбщиеПараметры.НефискальныеДокументы;
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстДокумента = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 0, ШаблонЧека);
		
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстДокумента, ВыходныеПараметры);
		Если Результат Тогда
			
			НомерЧека = 1;
			Если ВходныеПараметры <> Неопределено Тогда
				ОбщиеПараметры = ВходныеПараметры[0];
				НомерЧека = ОбщиеПараметры.НомерЧека;
			КонецЕсли;
			
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(ДатаСеанса);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции

Функция ПолучитьТекущееСостояние(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
	
	
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	
	Попытка
		Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
		Иначе
			Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены, ПараметрыСостояния);
		КонецЕсли;
	
		Если НЕ Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			Если РевизияИнтерфейса >= 3000 Тогда // Версия стандарта 3.0 (ОФД 1.1)
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
				НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
				НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
				СтатусСмены    = ФискальныеДанныеСтруктура.СтатусСмены;
			Иначе
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСостоянияИзXMLПакета(ПараметрыСостояния);
			КонецЕсли;
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерДокумента);
			ВыходныеПараметры.Добавить(СтатусСмены); 
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
			ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
			ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
			ЗаводскойНомерФН = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
			ВыходныеПараметры.Добавить(ЗаводскойНомерФН); 
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьТекущееСостояние>.';uk='Помилка виклику методу <ОбъектДрайвера.ПолучитьТекущееСостояние>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// ВебЧек ПРРО -


// Функция осуществляет печать фискальной строки.
//
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	Наименование, Количество, Цена, Сумма,
	НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Экспорт
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьФискСтроку(ПараметрыПодключения.ИДУстройства, Наименование, Количество, Цена,
		Сумма, НомерСекции, СтавкаНДС,ДопРеквизиты);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьФискСтроку>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьФискСтроку>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать нефискальной строки.
//
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьНефискСтроку>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьНефискСтроку>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы.
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		// Фискальные регистратор
		Попытка
			
			// ВебЧек ПРРО +
							Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
					
					ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеИнкасации(ВходныеПараметры, ПараметрыПодключения, ТипИнкассации);
					Если НЕ ПараметрыФискализации.Результат Тогда
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
						Результат = Ложь;  
						Возврат Результат;
					КонецЕсли;
					
					Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML,
					?(ТипИнкассации = 1, Сумма, -Сумма));
				ИНаче
					
					Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства,
					?(ТипИнкассации = 1, Сумма, -Сумма));
					
					
				КонецЕсли;
				
			// ВебЧек ПРРО -
				
				
				
				Если НЕ Результат Тогда
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Иначе
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			Исключение
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>.'") + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		ИначеЕсли ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
			
			Если ВходныеПараметры = Неопределено Тогда
				ВходныеПараметры = Новый Массив();        
				ВходныеПараметры.Добавить(?(ТипИнкассации = 1, 2, 3)); 
				ВходныеПараметры.Добавить(Истина); // Признак фискального чека.
			ИначеЕсли ВходныеПараметры.Количество() > 1 Тогда
				ВходныеПараметры[0] = ?(ТипИнкассации = 1, 2, 3);
				ВходныеПараметры[1] = Сумма;
			КонецЕсли;
			
			ВремВходныеПараметры = Новый Массив();  
			ВремВходныеПараметры.Добавить(Неопределено);
			ВремВходныеПараметры.Добавить(Неопределено);
			ВремВходныеПараметры.Добавить(ВходныеПараметры);
			
			ТекстЧека = НСтр("ru='СУММА =';uk='СУМА ='") + Символы.НПП + Формат(Сумма, "ЧРД=,;ЧЦ=10;ЧДЦ=2;ЧН=0,00;ЧГ=0");
			ШаблонЧека = МенеджерОборудованияКлиентПереопределяемый.СформироватьШаблонЧека(ВремВходныеПараметры, ТекстЧека);
			Результат = ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЧека, ВыходныеПараметры);
			
			Если Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
			КонецЕсли;
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
			Результат = Ложь;  
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Функция осуществляет печать штрихкода.
	//
	Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода2, ШтрихКод, ВыходныеПараметры) Экспорт
		
		Результат = Истина;
		
		Попытка
			Ответ = ОбъектДрайвера.НапечататьШтрихКод(ПараметрыПодключения.ИДУстройства, ТипШтрихКода2, ШтрихКод);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьШтрихКод>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьШтрихКод>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	// Функция осуществляет открытие денежного ящика.
	//
	Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
		
		Результат = Истина;
		
		Попытка
			Ответ = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьДенежныйЯщик>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьДенежныйЯщик>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	// Функция получает ширину строки в символах.
	//  
	Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт 
		
		Результат = Истина;
		ШиринаСтроки = 0;
		
		Попытка
			Ответ = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
			Иначе
				ВыходныеПараметры.Очистить();  
				ВыходныеПараметры.Добавить(ШиринаСтроки);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьШиринуСтроки>.';uk='Помилка виклику методу <ОбъектДрайвера.ПолучитьШиринуСтроки>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	
	// Функция осуществляет печать периодического отчёта по датам.
	//
	Функция НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
		
		Результат = Истина;
			// ВебЧек ПРРО +
			Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
					
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить("Для получения периодического отчета , используйте налаштування прро > періодичний звіт");
						Результат = Ложь;  
						Возврат Результат;
		
				КонецЕсли;

		
		// ВебЧек ПРРО -

		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать периодического отчета по датам, с даты ';uk='Друк періодичного звіту по датах, з дати '") +
		Формат(ВходныеПараметры[0], "ДФ=dd.MM.yyyy") +
		НСтр("ru=' по дату ';uk=' за дату '") +
		Формат(ВходныеПараметры[1], "ДФ=dd.MM.yyyy") );
		
		// Заполнение выходных параметров
		ВыходныеПараметры.Добавить(1);
		ВыходныеПараметры.Добавить(1);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(ТекущаяДата());
		
		Возврат Результат;
		
	КонецФункции
	
	// Функция осуществляет печать периодического отчёта по номерам дневных отчетов.
	//
	Функция НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
		
		Результат = Истина;
				// ВебЧек ПРРО +
			Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
					
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить("Переодический отчет по номерам не поддерживается ПРРО");
						Результат = Ложь;  
						Возврат Результат;
		
				КонецЕсли;

		
		// ВебЧек ПРРО -

		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать периодического отчета по номерам, с номера ';uk='Друк періодичного звіту за номерами, з номеру'") +
		ВходныеПараметры[0] +
		НСтр("ru=' по номер ';uk=' за номер '") +
		ВходныеПараметры[1]);
		
		// Заполнение выходных параметров
		ВыходныеПараметры.Добавить(1);
		ВыходныеПараметры.Добавить(1);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(ТекущаяДата());
		
		Возврат Результат;
		
	КонецФункции
	
	// Функция осуществляет печать нулевого чека.
	//
	Функция НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
		
		
		ТаблицаОплат = Новый Массив();
		
	
		
		Результат  = Истина;
		
		// ВебЧек ПРРО +
			Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
					
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить("Команда не поддерживает ПРРО");
						Результат = Ложь;  
						Возврат Результат;
		
				КонецЕсли;

		
		// ВебЧек ПРРО -

		
		
		
		// Открываем чек
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Истина, ВыходныеПараметры);
		
		// Печатаем строки чека   
		Если Результат Тогда
			ОшибкаПриПечатиСтроки = Ложь;
			
			Если НЕ ОшибкаПриПечатиСтроки Тогда
				// Закрываем чек
				Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);	
			Иначе
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Функция осуществляет печать отчёта о проданных товарах.
	//
	Функция НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
		
		Результат = Истина;
				// ВебЧек ПРРО +
			Если ПараметрыПодключения.Свойство("РевизияИнтерфейса") И ПараметрыПодключения.РевизияИнтерфейса > 2004 Тогда
					
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить("Переодическиф отчет разрабатывается в ПРРО");
						Результат = Ложь;  
						Возврат Результат;
		
				КонецЕсли;

		
		// ВебЧек ПРРО -

		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать отчета о проданных товарах';uk='Друк звіту про продані товари'"));
		
		// Заполнение выходных параметров
		ВыходныеПараметры.Добавить(1);
		ВыходныеПараметры.Добавить(1);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(ТекущаяДата());
		
		Возврат Результат;
		
	КонецФункции
	
	#КонецОбласти


#Область ПроцедурыИФункцииОбщиеДляПринтеровЧеков

// Функция осуществляет открытие нового документа.
//
Функция ОткрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьДокумент(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено); // Номер документа
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьДокумент>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьДокумент>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет закрытие документа.
//
Функция ЗакрытьДокумент(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ЗакрытьДокумент(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьДокумент>.';uk='Помилка виклику методу <ОбъектДрайвера.ЗакрытьДокумент>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать строки. 
//
Функция НапечататьСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьСтроку>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьСтроку>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляЭквайринговыхТерминалов

// Функция возвращает, будет ли печать слип чеков на терминале.
//
Функция ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ПечатьКвитанцийНаТерминале();
		ВыходныеПараметры.Очистить();  
		ВыходныеПараметры.Добавить(Ответ);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПечатьКвитанцийНаТерминале>.';uk='Помилка виклику методу <ОбъектДрайвера.ПечатьКвитанцийНаТерминале>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет сверку итогов по картам.
//
Функция ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	Ответ     = Ложь;
	СлипЧек   = "";

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Сверка итогов';uk='Звірка підсумків'");

	Попытка
		Ответ = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИтогиДняПоКартам>.';uk='Помилка виклику методу <ОбъектДрайвера.ИтогиДняПоКартам>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет авторизацию/оплату по карте.
//
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, НомерКарты, НомерЧека, ВыходныеПараметры)

	Результат      = Истина;
	КодRRN         = "";
	КодАвторизации = "";
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Оплатить';uk='Сплатити'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.';uk='Не коректна сума операції.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОплатитьПлатежнойКартой>.';uk='Помилка виклику методу <ОбъектДрайвера.ОплатитьПлатежнойКартой>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет возврат платежа по карте.
//
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = Истина;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = "";
	СлипЧек        = "";
	НомерКарты     = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Вернуть платеж';uk='Повернути платіж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.';uk='Не коректна сума операції.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте>.';uk='Помилка виклику методу <ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену платежа по карте.
//
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = Истина;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = "";
	СлипЧек        = "";
	НомерКарты     = "";

	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить платеж';uk='Скасувати платіж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.';uk='Не коректна сума операції.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте>.';uk='Помилка виклику методу <ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
//
Функция АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Ответ = Ложь;
	Результат = Истина;

	Попытка
		Ответ = ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.АварийнаяОтменаОперации>.';uk='Помилка виклику методу <ОбъектДрайвера.АварийнаяОтменаОперации>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет преавторизацию по карте.
// 
Функция ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                        Сумма, НомерКарты, НомерЧека, ВыходныеПараметры)
	Результат      = Истина;
	КодRRN         = "";
	КодАвторизации = "";
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Преавторизовать платеж';uk='Преавторизовати платіж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = Ложь;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.';uk='Не коректна сума операції.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = Ложь;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте>.';uk='Помилка виклику методу <ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте>.'") + Символы.ПС + ОписаниеОшибки());
	 КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену преавторизации по карте.
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                               Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат      = Истина;
	КодАвторизации = "";
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить преавторизацию';uk='Скасувати преавторизацію'");
	
	Попытка
		Ответ = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте>.';uk='Помилка виклику методу <ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойкарте>.'") + Символы.ПС + ОписаниеОшибки());
	 КонецПопытки;
	 
	 Возврат Результат;
	 
 КонецФункции

// Функция осуществляет завершение преавторизации по карте.
//
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                                Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат      = Истина;
	КодАвторизации = "";
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Завершить преавторизацию';uk='Завершити преавторизацію'");
	
	Попытка
		Ответ = ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = Ложь; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ';uk='Відмова'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте>.';uk='Помилка виклику методу <ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойкарте>.'") + Символы.ПС + ОписаниеОшибки());
	 КонецПопытки;
	 
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляДисплеевПокупателя

// Функция осуществляет вывод списка строк на дисплей покупателя.
//
Функция ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>.';uk='Помилка виклику методу <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет очистку дисплея покупателя.
//
Функция ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьДисплейПокупателя>.';uk='Помилка виклику методу <ОбъектДрайвера.ОчиститьДисплейПокупателя>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры вывода на дисплей покупателя.
//
Функция ПолучитьПараметрыВывода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	СтолбцовНаДисплее = 20; 
	СтрокНаДисплее    = 2;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, СтолбцовНаДисплее, СтрокНаДисплее);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(СтолбцовНаДисплее);
			ВыходныеПараметры.Добавить(СтрокНаДисплее);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыВывода>.';uk='Помилка виклику методу <ОбъектДрайвера.ПолучитьПараметрыВывода>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляТерминаловСбораДанных

// Функция осуществляет выгрузку данных в терминал сбора данных.
//
Функция ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ВыходныеПараметры)

	Результат = Истина;

	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.';uk='Немає даних для вивантаження.'"));
		Возврат Ложь;
	КонецЕсли;
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	СтатусПакета     = "first";
	
	ТекущийПроцент = 0;
	Состояние(НСтр("ru='Инициализация выгрузки...';uk='Ініціалізація вивантаження...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);
	
	МассивТоваров = Новый Массив;



	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		СтрокаМассиваТСД = Новый СписокЗначений; 
		СтрокаМассиваТСД.Добавить(Позиция[0].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[1].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[2].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[3].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[4].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[5].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[6].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[7].Значение);
		МассивТоваров.Добавить(СтрокаМассиваТСД);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  

			
			ДанныеДляВыгрузки = МенеджерОборудованияВызовСервера.СформироватьТаблицуТоваровТСД(МассивТоваров);
			
			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;
			
			Ответ = ОбъектДрайвера.ВыгрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;
			
			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;
			
			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			Состояние(НСтр("ru='Выгрузка данных...';uk='Вивантаження даних...'"), Окр(ТекущийПроцент));
			 
		 КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет загрузку таблицы из терминала сбора данных.
//
Функция ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;
	ДанныеЗагрузки = "";
	Состояние(НСтр("ru='Загрузка данных...';uk='Завантаження даних...'"));
	
	Попытка
		
		Ответ = ОбъектДрайвера.ЗагрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			Возврат Результат;
		КонецЕсли;      
		
		Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
			МассивДанных = МенеджерОборудованияВызовСервера.ПолучитьТаблицуТоваровТСД(ДанныеЗагрузки);
		КонецЕсли;
	
		Если ПустаяСтрока(ДанныеЗагрузки) Или (МассивДанных.Количество() = 0) Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для загрузки.';uk='Немає даних для завантаження.'"));
		Иначе
			ВыходныеПараметры.Добавить(МассивДанных);
		КонецЕсли;   
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗагрузитьТаблицу>.';uk='Помилка виклику методу <ОбъектДрайвера.ЗагрузитьТаблицу>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Очищает загруженную ранее таблицу товаров в ТСД.
//
Функция ОчиститьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Состояние(НСтр("ru='Выполнение операции...';uk='Виконання операції...'"));	
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьТаблицу(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьТаблицу>.';uk='Помилка виклику методу <ОбъектДрайвера.ОчиститьТаблицу>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляЭлектронныхВесов

// Функция осуществляет получение веса груза, расположенного на весах.
//
Функция ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	Вес = 0;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьВес(ПараметрыПодключения.ИДУстройства, Вес);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(Вес);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьВес>.';uk='Помилка виклику методу <ОбъектДрайвера.ПолучитьВес>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет установку веса тары на весах.
//
Функция Тарировать(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары = 0)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.УстановитьВесТары(ПараметрыПодключения.ИДУстройства, ВесТары);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.УстановитьВесТары>.';uk='Помилка виклику методу <ОбъектДрайвера.УстановитьВесТары>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВесовСПечатьюЭтикеток

// Функция осуществляет очистку базы товаров в весах с печатью этикеток.
//
Функция ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьТовары(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьТовары>.';uk='Помилка виклику методу <ОбъектДрайвера.ОчиститьТовары>.'") +  ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет выгрузку данных в весы с печатью этикеток.
//
Функция ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ЧастичнаяВыгрузка, ВыходныеПараметры)
	
	Результат = Истина;
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.';uk='Немає даних для вивантаження.'"));
		Возврат Ложь;
	КонецЕсли;
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	СтатусПакета     = "first";
	
	ТекущийПроцент = 0;
	Состояние(НСтр("ru='Инициализация выгрузки...';uk='Ініціалізація вивантаження...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);
	
	МассивТоваров = Новый Массив;
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		ВремНаименование = ?(Позиция.Свойство("Номенклатура"), Позиция.Номенклатура, "");
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		Если Позиция.Свойство("НаименованиеПолное") И Не ПустаяСтрока(Позиция.НаименованиеПолное) Тогда
			ВремНаименование = Позиция.НаименованиеПолное;
		КонецЕсли;
		
		СтрокаМассиваТоваров = Новый СписокЗначений; 
		СтрокаМассиваТоваров.Добавить(Число(Позиция.PLU));
		СтрокаМассиваТоваров.Добавить(Число(Позиция.Код));
		СтрокаМассиваТоваров.Добавить(ВремНаименование);
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("Цена"), Позиция.Цена, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ОписаниеТовара"), Позиция.ОписаниеТовара, ""));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("СрокХранения"), Позиция.СрокХранения, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ВесовойТовар"), Позиция.ВесовойТовар, Истина));
		МассивТоваров.Добавить(СтрокаМассиваТоваров);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			
			ДанныеДляВыгрузки = МенеджерОборудованияВызовСервера.СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(МассивТоваров);
			
			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;
			
			Ответ = ОбъектДрайвера.ВыгрузитьТовары(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;
			
			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;
			
			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			Состояние(НСтр("ru='Выгрузка данных...';uk='Вивантаження даних...'"), Окр(ТекущийПроцент));
			 
		 КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляПринтеровЭтикеток

// Функция осуществляет инициализация принтера этикеток.
//
Функция ИнициализацияПринтера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	Попытка
		Ответ = ОбъектДрайвера.ИнициализацияПринтера(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИнициализацияПринтера>.';uk='Помилка виклику методу <ОбъектДрайвера.ИнициализацияПринтера>.'") +  ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать этикеток на принтере этикеток.
//
Функция ПечатьЭтикеток(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЭтикетки, МассивЭтикеток, ВыходныеПараметры)

	Результат = Истина;

	Если МассивЭтикеток.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.';uk='Немає даних для вивантаження.'"));
		Возврат Ложь;
	КонецЕсли;

	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = МассивЭтикеток.Количество();
	СтатусПакета     = "first";

	ТекущийПроцент = 0;
	Состояние(НСтр("ru='Инициализация печати этикеток...';uk='Ініціалізація друку етикеток...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);

	МассивТоваров = Новый Массив;

	Для Каждого Позиция Из МассивЭтикеток  Цикл

		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;

		МассивТоваров.Добавить(Позиция);

		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;

		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			
			ДанныеДляВыгрузки = МенеджерОборудованияВызовСервера.СформироватьДанныеДляПринтераЭтикеток(МассивТоваров, ?(ТекущийПакет=1, ШаблонЭтикетки, Неопределено));
				
			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;

			Ответ = ОбъектДрайвера.ПечатьЭтикеток(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;

			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;

			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			Состояние(НСтр("ru='Печать этикеток...';uk='Друк етикеток...'"), Окр(ТекущийПроцент));

		 КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВсехТиповДрайверов

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим);
	
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>.';uk='Помилка виклику методу <ОбъектДрайвера.ТестУстройства>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет выполнение дополнительного действия для устройства.
//
Функция ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры)
	
	Результат  = Истина;
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.';uk='Помилка виклику методу <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена';uk='Не визначена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает описание установленного драйвера.
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена';uk='Не визначена'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционнаяБиблиотека  = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем версию драйвера
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
		ВыходныеПараметры[1] = ВерсияДрайвера;
		
		Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
			ТипОборудования = ПараметрыПодключения.ТипОборудования;
			// Предопределенный параметр с указанием типа драйвера.
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования) 
		КонецЕсли;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, 
										ОписаниеДрайвера, 
										ТипОборудования, 
										РевизияИнтерфейса, 
										ИнтеграционнаяБиблиотека, 
										ОсновнойДрайверУстановлен, 
										URLЗагрузкиДрайвера);
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционнаяБиблиотека;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьПараметры(ПараметрыДрайвера);
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		
		// Получаем дополнительные действия.
		ОбъектДрайвера.ПолучитьДополнительныеДействия(ДополнительныеДействия);
		ВыходныеПараметры[10] = ДополнительныеДействия;
	Исключение
		Результат = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера';uk='Помилка отримання опису драйвера'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Функция ОбработатьСтроку(СтрокаИсходная)
	
	СтрокаВозврата = СтрокаИсходная;
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"1С:","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"1с:","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"1C:","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"1c:","");
	
	Возврат СокрЛП(СтрокаВозврата);
	
КонецФункции
#КонецОбласти


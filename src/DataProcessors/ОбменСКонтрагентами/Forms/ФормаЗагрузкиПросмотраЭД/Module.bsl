
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭД = "";
	НаправлениеЭД = "";
	Если Параметры.Свойство("СтруктураЭД", СтруктураЭД) И ТипЗнч(СтруктураЭД) = Тип("Структура")
		И СтруктураЭД.Свойство("НаправлениеЭД", НаправлениеЭД) Тогда
		
		ЗагрузкаЭД = (НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
		
		СтруктураЭД.Свойство("ВладелецЭД", ДокументИБ);
		Если ЗагрузкаЭД Тогда
			СсылкаНаЗаполняемыйДокумент = "";
			Если СтруктураЭД.Свойство("СсылкаНаДокумент", СсылкаНаЗаполняемыйДокумент)
				И ЗначениеЗаполнено(СсылкаНаЗаполняемыйДокумент) Тогда
				СпособЗагрузкиДокумента = 1;
			КонецЕсли;
		КонецЕсли;
		ВыполнитьПросмотрЭДСервер(СтруктураЭД, Отказ);
	КонецЕсли;
	
	ЭлектронныйДокумент = Неопределено;
	Если Параметры.Свойство("ЭлектронныйДокумент", ЭлектронныйДокумент) Тогда
		ЗагрузкаЭД = Ложь;
		Параметры.Свойство("ВладелецЭД", ДокументИБ);
		ДанныеЭД = ФайлДанныхЭД(ЭлектронныйДокумент);
		Если ДанныеЭД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
			ТабличныйДокументФормы = ДанныеЭД;
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьВидимостьДоступностьПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзменитьВидимостьДоступность();
	
	Если ЭтоАдресВременногоХранилища(АдресСтруктурыРазбораЭД) И ЗначениеЗаполнено(РасширениеФайла) Тогда
		#Если ВебКлиент Тогда
			ПутьКФайлуПросмотра = АдресСтруктурыРазбораЭД;
		#Иначе
			ПутьКФайлуПросмотра = ПолучитьИмяВременногоФайла(РасширениеФайла);
			ДДФайла = ПолучитьИзВременногоХранилища(АдресСтруктурыРазбораЭД);
			ДДФайла.Записать(ПутьКФайлуПросмотра);
		#КонецЕсли
		Если СтрНайти("HTML PDF DOCX XLSX", ВРег(РасширениеФайла)) > 0 Тогда
			
			СформироватьТекстСлужебногоСообщения();
			
			Элементы.Панель.ТекущаяСтраница = Элементы.ПросмотрЭД;
			
		Иначе
			#Если НЕ ВебКлиент Тогда
				ЗапуститьПриложение(ПутьКФайлуПросмотра);
			#КонецЕсли
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	ОтключитьВыводКопияВерна = Истина;
	СкрытьДополнительныеДанные();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособЗагрузкиДокументаПриИзменении(Элемент)
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗагрузкиСправочникаПриИзменении(Элемент)
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	
	ОбработатьВыборТипаОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТиповСправочниковПриИзменении(Элемент)
	
	ОбработатьВыборТипаОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументИБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ДокументИБ = Неопределено Тогда
		ТекЭлемент = Неопределено;
		Если ЗначениеЗаполнено(ТипОбъекта) Тогда
			Для Каждого ЭлементСписка Из СписокТипов Цикл
				Если ТипОбъекта = ЭлементСписка.Представление Тогда
					ДокументИБ = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	ЗакрытьФорму = Истина;
	Если ЗагрузкаЭД И ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		
		ОчиститьСообщения();
		
		Если ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
			
			ЗагрузитьРеквизитыОрганизации();
			
		Иначе
			
			ЗагрузитьДокументЭДО(ЗакрытьФорму);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.КаталогТоваров") Тогда
		
		ЗагрузитьКаталогТоваров();
		
	КонецЕсли;
	
	Если ЗакрытьФорму Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	СкрытьДополнительныеДанные();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СоздатьОбъектыИБ(АдресВременногоХранилища, ОшибкаЗаписи)
	
	Перем ДеревоРазбора;
	
	СтруктураРазбора = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора) Тогда
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьДанныеОбъектаВБД(АдресВременногоХранилища)
	
	СтруктураРазбора = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора") Тогда
		ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(
										СтруктураРазбора.СтрокаОбъекта,
										СтруктураРазбора.ДеревоРазбора);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СопоставитьНоменклатуру(ОбработчикОповещения)
	
	ЗначениеВозврата = Неопределено;
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", ВидЭД);
	СтруктураЭД.Вставить("СпособОбменаЭД",		ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.БыстрыйОбмен"));
	СтруктураЭД.Вставить("Контрагент", 			Контрагент);
	СтруктураЭД.Вставить("ДанныеФайлаРазбора",	ДанныеФайлаРазбора);
	СтруктураЭД.Вставить("НаправлениеЭД",		ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
	СтруктураЭД.Вставить("ВладелецФайла",		?(СпособЗагрузкиДокумента = 0, Неопределено, ДокументИБ));
	
	СтруктураПараметров = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СтруктураЭД);
	Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
		ОткрытьФорму(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы,,,,, ОбработчикОповещения);
	Иначе
		ЗагрузитьДокументВИБ(Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДоступность()
	
	Если ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		Элементы.ЭлементСправочникаИБ.Доступность = (СпособЗагрузкиДокумента = 1);
		
	Иначе	
		Если ЗагрузкаЭД Тогда
			Элементы.ДокументИБ.Доступность = (СпособЗагрузкиДокумента = 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступностьПриСозданииНаСервере()
	
	Элементы.ГруппаСодержимоеДокумента.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если ЗагрузкаЭД Тогда
		
		Элементы.ГруппаКнопок.Видимость = Истина;
		Элементы.ГруппаГиперссылка.Видимость = Ложь;

		Если ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
			
			Заголовок = НСтр("ru='Загрузка данных из файла';uk='Завантаження даних з файлу'");
			
			Элементы.ГруппаНастроекСправочники.Видимость = Истина;
			Элементы.ГруппаНастроекДокументы.Видимость = Ложь;
		Иначе
			
			Заголовок = НСтр("ru='Загрузка документа из файла';uk='Завантаження документа з файлу'");
			
			Элементы.ГруппаНастроекСправочники.Видимость = Ложь;
			Элементы.ГруппаНастроекДокументы.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		Текст = НСтр("ru='Электронный документ';uk='Електронний документ'");
		Заголовок = Текст;
		Элементы.ГруппаНастроекСправочники.Видимость = Ложь;
		Элементы.ГруппаНастроекДокументы.Видимость = Ложь;
		Элементы.ГруппаКнопок.Видимость = Ложь;
		Элементы.ГруппаГиперссылка.Видимость = Истина;
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		Элементы.ГруппаПраво.Видимость = Ложь;
		Элементы.ТипОбъекта.Заголовок = НСтр("ru='Загрузить';uk='Завантажити'");
		ТипОбъекта = "Каталог товаров";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПросмотрЭДСервер(СтруктураЭД, Отказ)
	
	Перем ПерезаполняемыйДокумент, ДеревоРазбора, СтрокаОбъекта;
	
	ФайлПросмотра = Неопределено;
	ИмяФайлаКартинок = Неопределено;
	ФайлДопДанных = Неопределено;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураЭД.АдресХранилища);
	
	Если СтруктураЭД.ФайлАрхива Тогда
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", СтруктураЭД.УникальныйИдентификатор);
		ИмяФайлаАрхива = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанные.Записать(ИмяФайлаАрхива);
		
		УдалитьФайлы(ПапкаДляРаспаковки, "*");
		
		ЧтениеЗИП = Новый ЧтениеZIPФайла(ИмяФайлаАрхива);
		Попытка
			ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка архива ЭД';uk='Розпакування архіву ЕД'"),
			ТекстОшибки, ТекстСообщения);
			
			УдалитьФайлы(ИмяФайлаАрхива);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат;
		КонецПопытки;
		
		УдалитьФайлы(ИмяФайлаАрхива);
		
		// скопируем файл просмотра
		МассивФайловПросмотра = НайтиФайлы(ПапкаДляРаспаковки, "*.pdf", Истина);
		Если МассивФайловПросмотра.Количество() > 0 Тогда
			ФайлПросмотра = МассивФайловПросмотра[0];
		КонецЕсли;
		
		// Расшифровать файл с данными
		МассивФайлИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
		Если МассивФайлИнформации.Количество() > 0 Тогда
			ФайлИнформации = МассивФайлИнформации[0];
		КонецЕсли;
		
		МассивФайлКарточки = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
		Если МассивФайлКарточки.Количество() > 0 Тогда
			ФайлКарточки = МассивФайлКарточки[0];
		КонецЕсли;
		
		// скопируем файл просмотра
		МассивФайловКартинок = НайтиФайлы(ПапкаДляРаспаковки, "*.zip", Истина);
		Если МассивФайловКартинок.Количество() > 0 Тогда
			ФайлКартинок = МассивФайловКартинок[0];
			ИмяФайлаКартинок = ФайлКартинок.ПолноеИмя;
		КонецЕсли;
		
		Если ФайлКарточки = Неопределено Или ФайлИнформации = Неопределено Тогда
			
			ШаблонСообщения = НСтр("ru='Возникла ошибка при чтении данных из файла ""%1№"".';uk='Виникла помилка при читанні даних з файлу ""%1№"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.ИмяФайла);
			
			ШаблонСообщения = НСтр("ru='Файл ""%1"" не содержит электронных документов.';uk='Файл ""%1"" не містить електронних документів.'");
			ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураЭД.ИмяФайла);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Чтение ЭД.';uk='Читання ЕД.'"),
			ПредставлениеОшибки,
			ТекстСообщения);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		//Здесь необходимо прочитать файл и вместом "Новый Соответствие" написать функцию разбора файла 
		СоответствиеФайлПараметры = Новый Соответствие;
		
		Для Каждого ЭлементСоответствия Из СоответствиеФайлПараметры Цикл
			
			МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствия.Ключ, Истина);
			Если МассивФайловИсточник.Количество() > 0 Тогда
				
				Если МассивФайловИсточник[0].Расширение = ".zip" Тогда
					
					ПапкаДляРаспаковкиФайлаЭД = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
					ИмяФайлаАрхива = МассивФайловИсточник[0].ПолноеИмя;
					УдалитьФайлы(ПапкаДляРаспаковкиФайлаЭД, "*");
					
					ЧтениеЗИП = Новый ЧтениеZIPФайла(ИмяФайлаАрхива);
					Попытка
						ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковкиФайлаЭД);
					Исключение
						ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковкиФайлаЭД) Тогда
							ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка архива ЭД';uk='Розпакування архіву ЕД'"),
							ТекстОшибки, ТекстСообщения);
						
						УдалитьФайлы(ПапкаДляРаспаковкиФайлаЭД);
						Возврат;
					КонецПопытки;
					
					// скопируем файл просмотра
					МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковкиФайлаЭД, "*.xml", Истина);
				КонецЕсли;
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
				КопироватьФайл(МассивФайловИсточник[0].ПолноеИмя, ИмяФайла);
				
			КонецЕсли;
			
			ДопДанные = Неопределено;
			Если ЭлементСоответствия.Значение.Свойство("ДопДанные", ДопДанные) И ТипЗнч(ДопДанные) = Тип("Структура") Тогда
				
				ИмяФайлаДопДанных = Неопределено;
				Если ДопДанные.Свойство("ФайлДопДанных",ИмяФайлаДопДанных) И ЗначениеЗаполнено(ИмяФайлаДопДанных) Тогда
					
					МассивФайловДопДанных = НайтиФайлы(ПапкаДляРаспаковки, ИмяФайлаДопДанных, Истина);
					Если МассивФайловДопДанных.Количество() > 0 Тогда
						
						ФайлДопДанных = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
						КопироватьФайл(МассивФайловДопДанных[0].ПолноеИмя, ФайлДопДанных);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяФайла);
	КонецЕсли;

	СтруктураЭД.Свойство("СсылкаНаДокумент", ПерезаполняемыйДокумент);
	
	СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяФайла,
																				Перечисления.НаправленияЭД.Входящий,
																				ФайлДопДанных,
																				ИмяФайлаКартинок);
	ДвоичныеДанныеФайлаРазбора = Новый ДвоичныеДанные(ИмяФайла);
	ДанныеФайлаРазбора = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаРазбора, УникальныйИдентификатор);
	
	ДанныеЭД = Неопределено;
	
	Если ТипЗнч(СтруктураРазбора) = Тип("Структура") Тогда
		
		АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(СтруктураРазбора, УникальныйИдентификатор);
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ИД", СтруктураЭД.УникальныйИдентификатор);
		
		ДанныеЭД = ОбменСКонтрагентамиВнутренний.ПечатнаяФормаЭД(
			СтруктураРазбора, СтруктураЭД.НаправлениеЭД, ПараметрыПечати);
			
		ВидЭД = СтруктураРазбора.СтрокаОбъекта.ВидЭД;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		
		Если ЗагрузкаЭД Тогда
			Если (НЕ ЗначениеЗаполнено(ДокументИБ) ИЛИ СпособЗагрузкиДокумента = 0) И СтруктураРазбора <> Неопределено
					И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
					И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
				ОшибкаЗаписи = Ложь;
				СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Контрагент");
				Если СтрокаДерева <> Неопределено Тогда
					Контрагент = СтрокаДерева.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
			
			ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоВидуЭД(ВидЭД, СписокТипов);
			
			Для Каждого ТекЗначение Из СписокТипов Цикл
				
				ТекЭлемент = Элементы.ТипОбъекта.СписокВыбора.Добавить();
				ТекЭлемент.Значение = ТекЗначение.Представление;
				
				// Если реквизит ДокументИБ еще не заполнен и зачитано первое по списку значение, то заполним имеющимися данными:
				Если НЕ ЗначениеЗаполнено(ДокументИБ) И СписокТипов.Индекс(ТекЗначение) = 0 Тогда
					ТипОбъекта = ТекЗначение.Представление;
					ДокументИБ = ТекЗначение.Значение;
					ИмяОбъектаМетаданных = ТекЗначение.Значение.Метаданные().ПолноеИмя();
				КонецЕсли;
				
				Если ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
					Если ЗначениеЗаполнено(Контрагент) Тогда
						ДокументИБ = Контрагент;
						СпособЗагрузкиДокумента = 1;
					КонецЕсли;
				КонецЕсли;
				
				// Если в структуре параметров есть ссылка на (перезаполняемый) документ ИБ и его тип совпал с типом одного из значений
				// списка типов, то заполним этими данными соответствующие реквизиты формы.
				// Данное условие необходимо для корректной обработки ситуации, когда в качестве перезаполняемого документа, выбран
				// документ с типом не совпадающим ни с одним из доступных в списке или не совпадает с типом первого элемента списка.
				Если ЗначениеЗаполнено(ПерезаполняемыйДокумент) И ТипЗнч(ПерезаполняемыйДокумент) = ТипЗнч(ТекЗначение.Значение) Тогда
					ТипОбъекта = ТекЗначение.Представление;
					ДокументИБ = ПерезаполняемыйДокумент;
					ИмяОбъектаМетаданных = ТекЗначение.Значение.Метаданные().ПолноеИмя();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ПерезаполняемыйДокумент) Тогда
			
			ИмяСправочникаКонтрагенты = ИмяСправочника("Контрагенты");
			
			Если Не ЗначениеЗаполнено(ИмяСправочникаКонтрагенты) Тогда
				ИмяСправочникаКонтрагенты = "Контрагенты";
			КонецЕсли;
			
			Если ТипЗнч(ПерезаполняемыйДокумент) = Тип("СправочникСсылка."+ ИмяСправочникаКонтрагенты) Тогда
				Контрагент = ПерезаполняемыйДокумент;
			Иначе
				Если ПерезаполняемыйДокумент.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
					Контрагент = ПерезаполняемыйДокумент.Контрагент;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокументФормы = ДанныеЭД;
		ИсходныйТабличныйДокумент = ДанныеЭД;
		Элементы.ГруппаСодержимоеДокумента.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
		
	Иначе
		
		Если Не ФайлПросмотра = Неопределено Тогда
			
			
			ПутьКФайлу = ФайлПросмотра.ПолноеИмя;
			РасширениеФайла = СтрЗаменить(ФайлПросмотра.Расширение, ".", "");
			
			ДДФайла = Новый ДвоичныеДанные(ПутьКФайлу);
			
			// Передадим на клиента двоичные данные файла для просмотра:
			АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(ДДФайла, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
		УдалитьФайлы(ПапкаДляРаспаковки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяСправочника(ИмяСправочника)
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ИмяСправочника);
	
	Возврат ИмяСправочника;
	
КонецФункции

&НаСервере
Функция НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяОбъектаПоиска)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураПоиска = Новый Структура("Реквизит", ИмяОбъектаПоиска);
	МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ИндексСтрокиКонтрагента = МассивСтрок[0].ЗначениеРеквизита;
		СтруктураПоиска = Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента);
		МассивСтрок = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДерева = МассивСтрок[0];
			ВозвращаемоеЗначение = СтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура СформироватьДокументИБ(ДанныеФормы, ТекстСообщения, Записывать = Ложь, ОбновитьСтруктуруРазбора = Ложь, Отказ = Ложь)
	
	Перем СтрокаОбъекта, ДеревоРазбора;
	
	// В том случае если номенклатура уже была сопоставлена - пользуемся временным хранилищем,
	// если сопоставляли руками - формируем структуру разбора заново. 
	
	Если Не ОбновитьСтруктуруРазбора
		И ЗначениеЗаполнено(АдресСтруктурыРазбораЭД)
		И ЭтоАдресВременногоХранилища(АдресСтруктурыРазбораЭД) Тогда
		
		СтруктураРазбора = ПолучитьИзВременногоХранилища(АдресСтруктурыРазбораЭД);
			
	Иначе
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаРазбора);
		ДвоичныеДанныеФайла.Записать(ИмяФайла);
		
		СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяФайла,
																					Перечисления.НаправленияЭД.Входящий);
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
	Если СтруктураРазбора <> Неопределено И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
		И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
		// Если на форме указан контрагент, не совпадающий с контрагентом в дереве разбора (найденный по реквизитам из ЭД),
		// то заменим контрагента в дереве на контрагента с формы.
		СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Контрагент");
		Если СтрокаДерева.СсылкаНаОбъект <> Контрагент Тогда
			СтрокаДерева.СсылкаНаОбъект = Контрагент;
			// Замена партнера.
			Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				СтрокаДереваПартнер = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Партнер");
				Если СтрокаДереваПартнер <> Неопределено Тогда
					РеквизитыПартнера = Новый Структура();
					РеквизитыПартнера.Вставить("Контрагент", Контрагент);
					ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
					СтрокаДереваПартнер.СсылкаНаОбъект = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		ДокументСсылка = ?(СпособЗагрузкиДокумента = 1, ДокументИБ, Неопределено);
		Попытка
			КонтрагентСсылка = ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора,
				ДокументСсылка, Записывать);
				
			ДанныеФормы = КонтрагентСсылка.Ссылка;
			ДокументИБСформирован = Истина;
		Исключение
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru='%1.
                                    |%2'
                                    |;uk='%1.
                                    |%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ИнформацияОбОшибке().Описание,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноЗагрузитьЭДВида(Знач ВидЭД)
	
	МожноЗагрузить = Истина;
	МассивАктуальныхВидовЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	Если МассивАктуальныхВидовЭД.Найти(ВидЭД) = Неопределено Тогда
		МожноЗагрузить = Ложь;
	КонецЕсли;
	
	Возврат МожноЗагрузить;
	
КонецФункции

&НаСервере
Функция ФайлДанныхЭД(СсылкаНаЭД, Знач ИмяФайлаПодчиненногоЭД = Неопределено)
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ИмяФайлаПодчиненногоЭД", ИмяФайлаПодчиненногоЭД);
	ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(СсылкаНаЭД, ПараметрыПросмотра);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборТипаОбъекта()
	
	Если ЗначениеЗаполнено(ТипОбъекта) Тогда
		Для Каждого Элемент Из СписокТипов Цикл
			Если Элемент.Представление = ТипОбъекта Тогда
				ВыбраннаяСсылка = Элемент.Значение;
				Если НЕ ЗначениеЗаполнено(ДокументИБ) ИЛИ ТипЗнч(ДокументИБ) <> ТипЗнч(ВыбраннаяСсылка) Тогда
					ДокументИБ = ВыбраннаяСсылка;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстСлужебногоСообщения()
	
	Если ЗначениеЗаполнено(ИмяФайлаХМЛ) Тогда
		
		ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось прочитать файл ""%1.""';uk='Не вдалося прочитати файл ""%1.""'"), ИмяФайлаХМЛ);
		
	Иначе
		
		ЗаголовокЭлемента = НСтр("ru='Не найден файл электронного документа ""* .xml.""';uk='Не знайдено файл електронного документа ""* .xml.""'");
		
	КонецЕсли;
	
	Элементы.КомментарийСлужебноеСообщение.Заголовок = ЗаголовокЭлемента;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеквизитыОрганизации()
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Если СпособЗагрузкиДокумента = 1 И Не ЗначениеЗаполнено(ДокументИБ) Тогда
		ТекстСообщения = НСтр("ru='Не указан элемент справочника для перезаполнения.';uk='Не зазначений елемент довідника для перезаповнення.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	СоздатьОбъектыИБ(АдресСтруктурыРазбораЭД, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
		
	ДанныеФормы = Неопределено;
	СформироватьДокументИБ(ДанныеФормы, ТекстСообщения, Истина,, Отказ);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ДанныеФормы);
	РежимОткрытия = РежимОткрытияОкнаФормы.Независимый;
	
	ОткрытьФорму(ИмяОбъектаМетаданных +".Форма.ФормаЭлемента",ПараметрыФормы,,,,,,РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКаталогТоваров()
	
	СоздатьОбъектыИБ(АдресСтруктурыРазбораЭД, Ложь);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗагрузитьКаталогОповещение", ЭтотОбъект) ;
	
	СопоставитьНоменклатуру(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКаталогОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	СохранитьДанныеОбъектаВБД(АдресСтруктурыРазбораЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументЭДО(ЗакрытьФорму)
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Если НЕ МожноЗагрузитьЭДВида(ВидЭД) Тогда
		ТекстСообщения = НСтр("ru='Не поддерживается загрузка электронных документов вида ""%1"".';uk='Не підтримується завантаження електронних документів виду ""%1"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТипОбъекта);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ТекстСообщения = НСтр("ru='Не указан контрагент.';uk='Не зазначений контрагент.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если СпособЗагрузкиДокумента = 1 Тогда
		
		Если Не ЗначениеЗаполнено(ДокументИБ) Тогда
			ТекстСообщения = НСтр("ru='Не указан документ для перезаполнения.';uk='Не вказаний документ для перезаповнення.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
		
		Если ДокументПроведен() Тогда
			Шаблон = НСтр("ru='Обработка документа %1.
                        |Операция возможна только для непроведенных документов!'
                        |;uk='Обробка документа %1.
                        |Операція можлива тільки для непроведених документів!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДокументИБ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СоздатьОбъектыИБ(АдресСтруктурыРазбораЭД, Отказ);
	
	Если Отказ Тогда
		ЗакрытьФорму = Ложь;
		Возврат;
	КонецЕсли;
	
	СопоставлятьНоменклатуруПередЗаполнениемДокумента = Ложь;
	ОбменСКонтрагентамиКлиентПереопределяемый.СопоставлятьНоменклатуруПередЗаполнениемДокумента(СопоставлятьНоменклатуруПередЗаполнениемДокумента);
	
	Если СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыполнялосьСопоставление", Ложь);
		ДополнительныеПараметры.Вставить("ОтказЗаполнения", Ложь);
		
		ОбработчикОповещенияПередЗаполнением = Новый ОписаниеОповещения("СопоставитьПередЗаполнениемОповещение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		СопоставитьНоменклатуру(ОбработчикОповещенияПередЗаполнением);
		
			
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Не ДополнительныеПараметры.ВыполнялосьСопоставление Тогда
			ЗагрузитьДокументВИБ(СопоставлятьНоменклатуруПередЗаполнениемДокумента);
		КонецЕсли;
		#КонецЕсли
			
			
	Иначе
		ЗагрузитьДокументВИБ(СопоставлятьНоменклатуруПередЗаполнениемДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПередЗаполнениемОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказЗаполнения = ДополнительныеПараметры.ОтказЗаполнения;
	Если ОтказЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнялосьСопоставление = ДополнительныеПараметры.ВыполнялосьСопоставление;
	ОбновитьСтруктуруРазбора = ВыполнялосьСопоставление;
	
	ЗагрузитьДокументВИБ(Истина, ВыполнялосьСопоставление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументВИБ(СопоставлятьНоменклатуруПередЗаполнениемДокумента, ОбновитьСтруктуруРазбора = Ложь)
	
	Отказ = Ложь;
	ДокументСсылка = Неопределено;
	ТекстСообщения = "";
	
	СформироватьДокументИБ(ДокументСсылка, ТекстСообщения, Истина, ОбновитьСтруктуруРазбора, Отказ);	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ТекстОповещения	= НСтр("ru='Документ загружен.';uk='Документ завантажений.'");
		ТекстПояснения	= ДокументСсылка;
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(ДокументСсылка), ТекстПояснения);
	
		МассивОповещения = Новый Массив;
		МассивОповещения.Добавить(ДокументСсылка);
		Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивОповещения);
		
		ПоказатьЗначение(Неопределено, ДокументСсылка);
		
		ОповеститьОбИзменении(ДокументСсылка);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДокументПроведен()
	
	Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИБ, "Проведен");
	Возврат Проведен;
	
КонецФункции

&НаСервере
Процедура СкрытьДополнительныеДанные()
	
	ТабличныйДокументФормы = ИсходныйТабличныйДокумент.ПолучитьОбласть();
	
	Если ОтключитьВыводДопДанных Тогда
		ИменаОбластей = "ОбластьДД, ОбластьДДСЭП, ОбластьДДБезЭП, ОбластьДДСЭП_УС, ОбластьДДСЭП_У, ОбластьДДСЭП_С";
		ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ТабличныйДокументФормы, ИменаОбластей);
		ИменаОбластей = "ДопДанныеШапки_Шапка";
		ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ТабличныйДокументФормы, ИменаОбластей,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

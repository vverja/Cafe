#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьПоРеализацииТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		ЗаполнитьПоВыкупуВозвратнойТарыКлиентом(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ЗаполнитьПоАктуВыполненныхРабот(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		ЗаполнитьПоОтчетуКомитенту(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		ЗаполнитьПоОтчетуКомиссионераОСписании(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаполнитьПоДоговору(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
    ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
    ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	СуммаПроцентов = 0;
	Для Каждого ЭтапГрафика Из ЭтапыГрафикаОплаты Цикл
		Если Не ЭтапГрафика.ЭтоЗалогЗаТару Тогда
			СуммаПроцентов = СуммаПроцентов + ЭтапГрафика.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Процент платежа по всем этапам должен быть 100%
	Если СуммаПроцентов <> 100 Тогда
		
		ТекстОшибки = НСтр("ru='Процент платежей по всем этапам должен быть равен 100%';uk='Відсоток платежів за всіма етапами повинен дорівнювати 100%'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЭтапыГрафикаОплаты",
			,
			Отказ);
		
	КонецЕсли;
	
	СуммаЭтаповОплаты = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
	Если СуммаЭтаповОплаты > 0 И СуммаДокумента <> СуммаЭтаповОплаты Тогда
		
		ТекстОшибки = НСтр("ru='Сумма документа не должна отличаться от суммы этапов оплаты';uk='Сума документа не повинна відрізнятися від суми етапів оплати'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"СуммаДокумента",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") И НЕ Аннулирован Тогда
		
		СуммаОснования = Документы.СчетНаОплатуКлиенту.ПолучитьСуммуДокументаОснования(ДокументОснование);
		
		Если СуммаДокумента > СуммаОснования Тогда
			
			ТекстОшибки = НСтр("ru='Сумма документа не может быть больше суммы основания ""%СуммаОснования%""';uk='Сума документа не може бути більше суми підстави ""%СуммаОснования%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаОснования%",СуммаОснования);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"СуммаДокумента",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ЭтапыГрафикаОплаты.ПроцентПлатежа");
	Для Каждого ЭтапГрафика Из ЭтапыГрафикаОплаты Цикл
		
		Если Не ЗначениеЗаполнено(ЭтапГрафика.ПроцентПлатежа) И Не ЭтапГрафика.ЭтоЗалогЗаТару Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа"" в строке %НомерСтроки% списка ""Этапы графика оплаты""';uk='Не заповнена колонка ""Відсоток платежу"" в рядку %НомерСтроки% списку ""Етапи графіка оплати""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%НомерСтроки%",ЭтапГрафика.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапГрафика.НомерСтроки, "ПроцентПлатежа"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	МассивРеквизитов = Новый Массив;
	Если ЗначениеЗаполнено(ФормаОплаты) И ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	
	Для Каждого ЭтапГрафика Из ЭтапыГрафикаОплаты Цикл
		Если ЭтапГрафика.ЭтоЗалогЗаТару И ЗначениеЗаполнено(ЭтапГрафика.ПроцентПлатежа) Тогда
			ЭтапГрафика.ПроцентПлатежа = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ЗаполнитьПоРеализацииТоваров(
				ДокументОснование,
				ДанныеЗаполнения);
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			ЗаполнитьПоОтчетуКомитенту(
				ДокументОснование,
				ДанныеЗаполнения);
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ЗаполнитьПоОтчетуКомиссионераОСписании(
				ДокументОснование,
				ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацииТоваров(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК ДатаПредоплаты,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Соглашение.Номер КАК НомерСоглашения,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|
	|	NULL КАК Статус,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ДанныеДокумента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДанныеДокумента.Касса КАК Касса,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиХозяйственнаяОперация
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|		ИЛИ ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|	)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	1 КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК ДатаПлатежа,
	|	0 КАК ПроцентПлатежа,
	|	
	|	ВЫБОР КОГДА СУММА(Тара.СуммаВзаиморасчетов) > ДанныеДокумента.СуммаПредоплаты ТОГДА
	|		ДанныеДокумента.СуммаПредоплаты
	|	ИНАЧЕ
	|		СУММА(Тара.СуммаВзаиморасчетов)
	|	КОНЕЦ КАК СуммаПлатежа,
	|	
	|	ИСТИНА КАК ЭтоЗалогЗаТару
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Тара
	|	ПО
	|		Тара.Ссылка = ДанныеДокумента.Ссылка
	|		И ДанныеДокумента.ТребуетсяЗалогЗаТару
	|		И Тара.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаПредоплаты > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	2 КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК ДатаПлатежа,
	|	
	|	(ДанныеДокумента.СуммаПредоплаты - ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0))
	|		/ (ДанныеДокумента.СуммаВзаиморасчетов - ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)) * 100 КАК ПроцентПлатежа,
	|	
	|	ДанныеДокумента.СуммаПредоплаты - ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0) КАК СуммаПлатежа,
	|	ЛОЖЬ КАК ЭтоЗалогЗаТару
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Тара
	|	ПО
	|		Тара.Ссылка = ДанныеДокумента.Ссылка
	|		И ДанныеДокумента.ТребуетсяЗалогЗаТару
	|		И Тара.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаПредоплаты > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0) < ДанныеДокумента.СуммаПредоплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	3 КАК НомерСтроки,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	0 КАК ПроцентПлатежа,
	|	
	|	СУММА(Тара.СуммаВзаиморасчетов) - ДанныеДокумента.СуммаПредоплаты КАК СуммаПлатежа,
	|	
	|	ИСТИНА КАК ЭтоЗалогЗаТару
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Тара
	|	ПО
	|		Тара.Ссылка = ДанныеДокумента.Ссылка
	|		И ДанныеДокумента.ТребуетсяЗалогЗаТару
	|		И Тара.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаВзаиморасчетов - ДанныеДокумента.СуммаПредоплаты > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(Тара.СуммаВзаиморасчетов) > ДанныеДокумента.СуммаПредоплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	4 КАК НомерСтроки,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	
	|	ВЫБОР КОГДА ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0) < ДанныеДокумента.СуммаПредоплаты ТОГДА
	|		ДанныеДокумента.СуммаВзаиморасчетов - ДанныеДокумента.СуммаПредоплаты
	|	ИНАЧЕ
	|		ДанныеДокумента.СуммаВзаиморасчетов - ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)
	|	КОНЕЦ
	|		/ (ДанныеДокумента.СуммаВзаиморасчетов - ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)) * 100 КАК ПроцентПлатежа,
	|	
	|	ВЫБОР КОГДА ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0) < ДанныеДокумента.СуммаПредоплаты ТОГДА
	|		ДанныеДокумента.СуммаВзаиморасчетов - ДанныеДокумента.СуммаПредоплаты
	|	ИНАЧЕ
	|		ДанныеДокумента.СуммаВзаиморасчетов - ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)
	|	КОНЕЦ КАК СуммаПлатежа,
	|	
	|	ЛОЖЬ КАК ЭтоЗалогЗаТару
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Тара
	|	ПО
	|		Тара.Ссылка = ДанныеДокумента.Ссылка
	|		И ДанныеДокумента.ТребуетсяЗалогЗаТару
	|		И Тара.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР КОГДА ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0) < ДанныеДокумента.СуммаПредоплаты ТОГДА
	|		ДанныеДокумента.СуммаВзаиморасчетов - ДанныеДокумента.СуммаПредоплаты
	|	ИНАЧЕ
	|		ДанныеДокумента.СуммаВзаиморасчетов - ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)
	|	КОНЕЦ > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.КОплатеОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	СуммаОснования = 0;
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоЭтапам    = РезультатЗапроса[1].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[2].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
		Документы.СчетНаОплатуКлиенту.ПроверитьКорректностьХозяйственнойОперацииДокументаОснования(
			ВыборкаПоДокументу.ЕстьОшибкиХозяйственнаяОперация,
			ВыборкаПоДокументу.ХозяйственнаяОперация);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			ВыборкаПоДокументу.Статус,
			ВыборкаПоДокументу.ЕстьОшибкиПроведен,
			ВыборкаПоДокументу.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			Основание);
		
		Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
			
			ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
			ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
			
		Иначе
			
			Если ВыборкаПоРасчетам.Следующий() Тогда
				
				СуммаОплаты = ВыборкаПоРасчетам.СуммаОплаты;
				Пока СуммаОплаты > 0 И ВыборкаПоЭтапам.Следующий() Цикл
					
					ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
					ЗаполнитьЗначенияСвойств(ЭтапОплаты, ВыборкаПоЭтапам);
					Если СуммаОплаты < ВыборкаПоЭтапам.СуммаПлатежа Тогда
						ЭтапОплаты.СуммаПлатежа = СуммаОплаты;
					КонецЕсли;
					
					СуммаОплаты = СуммаОплаты - ВыборкаПоЭтапам.СуммаПлатежа;
					
				КонецЦикла;
				
				ЭтапыГрафикаОплаты.Сортировать("ДатаПлатежа");
				
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить("СуммаДокумента",  ЭтапыГрафикаОплаты.Итог("СуммаПлатежа"));
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", ВыборкаПоДокументу.СуммаВзаиморасчетов <> ЭтапыГрафикаОплаты.Итог("СуммаПлатежа"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВыкупуВозвратнойТарыКлиентом(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Соглашение.Номер КАК НомерСоглашения,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ДанныеДокумента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|
	|	NULL КАК Статус,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ДанныеДокумента.Касса КАК Касса,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	СуммаОснования = 0;
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			,
			ВыборкаПоДокументу.ЕстьОшибкиПроведен);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			Основание);
		
		Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
			ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
			ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
		Иначе
			ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуВыполненныхРабот(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Соглашение.Номер КАК НомерСоглашения,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ДанныеДокумента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	NULL КАК Статус,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	ЛОЖЬ КАК ЕстьОшибкиХозяйственнаяОперация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ДанныеДокумента.Касса КАК Касса
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|		ИЛИ ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|	)
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	СуммаОснования = 0;
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
		Документы.СчетНаОплатуКлиенту.ПроверитьКорректностьХозяйственнойОперацииДокументаОснования(
			ВыборкаПоДокументу.ЕстьОшибкиХозяйственнаяОперация,
			ВыборкаПоДокументу.ХозяйственнаяОперация);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			ВыборкаПоДокументу.Статус,
			ВыборкаПоДокументу.ЕстьОшибкиПроведен,
			ВыборкаПоДокументу.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			Основание);
		
		Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
			ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
			ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
		Иначе
			ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения)
	
	Если ВыборкаПоРасчетам.Следующий() И ВыборкаПоРасчетам.СуммаОплаты > 0 Тогда
		
		ДобавитьЭтапОплаты(ВыборкаПоРасчетам.СуммаОплаты, ВыборкаПоДокументу.ДатаПлатежа);
		ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоРасчетам.СуммаОплаты);
		ДанныеЗаполнения.Вставить("ЧастичнаяОплата", ВыборкаПоРасчетам.СуммаОплаты <> ВыборкаПоДокументу.СуммаВзаиморасчетов);
		
	Иначе
		
		ДанныеЗаполнения.Вставить("СуммаДокумента",  0);
		ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитенту(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация				КАК Организация,
	|	ДанныеДокумента.Руководитель            КАК Руководитель,
	|	ДанныеДокумента.ГлавныйБухгалтер        КАК ГлавныйБухгалтер,
	|	ДанныеДокумента.Номер					КАК Номер,
	|	ДанныеДокумента.Организация.Префикс		КАК Префикс,
	|	ДанныеДокумента.Валюта					КАК Валюта,
	|	ДанныеДокумента.СуммаВознаграждения		КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка					КАК ДокументОснование,
	|	ДанныеДокумента.Партнер					КАК Партнер,
	|	ДанныеДокумента.Контрагент				КАК Контрагент,
	|	ДанныеДокумента.КонтактноеЛицо			КАК КонтактноеЛицо,
	|	ДанныеДокумента.Договор					КАК Договор,
	|	ДанныеДокумента.ДатаПлатежа				КАК ДатаПлатежа,
	|	ЛОЖЬ									КАК ЧастичнаяОплата,
	|	НЕ ДанныеДокумента.Проведен				КАК ЕстьОшибкиПроведен,
	|	ДанныеДокумента.УдержатьВознаграждение	КАК УдержатьВознаграждение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		Если ВыборкаПоДокументу.УдержатьВознаграждение Тогда
				
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не требуется вводить счет на оплату на основании документа %1, поскольку в нем удержано вознаграждение';uk='Не потрібно вводити рахунок на оплату на підставі документа %1, оскільки в ньому утримано винагороду'"),
				Основание);
			
			ВызватьИсключение Текст;
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			Неопределено, // Статус
			ВыборкаПоДокументу.ЕстьОшибкиПроведен,
			Ложь); // ЕстьОшибкиСтатус
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			Основание);
		
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= ДанныеЗаполнения.Организация;

	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= ДанныеЗаполнения.Организация;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
		
		ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
		
		Если ВыборкаПоДокументу.СуммаВзаиморасчетов > 0 Тогда
			ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
		Иначе
			ДанныеЗаполнения.Вставить("СуммаДокумента",  0);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Истина);
		КонецЕсли;
		
	Иначе
		ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионераОСписании(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация         КАК Организация,
	|	ДанныеДокумента.Номер               КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Валюта              КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента      КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Партнер             КАК Партнер,
	|	ДанныеДокумента.Контрагент          КАК Контрагент,
	|	ДанныеДокумента.Договор             КАК Договор,
	|	ДанныеДокумента.ДатаПлатежа         КАК ДатаПлатежа,
	|	ДанныеДокумента.Ссылка              КАК ДокументОснование,
	|	Ложь                                КАК ЧастичнаяОплата,
	|	НЕ ДанныеДокумента.Проведен         КАК ЕстьОшибкиПроведен,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			Неопределено, // Статус
			ВыборкаПоДокументу.ЕстьОшибкиПроведен,
			Ложь); // ЕстьОшибкиСтатус
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер, 
			Основание);
		
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= ДанныеЗаполнения.Организация;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= ДанныеЗаполнения.Организация;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров); 
	
	Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
		ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
		ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
		ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
	Иначе
		ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПоДоговору(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка               КАК Договор,
	|	ДанныеДокумента.Организация          КАК Организация,
	|	ДанныеДокумента.Номер                КАК Номер,
	|	Неопределено                         КАК Префикс,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	0                                    КАК СуммаДокумента,
	|	ДанныеДокумента.Ссылка               КАК ДокументОснование,
	|	ДанныеДокумента.Партнер              КАК Партнер,
	|	ДанныеДокумента.Контрагент           КАК Контрагент,
	|	&ТекущаяДата                         КАК ДатаПлатежа,
	|	ИСТИНА                               КАК ЧастичнаяОплата,
	|	ДанныеДокумента.Статус               КАК Статус,
	|	ДанныеДокумента.КонтактноеЛицо       КАК КонтактноеЛицо,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                КАК ЕстьОшибкиСтатус,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ                                КАК ЕстьОшибкиТипДоговора
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаПоДокументу = РезультатЗапроса.Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		ПроверитьВозможностьВводаНаОснованииДоговора(ВыборкаПоДокументу.ЕстьОшибкиТипДоговора);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			ВыборкаПоДокументу.Статус,
			, // ЕстьОшибкиПроведен
			ВыборкаПоДокументу.ЕстьОшибкиСтатус);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			Основание);
		
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = ДанныеЗаполнения.Организация;

	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= ДанныеЗаполнения.Организация;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров); // Касса
	
КонецПроцедуры


Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Менеджер       = Пользователи.ТекущийПользователь();
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Организация;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчет;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    	= Организация;
	СтруктураПараметров.ФормаОплаты		= ФормаОплаты;
	СтруктураПараметров.Касса			= Касса;
	Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ПредставительОрганизации 		  = Менеджер.ФизическоеЛицо;
	ПредставительОрганизацииДолжность = ДолжностиДляПечатиКлиентСервер.ДолжностьФизическогоЛица(ПредставительОрганизации, Организация, Дата);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ДобавитьЭтапОплаты(СуммаОплаты, ДатаПлатежа)
	
	ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
	ЭтапОплаты.ПроцентПлатежа = 100;
	ЭтапОплаты.СуммаПлатежа   = СуммаОплаты;
	ЭтапОплаты.ДатаПлатежа    = ?(ЗначениеЗаполнено(ДатаПлатежа), ДатаПлатежа, ТекущаяДата());
	
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОснованииДоговора(ЕстьОшибкиТипДоговора)
	
	Если ЕстьОшибкиТипДоговора Тогда
		
		ТекстОшибки = НСтр("ru='Ввод на основании договора с поставщиком запрещен.';uk='Введення на підставі договору з постачальником заборонене.'");
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

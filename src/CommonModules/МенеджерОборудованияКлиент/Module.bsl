#Область ПроцедурыИФункцииБазовые 

// Поиск по идентификатору подключенного ранее устройства.
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор) Экспорт
	
	ПодключенноеУстройство = Неопределено;
	
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

// Поиск по типу подключенные ранее устройства.
//
Функция ПолучитьПодключенныеУстройства(СписокПодключений, ТипПО, Идентификатор = Неопределено) Экспорт
	
	ПодключенныеУстройства = Новый Массив();
	
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.ТипОборудования = ТипПО Тогда
			Если (Идентификатор <> Неопределено) Тогда
				Если (Подключение.Ссылка = Идентификатор) Тогда
					ПодключенныеУстройства.Добавить(Подключение);
					Прервать;
				КонецЕсли;
			Иначе
				ПодключенныеУстройства.Добавить(Подключение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции

#КонецОбласти  

#Область ПроцедурыИФункцииРаботаСОборудованиемСинхронноСинхронно

// Производит подключение доступного оборудования по списку типов ПО
//
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для Каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);
	 
 КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором.
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования.
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт
	   
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ОбъектДрайвера    = Неопределено;
	ОписаниеОшибки    = "";
	ОписаниеОшибкиУстройства = "";

	Результат = ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце обладнання для підключення поточного сеансу.'");
		Возврат Ложь;
	КонецЕсли;
	
	СписокОборудования = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
                                     |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                     |;uk='%Наименование%: Не вдалося завантажити драйвер пристрою.
                                     |Перевірте, що драйвер коректно встановлений і зареєстрований у системі.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Устройство.Наименование);
					КонечныйРезультат = Ложь;
					Продолжить;
				КонецЕсли;
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ДрайверОборудования"    , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"   , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"   , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ИмяМакетаДрайвера"      , Устройство.ИмяМакетаДрайвера);
				НовоеПодключение.Вставить("ИмяФайлаДрайвера"       , Устройство.ИмяФайлаДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("Параметры"              , Устройство.Параметры);
				НовоеПодключение.Вставить("КоличествоПодключенных" , 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"   , Новый Структура());
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования", Устройство.ТипОборудованияИмя);
				
				Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
					ОбъектДрайвера = СоздатьОбъектДрайвераДляCOM(ОбъектДрайвера);
					НовоеПодключение.Вставить(ПолучитьИмяCOMДрайвераВСтруктуре(), ОбъектДрайвера);
				КонецЕсли;
				
				ВыходныеПараметры = Неопределено;
				
				ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(НовоеПодключение.ОбработчикДрайвера, Не НовоеПодключение.ВСоставеКонфигурации);
				Если ОбработчикДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки +  НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
					КонечныйРезультат = Ложь;
					Продолжить;
				Иначе
					// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
					Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
						ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
					КонецЕсли;
					
					Результат = ОбработчикДрайвера.ПодключитьУстройство(ОбъектДрайвера, НовоеПодключение.Параметры, 
						НовоеПодключение.ПараметрыПодключения, ВыходныеПараметры);
				КонецЕсли;
				
				Если Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
						НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
					Иначе
						НовоеПодключение.Вставить("ИсточникСобытия", "");
						НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
					КонецЕсли;
					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)';uk='Не вдалося підключити пристрій ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
				КонецЕсли;
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Выбранное устройство не может использоваться для подключения.
        |Укажите другое устройство.'
        |;uk='Вибраний пристрій не може використовуватися для підключення.
        |Вкажіть інший пристрій.'");
		КонечныйРезультат = Ложь;
	ИначеЕсли ТипыПО = Неопределено И ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Нет доступного оборудования для подключения.';uk='Немає доступного обладнання для підключення.'");
		КонечныйРезультат = Ложь;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции

// Отключает устройства по типу оборудования.
//
Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);

КонецФункции

// Отключает устройство, определенное идентификатором.
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение.
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                        |;uk='""%Наименование%"": Не вдалося завантажити драйвер пристрою.
                                        |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			КонечныйРезультат = Ложь;
			Продолжить;
		ИначеЕсли ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
			ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство);
		КонецЕсли;
		
		ВыходныеПараметры = Неопределено;
		
		ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
		
		Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
			
			ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
			ОбработчикДрайвера.НачатьОтключениеУстройства(ОповещениеПриОтключении, ОбъектДрайвера, ПодключенноеУстройство.Параметры, 
				ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
				
			ПодключенноеУстройство.КоличествоПодключенных = 0;
			Результат = Истина;
			
		Иначе
			
			Результат = ОбработчикДрайвера.ОтключитьУстройство(ОбъектДрайвера, ПодключенноеУстройство.Параметры, 
				ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)';uk='При відключенні пристрою ""%Наименование%"" сталася помилка: %ОписаниеОшибки% (%КодОшибки%)'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
			Иначе
				ПодключенноеУстройство.КоличествоПодключенных = 0;
			КонецЕсли;
		КонецЕсли;
		
		КонечныйРезультат = КонечныйРезультат И Результат;
		
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
	Возврат КонечныйРезультат;
	
КонецФункции

// Функция подключает устройства по типу оборудования.
// 
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ВыходноеОписаниеОшибки = "";
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			ИмяТипаПО = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				 
				 Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					 
					ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
					Если ОбъектДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось загрузить драйвер.
						ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
                                                    |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                                    |;uk='""%Наименование%"": Не вдалося завантажити драйвер пристрою.
                                                    |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						КонечныйРезультат = Ложь;
						Продолжить;
					ИначеЕсли ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
						ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство);
					КонецЕсли;
					
					ВыходныеПараметры = Неопределено;
					
					ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
					
					// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
					Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
						ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
					КонецЕсли;
					
					Результат = ОбработчикДрайвера.ОтключитьУстройство(ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
					Если НЕ Результат Тогда
						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
									   + НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)';uk='При відключенні пристрою ""%Наименование%"" сталася помилка: %ОписаниеОшибки% (%КодОшибки%)'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
					Иначе
						ПодключенноеУстройство.КоличествоПодключенных = 0;
					КонецЕсли;
					
					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции  

#КонецОбласти   

#Область ПроцедурыИФункцииПодключениеОборудованияАсинхронно

// Производит подключение доступного оборудования по списку типов ПО
//
Процедура НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для Каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, СтруктураТиповПО);
	 
 КонецПроцедуры

// Начать подключать одиночный экземпляр устройства определяемый идентификатором.
//
Процедура НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриПодключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьПодключениеОборудованияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Если РезультатВыполнения.ВыходныеПараметры.Количество() >= 2 Тогда
			Параметры.НовоеПодключение.Вставить("ИсточникСобытия", Параметры.ВыходныеПараметры[0]);
			Параметры.НовоеПодключение.Вставить("ИменаСобытий",    Параметры.ВыходныеПараметры[1]);
		Иначе
			Параметры.НовоеПодключение.Вставить("ИсточникСобытия", "");
			Параметры.НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
		КонецЕсли;
		глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(Параметры.НовоеПодключение);
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ПараметрыПодключения", Истина, ОписаниеОшибки, Параметры.НовоеПодключение.ПараметрыПодключения);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)';uk='Не вдалося підключити пристрій ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Параметры.НовоеПодключение.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , РезультатВыполнения.ВыходныеПараметры[0]);
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеОборудованияПолучениеОбъектаДрайвераЗавершение(ОбъектДрайвера, Параметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                        |;uk='%Наименование%: Не вдалося завантажити драйвер пристрою.
                                        |Перевірте, що драйвер коректно встановлений і зареєстрований у системі.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Параметры.НовоеПодключение.Наименование);
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
			ОбъектДрайвера = СоздатьОбъектДрайвераДляCOM(ОбъектДрайвера);
			Параметры.НовоеПодключение.Вставить(ПолучитьИмяCOMДрайвераВСтруктуре(), ОбъектДрайвера);
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудованияЗавершение", ЭтотОбъект, Параметры);
		Параметры.ОбработчикДрайвера.НачатьПодключениеУстройства(Оповещение, ОбъектДрайвера, 
			 Параметры.НовоеПодключение.Параметры,  Параметры.НовоеПодключение.ПараметрыПодключения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Начать подключения устройства.
// 
Процедура НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	   
	ОбъектДрайвера = Неопределено;
	
	Результат = ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		Если ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце обладнання для підключення поточного сеансу.'");
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокОборудования = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				
				ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(Устройство.ОбработчикДрайвера, Не Устройство.ВСоставеКонфигурации);
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ДрайверОборудования"    , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"   , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"   , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ИмяМакетаДрайвера"      , Устройство.ИмяМакетаДрайвера);
				НовоеПодключение.Вставить("ИмяФайлаДрайвера"       , Устройство.ИмяФайлаДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("Параметры"              , Устройство.Параметры);
				НовоеПодключение.Вставить("КоличествоПодключенных" , 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"   , Новый Структура());
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования", Устройство.ТипОборудованияИмя);
				
				Если ОбработчикДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось подключить обработчик.
					Если ОповещениеПриПодключении <> Неопределено Тогда
						ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
						РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
						ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
					КонецЕсли;
					Продолжить;
				Иначе
					
					// Разделение на асинхронные и синхронные вызовы.
					Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
						// Асинхронные вызовы
						ПараметрыКоманды = Новый Структура("НовоеПодключение, ОповещениеПриПодключении, ОбработчикДрайвера", НовоеПодключение, ОповещениеПриПодключении, ОбработчикДрайвера);
						Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудованияПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, ПараметрыКоманды);
						НачатьПолучениеОбъектаДрайвера(Оповещение, Устройство);
					Иначе
						// Синхронные
						ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство);
						Если ОбъектДрайвера = Неопределено Тогда
							Если ОповещениеПриПодключении <> Неопределено Тогда
								// Сообщить об ошибке, что не удалось загрузить драйвер.
								ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
                                                    |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                                    |;uk='%Наименование%: Не вдалося завантажити драйвер пристрою.
                                                    |Перевірте, що драйвер коректно встановлений і зареєстрований у системі.'");
								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%",НовоеПодключение.Наименование);
								РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
								ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
							КонецЕсли;
							Продолжить;
						Иначе
							
							Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
								ОбъектДрайвера = СоздатьОбъектДрайвераДляCOM(ОбъектДрайвера);
								НовоеПодключение.Вставить(ПолучитьИмяCOMДрайвераВСтруктуре(), ОбъектДрайвера);
							КонецЕсли;
							ВыходныеПараметры = Неопределено;
							Результат = ОбработчикДрайвера.ПодключитьУстройство(ОбъектДрайвера, НовоеПодключение.Параметры, НовоеПодключение.ПараметрыПодключения, ВыходныеПараметры);
							
							Если Результат Тогда
								
								Если ВыходныеПараметры.Количество() >= 2 Тогда
									НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
									НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
								Иначе
									НовоеПодключение.Вставить("ИсточникСобытия", "");
									НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
								КонецЕсли;
								глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
								
								Если ОповещениеПриПодключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ПараметрыПодключения", Истина, ОписаниеОшибки, НовоеПодключение.ПараметрыПодключения);
									ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
								КонецЕсли;
								
							Иначе
								// Сообщим пользователю о том, что не удалось подключить устройство.
								Если ОповещениеПриПодключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)';uk='Не вдалося підключити пристрій ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , НовоеПодключение.Наименование);
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
				Если ОповещениеПриПодключении <> Неопределено Тогда
					ОписаниеОшибки = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
					РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ПараметрыПодключения", Истина, ОписаниеОшибки, ПодключенноеУстройство.ПараметрыПодключения);
					ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИдентификаторУстройства <> Неопределено И ОповещениеПриПодключении <> Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Выбранное устройство не может использоваться для подключения. Укажите другое устройство.';uk='Вибраний пристрій не може використовуватися для підключення. Вкажіть інший пристрій.'");
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	ИначеЕсли ТипыПО = Неопределено И ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Нет доступного оборудования для подключения.';uk='Немає доступного обладнання для підключення.'");
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
Процедура НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО, );
	
КонецПроцедуры

//  Начать отключать устройства определенное идентификатором.
//
Процедура НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьОтключениеОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Параметры.ПодключенноеУстройство.КоличествоПодключенных = 0;
		
		НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(Параметры.ПодключенноеУстройство);
		Если НомерСтрокиМассива <> Неопределено Тогда
			глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
		КонецЕсли;
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Истина, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка.';uk='При відключенні пристрою ""%Наименование%"" сталася помилка.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Параметры.ПодключенноеУстройство.Наименование);
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура НачатьОтключениеОборудованиеПолучениеОбъектаДрайвераЗавершение(ОбъектДрайвера, Параметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                        |;uk='%Наименование%: Не вдалося завантажити драйвер пристрою.
                                        |Перевірте, що драйвер коректно встановлений і зареєстрований у системі.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Параметры.ПодключенноеУстройство.Наименование);
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
			ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(Параметры.ПодключенноеУстройство);
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("НачатьОтключениеОборудованиеЗавершение", ЭтотОбъект, Параметры);
		Параметры.ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ОбъектДрайвера, 
			 Параметры.ПодключенноеУстройство.Параметры,  Параметры.ПодключенноеУстройство.ПараметрыПодключения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Функция подключает устройства по типу оборудования.
// 
Процедура НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено)
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			ИмяТипаПО = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				
				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					
					ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
					Если ОбработчикДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось подключить обработчик.
						Если ОповещениеПриОтключении <> Неопределено Тогда
							ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
							РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
							ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
						КонецЕсли;
					Иначе
						// Разделение на асинхронные и синхронные вызовы.
						Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
							// Асинхронные вызовы
							ПараметрыКоманды = Новый Структура("ПодключенноеУстройство, ОповещениеПриОтключении, ОбработчикДрайвера", ПодключенноеУстройство, ОповещениеПриОтключении, ОбработчикДрайвера);
							Оповещение = Новый ОписаниеОповещения("НачатьОтключениеОборудованиеПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, ПараметрыКоманды);
							НачатьПолучениеОбъектаДрайвера(Оповещение, ПодключенноеУстройство);
						Иначе
							ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
							Если ОбъектДрайвера = Неопределено Тогда
								Если ОповещениеПриОтключении <> Неопределено Тогда
									// Сообщить об ошибке, что не удалось загрузить драйвер.
									ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
                                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                                        |;uk='%Наименование%: Не вдалося завантажити драйвер пристрою.
                                                        |Перевірте, що драйвер коректно встановлений і зареєстрований у системі.'");
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%",ПодключенноеУстройство.Наименование);
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
								КонецЕсли;
							Иначе
								Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
									ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство);
								КонецЕсли;
								ВыходныеПараметры = Неопределено;
								Результат = ОбработчикДрайвера.ОтключитьУстройство(ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
								Если НЕ Результат Тогда
									// Сообщим пользователю о том, что не удалось подключить устройство.
									Если ОповещениеПриОтключении <> Неопределено Тогда
										ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)';uk='При відключенні пристрою ""%Наименование%"" сталася помилка: %ОписаниеОшибки% (%КодОшибки%)'");
										ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , ПодключенноеУстройство.Наименование);
										ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
										ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
										РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
										ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
									КонецЕсли;
								Иначе
									ПодключенноеУстройство.КоличествоПодключенных = 0;
								КонецЕсли;
								
								НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
								Если НомерСтрокиМассива <> Неопределено Тогда
									глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
								КонецЕсли;
								
								Если ОповещениеПриОтключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Истина, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры  

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение.
Процедура НачатьОтключениеВсегоОборудования(ОповещениеПриОтключении) Экспорт
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
		
		Если ОбъектДрайвера = Неопределено Тогда
			Продолжить;
		ИначеЕсли ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
			ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство);
		КонецЕсли;
		
		ВыходныеПараметры = Неопределено;
		
		ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
		
		Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
			
			Оповещение = Новый ОписаниеОповещения("НачатьОтключениеВсегоОборудованияЗавершение", МенеджерОборудованияКлиент);
			ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ОбъектДрайвера, ПодключенноеУстройство.Параметры, 
				ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
				
			ПодключенноеУстройство.КоличествоПодключенных = 0;
			Результат = Истина;
			
		Иначе
			
			Результат = ОбработчикДрайвера.ОтключитьУстройство(ОбъектДрайвера, ПодключенноеУстройство.Параметры, 
				ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
			Если Результат Тогда
				ПодключенноеУстройство.КоличествоПодключенных = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		КонечныйРезультат = КонечныйРезультат И Результат;
		
	КонецЦикла;
	
	КоличествоПодключенныхКлиентов = 0;
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		КоличествоПодключенныхКлиентов = КоличествоПодключенныхКлиентов + ПодключенноеУстройство.КоличествоПодключенных;
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
КонецПроцедуры

Процедура НачатьОтключениеВсегоОборудованияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".';uk='При відключенні обладнання сталася помилка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти   

#Область ПроцедурыИФункцииПодключенияОтключенияОборудованияВФорме

// Подключает необходимые типы оборудования при открытии формы.
//
// Параметры:
//	Форма - УправляемаяФорма
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Функция ПодключитьОборудованиеПриОткрытииФормы(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ОборудованиеПодключено = Истина;
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование Тогда

		ОписаниеОшибки = "";
		
		ОборудованиеПодключено = ПодключитьОборудованиеПоТипу(
			Форма.УникальныйИдентификатор,
			ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования),
			ОписаниеОшибки);
		
		Если НЕ ОборудованиеПодключено Тогда
			
			ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка:
                                    |""%ОписаниеОшибки%"".'
                                    |;uk='При підключенні обладнання сталася помилка:
                                    |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОборудованиеПодключено; // Признак ошибки при подключении оборудования.
	
КонецФункции

// Отключает подключенные типы оборудования при закрытии формы.
//
Функция ОтключитьОборудованиеПриЗакрытииФормы(Форма) Экспорт
	
	Возврат ОтключитьОборудованиеПоТипу(Форма.УникальныйИдентификатор, ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецФункции

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//	Форма - УправляемаяФорма
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПриПодключении, Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование Тогда
			
	Если ОповещениеПриПодключении = Неопределено Тогда
		ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
		НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, Форма.УникальныйИдентификатор,
											ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения по умолчанию
//
Процедура ПодключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".';uk='При підключенні устаткування виникла помилка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, Форма) Экспорт
	
	Если ОповещениеПриОтключении = Неопределено Тогда
		ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, 
										Форма.УникальныйИдентификатор, 
										ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецПроцедуры

Процедура ОтключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".';uk='При відключенні обладнання сталася помилка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСПодключаемымОборудованием

// Направляет команду ответственному обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор").
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		// Получение объекта драйвера
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                        |;uk='""%Наименование%"": Не вдалося завантажити драйвер пристрою.
                                        |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
		Иначе
			Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство);
			КонецЕсли;
			Параметры            = ПодключенноеУстройство.Параметры;
			ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
			ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
			Если ОбработчикДрайвера = Неопределено Тогда
				// Сообщить об ошибке, что не удалось загрузить драйвер.
				ВыходныеПараметры = Новый Массив();
				ТекстСообщения = НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
			Иначе
				// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
				Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
					ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
				КонецЕсли;
				// Вызов метода выполнения команды у обработчика.
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, 
																ОбъектДрайвера, Параметры, ПараметрыПодключения); 
			КонецЕсли
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru='Устройство не подключено. Перед выполнением операции устройство должно быть подключено.';uk='Пристрій не підключений. Перед виконанням операції пристрій має бути підключений.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Завершение выполнение команды ответственному обработчику драйвера
//
Процедура НачатьВыполнениеКомандыЗавершение(ОбъектДрайвера, ПараметрыКоманды) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ТекстОшибки = НСтр("ru='Не удалось загрузить драйвер устройства.
                                |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                |;uk='Не вдалося завантажити драйвер пристрою.
                                |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
		
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ТекстОшибки; 
		РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
		ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПараметрыКоманды.ДанныеОборудования.ОбработчикДрайвера, Не ПараметрыКоманды.ДанныеОборудования.ВСоставеКонфигурации);
		Если ОбработчикДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстОшибки);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
			
			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ТекстОшибки; 
			РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
			ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПараметрыКоманды.ДанныеОборудования);
			КонецЕсли;
			Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
				ОбработчикДрайвера.НачатьВыполнениеКоманды(ПараметрыКоманды.ОповещениеПриЗавершении, ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ОбъектДрайвера, ПараметрыКоманды.ДанныеОборудования.Параметры, ПараметрыКоманды.ДанныеОборудования.ПараметрыПодключения);
			Иначе
				ВыходныеПараметры = Неопределено;
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ВыходныеПараметры, ОбъектДрайвера, ПараметрыКоманды.ДанныеОборудования.Параметры, ПараметрыКоманды.ДанныеОборудования.ПараметрыПодключения);
				Если Не Результат Тогда
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
				КонецЕсли;
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Результат, ,ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Начать выполнение команды ответственному обработчику драйвера
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Идентификатор, Команда, ВходныеПараметры) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор"      , Идентификатор);
		ПараметрыКоманды.Вставить("Команда"            , Команда);
		ПараметрыКоманды.Вставить("ВходныеПараметры"   , ВходныеПараметры);
		ПараметрыКоманды.Вставить("ДанныеОборудования" , ПодключенноеУстройство);
		ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыЗавершение", ЭтотОбъект, ПараметрыКоманды);
		НачатьПолучениеОбъектаДрайвера(Оповещение, ПодключенноеУстройство);
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ТекстОшибки = НСтр("ru='Устройство не подключено. Перед выполнением операции устройство должно быть подключено.';uk='Пристрій не підключений. Перед виконанням операції пристрій має бути підключений.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
		РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатВыполнения.Результат = Ложь;
		РезультатВыполнения.ОписаниеОшибки = ТекстОшибки; 
		РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе.
//
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);

	Если ПодключенноеУстройство = Неопределено Тогда
		
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		
		времПараметрыПодключения = Новый Структура();
		времПараметрыПодключения.Вставить("ТипОборудования", ДанныеОборудования.ТипОборудованияИмя);
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования);
		
		Если ОбъектДрайвера = Неопределено Тогда
			
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ТекстСообщения = НСтр("ru='Не удалось загрузить драйвер устройства.
                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                        |;uk='Не вдалося завантажити драйвер пристрою.
                                        |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
			
		Иначе
			
			ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеОборудования.ОбработчикДрайвера, Не ДанныеОборудования.ВСоставеКонфигурации);
		
			Если ОбработчикДрайвера = Неопределено Тогда
				// Сообщить об ошибке, что не удалось загрузить драйвер.
				ВыходныеПараметры = Новый Массив();
				ТекстСообщения = НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
			Иначе
				// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
				Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
					ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
				КонецЕсли;
				Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
					ОбъектДрайвера = СоздатьОбъектДрайвераДляCOM(ОбъектДрайвера);
				КонецЕсли;
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда,
					ВходныеПараметры,
					ВыходныеПараметры,
					ОбъектДрайвера,
					Параметры,
					времПараметрыПодключения);
					Если Не Результат Тогда
						ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
					КонецЕсли;
			КонецЕсли
				
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru='Устройство подключено. Перед выполнением операции устройство должно быть отключено.';uk='Пристрій підключено. Перед виконанням операції пристрій повинно бути вимкнено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет команду обработчика драйвера, не требующую предварительного подключения устройства в системе.
//
Функция ВыполнитьКомандуОбработчикаДрайвера(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры, ПоддержкаАсинхронногоРежима) Экспорт
	
	Результат = Ложь;
	
	Если Идентификатор <> Неопределено Тогда
		
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеОборудования.ОбработчикДрайвера, Не ДанныеОборудования.ВСоставеКонфигурации);
	
		Если ОбработчикДрайвера <> Неопределено Тогда
			Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Неопределено, Параметры, Неопределено);
			ПоддержкаАсинхронногоРежима = ОбработчикДрайвера.ПоддержкаАсинхронногоРежима();
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
Процедура НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры, Идентификатор, Параметры) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	                                                       
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Команда"           , Команда);
		ПараметрыКоманды.Вставить("ВходныеПараметры"  , ВходныеПараметры);
		ПараметрыКоманды.Вставить("Параметры"         , Параметры);
		ПараметрыКоманды.Вставить("ДанныеОборудования", ДанныеОборудования);
		ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеДополнительнойКоманды_Завершение", ЭтотОбъект, ПараметрыКоманды);
		НачатьПолучениеОбъектаДрайвера(Оповещение, ДанныеОборудования);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ТекстОшибки = НСтр("ru='Устройство подключено. Перед выполнением операции устройство должно быть отключено.';uk='Пристрій підключено. Перед виконанням операції пристрій повинно бути вимкнено.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Ложь, , ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Завершение выполнение дополнительной команды к драйверу.
// Не требуюет предварительного подключения устройства в системе.
//
Процедура НачатьВыполнениеДополнительнойКоманды_Завершение(ОбъектДрайвера, ПараметрыКоманды) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ТекстОшибки = НСтр("ru='Не удалось загрузить драйвер устройства.
                                |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                |;uk='Не вдалося завантажити драйвер пристрою.
                                |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Ложь, , ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПараметрыКоманды.ДанныеОборудования.ОбработчикДрайвера, Не ПараметрыКоманды.ДанныеОборудования.ВСоставеКонфигурации);
		
		Если ОбработчикДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось подключить обработчик драйвера.
			ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстОшибки);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПараметрыКоманды.ДанныеОборудования);
			КонецЕсли;
			времПараметрыПодключения = Новый Структура();
			времПараметрыПодключения.Вставить("ТипОборудования", ПараметрыКоманды.ДанныеОборудования.ТипОборудованияИмя);
			
			Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
				ОбработчикДрайвера.НачатьВыполнениеКоманды(ПараметрыКоманды.ОповещениеПриЗавершении, ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ОбъектДрайвера, ПараметрыКоманды.Параметры, времПараметрыПодключения);
			Иначе
				ВыходныеПараметры = Неопределено;
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ВыходныеПараметры, ОбъектДрайвера, ПараметрыКоманды.Параметры, времПараметрыПодключения);
				Если Не Результат Тогда
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
				КонецЕсли;
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Результат, , ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма.
Функция ПриНачалеРаботыСистемы() Экспорт

	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура();
		глПодключаемоеОборудование.Вставить("ДрайвераПодключаемогоОборудования", Новый Соответствие());
		глПодключаемоеОборудование.Вставить("ПараметрыПодключенияПО"           , Новый Массив());
		глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек"                 , "");
		глПодключаемоеОборудование.Вставить("ЗавершениеРаботыСистемы"          , Ложь);
	КонецЕсли;
	
#Если Не ВебКлиент Тогда
	ПереустановитьПомеченныеДрайверы();
#КонецЕсли
	
КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма.
Функция ПередЗавершениемРаботыСистемы() Экспорт
	
	ОтключитьВсеОборудование();
	
КонецФункции

// Выполнить настройку оборудования.
// 
Процедура ВыполнитьНастройкуОборудования(Идентификатор, ОповещениеПриЗавершении = Неопределено) Экспорт

	Результат = Истина;
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);
	ПараметрыФормы = Новый Структура("ПараметрыОборудования", ДанныеУстройства.Параметры);
	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);       
	ПараметрыФормы.Вставить("ДрайверОборудования", ДанныеУстройства.ДрайверОборудования);  
	
	ФормаНастройки = "ФормаНастройкиУниверсальныйДрайвер";
	
	ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеУстройства.ОбработчикДрайвера, Не ДанныеУстройства.ВСоставеКонфигурации);
		
	Если Не ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент 
		И Не ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
		ФормаНастройки = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяФормыНастройкиПараметров(Строка(ДанныеУстройства.ОбработчикДрайвера));
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ФормаНастройки) Тогда
		ПараметрыКоманды = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудованияЗавершение", ЭтотОбъект, ПараметрыКоманды);
		ОткрытьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Произошла ошибка инициализации формы настройки драйвера.';uk='Сталася помилка ініціалізації форми настройки драйвера.'")); 
	КонецЕсли;
	
КонецПроцедуры

// Завершение настройки оборудования.
//
Процедура ВыполнитьНастройкуОборудованияЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РезультатЗавершения = Ложь;
		Если Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
			РезультатЗавершения = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования);
		КонецЕсли;
		
		Если РезультатЗавершения Тогда 
			ОбновитьПовторноИспользуемыеЗначения();
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.';uk='Не вдалося зберегти параметри пристрою.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗавершения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования.
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт

	МенеджерОборудованияВызовСервера.СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек);

КонецПроцедуры

// Процедура формирует задержку указанной длительности.
//
// Параметры:
//  Время - <Число>
//        - Длительность задержки в секундах.
//
Процедура Пауза(Время) Экспорт

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		ТекстПолный = Текст;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

// Преобразовать список строкой в массив.
//
Функция ПреобразоватьСписокСтрокойВМассив(Источник) Экспорт
	
	ПромежуточнаяСтруктура = Новый Структура(Источник);
	Приемник = Новый Массив;
	
	Для Каждого КлючИЗначение Из ПромежуточнаяСтруктура Цикл
		Приемник.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Возвращает макет слип чека по наименованию макета.
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = Ложь) Экспорт

	Возврат МенеджерОборудованияКлиентПовтИсп.ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН);

КонецФункции

Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено И ДополнительныеПараметры.ПредлагатьУстановку Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru='Для продолжении работы необходимо установить расширение для веб-клиента платформы. Установить?';uk='Для продовження роботи необхідно встановити розширення для веб-клієнта платформи. Встановити?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Подключено);
	КонецЕсли
	
КонецПроцедуры

// Проверить доступность расширения работы с Файлами.
// 
Процедура ПроверитьДоступностьРасширенияРаботыСФайлами(ОповещениеПриЗавершении, ПредлагатьУстановку = Истина) Экспорт
	
	#Если Не ВебКлиент Тогда
	// В тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
	Возврат;
	#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПриЗавершении, ПредлагатьУстановку", ОповещениеПриЗавершении, ПредлагатьУстановку);
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

// Завершение выбора файла драйвера.
//
Процедура ВыборФайлаДрайвераЗавершение(ВыбранныеФайлы, Параметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0  Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, ВыбранныеФайлы[0]);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает выбор файла драйвера для последующей загрузки.
//
Процедура НачатьВыборФайлаДрайвера(ОповещениеПриВыборе) Экспорт 
	
	Результат = Ложь;
	ПолноеИмяФайла = "";
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл драйвера';uk='Виберіть файл драйвера'");
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='Файл драйвера';uk='Файл драйверу'") + ?(МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент(), "(*.zip)|*.zip", "(*.zip, *.exe)| *.zip; *.exe");  
	
	Параметры = Новый Структура("СледующееОповещение", ОповещениеПриВыборе);
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаДрайвераЗавершение", ЭтотОбъект, Параметры);
	
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

// Завершение выбора файла
//
Процедура НачатьВыборФайлаРасширенияЗавершение(Установлено, ДополнительныеПараметры) Экспорт
	
	Если Установлено Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла[ДополнительныеПараметры.РежимДиалогаВыбораФайла]);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайла;
		Диалог.Показать(ДополнительныеПараметры.ОповещениеПриВыборе);
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает выбор файла.
//
Процедура НачатьВыборФайла(ОповещениеПриВыборе, Знач ИмяФайла, РежимДиалогаВыбораФайла = "Открытие") Экспорт
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриВыборе, ИмяФайла, РежимДиалогаВыбораФайла", ОповещениеПриВыборе, ИмяФайла, РежимДиалогаВыбораФайла);
	Оповещение = Новый ОписаниеОповещения("НачатьВыборФайлаРасширенияЗавершение", ЭтотОбъект, ПараметрыКоманды);
	ПроверитьДоступностьРасширенияРаботыСФайлами(Оповещение);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
Процедура ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, 
	СообщениеНеПодключен = "", СообщениеНеВыбран = "", БезСообщений = Ложь, ТекстСообщения = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце обладнання для підключення поточного сеансу.'");
		Если Не БезСообщений Тогда
		      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(ТипОборудования);
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если Не ПустаяСтрока(СообщениеНеПодключен) Тогда
			Если БезСообщений Тогда
				ТекстСообщения = СообщениеНеПодключен;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНеПодключен);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, Неопределено);
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, Идентификатор); 
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("СледующееОповещение", ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбран"  , ?(ПустаяСтрока(СообщениеНеВыбран), СообщениеНеПодключен, СообщениеНеВыбран));
			Контекст.Вставить("БезСообщений"       , БезСообщений);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредложитьВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено И НЕ Параметры.БезСообщений И Не ПустаяСтрока(Параметры.СообщениеНеВыбран) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Параметры.СообщениеНеВыбран);
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		Идентификатор = ?(Результат = Неопределено, Неопределено, Результат.Значение);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Функция предоставляет диалог выбора рабочего места.
// 
Процедура ПредложитьВыборРабочегоМеста(ОбработкаОповещения, ИдентификаторКлиента = "") Экспорт

	Результат = Ложь;
	РабочееМесто = "";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы,,,  ,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Завершение выбора рабочего места.
//
Процедура ПредложитьВыборРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РабочееМесто") Тогда 
		УстановитьРабочееМесто(Результат.РабочееМесто);
	КонецЕсли;
		
КонецПроцедуры

// Функция устанавливает рабочее место.
// 
Процедура УстановитьРабочееМесто(РабочееМесто) Экспорт
	
	МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	
КонецПроцедуры

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента".
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если МассивРабочихМест.Количество() = 0 Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
			РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
		Иначе
			РабочееМесто = МассивРабочихМест[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат
		И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру выполнения операции на Оборудовании.
// 
Функция ПараметрыВыполненияОперацииНаОборудовании() Экспорт; 
	
	Результат = Новый Структура();
	Результат.Вставить("Результат"              , Ложь);
	Результат.Вставить("ОписаниеОшибки"         , Неопределено);
	Результат.Вставить("ИдентификаторУстройства", Неопределено);
	Результат.Вставить("ВыходныеПараметры"      , Неопределено);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСУстройствамиВвода

// Определяет соответствует ли код карты шаблону.
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
//	- Суффикс
//	- Префикс
//	- РазделительБлоков
//	- ДлинаКода
// На выходе:
// Истина - код соответствует шаблону.
// Сообщение пользователю что именно не соответствует.
Функция КодСоответствуетШаблонуМК(ДанныеДорожек, ДанныеШаблона) Экспорт
	
	ОднаДорожкаПрисутствует = Ложь;
	ПроверкаПройдена = Истина;
	
	Для Итератор = 1 По 3 Цикл
		Если ДанныеШаблона["ДоступностьДорожки"+Строка(Итератор)] Тогда
			ОднаДорожкаПрисутствует = Истина;
			текСтрока = ДанныеДорожек[Итератор - 1];
			Если Прав(текСтрока, СтрДлина(ДанныеШаблона["Суффикс" + Строка(Итератор)])) <> ДанныеШаблона["Суффикс" + Строка(Итератор)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка';uk='Доріжка'") + Символы.НПП + Строка(Итератор) 
					+ ". "+НСтр("ru='Суффикс карты не соответствует суффиксу шаблона.';uk='Суфікс карти не відповідає суфіксу шаблону.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если Лев(текСтрока, СтрДлина(ДанныеШаблона["Префикс" + Строка(Итератор)])) <> ДанныеШаблона["Префикс" + Строка(Итератор)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка';uk='Доріжка'") + Символы.НПП + Строка(Итератор) 
					+ ". " + НСтр("ru='Префикс карты не соответствует префиксу шаблона.';uk='Префікс карти не відповідає префіксу шаблону.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если Найти(текСтрока, ДанныеШаблона["РазделительБлоков"+Строка(Итератор)]) = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка';uk='Доріжка'") + Символы.НПП + Строка(Итератор) 
					+ ". "+НСтр("ru='Разделитель блоков карты не соответствует разделителю блоков шаблона.';uk='Роздільник блоків карти не відповідає роздільнику блоків шаблону'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
				
			Если СтрДлина(текСтрока) <> ДанныеШаблона["ДлинаКода"+Строка(Итератор)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка';uk='Доріжка'") + Символы.НПП + Строка(Итератор) 
					+ ". " + НСтр("ru='Длина кода карты не соответствует длине кода шаблона.';uk='Довжина коду карти не відповідає довжині коду шаблону.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверкаПройдена Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОднаДорожкаПрисутствует Тогда 
		Возврат Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В шаблоне не указано ни одной доступной дорожки.';uk='В шаблоні не вказано жодної доступної доріжки.'"));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Производит получение события от устройства.
//
Функция ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;
	
	// Поиск обработчика события
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
						  
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИсточникСобытия)
		   И Подключение.ИменаСобытий <> Неопределено) Тогда
		   
		   // Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Подключение);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
                                                |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                                |;uk='""%Наименование%"": Не вдалося завантажити драйвер пристрою.
                                                |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Подключение.Наименование);
					Продолжить;
				ИначеЕсли ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
					ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(Подключение);
				КонецЕсли;
				
				ВходныеПараметры  = Новый Массив();
				ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
				ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
				ВыходныеПараметры = Неопределено;
				
				// Обрабатываем сообщение
				РезультатОбработки = ВыполнитьКоманду(Подключение.Ссылка, "ОбработатьСобытие", ВходныеПараметры, ВыходныеПараметры);
				
				Если РезультатОбработки Тогда
					// Оповещаем 
					Результат = Новый Структура();
					Результат.Вставить("ИмяСобытия", ВыходныеПараметры[0]);
					Результат.Вставить("Параметр",   ВыходныеПараметры[1]);
					Результат.Вставить("Источник",   "ПодключаемоеОборудование");
				КонецЕсли;
				
				// Оповещаем драйвер о завершении обработки события.
				ВходныеПараметры.Очистить();
				ВходныеПараметры.Добавить(РезультатОбработки);
				ВыполнитьКоманду(Подключение.Ссылка, "ЗавершитьОбработкуСобытия", ВходныеПараметры, ВыходныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит обработку данных события, полученных от клиента.
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт

	Результат = Истина;
	
	// Поиск обработчика события
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
						  
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИсточникСобытия) И Подключение.ИменаСобытий <> Неопределено) Тогда
		   
		   // Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				
				ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(Подключение.ОбработчикДрайвера, Не Подключение.ВСоставеКонфигурации);
				Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент 
					Или ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент Тогда
					
					ВыходныеПараметры = Новый Массив();
					// Обрабатываем сообщение
					Результат = ОбработчикДрайвера.ОбработатьСобытие(Неопределено, Подключение.Параметры, Подключение.ПараметрыПодключения, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные, ВыходныеПараметры);
					// Обрабатываем сообщение
					Если Результат Тогда
						// Оповещаем 
						Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
					КонецЕсли;
					
				Иначе
					
					ВходныеПараметры  = Новый Массив();
					ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
					ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
					ВыходныеПараметры = Неопределено;
					// Обрабатываем сообщение
					Результат = ВыполнитьКоманду(Подключение.Ссылка, "ОбработатьСобытие", ВходныеПараметры, ВыходныеПараметры);
					Если Результат Тогда
						// Оповещаем 
						Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
					КонецЕсли;
				    // Оповещаем драйвер о завершении обработки события.
					ВходныеПараметры.Очистить();
					ВходныеПараметры.Добавить(Результат);
					ВыполнитьКоманду(Подключение.Ссылка, "ЗавершитьОбработкуСобытия", ВходныеПараметры, ВыходныеПараметры);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФискальнымиУстройствами

Процедура НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = НСтр("ru='Фискальное устройство не выбрано или не подключено.';uk='Фіскальний пристрій не вибрано або не підключено.'");
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ИдентификаторУстройства" , ИдентификаторУстройства);
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКоманды_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, Параметры.ВыполняемаяКоманда, Параметры.ВходныеПараметры);
	Иначе
		ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка: %ДополнительноеОписание%';uk='При підключенні устаткування сталася помилка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКоманды_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
	Иначе
		ТекстСообщения = НСтр("ru='При выполнении операции произошла ошибка: %ДополнительноеОписание%';uk='При виконанні операції виникла помилка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат = РезультатВыполнения.Результат;
		РезультатОперации.ОписаниеОшибки = ТекстСообщения;
		РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
		РезультатОперации.Вставить("ВыходныеПараметры", РезультатВыполнения.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать печать фискального отчета на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьПечатьФискальногоОтчета(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	ОтчетСГашением = Ложь, ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , ?(ОтчетСГашением, "PrintZReport", "PrintXReport"));
	
	Если ТипОборудования = Неопределено Тогда
		ТипОборудования = "ФискальныйРегистратор";
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ТипОборудования,
			НСтр("ru='Выберите фискальное устройство';uk='Виберіть фіскальний пристрій'"), НСтр("ru='Фискальное устройство не подключено.';uk='Фіскальний пристрій не підключено.'"), НСтр("ru='Фискальное устройство не выбрано.';uk='Фіскальний пристрій не вибрано.'"));
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Начать печать дополнительного фискального отчета на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьПечатьДополнительногоФискальногоОтчета(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	НаименованиеДополнительногоОтчета = "", ВходныеПараметры = Неопределено, ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	
	Если НаименованиеДополнительногоОтчета <> "PrintPReportDate" 
		И НаименованиеДополнительногоОтчета <> "PrintPReportNumber" 
		И НаименованиеДополнительногоОтчета <> "PrintSoldReport" Тогда
		
		ТекстСообщения = НСтр("ru='При выполнении операции произошла ошибка: укажите корректное наименование отчета';uk='При виконанні операції виникла помилка: вкажіть коректне найменування звіту'");
		Если ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , НаименованиеДополнительногоОтчета);
	
	Если ТипОборудования = Неопределено Тогда
		ТипОборудования = "ФискальныйРегистратор";
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ТипОборудования,
			НСтр("ru='Выберите фискальное устройство';uk='Виберіть фіскальний пристрій'"), НСтр("ru='Фискальное устройство не подключено.';uk='Фіскальний пристрій не підключено.'"), НСтр("ru='Фискальное устройство не выбрано.';uk='Фіскальний пристрій не вибрано.'"));
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Начать печать фискального отчета на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , "OpenDay");
	
	Если ТипОборудования = Неопределено Тогда
		ТипОборудования = "ФискальныйРегистратор";
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ТипОборудования,
			НСтр("ru='Выберите фискальное устройство';uk='Виберіть фіскальний пристрій'"), НСтр("ru='Фискальное устройство не подключено.';uk='Фіскальний пристрій не підключено.'"), НСтр("ru='Фискальное устройство не выбрано.';uk='Фіскальний пристрій не вибрано.'"));
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить инкассацию на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	 ТипИнкассации = 0, Сумма = 0, ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	 
	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(ТипИнкассации);
	ВходныеПараметры.Добавить(Сумма);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , "Encash");
	
	Если ТипОборудования = Неопределено Тогда
		ТипОборудования = "ФискальныйРегистратор";
	КонецЕсли;
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ТипОборудования,
			НСтр("ru='Выберите фискальное устройство';uk='Виберіть фіскальний пристрій'"), НСтр("ru='Фискальное устройство не подключено.';uk='Фіскальний пристрій не підключено.'"), НСтр("ru='Фискальное устройство не выбрано.';uk='Фіскальний пристрій не вибрано.'"));
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить аннулирование чека на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьАннулированиеЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	ОбщиеПараметрыЧека, ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , ОбщиеПараметрыЧека);
	Контекст.Вставить("ВыполняемаяКоманда"      , "AnnulCheck");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство';uk='Виберіть фіскальний пристрій'"), НСтр("ru='Фискальное устройство не подключено.';uk='Фіскальний пристрій не підключено.'"), НСтр("ru='Фискальное устройство не выбрано.';uk='Фіскальний пристрій не вибрано.'"));
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить печать чека на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьПечатьЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	ПараметрыЧека, ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , ПараметрыЧека);
	Контекст.Вставить("ВыполняемаяКоманда"      , "PrintReceipt");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство';uk='Виберіть фіскальний пристрій'"), НСтр("ru='Фискальное устройство не подключено.';uk='Фіскальний пристрій не підключено.'"), НСтр("ru='Фискальное устройство не выбрано.';uk='Фіскальний пристрій не вибрано.'"));
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Производить печать чека на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Процедура НачатьПечатьЧекаПоШаблону(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	ОбщиеПараметры, ПозицииЧека, ТаблицаОплат, ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	
	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(ОбщиеПараметры);
	ВходныеПараметры.Добавить(ПозицииЧека);
	ВходныеПараметры.Добавить(ТаблицаОплат);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , "PrintReceiptByTemplate");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство';uk='Виберіть фіскальний пристрій'"), НСтр("ru='Фискальное устройство не подключено.';uk='Фіскальний пристрій не підключено.'"), НСтр("ru='Фискальное устройство не выбрано.';uk='Фіскальний пристрій не вибрано.'"));
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	Текст, ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	
	ВходныеПараметры = Новый Массив();
	ВходныеПараметры.Добавить(Текст);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , ВходныеПараметры);
	Контекст.Вставить("ВыполняемаяКоманда"      , "PrintText");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите печатающее устройство';uk='Виберіть друкуючий пристрій'"), НСтр("ru='Печатающее устройство не подключено.';uk='Друкуючий пристрій не підключено.'"), 
			НСтр("ru='Печатающее устройство не выбрано.';uk='Друкуючий пристрій не вибрано.'"), НЕ ОтображатьСообщения);
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, 
	ОтображатьСообщения = Истина, ТипОборудования = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ВходныеПараметры"        , Неопределено);
	Контекст.Вставить("ВыполняемаяКоманда"      , "OpenCashDrawer");
	
	Если ИдентификаторУстройства = Неопределено Тогда
		
		Если ТипОборудования = Неопределено Тогда
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		Иначе
			ПоддерживаемыеТипыВО = ТипОборудования;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите фискальное устройство';uk='Виберіть фіскальний пристрій'"), НСтр("ru='Фискальное устройство не подключено.';uk='Фіскальний пристрій не підключено.'"), НСтр("ru='Фискальное устройство не выбрано.';uk='Фіскальний пристрій не вибрано.'"));
	Иначе
		НачатьВыполнениеКоманды_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает ширину строки в символах.
//  
Процедура НачатьПолучениеШириныСтрокиПечатающегоУстройства(ОповещениеПриЗавершении, ИдентификаторУстройства) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("ИдентификаторУстройства" , ИдентификаторУстройства);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеШириныСтрокиПечатающегоУстройства_ВыполнитьКомандуЗавершение", ЭтотОбъект, Контекст);
	НачатьВыполнениеКоманды(ОписаниеОповещения, ИдентификаторУстройства, "GetLineLength", Неопределено);
	
КонецПроцедуры

Процедура НачатьПолучениеШириныСтрокиПечатающегоУстройства_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Если РезультатВыполнения.Результат Тогда
			ТекстСообщения = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
		Иначе
			ТекстСообщения = НСтр("ru='При выполнении операции произошла ошибка: %ДополнительноеОписание%';uk='При виконанні операції виникла помилка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
		КонецЕсли;
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат = РезультатВыполнения.Результат;
		РезультатОперации.ОписаниеОшибки = ТекстСообщения;
		РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
		РезультатОперации.Вставить("ВыходныеПараметры", РезультатВыполнения.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭквайрингом

// Заполняет структуру результата подключения эквайрингового терминала.
// 
Функция ПараметрыРезультатаПодключенияЭквайринговогоТерминала() Экспорт; 
	
	Результат = Новый Структура();
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("ОписаниеОшибки", Неопределено);
	Результат.Вставить("ИдентификаторУстройстваЭТ" , Неопределено);
	Результат.Вставить("ИдентификаторУстройстваПУ" , Неопределено);
	Результат.Вставить("ПечатьКвитанцийНаТерминале", Ложь);
	Возврат Результат;
	
КонецФункции

// Начать подключение эквайрингово терминала.
// Возвращает структуру:
//   Результат - Результат операции.
//   ОписаниеОшибки - Описание ошибки (Для Результат = Ложь).
//   ИдентификаторПодключенногоЭТ - Идентификатор подключенного эквайринговогой терминала.
//   ИдентификаторПодключенногоПУ - Идентификатор подключенного фискального регистратора.
//   ПечатьКвитанцийНаТерминале   - Печать квитанций на терминале, если Истина то ИдентификаторПодключенногоПУ = Неопределено.
//
Процедура НачатьПодключенияЭквайринговогоТерминала(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройстваЭТ = Неопределено, ИдентификаторУстройстваПУ = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении"  , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор"  , УникальныйИдентификатор);
	Контекст.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	Контекст.Вставить("ИдентификаторУстройстваПУ", ИдентификаторУстройстваПУ);
	
	Если Контекст.ИдентификаторУстройстваЭТ = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ЭквайринговыйТерминал",
			НСтр("ru='Выберите эквайринговый терминал';uk='Виберіть еквайрінговий термінал'"), НСтр("ru='Эквайринговый терминал не подключен.';uk='Еквайринговий термінал не підключений.'"), НСтр("ru='Эквайринговый терминал не выбран.';uk='Еквайринговий термінал не вибрано.'"), Истина);
	Иначе
		НачатьПодключенияЭквайринговогоТерминала_ВыбратьУстройствоЗавершение(Контекст.ИдентификаторУстройстваЭТ, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ВыбратьУстройствоЗавершение(ИдентификаторУстройстваЭТ, Параметры) Экспорт
	
	Если ИдентификаторУстройстваЭТ = Неопределено Тогда
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = НСтр("ru='Эквайринговый терминал не выбран.';uk='Еквайринговий термінал не вибрано.'");
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ИдентификаторУстройстваЭТ" , ИдентификаторУстройстваЭТ);
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройстваЭТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ПечатьНаТерминалеЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройстваЭТ, "PrintSlipOnTerminal", ВходныеПараметры);
	Иначе
		// Ошибка подключения.
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При подключении терминала произошла ошибка: %ДополнительноеОписание%';uk='При підключенні терміналу сталася помилка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
			
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ПечатьНаТерминалеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ПечатьКвитанцийНаТерминале = РезультатВыполнения.ВыходныеПараметры[0]; 
		Параметры.Вставить("ПечатьКвитанцийНаТерминале", ПечатьКвитанцийНаТерминале);
		Если ПечатьКвитанцийНаТерминале Тогда
			Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
				РезультатОперации.Результат = Истина;
				РезультатОперации.ИдентификаторУстройстваЭТ  = Параметры.ИдентификаторУстройстваЭТ;
				РезультатОперации.ПечатьКвитанцийНаТерминале = ПечатьКвитанцийНаТерминале;
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
			КонецЕсли;
		Иначе
			Если Параметры.ИдентификаторУстройстваПУ = Неопределено Тогда
				ПоддерживаемыеТипыВО = Новый Массив();
				ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
				ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
				ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ВыбратьПечатающегоУстройстваЗавершение", ЭтотОбъект, Параметры);
				ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
					НСтр("ru='Выберите печатающее устройство';uk='Виберіть друкуючий пристрій'"), НСтр("ru='Печатающее устройство не подключено.';uk='Друкуючий пристрій не підключено.'"), НСтр("ru='Печатающее устройство не выбрано.';uk='Друкуючий пристрій не вибрано.'"), Истина);
			Иначе
				НачатьПодключенияЭквайринговогоТерминала_ВыбратьПечатающегоУстройстваЗавершение(Параметры.ИдентификаторУстройстваПУ, Параметры);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройстваЭТ);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При использовании терминала произошла ошибка: %ДополнительноеОписание%';uk='При використанні терміналу сталася помилка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ВыбратьПечатающегоУстройстваЗавершение(ИдентификаторУстройстваПУ, Параметры) Экспорт
	
	Если ИдентификаторУстройстваПУ = Неопределено Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройстваЭТ);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = НСтр("ru='Печатающее устройство не выбрано.';uk='Друкуючий пристрій не вибрано.'");
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Параметры.ИдентификаторУстройстваПУ = ИдентификаторУстройстваПУ;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключенияЭквайринговогоТерминала_ПечатающееУстройствоПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройстваПУ);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключенияЭквайринговогоТерминала_ПечатающееУстройствоПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Истина;
			РезультатОперации.ИдентификаторУстройстваЭТ  = Параметры.ИдентификаторУстройстваЭТ;
			РезультатОперации.ИдентификаторУстройстваПУ  = Параметры.ИдентификаторУстройстваПУ;
			РезультатОперации.ПечатьКвитанцийНаТерминале = Параметры.ПечатьКвитанцийНаТерминале;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройстваЭТ);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='При подключении печатающего устройство произошла ошибка: %ДополнительноеОписание%';uk='При підключенні друкуючого пристрою сталася помилка: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отключение подключенного эквайрингово терминала. 
// Если эквайринговый терминал не поддерживает печать квитанций на терминале, для печати подключается печатающее устройство.
// Данной процедурой оно тоже будет отключено.
// Входящие параметры:  
//  ПараметрыОперации - Структура со следующими атрибутами.
//    ИдентификаторУстройстваЭТ - Идентификатор подключенного эквайринговогой терминала.
//    ИдентификаторУстройстваПУ - Идентификатор подключенного фискального регистратора.
//    ПечатьКвитанцийНаТерминале   - Печать квитанций на терминале, если True то ИдентификаторПодключенногоПУ = Неопределено.
//  УникальныйИдентификатор - идентификатор формы.
//
Процедура НачатьОтключениеЭквайринговогоТерминала(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации) Экспорт
	
	Если Не ПараметрыОперации.ПечатьКвитанцийНаТерминале И Не ПараметрыОперации.ИдентификаторУстройстваПУ = Неопределено Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(, УникальныйИдентификатор, ПараметрыОперации.ИдентификаторУстройстваПУ);
	КонецЕсли;
	
	Если Не ПараметрыОперации.ИдентификаторУстройстваЭТ = Неопределено Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(, УникальныйИдентификатор, ПараметрыОперации.ИдентификаторУстройстваЭТ);
	КонецЕсли;
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
		РезультатОперации.Результат = Истина;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Выполнить сверку итогов на эквайринговом терминале.
// Если эквайринговый терминал не поддерживает печать квитанций на терминале, для печати подключается печатающее устройство.
//
Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройстваЭТ = Неопределено, ИдентификаторУстройстваПУ = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ПодключениеЗавершение", ЭтотОбъект, Контекст);
	НачатьПодключенияЭквайринговогоТерминала(Оповещение, УникальныйИдентификатор, ИдентификаторУстройстваЭТ, ИдентификаторУстройстваПУ);
	
КонецПроцедуры

Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		Параметры.Вставить("ПечатьКвитанцийНаТерминале", РезультатПодключения.ПечатьКвитанцийНаТерминале);
		Параметры.Вставить("ИдентификаторУстройстваЭТ" , РезультатПодключения.ИдентификаторУстройстваЭТ);
		Параметры.Вставить("ИдентификаторУстройстваПУ" , РезультатПодключения.ИдентификаторУстройстваПУ);
		
		ВходныеПараметры  = Неопределено;
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ВыполнениеКомандыЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, РезультатПодключения.ИдентификаторУстройстваЭТ, "Settlement", ВходныеПараметры);
	Иначе
		// Ошибка подключения.
		ТекстСообщения = НСтр("ru='При подключении терминала произошла ошибка: %ДополнительноеОписание%';uk='При підключенні терміналу сталася помилка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ВыполнениеКомандыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ТекстСлипЧека = РезультатВыполнения.ВыходныеПараметры[0][1];
		
		Если Не ПустаяСтрока(ТекстСлипЧека) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ТекстСлипЧека);
		КонецЕсли;
		
		Если Не Параметры.ПечатьКвитанцийНаТерминале И Не Параметры.ИдентификаторУстройстваПУ = Неопределено И Не ПустаяСтрока(ТекстСлипЧека) Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ПечатьЗавершение", ЭтотОбъект, Параметры);
			НачатьПечатьТекста(Оповещение, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройстваПУ, ТекстСлипЧека, Ложь);
		Иначе
			НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
			Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
				РезультатОперации.Результат = Истина;
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
		
		ТекстСообщения = НСтр("ru='При использовании терминала произошла ошибка: %ДополнительноеОписание%';uk='При використанні терміналу сталася помилка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале_ПечатьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
	
	Если РезультатВыполнения.Результат Тогда  
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Истина;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='При печати слип чека возникла ошибка: %ДополнительноеОписание%';uk='При друку сліп чека виникла помилка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров выполнения эквайринговой операции.
Функция ПараметрыВыполненияЭквайринговойОперации() Экспорт;
	
	Результат = Новый Структура();
	Результат.Вставить("ТипТранзакции"      , Неопределено);
	Результат.Вставить("СуммаОперации"      , 0);
	Результат.Вставить("НомерКарты"         , Неопределено);
	Результат.Вставить("НомерЧека"          , Неопределено);
	Результат.Вставить("НомерЧекаЭТ"        , Неопределено);
	Результат.Вставить("СсылочныйНомер"     , Неопределено);
	Результат.Вставить("ТекстСлипЧека"      , Неопределено);
	Возврат Результат;
	
КонецФункции

// Выполнить операции на эквайринговом терминале.
// Если эквайринговый терминал не поддерживает печать квитанций на терминале, для печати подключается печатающее устройство.
//
Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройстваЭТ = Неопределено, ИдентификаторУстройстваПУ = Неопределено, ПараметрыОперации, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("ПараметрыОперации"       , ПараметрыОперации);
	
	Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеОперацииНаЭквайринговомТерминале_ПодключениеЗавершение", ЭтотОбъект, Контекст);
	НачатьПодключенияЭквайринговогоТерминала(Оповещение, УникальныйИдентификатор, ИдентификаторУстройстваЭТ, ИдентификаторУстройстваПУ);
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		Параметры.Вставить("ПечатьКвитанцийНаТерминале", РезультатПодключения.ПечатьКвитанцийНаТерминале);
		Параметры.Вставить("ИдентификаторУстройстваЭТ" , РезультатПодключения.ИдентификаторУстройстваЭТ);
		Параметры.Вставить("ИдентификаторУстройстваПУ" , РезультатПодключения.ИдентификаторУстройстваПУ);
		
		ПараметрыОперации = Параметры.ПараметрыОперации;
		
		ТипТранзакции  = Параметры.ПараметрыОперации.ТипТранзакции;
		СуммаОперации  = Параметры.ПараметрыОперации.СуммаОперации;
		НомерКарты     = ?(ПараметрыОперации.Свойство("НомерКарты")    , ПараметрыОперации.НомерКарты, "");
		НомерЧека      = ?(ПараметрыОперации.Свойство("НомерЧека")     , ПараметрыОперации.НомерЧека, "");
		НомерЧекаЭТ    = ?(ПараметрыОперации.Свойство("НомерЧекаЭТ")   , ПараметрыОперации.НомерЧекаЭТ, "");
		СсылочныйНомер = ?(ПараметрыОперации.Свойство("СсылочныйНомер"), ПараметрыОперации.СсылочныйНомер, "");   
		
		Если ТипТранзакции = "AuthorizeCompletion" Или ТипТранзакции = "AuthorizeVoidPreSales" Тогда
			Параметры.Вставить("БезВозвращаемыхПараметров", Истина);
		КонецЕсли;
		
		ВходныеПараметры  = Новый Массив();
		ВходныеПараметры.Добавить(СуммаОперации);
		
		Если ТипТранзакции = "AuthorizeSales" Тогда
			ВходныеПараметры.Добавить(НомерКарты);
			ВходныеПараметры.Добавить(НомерЧека);
			ВходныеПараметры.Добавить(СсылочныйНомер);
		ИначеЕсли ТипТранзакции = "AuthorizeVoid" Или ТипТранзакции = "EmergencyVoid" Тогда
			ВходныеПараметры.Добавить(СсылочныйНомер);
			ВходныеПараметры.Добавить(НомерЧекаЭТ);
			ВходныеПараметры.Добавить(НомерКарты);
		ИначеЕсли ТипТранзакции = "AuthorizeRefund" Тогда
			ВходныеПараметры.Добавить(НомерКарты);
			ВходныеПараметры.Добавить(СсылочныйНомер);
			ВходныеПараметры.Добавить(НомерЧекаЭТ);
		ИначеЕсли ТипТранзакции = "AuthorizePreSales" Тогда
			ВходныеПараметры.Добавить(НомерКарты);
			ВходныеПараметры.Добавить(НомерЧека);
			ВходныеПараметры.Добавить(СсылочныйНомер);
		Иначе
			ВходныеПараметры.Добавить(НомерКарты);
			ВходныеПараметры.Добавить(СсылочныйНомер);
			ВходныеПараметры.Добавить(НомерЧекаЭТ);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеОперацииНаЭквайринговомТерминале_ВыполнениеКомандыЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, РезультатПодключения.ИдентификаторУстройстваЭТ, ТипТранзакции, ВходныеПараметры);
		
	Иначе
		// Ошибка подключения.
		ТекстСообщения = НСтр("ru='При подключении терминала произошла ошибка: %ДополнительноеОписание%';uk='При підключенні терміналу сталася помилка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатПодключения.ОписаниеОшибки);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале_ВыполнениеКомандыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыОперации = Параметры.ПараметрыОперации;
		Если Параметры.Свойство("БезВозвращаемыхПараметров") Или РезультатВыполнения.ВыходныеПараметры.Количество()= 1 Тогда
			ПараметрыОперации.НомерКарты     = "";
			ПараметрыОперации.СсылочныйНомер = "";
			ПараметрыОперации.НомерЧекаЭТ    = "";
			ПараметрыОперации.ТекстСлипЧека  = РезультатВыполнения.ВыходныеПараметры[0][1];
		Иначе
			ПараметрыОперации.НомерКарты     = РезультатВыполнения.ВыходныеПараметры[0];
			ПараметрыОперации.СсылочныйНомер = РезультатВыполнения.ВыходныеПараметры[1];
			ПараметрыОперации.НомерЧекаЭТ    = РезультатВыполнения.ВыходныеПараметры[2];
			ПараметрыОперации.ТекстСлипЧека  = РезультатВыполнения.ВыходныеПараметры[3][1];
		КонецЕсли;
	
		Если Не ПустаяСтрока(ПараметрыОперации.ТекстСлипЧека) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ПараметрыОперации.ТекстСлипЧека);
		КонецЕсли;
		
		Если Не Параметры.ПечатьКвитанцийНаТерминале И Не Параметры.ИдентификаторУстройстваПУ = Неопределено И Не ПустаяСтрока(ПараметрыОперации.ТекстСлипЧека) Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеОперацииНаЭквайринговомТерминале_ПечатьЗавершение", ЭтотОбъект, Параметры);
			НачатьПечатьТекста(Оповещение, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройстваПУ, ПараметрыОперации.ТекстСлипЧека, Ложь);
		Иначе
			НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
			Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
				РезультатОперации = Параметры.ПараметрыОперации;
				РезультатОперации.Вставить("Результат", Истина);
				РезультатОперации.Вставить("ОписаниеОшибки");
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
		
		ТекстСообщения = НСтр("ru='При использовании терминала произошла ошибка: %ДополнительноеОписание%';uk='При використанні терміналу сталася помилка: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале_ПечатьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда  
		НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = Параметры.ПараметрыОперации;
			РезультатОперации.Вставить("Результат", Истина);
			РезультатОперации.Вставить("ОписаниеОшибки");
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ОписаниеОшибки", РезультатВыполнения.ОписаниеОшибки);
		РезультатОперации = Параметры.ПараметрыОперации;
		ВходныеПараметры = Новый Массив();
		ВходныеПараметры.Добавить(РезультатОперации.СуммаОперации);
		ВходныеПараметры.Добавить(РезультатОперации.СсылочныйНомер);
		ВходныеПараметры.Добавить(РезультатОперации.НомерЧека);
		
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеОперацииНаЭквайринговомТерминале_ОшибкаПечатиЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, Параметры.ИдентификаторУстройстваЭТ, "EmergencyVoid", ВходныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале_ОшибкаПечатиЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	НачатьОтключениеЭквайринговогоТерминала(, Параметры.УникальныйИдентификатор, Параметры);
	
	ТекстСообщения = НСтр("ru='При печати слип чека возникла ошибка: %ДополнительноеОписание%';uk='При друку сліп чека виникла помилка: %ДополнительноеОписание%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", Параметры.ОписаниеОшибки);
	Если Параметры.ОтображатьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыРезультатаПодключенияЭквайринговогоТерминала();
		РезультатОперации.Результат = Ложь;
		РезультатОперации.ОписаниеОшибки = ТекстСообщения;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДисплеямиПокупателя

// Начать вывод тестовых строк на подключенные дисплеи покупателя.
//
Процедура НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, СтрокиТекста) Экспорт
	
	ПодключенныеУстройства = ПолучитьПодключенныеУстройства(глПодключаемоеОборудование.ПараметрыПодключенияПО, 
		ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя"), ИдентификаторУстройства);
	
	Если ПодключенныеУстройства.Количество() > 0 Тогда
		Для Каждого Устройство Из ПодключенныеУстройства Цикл
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
			Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
			Контекст.Вставить("ИдентификаторУстройства" , Устройство.Ссылка);
			Оповещение = Новый ОписаниеОповещения("НачатьОперациюНаДисплейПокупателя_ВыполнитьКомандуЗавершение", ЭтотОбъект, Контекст);
			
			ВходныеПараметры  = Новый Массив();
			ВходныеПараметры.Добавить(СтрокиТекста);
			НачатьВыполнениеКоманды(Оповещение, Устройство.Ссылка, "DisplayText", ВходныеПараметры);
		КонецЦикла
	ИначеЕсли ИдентификаторУстройства <> Неопределено И ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru='Нет подключенных дисплеев покупателя.';uk='Немає підключених дисплеїв покупця.'");
		РезультатОперации.ИдентификаторУстройства = ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Начать очистку подключенных дисплеев покупателя.
//
Процедура НачатьОчисткуДисплеяПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПодключенныеУстройства = ПолучитьПодключенныеУстройства(глПодключаемоеОборудование.ПараметрыПодключенияПО, 
		ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя"), ИдентификаторУстройства);
	
	Если ПодключенныеУстройства.Количество() > 0 Тогда
		Для Каждого Устройство Из ПодключенныеУстройства Цикл
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
			Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
			Контекст.Вставить("ИдентификаторУстройства" , Устройство.Ссылка);
			Оповещение = Новый ОписаниеОповещения("НачатьОперациюНаДисплейПокупателя_ВыполнитьКомандуЗавершение", ЭтотОбъект, Контекст);
				ВходныеПараметры  = Неопределено;
			НачатьВыполнениеКоманды(Оповещение, Устройство.Ссылка, "ClearText", ВходныеПараметры);
		КонецЦикла
	ИначеЕсли ИдентификаторУстройства <> Неопределено И ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru='Нет подключенных дисплеев покупателя.';uk='Немає підключених дисплеїв покупця.'");
		РезультатОперации.ИдентификаторУстройства = ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОперациюНаДисплейПокупателя_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = "";
	Иначе
		ОписаниеОшибки = НСтр("ru='При использовании дисплея покупателя произошла ошибка: %ДополнительноеОписание%';uk='При використанні дисплея покупця сталася помилка: %ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат = РезультатВыполнения.Результат;
		РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
		РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСТСД

// Начать загрузку данных из терминала сбора данных.
//
Процедура НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, СворачиватьДанные = Ложь, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("СворачиватьДанные"       , СворачиватьДанные);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Оповещение = Новый ОписаниеОповещения("НачатьЗагрузкуДанныеИзТСД_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
	ПредложитьВыбратьУстройство(Оповещение, "ТерминалСбораДанных",
		НСтр("ru='Выберите терминал сбора данных';uk='Виберіть термінал збору даних'"), НСтр("ru='Терминал сбора данных не подключен.';uk='Термінал збору даних не підключений.'"), , Не ОтображатьСообщения);
		
КонецПроцедуры

Процедура НачатьЗагрузкуДанныеИзТСД_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Терминал сбора данных не подключен.';uk='Термінал збору даних не підключений.'");
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НачатьЗагрузкуДанныеИзТСД_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(Оповещение, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьЗагрузкуДанныеИзТСД_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуДанныеИзТСД_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "DownloadDocument", ВходныеПараметры);
	Иначе
		ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗагрузкуДанныеИзТСД_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыходныеПараметры = РезультатВыполнения.ВыходныеПараметры;
		ТаблицаЗагрузкиИзТСД = Новый Массив();       
		ТаблицаДанных = Новый Соответствие();
			
		Для Индекс = 0 По ВыходныеПараметры[0].Количество()/2 - 1 Цикл
			Штрихкод    = ВыходныеПараметры[0][Индекс * 2 + 0];
			Количество = Число(?(ПустаяСтрока(ВыходныеПараметры[0][Индекс * 2 + 1]), 0, ВыходныеПараметры[0][Индекс * 2 + 1]));
			Если Параметры.СворачиватьДанные Тогда
				Данные = ТаблицаДанных.Получить(Штрихкод);
				Если Данные = Неопределено Тогда
					ТаблицаДанных.Вставить(Штрихкод, Количество)
				Иначе
					ТаблицаДанных.Вставить(Штрихкод, Данные + Количество)
				КонецЕсли;
			Иначе
				ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, Количество));
			КонецЕсли;
		КонецЦикла;
			
		Если Параметры.СворачиватьДанные Тогда
			Для Каждого Данные  Из ТаблицаДанных Цикл
				ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Данные.Ключ, Данные.Значение));
			КонецЦикла
		КонецЕсли;
		
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Истина;
			РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
			РезультатОперации.Вставить("ТаблицаТоваров", ТаблицаЗагрузкиИзТСД);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		
	Иначе
		ОписаниеОшибки = НСтр("ru='При загрузке данных из терминала сбора данных произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При завантаженні даних з терміналу збору даних виникла помилка.
                                  |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = РезультатВыполнения.Результат;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать выгрузку данных в терминал сбора данных.
//
Процедура НачатьВыгрузкуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ТаблицаВыгрузкиТоваров, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров"  , ТаблицаВыгрузкиТоваров);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Оповещение = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВТСД_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
	ПредложитьВыбратьУстройство(Оповещение, "ТерминалСбораДанных",
		НСтр("ru='Выберите терминал сбора данных';uk='Виберіть термінал збору даних'"), НСтр("ru='Терминал сбора данных не подключен.';uk='Термінал збору даних не підключений.'"), , Не ОтображатьСообщения);
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВТСД_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Терминал сбора данных не подключен.';uk='Термінал збору даних не підключений.'");
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВТСД_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(Оповещение, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВТСД_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		
		ВходныеПараметры  = Новый Массив();
		МассивТСД = Новый Массив;
		Для Каждого текСтрока Из Параметры.ТаблицаВыгрузкиТоваров Цикл
			Если текСтрока.Свойство("Номенклатура") Тогда
				НаименованиеНоменклатуры = Строка(текСтрока.Номенклатура);
			ИначеЕсли текСтрока.Свойство("Наименование") Тогда
				НаименованиеНоменклатуры = текСтрока.Наименование;
			Иначе
				НаименованиеНоменклатуры = "";
			КонецЕсли;
			СтрокаМассиваТСД = Новый СписокЗначений; // Не массив для сохранения совместимости с обработками обслуживания.
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Штрихкод")                   , текСтрока.Штрихкод, ""));
			СтрокаМассиваТСД.Добавить(НаименованиеНоменклатуры);
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ЕдиницаИзмерения")           , текСтрока.ЕдиницаИзмерения, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ХарактеристикаНоменклатуры") , текСтрока.ХарактеристикаНоменклатуры, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("СерияНоменклатуры")          , текСтрока.СерияНоменклатуры, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Качество")                   , текСтрока.Качество, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Цена")                       , текСтрока.Цена, 0));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Количество")                 , текСтрока.Количество, 0));
			МассивТСД.Добавить(СтрокаМассиваТСД);
		КонецЦикла;
				
		ВходныеПараметры.Добавить("Items");
		ВходныеПараметры.Добавить(МассивТСД);
		
		Оповещение = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВТСД_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, Параметры.ИдентификаторУстройства, "UploadDirectory", ВходныеПараметры);
		
	Иначе
		ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВТСД_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
		
	Если НЕ РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = НСтр("ru='При выгрузке данных в терминал сбора данных произошла ошибка: %ОписаниеОшибки%';uk='При вивантаженні даних в термінал збору даних виникла помилка: %ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ""; 
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат = РезультатВыполнения.Результат;
		РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
		РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать очистку данных в терминале сбора данных.
//
Процедура НачатьОчисткуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении" , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьОчисткуДанныеВТСД_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(Оповещение, "ТерминалСбораДанных",
			НСтр("ru='Выберите терминал сбора данных';uk='Виберіть термінал збору даних'"), НСтр("ru='Терминал сбора данных не подключен.';uk='Термінал збору даних не підключений.'"), , Не ОтображатьСообщения);
	Иначе
		НачатьОчисткуДанныеВТСД_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуДанныеВТСД_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Терминал сбора данных не подключен.';uk='Термінал збору даних не підключений.'");
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуДанныеВТСД_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьОчисткуДанныеВТСД_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуДанныеВТСД_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ClearTable", ВходныеПараметры);
	Иначе
		ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуДанныеВТСД_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
		
	Если НЕ РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = НСтр("ru='При очистке данных в терминале сбора данных произошла ошибка: %ОписаниеОшибки%';uk='При очищенні даних в терміналі збору даних сталася помилка: %ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ""; 
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат = РезультатВыполнения.Результат;
		РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
		РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭлектроннымиВесами

// Получает вес с электронных весов.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриЗавершении - оповещение при завершении взвешивании и передачи веса.
//
Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьПолученияВесаСЭлектронныхВесов_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(Оповещение, "ЭлектронныеВесы",
			НСтр("ru='Выберите электронные весы';uk='Виберіть електронні ваги'"), НСтр("ru='Электронные весы не подключены.';uk='Електронні ваги не підключені.'"), НСтр("ru='Электронные весы не выбраны.';uk='Електронні ваги не вибрані.'"), Истина);
	Иначе
		НачатьПолученияВесаСЭлектронныхВесов_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолученияВесаСЭлектронныхВесов_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Электронные весы не выбраны.';uk='Електронні ваги не вибрані.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства" , ИдентификаторУстройства);
	Оповещение = Новый ОписаниеОповещения("НачатьПолученияВесаСЭлектронныхВесов_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(Оповещение, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьПолученияВесаСЭлектронныхВесов_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ВходныеПараметры  = Неопределено;
		Оповещение = Новый ОписаниеОповещения("НачатьПолученияВесаСЭлектронныхВесов_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(Оповещение, Параметры.ИдентификаторУстройства, "ПолучитьВес", ВходныеПараметры);
	Иначе
		// Ошибка подключения весов
		ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
			РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолученияВесаСЭлектронныхВесов_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Вес = РезультатВыполнения.ВыходныеПараметры[0]; // Вес получен
		ОписаниеОшибки = "";
	Иначе
		Вес = Неопределено;
		ОписаниеОшибки = НСтр("ru='При использовании электронных весов произошла ошибка: %ДополнительноеОписание%';uk='При використанні електронних ваг сталася помилка: %ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат = РезультатВыполнения.Результат;
		РезультатОперации.ОписаниеОшибки = ОписаниеОшибки;
		РезультатОперации.ИдентификаторУстройства = Параметры.ИдентификаторУстройства;
		РезультатОперации.Вставить("Вес", Вес);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыCВесамиСПечатьюЭтикеток

// Начать выгрузку данных в терминал сбора данных.
//
Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ТаблицаВыгрузкиТоваров, ЧастичнаяВыгрузка = Ложь, ОтображатьСообщения = Истина) Экспорт
	
	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет данных для выгрузки!';uk='Немає даних для вивантаження!'");
		Если ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			РезультатОперации = ПараметрыВыполненияОперацииНаОборудовании();
			РезультатОперации.Результат = Ложь;
			РезультатОперации.ОписаниеОшибки = ТекстСообщения;
			РезультатОперации.ИдентификаторУстройства = ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Контекст = Новый Структура; 
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров"  , ТаблицаВыгрузкиТоваров);
	Контекст.Вставить("ЧастичнаяВыгрузка"       , ЧастичнаяВыгрузка);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ВесыСПечатьюЭтикеток",
			НСтр("ru='Выберите весы с печатью этикеток';uk='Виберіть ваги з друком етикеток'"), НСтр("ru='Весы с печатью этикеток не подключены.';uk='Ваги з друком етикеток не підключені.'"));
	Иначе
		НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='Весы с печатью этикеток не выбраны.';uk='Ваги з друком етикеток не обрані.'");
			Результат = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Подключено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ПодключениеЗавершение", ЭтотОбъект, Параметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	Иначе
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента платформы.';uk='Дана операція не доступна без встановленого розширення для веб-клієнта платформи.'");
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		
		ВходныеПараметры  = Новый Массив;
		ВходныеПараметры.Добавить(Параметры.ТаблицаВыгрузкиТоваров);
		ВходныеПараметры.Добавить(Параметры.ЧастичнаяВыгрузка); // Частичная выгрузка.
		ВыходныеПараметры = Неопределено;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При підключенні пристрою сталася помилка.
                                  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатПодключения.ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ТекстСообщения = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При вивантаженні даних в обладнання виникла помилка.
                                  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
		
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатВыполнения.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать очистку товаров в весах с печатью этикеток.
//
Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ВесыСПечатьюЭтикеток",
			НСтр("ru='Выберите весы с печатью этикеток';uk='Виберіть ваги з друком етикеток'"), НСтр("ru='Весы с печатью этикеток не подключены.';uk='Ваги з друком етикеток не підключені.'"));
	Иначе
		НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='Весы с печатью этикеток не выбраны.';uk='Ваги з друком етикеток не обрані.'");
			Результат = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	ТекстСообщения = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
	
	Если РезультатПодключения.Результат Тогда
		ВходныеПараметры  = Неопределено;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
		НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры);
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                    |%ОписаниеОшибки%'
                                    |;uk='При підключенні пристрою сталася помилка.
                                    |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатПодключения.ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
		
	ТекстСообщения = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При очищенні даних в обладнанні сталася помилка.
                                  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатВыполнения.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСОборудованиемПринтеромЭтикеток

// Начать печать этикеток.
//
Процедура НачатьПечатьЭтикеток(ОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ОписаниеЭтикеткиВXML, ДанныеДляПечати, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершенииПечати);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОписаниеЭтикеткиВXML"    , ОписаниеЭтикеткиВXML);
	Контекст.Вставить("ДанныеДляПечати"         , ДанныеДляПечати);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда	
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ПринтерЭтикеток",
			НСтр("ru='Выберите принтер этикеток';uk='Виберіть принтер етикеток'"), НСтр("ru='Принтер этикеток не подключен.';uk='Принтер етикеток не підключений.'"));
	Иначе
		НачатьПечатьЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьЭтикеток_ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='Принтер этикеток не выбран.';uk='Принтер етикеток не вибраний.'");
			Результат = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_ПодключениеЗавершение", ЭтотОбъект, Параметры);
	НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьПечатьЭтикеток_ПодключениеЗавершение(РезультатПодключения, Параметры) Экспорт
	
	Если РезультатПодключения.Результат Тогда
		
		СообщениеОбОшибке = "";
		ОписаниеЭтикеткиВСтруктуре = Неопределено;
		Результат = МенеджерОборудованияВызовСервера.ПолучитьСтруктуруСОписаниемМакета(Параметры.ОписаниеЭтикеткиВXML, СообщениеОбОшибке, ОписаниеЭтикеткиВСтруктуре);
		
		Если Не Результат Тогда
			
			ОписаниеОшибки = НСтр("ru='При обработке макета этикетки произошла ошибка.
                                      |%ОписаниеОшибки%
                                      |Печать прервана.'
                                      |;uk='При обробці макета етикетки сталася помилка.
                                      |%ОписаниеОшибки%
                                      |Друк перервано.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", СообщениеОбОшибке);
			
			Если Параметры.ОтображатьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
		
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			КонецЕсли;
			
		Иначе
			ВходныеПараметры = Новый Массив();
			ВходныеПараметры.Добавить(ОписаниеЭтикеткиВСтруктуре);
			ВходныеПараметры.Добавить(Параметры.ДанныеДляПечати);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_ВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ПечатьЭтикеток", ВходныеПараметры);
		КонецЕсли;
		
	Иначе
		ОписаниеОшибки = НСтр("ru='При подключении устройства произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При підключенні пристрою сталася помилка.
                                  |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатПодключения.ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьЭтикеток_ВыполнитьКомандуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОписаниеОшибки = НСтр("ru='Ошибок нет.';uk='Помилок немає.'");
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = НСтр("ru='При печати на принтере чеков произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При друку на принтері чеків виникла помилка.
                                  |%ОписаниеОшибки%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", РезультатВыполнения.ВыходныеПараметры[1]);
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
		
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		Результат = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатВыполнения.Результат, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Результат);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоИдентификатору(, Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать редактирование макета.
//
Процедура НачатьРедактированиеМакета(ОповещениеПриЗавершенииРедактирования, ОписаниеЭтикеткиВXML, АдресХранилищаСКД) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение", ОповещениеПриЗавершенииРедактирования);
	Контекст.Вставить("XMLОписаниеМакета"  , ОписаниеЭтикеткиВXML);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьРедактированиеМакета_Завершение", ЭтотОбъект, Контекст);
	
	ИмяФормы = "ОбщаяФорма.РедакторЭтикетокФормаРедактированияМакета";
	
	Попытка
		ОткрытьФорму(ИмяФормы, Новый Структура("АдресХранилищаСКД", АдресХранилищаСКД),,,,, ОповещениеПриЗавершении);
	Исключение
		ТекстСообщения = НСтр("ru='Использование редактора этикеток невозможно! Функциональность не поддерживается.';uk='Використання редактора етикеток неможливе! Функціональність не підтримується.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьРедактированиеМакета_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("РазмерМакета",      ?(Результат <> Неопределено, ДополнительныеПараметры.РазмерМакета, Неопределено));
	ДопПараметры.Вставить("XMLОписаниеМакета", ?(Результат <> Неопределено, ДополнительныеПараметры.XMLОписаниеМакета, Неопределено));
	ДопПараметры.Вставить("Поля",              ?(Результат <> Неопределено, ДополнительныеПараметры.Поля, Неопределено));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ДополнительныеПараметры.СледующееОповещение.ИмяПроцедуры, ДополнительныеПараметры.СледующееОповещение.Модуль, ДопПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ?(Результат <> Неопределено, Результат, КодВозвратаДиалога.Отмена));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСОборудованиемККМOffline

// Выгружает настройки на ККМ оффлайн
//
Процедура НачатьВыгрузкуНастроекВККМOffline(ОповещениеПриВыгрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено,
	
	СтруктураНастроек, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриВыгрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("СтруктураНастроек"       , СтруктураНастроек);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуНастроекВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline';uk='Виберіть ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.';uk='ККМ Offline не підключені.'"));
	Иначе
		НачатьВыгрузкуНастроекВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуНастроекВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
		ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
	#Иначе
		// В тонком и толстом клиентах расширение подключено всегда.
		НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
	#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента платформы.';uk='Дана операція не доступна без встановленого розширення для веб-клієнта платформи.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется выгрузка настроек в ККМ Offline...';uk='Виконується вивантаження налаштувань в ККМ Offline...'")); 
		
		
		ВходныеПараметры  = Параметры.СтруктураНастроек;
		ВыходныеПараметры = Неопределено;
		
		Результат = ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ВыгрузитьНастройки", ВходныеПараметры, ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
                                      |%ОписаниеОшибки%'
                                      |;uk='При вивантаженні даних в обладнання виникла помилка.
                                      |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
		Иначе
			ТекстСообщения = НСтр("ru='Данные выгружены успешно.';uk='Дані вивантажені успішно.'");
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                    |%ОписаниеОшибки%'
                                    |;uk='При підключенні пристрою сталася помилка.
                                    |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Очищает товары в ККМ Offline.
//
Процедура НачатьОчисткуТоваровВККМOffline(ОповещениеПриОчисткеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриОчисткеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline';uk='Виберіть ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.';uk='ККМ Offline не підключені.'"));
	Иначе
		НачатьОчисткуТоваровВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.';uk='Обладнання не вибрано.'");
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента платформы.';uk='Дана операція не доступна без встановленого розширення для веб-клієнта платформи.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяВыгрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяВыгрузка = ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяВыгрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется очистка товаров в ККМ Offline...';uk='Виконується очищення товарів в ККМ Offline...'"));
		
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры);
		Иначе
			Результат = ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
                                          |%ОписаниеОшибки%'
                                          |;uk='При очищенні даних в обладнанні сталася помилка.
                                          |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			Иначе
				ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.';uk='Очищення даних успішно завершене.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                    |%ОписаниеОшибки%'
                                    |;uk='При підключенні пристрою сталася помилка.
                                    |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
                                |%ОписаниеОшибки%'
                                |;uk='При очищенні даних в обладнанні сталася помилка.
                                |%ОписаниеОшибки%'");
		ОписаниеОшибки = ?(РезультатКоманды.ВыходныеПараметры.Количество() > 1, РезультатКоманды.ВыходныеПараметры[1], "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
	Иначе
		ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.';uk='Очищення даних успішно завершене.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);

КонецПроцедуры

// Выгружает таблицу с данными в ККМ Offline.
// 
Процедура НачатьВыгрузкуДанныеВККМOffline(ОповещениеПриВыгрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено,
	ТаблицаВыгрузкиТоваров, ЧастичнаяВыгрузка = Ложь, ОтображатьСообщения = Истина, РасширеннаяВыгрузка = Ложь) Экспорт
	
	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет данных для выгрузки!';uk='Немає даних для вивантаження!'");
		Если ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ОповещениеПриВыгрузкеДанные <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(ОповещениеПриВыгрузкеДанные, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриВыгрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров"  , ТаблицаВыгрузкиТоваров);
	Контекст.Вставить("ЧастичнаяВыгрузка"       , ЧастичнаяВыгрузка);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("РасширеннаяВыгрузка"     , РасширеннаяВыгрузка);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline';uk='Виберіть ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.';uk='ККМ Offline не підключені.'"));
	Иначе
		НачатьВыгрузкуДанныеВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.';uk='Обладнання не вибрано.'");
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента платформы.';uk='Дана операція не доступна без встановленого розширення для веб-клієнта платформи.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяВыгрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяВыгрузка = ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяВыгрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Если Параметры.РасширеннаяВыгрузка И НЕ ВремРасширеннаяВыгрузка Тогда
		ТекстСообщения = НСтр("ru='Операция расширенной выгрузки не доступна для выбранного драйвера.';uk='Операція розширеного вивантаження не доступна для обраного драйвера.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется выгрузка товаров в ККМ Offline...';uk='Виконується вивантаження товарів в ККМ Offline...'"));
		
		ВходныеПараметры  = Новый Массив;
		Если ВремРасширеннаяВыгрузка И НЕ Параметры.РасширеннаяВыгрузка Тогда
			МассивВыгрузкиТоваров = МенеджерОборудованияКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
			Для Каждого СтрокаТЧ Из Параметры.ТаблицаВыгрузкиТоваров Цикл
				ЭлементМассива = МенеджерОборудованияКлиентСервер.ПолучитьСтруктуруЗаписиМассиваТовары();
				ЭлементМассива.Код                 = СтрокаТЧ.Код;
				ЭлементМассива.Артикул             = ?(СтрокаТЧ.Свойство("Артикул"), СтрокаТЧ.Артикул, "");
				ЭлементМассива.Штрихкод            = Строка(СтрокаТЧ.Штрихкод);
				ЭлементМассива.Наименование        = СтрокаТЧ.Наименование;
				ЭлементМассива.ЕдиницаИзмерения    = СтрокаТЧ.ЕдиницаИзмерения;
				ЭлементМассива.Цена                = СтрокаТЧ.Цена;
				ЭлементМассива.Остаток             = ?(СтрокаТЧ.Свойство("Остаток"), СтрокаТЧ.Остаток, 0);
				ЭлементМассива.Весовой             = ?(СтрокаТЧ.Свойство("ВесовойТовар"), СтрокаТЧ.ВесовойТовар, Ложь);
				ЭлементМассива.СтавкаНДС           = ?(СтрокаТЧ.Свойство("СтавкаНДС"), СтрокаТЧ.СтавкаНДС, ?(СтрокаТЧ.Свойство("НДС"), СтрокаТЧ.НДС, 0));
				ЭлементМассива.ИмеетХарактеристики = Ложь;
				ЭлементМассива.ИмеетУпаковки       = Ложь;
				МассивВыгрузкиТоваров.Товары.Добавить(ЭлементМассива);
			КонецЦикла;
			ВходныеПараметры.Добавить(МассивВыгрузкиТоваров);
		Иначе
			ВходныеПараметры.Добавить(Параметры.ТаблицаВыгрузкиТоваров);
		КонецЕсли;
		
		ВходныеПараметры.Добавить(Параметры.ЧастичнаяВыгрузка); // Частичная выгрузка.
		ВыходныеПараметры = Неопределено;
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры);
		Иначе
			Результат = ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
                                          |%ОписаниеОшибки%'
                                          |;uk='При вивантаженні даних в обладнання виникла помилка.
                                          |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			Иначе
				ТекстСообщения = НСтр("ru='Данные выгружены успешно.';uk='Дані вивантажені успішно.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                    |%ОписаниеОшибки%'
                                    |;uk='При підключенні пристрою сталася помилка.
                                    |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При вивантаженні даних в обладнання виникла помилка.
                                  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатКоманды.ВыходныеПараметры[1]);
	Иначе
		ТекстСообщения = НСтр("ru='Данные выгружены успешно.';uk='Дані вивантажені успішно.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);

КонецПроцедуры

// Начать загрузку данных из ККМ Offline.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриЗагрузкеДанные - оповещение при завершении выгрузки данных.
//
Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOffline(ОповещениеПриЗагрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина, РасширеннаяЗагрузка = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗагрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("РасширеннаяЗагрузка"     , РасширеннаяЗагрузка);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение", ЭтотОбъект, Контекст);
		ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline';uk='Виберіть ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.';uk='ККМ Offline не підключені.'"));
	Иначе
		НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента платформы.';uk='Дана операція не доступна без встановленого розширення для веб-клієнта платформи.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяЗагрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяЗагрузка = ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяЗагрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Если Параметры.РасширеннаяЗагрузка И НЕ ВремРасширеннаяЗагрузка Тогда
		ТекстСообщения = НСтр("ru='Операция расширенной загрузки не доступна для выбранного драйвера.';uk='Операція розширеного завантаження не доступна для обраного драйвера.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		Состояние(НСтр("ru='Выполняется загрузка товаров из ККМ Offline...';uk='Виконується завантаження товарів з ККМ Offline...'"));
		
		ВходныеПараметры  = Новый Массив;
		ВыходныеПараметры = Неопределено;
		
		ИмяКоманды = ?(ВремРасширеннаяЗагрузка И Параметры.РасширеннаяЗагрузка, "ЗагрузитьРасширенныйОтчет", "ЗагрузитьОтчет");
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, ИмяКоманды, ВходныеПараметры);
		Иначе
			Результат = ВыполнитьКоманду(Параметры.ИдентификаторУстройства, ИмяКоманды, ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При загрузка данных из ККМ Offline произошла ошибка.
                                          |%ОписаниеОшибки%'
                                          |;uk='При завантаження даних з ККМ Offline сталася помилка.
                                          |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
				ТаблицаТоваров = Неопределено;
			Иначе
				ТаблицаТоваров = ВыходныеПараметры[0];
				ТекстСообщения = НСтр("ru='Данные загружены успешно.';uk='Дані успішно завантажені.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ТаблицаТоваров, ИдентификаторУстройства, РасширеннаяЗагрузка", 
													   Результат, ТекстСообщения, ТаблицаТоваров, Параметры.ИдентификаторУстройства, Параметры.РасширеннаяЗагрузка);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                    |%ОписаниеОшибки%'
                                    |;uk='При підключенні пристрою сталася помилка.
                                    |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При загрузка данных из ККМ Offline произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При завантаження даних з ККМ Offline сталася помилка.
                                  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатКоманды.ВыходныеПараметры[1]);
		ТаблицаТоваров = Неопределено;
	Иначе
		ТаблицаТоваров = РезультатКоманды.ВыходныеПараметры[0];
		ТекстСообщения = НСтр("ru='Данные загружены успешно.';uk='Дані успішно завантажені.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ТаблицаТоваров, ИдентификаторУстройства, РасширеннаяЗагрузка", 
											   РезультатКоманды.Результат, ТекстСообщения, ТаблицаТоваров, Параметры.ИдентификаторУстройства, Параметры.РасширеннаяЗагрузка);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать выставление флага о загрузке отчета.
//
Процедура НачатьВыставитьФлагОтчетЗагруженККМOffline(УникальныйИдентификатор, ИдентификаторУстройства, ОтображатьСообщения = Истина) Экспорт;
	
	ОписаниеОшибки = "";
	
	Результат = ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Параметры = Новый Структура("УникальныйИдентификатор, ИдентификаторУстройства", УникальныйИдентификатор, ИдентификаторУстройства);
		
		ПоддержкаАсинхронногоРежима = Ложь;
		ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяЗагрузка", ВходныеПараметры, Неопределено, ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыставитьФлагОтчетЗагруженККМOfflineЗавершение", ЭтотОбъект, Параметры);
			НачатьВыполнениеКоманды(ОписаниеОповещения, ИдентификаторУстройства, "ОтчетЗагружен", ВходныеПараметры);
		Иначе
			ВыполнитьКоманду(ИдентификаторУстройства, "ОтчетЗагружен", ВходныеПараметры, ВыходныеПараметры);
			ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
		КонецЕсли;
			
	Иначе
		Если ОтображатьСообщения Тогда
			ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                  |%ОписаниеОшибки%'
                                  |;uk='При підключенні пристрою сталася помилка.
                                  |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыставитьФлагОтчетЗагруженККМOfflineЗавершение(РезультатКоманды, Параметры) Экспорт
	
	ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбщихКоманд

// Открытие формы списка рабочих мест.
//
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Процедура для выбора рабочего места текущего сеанса.
//
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредложитьВыборРабочегоМестаЗавершение", ЭтотОбъект);
	ПредложитьВыборРабочегоМеста(Оповещение);
	
КонецПроцедуры

// Открытие формы подключаемого Оборудования.
//
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы драйверов оборудования.
//
Процедура ОткрытьДрайверыОборудования(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ДрайверыОборудования.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСДрайвером

// Проверяет установлен ли драйвер.
//
Функция ДрайверУстановлен(Идентификатор) Экспорт
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования);
	
	Возврат ОбъектДрайвера <> Неопределено;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Установить или переустановить драйверы помеченные флагами.
//
Процедура ПереустановитьПомеченныеДрайверы() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
	Если МассивРабочихМест.Количество() = 0 Тогда
		РабочееМесто = Неопределено
	Иначе
		РабочееМесто = МассивРабочихМест[0];
	КонецЕсли;
	
	// Переустановить драйверы помеченные флагом для переустановки.
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОборудования = МенеджерОборудованияВызовСервера.ПолучитьСписокДрайверовДляПереустановки(РабочееМесто);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ДанныеДрайвера.ВСоставеКонфигурации И НЕ Оборудование.ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет." + Оборудование.ДанныеДрайвера.ИмяМакетаДрайвера);
			КонецЕсли;
			МенеджерОборудованияВызовСервера.УстановитьПризнакПереустановкиДрайвера(РабочееМесто, Оборудование.ДрайверОборудования, Ложь); 
		КонецЦикла;
	КонецЕсли;
	
	// Установить драйверы помеченные флагом для установки.
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОборудования = МенеджерОборудованияВызовСервера.ПолучитьСписокДрайверовДляУстановки(РабочееМесто);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ДанныеДрайвера.ВСоставеКонфигурации И НЕ Оборудование.ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Оборудование.ДанныеДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет." + Оборудование.ДанныеДрайвера.ИмяМакетаДрайвера);
				Иначе
					ОтключитьОбъектДрайвера(Оборудование.ДанныеДрайвера);
				КонецЕсли;
			КонецЕсли;
			МенеджерОборудованияВызовСервера.УстановитьПризнакУстановкиДрайвера(РабочееМесто, Оборудование.ДрайверОборудования, Ложь); 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуДрайвераИзДистрибутиваЗавершение(Результат, Параметры) Экспорт
	
	Если Параметры.Свойство("ВременныйФайл") Тогда
		НачатьУдалениеФайлов(, Параметры.ВременныйФайл);
	КонецЕсли;
	Если Параметры.Свойство("КаталогИнсталляции") Тогда
		НачатьУдалениеФайлов(, Параметры.КаталогИнсталляции);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат = 0);
	КонецЕсли;
	
КонецПроцедуры

// Начать установку драйвера из дистрибутива поставщика из макета.
//
Процедура НачатьУстановкуДрайвераИзДистрибутиваВМакете(ОповещениеПриЗавершении, ИмяМакета, ИмяФайла) Экспорт
	
	Результат = Ложь;
	// Получение макета с сервера
	СсылкаНаФайл = МенеджерОборудованияВызовСервера.ПолучитьМакетССервера(ИмяМакета);
	ИмяФайлаВрем = ?(ПустаяСтрока(ИмяФайла), "setup.exe", ИмяФайла);
	
	// НачатьПолучениеКаталогаВременныхФайлов 
	ВременныйКаталог   = КаталогВременныхФайлов();
	ВременныйФайл      = ВременныйКаталог + "Model.zip";
	КаталогИнсталляции = ВременныйКаталог + "Model\";
	
	// Распаковка архива дистрибутива во временный каталог.
	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйФайл, Ложь);
	
	ФайлАрхива = Новый ЧтениеZipФайла();
	ФайлАрхива.Открыть(ВременныйФайл);
	
	Если ФайлАрхива.Элементы.Найти(ИмяФайлаВрем) <> Неопределено Тогда
		// Распаковка дистрибутива
		ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции);
		ФайлАрхива.Закрыть();
		// Запуск инсталлятора
		Параметры = Новый Структура("КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении", КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
		НачатьЗапускПриложения(Оповещение, КаталогИнсталляции + ИмяФайлаВрем, КаталогИнсталляции, Истина);
	Иначе
		ТекстОшибки = НСтр("ru='Ошибка установки драйвера из дистрибутива в макете.
                            |Файл ""%Файл%"" в макете не найден.'
                            |;uk='Помилка установки драйвера з дистрибутива в макеті.
                            |Файл ""%Файл%"" у макеті не знайдений.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Файл%", ИмяФайлаВрем);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
		НачатьУдалениеФайлов(, ВременныйФайл);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуДрайвераИзДистрибутиваИзБазыЗавершение(Результат, Параметры) Экспорт
	
	НачатьУдалениеФайлов(, Параметры.ВременныйКаталог + "Model\");
	НачатьУдалениеФайлов(, Параметры.ВременныйКаталог + "Model.zip");
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат = 0);
	КонецЕсли;
	
КонецПроцедуры

// Начать установку драйвера из дистрибутива поставщика из базы.
//
Процедура НачатьУстановкуДрайвераИзДистрибутиваИзБазы(ОповещениеПриЗавершении, ДанныеДрайвера) Экспорт
	
	Результат = Ложь;
	
	ВременныйКаталог   = КаталогВременныхФайлов();
	ИмяФайлаВрем       = ВременныйКаталог + ДанныеДрайвера.ИмяФайлаДрайвера;
	КаталогИнсталляции = ВременныйКаталог + "Model\";
	
	ПолучитьФайл(ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер"), ИмяФайлаВрем, Ложь);
	ВременныйФайл = Новый Файл(ИмяФайлаВрем);
	
	Если ВРег(ВременныйФайл.Расширение) = ".ZIP" Тогда
		// Распаковка дистрибутива
		ФайлАрхива = Новый ЧтениеZipФайла();
		ФайлАрхива.Открыть(ВременныйФайл.ПолноеИмя);
		
		ИмяФайлаУстанавливаемый = "";
		Если ФайлАрхива.Элементы.Найти(ВременныйФайл.ИмяБезРасширения  + ".EXE") <> Неопределено Тогда
			ИмяФайлаУстанавливаемый = ВременныйФайл.ИмяБезРасширения  + ".EXE";
		ИначеЕсли ФайлАрхива.Элементы.Найти("setup.exe") <> Неопределено Тогда
			ИмяФайлаУстанавливаемый = "setup.exe";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяФайлаУстанавливаемый) Тогда
			// Распаковка дистрибутива
			ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции);
			ФайлАрхива.Закрыть();
			// Запуск инсталлятора
			Параметры = Новый Структура("КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении", КаталогИнсталляции, ИмяФайлаВрем, ОповещениеПриЗавершении);
			Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
			НачатьЗапускПриложения(Оповещение, КаталогИнсталляции + ИмяФайлаУстанавливаемый, КаталогИнсталляции, Истина);
		Иначе
			ФайлАрхива.Закрыть();
			ТекстОшибки = НСтр("ru='Ошибка установки драйвера из дистрибутива в архиве.
                        |Необходимый файл в архиве не найден.'
                        |;uk='Помилка установки драйвера з дистрибутива в архіві.
                        |Необхідний файл у архіві не знайдено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
			НачатьУдалениеФайлов(, ИмяФайлаВрем);
		КонецЕсли;
	Иначе
		// Запуск инсталлятора
		Параметры = Новый Структура("ВременныйФайл, ОповещениеПриЗавершении", ИмяФайлаВрем, ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
		НачатьЗапускПриложения(Оповещение, ВременныйКаталог + ИмяФайлаВрем, ВременныйКаталог, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

// Отключение объекта драйвера.
//
Процедура ОтключитьОбъектДрайвера(ДанныеДрайвера) Экспорт

	НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ДанныеДрайвера.ДрайверОборудования);
	Если НомерСтрокиМассива <> Неопределено Тогда
		глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
	КонецЕсли;
	
КонецПроцедуры

// Получение объекта драйвера
//
Функция ПолучитьОбъектДрайвера(ДанныеДрайвера, ТекстОшибки = Неопределено) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Для Каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДанныеДрайвера.ДрайверОборудования  Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			
			ProgID = ДанныеДрайвера.ИдентификаторОбъекта;
			Если ПустаяСтрока(ProgID) Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
			ИначеЕсли ProgID = "ArtSoft.FiscalPrinter" Тогда
				ТестДрайвера = Новый COMОбъект("ArtSoft.FiscalPrinter");
				ОбъектДрайвера = "COM_ArtSoft_FiscalPrinter"; // COM-соединение
						//вебчек	
			ИначеЕсли ProgID = "WebCheck_ClassCardserv" Тогда
				
				ТестДрайвера = Новый COMОбъект("WebCheck.ClassCardserv");
				    ОбъектДрайвера = "COM_WebCheck_ClassCardserv"; // COM-соединение
			//вебчек		
			Иначе
				ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
				ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
				Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
					ПодключитьВнешнююКомпоненту(ProgID1);
				Иначе
					ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
					Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
					ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
					Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
						Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера, СтрЗаменить(ИмяОбъекта, ".", "_"));
					Иначе
						СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
						Результат = ПодключитьВнешнююКомпоненту(СсылкаНаДрайвер, СтрЗаменить(ИмяОбъекта, ".", "_"));
					КонецЕсли;
				КонецЕсли;
				ОбъектДрайвера = Новый (ProgID2);
				
			КонецЕсли;
				
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстОшибки = Инфо.Описание;
		КонецПопытки;
		
		Если ОбъектДрайвера <> Неопределено Тогда
			глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДанныеДрайвера.ДрайверОборудования, ОбъектДрайвера);
			ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДанныеДрайвера.ДрайверОборудования];
		КонецЕсли;
		
	КонецЕсли;   
		
	Возврат ОбъектДрайвера;
	
КонецФункции

Процедура НачатьПолучениеОбъектаДрайвераЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Если Подключено Тогда 
		Попытка
			ОбъектДрайвера = Новый (ДополнительныеПараметры.ProgID);
			Если ОбъектДрайвера <> Неопределено Тогда
				глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДополнительныеПараметры.ДрайверОборудования, ОбъектДрайвера);
				ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДополнительныеПараметры.ДрайверОборудования];
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ОбъектДрайвера);
			Возврат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
	
КонецПроцедуры

// Начать получение объекта драйвера.
//
Процедура НачатьПолучениеОбъектаДрайвера(ОповещениеПриЗавершении, ДанныеДрайвера) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Для Каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДанныеДрайвера.ДрайверОборудования  Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);
			Возврат;
		КонецЕсли;
	КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
			ProgID = ДанныеДрайвера.ИдентификаторОбъекта;
			Если ПустаяСтрока(ProgID) Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);
			ИначеЕсли ProgID = "ArtSoft.FiscalPrinter" Тогда
				Попытка
					ТестДрайвера = Новый COMОбъект("ArtSoft.FiscalPrinter");
					ОбъектДрайвера = "COM_ArtSoft_FiscalPrinter"; // COM-соединение
				Исключение
					ОбъектДрайвера = "";
				КонецПопытки;
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);
					//вебчек	
			ИначеЕсли ProgID = "WebCheck_ClassCardserv" Тогда
				Попытка
				ТестДрайвера = Новый COMОбъект("WebCheck.ClassCardserv");
				    ОбъектДрайвера = "COM_WebCheck_ClassCardserv"; // COM-соединение
						Исключение
					ОбъектДрайвера = "";
				КонецПопытки;
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);

			//вебчек	
			Иначе
				ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
				ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
				
				Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
					Параметры = Новый Структура("ProgID, ОповещениеПриЗавершении, ДрайверОборудования", ProgID2, ОповещениеПриЗавершении, ДанныеДрайвера.ДрайверОборудования);
					Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, Параметры);
					НачатьПодключениеВнешнейКомпоненты(Оповещение, ProgID1);
				Иначе
					ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
					Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
					ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
					
					Параметры = Новый Структура("ProgID, ОповещениеПриЗавершении, ДрайверОборудования", ProgID2, ОповещениеПриЗавершении, ДанныеДрайвера.ДрайверОборудования);
					Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, Параметры);
					Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
						НачатьПодключениеВнешнейКомпоненты(Оповещение, "ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера, СтрЗаменить(ИмяОбъекта, ".", "_"));
					Иначе
						СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
						НачатьПодключениеВнешнейКомпоненты(Оповещение, СсылкаНаДрайвер, СтрЗаменить(ИмяОбъекта, ".", "_"));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
	КонецЕсли;   
	
КонецПроцедуры

Функция ПолучитьИмяCOMДрайвераВСтруктуре()
	
	Возврат "ОбъектДрайвераДляCOM";
	
КонецФункции

Функция ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство)
	
	Возврат ПодключенноеУстройство[ПолучитьИмяCOMДрайвераВСтруктуре()];
	
КонецФункции

Функция ОбъектДрайвераЭтоCOM(ОбъектДрайвера)
	
	Если ТипЗнч(ОбъектДрайвера) = Тип("Строка") И Лев(ОбъектДрайвера, 3) = "COM" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СоздатьОбъектДрайвераДляCOM(ОбъектДрайвера)
	
	НовыйОбъект = Неопределено;
	
	Если ОбъектДрайвера = "COM_ArtSoft_FiscalPrinter" Тогда
		НовыйОбъект = Новый COMОбъект("ArtSoft.FiscalPrinter");
	КонецЕсли;
	Если ОбъектДрайвера = "COM_WebCheck_ClassCardserv" Тогда
		НовыйОбъект = Новый COMОбъект("WebCheck.ClassCardserv");
	КонецЕсли;

	
	Возврат НовыйОбъект;
	
КонецФункции

// Установить драйвер оборудования.
//
Процедура УстановитьДрайвер(Идентификатор, ОповещениеИзДистрибутиваПриЗавершении = Неопределено, ОповещениеИзАрхиваПриЗавершении = Неопределено) Экспорт
	
	ДанныеДрайвера = МенеджерОборудованияВызовСервера.ПолучитьДанныеДрайвера(Идентификатор);
	
	Попытка  
		Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
			
			Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
			#Если ВебКлиент Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не поддерживает работу в веб-клиенте.';uk='Цей драйвер не підтримує роботу у веб-клієнті.'")); 
			#Иначе
				Если МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не может быть установлен и использован в среде Linux.';uk='Цей драйвер не може бути встановлений і використаний в середовищі Linux.'")); 
					Возврат;
				КонецЕсли;
				НачатьУстановкуДрайвераИзДистрибутиваВМакете(ОповещениеИзДистрибутиваПриЗавершении, ДанныеДрайвера.ИмяМакетаДрайвера, ДанныеДрайвера.ИмяФайлаДрайвера);
			#КонецЕсли
			Иначе
				НачатьУстановкуВнешнейКомпоненты(ОповещениеИзАрхиваПриЗавершении, "ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера);
			КонецЕсли;
			
		Иначе
			
			Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
			#Если ВебКлиент Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не поддерживает работу в веб-клиенте.';uk='Цей драйвер не підтримує роботу у веб-клієнті.'")); 
			#Иначе
				Если МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не может быть установлен и использован в среде Linux.';uk='Цей драйвер не може бути встановлений і використаний в середовищі Linux.'")); 
					Возврат;
				КонецЕсли;
				НачатьУстановкуДрайвераИзДистрибутиваИзБазы(ОповещениеИзДистрибутиваПриЗавершении, ДанныеДрайвера);
			#КонецЕсли
			Иначе
				СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
				НачатьУстановкуВнешнейКомпоненты(ОповещениеИзАрхиваПриЗавершении, СсылкаНаДрайвер);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Произошла ошибка при установке драйвера.';uk='Сталася помилка при інсталяції драйвера.'")); 
	КонецПопытки;  
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСФайлами

// Процедура получения содержания текстовых файлов
//
// Параметры:
//  ИменаФайлов  - Строка или Массив - имя файла или массив с именами файлов
//  ОписаниеОповещенияПриЗавершении  - ОписаниеОповещения - вызывается после завершения чтения файлов
//  Кодировка - КодировкаТекста - кодировка при чтении текстового файла, по умолчанию КодировкаТекста.UTF8
//
Процедура ПолучитьСодержаниеТекстовыхФайлов(ИменаФайлов, ОписаниеОповещенияПриЗавершении, Кодировка = Неопределено) Экспорт
	
	ПомещаемыеФайлы = Новый Массив;
	
	Кодировка = ?(Кодировка = Неопределено, КодировкаТекста.UTF8, Кодировка);
	
	Если ТипЗнч(ИменаФайлов) = Тип("Строка") Тогда
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИменаФайлов);
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		
	ИначеЕсли ТипЗнч(ИменаФайлов) = Тип("Массив") Тогда
		
		Если ИменаФайлов.Количество() = 0 Тогда
			
			РезультатЧтенияФайлов = Новый Структура;
			РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Новый Массив);
			РезультатЧтенияФайлов.Вставить("Успешно", Истина);
			РезультатЧтенияФайлов.Вставить("ТекстОшибки","");
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
			
			Возврат;
			
		Иначе
			Для Каждого ИмяФайла Из ИменаФайлов Цикл
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
		ДополнительныеПараметры.Вставить("Кодировка", Кодировка);
		
		ОповещениеНачатьПомещениеФайла = Новый ОписаниеОповещения("ПолучитьСодержаниеТекстовыхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайлов(ОповещениеНачатьПомещениеФайла, ПомещаемыеФайлы,, Ложь);
		
	#Иначе
		
		Содержание = Новый Массив;
		РезультатЧтенияФайлов = Новый Структура;
		РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Неопределено);
		РезультатЧтенияФайлов.Вставить("Успешно", Ложь);
		РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
		
		Для Каждого Файл Из ПомещаемыеФайлы Цикл
			
			СтруктураСодержанияФайла = Новый Структура;
			
			Попытка
				
				ЧтениеТекста = Новый ЧтениеТекста(Файл.Имя, Кодировка);
				ТекстСодержания = ЧтениеТекста.Прочитать();
				
			Исключение
				
				ТекстСообщения =  НСтр("ru='При чтении файла %ИмяФайла% произошла ошибка';uk='При читанні файлу %ИмяФайла% сталася помилка'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
				
				РезультатЧтенияФайлов.ТекстОшибки = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
				ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
				Возврат;
				
			КонецПопытки;
			
			СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
			СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
			
			Содержание.Добавить(СтруктураСодержанияФайла);
			
		КонецЦикла;
		
		РезультатЧтенияФайлов.Успешно = Истина;
		РезультатЧтенияФайлов.СодержаниеФайлов = Содержание;
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура оповещения получения содержания текстовых файлов
// Вызывается из процедуры ПолучитьСодержаниеТекстовыхФайлов
//
Процедура ПолучитьСодержаниеТекстовыхФайловЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	РезультатЧтенияФайлов = Новый Структура;
	РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтенияФайлов.Вставить("Успешно", Ложь);
	РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
	
	Если ПомещенныеФайлы = Неопределено Тогда
		
		РезультатЧтенияФайлов.ТекстОшибки = НСтр("ru='Неизвестная ошибка при передаче файлов на сервер.';uk='Невідома помилка при передачі файлів на сервер.'");
	
	Иначе
		
		Если Не ПомещенныеФайлы.Количество() = 0 Тогда
		
			РезультатИзвлеченияТекста = МенеджерОборудованияВызовСервера.ПолучитьСодержаниеТекстовыхФайловИзХранилища(
				ПомещенныеФайлы, ДополнительныеПараметры.Кодировка);
				
				
			ЗаполнитьЗначенияСвойств(РезультатЧтенияФайлов, РезультатИзвлеченияТекста);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
	
КонецПроцедуры

// Получает ревизию требований для драйверов подключаемого оборудования.
//
Функция РевизияИнтерфейсаДрайверов() Экспорт
	
	РевизияИнтерфейса = 1014;
	Возврат РевизияИнтерфейса;
	
КонецФункции

#КонецОбласти

#Область Прочее

///////////////////////////////////////////////////
// МЕТОДЫ РАБОТЫ СО СКАНЕРОМ ШТРИХКОДОВ

Функция ПреобразоватьДанныеСоСканераВМассив(Параметр) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
	
	Данные = Новый Массив;
	Данные.Добавить(ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	
	Возврат Данные;
	
КонецФункции

Функция ПреобразоватьДанныеСоСканераВСтруктуру(Параметр) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
	
	Если Параметр[1] = Неопределено Тогда
		Данные = Новый Структура("Штрихкод, Количество", Параметр[0], 1); 	 // Достаем штрихкод из основных данных
	Иначе
		Данные = Новый Структура("Штрихкод, Количество", Параметр[1][1], 1); // Достаем штрихкод из дополнительных данных
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти
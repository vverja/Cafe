////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотКлиентСервер: клиент, сервер
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает представление типа объекта XDTO Документооборота по имени типа.
//Параметры:
//	ТипXDTO - Строка - имя типа объекта XDTO
//
Функция ПредставлениеТипаОбъектаXDTO(ТипXDTO) Экспорт

	ПредставленияТипов = Новый Соответствие;
	//Справочники.
	ПредставленияТипов.Вставить("DMProject",				НСтр("ru='Проекты';uk='Проекти'"));
	ПредставленияТипов.Вставить("DMProjectTask",			НСтр("ru='Проектные задачи';uk='Проектні задачі'"));
	ПредставленияТипов.Вставить("DMActivity",				НСтр("ru='Мероприятия';uk='Заходи'"));
	ПредставленияТипов.Вставить("DMDiscussionTopic",		НСтр("ru='Темы обсуждений';uk='Теми обговорень'"));
	ПредставленияТипов.Вставить("DMDiscussionMessage",		НСтр("ru='Сообщения обсуждений';uk='Повідомлення обговорень'"));
	ПредставленияТипов.Вставить("DMFile", 					НСтр("ru='Файлы';uk='Файли'"));
	ПредставленияТипов.Вставить("DMFileFolder", 			НСтр("ru='Папки файлов';uk='Папки файлів'"));
	ПредставленияТипов.Вставить("DMUser", 					НСтр("ru='Пользователи';uk='Користувачі'"));
	ПредставленияТипов.Вставить("DMUserGroup",  			НСтр("ru='Группы пользователей';uk='Групи користувачів'"));
	ПредставленияТипов.Вставить("DMActivityMatter", 		НСтр("ru='Вопросы деятельности';uk='Питання діяльності'"));
	ПредставленияТипов.Вставить("DMCurrency",				НСтр("ru='Валюты';uk='Валюти'"));
	ПредставленияТипов.Вставить("DMInternalDocument", 		НСтр("ru='Внутренние документы';uk='Внутрішні документи'"));
	ПредставленияТипов.Вставить("DMIncomingDocument", 		НСтр("ru='Входящие документы';uk='Вхідні документи'"));
	ПредставленияТипов.Вставить("DMOutgoingDocument", 		НСтр("ru='Исходящие документы';uk='Вихідні документи'"));
	ПредставленияТипов.Вставить("DMOrganization",   		НСтр("ru='Организации';uk='Організації'"));
	ПредставленияТипов.Вставить("DMCorrespondent",  		НСтр("ru='Корреспонденты';uk='Кореспонденти'"));
	ПредставленияТипов.Вставить("DMContactPerson",  		НСтр("ru='Контактные лица';uk='Контактні особи'"));
	ПредставленияТипов.Вставить("DMAccessLevel", 			НСтр("ru='Грифы доступа';uk='Грифи доступу'"));
	ПредставленияТипов.Вставить("DMDeliveryMethod", 		НСтр("ru='Способы доставки';uk='Способи доставки'"));
	ПредставленияТипов.Вставить("DMSubdivision", 			НСтр("ru='Структура предприятия';uk='Структура підприємства'"));
	ПредставленияТипов.Вставить("DMInternalDocumentType", 	НСтр("ru='Виды внутренних документов';uk='Види внутрішніх документів'"));
	ПредставленияТипов.Вставить("DMIncomingDocumentType", 	НСтр("ru='Виды входящих документов';uk='Види вхідних документів'"));
	ПредставленияТипов.Вставить("DMOutgoingDocumentType",	НСтр("ru='Виды исходящих документов';uk='Види вихідних документів'"));
	ПредставленияТипов.Вставить("DMWorkType",				НСтр("ru='Виды работ';uk='Види робіт'"));
	ПредставленияТипов.Вставить("DMInternalDocumentFolder", НСтр("ru='Папки внутренних документов';uk='Папки внутрішніх документів'"));
	ПредставленияТипов.Вставить("DMRelationType", 			НСтр("ru='Типы связей';uk='Типи зв''язків'"));
	ПредставленияТипов.Вставить("DMObjectPropertyValue", 	НСтр("ru='Значения свойств объектов';uk='Значення властивостей об''єктів'"));
	ПредставленияТипов.Вставить("DMPrivatePerson", 			НСтр("ru='Физические лица';uk='Фізичні особи'"));
	ПредставленияТипов.Вставить("DMRoutingCondition", 		НСтр("ru='Условия маршрутизации';uk='Умови маршрутизації'"));
	ПредставленияТипов.Вставить("DMPersonalRecipient", 		НСтр("ru='Личные адресаты';uk='Особисті адресати'"));
	ПредставленияТипов.Вставить("DMPersonalRecipientGroup", НСтр("ru='Группы личных адресатов';uk='Групи особистих адресатів'"));
	ПредставленияТипов.Вставить("DMBusinessProcessExecutorRole", НСтр("ru='Роли исполнителей';uk='Ролі виконавців'"));
	
	//письма электронной почты.
	ПредставленияТипов.Вставить("DMIncomingEMail",  		НСтр("ru='Входящее письмо';uk='Вхідний лист'"));
	ПредставленияТипов.Вставить("DMOutgoingEMail",  		НСтр("ru='Исходящее письмо';uk='Вихідний лист'"));
	
	//рабочие отчеты.
	ПредставленияТипов.Вставить("DMDailyReport",		НСтр("ru='Ежедневный отчет';uk='Щоденний звіт'"));
	
	//фактические трудозатраты.
	ПредставленияТипов.Вставить("DMActualWork", НСтр("ru='Фактические трудозатраты';uk='Фактичні трудовитрати'"));
	
	//используемые перечисления.
	ПредставленияТипов.Вставить("DMEMailAnswerType", 		НСтр("ru='Типы ответа';uk='Типи відповіді'"));
	ПредставленияТипов.Вставить("DMIssueType", 				НСтр("ru='Виды вопросов выполнения задач';uk='Види питань виконання задач'"));
	ПредставленияТипов.Вставить("DMProlongationProcedure",  НСтр("ru='Порядок продления';uk='Порядок продовження'"));
	ПредставленияТипов.Вставить("DMDocumentStatus", 		НСтр("ru='Состояния документов';uk='Стани документів'"));
    ПредставленияТипов.Вставить("DMLegalPrivatePerson", 	НСтр("ru='Юридическое\физическое лицо';uk='Юридична\фізична особа'"));
	ПредставленияТипов.Вставить("DMApprovalType",			НСтр("ru='Варианты маршрутизации задач';uk='Варіанти маршрутизації задач'"));
	ПредставленияТипов.Вставить("DMTaskExecutionOrder", 	НСтр("ru='Порядок выполнения задач';uk='Порядок виконання задач'"));
	ПредставленияТипов.Вставить("DMApprovalOrder",			НСтр("ru='Порядок выполнения задач';uk='Порядок виконання задач'"));
	ПредставленияТипов.Вставить("DMApprovalResult",			НСтр("ru='Результаты согласования';uk='Результати погодження'"));
	ПредставленияТипов.Вставить("DMConfirmationResult", 	НСтр("ru='Результаты утверждения';uk='Результати затвердження'"));
	ПредставленияТипов.Вставить("DMRegistrationResult", 	НСтр("ru='Результаты регистрации';uk='Результати реєстрації'"));
	ПредставленияТипов.Вставить("DMInvitationResult",   	НСтр("ru='Результаты приглашения';uk='Результати запрошення'"));
	ПредставленияТипов.Вставить("DMGeneralInvitationResult", НСтр("ru='Общие результаты приглашения';uk='Загальні результати запрошення'"));
	ПредставленияТипов.Вставить("DMBusinessProcessState",	НСтр("ru='Состояния бизнес процессов';uk='Стани бізнес процесів'"));	
	ПредставленияТипов.Вставить("DMEMailImportance", 		НСтр("ru='Важность писем';uk='Важливість листів'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRoutingType", НСтр("ru='Варианты маршрутизации задач';uk='Варіанти маршрутизації задач'"));
	ПредставленияТипов.Вставить("DMPredecessorsStageConsiderationCondition", НСтр("ru='Условия рассмотрения предшественников этапа';uk='Умови розгляду попередників етапу'"));
	ПредставленияТипов.Вставить("DMBusinessProcessTaskImportance", НСтр("ru='Варианты важности задачи';uk='Варіанти важливості задачі'"));
	ПредставленияТипов.Вставить("DMBusinessProcessImportance", НСтр("ru='Варианты важности задачи';uk='Варіанти важливості задачі'"));
	ПредставленияТипов.Вставить("DMTimeInputMethod", 		НСтр("ru='Способы указания времени';uk='Способи вказівки часу'"));
	
	ПредставленияТипов.Вставить("DMAdditionalProperty", 	НСтр("ru='Дополнительные реквизиты и сведения';uk='Додаткові реквізити й відомості'"));
	
	//шаблоны бизнес-процессов.
	ПредставленияТипов.Вставить("DMBusinessProcessOrderTemplate", 		 	НСтр("ru='Шаблоны поручения';uk='Шаблони доручення'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConsiderationTemplate",	НСтр("ru='Шаблоны рассмотрения';uk='Шаблони розгляду'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRegistrationTemplate", 	НСтр("ru='Шаблоны регистрации';uk='Шаблони реєстрації'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApprovalTemplate", 	 	НСтр("ru='Шаблоны согласования';uk='Шаблони погодження'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConfirmationTemplate", 	НСтр("ru='Шаблоны утверждения';uk='Шаблони затвердження'"));
	ПредставленияТипов.Вставить("DMBusinessProcessPerformanceTemplate",  	НСтр("ru='Шаблоны исполнения';uk='Шаблони виконання'"));
	ПредставленияТипов.Вставить("DMBusinessProcessAcquaintanceTemplate", 	НСтр("ru='Шаблоны ознакомления';uk='Шаблони ознайомлення'"));
	ПредставленияТипов.Вставить("DMCompoundBusinessProcessTemplate", 	 	НСтр("ru='Шаблоны составных бизнес процессов';uk='Шаблони складових бізнес процесів'"));
	
	//бизнес-процессы.
	ПредставленияТипов.Вставить("DMBusinessProcessOrder", 			НСтр("ru='Поручение';uk='Доручення'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConsideration", 	НСтр("ru='Рассмотрение';uk='Розгляд'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRegistration", 	НСтр("ru='Регистрация';uk='Реєстрація'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApproval", 		НСтр("ru='Согласование';uk='Погодження'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApproval_1.2.1.11", НСтр("ru='Согласование';uk='Погодження'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConfirmation", 	НСтр("ru='Утверждение';uk='Затвердження'"));
	ПредставленияТипов.Вставить("DMBusinessProcessPerformance", 	НСтр("ru='Исполнение';uk='Виконання'"));
	ПредставленияТипов.Вставить("DMBusinessProcessPerformance_1.2.1.11", НСтр("ru='Исполнение';uk='Виконання'"));
	ПредставленияТипов.Вставить("DMBusinessProcessAcquaintance", 	НСтр("ru='Ознакомление';uk='Ознайомлення'"));
	ПредставленияТипов.Вставить("DMBusinessProcessIssuesSolution", 	НСтр("ru='Решение вопросов выполненияЗадач';uk='Вирішення питань виконання Задач'"));
	ПредставленияТипов.Вставить("DMBusinessProcessIncomingDocumentProcessing", 	НСтр("ru='Обработка входящего документа';uk='Обробка вхідного документа'"));
	ПредставленияТипов.Вставить("DMBusinessProcessInternalDocumentProcessing", 	НСтр("ru='Обработка внутреннего документа';uk='Обробка внутрішнього документа'"));
	ПредставленияТипов.Вставить("DMBusinessProcessOutgoingDocumentProcessing", 	НСтр("ru='Обработка исходящего документа';uk='Обробка вихідного документа'"));
	
	//типизированые задачи.
	ПредставленияТипов.Вставить("DMBusinessProcessTask", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessOrderTaskCheckup", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApprovalTaskApproval", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApprovalTaskCheckup", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConfirmationTaskConfirmation", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConfirmationTaskCheckup", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRegistrationTaskRegistration", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRegistrationTaskCheckup", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessPerfomanceTaskCheckup", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConsiderationTaskAcquaint", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessIssuesSolutionTaskQuestion", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	ПредставленияТипов.Вставить("DMBusinessProcessIssuesSolutionTaskAnswer", НСтр("ru='Задача исполнителя';uk='Задача виконавця'"));
	
	ПредставлениеТипа = ПредставленияТипов.Получить(ТипXDTO);
	
	Если ЗначениеЗаполнено(ПредставлениеТипа) Тогда
		Возврат ПредставлениеТипа;
	Иначе
		Возврат ТипXDTO;
	КонецЕсли; 
	
КонецФункции // ПредставлениеТипаОбъектаXDTO()
 
// Преобразует длительность интервала времени в строку вида час:мин.
//
// Параметры
//  Длительность – Число – длительность интервала времени в секундах. 
//
//  ПредставлениеНуля – Строка – представление интервала нулевой длительности. 
//
// Возвращаемое значение:
//   Строка – представление интервала в виде час:мин.
//
Функция ЧислоВСтроку(Длительность, ПредставлениеНуля = "'") Экспорт 
	
	Если Длительность = 0 Тогда 
		Возврат ПредставлениеНуля;
	КонецЕсли;	
	
	Час = Цел(Длительность / 3600);
	Мин = (Длительность - Час*3600) / 60;
	
	Возврат Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ":" + Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
	
КонецФункции

// Преобразует строку вида час:мин в длительность интервала времени.
//
// Параметры
//  ДлительностьСтр – Строка – представление интервала времени в виде строки час:мин. 
//
// Возвращаемое значение:
//   Число – длительность интервала времени в секундах.
//
Функция ЧислоИзСтроки(ДлительностьСтр) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДлительностьСтр) Тогда 
		Возврат 0;
	КонецЕсли;

	Поз = Найти(ДлительностьСтр, ":");
	Если Поз = 0 Тогда 
		Возврат 0;
	КонецЕсли;

	Час = Лев(ДлительностьСтр, Поз-1);
	Мин = Сред(ДлительностьСтр, Поз+1);
	
	Возврат Число(Час) * 3600 + Число(Мин) * 60;
	
КонецФункции

// Выполняет проверку строки на соответствие представлению интервала времени в виде час:мин.
//
// Параметры:
//   ДлительностьСтр – Строка – проверяемая строка. 
//
// Возвращаемое значение:
//   Булево – Истина, если переданная строка соответствует виду час:мин, и
//          - Ложь в противном случае.
//
Функция ПроверитьФормат(ДлительностьСтр) Экспорт
	
	Поз = Найти(ДлительностьСтр, ":");
	Если Поз = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;

	ЧасСтр = Лев(ДлительностьСтр, Поз-1);
	МинСтр = Сред(ДлительностьСтр, Поз+1);
	
	Если Не ЗначениеЗаполнено(ЧасСтр) Тогда
		ЧасСтр = "00";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(МинСтр) Тогда
		МинСтр = "00";
	КонецЕсли;
	
	Час = Число(ЧасСтр);
	Мин = Число(МинСтр);
	Если (Час >= 24) Или (Мин >= 60) Тогда
		Возврат Ложь;
    КонецЕсли;

	Если Час < 10 Тогда 
		ЧасСтр = "0" + Час;
	КонецЕсли;
	Если Мин < 10 Тогда 
		МинСтр = "0" + Мин;
	КонецЕсли;
	
    ДлительностьСтр = ЧасСтр + ":" + МинСтр;
	Возврат Истина;

КонецФункции

// Возвращает строку представления проекта и проектной задачи для одного поля.
//	Параметры:
//		Проект - ЛюбаяСсылка, Строка - ссылка или строка представления проекта
//		ПроектнаяЗадача - ЛюбаяСсылка, Строка - ссылка или строка представления проектной задачи
//
Функция ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача) Экспорт 
	
	ПредставлениеПроектаЗадачи = "";
	
	Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
		
		ПредставлениеПроектаЗадачи = Строка(Проект) + " (" + Строка(ПроектнаяЗадача) + ")";
		
	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
		
		ПредставлениеПроектаЗадачи = Строка(Проект);
		
	КонецЕсли;
	
	Возврат ПредставлениеПроектаЗадачи;
	
КонецФункции	

// Добавляет к Строке Разделитель и ДобавляемоеЗначение в случае, если Строка и
// ДобавляемоеЗначение не пустые. Если Строка пустая или ДобавляемоеЗначение
// не заполено, то добавляет к Строке ДобавляемоеЗначение.
// 
// Параметры:
// Строка (Строка или любое значение, приводимое к строке). Модифицируется в процедуре.
// Разделитель (Строка или любое значение, приводимое к строке). 
// ДобавляемоеЗначение (Строка или любое значение, приводимое к строке).
//
Процедура ДобавитьЗначениеКСтрокеЧерезРазделитель(Строка, Разделитель, ДобавляемоеЗначение) Экспорт
	
	Если ПустаяСтрока(Строка) Тогда
		Строка = Строка(ДобавляемоеЗначение);
	ИначеЕсли Не ПустаяСтрока(ДобавляемоеЗначение) Тогда
		Строка = Строка(Строка) + Разделитель + ДобавляемоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Разделяет пароль на две независимые части для последующего восстановления функцией СобратьПароль.
//
// Параметры:
//   Пароль - Строка - разделяемый пароль.
//
// Возвращаемое значение:
//   Массив из двух строк, содержащих шестнадцатиричное представление пароля.
//
Функция РазделитьПароль(Пароль) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("");
	Результат.Добавить("");
	Генератор = Неопределено;
	
	// Разложим пароль в массив чисел попарно.
	МассивЧисел = Новый Массив;
	Н = 1;
	Пока Н <= СтрДлина(Пароль) Цикл
		Число = КодСимвола(Пароль, Н);
		Н = Н + 1;
		Если Н <= СтрДлина(Пароль) Тогда
			Число = Число * 65536 + КодСимвола(Пароль, Н);
			Н = Н + 1;
		КонецЕсли;
		МассивЧисел.Добавить(Число);
	КонецЦикла;
	
	// Разделим каждое из полученных чисел.
	Для каждого Число из МассивЧисел Цикл
		РазделенноеЧисло = РазделитьЧисло(Число, Генератор); // ((1, NNN), (2, MMM))
		Результат[0] = Результат[0] + ШестнадцатиричноеПредставлениеЧисла(РазделенноеЧисло[0][1], 8);
		Результат[1] = Результат[1] + ШестнадцатиричноеПредставлениеЧисла(РазделенноеЧисло[1][1], 8);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Собирает пароль из двух частей, ранее разделенных функцией РазделитьПароль.
// В случае повреждения строк возвращает Неопределено.
//
// Параметры:
//   РазделенныйПароль - Массив - две строки, содержащие разделенный пароль.
//
// Возвращаемое значение:
//   Строка - собранный пароль или
//   Неопределено - если строки повреждены.
//
Функция СобратьПароль(Знач РазделенныйПароль) Экспорт
	
	Если РазделенныйПароль.Количество() <> 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	РазделенныйПароль[0] = СокрЛП(РазделенныйПароль[0]);
	РазделенныйПароль[1] = СокрЛП(РазделенныйПароль[1]);
	Если СтрДлина(РазделенныйПароль[0]) <> СтрДлина(РазделенныйПароль[1]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если СтрДлина(РазделенныйПароль[0]) % 8 <> 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Результат = "";
	Чисел = Цел(СтрДлина(РазделенныйПароль[0])) / 8;
	Для Н = 1 по Чисел Цикл
		РазделенноеЧисло = Новый Массив;
		Для М = 0 по 1 Цикл
			Пара = Новый Массив;
			Пара.Добавить(М + 1);
			Представление = Сред(РазделенныйПароль[М], 1 + (Н - 1) * 8, 8);
			Попытка
				Пара.Добавить(ЧислоИзШестнадцатиричногоПредставления(Представление));
			Исключение // не HEX-символы в строке
				Возврат Неопределено;
			КонецПопытки;
			РазделенноеЧисло.Добавить(Пара);
		КонецЦикла;
		СобранноеЧисло = СобратьЧисло(РазделенноеЧисло);
		Если СобранноеЧисло >= 65536 Тогда
			Результат = Результат + Символ(Цел(СобранноеЧисло / 65536));
		КонецЕсли;
		Результат = Результат + Символ(СобранноеЧисло % 65536);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку с размером файла в удобном для чтения формате с указанием количества байт.
//
// Параметры:
//   Размер - Число - размер файла в байтах.
//
// Возвращаемое значение:
//   Строка - размер файла в виде 123.4 Кб (123 456 байт)
//
Функция ПодробноеПредставлениеРазмера(Знач Размер) Экспорт
	
	Если Размер = 0 Тогда
		Возврат "-";
	КонецЕсли;
	
	ПредставлениеБайт = Формат(Размер, "ЧДЦ=; ЧРГ=' '; ЧГ=3,0") + " " + НСтр("ru='байт';uk='байт'");
	Возврат КраткоеПредставлениеРазмера(Размер) + " (" + ПредставлениеБайт + ")";

КонецФункции

// Возвращает строку с размером файла в кратком и удобном для чтения формате.
//
// Параметры:
//   Размер - Число - размер файла в байтах.
//
// Возвращаемое значение:
//   Строка - размер файла в виде 123.4 Кб
//
Функция КраткоеПредставлениеРазмера(Знач Размер) Экспорт
	
	Если Размер = 0 Тогда
		Возврат "-";
	ИначеЕсли Размер < 1024 * 10 Тогда // < 10 Кб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Кб';uk='%1 Кб'"),
			Формат(Макс(1, Окр(Размер / 1024, 1, 1)), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 Тогда // < 1 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Кб';uk='%1 Кб'"),
			Формат(Цел(Размер / 1024), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 * 10 Тогда // < 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Мб';uk='%1 Мб'"),
			Формат(Окр(Размер / 1024 / 1024, 1, 1), "ЧГ=0"));
	Иначе // >= 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Мб';uk='%1 Мб'"),
			Формат(Цел(Размер / 1024 / 1024), "ЧГ=0"));
	КонецЕсли;
	
КонецФункции

// Получает имя с расширением (если расширение пусто - только имя).
//
// Параметры:
//   ПолноеНаименование - полное наименование файла
//	 Расширение - расширение файла
//
// Возвращаемое значение:
//   Имя с расширением - если расширение пусто - только имя
//
Функция ИмяСРасширением(ПолноеНаименование, Расширение) Экспорт
	
	ИмяСРасширением = ПолноеНаименование;
	
	Если Расширение <> "" Тогда
		ИмяСРасширением = ИмяСРасширением + "." + Расширение;
	КонецЕсли;
	
	Возврат ИмяСРасширением;
	
КонецФункции

// Получает картинку предмета из библиотеки согласно его роли.
//
// Параметры:
//   РольПредмета - Строка - роль предмета.
//
// Возвращаемое значение:
//   Картинка - картинка из библиотеки.
//
Функция КартинкаПоРолиПредмета(РольПредмета) Экспорт
	
	Если РольПредмета = "Заполняемый" Тогда
		Возврат БиблиотекаКартинок.ПредметЗаполняемый16;
	ИначеЕсли РольПредмета = "Вспомогательный" Тогда
		Возврат БиблиотекаКартинок.ПредметВспомогательный16;
	Иначе
		Возврат БиблиотекаКартинок.ПредметОсновной16;
	КонецЕсли;
	
КонецФункции

// Получает номер картинки предмета в коллекции согласно его роли.
//
// Параметры:
//   РольПредмета - Строка - роль предмета.
//
// Возвращаемое значение:
//   Число - номер картинки из КоллекцияРолиПредметов
//
Функция НомерКартинкиПоРолиПредмета(РольПредмета) Экспорт
	
	Если РольПредмета = "Заполняемый" Тогда
		Возврат 5;
	ИначеЕсли РольПредмета = "Вспомогательный" Тогда
		Возврат 3;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

// Проверяет, является ли справочником тип объекта ДО.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - истина, если тип соответствует справочнику ДО.
//
Функция ЭтоСправочник(Тип) Экспорт
	
	Возврат Тип = "DMCorrespondent"
		или Тип = "DMCurrency"
		или Тип = "DMOrganization"
		или Тип = "DMFile"
		или Тип = "DMProject"
		или Тип = "DMSubdivision";
		
КонецФункции

// Проверяет, является ли документом в прикладном смысле тип объекта ДО.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - истина, если тип соответствует документу ДО (в прикладном смысле).
//
Функция ЭтоДокумент(Тип) Экспорт
	
	Возврат Тип = "DMInternalDocument" 
		или Тип = "DMIncomingDocument"
		или Тип = "DMOutgoingDocument";
		
КонецФункции

// Проверяет, является ли тип объекта ДО бизнес-процессом.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - истина, если тип соответствует бизнес-процессу ДО.
//
Функция ЭтоБизнесПроцесс(Тип) Экспорт
	
	// Проверка родительского типа средствами фабрики слишком медленна.
	Возврат Тип = "DMBusinessProcess"
		или Тип = "DMBusinessProcessAcquaintance"
		или Тип = "DMBusinessProcessApproval"
		или Тип = "DMBusinessProcessApproval_1.2.1.11"
		или Тип = "DMBusinessProcessConfirmation"
		или Тип = "DMBusinessProcessConsideration"
		или Тип = "DMBusinessProcessInvitation"
		или Тип = "DMBusinessProcessIssuesSolution"
		или Тип = "DMBusinessProcessOrder"
		или Тип = "DMBusinessProcessPerformance"
		или Тип = "DMBusinessProcessPerformance_1.2.1.11"
		или Тип = "DMBusinessProcessRegistration"
		или Тип = "DMBusinessProcessIncomingDocumentProcessing"
		или Тип = "DMBusinessProcessInternalDocumentProcessing"
		или Тип = "DMBusinessProcessOutgoingDocumentProcessing"
		или Тип = "DMComplexBusinessProcess";
		
КонецФункции

// Проверяет, является ли тип объекта ДО задачей бизнес-процесса.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - истина, если тип соответствует задаче ДО.
//
Функция ЭтоЗадачаБизнесПроцесса(Тип) Экспорт
	
	// Проверка родительского типа средствами фабрики слишком медленна.
	Возврат Тип = "DMBusinessProcessTask"
		или Тип = "DMBusinessProcessApprovalTaskApproval"
		или Тип = "DMBusinessProcessApprovalTaskCheckup"
		или Тип = "DMBusinessProcessConfirmationTaskCheckup"
		или Тип = "DMBusinessProcessConfirmationTaskConfirmation"
		или Тип = "DMBusinessProcessConsiderationTaskAcquaint"
		или Тип = "DMBusinessProcessInvitationTaskAcquaint"
		или Тип = "DMBusinessProcessInvitationTaskInvitation"
		или Тип = "DMBusinessProcessInvitationTaskNotify"
		или Тип = "DMBusinessProcessIssuesSolutionTaskAnswer"
		или Тип = "DMBusinessProcessIssuesSolutionTaskQuestion"
		или Тип = "DMBusinessProcessOrderTaskCheckup"
		или Тип = "DMBusinessProcessPerfomanceTaskCheckup"
		или Тип = "DMBusinessProcessRegistrationTaskCheckup"
		или Тип = "DMBusinessProcessRegistrationTaskRegistration";
		
КонецФункции

// Получает строковое представление срока действия по значениям реквизитов формы.
//
// Параметры:
//   ДатаНачала - Дата - дата начала действия.
//   Бессрочный - Булево - Истина, если документ бессрочный.
//   ДатаОкончания - Дата - дата окончания действия.
//   ПорядокПродленияID - Строка - порядок продления.
//   ПорядокПродления - Строка - описание порядка продления.
//
// Возвращаемое значение:
//   Строка - представление срока действия.
//
Функция ПредставлениеСрокаДействияДокумента(ДатаНачала, Бессрочный, ДатаОкончания, 
	ПорядокПродленияID, ПорядокПродления) Экспорт
	
	Результат = "";
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='с %1';uk='з %1'"),
			Формат(ДатаНачала, "ДЛФ=D")); 
	КонецЕсли;
	
	Если Бессрочный = Истина Тогда
		ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, ", ", НСтр("ru='бессрочный';uk='безстроковий'"));
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат,
			" ",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru=' по %1';uk=' по %1'"),
				Формат(ДатаОкончания, "ДЛФ=D")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПорядокПродленияID) Тогда
		Если ПорядокПродленияID = "НеПродлевается" Тогда 
			ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
					НСтр("ru='Не продлевается';uk='Не продовжується'"));
		ИначеЕсли ПорядокПродленияID = "ДопускаетПродление" Тогда 
			ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
					НСтр("ru='Допускает продление';uk='Допускає продовження'"));
		Иначе		
			ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Продлевается %1';uk='Продовжується %1'"),
					НРег(ПорядокПродления)));
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает HTML-представление документа для показа в карточке по объекту XDTO.
//
// Параметры:
//   Форма - УправляемаяФорма -  форма обработки ИнтеграцияС1СДокументооборот с данными документа.
//
// Возвращаемое значение:
//   Строка - HTML-представление документа.
//
Функция ПолучитьОбзорДокумента(Форма) Экспорт

	HTMLЗаголовок = "<html>
	|<head>
	|<style type=""text/css"">
	|	body {
	|		overflow:    auto;
	|		margin-top:  6px;
	|		margin-left: 10px;
	|		margin-bottom: 0px;
	|		font-family: Arial, sans-serif;
	|		font-size:   10pt;}
	|	table {
	|		width:       100%; 
	|		font-family: Arial, sans-serif;
	|		font-size:   10pt;}
	|	td {vertical-align: top;}
	| 	a:link {
	|		color: #006699; text-decoration: none;}
	|	a:visited {
	|		color: #006699; text-decoration: none;}
	|	a:hover {
	|		color: #006699; text-decoration: underline;}
	|	p {
	|		margin-top: 7px;}
	|</style>
	|<body>";
	
	HTMLЗавершение = "</body></html>";
	HTMLТекст = HTMLЗаголовок;
	
	HTMLТекст = HTMLТекст + "<table>";
	HTMLТекст = HTMLТекст + "<tr>";
	
	Если Форма.Тип = "DMIncomingDocument" Тогда
		
		HTMLТекст = HTMLТекст + "<td width=""40%"" align=center >";
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='От кого:';uk='Від кого:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Отправитель, 
			Форма.ОтправительID, Форма.ОтправительТип);
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + ВРег(Форма.ВидДокумента);
		HTMLТекст = HTMLТекст + "<p>";
		
		Если ЗначениеЗаполнено(Форма.НомерОтправителя) 
			И ЗначениеЗаполнено(Форма.ДатаОтправителя) Тогда 
			
			ДобавитьРеквизитКHTML(HTMLТекст, "", 
				Формат(Форма.ДатаОтправителя, "ДЛФ=D") + " № " + Форма.НомерОтправителя);
				
			Иначе
				
			ДобавитьРеквизитКHTML(HTMLТекст, "__________ №__________", "");
			
		КонецЕсли;
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "</td>";	
		HTMLТекст = HTMLТекст + "<td>";
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td width=""40%"">";
		
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Кому:';uk='Кому:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Организация);
		Если ЗначениеЗаполнено(Форма.Адресат) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Адресат);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ДатаРегистрации)
			И ЗначениеЗаполнено(Форма.РегистрационныйНомер) Тогда 
			
			HTMLТекст = HTMLТекст + "<p>";
			ДобавитьРеквизитКHTML(HTMLТекст, "", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Рег. № %1 от %2';uk='Рег. № %1 від %2'"),
					Форма.РегистрационныйНомер, Формат(Форма.ДатаРегистрации, "ДЛФ=D")));
			
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "</tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""3"">";
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<B>%1</B>",
			Форма.Наименование);
			
		Если ЗначениеЗаполнено(Форма.Описание)
			Или ЗначениеЗаполнено(Форма.СрокИсполнения)
			Или Форма.Сумма <> 0 Тогда 
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Описание) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", 
				СтрЗаменить(Форма.Описание, Символы.ПС, "<br>"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения)
			Или Форма.Сумма <> 0 Тогда 
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Срок исполнения:';uk='Строк виконання:'"), 
				Формат(Форма.СрокИсполнения, "ДЛФ=D"));
		КонецЕсли;
		
		Если Форма.Сумма <> 0 Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Сумма:';uk='Сума:'"), 
				Формат(Форма.Сумма, "ЧДЦ=2; ЧН=0") + " " + Форма.Валюта);
		КонецЕсли;
		
		ДобавитьДополнительныеСвойства(HTMLТекст, Форма);
		
		HTMLТекст = HTMLТекст + "</td></tr>";	
		
		Если ЗначениеЗаполнено(Форма.Подписал) Тогда 
			
			HTMLТекст = HTMLТекст + "<tr>";
			HTMLТекст = HTMLТекст + "<td colspan=""3"">";
			
			HTMLТекст = HTMLТекст + "<p>";
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Подписал:';uk='Підписав:'"), Форма.Подписал);
			
			HTMLТекст = HTMLТекст + "</td></tr>";
			
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"">";
		Если ЗначениеЗаполнено(Форма.Ответственный)
			Или ЗначениеЗаполнено(Форма.Подразделение) Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Ответственный) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Ответственный:';uk='Відповідальний:'"), Форма.Ответственный);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Подразделение) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Подразделение:';uk='Підрозділ:'"), Форма.Подразделение);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</tr>";
		
	ИначеЕсли Форма.Тип = "DMInternalDocument" Тогда
		
		HTMLТекст = HTMLТекст + "<td colspan=""2"" align=""center"">";
		
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 № %2 от %3",
			ВРег(Форма.ВидДокумента),
			?(ЗначениеЗаполнено(Форма.РегистрационныйНомер), Форма.РегистрационныйНомер, "_____"),
			?(ЗначениеЗаполнено(Форма.ДатаРегистрации), Формат(Форма.ДатаРегистрации, "ДЛФ=D"), "_____"));
		
		
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"" align=""center"" >";
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<B>%1</B>",
			Форма.Наименование);
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"" >";
		
		Если ЗначениеЗаполнено(Форма.Описание)
			Или ЗначениеЗаполнено(Форма.СрокИсполнения)
			Или Форма.Сумма <> 0 Тогда 
			HTMLТекст = HTMLТекст + "<p>";	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Описание) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", СтрЗаменить(Форма.Описание, Символы.ПС, "<br>"));
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(Форма.СрокИсполнения)
			Или Форма.Сумма <> 0 Тогда 
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Срок исполнения:';uk='Строк виконання:'"), 
				Формат(Форма.СрокИсполнения, "ДЛФ=D"));
		КонецЕсли;
		
		Если Форма.Сумма <> 0 Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Сумма:';uk='Сума:'"),
				Формат(Форма.Сумма, "ЧДЦ=2; ЧН=0") + " " + Форма.Валюта);
		КонецЕсли;
		
		ДобавитьПредставлениеСрокаДействия(HTMLТекст, Форма);
		ДобавитьДополнительныеСвойства(HTMLТекст, Форма);

		HTMLТекст = HTMLТекст + "</td></tr>";	
		
		HTMLТекст = HTMLТекст + "<tr>";

		HTMLТекст = HTMLТекст + "<td width=""70%"">";
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Наша организация:';uk='Наша організація:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Организация);
		
		Если ЗначениеЗаполнено(Форма.Подписал) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Подписал:';uk='Підписав:'"), Форма.Подписал);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Подготовил) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Подготовил:';uk='Підготував:'"), Форма.Подготовил);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</td>";
		
		Если ЗначениеЗаполнено(Форма.Корреспондент) Тогда
			HTMLТекст = HTMLТекст + "<td>";
			HTMLТекст = HTMLТекст + "<p>";	
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Корреспондент:';uk='Кореспондент:'"), "");
			HTMLТекст = HTMLТекст + "<p>";
			ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Корреспондент, 
				Форма.КорреспондентID, Форма.КорреспондентТип);
			Если ЗначениеЗаполнено(Форма.КонтактноеЛицо) Тогда
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Контакт:';uk='Контакт:'"), Форма.КонтактноеЛицо);
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</td></tr>";
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"">";
		Если ЗначениеЗаполнено(Форма.Ответственный)
			Или ЗначениеЗаполнено(Форма.Подразделение) Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Ответственный) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Ответственный:';uk='Відповідальний:'"), Форма.Ответственный);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Подразделение) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Подразделение:';uk='Підрозділ:'"), Форма.Подразделение);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</tr>";
		
	ИначеЕсли Форма.Тип = "DMOutgoingDocument" Тогда
		
		HTMLТекст = HTMLТекст + "<td width=""40%"" align=center >";
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='От кого:';uk='Від кого:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Организация);
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + ВРег(Форма.ВидДокумента);
		HTMLТекст = HTMLТекст + "<p>";
		
		Если ЗначениеЗаполнено(Форма.ДатаРегистрации) 
			И ЗначениеЗаполнено(Форма.РегистрационныйНомер) Тогда 
			
			ДобавитьРеквизитКHTML(HTMLТекст, "", Формат(Форма.ДатаРегистрации, "ДЛФ=D") 
			+ " № " +  Форма.РегистрационныйНомер);
			
		Иначе
			
			ДобавитьРеквизитКHTML(HTMLТекст, "__________ №__________", "");
			
		КонецЕсли;
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "</td>";	
		HTMLТекст = HTMLТекст + "<td>";
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td width=""40%"">";
		
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Кому:';uk='Кому:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Получатель, 
			Форма.ПолучательID, Форма.ПолучательТип);
		Если ЗначениеЗаполнено(Форма.Адресат) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Адресат);
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "</tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""3"">";
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<B>%1</B>",
			Форма.Наименование);
			
		Если ЗначениеЗаполнено(Форма.Описание)
			Или ЗначениеЗаполнено(Форма.СрокИсполнения)
			Или Форма.Сумма <> 0 Тогда 
			HTMLТекст = HTMLТекст + "<p>";	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Описание) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", 
				СтрЗаменить(Форма.Описание, Символы.ПС, "<br>"));
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения)
			Или Форма.Сумма <> 0 Тогда 
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Срок исполнения:';uk='Строк виконання:'"), 
				Формат(Форма.СрокИсполнения, "ДЛФ=D"));
		КонецЕсли;
		
		Если Форма.Сумма <> 0 Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Сумма:';uk='Сума:'"), 
				Формат(Форма.Сумма, "ЧДЦ=2; ЧН=0") + " " + Форма.Валюта);
		КонецЕсли;
		
		ДобавитьДополнительныеСвойства(HTMLТекст, Форма);
		
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""3"">";
		Если ЗначениеЗаполнено(Форма.Подписал) 
			Или ЗначениеЗаполнено(Форма.Подготовил) Тогда 
			
			Если ЗначениеЗаполнено(Форма.СрокИсполнения)
				Или Форма.Сумма <> 0 Тогда 
				HTMLТекст = HTMLТекст + "<p>";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.Подписал) Тогда
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Подписал:';uk='Підписав:'"), Форма.Подписал);
			КонецЕсли;
			Если ЗначениеЗаполнено(Форма.Подготовил) Тогда
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Подготовил:';uk='Підготував:'"), Форма.Подготовил);
			КонецЕсли;
			
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"">";
		Если ЗначениеЗаполнено(Форма.Ответственный)
			Или ЗначениеЗаполнено(Форма.Подразделение) Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Ответственный) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Ответственный:';uk='Відповідальний:'"),  Форма.Ответственный);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Подразделение) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Подразделение:';uk='Підрозділ:'"), Форма.Подразделение);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</tr>";
		
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<br>";
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td colspan=""3"">";
	
	HTMLТекст = HTMLТекст + "<p>";
	
	Если Форма.Тип = "DMInternalDocument"
		И ЗначениеЗаполнено(Форма.Папка) Тогда
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Папка:';uk='Папка:'"),  Форма.Папка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ГрифДоступа) Тогда 
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Гриф:';uk='Гриф:'"),  Форма.ГрифДоступа);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ВопросДеятельности) Тогда 
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Вопрос:';uk='Питання:'"),  Форма.ВопросДеятельности);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Проект) Тогда 
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru='Проект:';uk='Проект:'"),  Форма.Проект);
	КонецЕсли;
	
	ДобавитьПредставлениеСостояний(HTMLТекст, Форма);
	
	HTMLТекст = HTMLТекст + "</td></tr>";	

	HTMLТекст = HTMLТекст + "</table>";
		
	HTMLТекст = HTMLТекст + HTMLЗавершение;
	Возврат HTMLТекст;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает шестнадцатиричное представление числа.
//
// Параметры:
//   Число - Число - целое число.
//   Разрядов - Число - минимальная ширина результата.
//            - Неопределено - не дополнять нулями.
//
// Возвращаемое значение:
//   Строка - шестнадцатиричное представление числа, возможно,
//   дополненное нулями до указанного количества разрядов.
//
Функция ШестнадцатиричноеПредставлениеЧисла(Знач Число, Разрядов = Неопределено)
	
	Если Число = 0 и Разрядов = Неопределено Тогда
		Возврат "0";
	КонецЕсли;
	
	Результат = "";
	Н = 0;
	Пока Истина Цикл
		Н = Н + 1;
		Если Число = 0 Тогда // возможно, следует дополнить до указанного числа разрядов
			Если Разрядов = Неопределено Тогда
				Прервать;
			ИначеЕсли Н > Разрядов Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		ПравыйРазряд = Число % 16;
		Число = Цел(Число / 16);
		Если ПравыйРазряд > 9 Тогда
			Результат = Символ(КодСимвола("A") + ПравыйРазряд - 10) + Результат;
		Иначе
			Результат = Символ(КодСимвола("0") + ПравыйРазряд) + Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Получает число из его шестнадцатиричного представления. Может вызывать исключение.
//
// Параметры:
//   Представление - Строка - шестнадцатиричное число.
//
// Возвращаемое значение:
//   Число - преобразованное число.
//
Функция ЧислоИзШестнадцатиричногоПредставления(Знач Представление)
	
	Если Представление = "" Тогда
		Возврат 0;
	КонецЕсли;
	Представление = ВРег(Представление);
	
	Результат = 0;
	Пока Представление <> "" Цикл
		Разряд = Лев(Представление, 1);
		Представление = Сред(Представление, 2);
		Если Разряд >= "0" и Разряд <= "9" Тогда
			Результат = Результат * 16 + КодСимвола(Разряд, 1) - КодСимвола("0");
		ИначеЕсли Разряд >= "A" и Разряд <= "F" Тогда
			Результат = Результат * 16 + 10 + КодСимвола(Разряд, 1) - КодСимвола("A");
		Иначе
			ВызватьИсключение НСтр("ru='Ошибочный символ в шестнадцатиричной строке.';uk='Помилковий символ в шістнадцятковому рядку.'");
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает большое простое число, используемое как модуль кольца классов вычетов.
// Должно быть больше любого из кодируемых чисел.
//
Функция МодульКольцаВычетов()
	Возврат 4294967291; // больше любого из вероятных сочетаний двух символов пароля.
КонецФункции

// Разделяет число-секрет на указанное количество частей по алгоритму Шамира.
//
// Параметры:
//   Число - Число - разделяемое число, от 0 до 2^32 - 1.
//   Генератор - генератор случайных чисел, желательно сохранять его между вызовами.
//   Частей - Число - количество частей, на которые разделяется число.
//   Обязательных - Число - количество частей, требуемых для восстановления.
//
// Возвращаемое значение:
//   Массив пар чисел вида (1, 123), (2, 234), (3, 345), необходимых для восстановления.
//
Функция РазделитьЧисло(Число, Генератор = Неопределено, Частей = 2, Обязательных = 2)
	
	Если Генератор = Неопределено Тогда
		Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяДата() - Дата(1, 1, 1));
	КонецЕсли;
	Модуль = МодульКольцаВычетов();
	
	Пока Истина Цикл
		Результат = Новый Массив;
		Коэффициенты = Новый Массив;
		Коэффициенты.Добавить(Число);
		Коэффициенты.Добавить(Цел(Генератор.СлучайноеЧисло(0, Модуль - 1)));
		Коэффициенты.Добавить(Цел(Генератор.СлучайноеЧисло(0, Модуль - 1)));
		Для Часть = 1 по Частей Цикл
			Значение = Число;
			Для Степень = 1 по Обязательных - 1 Цикл
				Значение = (
					Значение + (Коэффициенты[Степень] * (Pow(Часть, Степень) % Модуль)) % Модуль
				) % Модуль;
			КонецЦикла;
			Пара = Новый Массив;
			Пара.Добавить(Часть);
			Пара.Добавить(Значение);
			Результат.Добавить(Пара);
		КонецЦикла;
		Если СобратьЧисло(Результат) = Число Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет разложение наибольшего общего делителя пары чисел A и B.
//
// Параметры:
//   A - Число.
//   B - Число.
//
// Возвращаемое значение:
//   Массив (X, Y, Z), такой, что:
//     X - наибольший общий делитель A и B;
//     X = A*Y + B * Z
//
Функция РазложитьНОД(Знач A, Знач B)
	
	Результат = Новый Массив;
	Если B = 0 Тогда
		Результат.Добавить(A);
		Результат.Добавить(1);
		Результат.Добавить(0);
	Иначе
		N = Цел(A / B);
		C = A % B;
		R = РазложитьНОД(B, C);
		Результат.Добавить(R[0]);
		Результат.Добавить(R[2]);
		Результат.Добавить(R[1] - R[2]*N);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Рассчитывает обратный модуль.
//
// Параметры:
//   K - Число.
//
// Возвращаемое значение:
//   Число, такое, что (К * ОбратныйМодуль(К)) % Модуль = 1 для всех 
//   положительных K < Модуль.
//
Функция ОбратныйМодуль(Знач K)
	
	Модуль = МодульКольцаВычетов();
	K = K % Модуль;
	Если K < 0 Тогда
		Разложение = РазложитьНОД(Модуль, -K);
		Р = -Разложение[2];
	Иначе
		Разложение = РазложитьНОД(Модуль, K);
		Р = Разложение[2];
	КонецЕсли;
	Возврат (Модуль + Р) % Модуль;
	
КонецФункции

// Собирает число, разделенное по алгоритму Шамира на части функцией РазделитьЧисло.
//
// Параметры:
//   РазделенноеЧисло - массив пар чисел вида (1, 123), (2, 234), ...
//
// Возвращаемое значение:
//   Число - исходное число.
//
Функция СобратьЧисло(РазделенноеЧисло)
	
	Результат = 0;
	Модуль = МодульКольцаВычетов();
	Для Строка = 0 по РазделенноеЧисло.Количество() - 1 Цикл
		Нумератор = 1; 
		Делитель = 1;
		Для Колонка = 0 по РазделенноеЧисло.Количество() - 1 Цикл
			Если Строка = Колонка Тогда
				Продолжить;
			КонецЕсли;
			От = РазделенноеЧисло[Строка][0];
			До  = РазделенноеЧисло[Колонка][0];
			Нумератор = (Нумератор * -До) % Модуль;
			Делитель = (Делитель * (От - До)) % Модуль;
		КонецЦикла;
		Значение = РазделенноеЧисло[Строка][1];
		Результат = (Модуль + Результат + (Значение * Нумератор * ОбратныйМодуль(Делитель))) % Модуль;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Добавляет подпись к HTML-представлению объекта.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Подпись - Строка - текст подписи.
//
Процедура ДобавитьПодписьКHTML(HTMLТекст, Подпись)
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<FONT color=#413003>";
		HTMLТекст = HTMLТекст + Подпись + " ";
		HTMLТекст = HTMLТекст + "</FONT>";
	КонецЕсли;
	
КонецПроцедуры

// Добавляет значение к HTML-представлению, оформляя его как ссылку при необходимости.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Представление - Строка - добавляемое значение.
//   Идентификатор - Строка - идентификатор добавляемого значения.
//   Тип - Строка - тип добавляемого значения.
//
Процедура ДобавитьЗначениеКHTML(HTMLТекст, Представление, 
	Идентификатор = Неопределено, Тип = Неопределено)
	
	Если ЗначениеЗаполнено(Идентификатор)
		И ЗначениеЗаполнено(Тип) Тогда
		
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=dmil:%1>%2</A>",
			Тип + ":" + Идентификатор,
			Представление);
			
	Иначе
			
		HTMLТекст = HTMLТекст + Представление;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет реквизит (подпись и значение) к HTML-представлению объекта
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Подпись - Строка - подпись реквизита.
//   Представление - Строка - добавляемое значение.
//   Идентификатор - Строка - идентификатор добавляемого значения.
//   Тип - Строка - тип добавляемого значения.
//
Процедура ДобавитьРеквизитКHTML(HTMLТекст, Подпись, Представление, 
	Идентификатор = Неопределено, Тип = Неопределено)
	
	ДобавитьПодписьКHTML(HTMLТекст, Подпись);
	ДобавитьЗначениеКHTML(HTMLТекст, Представление, Идентификатор, Тип); 
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

// Добавляет представление состояний документа к его HTML-представлению.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Форма - УправляемаяФорма - форма документа.
//
Процедура ДобавитьПредставлениеСостояний(HTMLТекст, Форма)
	
	Представление = ""; Разделитель = "";
	Последовательность = Новый Структура(
		"Регистрация, Рассмотрение, Согласование, Утверждение, Исполнение");
	Для каждого ТипСостояния из Последовательность Цикл
		Состояние = Форма["Состояние" + ТипСостояния.Ключ];
		Если ЗначениеЗаполнено(Состояние) Тогда
			Представление = Представление + Разделитель + Состояние;
			Разделитель = ", ";
		КонецЕсли;
	КонецЦикла;
	
	// Старые версии сервиса дают только одно состояние.
	Представление = ?(Представление = "", Форма.Состояние, Представление);
	Если Представление = "" Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодписьКHTML(HTMLТекст, НСтр("ru='Состояние:';uk='Стан:'"));
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=dmil:%1:%2:%3>%4</A>",
		Форма.Тип, Форма.ID, "status",
		Представление)
		+ "<br>";
		
КонецПроцедуры

// Добавляет представление срока действия документа к его HTML-представлению.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Форма - УправляемаяФорма - форма документа.
//
Процедура ДобавитьПредставлениеСрокаДействия(HTMLТекст, Форма)
	
	Представление = ПредставлениеСрокаДействияДокумента(
		Форма.ДатаНачалаДействия, Форма.Бессрочный, Форма.ДатаОкончанияДействия,
		Форма.ПорядокПродленияID, Форма.ПорядокПродления);
	Если Представление = "" Тогда
		Возврат;
	КонецЕсли;
		
	ДобавитьПодписьКHTML(HTMLТекст, НСтр("ru='Срок действия:';uk='Строк дії:'"));
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=dmil:%1:%2:%3>%4</A>",
		Форма.Тип, Форма.ID, "term",
		Представление)
		+ "<br>";
		
КонецПроцедуры
	
// Добавляет дополнительные свойства документа к его HTML-представлению.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Форма - УправляемаяФорма - форма документа.
//
Процедура ДобавитьДополнительныеСвойства(HTMLТекст, Форма)
	
	Для Каждого СтрокаСвойства из Форма.Свойства Цикл
		Если ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, 
				СтрокаСвойства.Свойство + ":",
				СтрокаСвойства.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
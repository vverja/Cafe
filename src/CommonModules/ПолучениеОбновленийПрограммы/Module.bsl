
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение обновлений программы".
// ОбщийМодуль.ПолучениеОбновленийПрограммы.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет возможность использования механизма автоматического обновления
// платформы в текущем режиме работы.
//
// Возвращаемое значение:
//	Булево - признак возможности использования: Истина, если использование
//		возможно, Ложь - в противном случае.
//
Функция ДоступноИспользованиеПолученияОбновленийПлатформы() Экспорт
	
	Возврат Ложь;
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
		ИЛИ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
		ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено()
		ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина)
		ИЛИ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистИнфо = Новый СистемнаяИнформация;
	Если СистИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86
		И СистИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Добавляет описание обработчиков событий, реализуемых подсистемой.
//
// Описание формата процедур-обработчиков см. в описании функции
// ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().
//
// Параметры:
//	СерверныеОбработчики - Структура - серверные обработчики;
//		* ПараметрыРаботыКлиентаПриЗапуске - Массив - элементы типа Строка -
//			имена модулей, реализующих обработку заполнения параметров
//			работы клиента при запуске;
//		* ОчиститьНастройкиИПППользователя - элементы типа Строка -
//			имена модулей, реализующих обработку очистки настроек
//			пользователя при выходе авторизованного пользователя из ИПП;
//		* БизнесПроцессы - Соответствие - серверные обработчики
//			бизнес-процессов:
//			** Ключ - Строка - <Точка входа бизнес-процесса>\<Имя события>;
//			** Значение - Строка - имя серверного модуля, реализующего
//				обработчик бизнес-процесса;
//	КлиентскиеОбработчики - Структура - клиентские обработчики;
//		* ПриНачалеРаботыСистемы - элементы типа Строка -
//			имена клиентских модулей, реализующих обработку
//			события "При начале работы системы"
//		* БизнесПроцессы - Соответствие - клиентские обработчики
//			бизнес-процессов:
//			** Ключ - Строка - <Точка входа бизнес-процесса>\<Имя события>;
//			** Значение - Строка - имя клиентского модуля, реализующего
//				обработчик бизнес-процесса;
//
Процедура ДобавитьОбработчикиСобытий(СерверныеОбработчики, КлиентскиеОбработчики) Экспорт
	
	СерверныеОбработчики.ПараметрыРаботыКлиентаПриЗапуске.Добавить("ПолучениеОбновленийПрограммы");
	Если Не ПоказыватьОповещенияВТекущихДелах() Тогда
		// Если встроена подсистема "Текущие дела", тогда все необходимые оповещения
		// отображаются средствами подсистемы "Текущие дела"
		КлиентскиеОбработчики.ПриНачалеРаботыСистемы.Добавить("ПолучениеОбновленийПрограммыКлиент");
	КонецЕсли;
	
КонецПроцедуры

// Добавляет необходимые параметры работы клиента при запуске.
// Добавленные параметры доступны в
// СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске().ИнтернетПоддержкаПользователей.<ИмяПараметра>;
// Используется в том случае, если подсистема реализует сценарий, выполняемый
// при начале работы системы.
// Вызывается из ИнтернетПоддержкаПользователей.ПараметрыРаботыКлиентаПриЗапуске()
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если НЕ ДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = НастройкиАвтоматическогоОбновления();
	Параметры.Вставить("ПолучениеОбновленийПрограммы", НастройкиОбновления);
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.ТекущиеДела.
// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ДоступноИспользованиеПолученияОбновленийПлатформы()
		Или Не ПоказыватьОповещенияВТекущихДелах() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДела = "ОбновлениеПлатформы1СПредприятие";
	
	// Вызов процедуры предполагает наличие подсистемы СтандартныеПодсистемы.ТекущиеДела.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	Если МодульТекущиеДелаСервер.ДелоОтключено(ИдентификаторДела) Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОбОбновлении = ИнформацияОДоступномОбновленииПлатформы(
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации());
	
	Если Не ПустаяСтрока(ИнформацияОбОбновлении.ИмяОшибки) Тогда
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторДела;
		Дело.ЕстьДела       = Истина;
		Дело.Важное         = Истина;
		Дело.Представление  = НСтр("ru='Ошибка при проверке обновления платформы';uk='Помилка при перевірці оновлення платформи'");
		Дело.Форма          = "Обработка.ПереходНаНовуюВерсиюПлатформы1СПредприятие.Форма.Форма";
		Дело.ПараметрыФормы = Новый Структура("ИнформацияОбОбновлении", ИнформацияОбОбновлении);
		Дело.Владелец       = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей;
		
	Иначе
		
		СистИнфо = Новый СистемнаяИнформация;
		
		ДобавитьДело = НЕ ПустаяСтрока(ИнформацияОбОбновлении.Версия)
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие(),
				ИнформацияОбОбновлении.Версия) < 0
			И (ИнформацияОбОбновлении.РекомендуетсяПереход
			ИЛИ ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(ИнформацияОбОбновлении.Версия) = Неопределено);
		
		Если НЕ ДобавитьДело Тогда
			Возврат;
		КонецЕсли;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторДела;
		Дело.ЕстьДела       = Истина;
		
		Если ИнформацияОбОбновлении.РекомендуетсяПереход Тогда
			ШаблонСообщения = НСтр("ru='Рекомендуется перейти на новую версию %1 платформы';uk='Рекомендується перейти на нову версію %1 платформи'");
		Иначе
			ШаблонСообщения = НСтр("ru='Доступна новая версия %1 платформы';uk='Доступна нова версія %1 платформи'");
		КонецЕсли;
		
		Дело.Представление  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИнформацияОбОбновлении.Версия);
		Дело.Форма          = "Обработка.ПереходНаНовуюВерсиюПлатформы1СПредприятие.Форма.Форма";
		Дело.ПараметрыФормы = Новый Структура("ИнформацияОбОбновлении", ИнформацияОбОбновлении);
		Дело.Владелец       = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей;
		Дело.Важное         = ИнформацияОбОбновлении.РекомендуетсяПереход;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПоказыватьОповещенияВТекущихДелах() Экспорт
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервиса обновлений

Функция ИнформацияОДоступномОбновленииПлатформы(ВерсияКонфигурации) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru='Получение информации о доступном обновлении платформы из сервиса Интернет-обновлений.';uk='Отримання інформації про доступне оновлення платформи з сервісу Інтернет-оновлення.'"));
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"             , "");
	Результат.Вставить("Сообщение"             , "");
	Результат.Вставить("ИнформацияОбОшибке"    , "");
	Результат.Вставить("Версия"                , "");
	Результат.Вставить("ИДФайла"               , "");
	Результат.Вставить("РазмерОбновления"      , 0);
	Результат.Вставить("URLОсобенностиПерехода", "");
	Результат.Вставить("РекомендуетсяПереход"  , Ложь);
	
	ПроксиСервиса = ПолучениеОбновленийПрограммыКлиентСервер.ПроксиВебСервисаОбновлений();
	
	Если НЕ ПустаяСтрока(ПроксиСервиса.КодОшибки) Тогда
		
		Результат.ИмяОшибки = ПроксиСервиса.КодОшибки;
		Результат.Сообщение = ПроксиСервиса.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка (%1) при получении информации о доступном обновлении платформы. %2';uk='Помилка (%1) при отриманні інформації про доступне оновлення платформи. %2'"),
			ПроксиСервиса.КодОшибки,
			ПроксиСервиса.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат Результат;
		
	Иначе
		
		ТипПараметра = ПроксиСервиса.ФабрикаXDTO.Тип(
			"http://platform.api.update.company1c.com",
			"PlatformUpdateInfoRequest");
		
		Параметр = ПроксиСервиса.ФабрикаXDTO.Создать(ТипПараметра);
		Параметр.configurationName = ИнтернетПоддержкаПользователейКлиентСервер.ИмяКонфигурации();
		Параметр.versionNumber     = ВерсияКонфигурации;
		
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"PlatformVersion",
			ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие(),
			ПроксиСервиса);
		
		СистИнфо = Новый СистемнаяИнформация;
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"ClientPlatformType",
			ТипПлатформыДляСервиса(СистИнфо.ТипПлатформы),
			ПроксиСервиса);
		
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"ClientOSVersion",
			СистИнфо.ВерсияОС,
			ПроксиСервиса);
		
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"AutoCheck",
			"true",
			ПроксиСервиса);
		
		Попытка
			ОписаниеРезультатаОперации = ПолучениеОбновленийПрограммыКлиентСервер.СервисОбновлений_getPlatformUpdateInfo(
				ПроксиСервиса,
				Параметр);
		Исключение
			ИнфОшибка = ИнформацияОбОшибке();
			Результат.ИмяОшибки = "InternalError";
			Результат.Сообщение =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неизвестная ошибка при получении информации о доступном обновлении платформы. %1';uk='Невідома помилка при отриманні інформації про доступне оновлення платформи. %1'"),
					КраткоеПредставлениеОшибки(ИнфОшибка));
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неизвестная ошибка при получении информации о доступном обновлении платформы. %1';uk='Невідома помилка при отриманні інформації про доступне оновлення платформи. %1'"),
				ПодробноеПредставлениеОшибки(ИнфОшибка));
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			Возврат Результат;
		КонецПопытки;
		
		Если НЕ ПустаяСтрока(ОписаниеРезультатаОперации.КодОшибки) Тогда
			
			Результат.ИмяОшибки = ОписаниеРезультатаОперации.КодОшибки;
			Результат.Сообщение = ОписаниеРезультатаОперации.СообщениеОбОшибке;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка (%1) при получении информации о доступном обновлении платформы. %2';uk='Помилка (%1) при отриманні інформації про доступне оновлення платформи. %2'"),
				ОписаниеРезультатаОперации.КодОшибки,
				ОписаниеРезультатаОперации.ИнформацияОбОшибке);
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			Возврат Результат;
			
		КонецЕсли;
		
		ВозвращенноеЗначение = ОписаниеРезультатаОперации.ВозвращенноеЗначение;
		Если ВозвращенноеЗначение = Неопределено Тогда
			ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru='Не обнаружено доступных обновлений платформы.';uk='Не виявлено доступних оновлень платформи.'"));
			Возврат Результат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВозвращенноеЗначение.errorName) Тогда
			
			Результат.ИмяОшибки = ВозвращенноеЗначение.errorName;
			Результат.Сообщение = ?(ЗначениеЗаполнено(ВозвращенноеЗначение.errorMessage),
				ВозвращенноеЗначение.errorMessage,
				ВозвращенноеЗначение.errorName);
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при проверке наличия обновлений платформы.
                    |Сервис Интернет-обновлений сообщил об ошибке. %1: %2'
                    |;uk='Помилка при перевірці наявності оновлень платформи.
                    |Сервіс Інтернет-оновлення повідомив про помилку. %1: %2'"),
				Результат.ИмяОшибки,
				Результат.Сообщение);
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("Версия"                , ВозвращенноеЗначение.platformVersion);
	Результат.Вставить("ИДФайла"               , ВозвращенноеЗначение.distributionUin);
	Результат.Вставить("РазмерОбновления"      , ВозвращенноеЗначение.size);
	Результат.Вставить("URLОсобенностиПерехода", ВозвращенноеЗначение.transitionInfoUrl);
	
	Результат.Вставить("РекомендуетсяПереход",
		(ЗначениеДополнительногоСвойства("ApplyUpdate", ВозвращенноеЗначение.additionalParameters) = "true"));
	
	СообщениеЖурнала =СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Получена информация о доступном обновлении платформы.
            |Версия: %1;
            |Размер обновления: %2 байт;
            |URL ""Особенности перехода"": %3;
            |ИД файла: %4;
            |Рекомендуется переход: %5.'
            |;uk='Отримана інформація про доступне оновлення платформи.
            |Версія: %1;
            |Розмір оновлення: %2 байт;
            |URL ""Особливості переходу"": %3;
            |ІД файлу: %4;
            |Рекомендується перехід: %5.'"),
		Результат.Версия,
		Результат.РазмерОбновления,
		Результат.URLОсобенностиПерехода,
		Результат.ИДФайла,
		Результат.РекомендуетсяПереход);
		ЗаписатьИнформациюВЖурналРегистрации(СообщениеЖурнала);
	
	Возврат Результат;
	
КонецФункции

Функция URLФайлаДистрибутиваОбновления(ИдентификаторФайла, Логин, Пароль) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Получение URL файла для загрузки дистрибутива платформы.
                |ИД файла: %1;
                |Логин пользователя: %2'
                |;uk='Отримання URL файлу для завантаження дистрибутива платформи.
                |ІД файлу: %1;
                |Логін користувача: %2'"),
			ИдентификаторФайла,
			Логин));
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"         , "");
	Результат.Вставить("Сообщение"         , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("URLФайла"          , "");
	
	ПроксиСервиса = ПолучениеОбновленийПрограммыКлиентСервер.ПроксиВебСервисаОбновлений();
	
	Если НЕ ПустаяСтрока(ПроксиСервиса.КодОшибки) Тогда
		
		Результат.ИмяОшибки = ПроксиСервиса.КодОшибки;
		Результат.Сообщение = ПроксиСервиса.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка (%1) при получении URL файла дистрибутива платформы. %2';uk='Помилка (%1) при отриманні URL файлу дистрибутива платформи. %2'"),
			ПроксиСервиса.КодОшибки,
			ПроксиСервиса.ИнформацияОбОшибке);
		
		ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		
		Возврат Результат;
		
	Иначе
		
		ТипПараметра = ПроксиСервиса.ФабрикаXDTO.Тип(
			"http://platform.api.update.company1c.com",
			"PlatformUpdateRequest");
		
		Параметр = ПроксиСервиса.ФабрикаXDTO.Создать(ТипПараметра);
		Параметр.login           = Логин;
		Параметр.password        = Пароль;
		Параметр.distributionUin = ИдентификаторФайла;
		
		СистИнфо = Новый СистемнаяИнформация;
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"PlatformVersion",
			ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие(),
			ПроксиСервиса);
		
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"ClientPlatformType",
			ТипПлатформыДляСервиса(СистИнфо.ТипПлатформы),
			ПроксиСервиса);
		
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"ClientOSVersion",
			СистИнфо.ВерсияОС,
			ПроксиСервиса);
		
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"ConfigName",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяКонфигурации(),
			ПроксиСервиса);
		
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"ConfigVersion",
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации(),
			ПроксиСервиса);
		
		ДобавитьДопПараметрВызоваОперации(
			Параметр.additionalParameters,
			"IBID",
			СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы(),
			ПроксиСервиса);
		
		Попытка
			ОписаниеРезультатаОперации = ПолучениеОбновленийПрограммыКлиентСервер.СервисОбновлений_getPlatformUpdate(
				ПроксиСервиса,
				Параметр);
		Исключение
			ИнфОшибка = ИнформацияОбОшибке();
			Результат.ИмяОшибки = "InternalError";
			Результат.Сообщение =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неизвестная ошибка при получении обновления платформы. %1';uk='Невідома помилка при отриманні оновлення платформи. %1'"),
					КраткоеПредставлениеОшибки(ИнфОшибка));
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неизвестная ошибка при получении URL файла обновления платформы. %1';uk='Невідома помилка при отриманні URL файлу оновлення платформи. %1'"),
				ПодробноеПредставлениеОшибки(ИнфОшибка));
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			Возврат Результат;
		КонецПопытки;
		
		Если НЕ ПустаяСтрока(ОписаниеРезультатаОперации.КодОшибки) Тогда
			
			Результат.ИмяОшибки = ОписаниеРезультатаОперации.КодОшибки;
			Результат.Сообщение = ОписаниеРезультатаОперации.СообщениеОбОшибке;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка (%1) при получении URL файла обновления платформы. %2';uk='Помилка (%1) при отриманні URL файлу оновлення платформи. %2'"),
				ОписаниеРезультатаОперации.КодОшибки,
				ОписаниеРезультатаОперации.ИнформацияОбОшибке);
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			Возврат Результат;
			
		КонецЕсли;
		
		ВозвращенноеЗначение = ОписаниеРезультатаОперации.ВозвращенноеЗначение;
		Если ВозвращенноеЗначение = Неопределено Тогда
			Результат.ИмяОшибки = "ServerError";
			Результат.Сообщение = НСтр("ru='Не найден файл обновления. Возможно файл был удален.';uk='Не знайдено файл оновлення. Можливо файл видалено.'");
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при получении URL файла обновления платформы. Указанный файл (%1) не найден.
                    |Операция getPlatformUpdate() сервиса Интернет-обновлений возвратила пустое значение.'
                    |;uk='Помилка при отриманні URL файлу оновлення платформи. Вказаний файл (%1) не знайдено.
                    |Операція getPlatformUpdate() сервісу Інтернет-оновлення повернула пусте значення.'"),
				ИдентификаторФайла);
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			Возврат Результат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВозвращенноеЗначение.errorName) Тогда
			
			Результат.ИмяОшибки = ВозвращенноеЗначение.errorName;
			Результат.Сообщение = ?(ЗначениеЗаполнено(ВозвращенноеЗначение.errorMessage),
				ВозвращенноеЗначение.errorMessage,
				ВозвращенноеЗначение.errorName);
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при получении URL файла платформы.
                    |Сервис Интернет-обновлений сообщил об ошибке. %1: %2'
                    |;uk='Помилка при отриманні URL файлу платформи.
                    |Сервіс Інтернет-оновлення повідомив про помилку. %1: %2'"),
				Результат.ИмяОшибки,
				Результат.Сообщение);
			ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("URLФайла", ВозвращенноеЗначение.downloadUrl);
	
	СообщениеЖурнала =СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Получен URL файла дистрибутива платформы: %1';uk='Отримано URL файлу дистрибутива платформи: %1'"),
		Результат.URLФайла);
	ЗаписатьИнформациюВЖурналРегистрации(СообщениеЖурнала);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНаличиеОбновленияВФоновомРежиме() Экспорт
	
	ИнформацияОбОбновлении = ИнформацияОДоступномОбновленииПлатформы(
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации());
	
	Если ТипЗнч(ИнформацияОбОбновлении) = Тип("Структура")
		И ЗначениеЗаполнено(ИнформацияОбОбновлении.Версия) Тогда
		
		КаталогУстановкиПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(
			ИнформацияОбОбновлении.Версия);
		ИнформацияОбОбновлении.Вставить("Установлена", (КаталогУстановкиПлатформы <> Неопределено));
		
	КонецЕсли;
	
	СообщитьСостояние("Выполнено", , ИнформацияОбОбновлении);
	
КонецПроцедуры

Процедура ДобавитьДопПараметрВызоваОперации(
	ДопПараметры,
	ИмяПараметра,
	ЗначениеПараметра,
	ПроксиСервиса)
	
	ТипДопПараметр = ПроксиСервиса.ФабрикаXDTO.Тип(
		"http://platform.api.update.company1c.com",
		"MapElements");
	
	ДопПараметр = ПроксиСервиса.ФабрикаXDTO.Создать(ТипДопПараметр);
	ДопПараметр.key   = ИмяПараметра;
	ДопПараметр.value = Строка(ЗначениеПараметра);
	
	ДопПараметры.Добавить(ДопПараметр);
	
КонецПроцедуры

Функция ЗначениеДополнительногоСвойства(ИмяСвойства, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого КлючЗначение Из ДополнительныеПараметры Цикл
		Если КлючЗначение.key = ИмяСвойства Тогда
			Возврат КлючЗначение.value;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТипПлатформыДляСервиса(ПараметрТипПлатформы)
	
	Если ПараметрТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
		Возврат "MacOS_x86";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		Возврат "MacOS_x86_64";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли ПараметрТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Работа с дистрибутивами платформы

Процедура ЗагрузитьИУстановитьДистрибутивПлатформыВФоновомРежиме(Параметры) Экспорт
	
	Если НЕ ДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		ВызватьИсключение НСтр("ru='Использование обновления платформы недоступно в текущем режиме работы.';uk='Використання оновлення платформи недоступне в поточному режимі роботи.'");
	КонецЕсли;
	
	КаталогДляЗагрузки = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	КаталогХраненияДистрибутивов = Параметры.КаталогХраненияДистрибутивов;
	Если КаталогХраненияДистрибутивов = Неопределено Тогда
		КаталогДистрибутива = КаталогДляЗагрузки + "setup\";
	Иначе
		Если Прав(КаталогХраненияДистрибутивов, 1) <> "\" Тогда
			КаталогХраненияДистрибутивов = КаталогХраненияДистрибутивов + "\";
		КонецЕсли;
		КаталогДистрибутива = КаталогХраненияДистрибутивов + Параметры.Версия + "\";
	КонецЕсли;
	
	// Проверить наличие загруженного дистрибутива
	ДистрибутивЗагружен = ПолучениеОбновленийПрограммыКлиентСервер.КаталогСодержитДистрибутивПлатформы1СПредприятие(
		КаталогДистрибутива,
		Параметры.Версия);
	
	// Загрузка дистрибутива
	Если НЕ ДистрибутивЗагружен Тогда
		
		Попытка
			СоздатьКаталог(КаталогДистрибутива);
		Исключение
			
			ИнфОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при создании каталога для сохранения дистрибутива (%1).';uk='Помилка при створенні каталогу для збереження дистрибутива (%1).'"),
					КаталогДистрибутива)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнфОшибка);
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			СообщитьСостояние(
				"Ошибка",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось создать каталог %1 для сохранения дистрибутива. %2';uk='Не вдалося створити каталог %1 для збереження дистрибутива. %2'"),
					КаталогДистрибутива,
					КраткоеПредставлениеОшибки(ИнфОшибка)),
				,
				СообщениеЖурнала);
			Возврат;
			
		КонецПопытки;
		
		Попытка
			СоздатьКаталог(КаталогДляЗагрузки);
		Исключение
			
			ИнфОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при создании каталога для загрузки дистрибутива (%1).';uk='Помилка при створенні каталогу для завантаження дистрибутива (%1).'"),
					КаталогДляЗагрузки)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнфОшибка);
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			СообщитьСостояние(
				"Ошибка",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось создать каталог %1 для загрузки дистрибутива. %2';uk='Не вдалося створити каталог %1 для завантаження дистрибутива. %2'"),
					КаталогДистрибутива,
					КраткоеПредставлениеОшибки(ИнфОшибка)),
				,
				СообщениеЖурнала);
			Возврат;
			
		КонецПопытки;
		
		// Загрузка файла
		ПутьПолученногоФайла = КаталогДляЗагрузки + "setup.zip";
		ДопПараметры = Новый Структура("ИмяФайлаОтвета, Таймаут", ПутьПолученногоФайла, 0);
		РезультатПолучения = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
			Параметры.URLФайлаОбновления,
			Параметры.Логин,
			Параметры.Пароль,
			ДопПараметры);
		
		Если НЕ ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
			
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при получении файла дистрибутива платформы (%1). %2';uk='Помилка при отриманні файлу дистрибутива платформи (%1). %2'"),
					Параметры.URLФайлаОбновления,
					РезультатПолучения.ИнформацияОбОшибке);
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			СообщитьСостояние(
				"Ошибка",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при получении файла дистрибутива. %1';uk='Помилка при отриманні файлу дистрибутива. %1'"),
					РезультатПолучения.СообщениеОбОшибке),
				Новый Структура("КодОшибки", РезультатПолучения.КодОшибки),
				СообщениеЖурнала);
			
			Возврат;
			
		КонецЕсли;
		
		
		// Извлечение файлов
		
		Попытка
			ЧтениеZIP = Новый ЧтениеZipФайла(ПутьПолученногоФайла);
			ЧтениеZIP.ИзвлечьВсе(КаталогДистрибутива, РежимВосстановленияПутейФайловZIP.Восстанавливать);
		Исключение
			
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при извлечении файлов архива (%1) в каталог %2.';uk='Помилка при витяганні файлів архіву (%1) у каталог %2.'"),
					ПутьПолученногоФайла,
					КаталогДистрибутива)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			СообщитьСостояние(
				"Ошибка",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось извлечь файлы дистрибутива. %1';uk='Не вдалося витягти файли дистрибутива. %1'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке())),
				,
				СообщениеЖурнала);
			Возврат;
			
		КонецПопытки;
		
		ЧтениеZIP.Закрыть();
		
		СохранитьКаталогПоследнегоПолученногоДистрибутиваПлатформы(КаталогДистрибутива);
		
	КонецЕсли;
	
	// Сообщить родительскому сеансу о переходе к установке
	СообщитьСостояние("Установка");
	
	// Подготовка протокола установки
	ПутьФайлаПротокола = КаталогДляЗагрузки + "installlog.txt";
	
	Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПротокола) Тогда
		
		Попытка
			УдалитьФайлы(ПутьФайлаПротокола);
		Исключение
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при удалении файла протокола (%1). %2';uk='Помилка при видаленні файлу протоколу (%1). %2'"),
					ПутьФайлаПротокола,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЕсли;
	
	
	// Запуск установки
	КодВозврата = 0;
	ПутьФайлаПрограммыУстановки = КаталогДистрибутива + "setup.exe";
	Если НЕ ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПрограммыУстановки) Тогда
		
		СообщениеЖурнала = НСтр("ru='Загружен некорректный дистрибутив платформы. Отсутствует файл setup.exe.';uk='Звантажено некоректний дистрибутив платформи. Відсутній файл setup.exe.'");
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		СообщитьСостояние(
			"Ошибка",
			НСтр("ru='Загружен некорректный дистрибутив платформы. Отсутствует файл setup.exe.';uk='Звантажено некоректний дистрибутив платформи. Відсутній файл setup.exe.'"),
			,
			СообщениеЖурнала);
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ПутьФайлаПрограммыУстановки = """" + КаталогДистрибутива + "setup.exe""";
		
		КомандаЗапуска = ПутьФайлаПрограммыУстановки + " "
			+ ?(Параметры.РежимУстановки = 0, " /S ", "") // "Тихий" или полный режим
			+ "/debuglog installlog.txt"; // Протокол установки
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Установка новой версии платформы (%1). %2';uk='Встановлення нової версії платформи (%1). %2'"),
				Параметры.Версия,
				КомандаЗапуска));
		
		ЗапуститьПриложение(КомандаЗапуска, КаталогДляЗагрузки, Истина, КодВозврата);
		
	Исключение
		
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при запуске программы установки платформы (%1). %2';uk='Помилка при запуску програми установки платформи (%1). %2'"),
				КомандаЗапуска,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		СообщитьСостояние(
			"Ошибка",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при запуске программы установки платформы. %1';uk='Помилка при запуску програми установки платформи. %1'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке())),
			,
			СообщениеЖурнала);
		Возврат;
		
	КонецПопытки;
	
	Если КодВозврата <> 0 Тогда
		// Сообщить родительскому сеансу об ошибке
		
		Если КодВозврата = 1602 Тогда
			// Отменено пользователем
			
			СообщитьСостояние("УстановкаОтменена");
			
		Иначе
			
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Установка платформы завершена с ошибкой.
                        |Версия %1;
                        |Код возврата: %2;
                        |Команда: %3'
                        |;uk='Встановлення платформи завершено з помилкою.
                        |Версія %1;
                        |Код повернення: %2;
                        |Команда: %3'"),
					Параметры.Версия,
					Строка(КодВозврата),
					КомандаЗапуска);
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			ШаблонСообщенияПользователю =
				НСтр("ru='<body>При установке новой версии платформы произошла ошибка.
                    |<br />Код возврата: %1.'
                    |;uk='<body>При встаноленні нової версії платформи сталася помилка.
                    |<br />Код повернення: %1.'");
			
			Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПротокола) Тогда
				ШаблонСообщенияПользователю = ШаблонСообщенияПользователю + Символы.ПС
					+ НСтр("ru='<br />Техническая информация содержится в <a href=""open:debuglog"">протоколе установки</a>.';uk='<br />Технічна інформація міститься в <a href=""open:debuglog"">протоколі установки</a>.'");
			КонецЕсли;
			
			Если Параметры.РежимУстановки = 0
				И ПолучениеОбновленийПрограммыКлиентСервер.ЭтоКодВозвратаПриОграниченииСистемныхПолитик(КодВозврата) Тогда
				// При ошибке ограничений системных политик установки в тихом режиме
				// предложить пользователю выполнить установку в полном интерактивном режиме.
				ШаблонСообщенияПользователю = ШаблонСообщенияПользователю + Символы.ПС
					+ НСтр("ru='<br /><br /><p>Данная ошибка связана с ограничениями системных политик безопасности.
                        |<br />Рекомендуется установить платформу с ручными настройками.</p>'
                        |;uk='<br /><br /><p>Ця помилка пов''язана з обмеженнями системних політик безпеки.
                        |<br />Рекомендується встановити платформу з ручними налаштуваннями.</p>'");
			КонецЕсли;
			
			ШаблонСообщенияПользователю = ШаблонСообщенияПользователю + Символы.ПС
				+ НСтр("ru='<br /><br />При возникновении проблем напишите в <a href=""mailto:webits-info@bas-soft.eu"">техподдержку</a>.</body>';uk='<br /><br />При виникненні проблем напишіть у <a href=""mailto:webits-info@bas-soft.eu"">техпідтримку</a>.</body>'");
			
			СообщитьСостояние(
				"Ошибка",
				ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьДомен(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияПользователю,
						Строка(КодВозврата))),
				Новый Структура(
					"ПротоколУстановки, КодВозврата",
					ПутьФайлаПротокола,
					КодВозврата),
				СообщениеЖурнала);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	КаталогУстановкиПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(
		Параметры.Версия);
	
	СообщитьСостояние(
		"Завершено",
		,
		Новый Структура("КаталогУстановки, КаталогДистрибутива", КаталогУстановкиПлатформы, КаталогДистрибутива));
	
КонецПроцедуры

Процедура СообщитьСостояние(
	КодСостояния,
	Сообщение = "",
	ДопПараметры = Неопределено,
	СообщениеЖурналаРегистрации = Неопределено)
	
	ОписательСостояния = Новый Структура("КодСостояния, ДопПараметры", КодСостояния, ДопПараметры);
	Если СообщениеЖурналаРегистрации <> Неопределено Тогда
		ОписательСостояния.Вставить("СообщениеЖурналаРегистрации", СообщениеЖурналаРегистрации);
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(
		,
		Сообщение,
		ОписательСостояния);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Персональные настройки пользователя

Функция НастройкиАвтоматическогоОбновления() Экспорт
	
	Результат = ПолучениеОбновленийПрограммыКлиентСервер.НовыйНастройкиАвтоматическогоОбновления();
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеррнетПоддержка",
		"ПолучениеОбновленийПрограммы");
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеНастройки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьНастройкиАвтоматическогоОбновления(Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтеррнетПоддержка",
		"ПолучениеОбновленийПрограммы",
		Настройки);
	
КонецПроцедуры

Функция КаталогСохраненияПоследнегоПолученногоДистрибутива() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ИнтеррнетПоддержка",
			"КаталогДистрибутива");
	
КонецФункции

Процедура СохранитьКаталогПоследнегоПолученногоДистрибутиваПлатформы(Каталог)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтеррнетПоддержка",
		"КаталогДистрибутива",
		Каталог);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Сообщение);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru='Получение обновлений программы';uk='Отримання оновлень програми'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяТипПлатформы() Экспорт
	
	СистИнфо = Новый СистемнаяИнформация;
	Если СистИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
		Возврат "MacOS_x86";
	ИначеЕсли СистИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		Возврат "MacOS_x86_64";
	ИначеЕсли СистИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВерсияОС() Экспорт
	
	СистИнфо = Новый СистемнаяИнформация;
	Возврат СистИнфо.ВерсияОС;
	
КонецФункции

#КонецОбласти

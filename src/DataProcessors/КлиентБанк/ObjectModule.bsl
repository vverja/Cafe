#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Выгрузка

// Заполняет табл. часть "Банковские счета" настройками счетов для выгрузки платежей
//
Процедура ЗаполнитьТаблицуСчетовВыгрузки() Экспорт
	
	ТаблицаСчетов = Обработки.КлиентБанк.ТаблицаСчетов();
	
	БанковскиеСчета.Загрузить(ТаблицаСчетов);
	
КонецПроцедуры

// Выполняет выгрузку платежей в файл по всем выбранным счетам
//
// Параметры
//    ИдФормы - УникальныйИдентификатор - идентификатор вызывающей метод формы
//
Процедура ВыгрузитьПлатежи(ИдФормы = "") Экспорт
	
	Отбор = Новый Структура("Пометка", Истина);
	ВыгружаемыеБанковскиеСчета = БанковскиеСчета.Выгрузить(БанковскиеСчета.НайтиСтроки(Отбор));
	ИнформацияОбОбъединенииФайлов = ИнформацияОбОбъединенииФайлов(ВыгружаемыеБанковскиеСчета);
	
	Если ИнформацияОбОбъединенииФайлов.СчетаБезПравил.Количество() <> 0 Тогда
		// Типовой алгоритм выгрузки по счетам
		Для каждого Счет из ИнформацияОбОбъединенииФайлов.СчетаБезПравил Цикл
		    Если Не Счет.Пометка Или Не ЗначениеЗаполнено(Счет.НастройкаОбмена) Или Счет.Выгружается Тогда
				Продолжить;
			КонецЕсли;
			
			ВыгрузитьПлатежиПоСчету(Счет, ИдФормы);
			
		КонецЦикла;
	КонецЕсли;
	
	Если ИнформацияОбОбъединенииФайлов.КоличествоСчетовВПравиле.Количество() <> 0 Тогда
		// Выгрузка порциями, с объединением по правилам
		ВыгрузитьПлатежиПорциямиПоПравилам(ИнформацияОбОбъединенииФайлов, ИдФормы);
	КонецЕсли;
	
	ОбновитьИнформациюОВыгруженныхФайлах(ИнформацияОбОбъединенииФайлов);
	
КонецПроцедуры

// Выполняет выгрузку платежей в файл порциями по правилам
//
// Параметры
//    ИнформацияОбОбъединенииФайлов - Структура - информация для выгрузки платежек потоками
//    ИдФормы - УникальныйИдентификатор - идентификатор вызывающей метод формы
//
Процедура ВыгрузитьПлатежиПорциямиПоПравилам(ИнформацияОбОбъединенииФайлов, ИдФормы = "") Экспорт
	
	ПотокиВыгрузки = ИнформацияОбОбъединенииФайлов.ПотокиВыгрузки;
	КоличествоСчетовВПравиле = ИнформацияОбОбъединенииФайлов.КоличествоСчетовВПравиле;
	
	Для Каждого ПотокВыгрузки Из ПотокиВыгрузки Цикл
		СтрокиКВыгрузке = ДокументыКВыгрузкеПоСчетам(ПотокВыгрузки.Счета);
		Если СтрокиКВыгрузке.Количество() Тогда
			ПараметрыВыгрузки = Новый Структура;
			ПараметрыВыгрузки.Вставить("БанковскийСчет",     ПотокВыгрузки.Счета);
			ПараметрыВыгрузки.Вставить("НастройкаОбмена",    ПотокВыгрузки.Правило);
			ПараметрыВыгрузки.Вставить("Кодировка",          ПотокВыгрузки.Счета[0].Кодировка);
			ПараметрыВыгрузки.Вставить("Организация",        ПотокВыгрузки.Счета[0].Организация);	
			ПараметрыВыгрузки.Вставить("КодВалюты",		     ПотокВыгрузки.Счета[0].Ссылка.ВалютаДенежныхСредств.Код);
			
			ТаблицаДокументов = ДокументыКВыгрузке.Выгрузить(СтрокиКВыгрузке);
			ПараметрыВыгрузки.Вставить("ТаблицаДокументов", ТаблицаДокументов);
			
			ИзменитьРеквизитыСчетовПотока(ПотокВыгрузки.Счета, 
				Новый Структура("Выгружен, АдресХранилищаДокументов", Ложь, ПоместитьВоВременноеХранилище(ТаблицаДокументов, ИдФормы)));
				
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				ИдФормы,
				"Обработки.КлиентБанк.Выгрузить",
				ПараметрыВыгрузки,
				НСтр("ru='Выгрузка платежей в банк';uk='Вивантаження платежів в банк'")
			);
			
			ИзменитьРеквизитыСчетовПотока(ПотокВыгрузки.Счета, 
				Новый Структура("АдресХранилищаФайла", Результат.АдресХранилища));
			
			Если Результат.ЗаданиеВыполнено Тогда
				ИзменитьРеквизитыСчетовПотока(ПотокВыгрузки.Счета, 
					Новый Структура("СохранитьФайл", Истина));
			Иначе
				ИзменитьРеквизитыСчетовПотока(ПотокВыгрузки.Счета, 
					Новый Структура("Выгружается, ИдентификаторВыгрузки", Истина, Результат.ИдентификаторЗадания));
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет выгрузку платежей в файл по указанному счету
//
// Параметры
//    Счет - Строка табличной части - Строка списка банковских счетов
//    ИдФормы - УникальныйИдентификатор - идентификатор вызывающей метод формы
//
Процедура ВыгрузитьПлатежиПоСчету(Счет, ИдФормы = "") Экспорт
	
	Счет.Выгружен = Ложь;
	
	СтрокиКВыгрузке = ДокументыКВыгрузкеПоСчету(Счет);
	Если СтрокиКВыгрузке.Количество() Тогда
		ПараметрыВыгрузки = Новый Структура;
		ПараметрыВыгрузки.Вставить("БанковскийСчет",     Счет.Ссылка);
		ПараметрыВыгрузки.Вставить("Организация",        Счет.Организация);	
		ПараметрыВыгрузки.Вставить("КодВалюты",		     Счет.Ссылка.ВалютаДенежныхСредств.Код);
		ПараметрыВыгрузки.Вставить("НастройкаОбмена",    Счет.НастройкаОбмена);
		ПараметрыВыгрузки.Вставить("Кодировка",          Счет.Кодировка);
		
		ТаблицаДокументов = ДокументыКВыгрузке.Выгрузить(СтрокиКВыгрузке);
		ПараметрыВыгрузки.Вставить("ТаблицаДокументов", ТаблицаДокументов);
		
		Счет.АдресХранилищаДокументов = ПоместитьВоВременноеХранилище(ТаблицаДокументов, ИдФормы);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			ИдФормы,
			"Обработки.КлиентБанк.Выгрузить",
			ПараметрыВыгрузки,
			НСтр("ru='Выгрузка платежей в банк';uk='Вивантаження платежів в банк'")
		);
		
		Счет.АдресХранилищаФайла = Результат.АдресХранилища;
		
		Если Результат.ЗаданиеВыполнено Тогда
			Счет.СохранитьФайл = Истина;
		Иначе
			Счет.Выгружается = Истина;
			Счет.ИдентификаторВыгрузки = Результат.ИдентификаторЗадания;
		КонецЕсли;
	

	КонецЕсли;
	
		
	//-- НЕ УТ
	 
КонецПроцедуры

// Формирует Табличный документ с отчетом о выгруженных платежах
//
// Параметры
//    ПрямойОбмен - Булево - Признак печати отчета для выгрузки через прямой обмен
//
// Возвращаемое значение
//    ТабличныйДокумент - отчет о выгрузке
//
Функция ПечатьОтчетаОВыгрузке(ПрямойОбмен = Ложь) Экспорт
	
	ПолеОтчета = Неопределено;
	
	Для каждого Счет из БанковскиеСчета Цикл
		Если Счет.Выгружен Тогда
			Если ПолеОтчета = Неопределено Тогда
				ПолеОтчета = Новый ТабличныйДокумент;
				ПолеОтчета.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			КонецЕсли;
			Если ЭтоАдресВременногоХранилища(Счет.АдресХранилищаДокументов) Тогда
				ВыгруженныеДокументы = ПолучитьИзВременногоХранилища(Счет.АдресХранилищаДокументов);
				Если ВыгруженныеДокументы <> Неопределено Тогда
					ОтборПоСчету = Новый Структура("БанковскийСчет", Счет.Ссылка);
					ДокументыПоСчету = ВыгруженныеДокументы.Скопировать(ОтборПоСчету);
					
					ВывестиСекциюОтчетаОВыгрузке(ПолеОтчета, ДокументыПоСчету, Счет.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолеОтчета;
	
КонецФункции

// Записывает дату выгрузки в выгруженные документы, сведения о последней выгрузке по банковскому счету
//
Процедура ЗаписатьДатуВыгрузкиПлатежей() Экспорт
	
	Для каждого Счет из БанковскиеСчета Цикл
		
		Если Счет.Выгружен Тогда
			Если ЭтоАдресВременногоХранилища(Счет.АдресХранилищаДокументов) Тогда
				ВыгруженныеДокументы = ПолучитьИзВременногоХранилища(Счет.АдресХранилищаДокументов);
				Если ТипЗнч(ВыгруженныеДокументы) = Тип("ТаблицаЗначений") Тогда
			
					Для каждого ВыгруженныйДокумент Из ВыгруженныеДокументы Цикл
						ДокументОбъект = ВыгруженныйДокумент.Ссылка.ПолучитьОбъект();
						ДокументОбъект.ДатаВыгрузки = ТекущаяДата();
						ДокументОбъект.Записать();
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			РегистрыСведений.ПоследнийОбменСБанками.СоздатьЗапись(Счет.Ссылка, Новый Структура("ДатаВыгрузки", ТекущаяДата()));
			Счет.ДатаПоследнейВыгрузки = ТекущаяДата();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табл. часть "Документы к выгрузке" платежными поручениями и требованиями
//
Процедура ЗаполнитьТаблицуПлатежей() Экспорт
	
	ДокументыКВыгрузке.Загрузить(
		Обработки.КлиентБанк.ТаблицаДокументовКВыгрузке(СписокСчетов, ДатаНачалаВыгрузки, ДатаКонцаВыгрузки, ТолькоНеВыгруженные));
	ДокументыКВыгрузке.Сортировать("Дата");
	
	ПроверитьДокументыКВыгрузке();
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка

// Заполняет табл. часть "Банковские счета" настройками счетов для загрузки платежей
//
Процедура ЗаполнитьТаблицуСчетовЗагрузки() Экспорт
	
	ТаблицаСчетов = Обработки.КлиентБанк.ТаблицаСчетов(Истина);
	
	Для каждого Счет из ТаблицаСчетов Цикл
		Счет.ПоследняяВыписка = Формат(Счет.ДатаНачалаПоследнейЗагрузки, "ДЛФ=Д")
			+ " - "
			+ Формат(Счет.ДатаКонцаПоследнейЗагрузки, "ДЛФ=Д");
	КонецЦикла;
	
	
	БанковскиеСчета.Загрузить(ТаблицаСчетов);
	
КонецПроцедуры

// Выполняет загрузку платежей из файлов по всем выбранным счетам
//
// Параметры
//    ИдФормы - УникальныйИдентификатор - идентификатор вызывающей метод формы
//
Процедура ЗагрузитьПлатежи(ИдФормы = "") Экспорт
	
	Для каждого Счет из БанковскиеСчета Цикл
		
		Если Не Счет.Пометка Или Не ЗначениеЗаполнено(Счет.НастройкаОбмена) Или Счет.Загружается
			Или Не ЭтоАдресВременногоХранилища(Счет.АдресХранилищаФайла) Тогда
			Продолжить;
		КонецЕсли;
				
		ЗагрузитьПлатежиПоСчету(Счет, ИдФормы);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет загрузку платежей из файлов по указанному счету
//
// Параметры
//    Счет - Строка табличной части - Строка списка банковских счетов
//    ИдФормы - УникальныйИдентификатор - идентификатор вызывающей метод формы
//
Процедура ЗагрузитьПлатежиПоСчету(Счет, ИдФормы = "") Экспорт
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("БанковскийСчет",        Счет.Ссылка);
	ПараметрыЗагрузки.Вставить("ПрямойОбмен",           Ложь);
	ПараметрыЗагрузки.Вставить("ДатаНачалаЗагрузки",    Счет.ДатаНачалаЗагрузки);
	ПараметрыЗагрузки.Вставить("ДатаКонцаЗагрузки",     Счет.ДатаКонцаЗагрузки);

	ПараметрыЗагрузки.Вставить("СтрокиВыписки",         ПолучитьИзВременногоХранилища(Счет.АдресХранилищаФайла));
	ПараметрыЗагрузки.Вставить("ДокументыКЗагрузке",    ДокументыКЗагрузке.ВыгрузитьКолонки());
	
	ПараметрыЗагрузки.Вставить("СоздаватьКонтрагентов", СоздаватьКонтрагентов);
	ПараметрыЗагрузки.Вставить("ПроводитьДокументы",    ПроводитьДокументы);
	
	Счет.Загружен = Ложь;
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ИдФормы,
		"Обработки.КлиентБанк.Загрузить",
		ПараметрыЗагрузки,
		НСтр("ru='Загрузка выписки банка';uk='Завантаження виписки банку'")
		);
		
	Счет.АдресХранилищаДокументов = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Счет.СохранитьФайл = Истина;
		Счет.Пометка = Ложь;
	Иначе
		Счет.Загружается = Истина;
		Счет.ИдентификаторЗагрузки = Результат.ИдентификаторЗадания;
	КонецЕсли;
	
КонецПроцедуры

// Формирует Табличный документ с отчетом о загруженных платежах
//
// Возвращаемое значение
//    ТабличныйДокумент - отчет о загрузке
//
Функция ПечатьОтчетаОЗагрузке() Экспорт
	
	ПолеОтчета = Неопределено;
	
	Для каждого Счет из БанковскиеСчета Цикл
		Если Счет.Загружен Тогда
			Если ЭтоАдресВременногоХранилища(Счет.АдресХранилищаДокументов) Тогда
				ЗагруженныеДокументы = ПолучитьИзВременногоХранилища(Счет.АдресХранилищаДокументов);
				Если ЗагруженныеДокументы <> Неопределено
					И ТипЗнч(ЗагруженныеДокументы) = Тип("ТаблицаЗначений")
					И ЗагруженныеДокументы.Количество() Тогда
					
					Если ПолеОтчета = Неопределено Тогда
						ПолеОтчета = Новый ТабличныйДокумент;
						ПолеОтчета.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
					КонецЕсли;
					
					ВывестиСекциюОтчетаОЗагрузке(ПолеОтчета, ЗагруженныеДокументы, Счет.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолеОтчета;
	
КонецФункции

// Записывает период последней загруженной выписки
//
Процедура ЗаписатьПериодПоследнейВыписки() Экспорт
	
	Для каждого Счет из БанковскиеСчета Цикл
		Если Счет.Загружен Тогда
			
			РегистрыСведений.ПоследнийОбменСБанками.СоздатьЗапись(
				Счет.Ссылка,
				Новый Структура("ДатаНачалаЗагрузки, ДатаКонцаЗагрузки", Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки));
			
			Счет.ПоследняяВыписка = Формат(Счет.ДатаНачалаЗагрузки, "ДЛФ=Д")
				+ " - "
				+ Формат(Счет.ДатаКонцаЗагрузки, "ДЛФ=Д");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает данные об остатках на банковских счетах по данным загруженных выписок
//
Процедура ЗаписатьОстаткиНаСчетахПоДаннымВыписки() Экспорт
	
	Для каждого Счет из БанковскиеСчета Цикл
		Если Счет.Загружен И ЭтоАдресВременногоХранилища(Счет.АдресХранилищаФайла) Тогда
			
			СтрокиВыписки = ПолучитьИзВременногоХранилища(Счет.АдресХранилищаФайла);
			ДанныеВыписки = Обработки.КлиентБанк.РазобратьФайлВыписки(СтрокиВыписки, Ложь);
			 
			
			
			Если ДанныеВыписки <> Неопределено Тогда
				РасчетныеСчета = ДанныеВыписки.РасчетныеСчета;
				Для каждого РасчетныйСчет из РасчетныеСчета Цикл
					Если СокрЛП(Счет.НомерСчета) = СокрЛП(РасчетныйСчет.РасчСчетОрг) Тогда
						
						ПараметрыЗаписи = Новый Структура;
						
						НачальныйОстаток = Обработки.КлиентБанк.ПреобразоватьВЧисло(РасчетныйСчет.НачальныйОстаток);
						КонечныйОстаток = Обработки.КлиентБанк.ПреобразоватьВЧисло(РасчетныйСчет.КонечныйОстаток);
						Поступление = Обработки.КлиентБанк.ПреобразоватьВЧисло(РасчетныйСчет.ВсегоПоступило);
						Списание = Обработки.КлиентБанк.ПреобразоватьВЧисло(РасчетныйСчет.ВсегоСписано);
						
						ДатаНачала = Обработки.КлиентБанк.ПолучитьДатуИзСтроки(РасчетныйСчет.ДатаНачала);
						ДатаКонца = Обработки.КлиентБанк.ПолучитьДатуИзСтроки(РасчетныйСчет.ДатаКонца);
						
						Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаКонца)
							И НачалоДня(ДатаНачала) = НачалоДня(ДатаКонца) Тогда
							
							ПараметрыЗаписи.Вставить("НачальныйОстаток", НачальныйОстаток);
							ПараметрыЗаписи.Вставить("Поступление", Поступление);
							ПараметрыЗаписи.Вставить("Списание", Списание);
							ПараметрыЗаписи.Вставить("КонечныйОстаток", КонечныйОстаток);
							
							РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
								ДатаНачала,
								Счет.Ссылка,
								ПараметрыЗаписи);
							
						Иначе
							Если ЗначениеЗаполнено(ДатаНачала) Тогда
								
								ПараметрыЗаписи.Вставить("НачальныйОстаток", НачальныйОстаток);
								
								РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
									ДатаНачала,
									Счет.Ссылка,
									ПараметрыЗаписи);
								
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ДатаКонца) Тогда
								
								ПараметрыЗаписи.Вставить("КонечныйОстаток", КонечныйОстаток);
								
								РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
									ДатаКонца,
									Счет.Ссылка,
									ПараметрыЗаписи);
								
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции




























 


#Область ВыгрузкаПорциямиПоПравиламОбъединения

Функция ИнформацияОбОбъединенииФайлов(ВыгружаемыеБанковскиеСчета)
	НовыйПоток = Новый Структура("Правило, Счета");
		
	КоличествоСчетовВПравиле = Новый Соответствие;
	ПотокиВыгрузки = Новый Массив;
	СчетаБезПравил = Новый Массив;
	
	ИнформацияОбОбъединенииФайлов = Новый Структура("
		|ТекущееПравило,
		|АдресТекущегоПотокаВыгрузки, 
		|ВсегоСчетовВТекущемПотоке, 
		|ВыгруженоСчетовВТекущийПоток,
		|КоличествоСчетовВПравиле,
		|СчетаБезПравил,
		|ПотокиВыгрузки", 
		"",,
		0,0,
		КоличествоСчетовВПравиле,
		СчетаБезПравил,
		ПотокиВыгрузки);
		
	Для Каждого Счет Из ВыгружаемыеБанковскиеСчета Цикл
		Если ПустаяСтрока(Счет.ПравилоФайловогоОбменаСБанками) Тогда
			СчетаБезПравил.Добавить(Счет);
		Иначе
			Количество = КоличествоСчетовВПравиле.Получить(Счет.ПравилоФайловогоОбменаСБанками);
			Если Количество = Неопределено Тогда
				ИнформацияОбОбъединенииФайлов["КоличествоСчетовВПравиле"].Вставить(Счет.ПравилоФайловогоОбменаСБанками, 1);
			Иначе
				ИнформацияОбОбъединенииФайлов["КоличествоСчетовВПравиле"].Вставить(Счет.ПравилоФайловогоОбменаСБанками, Количество + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Правило Из КоличествоСчетовВПравиле Цикл 
		ПравилоПотока = Правило.Ключ;
		
		ТекущийПоток = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НовыйПоток);
		ТекущийПоток.Вставить("Правило", Правило.Ключ);
		ТекущийПоток.Вставить("Счета", ВыгружаемыеБанковскиеСчета.Скопировать(ВыгружаемыеБанковскиеСчета.НайтиСтроки(Новый Структура("ПравилоФайловогоОбменаСБанками", Правило.Ключ))));
		
		ИнформацияОбОбъединенииФайлов["ПотокиВыгрузки"].Добавить(ТекущийПоток);
	КонецЦикла;
	
	Возврат ИнформацияОбОбъединенииФайлов;
КонецФункции

Процедура ИзменитьРеквизитыСчетовПотока(Счета, ИзменяемыеПараметры)
	Для Каждого Счет Из Счета Цикл
		ЗаполнитьЗначенияСвойств(Счет, ИзменяемыеПараметры);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьИнформациюОВыгруженныхФайлах(Знач ИнформацияОбОбъединенииФайлов)
	
	Для Каждого ПотокВыгрузки Из ИнформацияОбОбъединенииФайлов.ПотокиВыгрузки Цикл 
		Для Каждого ВыгруженныйСчет Из ПотокВыгрузки.Счета Цикл 
			Отбор = Новый Структура("Ссылка", ВыгруженныйСчет.Ссылка);
			НайденныеСтроки = БанковскиеСчета.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, ВыгруженныйСчет);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

 

Процедура ПроверитьДокументыКВыгрузке()
	
	// Основные реквизиты
	Проверки = Новый Соответствие;
	Проверки.Вставить("Номер",   НСтр("ru='Номер документа';uk='Номер документа'"));
	Проверки.Вставить("Дата",    НСтр("ru='Дата документа';uk='Дата документа'"));
	Проверки.Вставить("Сумма",   НСтр("ru='Сумма документа';uk='Сума документа'"));
	
	// Реквизиты организации
	
	ПроверкаСчетаОрганизации = Новый Соответствие;
	ПроверкаСчетаОрганизации.Вставить("ОрганизацияСчет",    НСтр("ru='Банковский счет организации';uk='Банківський рахунок організації'"));
	ПроверкаСчетаОрганизации.Вставить("ОрганизацияНаим",    НСтр("ru='Наименование организации';uk='Найменування організації'"));		
	ПроверкаСчетаОрганизации.Вставить("ОрганизацияОКПО",    НСтр("ru='ОКПО организации';uk='ОКПО організації'"));		
	
		
	// Реквизиты контрагента
	ПроверкаСчетаКонтрагента = Новый Соответствие;
	ПроверкаСчетаКонтрагента.Вставить("КонтрагентСчет",  НСтр("ru='Банковский счет контрагента';uk='Банківський рахунок контрагента'"));
	ПроверкаСчетаКонтрагента.Вставить("КонтрагентНаим",  НСтр("ru='Контрагент';uk='Контрагент'"));
	ПроверкаСчетаКонтрагента.Вставить("КонтрагентОКПО",  НСтр("ru='ОКПО контрагента';uk='ОКПО контрагента'"));
	
	 
		
	Для каждого ДокументКВыгрузке из ДокументыКВыгрузке Цикл
		
		СтрокаОшибки = "";
		Для каждого Проверка из Проверки Цикл
			Если Не ЗначениеЗаполнено(ДокументКВыгрузке[Проверка.Ключ]) Тогда
				СтрокаОшибки = СтрокаОшибки + " " + Проверка.Значение + ",";
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Проверка из ПроверкаСчетаОрганизации Цикл
			Если Не ЗначениеЗаполнено(ДокументКВыгрузке[Проверка.Ключ]) Тогда
				СтрокаОшибки = СтрокаОшибки + " " + Проверка.Значение + ",";
			КонецЕсли;
		КонецЦикла;
		
		 
		Для каждого Проверка из ПроверкаСчетаКонтрагента Цикл
			Если Не ЗначениеЗаполнено(ДокументКВыгрузке[Проверка.Ключ]) Тогда
				СтрокаОшибки = СтрокаОшибки + " " + Проверка.Значение + ",";
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			СтрокаОшибки = Лев(СтрокаОшибки, СтрДлина(СтрокаОшибки) - 1);
			ДокументКВыгрузке.ЕстьОшибка = Истина;
			ДокументКВыгрузке.Выгружать = Ложь;
			ДокументКВыгрузке.ОписаниеОшибок = НСтр("ru='Не заполнены реквизиты платежа:';uk='Не заповнені реквізити платежу:'") + СтрокаОшибки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументыКВыгрузкеПоСчетам(Счета)
	ДокументыКВыгрузкеПоСчетам = Новый Массив;
	
	Для Каждого Счет Из Счета Цикл 
		Отбор = Новый Структура;
		Отбор.Вставить("Выгружать", Истина);
		Отбор.Вставить("БанковскийСчет", Счет.Ссылка);
		
		НайденыеДокументы = ДокументыКВыгрузке.НайтиСтроки(Отбор);
		
		Для Каждого НайденныйДокумент Из НайденыеДокументы Цикл 
			ДокументыКВыгрузкеПоСчетам.Добавить(НайденныйДокумент);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДокументыКВыгрузкеПоСчетам;
КонецФункции

Функция ДокументыКВыгрузкеПоСчету(Счет)
	Отбор = Новый Структура;
	Отбор.Вставить("Выгружать", Истина);
	Отбор.Вставить("БанковскийСчет", Счет.Ссылка);
	
	Возврат ДокументыКВыгрузке.НайтиСтроки(Отбор);
КонецФункции

Процедура ВывестиСекциюОтчетаОВыгрузке(ПолеОтчета, Документы, БанковскийСчет)
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгрузке");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	
	НазвОрг.Параметры.НазваниеОрганизации = Строка(РеквизитыСчета.Организация);
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета = НСтр("ru='Отчет о выгруженных документах';uk='Звіт про вивантажені документи'");
	Шапка.Параметры.ИмяСуммыПоступления = "Поступление";
	Шапка.Параметры.ИмяСуммыСписания    = "Списание";
	
	ОбрБанковскийСчет = "";
	Индекс = 0; ИтогоСуммаП = 0; ИтогоСуммаР = 0;
	
	Документы.Сортировать("Дата");
	НачПериода = Документы[0].Дата;
	КонПериода = Документы[Документы.Количество() - 1].Дата;
	
	Валюта = ?(ЗначениеЗаполнено(РеквизитыСчета.Валюта), СокрЛП(Строка(РеквизитыСчета.Валюта)), НСтр("ru='валюта не указана';uk='валюта не вказана'"));
	НачалоОтчетногоПериода = Формат(НачПериода, "ДЛФ=D");
	КонецОтчетногоПериода = Формат(КонПериода, "ДЛФ=D");
	
	Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по счету %1 (%2) с %3 по %4';uk='по рахунку %1 (%2) з %3 по %4'"),
		РеквизитыСчета.НомерСчета,
		Валюта,
		НачалоОтчетногоПериода,
		КонецОтчетногоПериода);
	ПолеОтчета.Вывести(Шапка);
	
	Для Каждого СтрокаИсточника Из Документы Цикл
		
		Валюта = ?(ЗначениеЗаполнено(СтрокаИсточника.Валюта), СокрЛП(Строка(СтрокаИсточника.Валюта)), НСтр("ru='валюта не указана';uk='валюта не вказана'"));
		
		Если СтрокаИсточника.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
			
			Строка.Параметры.Получатель = СтрокаИсточника.ОрганизацияНаим;
			Строка.Параметры.ПолучательСчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)';uk='%1 (%2)'"),
				СтрокаИсточника.ОрганизацияРасчСчет,
				Валюта);
			
			Строка.Параметры.Плательщик = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПлательщикСчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)';uk='%1 (%2)'"),
				СтрокаИсточника.КонтрагентРасчСчет,
				Валюта);
				
			Строка.Параметры.СуммаПоступление  = СтрокаИсточника.Сумма;
			Строка.Параметры.СуммаСписание = "";
			ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.Сумма;
		Иначе
			
			Строка.Параметры.Плательщик = СтрокаИсточника.ОрганизацияНаим;
			Строка.Параметры.ПлательщикСчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)';uk='%1 (%2)'"),
				СтрокаИсточника.ОрганизацияРасчСчет,
				Валюта);
			
			Строка.Параметры.Получатель = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПолучательСчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)';uk='%1 (%2)'"),
				СтрокаИсточника.КонтрагентРасчСчет,
				Валюта);
				
			Строка.Параметры.СуммаПоступление = "";
			Строка.Параметры.СуммаСписание = СтрокаИсточника.Сумма;
			ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.Сумма;
		КонецЕсли;
		
		Строка.Параметры.Документ = СтрокаИсточника.Ссылка;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

Процедура ВывестиСекциюОтчетаОЗагрузке(ПолеОтчета, Документы, БанковскийСчет)
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагрузке");
	
	ИмеетсяСекцияРасчСчет = Ложь;
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки = МакетОтчета.ПолучитьОбласть("Остатки");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	
	НазвОрг.Параметры.НазваниеОрганизации = Строка(РеквизитыСчета.Организация);
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета = НСтр("ru='Отчет о загруженных документах';uk='Звіт про завантажені документи'");

	ОбрБанковскийСчет = "";
	Индекс = 0; ИтогоСуммаП = 0; ИтогоСуммаР = 0;
	
	Документы.Сортировать("Дата");
	НачПериода = Документы[0].ДатаДок;
	КонПериода = Документы[Документы.Количество() - 1].ДатаДок;
	
	Валюта = ?(ЗначениеЗаполнено(РеквизитыСчета.Валюта), СокрЛП(Строка(РеквизитыСчета.Валюта)), НСтр("ru='валюта не указана';uk='валюта не вказана'"));
	НачалоОтчетногоПериода = Формат(НачПериода, "ДЛФ=D");
	КонецОтчетногоПериода = Формат(КонПериода, "ДЛФ=D");
	
	Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по счету %1 (%2) с %3 по %4';uk='по рахунку %1 (%2) з %3 по %4'"),
		РеквизитыСчета.НомерСчета,
		Валюта,
		НачалоОтчетногоПериода,
		КонецОтчетногоПериода);
	ПолеОтчета.Вывести(Шапка);
	
	Для Каждого СтрокаИсточника Из Документы Цикл
		
		Валюта = ?(ЗначениеЗаполнено(СтрокаИсточника.Валюта), СокрЛП(Строка(СтрокаИсточника.Валюта)), НСтр("ru='валюта не указана';uk='валюта не вказана'"));
		
		Если СтрокаИсточника.СуммаПоступило > 0 Тогда
			
			Строка.Параметры.Контрагент =
				?(ПустаяСтрока(СтрокаИсточника.Плательщик1), СтрокаИсточника.Плательщик, СтрокаИсточника.Плательщик1);
			Строка.Параметры.Счет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)';uk='%1 (%2)'"),
				СтрокаИсточника.ПлательщикСчет,
				Валюта);
				
			Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
			Строка.Параметры.СуммаСписание    = "";
			Строка.Параметры.Дата             = Формат(СтрокаИсточника.ДатаДок, "ДЛФ=Д");
			ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
			
		ИначеЕсли СтрокаИсточника.СуммаСписано > 0 Тогда

			Строка.Параметры.Контрагент =
				?(ПустаяСтрока(СтрокаИсточника.Получатель1), СтрокаИсточника.Получатель, СтрокаИсточника.Получатель1);
			Строка.Параметры.Счет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)';uk='%1 (%2)'"),
				СтрокаИсточника.ПолучательСчет,
				Валюта);
				
			Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
			Строка.Параметры.СуммаПоступление = "";
			Строка.Параметры.Дата             = ?(ПустаяСтрока(СтрокаИсточника.Дата), Формат(СтрокаИсточника.ДатаДок, "ДЛФ=Д"), СтрокаИсточника.Дата);
			ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;

		Иначе
			Продолжить;
		КонецЕсли;
		
		Док = СтрокаИсточника.Документ;
		Если ЗначениеЗаполнено(Док) Тогда
			Строка.Параметры.Документ     = Док;
			Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		Иначе
			Строка.Параметры.Документ     = НСтр("ru='НЕ ЗАГРУЖЕН';uk='НЕ ЗАВАНТАЖЕНИЙ'");
			Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
		
		Строка.Параметры.Номер             = СтрокаИсточника.Номер;
		Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
		
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
	
	ПолеОтчета.Вывести(Подвал);
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли

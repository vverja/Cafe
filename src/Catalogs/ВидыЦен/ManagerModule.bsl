#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Получает реквизиты объекта, которые необходимо блокировать от изменения
//
// Возвращаемое значение:
//	Массив - блокируемые реквизиты объекта
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ВалютаЦены");
	Результат.Добавить("ЦенаВключаетНДС");
	Результат.Добавить("ИспользоватьПриПродаже");
	Результат.Добавить("ИспользоватьПриПередачеМеждуОрганизациями");
	Результат.Добавить("СпособЗаданияЦены");
	Результат.Добавить("Идентификатор");
	Результат.Добавить("СхемаКомпоновкиДанных;РедактироватьСхемуКомпоновкиДанных,РедактироватьСхемуКомпоновкиДанных1,РедактироватьСхемуКомпоновкиДанных2");
	
	Результат.Добавить("ВариантОкругления; МетодОкругления,МетодОкругленияУпрощенно,ВыключитьРасширенныйРежим,ВключитьРасширенныйРежим");
	Результат.Добавить("ПорогСрабатывания");
	Результат.Добавить("Формула;КоманднаяПанельФормулаКонструкторФормул");
	
	Результат.Добавить("ЦеновыеГруппы;ФормулыКонструкторФормулТекущейСтроки");
	Результат.Добавить("ПорогиСрабатывания");
	Результат.Добавить("ПравилаОкругленияЦены;КоманднаяПанельПравилаОкругленияЦеныКонструкторОкругления,Пример,ИспользоватьРасширеннуюНастройкуОкругления,НеИспользоватьРасширеннуюНастройкуОкругления");
	Результат.Добавить("Формулы");
	Результат.Добавить("БазовыйВидЦены");
	Результат.Добавить("Наценка");
	
	Результат.Добавить("ТочностьОкругления");
	Результат.Добавить("Округлять");
	Результат.Добавить("УстанавливатьЦенуПриВводеНаОсновании");
	
	Возврат Результат;

КонецФункции

// Определяет вид цены по умолчанию
//
// Параметры:
//	Отборы -  Структура - Структура отборов, где Ключ - имя реквизита, Значение - значение реквизита
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыЦен - Найденный вид цен
//
Функция ВидЦеныПоУмолчанию(Знач ВидЦены, Отборы = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Возврат ВидЦены;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ВидыЦен.Ссылка КАК ВидЦены
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	Не ВидыЦен.ПометкаУдаления
	|");
	
	Если Отборы <> Неопределено Тогда
		Для каждого Отбор Из Отборы Цикл
			Запрос.Текст = Запрос.Текст + "
				|	И ВидыЦен." + Отбор.Ключ + " = &" + Отбор.Ключ;
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		ВидЦены = Выборка.ВидЦены;
	Иначе
		ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидЦены;

КонецФункции

// Определяет вид цены по умолчанию и признак включения цены ндс.
// Вид цены определяется только если он единственный в ИБ.
// Включение цены в ндс определяется по единственному виду цен, одинаковому значению во всех видах цен, либо по статистике документа
//
// Параметры:
//	Отборы -  Структура - Структура отборов, где Ключ - имя реквизита, Значение - значение реквизита
//	СсылкаДляСтатистики - ДокументСсылка - Ссылка на документ для определения по нему статистики
//
// Возвращаемое значение:
//	Структура - ВидЦены и признак ЦенаВключаетНДС
//
Функция ВидЦеныИПризнакЦенаВключаетНДСПоУмолчанию(Отборы = Неопределено, СсылкаДляСтатистики = Неопределено) Экспорт
	
	СтруктураРеквизитов = Новый Структура("ВидЦены, ЦенаВключаетНДС");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка КАК ВидЦены,
	|	ВидыЦен.ЦенаВключаетНДС
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	НЕ ВидыЦен.ПометкаУдаления
	|");
	
	Если Отборы <> Неопределено Тогда
		Для каждого Отбор Из Отборы Цикл
			Запрос.Текст = Запрос.Текст + "
				|	И ВидыЦен." + Отбор.Ключ + " = &" + Отбор.Ключ;
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	Иначе
		
		ЦенаВключаетНДС = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЦенаВключаетНДС = Неопределено Тогда
				ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
			ИначеЕсли ЦенаВключаетНДС <> Выборка.ЦенаВключаетНДС Тогда
				ЦенаВключаетНДС = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЦенаВключаетНДС = Неопределено И СсылкаДляСтатистики <> Неопределено Тогда
			РеквизитыДляОтбора   = Новый Структура;
			ЗаполняемыеРеквизиты = Новый Структура("ЦенаВключаетНДС");
			ЗаполнениеСвойствПоСтатистикеСервер.ПолучитьЗначенияСвойств(СсылкаДляСтатистики, ЗаполняемыеРеквизиты, РеквизитыДляОтбора);
			ЦенаВключаетНДС = ЗаполняемыеРеквизиты.ЦенаВключаетНДС;
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Определяет реквизиты выбранного вида цены.
//
// Параметры:
//	ВидыЦены - СправочникСсылка.ВидыЦены - ссылка на вид цены
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного вида цены
//
Функция ПолучитьРеквизитыВидаЦены(ВидЦены) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыЦен.ВалютаЦены КАК ВалютаЦены,
	|	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка = &ВидЦены
	|");
	
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВалютаЦены = Выборка.ВалютаЦены;
		ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
	Иначе
		ВалютаЦены = Справочники.Валюты.ПустаяСсылка();
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ВалютаЦены, ЦенаВключаетНДС",
		ВалютаЦены,
		ЦенаВключаетНДС);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Осуществляет формирование новой СКД
//
// Возвращаемое значение:
//	СхемаКомпоновкиДанных
//
Функция СформироватьНовуюСхемуКомпоновкиДанных() Экспорт
	
	СКД                         = Новый СхемаКомпоновкиДанных;
	Источник                    = СКД.ИсточникиДанных.Добавить();
	Источник.Имя                = "ИсточникДанныхЦеныНоменклатуры";
	Источник.ТипИсточникаДанных = "Local";
	НаборДанных                 = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя             = "ЦеныНоменклатуры";
	НаборДанных.Запрос          =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,";
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + "
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + "
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	1 КАК Коэффициент,";
	КонецЕсли;
	
	НаборДанных.Запрос = НаборДанных.Запрос + "
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта
		|{ВЫБРАТЬ
		|	Номенклатура.*,";
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + "
			|	Характеристика.*,";
		КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		НаборДанных.Запрос = НаборДанных.Запрос + "
		|	Упаковка.*,
		|	Коэффициент,";
	КонецЕсли;
	
	НаборДанных.Запрос = НаборДанных.Запрос + "
		|	Цена,
		|	Валюта.*}";
		
	НаборДанных.ИсточникДанных = "ИсточникДанныхЦеныНоменклатуры";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	
	ОбязательныеПоля = Ценообразование.ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
	
	Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
		
		НовоеПоле             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле        = ОбязательноеПоле.Ключ;
		НовоеПоле.ПутьКДанным = ОбязательноеПоле.Ключ;
		НовоеПоле.ТипЗначения = ОбязательноеПоле.Значение;
		
	КонецЦикла;
	
	Возврат СКД;

КонецФункции

// Возвращает структуру с синонимом и схемой компоновки
// данных по имени макета
//
// Параметры:
//	Ссылка - СправочникСсылка.ВидыЦены - ссылка на вид цены
//	ИмяМакета - Строка - имя макета, из которого необходимо получить описание и схему
//
// Возвращаемое значение:
//	Структура - описание и схема компоновки данных
//
Функция ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Ссылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	ВидыЦен.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			
			СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СформироватьНовуюСхемуКомпоновкиДанных();
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Неопределено;
			Иначе
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СхемаКомпоновкиДанных;
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.Описание = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Макеты.Найти(ИмяМакета).Синоним;
		ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.ВидыЦен.ПолучитьМакет(ИмяМакета);
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает массив видов цен, доступных пользователю
//
// Возвращаемое значение:
//	Массив - виды цен, разрешенные пользователю
//
Функция ДоступныеВидыЦен(Отборы = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка КАК ВидЦены
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ИСТИНА
	|");
	
	Если Отборы <> Неопределено Тогда
		Для каждого Отбор Из Отборы Цикл
			Запрос.Текст = Запрос.Текст + Символы.ПС + "	И ВидыЦен." + Отбор.Ключ + " = &" + Отбор.Ключ;
			Запрос.УстановитьПараметр(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВидЦены");
	
КонецФункции


#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Перем ЗначениеПараметра;
	
	Если Параметры.Свойство("ВыводитьПроизвольныйВидЦен", ЗначениеПараметра) И ЗначениеПараметра = Истина Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК ВидЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.ПометкаУдаления = ЛОЖЬ");
		
		// Если в параметрах передан отбор по реквизиту "ЦенаВключаетНДС"
		Если Параметры.Отбор.Свойство("ЦенаВключаетНДС") Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ВидыЦен.ЦенаВключаетНДС = &ЦенаВключаетНДС";
			Запрос.УстановитьПараметр("ЦенаВключаетНДС", Параметры.Отбор.ЦенаВключаетНДС);
		КонецЕсли;
		// Если в параметрах передан отбор по реквизиту "ИспользоватьПриПередачеМеждуОрганизациями"
		Если Параметры.Отбор.Свойство("ИспользоватьПриПередачеМеждуОрганизациями") Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ВидыЦен.ИспользоватьПриПередачеМеждуОрганизациями = &ИспользоватьПриПередачеМеждуОрганизациями";
			Запрос.УстановитьПараметр("ИспользоватьПриПередачеМеждуОрганизациями", Параметры.Отбор.ИспользоватьПриПередачеМеждуОрганизациями);
		КонецЕсли;
		// Если в параметрах передан отбор по реквизиту "ИспользоватьПриПродаже"
		Если Параметры.Отбор.Свойство("ИспользоватьПриПродаже") Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ВидыЦен.ИспользоватьПриПродаже = &ИспользоватьПриПродаже";
			Запрос.УстановитьПараметр("ИспользоватьПриПродаже", Параметры.Отбор.ИспользоватьПриПродаже);
		КонецЕсли;
		
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦен"));
		
		ДанныеВыбора.Добавить(Справочники.ВидыЦен.ПустаяСсылка(), НСтр("ru='<произвольная>';uk='<довільна>'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		
		Параметры.Вставить("Ключ", ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист());
		ВыбраннаяФорма = "ФормаЭлемента";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка,
	|	ВидыЦен.СхемаКомпоновкиДанных
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.СхемаКомпоновкиДанных) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения("");
			СправочникОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения("");
			
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// Обработчик обновления BAS УТ 3.2.2
// Заполняет поле "Вариант округления" в справочнике "Виды цен"
Процедура ЗаполнитьВариантОкругления() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.ВариантОкругления = &ВариантОкругления
	|";
	
	Запрос.УстановитьПараметр("ВариантОкругления", Перечисления.ВариантыОкругления.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Неопределено;
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.ОкруглятьВБольшуюСторону Тогда
			Объект.ВариантОкругления = Перечисления.ВариантыОкругления.ВсегдаВПользуПредприятия;
		Иначе
			Объект.ВариантОкругления = Перечисления.ВариантыОкругления.ПоАрифметическимПравилам;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли

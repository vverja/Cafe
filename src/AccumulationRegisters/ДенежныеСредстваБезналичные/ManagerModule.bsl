#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбновлениеИнформационнойБазы


Процедура ПеренестиБезналичныеДенежныеСредства_ДанныеДляОбновления(Параметры) Экспорт
    
	ПолноеИмяРегистра = "РегистрНакопления.ДенежныеСредстваБезналичные";
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ДенежныеСредства.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Регистратор ССЫЛКА Документ.УдалитьВыпискаПоРасчетномуСчету
	|	
	|	И (
	|	
	|		ТИПЗНАЧЕНИЯ(ДенежныеСредства.ПлатежныйДокумент) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|		И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		
	|		ИЛИ 
	|		
	|		ТИПЗНАЧЕНИЯ(ДенежныеСредства.ПлатежныйДокумент) = ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|		И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		
	|	)
	|
	|");
    
    
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );	
	
КонецПроцедуры

// Обработчик обновления УТ 3.2.1
// Переносит движения по регистру "Безналичные денежные средства" из выписки в документы поступления и списания
Процедура ПеренестиБезналичныеДенежныеСредства(Параметры) Экспорт
    
    ПолноеИмяРегистра  = "РегистрНакопления.ДенежныеСредстваБезналичные";
    ПолноеИмяДокумента = "Документ.УдалитьВыпискаПоРасчетномуСчету";
    
    
	ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
    
    
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		НачатьТранзакцию();
        
        Регистратор = ВыборкаПоРегистраторам.Ссылка;
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
            
			НаборЗаписейВыписка = РегистрыНакопления["ДенежныеСредстваБезналичные"].СоздатьНаборЗаписей();
			НаборЗаписейВыписка.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписейВыписка.Прочитать();
            
            ТаблицаДвиженийВыписка = НаборЗаписейВыписка.Выгрузить();
            
            ТаблицаБлокируемыхРегистраторов = Новый ТаблицаЗначений;
            ТаблицаБлокируемыхРегистраторов.Колонки.Добавить("Регистратор");
            
            СтрокаТаблицаБлокируемыхРегистраторов = ТаблицаБлокируемыхРегистраторов.Добавить();
            СтрокаТаблицаБлокируемыхРегистраторов.Регистратор = Регистратор;
            
			Для Каждого ДвижениеВыписка Из ТаблицаДвиженийВыписка Цикл
				
				Если НЕ (ДвижениеВыписка.ВидДвижения = ВидДвиженияНакопления.Приход
						И ТипЗнч(ДвижениеВыписка.ПлатежныйДокумент) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
					Или ДвижениеВыписка.ВидДвижения = ВидДвиженияНакопления.Расход
						И ТипЗнч(ДвижениеВыписка.ПлатежныйДокумент) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
					) Тогда // Не обрабатываем
                    
					Продолжить;
                    
                Иначе
                    
                    СтрокаТаблицаБлокируемыхРегистраторов = ТаблицаБлокируемыхРегистраторов.Добавить();
                    СтрокаТаблицаБлокируемыхРегистраторов.Регистратор = ДвижениеВыписка.ПлатежныйДокумент;
					
				КонецЕсли;
            
            КонецЦикла;   
            
            ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
            ЭлементБлокировки.ИсточникДанных = ТаблицаБлокируемыхРегистраторов;
            ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
            
            Блокировка.Заблокировать();
            
            МассивПеренесенныхДвижений = Новый Массив;
            
            КоличествоНеобрабатываемыхДвижений = 0;
            
			Для Каждого ДвижениеВыписка Из ТаблицаДвиженийВыписка Цикл
				
				Если НЕ (ДвижениеВыписка.ВидДвижения = ВидДвиженияНакопления.Приход
						И ТипЗнч(ДвижениеВыписка.ПлатежныйДокумент) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
					Или ДвижениеВыписка.ВидДвижения = ВидДвиженияНакопления.Расход
						И ТипЗнч(ДвижениеВыписка.ПлатежныйДокумент) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
					) Тогда // Не обрабатываем
                    
                    КоличествоНеобрабатываемыхДвижений = КоличествоНеобрабатываемыхДвижений + 1;
					
					Продолжить;
					
				КонецЕсли;
				
				МассивПеренесенныхДвижений.Добавить(ДвижениеВыписка);
                
				НаборЗаписейПлатежныйДокумент = РегистрыНакопления.ДенежныеСредстваБезналичные.СоздатьНаборЗаписей();
				НаборЗаписейПлатежныйДокумент.Отбор.Регистратор.Установить(ДвижениеВыписка.ПлатежныйДокумент);
				
				ЗаписьПлатежныйДокумент = НаборЗаписейПлатежныйДокумент.Добавить();
				
				ЗаполнитьЗначенияСвойств(ЗаписьПлатежныйДокумент, ДвижениеВыписка, , "Регистратор, НомерСтроки");
				ЗаписьПлатежныйДокумент.Регистратор = ДвижениеВыписка.ПлатежныйДокумент;
			
				НаборЗаписейПлатежныйДокумент.Записывать = Истина;
				НаборЗаписейПлатежныйДокумент.Записать(Ложь); 
				
            КонецЦикла;
			
			Для Каждого ПеренесенноеДвижение Из МассивПеренесенныхДвижений Цикл
				ТаблицаДвиженийВыписка.Удалить(ПеренесенноеДвижение);
			КонецЦикла;
			
			НаборЗаписейВыписка.Загрузить(ТаблицаДвиженийВыписка);
			НаборЗаписейВыписка.Записать();
            
            Если КоличествоНеобрабатываемыхДвижений = ТаблицаДвиженийВыписка.Количество() Тогда
                ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор);    
            КонецЕсли; 
			
			ЗафиксироватьТранзакцию();
            
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать движения документа %Документ% по регистру ""Денежные средства (безналичные)"". Причина: %Причина%';uk='Не вдалося обробити рухи документа %Документ% регістру ""Грошові кошти (безготівкові)"". Причина: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
                УровеньЖурналаРегистрации.Предупреждение,
				Регистратор.Метаданные(), 
                Регистратор, 
                ТекстСообщения
            );
			
		КонецПопытки;
    КонецЦикла;
    
    
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры

Процедура СоздатьПоступленияПоЭквайрингу_ДанныеДляОбновления(Параметры) Экспорт
    
	ПолноеИмяРегистра = "РегистрНакопления.ДенежныеСредстваБезналичные";
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ДенежныеСредства.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Регистратор ССЫЛКА Документ.УдалитьВыпискаПоРасчетномуСчету
	|	И (
	|		ТИПЗНАЧЕНИЯ(ДенежныеСредства.ПлатежныйДокумент) = ТИП(Документ.ОтчетБанкаПоОперациямЭквайринга)
	|		И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	)
	|
	|");
    
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );	
	
КонецПроцедуры

// Обработчик обновления УТ 3.2.1
// Создает документы поступления денежных средств по эквайрингу и переносит в них движения регистра "Безналичные денежные средства"
Процедура СоздатьПоступленияПоЭквайрингу(Параметры) Экспорт
    
    ПолноеИмяРегистра  = "РегистрНакопления.ДенежныеСредстваБезналичные";
    ПолноеИмяДокумента = "Документ.УдалитьВыпискаПоРасчетномуСчету";
    
    Запрос = Новый Запрос();
    Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ДенежныеСредства.Регистратор КАК Выписка,
	|	ДенежныеСредства.НомерСтроки КАК НомерСтроки,
	|	ДенежныеСредства.ПлатежныйДокумент КАК ОтчетБанка,
	|	ДенежныеСредства.БанковскийСчет КАК БанковскийСчет,
	|	ДенежныеСредства.ПлатежныйДокумент КАК ОтчетБанкаПоОперациямЭквайринга,
	|	ДенежныеСредства.ПлатежныйДокумент.Подразделение КАК Подразделение,
	|	ДенежныеСредства.ПлатежныйДокумент.Эквайер КАК Контрагент,
	|	ДенежныеСредства.ПлатежныйДокумент.Организация КАК Организация,
	|	ДенежныеСредства.ПлатежныйДокумент.Валюта КАК Валюта,
	|	ДенежныеСредства.Сумма КАК СуммаДокумента,
	|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Истина КАК Проведен,
	|	Истина КАК ПроведеноБанком,
	|	ДенежныеСредства.Период КАК Дата,
	|	ДенежныеСредства.Период КАК ДатаПроведенияБанком,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер) КАК ТипПлатежногоДокумента
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК РегистраторыДляОбработки
	|			ПО ДенежныеСредства.Регистратор = РегистраторыДляОбработки.Ссылка
	|ГДЕ
	|   ТИПЗНАЧЕНИЯ(ДенежныеСредства.ПлатежныйДокумент) = ТИП(Документ.ОтчетБанкаПоОперациямЭквайринга)
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
    |
	|УПОРЯДОЧИТЬ ПО
	|	ДенежныеСредства.Период УБЫВ,
	|	ДенежныеСредства.Регистратор
	|
	|ИТОГИ ПО
	|	ДенежныеСредства.Регистратор
    |";
    
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента,
        Запрос.МенеджерВременныхТаблиц
    );
    
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
    КонецЕсли;
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
    
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		                
		Регистратор = ВыборкаПоДокументу.Выписка;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			
			БлокировкаРегистра = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			БлокировкаРегистра.УстановитьЗначение("Регистратор", Регистратор);
			
			Блокировка.Заблокировать();
            
            // прочитать движения выписки
			НаборЗаписейВыписка = РегистрыНакопления.ДенежныеСредстваБезналичные.СоздатьНаборЗаписей();
			НаборЗаписейВыписка.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписейВыписка.Прочитать();
            // выгружаем движения - в наборе могут быть не только нужные нам записи, а и другие
            ТаблицаДвиженийВыписка = НаборЗаписейВыписка.Выгрузить();
            
            МассивПеренесенныхДвижений = Новый Массив;
            
			Выборка = ВыборкаПоДокументу.Выбрать();
            Пока Выборка.Следующий() Цикл
                
    			Движение = ТаблицаДвиженийВыписка.Найти(Выборка.НомерСтроки, "НомерСтроки");
    			
    			Если Движение <> Неопределено Тогда
    				
    				ДокументПоступление = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
    				ЗаполнитьЗначенияСвойств(ДокументПоступление, Выборка);
    				
    				ДокументПоступление.УстановитьНовыйНомер();
    				ДокументПоступление.НомерВходящегоДокумента = ДокументПоступление.Номер;
    				ДокументПоступление.ДатаВходящегоДокумента = ДокументПоступление.Дата;
                    ТекстКомментария = "#Створений при переході на BAS УТ 3.2.1#";
    				ДокументПоступление.Комментарий = ТекстКомментария;
    				
    				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументПоступление, Истина);
                    
                    ДопСвойства = Новый Структура;
                    ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументПоступление.Ссылка, ДопСвойства);
                    Документы.ПоступлениеБезналичныхДенежныхСредств.ИнициализироватьДанныеДокумента(ДокументПоступление.Ссылка, ДопСвойства, "ДенежныеСредстваВПути,ДвиженияДенежныхСредств");
                    
        			НаборЗаписей = РегистрыНакопления.ДенежныеСредстваВПути.СоздатьНаборЗаписей();
        			НаборЗаписей.Отбор.Регистратор.Установить(ДокументПоступление.Ссылка);
                    НаборЗаписей.Загрузить(ДопСвойства.ТаблицыДляДвижений["ТаблицаДенежныеСредстваВПути"]);
        			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Истина);
        			
        			НаборЗаписей = РегистрыНакопления.ДвиженияДенежныхСредств.СоздатьНаборЗаписей();
        			НаборЗаписей.Отбор.Регистратор.Установить(ДокументПоступление.Ссылка);
                    НаборЗаписей.Загрузить(ДопСвойства.ТаблицыДляДвижений["ТаблицаДвиженияДенежныхСредств"]);
        			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Истина);
    				
    				НаборЗаписей = РегистрыНакопления.ДенежныеСредстваБезналичные.СоздатьНаборЗаписей();
    				НаборЗаписей.Отбор.Регистратор.Установить(ДокументПоступление.Ссылка);
    				Запись = НаборЗаписей.Добавить();
    				ЗаполнитьЗначенияСвойств(Запись, Движение, , "Регистратор, НомерСтроки");
                    Запись.Регистратор = ДокументПоступление.Ссылка;
    				Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
    				НаборЗаписей.Записывать = Истина;
    				НаборЗаписей.Записать();
                    
                    МассивПеренесенныхДвижений.Добавить(Движение);
    				
                КонецЕсли;
                
            КонецЦикла;
            
            // удаляем из сохраненной таблицы обработанные нами движения
			Для Каждого ПеренесенноеДвижение Из МассивПеренесенныхДвижений Цикл
				ТаблицаДвиженийВыписка.Удалить(ПеренесенноеДвижение);
            КонецЦикла;
            
			// сохраняем не обработанные нами движения в движениях выписки - они еще будут нужны для следующих обработок переноса
			НаборЗаписейВыписка.Загрузить(ТаблицаДвиженийВыписка);
			НаборЗаписейВыписка.Записать();
            
            // отмечаем документ УдалитьВыпискаПоРасчетномуСчету как обработанный 
            ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать движения документа %Документ% по регистру ""Денежные средства (безналичные)"". Причина: %Причина%';uk='Не вдалося обробити рухи документа %Документ% регістру ""Грошові кошти (безготівкові)"". Причина: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
                УровеньЖурналаРегистрации.Предупреждение,
				Регистратор.Метаданные(), 
                Регистратор, 
                ТекстСообщения
            );
            
		КонецПопытки;
	
    КонецЦикла;
    
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры

Процедура ОбработатьВозвратыПоЭквайрингу_ДанныеДляОбновления(Параметры) Экспорт
    
	ПолноеИмяРегистра = "РегистрНакопления.ДенежныеСредстваБезналичные";
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ДСБезналичные.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДСБезналичные
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДСБезналичные.Регистратор) = ТИП(Документ.УдалитьВыпискаПоРасчетномуСчету)
	|	И ТИПЗНАЧЕНИЯ(ДСБезналичные.ПлатежныйДокумент) = ТИП(Документ.ОтчетБанкаПоОперациямЭквайринга)
	|	И ДСБезналичные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|");
    
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );	
	
КонецПроцедуры

// Обработчик обновления УТ 3.2.1
// Создает документы КорректировкаРегистров и формирует корректировочные движения по регистру ДенежныеСредстваБезналичные
// при возвратах в выписке по отчетах по эквайрингу
Процедура ОбработатьВозвратыПоЭквайрингу(Параметры) Экспорт
    
    ПолноеИмяРегистра  = "РегистрНакопления.ДенежныеСредстваБезналичные";
    ПолноеИмяДокумента = "Документ.УдалитьВыпискаПоРасчетномуСчету";
    
    Запрос = Новый Запрос();
    Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ДСБезналичные.Регистратор КАК Ссылка,
	|	ДСБезналичные.Период КАК Период,
	|	ИСТИНА КАК Активность,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДСБезналичные.Организация КАК Организация,
	|	ДСБезналичные.БанковскийСчет КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу) КАК ВидПереводаДенежныхСредств,
	|	ВЫРАЗИТЬ(ДСБезналичные.ПлатежныйДокумент КАК Документ.ОтчетБанкаПоОперациямЭквайринга).Эквайер КАК Контрагент,
	|	ДСБезналичные.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	-ДСБезналичные.Сумма КАК Сумма,
	|	-ДСБезналичные.СуммаУпр КАК СуммаУпр,
	|	-ДСБезналичные.СуммаРегл КАК СуммаРегл,
	|	ДСБезналичные.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДСБезналичные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК РегистраторыДляОбработки
	|			ПО ДСБезналичные.Регистратор = РегистраторыДляОбработки.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДСБезналичные.ПлатежныйДокумент) = ТИП(Документ.ОтчетБанкаПоОперациямЭквайринга)
	|	И ДСБезналичные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДСБезналичные.Период УБЫВ,
	|	ДСБезналичные.Регистратор
	|
	|ИТОГИ МАКСИМУМ (ПЕРИОД) ПО
	|	ДСБезналичные.Регистратор
    |";
    
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента,
        Запрос.МенеджерВременныхТаблиц
    );
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
    КонецЕсли;
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
    
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		                
		Регистратор = ВыборкаПоДокументу.Ссылка;
		                
		НачатьТранзакцию();
		
		Попытка
            
			НовыйДокумент = Документы.КорректировкаРегистров.СоздатьДокумент();
			НовыйДокумент.Дата = ВыборкаПоДокументу.Период;
			НовыйДокумент.УстановитьНовыйНомер();
            ТекстКомментария = "#Створений при переході на BAS УТ 3.2.1#";
			НовыйДокумент.Комментарий = ТекстКомментария;
			СтрокаСпискаРегистров = НовыйДокумент.ТаблицаРегистров.Добавить();
			СтрокаСпискаРегистров.Имя = "ДенежныеСредстваВПути";
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйДокумент, Истина);
			НовыйРегистратор = НовыйДокумент.Ссылка;
            
			Набор = РегистрыНакопления.ДенежныеСредстваВПути.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(НовыйРегистратор);
            
			Выборка = ВыборкаПоДокументу.Выбрать();
            Пока Выборка.Следующий() Цикл
    			Запись = Набор.Добавить();
    			ЗаполнитьЗначенияСвойств(Запись, Выборка);
    			Запись.Регистратор = НовыйРегистратор;
            КонецЦикла;    
            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор, Истина);
            ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор);
            
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать движения документа %Документ% по регистру ""Денежные средства (безналичные)"". Причина: %Причина%';uk='Не вдалося обробити рухи документа %Документ% регістру ""Грошові кошти (безготівкові)"". Причина: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
                УровеньЖурналаРегистрации.Предупреждение,
				Регистратор.Метаданные(), 
                Регистратор, 
                ТекстСообщения
            );
            
		КонецПопытки;
	
    КонецЦикла;
    
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры



Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ДенежныеСредстваБезналичные";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДанныеРегистра
	|
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы,
		"РегистрНакопления.ДенежныеСредстваБезналичные",
		Параметры.Очередь);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли
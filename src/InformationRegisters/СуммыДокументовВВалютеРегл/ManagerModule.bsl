#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Синхронизация регл.сумм в учетных регистрах по данным СуммыДокументовВВалютеРегл
// Параметры:
// 	РегистраторыСумм - одиночный ДокументСсылка или массив типа ДокументСсылка
Процедура ОбновитьДвиженияДокументов(РегистраторыСумм) Экспорт
	
	СоставОбновления = Новый Структура();
	// регистры партий к синхронизации регл.сумм
	СоставОбновления.Вставить("ТаблицаПартииТоваровОрганизаций", РегистрыНакопления.ПартииТоваровОрганизаций);
	СоставОбновления.Вставить("ТаблицаПартииПроизводственныхЗатрат", РегистрыНакопления.ПартииПроизводственныхЗатрат);
	СоставОбновления.Вставить("ТаблицаПрочиеРасходы", РегистрыНакопления.ПрочиеРасходы);
	СоставОбновления.Вставить("ТаблицаПартииПрочихРасходов", РегистрыНакопления.ПартииПрочихРасходов);
	// регистры себестоимости к синхронизации регл.сумм
	СоставОбновления.Вставить("ТаблицаСебестоимостьТоваров", РегистрыНакопления.СебестоимостьТоваров);
	СоставОбновления.Вставить("ТаблицаВыручкаИСебестоимостьПродаж", РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	СоставОбновления.Вставить("ТаблицаЗакупки", РегистрыНакопления.Закупки);
	
	Регистраторы = ОбщегоНазначенияУТКлиентСервер.Массив(РегистраторыСумм);
	Для Каждого Ссылка Из Регистраторы Цикл
		ОбновитьДвиженияДокумента(Ссылка, СоставОбновления);
	КонецЦикла;
	
	СоставОбновления.Удалить("ТаблицаПартииТоваровОрганизаций");
	СоставОбновления.Удалить("ТаблицаПартииПроизводственныхЗатрат");
	СоставОбновления.Удалить("ТаблицаПрочиеРасходы");
	СоставОбновления.Удалить("ТаблицаПартииПрочихРасходов");
	СоставОбновления.Удалить("ТаблицаСебестоимостьТоваров");
	СоставОбновления.Удалить("ТаблицаВыручкаИСебестоимостьПродаж");
	СоставОбновления.Удалить("ТаблицаЗакупки");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДвиженияДокумента(Ссылка, СоставОбновления)
	Перем Таблица;
	ДопСвойства = Новый Структура("ЭтоНовый, РежимЗаписи", Ложь, РежимЗаписиДокумента.Проведение);
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДопСвойства, РежимПроведенияДокумента.Неоперативный);
	Документы[ДопСвойства.ДляПроведения.МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(Ссылка, ДопСвойства);
	Таблицы = ДопСвойства.ТаблицыДляДвижений;
	
	НачатьТранзакцию();
	
	ИспользоватьПартионныйУчет = Константы.ИспользоватьПартионныйУчет.Получить();
	Для Каждого ОписаниеОбновления Из СоставОбновления Цикл
		Если Таблицы.Свойство(ОписаниеОбновления.Ключ, Таблица) Тогда
			ЗаписатьДвиженияВБазу(ОписаниеОбновления.Значение, Таблица, Ссылка, ДопСвойства, ИспользоватьПартионныйУчет);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ЗаписатьДвиженияВБазу(МенеджерДвижений, Таблица, Ссылка, ДопСвойства, ИспользоватьПартионныйУчет)
	Набор = МенеджерДвижений.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Ссылка);
	
	Набор.ДополнительныеСвойства.Вставить("ЭтоНовый", ДопСвойства.ЭтоНовый);
	Набор.ДополнительныеСвойства.Вставить("РежимЗаписи", ДопСвойства.РежимЗаписи);
	Набор.ДополнительныеСвойства.Вставить("ДатаРегистратора", Дата(1,1,1));
	Набор.ДополнительныеСвойства.Вставить("СтруктураОтраженияРеглПроводок", Новый Структура);
	Набор.ДополнительныеСвойства.Вставить("ДляПроведения", 
		Новый Структура("СтруктураВременныеТаблицы, ПартионныйУчет",
			// Структура для передачи данных в модули наборов записей.
			ДопСвойства.ДляПроведения.СтруктураВременныеТаблицы,
			ИспользоватьПартионныйУчет));
	
	Если Таблица.Количество() > 0 Тогда
		Набор.Загрузить(Таблица);
		Набор.УстановитьАктивность(Истина);
		Набор.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы


Процедура ОбновитьДвиженияРеализацияТоваровУслуг_ДанныеДляОбновления(Параметры) Экспорт
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = "РегистрСведений.СуммыДокументовВВалютеРегл";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка.Проведен
	|	И ДокументТовары.КодСтроки = 0
	|	И ДокументТовары.СтатусУказанияСерий = 10
	|	И ДокументТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|";
	
	ДанныеКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеКОбработке, ДополнительныеПараметрыОтметки);
	
КонецПроцедуры

Процедура ОбновитьДвиженияРеализацияТоваровУслуг(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.РеализацияТоваровУслуг");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
		"РегистрСведений.СуммыДокументовВВалютеРегл",
		Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


Функция СоставРегистраторов(Регистры, ПропускаемыеИмена = Неопределено, ВключаемыеИмена = Неопределено)
	Состав = Новый Соответствие();
	
	Для Каждого Регистр Из Регистры Цикл
		Регистраторы = Регистр.СтандартныеРеквизиты.Регистратор.Тип.Типы();
		Для Каждого Регистратор ИЗ Регистраторы Цикл
			МетаОбъект = Метаданные.НайтиПоТипу(Регистратор);
			ИмяМетаОбъекта = МетаОбъект.Имя;
			
			Если Неопределено <> ПропускаемыеИмена И ПропускаемыеИмена.Свойство(ИмяМетаОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Неопределено <> ВключаемыеИмена И Не ВключаемыеИмена.Свойство(ИмяМетаОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			Состав.Вставить(ИмяМетаОбъекта, МетаОбъект);
		КонецЦикла;
	КонецЦикла;

	Возврат Состав;
КонецФункции

Процедура ОписатьПоляВалюты(ОбъектМетаданных, ТаблицаВыборкиИмя, ВалютаПоле)
	// 1. Используем реквизит Валюта
	// 2. Если нет реквизита Валюта, используем реквизиты табчасти ВалютаВзаиморасчетов и ИдентификаторСтроки
	// 3. Если валюты не обнаружено, считаем что для документа определена валюта упр. учета
	// ---
	// Если есть реквизит типа валюты, то в обработке валютных документов контролируем его равенство валюте регл.
	// Во всех случаях в обработке валютных документов проверяем наличие записей регистра сумм регл.
	// ТаблицаВыборкиИмя, ВалютаПоле
	ТаблицаВыборкиИмя = ОбъектМетаданных.Имя;
	ВалютаПоле = "";
	
	Если Неопределено <> ОбъектМетаданных.Реквизиты.Найти("Валюта") Тогда
		ВалютаПоле = "Валюта";
	Иначе
		Для Каждого Табчасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			Если Неопределено <> Табчасть.Реквизиты.Найти("ВалютаВзаиморасчетов")
				И Неопределено <> Табчасть.Реквизиты.Найти("ИдентификаторСтроки")
			Тогда
				ТаблицаВыборкиИмя = ТаблицаВыборкиИмя + "." + Табчасть.Имя;
				ВалютаПоле = "ВалютаВзаиморасчетов";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#Область ТекстыЗапросовОбработчиковОбновления

Функция ТекстЗапросаСуммыВВалютеРегл()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка                КАК Ссылка,
	|	Операция.Ссылка.МоментВремени  КАК МоментВремени,
	|	""РегистрСведений""            КАК ТипМетаданных,
	|	""СуммыДокументовВВалютеРегл"" КАК ИмяМетаданных
	|ИЗ
	|	ИмяДокумента КАК Операция
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|		ПО Операция.Ссылка = Суммы.Регистратор
	|ГДЕ
	|	Операция.Ссылка.Проведен 
	|	И &ВалютаОперации <> &ВалютаРеглУчета
	|	И &ВалютаОперации <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И (Суммы.Регистратор ЕСТЬ NULL ИЛИ НЕ Суммы.Активность)
	|	И Операция.Ссылка.МоментВремени < &МоментВремени
	|	И &ИсключаемыеХозоперации
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстОбработчиковОбновления() Экспорт
	
	Перем ТаблицаВыборкиИмя, ВалютаПоле;
	
	ВалютныеРегистры = Новый Массив;
	ВалютныеРегистры.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл);
	
	ВалютныеРегистраторы = СоставРегистраторов(ВалютныеРегистры);
	ТекстЗапроса = "";
	Для Каждого Регистратор Из ВалютныеРегистраторы Цикл
		
		ОписатьПоляВалюты(Регистратор.Значение, ТаблицаВыборкиИмя, ВалютаПоле);
		ИмяДокумента = "Документ." + ТаблицаВыборкиИмя;
		ШаблонТекста = ТекстЗапросаСуммыВВалютеРегл();
		ШаблонТекста = СтрЗаменить(ШаблонТекста, "ИмяДокумента", ИмяДокумента);
		
		Если Неопределено <> Регистратор.Значение.Реквизиты.Найти("ХозяйственнаяОперация") Тогда
			ШаблонТекста = СтрЗаменить(ШаблонТекста, "&ИсключаемыеХозоперации",
				"НЕ Операция.Ссылка.ХозяйственнаяОперация В (
				|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
				|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию),
				|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту))");
		Иначе
			ШаблонТекста = СтрЗаменить(ШаблонТекста, "&ИсключаемыеХозоперации", "ИСТИНА");
		КонецЕсли;

		Если ЗначениеЗаполнено(ВалютаПоле) Тогда
			ШаблонТекста = СтрЗаменить(ШаблонТекста, "&ВалютаОперации", "Операция." + ВалютаПоле);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ШаблонТекста;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + ШаблонТекста;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


Процедура ЗаполнитьДляУслугСуммыВВалютеРегл_КОбработке(Параметры) Экспорт
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = "РегистрСведений.СуммыДокументовВВалютеРегл";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Услуги.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК Услуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументов
	|	ПО Услуги.Ссылка = СуммыДокументов.Регистратор
	|		И Услуги.ИдентификаторСтроки = СуммыДокументов.ИдентификаторСтроки
	|ГДЕ
	|	Услуги.Ссылка.Валюта <> &ВалютаРегламентированногоУчета
	|	И Услуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И Услуги.Ссылка.Проведен
	|	И СуммыДокументов.ИдентификаторСтроки ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Услуги.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК Услуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументов
	|	ПО Услуги.Ссылка = СуммыДокументов.Регистратор
	|		И Услуги.ИдентификаторСтроки = СуммыДокументов.ИдентификаторСтроки
	|ГДЕ
	|	Услуги.Ссылка.Валюта <> &ВалютаРегламентированногоУчета
	|	И Услуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И Услуги.Ссылка.Проведен
	|	И СуммыДокументов.ИдентификаторСтроки ЕСТЬ NULL
	|
	|");
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ДанныеКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеКОбработке, ДополнительныеПараметрыОтметки);
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
// Перепроводит по регистру документы, в таб. частях которых есть услуги, 
// но для данных услуг нет движений по РС "Суммы документов в валюте регл.".
Процедура ЗаполнитьДляУслугСуммыВВалютеРегл(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ОтчетПоКомиссииМеждуОрганизациями");
	Регистраторы.Добавить("Документ.ОтчетКомиссионера");
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
		"РегистрСведений.СуммыДокументовВВалютеРегл",
		Параметры.Очередь
    );
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
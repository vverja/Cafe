#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Вычисляет принятое количество, согласно данных регистра накопления "Товары к поступлению", которое
//  необходимо распределить между строками заказа.
//
// Параметры:
//  Отбор			 - ТаблицаЗначений - таблица товаров по которым необходимо получить принятое количество
//  Корректировка	 - ТаблицаЗначений - 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - 
//
Функция ТаблицаОформлено(Отбор, Корректировка) Экспорт

	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыКПоступлению;
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОтбора.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОтбора.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаОтбора.Колонки.Добавить("Назначение",     Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаОтбора.Колонки.Добавить("Ссылка",         МетаданныеРегистра.Измерения.ДокументПоступления.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Отбор, ТаблицаОтбора);

	Запрос = Новый Запрос();

	//Запрос оформленного количества по заказу.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Ссылка КАК ДокументПоступления
		|ПОМЕСТИТЬ ВТОтбор
		|ИЗ
		|	&Отбор КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Склад КАК Склад,
		|	Таблица.КПоступлению КАК Количество
		|ПОМЕСТИТЬ ВТКорректировка
		|ИЗ
		|	&Корректировка КАК Таблица
		|ГДЕ
		|	Таблица.КПоступлению <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Назначение КАК Назначение,
		|	Набор.Склад КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таблица.Номенклатура КАК Номенклатура,
		|		Таблица.Характеристика КАК Характеристика,
		|		Таблица.Назначение КАК Назначение,
		|		Таблица.Склад КАК Склад,
		|		ВЫБОР
		|			КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА Таблица.КПоступлению - Таблица.Принимается
		|			ИНАЧЕ Таблица.Принимается
		|		КОНЕЦ КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению КАК Таблица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Фильтр
		|			ПО Таблица.Номенклатура = Фильтр.Номенклатура
		|				И Таблица.Характеристика = Фильтр.Характеристика
		|				И Таблица.Склад = Фильтр.Склад
		|				И Таблица.Назначение = Фильтр.Назначение
		|				И Таблица.ДокументПоступления = Фильтр.ДокументПоступления
		|	ГДЕ
		|		Таблица.Активность
		|		И (Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И Таблица.КПоступлению <> 0
		|				ИЛИ Таблица.Принимается <> 0)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура,
		|		Таблица.Характеристика,
		|		Таблица.Назначение,
		|		Таблица.Склад,
		|		-Таблица.Количество
		|	ИЗ
		|		ВТКорректировка КАК Таблица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Фильтр
		|			ПО Таблица.Номенклатура = Фильтр.Номенклатура
		|				И Таблица.Характеристика = Фильтр.Характеристика
		|				И Таблица.Склад = Фильтр.Склад
		|				И Таблица.Назначение = Фильтр.Назначение) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Назначение,
		|	Набор.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0";

	Запрос.УстановитьПараметр("Корректировка", Корректировка);
	Запрос.УстановитьПараметр("Отбор",         ТаблицаОтбора);

	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Таблица.Индексы.Добавить("Номенклатура, Характеристика, Склад, Назначение");

	Возврат Таблица;

КонецФункции

// Возвращает незакрытые (не полностью принятые) заказы и накладные
//
// Параметры:
//  ТипыЗаказов					 - Массив - Массив типов заказов для отбора по типам
//  ТипыНакладных				 - Массив - Массив типов накладных для отбора по типам
//  ДатаПроверкиОрдерногоСклада	 - Дата - Дата начала применения ордерной схемы на складе
//  Склад						 - СправочникСсылка.Склады - Склад
//  
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция РаспоряженияРМВнутреннееТовародвижение(ТипыЗаказов, ТипыНакладных, РаспоряженияДляПересчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКОформлениюПоступления.Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика,
	|	ТоварыКОформлениюПоступления.Склад КАК СкладПолучатель,
	|	ТоварыКОформлениюПоступления.Назначение,
	|	ТоварыКОформлениюПоступления.Серия,
	|	ЕСТЬNULL(ТоварыКОформлениюПоступления.КОформлениюРасход, 0) КОформлению,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюКонечныйОстаток = 0
	|			И ТоварыКОформлениюПоступления.КОформлениюПриход > 0
	|			ТОГДА 0
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПриход > 0
	|			ТОГДА 3
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СостояниеОрдера,
	|	ТоварыКОформлениюПоступления.ДокументПоступления КАК Ссылка
	|ПОМЕСТИТЬ втДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления.ОстаткиИОбороты(, , , , 
	|		(ТИПЗНАЧЕНИЯ(ДокументПоступления) В (&ТипыЗаказов) Или ТИПЗНАЧЕНИЯ(ДокументПоступления) В (&ТипыНакладных))
	|		//%Отборы%
	|		) КАК ТоварыКОформлениюПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(втДанныеРегистра.Ссылка) КАК Тип,
	|	втДанныеРегистра.СкладПолучатель,
	|	втДанныеРегистра.Ссылка,
	|	МАКСИМУМ(втДанныеРегистра.СостояниеОрдера) КАК СостояниеПриходногоОрдера
	|ИЗ
	|	втДанныеРегистра КАК втДанныеРегистра
	|ГДЕ
	|	втДанныеРегистра.СостояниеОрдера > 0
	|	
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(втДанныеРегистра.Ссылка),
	|	втДанныеРегистра.СкладПолучатель,
	|	втДанныеРегистра.Ссылка";
	
	ТекстУсловийЗапроса = "";
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловия = " И ДокументПоступления В (&Распоряжения)";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ТекстУсловия;
		Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийЗапроса) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Отборы%", ТекстУсловийЗапроса);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТипыЗаказов", ТипыЗаказов);
	Запрос.УстановитьПараметр("ТипыНакладных", ТипыНакладных);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


Процедура ИсправитьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыКПоступлению";
	ИмяРегистра = "ТоварыКПоступлению";
	
#Область ОрдерноеПоступлениеПоЗаказуИНакладныеВНефинальномСтатусе
	
	ТекстЗапроса =
		"// Накладные на сборку по заказу имеющие движения и накладные без заказа не имеющие движения.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсправляемыйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СборкаТоваров КАК ИсправляемыйДокумент
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклад
		|		ПО СпрСклад.Ссылка = ИсправляемыйДокумент.Склад
		|		 И СпрСклад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		 И СпрСклад.ДатаНачалаОрдернойСхемыПриПоступлении <= ИсправляемыйДокумент.Дата
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
		|		ПО ИсправляемыйДокумент.Ссылка = ТоварыКПоступлению.Регистратор
		|ГДЕ
		|	ИсправляемыйДокумент.Проведен
		|	И НЕ СпрСклад.Ссылка ЕСТЬ NULL
		|	
		|	И ВЫБОР КОГДА ИсправляемыйДокумент.ЗаказНаСборку <> ЗНАЧЕНИЕ(Документ.ЗаказНаСборку.ПустаяСсылка) ТОГДА
		|				
		|				НЕ ТоварыКПоступлению.Регистратор ЕСТЬ NULL
		|				
		|			КОГДА ИсправляемыйДокумент.Статус В(
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыСборокТоваров.УдалитьКСборкеРазборке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыСборокТоваров.ВРаботе)) ТОГДА
		|				
		|				ТоварыКПоступлению.Регистратор ЕСТЬ NULL
		|				
		|		КОНЕЦ
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|// Накладные на перемещение по заказу имеющие движения и накладные без заказа не имеющие движения.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсправляемыйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ИсправляемыйДокумент
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклад
		|		ПО СпрСклад.Ссылка = ИсправляемыйДокумент.СкладПолучатель
		|		 И СпрСклад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		 И СпрСклад.ДатаНачалаОрдернойСхемыПриПоступлении <= ИсправляемыйДокумент.Дата
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
		|		ПО ИсправляемыйДокумент.Ссылка = ТоварыКПоступлению.Регистратор
		|ГДЕ
		|	ИсправляемыйДокумент.Проведен
		|	И НЕ СпрСклад.Ссылка ЕСТЬ NULL
		|	
		|	И ВЫБОР КОГДА ИсправляемыйДокумент.ПеремещениеПоЗаказам ТОГДА
		|				
		|				НЕ ТоварыКПоступлению.Регистратор ЕСТЬ NULL
		|				
		|			КОГДА ИсправляемыйДокумент.Статус В(
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.УдалитьКОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Отгружено)) ТОГДА
		|				
		|				ТоварыКПоступлению.Регистратор ЕСТЬ NULL
		|				
		|		КОНЕЦ
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|// Заказы на сборку и неотмененные комплектующие заказов на разборку не имеющие движения.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсправляемыйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ИсправляемыйДокумент
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК ТабЧастьДокумента
		|		ПО ТабЧастьДокумента.Ссылка = ИсправляемыйДокумент.Ссылка
		|		 И НЕ ТабЧастьДокумента.Отменено
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклад
		|		ПО СпрСклад.Ссылка = ИсправляемыйДокумент.Склад
		|		 И СпрСклад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		 И СпрСклад.ДатаНачалаОрдернойСхемыПриПоступлении <= ИсправляемыйДокумент.Дата
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
		|		ПО ТоварыКПоступлению.Регистратор = ИсправляемыйДокумент.Ссылка
		|ГДЕ
		|	ИсправляемыйДокумент.Проведен
		|	И НЕ СпрСклад.Ссылка ЕСТЬ NULL
		|	И (НЕ ТабЧастьДокумента.Ссылка ЕСТЬ NULL
		|		ИЛИ ИсправляемыйДокумент.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих))
		|	И ИсправляемыйДокумент.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|	И ТоварыКПоступлению.Регистратор ЕСТЬ NULL
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|// Заказы на перемещение с неотмененными строками к отгрузке не имеющие движения.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсправляемыйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ИсправляемыйДокумент
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклад
		|		ПО СпрСклад.Ссылка = ИсправляемыйДокумент.СкладПолучатель
		|		 И СпрСклад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		 И СпрСклад.ДатаНачалаОрдернойСхемыПриПоступлении <= ИсправляемыйДокумент.Дата
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ТабЧастьДокумента
		|		ПО ТабЧастьДокумента.Ссылка = ИсправляемыйДокумент.Ссылка
		|		 И НЕ ТабЧастьДокумента.Отменено
		|		 И ТабЧастьДокумента.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
		|		ПО ТоварыКПоступлению.Регистратор = ИсправляемыйДокумент.Ссылка
		|ГДЕ
		|	ИсправляемыйДокумент.Проведен
		|	И НЕ СпрСклад.Ссылка ЕСТЬ NULL
		|	И НЕ ТабЧастьДокумента.Ссылка ЕСТЬ NULL
		|	И ИсправляемыйДокумент.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|	И ТоварыКПоступлению.Регистратор ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
#КонецОбласти
	

#Область ПриходныйОрдерНаТовары
	ТекстЗапросаМеханизмаПроведения = Документы.ПриходныйОрдерНаТовары.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.ПриходныйОрдерНаТовары"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказНаСборку
	Регистраторы = Документы.ЗаказНаСборку.ЗаказыНаРазборкуКоторыеНужноРазбитьПередЗаполнениемСерий();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноРазбитьПоВариантуОбеспечения();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область АктОРасхожденияхПослеПеремещения
	ТекстЗапросаМеханизмаПроведения = Документы.АктОРасхожденияхПослеПеремещения.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.АктОРасхожденияхПослеПеремещения");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

	
КонецПроцедуры

Процедура ИсправитьДвижения(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.СборкаТоваров");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.ЗаказНаСборку");
	Регистраторы.Добавить("Документ.ЗаказНаПеремещение");
	Регистраторы.Добавить("Документ.ПриходныйОрдерНаТовары");
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
    
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
		"РегистрНакопления.ТоварыКПоступлению",
		Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры



Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаВерсию2_1_12(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыКПоступлению";
	ИмяРегистра = "ТоварыКПоступлению";
	
	// ЗаказНаСборку
	ТекстЗапросаМеханизмаПроведения = Документы.ЗаказНаСборку.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.ЗаказНаСборку");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаВерсию2_1_12(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ЗаказНаСборку");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
	    "РегистрНакопления.ТоварыКПоступлению",
	    Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры



#КонецОбласти

#КонецОбласти

#КонецЕсли

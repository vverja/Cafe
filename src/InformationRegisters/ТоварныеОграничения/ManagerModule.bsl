#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПодставитьСоединение(ТекстЗапроса, ИмяПараметра, ПоляСоединения = Неопределено, СинонимТаблицы = "ТоварныеОграничения") Экспорт
	
	РезультатПодстановки = ТекстЗапроса;
	Пока Истина Цикл
		
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		Если НачалоПараметра = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Замена ресурсов, измерений и реквизитов.
		Поля = Метаданные.РегистрыСведений.ТоварныеОграничения.Измерения;
		ПодставитьВыраженияПолейВыборки(РезультатПодстановки, Поля, СинонимТаблицы);
		Поля = Метаданные.РегистрыСведений.ТоварныеОграничения.Ресурсы;
		ПодставитьВыраженияПолейВыборки(РезультатПодстановки, Поля, СинонимТаблицы);
		Поля = Метаданные.РегистрыСведений.ТоварныеОграничения.Реквизиты;
		ПодставитьВыраженияПолейВыборки(РезультатПодстановки, Поля, СинонимТаблицы);
		
		// Замена соединения.
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		ПоследнийСимвол = НачалоПараметра + СтрДлина(ИмяПараметра);
		НачалоСинонима = СтрНайти(РезультатПодстановки, "КАК", НаправлениеПоиска.СКонца, НачалоПараметра) + СтрДлина("КАК");
		ПревыйСимвол = СтрНайти(РезультатПодстановки, "СОЕДИНЕНИЕ", НаправлениеПоиска.СКонца, НачалоСинонима) + СтрДлина("СОЕДИНЕНИЕ");
		
		ПодстрокаПоиска = Сред(РезультатПодстановки, ПревыйСимвол, ПоследнийСимвол - ПревыйСимвол);
		ПодстрокаЗамены =
			" РегистрСведений.ТоварныеОграничения КАК НастройкаДетальная
			|		ПО НастройкаДетальная.Номенклатура   = Т.Номенклатура
			|		 И НастройкаДетальная.Характеристика = Т.Характеристика
			|		 И НастройкаДетальная.Склад          = Т.Склад
			|		 И НастройкаДетальная.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ПринадлежностьГруппе
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|		 И ПринадлежностьГруппе.Номенклатура   = Т.Номенклатура
			|		 И ПринадлежностьГруппе.Характеристика = Т.Характеристика
			|		 И ПринадлежностьГруппе.Склад          = Т.Склад
			|		 И ПринадлежностьГруппе.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппировки
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|		 И НастройкаГруппировки.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|		 И НастройкаГруппировки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаГруппировки.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|		 И НастройкаГруппировки.Группировка    = ПринадлежностьГруппе.Группировка
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаБезХарактеристик
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|		 И НастройкаГруппировки.Склад ЕСТЬ NULL
			|		 И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаБезХарактеристик.Номенклатура   = Т.Номенклатура
			|		 И НастройкаБезХарактеристик.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаБезХарактеристик.Склад          = Т.Склад
			|		 И НастройкаБезХарактеристик.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)";
			
		Если ПоляСоединения <> Неопределено Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСоединения);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Номенклатура",   МассивПодстрок[0]);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Характеристика", МассивПодстрок[1]);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Склад",          МассивПодстрок[2]);
		КонецЕсли;
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат РезультатПодстановки;
	
КонецФункции

Функция ВременнаяТаблицаТоварыПоддерживаемогоЗапаса() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	ЕСТЬNULL(НастройкаГруппировки.СтраховоеКоличествоЗапаса, Таблица.СтраховоеКоличествоЗапаса)                           КАК СтраховоеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.МинимальноеКоличествоЗапаса, Таблица.МинимальноеКоличествоЗапаса)                       КАК МинимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.МаксимальноеКоличествоЗапаса, Таблица.МаксимальноеКоличествоЗапаса)                     КАК МаксимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.СреднедневноеПотребление, Таблица.СреднедневноеПотребление)                             КАК СреднедневноеПотребление,
		|	ЕСТЬNULL(НастройкаГруппировки.МетодОбеспеченияПотребностей, Таблица.МетодОбеспеченияПотребностей)                     КАК МетодОбеспеченияПотребностей,
		|	ЕСТЬNULL(НастройкаГруппировки.УпаковкаЗаказа, Таблица.УпаковкаЗаказа)                                                 КАК УпаковкаЗаказа,
		|	ЕСТЬNULL(НастройкаГруппировки.ОбеспечениеЗаказовПриПоддержанииЗапаса, Таблица.ОбеспечениеЗаказовПриПоддержанииЗапаса) КАК ОбеспечениеЗаказовПриПоддержанииЗапаса
		|	
		|ПОМЕСТИТЬ ВтТоварыПоддерживаемогоЗапаса
		|	
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппировки
		|		ПО Таблица.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|			И НастройкаГруппировки.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			И НастройкаГруппировки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			И НастройкаГруппировки.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И НастройкаГруппировки.Группировка    = Таблица.Группировка
		|
		|ГДЕ
		|	ЕСТЬNULL(НастройкаГруппировки.МетодОбеспеченияПотребностей, Таблица.МетодОбеспеченияПотребностей) <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|	И Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (Таблица.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|		ИЛИ Таблица.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|{ГДЕ
		|	Таблица.Номенклатура.*   КАК Номенклатура,
		|	Таблица.Характеристика.* КАК Характеристика,
		|	Таблица.Склад.*          КАК Склад}
		|
		|{ГДЕ (Таблица.Номенклатура, Таблица.Характеристика) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика
		|	ИЗ
		|		ОтборПоСегментам КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборПоСегментуНоменклатуры)}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура        КАК Номенклатура,
		|	ТаблицаХарактеристик.Ссылка КАК Характеристика,
		|	Таблица.Склад               КАК Склад,
		|	
		|	Таблица.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
		|	Таблица.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
		|	Таблица.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
		|	Таблица.СреднедневноеПотребление               КАК СреднедневноеПотребление,
		|	Таблица.МетодОбеспеченияПотребностей           КАК МетодОбеспеченияПотребностей,
		|	Таблица.УпаковкаЗаказа                         КАК УпаковкаЗаказа,
		|	Таблица.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса
		|	
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		ПО ТаблицаНоменклатуры.Ссылка = Таблица.Номенклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаХарактеристик
		|		ПО ТаблицаХарактеристик.Владелец
		|			= ВЫБОР КОГДА ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) ТОГДА
		|						ТаблицаНоменклатуры.Ссылка
		|					КОГДА ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры) ТОГДА
		|						ТаблицаНоменклатуры.ВидНоменклатуры
		|					КОГДА ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры) ТОГДА
		|						ТаблицаНоменклатуры.ВладелецХарактеристик
		|				КОНЕЦ
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаДетальная
		|		ПО НастройкаДетальная.Номенклатура      = Таблица.Номенклатура
		|			И НастройкаДетальная.Характеристика = ТаблицаХарактеристик.Ссылка
		|			И НастройкаДетальная.Склад          = Таблица.Склад
		|			
		|ГДЕ
		|	Таблица.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|	И Таблица.Номенклатура  <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Таблица.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И Таблица.Номенклатура.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|	И НастройкаДетальная.Склад ЕСТЬ NULL
		|	И НЕ ТаблицаХарактеристик.Ссылка ЕСТЬ NULL
		|{ГДЕ
		|	Таблица.Номенклатура.*   КАК Номенклатура,
		|	Таблица.Характеристика.* КАК Характеристика,
		|	Таблица.Склад.*          КАК Склад}
		|
		|{ГДЕ (Таблица.Номенклатура, Таблица.Характеристика) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика
		|	ИЗ
		|		ОтборПоСегментам КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборПоСегментуНоменклатуры)}
		|
		|;
		|
		|///////////////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИзменитьТоварноеОграничение(Таблица, ДанныеЗаполнения) Экспорт
	
	ОбработанныеСтрокиВсе = Новый Массив();
	КлючГруппировки = Новый Структура(
		"Характеристика, Номенклатура, Склад, Группировка, Идентификатор",
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Отборы = Новый Массив();
	Отборы.Добавить(КлючГруппировки);
	
	Таблицы = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(Таблица, "ИсточникНастройкиТоварныхОграничений, Группировка");
	Для Каждого Элемент Из Таблицы Цикл
		
		Если Элемент.Ключ.ИсточникНастройкиТоварныхОграничений = "НоменклатураХарактеристикаСклад" Тогда
			
			ОбработанныеСтроки = ЗаписатьТоварныеОграничения(Элемент.Таблица, ДанныеЗаполнения);
			
		ИначеЕсли Элемент.Ключ.ИсточникНастройкиТоварныхОграничений = "Группировка" Тогда
			
			Отборы[0].Группировка = Элемент.Ключ.Группировка;
			Отборы[0].Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			Отборы[0].Склад        = Справочники.Склады.ПустаяСсылка();
			Отборы[0].Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			ОбработанныеСтроки = ЗаписатьТоварныеОграничения(Отборы, ДанныеЗаполнения, Элемент.Ключ.Группировка);
			Если ОбработанныеСтроки.Количество() > 0 Тогда
				ОбработанныеСтроки = Элемент.Таблица.ВыгрузитьКолонку("Идентификатор");
			КонецЕсли;
			
		ИначеЕсли Элемент.Ключ.ИсточникНастройкиТоварныхОграничений = "НоменклатураСклад" Тогда
			
			МассивТаблиц = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(Элемент.Таблица, "Номенклатура, Склад");
			ОбработанныеСтроки = Новый Массив();
			Для Каждого ЭлементТаблиц Из МассивТаблиц Цикл
			
				Отборы[0].Номенклатура = ЭлементТаблиц.Ключ.Номенклатура;
				Отборы[0].Склад        = ЭлементТаблиц.Ключ.Склад;
				Отборы[0].Группировка  = Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка();
				Отборы[0].Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				ОбработанныеСтрокиЧасть = ЗаписатьТоварныеОграничения(Отборы, ДанныеЗаполнения);
				Если ОбработанныеСтрокиЧасть.Количество() > 0 Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ОбработанныеСтроки,
						ЭлементТаблиц.Таблица.ВыгрузитьКолонку("Идентификатор"));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбработанныеСтрокиВсе, ОбработанныеСтроки);
		
	КонецЦикла;
	Возврат ОбработанныеСтрокиВсе;
	
КонецФункции

Функция ИсключитьИзГруппы(Товары) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Идентификатор  КАК Идентификатор,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад
		|ПОМЕСТИТЬ ВтТаблица
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Идентификатор  КАК Идентификатор,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	НастройкаГруппы.МетодОбеспеченияПотребностей           КАК МетодОбеспеченияПотребностей,
		|	НастройкаГруппы.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
		|	НастройкаГруппы.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
		|	НастройкаГруппы.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
		|	НастройкаГруппы.СреднедневноеПотребление               КАК СреднедневноеПотребление,
		|	НастройкаГруппы.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса,
		|	НастройкаГруппы.УпаковкаЗаказа                         КАК УпаковкаЗаказа
		|ИЗ
		|	ВтТаблица КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТаблицаТоварныеОграничения
		|		ПО ТаблицаТоварныеОграничения.Склад          = Таблица.Склад
		|		 И ТаблицаТоварныеОграничения.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаТоварныеОграничения.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппы
		|		ПО НастройкаГруппы.Группировка  = ТаблицаТоварныеОграничения.Группировка
		|		 И НастройкаГруппы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|ГДЕ
		|	НЕ НастройкаГруппы.Группировка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Идентификатор  КАК Идентификатор,
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	ЕСТЬNULL(НастройкаГруппы.МетодОбеспеченияПотребностей,
		|		ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)) КАК МетодОбеспеченияПотребностей,
		|	НастройкаГруппы.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
		|	НастройкаГруппы.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
		|	НастройкаГруппы.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
		|	НастройкаГруппы.СреднедневноеПотребление               КАК СреднедневноеПотребление,
		|	НастройкаГруппы.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса,
		|	НастройкаГруппы.УпаковкаЗаказа                         КАК УпаковкаЗаказа
		|ИЗ
		|	ВтТаблица КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТаблицаТоварныеОграничения
		|		ПО ТаблицаТоварныеОграничения.Склад          = Таблица.Склад
		|		 И ТаблицаТоварныеОграничения.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаТоварныеОграничения.Характеристика = Таблица.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппы
		|		ПО НастройкаГруппы.Склад          = Таблица.Склад
		|		 И НастройкаГруппы.Номенклатура   = Таблица.Номенклатура
		|		 И НастройкаГруппы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|ГДЕ
		|	ТаблицаТоварныеОграничения.Характеристика ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Таблица", Товары);
	Таблица = Запрос.Выполнить().Выгрузить();
	ДанныеЗаполнения = Новый Структура("Группировка", Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка());
	ОбработанныеСтроки = ЗаписатьТоварныеОграничения(Таблица, ДанныеЗаполнения);
	Возврат ОбработанныеСтроки;
	
КонецФункции

Функция ПеренестиВГруппу(Товары, НоваяГруппировка) Экспорт
	
	Если ТипЗнч(НоваяГруппировка) = Тип("СправочникСсылка.Номенклатура") Тогда
		ОбработанныеСтроки = УдалитьТоварныеОграничения(Товары);
	Иначе
		
		Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
		Набор.Отбор.Группировка.Установить(НоваяГруппировка);
		Набор.Отбор.Номенклатура.Установить(Справочники.Номенклатура.ПустаяСсылка());
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
			Запись.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
			Запись.Группировка = НоваяГруппировка;
			Набор.Записать();
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура("Группировка", НоваяГруппировка);
		ОбработанныеСтроки = ЗаписатьТоварныеОграничения(Товары, ДанныеЗаполнения);
		
	КонецЕсли;
	Возврат ОбработанныеСтроки;
	
КонецФункции

Функция Сгруппировать(Товары, РеквизитыГруппировки, ПараметрыОбеспечения) Экспорт
	
	НоваяГруппировка = Неопределено;
	Попытка
		
		СправочникОбъект = Справочники.ГруппировкиТоварныхОграничений.СоздатьЭлемент();
		СправочникОбъект.Заполнить(РеквизитыГруппировки);
		СправочникОбъект.Записать();
		НоваяГруппировка = СправочникОбъект.Ссылка;
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
	Набор.Добавить();
	Запись = Набор[0];
	Набор.Отбор.Группировка.Установить(НоваяГруппировка);
	Набор.Отбор.Номенклатура.Установить(Справочники.Номенклатура.ПустаяСсылка());
	
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыОбеспечения);
	Запись.Группировка = НоваяГруппировка;
	Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Запись.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Запись.Склад = Справочники.Склады.ПустаяСсылка();
	
	Попытка
		
		Набор.Записать();
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ДанныеЗаполнения = Новый Структура("Группировка", НоваяГруппировка);
	ОбработанныеСтроки = ЗаписатьТоварныеОграничения(Товары, ДанныеЗаполнения);
	
	Возврат Новый Структура("Группировка, ОбработанныеСтроки", НоваяГруппировка, ОбработанныеСтроки);
	
КонецФункции

// Получает значение настройки "Параметры поддержания запаса" для товарной позиции на складе.
// Параметры:
//    Ключ - Структура - Cтруктура с полями:
//                        Номенклатура - СправочникСсылка.Номенклатура - Позиция номенклатуры, для которой требуется получить значение настройки.
//                        Характеристика - СправочникСсылка.ХарактеристикаНоменклатуры - Характеристика номенклатуры, для которой требуется получить значение настройки.
//                        Склад - СправочникСсылка.Склады - Склад, для которого требуется получить значение настройки.
// Возвращаемое значение:
//    Структура - Структура с полями:
//                 СпособУказанияНастройки - Строка - Принимает одно из следующих значений: "ДЛЯ_ТОВАРА", "ДЛЯ_ХАРАКТЕРИСТИК_ТОВАРА", "ДЛЯ_ГРУППЫ_ТОВАРОВ", "НЕ_УКАЗАНА".
//                 Группировка - СправочникСсылка.ГруппировкиТоварныхОграничений - Группировка товарных ограничений, для которой установлена настройка.
//                 МетодОбеспеченияПотребностей - ПеречислениеСсылка.МетодОбеспеченияПотребностей - Значение параметра "Метод обеспечения потребностей".
//                 СтраховоеКоличествоЗапаса - Число - Значение параметра "Страховое количество запаса".
//                 МинимальноеКоличествоЗапаса- Число - Значение параметра "Минимальное количество запаса".
//                 МаксимальноеКоличествоЗапаса- Число - Значение параметра "Максимальное количество запаса".
//                 НормаПотребления - Число - Значение параметра "Норма потребления".
//                 УпаковкаЗаказа - СправочникСсылка.УпаковкиЕдиницыИзмерения - Значение параметра "Упаковка заказа".
//                 ОбеспечениеЗаказовПриПоддержанииЗапаса - ПеречислениеСсылка.ОбеспечениеЗаказовПриПоддержанииЗапаса - Значение параметра "Обеспечение заказов при поддержании запаса".
//
Функция ПараметрыПоддержанияЗапасаТовараНаСкладе(Ключ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Номенклатура   КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Склад          КАК Склад
	|ПОМЕСТИТЬ ВтКлючЗаписи
	|;
	|
	|////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СпособУказанияНастройки                                   КАК СпособУказанияНастройки,
	|	ТоварныеОграничения.Группировка                            КАК Группировка,
	|	ТоварныеОграничения.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
	|	ТоварныеОграничения.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
	|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
	|	ТоварныеОграничения.СреднедневноеПотребление               КАК НормаПотребления,
	|	ТоварныеОграничения.МетодОбеспеченияПотребностей           КАК МетодОбеспеченияПотребностей,
	|	ТоварныеОграничения.УпаковкаЗаказа                         КАК УпаковкаЗаказа,
	|	ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса
	|ИЗ
	|	ВтКлючЗаписи КАК КлючЗаписи
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
	|		ПО &ПодстановкаТоварногоОграничения";
	
	Запрос.Текст = ПодставитьСоединение(
		Запрос.Текст,
		"ПодстановкаТоварногоОграничения",
		"КлючЗаписи.Номенклатура,КлючЗаписи.Характеристика,КлючЗаписи.Склад");
		
	// Вычисление поля "Способ указания настройки", использует служебные таблицы функции ПодставитьСоединение(...).
	ПодстановкаСпособУказанияНастройки =
		"ВЫБОР КОГДА НЕ НастройкаДетальная.Номенклатура ЕСТЬ NULL ТОГДА
		|			""ДЛЯ_ТОВАРА""
		|		КОГДА НЕ ПринадлежностьГруппе.Номенклатура ЕСТЬ NULL ТОГДА
		|			""ДЛЯ_ГРУППЫ_ТОВАРОВ""
		|		КОГДА НЕ НастройкаБезХарактеристик.Номенклатура ЕСТЬ NULL ТОГДА
		|			""ДЛЯ_ХАРАКТЕРИСТИК_ТОВАРА""
		|		ИНАЧЕ
		|			NULL
		|	КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СпособУказанияНастройки", ПодстановкаСпособУказанияНастройки);
	
	Запрос.УстановитьПараметр("Номенклатура",   Ключ.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Ключ.Характеристика);
	Запрос.УстановитьПараметр("Склад",          Ключ.Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеНастройки = Новый Структура();
	ЗначениеНастройки.Вставить("СпособУказанияНастройки", "НЕ_УКАЗАНА");
	ЗначениеНастройки.Вставить("Группировка", Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка());
	ЗначениеНастройки.Вставить("МетодОбеспеченияПотребностей", Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ);
	ЗначениеНастройки.Вставить("СтраховоеКоличествоЗапаса", 0.000);
	ЗначениеНастройки.Вставить("МинимальноеКоличествоЗапаса", 0.000);
	ЗначениеНастройки.Вставить("МаксимальноеКоличествоЗапаса", 0.000);
	ЗначениеНастройки.Вставить("НормаПотребления", 0.000);
	ЗначениеНастройки.Вставить("УпаковкаЗаказа", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ЗначениеНастройки.Вставить("ОбеспечениеЗаказовПриПоддержанииЗапаса", Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов);
	
	Если Выборка.Следующий() И Выборка.СпособУказанияНастройки <> NULL Тогда
		
		ЗаполнитьЗначенияСвойств(ЗначениеНастройки, Выборка);
		
	КонецЕсли;
	
	Если ЗначениеНастройки.МетодОбеспеченияПотребностей <> Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме Тогда
		ЗначениеНастройки.НормаПотребления = 0.000;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодставитьВыраженияПолейВыборки(РезультатПодстановки, Поля, СинонимТаблицы)
	
	Для Каждого Поле Из Поля Цикл
		
		ПодстрокаПоиска = СинонимТаблицы + "." + Поле.Имя;
		ПодстрокаЗамены = "	ЕСТЬNULL(НастройкаДетальная.Имя, ЕСТЬNULL(НастройкаГруппировки.Имя, НастройкаБезХарактеристик.Имя))";
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Имя", Поле.Имя);
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
КонецПРоцедуры

Функция ЗаписатьТоварныеОграничения(Таблица, ДанныеЗаполнения, Группировка = Неопределено)
	
	Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
	Набор.Добавить();
	Запись = Набор[0];
	
	ОбработанныеСтроки = Новый Массив();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Набор.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
		Набор.Отбор.Характеристика.Установить(СтрокаТаблицы.Характеристика);
		Набор.Отбор.Склад.Установить(СтрокаТаблицы.Склад);
		Если ЗначениеЗаполнено(Группировка) Тогда
			Набор.Отбор.Группировка.Установить(Группировка);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаполнения);
		
		Попытка
			
			Набор.Записать();
			ОбработанныеСтроки.Добавить(СтрокаТаблицы.Идентификатор);
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	Возврат ОбработанныеСтроки;
	
КонецФункции

Функция УдалитьТоварныеОграничения(Таблица)
	
	Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
	ОбработанныеСтроки = Новый Массив();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Набор.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
		Набор.Отбор.Характеристика.Установить(СтрокаТаблицы.Характеристика);
		Набор.Отбор.Склад.Установить(СтрокаТаблицы.Склад);
		Набор.Отбор.Группировка.Установить(Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка());
		
		Попытка
			
			Набор.Записать();
			ОбработанныеСтроки.Добавить(СтрокаТаблицы.Идентификатор);
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	Возврат ОбработанныеСтроки;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы


Процедура ЗаполнитьМетодОбеспеченияПотребностейОтметитьКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварныеОграничения.Склад,
	|	ТоварныеОграничения.Номенклатура,
	|	ТоварныеОграничения.Характеристика
	|ИЗ
	|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
	|ГДЕ
	|	ТоварныеОграничения.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Исправляет ошибку пустого метода обеспечения в регистре Товарные ограничения
Процедура ЗаполнитьМетодОбеспеченияПотребностейЗаписатьДанные(Параметры) Экспорт
	
	// Получение данных для обработки. Таблица уже проверена на возможность обработки
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
        Параметры.Очередь, 
		"РегистрСведений.ТоварныеОграничения"
    );
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
				ЭлементБлокировки.УстановитьЗначение("Склад", Выборка.Склад);
				ЭлементБлокировки.УстановитьЗначение("Номенклатура", Выборка.Номенклатура);
				ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			Набор.Отбор.Склад.Установить(Выборка.Склад);
			Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
			Набор.Прочитать();
			
			Если Набор.Количество() > 0 Тогда
				
				Запись = Набор[0];
				
				Если Не ЗначениеЗаполнено(Запись.МетодОбеспеченияПотребностей) Тогда
					Запись.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				КонецЕсли;
				
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать регистр: ""Товарные ограничения"" по причине: %Причина%';uk='Не вдалося обробити регістр: ""Товарні обмеження"" по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ТоварныеОграничения,
				,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        "РегистрСведений.ТоварныеОграничения"
    );
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
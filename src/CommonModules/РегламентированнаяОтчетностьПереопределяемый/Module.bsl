
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ
//

// Функция возвращает сведения об организации.
//
// Параметры:
//  Организация       - ссылка на элемент справочника "Организации";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
// Пример:
//	ОргСведения = Новый Структура;
//  Для Каждого Показатель Из СписокПоказателей Цикл
//  	ИмяПоказателя = Показатель.Представление;
//      Если Имяпоказателя = "КодНО" Тогда
//      	Значение = Организация.КодНалоговогоОргана;
//      ИначеЕсли ИмяПоказателя = "ОГРН" Тогда
//      	Значение = Организация.ОГРН;
//      Иначе
//      	Значение = "";
//      КонецЕсли;
//      ОргСведения.Вставить(ИмяПоказателя, Значение);
//  КонецЦикла;
//  Возврат ОргСведения;
//
Функция ПолучитьСведенияОбОрганизацииБП(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
				
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	//Для Каждого Показатель Из СписокПоказателей Цикл

	//	ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
	//	Значение = "";
	//	
	//	Если ИмяПоказателя = "ФИОРук" Тогда
	//		
	//		Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация,Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

	//		ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(КонецДня(ДатаЗначения), Данные);

	//		Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат.ФизическоеЛицо;
	//			ДанныеФИО = Новый Структура("ФизическоеЛицо",Результат.ФизическоеЛицо);
	//			ФИОСрез = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
	//			Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
	//			
	//		КонецЕсли;

	//	ИначеЕсли ИмяПоказателя = "ИННРук" Тогда
	//	
	//		Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	//		ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(КонецДня(ДатаЗначения), Данные);
	//		Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	//		
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат.ФизическоеЛицо.КодПоДРФО;
	//		КонецЕсли;
	//		
	//	ИначеЕсли ИмяПоказателя = "ФИОБух" Тогда
	//		
	//		Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

	//		ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(КонецДня(ДатаЗначения), Данные);

	//		Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат.ФизическоеЛицо;
	//			ДанныеФИО = Новый Структура("ФизическоеЛицо",Результат.ФизическоеЛицо);
	//			ФИОСрез = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
	//			Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
	//			
	//		КонецЕсли;
	//		
	//	ИначеЕсли ИмяПоказателя = "ИННБух" Тогда
	//		
	//		Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	//		ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(КонецДня(ДатаЗначения), Данные);
	//		Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	//			
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат.ФизическоеЛицо.КодПоДРФО;
	//		КонецЕсли;
	//		
	//	ИначеЕсли ВРЕГ(ИмяПоказателя) = ВРЕГ("КодПоЕДРПОУ") Тогда
	//		
	//		Значение = Организация.КодПоЕДРПОУ;
	//		
	//	ИначеЕсли ВРЕГ(ИмяПоказателя) = ВРЕГ("НаименованиеПолное") Тогда
	//		
	//		Значение = Организация.НаименованиеПолное;
	//		
	//	ИначеЕсли ВРЕГ(ИмяПоказателя) = ВРЕГ("ДатаНачалаИспользованияЗвит1С") Тогда
	//		
	//		Значение = Организация.ДатаНачалаИспользованияЗвит1С;
	//		
	//	ИначеЕсли ИмяПоказателя = "КодКОАТУУ" Тогда
	//		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].КодКОАТУУ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	// 	ИначеЕсли ИмяПоказателя = "КодКФВ" Тогда
	//		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].КодКФВ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "КодСПОДУ" Тогда
	//		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].КодСПОДУ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "КодЗКГНГ" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].КодЗКГНГ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "КодКВЕД" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда  
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].КодКВЕД;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "Территория" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].Территория;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "ФормаСобственности" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].ФормаСобственности;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "ОрганГУ" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].ОрганГУ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "Отрасль" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].Отрасль;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "ВЭД" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].ВЭД;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "НомерФССНесчСлучай" Тогда
	//		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].НомерФССНесчСлучай;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "НомерРегистрацииПФ" Тогда
	//		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].НомерРегистрацииПФ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "КодОрганаПФУ" Тогда
	//		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].КодОрганаПФУ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "НомерФССБезработица" Тогда
	//		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда  
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].НомерРегистрацииВСлужбеЗанятости;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//    ИначеЕсли ИмяПоказателя = "НомерФССУтратаТрудосп" Тогда
	//		Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].НомерФСС;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;	
	//	ИначеЕсли ИмяПоказателя = "ИНН" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда  
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].ИНН;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "НомерСвидетельства" Тогда
	//		
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].НомерСвидетельства;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//		
	//	ИначеЕсли ИмяПоказателя = "НалоговаяИнспекция" Тогда
	//		
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].НалоговаяИнспекция.Ссылка;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	
	//	ИначеЕсли ИмяПоказателя ="ДатаРегистрации" Тогда 
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].ДатаРегистрации;
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя ="НомерРегистрации" Тогда 
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].НомерРегистрации;
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "КодОПФГ" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].КодОПФГ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "ОПФГ" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].ОПФГ;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли;
	//	ИначеЕсли ИмяПоказателя = "КПР" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Данные = Новый Структура("Организация",Организация); 
	//			КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
	//			Если КодыОрганизации.Количество()> 0 Тогда
	//				Результат = КодыОрганизации[0].КлассПрофессиональногоРиска;
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли
	//	
	//	ИначеЕсли ИмяПоказателя = "ЮридическийАдрес" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Результат = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = СокрЛП(Результат);
	//		КонецЕсли
	//	ИначеЕсли ИмяПоказателя = "ФактическийАдрес" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Результат = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(Организация,"Фактический");
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = СокрЛП(Результат);
	//		КонецЕсли
	//	ИначеЕсли ИмяПоказателя = "Email" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Результат = БухгалтерскийУчетПереопределяемый.ПолучитьEmailИзКонтактнойИнформации(Организация);
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли
	//	ИначеЕсли ИмяПоказателя = "Телефон" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Результат = БухгалтерскийУчетПереопределяемый.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = ОставитьТолькоЦифры(Результат);
	//		КонецЕсли
	//	ИначеЕсли ИмяПоказателя = "Факс" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			Результат = БухгалтерскийУчетПереопределяемый.ПолучитьФаксИзКонтактнойИнформации(Организация);
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = ОставитьТолькоЦифры(Результат);
	//		КонецЕсли
	//		
	//	ИначеЕсли ИмяПоказателя = "Индекс" Тогда
	//		Если ЗначениеЗаполнено(Организация) Тогда 
	//			ВидКИ = Справочники.ВидыКонтактнойИнформации["ЮрАдресОрганизации"].Ссылка;
	//			ТипКИ = Перечисления.ТипыКонтактнойИнформации["Адрес"];

	//			ТабЗн           = Организация.КонтактнаяИнформация.Выгрузить();
	//			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
	//			
	//			Если НайденныеСтроки.Количество() > 0 Тогда
	//				
	//				ЗначенияПолей = НайденныеСтроки[0].ЗначенияПолей;
	//				
	//				ДанныеАдреса = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(ЗначенияПолей, , ТипКИ);
	//				Результат = Формат(КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(ДанныеАдреса), "ЧГ=");
	//				
	//			КонецЕсли;
	//		КонецЕсли;	
	//		Если Результат <> Неопределено Тогда
	//			Значение = Результат;
	//		КонецЕсли
	//	КонецЕсли;
	//
	//	ОргСведения.Вставить(ИмяПоказателя, Значение);

	//КонецЦикла;

	Возврат ОргСведения;

КонецФункции

// Функция возвращает номер телефона организации.
//
// Параметры:
//  Организация       - ссылка на элемент справочника "Организации";
//  ВидКИ 			  - вид контактной информации телефон/факс.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
Функция ПолучитьТелефонФаксОрганизацииПоПолямБП(Знач Организация, Знач ВидКИ = "Телефон") Экспорт

	//Если ВРег(ВидКИ) = ВРег("Факс") Тогда
	//	Начало = "Факс";	
	//Иначе
	//	Начало = "Телефон";		
	//КонецЕсли;
	//Окончание = "Организации";
	//ВидКИ = Справочники.ВидыКонтактнойИнформации[Начало + Окончание].Ссылка;
	//ТипКИ = Перечисления.ТипыКонтактнойИнформации[Начало];

	//ТабЗн           = Организация.КонтактнаяИнформация.Выгрузить();
	//НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
	//
	//Если НайденныеСтроки.Количество() > 0 Тогда
	//	ЗначенияПолей = НайденныеСтроки[0].ЗначенияПолей;
	//	Результат = КонтактнаяИнформацияСлужебный.ДесериализацияТелефона(ЗначенияПолей, , ТипКИ).Состав;
	//	
	//	Возврат Результат;
	//	
	//КонецЕсли;
	
	Возврат Новый Структура("КодГорода, Номер", "", "");
	
КонецФункции

// Функция возвращает номер телефона ответственного лица организации.
//
// Параметры:
//  Организация       		- ссылка на элемент справочника "Организации";
//  ВидОтветственногоЛица 	- вид ответственного лица.
//  
// Возвращаемое значение:
//  Строка.
Функция ПолучитьТелефонОтветственногоЛицаБП(Форма, ВидОтветственногоЛица) Экспорт
	
	Телефон = "";
	
	//Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо", Форма.СтруктураРеквизитовФормы.Организация, ВидОтветственногоЛица);
	//Данные = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Данные);
	//Результат = Данные.Найти(ВидОтветственногоЛица);

	//Если Результат <> Неопределено Тогда
	//	
	//	ОтветственноеЛицо = Результат.ФизическоеЛицо;
	//	
	//	ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонРабочийФизическиеЛица"];
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("Объект", ОтветственноеЛицо);
	//	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	//	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	//	
	//	Запрос.Текст = "
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//	|	КонтактнаяИнформация.Представление
	//	|ИЗ
	//	|	Справочник.ФИзическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
	//	|ГДЕ
	//	|	КонтактнаяИнформация.Ссылка = &Объект
	//	|	И
	//	|	КонтактнаяИнформация.Тип = &Тип
	//	|	И
	//	|	КонтактнаяИнформация.Вид = &Вид
	//	|";
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если РезультатЗапроса.Пустой() Тогда
	//		Телефон =  "";
	//	Иначе
	//		Телефон =  РезультатЗапроса.Выгрузить()[0].Представление;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат Телефон;
	
КонецФункции 


//ЕРП
Функция ПолучитьСведенияОбОрганизацииЕРП(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
				
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл

		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		Значение = "";
		
		Если ИмяПоказателя = "ФИОРук" Тогда
				
			Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, КонецДня(ДатаЗначения), 
						Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				
			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо;
				ДанныеФИО = Новый Структура("ФизическоеЛицо",Результат.ФизическоеЛицо);
				ФИОСрез = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
				Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
				
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ИмяФАМИЛИЯРук" Тогда
				
			Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, КонецДня(ДатаЗначения), 
						Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				
			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо;
				ДанныеФИО = Новый Структура("ФизическоеЛицо",Результат.ФизическоеЛицо);
				ФИОСрез = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
				Значение = СокрЛ(ФИОСрез.Имя) + " " + ВРЕГ(СокрЛП(ФИОСрез.Фамилия));
				
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ИННРук" Тогда
			
			Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, КонецДня(ДатаЗначения), 
						Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				
			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо.КодПоДРФО;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФИОБух" Тогда
			
			Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, КонецДня(ДатаЗначения), 
						Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
				
			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо;
				ДанныеФИО = Новый Структура("ФизическоеЛицо",Результат.ФизическоеЛицо);
				ФИОСрез = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
				Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИмяФАМИЛИЯБух" Тогда
			
			Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, КонецДня(ДатаЗначения), 
						Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
				
			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо;
				ДанныеФИО = Новый Структура("ФизическоеЛицо",Результат.ФизическоеЛицо);
				ФИОСрез = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
				Значение = СокрЛ(ФИОСрез.Имя) + " " + ВРЕГ(СокрЛП(ФИОСрез.Фамилия));
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННБух" Тогда
			
			Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, КонецДня(ДатаЗначения), 
						Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
			
			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо.КодПоДРФО;
			КонецЕсли;
			
		ИначеЕсли ВРЕГ(ИмяПоказателя) = ВРЕГ("КодПоЕДРПОУ") Тогда
			
			Значение = Организация.КодПоЕДРПОУ;
			
		ИначеЕсли ВРЕГ(ИмяПоказателя) = ВРЕГ("НаименованиеПолное") Тогда
			
			Значение = Организация.НаименованиеПолное;
			
		ИначеЕсли ВРЕГ(ИмяПоказателя) = ВРЕГ("ДатаНачалаИспользованияЗвит1С") Тогда
			
			Значение = Организация.ДатаНачалаИспользованияЗвит1С;
			
		ИначеЕсли ИмяПоказателя = "КодКОАТУУ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Результат = Организация.КодКОАТУУ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодКАТОТТГ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Результат = Организация.КодКАТОТТГ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
 		ИначеЕсли ИмяПоказателя = "КодКФВ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Результат = Организация.КодКФВ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодСПОДУ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Результат = Организация.КодСПОДУ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодЗКГНГ" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.КодЗКГНГ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодКВЕД" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда  
				Результат = Организация.КодКВЕД;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Территория" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.Территория;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ФормаСобственности" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.ФормаСобственности;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ОрганГУ" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.ОрганГУ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Отрасль" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.Отрасль;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ВЭД" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.ВЭД;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерФССНесчСлучай" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Результат = Организация.НомерФССНесчСлучай;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерРегистрацииПФ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Результат = Организация.НомерРегистрацииПФ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодОрганаПФУ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Результат = Организация.КодОрганаПФУ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерФССБезработица" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда  
				Результат = Организация.НомерРегистрацииВСлужбеЗанятости;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
        ИначеЕсли ИмяПоказателя = "НомерФССУтратаТрудосп" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Результат = Организация.НомерФСС;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;	
		ИначеЕсли ИмяПоказателя = "ИНН" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда  
				Результат =  БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, КонецДня(ДатаЗначения)).ИНН;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерСвидетельства" Тогда
			
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат =  БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, КонецДня(ДатаЗначения)).НомерСвидетельства;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НалоговаяИнспекция" Тогда
			
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.НалоговаяИнспекция;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		
		ИначеЕсли ИмяПоказателя ="ДатаРегистрации" Тогда 
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.ДатаРегистрации;
			КонецЕсли;
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя ="НомерРегистрации" Тогда 
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.НомерРегистрации;
			КонецЕсли;
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодОПФГ" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.КодОПФГ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ОПФГ" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.ОПФГ;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПР" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = Организация.КлассПрофессиональногоРиска;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли
		ИначеЕсли ИмяПоказателя = "ЮридическийАдрес" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат =  БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация,ДатаЗначения).ЮридическийАдрес;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = СокрЛП(Результат);
			КонецЕсли
		ИначеЕсли ИмяПоказателя = "ФактическийАдрес" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат =  БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация,ДатаЗначения).ФактическийАдрес;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = СокрЛП(Результат);
			КонецЕсли
		ИначеЕсли ИмяПоказателя = "Email" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации, КонецДня(ДатаЗначения));
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли
		ИначеЕсли ИмяПоказателя = "Телефон" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, КонецДня(ДатаЗначения));
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = ОставитьТолькоЦифры(Результат);
			КонецЕсли
		ИначеЕсли ИмяПоказателя = "Факс" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, КонецДня(ДатаЗначения));
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = ОставитьТолькоЦифры(Результат);
			КонецЕсли
		ИначеЕсли ИмяПоказателя = "Индекс" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				ВидКИ = Справочники.ВидыКонтактнойИнформации["ЮрАдресОрганизации"].Ссылка;
				ТипКИ = Перечисления.ТипыКонтактнойИнформации["Адрес"];

				ТабЗн           = Организация.КонтактнаяИнформация.Выгрузить();
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ЗначенияПолей = НайденныеСтроки[0].ЗначенияПолей;
					
					ДанныеАдреса=УправлениеКонтактнойИнформациейСлужебный.СведенияОбАдресеВВидеСтруктуры(ЗначенияПолей, ТипКИ); 
					Результат = Формат(ДанныеАдреса.Индекс, "ЧГ=");
					
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли
		КонецЕсли;
	
		ОргСведения.Вставить(ИмяПоказателя, Значение);

	КонецЦикла;

	Возврат ОргСведения;

КонецФункции


// Функция возвращает номер телефона организации.
//
// Параметры:
//  Организация       - ссылка на элемент справочника "Организации";
//  ВидКИ 			  - вид контактной информации телефон/факс.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
Функция ПолучитьТелефонФаксОрганизацииПоПолямЕРП(Знач Организация, Знач ВидКИ = "Телефон") Экспорт

	Если ВРег(ВидКИ) = ВРег("Факс") Тогда
		Начало = "Факс";	
	Иначе
		Начало = "Телефон";		
	КонецЕсли;
	Окончание = "Организации";
	ВидКИ = Справочники.ВидыКонтактнойИнформации[Начало + Окончание].Ссылка;
	ТипКИ = Перечисления.ТипыКонтактнойИнформации[Начало];

	ТабЗн           = Организация.КонтактнаяИнформация.Выгрузить();
	НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", ТипКИ, ВидКИ));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗначенияПолей = НайденныеСтроки[0].ЗначенияПолей;
		Результат = УправлениеКонтактнойИнформациейСлужебный.ДесериализацияТелефона(ЗначенияПолей, , ТипКИ).Состав;
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Новый Структура("КодГорода, Номер", "", "");
	
КонецФункции

// Функция возвращает номер телефона ответственного лица организации.
//
// Параметры:
//  Организация       		- ссылка на элемент справочника "Организации";
//  ВидОтветственногоЛица 	- вид ответственного лица.
//  
// Возвращаемое значение:
//  Строка.
Функция ПолучитьТелефонОтветственногоЛицаЕРП(Форма, ВидОтветственногоЛица) Экспорт
	
	Телефон = "";
	Результат = Неопределено;
		
	Если ВидОтветственногоЛица = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
	
		Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Форма.СтруктураРеквизитовФормы.Организация, 
					КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Иначе			
	
		Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Форма.СтруктураРеквизитовФормы.Организация, 
					КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	КонецЕсли;
		
	Если Результат <> Неопределено Тогда
		
		ОтветственноеЛицо = Результат.ФизическоеЛицо;
		
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонРабочийФизическиеЛица"];
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", ОтветственноеЛицо);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.ФИзическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Вид = &Вид
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Телефон =  "";
		Иначе
			Телефон =  РезультатЗапроса.Выгрузить()[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Телефон;
	
КонецФункции 

Функция ПолучитьКодЯзыкаИнтерфейса() Экспорт
	
	Возврат Локализация.КодЯзыкаИнтерфейса();
		
КонецФункции

Функция ПолучитьКодЯзыкаИнтерфейсаBASERP() Экспорт
	
	//Возврат МультиязычностьУкр.КодЯзыкаИнтерфейса();
		
КонецФункции

Функция ПолучитьНомерНаПечать(НомерОбъекта, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс) Экспорт
	
	Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерОбъекта, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс);
		
КонецФункции

Функция ПолучитьНомерНаПечатьBASERP(НомерОбъекта, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс) Экспорт
	
	//ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерОбъекта, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс);
		
КонецФункции

Функция ОставитьТолькоЦифры(Текст);
	
	Сч = 1;
	Пока Сч <= СтрДлина(Текст) Цикл
	    Если Найти("01234567890", Сред(Текст, Сч, 1)) = 0 Тогда
			Текст = Лев(Текст, Сч-1) + Сред(Текст, Сч + 1);
		Иначе
			Сч = Сч + 1
		КонецЕсли;
	КонецЦикла; 
	Возврат Текст;
	
КонецФункции
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОМАТИЧЕСКОГО ЗАПОЛНЕНИЯ
//


// Функция возвращает структуру показателей.
// Ключ структуры – идентификатор показателя.
// Значение структуры – массив из двух элементов:
// 	- признак автозаполнения показателя;
//	- признак расшифровки показателя.
//
// Параметры:
// 	ИДОтчета         - идентификатор отчета;
//	ИДРедакцииОтчета - идентификатор редакции формы отчета;
//  ПараметрыОтчета  - структура параметров отчета.
//
// Пример:
//	ПоказателиОтчета = Новый Структура;
//	Если ИДОтчета = "РегламентированныйОтчетБаланс" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
//			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Истина);
//		КонецЕсли;
//	КонецЕсли;
//	Возврат ПоказателиОтчета;
//
Функция ПолучитьСведенияОПоказателяхОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	ПоказателиОтчета = Новый Структура;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Функция возвращает идентификатор конфигурации.
// Длина идентификатора не должна превышать 8 символов.
//
// Пример:
//  Возврат "БПКОРП";
//
Функция ИДКонфигурации(СУчетомРедакцииЕРП = ЛОЖЬ) Экспорт
	
	ИДКонфигурации =  Метаданные.Имя;
	Если    Найти(ВРег(ИДКонфигурации), ВРег("БухгалтерияДляУкраины")) > 0 
		ИЛИ Найти(ВРег(ИДКонфигурации), ВРег("РегламентированнаяОтчетность")) > 0 Тогда
		Возврат "БП";
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("ЗарплатаИУправлениеПерсоналомДляУкраины")) > 0 Тогда
		Возврат "ЗУП";
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("УправлениеПроизводственнымПредприятиемДляУкраины")) > 0 Тогда
		Возврат "УПП";
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("УправлениеТорговымПредприятиемДляУкраины")) > 0 Тогда
	    Возврат "УТП";	
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("BASУправлениеТорговлей")) > 0 Тогда
		Возврат "BASУТ";	
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("УправлениеТорговлей")) > 0 Тогда
		Возврат "УТ";	
 	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("BASERP")) > 0 Тогда
		Возврат "ЕРП";	
 	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("BASКомплексноеУправление")) > 0 Тогда
		Если СУчетомРедакцииЕРП Тогда
			Возврат "КУП";	
		Иначе
			Возврат "ЕРП";	
		КонецЕсли;
	Иначе
		Возврат ИДКонфигурации;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор подсистемы зарплаты.
// Длина идентификатора не должна превышать 8 символов.
//
// Пример:
//  Возврат "ЕРПЗИК";
//
Функция ИДПодсистемыЗарплаты() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда 
		Возврат "ЕРПЗИК"; 
	Иначе
		Возврат "БП";
	КонецЕсли;
	
КонецФункции


// Функция возвращает краткое название конфигурации.
// Длина возвращаемого значения не должна превышать 30 символов.
//
//
Функция КраткоеНазваниеПрограммы() Экспорт
		
	МетаданныеИмя = Метаданные.Имя;
	Возврат МетаданныеИмя;
	
КонецФункции

// Функция возвращает сведения о текущем пользователе.
// Возвращает структуру.
//
Функция СведенияТекущегоПользователя() Экспорт
		
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		Возврат Пользователи.ТекущийПользователь().ФизическоеЛицо;
	Иначе
		Возврат Пользователи.ТекущийПользователь().ФизЛицо;
	КонецЕсли;	
	//Возврат Пользователи.ТекущийПользователь().ФизическоеЛицо;
	
КонецФункции


// Процедура возвращает ссылку на предопределенный элемент из справочника "ВидыКонтактнойИнформации".
//
// Параметры:
//  ВидКИ      - ссылка на предопределенный элемент справочника "ВидыКонтактнойИнформации".
//  НаимВидаКИ - Строка - наименование предопределенного элемента справочника "ВидыКонтактнойИнформации".
//
// Пример:
//  ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
//
Процедура ПолучитьВидКонтактнойИнформации(ВидКИ, НаимВидаКИ) Экспорт
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
	
КонецПроцедуры


// Функция возвращает заголовок формы "УправлениеОтчетностью" обработки "ОбщиеОбъектыРегламентированнойОтчетности".
// Если функция возвращает пустую строку, то используется заголовок формы, указанный по умолчанию.
//
// Пример:
//  Возврат "";
//
Функция ЗаголовокФормыУправлениеОтчетностью() Экспорт
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕГРАЦИИ СО СПИСКОМ ЗАДАЧ БУХГАЛТЕРА 


// Процедура изменят заголовки кнопок.
//
Процедура НастроитьКнопкиКалендаряБухгалтера(КнопкаСправочникОтчетов = Неопределено, КнопкаКалендарь = Неопределено) Экспорт
	
	Если КнопкаКалендарь <> Неопределено Тогда
		КнопкаКалендарь.Заголовок = НСтр("ru='Календарь бухгалтера';uk='Календар бухгалтера'");
	КонецЕсли;
	
КонецПроцедуры
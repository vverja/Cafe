&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаКлиенте
Перем ПараметрыОбработчика;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		ДляВыбора = Истина;
	КонецЕсли;
    
	
	УпрощенныйВводДоступен      = ПартнерыИКонтрагенты.УпрощенныйВводДоступен();
	ИспользоватьБизнесРегионы   = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы");
	ФиксироватьПервичныйИнтерес = ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес");
	ИспользуютсяТолькоПартнеры  = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ЭтоБазовая                  = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыКомпанияЧастноеЛицо.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыПодвал.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыБудетСоздан.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ДекорацияПервичнаяИнформацияЗагрузить.Видимость = Не ЭтоБазовая;
	ОткрытьПослеСоздания = Истина;
	
	ОсновнойМенеджер      = Пользователи.ТекущийПользователь();
	ВалютаРеглУчета       = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаДенежныхСредств = ВалютаРеглУчета;
	
	ЕстьПравоВключенияВСегмент = СегментыСервер.ЕстьПравоИзмененияСоставаСегментов("Партнеры");
	Элементы.Сегмент.Видимость = ЕстьПравоВключенияВСегмент;
	
	Если Параметры.Свойство("СписокОтборПоТипуПартнера") Тогда
		
		Для каждого ЭлементСписка Из Параметры.СписокОтборПоТипуПартнера Цикл
			ЭтаФорма[ЭлементСписка.Значение] = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбслуживаетсяТорговымиПредставителями Тогда
		Клиент = Истина;
	КонецЕсли;
	
	Если Перевозчик Тогда
		Поставщик = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
		
		Если Параметры.Основание.Свойство("Наименование") Тогда
			
			Если ИспользуютсяТолькоПартнеры Тогда
				ПолноеЮридическоеНаименование = Параметры.Основание.Наименование;
			Иначе
				ПолноеНаименование = Параметры.Основание.Наименование;
			КонецЕсли;
			
		ИначеЕсли Параметры.Основание.Свойство("Описание") Тогда
			
			Если ИспользуютсяТолькоПартнеры Тогда
				ПолноеЮридическоеНаименование = Параметры.Основание.Описание;
			Иначе
				ПолноеНаименование = Параметры.Основание.Описание;
			КонецЕсли;
			
		КонецЕсли;
        
		Если Параметры.Основание.Свойство("АдресЭППартнера") Тогда
			АдресЭППартнера = Параметры.Основание.АдресЭППартнера;
		КонецЕсли;
        
		Если Параметры.Основание.Свойство("ИННПлательщикаНДС") Тогда
			ИННПлательщикаНДС = Параметры.Основание.ИННПлательщикаНДС;
			УказыватьЮридическиеРеквизиты = Истина;
		КонецЕсли;
		
		Если Параметры.Основание.Свойство("КодФилиала") Тогда
			КодФилиала = Параметры.Основание.КодФилиала;
			УказыватьЮридическиеРеквизиты = Истина;
		КонецЕсли;
		
		Если Параметры.Основание.Свойство("СокращенноеНаименование") Тогда
			Если  ИспользуютсяТолькоПартнеры Тогда
				ПолноеНаименование = Параметры.Основание.СокращенноеНаименование;
			Иначе
				ПолноеЮридическоеНаименование = Параметры.Основание.СокращенноеНаименование;
				УказыватьЮридическиеРеквизиты = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если УказыватьЮридическиеРеквизиты Тогда
			НаименованиеКонтрагента = ?(ИспользуютсяТолькоПартнеры, ПолноеЮридическоеНаименование, ПолноеНаименование);
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("КонтрагентОснование") И ТипЗнч(Параметры.КонтрагентОснование) = Тип("Структура") Тогда
		
		ЗаполнитьНаОснованииКонтрагента(Параметры.КонтрагентОснование,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ВводНовогоРозничногоПокупателя") И Параметры.ВводНовогоРозничногоПокупателя Тогда
		
		ПриСозданииНовогоРозничногоПокупателя();
		
	ИначеЕсли Параметры.Свойство("ОснованиеОбособленныйКонтрагент") Тогда
		
		ПриСозданииНовогоГоловногоКонтрагента();
		
	КонецЕсли;
	
	//учесть возможность создания из взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтаФорма,Параметры,Ложь);
	
	ОбработатьЭлементыРедактированияКонтактнойИнформации();
	
	Если ЗначениеЗаполнено(Параметры.СсылкаНаФайл) Тогда
		ЕстьОшибкаЧтенияФайла = Ложь;
		РазобратьФайлНаСервере(Параметры.СсылкаНаФайл, ЕстьОшибкаЧтенияФайла);
	КонецЕсли;
	
	//группы доступа
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма, "ГруппаДоступа",, Тип("СправочникСсылка.Партнеры"), Истина);
	ИспользуютсяГруппыДоступаПартнеров = Справочники.ГруппыДоступаПартнеров.ИспользуютсяГруппыДоступа();
	Если Не ИспользуютсяГруппыДоступаПартнеров Тогда
		Элементы.ГруппаДоступаЧастноеЛицо.Видимость = Ложь;
	КонецЕсли;
	
	//ИспользуютсяТолькоПартнеры
	Если ИспользуютсяТолькоПартнеры Тогда
	
		УказыватьЮридическиеРеквизиты = Не НаОснованииДанныхРозничногоПокупателя;
		Элементы.СтраницыУказыватьЮрРеквизитыКонтрагентОснование.Видимость  = Ложь;
		Элементы.СтраницыУказыватьСоздаватьКонтрагентаОснование.Видимость   = Ложь;
		Элементы.РабочееНаименованиеЧастноеЛицо.Видимость                   = Ложь;
		Элементы.СокрЮрНаименованиеКонтрагента.Видимость                    = Ложь;
		Элементы.ДействиеСКонтрагентом.Видимость                            = Ложь;
		Элементы.УказатьБанковскийСчетКонтрагента.Заголовок                 = НСтр("ru='Указать данные банковского счета.';uk='Вказати дані банківського рахунку.'");
		Элементы.СтраницыНаименованиеПартнера.ТекущаяСтраница = Элементы.СтраницаСокрЮрНаименование;
		
		Элементы.ДействиеПоРезультатамНайдено.СписокВыбора.Удалить(1);
		Элементы.ДействиеПоРезультатамНайдено.СписокВыбора.Получить(0).Представление = НСтр("ru='Не регистрировать нового контрагента, использовать найденного.';uk='Не реєструвати нового контрагента, використовувати знайденого.'");
		Элементы.ДействиеПоРезультатамНайдено.СписокВыбора.Получить(1).Представление = НСтр("ru='Продолжить регистрацию нового контрагента.';uk='Продовжити реєстрацію нового контрагента.'");
	
	КонецЕсли;
	
	ВидимостьСтраницПервичнаяИнформация();
	
	УстановитьЗаголовки();
	
	ПрочитатьТаблицуСоответствияМФОСВИФТ();
    
    Если Параметры.Свойство("ТекстЗаполнения") Тогда
    	пТекстЗаполнения = СокрЛП(Параметры.ТекстЗаполнения);
    	Если Не пТекстЗаполнения = "" Тогда
    		Если Пактум_Сервер.ВероятноЕДРПОУ(пТекстЗаполнения) Тогда
    			КодПоЕДРПОУ = пТекстЗаполнения;
    		КонецЕсли;
        КонецЕсли;
    КонецЕсли;    
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьОшибкаЧтенияФайла Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Неверный формат файла';uk='Невірний формат файлу'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	УправлениеСтраницамиПодвал();
    
    Элементы.ДекорацияЗаполнитьПоЕГРПОУ.Видимость=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ВыполняетсяЗакрытие Тогда
		
		Если СозданиеВыполнено Тогда
			Возврат;
		КонецЕсли;
		                        
		НеобходимостьВопроса = Ложь;
		
		Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено И ДействиеПоРезультатамНайдено = 0 Тогда
			НеобходимостьВопроса = Ложь;
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаПервичнаяИнформация Тогда
			НеобходимостьВопроса = Истина;
		Иначе
			Если ЭтоКомпания = 0 Тогда
				Если ЗначениеЗаполнено(Название) Или ЗначениеЗаполнено(ТелефонПартнера) Или ЗначениеЗаполнено(АдресЭППартнера) Тогда
					НеобходимостьВопроса = Истина;
				ИначеЕсли УказыватьЮридическиеРеквизиты И (ВидКомпании = 0 Или ВидКомпании = 3) Тогда
					Если ЗначениеЗаполнено(НаименованиеКонтрагента) ИЛИ	ЗначениеЗаполнено(ИННПлательщикаНДС) ИЛИ ЗначениеЗаполнено(КодФилиала) ИЛИ ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда
						НеобходимостьВопроса = Истина;
					КонецЕсли;
				ИначеЕсли УказыватьЮридическиеРеквизиты И ВидКомпании = 1 Тогда
					Если ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
						НеобходимостьВопроса = Истина;
					КонецЕсли
				ИначеЕсли УказыватьЮридическиеРеквизиты И ВидКомпании = 2 Тогда
					Если ЗначениеЗаполнено(ФамилияКонтрагента) ИЛИ ЗначениеЗаполнено(ИмяКонтрагента) ИЛИ ЗначениеЗаполнено(ОтчествоКонтрагента) ИЛИ ЗначениеЗаполнено(ИННПлательщикаНДС) ИЛИ ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда
						НеобходимостьВопроса = Истина;
					КонецЕсли;
				ИначеЕсли УказатьДанныеКонтактногоЛица И (ЗначениеЗаполнено(ФамилияКЛ) ИЛИ ЗначениеЗаполнено(ИмяКЛ) ИЛИ ЗначениеЗаполнено(ОтчествоКЛ) ИЛИ
					ЗначениеЗаполнено(ТелефонКЛ) ИЛИ ЗначениеЗаполнено(АдресЭПКЛ) ИЛИ ЗначениеЗаполнено(МобильныйТелефонКЛ) ИЛИ
					ЗначениеЗаполнено(Роль)) Тогда
					НеобходимостьВопроса = Истина;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ФамилияПартнера) ИЛИ ЗначениеЗаполнено(ИмяПартнера) ИЛИ ЗначениеЗаполнено(ОтчествоПартнера) ИЛИ
					ЗначениеЗаполнено(АдресЭППартнераФизЛицо) ИЛИ ЗначениеЗаполнено(ТелефонПартнераФизЛицо) ИЛИ ЗначениеЗаполнено(ИННПлательщикаНДС) ИЛИ ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда 
					НеобходимостьВопроса = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимостьВопроса Тогда
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru='При закрытии формы введенная в нее информация будет утеряна. Закрыть?';uk='При закритті форми введена інформація буде втрачена. Закрити?'"),РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ВыполняетсяЗакрытие = Истина;
		Закрыть();
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиКонтактнойИнформации

#Область КонтактнаяИнформацияКонтактногоЛица

&НаКлиенте
Процедура ТелефонКЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
		"ТелефонКЛ",
		"ТелефонКЛЗначенияПолей",
		"НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКЛПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
		"ТелефонКЛ",
		"ТелефонКЛЗначенияПолей",
		"ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКЛОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
		"ТелефонКЛ",
		"ТелефонКЛЗначенияПолей",
		"Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныйТелефонКЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
		"МобильныйТелефонКЛ",
		"МобильныйТелефонКЛЗначенияПолей",
		"НачалоВыбора");
	
 КонецПроцедуры   

&НаКлиенте
Процедура МобильныйТелефонКЛПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
		"МобильныйТелефонКЛ",
		"МобильныйТелефонКЛЗначенияПолей",
		"ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныйТелефонКЛОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
		"МобильныйТелефонКЛ",
		"МобильныйТелефонКЛЗначенияПолей",
		"Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭПКЛПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияКомпании

&НаКлиенте
Процедура ТелефонПартнераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнера",
		"ТелефонПартнераЗначенияПолей",
		"НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнера",
		"ТелефонПартнераЗначенияПолей",
		"ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнера",
		"ТелефонПартнераЗначенияПолей",
		"Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭППартнераПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдрес",
	                                "ФактическийАдресЗначенияПолей",
	                                "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдрес",
	                                "ФактическийАдресЗначенияПолей",
	                                "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдрес",
	                                "ФактическийАдресЗначенияПолей",
	                                "Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
	                                "ЮридическийАдрес",
	                                "ЮридическийАдресЗначенияПолей",
	                                "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
	                                "ЮридическийАдрес",
	                                "ЮридическийАдресЗначенияПолей",
	                                "Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
	                                "ЮридическийАдрес",
	                                "ЮридическийАдресЗначенияПолей",
	                                "ПриИзменении");
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияЧастноеЛицо

&НаКлиенте
Процедура ТелефонПартнераФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнераФизЛицо",
		"ТелефонПартнераФизЛицоЗначенияПолей",
		"НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераФизЛицоПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнераФизЛицо",
		"ТелефонПартнераФизЛицоЗначенияПолей",
		"ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнераФизЛицо",
		"ТелефонПартнераФизЛицоЗначенияПолей",
		"Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресЧастноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдрес",
	                                "ФактическийАдресЗначенияПолей",
	                                "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресЧастноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдрес",
	                                "ФактическийАдресЗначенияПолей",
	                                "Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресЧастноеЛицоПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдрес",
	                                "ФактическийАдресЗначенияПолей",
	                                "ПриИзменении");
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияГоловногоКонтрагента

&НаКлиенте
Процедура ФактическийАдресГоловногоКонтрагентаПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдресГоловногоКонтрагента",
	                                "ФактическийАдресГоловногоКонтрагентаЗначенияПолей",
	                                "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресГоловногоКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдресГоловногоКонтрагента",
	                                "ФактическийАдресГоловногоКонтрагентаЗначенияПолей",
	                                "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресГоловногоКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
	                                "ФактическийАдресГоловногоКонтрагента",
	                                "ФактическийАдресГоловногоКонтрагентаЗначенияПолей",
	                                "Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресГоловногоКонтрагентаПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
	                                "ЮридическийАдресГоловногоКонтрагента",
	                                "ЮридическийАдресГоловногоКонтрагентаЗначенияПолей",
	                                "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресГоловногоКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
	                                "ЮридическийАдресГоловногоКонтрагента",
	                                "ЮридическийАдресГоловногоКонтрагентаЗначенияПолей",
	                                "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресГоловногоКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаСобытияЭлементаКИАдрес(Элемент,
	                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
	                                "ЮридическийАдресГоловногоКонтрагента",
	                                "ЮридическийАдресГоловногоКонтрагентаЗначенияПолей",
	                                "Очистка");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиБанковскихРеквизитов

#Область ОбщиеОбработчикиБанковскихРеквизитов

&НаКлиенте
Процедура БанкПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеБанка = ЭтаФорма[Элемент.Имя];
	
	Если ЗначениеЗаполнено(ЗначениеБанка) Тогда
		ПоказатьЗначение(Неопределено, ЗначениеБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МФОБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	Если Элемент.Имя = "МФОБанка" И Не ИностранныйБанк
		Или Элемент.Имя = "МФОБанкаГоловнойКонтрагент" И Не ИностранныйБанкГоловнойКонтрагент Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Реквизит", Элемент.Имя);
		ОткрытьФорму("Справочник.КлассификаторБанков.ФормаВыбора", СтруктураПараметров, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииБанковскихРеквизитов(Элемент, ЗначениеПоля, ТекущийБанк, ТекущийМФО, ТекущийСВИФТ, ТекущийКоррСчет, ТекущееПредставление)	
	
	СписокБанков = ПолучитьСписокБанковПоРеквизитам(
		Элемент.Имя,
		ЗначениеПоля,
		ТекущийБанк,
		ТекущийМФО,
		ТекущийКоррСчет);
	ФинансыКлиент.ПолучитьБанкПоРеквизитам(
		ЭтаФорма,
		Элемент,
		ЗначениеПоля,
		СписокБанков,
		ТекущийБанк);
	Если ЗначениеЗаполнено(ТекущийБанк) Тогда
		ЗаполнитьМФОиКоррСчет(
			ТекущийБанк,
			ТекущийМФО,
			ТекущийКоррСчет);
	КонецЕсли;
	
	ТекущееПредставление = ПредставлениеБанка(ТекущийБанк);
	
	ТекущийСВИФТ = СВИФТпоМФО(ТекущийМФО);
	
КонецПроцедуры

#КонецОбласти

#Область БанковскийСчетПартнера

&НаКлиенте
Процедура УказатьБанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	УправлениеДоступностьюРасчетныйСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ИностранныйБанкПриИзменении(Элемент)
	
	УправлениеЭлементамиБанковскийСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	
	ОтключитьОтметкуНезаполненного();
	
	БанкПоСчету = ПолучитьБанкПоНомеруСчета(НомерСчета);
	Если ЗначениеЗаполнено(БанкПоСчету) И БанкПоСчету <> Банк Тогда
		
		Банк = БанкПоСчету;
		
		ЗаполнитьМФОиКоррСчет(
		Банк,
		МФОБанка,
		КоррСчетБанка);
		
		ПредставлениеБанка = ПредставлениеБанка(Банк);
		
		СВИФТБанка = СВИФТпоМФО(МФОБанка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекстСообщения = "";
	ОчиститьСообщения();
	Валютный = ВалютаДенежныхСредств <> ВалютаРеглУчета;
	
	Если Не ПустаяСтрока(Текст)
		И Не ИностранныйБанк
		И Не РегламентированныеДанныеКлиентСервер.ПроверитьКорректностьНомераСчета(Текст, Валютный, ТекстСообщения) Тогда
		ВывестиСообщениеПользователю(ТекстСообщения, "НомерСчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	УправлениеЭлементамиБанковскийСчет();
	
КонецПроцедуры


&НаКлиенте
Процедура МФОБанкаПриИзменении(Элемент)	
	
	Если Не ИностранныйБанк Тогда
		ПриИзмененииБанковскихРеквизитов(Элемент, МФОБанка, Банк, МФОБанка, СВИФТБанка, КоррСчетБанка, ПредставлениеБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МФОБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	ТекущийБанк = Банк;

	ЗаполнитьМФОиКоррСчет(
		ВыбранноеЗначение,
		МФОБанка,
		КоррСчетБанка);
	Банк = ВыбранноеЗначение;
	
	Если Банк <> ТекущийБанк Тогда
		ПредставлениеБанка = ПредставлениеБанка(Банк);
	КонецЕсли;
	
	СВИФТБанка = СВИФТпоМФО(МФОБанка);
	
КонецПроцедуры


#КонецОбласти

#Область БанковскийСчетГоловногоКонтрагента

&НаКлиенте
Процедура УказатьБанковскийСчетГоловногоКонтрагентаПриИзменении(Элемент)
	
	УправлениеДоступностьюРасчетныйСчетГоловногоКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ИностранныйБанкГоловногоКонтрагентаПриИзменении(Элемент)
	
	УправлениеЭлементамиБанковскийСчетГоловногоКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаГоловногоКонтрагентаПриИзменении(Элемент)
	
	
	ОтключитьОтметкуНезаполненного();
	
	БанкПоСчету = ПолучитьБанкПоНомеруСчета(НомерСчетаГоловногоКонтрагента);
	Если ЗначениеЗаполнено(БанкПоСчету) И БанкПоСчету <> БанкГоловнойКонтрагент Тогда
		
		БанкГоловнойКонтрагент = БанкПоСчету;
		
		ЗаполнитьМФОиКоррСчет(
		БанкГоловнойКонтрагент,
		МФОБанкаГоловнойКонтрагент,
		КоррСчетБанкаГоловнойКонтрагент);
		
		ПредставлениеБанкаГоловнойКонтрагент = ПредставлениеБанка(БанкГоловнойКонтрагент);
		
		СВИФТБанкаГоловнойКонтрагент = СВИФТпоМФО(МФОБанкаГоловнойКонтрагент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаГоловногоКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекстСообщения = "";
	ОчиститьСообщения();
	Валютный = (ВалютаДенежныхСредствГоловнойКонтрагент <> ВалютаРеглУчета);
	
	Если НЕ ПустаяСтрока(Текст)
		И Не ИностранныйБанкГоловнойКонтрагент
		И НЕ РегламентированныеДанныеКлиентСервер.ПроверитьКорректностьНомераСчета(Текст, Валютный, ТекстСообщения) Тогда
		ВывестиСообщениеПользователю(ТекстСообщения,"НомерСчетаГоловногоКонтрагента");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствГоловнойКонтрагентПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	УправлениеЭлементамиБанковскийСчетГоловногоКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура МФОБанкаГоловнойКонтрагентПриИзменении(Элемент)	
	
	Если Не ИностранныйБанкГоловнойКонтрагент Тогда
		ПриИзмененииБанковскихРеквизитов(Элемент, МФОБанкаГоловнойКонтрагент,
			БанкГоловнойКонтрагент, МФОБанкаГоловнойКонтрагент, СВИФТБанкаГоловнойКонтрагент,
			КоррСчетБанкаГоловнойКонтрагент, ПредставлениеБанкаГоловнойКонтрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МФОБанкаГоловнойКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	ТекущийБанк = БанкГоловнойКонтрагент;

	ЗаполнитьМФОиКоррСчет(
		ВыбранноеЗначение,
		МФОБанкаГоловнойКонтрагент,
		КоррСчетБанкаГоловнойКонтрагент);
	БанкГоловнойКонтрагент = ВыбранноеЗначение;
	
	Если БанкГоловнойКонтрагент <> ТекущийБанк Тогда
		ПредставлениеБанкаГоловнойКонтрагент = ПредставлениеБанка(БанкГоловнойКонтрагент);
	КонецЕсли;
	
	СВИФТБанкаГоловнойКонтрагент = СВИФТпоМФО(МФОБанкаГоловнойКонтрагент);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область ТаблицаНайдено

&НаКлиенте
Процедура ДеревоНайденоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные =  Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Партнер);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНайденоПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьДеревоСравненияПартнеров", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоСравненияПартнеров

&НаКлиенте
Процедура ДеревоСравненияПартнеровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
		
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные =  Элементы.ДеревоСравненияПартнеров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.НайденоПоСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбособленныеПодразделения

&НаКлиенте
Процедура ОбособленныеПодразделенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ОбособленныеПодразделения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиПрочихРеквизитов

&НаКлиенте
Процедура ЭтоКомпанияПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура СокрЮрНаименованиеКонтрагентаПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(НаименованиеКонтрагента, ПолноеЮридическоеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПубличноеНаименованиеПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПоРезультатамНайденоПриИзменении(Элемент)
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСКонтрагентомПриИзменении(Элемент)
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКомпанииПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьЮридическиеРеквизитыЧастноеЛицоПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьЮридическиеРеквизитыПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьДанныеКонтактногоЛицаПриИзменении(Элемент)
	
	УстановитьДоступностьДанныхКонтактногоЛица(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	
	УправлениеЭлементамиПервичногоИнтереса(ЭтаФорма);
	Если НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		ИсточникПервичногоИнтереса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПризнакПартнераПриИзменении(Элемент)
	
	ОбновитьЗависимыеРеквизитыПризнакаПартнера(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДоступаПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного(); 
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПервичнаяИнформацияЗагрузитьНажатие(Элемент)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='XML файл';uk='XML файл'")+"(*.xml)|*.xml";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл';uk='Виберіть файл'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДекорацияПервичнаяИнформацияЗагрузитьНажатиеВыборФайла",
		ЭтотОбъект);
	
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПервичнаяИнформацияЗагрузитьНажатиеВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФайлЗагрузки = ВыбранныеФайлы[0];
	ДвоичныеДанные  = Новый ДвоичныеДанные(ФайлЗагрузки);
	СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ЕстьОшибкаЧтенияФайла = Ложь;
	РазобратьФайлНаСервере(СсылкаНаФайл, ЕстьОшибкаЧтенияФайла);
	Если ЕстьОшибкаЧтенияФайла Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Неверный формат файла';uk='Невірний формат файлу'"));
		Возврат;
	КонецЕсли;
	ЭтоКомпания = 0;
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(БизнесРегион) Тогда
			ОсновнойМенеджерБизнесРегиона = ПартнерыИКонтрагентыВызовСервера.ОсновнойМенеджерБизнесРегиона(БизнесРегион);
			Если ЗначениеЗаполнено(ОсновнойМенеджерБизнесРегиона) И ОсновнойМенеджерБизнесРегиона <> ОсновнойМенеджер Тогда
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для выбранного бизнес-региона основным менеджером является %1. Установить его основным менеджером партнера?';uk='Для вибраного бізнес-регіону є основним менеджером %1. Встановити його основним менеджером партнера?'"),ОсновнойМенеджерБизнесРегиона);
				Результат = Неопределено;

				ПоказатьВопрос(Новый ОписаниеОповещения("БизнесРегионПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ОсновнойМенеджерБизнесРегиона", ОсновнойМенеджерБизнесРегиона)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОсновнойМенеджерБизнесРегиона = ДополнительныеПараметры.ОсновнойМенеджерБизнесРегиона;
    
    
    Результат = РезультатВопроса;
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        
        ОсновнойМенеджер = ОсновнойМенеджерБизнесРегиона;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИННПлательщикаНДСПриИзменении(Элемент)	
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры


&НаКлиенте
Процедура ФамилияКЛПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКЛПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура СокрЮридическоеНаименованиеТолькоПартнерыПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(ПолноеНаименование, ПолноеЮридическоеНаименование);
	Название = ПолноеНаименование;
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьДокументУдостоверяющийЛичностьПриИзменении(Элемент)
	
	УстановитьДоступностьДанныхДокументаФизлица(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры



&НаКлиенте
Процедура ИННПлательщикаНДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если УказыватьЮридическиеРеквизиты И (ЭтоКомпания = 0 И ВидКомпании <> 1) И ПлательщикНДС И (НЕ ПустаяСтрока(Текст)) Тогда	
		ОчиститьСообщения();
		ТекстСообщения = "";
		Если НЕ РегламентированныеДанныеКлиентСервер.ИННПлательщикаНДССоответствуетТребованиям(Текст, 	
			?(ЭтоКомпания = 0, ?(ВидКомпании = 0, Истина, Ложь), Ложь), ТекстСообщения) Тогда
			
			ВывестиСообщениеПользователю(ТекстСообщения, "ИННПлательщикаНДС");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСвидетельстваПлательщикаНДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если УказыватьЮридическиеРеквизиты И (ЭтоКомпания = 0 И ВидКомпании <> 1) И ПлательщикНДС И (НЕ ПустаяСтрока(Текст)) Тогда	
		ОчиститьСообщения();
		ТекстСообщения = "";
		Если НЕ РегламентированныеДанныеКлиентСервер.НомерСвидетельстваПлательщикаНДССоответствуетТребованиям(Текст, 
			?(ЭтоКомпания = 0, ?(ВидКомпании = 0, Истина, Ложь), Ложь), ТекстСообщения) Тогда
			
			ВывестиСообщениеПользователю(ТекстСообщения, "НомерСвидетельстваПлательщикаНДС");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоЕДРПОУОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)	
	Если УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И ВидКомпании <> 1 И Не ПустаяСтрока(Текст) Тогда
		ОчиститьСообщения();
		ТекстСообщения = "";
		Если НЕ РегламентированныеДанныеКлиентСервер.КодПоЕДРПОУСоответствуетТребованиям(Текст, 
				?(ЭтоКомпания = 0, ?(ВидКомпании <> 2, Истина, Ложь), Ложь),ТекстСообщения) Тогда
			ВывестиСообщениеПользователю(ТекстСообщения, "КодПоЕДРПОУ");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КодПоЕДРПОУГоловногоКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	ТекстСообщения = "";
	Если НЕ РегламентированныеДанныеКлиентСервер.КодПоЕДРПОУСоответствуетТребованиям(Текст, Истина,ТекстСообщения) Тогда
		ВывестиСообщениеПользователю(ТекстСообщения, "КодПоЕДРПОУГоловногоКонтрагента");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПлательщикНДСПриИзменении(Элемент)
	
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияКонтрагентаПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

&НаКлиенте
Процедура ИмяКонтрагентаПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГоловногоКонтрагентаПриИзменении(Элемент)
	
	УправлениеДостуностьюГоловнойКонтрагент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеНаименованиеГоловногоКонтрагентаПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(
		НаименованиеГоловногоКонтрагента, ПолноеНаименованиеГоловногоКонтрагента);
		
КонецПроцедуры

&НаКлиенте
Процедура ИННПлательщикаНДСГоловногоКонтрагентаПриИзменении(Элемент)	
	
	УправлениеДостуностьюГоловнойКонтрагент();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьПереходПоСтраницам(Неопределено, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам(Неопределено, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЮридическийАдресРавнымФактическому(Команда)
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
		
		ЮридическийАдрес              = ФактическийАдрес;
		ЮридическийАдресЗначенияПолей = ФактическийАдресЗначенияПолей;
		
	Иначе
		
		ЮридическийАдресГоловногоКонтрагента              = ФактическийАдресГоловногоКонтрагента;
		ЮридическийАдресГоловногоКонтрагентаЗначенияПолей = ФактическийАдресГоловногоКонтрагентаЗначенияПолей;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	Для Каждого Стр Из ОбособленныеПодразделения Цикл
		Стр.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого Стр Из ОбособленныеПодразделения Цикл
		Стр.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеИтоговойИнформации

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ИтоговаяИнформация = Справочники.Партнеры.ПолучитьМакет("Макет").ПолучитьТекст();
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#fcfaeb", "#ffffff");
	КонецЕсли;
	
	Если ДействиеПоРезультатамНайдено <> 0 Тогда
		
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПР#", "");
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ЗаголовокНаименованиеПартнера#",
			?(ИспользуютсяТолькоПартнеры, НСтр("ru='Сокращенное юр. наименование';uk='Скорочене юр. найменування'"), НСтр("ru='Публичное наименование';uk='Публічне найменування'")));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НаименованиеПартнера#", НаименованиеПартнера());
		Если ЭтоКомпания = 1 Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаРождения#", ?(ДатаРождения = Дата(1,1,1), "", Формат(ДатаРождения,"ДЛФ=D")));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Пол#", ?(ЗначениеЗаполнено(Пол),Пол,""));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФЛ#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ФЛ#");
		КонецЕсли;
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РабочееНаименованиеПартнера#", ?(ЭтоКомпания = 0, Название,ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера)));
		Если ИспользуютсяТолькоПартнеры Тогда
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ГП#");
		Иначе
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Родитель#", Родитель);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ГП#", "");
		КонецЕсли;
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ТипОтношений#", ПолучитьСтрокуТипОтношений());
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресЭП#", ?(ЭтоКомпания = 0, АдресЭППартнера, АдресЭППартнераФизЛицо));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Телефон#", ?(ЭтоКомпания = 0, ТелефонПартнера, ТелефонПартнераФизЛицо));
		Если ИспользуютсяТолькоПартнеры И УказыватьЮридическиеРеквизиты Тогда
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#АП#");
		Иначе
			Если ЭтоКомпания = 0 Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресНаименование#", НСтр("ru='Фактический адрес';uk='Фактична адреса'"));
			Иначе
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресНаименование#", НСтр("ru='Адрес проживания';uk='Адреса проживання'"));
			КонецЕсли;
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Адрес#", ФактическийАдрес);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АП#", "");
		КонецЕсли; 
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Адрес#", ФактическийАдрес);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаПартнеров") Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ГруппаДоступа#", ГруппаДоступа);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ГД#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#ГД#");
		КонецЕсли;
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ОтветственныйМенеджер#", ОсновнойМенеджер);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы") Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БизнесРегион#", БизнесРегион);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БР#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БР#");
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КаналПервичногоИнтереса#", КаналПервичногоИнтереса);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИсточникПервичногоИнтереса#", ИсточникПервичногоИнтереса);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПИ#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ПИ#");
		КонецЕсли;
		
		Если ЕстьПравоВключенияВСегмент И ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров") Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Сегмент#", Сегмент);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СГ#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#СГ#");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ПР#");
	КонецЕсли;
	
	Если (ИспользуютсяТолькоПартнеры Или ДействиеСКонтрагентом = 1) И УказыватьЮридическиеРеквизиты Тогда
		
		СтруктураИННПлательщикаНДС = ДанныеИННПлательщикаНДС_КодФилиала();
		
		Если ЕстьДубльПоИННПлательщикаНДСКодФилиала Тогда	
			НайденныйДубльПоИННПлательщикаНДС = ПартнерыИКонтрагенты.ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС, СтруктураИННПлательщикаНДС.КодФилиала);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИнформацияДубльИНН#", СообщениеДубльИННПлательщикаНДС(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС_КодФилиала, НайденныйДубльПоИННПлательщикаНДС));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИД#", "");
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РД#");
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
		Иначе
			Элементы.Далее2.Доступность =Истина;
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ИД#");
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПредставлениеТипаЮрФизЛица#", ПредставлениеТипаЮрФизЛица());
			Если ИспользуютсяТолькоПартнеры Тогда
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#СН#");
			Иначе
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПолноеНаименованиеКонтрагента#",
				                     ?(ЭтоКомпания = 0, ПолноеЮридическоеНаименование, ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера)));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СН#", "");
			КонецЕсли;
			Если ВидКомпании = 3 Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НаименованиеГоловногоКонтрагента#",
				                     ?(ИспользуютсяТолькоПартнеры Или ВыбратьГоловногоКонтрагента = 0,
				                     ГоловнойКонтрагент,
				                     ?(ВыбратьГоловногоКонтрагента = 1, НаименованиеГоловногоКонтрагента, "")));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СГК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#СГК#");
			КонецЕсли;
			ЗаголовокКод = ?(ЭтоКомпания = 1 ИЛИ (ЭтоКомпания = 0 И ВидКомпании = 2), "ДРФО", "ЕДРПОУ");
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ЗаголовокКод#", ЗаголовокКод);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПоЕДРПОУ#", КодПоЕДРПОУ);
			ЗаголовокПлательщикНДС = ?(ПлательщикНДС, НСтр("ru='Является плательщиком НДС';uk='Є платником ПДВ'"), НСтр("ru='Не является плательщиком НДС';uk='Не є платником ПДВ'"));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ПлательщикНДС#", ЗаголовокПлательщикНДС);
			Если ПлательщикНДС Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИННПлательщикаНДС#", СтруктураИННПлательщикаНДС.ИННПлательщикаНДС_КодФилиала);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПлательщикаНДС#", НомерСвидетельстваПлательщикаНДС);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РДК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#РДК#");
			КонецЕсли;
			
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ЮридическийАдрес#", ЮридическийАдрес);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФактическийАдрес#", ФактическийАдрес);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РД#", "");
			
			Если ЭтоКомпания = 1 И УказатьДокументУдостоверяющийЛичность Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ВидДокумента#" ,ВидДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СерияДокумента#", СерияДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НомерДокумента#", НомерДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаВыдачи#", Формат(ДатаВыдачи,"ДЛФ=D"));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СрокДействия#", Формат(СрокДействия,"ДЛФ=D"));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КемВыдан#", КемВыданДокумент);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
			КонецЕсли;
			
			Если УказатьБанковскийСчетКонтрагента Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НомерСчета#", НомерСчета);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ВалютаДенежныхСредств#", ВалютаДенежныхСредств);
				Если Не ИностранныйБанк Тогда
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Банк#", Банк);
				Иначе
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Банк#",
						СВИФТБанка + ", " + НаименованиеБанка + ", " + АдресБанка);
					
				КонецЕсли;
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БС#", "")
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РД#");
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ИД#");
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
	КонецЕсли;
	
	Если ВидКомпании = 3 И Не ИспользуютсяТолькоПартнеры И ВыбратьГоловногоКонтрагента = 1 Тогда
		
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДГК#", "");
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПолноеНаименованиеГоловногоКонтрагента#",
			ПолноеНаименованиеГоловногоКонтрагента);
		Если ЗначениеЗаполнено(ПартнерГоловногоКонтрагента) Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПартнерГоловногоКонтрагента#", ПартнерГоловногоКонтрагента);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПГК#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ПГК#");
		КонецЕсли;
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИННПлательщикаНДСГоловногоКонтрагента#",
		                     ИННПлательщикаНДС + ?(ПустаяСтрока(КодФилиалаГоловногоКонтрагента), "", "\" + КодФилиалаГоловногоКонтрагента));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПоЕДРПОУГоловногоКонтрагента#", КодПоЕДРПОУГоловногоКонтрагента);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ЮридическийАдресГоловногоКонтрагента#",
			ЮридическийАдресГоловногоКонтрагента);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФактическийАдресГоловногоКонтрагента#",
			ФактическийАдресГоловногоКонтрагента);
		
		Если УказатьБанковскийСчетГоловногоКонтрагента Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НомерСчетаГоловногоКонтрагента#",
				НомерСчетаГоловногоКонтрагента);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ВалютаДенежныхСредствГоловногоКонтрагента#",
				ВалютаДенежныхСредствГоловнойКонтрагент);
				
			Если Не ИностранныйБанкГоловнойКонтрагент Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БанкГоловногоКонтрагента#", БанкГоловнойКонтрагент);
			Иначе
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БанкГоловногоКонтрагента#",
					СВИФТБанкаГоловнойКонтрагент + ", " + НаименованиеБанкаГоловнойКонтрагент + ", " + АдресБанкаГоловнойКонтрагент);
				
			КонецЕсли;
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БСГК#", "")
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БСГК#");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДГК#");
	КонецЕсли;
	
	Если ДействиеПоРезультатамНайдено <> 0 И ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФИО#",ФИО_ОднойСтрокой(ФамилияКЛ, ИмяКЛ, ОтчествоКЛ));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресЭПКЛ#" ,АдресЭПКЛ);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ТелефонКЛ#", ТелефонКЛ);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#МобильныйТелефонКЛ#", МобильныйТелефонКЛ);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРолиКонтактныхЛицПартнеров") Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Роль#", Роль);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РКЛ#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РКЛ#");
		КонецЕсли;
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДКЛ#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДКЛ#");
	КонецЕсли;
	
	ВидимостьСтраныРегистрации = (ИспользуютсяТолькоПартнеры ИЛИ УказыватьЮридическиеРеквизиты) И ВидКомпании = 1;
	Если ВидимостьСтраныРегистрации Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СтранаРегистрации#", СтранаРегистрации);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РегистрационныйНомер#", РегистрационныйНомер);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АПС#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#АПС#");
	КонецЕсли;
	
	НачалоТегHTML = СтрНайти(ИтоговаяИнформация, "<html");
	Если НачалоТегHTML <> 0 Тогда
		ИтоговаяИнформация = Прав(ИтоговаяИнформация, СтрДлина(ИтоговаяИнформация) - НачалоТегHTML + 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуТипОтношений()
	
	СтрокаТипОтношений = ?(Клиент,НСтр("ru='Клиент';uk='Клієнт'"),"") + ?(Поставщик, НСтр("ru=', Поставщик';uk=', Постачальник'"),"") + ?(Перевозчик, НСтр("ru=', Перевозчик';uk=', Перевізник'"),"") + ?(Конкурент, НСтр("ru=', Конкурент';uk=', Конкурент'"),"") + ?(ПрочиеОтношения, НСтр("ru=', Прочие отношения';uk=', Інші відносини'"),"");
	Если Лев(СтрокаТипОтношений, 2) = ", " Тогда
		СтрокаТипОтношений = Прав(СтрокаТипОтношений, СтрДлина(СтрокаТипОтношений)-2);
	КонецЕсли;
	
	Возврат СтрокаТипОтношений;
	
КонецФункции

&НаСервере
Функция НаименованиеПартнера()
	
	Если ЭтоКомпания = 0 Тогда
		Если ЭтоКомпания = 0 И ВидКомпании = 2 Тогда
			Возврат ФИО_ОднойСтрокой(ФамилияКонтрагента, ИмяКонтрагента, ОтчествоКонтрагента); 
		Иначе
			Возврат ?(ИспользуютсяТолькоПартнеры, ПолноеЮридическоеНаименование, ПолноеНаименование);
		КонецЕсли;	
	Иначе
		Возврат ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НаименованиеКонтрагента()
	
	Если ЭтоКомпания = 0 Тогда
		Возврат НаименованиеКонтрагента;
 	ИначеЕсли ЭтоКомпания = 0 И ВидКомпании = 2 Тогда
		Возврат ФИО_ОднойСтрокой(ФамилияКонтрагента, ИмяКонтрагента, ОтчествоКонтрагента); 
	Иначе
		Возврат ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДанныеИННПлательщикаНДС_КодФилиала() 
	
	СтруктураИННПлательщикаНДС = Новый Структура;
	СтруктураИННПлательщикаНДС.Вставить("ИННПлательщикаНДС", "");
	СтруктураИННПлательщикаНДС.Вставить("КодФилиала", "");
	СтруктураИННПлательщикаНДС.Вставить("ИННПлательщикаНДС_КодФилиала", "");
	
	СтруктураИННПлательщикаНДС.ИННПлательщикаНДС = ИННПлательщикаНДС;
	СтруктураИННПлательщикаНДС.КодФилиала = КодФилиала;
	СтруктураИННПлательщикаНДС.ИННПлательщикаНДС_КодФилиала = СтруктураИННПлательщикаНДС.ИННПлательщикаНДС+ ?(ПустаяСтрока(КодФилиала), "", "\" + КодФилиала);
	
	Возврат СтруктураИННПлательщикаНДС;
	
	
КонецФункции

&НаСервере
Функция СообщениеДубльИННПлательщикаНДС(ПредставлениеИННПлательщикаНДС_КодФилиала, НайденныйДубльПоИННПлательщикаНДС)	
	
	СтрСообщение = НСтр("ru='Контрагент создан не будет. ИНН плательщика НДС\код филиала - %1 уже указаны для контрагента %2 с кодом %3, ответственный - %4.';uk='Контрагента створено не буде. ІПН платника ПДВ\код філії - %1 вже вказані для контрагента %2 з кодом %3, відповідальний - %4.'");
	Если Не ИспользуютсяТолькоПартнеры Тогда
		СтрСообщение = СтрСообщение + " " + НСтр("ru='Измените код филиала или используйте уже имеющегося партнера.';uk='Змініть код філії або використовуйте вже наявного партнера.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СтрСообщение,
		ПредставлениеИННПлательщикаНДС_КодФилиала,
		НайденныйДубльПоИННПлательщикаНДС.Ссылка,
		НайденныйДубльПоИННПлательщикаНДС.Код,
		НайденныйДубльПоИННПлательщикаНДС.ОсновнойМенеджер);
	
КонецФункции

&НаСервере
Функция ИННПлательщикаНДСКодФилиалаГоловногоКонтрагентаИспользуютсяВИнформационнойБазе()	
	
	НайденныйДубльПоИННПлательщикаНДС = ПартнерыИКонтрагенты.ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(ИННПлательщикаНДС, КодФилиалаГоловногоКонтрагента);
	
	Если НайденныйДубльПоИННПлательщикаНДС <> Неопределено Тогда
		СтрСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИНН плательщика НДС\Код филиала - %1 уже указаны для контрагента %2 с кодом %3, ответственный - %4.';uk='ІПН платника ПДВ\Код філії - %1 вже зазначені для контрагента %2 з кодом %3, відповідальний - %4.'"),
			ИННПлательщикаНДС + ?(ПустаяСтрока(КодФилиалаГоловногоКонтрагента), "", "\" + КодФилиалаГоловногоКонтрагента),
			НайденныйДубльПоИННПлательщикаНДС.Ссылка,
			НайденныйДубльПоИННПлательщикаНДС.Код,
			НайденныйДубльПоИННПлательщикаНДС.ОсновнойМенеджер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщение,, "КодФилиалаГоловногоКонтрагента");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПредставлениеТипаЮрФизЛица()
	
	Если ЭтоКомпания = 0 Тогда
		Если ВидКомпании = 0 Тогда
			Возврат НСтр("ru='Юридическое лицо';uk='Юридична особа'");
		ИначеЕсли ВидКомпании = 1 Тогда
			Возврат НСтр("ru='Юридическое лицо (за пределами Украины)';uk='Юридична особа (за межами України)'");
		ИначеЕсли ВидКомпании = 2 Тогда
			Возврат НСтр("ru='Частный предприниматель (ФЛП)';uk='Приватний підприємець (ФОП)'");
		Иначе
			Возврат НСтр("ru='Обособленное подразделение';uk='Відокремлений підрозділ'");
		КонецЕсли;
	Иначе
		Возврат НСтр("ru='Физическое лицо';uk='Фізична особа'");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипЮрФизЛицаПартнера(ЭтоКомпания)
	
	Если ЭтоКомпания = 0 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании)
	
	Если ЭтоКомпания = 0 Тогда
		Если ВидКомпании = 0 Или ВидКомпании = 3 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		ИначеЕсли ВидКомпании = 1 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
		Иначе
			Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"); 
		КонецЕсли;
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область УправлениеВидимостьюИДоступностьюЭлементовФормы

&НаКлиенте
Процедура УправлениеСтраницамиПодвал()
	
	ПредыдущаяСтраницаПодвал = Элементы.СтраницыПодвал.ТекущаяСтраница;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница =
			?(ДействиеПоРезультатамНайдено = 0 И (ИспользуютсяТолькоПартнеры Или ДействиеСКонтрагентом = 0),
			Элементы.СтраницаКнопкиГотово,
			Элементы.СтраницаКнопкиНазадДалее);
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиСоздать;
	Иначе
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
	КонецЕсли;
	
	Если ПредыдущаяСтраницаПодвал <> Элементы.СтраницыПодвал.ТекущаяСтраница Тогда
		Если Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее Тогда
			Элементы.Далее.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиГотово Тогда
			Элементы.Далее1.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиСоздать Тогда
			Элементы.Далее2.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее Тогда
			Элементы.Далее3.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВидимостьСтраницПервичнаяИнформация()
	
	Если ЭтоКомпания = 0 Тогда
		
		Элементы.СтраницыКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаКомпания;
		
		Если ВидКомпании = 2 Тогда
			
			Элементы.ГруппаСтраницыНаименование.ТекущаяСтраница = Элементы.ГруппаСтраницаФИОКонтрагента;
			Элементы.КодПоЕДРПОУ.Заголовок      = НСтр("ru='Код по ДРФО';uk='Код за ДРФО'");
            ПодсказкаВводаКодПоЕДРПОУ = НСтр("ru='Введите код ДРФО 10 цифр';uk='Введіть код ДРФО 10 цифр'")
                             + Символы.ПС
                             + НСтр("ru='или серию и номер паспорта старого образца - 2 буквы и 6 цифр, без пробела между серией и номером';uk='або серію та номер паспорта старого зразка - 2 літери і 6 цифр, без пробілу між серією та номером'") 
                             + Символы.ПС
                             + НСтр("ru='или номер паспорта нового образца - 9 цифр.';uk='або номер паспорта нового зразка - 9 цифр.'") 
                             + Символы.ПС
                             ;
			Элементы.КодПоЕДРПОУ.ПодсказкаВвода = ПодсказкаВводаКодПоЕДРПОУ;
			
		Иначе
			
			Элементы.ГруппаСтраницыНаименование.ТекущаяСтраница = Элементы.ГруппаСтраницаСокрЮрНаименование;
			Элементы.КодПоЕДРПОУ.Заголовок      = НСтр("ru='Код по ЕДРПОУ';uk='Код за ЄДРПОУ'");
			Элементы.КодПоЕДРПОУ.ПодсказкаВвода = НСтр("ru='Введите код ЕДРПОУ 8 цифр';uk='Введіть код ЄДРПОУ 8 цифр'");
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницыКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаФизическоеЛицо;
		
	КонецЕсли;
	
	Если Не НаОснованииКонтрагента Тогда
		Если ИспользуютсяТолькоПартнеры Тогда
			Элементы.СтраницыБудетСоздан.ТекущаяСтраница = Элементы.СтраницаБудетСозданКонтрагент;
		Иначе
			Элементы.СтраницыБудетСоздан.ТекущаяСтраница = 
			?(НЕ УказыватьЮридическиеРеквизиты , Элементы.СтраницаБудетСозданПартнер, Элементы.СтраницаБудетСозданПартнерИКонтрагент);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюПервичнаяИнформация()
	
	//Юридические реквизиты
	Если НЕ (НаОснованииКонтрагента Или НаОснованииОбособленногоКонтрагента) Тогда
		Если ЭтоКомпания = 0 Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРегистрационныеДанные",
				"Доступность", УказыватьЮридическиеРеквизиты, Истина);
			Если УказыватьЮридическиеРеквизиты Тогда
				ПартнерыИКонтрагенты.УправлениеЭлементамиЮридическихРеквизитов(
					ЭтотОбъект, ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании), ВидКомпании = 3, ПлательщикНДС);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДанныеКонтрагентаЧастноеЛицо",
				"Доступность", УказыватьЮридическиеРеквизиты, Истина);
			Если УказыватьЮридическиеРеквизиты Тогда
				УстановитьДоступностьДанныхДокументаФизлица(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//Контактное лицо
	УстановитьДоступностьДанныхКонтактногоЛица(ЭтотОбъект);
	
	// Страна регистрация видна только в том случае, когда контрагент не является резидентом Украины. 
	// В противном случае - и для физ лиц и для ФЛП и для юр лиц страна регистрации всегда Украина.
	Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.ТекущаяСтраница = 
		?((ИспользуютсяТолькоПартнеры ИЛИ УказыватьЮридическиеРеквизиты) И ВидКомпании = 1, 
		Элементы.ГруппаСтраницаИностраннойРегистрации, Элементы.ГруппаСтраницаУкраинскогоКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюРасчетныйСчет()
	
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ГруппаДанныеБанковскогоСчета");
	МассивЭлементов.Добавить("НомерСчета");
	МассивЭлементов.Добавить("ВалютаДенежныхСредств");
	МассивЭлементов.Добавить("ДекорацияМФОБанка");
	МассивЭлементов.Добавить("МФОБанка");
	МассивЭлементов.Добавить("КоррСчетБанка");
	МассивЭлементов.Добавить("ДекорацияБанк");
	МассивЭлементов.Добавить("Банк");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		УказатьБанковскийСчетКонтрагента);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюРасчетныйСчетГоловногоКонтрагента()
	
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ГруппаДанныеБанковскогоСчетаГоловногоКонтрагента");
	МассивЭлементов.Добавить("НомерСчетаГоловногоКонтрагента");
	МассивЭлементов.Добавить("ВалютаДенежныхСредствГоловнойКонтрагент");
	МассивЭлементов.Добавить("ДекорацияМФОБанкаГоловнойКонтрагент");
	МассивЭлементов.Добавить("МФОБанкаГоловнойКонтрагент");
	МассивЭлементов.Добавить("КоррСчетБанкаГоловнойКонтрагент");
	МассивЭлементов.Добавить("ДекорацияБанкГоловнойКонтрагент");
	МассивЭлементов.Добавить("БанкГоловнойКонтрагент");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		УказатьБанковскийСчетГоловногоКонтрагента);
	
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюДополнительныеСведения()
	
	Элементы.ЮридическийАдрес.ТолькоПросмотр = (НЕ УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0);
	Элементы.ЮридическийАдресРавенФактическому.Доступность = (УказыватьЮридическиеРеквизиты);
	
	УправлениеЭлементамиПервичногоИнтереса(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыПризнакаПартнера(ЭтаФорма);
	
	Если ЭтоКомпания = 0 Тогда
		
		Элементы.СтраницыДополнительныеСведения.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведенияКомпания;
		Элементы.СтраницыАдреса.ТекущаяСтраница = Элементы.СтраницаАдресаКомпания;
		
		ВидимостьГоловногоКонтрагента = ИспользуютсяТолькоПартнеры И ВидКомпании = 3;
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ГоловнойКонтрагентДопСведения");
		МассивЭлементов.Добавить("КартинкаПредупреждениеГоловнойКонтрагентДопСведения");
		МассивЭлементов.Добавить("ПредупреждениеГоловнойКонтрагентДопСведения");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы, МассивЭлементов, "Видимость", ВидимостьГоловногоКонтрагента);
		
		Если ВидимостьГоловногоКонтрагента Тогда
			
			ТекстПредупреждения = ТекстПредупрежденияГоловногоКонтрагента(Элементы.ГоловнойКонтрагентДопСведения.СписокВыбора, ИННПлательщикаНДС);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ПредупреждениеГоловнойКонтрагент", "Заголовок", ТекстПредупреждения);
			
			МассивЭлементов = Новый Массив;
			МассивЭлементов.Добавить("КартинкаПредупреждениеГоловнойКонтрагентДопСведения");
			МассивЭлементов.Добавить("ПредупреждениеГоловнойКонтрагентДопСведения");
			
			ЕстьПредупреждение = Не ПустаяСтрока(ТекстПредупреждения);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, МассивЭлементов, "Видимость", ЕстьПредупреждение);
				
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ГоловнойКонтрагентДопСведения", "Доступность", Не ЕстьПредупреждение);
			
		КонецЕсли;
		
	Иначе
		Элементы.СтраницыДополнительныеСведения.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведенияЧастноеЛицо;
		Элементы.СтраницыАдреса.ТекущаяСтраница = Элементы.СтраницаАдресаЧастноеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДостуностьюГоловнойКонтрагент()
	
	ТекстПредупреждения = ТекстПредупрежденияГоловногоКонтрагента(Элементы.ГоловнойКонтрагент.СписокВыбора, ИННПлательщикаНДС);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ПредупреждениеГоловнойКонтрагент", "Заголовок", ТекстПредупреждения);
		
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("КартинкаПредупреждениеГоловнойКонтрагент");
	МассивЭлементов.Добавить("ПредупреждениеГоловнойКонтрагент");
	
	ЕстьПредупреждение = Не ПустаяСтрока(ТекстПредупреждения);
	
	Если ВыбратьГоловногоКонтрагента = 0 И ЕстьПредупреждение Тогда
		ВыбратьГоловногоКонтрагента = 1;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", ЕстьПредупреждение);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВыбратьГоловногоКонтрагента", "Доступность", Не ЕстьПредупреждение);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаГоловнойКонтрагент", "Доступность", Не ЕстьПредупреждение И ВыбратьГоловногоКонтрагента = 0);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаДанныеГоловногоКонтрагента", "Доступность", ВыбратьГоловногоКонтрагента = 1);
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КодФилиалаГоловногоКонтрагента", "Доступность", ВыбратьГоловногоКонтрагента = 1 И ЗначениеЗаполнено(ИННПлательщикаНДС));
		
		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДанныхКонтактногоЛица(Форма)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ФамилияКЛ");
	МассивЭлементов.Добавить("ИмяКЛ");
	МассивЭлементов.Добавить("ОтчествоКЛ");
	МассивЭлементов.Добавить("Роль");
	МассивЭлементов.Добавить("ТелефонКЛ");
	МассивЭлементов.Добавить("АдресЭПКЛ");
	МассивЭлементов.Добавить("МобильныйТелефонКЛ");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность",
		Форма.УказатьДанныеКонтактногоЛица);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДанныхДокументаФизлица(Форма)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ВидДокумента");
	МассивЭлементов.Добавить("СерияДокумента");
	МассивЭлементов.Добавить("НомерДокумента");
	МассивЭлементов.Добавить("ДатаВыдачи");
	МассивЭлементов.Добавить("СрокДействия");
	МассивЭлементов.Добавить("КемВыданДокумент");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность",
		Форма.УказатьДокументУдостоверяющийЛичность);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыПризнакаПартнера(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ОбслуживаетсяТорговымиПредставителями.Доступность = Форма.Клиент;
	Если НЕ Форма.Клиент Тогда
		Форма.ОбслуживаетсяТорговымиПредставителями = Ложь;
	КонецЕсли;
	
	Элементы.Перевозчик.Доступность = Форма.Поставщик;
	Если НЕ Форма.Поставщик Тогда
		Форма.Перевозчик = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиПервичногоИнтереса(Форма)
	
	Элементы = Форма.Элементы;
	ТолькоПросмотрЭлементов = НЕ ЗначениеЗаполнено(Форма.КаналПервичногоИнтереса);
	
	Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ИсточникПервичногоИнтересаЧастноеЛицо.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиБанковскийСчет()
	
	Элементы.ИностранныйБанк.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	ВалютныйСчет = (ЗначениеЗаполнено(ВалютаДенежныхСредств) И ВалютаДенежныхСредств <> ВалютаРеглУчета);
	
	Если Не ИностранныйБанк Тогда
		
		
		Элементы.Банк.Видимость = Истина;
		
		Элементы.МФОБанка.Заголовок = НСтр("ru='МФО';uk='МФО'");
		
		Элементы.СВИФТБанка.Видимость = ВалютныйСчет;
		
		Элементы.КоррСчетБанка.Видимость = Не ВалютныйСчет;
		
		Элементы.АдресБанка.Видимость = Ложь;
		Элементы.НаименованиеБанка.Видимость = Ложь;
		
		
		Элементы.Переместить(Элементы.МФОБанка, Элементы.МФОБанка.Родитель, Элементы.СВИФТБанка);
		
	Иначе
		
		
		Элементы.МФОБанка.Заголовок = НСтр("ru='Национальный код банка';uk='Національний код банку'");
		
		Элементы.СВИФТБанка.Видимость = Истина;
		
		Элементы.КоррСчетБанка.Видимость = Ложь;
		
		Элементы.АдресБанка.Видимость = Истина;
		Элементы.НаименованиеБанка.Видимость = Истина;
		
		
		Элементы.Банк.Видимость = Ложь;
		
		Элементы.Переместить(Элементы.СВИФТБанка, Элементы.МФОБанка.Родитель, Элементы.МФОБанка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиБанковскийСчетГоловногоКонтрагента()
	
	Элементы.ИностранныйБанкГоловнойКонтрагент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	ВалютныйСчет = (ЗначениеЗаполнено(ВалютаДенежныхСредствГоловнойКонтрагент) И ВалютаДенежныхСредствГоловнойКонтрагент <> ВалютаРеглУчета);
	
	Если Не ИностранныйБанкГоловнойКонтрагент Тогда
		
		
		Элементы.БанкГоловнойКонтрагент.Видимость = Истина;
		
		Элементы.МФОБанкаГоловнойКонтрагент.Заголовок = НСтр("ru='МФО';uk='МФО'");
		
		Элементы.СВИФТБанкаГоловнойКонтрагент.Видимость = ВалютныйСчет;
		
		Элементы.КоррСчетБанкаГоловнойКонтрагент.Видимость = Не ВалютныйСчет;
		
		Элементы.АдресБанкаГоловнойКонтрагент.Видимость = Ложь;
		Элементы.НаименованиеБанкаГоловнойКонтрагент.Видимость = Ложь;
		
		
		Элементы.Переместить(Элементы.МФОБанкаГоловнойКонтрагент, Элементы.МФОБанкаГоловнойКонтрагент.Родитель, Элементы.СВИФТБанкаГоловнойКонтрагент);
		
	Иначе
		
		
		Элементы.МФОБанкаГоловнойКонтрагент.Заголовок = НСтр("ru='Национальный код банка';uk='Національний код банку'");
		
		Элементы.СВИФТБанкаГоловнойКонтрагент.Видимость = Истина;
		
		Элементы.КоррСчетБанкаГоловнойКонтрагент.Видимость = Ложь;
		
		Элементы.АдресБанкаГоловнойКонтрагент.Видимость = Истина;
		Элементы.НаименованиеБанкаГоловнойКонтрагент.Видимость = Истина;
		
		
		Элементы.БанкГоловнойКонтрагент.Видимость = Ложь;
		
		Элементы.Переместить(
			Элементы.СВИФТБанкаГоловнойКонтрагент,
			Элементы.МФОБанкаГоловнойКонтрагент.Родитель,
			Элементы.МФОБанкаГоловнойКонтрагент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискПоПервичнойИнформации

&НаСервере
Функция ПодзапросПоНазванию()
	
	ТекстУсловияПоНеизвестномуПартнеруКонтрагент = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	ТекстУсловияПоНеизвестномуПартнеру           = " И (НЕ Партнеры.Ссылка.Предопределенный)";
	
	ТекстПодзапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Партнеры.Ссылка КАК Партнер,
	|	Партнеры.Ссылка КАК НайденоПоСсылка,
	|	ВЫБОР
	|		КОГДА Партнеры.Наименование ПОДОБНО &Название
	|			ТОГДА &СтрокаНаименование
	|			ИНАЧЕ &СтрокаНаименованиеПолное
	|	КОНЕЦ КАК НайденоВРеквизите
	|ПОМЕСТИТЬ НайденоПоНазванию
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Наименование ПОДОБНО &Название ИЛИ Партнеры.НаименованиеПолное ПОДОБНО &Название" + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"");
	
	Если Не ИспользуютсяТолькоПартнеры Тогда
		ТекстПодзапроса = ТекстПодзапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	Контрагенты.Партнер,
		|	Контрагенты.Ссылка,
		|	ВЫБОР
		|		КОГДА Контрагенты.Наименование ПОДОБНО &Название
		|			ТОГДА &СтрокаНаименование
		|			ИНАЧЕ &СтрокаНаименованиеПолное
		|	КОНЕЦ
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.Наименование ПОДОБНО &Название ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Название) И 
		|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеруКонтрагент, "");
	КонецЕсли;
	
	ТекстПодзапроса = ТекстПодзапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаСервере
Функция ПодзапросПоАдресуЭлектроннойПочты()

	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ ПартнерыКонтактнаяИнформация.Ссылка.Предопределенный)";
	ТекстУсловияПоНеизвестномуПартнеруКЛ = " И (НЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК НайденоПоСсылка,
	|	&СтрокаEmail                        КАК НайденоВРеквизите,
	|	ПартнерыКонтактнаяИнформация.Вид    КАК ВидКонтакта
	|ПОМЕСТИТЬ НайденоПоАдресуЭП
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.АдресЭП В (&АдресаЭП) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	&СтрокаEmail,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП В (&АдресаЭП) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеруКЛ, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоНомеруТелефона(МассивПредставленийТелефона)
	
	//партнеры
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК НайденоПоСсылка,
	|	&СтрокаТелефон                      КАК НайденоВРеквизите,
	|	ПартнерыКонтактнаяИнформация.Вид    КАК ВидКонтакта
	|ПОМЕСТИТЬ НайденоПоТелефону
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	(ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов В(&МассивНомеровТелефона) ";
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		ТекстЗапроса = ТекстЗапроса + " ИЛИ ПартнерыКонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеТелефона" + Строка(инд) + " "  ; 
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ")
	|	И (ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))";
	
	Если НаОснованииКонтрагента Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И (НЕ ПартнерыКонтактнаяИнформация.Ссылка.Предопределенный)";
		
	КонецЕсли;
	
	//контактные лица
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	&СтрокаТелефон,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	(КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов В (&МассивНомеровТелефона) ";
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		ТекстЗапроса = ТекстЗапроса + " ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеТелефона" + Строка(инд) + " "  ; 
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ")
	|	И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))";
	
	Если НаОснованииКонтрагента Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И (НЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец.Предопределенный)";
		
	КонецЕсли;
	
	//физические лица
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции 

&НаСервере
Функция ПодзапросПоИННПлательщикаНДС()	
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
	|	&СтрокаИННПлательщикаНДС КАК НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоИННПлательщикаНДС
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИННПлательщикаНДС = &ИННПлательщикаНДС И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоРегистрационномуНомеруВСтранеРегистрации()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
	|	&СтрокаРегистрационныйНомер КАК НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоРегистрационномуНомеру
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.РегистрационныйНомер = &РегистрационныйНомер И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоЕДРПОУ()	
	
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
	|	&СтрокаКодЕДРПОУ КАК НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоЕДРПОУ
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

Функция ПодзапросПоДокументуУдостоверяющемуЛичность()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Партнеры.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Партнеры.Ссылка        КАК Партнер,
	|	Контрагенты.Ссылка     КАК НайденоПоСсылка,
	|	&СтрокаДанныеДокумента КАК НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоДокументу
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ТекущаяДата, Физлицо ССЫЛКА Справочник.Контрагенты) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|			ПО Контрагенты.Партнер = Партнеры.Ссылка
	|		ПО ДокументыФизическихЛицСрезПоследних.Физлицо = Контрагенты.Ссылка
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента = &ВидДокумента
	|	И ДокументыФизическихЛицСрезПоследних.Серия = &Серия
	|	И ДокументыФизическихЛицСрезПоследних.Номер = &Номер " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоФИО(Запрос)
	
	МассивФИО = Новый Массив;
	Если НЕ ПустаяСтрока(ФамилияПартнера) Тогда
		ДобавитьВМассивФИО(МассивФИО, ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ФамилияКЛ) Тогда
		ДобавитьВМассивФИО(МассивФИО, ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
	КонецЕсли;
	
	ПодзапросПоКонтактнымЛицам = "";
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ КонтактныеЛицаПартнеров.Владелец.Предопределенный)";
	
	Для Инд = 1 По МассивФИО.Количество() Цикл
	
		ПодзапросПоКонтактнымЛицам = ПодзапросПоКонтактнымЛицам + ?(ПустаяСтрока(ПодзапросПоКонтактнымЛицам),"","ОБЪЕДИНИТЬ ВСЕ")+ "
		|
		|ВЫБРАТЬ " +  ?(Инд = 1,"РАЗРЕШЕННЫЕ","") + "
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
		|	КонтактныеЛицаПартнеров.Ссылка   КАК НайденоПоСсылка,
		|	&СтрокаНаименование              КАК НайденоВРеквизите
		|" + ?(ПустаяСтрока(ПодзапросПоКонтактнымЛицам),"ПОМЕСТИТЬ НайденоПоФИОКонтактныхЛиц","")  + "
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Наименование ПОДОБНО &ФИО_" + Строка(Инд) + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") +"
		|";
		
		Запрос.УстановитьПараметр("ФИО_" + Строка(Инд), МассивФИО[Инд-1]+"%")

	КонецЦикла;
	
	ПодзапросПоКонтактнымЛицам = ПодзапросПоКонтактнымЛицам + "
	|;
	|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ПодзапросПоКонтактнымЛицам ;
	
КонецФункции

&НаСервере
Функция ПодзапросПоНаименованиюКонтрагента()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
	|	ВЫБОР
	|		КОГДА  Контрагенты.Наименование ПОДОБНО &Название
	|			ТОГДА &СтрокаНаименование
	|			ИНАЧЕ &СтрокаНаименованиеПолное
	|	КОНЕЦ КАК НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоНаименованию
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &НаименованиеКонтрагента ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &НаименованиеКонтрагента" + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция СводныйЗапрос(СтруктураПоиска)
		
	СводныйЗапрос ="
		|
		|ВЫБРАТЬ 
		|	НайденоПоНазванию.Партнер           КАК Партнер,
		|	НайденоПоНазванию.НайденоПоСсылка   КАК НайденоПоСсылка,
		|	НайденоПоНазванию.НайденоВРеквизите КАК НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО                        КАК ВидКонтакта
		|ПОМЕСТИТЬ НайденныеСовпадения
		|ИЗ
		|	НайденоПоНазванию КАК НайденоПоНазванию
		|";
	
	Если СтруктураПоиска.ИННПлательщикаНДС Тогда		
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоИННПлательщикаНДС.Партнер,
		|	КонтрагентыПоИННПлательщикаНДС.НайденоПоСсылка,
		|	КонтрагентыПоИННПлательщикаНДС.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоИННПлательщикаНДС КАК КонтрагентыПоИННПлательщикаНДС
		|"; 
		
	КонецЕсли;
	
	Если СтруктураПоиска.РегистрационныйНомер Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоРегистрационномуНомеру.Партнер,
		|	КонтрагентыПоРегистрационномуНомеру.НайденоПоСсылка,
		|	КонтрагентыПоРегистрационномуНомеру.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоРегистрационномуНомеру КАК КонтрагентыПоРегистрационномуНомеру
		|"; 
		
	КонецЕсли;
	
	Если СтруктураПоиска.АдресЭП Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоАдресуЭП.Партнер,
		|	НайденоПоАдресуЭП.НайденоПоСсылка,
		|	НайденоПоАдресуЭП.НайденоВРеквизите,
		|	НайденоПоАдресуЭП.ВидКонтакта
		|ИЗ
		|	НайденоПоАдресуЭП КАК НайденоПоАдресуЭП
		|";		
		
	КонецЕсли;
	
	Если СтруктураПоиска.НомерТелефона Тогда
		
		СводныйЗапрос = СводныйЗапрос +  "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоТелефону.Партнер,
		|	НайденоПоТелефону.НайденоПоСсылка,
		|	НайденоПоТелефону.НайденоВРеквизите,
		|	НайденоПоТелефону.ВидКонтакта
		|ИЗ
		|	НайденоПоТелефону КАК НайденоПоТелефону
		|";
		
	КонецЕсли;
	
	Если СтруктураПоиска.ФИО Тогда
		
		СводныйЗапрос = СводныйЗапрос +  "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоФИОКонтактныхЛиц.Партнер,
		|	НайденоПоФИОКонтактныхЛиц.НайденоПоСсылка,
		|	НайденоПоФИОКонтактныхЛиц.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	НайденоПоФИОКонтактныхЛиц КАК НайденоПоФИОКонтактныхЛиц
		|";
		
	КонецЕсли;
	
	Если СтруктураПоиска.НаименованиеКонтрагента Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоНаименованию.Партнер,
		|	КонтрагентыПоНаименованию.НайденоПоСсылка,
		|	КонтрагентыПоНаименованию.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоНаименованию КАК КонтрагентыПоНаименованию
		|"; 
		
	КонецЕсли;
	
	Если СтруктураПоиска.КодПоЕДРПОУ Тогда	
	
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоЕДРПОУ.Партнер,
		|	КонтрагентыПоЕДРПОУ.НайденоПоСсылка,
		|	КонтрагентыПоЕДРПОУ.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоЕДРПОУ КАК КонтрагентыПоЕДРПОУ
		|";
	
	КонецЕсли;
	
	Если СтруктураПоиска.ДокументКонтрагента Тогда
	
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоДокументу.Партнер,
		|	КонтрагентыПоДокументу.НайденоПоСсылка,
		|	КонтрагентыПоДокументу.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоДокументу КАК КонтрагентыПоДокументу
		|";
	
	КонецЕсли;
	
	СводныйЗапрос = СводныйЗапрос + "
	|;
	|////////////////////////////////////////////////////////////////////////////////";
	
	СводныйЗапрос = СводныйЗапрос + "
	|ВЫБРАТЬ
	|	НайденныеСовпадения.Партнер             КАК Партнер,
	|	КОЛИЧЕСТВО(НайденныеСовпадения.Партнер) КАК КоличествоНайденныхАналогов
	|ПОМЕСТИТЬ СовпаденияПартнеры
	|ИЗ
	|	НайденныеСовпадения КАК НайденныеСовпадения
	|
	|СГРУППИРОВАТЬ ПО
	|	НайденныеСовпадения.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СовпаденияПартнеры.Партнер                   КАК Партнер,
	|	РеквизитыПартнера.Реквизит                   КАК Реквизит,
	|	ЕСТЬNULL(КонтактыПартнера.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКонтакта,
	|	РеквизитыПартнера.Значение                   КАК ЗначениеСоздаваемого,
	|	РеквизитыПартнера.Порядок                    КАК ПорядокРеквизита,
	|	РеквизитыПартнера.Существенный               КАК Существенный,
	|	ВЫБОР
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаВидПартнера
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Партнеры.ЮрФизЛицо)
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаНаименование
	|			ТОГДА Партнеры.Наименование
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаНаименованиеПолное
	|			ТОГДА Партнеры.НаименованиеПолное
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаEmail
	|			ТОГДА КонтактыПартнера.АдресЭП
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаТелефон
	|			ТОГДА КонтактыПартнера.Представление
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ДанныеПартнеров
	|ИЗ
	|	СовпаденияПартнеры КАК СовпаденияПартнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО СовпаденияПартнеры.Партнер = Партнеры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыПартнера КАК РеквизитыПартнера
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактыПартнера
	|		ПО СовпаденияПартнеры.Партнер = КонтактыПартнера.Ссылка
	|			И (ВЫБОР
	|				КОГДА РеквизитыПартнера.Реквизит = &СтрокаEmail
	|					ТОГДА КонтактыПартнера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|				КОГДА РеквизитыПартнера.Реквизит = &СтрокаТелефон
	|					ТОГДА КонтактыПартнера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|							ИЛИ КонтактыПартнера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НайденныеСовпадения.Партнер         КАК Партнер,
	|	НайденныеСовпадения.НайденоПоСсылка КАК Контрагент
	|ПОМЕСТИТЬ СовпадениеКонтрагенты
	|ИЗ
	|	НайденныеСовпадения КАК НайденныеСовпадения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО НайденныеСовпадения.НайденоПоСсылка = Контрагенты.Ссылка
	|ГДЕ
	|	НЕ &ИспользуютсяТолькоПартнеры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СовпаденияПартнеры.Партнер,
	|	Контрагенты.Ссылка
	|ИЗ
	|	СовпаденияПартнеры КАК СовпаденияПартнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СовпаденияПартнеры.Партнер = Контрагенты.Партнер
	|ГДЕ
	|	&ИспользуютсяТолькоПартнеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СовпадениеКонтрагенты.Партнер     КАК Партнер,
	|	СовпадениеКонтрагенты.Контрагент  КАК Контрагент,
	|	РеквизитыКонтрагента.Реквизит     КАК Реквизит,
	|	НЕОПРЕДЕЛЕНО                      КАК ВидКонтакта,
	|	РеквизитыКонтрагента.Значение     КАК ЗначениеСоздаваемого,
	|	РеквизитыКонтрагента.Порядок      КАК ПорядокРеквизита,
	|	РеквизитыКонтрагента.Существенный КАК Существенный,
	|	ВЫБОР
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаВидКонтрагента
	|			ТОГДА
	|				ВЫБОР КОГДА Контрагенты.ОбособленноеПодразделение
	|					ТОГДА &СтрокаОбособленноеПодразделение
	|					ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Контрагенты.ЮрФизЛицо)
	|				КОНЕЦ
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаНаименование
	|			ТОГДА Контрагенты.Наименование
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаНаименованиеПолное
	|			ТОГДА Контрагенты.НаименованиеПолное
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаИННПлательщикаНДС
	|			ТОГДА Контрагенты.ИННПлательщикаНДС
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаРегистрационныйНомер
	|			ТОГДА Контрагенты.РегистрационныйНомер
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаКодФилиала
	|			ТОГДА Контрагенты.КодФилиала
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаКодЕДРПОУ
	|			ТОГДА Контрагенты.КодПоЕДРПОУ
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаДанныеДокумента
	|			ТОГДА ДокументыФизЛиц.Представление
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ДанныеКонтрагентов
	|ИЗ
	|	СовпадениеКонтрагенты КАК СовпадениеКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СовпадениеКонтрагенты.Контрагент = Контрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыКонтрагента КАК РеквизитыКонтрагента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ТекущаяДата, Физлицо ССЫЛКА Справочник.Контрагенты) КАК ДокументыФизЛиц
	|		ПО СовпадениеКонтрагенты.Контрагент = ДокументыФизЛиц.ФизЛицо
	|			И РеквизитыКонтрагента.Реквизит = &СтрокаДанныеДокумента
	|			И ДокументыФизЛиц.ВидДокумента = &ВидДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НайденныеСовпадения.Партнер         КАК Партнер,
	|	НайденныеСовпадения.НайденоПоСсылка КАК КонтактноеЛицо
	|ПОМЕСТИТЬ СовпадениеКонтактныеЛица
	|ИЗ
	|	НайденныеСовпадения КАК НайденныеСовпадения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ПО НайденныеСовпадения.НайденоПоСсылка = КонтактныеЛицаПартнеров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СовпадениеКонтактныеЛица.Партнер                  КАК Партнер,
	|	СовпадениеКонтактныеЛица.КонтактноеЛицо           КАК КонтактноеЛицо,
	|	РеквизитыКонтактногоЛица.Реквизит                 КАК Реквизит,
	|	ЕСТЬNULL(КонтактыКонтактныхЛиц.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКонтакта,
	|	РеквизитыКонтактногоЛица.Значение                 КАК ЗначениеСоздаваемого,
	|	РеквизитыКонтактногоЛица.Порядок                  КАК ПорядокРеквизита,
	|	РеквизитыКонтактногоЛица.Существенный             КАК Существенный,
	|	ВЫБОР
	|		КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаНаименование
	|			ТОГДА КонтактныеЛицаПартнеров.Наименование
	|		КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаEmail
	|			ТОГДА КонтактыКонтактныхЛиц.АдресЭП
	|		КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаТелефон
	|			ТОГДА КонтактыКонтактныхЛиц.Представление
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ДанныеКонтактныхЛиц
	|ИЗ
	|	СовпадениеКонтактныеЛица КАК СовпадениеКонтактныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ПО СовпадениеКонтактныеЛица.КонтактноеЛицо = КонтактныеЛицаПартнеров.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыКонтактногоЛица КАК РеквизитыКонтактногоЛица
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактыКонтактныхЛиц
	|		ПО СовпадениеКонтактныеЛица.КонтактноеЛицо = КонтактыКонтактныхЛиц.Ссылка
	|			И (ВЫБОР
	|				КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаEmail
	|					ТОГДА КонтактыКонтактныхЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|				КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаТелефон
	|					ТОГДА КонтактыКонтактныхЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|							ИЛИ КонтактыКонтактныхЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СовпаденияПартнеры.Партнер                     КАК Партнер,
	|	СовпаденияПартнеры.КоличествоНайденныхАналогов КАК КоличествоНайденныхАналогов,
	|	Партнеры.ОсновнойМенеджер                      КАК ОсновнойМенеджер,
	|	Партнеры.Представление                         КАК Представление
	|ИЗ
	|	СовпаденияПартнеры КАК СовпаденияПартнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО СовпаденияПартнеры.Партнер = Партнеры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПартнеров.Партнер              КАК Партнер,
	|	ДанныеПартнеров.Партнер              КАК НайденоПоСсылка,
	|	ДанныеПартнеров.Значение             КАК ЗначениеНайденного,
	|	ДанныеПартнеров.ЗначениеСоздаваемого КАК ЗначениеСоздаваемого,
	|	ДанныеПартнеров.Существенный         КАК Существенный,
	|	1                                    КАК ПорядокУзла,
	|	ДанныеПартнеров.ПорядокРеквизита     КАК ПорядокРеквизита,
	|	ВЫБОР
	|		КОГДА ДанныеПартнеров.ВидКонтакта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеПартнеров.Реквизит
	|		ИНАЧЕ ДанныеПартнеров.ВидКонтакта
	|	КОНЕЦ КАК Реквизит,
	|	ВЫБОР
	|		КОГДА НайденныеСовпадения.НайденоВРеквизите ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Совпадение
	|	
	|ИЗ
	|	ДанныеПартнеров КАК ДанныеПартнеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеСовпадения КАК НайденныеСовпадения
	|		ПО ДанныеПартнеров.Партнер = НайденныеСовпадения.Партнер
	|		 И ДанныеПартнеров.Партнер = НайденныеСовпадения.НайденоПоСсылка
	|		 И ДанныеПартнеров.Реквизит = НайденныеСовпадения.НайденоВРеквизите
	|		 И ДанныеПартнеров.ВидКонтакта = НайденныеСовпадения.ВидКонтакта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.Партнер,
	|	ДанныеКонтрагентов.Контрагент,
	|	ДанныеКонтрагентов.Значение,
	|	ДанныеКонтрагентов.ЗначениеСоздаваемого,
	|	ДанныеКонтрагентов.Существенный,
	|	2,
	|	ДанныеКонтрагентов.ПорядокРеквизита,
	|	ДанныеКонтрагентов.Реквизит,
	|	ВЫБОР
	|		КОГДА НайденныеСовпадения.НайденоВРеквизите ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Совпадение
	|ИЗ
	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеСовпадения КАК НайденныеСовпадения
	|		ПО ДанныеКонтрагентов.Партнер = НайденныеСовпадения.Партнер
	|		 И ДанныеКонтрагентов.Контрагент = НайденныеСовпадения.НайденоПоСсылка
	|		 И ДанныеКонтрагентов.Реквизит = НайденныеСовпадения.НайденоВРеквизите
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтактныхЛиц.Партнер,
	|	ДанныеКонтактныхЛиц.КонтактноеЛицо,
	|	ДанныеКонтактныхЛиц.Значение,
	|	ДанныеКонтактныхЛиц.ЗначениеСоздаваемого,
	|	ДанныеКонтактныхЛиц.Существенный,
	|	3,
	|	ДанныеКонтактныхЛиц.ПорядокРеквизита,
	|	ВЫБОР
	|		КОГДА ДанныеКонтактныхЛиц.ВидКонтакта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеКонтактныхЛиц.Реквизит
	|		ИНАЧЕ ДанныеКонтактныхЛиц.ВидКонтакта
	|	КОНЕЦ КАК Реквизит,
	|	ВЫБОР
	|		КОГДА НайденныеСовпадения.НайденоВРеквизите ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Совпадение
	|ИЗ
	|	ДанныеКонтактныхЛиц КАК ДанныеКонтактныхЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеСовпадения КАК НайденныеСовпадения
	|		ПО ДанныеКонтактныхЛиц.Партнер = НайденныеСовпадения.Партнер
	|		 И ДанныеКонтактныхЛиц.КонтактноеЛицо = НайденныеСовпадения.НайденоПоСсылка
	|		 И ДанныеКонтактныхЛиц.Реквизит = НайденныеСовпадения.НайденоВРеквизите
	|		 И ДанныеКонтактныхЛиц.ВидКонтакта = НайденныеСовпадения.ВидКонтакта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокУзла,
	|	ПорядокРеквизита
	|ИТОГИ ПО
	|	Партнер,
	|	НайденоПоСсылка";
	
	Возврат СводныйЗапрос;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПоискПоПервичнойИнформации()
	
	ТекущийНайденныйПартнер = Справочники.Партнеры.ПустаяСсылка();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НаименованиеКонтрагента",
 							 УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И ВидКомпании <> 2 И НЕ ИспользуютсяТолькоПартнеры);
	СтруктураПоиска.Вставить("АдресЭП", ?(ЭтоКомпания = 0, НЕ ПустаяСтрока(АдресЭППартнера) ИЛИ (УказатьДанныеКонтактногоЛица И
	                         НЕ ПустаяСтрока(АдресЭПКЛ)),НЕ ПустаяСтрока(АдресЭППартнераФизЛицо)));
	СтруктураПоиска.Вставить("НомерТелефона", ?(ЭтоКомпания = 0,НЕ ПустаяСтрока(ТелефонПартнера) ИЛИ (УказатьДанныеКонтактногоЛица И
	                         (НЕ ПустаяСтрока(ТелефонКЛ)ИЛИ НЕ ПустаяСтрока(МобильныйТелефонКЛ))),НЕ ПустаяСтрока(ТелефонПартнераФизЛицо)));
	СтруктураПоиска.Вставить("ИННПлательщикаНДС", (УказыватьЮридическиеРеквизиты И НЕ ПустаяСтрока(ИННПлательщикаНДС)));
	СтруктураПоиска.Вставить("ФИО", (ЭтоКомпания = 1) ИЛИ (ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(ФамилияКЛ)));
	СтруктураПоиска.Вставить("КодПоЕДРПОУ", (ЭтоКомпания = 0 И УказыватьЮридическиеРеквизиты И ВидКомпании <> 1 И НЕ ПустаяСтрока(КодПоЕДРПОУ)));
	СтруктураПоиска.Вставить("ДокументКонтрагента", (ЭтоКомпания = 1) И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность);
	СтруктураПоиска.Вставить("РегистрационныйНомер", (ИспользуютсяТолькоПартнеры ИЛИ УказыватьЮридическиеРеквизиты) И ВидКомпании = 1);
	
	МассивПредставленийТелефона = МассивПредставленийТелефонов();
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = ПодзапросПоНазванию();
	
	Если СтруктураПоиска.АдресЭП Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоАдресуЭлектроннойПочты();
	КонецЕсли;
	
	Если СтруктураПоиска.НомерТелефона Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоНомеруТелефона(МассивПредставленийТелефона);
	КонецЕсли;
	
	Если СтруктураПоиска.ИННПлательщикаНДС Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоИННПлательщикаНДС();
	КонецЕсли;
	
	Если СтруктураПоиска.ФИО Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоФио(Запрос);
	КонецЕсли;
	
	Если СтруктураПоиска.НаименованиеКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоНаименованиюКонтрагента();
	КонецЕсли;
	
	Если СтруктураПоиска.КодПоЕДРПОУ Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоЕДРПОУ();
	КонецЕсли;
	
	Если СтруктураПоиска.ДокументКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоДокументуУдостоверяющемуЛичность()
	КонецЕсли;
	
	Если СтруктураПоиска.РегистрационныйНомер Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоРегистрационномуНомеруВСтранеРегистрации();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + СводныйЗапрос(СтруктураПоиска);
	
	НаименованиеПоиск = НаименованиеПартнера();
	Если ЭтоКомпания = 0 Тогда
		НаименованиеПоиск = "%" + НаименованиеПоиск + "%";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Название", НаименованиеПоиск);
	Запрос.УстановитьПараметр("АдресаЭП", МассивАдресовЭлектроннойПочтыДляПоиска());
	Запрос.УстановитьПараметр("ИННПлательщикаНДС", ИННПлательщикаНДС);
	Запрос.УстановитьПараметр("МассивНомеровТелефона", МассивНомеровТелефонаДляПоиска());
	Запрос.УстановитьПараметр("НаименованиеКонтрагента","%"+ПолноеЮридическоеНаименование+"%");
	Запрос.УстановитьПараметр("КодПоЕДРПОУ", КодПоЕДРПОУ);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Серия", СерияДокумента);
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ИспользуютсяТолькоПартнеры", ИспользуютсяТолькоПартнеры);
	Запрос.УстановитьПараметр("СтрокаОбособленноеПодразделение", НСтр("ru='Обособленное подразделение';uk='Відокремлений підрозділ'"));
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	
	ПредставленияРеквизитов = Новый Структура;
	ПредставленияРеквизитов.Вставить("СтрокаНаименование", НСтр("ru='Рабочее наименование';uk='Робоче найменування'"));
	ПредставленияРеквизитов.Вставить("СтрокаНаименованиеПолное",
		?(ИспользуютсяТолькоПартнеры, НСтр("ru='Сокращенное юр. наименование';uk='Скорочене юр. найменування'"), НСтр("ru='Публичное наименование';uk='Публічне найменування'")));
	ПредставленияРеквизитов.Вставить("СтрокаКодЕДРПОУ", НСтр("ru='Код по ЕДРПОУ';uk='Код за ЄДРПОУ'"));
	ПредставленияРеквизитов.Вставить("СтрокаИННПлательщикаНДС", НСтр("ru='ИНН плательщика НДС';uk='ІПН платника ПДВ'"));
	ПредставленияРеквизитов.Вставить("СтрокаКодФилиала", НСтр("ru='Код филиала';uk='Код філії'"));
	ПредставленияРеквизитов.Вставить("СтрокаТелефон", НСтр("ru='Телефон';uk='Телефон'"));
	ПредставленияРеквизитов.Вставить("СтрокаEmail", НСтр("ru='Email';uk='Email'"));
	ПредставленияРеквизитов.Вставить("СтрокаДанныеДокумента", НСтр("ru='Документ контрагента';uk='Документ контрагента'"));
	ПредставленияРеквизитов.Вставить("СтрокаВидПартнера", НСтр("ru='Вид партнера';uk='Вид партнера'"));
	ПредставленияРеквизитов.Вставить("СтрокаВидКонтрагента", НСтр("ru='Вид контрагента';uk='Вид контрагента'"));
	ПредставленияРеквизитов.Вставить("СтрокаРегистрационныйНомер", НСтр("ru='Регистрационный номер';uk='Реєстраційний номер'"));
	
	Для Каждого ЭлементСтруктуры Из ПредставленияРеквизитов Цикл
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	РеквизитыИнформацииБезПоиска = Новый СписокЗначений;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьВременныеТаблицыРеквизитовДанных(МенеджерВременныхТаблиц, ПредставленияРеквизитов, СтруктураПоиска, РеквизитыИнформацииБезПоиска);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		Запрос.УстановитьПараметр("ПредставлениеТелефона" + Строка(инд), "%"+МассивПредставленийТелефона[инд]+"%");
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	МенеджерВременныхТаблиц.Закрыть();
	
	ЗаполнитьРезультатыНайдено(РезультатЗапроса, ПредставленияРеквизитов, РеквизитыИнформацииБезПоиска);
	
	ЕстьДубльПоИННПлательщикаНДСКодФилиала = Ложь;
	
	СтруктураИННПлательщикаНДС = ДанныеИННПлательщикаНДС_КодФилиала();
	
	Если Не (НаОснованииКонтрагента Или ПустаяСтрока(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС)) Тогда	
		НайденныйДубльПоИННПлательщикаНДС = ПартнерыИКонтрагенты.ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС, СтруктураИННПлательщикаНДС.КодФилиала);
		ЕстьДубльПоИННПлательщикаНДСКодФилиала = (НайденныйДубльПоИННПлательщикаНДС <> Неопределено);
	КонецЕсли;
	
	Если ЕстьДубльПоИННПлательщикаНДСКодФилиала Тогда	
		Элементы.ДекорацияДубльИННПлательщикаНДСКодФилиала.Заголовок = СообщениеДубльИННПлательщикаНДС(СтруктураИННПлательщикаНДС.ИННПлательщикаНДС_КодФилиала, НайденныйДубльПоИННПлательщикаНДС);
		Если ИспользуютсяТолькоПартнеры Тогда
			Элементы.ДействиеПоРезультатамНайдено.Доступность = Ложь;
			ДействиеПоРезультатамНайдено = 0;
		КонецЕсли;
		Элементы.ГруппаДействиеСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаДубльИННПлательщикаНДСКодФилиала;
		ДействиеСКонтрагентом = 0;
		ОтобразитьДубльИННПлательщикаНДСКодФилиалавНайденныхПартнерах(НайденныйДубльПоИННПлательщикаНДС , ПредставленияРеквизитов);
	Иначе
		Элементы.ДействиеПоРезультатамНайдено.Доступность = Истина;
		Элементы.ДекорацияДубльИННПлательщикаНДСКодФилиала.Заголовок = "";
		Элементы.ГруппаДействиеСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаДействиеСКонтрагентом;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДействиеСКонтрагентом", "Видимость",
			Не ИспользуютсяТолькоПартнеры И УказыватьЮридическиеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВременныеТаблицыРеквизитовДанных(МенеджерВременныхТаблиц,
	                                                ПредставленияРеквизитов, СтруктураПоиска, РеквизитыИнформацииБезПоиска)
	
	РеквизитыПартнера = Новый ТаблицаЗначений;
	РеквизитыПартнера.Колонки.Добавить("Реквизит",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	РеквизитыПартнера.Колонки.Добавить("Значение",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300)));
	РеквизитыПартнера.Колонки.Добавить("Порядок",      Новый ОписаниеТипов("Число"));
	РеквизитыПартнера.Колонки.Добавить("Существенный", Новый ОписаниеТипов("Булево"));
	
	РеквизитыКонтрагента = РеквизитыПартнера.Скопировать();
	РеквизитыКонтактногоЛица = РеквизитыПартнера.Скопировать();
	
	//Реквизиты партнера
	
	Если Не ИспользуютсяТолькоПартнеры Тогда
		РеквизитыИнформацииБезПоиска.Добавить(ПредставленияРеквизитов.СтрокаВидПартнера);
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаВидПартнера,
			Строка(ТипЮрФизЛицаПартнера(ЭтоКомпания)), 1, Истина);
	КонецЕсли;
	
	НаименованиеПоиск = НаименованиеПартнера();
	
	ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаНаименованиеПолное,
		НаименованиеПоиск, 2);
	ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаНаименование,
		НаименованиеПоиск, 3);
	
	Если СтруктураПоиска.АдресЭП Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаEmail,
			?(ЭтоКомпания = 0, АдресЭППартнера, АдресЭППартнераФизЛицо), 4);
	КонецЕсли;
	
	Если СтруктураПоиска.НомерТелефона Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаТелефон,
			?(ЭтоКомпания = 0, ТелефонПартнера, ТелефонПартнераФизЛицо), 5);
	КонецЕсли;
	
	//Реквизиты контрагента
	
	РеквизитыИнформацииБезПоиска.Добавить(ПредставленияРеквизитов.СтрокаВидКонтрагента);
	ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаВидКонтрагента,
		?(ИспользуютсяТолькоПартнеры Или УказыватьЮридическиеРеквизиты, ПредставлениеТипаЮрФизЛица(), ""), 1, Истина);
	
	Если Не ИспользуютсяТолькоПартнеры Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаНаименованиеПолное,
			?(СтруктураПоиска.НаименованиеКонтрагента, ПолноеЮридическоеНаименование, ""), 2);
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаНаименование,
			?(СтруктураПоиска.НаименованиеКонтрагента, ПолноеЮридическоеНаименование, ""), 3);
	КонецЕсли;
	
	Если СтруктураПоиска.ИННПлательщикаНДС Тогда	
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаИННПлательщикаНДС, ИННПлательщикаНДС, 4, Истина);
		Если ЭтоКомпания = 0 И (ВидКомпании = 0 Или ВидКомпании = 3) Тогда
			РеквизитыИнформацииБезПоиска.Добавить(ПредставленияРеквизитов.СтрокаКодФилиала);
			ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаКодФилиала, КодФилиала, 5);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПоиска.КодПоЕДРПОУ Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаКодЕДРПОУ, КодПоЕДРПОУ, 6);
	КонецЕсли;
	
	Если СтруктураПоиска.ДокументКонтрагента Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаДанныеДокумента,
			ПредставлениеДокументаФизическогоЛица(), 7);
	КонецЕсли;
	
	Если СтруктураПоиска.РегистрационныйНомер Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаРегистрационныйНомер,
			РегистрационныйНомер, 8);
	КонецЕсли;
		
	//Реквизиты контактного лица
	
	Если СтруктураПоиска.ФИО Тогда
		Если ЭтоКомпания = 0 Тогда
			ТекущееФИО = ФИО_ОднойСтрокой(ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
		Иначе
			ТекущееФИО = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
		КонецЕсли;
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтактногоЛица, ПредставленияРеквизитов.СтрокаНаименование, ТекущееФИО, 1);
	КонецЕсли;
	
	Если СтруктураПоиска.АдресЭП Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтактногоЛица, ПредставленияРеквизитов.СтрокаEmail,
			?(ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица, АдресЭПКЛ, ""), 2);
	КонецЕсли;
	
	Если СтруктураПоиска.НомерТелефона Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтактногоЛица, ПредставленияРеквизитов.СтрокаТелефон,
			?(ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица, ?(ПустаяСтрока(ТелефонКЛ), МобильныйТелефонКЛ, ТелефонКЛ), ""), 2);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеквизитыПартнера.Реквизит,
	|	РеквизитыПартнера.Значение,
	|	РеквизитыПартнера.Порядок,
	|	РеквизитыПартнера.Существенный
	|ПОМЕСТИТЬ РеквизитыПартнера
	|ИЗ
	|	&РеквизитыПартнера КАК РеквизитыПартнера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыКонтрагента.Реквизит,
	|	РеквизитыКонтрагента.Значение,
	|	РеквизитыКонтрагента.Порядок,
	|	РеквизитыКонтрагента.Существенный
	|ПОМЕСТИТЬ РеквизитыКонтрагента
	|ИЗ
	|	&РеквизитыКонтрагента КАК РеквизитыКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыКонтактногоЛица.Реквизит,
	|	РеквизитыКонтактногоЛица.Значение,
	|	РеквизитыКонтактногоЛица.Порядок,
	|	РеквизитыКонтактногоЛица.Существенный
	|ПОМЕСТИТЬ РеквизитыКонтактногоЛица
	|ИЗ
	|	&РеквизитыКонтактногоЛица КАК РеквизитыКонтактногоЛица";
	
	Запрос.УстановитьПараметр("РеквизитыПартнера",        РеквизитыПартнера);
	Запрос.УстановитьПараметр("РеквизитыКонтрагента",     РеквизитыКонтрагента);
	Запрос.УстановитьПараметр("РеквизитыКонтактногоЛица", РеквизитыКонтактногоЛица);
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВТаблицуРеквизитовДанных(ТаблицаРеквизитов, Реквизит, Значение, Порядок, Существенный = Ложь)
	
	СтрокаРеквизита = ТаблицаРеквизитов.Добавить();
	СтрокаРеквизита.Реквизит = Реквизит;
	СтрокаРеквизита.Значение = Значение;
	СтрокаРеквизита.Порядок  = Порядок;
	СтрокаРеквизита.Существенный = Существенный;
	
КонецПроцедуры

&НаСервере
Функция МассивАдресовЭлектроннойПочтыДляПоиска()

	МассивАдресовЭП = Новый Массив;
	Если ЭтоКомпания = 0 И НЕ ПустаяСтрока(АдресЭППартнера) Тогда
		МассивАдресовЭП.Добавить(АдресЭППартнера);
	КонецЕсли;
	Если ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(АдресЭПКЛ) Тогда
		МассивАдресовЭП.Добавить(АдресЭПКЛ);
	КонецЕсли;
	Если ЭтоКомпания = 1 И НЕ ПустаяСтрока(АдресЭППартнераФизЛицо) Тогда
		МассивАдресовЭП.Добавить(АдресЭППартнераФизЛицо);
	КонецЕсли;
	
	Возврат МассивАдресовЭП;

КонецФункции

&НаСервере
Функция МассивПредставленийТелефонов()
	
	МассивПредставленийТелефонов = Новый Массив;
	
	Если ЭтоКомпания = 0 Тогда
		Если НЕ ПустаяСтрока(ТелефонПартнера) Тогда
			МассивПредставленийТелефонов.Добавить(ТелефонПартнера);
		КонецЕсли;
		Если УказатьДанныеКонтактногоЛица Тогда
			Если НЕ ПустаяСтрока(ТелефонКЛ) Тогда
				МассивПредставленийТелефонов.Добавить(ТелефонКЛ);
			КонецЕсли;
			Если НЕ ПустаяСтрока(МобильныйТелефонКЛ) Тогда
				МассивПредставленийТелефонов.Добавить(МобильныйТелефонКЛ);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			МассивПредставленийТелефонов.Добавить(ТелефонПартнераФизЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивПредставленийТелефонов;
	
КонецФункции

&НаСервере
Функция МассивНомеровТелефонаДляПоиска()
	
	МассивНомеровТелефона = Новый Массив;
	
	Если ЭтоКомпания = 0 Тогда
		Если НЕ ПустаяСтрока(ТелефонПартнера) Тогда
			ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона,
				ЗначенияПолейВСписокЗначений(ТелефонПартнераЗначенияПолей));
		КонецЕсли;
		Если УказатьДанныеКонтактногоЛица Тогда
			Если НЕ ПустаяСтрока(ТелефонКЛ) Тогда
				ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона,
					ЗначенияПолейВСписокЗначений(ТелефонКЛЗначенияПолей));
			КонецЕсли;
			Если НЕ ПустаяСтрока(МобильныйТелефонКЛ) Тогда
				ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона,
					ЗначенияПолейВСписокЗначений(МобильныйТелефонКЛЗначенияПолей));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона,
				ЗначенияПолейВСписокЗначений(ТелефонПартнераФизЛицоЗначенияПолей));
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивНомеровТелефона;
	
КонецФункции

&НаСервере
Процедура ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеров, СписокЗначенияПолей)
	
	Для каждого ЭлементСписка Из СписокЗначенияПолей Цикл
		Если ЭлементСписка.Представление = "НомерТелефона" И НЕ ПустаяСтрока(ЭлементСписка.Значение) Тогда
			МассивНомеров.Добавить(УбратьРазделителиВНомерТелефона(ЭлементСписка.Значение));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

&НаСервере
Процедура ДобавитьВМассивФИО(МассивФИО, Фамилия, Имя, Отчество)
	
	СтрокаДляДобавления =  ФИО_ОднойСтрокой(Фамилия, Имя, Отчество);
	Если МассивФИО.Найти(СтрокаДляДобавления) = Неопределено Тогда
		МассивФИО.Добавить(СтрокаДляДобавления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыНайдено(РезультатЗапроса, ПредставленияРеквизитов, РеквизитыИнформацииБезПоиска)
	
	ТаблицаНайдено.Очистить();
	ЭлементыДереваДанных = ДеревоДанныхНайденныхПартнеров.ПолучитьЭлементы();
	ЭлементыДереваДанных.Очистить();
	
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаПартнеры        = РезультатЗапроса[КоличествоПакетов -2].Выгрузить();
	ВыборкаДанныеПартнеров = РезультатЗапроса[КоличествоПакетов -1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ТаблицаПартнеры.Количество() = 0 Тогда
		ДействиеПоРезультатамНайдено = 2;
		ДействиеСКонтрагентом = ?(УказыватьЮридическиеРеквизиты, 1, 0);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаДанныеПартнеров.Следующий() Цикл
		
		УзелПартнер = ЭлементыДереваДанных.Добавить();
		УзелПартнер.Реквизит = НСтр("ru='Партнер';uk='Партнер'");
		УзелПартнер.НайденоПоСсылка = ВыборкаДанныеПартнеров.Партнер;
		
		СтрокаТаблицыПартнеры = ТаблицаПартнеры.Найти(ВыборкаДанныеПартнеров.Партнер, "Партнер");
		
		СтрокаТаблицыНайдено = ТаблицаНайдено.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыНайдено, СтрокаТаблицыПартнеры);
		Если СтрокаТаблицыНайдено.КоличествоНайденныхАналогов > 1 Тогда
			СтрокаТаблицыНайдено.ПредставлениеПартнер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (Совпадений - %2)';uk='%1 (Співпаданінь - %2)'"),
				Строка(СтрокаТаблицыПартнеры.Партнер),
				СтрокаТаблицыПартнеры.КоличествоНайденныхАналогов);
		Иначе
			СтрокаТаблицыНайдено.ПредставлениеПартнер = СтрокаТаблицыПартнеры.Представление;
		КонецЕсли;
		
		СтрокаТаблицыНайдено.ИдентификаторДереваДанных = УзелПартнер.ПолучитьИдентификатор();
		
		ЭлементыУзлаПартнер = УзелПартнер.ПолучитьЭлементы();
		
		УзелИнформации = Неопределено;
		ПропуститьУзелКонтрагента = Ложь;
		
		ВыборкаПодчиненойСсылки = ВыборкаДанныеПартнеров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодчиненойСсылки.Следующий() Цикл
			
			ТипИнформации = ТипЗнч(ВыборкаПодчиненойСсылки.НайденоПоСсылка);
			
			Если ИспользуютсяТолькоПартнеры И ТипИнформации = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ПропуститьУзелКонтрагента Тогда
					Продолжить;
				КонецЕсли;
				ПропуститьУзелКонтрагента = Истина;
			Иначе
				
				УзелИнформации = ЭлементыУзлаПартнер.Добавить();
				УзелИнформации.НайденоПоСсылка = ВыборкаПодчиненойСсылки.НайденоПоСсылка;
				
				Если ТипИнформации = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					УзелИнформации.Реквизит = НСтр("ru='Информация о контактном лице';uk='Інформація про контактну особу'");
				ИначеЕсли ТипИнформации = Тип("СправочникСсылка.Контрагенты") Или ИспользуютсяТолькоПартнеры Тогда
					УзелИнформации.Реквизит = НСтр("ru='Информация о контрагенте';uk='Інформація про контрагента'");
				Иначе
					УзелИнформации.Реквизит = НСтр("ru='Информация о партнере';uk='Інформація про партнера'");
				КонецЕсли
				
			КонецЕсли;
			
			ЭлементыУзлаИнформации = УзелИнформации.ПолучитьЭлементы();
			
			ВыборкаПодчиненныхДанных = ВыборкаПодчиненойСсылки.Выбрать();
			Пока ВыборкаПодчиненныхДанных.Следующий() Цикл
				
				УзелДанных = ЭлементыУзлаИнформации.Добавить();
				ЗаполнитьЗначенияСвойств(УзелДанных, ВыборкаПодчиненныхДанных);
				
				Если ВыборкаПодчиненныхДанных.Совпадение Тогда
					УзелДанных.Совпадение = Истина;
				ИначеЕсли РеквизитыИнформацииБезПоиска.НайтиПоЗначению(ВыборкаПодчиненныхДанных.Реквизит) <> Неопределено Тогда
					
					Если ВыборкаПодчиненныхДанных.ЗначениеНайденного <> ВыборкаПодчиненныхДанных.ЗначениеСоздаваемого
						 И ЗначениеЗаполнено(ВыборкаПодчиненныхДанных.ЗначениеСоздаваемого) Тогда
						УзелДанных.Различие = ВыборкаПодчиненныхДанных.Существенный;
						СтрокаТаблицыНайдено.Различие = Макс(СтрокаТаблицыНайдено.Различие, УзелДанных.Различие);
					КонецЕсли;
					Продолжить;
					
				КонецЕсли;
				УзелДанных.Различие = Не УзелДанных.Совпадение И ВыборкаПодчиненныхДанных.Существенный;
				СтрокаТаблицыНайдено.Различие = Макс(СтрокаТаблицыНайдено.Различие, УзелДанных.Различие);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНайдено.Сортировать("КоличествоНайденныхАналогов УБЫВ, ПредставлениеПартнер");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДубльИННПлательщикаНДСКодФилиалавНайденныхПартнерах(НайденныйДубльПоИНН, ПредставленияРеквизитов)	
	
	НайденныеСтроки = ТаблицаНайдено.НайтиСтроки(Новый Структура("Партнер", НайденныйДубльПоИНН.Партнер));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПартнера = НайденныеСтроки[0];
	СтрокаПартнера.ДубльИННПлательщикаНДСКодФилиала = Истина;
	
	СсылкаНаДубль = ?(ИспользуютсяТолькоПартнеры, НайденныйДубльПоИНН.Партнер, НайденныйДубльПоИНН.Ссылка);
	
	УзелПартнера = ДеревоДанныхНайденныхПартнеров.НайтиПоИдентификатору(СтрокаПартнера.ИдентификаторДереваДанных);
	ЭлементыУзлаПартнера = УзелПартнера.ПолучитьЭлементы();
	Для Каждого ЭлементУзла Из ЭлементыУзлаПартнера Цикл
		Если ЭлементУзла.НайденоПоСсылка = СсылкаНаДубль Тогда
			
			УзелКонтрагента = ЭлементУзла.ПолучитьЭлементы();
			Для Каждого ЭлементИнформации Из УзелКонтрагента Цикл
				Если ЭлементИнформации.Реквизит = ПредставленияРеквизитов.СтрокаИННПлательщикаНДС Или
					 ЭлементИнформации.Реквизит = ПредставленияРеквизитов.СтрокаКодФилиала Тогда
					ЭлементИнформации.ДубльИННПлательщикаНДСКодФилиала = Истина;
				КонецЕсли;
			КонецЦикла;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтактнойИнформацией

&НаКлиенте
Процедура ОткрытьФормуВыбораКонтактнойИнформации(ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначенияПолей, Заголовок = "")
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           ЭтаФорма[ИмяРеквизитаЗначенияПолей]);
	ПараметрыОткрытия.Вставить("Представление",           ЭтаФорма[ИмяРеквизитаПредставление]);
	
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПредставление", ИмяРеквизитаПредставление);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаЗначенияПолей", ИмяРеквизитаЗначенияПолей);
	ОповещениеОкончанияРедактированияКИ = Новый ОписаниеОповещения("РедактированиеКонтактнойИнформацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, ОповещениеОкончанияРедактированияКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизитаЗначенияПолей] = Результат.КонтактнаяИнформация;
		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизитаПредставление] = Результат.Представление;
		
		ОтключитьОтметкуНезаполненного();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция КорректноВведенНомерТелефона(СписокЗначенияПолей)
	
	НомерТелефона = "";
	КодГорода = "";
	КодСтраны = "";
	
	Для каждого ЭлементСписка Из СписокЗначенияПолей Цикл
		Если ЭлементСписка.Представление = "НомерТелефона" Тогда
			НомерТелефона = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЭлементСписка.Представление = "КодГорода" Тогда
			КодГорода = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЭлементСписка.Представление = "КодСтраны" Тогда
			КодСтраны = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Если ЛЕВ(КодСтраны,1)= "+" Тогда
			КодСтраны = Прав(КодСтраны, СтрДлина(КодСтраны)-1);
		КонецЕсли;
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодСтраны) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодГорода) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НомерТелефона) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТелефона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	КодСтраны = "";
	КодГорода = "";
	НомерТелефона = "";
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "КОДСТРАНЫ" Тогда
			КодСтраны = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "КОДГОРОДА" Тогда
			КодГорода = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "НОМЕРТЕЛЕФОНА" Тогда
			НомерТелефона = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		КонецЕсли;
	КонецЦикла;
	
	Если Лев(КодСтраны, 1) = "+" Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	Поз = СтрНайти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = НомерТелефонаБезРазделителя(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = НомерТелефонаБезРазделителя(КодСтраны + КодГорода + НомерТелефона);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "СТРАНА" Тогда
			СтрокаТабличнойЧасти.Страна = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ОБЛАСТЬ" Тогда
			СтрокаТабличнойЧасти.Область = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ГОРОД" Тогда
			СтрокаТабличнойЧасти.Город = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерТелефонаБезРазделителя(Знач СтрНомер)
	
	Поз = СтрНайти(СтрНомер, ",");
	Если Поз <> 0 Тогда
		СтрНомер = Лев(СтрНомер, Поз-1);
	КонецЕсли;
	
	СтрНомер = СтрЗаменить(СтрНомер, "-", "");
	СтрНомер = СтрЗаменить(СтрНомер, " ", "");
	СтрНомер = СтрЗаменить(СтрНомер, "+", "");

	Возврат СтрНомер;

КонецФункции

&НаСервере
Процедура ОбработатьЭлементыРедактированияКонтактнойИнформации()

	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В(&МассивВидовКонтактнойИнформации)
	|	И ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге";
	
	Запрос.УстановитьПараметр("МассивВидовКонтактнойИнформации",МассивВидовКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица Тогда
			Элементы.МобильныйТелефонКЛ.РедактированиеТекста          = Ложь;
			Элементы.МобильныйТелефонКЛ.ЦветФона                      = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
			Элементы.ТелефонКЛ.РедактированиеТекста                   = Ложь;
			Элементы.ТелефонКЛ.ЦветФона                               = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			Элементы.ТелефонПартнера.РедактированиеТекста             = Ложь;
			Элементы.ТелефонПартнера.ЦветФона                         = WebЦвета.Кремовый;
			Элементы.ТелефонПартнераФизЛицо.РедактированиеТекста      = Ложь;
			Элементы.ТелефонПартнераФизЛицо.ЦветФона                  = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			Элементы.ФактическийАдрес.РедактированиеТекста            = Ложь;
			Элементы.ФактическийАдрес.ЦветФона                        = WebЦвета.Кремовый;
			Элементы.ФактическийАдресЧастноеЛицо.РедактированиеТекста = Ложь;
			Элементы.ФактическийАдресЧастноеЛицо.ЦветФона             = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			Элементы.ЮридическийАдрес.РедактированиеТекста            = Ложь;
			Элементы.ЮридическийАдрес.ЦветФона                        = WebЦвета.Кремовый;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияЭлементаКИТелефон(Элемент, ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначенияПолей, Событие)
	
	Если Событие = "НачалоВыбора" Тогда
		ЭтаФорма[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
	ИначеЕсли Событие = "Очистка" Тогда
		ЭтаФорма[ИмяРеквизитаПредставление] = "";
		ЭтаФорма[ИмяРеквизитаЗначенияПолей] = "";
	КонецЕсли;
	
	Если Событие = "НачалоВыбора" Тогда
		ОткрытьФормуВыбораКонтактнойИнформации(ВидКонтактнойИнформации,
		                                       ИмяРеквизитаПредставление,
		                                       ИмяРеквизитаЗначенияПолей);
	ИначеЕсли Событие = "ПриИзменении" Тогда
		
		ЗначенияПолейКонтактнойИнформацииСервер(ЭтаФорма[ИмяРеквизитаПредставление],
		                                        ЭтаФорма[ИмяРеквизитаЗначенияПолей],
		                                        ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		
		Если НЕ КорректноВведенНомерТелефона(ЗначенияПолейВСписокЗначений(ЭтаФорма[ИмяРеквизитаЗначенияПолей])) Тогда
			ОткрытьФормуВыбораКонтактнойИнформации(ВидКонтактнойИнформации,
			                                       ИмяРеквизитаПредставление,
			                                       ИмяРеквизитаЗначенияПолей,
			                                       НСтр("ru='Уточните номер телефона.';uk='Уточніть номер телефону.'"));
		Иначе
			ОтключитьОтметкуНезаполненного();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияЭлементаКИАдрес(Элемент, ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначенияПолей, Событие)
	
	Если Событие = "Очистка" Тогда
		ЭтаФорма[ИмяРеквизитаПредставление] = "";
		ЭтаФорма[ИмяРеквизитаЗначенияПолей] = "";
	КонецЕсли;
	
	Если Событие = "НачалоВыбора" Тогда
		ОткрытьФормуВыбораКонтактнойИнформации(ВидКонтактнойИнформации,
		                                       ИмяРеквизитаПредставление,
		                                       ИмяРеквизитаЗначенияПолей);
	ИначеЕсли Событие = "ПриИзменении" Тогда
		
		ЗначенияПолейКонтактнойИнформацииСервер(ЭтаФорма[ИмяРеквизитаПредставление],
		                                        ЭтаФорма[ИмяРеквизитаЗначенияПолей],
		                                        ВидКонтактнойИнформации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, ЗначенияПолей, Знач ВидКонтактнойИнформации)
	
	Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ЗначенияПолей);
	
	// Создаем новый экземпляр по представлению
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	// Добавляем в него комментарий, если есть
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ЗначенияПолей, Комментарий);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБанковскимиСчетами


&НаСервереБезКонтекста
Функция ПолучитьСписокБанковПоРеквизитам(Поле, Значение, Банк, МФО, КоррСчет)	
	
	СписокБанков = ДенежныеСредстваСервер.ПолучитьСписокБанковПоРеквизитам(
		Поле,
		Значение,
		Банк,
		МФО,
		КоррСчет);
	Возврат СписокБанков;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьМФОиКоррСчет(Банк, МФО, КоррСчет) 	
	
	ДенежныеСредстваСервер.ЗаполнитьМФОиКоррСчет(
		Банк,
		МФО,
		КоррСчет);
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеБанка(БанкДляПредставления)

	Если НЕ ЗначениеЗаполнено(БанкДляПредставления) Тогда
		Возврат "";
	Иначе
		Возврат ПредставлениеБанкаСервер(БанкДляПредставления);
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеБанкаСервер(БанкДляПредставления)
	
	ГородБанкаДляПредставления = БанкДляПредставления.Город;
	Возврат Строка(БанкДляПредставления) + ?(ПустаяСтрока(ГородБанкаДляПредставления),""," ("+ ГородБанкаДляПредставления +")");
	
КонецФункции

&НаСервереБезКонтекста
Функция АвтоНаименованиеБанковскогоСчета(НомерСчета, Банк, Валюта)
	
	СтрокаНаименования = Прав(СокрЛП(НомерСчета), 4)
		+ ?(ЗначениеЗаполнено(Банк), " в " + Строка(Банк), "")
		+ " (" + Строка(Валюта) + ")";
	
	Возврат Лев(СтрокаНаименования, 150);
	
КонецФункции

&НаСервере
Процедура ПрочитатьТаблицуСоответствияМФОСВИФТ()	
	
	СоответствиеМФОСВИФТXML = Справочники.БанковскиеСчетаОрганизаций.ПолучитьМакет("СоответствиеМФОSWIFT").ПолучитьТекст();
	СоответствиеМФОСВИФТ.Загрузить(ОбщегоНазначения.ПрочитатьXMLВТаблицу(СоответствиеМФОСВИФТXML).Данные);
	
КонецПроцедуры

&НаСервере
Функция СВИФТпоМФО(МФО)	
	
	СтрокиСоответствия = СоответствиеМФОСВИФТ.НайтиСтроки(Новый Структура("МФО", СокрЛП(МФО)));
	Если СтрокиСоответствия.Количество() = 1 Тогда
		Возврат СтрокиСоответствия[0].SWIFT;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьБанкПоНомеруСчета(НомерСчета)
	
	Возврат РаботаСБанками.ПолучитьБанкПоНомеруСчетаIBAN(НомерСчета);
	
КонецФункции

#КонецОбласти

#Область ПереходыПоСтраницам

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Знач Оповещение, Команда)
	
	Отказ = УсловияПереходаПоСтраницамНеВыполнены(Команда);
	
	Если Не Отказ Тогда
		ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Новый ОписаниеОповещения("ВыполнитьПереходПоСтраницамЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), Команда);
		Возврат;
	КонецЕсли;
	
	ВыполнитьПереходПоСтраницамФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ;
    
    ВыполнитьПереходПоСтраницамФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницамФрагмент(Знач Оповещение)
	
	УправлениеСтраницамиПодвал();
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Функция УсловияПереходаПоСтраницамНеВыполнены(Команда)
	
	Отказ = Ложь;
	Если Команда.Имя = "Далее" Тогда
		Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
			Отказ = ПервичнаяИнформацияЗаполненаНеправильно();
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
			Отказ = ДополнительныеСведенияЗаполненыНеправильно();
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаГоловнойКонтрагент Тогда
			Отказ = СведенияГоловногоКонтрагентаЗаполненыНеправильно();
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет Тогда
			Отказ = РасчетныйСчетЗаполненНеправильно();
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчетГоловногоКонтрагента Тогда
			Отказ = РасчетныйСчетГоловногоКонтрагентаЗаполненНеправильно();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Знач Оповещение, Команда)
	
	Если Команда.Имя = "Далее" Тогда
		
		Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
			
			ВыполнитьПоискПоПервичнойИнформации();
			Если ТаблицаНайдено.Количество() > 0 Тогда
				ПерейтиНаСтраницуНайденныхСовпадений();
			Иначе
				ПерейтиНаСтраницуДополнительныхСведений();
			КонецЕсли;
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено Тогда
			
			ВыборПользователяПоРезультатамНайдено(Новый ОписаниеОповещения("ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамПослеВыбора", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)));
			Возврат;
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
			
			Если (ДействиеСКонтрагентом = 1 Или ИспользуютсяТолькоПартнеры) И УказыватьЮридическиеРеквизиты Тогда
				ПерейтиНаСтраницуРасчетногоСчетаКонтрагента();
			Иначе
				ПерейтиНаФинальнуюСтраницу();
			КонецЕсли;
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет Тогда
			
			Если ИспользуютсяТолькоПартнеры
					Или (ДействиеСКонтрагентом = 1 И Не НаОснованииКонтрагента И УказыватьЮридическиеРеквизиты) Тогда
					
				Если ВидКомпании = 3 И Не ИспользуютсяТолькоПартнеры Тогда
					ПерейтиНаСтраницуВыбораГоловногоКонтрагента();
				ИначеЕсли ВидКомпании = 0 И ЗначениеЗаполнено(ИННПлательщикаНДС) Тогда	
					ВыполнитьПоискНепривязанныхОбособленныхПодразделений();
					Если ОбособленныеПодразделения.Количество() > 0 Тогда
						ПерейтиНаСтраницуОбособленныхПодразделений();
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет Тогда
				ПерейтиНаФинальнуюСтраницу();
			КонецЕсли;
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаОбособленныеПодразделения Тогда
			
			ПерейтиНаФинальнуюСтраницу();
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаГоловнойКонтрагент Тогда
			
			Если ВыбратьГоловногоКонтрагента = 1 Тогда
				ПерейтиНаСтраницуРасчетногоСчетаГоловногоКонтрагента();
			Иначе
				ПерейтиНаФинальнуюСтраницу();
			КонецЕсли;
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчетГоловногоКонтрагента Тогда
			
			ПерейтиНаФинальнуюСтраницу();
			
        ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная Тогда
            
			СписокСозданных = Новый СписокЗначений;
			ЗаписатьПартнераИСвязанныеДанные(СписокСозданных);
			
			Если СозданиеВыполнено Тогда
				
				РеквизитыПартнера = Новый Структура;
				
				Для Каждого ЭлементСписка Из СписокСозданных Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
						РеквизитыПартнера.Вставить("Наименование", ЭлементСписка.Представление);
						РеквизитыПартнера.Вставить("ОсновнойМенеджер", ОсновнойМенеджер);
					КонецЕсли;
					ПоказатьОповещениеПользователя("Создание", ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
				
				Если РеквизитыПартнера.Количество() = 0 Тогда
					РеквизитыПартнера = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ПартнерВыбор, "ОсновнойМенеджер, Наименование");
				КонецЕсли;
                
				ВыполнитьДействияЗакрытияФормы(Новый ОписаниеОповещения("ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РеквизитыПартнера, Истина);
                Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РазмерСписка = СтекПредыдущихСтраниц.Количество();
		ИмяПредыдущейСтраницы = СтекПредыдущихСтраниц[РазмерСписка - 1].Значение;
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы[ИмяПредыдущейСтраницы];
		СтекПредыдущихСтраниц.Удалить(РазмерСписка -1);
		
	КонецЕсли;
	
	ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	
	Если Результат Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	Если ДействиеПоРезультатамНайдено = 0 Тогда
		ПерейтиНаСтраницуРасчетногоСчетаКонтрагента();
	Иначе
		ПерейтиНаСтраницуДополнительныхСведений();
	КонецЕсли;
	
	
	ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамФрагмент(Знач Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуНайденныхСовпадений()
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено;
	
	ТекущийЭлемент = Элементы.ТаблицаНайдено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуДополнительныхСведений()
	
	Если ПустаяСтрока(ПолноеЮридическоеНаименование) И ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты Тогда
		ПолноеЮридическоеНаименование = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	ИначеЕсли ПустаяСтрока(ПолноеЮридическоеНаименование) И (ЭтоКомпания = 0 И ВидКомпании = 2) И УказыватьЮридическиеРеквизиты Тогда
		ПолноеЮридическоеНаименование = ФИО_ОднойСтрокой(ФамилияКонтрагента, ИмяКонтрагента, ОтчествоКонтрагента);
	КонецЕсли;
	
	Если НаОснованииДанныхРозничногоПокупателя Тогда
		ЗаголовокДекорации = НСтр("ru='Укажите прочие доступные сведения о розничном покупателе %1:';uk='Вкажіть інші доступні відомості про роздрібного покупця %1:'");
	ИначеЕсли ИспользуютсяТолькоПартнеры Тогда
		ЗаголовокДекорации = НСтр("ru='Укажите прочие доступные сведения о контрагенте %1:';uk='Вкажіть інші доступні відомості про контрагента %1:'");
	Иначе
		ЗаголовокДекорации = НСтр("ru='Укажите прочие доступные сведения о партнере %1:';uk='Вкажіть інші доступні відомості про партнера %1:'");
	КонецЕсли;
	
	Если ЭтоКомпания = 0 Тогда
		
		НаименованиеПартнераДляЗаголовка = ?(ИспользуютсяТолькоПартнеры, ПолноеНаименование, ПолноеЮридическоеНаименование);
		Если ПустаяСтрока(Название) Тогда
			Название = ПолноеНаименование;
		КонецЕсли;
		
		Если ВидКомпании = 3 И ИспользуютсяТолькоПартнеры Тогда
			ЗаполнитьСписокВыбораГоловногоКонтрагента();
		КонецЕсли;
		
	Иначе
		НаименованиеПартнераДляЗаголовка = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
	Название = ?(ПустаяСтрока(Название),НаименованиеПартнераДляЗаголовка, Название);
	
	Элементы.ДекорацияДополнительныеСведения.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДекорации, Название);
	
	УправлениеДоступностьюДополнительныеСведения();
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуРасчетногоСчетаКонтрагента()
	
	Если ЭтоКомпания = 0 Тогда
		НаименованиеПартнераДляЗаголовка = ПолноеНаименование;
	Иначе
		НаименованиеПартнераДляЗаголовка = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
	ЗаголовокДекорации = СтрЗаменить(
		Элементы.ДекорацияБанковскиеСведения.Заголовок,
		"#НаименованиеПартнера#",
		НаименованиеПартнераДляЗаголовка);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияБанковскиеСведения",
		"Заголовок",
		ЗаголовокДекорации);
	
	УправлениеДоступностьюРасчетныйСчет();
	УправлениеЭлементамиБанковскийСчет();
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОбособленныхПодразделений()
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаОбособленныеПодразделения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВыбораГоловногоКонтрагента()
	
	ЗаполнитьСписокВыбораГоловногоКонтрагента();
	ЗаполнитьСписокВыбораПартнераГоловногоКонтрагента();
	
	УправлениеДостуностьюГоловнойКонтрагент();
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаГоловнойКонтрагент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуРасчетногоСчетаГоловногоКонтрагента()
	
	ЗаголовокДекорации = СтрЗаменить(
		Элементы.ДекорацияБанковскиеСведенияГоловногоКонтрагента.Заголовок,
		"#НаименованиеКонтрагента#",
		НаименованиеГоловногоКонтрагента);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияБанковскиеСведенияГоловногоКонтрагента",
		"Заголовок",
		ЗаголовокДекорации);
		
	УправлениеДоступностьюРасчетныйСчетГоловногоКонтрагента();
	УправлениеЭлементамиБанковскийСчетГоловногоКонтрагента();
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчетГоловногоКонтрагента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаФинальнуюСтраницу()
	
	Если НаОснованииДанныхРозничногоПокупателя Тогда
		ЗаголовокСтраницы = НСтр("ru='Проверьте введенные сведения, и нажмите кнопку ""Создать""  для регистрации нового розничного покупателя.';uk='Перевірте введені дані, натисніть кнопку ""Створити"" для реєстрації нового роздрібного покупця.'");
		ЗаголовокДействия = НСтр("ru='Открыть форму вновь созданного розничного покупателя для указания дополнительной информации.';uk='Відкрити форму новоствореного роздрібного покупця для зазначення додаткової інформації.'");
	ИначеЕсли ИспользуютсяТолькоПартнеры Или ДействиеПоРезультатамНайдено = 0 Тогда
		ЗаголовокСтраницы = НСтр("ru='Проверьте введенные сведения, и нажмите кнопку ""Создать""  для регистрации нового контрагента.';uk='Перевірте введені дані, натисніть кнопку ""Створити"" для реєстрації нового контрагента.'");
		ЗаголовокДействия = НСтр("ru='Открыть форму вновь созданного контрагента для указания дополнительной информации.';uk='Відкрити форму новоствореного контрагента для зазначення додаткової інформації.'");
	Иначе
		ЗаголовокСтраницы = НСтр("ru='Проверьте введенные сведения, и нажмите кнопку ""Создать""  для регистрации нового партнера.';uk='Перевірте введені дані, натисніть кнопку ""Створити"" для реєстрації нового партнера.'");
		ЗаголовокДействия = НСтр("ru='Открыть форму вновь созданного партнера для указания дополнительной информации.';uk='Відкрити форму новоствореного партнера для зазначення додаткової інформації.'");
	КонецЕсли;
	
	Элементы.ДекорацияФинальная.Заголовок = ЗаголовокСтраницы;
	Элементы.ОткрытьПослеСоздания.Заголовок = ЗаголовокДействия;
	
	ЗаполнитьИтоговуюИнформацию();
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения), "8.3.12") = 0 Тогда
	    ВыполнитьПереходПоСтраницам(Неопределено, ЭтотОбъект.Команды.Далее);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПродолжениеВыбораПартнераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьДействияЗакрытияФормы(Неопределено, ДополнительныеПараметры.РеквизитыПартнера, ДополнительныеПараметры.СозданыНовыеОбъекты);
        Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиВведеннойИнформации

&НаКлиенте
Функция ПервичнаяИнформацияЗаполненаНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если ЭтоКомпания = 0 Тогда
        Если ИспользуютсяТолькоПартнеры Тогда
            Если ПустаяСтрока(ПолноеЮридическоеНаименование) Тогда
				ВывестиСообщениеПользователю(НСтр("ru='Не указано сокращенное юр. наименование партнера';uk='Не зазначено скорочене юр. найменування партнера'"),"ПолноеЮридическоеНаименование");
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ПолноеНаименование) Тогда
				ВывестиСообщениеПользователю(НСтр("ru='Не указано публичное наименование партнера';uk='Не зазначене публічне найменування партнера'"),"ПолноеНаименование");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоКомпания = 1 Тогда
		Если ПустаяСтрока(ФамилияПартнера) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Не указано фамилия партнера';uk='Не зазначене прізвище партнера'"),"ФамилияПартнера");
			Отказ = Истина;
		КонецЕсли;
		Если ПустаяСтрока(ИмяПартнера) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Не указано имя партнера';uk='Не зазначено ім''я партнера'"),"ИмяПартнера");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если ЭтоКомпания = 0 Тогда
		Если ПустаяСтрока(АдресЭППартнера) И ПустаяСтрока(ТелефонПартнера) Тогда
			Если (УказатьДанныеКонтактногоЛица И ЭтоКомпания = 0) Тогда
				
				Если ПустаяСтрока(ТелефонКЛ) И ПустаяСтрока(МобильныйТелефонКЛ) И ПустаяСтрока(АдресЭПКЛ) Тогда
					
					ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать хотя бы одно значение контактной информации';uk='Необхідно вказати хоча б одне значення контактної інформації'"),"АдресЭППартнера");
					Отказ = Истина;
					
				КонецЕсли;
				
			Иначе
				
				ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать хотя бы одно значение контактной информации';uk='Необхідно вказати хоча б одне значення контактної інформації'"),"АдресЭППартнера");
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(АдресЭППартнераФизЛицо) И ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			
			ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать хотя бы одно значение контактной информации';uk='Необхідно вказати хоча б одне значення контактної інформації'"),"АдресЭППартнераФизЛицо");
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УказыватьЮридическиеРеквизиты Тогда
		
		Если Не ИспользуютсяТолькоПартнеры И ЭтоКомпания = 0 Тогда
			Если ВидКомпании = 2 Тогда
				Если ПустаяСтрока(ФамилияКонтрагента) Тогда
					ВывестиСообщениеПользователю(НСтр("ru='Не указана фамилия контрагента';uk='Не вказано прізвище контрагента'"),"ФамилияКонтрагента");
					Отказ = Истина; 
				КонецЕсли;
				Если ПустаяСтрока(ИмяКонтрагента) Тогда
					ВывестиСообщениеПользователю(НСтр("ru='Не указано имя контрагента';uk='Не вказано ім''я контрагента'"),"ИмяКонтрагента");
					Отказ = Истина; 
				КонецЕсли;
				Если ПустаяСтрока(ОтчествоКонтрагента) Тогда
					ВывестиСообщениеПользователю(НСтр("ru='Не указано отчество контрагента';uk='Не зазначено по батькові контрагента'"),"ОтчествоКонтрагента");
					Отказ = Истина; 
				КонецЕсли;
            Иначе
                Если ПустаяСтрока(ПолноеЮридическоеНаименование) Тогда
					ВывестиСообщениеПользователю(НСтр("ru='Не указано сокращенное юр. наименование';uk='Не зазначене скорочене юр. найменування'"),"НаименованиеКонтрагента");
					Отказ = Истина; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПлательщикНДС Тогда
			Если ПустаяСтрока(ИННПлательщикаНДС) Тогда
				ВывестиСообщениеПользователю(НСтр("ru='Не указано значение ИНН плательщика НДС';uk='Не вказано ІПН платника ПДВ'"), "ИННПлательщикаНДС");
				Отказ = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(ИННПлательщикаНДС) И Не ПустаяСтрока(КодФилиала) Тогда
				ВывестиСообщениеПользователю(НСтр("ru='Указан код филиала, но не указан ИНН плательщика НДС';uk='Зазначений код філії, але не зазначений ІПН платника ПДВ'"), "ИННПлательщикаНДС");
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность Тогда
			Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
				ВывестиСообщениеПользователю(НСтр("ru='Не указано вид документа удостоверяющего личность';uk='Не вказано вид документа, що посвідчує особу'"),"ВидДокумента");
				Отказ = Истина
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УказатьДанныеКонтактногоЛица И ЭтоКомпания = 0 Тогда
		
		Если ПустаяСтрока(ФамилияКЛ) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Не указана фамилия контактного лица';uk='Не зазначене прізвище контактної особи'"),"ФамилияКЛ");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяКл) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Не указано имя контактного лица';uk='Не зазначено ім''я контактної особи'"),"ИмяКЛ");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТелефонКЛ) И ПустаяСтрока(АдресЭПКЛ) И ПустаяСтрока(МобильныйТелефонКЛ) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать хотя бы одно значение контактной информации контактного лица';uk='Необхідно вказати хоча б одне значення контактної інформації контактної особи'"),"АдресЭПКЛ");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		//проверка корректности адресов электронной почты
		Если  НЕ ПустаяСтрока(АдресЭППартнера) И ЭтоКомпания = 0 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭППартнера) Тогда
				ВывестиСообщениеПользователю(НСтр("ru='Неверный формат адреса электронной почты партнера';uk='Невірний формат адреси електронної пошти партнера'"), "АдресЭППартнера");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если  НЕ ПустаяСтрока(АдресЭППартнераФизЛицо) И ЭтоКомпания = 1 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭППартнераФизЛицо) Тогда
				ВывестиСообщениеПользователю(НСтр("ru='Неверный формат адреса электронной почты партнера';uk='Невірний формат адреси електронної пошти партнера'"), "АдресЭППартнераФизЛицо");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если  УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(АдресЭПКЛ) И ЭтоКомпания = 0 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭПКЛ) Тогда
				ВывестиСообщениеПользователю(НСтр("ru='Неверный формат адреса электронной почты контактного лица';uk='Невірний формат адреси електронної пошти контактної особи'"), "АдресЭПКЛ");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Проверка данных физического лица
		Если  ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность Тогда
			
			Если Не ПустаяСтрока(СерияДокумента) Тогда
				ТекстОшибки = "";
				Отказ = Не ФизическиеЛицаКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, СерияДокумента, ТекстОшибки) Или Отказ;
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "СерияДокумента");
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПустаяСтрока(НомерДокумента) Тогда
				ТекстОшибки = "";
				Отказ = Не ФизическиеЛицаКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, НомерДокумента, ТекстОшибки) Или Отказ;
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НомерДокумента");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция ДополнительныеСведенияЗаполненыНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если НЕ Клиент И НЕ Поставщик И НЕ ПрочиеОтношения И НЕ Конкурент Тогда
		ВывестиСообщениеПользователю(НСтр("ru='Необходимо определить хотя бы один тип отношений';uk='Необхідно визначити хоча б один тип відносин'"),"Клиент");
		Отказ = Истина;
	КонецЕсли;
	
	Если ИспользуютсяГруппыДоступаПартнеров
	 И ГруппаДоступа = ПредопределенноеЗначение("Справочник.ГруппыДоступаПартнеров.ПустаяСсылка") Тогда
		ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать группу доступа партнера';uk='Необхідно вказати групу доступу партнера'"),"ГруппаДоступа");
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Название) Тогда
		ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать рабочее наименование партнера';uk='Необхідно вказати робоче найменування партнера'"),"Название");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция СведенияГоловногоКонтрагентаЗаполненыНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если ВыбратьГоловногоКонтрагента = 1 Тогда
        
        Если ПустаяСтрока(ПолноеНаименованиеГоловногоКонтрагента) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Не указано сокращенное юр. наименование';uk='Не зазначене скорочене юр. найменування'"), "ПолноеНаименованиеГоловногоКонтрагента");
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИННПлательщикаНДС) Тогда
			Если КодФилиала = КодФилиалаГоловногоКонтрагента Тогда
				ВывестиСообщениеПользователю(
					НСтр("ru='Код филиала головного контрагента должен отличаться от кода филиала обособленного подразделения';uk='Код філії головного контрагенту повинен відрізнятися від коду філії відокремленого підрозділу'"), КодФилиалаГоловногоКонтрагента);
			ИначеЕсли ИННПлательщикаНДСКодФилиалаГоловногоКонтрагентаИспользуютсяВИнформационнойБазе() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция РасчетныйСчетЗаполненНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если УказатьБанковскийСчетКонтрагента Тогда
		
		Если ПустаяСтрока(НомерСчета) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать номер банковского счета';uk='Необхідно вказати номер банківського рахунку'"), "НомерСчета");
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать валюту денежных средств';uk='Необхідно зазначити валюту грошових коштів'"), "ВалютаДенежныхСредств");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(МФОБанка) И Не ИностранныйБанк Тогда	
			ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать МФО банка';uk='Необхідно вказати МФО банку'"), "МФОБанка");
			Отказ = Истина;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция РасчетныйСчетГоловногоКонтрагентаЗаполненНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если УказатьБанковскийСчетГоловногоКонтрагента Тогда
		
		Если ПустаяСтрока(НомерСчетаГоловногоКонтрагента) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать номер банковского счета';uk='Необхідно вказати номер банківського рахунку'"), "НомерСчетаГоловногоКонтрагента");
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВалютаДенежныхСредствГоловнойКонтрагент) Тогда
			ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать валюту денежных средств';uk='Необхідно зазначити валюту грошових коштів'"), "ВалютаДенежныхСредствГоловнойКонтрагент");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(МФОБанкаГоловнойКонтрагент) И Не ИностранныйБанкГоловнойКонтрагент Тогда	
			ВывестиСообщениеПользователю(НСтр("ru='Необходимо указать МФО банка';uk='Необхідно вказати МФО банку'"), "МФОБанкаГоловнойКонтрагент");
			Отказ = Истина;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЭПКЛ.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТелефонКЛ.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МобильныйТелефонКЛ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МобильныйТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭПКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмяКЛ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФамилияКЛ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФамилияКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЭППартнераФизЛицо.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТелефонПартнераФизЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭППартнераФизЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонПартнераФизЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЭППартнера.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТелефонПартнера.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭППартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонПартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МобильныйТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭПКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппаДоступа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуютсяГруппыДоступаПартнеров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГруппаДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерСчета.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьБанковскийСчетКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерСчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВалютаДенежныхСредств.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаДенежныхСредств");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьБанковскийСчетКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерСчетаГоловногоКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьБанковскийСчетГоловногоКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерСчетаГоловногоКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВалютаДенежныхСредствГоловнойКонтрагент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаДенежныхСредствГоловнойКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьБанковскийСчетГоловногоКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЭППартнераТолькоПартнеры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТелефонПартнераТолькоПартнеры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭППартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонПартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МобильныйТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭПКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидДокумента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказыватьЮридическиеРеквизиты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДокументУдостоверяющийЛичность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СокрЮрНаименованиеКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаОснованииКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСравненияПартнеровЗначениеНайденного.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСравненияПартнеров.Различие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСравненияПартнеровЗначениеНайденного.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСравненияПартнеров.Совпадение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПолностьюОбеспечен);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСравненияПартнеровЗначениеНайденного.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСравненияПартнеров.ДубльИННПлательщикаНДСКодФилиала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНайденоПредставлениеПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНайдено.ДубльИННПлательщикаНДСКодФилиала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНовогоРозничногоПокупателя()
	
	НаОснованииДанныхРозничногоПокупателя = Истина;
	ЭтоКомпания = 1;
	Клиент = Истина;
	
	Элементы.ЭтоКомпания.Видимость = Ложь;
	Элементы.ДекорацияПервичнаяИнформацияЗагрузить.Видимость = Ложь;
	Элементы.СтраницыБудетСоздан.ТекущаяСтраница = Элементы.СтраницаБудетСозданПартнер;
	Элементы.ГруппаТипОтношений.Видимость = Ложь;
	Элементы.ГруппаЧастноеЛицоКонтрагент.Видимость =Ложь;
	Заголовок = НСтр("ru='Помощник регистрации нового розничного покупателя';uk='Помічник реєстрації нового роздрібного покупця'");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[0].Представление = НСтр("ru='Не регистрировать нового розничного покупателя, использовать найденного';uk='Не реєструвати нового роздрібного покупця, використовувати знайденого'");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[1].Представление = НСтр("ru='Продолжить регистрацию розничного покупателя и подчинить найденному';uk='Продовжити реєстрацію роздрібного покупця і підпорядкувати знайденому'");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[2].Представление = НСтр("ru='Продолжить регистрацию нового розничного покупателя';uk='Продовжити реєстрацію нового роздрібного покупця'");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНовогоГоловногоКонтрагента()
	
	НаОснованииОбособленногоКонтрагента = Истина;
	
	ИНН = Параметры.ЗначенияЗаполнения.ИНН;
	КонтрагентОснование = Параметры.ОснованиеОбособленныйКонтрагент;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ДекорацияПервичнаяИнформацияЗагрузить");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЭтоКомпания");
	МассивЭлементов.Добавить("ГруппаВидКомпании");
	Если ЗначениеЗаполнено(ИНН) Тогда
		МассивЭлементов.Добавить("ИНН");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФИО_ОднойСтрокой(Фамилия,Имя,Отчество)
	
	Возврат СокрЛП(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
	
КонецФункции

&НаСервере
Функция ПредставлениеДокументаФизическогоЛица()
	
	ПредставлениеДокументаФизЛица = "";
	
	Если Не ВидДокумента.Пустая() Тогда
		
		ПредставлениеДокументаФизЛица = РегистрыСведений.ДокументыФизическихЛиц.ПолучитьПредставление(ВидДокумента, СерияДокумента, НомерДокумента, ДатаВыдачи, СрокДействия, КемВыданДокумент);
		
	КонецЕсли;
	
	Возврат ПредставлениеДокументаФизЛица;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораГоловногоКонтрагента()
	
	ИмяЭлементаФормы = ?(ИспользуютсяТолькоПартнеры, "ГоловнойКонтрагентДопСведения", "ГоловнойКонтрагент");
	
	ЭлементФормы = Элементы.Найти(ИмяЭлементаФормы);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = ЭлементФормы.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(ИННПлательщикаНДС) Тогда
		
		СписокГоловныхКонтрагентов = СписокВозможныхГоловныхКонтрагентов(ИННПлательщикаНДС);
		
		Для Каждого Элемент Из СписокГоловныхКонтрагентов Цикл
			СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	РазмерСписка = СписокВыбора.Количество();
	
	Если РазмерСписка = 1 Тогда
		ГоловнойКонтрагент = СписокВыбора[0].Значение;
	ИначеЕсли РазмерСписка = 0 Или
			(ЗначениеЗаполнено(ГоловнойКонтрагент) И СписокВыбора.НайтиПоЗначению(ГоловнойКонтрагент) = Неопределено) Тогда
		ГоловнойКонтрагент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВозможныхГоловныхКонтрагентов(ИНН)
	
	Список = Новый СписокЗначений;
	ТаблицаКонтрагентов = ПартнерыИКонтрагенты.ВозможныеГоловныеКонтрагенты(ИНН);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		Список.Добавить(
			СтрокаТаблицы.Ссылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1, Код филиала: %2';uk='%1, Код філії: %2'"),
				СтрокаТаблицы.Представление,
				?(ЗначениеЗаполнено(СтрокаТаблицы.КодФилиала), СтрокаТаблицы.КодФилиала, НСтр("ru='<не заполнен>';uk='<не заповнений>'"))));
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПартнераГоловногоКонтрагента()
	
	СписокВыбора = Элементы.ПартнерГоловногоКонтрагента.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ДействиеПоРезультатамНайдено = 0 Тогда
		ПоискИерархииПоПартнеру = ПартнерВыбор;
	Иначе
		СписокВыбора.Добавить(
			ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"),
			НСтр("ru='<создаваемый партнер>';uk='<партнер, що створюється>'"));
		ПоискИерархииПоПартнеру = Родитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискИерархииПоПартнеру) Тогда
		
		СписокПартнеров = СписокВозможныхПартнеровГоловныхКонтрагентов(ПоискИерархииПоПартнеру);
		
		Для Каждого Элемент Из СписокПартнеров Цикл
			СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	РазмерСписка = СписокВыбора.Количество();
	
	Если РазмерСписка = 1 Тогда
		ПартнерГоловногоКонтрагента = СписокВыбора[0].Значение;
	ИначеЕсли РазмерСписка = 0
			Или (ЗначениеЗаполнено(ПартнерГоловногоКонтрагента)
				И СписокВыбора.НайтиПоЗначению(ПартнерГоловногоКонтрагента) = Неопределено) Тогда
		ПартнерГоловногоКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВозможныхПартнеровГоловныхКонтрагентов(Партнер)
	
	Список = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, Список);
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПоискНепривязанныхОбособленныхПодразделений()
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК Представление,
	|	Контрагенты.КодФилиала КАК КодФилиала,
	|	Контакты.Представление КАК ЮридическийАдрес,
	|	ИСТИНА КАК Выбран
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК Контакты
	|		ПО Контрагенты.Ссылка = Контакты.Ссылка
	|			И (Контакты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|ГДЕ
	|	Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И Контрагенты.ИННПлательщикаНДС = &ИННПлательщикаНДС";
	
	Если НаОснованииОбособленногоКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Контрагенты.Ссылка <> &КонтрагентИсключение";
		Запрос.УстановитьПараметр("КонтрагентИсключение", КонтрагентОснование);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИННПлательщикаНДС", ИННПлательщикаНДС);
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбособленныеПодразделения.Очистить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ОбособленныеПодразделения, РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоСравненияПартнеров()
	
	ТекущиеДанные = Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Партнер <> ТекущийНайденныйПартнер Тогда
	
		УзелПартнера = ДеревоДанныхНайденныхПартнеров.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторДереваДанных);
		ЭлементыУзлаПартнера = УзелПартнера.ПолучитьЭлементы();
		
		ЭлементыДереваСравнения = ДеревоСравненияПартнеров.ПолучитьЭлементы();
		ЭлементыДереваСравнения.Очистить();
		
		СкопироватьУзелДанныхДереваФормы(ЭлементыДереваСравнения, ЭлементыУзлаПартнера);
		
		//развернуть все
		Для Каждого ЭлементДерева Из ЭлементыДереваСравнения Цикл
			Элементы.ДеревоСравненияПартнеров.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		ТекущийНайденныйПартнер = ТекущиеДанные.Партнер;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьУзелДанныхДереваФормы(Приемник, Источник)
	
	Для Каждого УзелИсточника Из Источник Цикл
		
		УзелПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(УзелПриемника, УзелИсточника);
		
		ЭлементыИсточника = УзелИсточника.ПолучитьЭлементы();
		
		Если ЭлементыИсточника.Количество() > 0 Тогда
			СкопироватьУзелДанныхДереваФормы(УзелПриемника.ПолучитьЭлементы(), ЭлементыИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПартнераИСвязанныеДанные(СписокСозданных)

	НачатьТранзакцию();
	
	Если ДействиеПоРезультатамНайдено <> 0 Тогда
		
		//Партнер
		ОбъектПартнер = Справочники.Партнеры.СоздатьЭлемент();
		ОбъектПартнер.Наименование                          = Название;
		ОбъектПартнер.Родитель                              = Родитель;
		ОбъектПартнер.БизнесРегион                          = БизнесРегион;
		ОбъектПартнер.ГруппаДоступа                         = ГруппаДоступа;
		ОбъектПартнер.ДатаРегистрации                       = ТекущаяДата();
		ОбъектПартнер.Клиент                                = Клиент;
		ОбъектПартнер.Конкурент                             = Конкурент;
		ОбъектПартнер.Поставщик                             = Поставщик;
		ОбъектПартнер.ОбслуживаетсяТорговымиПредставителями = ОбслуживаетсяТорговымиПредставителями;
		ОбъектПартнер.ПрочиеОтношения                       = ПрочиеОтношения;
		ОбъектПартнер.ОсновнойМенеджер                      = ОсновнойМенеджер;
		ОбъектПартнер.НаименованиеПолное                    = НаименованиеПартнера();
		ОбъектПартнер.ЮрФизЛицо                             = ТипЮрФизЛицаПартнера(ЭтоКомпания);
		ОбъектПартнер.Пол                                   = Пол;
		ОбъектПартнер.ДатаРождения                          = ДатаРождения;
		ОбъектПартнер.Перевозчик                            = Перевозчик;
		
		//контактная информация партнера
		Если НЕ ПустаяСтрока(ФактическийАдрес) Тогда
			НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			НоваяСтрокаКИ.Представление     = ФактическийАдрес;
			НоваяСтрокаКИ.ЗначенияПолей     = ФактическийАдресЗначенияПолей;
			ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ФактическийАдресЗначенияПолей));
		КонецЕсли;
		
		Если ЭтоКомпания = 0 Тогда
			ИмяРеквизитаТелефон = "ТелефонПартнера";
			ИмяРеквизитаТелефонЗначенияПолей = "ТелефонПартнераЗначенияПолей";
			ИмяРеквизитаАдресЭП = "АдресЭППартнера";
		Иначе
			ИмяРеквизитаТелефон = "ТелефонПартнераФизЛицо";
			ИмяРеквизитаТелефонЗначенияПолей = "ТелефонПартнераФизЛицоЗначенияПолей";
			ИмяРеквизитаАдресЭП = "АдресЭППартнераФизЛицо";
		КонецЕсли;
		
		Если ЗначенияПолейВСписокЗначений(ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей]).Количество()> 0 Тогда
			НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			НоваяСтрокаКИ.Представление     = ЭтаФорма[ИмяРеквизитаТелефон];
			НоваяСтрокаКИ.ЗначенияПолей     = ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей];
			ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей]));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ЭтаФорма[ИмяРеквизитаАдресЭП]) Тогда
			НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			НоваяСтрокаКИ.Представление     = ЭтаФорма[ИмяРеквизитаАдресЭП];
			НоваяСтрокаКИ.ЗначенияПолей     = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрокаКИ.Представление, НоваяСтрокаКИ.Вид);
			НоваяСтрокаКИ.АдресЭП           = ЭтаФорма[ИмяРеквизитаАдресЭП];
			Поз = СтрНайти(ЭтаФорма[ИмяРеквизитаАдресЭП], "@");
			Если Поз <> 0 Тогда
				НоваяСтрокаКИ.ДоменноеИмяСервера = Сред(ЭтаФорма[ИмяРеквизитаАдресЭП], Поз+1);
			КонецЕсли;
		КонецЕсли;
		
		ОбъектПартнер.Записать();
		ПартнерВыбор = ОбъектПартнер.Ссылка;
		СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ПартнерВыбор), ОбъектПартнер.Наименование);
        
		//зафиксировать первичный интерес
		Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") И ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		
			УстановитьПривилегированныйРежим(Истина);
			Запись = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
			Запись.Партнер                    = ПартнерВыбор;
			Запись.КаналПервичногоИнтереса    = КаналПервичногоИнтереса;
			Запись.ИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
			Запись.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		
		КонецЕсли;
		
		//сегмент
		Если ЗначениеЗаполнено(Сегмент) И Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьВручную Тогда
			СегментыСервер.ДобавитьПартнераВСегмент(Сегмент, ПартнерВыбор);
		КонецЕсли;
		
		//Контактное лицо
		Если ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(ФамилияКЛ) Тогда
		
			ОбъектКонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
			ОбъектКонтактноеЛицо.Владелец               = ПартнерВыбор;
			ОбъектКонтактноеЛицо.ДатаРегистрацииСвязи   = ТекущаяДата();
			ОбъектКонтактноеЛицо.Наименование           = ФИО_ОднойСтрокой(ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
			ОбъектКонтактноеЛицо.Автор                  = Пользователи.ТекущийПользователь();
			Если Не Роль.Пустая() Тогда
				СтрокаРоли = ОбъектКонтактноеЛицо.РолиКонтактногоЛица.Добавить();
				СтрокаРоли.РольКонтактногоЛица = Роль;
			КонецЕсли;
			
			Если Не ПустаяСтрока(АдресЭПКЛ) Тогда
				НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
				НоваяСтрокаКИ.Представление     = АдресЭПКЛ;
				НоваяСтрокаКИ.ЗначенияПолей     = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрокаКИ.Представление, НоваяСтрокаКИ.Вид);
				НоваяСтрокаКИ.АдресЭП           = АдресЭПКЛ;
				Поз = СтрНайти(АдресЭПКЛ, "@");
				Если Поз <> 0 Тогда
					НоваяСтрокаКИ.ДоменноеИмяСервера = Сред(АдресЭПКЛ, Поз+1);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначенияПолейВСписокЗначений(ТелефонКЛЗначенияПолей).Количество()> 0 Тогда
				НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
				НоваяСтрокаКИ.Представление     = ТелефонКЛ;
				НоваяСтрокаКИ.ЗначенияПолей     = ТелефонКЛЗначенияПолей;
				ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ТелефонКЛЗначенияПолей));
			КонецЕсли;
			
			Если ЗначенияПолейВСписокЗначений(МобильныйТелефонКЛЗначенияПолей).Количество()> 0 Тогда
				НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
				НоваяСтрокаКИ.Представление     = МобильныйТелефонКЛ;
				НоваяСтрокаКИ.ЗначенияПолей     = МобильныйТелефонКЛЗначенияПолей;
				ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(МобильныйТелефонКЛЗначенияПолей));
			КонецЕсли;
			
			ОбъектКонтактноеЛицо.Записать();
			СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектКонтактноеЛицо.Ссылка), ОбъектКонтактноеЛицо.Наименование);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Контрагент
	Если ИспользуютсяТолькоПартнеры Или (ДействиеСКонтрагентом = 1 И НЕ НаОснованииКонтрагента И УказыватьЮридическиеРеквизиты) Тогда
		
		ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ОбъектКонтрагент.Наименование       	= ?(ИспользуютсяТолькоПартнеры, Название, НаименованиеКонтрагента());
		ОбъектКонтрагент.ЮрФизЛицо          	= ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании);
		ОбъектКонтрагент.КодПоЕДРПОУ		= КодПоЕДРПОУ;
		ОбъектКонтрагент.ПлательщикНДС		= ПлательщикНДС;
		Если ПлательщикНДС Тогда
			ОбъектКонтрагент.ИННПлательщикаНДС	              = ИННПлательщикаНДС;
			ОбъектКонтрагент.НомерСвидетельстваПлательщикаНДС = НомерСвидетельстваПлательщикаНДС;
			ОбъектКонтрагент.КодФилиала                       = КодФилиала;
		Иначе
			ОбъектКонтрагент.ИННПлательщикаНДС	              = "";
			ОбъектКонтрагент.НомерСвидетельстваПлательщикаНДС = "";
			ОбъектКонтрагент.КодФилиала                       = "";
		КонецЕсли;
		ОбъектКонтрагент.Партнер            	= ПартнерВыбор;
		ОбъектКонтрагент.НаименованиеПолное 	= ?(ЭтоКомпания = 0,ПолноеЮридическоеНаименование,ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера));
		ОбъектКонтрагент.СтранаРегистрации		= ?(ОбъектКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, СтранаРегистрации, Справочники.СтраныМира.Украина);
		ОбъектКонтрагент.РегистрационныйНомер	= ?(ОбъектКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, РегистрационныйНомер, "");
        ОбъектКонтрагент.ДополнительнаяИнформация = ДополнительнаяИнформация;
		
		//контактная информация контрагента
		Если НЕ ПустаяСтрока(ФактическийАдрес) Тогда
			НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			НоваяСтрокаКИ.Представление = ФактическийАдрес;
			НоваяСтрокаКИ.ЗначенияПолей = ФактическийАдресЗначенияПолей;
			ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ФактическийАдресЗначенияПолей));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЮридическийАдрес) Тогда
			НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			НоваяСтрокаКИ.Представление = ЮридическийАдрес;
			НоваяСтрокаКИ.ЗначенияПолей = ЮридическийАдресЗначенияПолей;
			ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ЮридическийАдресЗначенияПолей));
		КонецЕсли;
		
		Если ЭтоКомпания = 1 И НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НоваяСтрокаКИ.Представление = ТелефонПартнераФизЛицо;
			НоваяСтрокаКИ.ЗначенияПолей = ТелефонПартнераФизЛицоЗначенияПолей;
			ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ТелефонПартнераФизЛицоЗначенияПолей));
		ИначеЕсли ЭтоКомпания = 0 И НЕ ПустаяСтрока(ТелефонПартнера) Тогда
			НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НоваяСтрокаКИ.Представление = ТелефонПартнера;
			НоваяСтрокаКИ.ЗначенияПолей = ТелефонПартнераЗначенияПолей;
			ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ТелефонПартнераЗначенияПолей));
		КонецЕсли;
		
		//головной контрагент
		Если ЭтоКомпания = 0 И ВидКомпании = 3 Тогда
			
			ОбъектКонтрагент.ОбособленноеПодразделение = Истина;
			
			Если ИспользуютсяТолькоПартнеры Или ВыбратьГоловногоКонтрагента = 0 Тогда
				ОбъектКонтрагент.ГоловнойКонтрагент = ГоловнойКонтрагент;
			ИначеЕсли ВыбратьГоловногоКонтрагента = 1 Тогда
				
				ОбъектГоловнойКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
				
				ОбъектГоловнойКонтрагент.Наименование       = НаименованиеГоловногоКонтрагента;
				ОбъектГоловнойКонтрагент.НаименованиеПолное = ПолноеНаименованиеГоловногоКонтрагента;
				ОбъектГоловнойКонтрагент.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ЮрЛицо;
				
				ОбъектГоловнойКонтрагент.КодПоЕДРПОУ		= КодПоЕДРПОУГоловногоКонтрагента;
				ОбъектГоловнойКонтрагент.ПлательщикНДС		= ПлательщикНДС;
				Если ПлательщикНДС Тогда
					ОбъектГоловнойКонтрагент.ИННПлательщикаНДС	              = ИННПлательщикаНДС;
					ОбъектГоловнойКонтрагент.НомерСвидетельстваПлательщикаНДС = НомерСвидетельстваПлательщикаНДС;
					ОбъектГоловнойКонтрагент.КодФилиала                       = КодФилиалаГоловногоКонтрагента;
				Иначе
					ОбъектГоловнойКонтрагент.ИННПлательщикаНДС	              = "";
					ОбъектГоловнойКонтрагент.НомерСвидетельстваПлательщикаНДС = "";
					ОбъектГоловнойКонтрагент.КодФилиала                       = "";
				КонецЕсли;
				
				ОбъектГоловнойКонтрагент.Партнер = ?(ЗначениеЗаполнено(ПартнерГоловногоКонтрагента),
					ПартнерГоловногоКонтрагента, ПартнерВыбор);
				
				//контактная информация головного контрагента
				Если НЕ ПустаяСтрока(ФактическийАдресГоловногоКонтрагента) Тогда
					НоваяСтрокаКИ = ОбъектГоловнойКонтрагент.КонтактнаяИнформация.Добавить();
					НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
					НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
					НоваяСтрокаКИ.Представление = ФактическийАдресГоловногоКонтрагента;
					НоваяСтрокаКИ.ЗначенияПолей = ФактическийАдресГоловногоКонтрагентаЗначенияПолей;
					ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(
						НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ФактическийАдресГоловногоКонтрагентаЗначенияПолей));
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ЮридическийАдресГоловногоКонтрагента) Тогда
					НоваяСтрокаКИ = ОбъектГоловнойКонтрагент.КонтактнаяИнформация.Добавить();
					НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
					НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
					НоваяСтрокаКИ.Представление = ЮридическийАдресГоловногоКонтрагента;
					НоваяСтрокаКИ.ЗначенияПолей = ЮридическийАдресГоловногоКонтрагентаЗначенияПолей;
					ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(
						НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ЮридическийАдресГоловногоКонтрагентаЗначенияПолей));
				КонецЕсли;
				
				ОбъектГоловнойКонтрагент.Записать();
				СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектГоловнойКонтрагент.Ссылка), ОбъектГоловнойКонтрагент.Наименование);
				ОбъектКонтрагент.ГоловнойКонтрагент = ОбъектГоловнойКонтрагент.Ссылка;
				
				//банковский счет головного контрагента
				Если УказатьБанковскийСчетГоловногоКонтрагента Тогда
					
					Валютный = (ВалютаДенежныхСредствГоловнойКонтрагент <> ВалютаРеглУчета);
					
					БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
					БанковскийСчет.Владелец = ОбъектГоловнойКонтрагент.Ссылка;
					БанковскийСчет.Наименование = АвтоНаименованиеБанковскогоСчета(
						НомерСчетаГоловногоКонтрагента, БанкГоловнойКонтрагент, ВалютаДенежныхСредствГоловнойКонтрагент);
					БанковскийСчет.ВалютаДенежныхСредств = ВалютаДенежныхСредствГоловнойКонтрагент;
					БанковскийСчет.НомерСчета = НомерСчетаГоловногоКонтрагента;
					БанковскийСчет.Банк = БанкГоловнойКонтрагент;
					
					Если ИностранныйБанкГоловнойКонтрагент = 1 Тогда
						БанковскийСчет.ИностранныйБанк = Истина;
						БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина;
						БанковскийСчет.КодБанка = МФОБанкаГоловнойКонтрагент;
					Иначе
					КонецЕсли;
					
					БанковскийСчет.НаименованиеБанка = НаименованиеБанкаГоловнойКонтрагент;
					БанковскийСчет.АдресБанка = АдресБанкаГоловнойКонтрагент;
					БанковскийСчет.СВИФТБанка = СВИФТБанкаГоловнойКонтрагент;
					
					БанковскийСчет.Записать();
					СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(БанковскийСчет.Ссылка), БанковскийСчет.Наименование);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ОбъектКонтрагент.Записать();
		КонтрагентВыбор = ОбъектКонтрагент.Ссылка;
		СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(КонтрагентВыбор), ОбъектКонтрагент.Наименование);
		
		//банковский счет
		Если УказатьБанковскийСчетКонтрагента Тогда
			
			Валютный = (ВалютаДенежныхСредств <> ВалютаРеглУчета);
			
			БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			БанковскийСчет.Владелец = КонтрагентВыбор;
			БанковскийСчет.Наименование = АвтоНаименованиеБанковскогоСчета(НомерСчета, Банк, ВалютаДенежныхСредств);
			БанковскийСчет.ВалютаДенежныхСредств = ВалютаДенежныхСредств;
			БанковскийСчет.НомерСчета = НомерСчета;
			БанковскийСчет.Банк = Банк;
			
			Если ИностранныйБанк = 1 Тогда
				БанковскийСчет.ИностранныйБанк = Истина;
				БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина;
				БанковскийСчет.КодБанка = МФОБанка;
			Иначе
			КонецЕсли;
			
			БанковскийСчет.НаименованиеБанка = НаименованиеБанка;
			БанковскийСчет.АдресБанка = АдресБанка;
			БанковскийСчет.СВИФТБанка = СВИФТБанка;
			
			БанковскийСчет.Записать();
			СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(БанковскийСчет.Ссылка), БанковскийСчет.Наименование);
			
		КонецЕсли;
		
		Если ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность Тогда
			
			МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Активность                               = Истина;
			МенеджерЗаписи.Период                                   = ТекущаяДата();
			МенеджерЗаписи.Физлицо                                  = КонтрагентВыбор;
			МенеджерЗаписи.ВидДокумента                             = ВидДокумента;
			МенеджерЗаписи.Серия                                    = СерияДокумента;
			МенеджерЗаписи.Номер                                    = НомерДокумента;
			МенеджерЗаписи.ДатаВыдачи                               = ДатаВыдачи;
			МенеджерЗаписи.СрокДействия                             = СрокДействия;
			МенеджерЗаписи.КемВыдан                                 = КемВыданДокумент;
			МенеджерЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		//привязка обособленных подразделений
		Если ЭтоКомпания = 0 И ВидКомпании = 0 И ЗначениеЗаполнено(ИННПлательщикаНДС) И ПривязатьОбособленныеПодразделениея = 0 Тогда	
			
			Для Каждого СтрокаТаблицы Из ОбособленныеПодразделения Цикл
				Если СтрокаТаблицы.Выбран Тогда
					
					ОписаниеОшибки = "";
					ПартнерыИКонтрагентыВызовСервера.ИзменитьГоловногоКонтрагента(СтрокаТаблицы.Контрагент, КонтрагентВыбор, ОписаниеОшибки);
					
					Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						СозданиеВыполнено = Ложь;
						ОтменитьТранзакцию();
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаОснованииКонтрагента И ЗначениеЗаполнено(КонтрагентОснование) Тогда
		
		ВыполнитьЗаписьКонтрагентаОснование(ПартнерВыбор, КонтрагентОснование);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	СозданиеВыполнено = Истина;
	
	СегментыСервер.ПроверитьВхождениеПартнераВСегментыПриСоздании(ПартнерВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователяПоРезультатамНайдено(Знач Оповещение1)
	
	ПартнерВыбор = Неопределено;
	
	ТекущиеДанные =  Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Оповещение1, Истина);
		Возврат;
	КонецЕсли;
	
	Если ДействиеПоРезультатамНайдено = 0 Тогда
		
		ПартнерВыбор = ТекущиеДанные.Партнер;
		
		Если ИспользуютсяТолькоПартнеры Или ДействиеСКонтрагентом = 0 Тогда
			
			ОткрытьПослеСоздания = Ложь;
			
			РеквизитыПартнера = Новый Структура;
			РеквизитыПартнера.Вставить("ОсновнойМенеджер", ТекущиеДанные.ОсновнойМенеджер);
			РеквизитыПартнера.Вставить("Наименование",     ТекущиеДанные.Представление);
			
			Если ТекущиеДанные.Различие Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("РеквизитыПартнера", РеквизитыПартнера);
				ДополнительныеПараметры.Вставить("СозданыНовыеОбъекты", Ложь);
				
				Оповещение = Новый ОписаниеОповещения("ВопросПродолжениеВыбораПартнераЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				Если ИспользуютсяТолькоПартнеры Тогда
					ТекстВопроса = НСтр("ru='Выбранный контрагент имеет существенное различие с введенными данными. Продолжить?';uk='Вибраний контрагент має істотне розходження з введеними даними. Продовжити?'");
				Иначе
					ТекстВопроса = НСтр("ru='Выбранный партнер имеет существенное различие с введенными данными. Продолжить?';uk='Вибраний партнер має істотне розходження з введеними даними. Продовжити?'");
				КонецЕсли;
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				
			Иначе
				
				ВыполнитьДействияЗакрытияФормы(Новый ОписаниеОповещения("ВыборПользователяПоРезультатамНайденоЗавершение", ЭтотОбъект, Новый Структура("Оповещение1, ТекущиеДанные", Оповещение1, ТекущиеДанные)), РеквизитыПартнера, Ложь);
                Возврат;
				
			КонецЕсли;
			
			
			ВыборПользователяПоРезультатамНайденоФрагмент(Оповещение1);

			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ДействиеПоРезультатамНайдено = 1 Тогда
		
		Родитель = ТекущиеДанные.Партнер;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение1, Ложь);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователяПоРезультатамНайденоЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение1 = ДополнительныеПараметры.Оповещение1;
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    ВыборПользователяПоРезультатамНайденоФрагмент(Оповещение1);

КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователяПоРезультатамНайденоФрагмент(Знач Оповещение1)
    
    ВыполнитьОбработкуОповещения(Оповещение1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияЗакрытияФормы(Знач Оповещение, РеквизитыПартнера, СозданыНовыеОбъекты)
	
	Если НаОснованииКонтрагента И ЗначениеЗаполнено(КонтрагентОснование) Тогда
		
		Если Не СозданыНовыеОбъекты Тогда
			ВыполнитьЗаписьКонтрагентаОснование(ПартнерВыбор, КонтрагентОснование);
		КонецЕсли;
		
		ОповеститьОбИзменении(КонтрагентОснование);
		
	ИначеЕсли ОбъектОснование = Неопределено Тогда
		
		Оповестить("ВыборПартнераНайдено",
			Новый Структура("Партнер,ОсновнойМенеджер,Перевозчик", ПартнерВыбор, РеквизитыПартнера.ОсновнойМенеджер, Перевозчик));
		
	Иначе
		
		ВзаимодействияКлиент.КонтактПослеЗаписи(
			ЭтаФорма,
			Новый Структура("Ссылка, Наименование", ПартнерВыбор, РеквизитыПартнера.Наименование),
			Новый Структура,"Партнеры");
	КонецЕсли;
	
	Если ДляВыбора Тогда
		ОповеститьОВыборе(ПартнерВыбор);
	ИначеЕсли НаОснованииОбособленногоКонтрагента Тогда
		Если Не ЗначениеЗаполнено(КонтрагентВыбор) Тогда
			КонтрагентВыбор = ПолучитьКонтрагентаПартнераПоУмолчанию(ПартнерВыбор);
		КонецЕсли;
		Закрыть(КонтрагентВыбор);
	Иначе
		Закрыть(ПартнерВыбор);
	КонецЕсли;
	
	Если ОткрытьПослеСоздания Тогда
		Если Не СозданыНовыеОбъекты Или ДействиеПоРезультатамНайдено <> 0 Тогда
			ПоказатьЗначение(Неопределено, ПартнерВыбор);
            Возврат;
        Иначе
            ПоказатьЗначение(Неопределено, КонтрагентВыбор);
            Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьДействияЗакрытияФормыФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияЗакрытияФормыЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьДействияЗакрытияФормыФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияЗакрытияФормыФрагмент(Знач Оповещение)
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаписьКонтрагентаОснование(Партнер, Контрагент)
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	КонтрагентОбъект.Партнер = Партнер;
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеПользователю(ТекстСообщения, Поле="", ОчищатьСообщения = Ложь)
	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Если ИспользуютсяТолькоПартнеры Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru='партнера';uk='партнера'"), НСтр("ru='контрагента';uk='контрагента'"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьФайлНаСервере(СсылкаНаФайл, ЕстьОшибка);
	
	ЕстьОшибка = Истина;
	Возврат;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииКонтрагента(ДанныеКонтрагента,Отказ)
	
	НаОснованииКонтрагента = Истина;
	Элементы.ЭтоКомпания.Доступность = Ложь;
	Элементы.ДекорацияПервичнаяИнформацияЗагрузить.Видимость = Ложь;
	Элементы.СтраницыУказыватьЮрРеквизитыКонтрагентОснование.ТекущаяСтраница = Элементы.СтраницаНаОснованииКонтрагента;
	Элементы.СтраницыУказыватьСоздаватьКонтрагентаОснование.ТекущаяСтраница  = Элементы.СтраницаНаОснованииКонтрагентаЧастноеЛицо;
	Элементы.ГруппаЮридическиеДанные.ТолькоПросмотр = Истина;
	Элементы.ГруппаЮридическиеДанные.Доступность    = Истина;
	Элементы.ГруппаИННЧастноеЛицо.ТолькоПросмотр    = Истина;
	Элементы.ГруппаДокументФизическогоЛица.ТолькоПросмотр = Истина;
	Элементы.ГруппаДокументФизическогоЛица.Доступность = Истина;
	
	ДанныеКонтрагента = Параметры.КонтрагентОснование;
	
	Если ДанныеКонтрагента.Свойство("Ссылка") Тогда
		
		КонтрагентОснование = ДанныеКонтрагента.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Контрагенты.ЮрФизЛицо,
		|	Контрагенты.ОбособленноеПодразделение,
		
		|	Контрагенты.КодПоЕДРПОУ,
		|	Контрагенты.ПлательщикНДС,
		|	Контрагенты.ИННПлательщикаНДС,
		|	Контрагенты.НомерСвидетельстваПлательщикаНДС,
		
		|	Контрагенты.Наименование,
		|	Контрагенты.КонтактнаяИнформация.(
		|		Вид,
		|		Представление,
		|		ЗначенияПолей
		|	),
		|	Контрагенты.Партнер,
		|	Контрагенты.НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДанныеКонтрагента.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.Партнер <> Справочники.Партнеры.НеизвестныйПартнер И Выборка.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ДанныеКонтрагента.Вставить("Название", Выборка.Наименование);
			ДанныеКонтрагента.Вставить("КодПоЕДРПОУ", Выборка.КодПоЕДРПОУ);
			ДанныеКонтрагента.Вставить("ПлательщикНДС", Выборка.ПлательщикНДС);
			ДанныеКонтрагента.Вставить("ИННПлательщикаНДС", Выборка.ИННПлательщикаНДС);
			ДанныеКонтрагента.Вставить("НомерСвидетельстваПлательщикаНДС", Выборка.НомерСвидетельстваПлательщикаНДС);
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", Выборка.ЮрФизЛицо);
			ДанныеКонтрагента.Вставить("ОбособленноеПодразделение", Выборка.ОбособленноеПодразделение);
			ДанныеКонтрагента.Вставить("ПолноеЮридическоеНаименование",Выборка.НаименованиеПолное);
			
			ТаблицаКонтактнаяИнформация = Выборка.КонтактнаяИнформация.Выгрузить();
			
			Для каждого КонтактнаяИнформация Из ТаблицаКонтактнаяИнформация Цикл
				
				Если КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ФактАдресКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ЮрАдресКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					ВидКонтактнойИнформации = "EmailКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					ВидКонтактнойИнформации = "ТелефонКонтрагента";
				Иначе
					Продолжить;
				КонецЕсли;
				
				ДанныеКонтрагента.Вставить(ВидКонтактнойИнформации,Новый Структура("Представление, ЗначенияПолей", КонтактнаяИнформация.Представление, КонтактнаяИнформация.ЗначенияПолей));
				
			КонецЦикла;
			
		Иначе
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеКонтрагента.Вставить("ПолноеНаименование",ДанныеКонтрагента.ПолноеЮридическоеНаименование);
	
	Если ДанныеКонтрагента.Свойство("ФактАдресКонтрагента") Тогда
		
		ФактическийАдрес = ДанныеКонтрагента.ФактАдресКонтрагента.Представление;
		ФактическийАдресЗначенияПолей = ДанныеКонтрагента.ФактАдресКонтрагента.ЗначенияПолей;
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ЭтоКомпания = 1;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента,,"Название,ИННПлательщикаНДС");
		
		ИННПлательщикаНДС = ДанныеКонтрагента.ИННПлательщикаНДС;
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ДанныеКонтрагента.Название)," ");
		КоличествоПодстрок = ФИО.Количество();
		ФамилияПартнера  = ?(КоличествоПодстрок > 0,ФИО[0],"");
		ИмяПартнера      = ?(КоличествоПодстрок > 1,ФИО[1],"");
		ОтчествоПартнера = ?(КоличествоПодстрок > 2,ФИО[2],"");
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнераФизЛицо = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераФизЛицоЗначенияПолей = ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнераФизЛицо = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		ЭтоКомпания = 0;
		ВидКомпании = 2;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента,,"Название,ИННПлательщикаНДС");
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнера = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераЗначенияПолей = ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнера = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		ЭтоКомпания = 0;
		ВидКомпании = 1;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента,,"ИННПлательщикаНДС,КодПоЕДРПОУ");
		НаименованиеКонтрагента = Название;
		
		Если ДанныеКонтрагента.Свойство("ЮрАдресКонтрагента") Тогда
			
			ЮридическийАдрес = ДанныеКонтрагента.ЮрАдресКонтрагента.Представление;
			ЮридическийАдресЗначенияПолей = ДанныеКонтрагента.ЮрАдресКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнера = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераЗначенияПолей = ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнера = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	Иначе
		
		ЭтоКомпания = 0;
		ВидКомпании = ?(ДанныеКонтрагента.ОбособленноеПодразделение, 3, 0);
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента);
		НаименованиеКонтрагента = Название;
		
		Если ДанныеКонтрагента.Свойство("ЮрАдресКонтрагента") Тогда
			
			ЮридическийАдрес = ДанныеКонтрагента.ЮрАдресКонтрагента.Представление;
			ЮридическийАдресЗначенияПолей = ДанныеКонтрагента.ЮрАдресКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнера = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераЗначенияПолей = ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнера = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейВСписокЗначений(РеквизитЗначенияПолей)
	
	// Преобразует "новое", строковое значение служебного поля адреса в "старое", список значений
	
	Если ПустаяСтрока(РеквизитЗначенияПолей) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(РеквизитЗначенияПолей).ЗначенияПолей;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовки()

	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "", НСтр("ru='Помощник регистрации нового контрагента';uk='Помічник реєстрації нового контрагента'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДекорацияПервичнаяИнформация", 
	                     НСтр("ru='Укажите доступную вам на данный момент информацию о контрагенте';uk='Вкажіть потрібну вам на даний момент інформацію про контрагента'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "УказатьДанныеКонтактногоЛица", 
	                     НСтр("ru='Указать данные контактного лица (будет создано контактное лицо контрагента)';uk='Вказати дані контактної особи (буде створено контактна особа контрагента)'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ФактическийАдрес", 
	                     НСтр("ru='Фактический адрес контрагента';uk='Фактична адреса контрагента'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ЮридическийАдрес", 
	                     НСтр("ru='Юридический адрес контрагента';uk='Юридична адреса контрагента'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДекорацияНайдено", 
	                     НСтр("ru='Найдены контрагенты с совпадающими данными, примите решение о дальнейших действиях.';uk='Знайдені контрагенти з співпадаючими даними, прийміть рішення про подальші дії.'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ТаблицаНайдено", 
	                     НСтр("ru='Найденные контрагенты';uk='Знайдені контрагенти'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДеревоСравненияПартнеров", 
	                     НСтр("ru='Сравнение контрагентов';uk='Порівняння контрагентів'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДеревоСравненияПартнеровЗначениеНайденного", 
	                     НСтр("ru='Найденный контрагент';uk='Знайдений контрагент'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДеревоСравненияПартнеровЗначениеТекущего", 
	                     НСтр("ru='Создаваемый контрагент';uk='Контрагент, що створюється'"), ИспользуютсяТолькоПартнеры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредупрежденияГоловногоКонтрагента(СписокВыбораГоловногоКонтрагента, ИНН)
	
	ТекстПредупреждения = "";
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		ТекстПредупреждения = НСтр("ru='Не задан ИНН палтельщика НДС: невозможно установить головного контрагента.';uk='Не вказано ІПН платника ПДВ: неможливо встановити головного контрагента.'");
	ИначеЕсли СписокВыбораГоловногоКонтрагента.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Не найдены головные контрагенты по указанному ИНН плательщика НДС.';uk='Не знайдені головні контрагенти за вказаному ІПН платника ПДВ.'")
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер)
	
	Возврат ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	
КонецФункции

#КонецОбласти


#Область Пактум

&НаКлиенте
Процедура ЗаполнитьПоЕГРПОУ(Команда)
    
	Если Не Пактум_Сервер.Пактум_Права() Тогда
		Оповестить("Пактум.СозданиеКарточки.Завершено");
		Возврат;
    КонецЕсли;
    
    Если НЕ Пактум_Сервер.НастройкиПодключенияКСервисуПактумЗаданы() Тогда
        Оповестить("Пактум.СозданиеКарточки.Завершено");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не заданы настройки подключения к сервису Пактум.Контрагент!';uk='Не задані настройки підключення до сервісу Пактум.Контрагент!'")
        );
        Возврат;
    КонецЕсли; 
    
	пЕДРПОУ = СокрЛП(КодПоЕДРПОУ);
	Если пЕДРПОУ = "" Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
            НСтр("ru='Не заполнен код ЕГРПОУ';uk='Не заповнено код ЄДРПОУ'"),
            ,
            "КодПоЕДРПОУ"
        );        
		Оповестить("Пактум.СозданиеКарточки.Завершено");
		Возврат;
    КонецЕсли;
    
	СуществующиеКонтрагенты = Пактум_Сервер.ПолучитьКонтрагента(пЕДРПОУ);
	Если СуществующиеКонтрагенты.Кво > 0 Тогда
        ТекстВопроса = НСтр("ru='Контрагент(ы) с таким же ЕГРПОУ найден(ы) в базе. Открыть существующие карточки или заполнить данные в текущей карточке?';uk= 'Контрагента знайдено в базі. Відкрити існуючі картки чи заповнити дані відкритої картки?'");
        спКнопки=Новый СписокЗначений;
        спКнопки.Добавить(НСтр("ru='Открыть';uk='Відкрити'"));
        спКнопки.Добавить(НСтр("ru='Заполнить';uk='Заповнити'"));
        спКнопки.Добавить(НСтр("ru='Отменить';uk= 'Відмінити'"));
        ПоказатьВопрос(Новый ОписаниеОповещения("ВопросНаОткрытиеКарточки", ЭтотОбъект, СуществующиеКонтрагенты), ТекстВопроса, спКнопки);
	Иначе
		ВыполнитьЗаполнениеКарточки();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВопросНаОткрытиеКарточки(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Ответ  = РезультатВопроса;
    Если Ответ = НСтр("ru='Открыть';uk='Відкрити'") Тогда
        Для Каждого Эл Из ДополнительныеПараметры.спКонтрагенты Цикл
    		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", Новый Структура("Ключ", Эл.Значение));
		КонецЦикла;
	ИначеЕсли Ответ = НСтр("ru='Заполнить';uk='Заповнити'") Тогда
		ВыполнитьЗаполнениеКарточки();
	Иначе
		Возврат;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеКарточки()
    
    пЕДРПОУ = СокрЛП(КодПоЕДРПОУ);
    
	СтруПараметры = Пактум_Сервер.ПроверкаКорректностиЕДРПОУ_Пактум(пЕДРПОУ);
	Если Не СтруПараметры.КорректностьЕДРПОУ_Значение Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
            СтруПараметры.КорректностьЕДРПОУ_ТекстОшибки,
            ,
            "КодПоЕДРПОУ"
        );        
		Оповестить("Пактум.СозданиеКарточки.Завершено");
		Возврат;
    КонецЕсли;
    Пактум_Токен = ?(СтруПараметры.Токен=Неопределено, "", СтруПараметры.Токен);
    
    
    РезультатЗапуска = Пактум_Сервер.ФоновоеЗаданиеДанныеПартнераПоКодПоЕДРПОУЗапустить(
        пЕДРПОУ,
        Пактум_Токен,
        УникальныйИдентификатор,
        ФоновоеЗаданиеИдентификатор
    );
    
    ФоновоеЗаданиеИдентификатор  = РезультатЗапуска.ИдентификаторЗадания;
    ФоновоеЗаданиеАдресХранилища = РезультатЗапуска.АдресХранилища;
    
    Если РезультатЗапуска.ЗаданиеЗапущено Тогда
        Пактум_КоличествоПроверок_ФоновогоЗадания = 0;
        ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
        ПараметрыОбработчика.ТекущийИнтервал = 10;
        ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 10, Истина);
        Пактум_Клиент.ЗаблокироватьФорму(ЭтаФорма);
    Иначе
        ВыполнитьЗаполнениеРеквизитовПоЕДРПОУ(РезультатЗапуска.РеквизитыКонтрагента);
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоЕДРПОУ(РеквизитыКонтрагента, ЗаполнятьЕДРПОУ = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		Пактум_Клиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоЕДРПОУ(РеквизитыКонтрагента.ОписаниеОшибки);
        Возврат;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеПредупреждения) Тогда
		Пактум_Клиент.ПоказатьПользователюПредупреждениеПолученияРеквизитовКонтрагентаПоЕДРПОУ(РеквизитыКонтрагента.ОписаниеПредупреждения);
    КонецЕсли;    
        
    РезультатСравнения = Пактум_Клиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(
        РеквизитыКонтрагента,
        ДанныеОбъектаДляСравнения(),
        ЗаполнятьЕДРПОУ
    );
    
    Если РезультатСравнения.ЕстьИзменения Тогда
        
        Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
            
            ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения(
                "ЗаполнениеРеквизитовКонтрагентаПоЕДРПОУЗавершение",
                ЭтотОбъект,
                Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента)
            );
            ТекстВопроса = НСтр("ru='Перезаполнить реквизиты контрагента на основании данных сервиса Пактум.Контрагент?';uk='Перезаполнить реквізити контрагента на підставі даних сервісу Пактум.Контрагент?'");
            ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
        Иначе
            
            ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
            
        КонецЕсли;
        
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоЕДРПОУЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)
	
	КодПоЕДРПОУ                     = РеквизитыКонтрагента.КодПоЕДРПОУ;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаГоловнойКонтрагент Тогда
		
		НаименованиеГоловногоКонтрагента      = РеквизитыКонтрагента.Наименование;
		Если РеквизитыКонтрагента.Свойство("ИННПлательщикаНДС") Тогда
			ИННПлательщикаНДС = РеквизитыКонтрагента.ИННПлательщикаНДС;
        КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("НомерСвидетельстваПлательщикаНДС") Тогда
			НомерСвидетельстваПлательщикаНДС = РеквизитыКонтрагента.НомерСвидетельстваПлательщикаНДС;
		КонецЕсли;
        ПолноеНаименованиеГоловногоКонтрагента = РеквизитыКонтрагента.НаименованиеПолное;
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
			ЮридическийАдресГоловногоКонтрагента              = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
			ЮридическийАдресГоловногоКонтрагентаЗначенияПолей = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
		КонецЕсли;
		
		УправлениеДостуностьюГоловнойКонтрагент();
		
	Иначе
		ПолноеНаименование      = РеквизитыКонтрагента.Наименование;
		НаименованиеКонтрагента = РеквизитыКонтрагента.Наименование;
		Если РеквизитыКонтрагента.Свойство("ИННПлательщикаНДС") Тогда
			ИННПлательщикаНДС = РеквизитыКонтрагента.ИННПлательщикаНДС;
        КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("НомерСвидетельстваПлательщикаНДС") Тогда
			НомерСвидетельстваПлательщикаНДС = РеквизитыКонтрагента.НомерСвидетельстваПлательщикаНДС;
        КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("ПлательщикНДС") Тогда
			ПлательщикНДС = РеквизитыКонтрагента.ПлательщикНДС;
		КонецЕсли;
        ПолноеЮридическоеНаименование = РеквизитыКонтрагента.НаименованиеПолное;
        
        Если РеквизитыКонтрагента.Свойство("Телефон") И РеквизитыКонтрагента.Телефон <> Неопределено Тогда
			ТелефонПартнера              = РеквизитыКонтрагента.Телефон.Представление;
			ТелефонПартнераЗначенияПолей = РеквизитыКонтрагента.Телефон.КонтактнаяИнформация;
        КонецЕсли;
        
        Если РеквизитыКонтрагента.Свойство("АдресЭП") И РеквизитыКонтрагента.АдресЭП <> Неопределено Тогда
			АдресЭППартнера              = РеквизитыКонтрагента.АдресЭП.Представление;
		КонецЕсли;
		
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
			ЮридическийАдрес              = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
			// ЮридическийАдресЗначенияПолей = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
        КонецЕсли;
        
		Если РеквизитыКонтрагента.Свойство("ДополнительнаяИнформация") И РеквизитыКонтрагента.ДополнительнаяИнформация <> Неопределено Тогда
			ДополнительнаяИнформация      = ДополнительнаяИнформация + РеквизитыКонтрагента.ДополнительнаяИнформация;
        КонецЕсли;
        
        Если РеквизитыКонтрагента.Свойство("Руководитель") И РеквизитыКонтрагента.Руководитель <> Неопределено Тогда
            УказатьДанныеКонтактногоЛица = Истина;
            ФамилияКЛ  = РеквизитыКонтрагента.Руководитель.Фамилия;
            ИмяКЛ      = РеквизитыКонтрагента.Руководитель.Имя;
            ОтчествоКЛ = РеквизитыКонтрагента.Руководитель.Отчество;
            Роль       = ПредопределенноеЗначение("Справочник.РолиКонтактныхЛицПартнеров.Руководитель");
            Если РеквизитыКонтрагента.Свойство("Телефон") И РеквизитыКонтрагента.Телефон <> Неопределено Тогда
                // отдельного телефона КЛ нет, присваиваем телефон контрагента
                ТелефонКЛ              = РеквизитыКонтрагента.Телефон.Представление;
                ТелефонКЛЗначенияПолей = РеквизитыКонтрагента.Телефон.КонтактнаяИнформация;
            КонецЕсли;
        КонецЕсли;
		
		УправлениеДоступностьюПервичнаяИнформация();
		
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = Пактум_Сервер.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ВыполнитьЗаполнениеРеквизитовПоЕДРПОУ(РезультатВыполнения.РеквизитыКонтрагента);
        Пактум_Клиент.РазблокироватьФорму(ЭтаФорма);
    Иначе
        Пактум_КоличествоПроверок_ФоновогоЗадания = Пактум_КоличествоПроверок_ФоновогоЗадания + 1;
		Если Пактум_КоличествоПроверок_ФоновогоЗадания >= 21 Тогда 	//3 мин + 30 сек
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
    		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    			    НСтр("ru='Заполнить карточку контрагента с ЕДРПОУ %1 не удалось.';uk='Заповнити картку контрагента за ЄДРПОУ %1 не вдалося.'"),
    			    КодПоЕДРПОУ
                ),
                , 
                "КодПоЕДРПОУ"
            );
			Пактум_Клиент.РазблокироватьФорму(ЭтаФорма);
		Иначе
    		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
    		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = Пактум_Клиент.ИнициироватьСтруктураДанныхДляСравнения();
	
	ДанныеДляСравнения.КодПоЕДРПОУ                 = КодПоЕДРПОУ;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
		ДанныеДляСравнения.Наименование            = ПолноеНаименование;
		ДанныеДляСравнения.ИННПлательщикаНДС       = ИННПлательщикаНДС;
        ДанныеДляСравнения.НомерСвидетельстваПлательщикаНДС = НомерСвидетельстваПлательщикаНДС;
        ДанныеДляСравнения.ПлательщикНДС = ПлательщикНДС;
        ДанныеДляСравнения.НаименованиеПолное      = ПолноеЮридическоеНаименование;
		ДанныеДляСравнения.Телефон                 = ТелефонПартнера;
        ДанныеДляСравнения.АдресЭП                 = АдресЭППартнера;
		ДанныеДляСравнения.ЮридическийАдрес        = ЮридическийАдрес;
        ДанныеДляСравнения.ДополнительнаяИнформация = ДополнительнаяИнформация;
	Иначе
		ДанныеДляСравнения.Наименование            = НаименованиеГоловногоКонтрагента;
        ДанныеДляСравнения.ИННПлательщикаНДС       = ИННПлательщикаНДС;
		ДанныеДляСравнения.НомерСвидетельстваПлательщикаНДС = НомерСвидетельстваПлательщикаНДС;
        ДанныеДляСравнения.НаименованиеПолное      = ПолноеНаименованиеГоловногоКонтрагента;
		ДанныеДляСравнения.ЮридическийАдрес        = ЮридическийАдресГоловногоКонтрагента;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции 

#КонецОбласти


#КонецОбласти

ВыполняетсяЗакрытие = Ложь;
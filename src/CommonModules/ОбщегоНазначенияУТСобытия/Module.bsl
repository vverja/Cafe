
#Область ПрограммныйИнтерфейс

// Обработчик подписки на событие ПриЗаписиКонстанты.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКонстанты 	  = Источник.ЭтотОбъект.Метаданные().Имя;
	ЗначениеКонстанты = Источник.Значение;
	
	СинхронизироватьЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты, Отказ);
	УстановитьЗначенияКонстантНЕУКРОбъектов(ИмяКонстанты, ЗначениеКонстанты, Отказ);
	
КонецПроцедуры

Процедура УстановитьЗначенияКонстантНЕУКРОбъектов(ИмяКонстанты, ЗначениеКонстанты, Отказ)
	
	ИменаОтключаемыхНЕУКРКонстант = ОбщегоНазначенияУТПовтИсп.ПолучитьИменаОтключаемыхНЕУКРКонстант();
	
	Если (ИмяКонстанты = "ИспользоватьНЕУКРОбъекты" И ЗначениеКонстанты = Ложь) Тогда
		Для Каждого КлючИЗначение Из ИменаОтключаемыхНЕУКРКонстант Цикл
			УстановитьЗначениеКонстанты(Константы[КлючИЗначение.Ключ], Ложь);
		КонецЦикла;
	ИначеЕсли ИменаОтключаемыхНЕУКРКонстант.Свойство(ИмяКонстанты) И ЗначениеКонстанты = Истина И НЕ Константы.ИспользоватьНЕУКРОбъекты.Получить() Тогда 	
		Отказ = Истина;
		ВызватьИсключение НСтр("ru='Не разрешается устанавливать значение этой константы в Истина!';uk='Не дозволяється встановлювати значення цієї константи у Істина!'");
	КонецЕсли;

КонецПроцедуры // УстановитьЗначенияКонстантНЕУКРОбъектов

Процедура ИсключенияПоискаСсылокПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ПланВидовХарактеристикОбъект.ДополнительныеРеквизитыИСведения") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Реквизиты.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТабличнаяЧасть.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Свойство = &УдаляемоеСвойство
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТабличнаяЧасть.Ссылка
		|	ИЗ
		|		Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляХарактеристик КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Свойство = &УдаляемоеСвойство
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТабличнаяЧасть.Ссылка
		|	ИЗ
		|		Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Свойство = &УдаляемоеСвойство
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТабличнаяЧасть.Ссылка
		|	ИЗ
		|		Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Свойство = &УдаляемоеСвойство
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТабличнаяЧасть.Ссылка
		|	ИЗ
		|		Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораХарактеристик КАК ТабличнаяЧасть
		|	ГДЕ
		|		ТабличнаяЧасть.Свойство = &УдаляемоеСвойство) КАК Реквизиты";
		
		Запрос.УстановитьПараметр("УдаляемоеСвойство", Источник.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Попытка
			
			НачатьТранзакцию();
			
			Пока Выборка.Следующий() Цикл
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНоменклатуры");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				
				Блокировка.Заблокировать();
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				ОбъектССсылкой = Выборка.Ссылка.ПолучитьОбъект();
				
				УдалитьВхожденияЭлементаИзТабличнойЧасти(ОбъектССсылкой.РеквизитыДляКонтроляНоменклатуры,     Источник.Ссылка, "Свойство");
				УдалитьВхожденияЭлементаИзТабличнойЧасти(ОбъектССсылкой.РеквизитыДляКонтроляХарактеристик,    Источник.Ссылка, "Свойство");
				УдалитьВхожденияЭлементаИзТабличнойЧасти(ОбъектССсылкой.РеквизитыДляКонтроляСерий,            Источник.Ссылка, "Свойство");
				УдалитьВхожденияЭлементаИзТабличнойЧасти(ОбъектССсылкой.РеквизитыБыстрогоОтбораНоменклатуры,  Источник.Ссылка, "Свойство");
				УдалитьВхожденияЭлементаИзТабличнойЧасти(ОбъектССсылкой.РеквизитыБыстрогоОтбораХарактеристик, Источник.Ссылка, "Свойство");
				
				ОбъектССсылкой.Записать();
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОписаниеОшибки = ОписаниеОшибки();
			ВызватьИсключение ОписаниеОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьСоответствиеЗначенийКонстант() Экспорт
	
	ТаблицаКонстант  = ОбщегоНазначенияУТПовтИсп.ПолучитьТаблицуЗависимостиКонстант();
	ЗначенияКонстант = Новый Структура;
	
	ТаблицаНесоответствия = Новый ТаблицаЗначений;
	ТаблицаНесоответствия.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	ТаблицаНесоответствия.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	
	// Получим значения всех констант, родительских и подчиненных
	Для Каждого Строка Из ТаблицаКонстант Цикл
		Если НЕ ЗначенияКонстант.Свойство(Строка.ИмяРодительскойКонстанты) Тогда
			ЗначенияКонстант.Вставить(Строка.ИмяРодительскойКонстанты, Константы[Строка.ИмяРодительскойКонстанты].Получить());
		КонецЕсли;
		Если НЕ ЗначенияКонстант.Свойство(Строка.ИмяПодчиненнойКонстанты) Тогда
			ЗначенияКонстант.Вставить(Строка.ИмяПодчиненнойКонстанты, Константы[Строка.ИмяПодчиненнойКонстанты].Получить());
		КонецЕсли;
	КонецЦикла; 
	
	// Заполним несоответствия допустимых и фактических сочетаний значений констант
	Для Каждого Строка Из ТаблицаКонстант Цикл
		Если Строка.ЗначениеРодительскойКонстанты = ЗначенияКонстант[Строка.ИмяРодительскойКонстанты]
		 И Строка.ЗначениеПодчиненнойКонстанты <> ЗначенияКонстант[Строка.ИмяПодчиненнойКонстанты] Тогда
			СтрокаНесоответствия = ТаблицаНесоответствия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНесоответствия, Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНесоответствия.Сортировать("ИмяРодительскойКонстанты, ИмяПодчиненнойКонстанты");
	
	Возврат ТаблицаНесоответствия;
	
КонецФункции

Процедура СинхронизироватьЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТипКонстанты	= ТипЗнч(ЗначениеКонстанты);
	ПримитивныеТипы = Новый ОписаниеТипов("Число,Строка,Дата,Булево,Неопределено");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Синхронизировать "простые" зависимые константы
	Если ПримитивныеТипы.СодержитТип(ТипКонстанты)
	 ИЛИ ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеКонстанты) Тогда
		
		ПодчиненныеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты);
		
		Если ЗначениеЗаполнено(ПодчиненныеКонстанты) Тогда
			
			Для Каждого КлючИЗначение Из ПодчиненныеКонстанты Цикл
				УстановитьЗначениеКонстанты(Константы[КлючИЗначение.Ключ], КлючИЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Синхронизировать "сложные" зависимые константы
	Если ИмяКонстанты = "БазоваяВерсия" И ЗначениеКонстанты
		И Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.Получить() Тогда

		УстановитьЗначениеКонстанты(Константы.ИспользоватьРасширенноеОбеспечениеПотребностей, Ложь);

	ИначеЕсли ИмяКонстанты = "ИспользоватьЗаказыПоставщикам"
		Или ИмяКонстанты = "ИспользоватьЗаказыНаПеремещение"
		Или ИмяКонстанты = "ИспользоватьЗаказыНаСборку"
		Или ИмяКонстанты = "ИспользоватьПроизводство" И Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.Получить() Тогда

		ЗначениеПодчиненнойКонстанты =
			Константы.ИспользоватьЗаказыПоставщикам.Получить()
			Или Константы.ИспользоватьЗаказыНаПеремещение.Получить()
			Или Константы.ИспользоватьЗаказыНаСборку.Получить()
			Или Константы.ИспользоватьЗаказыНаСборку.Получить()
			Или Константы.ИспользоватьПроизводство.Получить();

		Если Не ЗначениеПодчиненнойКонстанты Тогда
			УстановитьЗначениеКонстанты(Константы.ИспользоватьРасширенноеОбеспечениеПотребностей, Ложь);
		КонецЕсли;

	КонецЕсли;

	Если ИмяКонстанты = "ИспользоватьОплатуПлатежнымиКартами"
	 ИЛИ ИмяКонстанты = "ИспользоватьПодключаемоеОборудование" Тогда
		
		Если ИмяКонстанты = "ИспользоватьОплатуПлатежнымиКартами" Тогда
			ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И Константы.ИспользоватьПодключаемоеОборудование.Получить();
		Иначе
			ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И Константы.ИспользоватьОплатуПлатежнымиКартами.Получить();
		КонецЕсли;
		
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьПодключаемоеОборудованиеИОплатуПлатежнымиКартами, ЗначениеПодчиненнойКонстанты);
	 	
	ИначеЕсли ИмяКонстанты = "ИспользоватьНесколькоКасс"
	 	  ИЛИ ИмяКонстанты = "ИспользоватьНесколькоРасчетныхСчетов" Тогда
		
		Если ИмяКонстанты = "ИспользоватьНесколькоКасс" Тогда
			ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты ИЛИ Константы.ИспользоватьНесколькоРасчетныхСчетов.Получить();
		Иначе
			ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты ИЛИ Константы.ИспользоватьНесколькоКасс.Получить();
		КонецЕсли;
		
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьНесколькоРасчетныхСчетовКасс, ЗначениеПодчиненнойКонстанты);
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьНесколькоВалют" Тогда
		
		Если НЕ ЗначениеКонстанты Тогда
			
			ЗначениеПодчиненнойКонстанты = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
			
			УстановитьЗначениеКонстанты(
				Константы.ВалютаУправленческогоУчета, 	  ЗначениеПодчиненнойКонстанты);
			УстановитьЗначениеКонстанты(
				Константы.ВалютаРегламентированногоУчета, ЗначениеПодчиненнойКонстанты);				
		КонецЕсли;
		
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьЗаказыКлиентов" 
		ИЛИ ИмяКонстанты = "ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов" Тогда
		
		Если НЕ Константы.ИспользоватьЗаказыКлиентов.Получить() 
			И НЕ Константы.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов.Получить() Тогда
		
			УстановитьЗначениеКонстанты(
				Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента,   Ложь);
				
			КонецЕсли;
			
	ИначеЕсли ИмяКонстанты = "ИспользоватьРасширенныеВозможностиЗаказаКлиента" Тогда
		
		Если НЕ Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Получить() Тогда
		
			УстановитьЗначениеКонстанты(
				Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОплаты,   Ложь);
			УстановитьЗначениеКонстанты(
				Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки, Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьСогласованиеЧерез1СДокументооборот" Тогда
		
		Если НЕ ЗначениеКонстанты Тогда
			УстановитьЗначениеКонстанты(
				Константы.ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов,
				Константы.ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов.Получить());
			УстановитьЗначениеКонстанты(
				Константы.ИспользоватьВнутреннееСогласованиеЗаказовКлиентов,
				Константы.ИспользоватьСогласованиеЗаказовКлиентов.Получить());
			УстановитьЗначениеКонстанты(
				Константы.ИспользоватьВнутреннееСогласованиеКоммерческихПредложений,
				Константы.ИспользоватьСогласованиеКоммерческихПредложений.Получить());
			УстановитьЗначениеКонстанты(
				Константы.ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами,
				Константы.ИспользоватьСогласованиеСоглашенийСКлиентами.Получить());
		Иначе
			УстановитьЗначениеКонстанты(
				Константы.ИспользоватьПроцессыИЗадачи1СДокументооборота,
				Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов"
	 ИЛИ ИмяКонстанты = "ИспользоватьСогласованиеЗаказовКлиентов"
	 ИЛИ ИмяКонстанты = "ИспользоватьСогласованиеКоммерческихПредложений"
	 ИЛИ ИмяКонстанты = "ИспользоватьСогласованиеСоглашенийСКлиентами" Тогда
		
		ИмяПодчиненнойКонстанты 	 = СтрЗаменить(ИмяКонстанты, "ИспользоватьСогласование", "ИспользоватьВнутреннееСогласование");
		ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И НЕ Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить();
		
		УстановитьЗначениеКонстанты(
			Константы[ИмяПодчиненнойКонстанты], ЗначениеПодчиненнойКонстанты);
			
	ИначеЕсли ИмяКонстанты = "ИспользоватьСделкиСКлиентами" Тогда
		
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьУправлениеСделками, ЗначениеКонстанты И Константы.ИспользоватьУправлениеСделками.Получить());
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьПервичныйСпрос, 	  ЗначениеКонстанты И Константы.ИспользоватьПервичныйСпрос.Получить());
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьУправлениеСделками" Тогда
		
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьКоммерческиеПредложенияКлиентам, ЗначениеКонстанты ИЛИ Константы.ИспользоватьКоммерческиеПредложенияКлиентам.Получить());
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьЗаказыКлиентов, 	  			   ЗначениеКонстанты ИЛИ Константы.ИспользоватьЗаказыКлиентов.Получить());
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента"
	 ИЛИ ИмяКонстанты = "ИспользоватьЗаказыНаПеремещение"
	 ИЛИ ИмяКонстанты = "ИспользоватьЗаказыНаВнутреннееПотребление"
	 ИЛИ ИмяКонстанты = "ИспользоватьЗаказыНаСборку" Тогда
		
		ЗначениеПодчиненнойКонстанты =
			Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.Получить()
			ИЛИ Константы.ИспользоватьЗаказыНаПеремещение.Получить()
			ИЛИ Константы.ИспользоватьЗаказыНаВнутреннееПотребление.Получить()
			ИЛИ Константы.ИспользоватьЗаказыНаСборку.Получить();
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьОбособленноеОбеспечениеЗаказов, ЗначениеПодчиненнойКонстанты И Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.Получить());
			
	ИначеЕсли ИмяКонстанты = "ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре"
	 ИЛИ ИмяКонстанты = "ИспользованиеЗаданийТорговымПредставителям" Тогда
		
		Если ИмяКонстанты = "ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре" Тогда
			ЗначениеПодчиненнойКонстанты = НЕ ЗначениеКонстанты
				И Константы.ИспользованиеЗаданийТорговымПредставителям.Получить() = Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями;
		Иначе
			ЗначениеПодчиненнойКонстанты = НЕ Константы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Получить()
				И ЗначениеКонстанты = Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями;
		КонецЕсли;
		
		УстановитьЗначениеКонстанты(
			Константы.НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре, ЗначениеПодчиненнойКонстанты);
				
	ИначеЕсли ИмяКонстанты = "ИспользоватьРучныеСкидкиВПродажах"
		ИЛИ ИмяКонстанты = "ИспользоватьАвтоматическиеСкидкиВПродажах" Тогда
		
		Если НЕ Константы.ИспользоватьРучныеСкидкиВПродажах.Получить()
			И НЕ Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Получить() Тогда
		
			УстановитьЗначениеКонстанты(Константы.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи, Ложь);
			УстановитьЗначениеКонстанты(Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи, Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
		КонецЕсли;
	ИначеЕсли ИмяКонстанты = "ИспользоватьСчетаНаОплатуКлиентам" Тогда
		
		ЗначениеПодчиненнойКонстанты = ?(НЕ ЗначениеКонстанты, Константы.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи.Получить(), Ложь);
		
		УстановитьЗначениеКонстанты(Константы.НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок, ?(НЕ ЗначениеКонстанты, НЕ ЗначениеПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты));
		УстановитьЗначениеКонстанты(Константы.НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок, ЗначениеПодчиненнойКонстанты);
		
	ИначеЕсли ИмяКонстанты = "ОтображениеСкидокВПечатныхФормахДокументовПродажи" Тогда
		
		ИспользоватьСчетаНаОплатуКлиентом = Константы.ИспользоватьСчетаНаОплатуКлиентам.Получить();
		
		ЗначениеПодчиненнойКонстанты = ?(НЕ ИспользоватьСчетаНаОплатуКлиентом, Константы.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи.Получить(), Ложь);
		
		УстановитьЗначениеКонстанты(Константы.НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок, ЗначениеПодчиненнойКонстанты);
		УстановитьЗначениеКонстанты(Константы.НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок, ?(НЕ ИспользоватьСчетаНаОплатуКлиентом, НЕ ЗначениеПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстанты(МенеджерКонстанты, ЗначениеКонстанты)
	
	Если МенеджерКонстанты.Получить() <> ЗначениеКонстанты Тогда
		МенеджерКонстанты.Установить(ЗначениеКонстанты);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВхожденияЭлементаИзТабличнойЧасти(ТабличнаяЧасть, Ссылка, Колонка)
	
	Отбор = Новый Структура(Колонка, Ссылка);
	
	Строки = ТабличнаяЧасть.НайтиСтроки(Отбор);
	Для Каждого ТекСтр Из Строки Цикл
		ТабличнаяЧасть.Удалить(ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьОтветственногоВСправочникахОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОтветственныйВДокументах = ПолучитьФункциональнуюОпцию("ОтветственныйВДокументах");
	СтандартнаяСсылка 		 = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0"));
	ТекущийПользователь		 = ПользователиКлиентСервер.АвторизованныйПользователь();
	МетаданныеДокумента 	 = Источник.Метаданные();
	
	Если Не ОтветственныйВДокументах или (СтандартнаяСсылка = ТекущийПользователь и ТекущийПользователь.Служебный) Тогда
		
		Если Не Источник.ЭтоГруппа Тогда 
			Если МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
				Источник.Ответственный = Неопределено;
			КонецЕсли;
			
			Если МетаданныеДокумента.Реквизиты.Найти("Менеджер") <> Неопределено Тогда
				Источник.Менеджер = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьОтветственногоВДокументахОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОтветственныйВДокументах = ПолучитьФункциональнуюОпцию("ОтветственныйВДокументах");
	СтандартнаяСсылка 		 = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0"));
	ТекущийПользователь		 = ПользователиКлиентСервер.АвторизованныйПользователь();
	МетаданныеДокумента 	 = Источник.Метаданные();
	
	Если Не ОтветственныйВДокументах или (СтандартнаяСсылка = ТекущийПользователь и ТекущийПользователь.Служебный) Тогда
		
		Если МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
			Источник.Ответственный = Неопределено;
		КонецЕсли;
			
		Если МетаданныеДокумента.Реквизиты.Найти("Менеджер") <> Неопределено Тогда
			Источник.Менеджер = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

&НаКлиенте
Перем ЗаполнениеВыполняется;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресПараметровМакета = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	#Область ЗаполнениеПоУмолчанию
	
	Объект.ПланироватьСДаты = ТекущаяДата();
	Если Не ЗначениеЗаполнено(Объект.ДнейПланирования) Тогда
		Объект.ДнейПланирования = 4;
	КонецЕсли;
	
	Объект.ОтображениеСумм = Перечисления.ОтображениеСуммВПлатежномКалендаре.ТочноеЗначение;
	Объект.ОтражатьОтрицательныеСуммы = Перечисления.ОтображениеОтрицательныхСуммВПлатежномКалендаре.СМинусом;
	Объект.ОтображатьНераспределенныеПоСчетамПоступленияИСписания = Истина;
	
	Объект.ЗаказыПокупателей = Истина;
	Объект.ЗаказыПоставщикам = Истина;
	
	Объект.ТекущаяГруппировка = "Произвольная";
	
	#КонецОбласти
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ТабличноеПолеЗаполнение, "ФормированиеОтчета");
	
	СформироватьСписокПоследнихГрупп();
	
	ЭлементовДереваБезДобавленныхДней = ЭтаФорма.ПолучитьРеквизиты("ДеревоПлатежей").Количество();
	
	ДополнитьКолонкиДней();
	ОтметитьФильтр(ЭтаФорма);
	ИзменитьВидимостьФормы("ЗаявкиСписокИКалендарь", Истина, Истина);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ДополнитьКолонкиДней();
	ОтметитьФильтр(ЭтаФорма);
	ИзменитьВидимостьФормы("ЗаявкиСписокИКалендарь", Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОжидаемоеПоступлениеДенежныхСредств"
		ИЛИ ИмяСобытия = "Запись_РаспоряжениеНаПеремещениеДенежныхСредств"
		ИЛИ ИмяСобытия = "Запись_ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		
		АктивныйДокумент = Источник;
		ЗапуститьЗаполнение(Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДнейПланированияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ПриИзмененииДнейПланирования", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейПланированияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ПриИзмененииДнейПланирования", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПриИзменении(Элемент)
	
	ЗапуститьЗаполнение(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ЗапуститьЗаполнение(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПриИзменении(Элемент)
	
	ЗапуститьЗаполнение(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьСДатыПриИзменении(Элемент)
	
	ПланироватьСДатыПриИзмененииНаСервере();
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДнейПланирования()
	
	ПриИзмененииДнейПланированияНаСервере();
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастройкиБанковскихСчетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ЗаявкиКОплатеПриАктивизацииСтроки(Элемент)
	
	Если РежимОтображения <> "СписокЗаявок" Тогда
		
		Если ФильтрСчетовКалендаря = 2 Тогда
			ТекущаяСтрокаСписка = Элементы.ЗаявкиКОплате.ТекущаяСтрока;
			Если ЗначениеЗаполнено(ТекущаяСтрокаСписка) Тогда
				ПодключитьОбработчикОжидания("ЗапуститьЗаполнениеПриАктивизацииСпискаЗаявок", 0.1, Истина);
			Иначе
				ДеревоПлатежей.ПолучитьЭлементы().Очистить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКОплатеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	МассивЗаявок = МассивЗначенийПеретаскивания(ПараметрыПеретаскивания);
	МассивДоступных = ДоступныеСчетаПеретаскивания(МассивЗаявок);
	ИзменитьФлагДоступностиСчетов(МассивДоступных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКОплатеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ИзменитьФлагДоступностиСчетов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКОплатеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаПеретаскивания) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Для Каждого Заявка из ПараметрыПеретаскивания.Значение Цикл
		Если ТипЗнч(Заявка) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКОплатеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена Тогда
		ИмяЭлементаПеретаскивания = "";
		Возврат;
	КонецЕсли;
	
	СтруктураОтправитель = ПреобразоватьПараметрыОтправкиВСтруктуру();
	СтруктураОтправитель.Удалить("Сумма");
	МассивРезультатовВставки = Новый Массив;
	МассивЗаявок = Новый Массив;
	Для Каждого Заявка из ПараметрыПеретаскивания.Значение Цикл
		Если ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			СтруктураОтражения = Новый Структура("Заявка", Заявка);
			СтруктураОтражения.Вставить("Отправитель", СтруктураОтправитель);
			МассивРезультатовВставки.Добавить(СтруктураОтражения);
			МассивЗаявок.Добавить(Заявка);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = МассивЗаявок;
	
	ОтразитьРезультатПереносаЗаявки(МассивРезультатовВставки);
	Элементы.ЗаявкиКОплате.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ДеревоПлатежей.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "Группировка" Тогда
		ПоказатьЗначение(,ТекущиеДанные.ЗначениеГруппировки);
	Иначе
		КолонкаТаблицы = ИмяДня(Поле.Имя);
		Если КолонкаТаблицы <> Неопределено Тогда
			Заявка = ТекущиеДанные[КолонкаТаблицы + "Значение"];
			Если ЗначениеЗаполнено(Заявка) Тогда
				ПоказатьЗначение(,Заявка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИмяЭлементаПеретаскивания = "";
	
	ТекущийЭлементДерева = Элементы.ДеревоПлатежей.ТекущийЭлемент;
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	
	ЭтоЗаявка = Ложь;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ВидСтроки = 1 Тогда
			ЭтоЗаявка = Истина;
		КонецЕсли;
	КонецЕсли;
	ЭтоЗаявка = ЭтоЗаявка И СтрНачинаетсяС(ТекущийЭлементДерева.Имя, "ДеревоПлатежейДень");
	ЭтоЗаявка = ЭтоЗаявка И СтрЗаканчиваетсяНа(ТекущийЭлементДерева.Имя, "Представление");
	
	Если Не ЭтоЗаявка Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	НомерДня = СтрЗаменить(ТекущийЭлементДерева.Имя, "Представление", "");
	НомерДня = СтрЗаменить(НомерДня, "ДеревоПлатежей", "");
	
	ИмяЭлементаПеретаскивания = НомерДня;
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	СтрокаОтправитель = ТекущиеДанные.ПолучитьИдентификатор();
	
	Заявка = ТекущиеДанные[НомерДня + "Значение"];
	Если Не ЗначениеЗаполнено(Заявка) Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Заявка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Заявка);
	
	МассивДоступных = ДоступныеСчетаПеретаскивания(ПараметрыПеретаскивания.Значение);
	ИзменитьФлагДоступностиСчетов(МассивДоступных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивЗаявок = МассивЗначенийПеретаскивания(ПараметрыПеретаскивания);
	СтандартнаяОбработка = Ложь;
	
	КолонкаТаблицы = ИмяДня(Поле.Имя);
	Если КолонкаТаблицы = Неопределено Тогда
		КолонкаТаблицы = "День1";
	КонецЕсли;
	
	ЭлементыКСозданиюЗаявок = МассивДокументовКСозданиюЗаявок(МассивЗаявок);
	МассивЗаявок = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивЗаявок, ЭлементыКСозданиюЗаявок);
	ПараметрыПеретаскивания.Значение = МассивЗаявок;
	ПеренестиЗаявку(МассивЗаявок, КолонкаТаблицы, Строка, Поле);
	
	Если ЭлементыКСозданиюЗаявок.Количество() Тогда
		СписокЗаявокКСозданию = Неопределено; ПредставлениеЗаявокКСозданию = "";
		Если МожноСоздатьЗаявки(ЭлементыКСозданиюЗаявок, СписокЗаявокКСозданию, ПредставлениеЗаявокКСозданию) Тогда
			ТекстВопроса = НСтр("ru='Создать %2
                                        |%1 ?'
                                        |;uk='Створити %2
                                        |%1 ?'");
			Если СписокЗаявокКСозданию.Количество() = 1 Тогда
				ОписаниеКоличестваДокументов = НСтр("ru='заявку по документу';uk='заявку по документу'");
			Иначе
				ОписаниеКоличестваДокументов = НСтр("ru='заявки по документам';uk='заявки за документами'");
			КонецЕсли;
			ТекстВопроса = СтрШаблон(ТекстВопроса, ПредставлениеЗаявокКСозданию, ОписаниеКоличестваДокументов);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СписокЗаявок", СписокЗаявокКСозданию);
			ДополнительныеПараметры.Вставить("Строка", Строка);
			ДополнительныеПараметры.Вставить("ИмяДня", КолонкаТаблицы);
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЗаявкиПоОснованиям", ЭтаФорма, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИзменитьФлагДоступностиСчетов(Истина);
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаПеретаскивания) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Перемещение Тогда
		ИмяЭлементаПеретаскивания = "";
		Возврат;
	КонецЕсли;
	
	МассивЗаявок = ПараметрыПеретаскивания.Значение;
	МассивЗаявок = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивЗаявок, МассивДокументовКСозданиюЗаявок(МассивЗаявок));
	Если Не ЗначениеЗаполнено(МассивЗаявок) Тогда
		ИмяЭлементаПеретаскивания = "";
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоПлатежей.НайтиПоИдентификатору(СтрокаОтправитель);
	ПлатежныйКалендарьКлиентСервер.ОчиститьЗначенияСтроки(ТекущаяСтрока, ИмяЭлементаПеретаскивания);
	
	СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, СтрокаОтправитель);
	РодительСтроки = ТекущаяСтрока.ПолучитьРодителя();
	ПодчиненныеСтроки = РодительСтроки.ПолучитьЭлементы();
	
	ЕстьЗначение = ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеГруппировки);
	Если Не ЕстьЗначение Тогда
		Для Сч = 1 по Объект.ДнейПланирования Цикл
			Если ЗначениеЗаполнено(ТекущаяСтрока["День" + Сч + "Значение"]) Тогда
				ЕстьЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЕстьЗначение Тогда
		ПодчиненныеСтроки = РодительСтроки.ПолучитьЭлементы();
		ПодчиненныеСтроки.Удалить(ТекущаяСтрока);
		Если РодительСтроки.ВидСтроки = 0 Тогда
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				ПодчиненныеСтроки.Очистить();
			КонецЕсли;
		КонецЕсли;
		РодительСтроки.ЕстьПодчиненныеСтроки = ПодчиненныеСтроки.Количество();
	КонецЕсли;
	
	СтрокиСОДинаковымИдентификатором = Новый Массив;
	Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
		Если ПодчиненнаяСтрока.ВидСтроки = 2 Тогда
			Продолжить;
		КонецЕсли;
		Если ПодчиненнаяСтрока.ПолучитьЭлементы().Количество() Тогда
			Продолжить;
		КонецЕсли;
		Если ПодчиненнаяСтрока.ЗначениеГруппировки = ТекущаяСтрока.ЗначениеГруппировки Тогда
			СтрокиСОДинаковымИдентификатором.Добавить(ПодчиненнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьИзменения = Истина;
	Пока ЕстьИзменения Цикл
		ЕстьИзменения = Ложь;
		Для Сч = 0 по СтрокиСОДинаковымИдентификатором.ВГраница() - 1 Цикл
			
			ИндексСКонцаМассива = СтрокиСОДинаковымИдентификатором.ВГраница() - Сч;
			ИндексСледующаяСтрока = ИндексСКонцаМассива - 1;
			
			СтрокаСКонцаМассива = СтрокиСОДинаковымИдентификатором[ИндексСКонцаМассива];
			Если Не ЗначениеЗаполнено(СтрокаСКонцаМассива[ИмяЭлементаПеретаскивания + "Значение"]) Тогда
				Продолжить;
			КонецЕсли;
			
			СледующаяСтрока = СтрокиСОДинаковымИдентификатором[ИндексСледующаяСтрока];
			
			Если Не ЗначениеЗаполнено(СледующаяСтрока[ИмяЭлементаПеретаскивания + "Значение"]) Тогда
				ПлатежныйКалендарьКлиентСервер.СкопироватьЗначенияСтроки(СтрокаСКонцаМассива, СледующаяСтрока, ИмяЭлементаПеретаскивания);
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если РодительСтроки.ВидСтроки = 1 Тогда
		ПлатежныйКалендарьКлиентСервер.ПроверитьВозможностьВыводаВОднуСтроку(РодительСтроки, Объект.ДнейПланирования);
	КонецЕсли;
	
	ПлатежныйКалендарьКлиентСервер.ПересчитатьПодчиненныеСтроки(ДеревоПлатежей, СтрокаБанковскогоСчета.ПолучитьИдентификатор(), 
																Объект.ДнейПланирования,
																Объект.ОтражатьОтрицательныеСуммы, Объект.ОтображениеСумм);
	
	ИмяЭлементаПеретаскивания = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	РодительСтроки = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, Строка);
	Если РодительСтроки = Неопределено
		ИЛИ РодительСтроки.НедоступноДляПереноса Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейГруппировкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	ТекущиеДанные.ЗначениеГруппировки = ТекущиеДанные.Группировка;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	ПорядокВПлатежномКалендаре = РодительСтроки.ПолучитьЭлементы().Индекс(ТекущиеДанные);
	
	Массив = Новый Массив;
	Для Сч = 1 по Объект.ДнейПланирования Цикл
		
		Заявка = ТекущиеДанные["День" + Сч + "Значение"];
		Если Не ЗначениеЗаполнено(Заявка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаПлатежа = ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Сч);
		СтруктураОтражения = Новый Структура;
		СтруктураОтражения.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", Заявка);
		СтруктураОтражения.Вставить("БанковскийСчетКасса", РодительСтроки.ЗначениеГруппировки);
		СтруктураОтражения.Вставить("ДатаПлатежа", ДатаПлатежа);
		СтруктураОтражения.Вставить("Группа", ТекущиеДанные.Группировка);
		СтруктураОтражения.Вставить("ПорядокВПлатежномКалендаре", ПорядокВПлатежномКалендаре);
		
		Массив.Добавить(СтруктураОтражения);
		
	КонецЦикла;
	
	ОтразитьНазначениеГруппыЗаявке(Массив);
	
	Если ПоявилисьДублиГруппировок(ТекущиеДанные) Тогда
		Если Массив.Количество() Тогда
			АктивныйДокумент = Массив[0].ЗаявкаНаРасходованиеДенежныхСредств;
		КонецЕсли;
		ЗапуститьЗаполнение(Массив.Количество(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПереключениеВидКалендаря

&НаКлиенте
Процедура ЗаявкиКалендарь(Команда)
	
	ИзменитьВидимостьФормы(Команда.Имя, Ложь, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиСписокЗаявок(Команда)
	
	ИзменитьВидимостьФормы(Команда.Имя, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиСписокИКалендарь(Команда)
	
	ИзменитьВидимостьФормы(Команда.Имя, Истина, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	
КонецПроцедуры

#КонецОбласти

#Область Список

&НаКлиенте
Процедура УказатьГруппу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьГруппуЗавершение", ЭтаФорма);
	ПоследняяНазначеннаяГруппа = "Группа";
	Если СписокГрупп.Количество() Тогда
		ПоследняяНазначеннаяГруппа = СписокГрупп[0].Значение;
	КонецЕсли;
	ПоказатьВводСтроки(ОписаниеОповещения, ПоследняяНазначеннаяГруппа, НСтр("ru='Назначить группу заявкам';uk='Призначити групу заявкам'"), 150, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьГруппуИзПоследних(Команда)
	
	УказатьГруппуИзПоследнихНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоСостоянию(Команда)
	
	СгруппироватьСписокЗаявок("СостояниеРаспределения");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПартнер(Команда)
	
	СгруппироватьСписокЗаявок("Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроизвольнымГруппам(Команда)
	
	СгруппироватьСписокЗаявок("ГруппаЗаявок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьГруппировку(Команда)
	
	ЗаявкиКОплате.Группировка.Элементы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьЗаявкуКОплате(Команда)
	
	ТекущиеДанные = Элементы.ЗаявкиКОплате.ТекущаяСтрока;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаявок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные);
	МассивДоступных = ДоступныеСчетаПеретаскивания(МассивЗаявок);
	ИзменитьФлагДоступностиСчетов(МассивДоступных);
	
	ТекущияСчет = Элементы.ДеревоПлатежей.ТекущаяСтрока;
	СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ТекущияСчет);
	
	Если СтрокаБанковскогоСчета = Неопределено
		ИЛИ (ТипЗнч(СтрокаБанковскогоСчета.ЗначениеГруппировки) <> Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")
		И ТипЗнч(СтрокаБанковскогоСчета.ЗначениеГруппировки) <> Тип("СправочникСсылка.Кассы")) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Заявка может быть оплачена только с банковского счета или из кассы';uk='Заявка може бути сплачена лише з банківського рахунку або з каси'"));
		
		Возврат;
	КонецЕсли;
	
	Если СтрокаБанковскогоСчета.НедоступноДляПереноса Тогда
		
		ТекстСообщения = НСтр("ru='Заявка не может быть оплачена %1
                            |для просмотра подходящих счетов и касс выберите ""Фильтр счетов и касс"" - ""Подходящие""'
                            |;uk='Заявка не може бути сплачена %1
                            |для перегляду відповідних рахунків і кас виберіть ""Фільтр рахунків і кас"" - ""Підходящі""'");
		
		Если ТипЗнч(СтрокаБанковскогоСчета) = Тип("СправочникСсылка.Кассы") Тогда
			ИсточникОплаты = НСтр("ru='из выбранной кассы';uk='з вибраної каси'");
		Иначе
			ИсточникОплаты = НСтр("ru='с выбранного банковского счета';uk='з обраного банківського рахунку'");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИсточникОплаты);
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ПеренестиЗаявку(МассивЗаявок, "День1", СтрокаБанковскогоСчета.ПолучитьИдентификатор(), Элементы.ДеревоПлатежейДень1Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьТекущуюЗаявку(Команда)
	
	Если РежимОтображения = "Календарь" Тогда
		ВыделенныеСтроки = Новый Массив;
		ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Сч = 1 по Объект.ДнейПланирования Цикл
			Заявка = ТекущиеДанные["День" + Сч + "Значение"];
			Если ЗначениеЗаполнено(Заявка)
				И ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
				ВыделенныеСтроки.Добавить(Заявка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВыделенныеСтроки = Элементы.ЗаявкиКОплате.ВыделенныеСтроки;
	КонецЕсли;
	
	РаспределитьМассивЗаявок(ВыделенныеСтроки);
	Если ВыделенныеСтроки.Количество() Тогда
		АктивныйДокумент = ВыделенныеСтроки[0];
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗаявки(Команда)
	
	РаспределитьЗаявкиНаСервере();
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРаспределениеВыделенныхЗаявок(Команда)
	
	ВыделенныеСтроки = Элементы.ЗаявкиКОплате.ВыделенныеСтроки;
	ОчиститьРаспределениеВыделенныхЗаявокНаСервере(ВыделенныеСтроки);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	
КонецПроцедуры

#КонецОбласти

#Область Календарь

&НаКлиенте
Процедура ОткрытьЗаявку(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементДерева = Элементы.ДеревоПлатежей.ТекущийЭлемент;
	ИмяДня = ИмяДня(ТекущийЭлементДерева.Имя);
	Если ИмяДня = Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.ЗначениеГруппировки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные[ИмяДня + "Значение"]) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ЗначениеГруппировки);
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные[ИмяДня + "Значение"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПроизвольная(Команда)
	
	Объект.ТекущаяГруппировка = "Произвольная";
	Элементы.ДеревоЗаявокДобавитьСтроку.Видимость = Истина;
	ЗапуститьЗаполнение(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоПартнеру(Команда)
	
	Объект.ТекущаяГруппировка = "Партнер";
	Элементы.ДеревоЗаявокДобавитьСтроку.Видимость = Ложь;
	ЗапуститьЗаполнение(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоСтатьяДДС(Команда)
	
	Объект.ТекущаяГруппировка = "СтатьяДДС";
	Элементы.ДеревоЗаявокДобавитьСтроку.Видимость = Ложь;
	ЗапуститьЗаполнение(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоступлениеДС(Команда)
	
	СтруктураОтбор = Новый Структура;
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтрокаБанковскийСчет = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ТекущиеДанные.ПолучитьИдентификатор());
		Если ТипЗнч(СтрокаБанковскийСчет.ЗначениеГруппировки) = Тип("СправочникСсылка.Организации") Тогда
			СтруктураОтбор.Вставить("Организация", СтрокаБанковскийСчет.ЗначениеГруппировки);
		ИначеЕсли ТипЗнч(СтрокаБанковскийСчет.ЗначениеГруппировки) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
			СтруктураОтбор.Вставить("БанковскийСчет", СтрокаБанковскийСчет.ЗначениеГруппировки);
			СтруктураОтбор.Вставить("ФормаОплаты", ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная"));
		ИначеЕсли ТипЗнч(СтрокаБанковскийСчет.ЗначениеГруппировки) = Тип("СправочникСсылка.Кассы") Тогда
			СтруктураОтбор.Вставить("Касса", СтрокаБанковскийСчет.ЗначениеГруппировки);
			СтруктураОтбор.Вставить("ФормаОплаты", ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
		КонецЕсли;
		Если ТипЗнч(СтрокаБанковскийСчет.ЗначениеГруппировки) <> Тип("СправочникСсылка.Организации") Тогда
			ИменаРеквизитов = "Владелец, ВалютаДенежныхСредств";
			Реквизиты = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(СтрокаБанковскийСчет.ЗначениеГруппировки, ИменаРеквизитов);
			СтруктураОтбор.Вставить("Организация", Реквизиты.Владелец);
			СтруктураОтбор.Вставить("Валюта", Реквизиты.ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", СтруктураОтбор);
	ОткрытьФорму("Документ.ОжидаемоеПоступлениеДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПеремещениеДС(Команда)
	
	СтруктураОтбор = Новый Структура;
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтрокаБанковскийСчет = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ТекущиеДанные.ПолучитьИдентификатор());
		Если ТипЗнч(СтрокаБанковскийСчет.ЗначениеГруппировки) = Тип("СправочникСсылка.Организации") Тогда
			ПоказатьПредупреждение(,НСтр("ru='Команда недоступна для выбранного объекта';uk='Команда недоступна для вибраного об''єкта'"));
			Возврат;
		ИначеЕсли ТипЗнч(СтрокаБанковскийСчет.ЗначениеГруппировки) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
			СтруктураОтбор.Вставить("БанковскийСчетПолучатель", СтрокаБанковскийСчет.ЗначениеГруппировки);
			Если Команда.Имя = "РаспоряжениеНаПеремещениеИзБанка" Тогда
				СтруктураОтбор.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет"));
			Иначе
				СтруктураОтбор.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк"));
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаБанковскийСчет.ЗначениеГруппировки) = Тип("СправочникСсылка.Кассы") Тогда
			СтруктураОтбор.Вставить("КассаПолучатель", СтрокаБанковскийСчет.ЗначениеГруппировки);
			Если Команда.Имя = "РаспоряжениеНаПеремещениеИзБанка" Тогда
				СтруктураОтбор.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка"));
			Иначе
				СтруктураОтбор.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу"));
			КонецЕсли;
		КонецЕсли;
		
		ИменаРеквизитов = "Владелец, ВалютаДенежныхСредств";
		Реквизиты = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(СтрокаБанковскийСчет.ЗначениеГруппировки, ИменаРеквизитов);
		СтруктураОтбор.Вставить("Организация", Реквизиты.Владелец);
		СтруктураОтбор.Вставить("Валюта", Реквизиты.ВалютаДенежныхСредств);
		
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", СтруктураОтбор);
	ОткрытьФорму("Документ.РаспоряжениеНаПеремещениеДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВБанк(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ВыгрузкаВБанк");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежныеПоручения(Команда)
	
	ДатаФормирования = Объект.ПланироватьСДаты;
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьПлатежныеПорученияЗавершение", ЭтаФорма);
	ЗаголовокВводаДаты = НСтр("ru='Сформировать платежные поручения на дату:';uk='Сформувати платіжні доручення на дату:'");
	ПоказатьВводДаты(ОписаниеОповещения, ДатаФормирования, ЗаголовокВводаДаты, ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСчетовВсеСчета(Команда)
	
	ФильтрСчетовКалендаря = 0;
	ОтметитьФильтр(ЭтаФорма);
	БанковскиеСчетаКассы = Неопределено;
	ЗапуститьЗаполнение(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСчетовВыбранныеСчета(Команда)
	
	ОткрытьФормуНастройкиБанковскихСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСчетовРекомендуемые(Команда)
	
	ФильтрСчетовКалендаря = 2;
	ОтметитьФильтр(ЭтаФорма);
	ЗапуститьЗаполнение(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокДобавитьСтроку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводНаименованияГруппыПриДобавленииСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, "", НСтр("ru='Наименование группы';uk='Найменування групи'"), 150, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокУдалитьСтроку(Команда)
	
	ТекстСообщения = НСтр("ru='Строка не может быть удалена';uk='Рядок не може бути видалена'");
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидСтроки <> 1 Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ТекущиеДанные.ПолучитьИдентификатор());
	
	МассивРезультатовВставки = Новый Массив;
	МассивНедоступныхКУдалению = Новый Массив;
	
	Для Сч = 1 по Объект.ДнейПланирования Цикл
		Заявка = ТекущиеДанные["День" + Сч + "Значение"];
		Если ЗначениеЗаполнено(Заявка) Тогда
			
			Если ТипЗнч(Заявка) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
				МассивНедоступныхКУдалению.Добавить(Заявка);
			КонецЕсли;
			
			Если МассивНедоступныхКУдалению.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаПлатежа = ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Сч);
			
			СтруктураОтправки = Новый Структура();
			СтруктураОтправки.Вставить("БанковскийСчетКасса", СтрокаБанковскогоСчета.ЗначениеГруппировки);
			СтруктураОтправки.Вставить("ДатаПлатежа", ДатаПлатежа);
			СтруктураОтправки.Вставить("Сумма", -ТекущиеДанные["День" + Сч + "Сумма"]);
			
			СтруктураЗаявки = Новый Структура("Заявка", Заявка);
			СтруктураЗаявки.Вставить("Отправитель", СтруктураОтправки);
			
			МассивРезультатовВставки.Добавить(СтруктураЗаявки);
			
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНедоступныхКУдалению.Количество() Тогда
		ТекстСообщения = НСтр("ru='Выбранная строка не может быть удалена, 
                                    |т.к. график оплат в следующих документах может быть отредактирован только вручную:
                                    |%1'
                                    |;uk='Обраний рядок не може бути вилучений, 
                                    |оскільки графік оплат в наступних документах може бути відредагований тільки вручну:
                                    |%1'");
		ПоказатьПредупреждение(,СтрШаблон(ТекстСообщения, СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивНедоступныхКУдалению)));
		Возврат;
	КонецЕсли;
	
	ОтразитьРезультатПереносаЗаявки(МассивРезультатовВставки);
	
	ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
	
	Если РежимОтображения <> "Календарь" Тогда
		
		Элементы.ЗаявкиКОплате.Обновить();
		ПлатежныйКалендарьКлиентСервер.ПересчитатьПодчиненныеСтроки(ДеревоПлатежей, СтрокаБанковскогоСчета.ПолучитьИдентификатор(),
												Объект.ДнейПланирования, Объект.ОтражатьОтрицательныеСуммы, Объект.ОтображениеСумм);
												
	Иначе
		Если МассивРезультатовВставки.Количество() Тогда
			АктивныйДокумент = МассивРезультатовВставки[0].Заявка;
		Иначе
			АктивныйДокумент = Неопределено;
		КонецЕсли;
		ЗапуститьЗаполнение(Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Если Не СтрокуМожноСмещать(-1) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Команда не может быть выполнена для текущей строки';uk='Команда не може бути виконана для поточного рядка'"));
		Возврат;
	КонецЕсли;
	
	ПереместитьСтрокуСервере(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Если Не СтрокуМожноСмещать(1) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Команда не может быть выполнена для текущей строки';uk='Команда не може бути виконана для поточного рядка'"));
		Возврат;
	КонецЕсли;
	
	ПереместитьСтрокуСервере(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокРазвернутьВсе(Команда)
	
	ЭлементыДерева = ДеревоПлатежей.ПолучитьЭлементы();
	Для Каждого ЭлементДерева из ЭлементыДерева Цикл
		Элементы.ДеревоПлатежей.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокСвернутьВсе(Команда)
	
	ЭлементыДерева = ДеревоПлатежей.ПолучитьЭлементы();
	Для Каждого ЭлементДерева из ЭлементыДерева Цикл
		Элементы.ДеревоПлатежей.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщееМенюЕще

&НаКлиенте
Процедура Настройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииНастроек", ЭтаФорма);
	ОткрытьФорму("Обработка.ПлатежныйКалендарь.Форма.ФормаНастроек", Новый Структура("Объект", Объект)
														,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалендарь(Команда)
	
	ЗапуститьЗаполнение(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДополнительныеИСерверныеОбработчики

&НаКлиенте
Процедура ВводНаименованияГруппыПриДобавленииСтроки(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДеревоПлатежей.ТекущаяСтрока;
	СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ТекущаяСтрока);
	
	ПодчиненныеСтроки = СтрокаБанковскогоСчета.ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
		Если ПодчиненнаяСтрока.ЗначениеГруппировки = Результат Тогда
			ПоказатьПредупреждение(,НСтр("ru='Группировка с таким именем уже присутствует';uk='Групування з таким ім''ям вже присутнє'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные = ПодчиненныеСтроки.Добавить();
	ТекущиеДанные.ЗначениеГруппировки = Результат;
	ТекущиеДанные.Группировка = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлагДоступностиСчетов(ЗначениеДоступности)
	
	Для Каждого СтрокаСчета из ДеревоПлатежей.ПолучитьЭлементы() Цикл
		Если ТипЗнч(ЗначениеДоступности) = Тип("Булево") Тогда
			СтрокаСчета.НедоступноДляПереноса = Не ЗначениеДоступности;
		Иначе
			СтрокаСчета.НедоступноДляПереноса = ЗначениеДоступности.Найти(СтрокаСчета.ЗначениеГруппировки) = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьФормы(Команда, ЗаявкиВидны, КалендарьВиден)
	
	РежимОтображения = СтрЗаменить(Команда, "Заявки", "");
	
	Элементы.ЗаявкиКОплате.Видимость = ЗаявкиВидны;
	Элементы.ДеревоПлатежейФильтр.Видимость = ЗаявкиВидны;
	
	Элементы.ДеревоПлатежейИзменитьРежим.Видимость = Не ЗаявкиВидны;
	Элементы.ТабличноеПолеЗаполнениеИзменитьРежим.Видимость = Не ЗаявкиВидны;
	Элементы.ДеревоПлатежейРаспределить.Видимость = Не ЗаявкиВидны;
	
	Элементы.ЗаявкиКОплатеПлатежи.Видимость = Не КалендарьВиден;
	Элементы.ЗаявкиКОплатеВыбрать.Видимость = ЗаявкиВидны И КалендарьВиден;
	
	Элементы.ГруппаПраваяКолонка.Видимость = КалендарьВиден;
	
	Элементы.ЗаявкиИзменитьРежим.Картинка = ЭтаФорма.Команды[Команда].Картинка;
	Элементы.ДеревоПлатежейИзменитьРежим.Картинка = ЭтаФорма.Команды[Команда].Картинка;
	Элементы.ТабличноеПолеЗаполнениеИзменитьРежим.Картинка = ЭтаФорма.Команды[Команда].Картинка;
	
	Элементы.БанковскиеСчета.Видимость = КалендарьВиден И Не ЗаявкиВидны;
	Элементы.ДеревоПлатежейФильтр.Видимость = КалендарьВиден И ЗаявкиВидны;
	Элементы.ТабличноеПолеЗаполнениеФильтр.Видимость = КалендарьВиден И ЗаявкиВидны;
	
	ОбновитьКалендарьНаСервереПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДнейПланированияНаСервере()
	
	ДополнитьКолонкиДней();
	ОбновитьКалендарьНаСервереПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасчетаКалендаря()
	
	СтруктураВызова = Новый Структура;
	Для Каждого Реквизит из Метаданные.Обработки.ПлатежныйКалендарь.Реквизиты Цикл
		СтруктураВызова.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	КонецЦикла;
	
	СтруктураВызова.Вставить("Организации", Организации);
	СтруктураВызова.Вставить("Валюта", Валюта);
	
	Если РежимОтображения = "СписокИКалендарь" Тогда
		Если ФильтрСчетовКалендаря = 0 Тогда
			СтруктураВызова.Вставить("БанковскиеСчетаКассы", Неопределено);
			СтруктураВызова.Вставить("ОтображатьНераспределенные", Истина);
		ИначеЕсли ФильтрСчетовКалендаря = 1 Тогда
			СтруктураВызова.Вставить("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
			СтруктураВызова.Вставить("ОтображатьНераспределенные", Объект.ОтображатьНераспределенныеПоСчетамПоступленияИСписания);
		ИначеЕсли ФильтрСчетовКалендаря = 2 Тогда
			СтруктураВызова.Вставить("Заявка", Элементы.ЗаявкиКОплате.ТекущаяСтрока);
			СтруктураВызова.Вставить("ОтображатьНераспределенные", Ложь);
		КонецЕсли;
		СтруктураВызова.Вставить("ОтображатьНераспределенныеВКалендаре", Ложь);
	ИначеЕсли РежимОтображения = "Календарь" Тогда
		СтруктураВызова.Вставить("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
		СтруктураВызова.Вставить("ОтображатьНераспределенные", Объект.ОтображатьНераспределенныеПоСчетамПоступленияИСписания);
		СтруктураВызова.Вставить("ОтображатьНераспределенныеВКалендаре", Истина);
	ИначеЕсли РежимОтображения = "СписокЗаявок" Тогда
		СтруктураВызова.Вставить("БанковскиеСчетаКассы", Неопределено);
		СтруктураВызова.Вставить("ОтображатьНераспределенные", Объект.ОтображатьНераспределенныеПоСчетамПоступленияИСписания);
		СтруктураВызова.Вставить("ОтображатьНераспределенныеВКалендаре", Ложь);
	КонецЕсли;
	
	ДеревоЗначенийПлатежей = ДанныеФормыВЗначение(ДеревоПлатежей, Тип("ДеревоЗначений"));
	ДеревоЗначенийПлатежей.Строки.Очистить();
	СтруктураВызова.Вставить("ДеревоПлатежей", ДеревоЗначенийПлатежей);
	
	Возврат СтруктураВызова;
	
КонецФункции

&НаСервере
Процедура ПланироватьСДатыПриИзмененииНаСервере()
	
	ДополнитьКолонкиДней();
	ОбновитьКалендарьНаСервереПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ИмяЭУОСтрок = НСтр("ru='Настройка оформления итогов подчиненных строк';uk='Настройка оформлення підсумків підпорядкованих рядків'");
	ИмяЭУОИтогов = НСтр("ru='Настройка формата итогов';uk='Настройка формату підсумків'");
	ИмяЭУОСуммСписка = НСтр("ru='Настройка формата сумм списка';uk='Настройка формату сум списку'");
	
	ЭлементыКУдалению = Новый Массив;
	Для Каждого ЭлементУсловногоОформления из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.Представление = ИмяЭУОСтрок
			ИЛИ ЭлементУсловногоОформления.Представление = ИмяЭУОИтогов
			ИЛИ ЭлементУсловногоОформления.Представление = ИмяЭУОСуммСписка Тогда
			ЭлементыКУдалению.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления из ЭлементыКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = ИмяЭУОСтрок;
	ПолеУО = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ДеревоПлатежей");
	ФинансоваяОтчетностьСервер.УстановитьОтбор(НовыйЭлементУсловногоОформления.Отбор, "ДеревоПлатежей.ВидСтроки", 1, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", ПлатежныйКалендарьКлиентСервер.СтрокаФорматаПоНастройкам(Объект.ОтражатьОтрицательныеСуммы, Объект.ОтображениеСумм));
	
	СтрокаФорматаОкругления = ПлатежныйКалендарьКлиентСервер.СтрокаФорматаПоНастройкам(Неопределено, Объект.ОтображениеСумм);
	
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.Представление = ИмяЭУОИтогов;
	ПолеУО = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных("ДеревоПлатежей");
	ФинансоваяОтчетностьСервер.УстановитьОтбор(НовыйЭлементУсловногоОформления.Отбор, "ДеревоПлатежей.ВидСтроки", 0);
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", СтрокаФорматаОкругления);
	
	Элементы.ЗаявкиКОплатеСуммаДокумента.Формат = СтрокаФорматаОкругления;
	Элементы.ЗаявкиКОплатеОсталосьРаспределить.Формат = СтрокаФорматаОкругления;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	ЗапуститьЗаполнение(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПлатежныеПорученияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат > ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Объект.ДнейПланирования) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Дата не может быть больше периода платежного календаря';uk='Дата не може бути більше періоду платіжного календаря'"));
		Возврат;
	КонецЕсли;
	
    Если Результат < Объект.ПланироватьСДаты Тогда        
		ПоказатьПредупреждение(, НСтр("ru='Дата не может быть меньше периода платежного календаря';uk='Дата не може бути менше періоду платіжного календаря'"));
		Возврат;
	КонецЕсли;
	
	СформироватьПлатежныеПорученияНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Функция СписокДокументовДляФормированияПлатежныхДокументов(ЭлементыПлатежей, НомерДня, СписокПлатежей = Неопределено) Экспорт
	
	Если СписокПлатежей = Неопределено Тогда
		СписокПлатежей = Новый ТаблицаЗначений;
		СписокПлатежей.Колонки.Добавить("Документ");
		СписокПлатежей.Колонки.Добавить("Сумма");
		СписокПлатежей.Колонки.Добавить("БанковскийСчет");
	КонецЕсли;
	
	Для Каждого СтрокаДерева из ЭлементыПлатежей Цикл
		
		ЭлементыРасходов = СтрокаДерева.ПолучитьЭлементы();
		СписокДокументовДляФормированияПлатежныхДокументов(ЭлементыРасходов, НомерДня, СписокПлатежей);
		
		Если СтрокаДерева.ВидСтроки <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева["День" + НомерДня + "Сумма"] >= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = СтрокаДерева["День" + НомерДня + "Значение"];
		Если ЗначениеЗаполнено(Значение) Тогда
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
				ИЛИ ТипЗнч(Значение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				БанковскийСчет = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, СтрокаДерева.ПолучитьИдентификатор()).ЗначениеГруппировки;
				Если Не ЗначениеЗаполнено(БанковскийСчет) ИЛИ ТипЗнч(БанковскийСчет) <> Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
					Продолжить;
				КонецЕсли;
				СтруктураФормирования = СписокПлатежей.Добавить();
				СтруктураФормирования.Документ = Значение;
				СтруктураФормирования.Сумма = СтрокаДерева["День" + НомерДня + "Сумма"];
				СтруктураФормирования.БанковскийСчет = БанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПлатежей;
	
КонецФункции

&НаСервере
Процедура СформироватьПлатежныеПорученияНаСервере(Дата)
	
	День = (Дата - Объект.ПланироватьСДаты) / 86400 + 1;
	ЭлементыПлатежей = ДеревоПлатежей.ПолучитьЭлементы();
	
	СписокПлатежей = СписокДокументовДляФормированияПлатежныхДокументов(ЭлементыПлатежей, День);
	МассивСчетов = СписокПлатежей.ВыгрузитьКолонку("БанковскийСчет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК СписаниеСРасчетногоСчета,
	|	СписаниеБезналичныхДенежныхСредств.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.ЗаявкаНаРасходованиеДенежныхСредств В(&СписокДокументов)
	|	И СписаниеБезналичныхДенежныхСредств.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка,
	|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ В(&СписокДокументов)
	|	И СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокПлатежей.ВыгрузитьКолонку("Документ"));
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПлатежей = РезультатЗапроса.Выгрузить();
	
	ТипыВводаНаОсновании = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ВводитсяНаОсновании;
	НевозможноСформировать = Новый СписокЗначений;
	СформированоДокументов = 0;
	
	Для Каждого СтрокаПлатежа из СписокПлатежей Цикл
		Если ТаблицаПлатежей.Найти(СтрокаПлатежа.Документ, "Документ") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ТипыВводаНаОсновании.Содержит(СтрокаПлатежа.Документ.Метаданные()) Тогда
			НевозможноСформировать.Добавить(СтрокаПлатежа.Документ);
			Продолжить;
		КонецЕсли;
		НовыйДокумент = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтрокаПлатежа.Документ);
		НовыйДокумент.БанковскийСчет = СтрокаПлатежа.БанковскийСчет;
		СуммаКРаспределению = -СтрокаПлатежа.Сумма;
		
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого СтрокаДокумента из НовыйДокумент.РасшифровкаПлатежа Цикл
			СтрокаДокумента.Сумма = Мин(СтрокаДокумента.Сумма, СуммаКРаспределению);
			СуммаКРаспределению = СуммаКРаспределению - СтрокаДокумента.Сумма;
			Если Не СтрокаДокумента.Сумма Тогда
				МассивСтрокКУдалению.Добавить(СтрокаДокумента);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДокумента из МассивСтрокКУдалению Цикл
			НовыйДокумент.РасшифровкаПлатежа.Удалить(СтрокаДокумента);
		КонецЦикла;
		
		НовыйДокумент.СуммаДокумента = НовыйДокумент.РасшифровкаПлатежа.Итог("Сумма");
		
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.УстановитьНовыйНомер();
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			НевозможноСформировать.Добавить(СтрокаПлатежа.Документ);
			Продолжить;
		КонецПопытки;
		СформированоДокументов = СформированоДокументов + 1;
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru='Сформировано документов %1';uk='Сформовано документів %1'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, СформированоДокументов));
	
	Если НевозможноСформировать.Количество() Тогда
		
		ТекстСообщения = НСтр("ru='Не сформировано документов %1';uk='Не сформовано документів %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, НевозможноСформировать.Количество()));
		ТекстСообщения = НСтр("ru='Для формирования платежных поручений оформите заявки на расходование денежных средств по документам:';uk='Для формування платіжних доручень оформіть заявки на витрату грошових коштів за документами:'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Для Каждого ЭлементСписка из НевозможноСформировать Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ЭлементСписка.Значение), ЭлементСписка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтметитьФильтр(ЭтаФорма)
	
	Элементы = ЭтаФорма.Элементы;
	Элементы.ДеревоПлатежейВсеСчета.Пометка = Ложь;
	Элементы.ДеревоПлатежейВыбранныеСчета.Пометка = Ложь;
	Элементы.ДеревоПлатежейРекомендуемые.Пометка = Ложь;
	
	Элементы.ТабличноеПолеЗаполнениеВсеСчета.Пометка = Ложь;
	Элементы.ТабличноеПолеЗаполнениеВыбранныеСчета.Пометка = Ложь;
	Элементы.ТабличноеПолеЗаполнениеРекомендуемые.Пометка = Ложь;
	
	ФильтрСчетовКалендаря = ЭтаФорма.ФильтрСчетовКалендаря;
	
	Если ФильтрСчетовКалендаря = 0 Тогда
		Элементы.ДеревоПлатежейВсеСчета.Пометка = Истина;
		Элементы.ТабличноеПолеЗаполнениеВсеСчета.Пометка = Истина;
	ИначеЕсли ФильтрСчетовКалендаря = 1 Тогда
		Элементы.ДеревоПлатежейВыбранныеСчета.Пометка = Истина;
		Элементы.ТабличноеПолеЗаполнениеВыбранныеСчета.Пометка = Истина;
	ИначеЕсли ФильтрСчетовКалендаря = 2 Тогда
		Элементы.ДеревоПлатежейРекомендуемые.Пометка = Истина;
		Элементы.ТабличноеПолеЗаполнениеРекомендуемые.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиБанковскихСчетов()
	
	ФильтрСчетовКалендаря = 1;
	ОтметитьФильтр(ЭтаФорма);
	
	ПараметрыФормыСчетов = Новый Структура;
	ПараметрыФормыСчетов.Вставить("ОтображатьНераспределенныеПоСчетамПоступленияИСписания", Объект.ОтображатьНераспределенныеПоСчетамПоступленияИСписания);
	ПараметрыФормыСчетов.Вставить("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
	ПараметрыФормыСчетов.Вставить("Организации", Организации);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыборБанковскихСчетовКасс", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ПлатежныйКалендарь.Форма.ВыбранныеСчетаИКассы", ПараметрыФормыСчетов,
						,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборБанковскихСчетовКасс(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БанковскиеСчетаКассы = Результат.БанковскиеСчетаКассы;
	
	Объект.ОтображатьНераспределенныеПоСчетамПоступленияИСписания = 
		Результат.ОтображатьНераспределенныеПоСчетамПоступленияИСписания;
		
	ЗапуститьЗаполнение(Ложь, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноСоздатьЗаявки(ЭлементыКСозданиюЗаявок, СписокЗаявокКСозданию, ПредставлениеЗаявокКСозданию)
	
	СписокЗаявокКСозданию = Новый Массив;
	ПредставлениеЗаявокКСозданию = "";
	
	Для Каждого Документ из ЭлементыКСозданиюЗаявок Цикл
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
		Если Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ВводитсяНаОсновании.Содержит(МетаданныеДокумента) Тогда
			СписокЗаявокКСозданию.Добавить(Документ);
			ПредставлениеЗаявокКСозданию = ПредставлениеЗаявокКСозданию + Строка(Документ) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеЗаявокКСозданию = СокрЛП(ПредставлениеЗаявокКСозданию);
	
	Возврат СписокЗаявокКСозданию.Количество();
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаявкиПоОснованиям(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СоздатьЗаявкиПоОснованиямНаСервере(ДополнительныеПараметры);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
		
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаявкиПоОснованиямНаСервере(ПараметрыСоздания)
	
	СписокЗаявокКСозданию = ПараметрыСоздания.СписокЗаявок;
	Строка = ПараметрыСоздания.Строка;
	КолонкаТаблицы = ПараметрыСоздания.ИмяДня;
	
	Назначение = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, Строка);
	ИсточникОплаты = Назначение.ЗначениеГруппировки;
	ДатаПлатежа = ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Число(СтрЗаменить(КолонкаТаблицы, "День", "")));
	
	Для Каждого ДокументОснование из СписокЗаявокКСозданию Цикл
		
		НоваяЗаявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		НоваяЗаявка.Заполнить(ДокументОснование);
		НоваяЗаявка.Дата = ТекущаяДатаСеанса();
		НоваяЗаявка.УстановитьНовыйНомер();
		НоваяЗаявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
		Если ТипЗнч(ИсточникОплаты) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
			НоваяЗаявка.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;
			НоваяЗаявка.ФормаОплатыБезналичная = Истина;
			НоваяЗаявка.ФормаОплатыНаличная = Ложь;
			НоваяЗаявка.БанковскийСчет = ИсточникОплаты;
		Иначе
			НоваяЗаявка.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная;
			НоваяЗаявка.ФормаОплатыБезналичная = Ложь;
			НоваяЗаявка.ФормаОплатыНаличная = Истина;
			НоваяЗаявка.БанковскийСчет = ИсточникОплаты;
		КонецЕсли;
		СтрокаРаспределения = НоваяЗаявка.РаспределениеПоСчетам.Добавить();
		СтрокаРаспределения.БанковскийСчетКасса = ИсточникОплаты;
		СтрокаРаспределения.ДатаПлатежа = ДатаПлатежа;
		СтрокаРаспределения.Сумма = НоваяЗаявка.СуммаДокумента;
		НоваяЗаявка.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	АктивныйДокумент = НоваяЗаявка.Ссылка;
	
	ЗапуститьЗаполнениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ПоявилисьДублиГруппировок(Строка)
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		РодительСтроки = ДеревоПлатежей.НайтиПоИдентификатору(Строка).ПолучитьРодителя();
	Иначе
		РодительСтроки = Строка.ПолучитьРодителя();
	КонецЕсли;
	
	Если РодительСтроки <> Неопределено И РодительСтроки.ВидСтроки = 3 Тогда
		СтрокаБанковскогоСчета = РодительСтроки;
	Иначе
		СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, Строка);
	КонецЕсли;
	ЭлементыБанковскогоСчета = СтрокаБанковскогоСчета.ПолучитьЭлементы();
	МассивПройденныеГруппы = Новый Массив;
	
	Для Каждого СтрокаБанковскогоСчета из ЭлементыБанковскогоСчета Цикл
		Если МассивПройденныеГруппы.Найти(СтрокаБанковскогоСчета.ЗначениеГруппировки) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаБанковскогоСчета.ЗначениеГруппировки) Тогда
			МассивПройденныеГруппы.Добавить(СтрокаБанковскогоСчета.ЗначениеГруппировки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция СтрокуМожноСмещать(Направление)
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда
		РодительСтроки = ДеревоПлатежей;
	КонецЕсли;
	
	Индекс = РодительСтроки.ПолучитьЭлементы().Индекс(ТекущиеДанные);
	НовыйИндекс = Индекс + Направление;
	
	Если НовыйИндекс < 0 ИЛИ НовыйИндекс > РодительСтроки.ПолучитьЭлементы().Количество() - 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если Объект.ТекущаяГруппировка = "Произвольная"
		И ТекущиеДанные.ПолучитьРодителя() = СтрокаБанковскогоСчета Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеГруппировки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПредыдущаяСтрока = РодительСтроки.ПолучитьЭлементы()[НовыйИндекс];
		Если Не ЗначениеЗаполнено(ПредыдущаяСтрока.ЗначениеГруппировки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные = СтрокаБанковскогоСчета 
		Или ТекущиеДанные.ПолучитьРодителя() = СтрокаБанковскогоСчета Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПереместитьСтрокуСервере(Направление)
	
	ТекущаяСтрока = Элементы.ДеревоПлатежей.ТекущаяСтрока;
	ТекущиеДанные = ДеревоПлатежей.НайтиПоИдентификатору(ТекущаяСтрока);
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда
		РодительСтроки = ДеревоПлатежей;
	КонецЕсли;
	
	ЭлементыДерева = РодительСтроки.ПолучитьЭлементы();
	ЭлементыДерева.Сдвинуть(ЭлементыДерева.Индекс(ТекущиеДанные), Направление);
	
	НаборЗаписей = РегистрыСведений.ПорядокПлатежногоКалендаря.СоздатьНаборЗаписей();
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	
	Если ТекущиеДанные <> ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ТекущаяСтрока) Тогда
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		БанковскийСчетКасса = РодительСтроки.ЗначениеГруппировки;
		Организация = РодительСтроки.Организация;
		Валюта = РодительСтроки.Валюта;
		ЭтоПодчиненнаяСтрока = Истина;
	Иначе
		ЭтоПодчиненнаяСтрока = Ложь;
		БанковскийСчетКасса = Неопределено
	КонецЕсли;
	
	Для Каждого СтрокаДерева из ЭлементыДерева Цикл
		
		Если ЭтоПодчиненнаяСтрока Тогда
			Если Объект.ТекущаяГруппировка = "Произвольная" Тогда
				Если Не ЗначениеЗаполнено(СтрокаДерева.ЗначениеГруппировки) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНабора.Добавить();
		
		Если БанковскийСчетКасса = Неопределено Тогда
			НоваяСтрока.Организация = СтрокаДерева.Организация;
			НоваяСтрока.БанковскийСчетКасса = СтрокаДерева.ЗначениеГруппировки;
			НоваяСтрока.Валюта = СтрокаДерева.Валюта;
		Иначе
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.БанковскийСчетКасса = БанковскийСчетКасса;
			НоваяСтрока.Валюта = Валюта;
			НоваяСтрока.ЗначениеГруппировки = СтрокаДерева.ЗначениеГруппировки;
		КонецЕсли;
		
		НоваяСтрока.ПорядокВПлатежномКалендаре = ЭлементыДерева.Индекс(СтрокаДерева);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы из ТаблицаНабора Цикл
		Запись = РегистрыСведений.ПорядокПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Записать(Истина);
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область Список

&НаСервере
Процедура СформироватьСписокПоследнихГрупп()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
		|	ГруппыЗаявокПлатежногоКалендаря.Группа КАК Группа,
		|	МАКСИМУМ(ГруппыЗаявокПлатежногоКалендаря.ДатаНазначения) КАК ДатаНазначения
		|ИЗ
		|	РегистрСведений.ГруппыЗаявокПлатежногоКалендаря КАК ГруппыЗаявокПлатежногоКалендаря
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыЗаявокПлатежногоКалендаря.Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНазначения УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокГрупп.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СписокГрупп.Добавить(ВыборкаДетальныеЗаписи.Группа);
		
	КонецЦикла;
	
	МассивНаУдаление = Новый Массив;
	Для Каждого Элемент из Элементы.ЗаявкиКОплатеКонтекстноеМенюГруппаПоследниеГруппы.ПодчиненныеЭлементы Цикл
		МассивНаУдаление.Добавить(Элемент);
	КонецЦикла;
	
	Для Каждого Элемент из МассивНаУдаление Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого ЭлементСписка из СписокГрупп Цикл
		
		Индекс = СписокГрупп.Индекс(ЭлементСписка);
		НоваяКоманда = Элементы.Добавить("КомандаУказатьПоследнююГруппу_" + Индекс, Тип("КнопкаФормы"), 
												Элементы.ЗаявкиКОплатеКонтекстноеМенюГруппаПоследниеГруппы);
		
		НоваяКоманда.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НоваяКоманда.ИмяКоманды = "УказатьГруппуИзПоследних_" + Индекс;
		ЭтаФорма.Команды[НоваяКоманда.ИмяКоманды].Заголовок = ЭлементСписка.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьГруппуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ЗаявкиКОплате.ВыделенныеСтроки;
	МассивЗаявок = Новый Массив;
	Для Каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		СтруктураГруппы = Новый Структура("ЗаявкаНаРасходованиеДенежныхСредств, Группа, ДатаНазначения",
										ВыделеннаяСтрока, Результат, ТекущаяДата());
		МассивЗаявок.Добавить(СтруктураГруппы);
	КонецЦикла;
	
	УказатьГруппуЗавершениеНаСервере(МассивЗаявок);
	
КонецПроцедуры

&НаСервере
Процедура УказатьГруппуЗавершениеНаСервере(МассивЗаявок)
	
	ОтразитьНазначениеГруппыЗаявке(МассивЗаявок);
	
	СформироватьСписокПоследнихГрупп();
	
	Элементы.ЗаявкиКОплате.Обновить();
	
КонецПроцедуры

&НаСервере 
Процедура УказатьГруппуИзПоследнихНаСервере(ИмяКоманды)
	
	ВыделенныеСтроки = Элементы.ЗаявкиКОплате.ВыделенныеСтроки;
	МассивЗаявок = Новый Массив;
	Для Каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		СтруктураГруппы = Новый Структура("ЗаявкаНаРасходованиеДенежныхСредств, Группа, ДатаНазначения",
			ВыделеннаяСтрока, Команды[ИмяКоманды].Заголовок, ТекущаяДата());
		МассивЗаявок.Добавить(СтруктураГруппы);
	КонецЦикла;
	
	УказатьГруппуЗавершениеНаСервере(МассивЗаявок);

КонецПроцедуры

&НаСервере
Процедура СгруппироватьСписокЗаявок(ИмяГруппировки)
	
	ЗаявкиКОплате.Группировка.Элементы.Очистить();
	НовоеПоле = ЗаявкиКОплате.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяГруппировки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаявкиКОплате, "Организация", Организации, 
															ВидСравненияКомпоновкиДанных.ВСписке, , Организации.Количество());
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаявкиКОплате, "Валюта", Валюта, 
															ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Валюта));
															
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаявкиКОплате, "ЖелательнаяДатаПлатежа", 
															ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Объект.ДнейПланирования), 
															ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаявкиКОплате, "ТекущаяДата", НачалоДня(Объект.ПланироватьСДаты));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаявкиКОплате, "ПросроченоНеРаспределено", НСтр("ru='Просрочено (не распределено)';uk='Прострочено (не розподілено)'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаявкиКОплате, "НеРаспределено", НСтр("ru='Не распределено';uk='Не розподілено'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаявкиКОплате, "ОжидаетФормированияПлатежногоДокумента", НСтр("ru='Ожидает формирования платежного документа';uk='Очікує формування платіжного документа'"));
 	
	СписокУтвержденных = Новый СписокЗначений;
	СписокУтвержденных.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	СписокУтвержденных.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаявкиКОплате, "Статус", 
															СписокУтвержденных, 
															ВидСравненияКомпоновкиДанных.ВСписке,,
															НЕ Объект.ОтображатьНеутвержденные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗаполнениеПриАктивизацииСпискаЗаявок()
	
	ЗапуститьЗаполнение(Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Календарь_Вспомогательные

&НаКлиентеНаСервереБезКонтекста
Функция РодительСтроки(ДеревоПлатежей, Строка)
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоПлатежей.НайтиПоИдентификатору(Строка);
	РодительСтроки = ТекущаяСтрока;
	Если Не РодительСтроки.ПолучитьЭлементы().Количество() Тогда
		Если РодительСтроки.ПолучитьРодителя() <> Неопределено Тогда
			РодительСтроки = ТекущаяСтрока.ПолучитьРодителя();
		КонецЕсли;
	КонецЕсли;
	
	Возврат РодительСтроки;
	
КонецФункции

&НаКлиенте
Функция ИмяДня(ИмяПоля)
	
	Если Не СтрНачинаетсяС(ИмяПоля, "ДеревоПлатежейДень")
		ИЛИ Не СтрЗаканчиваетсяНа(ИмяПоля, "Представление") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КолонкаТаблицы = СтрЗаменить(ИмяПоля, "ДеревоПлатежей", "");
	КолонкаТаблицы = СтрЗаменить(КолонкаТаблицы, "Представление", "");
	
	Возврат КолонкаТаблицы;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоответствиеРеквизитовЗаявок(МассивЗаявок, Период, СуммаДокумента = Неопределено, РассчитыватьГруппировку = Ложь, ТекущаяГруппировка = "")
	
	Реквизиты = "СуммаДокумента, Контрагент, НазначениеПлатежа, Валюта,
				|ЖелательнаяДатаПлатежа, Дата, Номер, РаспределениеПоСчетам, РасшифровкаПлатежа";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаявок, Реквизиты);
	
	Контрагенты = Новый Массив;
	Для Каждого КлючИЗначение из Реквизиты Цикл
		Контрагенты.Добавить(КлючИЗначение.Значение.Контрагент);
	КонецЦикла;
	
	Контрагенты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Контрагенты, "Представление");
	
	МассивДоступныхСчетов = ДоступныеСчетаПеретаскивания(МассивЗаявок, Ложь);
	
	Для Каждого КлючИЗначение из Реквизиты Цикл
		Контрагент = КлючИЗначение.Значение.Контрагент;
		Если ЗначениеЗаполнено(Контрагент) Тогда
			КлючИЗначение.Значение.Вставить("КонтрагентНаименование", Контрагенты[Контрагент].Представление);
		Иначе
			КлючИЗначение.Значение.Вставить("КонтрагентНаименование", "");
		КонецЕсли;
		Если СуммаДокумента = Неопределено Тогда
			СуммаЗаявки = КлючИЗначение.Значение.СуммаДокумента;
			ТаблицаРаспределения = КлючИЗначение.Значение.РаспределениеПоСчетам;
			Распределено = ТаблицаРаспределения.Выгрузить().Итог("Сумма");
			СуммаЗаявки = Макс(СуммаЗаявки - Распределено, 0);
			КлючИЗначение.Значение.Вставить("СуммаДокумента", -СуммаЗаявки);
		Иначе
			КлючИЗначение.Значение.Вставить("СуммаДокумента", СуммаДокумента);
		КонецЕсли;
		КлючИЗначение.Значение.Удалить("РаспределениеПоСчетам");
		КлючИЗначение.Значение.Вставить("ДоступныеСчетаКассы", МассивДоступныхСчетов[КлючИЗначение.Ключ]);
	КонецЦикла;
	
	Если РассчитыватьГруппировку Тогда
		
		Если ТекущаяГруппировка = "СтатьяДДС" Тогда
			
			Для Каждого КлючИЗначение из Реквизиты Цикл
				МассивДДС = КлючИЗначение.Значение.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств");
				МассивДДС = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДДС);
				Если МассивДДС.Количество() = 1 Тогда
					КлючИЗначение.Значение.Вставить("Группировка", МассивДДС[0]);
				Иначе
					КлючИЗначение.Значение.Вставить("Группировка", Неопределено);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекущаяГруппировка = "Партнер" Тогда
			
			Для Каждого КлючИЗначение из Реквизиты Цикл
				МассивПартнеров = КлючИЗначение.Значение.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("Партнер");
				МассивПартнеров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПартнеров);
				Если МассивПартнеров.Количество() = 1 Тогда
					КлючИЗначение.Значение.Вставить("Группировка", МассивПартнеров[0]);
				Иначе
					КлючИЗначение.Значение.Вставить("Группировка", Неопределено);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекущаяГруппировка = "Произвольная" Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыЗаявокПлатежногоКалендаря.ЗаявкаНаРасходованиеДенежныхСредств КАК ДокументИсточник,
			|	ГруппыЗаявокПлатежногоКалендаря.Группа
			|ИЗ
			|	РегистрСведений.ГруппыЗаявокПлатежногоКалендаря КАК ГруппыЗаявокПлатежногоКалендаря
			|ГДЕ
			|	ГруппыЗаявокПлатежногоКалендаря.ЗаявкаНаРасходованиеДенежныхСредств В(&МассивЗаявок)";
			
			Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
			
			РезультатЗапроса = Запрос.Выполнить();
			ТаблицаЗаявок = РезультатЗапроса.Выгрузить();
			
			Для Каждого КлючИЗначение из Реквизиты Цикл
				
				НайденнаяСтрока = ТаблицаЗаявок.Найти(КлючИЗначение.Ключ, "ДокументИсточник");
				Если НайденнаяСтрока = Неопределено Тогда
					Группа = "";
				Иначе
					Группа = НайденнаяСтрока.Группа;
				КонецЕсли;
				КлючИЗначение.Значение.Вставить("Группировка", Группа);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение из Реквизиты Цикл
		КлючИЗначение.Значение.Удалить("РасшифровкаПлатежа");
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	КурсыВалютСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НачалоПериода, ) КАК КурсыВалютСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность,
	|	КурсыВалют.Период
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	Запрос.УстановитьПараметр("НачалоПериода", Период.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Период.КонецПериода));
	
	Таблица = Запрос.Выполнить().Выгрузить();
	КурсыВалют = Новый Массив;
	Для Каждого СтрокаТаблицы из Таблица Цикл
		КурсыВалют.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы));
	КонецЦикла;
	Реквизиты.Вставить("КурсыВалют", КурсыВалют);
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область Календарь_ПереносЗаявокИПересчетКалендаря

&НаКлиенте
Функция ПреобразоватьПараметрыОтправкиВСтруктуру()
	
	Если ЗначениеЗаполнено(ИмяЭлементаПеретаскивания) Тогда
		Если ЗначениеЗаполнено(СтрокаОтправитель) Тогда
			СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, СтрокаОтправитель);
			ДатаОтправки = ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Число(СтрЗаменить(ИмяЭлементаПеретаскивания, "День", "")));
			СтруктураОтправитель = Новый Структура("БанковскийСчетКасса, ДатаПлатежа", СтрокаБанковскогоСчета.ЗначениеГруппировки, ДатаОтправки);
			СтрокаДереваОтправитель = ДеревоПлатежей.НайтиПоИдентификатору(СтрокаОтправитель);
			СтруктураОтправитель.Вставить("Сумма", -СтрокаДереваОтправитель[ИмяЭлементаПеретаскивания + "Сумма"]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтправитель;
		
КонецФункции

&НаКлиенте
Процедура ПеренестиЗаявку(МассивЗаявок, КолонкаТаблицы, Строка, Поле)
	
	ТекущаяСтрока = ДеревоПлатежей.НайтиПоИдентификатору(Строка);
	РодительСтроки = РодительСтроки(ДеревоПлатежей, Строка);
	
	РассчитатьГруппировку = Истина;
	Если ЗначениеЗаполнено(ИмяЭлементаПеретаскивания) Тогда
		РассчитатьГруппировку = Ложь;
		ДанныеОтправки = ДеревоПлатежей.НайтиПоИдентификатору(СтрокаОтправитель);
		СуммаДокумента = ДанныеОтправки[ИмяЭлементаПеретаскивания + "Сумма"];
		Если ДанныеОтправки.ПолучитьРодителя() <> ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, СтрокаОтправитель) Тогда
			ДанныеОтправки = ДанныеОтправки.ПолучитьРодителя();
		КонецЕсли;
		Если Объект.ТекущаяГруппировка = "Произвольная" Тогда
			СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, Строка);
			Если ТекущаяСтрока = СтрокаБанковскогоСчета Тогда
				ЗначениеГруппировки = ДанныеОтправки.ЗначениеГруппировки;
			ИначеЕсли ТекущаяСтрока.ПолучитьРодителя() <> СтрокаБанковскогоСчета Тогда
				ЗначениеГруппировки = ТекущаяСтрока.ПолучитьРодителя().ЗначениеГруппировки;
			Иначе
				ЗначениеГруппировки = ТекущаяСтрока.ЗначениеГруппировки;
			КонецЕсли;
		Иначе
			ЗначениеГруппировки = ДанныеОтправки.ЗначениеГруппировки;
		КонецЕсли;
	КонецЕсли;
	
	ПериодКурсов = Новый Структура("НачалоПериода, КонецПериода", Объект.ПланироватьСДаты, 
									ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Объект.ДнейПланирования));
	
	СоответствиеРеквизитовЗаявок = СоответствиеРеквизитовЗаявок(МассивЗаявок, ПериодКурсов, СуммаДокумента, РассчитатьГруппировку, Объект.ТекущаяГруппировка);
	МассивРезультатовВставки = Новый Массив;
	
	ТребуетсяОбновлениеПоляКалендаря = Ложь;
	
	СтруктураОтправитель = ПреобразоватьПараметрыОтправкиВСтруктуру();
	
	БылПеренос = Ложь;
	ПодчиненныеСтроки = РодительСтроки.ПолучитьЭлементы();
	Для Каждого Заявка из МассивЗаявок Цикл
		
		РеквизитыЗаявки = СоответствиеРеквизитовЗаявок[Заявка];
		БанковскийСчет = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, Строка).ЗначениеГруппировки;
		Если РеквизитыЗаявки.ДоступныеСчетаКассы.Найти(БанковскийСчет) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИмяЭлементаПеретаскивания) Тогда
			Если РеквизитыЗаявки.СуммаДокумента = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеГруппировки = РеквизитыЗаявки.Группировка;
			Если ЗначениеГруппировки = Неопределено Тогда
				ТребуетсяОбновлениеПоляКалендаря = Истина;
			КонецЕсли;
		КонецЕсли;
		ЗаявкаРасположена = Ложь;
		Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.ВидСтроки >= 2 Тогда
				//строки итогов
				Продолжить;
			КонецЕсли;
			Если ПодчиненнаяСтрока.ЗначениеГруппировки <> ЗначениеГруппировки Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеКолонки = ПодчиненнаяСтрока[КолонкаТаблицы + "Значение"];
			Если ЗначениеКолонки = Заявка Тогда
				ЗаявкаРасположена = Истина;
				Прервать;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеКолонки) Тогда
				Продолжить;
			КонецЕсли;
			КонечныеСтроки = ПодчиненнаяСтрока.ПолучитьЭлементы();
			Если КонечныеСтроки.Количество() Тогда
				РодительСтроки = ПодчиненнаяСтрока;
				ПодчиненныеСтроки = КонечныеСтроки;
				Для Каждого КонечнаяСтрока из КонечныеСтроки Цикл
					ЗначениеКолонки = КонечнаяСтрока[КолонкаТаблицы + "Значение"];
					Если ЗначениеКолонки = Заявка Тогда
						ЗаявкаРасположена = Истина;
						Прервать;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ЗначениеКолонки) Тогда
						ЗаполнитьПараметрыСтрокиПоЗаявке(КонечнаяСтрока, КолонкаТаблицы, Заявка, 
											СоответствиеРеквизитовЗаявок, МассивРезультатовВставки, СтруктураОтправитель);
						ЗаявкаРасположена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЗаполнитьПараметрыСтрокиПоЗаявке(ПодчиненнаяСтрока, КолонкаТаблицы, Заявка, 
										СоответствиеРеквизитовЗаявок, МассивРезультатовВставки, СтруктураОтправитель);
				ЗаявкаРасположена = Истина;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если ЗаявкаРасположена Тогда
			БылПеренос = Истина;
		Иначе
			ПодчиненнаяСтрока = ПодчиненныеСтроки.Добавить();
			РодительСтроки.ЕстьПодчиненныеСтроки = Истина;
			ПодчиненнаяСтрока.ВидСтроки = 1;
			СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ПодчиненнаяСтрока);
			Если ПодчиненнаяСтрока.ПолучитьРодителя() = СтрокаБанковскогоСчета Тогда
				ПодчиненнаяСтрока.ЗначениеГруппировки = ЗначениеГруппировки;
				ПодчиненнаяСтрока.Группировка = ЗначениеГруппировки;
			КонецЕсли;
			ЗаполнитьПараметрыСтрокиПоЗаявке(ПодчиненнаяСтрока, КолонкаТаблицы, Заявка, 
										СоответствиеРеквизитовЗаявок, МассивРезультатовВставки, СтруктураОтправитель);
			БылПеренос = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПодчиненнаяСтрока = Неопределено Тогда
		//Ничего не добавлено
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоПлатежей.ТекущийЭлемент = Поле;
	
	Если ПоявилисьДублиГруппировок(Строка) Тогда
		ТребуетсяОбновлениеПоляКалендаря = Истина;
	КонецЕсли;
	
	Если Не ТребуетсяОбновлениеПоляКалендаря Тогда
	
		Элементы.ДеревоПлатежей.Развернуть(РодительСтроки.ПолучитьИдентификатор());
		Элементы.ДеревоПлатежей.ТекущаяСтрока = ПодчиненнаяСтрока.ПолучитьИдентификатор();
		
		Если ЗначениеЗаполнено(ИмяЭлементаПеретаскивания) И ЗначениеЗаполнено(СтрокаОтправитель) Тогда
			ОдинаковыйРодитель = ПодчиненнаяСтрока.ПолучитьРодителя() = ДеревоПлатежей.НайтиПоИдентификатору(СтрокаОтправитель).ПолучитьРодителя();
		КонецЕсли;
		
		Если Не БылПеренос Тогда
			ИмяЭлементаПеретаскивания = "";
		КонецЕсли;
		
		НужноОбновлятьИтоги = Ложь;
		Если ЗначениеЗаполнено(ИмяЭлементаПеретаскивания) Тогда
			НужноОбновлятьИтоги = Не ОдинаковыйРодитель;
		Иначе
			НужноОбновлятьИтоги = Истина;
		КонецЕсли;
		
		Если НужноОбновлятьИтоги Тогда
			ПлатежныйКалендарьКлиентСервер.ПроверитьДобавитьСтрокуИтогов(ДеревоПлатежей, ПодчиненнаяСтрока.ПолучитьИдентификатор(), Ложь, Истина);
			СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, ПодчиненнаяСтрока.ПолучитьИдентификатор());
			ПлатежныйКалендарьКлиентСервер.ПересчитатьПодчиненныеСтроки(ДеревоПлатежей, СтрокаБанковскогоСчета.ПолучитьИдентификатор(), 
														Объект.ДнейПланирования,
														Объект.ОтражатьОтрицательныеСуммы, Объект.ОтображениеСумм);
		КонецЕсли;
	
	КонецЕсли;
	
	ОтразитьРезультатПереносаЗаявки(МассивРезультатовВставки);
	
	Если ТребуетсяОбновлениеПоляКалендаря Тогда
		ИмяЭлементаПеретаскивания = Неопределено;
		СтрокаОтправитель = Неопределено;
		АктивныйДокумент = Заявка;
		ЗапуститьЗаполнение(Истина, Ложь);
	Иначе
		Элементы.ЗаявкиКОплате.Обновить();
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеСчетаПеретаскивания(МассивЗаявок, ВВидеМассива = Истина)
	
	ЭтоЗаявка = Истина;
	Для каждого Заявка из МассивЗаявок Цикл
		Если ТипЗнч(Заявка) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			ЭтоЗаявка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоЗаявка Тогда
		Реквизиты = "Ссылка, Организация, Валюта,
			|БанковскийСчетКонтрагента,
			|ПланированиеСуммы, ФормаОплатыЗаявки,
			|ХозяйственнаяОперация";
	Иначе
		Реквизиты = "Ссылка, Организация, Валюта";
	КонецЕсли;
	
	ТаблицаФильтра = Новый ТаблицаЗначений;
	ТаблицаФильтра.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
	ТаблицаФильтра.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаФильтра.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаявок, Реквизиты);
	МассивСчетовКонтрагентов = Новый Массив;
	Если ЭтоЗаявка Тогда
		Для Каждого КлючиИЗначение из ЗначенияРеквизитов Цикл
			МассивСчетовКонтрагентов.Добавить(КлючиИЗначение.Значение.БанковскийСчетКонтрагента);
		КонецЦикла;
	КонецЕсли;
	
	ВалютыБанковскихСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСчетовКонтрагентов, "ВалютаДенежныхСредств");
	
	Для Каждого КлючиИЗначение из ЗначенияРеквизитов Цикл
		Валюта = Неопределено;
		
		Если ЭтоЗаявка Тогда
			Если ЗначениеЗаполнено(КлючиИЗначение.Значение.БанковскийСчетКонтрагента)
				И КлючиИЗначение.Значение.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
				Валюта = ВалютыБанковскихСчетов[КлючиИЗначение.Значение.БанковскийСчетКонтрагента].ВалютаДенежныхСредств;
			ИначеЕсли КлючиИЗначение.Значение.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
				Валюта = КлючиИЗначение.Значение.Валюта;
			КонецЕсли;
		Иначе
			Валюта = КлючиИЗначение.Значение.Валюта;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаФильтра.Добавить();
		НоваяСтрока.Ссылка = КлючиИЗначение.Значение.Ссылка;
		НоваяСтрока.Организация = КлючиИЗначение.Значение.Организация;
		НоваяСтрока.Валюта = Валюта;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	Таблица.Организация,
		|	Таблица.Валюта
		|ПОМЕСТИТЬ ТаблицаФильтра
		|ИЗ
		|	&ТаблицаФильтра КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетКасса,
		|	БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|	БанковскиеСчетаОрганизаций.Владелец
		|ПОМЕСТИТЬ МестаХраненияДС
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Кассы.Ссылка,
		|	Кассы.ВалютаДенежныхСредств,
		|	Кассы.Владелец
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаХраненияДС.БанковскийСчетКасса,
		|	ТаблицаФильтра.Ссылка
		|ИЗ
		|	МестаХраненияДС КАК МестаХраненияДС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаФильтра КАК ТаблицаФильтра
		|		ПО МестаХраненияДС.Владелец = ТаблицаФильтра.Организация
		|			И (МестаХраненияДС.ВалютаДенежныхСредств = ТаблицаФильтра.Валюта
		|				ИЛИ ТаблицаФильтра.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ТаблицаФильтра", ТаблицаФильтра);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаСчетов = РезультатЗапроса.Выгрузить();
	
	Если ВВидеМассива Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСчетов.ВыгрузитьКолонку("БанковскийСчетКасса"));
	КонецЕсли;
	
	СоответствиеСчетов = Новый Соответствие;
	Для Каждого СтрокаТаблицы из ТаблицаСчетов Цикл
		
		МассивСчетов = СоответствиеСчетов[СтрокаТаблицы.Ссылка];
		Если МассивСчетов = Неопределено Тогда
			МассивСчетов = Новый Массив;
			СоответствиеСчетов.Вставить(СтрокаТаблицы.Ссылка, МассивСчетов);
		КонецЕсли;
		
		МассивСчетов.Добавить(СтрокаТаблицы.БанковскийСчетКасса);
		
	КонецЦикла;
	
	Возврат СоответствиеСчетов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтразитьРезультатПереносаЗаявки(МассивРезультатовВставки)
	Перем СтруктураОтправитель;
	
	СтруктураПоиска = Новый Структура("БанковскийСчетКасса, ДатаПлатежа");
	МассивОтраженияГрупп = Новый Массив;
	Для Каждого СтруктураОтражения из МассивРезультатовВставки Цикл
		
		ЗаявкаОбъект = СтруктураОтражения.Заявка.ПолучитьОбъект();
		
		БылиИзменения = Ложь;
		
		Если СтруктураОтражения.Свойство("Отправитель", СтруктураОтправитель) Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураОтправитель);
			НайденныеСтроки = ЗаявкаОбъект.РаспределениеПоСчетам.НайтиСтроки(СтруктураПоиска);
			Если СтруктураОтправитель.Свойство("Сумма") Тогда
				СуммаУменьшения = СтруктураОтправитель.Сумма;
				Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
					БылиИзменения = Истина;
					СуммаПоСтроке = Мин(СуммаУменьшения, НайденнаяСтрока.Сумма);
					НайденнаяСтрока.Сумма = НайденнаяСтрока.Сумма - СуммаПоСтроке;
					СуммаУменьшения = СуммаУменьшения - СуммаПоСтроке;
					Если Не НайденнаяСтрока.Сумма Тогда
						ЗаявкаОбъект.РаспределениеПоСчетам.Удалить(НайденнаяСтрока);
					КонецЕсли;
					Если Не СуммаУменьшения Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				БылиИзменения = Истина;
				Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
					ЗаявкаОбъект.РаспределениеПоСчетам.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураОтражения.Свойство("Сумма")
			И ЗначениеЗаполнено(СтруктураОтражения.Сумма) Тогда
			
			БылиИзменения = Истина;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураОтражения);
			НайденныеСтроки = ЗаявкаОбъект.РаспределениеПоСчетам.НайтиСтроки(СтруктураПоиска);
			Если Не НайденныеСтроки.Количество() Тогда
				НоваяСтрока = ЗаявкаОбъект.РаспределениеПоСчетам.Добавить();
			Иначе
				НоваяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОтражения);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ЗаявкаОбъект.РаспределениеПоСчетам.Свернуть("ДатаПлатежа, БанковскийСчетКасса", "Сумма");
			КонецЕсли;
			ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
			
		КонецЕсли;
		
		Если БылиИзменения Тогда
			ЗаявкаОбъект.Записать();
		КонецЕсли;
		
		Если СтруктураОтражения.Свойство("Группа") Тогда
			МассивОтраженияГрупп.Добавить(СтруктураОтражения);
			СтруктураОтражения.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", СтруктураОтражения.Заявка);
		КонецЕсли;
		
	КонецЦикла;
	
	ОтразитьНазначениеГруппыЗаявке(МассивОтраженияГрупп);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтразитьНазначениеГруппыЗаявке(МассивЗаявок)
	
	Набор = РегистрыСведений.ГруппыЗаявокПлатежногоКалендаря.СоздатьНаборЗаписей();
	Для Каждого СтруктураЗаявки из МассивЗаявок Цикл
		Набор.Очистить();
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "РегистрСведений.ГруппыЗаявокПлатежногоКалендаря";
		ЭлементБлокировки.УстановитьЗначение("ЗаявкаНаРасходованиеДенежныхСредств",	СтруктураЗаявки.ЗаявкаНаРасходованиеДенежныхСредств);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		Набор.Отбор.ЗаявкаНаРасходованиеДенежныхСредств.Установить(
					СтруктураЗаявки.ЗаявкаНаРасходованиеДенежныхСредств);
		
		Группа = СтруктураЗаявки.Группа;
		
		Если ЗначениеЗаполнено(Группа) Тогда
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтруктураЗаявки);
			Запись.Группа = Группа;
		КонецЕсли;
		
		Набор.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МассивЗначенийПеретаскивания(ПараметрыПеретаскивания)
	
	МассивЗаявок = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(МассивЗаявок) <> Тип("Массив") Тогда
		МассивЗаявок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивЗаявок);
	КонецЕсли;
	
	Возврат МассивЗаявок;
	
КонецФункции

&НаКлиенте
Функция СтрокаКурсаПодходит(Дата, Валюта, СтрокаКурса, ТекущаяСтрокаКурса)
	
	Если Валюта <> СтрокаКурса.Валюта Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РазностьДней = (Дата - СтрокаКурса.Период);
	
	Если РазностьДней < 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущаяСтрокаКурса <> Неопределено Тогда
		ПредыдущаяРазность = (Дата - ТекущаяСтрокаКурса.Период);
		
		Если ПредыдущаяРазность < РазностьДней Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьПараметрыСтрокиПоЗаявке(СтрокаЗаявки, КолонкаТаблицы, Заявка, СоответствиеРеквизитовЗаявки, 
																МассивРезультатовВставки, СтруктураОтправитель)
	
	Реквизиты = СоответствиеРеквизитовЗаявки[Заявка];
	
	СтрокаБанковскогоСчета = ПлатежныйКалендарьКлиентСервер.СтрокаБанковскогоСчета(ДеревоПлатежей, СтрокаЗаявки.ПолучитьИдентификатор());
	ДатаПлатежа = ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Число(СтрЗаменить(КолонкаТаблицы, "День", "")));
	
	ВалютаЗаявки = Реквизиты.Валюта;
	ВалютаБанковскогоСчета = СтрокаБанковскогоСчета.Валюта;
	
	Сумма = -Реквизиты.СуммаДокумента;
	
	Если ЗначениеЗаполнено(ВалютаБанковскогоСчета) И ВалютаЗаявки <> ВалютаБанковскогоСчета Тогда
		КурсыВалют = СоответствиеРеквизитовЗаявки["КурсыВалют"];
		ПараметрыКурсаЗаявки = Неопределено;
		ПараметрыКурсаСчета = Неопределено;
		Для Каждого СтрокаКурса из КурсыВалют Цикл
			Если СтрокаКурсаПодходит(ДатаПлатежа, ВалютаЗаявки, СтрокаКурса, ПараметрыКурсаЗаявки) Тогда
				ПараметрыКурсаЗаявки = СтрокаКурса;
			КонецЕсли;
			Если СтрокаКурсаПодходит(ДатаПлатежа, ВалютаБанковскогоСчета, СтрокаКурса, ПараметрыКурсаСчета) Тогда
				ПараметрыКурсаСчета = СтрокаКурса;
			КонецЕсли;
		КонецЦикла;
		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма, ПараметрыКурсаЗаявки, ПараметрыКурсаСчета);
	КонецЕсли;
	
	РеквизитыПредставления = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Реквизиты);
    РеквизитыПредставления.СуммаДокумента = -Сумма;
	Представление = ПлатежныйКалендарьКлиентСервер.ПредставлениеДокумента(Заявка, РеквизитыПредставления, 
														Объект.ОтражатьОтрицательныеСуммы, Объект.ОтображениеСумм);
	
	СтрокаЗаявки[КолонкаТаблицы + "Значение"] = Заявка;
	СтрокаЗаявки[КолонкаТаблицы + "Представление"] = Представление;
    СтрокаЗаявки[КолонкаТаблицы + "Сумма"] = -Сумма;    
	
	СтруктураРезультатВставки = Новый Структура;
	СтруктураРезультатВставки.Вставить("Заявка", Заявка);
	СтруктураРезультатВставки.Вставить("БанковскийСчетКасса", СтрокаБанковскогоСчета.ЗначениеГруппировки);
	СтруктураРезультатВставки.Вставить("ДатаПлатежа", ДатаПлатежа);
	
	СтруктураРезультатВставки.Вставить("Сумма", -Реквизиты.СуммаДокумента);
	Если Объект.ТекущаяГруппировка = "Произвольная" Тогда
		СтруктураРезультатВставки.Вставить("Группа", СтрокаЗаявки.ЗначениеГруппировки);
		СтруктураРезультатВставки.Вставить("ПорядокВПлатежномКалендаре", СтрокаЗаявки.ПолучитьРодителя().ПолучитьЭлементы().Индекс(СтрокаЗаявки));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтправитель) Тогда
		СтруктураРезультатВставки.Вставить("Отправитель", СтруктураОтправитель);
	КонецЕсли;
	
	МассивРезультатовВставки.Добавить(СтруктураРезультатВставки);
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Функция МассивДокументовКСозданиюЗаявок(МассивЗаявок)
	
	ЭлементыКСозданиюЗаявок = Новый Массив;
	Для Каждого Документ из МассивЗаявок Цикл
		Если ТипЗнч(Документ) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			ЭлементыКСозданиюЗаявок.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭлементыКСозданиюЗаявок;
	
КонецФункции

#КонецОбласти

#Область Календарь_Формирование

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьЗаполнение(АктивныйДокументУстановлен, ИзмененыРеквизиты)
	
	Если ЗаполнениеВыполняется = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	Если Не АктивныйДокументУстановлен Тогда
		Если Элементы.ДеревоПлатежей.ТекущийЭлемент <> Неопределено Тогда
			ИмяДня = ИмяДня(Элементы.ДеревоПлатежей.ТекущийЭлемент.Имя);
			Если Элементы.ДеревоПлатежей.ТекущиеДанные <> Неопределено Тогда
				Если ИмяДня <> Неопределено Тогда
					АктивныйДокумент = Элементы.ДеревоПлатежей.ТекущиеДанные[ИмяДня + "Значение"];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененыРеквизиты Тогда
		ОбновитьКалендарьНаСервереПриИзмененииРеквизитов();
	Иначе
		Если РежимОтображения <> "СписокЗаявок" Тогда
			ЗапуститьЗаполнениеНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1);
	ЗаполнениеВыполняется = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКалендарьНаСервереПриИзмененииРеквизитов()
	
	УдалитьИзВременногоХранилища(АдресПараметровМакета);
	
	УстановитьОтборСписка();
	УстановитьУсловноеОформлениеФормы();
	
	Если РежимОтображения <> "СписокЗаявок" Тогда
		ЗапуститьЗаполнениеНаСервере();
	КонецЕсли;
	
	Элементы.ЗаявкиКОплате.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаполнениеВыполняется = Ложь;
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		Возврат;
	КонецЕсли;
		
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() ИЛИ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		
		ЗагрузитьРезультатыРасчетов();
		
		Элементы.ГруппаПанельПлатежей.ТекущаяСтраница = Элементы.ГруппаДеревоПлатежей;
		АктивироватьДокумент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьЗаполнениеНаСервере()
	
	Элементы.ГруппаПанельПлатежей.ТекущаяСтраница = Элементы.ГруппаЗаполнение;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = Неопределено;
	
	НаименованиеЗадания = НСтр("ru='Расчет данных платежного календаря';uk='Розрахунок даних платіжного календаря'");
	
	СохраненныеМакеты = ПолучитьИзВременногоХранилища(АдресПараметровМакета);
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		Обработки.ПлатежныйКалендарь.РассчитатьДанныеКалендаря(ПараметрыРасчетаКалендаря(), АдресХранилища, СохраненныеМакеты, АдресПараметровМакета);
		ИдентификаторЗадания = Новый УникальныйИдентификатор;
	Иначе
		ПараметрыЭкспортнойПроцедуры = Новый Массив;
		ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыРасчетаКалендаря());
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
		ПараметрыЭкспортнойПроцедуры.Добавить(СохраненныеМакеты);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресПараметровМакета);
		
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(
								"Обработки.ПлатежныйКалендарь.РассчитатьДанныеКалендаря",
								ПараметрыЭкспортнойПроцедуры,, НаименованиеЗадания);
		ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКолонкиДней()
	
	ПодчиненныхЭлементов = ЭтаФорма.ПолучитьРеквизиты("ДеревоПлатежей").Количество();
	
	ВсегоКолонок = ПодчиненныхЭлементов - ЭлементовДереваБезДобавленныхДней;
	ВсегоКолонок = ВсегоКолонок / 3;
	
	ЭлементыКУдалению = Новый Массив;
	РеквизитыКДобавлению = Новый Массив;
	
	Пока ВсегоКолонок > Объект.ДнейПланирования Цикл
		
		ЭлементыКУдалению.Добавить("ДеревоПлатежей.День" + ВсегоКолонок + "Представление");
		ЭлементыКУдалению.Добавить("ДеревоПлатежей.День" + ВсегоКолонок + "Значение");
		ЭлементыКУдалению.Добавить("ДеревоПлатежей.День" + ВсегоКолонок + "Сумма");
		
		ВсегоКолонок = ВсегоКолонок - 1;
		
	КонецЦикла;
	
	Для Сч = ВсегоКолонок + 1 по Объект.ДнейПланирования Цикл
		
		РеквизитФормы = Новый РеквизитФормы("День" + Сч + "Представление", 
							Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаСтрока(1000), "Число"), "ДеревоПлатежей");
		РеквизитыКДобавлению.Добавить(РеквизитФормы);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТипов, Справочники.ТипВсеСсылки().Типы());
		
		РеквизитФормы = Новый РеквизитФормы("День" + Сч + "Значение", 
							Новый ОписаниеТипов(Документы.ТипВсеСсылки(), МассивТипов), "ДеревоПлатежей");
		РеквизитыКДобавлению.Добавить(РеквизитФормы);
		
		РеквизитФормы = Новый РеквизитФормы("День" + Сч + "Сумма", 
							ОбщегоНазначения.ОписаниеТипаЧисло(15, 2), "ДеревоПлатежей");
		РеквизитыКДобавлению.Добавить(РеквизитФормы);
		
	КонецЦикла;
	
	Для Каждого ЭлементКУдалению из ЭлементыКУдалению Цикл
		Если Не Найти(ЭлементКУдалению, "Представление") Тогда
			Продолжить;
		КонецЕсли;
		Элементы.Удалить(Элементы[СтрЗаменить(ЭлементКУдалению, ".", "")]);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(РеквизитыКДобавлению, ЭлементыКУдалению);
	
	Для Каждого РеквизитКДобавлению из РеквизитыКДобавлению Цикл
		Если Не Найти(РеквизитКДобавлению.Имя, "Представление") Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Элементы.Добавить("ДеревоПлатежей" + РеквизитКДобавлению.Имя, Тип("ПолеФормы"), Элементы.ДеревоПлатежей);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.ПутьКДанным = "ДеревоПлатежей." + РеквизитКДобавлению.Имя;
		НовыйЭлемент.Ширина = 6;
		НовыйЭлемент.АвтоВысотаЯчейки = Истина;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	КонецЦикла;
	
	Для Сч = 1 по Объект.ДнейПланирования Цикл
		ДатаЗаголовка = ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, Сч);
		Элементы["ДеревоПлатежейДень" + Сч + "Представление"].Заголовок = Формат(ДатаЗаголовка, "ДФ=dd.MM.yy");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатыРасчетов()
	
	ИдентификаторЗадания = Неопределено;
	
	СтруктураРезультата = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		Если СтруктураРезультата.Свойство("Результат") Тогда
			ЗначениеВРеквизитФормы(СтруктураРезультата.Результат, "ДеревоПлатежей");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьДокумент()
	
	Если Не ЗначениеЗаполнено(АктивныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 1 по Объект.ДнейПланирования Цикл
		
		НайденнаяСтрока = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоПлатежей, "День" + Сч + "Значение", АктивныйДокумент);
		Если НайденнаяСтрока <> Неопределено Тогда
			Элементы.ДеревоПлатежей.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			Элементы.ДеревоПлатежей.ТекущийЭлемент = Элементы["ДеревоПлатежейДень" + Сч + "Представление"];
			СтрокаРодителя = НайденнаяСтрока;
			Пока СтрокаРодителя <> Неопределено Цикл
				ИдентификаторРодителя = СтрокаРодителя.ПолучитьИдентификатор();
				Если Не Элементы.ДеревоПлатежей.Развернут(ИдентификаторРодителя) Тогда
					Элементы.ДеревоПлатежей.Развернуть(ИдентификаторРодителя);
				КонецЕсли;
				СтрокаРодителя = СтрокаРодителя.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьЗаявкиНаСервере()
	
	СКД = Элементы.ЗаявкиКОплате.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.ЗаявкиКОплате.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	Настройки.Структура.Очистить();
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	СписокЗаявок = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Настройки);
	Массив = СписокЗаявок.ВыгрузитьКолонку("Ссылка");
	
	РаспределитьМассивЗаявок(Массив);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьМассивЗаявок(МассивЗаявок)
	
	СтруктураМакетов = ПолучитьИзВременногоХранилища(АдресПараметровМакета);
	Обработки.ПлатежныйКалендарь.РаспределитьЗаявкиПоСчетам(ПараметрыРасчетаКалендаря(), МассивЗаявок, СтруктураМакетов);
	
	ОбновитьКалендарьНаСервереПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРаспределениеВыделенныхЗаявокНаСервере(МассивЗаявок)
	
	Для Каждого Заявка из МассивЗаявок Цикл
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.РаспределениеПоСчетам.Очистить();
		ЗаявкаОбъект.Записать();
	КонецЦикла;
	
	ОбновитьКалендарьНаСервереПриИзмененииРеквизитов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


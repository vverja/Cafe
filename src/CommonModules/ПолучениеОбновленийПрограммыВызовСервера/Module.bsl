
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение обновлений программы".
// ОбщийМодуль.ПолучениеОбновленийПрограммыВызовСервера.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция НачатьПроверкуНаличияОбновления() Экспорт
	
	Если НЕ ПолучениеОбновленийПрограммы.ДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			"ПолучениеОбновленийПрограммы.ПроверитьНаличиеОбновленияВФоновомРежиме",
			,
			,
			НСтр("ru='Проверка наличия обновлений';uk='Перевірка наявності оновлень'"));
	Исключение
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка фоновой проверки наличия обновлений. Не удалось выполнить фоновое задание. %1';uk='Помилка фонової перевірки наявності оновлень. Не вдалося виконати фонове завдання. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ФоновоеЗадание.УникальныйИдентификатор;
	
КонецФункции

Функция РезультатЗаданияПроверкиНаличияОбновлений(Знач ИДЗадания) Экспорт
	
	Попытка
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИДЗадания);
	Исключение
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Фоновая проверка наличия обновлений. Ошибка при обращении к заданию. %1';uk='Фонова перевірка наявності оновлень. Помилка при зверненні до завдання. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат -1;
	КонецПопытки;
	
	Если Задание = Неопределено Тогда
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Фоновая проверка наличия обновлений. Задание с указанным идентификатором не найдено.';uk='Фонова перевірка наявності оновлень. Завдання з вказаним ідентифікатором не знайдено.'"));
		Возврат -1;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Неопределено;
		
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		
		ОписательСостояния = ДлительныеОперации.ПрочитатьПрогресс(ИДЗадания);
		Попытка
			Возврат ОписательСостояния.ДополнительныеПараметры.ДопПараметры;
		Исключение
			ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Фоновая проверка наличия обновлений. Ошибка при получении результата выполнения задания. %1';uk='Фонова перевірка наявності оновлень. Помилка при отриманні результату виконання завдання. %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			Возврат -1;
		КонецПопытки;
		
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Фоновая проверка наличия обновлений. Задание завершено аварийно. %1';uk='Фонова перевірка наявності оновлень. Завдання завершено аварійно. %1'"),
				ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
		Возврат -1;
		
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Фоновая проверка наличия обновлений. Задание отменено администратором.';uk='Фонова перевірка наявності оновлень. Завдання скасовано адміністратором.'"));
		Возврат -1;
		
	КонецЕсли;
	
КонецФункции

Функция НастройкиОбновления() Экспорт
	
	Возврат ПолучениеОбновленийПрограммы.НастройкиАвтоматическогоОбновления();
	
КонецФункции

Процедура ЗаписатьНастройкиОбновления(Знач Настройки) Экспорт
	
	ПолучениеОбновленийПрограммы.ЗаписатьНастройкиАвтоматическогоОбновления(Настройки);
	
КонецПроцедуры

Функция ЭтоСеансВнешнегоПользователя() Экспорт
	
	Возврат ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	
КонецФункции

Функция ДоступноИспользованиеПолученияОбновленийПлатформы() Экспорт
	
	Возврат ПолучениеОбновленийПрограммы.ДоступноИспользованиеПолученияОбновленийПлатформы();
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач СообщениеОбОшибке) Экспорт
	
	ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
		СообщениеОбОшибке);
	
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейс

// Возвращает истину в том случае, если есть активное фоновое задание
// закрытия месяца.
Функция ФоновоеЗаданиеЗакрытияМесяцаАктивно() Экспорт
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", ИмяФоновогоЗадания());
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	ЕстьАктивноеЗадание = ?(АктивныеЗадания.Количество() > 0, Истина, Ложь);
	Возврат ЕстьАктивноеЗадание;
КонецФункции

// Выполняет закрытие месяца в фоновом задании.
Функция РассчитатьВФоновомЗадании(ПараметрыЗадания) Экспорт
	
	Если АктивноЗаданиеЗакрытияМесяца()
		ИЛИ РаспределениеВзаиморасчетов.АктивноФоновоеЗаданиеВзаиморасчетов()
		ИЛИ ПартионныйУчет.ФоновоеЗаданиеАктивно() Тогда
		ЗапускУспешен = Ложь;
		Возврат ЗапускУспешен;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru='Выполняется закрытие месяца';uk='Виконується закриття місяця'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗадания);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("ЗакрытиеМесяцаУТВызовСервера.РассчитатьЭтапы");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Ключ = ИмяФоновогоЗадания();
	
	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
	ЗапускУспешен = Истина;
	Возврат ЗапускУспешен;
КонецФункции

// Производит расчет этапов закрытия месяца на сервере.
// Выполняется в фоновом задании. Вызывается из метода РассчитатьФоновымЗаданием().
//
//	Параметры:
//		ПараметрыРасчета - Структура - Содержит в себе имена этапов к расчету и параметры расчета.
Процедура РассчитатьЭтапы(ПараметрыРасчета) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	НачалоРасчета = ТекущаяДата();
	СостоянияЭтапов = Неопределено;
	ОперацииЗакрытияМесяца = Обработки.ОперацииЗакрытияМесяца.Создать();
	ЭтапыКРасчету = ПолучитьЭтапыКРасчету(ПараметрыРасчета);
	Если НЕ ПараметрыРасчета.Свойство("СписокПодразделений") Тогда
		ПараметрыРасчета.Вставить("СписокПодразделений", СписокПодразделений());
	КонецЕсли;
	Если НЕ ПараметрыРасчета.Свойство("СостоянияЭтапов", СостоянияЭтапов) Тогда
		СостоянияЭтапов = СостоянияЭтапов(ПараметрыРасчета);
	КонецЕсли;
	
	Счетчик = 1;
	Граница = ЭтапыКРасчету.Количество();
	Для Каждого Этап Из ЭтапыКРасчету Цикл
		// если это первый этап, то его финальный статус уже известен
		Если Счетчик > 1 Тогда
			Состояние = ОперацииЗакрытияМесяца.СостояниеЭтапа(СостоянияЭтапов, ПараметрыРасчета, Этап);
			СостоянияЭтапов.Вставить(Этап, Состояние);
		КонецЕсли;
		Если Счетчик = Граница ИЛИ ( // конечный этап рассчитывается в любом случае.
				СостоянияЭтапов[Этап] <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
				И СостоянияЭтапов[Этап] <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
				И СостоянияЭтапов[Этап] <> Неопределено // этап уже рассчитан, повторный пересчет не нужен.
			)
		Тогда
			РассчитатьЭтап(Этап, Отказ, ПараметрыРасчета);
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	КонецРасчета = ТекущаяДата();
	РезультатРасчета = Новый Структура("РасчитанЭтап, Отказ, НачалоРасчета, КонецРасчета", Этап, Отказ, НачалоРасчета, КонецРасчета);
	ПараметрыРасчета.Вставить("Отказ", Отказ);
	ПоместитьВоВременноеХранилище(РезультатРасчета, ПараметрыРасчета.АдресХранилища);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Функция формирует текст запроса для определения состояния отражения документов в регл.учете.
//
// Параметры:
// УчитыватьНДС - Булево - признак проверки необходимости отразить движения по НДС
//
// Возвращаемое значение:
// Строка - ТекстЗапроса
//
Функция ТекстЗапросаСостояниеОтраженияДокументов(УчитыватьНДС = Истина) Экспорт
	
	ТекстЗапроса =
	"
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОкончания,
	|	1 КАК Количество
	|ГДЕ
	|	ЛОЖЬ
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	(
	|	) КАК ДанныеРегистра
	|	
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
	|	1 КАК Количество
	|ГДЕ
	|	ЛОЖЬ
	|
	|";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&УчитыватьНДС", ?(УчитыватьНДС, "ИСТИНА", "ЛОЖЬ"));
	
КонецФункции

// Получает состояние расчета себестоимости
//
// Параметры:
//  СписокДоступныхОрганизаций  - <массив>, <СправочникСсылка.Организации> - Организации по которым необходимо получить состояние расчета себестоимости
//  ПериодРегистрации  - <Дата> - дата месяца в котором необходимо определить состояние расчета себестоимости
//
// Возвращаемое значение:
//   <Перечисления.СостоянияОперацийЗакрытияМесяца> - одно из состояний расчета себестоимости по организации
//
Функция СостояниеРасчетаСебестоимости(СписокДоступныхОрганизаций, ПериодРегистрации) Экспорт
	
	Возврат РасчетСебестоимости.СостояниеРасчетаСебестоимости(СписокДоступныхОрганизаций, ПериодРегистрации);
	
КонецФункции

// Проверяет статус указанного фонового задания.
// 
// Параметры:
//  КлючЗадания - Строка - Ключ фонового задания.
// Возвращаемое значение: 
//  Структура - Содержит статусы проверяемого фонового задания
Функция ПроверитьФоновоеЗадание(Знач КлючЗадания) Экспорт
	Результат = Новый Структура("ОтмененоИлиНеНайдено, УспешноВыполнено, ЕщеВыполняется, ВыполненоСОшибками, ТекстОшибки, Начало, Конец",
		Ложь, Ложь, Ложь, Ложь, "", "", "");
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() = 0 Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.ЕщеВыполняется = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.УспешноВыполнено = Истина;
		Результат.Начало = АктивныеЗадания[0].Начало;
		Результат.Конец = АктивныеЗадания[0].Конец;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ВыполненоСОшибками = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(АктивныеЗадания[0].ИнформацияОбОшибке);
		Результат.Начало = АктивныеЗадания[0].Начало;
		Результат.Конец = АктивныеЗадания[0].Конец;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает статус фонового задания по закрытию месяца
Функция СостояниеЗаданияЗакрытияМесяца() Экспорт
	ИмяФоновогоЗадания = ИмяФоновогоЗадания();
	Возврат ПроверитьФоновоеЗадание(ИмяФоновогоЗадания);
КонецФункции

// Возвращает признак активности фонового задания закрытия месяца.
//	ВозвращаемоеЗначение:
//		Булево - Истина/Ложь в зависимости от того, активно фоновое задание закрытие месяца или нет.
Функция АктивноЗаданиеЗакрытияМесяца() Экспорт
	Результат = ЗакрытиеМесяцаУТВызовСервера.СостояниеЗаданияЗакрытияМесяца();
	Возврат ?(Результат.ЕщеВыполняется = Истина, Истина, Ложь);
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
// 
// Параметры:
//  КлючЗадания - Строка - Ключ фонового задания. 
// 
Процедура ОтменитьВыполнениеЗадания(Знач КлючЗадания) Экспорт 
	
	Если Не ЗначениеЗаполнено(КлючЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() = 0
		ИЛИ АктивныеЗадания[0].Состояние <> СостояниеФоновогоЗадания.Активно
	Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегламентныеЗаданияСлужебный.ОтменитьФоновоеЗадание(АктивныеЗадания[0].УникальныйИдентификатор);
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет.
		ЗаписьЖурналаРегистрации(
			НСтр("ru='ЗакрытиеМесяца.Отмена выполнения фонового задания';uk='ЗакрытиеМесяца.Скасування виконання фонового завдання'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ЗакрытиеМесяцаУТВызовСервера,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
Функция НачалоРасчета(ОперацияРасчета, КонецРасчета, НомерЗадания = Неопределено, СписокОрганизаций = Неопределено) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецРасчета
	|	И Задания.Операция = &ОперацияРасчета
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Задания.Месяц) ЕСТЬ NULL)
	|");
	
	Запрос.УстановитьПараметр("КонецРасчета", КонецРасчета);
	Запрос.УстановитьПараметр("ОперацияРасчета", ОперацияРасчета);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(СписокОрганизаций));
	Если Не ЗначениеЗаполнено(НомерЗадания) Тогда
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	Иначе
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.НачалоРасчета, КонецМесяца(КонецРасчета) + 1);
КонецФункции

// Функция формирует тексты запросов для получения таблицы изменений набора записей регистра накопления при его записи.
// Запросы составляются на основании метаданных регистра: измерений, ресурсов и реквизитов.
//
// Параметры:
//	МетаданныеРегистра - ОбъектМетаданных: РегистрНакопления - метаданные регистра, для которого составляется таблица изменений;
//
// Возвращаемое значение:
//	Структура
//		- ТекстВыборкиНачальныхДанных - Строка - запрос для выполнения в событии "ПередЗаписью" набора данных регистра накопления.
//			Формирует текущие записи регистра и сохраняет их во временную таблицу "НачальныеЗаписи";
//		- ТекстВыборкиТаблицыИзменений - Строка - запрос для получения итоговой таблицы изменений. Выполняется в событии "ПриЗаписи".
//			Составляется объединением таблицы НачальныеЗаписи и новой таблицы записей регистра. Выводятся только записи, по которым есть разницы (Сумма ресурсов не равна 0).
//
Функция ТекстыЗапросовДляПолученияТаблицыИзмененийРегистраНакопления(МетаданныеРегистра) Экспорт
	
	ТекстЗапросаВыборкиНачальныхЗаписей =
	"ВЫБРАТЬ
	|	Записи.Период КАК Период,
	|	Записи.Регистратор КАК Регистратор,
	|	&ВыборкаПолей
	|ПОМЕСТИТЬ #НачальныеЗаписи
	|ИЗ
	|	#ТаблицаРегистра КАК Записи
	|ГДЕ
	|	Записи.Регистратор = &Регистратор";
	
	ТекстЗапросаВыборкиИзменений =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Период,
	|	Таблица.Регистратор,
	|	&ВыборкаПолейТаблицыИзменений
	|ПОМЕСТИТЬ #ТаблицаИзменений
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальныеЗаписи.Период КАК Период,
	|		НачальныеЗаписи.Регистратор КАК Регистратор,
	|		&ВыборкаПолейНачальныхЗаписей
	|	ИЗ
	|		#НачальныеЗаписи КАК НачальныеЗаписи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Записи.Период КАК Период,
	|		Записи.Регистратор КАК Регистратор,
	|		&ВыборкаПолейНовыхЗаписей
	|	ИЗ
	|		#ТаблицаРегистра КАК Записи
	|	ГДЕ
	|		Записи.Регистратор = &Регистратор) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Период,
	|	Таблица.Регистратор";
	
	ВыборкаПолей = Новый Массив;
	ВыборкаПолейТаблицыИзменений = Новый Массив;
	ВыборкаПолейНачальныхЗаписей = Новый Массив;
	ВыборкаПолейНовыхЗаписей = Новый Массив;
	ВыборкаПолейГруппировки = Новый Массив;
	ВыборкаПолейФильтра = Новый Массив;
	
	Для каждого ИзмерениеРегистра из МетаданныеРегистра.Измерения Цикл
		
		ТекстПоля = "." + ИзмерениеРегистра.Имя + " КАК " + ИзмерениеРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + ИзмерениеРегистра.Имя);
		
	КонецЦикла;
	
	Для каждого РесурсРегистра из МетаданныеРегистра.Ресурсы Цикл
		
		ТекстПоля = "." + РесурсРегистра.Имя + " КАК " + РесурсРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица." + РесурсРегистра.Имя + ") КАК " + РесурсРегистра.Имя); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи"+ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("-Записи"+ТекстПоля);
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица." + РесурсРегистра.Имя + ") <> 0");
		
	КонецЦикла;
	
	Для каждого РеквизитРегистра из МетаданныеРегистра.Реквизиты Цикл
		
		ТекстПоля = "." + РеквизитРегистра.Имя + " КАК " + РеквизитРегистра.Имя;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + РеквизитРегистра.Имя);
		
	КонецЦикла;
	
	ТекстВыборкиПолей = СтрСоединить(ВыборкаПолей, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейТаблицыИзменений = СтрСоединить(ВыборкаПолейТаблицыИзменений, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейНачальныхЗаписей = СтрСоединить(ВыборкаПолейНачальныхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейНовыхЗаписей = СтрСоединить(ВыборкаПолейНовыхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейГруппировки = СтрСоединить(ВыборкаПолейГруппировки, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейФильтра = СтрСоединить(ВыборкаПолейФильтра, Символы.ПС + Символы.Таб + "ИЛИ ");
	
	
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаПолей", ТекстВыборкиПолей);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#ТаблицаРегистра", МетаданныеРегистра.ПолноеИмя());
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНачальныхЗаписей", ТекстВыборкиПолейНачальныхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНовыхЗаписей", ТекстВыборкиПолейНовыхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейТаблицыИзменений", ТекстВыборкиПолейТаблицыИзменений);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаРегистра", МетаданныеРегистра.ПолноеИмя());
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаИзменений", "ТаблицаИзменений"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + "," + Символы.ПС + Символы.Таб + ТекстВыборкиПолейГруппировки;
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + "ИМЕЮЩИЕ" + Символы.ПС + Символы.Таб + ТекстВыборкиПолейФильтра;
	
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #НачальныеЗаписи";
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	
	Возврат Новый Структура("ТекстВыборкиНачальныхДанных, ТекстВыборкиТаблицыИзменений", ТекстЗапросаВыборкиНачальныхЗаписей, ТекстЗапросаВыборкиИзменений);
	
КонецФункции

#Область ПодпискиНаСобытия
// Вызывается из подписки на события ПередЗаписьюКурсовВалют
Процедура СчитатьКурсыВалютПередЗаписью(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка исключена специально, поскольку данный механизм отрабатывает
	// при получении данных в РИБ.
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Курсы.Период    КАК Период,
	|	Курсы.Валюта    КАК Валюта,
	|	Курсы.Курс      КАК Курс,
	|	Курсы.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалютПередЗаписью
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК Курсы
	|ГДЕ
	|	Курсы.Период = &Период
	|");
	
	ДопСвойства = ДополнительныеСвойства.ДополнительныеСвойства;
	ДопСвойства.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	Запрос.МенеджерВременныхТаблиц = ДопСвойства.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ДополнительныеСвойства.Отбор.Период.Значение);
	
	Запрос.Выполнить();
КонецПроцедуры

// Вызывается из подписки на события ПроверитьНеобходимостьПереоценки
// Если изменены курсы валют, то необходимо переоценить денежные и валютные средства,
// и пересчитать взаиморасчеты.
Процедура ПроверитьНеобходимостьПереоценки(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка исключена специально, поскольку данный механизм отрабатывает
	// при получении данных в РИБ.
    
    УстановитьПривилегированныйРежим(Истина);
    
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.Период КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПереоценкаВалютныхСредств) КАК Операция,
	|	Таблица.Валюта КАК Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Курсы.Период, МЕСЯЦ) КАК Период,
	|		Курсы.Валюта    КАК Валюта,
	|		Курсы.Курс      КАК Курс,
	|		Курсы.Кратность КАК Кратность
	|	ИЗ
	|		РегистрСведений.КурсыВалют КАК Курсы
	|	ГДЕ
	|		Курсы.Период = &Период
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(Курсы.Период, МЕСЯЦ) КАК Период,
	|		Курсы.Валюта     КАК Валюта,
	|		-Курсы.Курс      КАК Курс,
	|		-Курсы.Кратность КАК Кратность
	|	ИЗ
	|		КурсыВалютПередЗаписью КАК Курсы
	|	) КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Период,
	|	Таблица.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Курс) <> 0
	|	ИЛИ СУММА(Таблица.Кратность) <> 0
	|");
	
	ДопСвойства = ДополнительныеСвойства.ДополнительныеСвойства;
	Запрос.МенеджерВременныхТаблиц = ДопСвойства.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ДополнительныеСвойства.Отбор.Период.Значение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат; // курсы не изменились.
	КонецЕсли;
	
	СписокОрганизаций = ВсеОрганизации();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УстановитьБлокировкуОбъекта("Константа.НомерЗаданияКЗакрытиюМесяца");
		УстановитьБлокировкуОбъекта("Константа.НомерЗаданияКРаспределениюРасчетовСКлиентами");
		УстановитьБлокировкуОбъекта("Константа.НомерЗаданияКРаспределениюРасчетовСПоставщиками");
		
		// Установка заданий в РС "Задания к закрытию месяца".
		Для Каждого Организация Из СписокОрганизаций Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.Организация = Организация;
			НаборЗаписей.НомерЗадания = Константы.НомерЗаданияКЗакрытиюМесяца.Получить();
			НаборЗаписей.Записать();
		КонецЦикла;
		
		// Установка заданий в РС "Задания к распределению расчетов с клиентами"
		// и "Задания к распределению расчетов с поставщиками".
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""ЗаданияКРаспределениюРасчетовСКлиентами""      КАК ИмяРегистраЗаданий,
		|	""НомерЗаданияКРаспределениюРасчетовСКлиентами"" КАК ИмяКонстанты,
		|	Клиенты.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
		|	Клиенты.ЗаказКлиента                             КАК ОбъектРасчетов,
		|	&НачалоМесяца                                    КАК Месяц
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Клиенты
		|ГДЕ
		|	Клиенты.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И Клиенты.Валюта = &Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""ЗаданияКРаспределениюРасчетовСПоставщиками""      КАК ИмяРегистраЗаданий,
		|	""НомерЗаданияКРаспределениюРасчетовСПоставщиками"" КАК ИмяКонстанты,
		|	Клиенты.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
		|	Клиенты.ЗаказПоставщику                             КАК ОбъектРасчетов,
		|	&НачалоМесяца                                       КАК Месяц
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Клиенты
		|ГДЕ
		|	Клиенты.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И Клиенты.Валюта = &Валюта
		|";
		
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Выборка.Месяц));
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Выборка.Месяц));
		
		ВыборкаРасчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРасчетов.Следующий() Цикл
			Задания = РегистрыСведений[ВыборкаРасчетов.ИмяРегистраЗаданий].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Задания, ВыборкаРасчетов);
			Задания.НомерЗадания = Константы[ВыборкаРасчетов.ИмяКонстанты].Получить();
			Задания.Записать();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Производится очистка измерения "Документ" по регистрам "Задания..",
// где в текущих записях используется удаляемый документ.
// Вызывается из подписки на события "ОчиститьЗаданияПередУдалениемДокумента",
// выполняется только в главном узле РИБ.
Процедура ОчиститьЗаданияПередУдалениемДокумента(Источник, Отказ) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.ИмяРегистра               КАК ИмяРегистра,
	|	Задания.Месяц                     КАК Месяц,
	|	Задания.День                      КАК День,
	|	Задания.КодОтслеживаемогоРегистра КАК КодОтслеживаемогоРегистра,
	|	Задания.НомерЗадания              КАК НомерЗадания,
	|	Задания.Документ                  КАК Документ,
	|	Задания.Операция                  КАК Операция,
	|	Задания.Организация               КАК Организация,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	Задания.Пропускать                КАК ПропускатьПриЗаписи
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуСебестоимости"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		НЕОПРЕДЕЛЕНО         КАК День,
	|		НЕОПРЕДЕЛЕНО         КАК КодОтслеживаемогоРегистра,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		НЕОПРЕДЕЛЕНО         КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКЗакрытиюМесяца"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		НЕОПРЕДЕЛЕНО         КАК День,
	|		НЕОПРЕДЕЛЕНО         КАК КодОтслеживаемогоРегистра,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		Задания.Операция     КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.Операция = Дубли.Операция
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСКлиентами"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		НЕОПРЕДЕЛЕНО                      КАК День,
	|		НЕОПРЕДЕЛЕНО                      КАК КодОтслеживаемогоРегистра,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		НЕОПРЕДЕЛЕНО                      КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСПоставщиками"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		НЕОПРЕДЕЛЕНО                      КАК День,
	|		НЕОПРЕДЕЛЕНО                      КАК КодОтслеживаемогоРегистра,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		НЕОПРЕДЕЛЕНО                      КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКФормированиюИсходящихНалоговыхДокументов"" КАК ИмяРегистра,
	|		
	|		НЕОПРЕДЕЛЕНО                      КАК Месяц,
	|		Задания.День                      КАК День,
	|		Задания.КодОтслеживаемогоРегистра КАК КодОтслеживаемогоРегистра,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		НЕОПРЕДЕЛЕНО                      КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКФормированиюИсходящихНалоговыхДокументов КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКФормированиюИсходящихНалоговыхДокументов КАК Дубли
	|		ПО Задания.День = Дубли.День
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|			И Задания.КодОтслеживаемогоРегистра = Дубли.КодОтслеживаемогоРегистра
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуНалоговыхОбязательствДополнительно"" КАК ИмяРегистра,
	|		
	|		НЕОПРЕДЕЛЕНО                      КАК Месяц,
	|		Задания.День                      КАК День,
	|		НЕОПРЕДЕЛЕНО                      КАК КодОтслеживаемогоРегистра,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		НЕОПРЕДЕЛЕНО                      КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектРасчетов,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуНалоговыхОбязательствДополнительно КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуНалоговыхОбязательствДополнительно КАК Дубли
	|		ПО Задания.День = Дубли.День
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|	) КАК Задания
	|ИТОГИ ПО
	|	Задания.ИмяРегистра
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	ВыборкаЗаданий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаданий.Следующий() Цикл
		ЗаданияКОчистке = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ЗаданияКОчистке.Отбор.Документ.Установить(Источник.Ссылка);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКОчистке, Истина);
		
		ЗаданияКЗаписи = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ВыборкаЗаписей = ВыборкаЗаданий.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл 
			Если Не ВыборкаЗаписей.ПропускатьПриЗаписи Тогда
				КЗаписи = ЗаданияКЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(КЗаписи, ВыборкаЗаписей);
			КонецЕсли;
		КонецЦикла;
		Попытка
			Если ЗаданияКЗаписи.Количество() <> 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКЗаписи, Ложь);
			КонецЕсли;
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Удаление помеченных объектов';uk='Вилучення відмічених об''єктів'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ЗакрытиеМесяцаУТВызовСервера,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Возвращает имя уникального фонового задания закрытия месяца
Функция ИмяФоновогоЗадания() Экспорт
	Возврат "ЗакрытиеМесяца_" + РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
КонецФункции
#КонецОбласти // ПодпискиНаСобытия

#Область СостоянияЭтапов



#КонецОбласти // СостоянияЭтапов

#Область ЗаданияКЗакрытиюМесяца

// Возвращает текущее значение константы "НомерЗаданияКЗакрытиюМесяца" в целях определения для какого номера задания будет производиться пересчет.
//
// Возвращаемое значение:
//	Число - значение константы "НомерЗаданияКЗакрытиюМесяца". Определяет текущий номер задания для которого будет производиться расчет.
//		Все последующие действия пользователей информационной базы в целях актуализации расчетов будут писаться под более высоким номером задания.
//
Функция ТекущийНомерЗадания() Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКЗакрытиюМесяца");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Блокировка.Заблокировать();
	ТекущийНомер = Константы.НомерЗаданияКЗакрытиюМесяца.Получить();
	ЗафиксироватьТранзакцию();
	
	Возврат ТекущийНомер;
КонецФункции

// Увеличивает на 1 значение константы "НомерЗаданияКЗакрытиюМесяца". Вызывается, когда в информационной базе изменены расчетные данные и в регистр
//	"ЗаданияКЗакрытиюМесяца" записывается необходимость об актуализации какого-либо вида расчета.
//
// Параметры:
//	ТекущийНомер - Число - см. ТекущийНомерЗадания().
//
Процедура УвеличитьНомерЗадания(ТекущийНомер) Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКЗакрытиюМесяца");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Константы.НомерЗаданияКЗакрытиюМесяца.Установить(ТекущийНомер + 1);
	ЗафиксироватьТранзакцию();
КонецПроцедуры

// Фиксирует удачный пересчет данных. Вызывается когда выполнен пересчет данных для очистки записей, указывавших на необходимость пересчета.
//
// Параметры:
//	РассчитанныйПериод - СтандартныйПериод, Дата - дата или период за который произошел пересчет данных;
//	Организация - СправочникСсылка.Организация, Массив - организация или массив организаций для которой (которых) производился пересчет;
//	СледующийМесяц - Дата - указывает месяц на начало которого будет записана необходимость об актуализации данных расчета;
//	ОперацияРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция для которой производился расчет;
//	НомерЗадания - Число - номер задания для которого производился расчет (см. ТекущийНомерЗадания()), если в процессе выполнения пересчета были опять изменены исходные данные,
//						запись об этом изменении была произведена под новым номером задания (см. УвеличитьНомерЗадания())
//
Процедура ЗафиксироватьРасчет(РассчитанныйПериод, Организация, СледующийМесяц, ОперацияРасчета, НомерЗадания) Экспорт
	
	Если ТипЗнч(РассчитанныйПериод) = Тип("Дата") Тогда
		НачалоПериода = НачалоМесяца(РассчитанныйПериод);
		КонецПериода = КонецМесяца(РассчитанныйПериод);
	Иначе
		НачалоПериода = РассчитанныйПериод.ДатаНачала;
		КонецПериода = РассчитанныйПериод.ДатаОкончания;
	КонецЕсли;
	
	СписокОрганизаций = Новый Массив;
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		СписокОрганизаций = Организация;
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос("
	| // сдвиг текущих рассчитаных границ.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Месяц       КАК Месяц,
	|	ДД.Операция    КАК Операция,
	|	ДД.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ДД
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.НомерЗаданияКЗакрытиюМесяца КАК НомерКРасчету
	|	ПО ИСТИНА
	|ГДЕ
	|	ДД.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ДД.Операция = &ОперацияРасчета
	|	И (ДД.Организация В (&СписокОрганизаций)
	|			ИЛИ &ВсеОрганизации)
	|	И ДД.НомерЗадания < НомерКРасчету.Значение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	| // сохранение движений по другим аналитикам или с большим номером задания.
	|ВЫБРАТЬ
	|	ДД.Месяц        КАК Месяц,
	|	ДД.Операция     КАК Операция,
	|	ДД.Организация  КАК Организация,
	|	ДД.НомерЗадания КАК НомерЗадания,
	|	ДД.Документ     КАК Документ
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ДД
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.НомерЗаданияКЗакрытиюМесяца КАК НомерКРасчету
	|	ПО ИСТИНА
	|ГДЕ
	|	ДД.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ДД.Операция = &ОперацияРасчета
	|	И ((ДД.НомерЗадания >= НомерКРасчету.Значение И (ДД.Организация В (&СписокОрганизаций) ИЛИ &ВсеОрганизации))
	|		ИЛИ (НЕ ДД.Организация В (&СписокОрганизаций) И НЕ &ВсеОрганизации)
	|		)
	|");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецПериода);
	Запрос.УстановитьПараметр("ОперацияРасчета", ОперацияРасчета);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ВсеОрганизации", НЕ ЗначениеЗаполнено(Организация));

	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.Операция.Установить(Выборка.Операция);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Записать();
	КонецЦикла;
	
	Задания = Результаты[1].Выгрузить();
	Если Задания.Количество() > 0 Тогда
		Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		Набор.Загрузить(Задания);
		Набор.Записать(Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СледующийМесяц) Тогда
		Если ЗначениеЗаполнено(СписокОрганизаций) Тогда
			Для Каждого Организация Из СписокОрганизаций Цикл
				Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
				Набор.Месяц = НачалоМесяца(СледующийМесяц);
				Набор.Операция = ОперацияРасчета;
				Набор.НомерЗадания = НомерЗадания;
				Набор.Организация = Организация;
				Набор.Записать();
			КонецЦикла;
		Иначе
				Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
				Набор.Месяц = НачалоМесяца(СледующийМесяц);
				Набор.Операция = ОперацияРасчета;
				Набор.НомерЗадания = НомерЗадания;
				Набор.Организация = Неопределено;
				Набор.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // ЗаданияКЗакрытиюМесяца

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьБлокировкуОбъекта(ИмяОбъекта)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ИмяОбъекта);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
КонецПроцедуры

Функция СписокПодразделений()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ВсеОрганизации()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Спр
	|");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ПолучитьЭтапыКРасчету(ПараметрыРасчета)
	Если ПараметрыРасчета.Свойство("ЭтапыКРасчету") Тогда
		ЭтапыКРасчету = ПараметрыРасчета.ЭтапыКРасчету
	Иначе
		// это обработка тестирование и регламентное задание
		// получаем все этапы, которые можно рассчитать.
		ЭтапыКРасчету = ВсеАктивныеЭтапы();
	КонецЕсли;
	Возврат ЭтапыКРасчету;
КонецФункции

Функция ВсеАктивныеЭтапы()
	ОперацииЗакрытияМесяца = Обработки.ОперацииЗакрытияМесяца.Создать();
	ВсеАктивныеЭтапы = ОбщегоНазначенияКлиентСервер.СократитьМассив(ОперацииЗакрытияМесяца.ЭтапыКРасчету(), ОперацииЗакрытияМесяца.ОтключенныеЭтапы());	
	Возврат ВсеАктивныеЭтапы;
КонецФункции

Функция СостоянияЭтапов(ПараметрыРасчета)
	СостоянияЭтапов = Новый Структура;
	ОперацииЗакрытияМесяца = Обработки.ОперацииЗакрытияМесяца.Создать();
	ЭтапыКРасчету = ВсеАктивныеЭтапы();
	Для Каждого Этап Из ЭтапыКРасчету Цикл
		Состояние = ОперацииЗакрытияМесяца.СостояниеЭтапа(СостоянияЭтапов, ПараметрыРасчета, Этап);
		СостоянияЭтапов.Вставить(Этап, Состояние);
	КонецЦикла;
	Возврат СостоянияЭтапов;
КонецФункции

Процедура РассчитатьЭтап(ИмяЭтапаРасчета, Отказ = Ложь, ПараметрыРасчета)
	Если ИмяЭтапаРасчета = "РасчетыСПартнерами" Тогда
		РасчетыСПартнерами(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "АннулированиеПодарочныхСертификатов" Тогда
		АннулированиеПодарочныхСертификатов(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПартииТоваров" Тогда
		РасчетПартийТоваров(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "Себестоимость" Тогда
		РасчетСебестоимости(Отказ, ПараметрыРасчета)
	ИначеЕсли ИмяЭтапаРасчета = "ПереоценкаДенежныхСредств" Тогда
		ПереоценкаДенежныхСредств(Отказ, ПараметрыРасчета)
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеДоходовРасходов" Тогда
		РаспределениеДоходовИРасходовПоНаправлениям(Отказ, ПараметрыРасчета)
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиЭтапов

Процедура РасчетыСПартнерами(Отказ, ПараметрыРасчета)
	Попытка
		ПоляОтбора = Новый Структура("Организация, Партнер, Контрагент, Договор");
		ПоляОтбора.Организация = ПараметрыРасчета.Организация;
		АналитикиКРасчету = РаспределениеВзаиморасчетов.АналитикиКРасчету(ПоляОтбора);
		РаспределениеВзаиморасчетов.РассчитатьВсе(КонецМесяца(ПараметрыРасчета.Период), АналитикиКРасчету);
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
			"ОтложенноеПроведениеПоРасчетам",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.РаспределениеВзаиморасчетов,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура АннулированиеПодарочныхСертификатов(Отказ, ПараметрыРасчета)
	Попытка
		Документы.АннулированиеПодарочныхСертификатов.АннулироватьПодарочныеСертификатыПриЗакрытииМесяца(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(
			"АннулированиеПодарочныхСертификатов",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.АннулированиеПодарочныхСертификатов,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры


Процедура РасчетПартийТоваров(Отказ, ПараметрыРасчета)
	Попытка
		ПартионныйУчет.РассчитатьВсе(КонецМесяца(ПараметрыРасчета.Период), ПараметрыРасчета.Организация);
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Партионный учет.Операции закрытия месяца.';uk='Партіонний облік.Операції закриття місяця.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ПартионныйУчет,
			,
			ОписаниеОшибки);
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры



Процедура РасчетСебестоимости(Отказ, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.Свойство("РучнойЗапуск") Тогда
		Возврат;
	КонецЕсли;
	СебестоимостьРассчитана = РасчетСебестоимости.РассчитатьВсеВПопыткеИсключении(
		КонецМесяца(ПараметрыРасчета.Период),
		Ложь, // Фактический расчет
		ПараметрыРасчета.Организация,
		,
		Новый Структура("МестоВызоваРасчета", "ЗакрытиеМесяцаУТВызовСервера.РасчетСебестоимости"));
	
	Если НЕ СебестоимостьРассчитана Тогда
		Отказ = Истина;
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СледующийМесяцКРасчетуДенежныхСредств(ПериодРасчета)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	МИНИМУМ(ДенежныеСредства.Месяц) КАК МесяцКРасчету
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|
	|	) КАК ДенежныеСредства
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(ДенежныеСредства.Месяц) ЕСТЬ NULL)
	|");
	
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ОбработанныйМесяц", КонецМесяца(ПериодРасчета));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.МесяцКРасчету, Неопределено);
КонецФункции

Процедура ПереоценкаДенежныхСредств(Отказ, ПараметрыРасчета)
	
	НомерЗадания = ТекущийНомерЗадания();
	УвеличитьНомерЗадания(НомерЗадания);
	ОперацияРасчета = Перечисления.ОперацииЗакрытияМесяца.ПереоценкаВалютныхСредств;
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	НачалоРасчета = НачалоРасчета(ОперацияРасчета, КонецРасчета, НомерЗадания, ПараметрыРасчета.Организация);
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		Попытка
			Документы.ПереоценкаВалютныхСредств.ПереоценитьДенежныеСредства(
				ПараметрыРасчета.Организация,
				НачалоРасчета);
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Переоценка денежных средств';uk='Переоцінка грошових коштів'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПереоценкаВалютныхСредств,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Попытка
			Документы.ПереоценкаВалютныхСредств.ПереоценитьКредитыДепозитыЗаймы(
				ПараметрыРасчета.Организация,
				НачалоРасчета);
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Переоценка кредитов, депозитов, займов';uk='Переоцінка кредитів, депозитів, позик'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.документы.ПереоценкаВалютныхСредств,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
		СледующийМесяц = СледующийМесяцКРасчетуДенежныхСредств(НачалоРасчета);
		ЗафиксироватьРасчет(НачалоРасчета, ПараметрыРасчета.Организация, СледующийМесяц, ОперацияРасчета, НомерЗадания);
		Если ЗначениеЗаполнено(СледующийМесяц) Тогда
			НачалоРасчета = СледующийМесяц;
		Иначе
			НачалоРасчета = КонецРасчета + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределениеДоходовИРасходовПоНаправлениям(Отказ, ПараметрыРасчета)
	Документы.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.СоздатьДокументыЗаПериод(ПараметрыРасчета.Период,
		ПараметрыРасчета.Организация,
		Отказ);
КонецПроцедуры



#КонецОбласти

#Область БлокировкаПриОбновленииИБ

// Проверяет возможность выполнения операции в зависимости от текущего состояния обновления ИБ.
// Если все входящие данные операции еще не обработаны, то операцию выполнять нельзя.
// В этом случае в журнал регистрации будет записана информация о необработанных данных и вызвано исключение.
//
// Параметры:
//	ВходящиеДанные - Соответствие
//		Ключ - Строка, ОбъектМетаданныхКонфигурации - входящие данные, используемые  операцией
//		Значение - см. ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки, параметр Отбор
//	ПредставлениеОперации - Строка - пользовательское представление выполняемой операции
//
Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат; // обновление ИБ завершено полностью
	КонецЕсли;
	
	ТекстОшибкиДляИсключение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1: выполнение невозможно - не завершено обновление ИБ.
            |Подробнее см. в Журнале регистрации.'
            |;uk='%1: виконання неможливе - не завершено оновлення ІБ.
            |Докладніше див. у Журналі реєстрації.'"),
		ПредставлениеОперации);
	ТекстОшибкиДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1: выполнение невозможно - не завершено обновление ИБ.
                |Корректное выполнение операции будет возможно после того,
                |когда будут успешно завершены все обработчики обновление исходных данных для этой операции.'
                |;uk='%1: виконання неможливо - не завершено оновлення ІБ.
                |Коректне виконання операції буде можливо після того,
                |як будуть успішно завершені всі обробники оновлення вихідних даних для цієї операції.'"),
		ПредставлениеОперации);
	
	ДанныеСОтборомПоСсылкам = Новый Массив;
	ОтборПоСсылкам 			= Новый Массив;
	
	ДанныеЗаблокированы = Ложь;
	
	Для Каждого ОписаниеДанных Из ВходящиеДанные Цикл
		
		ОбъектМетаданных = ОписаниеДанных.Ключ;
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
		КонецЕсли;
		Отбор = ОписаниеДанных.Значение;
		
		Если (Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		 И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
		 ИЛИ ТипЗнч(Отбор) = Тип("Структура") Тогда
			// Проверку независимых регистров сведений выполняем по одному,
			// т.к. для них нет единообразных отборов (по регистратору).
			// Аналогично и для других типов метаданных, если для них задан "сложный" отбор в виде структуры.
			Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОбъектМетаданных, Отбор) Тогда
				
				ДанныеЗаблокированы = Истина;
				
				ЗаписьЖурналаРегистрации(
					ПредставлениеОперации,
					УровеньЖурналаРегистрации.Ошибка,
					ОбъектМетаданных,
					Отбор,
					ТекстОшибкиДляЖурнала);
				
			КонецЕсли;
		Иначе
			ДанныеСОтборомПоСсылкам.Добавить(ОбъектМетаданных.ПолноеИмя());
			Если ТипЗнч(Отбор) = Тип("Массив") Тогда
				// Добавим отбор-массив этого объекта метаданных в общий массив отборов
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСсылкам, Отбор, Истина);
			ИначеЕсли Отбор <> Неопределено Тогда
				// Добавим отбор-ссылку этого объекта метаданных в общий массив отборов
				Если ОтборПоСсылкам.Найти(Отбор) = Неопределено Тогда
					ОтборПоСсылкам.Добавить(Отбор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеСОтборомПоСсылкам.Количество() > 0 Тогда
		
		Если ОтборПоСсылкам.Количество() = 0 Тогда
			ОтборПоСсылкам = Неопределено; // без отбора
		КонецЕсли;
		
		//Проверку всех объектов, для которых возможен отбор по ссылке/регистратору, выполним за один вызов.
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ДанныеСОтборомПоСсылкам, ОтборПоСсылкам) Тогда
			
			ДанныеЗаблокированы = Истина;
			
			ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
				|
				|" + НСтр("ru='Необходимо дождаться завершения обработки всех данных следующих типов:';uk='Необхідно дочекатися завершення обробки всіх даних наступних типів:'");
			
			Для Каждого ИмяОбъектаМетаданных Из ДанныеСОтборомПоСсылкам Цикл
				// Перечислим имена объектов метаданных, среди которые есть еще не обработаные данные.
				ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
					|- " + ИмяОбъектаМетаданных;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				ПредставлениеОперации,
				УровеньЖурналаРегистрации.Ошибка,
				,
				ОтборПоСсылкам,
				ТекстОшибкиДляЖурнала);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаблокированы Тогда
		// Нельзя выполнять операцию - не завершено обновление всех ее входящих данных.
		ВызватьИсключение ТекстОшибкиДляИсключение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти



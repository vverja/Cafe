#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	ВЫБОР КОГДА Шапка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|		ИНАЧЕ Шапка.СпособДоставки
	|	КОНЕЦ                   КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Шапка.Склад             КАК Склад,
	|	Т.ДоставитьПолностью    КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ДоставитьПолностью
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|		И Т.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка
	|	
	|	ИМЕЮЩИЕ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|			КОНЕЦ) = ИСТИНА
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Шапка
	|		ПО (Шапка.Ссылка = Т.Ссылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Команда = БизнесПроцессы.СогласованиеЗаявкиНаВозвратТоваровОтКлиента.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.Порядок = -1;
	КонецЕсли;
	
	Документы.АктВыполненныхРабот.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСоздатьНаОсновании);
	
	Документы.ВозвратТоваровОтКлиента.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ЗаказНаПеремещение.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	
	Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.РеализацияТоваровУслуг.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСоздатьНаОсновании);
	
	Документы.РеализацияТоваровУслуг.ДобавитьКомандуСоздатьНаОснованииАктНаПередачуПрав(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	Документы.СчетНаОплатуКлиенту.ДобавитьКомандуСоздатьНаОснованииСчетаНаОплату(КомандыСоздатьНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияЗаказов(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийПродаж(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента";
	КонецЕсли;

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОценкаРентабельностиПродажи(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуРезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиентаПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияЗаявокНаВозврат(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;
	
	// ФормаСпискаДокументов
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияЗаявокНаВозврат(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов,ФормаСпискаСамообслуживание";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
		КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийПродаж(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуРезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиентаПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеОбеспеченияСпискаЗаказовКлиента(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаСамообслуживание";
	КонецЕсли;
	
КонецПроцедуры


// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаявки") Тогда
		
		ТекстЗапроса = ПродажиСервер.ТекстЗапросаКонтрольЗаказаПослеПроведения();
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	втОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента В (&МассивДокументов)) КАК ЗаказыКлиентовОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиентовОстатки.ЗаказКлиента
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР КОГДА ТаблицаДокументов.Статус = &Статус
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ВЫБОР КОГДА ТаблицаДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
		|		И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаСменыСтатусаОтклонена,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР КОГДА втОстаткиПоЗаказам.ЗаказКлиента ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	втОстаткиПоЗаказам
		|ПО
		|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказКлиента
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР КОГДА ТаблицаДокументов.Статус = &Статус
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ВЫБОР КОГДА ТаблицаДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
		|		И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаСменыСтатусаОтклонена,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	
	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
	КонтролироватьРасчеты  = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("КонтролироватьОтгрузку", КонтролироватьОтгрузку);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты", КонтролироватьРасчеты);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ВыборкаПроверки.ОшибкаСменыСтатусаОтклонена Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен. Присвойте заявке статус ""К возврату""';uk='У документа %Документ% статус ""%Статус%"" не встановлено. Призначте заявці статус ""До повернення""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаявки")
		И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ поставлен не полностью';uk='У документа %Документ% статус ""%Статус%"" не встановлений, оскільки замовлення поставлене не повністю'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#Область РасчетСостояний

// Осуществляет вычисление текущего состояния заявки на возврат товаров от клиента
//
// Параметры:
//	ЗаявкаНаВозврат         - ДокументСсылка.ЗаявкаНаВозвраТоваровОтКлиента - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ЗаявкаНаВозвратТоваровОтКлиента,
	                          Знач Договор,
	                          СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаявкаНаВозвратТоваровОтКлиента) И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаявка.Проведен)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка)
			|		КОГДА НЕ (СостоянияЗаказовКлиентов.Состояние ЕСТЬ NULL)
			|			ТОГДА СостоянияЗаказовКлиентов.Состояние
			|		КОГДА ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
			|		КОГДА ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Выполнена) 
			|	КОНЕЦ КАК Состояние,
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаявка.Проведен)
			|			ТОГДА ЛОЖЬ
			|		КОГДА ДокументЗаявка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена),
			|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
			|			ТОГДА ЛОЖЬ
			|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|				И &ТекущаяДата > СостоянияЗаказовКлиентов.ДатаСобытия 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СостояниеПросрочено,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты,0) КАК СуммаОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОплаты,0) КАК ПроцентОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки,0) КАК СуммаОтгрузки,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОтгрузки,0) КАК ПроцентОтгрузки,
			|	ВЫБОР
			|		КОГДА
			|			ДокументЗаявка.Проведен И
			|			((ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|			ДокументЗаявка.СуммаЗамены > 0) ИЛИ
			|			ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|		ТОГДА
			|			ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаДолга,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентДолга,0) КАК ПроцентДолга,
			|	ВЫБОР
			|		КОГДА
			|			ДокументЗаявка.Проведен И
			|			ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|		ТОГДА
			|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток,0)
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументЗаявка
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,, ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстатки
			|ПО
			|	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
			|ПО
			|	СостоянияЗаказовКлиентов.Заказ = ДокументЗаявка.Ссылка
			|ГДЕ
			|	ДокументЗаявка.Ссылка = &ДокументЗаявка
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаВозвратТоваровОтКлиента, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ДокументЗаявка", ЗаявкаНаВозвратТоваровОтКлиента);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаявкаНаВозвратТоваровОтКлиента));
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает текст запроса для расчета состояний заявок.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийЗаказов() Экспорт
	
	ТекстЗапроса ="
		|ВЫБРАТЬ
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаявка.Проведен
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка)
		|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяСогласование)
		|// ОТКЛОНЕНА ///////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
		|// ОЖИДАЕТСЯ ВЫПОЛНЕНИЕ ////////////////////////////////////////////////////
		|	КОГДА
		|		((ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
		|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
		|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
		|		И ДокументЗаявка.СуммаЗамены = 0
		|		И ЕСТЬNULL(ЗаявкиНаВозвратОстатки.КОформлениюОстаток,0) <> 0)
		|		ИЛИ (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
		|		И ДокументЗаявка.СуммаЗамены <> 0
		|		И ДокументЗаявка.СуммаАвансаДоОбеспечения = 0
		|		И ДокументЗаявка.СуммаПредоплатыДоОтгрузки = 0)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяВыполнение)
		|// ОЖИДАЕТСЯ АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению) ИЛИ
		|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)) И
		|		ДокументЗаявка.СуммаАвансаДоОбеспечения > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаявка.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяАвансИлиВозвратДоОбеспечения)
		|// ГОТОВА К ОБЕСПЕЧЕНИЮ ///////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТСостоянияОбеспечения.ОбеспечениеТребуется ЕСТЬ NULL 
		|		И ВТСостоянияОбеспечения.ОбеспечениеТребуется
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКОбеспечению)
		|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ОТГРУЗКИ ////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) ИЛИ
		|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)) И
		|		ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяПредоплатаИлиВозвратДоОтгрузки)
		|// ОЖИДАЕТСЯ ОБЕСПЕЧЕНИЕ ////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТСостоянияОбеспечения.ОбеспечениеТребуется ЕСТЬ NULL 
		|		И (ВТСостоянияОбеспечения.ОбеспечениеТребуется
		|		ИЛИ ВТСостоянияОбеспечения.ОбеспечениеИзЗаказовОжидается
		|		ИЛИ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяОбеспечение)
		|// ГОТОВ К ОТГРУЗКЕ //////////////////////////////////////////////////////////
		|	КОГДА
		|		(НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется ЕСТЬ NULL 
		|		И НЕ ВТСостоянияОбеспечения.ОбеспечениеТребуется
		|		И НЕ ВТСостоянияОбеспечения.ОбеспечениеИзЗаказовОжидается
		|		И НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется)
		|		ИЛИ ВТРасхожденияОрдерНакладная.ТребуетсяОрдер
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКОтгрузке)
		|// В ПРОЦЕССЕ ОТГРУЗКИ //////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)
		|			ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению))
		|		И ДокументЗаявка.СуммаЗамены > 0
		|		И (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) >= ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения ИЛИ
		|			ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И ((ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) <> 0
		|			ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0) <> 0)
		|			ИЛИ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) <> 0)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ВПроцессеОтгрузки)
		|// ОЖИДАЕТСЯ ОПЛАТА ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		((ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена) И
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)) ) И
		|		ДокументЗаявка.СуммаЗамены - ДокументЗаявка.СуммаАвансаДоОбеспечения - ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток, 0) > 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяОплатаИлиВозвратПослеОтгрузки)
		|// ВЫПОЛНЕНА ///////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.Статус В
		|				(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату), 
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
		|// ОЖИДАЕТСЯ ВЫПОЛНЕНИЕ ////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) И &КонтролироватьЗакрытиеЗаказа
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяВыполнение)
		|КОНЕЦ КАК Состояние,
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаявка.Проведен
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1)
		|// ДАТА СОГЛАСОВАНИЯ ///////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
		|	ТОГДА
		|		ДокументЗаявка.ДатаСогласования
		|// ДАТА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////////////
		|	КОГДА
		|		((ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
		|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
		|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
		|		И ДокументЗаявка.СуммаЗамены = 0)
		|		ИЛИ (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
		|		И ДокументЗаявка.СуммаАвансаДоОбеспечения = 0
		|		И ДокументЗаявка.СуммаПредоплатыДоОтгрузки = 0)
		|	ТОГДА
		|		ДокументЗаявка.ДатаПервогоПоступления
		|// ДАТА АВАНСА /////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
		|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))И
		|		ДокументЗаявка.СуммаАвансаДоОбеспечения > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаявка.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПРЕДОПЛАТЫ /////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
		|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)) И
		|		ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) ИЛИ
		|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке) ИЛИ
		|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)) И
		|		(ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) >= ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения ИЛИ
		|		ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И
		|		(ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаКонечныйОстаток, 0) <> 0 ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) <> 0)
		|	ТОГДА
		|		ЕСТЬNULL(ДатыОтгрузкиЗаказовКлиентов.МинимальнаяДатаОтгрузки, ДокументЗаявка.ДатаОтгрузки)
		|// ДАТА ОПЛАТЫ ПОСЛЕ ОТГРУЗКИ //////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке) 
		|				ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)) И
		|		ДокументЗаявка.СуммаЗамены - ДокументЗаявка.СуммаАвансаДоОбеспечения - ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток, 0) > 0
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ПРОСРОЧЕН ВОЗВРАТ ///////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
		|	ТОГДА
		|		ДокументЗаявка.ДатаПервогоПоступления
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|КОНЕЦ КАК ДатаСобытия,
		|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента) ИЛИ
		|		ДокументЗаявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)) И
		|		ДокументЗаявка.Проведен И
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
		|		ДокументЗаявка.СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары)
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОплаты,
		|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента) ИЛИ
		|		ДокументЗаявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)) И
		|		ДокументЗаявка.Проведен И
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
		|		ДокументЗаявка.СуммаЗамены > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) * 100 / ДокументЗаявка.СуммаЗамены КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОплаты,
		|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаявка.Проведен И
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеПриход, 0) > 0 И
		|		ДокументЗаявка.СуммаЗамены > 0
		|	ТОГДА
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеПриход, 0)
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОтгрузки,
		|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаявка.Проведен И
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеПриход, 0) > 0 И
		|		ДокументЗаявка.СуммаЗамены > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеПриход, 0) * 100 / ДокументЗаявка.СуммаЗамены КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОтгрузки,
		|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаявка.Проведен И
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаДолга,
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаявка.Проведен И
		|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
		|		ДокументЗаявка.СуммаЗамены > 0
		|	ТОГДА
		|		ВЫБОР
		|			КОГДА
		|				ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) > 0
		|			ТОГДА
		|				ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ДокументЗаявка.СуммаЗамены) КАК ЧИСЛО(20, 10))
		|			ИНАЧЕ
		|				ВЫРАЗИТЬ ((ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ДокументЗаявка.СуммаЗамены) КАК ЧИСЛО(20, 10))
		|		КОНЕЦ
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентДолга,
		|// РАСХОЖДЕНИЯ ОРДЕР-НАКЛАДНАЯ//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаявка.Проведен
		|		И ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
		|		И ДокументЗаявка.СуммаЗамены > 0
		|	ТОГДА
		|		ЕСТЬNULL(ВТРасхожденияОрдерНакладная.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ) 
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК ЕстьРасхожденияОрдерНакладная,
		|//ССЫЛКА НА ЗАЯВКУ//////////////////////////////////////////////////////
		|	ДокументЗаявка.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументЗаявка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,, ЗаказКлиента В (&МассивЗаказов) И АналитикаУчетаПоПартнерам.Организация = ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация) КАК РасчетыСКлиентамиОстатки
		|ПО
		|	ДокументЗаявка.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(,,,,ЗаказКлиента В (&МассивЗаказов)) КАК ЗаказыКлиентовОстатки
		|ПО
		|	ДокументЗаявка.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(, ЗаявкаНаВозвратТоваровОтКлиента В (&МассивЗаказов)) КАК ЗаявкиНаВозвратОстатки
		|ПО
		|	ДокументЗаявка.Ссылка = ЗаявкиНаВозвратОстатки.ЗаявкаНаВозвратТоваровОтКлиента
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузкеОстатки
		|ПО
		|	ДокументЗаявка.Ссылка = ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыАктуальностиЗаказовКлиентов КАК ДатыАктуальностиРасчетов
		|ПО
		|	ДокументЗаявка.Ссылка = ДатыАктуальностиРасчетов.ОбъектРасчетов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыОтгрузкиЗаказовКлиентов КАК ДатыОтгрузкиЗаказовКлиентов
		|ПО
		|	ДокументЗаявка.Ссылка = ДатыОтгрузкиЗаказовКлиентов.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТСостоянияОбеспечения КАК ВТСостоянияОбеспечения
		|ПО
		|	ДокументЗаявка.Ссылка = ВТСостоянияОбеспечения.Заказ
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТРасхожденияОрдерНакладная КАК ВТРасхожденияОрдерНакладная
		|ПО
		|	ДокументЗаявка.Ссылка = ВТРасхожденияОрдерНакладная.ЗаказКлиента
		|ГДЕ
		|	ДокументЗаявка.Ссылка В (&МассивЗаказов)
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее
// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("Состояние", Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка());
	СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено", Ложь);
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаЗамены КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, СуммаДокумента, СуммаВзаиморасчетов",
		Дата,
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		ХозяйственнаяОперация,
		СуммаДокумента,
		СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Подразделение");
	МассивВсехРеквизитов.Добавить("Договор");
	МассивВсехРеквизитов.Добавить("ВозвратПереданнойМногооборотнойТары");
	МассивВсехРеквизитов.Добавить("ПредусмотренЗалогЗаТару");
	
	МассивРеквизитовОперации = Новый Массив;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
		МассивРеквизитовОперации.Добавить("Подразделение");
		МассивРеквизитовОперации.Добавить("Договор");
		МассивРеквизитовОперации.Добавить("ВозвратПереданнойМногооборотнойТары");
		МассивРеквизитовОперации.Добавить("ПредусмотренЗалогЗаТару");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		МассивРеквизитовОперации.Добавить("Договор");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		МассивРеквизитовОперации.Добавить("Подразделение");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,Дата,Статус";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры:
//		Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//		Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	Возвращаемые = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	Возвращаемые.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	Возвращаемые.ИспользоватьСерииНоменклатуры = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	Возвращаемые.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	Возвращаемые.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
	
	Возвращаемые.ПоляСвязи.Добавить("НоменклатураОприходование");
	Возвращаемые.ПоляСвязи.Добавить("ХарактеристикаОприходование");
	
	Возвращаемые.ИмяТЧТовары = "ВозвращаемыеТовары";
	Возвращаемые.ИмяТЧСерии  = "ВозвращаемыеСерии";
	
	Возвращаемые.ЭтоНакладная = Истина;
	Возвращаемые.Дата = Объект.Дата;
	
	Заменяющие = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	Заменяющие.ПолноеИмяОбъекта = "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
	
	Заменяющие.ИспользоватьСерииНоменклатуры = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры
					И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	Заменяющие.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям
					И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
	Заменяющие.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	
	Заменяющие.ИмяТЧТовары = "ЗаменяющиеТовары";
	Заменяющие.ИмяТЧСерии  = "ЗаменяющиеТовары";
	
	Заменяющие.ЭтоЗаказ = Истина;
	Заменяющие.ПланированиеОтгрузки = Истина;
	Заменяющие.РегистрироватьСерии = Ложь;
	Заменяющие.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий = Новый Структура;
	ПараметрыУказанияСерий.Вставить("Возвращаемые",Возвращаемые);
	ПараметрыУказанияСерий.Вставить("Заменяющие",Заменяющие);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.СкладскиеОперации[0] = Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.НоменклатураОприходование,
		|	Товары.ХарактеристикаОприходование,
		|	Товары.Серия,
		|	Товары.Количество,
		|	Товары.СтатусУказанияСерий,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.НоменклатураОприходование,
		|	Товары.ХарактеристикаОприходование,
		|	СУММА(Товары.Количество) КАК Количество,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
		|ПОМЕСТИТЬ ТоварыДляЗапроса
		|ИЗ
		|	Товары КАК Товары
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.НоменклатураОприходование,
		|	Товары.ХарактеристикаОприходование,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.НоменклатураОприходование,
		|	Серии.ХарактеристикаОприходование,
		|	Серии.Количество
		|ПОМЕСТИТЬ Серии
		|ИЗ
		|	&Серии КАК Серии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.НоменклатураОприходование,
		|	Серии.ХарактеристикаОприходование,
		|	СУММА(Серии.Количество) КАК Количество
		|ПОМЕСТИТЬ СерииДляЗапроса
		|ИЗ
		|	Серии КАК Серии
		|
		|СГРУППИРОВАТЬ ПО
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.НоменклатураОприходование,
		|	Серии.ХарактеристикаОприходование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
		|	ВЫБОР
		|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|					ТОГДА ВЫБОР
		|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 14
		|							ИНАЧЕ 13
		|						КОНЕЦ
		|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|					ТОГДА ВЫБОР
		|							КОГДА НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
		|									ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении
		|								ТОГДА ВЫБОР
		|										КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
		|												И ТоварыДляЗапроса.Количество > 0
		|											ТОГДА 10
		|										ИНАЧЕ 9
		|									КОНЕЦ
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
		|					ТОГДА ВЫБОР
		|							КОГДА НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
		|									ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении
		|								ТОГДА ВЫБОР
		|										КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
		|												И ТоварыДляЗапроса.Количество > 0
		|											ТОГДА 8
		|										ИНАЧЕ 7
		|									КОНЕЦ
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
		|						И (НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
		|							ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении)
		|						И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
		|					ТОГДА ВЫБОР
		|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|								ТОГДА ВЫБОР
		|										КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
		|												И ТоварыДляЗапроса.Количество > 0
		|											ТОГДА 4
		|										ИНАЧЕ 3
		|									КОНЕЦ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
		|											И ТоварыДляЗапроса.Количество > 0
		|										ТОГДА 2
		|									ИНАЧЕ 1
		|								КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ Статусы
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
		|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
		|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
		|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
		|				И ТоварыДляЗапроса.НоменклатураОприходование = СерииДляЗапроса.НоменклатураОприходование
		|				И ТоварыДляЗапроса.ХарактеристикаОприходование = СерииДляЗапроса.ХарактеристикаОприходование
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|				ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
		|			ПО (ПолитикиУчетаСерий.Склад = &Склад)
		|				И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
		|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
		|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
		|			И Товары.НоменклатураОприходование = ТоварыДляЗапроса.НоменклатураОприходование
		|			И Товары.ХарактеристикаОприходование = ТоварыДляЗапроса.ХарактеристикаОприходование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Статусы.НомерСтроки КАК НомерСтроки,
		|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ИЗ
		|	Статусы КАК Статусы
		|ГДЕ
		|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Серия,
		|	Товары.Отменено,
		|	Товары.ВариантОбеспечения,
		|	Товары.Количество,
		|	Товары.СтатусУказанияСерий,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
		|	ВЫБОР
		|		КОГДА Товары.Отменено
		|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
		|				ИЛИ НЕ Товары.ВариантОбеспечения В (
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|			ТОГДА 0
		|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|			ТОГДА ВЫБОР
		|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 14
		|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|						ТОГДА 15
		|					ИНАЧЕ 13
		|				КОНЕЦ
		|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|			ТОГДА ВЫБОР
		|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 10
		|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|						ТОГДА 11
		|					ИНАЧЕ 9
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ Статусы
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
		|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
		|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Статусы.НомерСтроки КАК НомерСтроки,
		|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ИЗ
		|	Статусы КАК Статусы
		|ГДЕ
		|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает в менеджере таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - документ, по которому создаются временные таблицы
//
Процедура ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.Склад КАК Склад,
	|	Заказы.ЗаказКлиента.Подразделение КАК Подразделение,
	|	Заказы.ЗаказКлиента.Назначение КАК Назначение,
	|	СУММА(Заказы.ЗаказаноОстаток) КАК Заказано,
	|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(Товары.Упаковка) КАК Упаковка2,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &Заказ) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
	|		ПО Заказы.ЗаказКлиента = Товары.Ссылка
	|			И Заказы.КодСтроки = Товары.КодСтроки
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Склад,
	|	Заказы.ЗаказКлиента.Подразделение,
	|	Заказы.ЗаказКлиента.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Заказано КАК Заказано,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Ссылка.Склад КАК Склад,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(Товары.Количество) КАК Заказано,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
	|ГДЕ
	|	(Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказовКлиента)
	|	И Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Упаковка,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.Склад,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказовКлиента",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	Запрос.Выполнить();
	
КонецПроцедуры

#Область Обеспечение

//Используется для получения данных из заявок на возврат, используемых в обработке "Состояние обеспечения заказов".
//Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
//Возвращаемое значение:
// Строка - Текст запроса - Текст запроса для выборки данных:
//                          1) источнике данных о потребности:
//                          - "Заказ", "КодСтроки", "НомерСтроки",
//                          2) аналитики потребности:
//                          - "Номенклатура", "Характеристика", "Склад", "Назначение", "Подразделение",
//                          3) текущем варианте обеспечения:
//                          - "ВариантОбеспечения", "ДатаОтгрузки", "Количество",
//                          4) общих для заказа параметрах обеспечения:
//                          - "ЖелаемаяДатаОтгрузки", "НеОтгружатьЧастями".
//                          5) реквизиты документа отображаемые в форме обработки состояния обеспечения":
//                          - "Упаковка", "Дата", "Партнер", "Статус", "СтатусИспользуется", "Дата".
//                          
//                          "Количество" - количество из заказа, по которому не оформлена накладная,
//                          поступает из таблицы "ВтРегистрЗаказыКлиентов", где предварительно рассчитывается
//                          по ресурсу "Заказано", регистра накопления "ЗаказыКлиентов".
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Ссылка                КАК Заказ,
		|	Т.КодСтроки             КАК КодСтроки,
		|	Т.НомерСтроки           КАК НомерСтроки,
		|	0                       КАК НомерСтрокиПродукция,
		|	НЕОПРЕДЕЛЕНО            КАК Продукция,
		|	НЕОПРЕДЕЛЕНО            КАК Этап,
		|	0                       КАК ЭтапПорядок,
		|
		|	Т.Номенклатура          КАК Номенклатура,
		|	Т.Характеристика        КАК Характеристика,
		|	Т.Ссылка.Склад          КАК Склад,
		|	Т.Ссылка.Назначение     КАК Назначение,
		|	Т.Ссылка.Подразделение  КАК Подразделение,
		|
		|	Т.ВариантОбеспечения    КАК ВариантОбеспечения,
		|	Т.ДатаОтгрузки          КАК ДатаОтгрузки,
		|	Т.Упаковка              КАК Упаковка,
		|
		|	ДанныеУчета.Количество  КАК Количество,
		|
		|	Т.Ссылка.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	Т.Ссылка.НеОтгружатьЧастями   КАК НеОтгружатьЧастями,
		|	Т.Ссылка.Дата                 КАК Дата,
		|	Т.Ссылка.Партнер              КАК Партнер,
		|	Т.Ссылка.Статус               КАК Статус,
		|	ИСТИНА                        КАК СтатусИспользуется
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистрЗаказыКлиентов КАК ДанныеУчета
		|		ПО Т.Ссылка    = ДанныеУчета.Заказ
		|		 И Т.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	Т.Ссылка.Проведен
		|
		|	И Т.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|
		|	И (Т.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		ИЛИ Т.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
		|
		|{ГДЕ
		|	Т.Ссылка.*          КАК Заказ,
		|	Т.Ссылка.Склад.*    КАК Склад,
		|	Т.Ссылка.Менеджер.* КАК Менеджер,
		|	Т.Ссылка.Партнер.*  КАК Партнер}";

	Возврат ТекстЗапроса;

КонецФункции

Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено, ЗависимыеРеквизиты = Неопределено) Экспорт
    
	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары"
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");

	Реквизиты = "КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки";
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(Реквизиты, ЗависимыеРеквизиты);

	СтруктураДействий = Новый Структура;
	Если Форма <> Неопределено Тогда
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	ЗаполнитьДатыОтгрузки = Ложь;
	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДата()), Объект.ЖелаемаяДатаОтгрузки);

	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	ОбеспечениеСервер.СвернутьСтрокиДляОтгрузкиОднойДатой(ДанныеЗаполнения, Объект.НеОтгружатьЧастями);
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.ЗаменяющиеТовары.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.ЗаменяющиеТовары[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;

			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Иначе
			ТекСтрокаТовары = Объект.ЗаменяющиеТовары.Вставить(Объект.ЗаменяющиеТовары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;
		
		//Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения");
        
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;

		Если Объект.НеОтгружатьЧастями Тогда
			ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок"
				Или ДатаПоУмолчанию > Объект.ДатаОтгрузки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.ДатаОтгрузки = ДатаПоУмолчанию;
				ЗаполнитьДатыОтгрузки = Истина;
			КонецЕсли;
		ИначеЕсли СтрокаОбеспечения.Отгружено = 0 Тогда
			ТекСтрокаТовары.ДатаОтгрузки = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;

	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);

	Если ЗаполнитьДатыОтгрузки Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.ЗаменяющиеТовары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;

	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
			Объект, Документы.ЗаявкаНаВозвратТоваровОтКлиента));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);

	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Истина;
КонецФункции

Функция ПараметрыВыбораОбеспечения(Статус) Экспорт

	Параметры = Новый Структура("ПутиКДанным, ИмяТабличнойЧасти, СтатусКВыполнению, ИмяМенеджераРегистра",
		Новый Соответствие(),
		"ЗаменяющиеТовары",
		Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
			И Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату,
		"ЗаказыКлиентов");

	Параметры.ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	Возврат Параметры;

КонецФункции

#КонецОбласти

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// Документ           - ДокументСсылка - Документ, на основании которого осуществляется ввод
// Статус             - Статус документ, на основании которого осуществляется ввод
// ЕстьОшибкиПроведен - Булево - Если Истина - документ, на основании которого осуществляется ввод, не проведен
//
Функция ПроверитьВозможностьВводаНаОсновании(ЗаказКлиента, Статус = Неопределено, ЕстьОшибкиПроведен = Ложь, КВозврату = Ложь) Экспорт
	
	МассивДопустимыхСтатусов = ДопустимыеСтатусыВводаНаОсновании(КВозврату);
	ЕстьОшибкиСтатус = МассивДопустимыхСтатусов.Найти(Статус) = Неопределено;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Статус,
		ЕстьОшибкиПроведен,
		ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
КонецФункции

// Формирует массив допустимых статусов на основании настроек программы
//
// ВозвращаемоеЗначение
//	Массив - массив допустимых статусов
//
Функция ДопустимыеСтатусыВводаНаОсновании(КВозврату = Ложь) Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Если КВозврату Тогда
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению);
		Иначе
			Если КВозврату Тогда
				МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению);
			КонецЕсли;
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты")
			ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки") Тогда
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена);
		КонецЕсли;
	Иначе
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована);
	КонецЕсли;
	
	Возврат МассивДопустимыхСтатусов;
	
КонецФункции

// Функция выполняет проверки документа-распоряжения при создании расходного ордера
//
// Параметры:
//	Распоряжение - Ссылка на документ-распоряжение
//	Склад - Ссылка на элемент справочника Склады
//
// Возвращаемое значение:
//	Структура - результаты проверки:
//		- Отказ - Булево - Истина, если проверки прошли с ошибками, иначе - Ложь
//		- ТекстОшибки - Строка - Обязательно должен быть заполнен, когда Отказ = Истина
//		- ДатаОтгрузки - Дата
//		- ГруппаСкладовВРаспоряжении - Булево - В распоряжении выбрана группа складов 
//		- ИспользоватьОрдернуюСхему - Булево - На складе используется ордерная схема
//
Функция ВыполнитьПроверкиРаспоряжения(Распоряжение, Склад) Экспорт 
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Операция", "");
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	СтруктураВозврата.Вставить("ГруппаСкладовВРаспоряжении", Ложь);
	СтруктураВозврата.Вставить("ДатаОтгрузки");
	СтруктураВозврата.Вставить("ИспользоватьОрдернуюСхему");
	
	Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Склад")) Тогда
		
		ТекстОшибки = НСтр("ru='Не заполнено поле ""Склад"" в документе ""%Распоряжение%"". Невозможно создать ордер.';uk='Не заповнене поле ""Склад"" в документі ""%Распоряжение%"". Неможливо створити ордер.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Распоряжение%", Строка(Распоряжение));
		СтруктураВозврата.ТекстОшибки = ТекстОшибки;
		СтруктураВозврата.Операция = "Отказ";
		
		Возврат СтруктураВозврата
		
	КонецЕсли;
	
	СтруктураГруппыСкладов     = Новый Структура("ЭтоГруппа", "Склад.ЭтоГруппа");
	ЗначениеГруппыСкладов      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, СтруктураГруппыСкладов);
	ГруппаСкладовВРаспоряжении = ЗначениеГруппыСкладов.ЭтоГруппа;
	
	СтруктураВозврата.ГруппаСкладовВРаспоряжении = ГруппаСкладовВРаспоряжении; 
	
	Реквизиты = Новый Структура("ДатаОтгрузки, Склад, ИспользоватьОрдернуюСхему", "Дата");
		 	
	Если Не ГруппаСкладовВРаспоряжении Тогда
		
		Реквизиты.Склад = "Склад";
		Реквизиты.ИспользоватьОрдернуюСхему ="
		|ВЫБОР
		|	КОГДА ЕстьNULL(Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, Ложь)
		|			И Дата >= ЕстьNULL(Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1,1,1))
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ";
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, Реквизиты);
		ИспользоватьОрдернуюСхему = ЗначенияРеквизитов.ИспользоватьОрдернуюСхему;
		
		СтруктураВозврата.ИспользоватьОрдернуюСхему = ИспользоватьОрдернуюСхему;
		
		Если ИспользоватьОрдернуюСхему Тогда
			
			Склад = ЗначенияРеквизитов.Склад;
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, ЗначенияРеквизитов, "ДатаОтгрузки");
			
		Иначе
			
			ТекстОшибки = НСтр("ru='Для склада ""%Склад%"" оформление расходных ордеров не требуется.
                |Заполнение документа не выполнено.'
                |;uk='Для складу ""%Склад%"" оформлення видаткових ордерів не потрібно.
                |Заповнення документа не виконано.'");
			СтруктураВозврата.ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", Строка(ЗначенияРеквизитов.Склад));
			СтруктураВозврата.Операция = "Отказ";
			Возврат СтруктураВозврата;
			
		КонецЕсли;	
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Статус");
	
	ПроверитьВозможностьВводаНаОсновании(Распоряжение, Статус);
	
	Если ГруппаСкладовВРаспоряжении Тогда
		Если Не ЗначениеЗаполнено(Склад) Тогда
			МассивСкладов = Документы.РасходныйОрдерНаТовары.ОрдерныеСкладыПриОтгрузке(Распоряжение, Неопределено);
			Если МассивСкладов.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru='Для складов документа ""%Распоряжение%"" оформление приходных ордеров не требуется.
                                        |Заполнение документа не выполнено.'
                                        |;uk='Для складів документа ""%Распоряжение%"" оформлення прибуткових ордерів не потрібно.
                                        |Заповнення документа не виконано.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Распоряжение%", Строка(Распоряжение));
				СтруктураВозврата.ТекстОшибки = ТекстОшибки;
				СтруктураВозврата.Операция = "Отказ";
				Возврат СтруктураВозврата;
			ИначеЕсли МассивСкладов.Количество() = 1 Тогда
				Склад = МассивСкладов[0];
			Иначе
				СтруктураВозврата.Операция = "Возврат";
				Возврат СтруктураВозврата;
			КонецЕсли;
		Иначе
			СтруктураВозврата.Операция = "Возврат";
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИницициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыВозврат", 3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление", 4);
	
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение", 5);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка", 6);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка", 7);
	
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("СкладВШапке", Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки", Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиПоступления", Истина);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыОтгрузки", Истина);
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка", "ЗаменяющиеТовары");
	СтруктураСостояние.Вставить("ИмяТЧТоварыПоступление", "ВозвращаемыеТовары");
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru='Заменяющие товары';uk='Замінюючі товари'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление", НСтр("ru='Возвращаемые товары';uk='Повернуті товари'"));
	СтруктураСостояние.Вставить("ИмяРегистраОтгрузкаУслуг", "ЗаказыКлиентов");
	
	Возврат СтруктураСостояние
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		СтандартнаяОбработка = Ложь;
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "ФормаДокументаСамообслуживание";
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			ВыбраннаяФорма = "ФормаСпискаСамообслуживание";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаявкиНаВозвратТоваровОтКлиентов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
 	
	////////////////////////////////////////////////////////////////////////////
	// Поместим результаты запроса в дополнительные свойства
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Дата                    КАК Период,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта                  КАК Валюта,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Статус                  КАК Статус,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Склад                   КАК Склад,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Партнер                 КАК Партнер,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Контрагент              КАК Контрагент,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Организация             КАК Организация,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ЦенаВключаетНДС         КАК ЦенаВключаетНДС,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Назначение              КАК Назначение,
	|	ЕСТЬNULL(ЗаявкаНаВозвратТоваровОтКлиента.Назначение.ДвиженияПоСкладскимРегистрам,Ложь) КАК ДвиженияПоСкладскимРегистрам,
	|	ЕСТЬNULL(ЗаявкаНаВозвратТоваровОтКлиента.Склад.ИспользоватьОрдернуюСхемуПриПоступлении, Ложь) КАК ИспользоватьОрдернуюСхему,
	|	ЕСТЬNULL(ЗаявкаНаВозвратТоваровОтКлиента.Склад.ДатаНачалаОрдернойСхемыПриПоступлении, Ложь) КАК ДатаНачалаОрдернойСхемыПриПоступлении,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Договор КАК Договор,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ДатаВозвратаДенежныхСредств КАК ДатаВозвратаДенежныхСредств,
	|	ЗаявкаНаВозвратТоваровОтКлиента.СпособКомпенсации КАК СпособКомпенсации,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозвратТоваровОтКлиента.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И ЗаявкаНаВозвратТоваровОтКлиента.Дата >= ЗаявкаНаВозвратТоваровОтКлиента.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке,
	|	
	|	ВЫБОР КОГДА ЗаявкаНаВозвратТоваровОтКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ЗаявкаНаВозвратТоваровОтКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоНакладным,
	|	ЗаявкаНаВозвратТоваровОтКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ЗаявкаНаВозвратТоваровОтКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ЗаявкаНаВозвратТоваровОтКлиента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                               Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                               Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Статус",                               Реквизиты.Статус);
	Запрос.УстановитьПараметр("Склад",                                Реквизиты.Склад);
	Запрос.УстановитьПараметр("Партнер",                              Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ЗаявкаНаВозвратТоваровОтКлиента",      ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",                          Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                      Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",                Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьОрдернуюСхему",            Реквизиты.ИспользоватьОрдернуюСхему);
	Запрос.УстановитьПараметр("ДатаНачалаОрдернойСхемыПриПоступлении",Реквизиты.ДатаНачалаОрдернойСхемыПриПоступлении);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                      Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",            РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("Договор",                              Реквизиты.Договор);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",                   Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным",                   Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента",   
		ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару",            Реквизиты.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару",                 Реквизиты.ТребуетсяЗалогЗаТару);
	Запрос.УстановитьПараметр("ДатаВозвратаДенежныхСредств",          Реквизиты.ДатаВозвратаДенежныхСредств);
	Запрос.УстановитьПараметр("СпособКомпенсации",                    Реквизиты.СпособКомпенсации);  
	Запрос.УстановитьПараметр("Назначение",                           Реквизиты.Назначение);
	Запрос.УстановитьПараметр("ДвиженияПоСкладскимРегистрам",		  Реквизиты.ДвиженияПоСкладскимРегистрам);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриОтгрузке",		      Реквизиты.ОрдернаяСхемаПриОтгрузке);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре",            Реквизиты.ГрафикИсполненияВДоговоре);
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС",             НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаявкиНаВозвратТоваровОтКлиентов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаявкиНаВозвратТоваровОтКлиентов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	1                                                  КАК Порядок,
		|	ТаблицаВозвращаемыеТовары.НомерСтроки              КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
		|	&Период                                            КАК Период,
		|	ТаблицаВозвращаемыеТовары.Ссылка                   КАК ЗаявкаНаВозвратТоваровОтКлиента,
		|	ВЫБОР КОГДА 
		|			ТаблицаВозвращаемыеТовары.Порча 
		|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
		|			ТаблицаВозвращаемыеТовары.НоменклатураОприходование
		|		ИНАЧЕ ТаблицаВозвращаемыеТовары.Номенклатура
		|	КОНЕЦ                                              КАК Номенклатура,
		|	ВЫБОР КОГДА 
		|			ТаблицаВозвращаемыеТовары.Порча 
		|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
		|			ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
		|		ИНАЧЕ ТаблицаВозвращаемыеТовары.Характеристика
		|	КОНЕЦ                                              КАК Характеристика,
		|	ТаблицаВозвращаемыеТовары.КодСтроки                КАК КодСтроки,
		|	ВЫБОР КОГДА НЕ ТаблицаВозвращаемыеТовары.Отменено ТОГДА
		|			ТаблицаВозвращаемыеТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                                              КАК КОформлению,
		|	ТаблицаВозвращаемыеТовары.Количество               КАК Заявлено
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
		|ГДЕ
		|	ТаблицаВозвращаемыеТовары.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2                                                  КАК Порядок,
		|	ТаблицаВозвращаемыеТовары.НомерСтроки              КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
		|	&Период                                            КАК Период,
		|	ТаблицаВозвращаемыеТовары.Ссылка                   КАК ЗаказПоставщику,
		|	ТаблицаВозвращаемыеТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаВозвращаемыеТовары.Характеристика           КАК Характеристика,
		|	ТаблицаВозвращаемыеТовары.КодСтроки                КАК КодСтроки,
		|	0                                                  КАК КОформлению,
		|	-ТаблицаВозвращаемыеТовары.Количество              КАК Заявлено
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
		|ГДЕ
		|	ТаблицаВозвращаемыеТовары.Ссылка = &Ссылка
		|	И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
		|	ИЛИ ТаблицаВозвращаемыеТовары.Отменено)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВозвращаемыеТовары.НомерСтроки         КАК НомерСтроки,
		|	ТаблицаВозвращаемыеТовары.ДатаПоступления     КАК Период,
		|	&ЗаявкаНаВозвратТоваровОтКлиента              КАК Распоряжение,
		|	&Склад                                        КАК Склад,
		|
		|	ВЫБОР КОГДА ТаблицаВозвращаемыеТовары.Порча
		|					И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация
		|					<> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
		|
		|				ТаблицаВозвращаемыеТовары.НоменклатураОприходование
		|
		|			ИНАЧЕ
		|
		|				ТаблицаВозвращаемыеТовары.Номенклатура
		|
		|		КОНЕЦ                                     КАК Номенклатура,
		|
		|	ВЫБОР КОГДА ТаблицаВозвращаемыеТовары.Порча
		|					И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация
		|					<> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
		|
		|				ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
		|
		|			ИНАЧЕ
		|
		|				ТаблицаВозвращаемыеТовары.Характеристика
		|
		|		КОНЕЦ                                     КАК Характеристика,
		|
		|	НЕОПРЕДЕЛЕНО                                  КАК Назначение,
		|	ТаблицаВозвращаемыеТовары.Количество          КАК ПланируемоеПоступление
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
		|
		|ГДЕ
		|	ТаблицаВозвращаемыеТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаВозвращаемыеТовары.Отменено
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		//Резервирование товаров
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Количество               КАК ВРезервеСоСклада,
		|	0                                      КАК ВРезервеПодЗаказ,
		|	0                                      КАК ВНаличии
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И(
		|		ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|		И &Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|
		|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		И &Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Отгрузка товаров
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	0                                      КАК ВРезервеСоСклада,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
		|			ТаблицаТовары.Количество
		|		КОНЕЦ                              КАК ВРезервеПодЗаказ,
		|
		|	ТаблицаТовары.Количество               КАК ВНаличии
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		//Формирование потребности
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	&Назначение                            КАК Назначение,
		|	ТаблицаТовары.Количество               КАК Потребность,
		|	ТаблицаТовары.Количество               КАК КЗаказу,
		|	0                                      КАК НаличиеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Закрытие потребности
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	ТаблицаТовары.Ссылка.Склад             КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	&Назначение                            КАК Назначение,
		|	ТаблицаТовары.Количество               КАК Потребность,
		|	0                                      КАК КЗаказу,
		|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказовРаботами";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
		|	ТаблицаТовары.Ссылка.Подразделение     КАК Подразделение,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	&Назначение                            КАК Назначение,
		|	ТаблицаТовары.Количество               КАК КОбеспечению
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВозвращаемыеТовары.НомерСтроки              КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
		|	ТаблицаВозвращаемыеТовары.ДатаПоступления          КАК Период,
		|	&Склад                                             КАК Склад,
		|	ВЫБОР КОГДА 
		|			ТаблицаВозвращаемыеТовары.Порча 
		|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
		|			ТаблицаВозвращаемыеТовары.НоменклатураОприходование
		|       ИНАЧЕ ТаблицаВозвращаемыеТовары.Номенклатура
		|   КОНЕЦ                                              КАК Номенклатура,
		|	ВЫБОР КОГДА 
		|			ТаблицаВозвращаемыеТовары.Порча 
		|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
		|			ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
		|       ИНАЧЕ ТаблицаВозвращаемыеТовары.Характеристика
		|   КОНЕЦ                                              КАК Характеристика,
		|	ТаблицаВозвращаемыеТовары.Ссылка                   КАК ДокументПоступления,
		|	ТаблицаВозвращаемыеТовары.Количество               КАК КПоступлению
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
		|ГДЕ
		|	ТаблицаВозвращаемыеТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаВозвращаемыеТовары.Отменено
		|	И &ИспользоватьОрдернуюСхему
		|	И ТаблицаВозвращаемыеТовары.ДатаПоступления >= &ДатаНачалаОрдернойСхемыПриПоступлении
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
		|	НачалоПериода(&Период, День)            КАК Период,
		|	&Ссылка                                 КАК ЗаказКлиента,
		|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
		|	ТаблицаТовары.Характеристика            КАК Характеристика,
		|	ТаблицаТовары.Серия                     КАК Серия,
		|	ТаблицаТовары.КодСтроки                 КАК КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|		&Склад
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                   КАК Склад,
		|	ТаблицаТовары.Количество                КАК Заказано,
		|	0                                       КАК КОформлению,
		|	ТаблицаТовары.СуммаСНДС                 КАК Сумма,
		|	НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
		|	ТаблицаТовары.ДатаОтгрузки              КАК Период,
		|	&Ссылка                                 КАК ЗаказКлиента,
		|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
		|	ТаблицаТовары.Характеристика            КАК Характеристика,
		|	ТаблицаТовары.Серия                     КАК Серия,
		|	ТаблицаТовары.КодСтроки                 КАК КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|		&Склад
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                   КАК Склад,
		|	0                                       КАК Заказано,
		|	ТаблицаТовары.Количество                КАК КОформлению,
		|	0                                       КАК Сумма,
		|	НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	И НЕ ТаблицаТовары.Отменено
		|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
		|	&Период                                  КАК Период,
		|	&Ссылка                                  КАК ЗаказКлиента,
		|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
		|	ТаблицаТовары.Характеристика             КАК Характеристика,
		|	ТаблицаТовары.Серия                      КАК Серия,
		|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|			&Склад
		|		ИНАЧЕ
		|			НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                    КАК Склад,
		|	-ТаблицаТовары.Количество                КАК Заказано,
		|	0                                        КАК КОформлению,
		|	-ТаблицаТовары.СуммаСНДС                 КАК Сумма,
		|	ТаблицаТовары.ПричинаОтмены              КАК ПричинаОтмены
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Отменено
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтКонтрольОплаты(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКонтрольОплаты";
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
		|					ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
		|			И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|					ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ИсключатьПриКонтролеАванс,
		|	МИНИМУМ(ВЫБОР
		|		КОГДА ((&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
		|			И &ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента)
		|					ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
		|			И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|					ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ИсключатьПриКонтролеПредоплату
		|ПОМЕСТИТЬ ВтКонтрольОплаты
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтКонтрольОплаты", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКонтрольОплаты(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ // Сумма к оплате по графику
		|	ГрафикОплаты.НомерСтроки                     КАК НомерСтроки,
		|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК Период,
		|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК ДатаПлатежа,
		|	&Период                                      КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		&ЗаявкаНаВозвратТоваровОтКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|
		|	&Валюта                                      КАК Валюта,
		|	ГрафикОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
		|	0                                            КАК Сумма,
		|	ГрафикОплаты.СуммаПлатежа + ГрафикОплаты.СуммаЗалогаЗаТару КАК КОплате,
		|	0                                            КАК КОтгрузке,
		|	0                                            КАК Отгружается,
		|
		|	ВЫБОР
		|		КОГДА ГрафикОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)
		|			ТОГДА КонтрольОплаты.ИсключатьПриКонтролеАванс
		|		КОГДА ГрафикОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)
		|			ТОГДА КонтрольОплаты.ИсключатьПриКонтролеПредоплату
		|		КОГДА &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИсключатьПриКонтроле,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ГрафикОплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКонтрольОплаты КАК КонтрольОплаты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ГрафикОплаты.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|	И ГрафикОплаты.СуммаПлатежа + ГрафикОплаты.СуммаЗалогаЗаТару > 0
		|	И НЕ &РасчетыПоНакладным
		|	И НЕ &ГрафикИсполненияВДоговоре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ // Сумма к отгрузке по графику
		|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)            КАК НомерСтроки,
		|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День) КАК Период,
		|	Неопределено                                   КАК ДатаПлатежа,
		|	Неопределено                                   КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)         КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		&ЗаявкаНаВозвратТоваровОтКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|
		|	&Валюта                                        КАК Валюта,
		|	Неопределено                                   КАК ФормаОплаты,
		|	0                                              КАК Сумма,
		|	0                                              КАК КОплате,
		|	СУММА(ТаблицаТовары.СуммаСНДС)                 КАК КОтгрузке,
		|	0                                              КАК Отгружается,
		|
		|	Истина КАК ИсключатьПриКонтроле,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	И НЕ &РасчетыПоНакладным
		|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|		ИЛИ &ТребуетсяЗалогЗаТару
		|		ИЛИ НЕ &ВернутьМногооборотнуюТару)
		|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И &СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары)
		|	И НЕ &ГрафикИсполненияВДоговоре
		|СГРУППИРОВАТЬ ПО
		|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ // Сумма отгружается по графику
		|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)            КАК НомерСтроки,
		|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День) КАК Период,
		|	Неопределено                                   КАК ДатаПлатежа,
		|	Неопределено                                   КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)         КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		&ЗаявкаНаВозвратТоваровОтКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|
		|	&Валюта                                        КАК Валюта,
		|	Неопределено                                   КАК ФормаОплаты,
		|	0                                              КАК Сумма,
		|	0                                              КАК КОплате,
		|	0                                              КАК КОтгрузке,
		|	СУММА(ТаблицаТовары.СуммаСНДС)                 КАК Отгружается,
		|
		|	Истина КАК ИсключатьПриКонтроле,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	И НЕ &РасчетыПоНакладным
		|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|		ИЛИ &ТребуетсяЗалогЗаТару
		|		ИЛИ НЕ &ВернутьМногооборотнуюТару)
		|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И &СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары)
		|СГРУППИРОВАТЬ ПО
		|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ // Сумма к оплате возвращаемых товаров
		|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)            КАК НомерСтроки,
		|	
		|	ВЫБОР КОГДА &ДатаВозвратаДенежныхСредств = ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	ИНАЧЕ
		|		КОНЕЦПЕРИОДА(&ДатаВозвратаДенежныхСредств, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	
		|	ВЫБОР КОГДА &ДатаВозвратаДенежныхСредств = ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	ИНАЧЕ
		|		КОНЕЦПЕРИОДА(&ДатаВозвратаДенежныхСредств, ДЕНЬ)
		|	КОНЕЦ КАК ДатаПлатежа,
		|	
		|	&Период КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)         КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		&ЗаявкаНаВозвратТоваровОтКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|
		|	&Валюта                                        КАК Валюта,
		|	Неопределено                                   КАК ФормаОплаты,
		|	0                                              КАК Сумма,
		|	СУММА(ТаблицаТовары.СуммаСНДС)                 КАК КОплате,
		|	0                                              КАК КОтгрузке,
		|	0                                              КАК Отгружается,
		|
		|	Истина КАК ИсключатьПриКонтроле,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|		ИЛИ &ТребуетсяЗалогЗаТару
		|		ИЛИ НЕ &ВернутьМногооборотнуюТару)
		|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|	И НЕ &РасчетыПоНакладным
		|	И &СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства)
		|	И НЕ &ГрафикИсполненияВДоговоре
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА &ДатаВозвратаДенежныхСредств = ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	ИНАЧЕ
		|		КОНЕЦПЕРИОДА(&ДатаВозвратаДенежныхСредств, ДЕНЬ)
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ СУММА(ТаблицаТовары.СуммаСНДС) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
		|	&Склад                                 КАК Склад,
		|	&Партнер                               КАК Получатель,
		|	&Ссылка                                КАК ДокументОтгрузки,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ТаблицаТовары.Серия                    КАК Серия,
		|	ТаблицаТовары.Количество               КАК ВРезерве,
		|	0                                      КАК КОтгрузке,
		|	0                                      КАК КОформлению
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Количество <> 0
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ТаблицаТовары.Отменено
		|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|
		|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|			И &Статус В(
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
		|	&Склад                                 КАК Склад,
		|	&Партнер                               КАК Получатель,
		|	&Ссылка                                КАК ДокументОтгрузки,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
		|			И &ДвиженияПоСкладскимРегистрам 
		|			ТОГДА &Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ								   КАК Назначение,
		|	ТаблицаТовары.Серия                    КАК Серия,
		|	0                                      КАК ВРезерве,
		|	ТаблицаТовары.Количество               КАК КОтгрузке,
		|	ТаблицаТовары.Количество               КАК КОформлению
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Количество <> 0
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	И НЕ ТаблицаТовары.Отменено
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.ДатаОтгрузки                    КАК Период,
		|	ТаблицаТовары.ДатаОтгрузки                    КАК ДатаОтгрузки,
		|
		|	ТаблицаТовары.Номенклатура                    КАК Номенклатура,
		|	ТаблицаТовары.Характеристика                  КАК Характеристика,
		|	&Склад                                        КАК Склад,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|			&Назначение
		|		КОНЕЦ                                            КАК Назначение,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
		|			ТаблицаТовары.Количество
		|		КОНЕЦ                                            КАК КоличествоИзЗаказов,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|			ТаблицаТовары.Количество
		|		КОНЕЦ                                            КАК КоличествоПодЗаказ,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
		|			ТаблицаТовары.Количество
		|		КОНЕЦ                                            КАК КоличествоНеобеспечено
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И (&Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтклиентов.КОбеспечению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтклиентов.КОтгрузке),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтклиентов.Выполнена),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтклиентов.Отклонена))
		|
		|			И ТаблицаТовары.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
		|
		|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;

	ПолноеИмяДокумента = "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрам",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	
	Если ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru='В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';uk='У документі %ПолноеИмяДокумента% не реалізована адаптація тексту запиту формування рухів по регістру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;

КонецФункции

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если ПраваПользователяПовтИсп.СамооблуживаниеПросмотрДокументовУсловийПродаж() Тогда
		
		// Заявка на возврат
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЗаявкаНаВозврат";
		КомандаПечати.Представление = НСтр("ru='Заявка на возврат';uk='Заявка на повернення'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Счет на оплату
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор = "СчетНаОплату";
		КомандаПечати.Представление = НСтр("ru='Счет на оплату';uk='Рахунок на оплату'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Счет на оплату
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор = "СчетНаОплату";
		КомандаПечати.Представление = НСтр("ru='Счет на оплату с факсимиле';uk='Рахунок на оплату з факсиміле'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		
		Если ПолучитьФункциональнуюОпцию("НеВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Заявка на возврат
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Идентификатор = "ЗаявкаНаВозврат";
			КомандаПечати.Представление = НСтр("ru='Заявка на возврат';uk='Заявка на повернення'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Заявка на возврат (не выводить скидки)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Идентификатор = "ЗаявкаНаВозврат";
			КомандаПечати.Представление = НСтр("ru='Заявка на возврат (не выводить скидки)';uk='Заявка на повернення (не виводити знижки)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Заявка на возврат (выводить скидки)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Идентификатор = "ЗаявкаНаВозврат";
			КомандаПечати.Представление = НСтр("ru='Заявка на возврат (выводить скидки)';uk='Заявка на повернення (виводити знижки)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
		КонецЕсли;
		
		// Заявление на возврат товаров
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаявленияНаВозвратТоваровОтКлиента";
		КомандаПечати.Идентификатор = "ЗаявлениеНаВозвратТоваровОтКлиента";
		КомандаПечати.Представление = НСтр("ru='Заявление на возврат товаров';uk='Заява на повернення товарів'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		Если ПолучитьФункциональнуюОпцию("НеВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Счет на оплату
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru='Счет на оплату';uk='Рахунок на оплату'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Счет на оплату (не выводить скидки)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru='Счет на оплату (не выводить скидки)';uk='Рахунок на оплату (не виводити знижки)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Счет на оплату (выводить скидки)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru='Счет на оплату (выводить скидки)';uk='Рахунок на оплату (виводити знижки)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("НеВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Счет на оплату
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru='Счет на оплату с факсимиле';uk='Рахунок на оплату з факсиміле'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Счет на оплату (не выводить скидки)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru='Счет на оплату с факсимиле (не выводить скидки)';uk='Рахунок на оплату з факсиміле (не виводити знижки)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
			// Счет на оплату (выводить скидки)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru='Счет на оплату с факсимиле (выводить скидки)';uk='Рахунок на оплату з факсиміле (виводити знижки)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("НастройкаТопологииСкладов,ЧтениеИнформацииПоНоменклатуре") Тогда
		// Задание на отбор товаров
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров";
		КомандаПечати.Идентификатор = "ЗаданиеНаОтборРазмещениеТовара";
		КомандаПечати.Представление = НСтр("ru='Задание на отбор товаров';uk='Завдання на відбір товарів'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ИмяФормы", "ЗаданиеНаОтбор");
	КонецЕсли;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаВозврат") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявкаНаВозврат",
			НСтр("ru='Заявка на возврат';uk='Заявка на повернення'"),
			СформироватьПечатнуюФормуЗаявкиНаВозврат(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода),,,,Истина);
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуЗаявкиНаВозврат(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьСкидки") Тогда
		ОтображатьСкидки = ПараметрыПечати.ОтображатьСкидки;
	Иначе
		ОтображатьСкидки = (Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
			<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	КонецЕсли; 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ОтображатьСкидки", ОтображатьСкидки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|   ИСТИНА КАК УчитыватьНДС,
	|   ВозвращаемыеТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ВозвращаемыеТовары
	|ГДЕ
	|	ВозвращаемыеТовары.Ссылка В(&МассивОбъектов) И ВозвращаемыеТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|СГРУППИРОВАТЬ ПО ВозвращаемыеТовары.Ссылка 
	|;
	|ВЫБРАТЬ
    |	ЗаявкаНаВозврат.Ссылка КАК Ссылка,
	|	ЗаявкаНаВозврат.Номер КАК Номер,
	|	ЗаявкаНаВозврат.Дата КАК Дата,
	|	ЗаявкаНаВозврат.Организация КАК Организация,
	|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС,
	|	ЗаявкаНаВозврат.Организация.Префикс КАК Префикс,
	|	ЗаявкаНаВозврат.Контрагент КАК Контрагент,
	|	ЗаявкаНаВозврат.БанковскийСчет КАК БанковскийСчет,
	|	ЗаявкаНаВозврат.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	ЗаявкаНаВозврат.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаявкаНаВозврат.Валюта КАК Валюта,
	|	ЗаявкаНаВозврат.Менеджер.ФизическоеЛицо КАК Менеджер,
	|	ЗаявкаНаВозврат.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаявкаНаВозврат.СуммаДокумента КАК СуммаКВозврату,
	|	ЗаявкаНаВозврат.Договор КАК Договор,
	|	ЗаявкаНаВозврат.Договор.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ЗаявкаНаВозврат.ДокументРеализации КАК Основание,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратОтКомиссионера,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратОтРозничногоПокупателя
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
	|		ПО ЗаявкаНаВозврат.Ссылка = ТаблицаУчитыватьНДС.Ссылка
	|ГДЕ
	|	ЗаявкаНаВозврат.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|
	|	ВариантыКомплектацииНоменклатуры.Ссылка                                    КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора                                                 КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                                               КАК ХарактеристикаНабора,
	|
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.НоменклатураОприходование КАК НоменклатураОприходование,
	|	Таблица.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
	|	Таблица.Порча КАК Порча,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Количество КАК Количество,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.Отменено КАК Отменено,
	|	Таблица.Цена КАК Цена,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА
	|			Таблица.Ссылка.ВернутьМногооборотнуюТару
	|			И Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|ГДЕ
	|	Не Таблица.Отменено	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                 КАК Ссылка,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	МИНИМУМ(Таблица.НомерСтроки)   КАК НомерСтроки,
	|	СУММА(Таблица.Сумма)                       КАК Сумма,
	|	СУММА(Таблица.СуммаНДС)                    КАК СуммаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	Товары КАК Таблица
	|
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                                    КАК Ссылка,
	|	Товары.ВариантКомплектацииНоменклатуры           КАК ВариантКомплектацииНоменклатуры,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|		И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК КоличествоПоУмолчанию,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	Товары КАК Товары
	|
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка                                                                                КАК Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка                                           КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец                                  КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика                            КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ОсновнаяКомплектующая,
	|	NULL КАК СтавкаНДС,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПоУмолчанию,
	|	0 КАК Количество
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ Товары КАК Т) КАК Т
	|		ПО ИСТИНА
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ Товары КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.СтавкаНДС
	|			ИНАЧЕ null
	|		КОНЕЦ) КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0 И Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНаборыДополнительно.ВариантКомплектацииНоменклатуры,
	|
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|	КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА
	|			ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			ИНАЧЕ
	|				ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			И ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям)) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.НоменклатураНабора                КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора              КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки                       КАК НомерСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	Таблица.Сумма                                 КАК Сумма,
	|	Таблица.СуммаНДС                              КАК СуммаНДС,
	|	ВременнаяТаблицаНаборыДополнительно.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|		И Таблица.Ссылка = ВременнаяТаблицаНаборыДополнительно.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора                        КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                      КАК ХарактеристикаНабора,
	|	Таблица.ЭтоКомплектующие                          КАК ЭтоКомплектующие,
	|	Таблица.ЭтоНабор                                  КАК ЭтоНабор,
	|
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Таблица.Порча
	|			ТОГДА Таблица.НоменклатураОприходование
	|		ИНАЧЕ Таблица.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Таблица.Порча
	|			ТОГДА Таблица.ХарактеристикаОприходование.НаименованиеПолное
	|		ИНАЧЕ Таблица.Характеристика.НаименованиеПолное
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Таблица.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	Таблица.Номенклатура.Код КАК Код,
	|	Таблица.Номенклатура.Артикул КАК Артикул,
	|	Таблица.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Таблица.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Таблица.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Таблица.Упаковка)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Таблица.КоличествоУпаковок КАК Количество,
	|	Таблица.Цена КАК Цена,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	|	Таблица.ЭтоВозвратнаяТара КАК ЭтоВозвратнаяТара
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Таблица.Ссылка,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|		Таблица.НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		Ложь КАК ЭтоНабор,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.НомерСтроки
	|		ИНАЧЕ
	|			Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		Таблица.Номенклатура,
	|		Таблица.НоменклатураОприходование,
	|		Таблица.Количество,
	|		Таблица.КоличествоУпаковок,
	|		Таблица.Цена,
	|		Таблица.Сумма,
	|		Таблица.СуммаНДС,
	|		Таблица.СтавкаНДС,
	|		Таблица.Характеристика,
	|		Таблица.ХарактеристикаОприходование,
	|		Таблица.Упаковка,
	|		Таблица.ЭтоВозвратнаяТара,
	|		Таблица.Порча
	|	ИЗ
	|		Товары КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|			 И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|			 И ВременнаяТаблицаНаборы.Ссылка = Таблица.Ссылка
	|
	|	ГДЕ
	|		Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ (Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	        И ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие),
	|	                                                                              ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаНаборы.Ссылка,
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах,
	|		ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		Ложь КАК ЭтоКомплектующие,
	|		Истина КАК ЭтоНабор,
	|		ВременнаяТаблицаНаборы.НомерСтроки,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		Неопределено,
	|		ВременнаяТаблицаНаборы.Количество,
	|		ВременнаяТаблицаНаборы.КоличествоУпаковок,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.Сумма / ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК Цена,
	|		ВременнаяТаблицаНаборы.Сумма КАК Сумма,
	|		ВременнаяТаблицаНаборы.СуммаНДС,
	|		ВременнаяТаблицаНаборы.СтавкаНДС,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		Неопределено,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		Ложь,
	|		Ложь
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|	ГДЕ
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор),
	|	                                                                        ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие))
	|) КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.НомерСтроки,
	|	ЭтоНабор УБЫВ
	|;
	|УНИЧТОЖИТЬ Товары
	|;
	|УНИЧТОЖИТЬ ВременнаяТаблицаНаборы
	|;
	|УНИЧТОЖИТЬ ВременнаяТаблицаНаборыПодготовка
	|;
	|УНИЧТОЖИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|;
	|УНИЧТОЖИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|;
	|УНИЧТОЖИТЬ ВременнаяТаблицаНаборыДополнительно
	|;
	|
	|ВЫБРАТЬ
	|
	|	Таблица.Ссылка КАК Ссылка,
	|
	|	ВариантыКомплектацииНоменклатуры.Ссылка                                    КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора                                                 КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                                               КАК ХарактеристикаНабора,
	|
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Количество КАК Количество,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки ТОГДА
	|			Цена
	|		ИНАЧЕ Таблица.Сумма/Таблица.КоличествоУпаковок 
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки ТОГДА
	|			Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСкидки,
	|	Таблица.Сумма + Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	|	Таблица.Упаковка,
	|	Таблица.ДатаОтгрузки,
	|	Таблица.Отменено КАК Отменено,
	|	Таблица.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА
	|			Таблица.Ссылка.ВернутьМногооборотнуюТару
	|			И Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|ГДЕ
	|	Не Таблица.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                 КАК Ссылка,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	МИНИМУМ(Таблица.НомерСтроки)   КАК НомерСтроки,
	|	СУММА(Таблица.Сумма)                       КАК Сумма,
	|	СУММА(Таблица.СуммаНДС)                    КАК СуммаНДС,
	|	СУММА(Таблица.СуммаСкидки)                 КАК СуммаСкидки,
	|	СУММА(Таблица.Сумма - Таблица.СуммаСкидки) КАК СуммаБезСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	Товары КАК Таблица
	|
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                                    КАК Ссылка,
	|	Товары.ВариантКомплектацииНоменклатуры           КАК ВариантКомплектацииНоменклатуры,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|		И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК КоличествоПоУмолчанию,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	Товары КАК Товары
	|
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка                                                                                КАК Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка                                           КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец                                  КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика                            КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ОсновнаяКомплектующая,
	|	NULL КАК СтавкаНДС,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПоУмолчанию,
	|	0 КАК Количество
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ Товары КАК Т) КАК Т
	|		ПО ИСТИНА
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ Товары КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.СтавкаНДС
	|			ИНАЧЕ null
	|		КОНЕЦ) КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0 И Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНаборыДополнительно.ВариантКомплектацииНоменклатуры,
	|
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|	КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА
	|			ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			ИНАЧЕ
	|				ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			И ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям)) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.НоменклатураНабора                КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора              КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки                       КАК НомерСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	Таблица.Сумма                                 КАК Сумма,
	|	Таблица.СуммаНДС                              КАК СуммаНДС,
	|	Таблица.СуммаСкидки                           КАК СуммаСкидки,
	|	Таблица.СуммаБезСкидки                        КАК СуммаБезСкидки,
	|	ВременнаяТаблицаНаборыДополнительно.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|		И Таблица.Ссылка = ВременнаяТаблицаНаборыДополнительно.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора                        КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                      КАК ХарактеристикаНабора,
	|	Таблица.ЭтоКомплектующие                          КАК ЭтоКомплектующие,
	|	Таблица.ЭтоНабор                                  КАК ЭтоНабор,
	|
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Номенклатура.Код КАК Код,
	|	Таблица.Номенклатура.Артикул КАК Артикул,
	|	Таблица.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Таблица.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Таблица.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Таблица.Упаковка)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Таблица.КоличествоУпаковок КАК Количество,
	|	Таблица.Цена,
	|	Таблица.СуммаСкидки,
	|	Таблица.СуммаБезСкидки,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Таблица.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Таблица.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	Таблица.Отменено КАК Отменено,
	|	Таблица.Содержание КАК Содержание,
	|	Таблица.ЭтоВозвратнаяТара
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Таблица.Ссылка,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|		Таблица.НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		Ложь КАК ЭтоНабор,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.НомерСтроки
	|		ИНАЧЕ
	|			Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		Таблица.Номенклатура,
	|		Таблица.Количество,
	|		Таблица.КоличествоУпаковок,
	|		Таблица.Цена,
	|		Таблица.Сумма,
	|		Таблица.СуммаНДС,
	|		Таблица.Характеристика,
	|		Таблица.Упаковка,
	|		Таблица.СуммаСкидки,
	|		Таблица.СуммаБезСкидки,
	|		Таблица.ЭтоВозвратнаяТара,
	|		Таблица.СтавкаНДС,
	|		Таблица.ДатаОтгрузки,
	|		Таблица.Отменено,
	|		Таблица.Содержание
	|	ИЗ
	|		Товары КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|			 И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|			 И ВременнаяТаблицаНаборы.Ссылка = Таблица.Ссылка
	|
	|	ГДЕ
	|		Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ (Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	        И ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие),
	|	                                                                              ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаНаборы.Ссылка,
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах,
	|		ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		Ложь КАК ЭтоКомплектующие,
	|		Истина КАК ЭтоНабор,
	|		ВременнаяТаблицаНаборы.НомерСтроки,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.Количество,
	|		ВременнаяТаблицаНаборы.КоличествоУпаковок,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.СуммаБезСкидки / ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК Цена,
	|		ВременнаяТаблицаНаборы.Сумма КАК Сумма,
	|		ВременнаяТаблицаНаборы.СуммаНДС,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		ВременнаяТаблицаНаборы.СуммаСкидки,
	|		ВременнаяТаблицаНаборы.СуммаБезСкидки,
	|		Ложь,
	|		ВременнаяТаблицаНаборы.СтавкаНДС,
	|		Неопределено,
	|		Ложь,
	|		""""
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|	ГДЕ
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор),
	|	                                                                        ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие))
	|) КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.НомерСтроки,
	|	ЭтоНабор УБЫВ
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Таблица.Упаковка",
		"Таблица.Номенклатура"));
	
	ЗаполнитьТабличныйДокументЗаявкиНаВозврат(ТабличныйДокумент, Запрос, ПараметрыВывода);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументЗаявкиНаВозврат(ТабличныйДокумент, Запрос, ПараметрыВыводаПФ)
	
	КодЯзыкаПечать = ПараметрыВыводаПФ.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаВозвратТоваровОтКлиента_ЗаявкаНаВозврат";
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	ДанныеПечати = ПакетРезультатовЗапроса[1].Выбрать();
	РезультатПоТабличнойЧастиВозвращаемыеТовары = ПакетРезультатовЗапроса[8];
	РезультатПоТабличнойЧастиЗаменяющиеТовары   = ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.Количество() - 1];
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ПервыйДокумент = Истина;
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПФ_MXL_ЗаявкаНаВозврат", КодЯзыкаПечать);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
	ОбластьПокупатель = Макет.ПолучитьОбласть("Покупатель");
	ОбластьДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	ОбластьПодвалЗаказа = Макет.ПолучитьОбласть("ПодвалЗаказа");
	
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		// В случае если не надо выводить колонку для отображения кодов
		// 		раздвинем колонку товаров на ширину колонки кодов
		ОбластьПервойКолонкиТовара = Макет.Область("ПерваяКолонкаТовара");
		ОбластьПервойКолонкиТовара.ШиринаКолонки = ОбластьПервойКолонкиТовара.ШиринаКолонки + 12;
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		СтруктураПоиска      = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ЗаменяющиеТоварыТЧ   = РезультатПоТабличнойЧастиЗаменяющиеТовары.Выгрузить();
		ВозвращаемыеТоварыТЧ = РезультатПоТабличнойЧастиВозвращаемыеТовары.Выгрузить();
		
		ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ЗаменяющиеТоварыТЧ.НайтиСтроки(СтруктураПоиска), ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки, КодЯзыкаПечать);
		ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
		
		// Получение флага необходимости вывода строк заменяющих товаров
		ЕстьТоварыНаЗамену = ЗаменяющиеТоварыТЧ.НайтиСтроки(Новый Структура("Отменено, Ссылка", Ложь, ДанныеПечати.Ссылка)).Количество() > 0;
		
		// Вывод области заголовка печатной формы
		ВидДокумента = "";
		Если ЕстьТоварыНаЗамену Тогда
			ВидДокумента = НСтр("ru='Заявка на замену';uk= 'Заявка на заміну'", КодЯзыкаПечать);
		Иначе
			ВидДокумента = НСтр("ru='Заявка на возврат';uk= 'Заявка на повернення'", КодЯзыкаПечать);
		КонецЕсли;
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, ВидДокумента, КодЯзыкаПечать);
		
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ОбластьЗаголовок.Параметры.Заполнить(СтруктураДанныхШапки);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Вывод области поставщика
		СтруктураДанныхПоставщик = Новый Структура;
        СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика",
		    ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать));
		СтруктураДанныхПоставщик.Вставить("РеквизитыПоставщика",
		    ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов",,КодЯзыкаПечать));
		ОбластьПоставщик.Параметры.Заполнить(СтруктураДанныхПоставщик);
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		
		// Вывод области покупателя
		СтруктураДанныхПокупатель = Новый Структура;
        СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		СтруктураДанныхПокупатель.Вставить("ПредставлениеПокупателя",
		    ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование",,КодЯзыкаПечать));
		СтруктураДанныхПокупатель.Вставить("РеквизитыПокупателя",
		    ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны",,КодЯзыкаПечать));
		ОбластьПокупатель.Параметры.Заполнить(СтруктураДанныхПокупатель);
		ТабличныйДокумент.Вывести(ОбластьПокупатель);
		
		// Выводим дополнительно информацию
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати, Основание,";		
		МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(ДанныеПечати, СписокДополнительныхПараметров, КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;		
		
		
		// Вывод области таблицы возвращаемых товаров
		ПараметрыВывода = Новый Структура("ВыводитьКоды, ТолькоКоличество, УчитыватьНДС, ЦенаВключаетНДС, ВыводитьПодвалНДС, ЕстьСкидки",
			ВыводитьКоды, ДанныеПечати.ВозвратОтКомиссионера, ДанныеПечати.УчитыватьНДС, ДанныеПечати.ЦенаВключаетНДС, Ложь, Ложь
		);    
		ВывестиТаблицуТоваровВТабличныйДокументЗаявкиНаВозврат(
			ТабличныйДокумент,
			Макет,
			ВозвращаемыеТоварыТЧ,
			КолонкаКодов,
			НСтр("ru='Возвращаемый товар';uk= 'Товар, що повертається'", КодЯзыкаПечать),
			ДанныеПечати,
			ПараметрыВывода,
			КодЯзыкаПечать
		);
		
		// Вывод области таблицы заменяющих товаров
		Если ЕстьТоварыНаЗамену Тогда
			
			ПараметрыВывода = Новый Структура("ВыводитьКоды, ТолькоКоличество, УчитыватьНДС, ЦенаВключаетНДС, ВыводитьПодвалНДС, ЕстьСкидки, ЗаголовокСкидки",
				ВыводитьКоды, Ложь, ДанныеПечати.УчитыватьНДС, ДанныеПечати.ЦенаВключаетНДС, Истина, НЕ ДанныеПечати.ВозвратОтКомиссионера И ЕстьСкидки, ЗаголовокСкидки
			);
			ВывестиТаблицуТоваровВТабличныйДокументЗаявкиНаВозврат(
				ТабличныйДокумент,
				Макет,
				ЗаменяющиеТоварыТЧ,
				КолонкаКодов,
				НСтр("ru='Заменяющий товар';uk= 'Товар, яким заміняється'", КодЯзыкаПечать),
				ДанныеПечати,
				ПараметрыВывода,
				КодЯзыкаПечать
			);
			
		КонецЕсли;
		
		// Вывод дополнительной информации
		Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
			ОбластьДополнительнаяИнформация.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьДополнительнаяИнформация);
		КонецЕсли;
		
		// Вывод подвала заказа
		СтруктураДанныхМенеджер = Новый Структура;
		СтруктураДанныхМенеджер.Вставить("Менеджер", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер, ДанныеПечати.Дата));
		ОбластьПодвалЗаказа.Параметры.Заполнить(СтруктураДанныхМенеджер);
		ТабличныйДокумент.Вывести(ОбластьПодвалЗаказа);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

// Добавляет в табличный документ заявки на возврат таблицу товаров
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент
//	Макет - ТабличныйДокумент
//	Таблица - ТаблицаЗначений - Таблиза значений из запроса по документу ЗаявкаНаВозвратТоваровОтКлиента
//	ИмяКолонкиКодов - Строка - Наименование дополнительной колонки кодов, "Неопределено" в случае если колонку выводить не надо
//	ИмяКолонкиТоваров - Строка - Наименование колонки номенклатуры
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Выборка по данным документа
//	ПараметрыВывода - Структура - Структура параметров вывода. Ключи: "ВыводитьКоды", "ТолькоКоличество", "УчитыватьНДС", "ЦенаВключаетНДС", "ВыводитьПодвалНДС", "ЕстьСкидки"
//
Процедура ВывестиТаблицуТоваровВТабличныйДокументЗаявкиНаВозврат(ТабличныйДокумент, 
	Макет, Таблица, ИмяКолонкиКодов, ИмяКолонкиТоваров, 
	ДанныеПечати, ПараметрыВывода, КодЯзыкаПечать)
	
	Валюта = ДанныеПечати.Валюта;
	ПоказыватьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();	
	
	// Получение суффикса имен областей
	Если ПараметрыВывода.ТолькоКоличество Тогда
		ИмяОбласти = "БезСумм";
	Иначе
		ИмяОбласти = ?(ПараметрыВывода.УчитыватьНДС И ПоказыватьНДС, "СНДС", "") + ?(ПараметрыВывода.ЕстьСкидки, "СоСкидкой", "");
	КонецЕсли;
	
	// Получение флага необходимости учитывать отмененные товары
	УчитыватьОтмены = (Таблица.Колонки.Найти("Отменено") <> Неопределено);
	
	
	ОбластьШапкаНомер  = Макет.ПолучитьОбласть("ШапкаТаблицы"  + ИмяОбласти + "|КолонкаНомерСтроки");
	ОбластьПодвалНомер = Макет.ПолучитьОбласть("ПодвалТаблицы" + ИмяОбласти + "|КолонкаНомерСтроки");
	ОбластьНДСНомер    = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаНомерСтроки");
	
	ОбластьШапкаКод  = Макет.ПолучитьОбласть("ШапкаТаблицы" + ИмяОбласти + "|КолонкаКод");
	ОбластьПодвалКод = Макет.ПолучитьОбласть("ПодвалТаблицы" + ИмяОбласти + "|КолонкаКод");
	ОбластьНДСКод    = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКод");
	
	ОбластьШапкаДанные  = Макет.ПолучитьОбласть("ШапкаТаблицы"  + ИмяОбласти + "|КолонкаДанные");
	ОбластьПодвалДанные = Макет.ПолучитьОбласть("ПодвалТаблицы" + ИмяОбласти + "|КолонкаДанные");
	ОбластьНДСДанные    = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаДанные");
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ОбластьСтрокаНомерСтандарт  = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "|КолонкаНомерСтроки");
	ОбластьСтрокаДанныеСтандарт = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "|КолонкаДанные");
	ОбластьСтрокаКодСтандарт    = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "|КолонкаКод");
	
	ИспользоватьНаборы = Ложь;
	Если Таблица.Колонки.Найти("ЭтоНабор") <> Неопределено Тогда
		ИспользоватьНаборы = Истина;
		
		ОбластьСтрокаНомерНабор  = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "Набор" + "|КолонкаНомерСтроки");
		ОбластьСтрокаДанныеНабор = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "Набор" + "|КолонкаДанные");
		ОбластьСтрокаКодНабор    = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "Набор" + "|КолонкаКод");
		
		ОбластьСтрокаНомерКомплектующие  = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "Комплектующие" + "|КолонкаНомерСтроки");
		ОбластьСтрокаДанныеКомплектующие = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "Комплектующие" + "|КолонкаДанные");
		ОбластьСтрокаКодКомплектующие    = Макет.ПолучитьОбласть("СтрокаТаблицы" + ИмяОбласти + "Комплектующие" + "|КолонкаКод");
	
	КонецЕсли;
	
	ПустыеДанные = НаборыСервер.ПустыеДанные();
	
	// Вывод шапки таблицы
	ТабличныйДокумент.Вывести(ОбластьШапкаНомер);
	Если ПараметрыВывода.ВыводитьКоды Тогда
		СтруктураДанныхКоды = Новый Структура("ИмяКолонкиКодов", ИмяКолонкиКодов);
		ОбластьШапкаКод.Параметры.Заполнить(СтруктураДанныхКоды);
		ТабличныйДокумент.Присоединить(ОбластьШапкаКод);
	КонецЕсли;
	СтруктураДанныхШапки = Новый Структура("ИмяКолонкиТоваров", ИмяКолонкиТоваров);
	Если ПараметрыВывода.ЕстьСкидки Тогда
		СтруктураДанныхШапки.Вставить("Скидка", ПараметрыВывода.ЗаголовокСкидки.Скидка);
		СтруктураДанныхШапки.Вставить("СуммаБезСкидки", ПараметрыВывода.ЗаголовокСкидки.СуммаСкидки);
	КонецЕсли;
	ОбластьШапкаДанные.Параметры.Заполнить(СтруктураДанныхШапки);
	ТабличныйДокумент.Присоединить(ОбластьШапкаДанные);
	
	// Создание структуры итогов для таблицы значений
	СтруктураИтогов = Новый Структура;
	Если НЕ ПараметрыВывода.ТолькоКоличество Тогда
		СтруктураИтогов.Вставить("Всего", 0);
	КонецЕсли;
	Если ПараметрыВывода.УчитыватьНДС Тогда
		СтруктураИтогов.Вставить("ВсегоНДС", 0);
	КонецЕсли;
	Если ПараметрыВывода.ЕстьСкидки Тогда
		СтруктураИтогов.Вставить("ВсегоБезСкидки", 0);
		СтруктураИтогов.Вставить("ВсегоСкидка", 0);
	КонецЕсли;
	
	// Получние соответствия ставок НДС
	Если ПараметрыВывода.УчитыватьНДС Тогда
		СоответствиеСтавокНДС = ФормированиеПечатныхФорм.ПолучитьСоответствиеСтавокНДС();
	КонецЕсли;
	
	СтруктураПоиска      = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
	ТЧ = Таблица.НайтиСтроки(СтруктураПоиска);
	
	// Вывод строк таблицы товаров
	НомерСтроки = 0;
	Для Каждого Строка Из ТЧ Цикл
		
		Если УчитыватьОтмены И Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
	
		Если НаборыСервер.ИспользоватьОбластьНабор(Строка, ИспользоватьНаборы) Тогда
			ОбластьСтрокаНомер  = ОбластьСтрокаНомерНабор;
			ОбластьСтрокаДанные = ОбластьСтрокаДанныеНабор;
			ОбластьСтрокаКод    = ОбластьСтрокаКодНабор;
		ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(Строка, ИспользоватьНаборы) Тогда
			ОбластьСтрокаНомер  = ОбластьСтрокаНомерКомплектующие;
			ОбластьСтрокаДанные = ОбластьСтрокаДанныеКомплектующие;
			ОбластьСтрокаКод    = ОбластьСтрокаКодКомплектующие;
		Иначе
			ОбластьСтрокаНомер  = ОбластьСтрокаНомерСтандарт;
			ОбластьСтрокаДанные = ОбластьСтрокаДанныеСтандарт;
			ОбластьСтрокаКод    = ОбластьСтрокаКодСтандарт;
		КонецЕсли;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(Строка, ИспользоватьНаборы) Тогда
			УстановитьПараметр(ОбластьСтрокаНомер, "НомерСтроки", Неопределено);
		Иначе
			НомерСтроки = НомерСтроки + 1;
			УстановитьПараметр(ОбластьСтрокаНомер, "НомерСтроки", НомерСтроки);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьСтрокаНомер);
		
		// Вывод колонки кода/артикула
		Если ПараметрыВывода.ВыводитьКоды Тогда
			СтруктураДанныхАртикул = Новый Структура("Артикул", Строка[ИмяКолонкиКодов]);
			ОбластьСтрокаКод.Параметры.Заполнить(СтруктураДанныхАртикул);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаКод);
		КонецЕсли;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(Строка, ИспользоватьНаборы) Тогда
			ОбластьСтрокаДанные.Параметры.Заполнить(ПустыеДанные);
		Иначе
			ОбластьСтрокаДанные.Параметры.Заполнить(Строка);
		КонецЕсли;
		
		ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(Строка, ИспользоватьНаборы);
		
		СтруктураДанныхСтроки = Новый Структура;
		Если  ИмяКолонкиТоваров = НСтр("ru='Заменяющий товар';uk= 'Товар, яким заміняється'", КодЯзыкаПечать) Тогда
			Товар = ПрефиксИПостфикс.Префикс + НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Строка.НаименованиеПолное,
				Строка.Характеристика,
				,
				,
				Строка.Содержание,
				Строка.ЭтоВозвратнаяТара,
				КодЯзыкаПечать
			) + ПрефиксИПостфикс.Постфикс;
			СтруктураДанныхСтроки.Вставить("Товар", Товар);
			Если ПараметрыВывода.ЕстьСкидки Тогда
				СтруктураДанныхСтроки.Вставить("СуммаСкидки", 
					?(ПараметрыВывода.ЗаголовокСкидки.ТолькоНаценка,
					- ОбластьСтрокаДанные.Параметры.СуммаСкидки,
					ОбластьСтрокаДанные.Параметры.СуммаСкидки));
			КонецЕсли; 
		Иначе
			Товар = ПрефиксИПостфикс.Префикс + НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Строка.НаименованиеПолное,
				Строка.Характеристика,
				,
				,
				,
				Строка.ЭтоВозвратнаяТара,
				КодЯзыкаПечать
			) + ПрефиксИПостфикс.Постфикс;
			СтруктураДанныхСтроки.Вставить("Товар", Товар);
		КонецЕсли;	
		ОбластьСтрокаДанные.Параметры.Заполнить(СтруктураДанныхСтроки);
		Если НЕ ПараметрыВывода.ТолькоКоличество Тогда
			Если ПараметрыВывода.УчитыватьНДС И ПоказыватьНДС Тогда
				ОбластьСтрокаДанные.Параметры.СтавкаНДС = Локализация.ПолучитьЛокализованноеПредставление(Строка.СтавкаНДС, КодЯзыкаПечать);
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьСтрокаДанные);
		
		// Накопление итогов
		Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(Строка, ИспользоватьНаборы) Тогда
			Если НЕ ПараметрыВывода.ТолькоКоличество Тогда
				СтруктураИтогов.Всего = СтруктураИтогов.Всего + Строка.Сумма;
				Если ПараметрыВывода.УчитыватьНДС Тогда
					СтруктураИтогов.ВсегоНДС = СтруктураИтогов.ВсегоНДС + Строка.СуммаНДС;
					
					СуммаПоТекущейСтавкеНДС = СоответствиеСтавокНДС[Строка.СтавкаНДС];
					Если СуммаПоТекущейСтавкеНДС <> Неопределено Тогда
						СоответствиеСтавокНДС[Строка.СтавкаНДС] = СуммаПоТекущейСтавкеНДС + Строка.СуммаНДС;
					КонецЕсли;
					
				КонецЕсли;
				Если ПараметрыВывода.ЕстьСкидки Тогда
					СтруктураИтогов.ВсегоБезСкидки = СтруктураИтогов.ВсегоБезСкидки + Строка.СуммаБезСкидки;
					СтруктураИтогов.ВсегоСкидка = СтруктураИтогов.ВсегоСкидка + Строка.СуммаСкидки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод подвала таблицы
	ТабличныйДокумент.Вывести(ОбластьПодвалНомер);
	Если ПараметрыВывода.ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьПодвалКод);
	КонецЕсли;
	ОбластьПодвалДанные.Параметры.Заполнить(СтруктураИтогов);
	Если ПараметрыВывода.ЕстьСкидки Тогда
		СтруктураДанныхПодвал = Новый Структура;
		СтруктураДанныхПодвал.Вставить("ВсегоСкидка", ?(ПараметрыВывода.ЗаголовокСкидки.ТолькоНаценка,-СтруктураИтогов.ВсегоСкидка, СтруктураИтогов.ВсегоСкидка));
		СтруктураДанныхПодвал.Вставить("ВсегоБезСкидки", СтруктураИтогов.ВсегоБезСкидки);
		ОбластьПодвалДанные.Параметры.Заполнить(СтруктураДанныхПодвал);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьПодвалДанные);
	
	// Вывод подвала НДС
	Если ПараметрыВывода.ВыводитьПодвалНДС И НЕ ПараметрыВывода.ТолькоКоличество Тогда
		Если ПараметрыВывода.УчитыватьНДС Тогда
			Для Каждого Ставка Из СоответствиеСтавокНДС Цикл
				
				Если Ставка.Значение = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьНДСНомер);
				Если ПараметрыВывода.ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьНДСКод);
				КонецЕсли;
				СтруктураДанныхНДС = Новый Структура;
				СтруктураДанныхНДС.Вставить("НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(Ставка.Ключ, ПараметрыВывода.ЦенаВключаетНДС, КодЯзыкаПечать));
				СтруктураДанныхНДС.Вставить("ВсегоНДС", Ставка.Значение);
				ОбластьНДСДанные.Параметры.Заполнить(СтруктураДанныхНДС);
				ТабличныйДокумент.Присоединить(ОбластьНДСДанные);
				
			КонецЦикла;
		Иначе
			ТабличныйДокумент.Вывести(ОбластьНДСНомер);
			Если ПараметрыВывода.ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьНДСКод);
			КонецЕсли;
			СтруктураДанныхНДС = Новый Структура;
			СтруктураДанныхНДС.Вставить("НДС", НСтр("ru='Без налога (НДС)';uk= 'Без податку (ПДВ)'", КодЯзыкаПечать));
			СтруктураДанныхНДС.Вставить("ВсегоНДС", "-");
			ОбластьНДСДанные.Параметры.Заполнить(СтруктураДанныхНДС);
			ТабличныйДокумент.Присоединить(ОбластьНДСДанные);
		КонецЕсли;
	КонецЕсли;
	
	// Вывод итоговой суммы
	Если ПараметрыВывода.ТолькоКоличество Тогда
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%';uk= 'Всього найменувань %Количество%'", КодЯзыкаПечать);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		СуммаПрописью = "";
	Иначе
		СуммаКПрописи = СтруктураИтогов.Всего + ?(ПараметрыВывода.УчитыватьНДС И НЕ ПараметрыВывода.ЦенаВключаетНДС, СтруктураИтогов.ВсегоНДС, 0);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%';uk= 'Всього найменувань %Количество%, на суму %Сумма%'", КодЯзыкаПечать);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Валюта));
		СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Валюта,, КодЯзыкаПечать);
	КонецЕсли;
	СтруктураДанныхИтоговаяСтрока = Новый Структура;
	СтруктураДанныхИтоговаяСтрока.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	СтруктураДанныхИтоговаяСтрока.Вставить("СуммаПрописью", СуммаПрописью);
	ОбластьСуммаПрописью.Параметры.Заполнить(СтруктураДанныхИтоговаяСтрока);
	ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов);
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаявлениеНаВозвратТоваровОтКлиента(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	ВариантыКомплектацииНоменклатуры.Ссылка                                    КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Количество КАК Количество,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.СуммаСНДС КАК Сумма,
	|	ВЫБОР
	|		КОГДА
	|			Таблица.Ссылка.ВернутьМногооборотнуюТару
	|			И Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|
	|ГДЕ
	|	НЕ Таблица.Отменено
	|	И Таблица.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                 КАК Ссылка,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	МИНИМУМ(Таблица.НомерСтроки)   КАК НомерСтроки,
	|	СУММА(Таблица.Сумма)           КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	Товары КАК Таблица
	|
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                                    КАК Ссылка,
	|	Товары.ВариантКомплектацииНоменклатуры           КАК ВариантКомплектацииНоменклатуры,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|		И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	0 КАК КоличествоПоУмолчанию,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	Товары КАК Товары
	|
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка                                                                                КАК Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка                                           КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец                                  КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика                            КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ОсновнаяКомплектующая,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПоУмолчанию,
	|	0 КАК Количество
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ Товары КАК Т) КАК Т
	|		ПО ИСТИНА
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ Товары КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0 И Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНаборыДополнительно.ВариантКомплектацииНоменклатуры,
	
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|	КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА
	|			ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			ИНАЧЕ
	|				ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			И ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям)) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.НоменклатураНабора                КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора              КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки                       КАК НомерСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	Таблица.Сумма                             КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|		И Таблица.Ссылка = ВременнаяТаблицаНаборыДополнительно.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаВозврат.Ссылка КАК Ссылка,
	|	ЗаявкаНаВозврат.Дата КАК Дата,
	|	ЗаявкаНаВозврат.СуммаДокумента КАК Сумма,
	|	ЗаявкаНаВозврат.Валюта КАК Валюта,
	|	ЗаявкаНаВозврат.Организация.НаименованиеСокращенное КАК Организация,
	|	ЗаявкаНаВозврат.ПричинаВозврата КАК ПричинаВозврата,
	|	ЗаявкаНаВозврат.Покупатель КАК Покупатель,
	|	ЗаявкаНаВозврат.ЧекККМ.Номер КАК ЧекККМНомер,
	|	ЗаявкаНаВозврат.ЧекККМ.Дата КАК ЧекККМДата,
	|	ЗаявкаНаВозврат.ДатаРожденияПокупателя КАК ДатаРождения,
	|	ЗаявкаНаВозврат.ВидДокументаПокупателя КАК ВидДокумента,
	|	ЗаявкаНаВозврат.СерияДокументаПокупателя КАК Серия,
	|	ЗаявкаНаВозврат.НомерДокументаПокупателя КАК Номер,
	|	ЗаявкаНаВозврат.ДатаВыдачиДокументаПокупателя КАК ДатаВыдачи,
	|	ЗаявкаНаВозврат.СрокДействияДокументаПокупателя КАК СрокДействия,
	|	ЗаявкаНаВозврат.КемВыданДокументПокупателя КАК КемВыдан
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
	|ГДЕ
	|	ЗаявкаНаВозврат.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора                        КАК НоменклатураНабора,
	|	Товары.ХарактеристикаНабора                      КАК ХарактеристикаНабора,
	|	Товары.ЭтоНабор                                  КАК ЭтоНабор,
	|	Товары.ЭтоКомплектующие                          КАК ЭтоКомплектующие,
	
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура.НаименованиеПолное КАК ПолноеНаименованиеНоменклатуры,
	|	Товары.Характеристика.НаименованиеПолное КАК ПолноеНаименованиеХарактеристики,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка
	|	КОНЕЦ КАК НаименованиеУпаковки,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Сумма КАК Сумма,
	|	Товары.ЭтоВозвратнаяТара КАК ЭтоВозвратнаяТара
	|
	|ИЗ (
	|
	|	ВЫБРАТЬ
	|		Таблица.Ссылка КАК Ссылка,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|		Таблица.НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		Ложь КАК ЭтоНабор,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.НомерСтроки
	|		ИНАЧЕ
	|			Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		Таблица.Номенклатура,
	|		Таблица.Количество,
	|		Таблица.КоличествоУпаковок,
	|		Таблица.Сумма,
	|		Таблица.Характеристика,
	|		Таблица.Упаковка,
	|		Таблица.ЭтоВозвратнаяТара
	|	ИЗ
	|		Товары КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|			 И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|			 И ВременнаяТаблицаНаборы.Ссылка = Таблица.Ссылка
	|
	|	ГДЕ
	|		Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ (Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	        И ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие),
	|	                                                                              ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаНаборы.Ссылка,
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах,
	|		ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		Ложь КАК ЭтоКомплектующие,
	|		Истина КАК ЭтоНабор,
	|		ВременнаяТаблицаНаборы.НомерСтроки,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.Количество,
	|		ВременнаяТаблицаНаборы.КоличествоУпаковок,
	|		ВременнаяТаблицаНаборы.Сумма КАК Сумма,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		Ложь
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|	ГДЕ
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор),
	|	                                                                        ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие))
	|) КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ЭтоНабор УБЫВ	
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	УстановитьПривилегированныйРежим(Истина);
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[6]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.Количество() - 1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("ПеревозчикПартнер");
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
		МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "ЗаявкаНаВозврат", НСтр("ru='Заявка на возврат (выводить скидки)';uk='Заявка на повернення (виводити знижки)'"), 
	                                     "Документ.ЗаявкаНаВозвратТоваровОтКлиента", Неопределено));
		МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "ЗаявкаНаВозврат", НСтр("ru='Заявка на возврат (не выводить скидки)';uk='Заявка на повернення (не виводити знижки)'"), 
	                                     "Документ.ЗаявкаНаВозвратТоваровОтКлиента", Новый Структура("ОтображатьСкидки", Ложь),
	                                     "ЗаявкаНаВозвратБезСкидок"));
	Иначе
		МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "ЗаявкаНаВозврат", НСтр("ru='Заявка на возврат';uk='Заявка на повернення'"), 
	                                     "Документ.ЗаявкаНаВозвратТоваровОтКлиента", Неопределено));
	КонецЕсли;
	
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "ЗаявлениеНаВозвратТоваровОтКлиента", НСтр("ru='Заявление на возврат товаров';uk='Заява на повернення товарів'"), 
	                                     "Обработка.ПечатьЗаявленияНаВозвратТоваровОтКлиента", Неопределено));
	
	ШаблоныСообщенийСервер.ДобавитьВМассивПечатныеФормыСчета(МассивДоступныхПечатныхФорм);
	
	Возврат МассивДоступныхПечатныхФорм;

КонецФункции


Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов)
	
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьСкидки") Тогда
		ОтображатьСкидки = ПараметрыПечати.ОтображатьСкидки;
	Иначе
		ОтображатьСкидки = (Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
			<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|   ИСТИНА КАК УчитыватьНДС,
	|   ВозвращаемыеТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ВозвращаемыеТовары
	|ГДЕ
	|	ВозвращаемыеТовары.Ссылка В(&МассивОбъектов) И ВозвращаемыеТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|СГРУППИРОВАТЬ ПО ВозвращаемыеТовары.Ссылка 
	|;
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	Документы.Организация КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование  КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	
	|	ВЫБОР КОГДА Документы.БанковскийСчет.ИностранныйБанк
	|		ИЛИ Документы.БанковскийСчет.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета
	|		ИЛИ Документы.БанковскийСчетКонтрагента.ИностранныйБанк ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	Документы.БанковскийСчет.СВИФТБанка КАК СВИФТБанка,
	|	Документы.БанковскийСчет.СВИФТБанкаДляРасчетов КАК СВИФТБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.АдресБанка
	|		ИНАЧЕ Документы.БанковскийСчет.Банк.Адрес
	|	КОНЕЦ КАК АдресБанка,
	|	Документы.БанковскийСчет.АдресБанкаДляРасчетов КАК АдресБанкаДляРасчетов,
	|	Документы.БанковскийСчет.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ Документы.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	Документы.БанковскийСчет.НаименованиеБанкаДляРасчетов КАК НаименованиеБанкаДляРасчетов,
	|	Документы.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчета,
	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	"""" КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаЗамены КАК СуммаДокумента,
	|	Документы.ПредставительОрганизации КАК ПредставительОрганизации,
	|	Документы.ПредставительОрганизацииДолжность КАК ПредставительОрганизацииДолжность,
	|	Документы.Грузоотправитель КАК Грузоотправитель,
	|	Документы.Грузополучатель КАК Грузополучатель,
	|	ИСТИНА КАК СчетКВозврату
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Документы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
	|		ПО Документы.Ссылка = ТаблицаУчитыватьНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы
	|		ПО Истина
 	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЭтапыГрафикаОплаты.Ссылка КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа,
	|	ЛОЖЬ КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.СуммаПлатежа <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2														КАК Порядок,
	|	ЭтапыГрафикаОплаты.Ссылка								КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки							КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа							КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару					КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару					КАК СуммаПлатежа,
	|	ИСТИНА													КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.Ссылка.ТребуетсяЗалогЗаТару
	|	И ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки ТОГДА
	|			Товары.Цена
	|		ИНАЧЕ Товары.Сумма/Товары.КоличествоУпаковок 
	|	КОНЕЦ КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Товары.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки ТОГДА
	|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСкидки,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|	ВЫБОР
	|		КОГДА
	|			Товары.Ссылка.ВернутьМногооборотнуюТару
	|			И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара,
	|	Товары.Содержание КАК Содержание
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Отменено = ЛОЖЬ
	|	И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		И (НЕ Товары.Ссылка.ВернутьМногооборотнуюТару ИЛИ Товары.Ссылка.ТребуетсяЗалогЗаТару))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ОтображатьСкидки", ОтображатьСкидки);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[2]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[3]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Функция получает данные для формирования печатной формы справочного размещения товаров в ячейках.
//
Функция ПолучитьДанныеДляПечатнойФормыОтборРазмещениеТоваров(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Ссылка,
	|	Заявка.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА Заявка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Заявка.Дата >= Заявка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке
	|ПОМЕСТИТЬ СкладыДокумента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка
	|ГДЕ
	|	Заявка.Ссылка В(&МассивОбъектов)
	|	И Заявка.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявка.Ссылка,
	|	Заявка.Склад,
	|	ВЫБОР
	|		КОГДА Заявка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Заявка.Дата >= Заявка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыДокумента.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(СкладыДокумента.Ссылка) КАК СсылкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СкладыДокумента.Склад) КАК СкладПредставление,
	|	"""" КАК ПомещениеПредставление,
	|	СкладыДокумента.Склад КАК Склад,
	|	СкладыДокумента.Ссылка.Дата КАК Дата,
	|	СкладыДокумента.Ссылка.Номер КАК Номер,
	|	ЛОЖЬ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА СкладыДокумента.Склад.ИспользоватьАдресноеХранениеСправочно
	|				И (НЕ СкладыДокумента.Склад.ИспользоватьАдресноеХранение
	|					ИЛИ СкладыДокумента.Ссылка.Дата < СкладыДокумента.Склад.ДатаНачалаАдресногоХраненияОстатков)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяСправочноеХранение,
	|	СкладыДокумента.ОрдернаяСхемаПриОтгрузке КАК НарушенаОрдернаяСхема,
	|	СкладыДокумента.Склад.ИспользованиеРабочихУчастков КАК ИспользованиеРабочихУчастков,
	|	СкладыДокумента.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры
	|ИЗ
	|	СкладыДокумента КАК СкладыДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок КАК НаборУпаковок,
	|	СкладыДокумента.Склад КАК Склад,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыДокумента КАК СкладыДокумента
	|		ПО ТаблицаТовары.Ссылка = СкладыДокумента.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ВариантОбеспечения В(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))	
	|	И НЕ СкладыДокумента.ОрдернаяСхемаПриОтгрузке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Склад КАК Склад,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТовары.НаборУпаковок КАК НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровСуммированная
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровСуммированная.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровСуммированная.Характеристика КАК Характеристика,
	|	ТаблицаТоваровСуммированная.Серия КАК Серия,
	|	ТаблицаТоваровСуммированная.Номенклатура.Код КАК Код,
	|	ТаблицаТоваровСуммированная.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТоваровСуммированная.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ТаблицаТоваровСуммированная.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ТаблицаТоваровСуммированная.Серия.Наименование КАК ПредставлениеСерии,
	|	ТаблицаТоваровСуммированная.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Упаковка) КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	ТаблицаТоваровСуммированная.Количество КАК КоличествоУпаковок,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбхода,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбходаДополнительнаяЯчейка,
	|	ПРЕДСТАВЛЕНИЕ(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток) КАК ПредставлениеРабочегоУчастка,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.Код, """") КАК ОсновнаяЯчейкаПредставление,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.Код, """") КАК ЯчейкаПредставление,
	|	ТаблицаТоваровСуммированная.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = ТаблицаТоваровСуммированная.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаТоваровСуммированная.Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ТаблицаТоваровСуммированная.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровСуммированная.Характеристика КАК Характеристика,
	|	ТаблицаТоваровСуммированная.Серия КАК Серия,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения)) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (ТаблицаТоваровСуммированная.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				ИЛИ ТаблицаТоваровСуммированная.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
	|			И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
	|			И ТаблицаТоваровСуммированная.Количество >= &ТекстЗапросаКоэффициентУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	КоличествоВУпаковке УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия.Наименование КАК ПредставлениеСерии,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТовары.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТовары.Ссылка.Склад)
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|	И НЕ ТаблицаТовары.Серия ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры",
		"ТаблицаТоваровСуммированная.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов); 
	МассивРезультатов           = Запрос.ВыполнитьПакет();
	РезультатПоШапке            = МассивРезультатов[1];
	РезультатПоТабличнойЧасти   = МассивРезультатов[4];
	РезультатПоУпаковкам	    = МассивРезультатов[5];
	РезультатПоСериям			= МассивРезультатов[6];
	
	СтруктураДанныхДляПечати    = Новый Структура("РезультатПоШапке,РезультатПоТабличнойЧасти,РезультатПоУпаковкам,РезультатПоСериям",
													РезультатПоШапке, 
													РезультатПоТабличнойЧасти, 
													РезультатПоУпаковкам,
													РезультатПоСериям);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСпискаДокументов";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента))
		И ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыНакопления.РасчетыСКлиентами)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыНакопления.ЗаказыКлиентов)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументЗаявка.Ссылка) КАК ЗаявкиНаВозвратТоваровОтКлиентовВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности >= СостоянияЗаказовКлиентов.ДатаСобытия ТОГДА
	|			СостоянияЗаказовКлиентов.Заказ
	|		КОНЕЦ) КАК ЗаявкиНаВозвратТоваровОтКлиентовНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовКлиентов.ДатаСобытия 
	|				И СостоянияЗаказовКлиентов.Состояние В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяАвансИлиВозвратДоОбеспечения),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяПредоплатаИлиВозвратДоОтгрузки),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяОплатаИлиВозвратПослеОтгрузки)) ТОГДА
	|			СостоянияЗаказовКлиентов.Заказ
	|		КОНЕЦ) КАК ЗаявкиНаВозвратТоваровОтКлиентовПросроченаОплата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовКлиентов.ДатаСобытия 
	|				И СостоянияЗаказовКлиентов.Состояние В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяСогласование),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяВыполнение),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКВозврату),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКОбеспечению),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяОбеспечение),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКОтгрузке),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ВПроцессеОтгрузки)) ТОГДА
	|			СостоянияЗаказовКлиентов.Заказ
	|		КОНЕЦ) КАК ЗаявкиНаВозвратТоваровОтКлиентовПросроченоИсполнение
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументЗаявка
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО (СостоянияЗаказовКлиентов.Заказ = ДокументЗаявка.Ссылка)}
	|ГДЕ
	|	((НЕ (СостоянияЗаказовКлиентов.Заказ ЕСТЬ NULL)
	|	И НЕ СостоянияЗаказовКлиентов.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Выполнена),
	|									 ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Отклонена)))
	|	ИЛИ НЕ ДокументЗаявка.Проведен)
	|	И ДокументЗаявка.Менеджер = &Пользователь
	|	И НЕ ДокументЗаявка.ПометкаУдаления";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаявкиНаВозвратТоваровОтКлиентов
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ЗаявкиНаВозвратТоваровОтКлиентов";
	ДелоРодитель.Представление  = НСтр("ru='Заявки на возврат товаров от клиентов';uk='Заявки на повернення товарів від клієнтів'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
	
	// ЗаявкиНаВозвратТоваровОтКлиентовВсегоВРаботе
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаявкиНаВозвратТоваровОтКлиентовВсегоВРаботе";
	Дело.ЕстьДела       = Результат.ЗаявкиНаВозвратТоваровОтКлиентовВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru='Всего заявок в работе';uk='Всього заявок в роботі'");
	Дело.Количество     = Результат.ЗаявкиНаВозвратТоваровОтКлиентовВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаявкиНаВозвратТоваровОтКлиентов";
	
	// ЗаявкиНаВозвратТоваровОтКлиентовНаСегодня
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Сегодня';uk='Сьогодні'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаявкиНаВозвратТоваровОтКлиентовНаСегодня";
	Дело.ЕстьДела       = Результат.ЗаявкиНаВозвратТоваровОтКлиентовНаСегодня > 0;
	Дело.Представление  = НСтр("ru='На сегодня';uk='На сьогодні'");
	Дело.Количество     = Результат.ЗаявкиНаВозвратТоваровОтКлиентовНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаявкиНаВозвратТоваровОтКлиентов";
	
	// ЗаявкиНаВозвратТоваровОтКлиентовПросроченаОплата
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОжидающиеОплаты");
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Просроченные';uk='Прострочені'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаявкиНаВозвратТоваровОтКлиентовПросроченаОплата";
	Дело.ЕстьДела       = Результат.ЗаявкиНаВозвратТоваровОтКлиентовПросроченаОплата > 0;
	Дело.Представление  = НСтр("ru='Просрочена оплата по заявкам';uk='Прострочена оплата за заявками'");
	Дело.Количество     = Результат.ЗаявкиНаВозвратТоваровОтКлиентовПросроченаОплата;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаявкиНаВозвратТоваровОтКлиентов";
	
	// ЗаявкиНаВозвратТоваровОтКлиентовПросроченоИсполнение
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОжидающиеИсполнения");
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Просроченные';uk='Прострочені'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаявкиНаВозвратТоваровОтКлиентовПросроченоИсполнение";
	Дело.ЕстьДела       = Результат.ЗаявкиНаВозвратТоваровОтКлиентовПросроченоИсполнение > 0;
	Дело.Представление  = НСтр("ru='Просрочено исполнение заявок';uk='Прострочено виконання заявок'");
	Дело.Количество     = Результат.ЗаявкиНаВозвратТоваровОтКлиентовПросроченоИсполнение;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаявкиНаВозвратТоваровОтКлиентов";
	
	Если Результат.ЗаявкиНаВозвратТоваровОтКлиентовВсегоВРаботе > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
КонецФункции

Функция МетаданныеДокумента() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	СтруктураОбъекта.ЕстьНазначениеВТЧ = Ложь;
	Возврат СтруктураОбъекта;
	
КонецФункции


Процедура ОткатитьСтатусыУстановленныеИзСпискаИсправитьВариантОбеспеченияПриИспользованииЗаказовСоСкладаЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ЕстьЗаказыВРежимеЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если Не ЕстьЗаказыВРежимеЗаказСоСклада Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Набор.Ссылка КАК Ссылка
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
		|		И ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
		|		И ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)
		|		И ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
		|		И НЕ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)) КАК Набор";
	
	СсылкиКОтработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СсылкиКОтработке);
	
КонецПроцедуры

Процедура ОткатитьСтатусыУстановленныеИзСпискаИсправитьВариантОбеспеченияПриИспользованииЗаказовСоСкладаОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		ПолноеИмяОбъекта(), МенеджерВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.ВерсияДанных КАК ВерсияДанных,
	|	Заказы.Ссылка       КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказыФильтр
	|		ПО Заказы.Ссылка = ЗаказыФильтр.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = ЗаказыСервер.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		// Обработка.
		ОбъектИзменен = ОткатитьСтатусыУстановленныеИзСпискаИсправитьВариантОбеспеченияПриИспользованииЗаказовСоСкладаОбработатьОбъект(ДокументОбъект);
		
		Если ОбъектИзменен Тогда
			
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Заменяющие);
			НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект,ПараметрыУказанияСерий.Заменяющие);
			
		КонецЕсли;
		
		// Запись.
		Если ОбъектИзменен Тогда
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаказыСервер.СообщитьОНеудачнойОбработке(ДокументОбъект.Ссылка);
				ВызватьИсключение;
			КонецПопытки;
			
		Иначе
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

Функция ОткатитьСтатусыУстановленныеИзСпискаИсправитьВариантОбеспеченияПриИспользованииЗаказовСоСкладаОбработатьОбъект(ЗаказОбъект)
	
	ОбъектИзменен = Ложь;
	Если ЗаказОбъект.ЗаменяющиеТовары.Количество() = 0 Тогда
		Возврат ОбъектИзменен;
	КонецЕсли;
	
	Если ЗаказОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована Тогда
		
		Для Каждого СтрокаТовары Из ЗаказОбъект.ЗаменяющиеТовары Цикл
			
			Если СтрокаТовары.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется Тогда
				
				СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				ОбъектИзменен = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		МаксимальноДопустимыйВариант = Перечисления.ВариантыОбеспечения.Отгрузить;
		МаксимальноДопустимыйСтатус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке;
		СтрокаТовары = ЗаказОбъект.ЗаменяющиеТовары[0];
		
		Для Каждого СтрокаТовары Из ЗаказОбъект.ЗаменяющиеТовары Цикл
			
			Если СтрокаТовары.Отменено Тогда
				
				Продолжить;
				
			ИначеЕсли СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
				Или СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
				Или СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
				Или СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда
				
				МаксимальноДопустимыйВариант = Перечисления.ВариантыОбеспечения.НеТребуется;
				МаксимальноДопустимыйСтатус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
				
			ИначеЕсли МаксимальноДопустимыйВариант <> Перечисления.ВариантыОбеспечения.НеТребуется
				И СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
				И ЗаказОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Тогда
				
				МаксимальноДопустимыйВариант = Перечисления.ВариантыОбеспечения.СоСклада;
				МаксимальноДопустимыйСтатус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТовары Из ЗаказОбъект.ЗаменяющиеТовары Цикл
			
			Если СтрокаТовары.ВариантОбеспечения <> МаксимальноДопустимыйВариант Тогда
				
				СтрокаТовары.ВариантОбеспечения = МаксимальноДопустимыйВариант;
				ОбъектИзменен = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаказОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена
			И МаксимальноДопустимыйСтатус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Тогда
			
			МаксимальноДопустимыйСтатус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена;
			
		КонецЕсли;
		
		Если ЗаказОбъект.Статус <> МаксимальноДопустимыйСтатус Тогда
			
			ЗаказОбъект.Статус = МаксимальноДопустимыйСтатус;
			ОбъектИзменен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектИзменен;
	
КонецФункции

Процедура ЗаполнитьСерииПоНакладнымЗаполнитьДанныеДляОбновления(Параметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыЗаказа.Ссылка КАК ЗаказСсылка
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаказа
	|ГДЕ
	|	ТоварыЗаказа.Ссылка.Проведен
	|	И НЕ ТоварыЗаказа.Отменено
	|	И (ТоварыЗаказа.СтатусУказанияСерий = 10
	|				И ТоварыЗаказа.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИЛИ ТоварыЗаказа.СтатусУказанияСерий В (12, 16)
	|			ИЛИ ТоварыЗаказа.СтатусУказанияСерий В (11, 15)
	|				И НЕ ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Данные = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные.ВыгрузитьКолонку("ЗаказСсылка"));
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
//	В заказах заполняет серии товаров, для которых серии не указаны, а указание серий стало обязательным;
//		если серию заполнить не удается, откатывается вариант обеспечения в строке;
//		для строк серий заполняется новое поле связи ВариантОбеспечения.
//	В связанных накладных в ТЧ Товары заполняем ДокументРезерваСерий;
//		если строка заказа разделилась - в связанных строках накладной записываем новые коды строк (для серий со статусом 14).
//
Процедура ЗаполнитьСерииПоНакладнымОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		ПолноеИмяОбъекта(), МенеджерВТ);
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
		"Документ.РеализацияТоваровУслуг", МенеджерВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.ВерсияДанных КАК ЗаказВерсияДанных,
	|	Накладные.ВерсияДанных КАК НакладнаяВерсияДанных,
	|	Заказы.Ссылка КАК ЗаказСсылка,
	|	СтрокиДляОбработки.НомерСтроки КАК ЗаказНомерСтроки,
	|	ВЫБОР
	|		КОГДА СтрокиДляОбработки.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА СтрокиДляОбработки.СтатусУказанияСерий
	|		ИНАЧЕ 20
	|	КОНЕЦ КАК ПорядокЗаполнения,
	|	ЕСТЬNULL(ТоварыНакладной.Ссылка, НЕОПРЕДЕЛЕНО) КАК НакладнаяСсылка,
	|	ТоварыНакладной.Серия КАК Серия,
	|	ТоварыНакладной.КодСтроки,
	|	ТоварыНакладной.Количество,
	|	СтрокиДляОбработки.СтатусУказанияСерий,
	|	НЕ ВТЗаблокированоРеализацияТоваровУслуг.Ссылка ЕСТЬ NULL  КАК ЕстьЗаблокированнаяНакладная,
	|	СтрокиДляОбработки.Ссылка ЕСТЬ NULL  КАК УдалитьИзОчереди,
	|	ВЫБОР
	|		КОГДА ТоварыНакладной.КодСтроки > Заказы.ЗаменяющиеТоварыМаксимальныйКодСтроки
	|			ТОГДА ТоварыНакладной.КодСтроки
	|		ИНАЧЕ Заказы.ЗаменяющиеТоварыМаксимальныйКодСтроки
	|	КОНЕЦ КАК МаксимальныйКодСтроки
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказыФильтр
	|		ПО Заказы.Ссылка = ЗаказыФильтр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК СтрокиДляОбработки
	|		ПО (Заказы.Проведен)
	|			И НЕ СтрокиДляОбработки.Отменено
	|			И Заказы.Ссылка = СтрокиДляОбработки.Ссылка
	|			И (СтрокиДляОбработки.СтатусУказанияСерий = 10
	|					И СтрокиДляОбработки.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				ИЛИ СтрокиДляОбработки.СтатусУказанияСерий В (12, 16)
	|				ИЛИ СтрокиДляОбработки.СтатусУказанияСерий В (11, 15)
	|					И НЕ СтрокиДляОбработки.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТоварыНакладной
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Накладные
	|			ПО (Накладные.Ссылка = ТоварыНакладной.Ссылка)
	|				И (Накладные.Проведен)
	|		ПО (ТоварыНакладной.ЗаказКлиента = СтрокиДляОбработки.Ссылка)
	|			И (ТоварыНакладной.УдалитьСтарыйКодСтроки = СтрокиДляОбработки.КодСтроки
	|				ИЛИ ТоварыНакладной.КодСтроки = СтрокиДляОбработки.КодСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРеализацияТоваровУслуг КАК ВТЗаблокированоРеализацияТоваровУслуг
	|		ПО (ВТЗаблокированоРеализацияТоваровУслуг.Ссылка = ТоварыНакладной.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗаполнения,
	|	ЗаказНомерСтроки,
	|	ТоварыНакладной.КодСтроки
	|ИТОГИ
	|	МАКСИМУМ(ЕстьЗаблокированнаяНакладная),
	|	МАКСИМУМ(УдалитьИзОчереди),
	|	МАКСИМУМ(МаксимальныйКодСтроки)
	|ПО
	|	ЗаказСсылка";
	
	ПараметрыОбработчика = ЗаказыСервер.ПараметрыОбработчикаОбновленияПоЗаполнениюСерийВЗаказах_3_2_2();
	ПараметрыОбработчика.ИмяТЧТоварыЗаказа = "ЗаменяющиеТовары";
	ПараметрыОбработчика.ИмяТЧСерииЗаказа = "УдалитьЗаменяющиеСерии";
	ПараметрыОбработчика.РеквизитыПересчета = "КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки";
	ПараметрыОбработчика.ПоляПоискаСерийВНакладной = ПараметрыОбработчика.ПоляПоискаСерийВНакладной + ", Склад";
	ПараметрыОбработчика.ИмяПоляМаксКодСтроки = "ЗаменяющиеТоварыМаксимальныйКодСтроки";
	
	ВыборкаПоСсылкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Если ВыборкаПоСсылкам.ЕстьЗаблокированнаяНакладная Тогда
			Продолжить;
		ИначеЕсли ВыборкаПоСсылкам.УдалитьИзОчереди Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСсылкам.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоСсылкам.Выбрать();
		
		НачатьТранзакцию();
		
		Блокировка = ЗаказыСервер.БлокировкаСвязанныхОбъектов(Выборка, "Заказ", "Накладная");
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойБлокировке(ВыборкаПоСсылкам.ЗаказСсылка);
			Продолжить;
		КонецПопытки;
		
		ЗаказОбъект = ЗаказыСервер.ПроверитьПолучитьОбъект(ВыборкаПоСсылкам.ЗаказСсылка, ВыборкаПоСсылкам.ЗаказВерсияДанных, Параметры.Очередь);
		Если ЗаказОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Если Не ЗаказыСервер.ПроверитьИзменениеВерсий(Выборка, "Накладная") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПустыеДатыОтгрузки(ЗаказОбъект);
		ЗаказОбъект[ПараметрыОбработчика.ИмяПоляМаксКодСтроки] = ВыборкаПоСсылкам.МаксимальныйКодСтроки;
		ЗаказыСервер.ОбработатьСерииЗаказа(ЗаказОбъект, Выборка, ПараметрыОбработчика);
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаказОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(ЗаказОбъект.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

Функция ЗаполнитьСерииПоНакладнымПроверитьДанныеОбновлены(МетаданныеИОтбор) Экспорт
	
	Если МетаданныеИОтбор.Метаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта()) Тогда
		Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ЗаказКлиента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",МетаданныеИОтбор.Отбор);
	
	Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, ПолноеИмяОбъекта(), Ссылки);
	
КонецФункции

Процедура ЗаполнитьПустыеДатыОтгрузки(ЗаказОбъект)
	
	ВариантыОбеспеченияДляПоиска = Новый Массив();
	ВариантыОбеспеченияДляПоиска.Добавить(Перечисления.ВариантыОбеспечения.Требуется);
	ВариантыОбеспеченияДляПоиска.Добавить(Перечисления.ВариантыОбеспечения.Обособленно);
	ВариантыОбеспеченияДляПоиска.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
	ВариантыОбеспеченияДляПоиска.Добавить(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
	
	СтрокиДляОбработки = Новый ТаблицаЗначений();
	СтрокиДляОбработки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СтрокиДляОбработки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СтрокиДляОбработки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	СтрокиДляОбработки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Если ЗаказОбъект.Проведен
		И (ЗаказОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
			Или ЗаказОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) Тогда
		
		Для Каждого СтрокаТовары Из ЗаказОбъект.ЗаменяющиеТовары Цикл
			
			Если Не СтрокаТовары.Отменено
				И ВариантыОбеспеченияДляПоиска.Найти(СтрокаТовары.ВариантОбеспечения) <> Неопределено
				И Не ЗначениеЗаполнено(СтрокаТовары.ДатаОтгрузки) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокиДляОбработки.Добавить(), СтрокаТовары);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокиДляОбработки.Количество() > 0 Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Таблица.Номенклатура   КАК Номенклатура,
			|	Таблица.Характеристика КАК Характеристика,
			|	Таблица.Склад          КАК Склад,
			|	Таблица.НомерСтроки    КАК НомерСтроки
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|///////////////////////////////////////////////
            |" + СтрЗаменить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ"), "РАЗРЕШЕННЫЕ", "")
			+ Справочники.СпособыОбеспеченияПотребностей.ТекстЗапросаДатПлановойПоставки()
			+ "
			|ВЫБРАТЬ
			|	Таблица.НомерСтроки КАК НомерСтроки,
			|	ЕСТЬNULL(ДатыПоставки.Дата, ДАТАВРЕМЯ(1,1,1)) КАК Дата
			|ИЗ
			|	ВтТовары КАК Таблица
			|		
            |		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК СпособыОбеспечения
			|		ПО СпособыОбеспечения.Номенклатура   = Таблица.Номенклатура
			|		 И СпособыОбеспечения.Характеристика = Таблица.Характеристика
			|		 И СпособыОбеспечения.Склад          = Таблица.Склад
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыПлановойПоставки КАК ДатыПоставки
            |		ПО ДатыПоставки.СпособОбеспечения = СпособыОбеспечения.СпособОбеспеченияПотребностей";
			
			Запрос.УстановитьПараметр("Таблица", СтрокиДляОбработки);
			НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоТекущегоДня);
			Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
			ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ДатаОтгрузки = Макс(Выборка.Дата, НачалоТекущегоДня, ЗаказОбъект.ЖелаемаяДатаОтгрузки);
				ЗаказОбъект.ЗаменяющиеТовары[Выборка.НомерСтроки - 1].ДатаОтгрузки = ДатаОтгрузки;
				
				Если ЗаказОбъект.НеОтгружатьЧастями Тогда
					
					ЗаказОбъект.ДатаОтгрузки = Макс(ЗаказОбъект.ДатаОтгрузки, ДатаОтгрузки);
					
				КонецЕсли;
				
			КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуОтгрузкиВСтатусеНесогласованаКВозвратуЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Документ
		|		ПО ТоварыЗаказа.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Проведен
		|	И Документ.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))
		|	И НЕ ТоварыЗаказа.Отменено
		|	И ТоварыЗаказа.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
		|	И ТоварыЗаказа.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Данные = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные.ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьДатуОтгрузкиВСтатусеНесогласованаКВозвратуОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		ПолноеИмяОбъекта(), МенеджерВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.ВерсияДанных КАК ВерсияДанных,
	|	Заказы.Ссылка       КАК Ссылка,
	|	ВЫБОР КОГДА СтрокиДляОбработки.Ссылка ЕСТЬ NULL ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ           КАК УдалитьИзОчереди
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказыФильтр
	|		ПО Заказы.Ссылка = ЗаказыФильтр.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК СтрокиДляОбработки
	|		ПО Заказы.Проведен
	|		 И Заказы.Статус В(
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))
	|		 И НЕ СтрокиДляОбработки.Отменено
	|		 И СтрокиДляОбработки.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|		 И СтрокиДляОбработки.ВариантОбеспечения В(
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.УдалитьИзОчереди Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		ЗаказОбъект = ЗаказыСервер.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
		Если ЗаказОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПустыеДатыОтгрузки(ЗаказОбъект);
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаказОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(ЗаказОбъект.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

Процедура ИсправлениеДвиженийСвободныеОстаткиЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ЕстьЗаказыВРежимеЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если Не ЕстьЗаказыВРежимеЗаказСоСклада Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра = "РегистрНакопления.СвободныеОстатки";
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ТаблицаДокумента.Проведен
		|	И НЕ ТаблицаТовары.Отменено";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ИсправлениеДвиженийОбеспечениеЗаказовЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ЕстьЗаказыВРежимеЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если Не ЕстьЗаказыВРежимеЗаказСоСклада Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра = "РегистрНакопления.ОбеспечениеЗаказов";
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ТаблицаДокумента.Проведен
		|	И НЕ ТаблицаТовары.Отменено";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ИсправлениеДвиженийОбеспечениеЗаказовРаботамиЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ЕстьЗаказыВРежимеЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если Не ЕстьЗаказыВРежимеЗаказСоСклада Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра = "РегистрНакопления.ОбеспечениеЗаказовРаботами";
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И ТаблицаДокумента.Проведен
		|	И НЕ ТаблицаТовары.Отменено";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ИсправлениеДвиженийГрафикОтгрузкиТоваровЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ЕстьЗаказыВРежимеЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если Не ЕстьЗаказыВРежимеЗаказСоСклада Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра = "РегистрНакопления.ГрафикОтгрузкиТоваров";
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ТаблицаДокумента.Проведен
		|	И НЕ ТаблицаТовары.Отменено";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ИсправлениеДвиженийТоварыКОтгрузкеЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ЕстьЗаказыВРежимеЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если Не ЕстьЗаказыВРежимеЗаказСоСклада Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыКОтгрузке";
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ТаблицаДокумента.Проведен
		|	И НЕ ТаблицаТовары.Отменено
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ТаблицаДокумента.Проведен
		|	И НЕ ТаблицаТовары.Отменено
		|	
		|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ИсправлениеДвиженийЗаказыКлиентовЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ЕстьЗаказыВРежимеЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если Не ЕстьЗаказыВРежимеЗаказСоСклада Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра = "РегистрНакопления.ЗаказыКлиентов";
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Набор.Ссылка КАК Ссылка
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
		|		И ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаДокумента.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|		И НЕ ТаблицаТовары.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))) КАК Набор";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ИсправлениеДвиженийРасчетыСКлиентамиЗарегистрироватьДанныеДляКОбработке(Параметры) Экспорт
	
	ЕстьЗаказыВРежимеЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если Не ЕстьЗаказыВРежимеЗаказСоСклада Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСКлиентами";
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Набор.Ссылка КАК Ссылка
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
		|		И ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокумента
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
		|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаДокумента.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|		И НЕ ТаблицаТовары.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))) КАК Набор";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры



Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаВерсию2_1_12(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры,Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры  

Процедура ОбработатьДанныеДляПереходаНаВерсию2_1_12(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
			
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки Тогда
				ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать объект: %Объект% по причине: %Причина%';uk='Не вдалося обробити об''єкт: %Объект% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
			
		КонецПопытки;								
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);  
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли

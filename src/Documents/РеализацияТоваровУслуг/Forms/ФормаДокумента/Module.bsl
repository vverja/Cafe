&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; //используется для отвязки строки поступления от строки заказа

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ПараметрыВыбораРеквизитов = ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(Метаданные.Документы.РеализацияТоваровУслуг);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИспользоватьРучныеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьПартнеровКакКонтрагентов      = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользоватьКорректировкиРеализаций       = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций");

	ПродажаНеОблагаетсяНДС                    = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ИспользоватьОграниченияРучныхСкидок       = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                                ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ОтклонениеОтУсловийПродаж                 = ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж();
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ПерерасчетПроизведен = НЕ НДСИсходящийСервер.НуженАвторасчетНДС(Объект.Товары);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
		
		ПерезаполнитьПоОрдерам(Параметры.ЗначенияЗаполнения.МассивЗаказов);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	УстановитьЗаголовокРеквизитовПечати();
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	ПродажиСервер.УстановитьОтметкуНезаполненногоДоговора(Элементы, "Договор");
	
	НДСИсходящийСервер.УстановитьДоступностьВалюты(Элементы, Объект.Организация, "Валюта");
	
	УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам();
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ПравоНаЧтениеВидаЦены = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.ВидЦены);
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС1);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо1);
	
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// КомандыЭДО
	ОбменСКонтрагентами.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюЭДО);
	// Конец КомандыЭДО
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ПродажиКлиентСервер.СформироватьТекстДокументыНаОсновании(ЭтаФорма);
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		
		Отказ = Истина;
		СамообслуживаниеКлиент.ПечатьРеализацияТоваровУслуг(Объект.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПредыдущиеРеквизитыСтроки = Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|Склад,
		|ТипНоменклатуры,
		|ХарактеристикиИспользуются,
		|Артикул,
		|ЗаказКлиента,
		|КодСтроки");
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	Если Объект.РеализацияПоЗаказам И НЕ РеализацияСверхЗаказа Тогда
		
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("ТоварыСкопировать");
		МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Ложь);
		
	КонецЕсли;
	
	Если Объект.РеализацияПоЗаказам И НЕ РеализацияСверхЗаказа 
		И Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Если ИспользоватьРеализациюПоНесколькимЗаказам Тогда
			ТекстСообщения = НСтр("ru='Уточните склад реализации и заполните товары с помощью команды ""Заполнить по заказам""';uk='Уточніть склад реалізації і заповніть товари за допомогою команди ""Заповнити по замовленням""'");
		Иначе
			ТекстСообщения = НСтр("ru='Уточните склад реализации и заполните товары с помощью команды ""Заполнить по заказу""';uk='Уточніть склад реалізації і заповніть товари за допомогою команди ""Заповнити по замовленню""'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.Склад",);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		ТребуетсяОткрытиеПечатнойФормы = Истина;
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьОтклоненияОтЗаказа();
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ИзменитьЗаголовкиПоВариантуОформленияПродажи();
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") Тогда
		Документы.ТранспортнаяНакладная.СравнитьРеквизитыТТНПослеЗаписи(ЭтаФорма);
	КонецЕсли;
	ТекущийСпособДоставки = ТекущийОбъект.СпособДоставки;
	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	// Если документ проводится, рассчитаем скидки
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ДополнительныеПараметры.Вставить("ЭтотОбъект", ЭтотОбъект);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не Объект.РеализацияПоЗаказам Тогда
			
			Отказ = Истина;
			МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
				ЭтаФорма,
				"Товары",
				"Номенклатура,Характеристика,Количество,Склад",
				Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
			Возврат;
			
		Иначе
			
			Если ИспользоватьАвтоматическиеСкидкиВПродажах
				И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
				
				Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
				
					Отказ = Истина;
					СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки(
						Новый ОписаниеОповещения(
							"ПредложитьПользователюРассчитатьСкидкиЗавершение", 
							ЭтотОбъект,
							ДополнительныеПараметры)
					);
					Возврат;
					
				Иначе
					Объект.СкидкиРассчитаны = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Истина;
	ПередЗаписьюФрагмент(
		Новый ОписаниеОповещения("ПередЗаписьюФрагментЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
		
			Отказ = Истина;
			СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки(
				Новый ОписаниеОповещения(
					"ПредложитьПользователюРассчитатьСкидкиЗавершение", 
					ЭтотОбъект,
					ДополнительныеПараметры)
			);
			Возврат;
			
		Иначе
			Объект.СкидкиРассчитаны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Отказ", Отказ);
	ПередЗаписьюФрагмент(
		Новый ОписаниеОповещения("ПередЗаписьюФрагментЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюФрагмент(ОписаниеОповещения, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ВыполнитьАвторасчетНДСКлиент() Тогда
			ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		КонецЕсли;
		
		Если Не Объект.Согласован Тогда
			
			Если ДоступенВводПредоплаты(ЭтаФорма) Тогда
			
				ГрафикЗаполнен           = Ложь;
				ГрафикСоглашенияЗаполнен = Ложь;
				Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
					ГрафикСоглашенияЗаполнен = ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
					Если ИспользоватьГрафикиОплаты Тогда
						ГрафикОплаты   = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
						ГрафикЗаполнен = ЗначениеЗаполнено(ГрафикОплаты);
					КонецЕсли;
				КонецЕсли;
				
				Если ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен Тогда
					
					СтруктураПредоплаты = СуммаПредоплатыПоСоглашению(Объект, ЭтапыГрафикаОплаты, СуммаВсего);
					Если СуммаПредоплатыВВалютеДокумента <> СтруктураПредоплаты.СуммаПредоплаты
						Или СуммаПредоплатыЗаТаруВВалютеДокумента <> СтруктураПредоплаты.СуммаПредоплатыЗаТару Тогда
						
						ДополнительныеПараметры = Новый Структура;
						ДополнительныеПараметры.Вставить("СтруктураПредоплаты", СтруктураПредоплаты);
						ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
						ТекстВопроса = НСтр("ru='Сумма предоплаты не совпадает с графиком оплаты по соглашению. Скорректировать сумму предоплаты?';uk='Сума передплати не співпадає з графіком оплати за офертою. Скоригувати суму передоплати?'");
						ПоказатьВопрос(
							Новый ОписаниеОповещения("ПередЗаписьюФрагментВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
							ТекстВопроса,
							РежимДиалогаВопрос.ДаНетОтмена);
						Возврат;
					
					КонецЕсли;
					
				КонецЕсли;
				
				ОбщаяСуммаПредоплаты = СуммаПредоплатыВВалютеДокумента + СуммаПредоплатыЗаТаруВВалютеДокумента;
				
				Если ОбщаяСуммаПредоплаты <> СуммаВсего И Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
					ЗаполнитьДатуПлатежаПоУмолчаниюНаСервере();
				КонецЕсли;
				
			ИначеЕсли Не ЗначениеЗаполнено(Объект.ДатаПлатежа)
				И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
				
				МассивСтрокСверхЗаказа = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", 0));
				ЕстьСтрокиСверхЗаказа  = Объект.РеализацияПоЗаказам И РеализацияСверхЗаказа И МассивСтрокСверхЗаказа.Количество() > 0;
				
				Если Не Объект.РеализацияПоЗаказам Или ЕстьСтрокиСверхЗаказа Тогда
					ЗаполнитьДатуПлатежаПоУмолчаниюНаСервере();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПередЗаписьюРасчетПараметров();
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюРасчетПараметров()
	
	ОбщаяСуммаПредоплатыВВалюте = СуммаПредоплатыВВалютеДокумента +
		?(Объект.ТребуетсяЗалогЗаТару, СуммаПредоплатыЗаТаруВВалютеДокумента, 0);
		
	Если Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		Объект.СуммаПредоплаты = ОбщаяСуммаПредоплатыВВалюте;
		Объект.СуммаПредоплатыЗаТару = СуммаПредоплатыЗаТаруВВалютеДокумента;
	Иначе
		СтруктураСуммПредоплаты = ПересчетСуммПредоплаты(
			ОбщаяСуммаПредоплатыВВалюте, СуммаПредоплатыЗаТаруВВалютеДокумента,
			Объект.Валюта, Объект.ВалютаВзаиморасчетов, Объект.Дата);
		Объект.СуммаПредоплаты       = СтруктураСуммПредоплаты.СуммаПредоплаты;
		Объект.СуммаПредоплатыЗаТару = СтруктураСуммПредоплаты.СуммаПредоплатыЗаТару;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюФрагментВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		
		СуммаПредоплатыВВалютеДокумента = ДополнительныеПараметры.СтруктураПредоплаты.СуммаПредоплаты;
		СуммаПредоплатыЗаТаруВВалютеДокумента = ДополнительныеПараметры.СтруктураПредоплаты.СуммаПредоплатыЗаТару;
		РассчитатьПроцентПредоплаты(ЭтаФорма);
		НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
		
		ОбщаяСуммаПредоплаты = СуммаПредоплатыВВалютеДокумента + СуммаПредоплатыЗаТаруВВалютеДокумента;
		
		Если ОбщаяСуммаПредоплаты <> СуммаВсего И Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
			ЗаполнитьДатуПлатежаПоУмолчаниюНаСервере();
		КонецЕсли;

		ПередЗаписьюРасчетПараметров();
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		
		ПередЗаписьюРасчетПараметров();
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПользователюРассчитатьСкидкиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		Отказ = Ложь;
		ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ);
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	Иначе
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Отказ", Отказ);
	ПередЗаписьюФрагмент(
		Новый ОписаниеОповещения("ПередЗаписьюФрагментЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюФрагментЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	ДействиеПослеЗаписи = Неопределено;
	Если ДополнительныеПараметры.ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ДополнительныеПараметры.ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи, Отказ);
	
	Если Результат И ДействиеПослеЗаписи <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка)
		Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ИзмененаОплатаСервер();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Параметр.КартаЛояльности);
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПолученыСообщения(Параметр.Сообщения);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
		ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыНабора = Новый Структура;
		ПараметрыНабора.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
		ПараметрыНабора.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыНабора.Вставить("СверхЗаказа", Истина);
		ПараметрыНабора.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
		
		АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыНабора);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
		ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
		ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыОткрытия.Вставить("НалогообложениеНДС", НалогообложениеНДСПоУмолчанию);
		ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
		ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
		ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
		ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
		ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
		
		ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ТранспортнаяНакладная" Тогда
		ПродажиКлиент.ПолучитьОбновитьИнформациюТранспортныхНакладных(ЭтаФорма);
	КонецЕсли;
	
	Если ИмяСобытия = "Формирование_НалоговыеДокументы"
		И ((Параметр.Свойство("ФормаВладелец") И Параметр.ФормаВладелец = УникальныйИдентификатор)
			Или Параметр.ДокументОснование = Объект.Ссылка) Тогда
		ОбновитьТекстНалоговыхДокументов();
	КонецЕсли;
	
	
	Если ИмяСобытия = "Запись_РасходныйОрдерНаТовары" Тогда
		ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Объект.Ссылка, НачатаОтгрузка);
	КонецЕсли;
	
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаПодбораТоваровИзЗаказа" Тогда
		
		ОбработкаПодбораТоваровИзЗаказа(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеВзаиморасчетов" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(ВыбранноеЗначение.АдресПлатежейВХранилище);
		
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		Объект.ВидыЗапасовУказаныВручную = ИсточникВыбора.ВидыЗапасовУказаныВручную;
		Модифицированность = Истина;	
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ТранспортнаяНакладная.Форма.ФормаВыбора" Тогда
		
		ДанныеТранспортныхНакладных = ОбработкаВыбораТранспортнойНакладной(ВыбранноеЗначение);
		ПродажиКлиентСервер.ОбновитьИнформациюТранспортныхНакладных(ЭтаФорма, ДанныеТранспортныхНакладных);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РеализацияТоваровУслуг", ПараметрыЗаписи, Объект.Ссылка);

	Если ЗначениеЗаполнено(ИзмененныеРеквизитыТТНСтрока) Тогда	
		
		Если Найти(ИзмененныеРеквизитыТТНСтрокаСинонимов, ",") <> 0 Тогда  	
			ТекстВопроса = НСтр("ru='Реквизиты %ИзмененныеРеквизиты% были изменены. Изменить их значения в транспортных накладных, в которых числится текущий документ?';uk='Реквізити %ИзмененныеРеквизиты% були змінені. Змінити їх значення в транспортних накладних, у яких значиться поточний документ?'");
		Иначе
			ТекстВопроса = НСтр("ru='Реквизит %ИзмененныеРеквизиты% был изменен. Изменить его значение в транспортных накладных, в которых числится текущий документ?';uk='Реквізит %ИзмененныеРеквизиты% був змінений. Змінити його значення в транспортних накладних, у яких значиться поточний документ?'");
		КонецЕсли;
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзмененныеРеквизиты%", ИзмененныеРеквизитыТТНСтрокаСинонимов);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Изменить';uk='Змінити'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Не изменять';uk='Не змінювати'"));
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)), ТекстВопроса, СписокКнопок);
		Возврат;
		
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.ОК Тогда 
        ОбновитьРеквизитыТранспортныхНакладныхНаСервере();
    КонецЕсли;
    ЗапретНаЗакрытиеФормы = Ложь;
	ИзмененныеРеквизитыТТНСтрока = "";
	ИзмененныеРеквизитыТТНСтрокаСинонимов = "";
    
    МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") Тогда
		Документы.ТранспортнаяНакладная.СохранитьРеквизитыТТНПередЗаписью(ЭтаФорма);
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗапретНаЗакрытиеФормы Тогда
		Отказ = Истина;
	Иначе
		ПринудительноЗакрытьФорму = Истина;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыКлиентовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокЗаказов,
			НСтр("ru='Заказы клиентов (%КоличествоДокументов%)';uk='Замовлення клієнтів (%КоличествоДокументов%)'")
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата,
		,
		,
		,
		Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
	Если НЕ Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		Объект.Валюта = Объект.ВалютаВзаиморасчетов;
		ПриИзмененииВалюты();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
		Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		
	Иначе
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
		
	Соглашение = Объект.Соглашение;
	
	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
	Если НЕ Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		Объект.Валюта = Объект.ВалютаВзаиморасчетов;
		ПриИзмененииВалюты();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
		ПриИзмененииХозяйственнойОперацииСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПоУмолчаниюПриИзменении(Элемент)		
	
	НалогообложениеНДСПоУмолчаниюПриИзмененииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ПриИзмененииВалюты();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументыНаОснованииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ПродажиКлиент.ОбработкаНавигационнойСсылкиТекстНалоговыеДокументы(
		ЭтаФорма, НавигационнаяСсылка, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Перем ЦеныРассчитаны;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	УстановитьНалогообложениеНДСПоУмолчанию();
	
	Если Не Объект.РеализацияПоЗаказам ИЛИ (РеализацияСверхЗаказа И Объект.Товары.Итог("РасхождениеЗаказ") > 0) Тогда
	
		Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
		ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект, Оповещение);
		Возврат;
		
	КонецЕсли; 
	
	ПересчитатьЦены = Ложь;
	ДатаПриИзмененииСервер(ПересчитатьЦены, ЦеныРассчитаны);
	
	ДатаДокументаДоИзменения = Объект.Дата;
	
	Если ПересчитатьЦены Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Перем ЦеныРассчитаны;
	
	ДатаПриИзмененииСервер(РезультатВопроса, ЦеныРассчитаны);
	
	ДатаДокументаДоИзменения = Объект.Дата;
	
	Если РезультатВопроса Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	Если НЕ Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		Объект.Валюта = Объект.ВалютаВзаиморасчетов;
		ПриИзмененииВалюты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОчищатьСтроки = Ложь;
	ОтвязатьВсеСтрокиОтЗаказа = Ложь;
	
	Если Склад <> Объект.Склад Тогда
				
		Если Объект.РеализацияПоЗаказам
			И Объект.Товары.Количество() > 0 Тогда
			Если Не ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад) Тогда
				СписокКнопок = Новый СписокЗначений;
				
				Если РеализацияСверхЗаказа Тогда
					СписокКнопок.Добавить("Продолжить", НСтр("ru='Очистить товары';uk='Очистити товари'"));
					СписокКнопок.Добавить("Отвязать", НСтр("ru='Отвязать от заказа';uk='Відв''язати від замовлення'"));
					ТекстВопроса = НСтр("ru='При изменении склада список ""Товары"" необходимо очистить, либо отвязать строки от заказа. Продолжить?';uk='При зміні складу список ""Товари"" необхідно очистити, або відв''язати рядки від замовлення. Продовжити?'")
				Иначе
					СписокКнопок.Добавить("Продолжить", НСтр("ru='Продолжить';uk='Продовжити'"));
					ТекстВопроса = НСтр("ru='Список ""Товары"" будет очищен. Продолжить?';uk='Список ""Товари"" буде очищено. Продовжити?'")
				КонецЕсли;
				
				СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
				
				Ответ = Неопределено;

				
				ПоказатьВопрос(Новый ОписаниеОповещения("СкладПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ОтвязатьВсеСтрокиОтЗаказа", ОтвязатьВсеСтрокиОтЗаказа)), ТекстВопроса, СписокКнопок);
                Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СкладПриИзмененииФрагмент(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки);

		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	ОтвязатьВсеСтрокиОтЗаказа = ДополнительныеПараметры.ОтвязатьВсеСтрокиОтЗаказа;
	Ответ = РезультатВопроса;
    Если Ответ = "Отмена" Тогда
        
        Объект.Склад = Склад;
        Возврат;
    ИначеЕсли Ответ = "Отвязать" Тогда
        ОтвязатьВсеСтрокиОтЗаказа = Истина;
        ОчищатьСтроки = Ложь;
    Иначе
        ОчищатьСтроки = Истина;
    КонецЕсли;
    
    СкладПриИзмененииФрагмент(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииФрагмент(Знач ОтвязатьВсеСтрокиОтЗаказа, Знач ОчищатьСтроки)
    
    ПриИзмененииСкладаСервер(ОчищатьСтроки, ОтвязатьВсеСтрокиОтЗаказа);
    СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	Если НЕ Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация") Тогда
		Объект.Валюта = Объект.ВалютаВзаиморасчетов;
		ПриИзмененииВалюты();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетовПриИзмененииНаСервере(
			ЦенообразованиеКлиент.НеобходимПересчетСуммыВзаиморасчетов(Объект, ВалютаВзаиморасчетовДокумента));
		ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПоЗаказамПриИзменении(Элемент)
	
	ЗаказКлиента = Неопределено;
	УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	
	Если Объект.РеализацияПоЗаказам И НачатаОтгрузка Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='По данному документу уже начата отгрузка. Менять признак 
            |""Реализация по заказу"" после начала отгрузки не допускается.'
            |;uk='За цим документом вже розпочато відвантаження. Міняти ознаку 
            |""Реалізація по замовленню"" після початку відвантаження не допускається.'"));
		Объект.РеализацияПоЗаказам = Ложь;
		
		Возврат
	КонецЕсли;
	
	Если Объект.РеализацияПоЗаказам Тогда
		
		Если ИспользоватьРеализациюПоНесколькимЗаказам Тогда
		
			Если Объект.Товары.Количество() = 0 Тогда
				ТекстВопроса = НСтр("ru='Список Товары будет перезаполнен остатками неоформленных товаров по заказам. Продолжить?';uk='Список Товари буде перезаповнений залишками неоформлених товарів по замовленнях. Продовжити?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Товары будут привязаны к строкам заказов. Продолжить?';uk='Рядки в списку Товари будуть прив''язані до рядків замовлень. Продовжити?'");
			КонецЕсли;
			
		Иначе
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Валюта",                Объект.Валюта);
			ПараметрыОтбора.Вставить("Контрагент",            Объект.Контрагент);
			ПараметрыОтбора.Вставить("Договор",               Объект.Договор);
			ПараметрыОтбора.Вставить("Организация",           Объект.Организация);
			ПараметрыОтбора.Вставить("Партнер",               Объект.Партнер);
			ПараметрыОтбора.Вставить("Сделка",                Объект.Сделка);
			ПараметрыОтбора.Вставить("Соглашение",            Объект.Соглашение);
			ПараметрыОтбора.Вставить("ЦенаВключаетНДС",       Объект.ЦенаВключаетНДС);
			ПараметрыОтбора.Вставить("ПорядокРасчетов",       Объект.ПорядокРасчетов);
			ПараметрыОтбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
			ПараметрыОтбора.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
			ПараметрыОтбора.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
			
			ОткрытьФорму(
				"Документ.РеализацияТоваровУслуг.Форма.ФормаВыбораРаспоряжения",
				Новый Структура("Отбор,Склад,Регистратор", ПараметрыОтбора, Объект.Склад, Объект.Ссылка),,,,, Новый ОписаниеОповещения("РеализацияПоЗаказамПриИзмененииПослеВыбора", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
			
		КонецЕсли;
			
	Иначе
		
		Если Объект.Товары.Количество() > 0 Тогда
			
			Если ИспользоватьРеализациюПоНесколькимЗаказам Тогда
				ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказов. Продолжить?';uk='Рядки в списку Товари перестануть бути зв''язаними з рядками замовлень. Продовжити?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказа. Продолжить?';uk='Рядки в списку Товари перестануть бути зв''язаними з рядками замовлення. Продовжити?'");
			КонецЕсли;
			
		Иначе
			
			ПриИзмененииРеализацииПоНесколькимЗаказам();
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	РеализацияПоЗаказамПриИзмененииФрагмент(ЗаказКлиента, ТекстВопроса);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПоЗаказамПриИзмененииФрагмент(Знач ЗаказКлиента, Знач ТекстВопроса)
    
    Перем ОтветНаВопрос;
    
    ОтветНаВопрос = Неопределено;
    
    
    ПоказатьВопрос(Новый ОписаниеОповещения("РеализацияПоЗаказамПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ЗаказКлиента", ЗаказКлиента)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура РеализацияПоЗаказамПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ЗаказКлиента = ДополнительныеПараметры.ЗаказКлиента;
    
    
    ОтветНаВопрос = РезультатВопроса;
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Объект.РеализацияПоЗаказам = Не Объект.РеализацияПоЗаказам;
        Возврат;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
        Объект.ЗаказКлиента = ЗаказКлиента;
    КонецЕсли;
    
    МассивЭлементов = Новый Массив;
    МассивЭлементов.Добавить("ТоварыОтвязатьОтЗаказа");
    МассивЭлементов.Добавить("ТоварыКонтекстноеМенюОтвязатьОтЗаказа");
    МассивЭлементов.Добавить("ТоварыГруппаЗаказКлиента");
    
    ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Объект.РеализацияПоЗаказам);
    
    ПриИзмененииРеализацииПоНесколькимЗаказам();

КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("Дата, Валюта, ВалютаВзаиморасчетов, СуммаДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеПоСуммеПродажи, Объект);
	Если Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС));
	ИначеЕсли Объект.Товары.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество() = 0 Тогда
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", Объект.Товары.Итог("СуммаВзаиморасчетов"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Договор));
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", Объект.Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", ЭтаФорма);
	ПараметрыОткрытия.Вставить("Окно", ЭтаФорма.Окно);
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЗалогЗаТаруПриИзменении(Элемент)
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаПраваСобственностиПриИзменении(Элемент)
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ДатаПереходаПраваСобственностиПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ДоступноИзменение      = Не Объект.РеализацияПоЗаказам Или ОтклонениеОтУсловийПродаж;
	УчитыватьВариантОплаты = ДоступенВводПредоплаты(ЭтаФорма);
	
	Если Не Объект.РеализацияПоЗаказам 
			Или (Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")) Тогда
		СуммаПродажи         = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
		СуммаЗалогаЗаТару    = ?(Объект.ТребуетсяЗалогЗаТару, СуммаВсего - СуммаПродажи, 0);
		ТребуетсяЗалогЗаТару = Объект.ВернутьМногооборотнуюТару И Объект.ТребуетсяЗалогЗаТару;
	Иначе
		СуммаПродажи         = Объект.Товары.Итог("СуммаСверхЗаказа");
		СуммаЗалогаЗаТару    = 0;
		ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",                      ТолькоПросмотр Или Не ДоступноИзменение);
	ПараметрыФормы.Вставить("СуммаОплатыПоДокументу",              СуммаПродажи);
	ПараметрыФормы.Вставить("СуммаЗалогаПоДокументу",              СуммаЗалогаЗаТару);
	ПараметрыФормы.Вставить("ТребуетсяЗалогЗаТару",                ТребуетсяЗалогЗаТару);
	ПараметрыФормы.Вставить("Соглашение",                          Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата",                                Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                              Объект.Валюта);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",              УчитыватьВариантОплаты);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",             УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ФормаОплаты",                         Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Касса",                               Объект.Касса);
	ПараметрыФормы.Вставить("БанковскийСчет",                      Объект.БанковскийСчетОрганизации);
	ПараметрыФормы.Вставить("Организация",                         Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыВыбораРеквизитов",           ПараметрыВыбораРеквизитов);
	ПараметрыФормы.Вставить("РасширенныйРежимНеИспользуется",      Истина);
	ПараметрыФормы.Вставить("РежимРеализации",                     Истина);
	ПараметрыФормы.Вставить("ПорядокРасчетов",                     Объект.ПорядокРасчетов);
	ПараметрыФормы.Вставить("ДоступныеПорядкиРасчетов",            ДоступныеПорядкиРасчетов);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",             Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("ГрафикИсполненияВДоговоре",           ГрафикИсполненияВДоговоре);
	
	Если УчитыватьВариантОплаты Тогда
		АдресВоВременномХранилище = ПоместитьЭтапыОплатыВоВременноеХранилищеНаСервере(СуммаПродажи, СуммаЗалогаЗаТару);
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Иначе
		ПараметрыФормы.Вставить("ДатаПлатежа",               Объект.ДатаПлатежа);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("УчитыватьВариантОплаты", УчитыватьВариантОплаты);
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(ПараметрыОплаты, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		УчитыватьВариантОплаты = ДополнительныеПараметры.УчитыватьВариантОплаты;
		
		Модифицированность = Истина;
		Объект.Согласован                = Ложь;
		Объект.Касса                     = ПараметрыОплаты.Касса;
		Объект.БанковскийСчетОрганизации = ПараметрыОплаты.БанковскийСчет;
		
		Если Объект.ФормаОплаты <> ПараметрыОплаты.ФормаОплаты Тогда
			Объект.ФормаОплаты = ПараметрыОплаты.ФормаОплаты;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		КонецЕсли;
		
		Если Объект.ПорядокРасчетов <> ПараметрыОплаты.ПорядокРасчетов Тогда
			Объект.ПорядокРасчетов = ПараметрыОплаты.ПорядокРасчетов;
			УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		КонецЕсли;
		
		Если УчитыватьВариантОплаты Тогда
			Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
				ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
				РассчитатьПроцентПредоплаты(ЭтаФорма);
			КонецЕсли;
		Иначе
			Объект.ДатаПлатежа = ПараметрыОплаты.ДатаПлатежа;
		КонецЕсли;
		
		НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияПродажиПриИзменении(Элемент)
	ИзменитьЗаголовкиПоВариантуОформленияПродажи();
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
	Если Копирование Тогда
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Истина);

	ТоварыПослеУдаленияСервер(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения);

	Если НеобходимоОбновитьСтатусыСерий Тогда

		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);

	КонецЕсли;

	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, Неопределено, ТоварыКешТекущейСтроки, СкладГруппа, Ложь);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные; 
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
		
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
			Объект.Товары,
			НадписьРасхождениеЗаказ,
			Элементы);
			
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары, НадписьРасхождениеЗаказ, Элементы);
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ТоварыКешТекущейСтроки);
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа, Ложь);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.РеализацияПоЗаказам И НЕ РеализацияСверхЗаказа Тогда
		Отказ = Истина;
		ПодборТоваровИзЗаказа();
	КонецЕсли;
	
	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Поле = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если Не Объект.РеализацияПоЗаказам ИЛИ РеализацияСверхЗаказа И ТекущиеДанные.КодСтроки = 0 Тогда
			
			Если Не Объект.СкидкиРассчитаны Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, 
					Новый Структура("ВыбраннаяСтрока, Поле, ТекущиеДанные", ВыбраннаяСтрока, Поле, ТекущиеДанные)), 
					НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?';uk='Знижки (націнки) не розраховані, розрахувати?'"), РежимДиалогаВопрос.ДаНет);
                Возврат;
			КонецЕсли;
			
			ТоварыВыборФрагмент(ТекущиеДанные);
			
		КонецЕсли;
				
	ИначеЕсли Поле = Элементы.ТоварыЗаказКлиента Тогда
		
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ЗаказКлиента) Тогда
			ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.ЗаказКлиента);
		ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
			ПоказатьЗначение(Неопределено, Объект.ЗаказКлиента);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ПравоНаЧтениеВидаЦены Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""';uk='Для редагування ціни виберіть вид ціни ""<довільна>""'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) И ТекущаяСтрока.КодСтроки = 0 Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",        УникальныйИдентификатор);
			ПараметрОповещения.Вставить("СверхЗаказа",          Истина);
			
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
    Поле = ДополнительныеПараметры.Поле;
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ТоварыВыборФрагмент(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборФрагмент(ТекущиеДанные)
    
    Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыСкладПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если РеализацияСверхЗаказа И Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если РеализацияСверхЗаказа И Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыХарактеристикаПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если РеализацияСверхЗаказа И Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Валюта",                    Объект.Валюта);
		ПараметрыОтбора.Вставить("Контрагент",                Объект.Контрагент);
		ПараметрыОтбора.Вставить("Договор",                   Объект.Договор);
		ПараметрыОтбора.Вставить("Организация",               Объект.Организация);
		ПараметрыОтбора.Вставить("Партнер",                   Объект.Партнер);
		ПараметрыОтбора.Вставить("Соглашение",                Объект.Соглашение);
		ПараметрыОтбора.Вставить("ХозяйственнаяОперация",     Объект.ХозяйственнаяОперация);
		ПараметрыОтбора.Вставить("ЦенаВключаетНДС",           Объект.ЦенаВключаетНДС);
		ПараметрыОтбора.Вставить("ПорядокРасчетов",           Объект.ПорядокРасчетов);
		ПараметрыОтбора.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
		ПараметрыОтбора.Вставить("Сделка",                    Объект.Сделка);
		ПараметрыОтбора.Вставить("НаправлениеДеятельности",   Объект.НаправлениеДеятельности);
		
		ЗаказКлиента = Неопределено;
		
		ОткрытьФорму(
			"Документ.РеализацияТоваровУслуг.Форма.ФормаВыбораРаспоряжения",
			Новый Структура("Отбор,Склад,Регистратор", ПараметрыОтбора, Объект.Склад, Объект.Ссылка),,,,, Новый ОписаниеОповещения("ТоварыЗаказКлиентаНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
		
	КонецЕсли;
	
	ТоварыЗаказКлиентаНачалоВыбораФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказКлиентаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаказКлиента = Результат;
    
    Элементы.Товары.ТекущиеДанные.ЗаказКлиента = ЗаказКлиента;
    
    
    ТоварыЗаказКлиентаНачалоВыбораФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказКлиентаНачалоВыбораФрагмент()
    
    ОбновитьИнформациюПоЗаказам();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище",            ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества());
	ПараметрыОткрытия.Вставить("ИмяТабличнойЧасти",                    "Товары");
	ПараметрыОткрытия.Вставить("Ссылка",                               Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПревышениеКоличестваТоваровРазрешено", Не Объект.РеализацияПоЗаказам ИЛИ РеализацияСверхЗаказа);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",               ПараметрыУказанияСерий);
	
	ВозвращаемыеПараметры = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ПроверитьКоличествоВДокументеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВозвращаемыеПараметры = Результат;
    Если ВозвращаемыеПараметры <> Неопределено Тогда
        ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
        Модифицированность = Истина;
        
        ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
        РассчитатьСуммуПредоплаты(ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары';uk='Товари'")) Тогда
		Если РеализацияСверхЗаказа И НЕ ОтклонениеОтУсловийПродаж Тогда
			Если Объект.РеализацияПоЗаказам И Объект.Товары.Итог("РасхождениеЗаказ") = 0 Тогда
				ТекстПредупреждения = НСтр("ru='Цена не может быть назначена в строках по заказу.';uk='Ціна не може бути призначена в рядках по замовленню.'");
				ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
				Возврат
			КонецЕсли;
		КонецЕсли;
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары';uk='Товари'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,
			Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		МассивСтрок = Новый Массив;
		
		Для Каждого ТекСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
			НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
			Если ?(РеализацияСверхЗаказа, НайденнаяСтрока.КодСтроки = 0, Истина) Тогда
				МассивСтрок.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
			
		Если МассивСтрок.Количество() = 0
			И РеализацияСверхЗаказа И НЕ ОтклонениеОтУсловийПродаж 
			И Объект.РеализацияПоЗаказам Тогда
			
			ТекстПредупреждения = НСтр("ru='Цена не может быть назначена в строках по заказу.';uk='Ціна не може бути призначена в рядках по замовленню.'");
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			Возврат
		КонецЕсли;
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
	ФинансыКлиент.ОткрытьВидыЗапасов(
		Объект,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Соглашение"" не заполнено';uk='Поле ""Оферта"" не заповнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Валюта"" не заполнено';uk='Поле ""Валюта"" не заповнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.РеализацияТоваровУслуг.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		ИЛИ Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru='Подбор товаров в %Документ%';uk='Підбір товарів у %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='реализацию товаров и услуг';uk='реалізацію товарів і послуг'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
    ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах", Истина);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.КодСтроки) Тогда
		ТекстПредупреждения = НСтр("ru='Просмотр информации о скидках (наценках) возможен только в строках сверх заказа.';uk='Перегляд інформації про знижки (націнки) можливий тільки в рядках понад замовлення.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);		
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект, 
			Новый Структура("ТекущиеДанные", ТекущиеДанные)), НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?';uk='Знижки (націнки) не розраховані, розрахувати?'"), 
			РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    
    ОткрытьИнформациюОСкидкахФрагмент(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент(Знач ТекущиеДанные)
    
    Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Скидки (наценки)';uk='Знижки (націнки)'"),
			,
			НСтр("ru='Скидки (наценки) рассчитаны';uk='Знижки (націнки) розраховані'"),
			БиблиотекаКартинок.Информация32);
			
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	РеализацияСверхЗаказаПоЗаказу = РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам;
	Если Не ВозможноНазначениеРучнойСкидкиНаценки() Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,,АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		РассчитатьСуммуПредоплаты(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	РеализацияСверхЗаказаПоЗаказу = РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам;
	Если Не ВозможноНазначениеРучнойСкидкиНаценки() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Товары.ВыделенныеСтроки <> Неопределено и РеализацияСверхЗаказаПоЗаказу Тогда
		СтрокиТабличнойЧасти = Новый Массив();
		Для Каждого ТекСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
			НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
			Если НайденнаяСтрока.КодСтроки = 0 Тогда
				СтрокиТабличнойЧасти.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокиТабличнойЧасти.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр("ru='Ручная скидка (наценка) не может быть назначена в строках по заказу.';uk='Ручна знижка (націнка) не може бути призначена в рядках по замовленню.'");
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		РассчитатьСуммуПредоплаты(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	РеализацияСверхЗаказаПоЗаказу = РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам;
	Если Не ВозможнаОтменаРучныхСкидокНаценок() Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
	
	Если Не Объект.РеализацияПоЗаказам Тогда
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		РассчитатьПоРеализацииТоваровУслугПоЗаказу();
		Если РеализацияСверхЗаказа Тогда
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		РассчитатьСуммуПредоплаты(ЭтаФорма);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Скидки (наценки)';uk='Знижки (націнки)'"),
		,
		НСтр("ru='Скидки (наценки) рассчитаны';uk='Знижки (націнки) розраховані'"),
		БиблиотекаКартинок.Информация32);

	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоРеализацииТоваровУслугПоЗаказу()
	
	СкидкиНаценкиСервер.РассчитатьПоРеализацииТоваровУслугПоЗаказу(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ)
	
	Если Не Объект.РеализацияПоЗаказам Тогда
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			Отказ = Истина;
		КонецЕсли;
	Иначе
		РассчитатьПоРеализацииТоваровУслугПоЗаказу();
		Если РеализацияСверхЗаказа Тогда
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		РассчитатьСуммуПредоплаты(ЭтаФорма);
		
	КонецЕсли;
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Скидки (наценки)';uk='Знижки (націнки)'"),
		,
		НСтр("ru='Скидки (наценки) рассчитаны';uk='Знижки (націнки) розраховані'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыПоЗаказамОрдерам(Команда)
	
	ПодборТоваровИзЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВзаиморасчетыПоУпрОрганизации(Команда)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет") Тогда
	
		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		СтруктураПараметры = Новый Структура("
			|АдресПлатежейВХранилище, 
			|Партнер,
			|Контрагент,
			|Валюта,
			|Документ,
			|СуммаВсего,
			|ЭтоРасчетыСКлиентами
			|",
			АдресПлатежейВХранилище,
			Объект.Партнер,
			Объект.Контрагент,
			Объект.Валюта,
			Объект.Ссылка,
			?(Объект.ТребуетсяЗалогЗаТару,
				Объект.Товары.Итог("СуммаСНДС"),
				Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары")),
			Истина); ОткрытьФорму(
			"ОбщаяФорма.РедактированиеВзаиморасчетов",
			СтруктураПараметры,
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		РассчитатьСуммуПредоплаты(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, НСтр("ru='Товары';uk='Товари'"), ВыделенныеСтроки) Тогда
		
		СтруктураОтбора = Новый Структура("ВыборГруппы,ЭтоГруппа", ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"), Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСкладВВыделенныхСтрокахЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтрокахЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад = Результат;
    
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки",
		ЗависимыеРеквизиты(), "КоличествоУпаковок");
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТаблицаФормы.ТекущиеДанные);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", 
			Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
				Объект.РеализацияПоЗаказам,
				Объект.ТребуетсяЗалогЗаТару));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		РассчитатьСуммуПредоплаты(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
	КонецЕсли;
		
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFO(Команда)
	
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиРеализации(Элемент)	
	
	ОткрытьРеквизитыПечатиРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
		
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество,Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()>0 Тогда
		
		ОтвязатьОтЗаказаСервер(Ложь);
		
		ОповеститьОбОкончанииОтвязкиСтрок(ВыделенныеСтроки.Количество());
		
	Иначе
		ТекстПредупреждения = НСтр("ru='Выберите строки, которые необходимо отвязать от заказа.';uk='Виділіть рядки, які необхідно відв''язати від замовлення.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", НалогообложениеНДСПоУмолчанию);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСКлиентами("КарточкаРасчетовСКлиентамиПоДокументамКонтекст", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) ИЛИ ТекущаяСтрока.КодСтроки <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("СверхЗаказа",          Истина);
	ПараметрыКомплекта.Вставить("КолонкиНабора",        КолонкиНабора(ЭтаФорма));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", НалогообложениеНДСПоУмолчанию);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	ЗапасыСервер.УстановитьУсловноеОформлениеПодразделенияДляВидовЗапасов(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеализацияСверхЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеализацияСверхЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаВзаиморасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Валюта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютаВзаиморасчетов");

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказКлиента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказКлиента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРеализациюПоНесколькимЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказКлиента.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеализацияПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	СкладыСервер.УстановитьУсловноеОформлениеСкладаВШапке(ЭтаФорма);

	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВидЦены.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеализацияСверхЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора3 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеализацияСверхЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВидЦены.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента =ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеализацияСверхЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента =ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);

	//
	
	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ЭтаФорма, Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказКлиента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Сверх заказа, заказ не выбран';uk='Понад замовлення, замовлення не вибрано'"));

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказКлиента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПереходаПраваСобственности.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПереходаПраваСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПереходаПраваСобственности.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПереходаПраваСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	НДСИсходящийСервер.УстановитьУсловноеОформлениеПоАвтоРасчетуНДС(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ДатаПереходаПраваСобственностиПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ДатаПереходаПраваСобственности) Тогда
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение, Истина, Истина);
		Иначе
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
				Объект.Партнер,
				Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение, ХозяйственнаяОперация", 
					Истина, 
					Объект.Соглашение, 
					ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту")));

		КонецЕсли;
		
		Объект.ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.РеализацияТоваровУслуг")),
			УсловияПродаж.СрокВозвратаМногооборотнойТары,
			УсловияПродаж.РассчитыватьДатуВозвратаТарыПоКалендарю,
			УсловияПродаж.КалендарьВозвратаТары);

		ДатаПлатежаКредит = ?(ЗначениеЗаполнено(Объект.ДатаПлатежа), Объект.ДатаПлатежа, ТекущаяДатаСеанса());
		РазницаДат = Объект.ДатаПереходаПраваСобственности - ДатаПлатежаКредит;
		
		Объект.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(
			Объект.ДатаПереходаПраваСобственности, УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение);
			
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
			Объект.ДатаПлатежа =  ДатаПлатежаКредит + РазницаДат;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеализацииПоНесколькимЗаказам()
	
	Если Объект.РеализацияПоЗаказам Тогда
		
		Если Объект.Товары.Количество() = 0 Тогда
			ЗаполнитьПоЗаказуСервер();
		Иначе
			ПривязатьСтрокиРеализацииКЗаказамКлиентов(Не ИспользоватьРеализациюПоНесколькимЗаказам);
		КонецЕсли;
		
		Если Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
		
	Иначе
		
		ОтвязатьОтЗаказаСервер(Истина, Ложь);
		Объект.ЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
		СписокЗаказов.Очистить();
		
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.РеализацияПоЗаказам, , Истина);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьИнформациюПоЗаказам();
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьДоступностьКомандБуфераОбмена();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	ОбновитьОтклоненияОтЗаказа();
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности();
	
	ДоставкаТоваров.ПриИзмененииФлагаПоЗаказам(Элементы, Объект, Объект.РеализацияПоЗаказам);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер(ПересчитатьЦены, ЦеныРассчитаны)
	
	Если ПересчитатьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер(Истина);
	КонецЕсли;
	
	ДатаПлатежа = Дата(1,1,1);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ГрафикОплаты = ?(
			Не ИспользоватьГрафикиОплаты Или ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение),
			Неопределено,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты"));
			
		ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, ГрафикОплаты, Объект.Соглашение);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
		Если Не ЗначениеЗаполнено(ДатаДокументаДоИзменения) Тогда
			ДатаДокументаДоИзменения = Объект.Дата;
		КонецЕсли;
		
		СдвигДат = (НачалоДня(Объект.Дата) - НачалоДня(ДатаДокументаДоИзменения))/86400;
		Если СдвигДат > 0 Тогда
			Объект.ДатаПлатежа = Объект.Дата + СдвигДат*86400;
		Иначе
			Объект.ДатаПлатежа = Объект.Дата;
		КонецЕсли;
	Иначе
		Объект.ДатаПлатежа = ДатаПлатежа;
	КонецЕсли;
	
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	
	ОбновитьОграничениеЗадолженности();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	СкладыТаблицы = Объект.Товары.Выгрузить(,"Склад").ВыгрузитьКолонку("Склад");
	ОрдернаяСхемаПриОтгрузке = СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(СкладыТаблицы, Объект.Дата, Объект.Склад);
	
	ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	УстановитьНалогообложениеНДСПоУмолчанию();
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.РеализацияПоЗаказам);
	ОбновитьОграничениеЗадолженности();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	СкладГруппа = ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	ПриИзмененииСкладаСервер();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	ОбновитьТекстНалоговыхДокументов();
	
	
	НДСИсходящийСервер.УстановитьДоступностьВалюты(Элементы, Объект.Организация, "Валюта");
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ПродажиСервер.ПартнерПриИзменении(Объект);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
	Если ДоступенВводПредоплаты(ЭтаФорма) Тогда
		
		ГрафикСоглашенияЗаполнен = ИспользоватьСоглашенияСКлиентами 
			И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.Соглашение)
			И ЗначениеЗаполнено(Объект.Соглашение.ГрафикОплаты);
		
		Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
			СтруктураПредоплаты = СуммаПредоплатыПоСоглашению(Объект, ЭтапыГрафикаОплаты, СуммаВсего);
			СуммаПредоплатыВВалютеДокумента = СтруктураПредоплаты.СуммаПредоплаты;
			СуммаПредоплатыЗаТаруВВалютеДокумента = СтруктураПредоплаты.СуммаПредоплатыЗаТару;
			РассчитатьПроцентПредоплаты(ЭтаФорма);
		Иначе
			РассчитатьСуммуПредоплаты(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьЗаказыКлиентов                        = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");
	РеализацияСверхЗаказа                             = ПраваПользователяПовтИсп.РеализацияСверхЗаказа();
	ИспользоватьРеализациюПоНесколькимЗаказам         = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");
	ИспользоватьСтатусыРеализацийТоваровУслуг         = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг");
	ИспользоватьОтгрузкуБезПереходаПраваСобственности = ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности");
	ИспользоватьСоглашенияСКлиентами                  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьГрафикиОплаты                         = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	ИспользоватьНесколькоОрганизаций                  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНесколькоСкладов                      = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьНаправленияДеятельности               = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками");
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");	
	
	ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Объект.Ссылка, НачатаОтгрузка);
	
	УстановитьВидимостьОпераций();
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	
	СкладГруппа = ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	Склад = Объект.Склад;
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	Соглашение = Объект.Соглашение;
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	Элементы.КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
	Элементы.КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
	Элементы.ГруппаНадписьИКартинкаНесколькоСкладов.Видимость = СкладГруппа;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РеализацияТоваровУслуг));
	УстановитьВидимостьЭлементовСерий();
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(, Объект.ЦенаВключаетНДС, Истина);
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.РеализацияПоЗаказам, Ложь);
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьНалогообложениеНДСПоУмолчанию(Истина);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ОбновитьИнформациюПоЗаказам();
	ОбновитьОграничениеЗадолженности();
	ОбновитьОтклоненияОтЗаказа();
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).МетаданныеДокумента();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьСостояниеСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности();
	
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.ГруппаДоговор.Видимость);
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	Элементы.ГруппаОрганизация.Видимость = ИспользоватьНесколькоОрганизаций;
	Элементы.ГруппаСклад.Видимость = ИспользоватьНесколькоСкладов;
	
	ОбновитьТекстНалоговыхДокументов();
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
	Если Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		ОбщаяСуммаПредоплатыВВалюте           = Объект.СуммаПредоплаты;
		СуммаПредоплатыЗаТаруВВалютеДокумента = Объект.СуммаПредоплатыЗаТару;
	Иначе
		СтруктураСуммПредоплаты = ПересчетСуммПредоплаты(
			Объект.СуммаПредоплаты, Объект.СуммаПредоплатыЗаТару,
			Объект.ВалютаВзаиморасчетов, Объект.Валюта, Объект.Дата);
		ОбщаяСуммаПредоплатыВВалюте           = СтруктураСуммПредоплаты.СуммаПредоплаты;
		СуммаПредоплатыЗаТаруВВалютеДокумента = СтруктураСуммПредоплаты.СуммаПредоплатыЗаТару;
	КонецЕсли;
	
	СуммаПредоплатыВВалютеДокумента = ОбщаяСуммаПредоплатыВВалюте - СуммаПредоплатыЗаТаруВВалютеДокумента;
	
	РассчитатьПроцентПредоплаты(ЭтаФорма);
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект, Объект.РеализацияПоЗаказам);
	
	Если Не ИспользоватьЗаказыКлиентов Тогда
		Элементы.КартинкаРасхождениеЗаказ.Видимость = Ложь;
		Элементы.КартинкаРасхождениеЗаказы.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыГруппаЗаказКлиента", "Видимость", Объект.РеализацияПоЗаказам);
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
			
	ТекущийСпособДоставки = Объект.СпособДоставки;
		
	ДатаДокументаДоИзменения = Объект.Дата;
	
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	ПродажиСервер.ПолучитьОбновитьИнформациюТранспортныхНакладных(ЭтаФорма);
	ИзменитьЗаголовкиПоВариантуОформленияПродажи();
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РеализацияТоваровУслуг));
	УстановитьВидимостьЭлементовСерий();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности 
		И Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
		Объект.ДатаПереходаПраваСобственности = Дата('00010101');
	КонецЕсли;
	
	УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	УстановитьНалогообложениеНДСПоУмолчанию();
	
	УстановитьВидимостьОпераций();
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	
	СкладГруппа = ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	ПриИзмененииСкладаСервер();
	ПриИзмененииХозяйственнойОперацииСервер();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ОбновитьТекстНалоговыхДокументов();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	
	НДСИсходящийСервер.УстановитьДоступностьВалюты(Элементы, Объект.Организация, "Валюта");
	
	Если Объект.РеализацияПоЗаказам Тогда
		ОбновитьОтклоненияОтЗаказа();
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.РеализацияПоЗаказам);
	ОбновитьОграничениеЗадолженности();
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
	Если ДоступенВводПредоплаты(ЭтаФорма) Тогда
		
		ГрафикСоглашенияЗаполнен = ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.Соглашение)
			И ЗначениеЗаполнено(Объект.Соглашение.ГрафикОплаты);
		
		Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
			СтруктураПредоплаты = СуммаПредоплатыПоСоглашению(Объект, ЭтапыГрафикаОплаты, СуммаВсего);
			СуммаПредоплатыВВалютеДокумента = СтруктураПредоплаты.СуммаПредоплаты;
			СуммаПредоплатыЗаТаруВВалютеДокумента = СтруктураПредоплаты.СуммаПредоплатыЗаТару;
			РассчитатьПроцентПредоплаты(ЭтаФорма);
		Иначе
			РассчитатьСуммуПредоплаты(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,ТекущаяДата());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Товары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина);
	
	// Пересчет скидок (наценок)
	Если Объект.РеализацияПоЗаказам Тогда
		СкидкиНаценкиСервер.РассчитатьПоРеализацииТоваровУслугПоЗаказу(Объект);
		Если РеализацияСверхЗаказа Тогда
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
			СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
			
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			
		КонецЕсли;
		
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		РассчитатьСуммуПредоплаты(ЭтаФорма);
		
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет Тогда
		ВзаиморасчетыСервер.ПересчитатьСуммыВВалютуРасшифровкаПлатежа(
			Объект,
			?(Объект.ТребуетсяЗалогЗаТару,
				Объект.Товары.Итог("СуммаСНДС"),
				Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары")));
	КонецЕсли;
	
	Если НЕ Объект.РеализацияПоЗаказам И НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Объект.ВалютаВзаиморасчетов = Объект.Валюта;
		ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	СтруктураПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииНаСервере(ОчиститьСуммыВзаиморасчетов)
	
	ЗаполнитьДоговорПоУмолчанию();
	Если ОчиститьСуммыВзаиморасчетов Тогда
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Объект.Товары, 0, "СуммаВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина, Истина);
		СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		
		
		Если Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате
			ИЛИ Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ВПути Тогда
			Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
		
		Если Объект.ТребуетсяЗалогЗаТару Тогда
			Объект.ТребуетсяЗалогЗаТару = Ложь;
		КонецЕсли;
		
		Объект.ДатаПереходаПраваСобственности = Дата('00010101');
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет Тогда
		
		Объект.ВернутьМногооборотнуюТару = Ложь;
		ВернутьМногооборотнуюТаруПриИзмененииСервер();
		Объект.ДатаПереходаПраваСобственности = Дата('00010101');
		
		Объект.РеализацияПоЗаказам = Ложь;
		ПриИзмененииРеализацииПоНесколькимЗаказам();
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		
		Если Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ВПути Тогда
			Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
		
		Объект.ДатаПереходаПраваСобственности = Дата('00010101');
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
		
		Если Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено Тогда
			Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ВПути;
		КонецЕсли;
		
	КонецЕсли;
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	УстановитьВидимостьГруппыФинансовогоУчета();
	УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РеализацияТоваровУслуг));
	УстановитьВидимостьЭлементовСерий();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	ОбновитьТекстНалоговыхДокументов();
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВернутьМногооборотнуюТару",
		"ТолькоПросмотр",
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
		
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПоУмолчаниюПриИзмененииСервер()		
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаАвторасчетНДС");
	МассивЭлементов.Добавить("ПересчитатьНДС");
	
	Объект.АвторасчетНДС = НДСИсходящийСервер.ПолучитьФлагИОбработатьДоступностьАвторасчетаНДС(НалогообложениеНДСПоУмолчанию, Элементы, МассивЭлементов);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(, Объект.ЦенаВключаетНДС, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер(ОчищатьСтроки = Истина, ОтвязатьВсеСтрокиОтЗаказа = Ложь)
	
	СкладГруппа = ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	Склад = Объект.Склад;
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	Объект.МестоСоставленияДокумента = ПродажиСервер.ПолучитьМестоСоставленияДокумента("РеализацияТоваровУслуг", Объект.Менеджер, Объект.Склад);
	
	Если Объект.РеализацияПоЗаказам И Не СкладГруппа И Объект.Товары.Количество() > 0 И ОчищатьСтроки Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Если Не Объект.РеализацияПоЗаказам Тогда
		
		Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Истина);
		
	КонецЕсли;
	Если ОтвязатьВсеСтрокиОтЗаказа Тогда
		ОтвязатьОтЗаказаСервер();
		Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Истина);
	КонецЕсли;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();

	ОбновитьИнформациюПоЗаказам();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);

	ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();
	
	УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам();
	Элементы.ГруппаНадписьИКартинкаНесколькоСкладов.Видимость = СкладГруппа;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
		
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
		ОбновитьТекстНалоговыхДокументов();
		
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчетОрганизации, , Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
	НДСИсходящийСервер.УстановитьДоступностьВалюты(Элементы, Объект.Организация, "Валюта");
	УстановитьНалогообложениеНДСПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		ПродажиСервер.ПартнерПриИзменении(Объект);
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.РеализацияПоЗаказам);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	ОбновитьОграничениеЗадолженности();
	
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения)

	Если НеобходимоОбновитьСтатусыСерий Тогда

		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);

	КонецЕсли;

	ОбновитьИнформациюПоЗаказам();

	Если ИспользоватьРеализациюПоНесколькимЗаказам Тогда

		ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();

	КонецЕсли;
	ПриИзмененииСкладаВТабличнойЧастиСервер();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
											
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Ссылка, НачатаОтгрузка)
	
	НачатаОтгрузка = НакладныеСервер.ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
			
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоЗаказуПоОрдеру

&НаСервере
Процедура ПерезаполнитьПоОрдерам(МассивЗаказов)
	
	СтруктураЗаполнения = ПродажиВызовСервера.ПерезаполнитьНакладнуюПоОрдерам(Объект);
	
	Если СтруктураЗаполнения.ЕстьИзменения Тогда
		
		Модифицированность = Истина;
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		Объект.СкидкиРассчитаны = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЦеноообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	
	Если ПоВсемСтрокам Тогда
		Если РеализацияСверхЗаказа Тогда
			МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", 0));
		Иначе
			МассивСтрок = Неопределено;
		КонецЕсли;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(Строка);
			Если (РеализацияСверхЗаказа И НайденнаяСтрока.КодСтроки = 0) 
				ИЛИ ОтклонениеОтУсловийПродаж Тогда
				МассивСтрок.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок, Истина);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары, // Табличная часть
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, Организация, РасчитыватьНаборы, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			Объект.Организация,
			Истина,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"),
		СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
		Если (РеализацияСверхЗаказа И НайденнаяСтрока.КодСтроки = 0) 
			ИЛИ ОтклонениеОтУсловийПродаж Тогда
			МассивСтрок.Добавить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок, Истина);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары, // Табличная часть
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, РасчитыватьНаборы, ЦенаВключаетНДС, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			Истина,
			Объект.ЦенаВключаетНДС,
			"Цена, ВидЦены"),
		СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции 

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры 

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки, Объект.РеализацияПоЗаказам И РеализацияСверхЗаказа);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	РеализацияСверхЗаказаПоЗаказу = РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам;
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуВзаиморасчетов", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыСкидки.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказаПоЗаказу);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
КонецПроцедуры 

&НаСервере
Функция ПредварительноРассчитанныеСкидкиНаценкиПоЗаказу()
	
	СкидкиНаценки = Объект.СкидкиНаценки.Выгрузить();
	СкидкиНаценки.Очистить();
	
	ПакетЗапросов = СкидкиНаценкиСервер.ЗапросСкидкиНаценкиПоЗаказу(Объект).ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = ПакетЗапросов[3].Выгрузить();
	
	ВыборкаТовары = ПакетЗапросов[2].Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказКлиента, КодСтроки", ВыборкаТовары.ЗаказКлиента, ВыборкаТовары.КодСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = НайденныеСтроки[0];
		Если ВыборкаТовары.СуммаАвтоматическойСкидки = Null Тогда
			ТекстОшибки = НСтр("ru='Возникла проблемная ситуация при переносе скидок из заказа. Возможно не задан курс для валюты ""%Валюта%""';uk='Виникла проблемна ситуація при перенесенні знижок із замовлення. Можливо не заданий курс валюти ""%Валюта%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", Объект.ВалютаВзаиморасчетов);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		СуммаКРаспределению = Окр(ВыборкаТовары.СуммаАвтоматическойСкидки, 2);
		
		Если СтрокаТаблицы.КлючСвязи <> 0 Тогда
		
			НайденныеСтроки = СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("ЗаказКлиента, КлючСвязи", СтрокаТаблицы.ЗаказКлиента, СтрокаТаблицы.КлючСвязи));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				Для Каждого СтрокаСкидкиЗаказа Из НайденныеСтроки Цикл
					
					СтрокаСкидки = СкидкиНаценки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
					СтрокаСкидки.Сумма = ВыборкаТовары.Коэффициент * СтрокаСкидки.Сумма;
					
					СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
				КонецЦикла;
				Если СуммаКРаспределению <> 0 Тогда
					СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СкидкиНаценки;
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	РеализацияСверхЗаказаПоЗаказу = РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам;
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина, Истина, РеализацияСверхЗаказаПоЗаказу);
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер    = ДанныеКартыЛояльности.Партнер;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			ПоказатьПредупреждение(,НСтр("ru='Нет доступа к партнеру-владельцу карты лояльности.';uk='Немає доступу до партнера-власника карти лояльності.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
			Модифицированность     = Истина;
			Объект.КартаЛояльности = КартаЛояльности;
			
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?';uk='Карта лояльності належить партнеру ""%1"". Змінити партнера у документі?'"), ДанныеКартыЛояльности.Партнер),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииКонтрагента = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
				И ЗначениеЗаполнено(Объект.Контрагент) И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент Тогда
				ВопросОбИзмененииКонтрагента = Истина;
			КонецЕсли;
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииКонтрагента Или ВопросОбИзмененииСоглашения Тогда
				
				Если ВопросОбИзмененииКонтрагента И ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности заданы контрагент ""%1"" и соглашение ""%2"". Применить карту лояльности и подставить в документ контрагента ""%1"" и соглашение ""%2""?';uk='Для карти лояльності задані контрагент ""%1"" та оферта ""%2"". Застосувати карту лояльності і підставити в документ контрагента ""%1"" та оферту ""%2""?'");
				ИначеЕсли ВопросОбИзмененииКонтрагента Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности задан контрагент ""%1"". Применить карту лояльности и подставить в документ контрагента ""%1""?';uk='Для карти лояльності заданий контрагент ""%1"". Застосувати карту лояльності і підставити в документ контрагента ""%1""?'");
				ИначеЕсли ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности задано соглашение ""%2"". Применить карту лояльности и подставить в документ соглашение ""%2""?';uk='Для карти лояльності задана оферта ""%2"". Застосувати карту лояльності і підставити в документ оферту ""%2""?'");
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Контрагент, ДанныеКартыЛояльности.Соглашение),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		Модифицированность     = Истина;
		Объект.КартаЛояльности = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = ДополнительныеПараметры.КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДополнительныеПараметры.ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("РеализацияСверхЗаказа", РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам);
	
	СкидкиИзменились = Ложь;
	
	Если Не Объект.РеализацияПоЗаказам Тогда
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		ТаблицаСкидкиНаценки = ПримененныеСкидки.ТаблицаСкидкиНаценки;
	ИначеЕсли (РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам) Тогда
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		ТаблицаСкидкиНаценки = ПримененныеСкидки.ТаблицаСкидкиНаценки;
		ИзменилисьСкидки(ТаблицаСкидкиНаценки, СкидкиИзменились);
		ТаблицаСкидкиНаценки = ПредварительноРассчитанныеСкидкиНаценкиПоЗаказу();
	Иначе
		ТаблицаСкидкиНаценки = ПредварительноРассчитанныеСкидкиНаценкиПоЗаказу();
	КонецЕсли;
	
	Если НЕ СкидкиИзменились Тогда
		ИзменилисьСкидки(ТаблицаСкидкиНаценки, СкидкиИзменились);
	КонецЕсли;
	
	Если СкидкиИзменились И (Не Объект.РеализацияПоЗаказам ИЛИ (РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам)) Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

Процедура ИзменилисьСкидки(ТаблицаСкидкиНаценки, СкидкиИзменились)
	
	КоличествоСтрок = ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
        СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, Серия";
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СписокСвойств = СписокСвойств + ", Склад";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваровИзЗаказа()
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
	Исключение
		ПоказатьПредупреждение(,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	МассивКодовСтрок = Новый Массив;
	АдресТоваров = "";
	
	ПередПодборомТоваровИзЗаказаСервер(МассивКодовСтрок, АдресТоваров);
	
	ПараметрыПодбора = Новый Структура(
		"ЗаказКлиента,
		|Склад,
		|Партнер,
		|Сделка,
		|Контрагент,
		|Договор,
		|Организация,
		|ХозяйственнаяОперация,
		|Соглашение,
		|РеализацияПоЗаказам,
		|ВалютаВзаиморасчетов,
		|ЦенаВключаетНДС,
		|ПорядокРасчетов,
		|ВернутьМногооборотнуюТару,
		|Статус,
		|НаправлениеДеятельности");
		
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, Объект);
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.Валюта);
	ПараметрыПодбора.Вставить("МассивКодовСтрок", МассивКодовСтрок);
	ПараметрыПодбора.Вставить("АдресТоваровРеализацииВоВременномХранилище", АдресТоваров);
	ПараметрыПодбора.Вставить("ОрдернаяСхемаПриОтгрузке", ОрдернаяСхемаПриОтгрузке);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаПодбораТоваровИзЗаказа",ПараметрыПодбора,ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(АдресТоваровВХранилище)
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	СтруктураПоискаТоваровЗаказа = Новый Структура("КодСтроки,ЗаказКлиента");
	СтруктураПоискаТоваровНакладной = Новый Структура("НомерСтроки");
	СтруктураПоискаСкидки  = Новый Структура("КлючСвязи");
	Для Каждого СтрокаТоваров Из СтруктураТаблиц.Товары Цикл
		
		// Обработка ТЧ товары.
		Если СтрокаТоваров.КодСтроки<>0 И ЗначениеЗаполнено(СтрокаТоваров.ЗаказКлиента) Тогда
			СтруктураПоискаТоваровЗаказа.КодСтроки = СтрокаТоваров.КодСтроки;
			СтруктураПоискаТоваровЗаказа.ЗаказКлиента = СтрокаТоваров.ЗаказКлиента;
			МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваровЗаказа);
		Иначе
			СтруктураПоискаТоваровНакладной.НомерСтроки = СтрокаТоваров.НомерСтроки;
			МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваровНакладной);
		КонецЕсли;
		
		Если МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
			// Удаление подчиненных строк из ТЧ скидки.
			УдалитьСтрокиТЧСкидкиНаценки(СтрокаТЧТовары);
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧТовары Цикл
				
				// Удаление подчиненных строк из ТЧ скидки.
				УдалитьСтрокиТЧСкидкиНаценки(СтрокаКУдалению);
				
				Объект.Товары.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		Если НЕ ИспользоватьРеализациюПоНесколькимЗаказам 
			И ЗначениеЗаполнено(СтрокаТЧТовары.ЗаказКлиента) 
			И Объект.ЗаказКлиента <> СтрокаТЧТовары.ЗаказКлиента Тогда
			
			Объект.ЗаказКлиента = СтрокаТЧТовары.ЗаказКлиента;
			
		КонецЕсли;
		СтрокаТЧТовары.ИндексНабора = ?(ЗначениеЗаполнено(СтрокаТЧТовары.НоменклатураНабора), 1, 0);
		
		// Обработка ТЧ скидки.
		Если ЗначениеЗаполнено(СтрокаТЧТовары.КлючСвязи) Тогда
			СтруктураПоискаСкидки.КлючСвязи = СтрокаТЧТовары.КлючСвязи;
			Для Каждого СтрокаСкидки Из СтруктураТаблиц.СкидкиНаценки.НайтиСтроки(СтруктураПоискаСкидки) Цикл
				
				ЗаполнитьЗначенияСвойств(Объект.СкидкиНаценки.Добавить(), СтрокаСкидки);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ОбновитьИнформациюПоЗаказам();
	Объект.РеализацияПоЗаказам = ЗначениеЗаполнено(Объект.ЗаказКлиента) ИЛИ СписокЗаказов.Количество() > 0;
	ОбновитьОтклоненияОтЗаказа();
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор);
	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"КодСтроки, ЗаказКлиента, НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Серия, СтатусУказанияСерий, Склад, ТипНоменклатуры, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("КодСтроки, ЗаказКлиента, НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Серия, СтатусУказанияСерий, Склад, ТипНоменклатуры, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("КодСтроки, ЗаказКлиента, НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТЧ, Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер();

КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не Объект.РеализацияПоЗаказам;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками, Объект);
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если ИзменятьКоличество Тогда
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		РассчитатьСуммуПредоплаты(ЭтаФорма);
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	ОбновитьОтклоненияОтЗаказа();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.Товары) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий);	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость  = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость         = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыЗаполнитьСерииПоFEFO.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость                = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()
	
	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.Товары);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;

		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = Неопределено;

		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодсистемаЭлектронныедокументы

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
 ТекстСостоянияЭД = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
 
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки")
		И (НЕ Объект.РеализацияПоЗаказам ИЛИ РеализацияСверхЗаказа));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ Объект.РеализацияПоЗаказам ИЛИ РеализацияСверхЗаказа);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентРучнойСкидки");
			Колонки.Добавить("СуммаРучнойСкидки");
		КонецЕсли;
		Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентАвтоматическойСкидки");
			Колонки.Добавить("СуммаАвтоматическойСкидки");
		КонецЕсли;
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры) Экспорт
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействийСИзмененнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	ПараметрыДанных.Вставить("СверхЗаказа", Истина);
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Товары", ПараметрыДанных);
	
	ОбновитьОтклоненияОтЗаказа();
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьХозяйственнуюОперациюДоговора(ХозяйственнаяОперация)
	
	ХозяйственнаяОперацияДоговора = ХозяйственнаяОперация;
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности") Тогда
		ХозяйственнаяОперацияДоговора = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(
		СписокЗаказов,
		Объект.ЗаказКлиента,
		НадписьЗаголовокЗаказы,
		Элементы,
		Элементы.ТоварыГруппаЗаказКлиента,
		Объект.Товары,
		"ЗаказКлиента",
		ИспользоватьРеализациюПоНесколькимЗаказам);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
		
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															ХозяйственнаяОперацияДоговора, 
															Объект.ВалютаВзаиморасчетов, 
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															ХозяйственнаяОперацияДоговора, 
															Объект.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	Если Договор <> Объект.Договор Тогда
		
		Объект.Договор = Договор;
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.РеализацияПоЗаказам);
		
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоЗаказуСервер()
	
	Объект.Товары.Очистить();
	
	Если ИспользоватьРеализациюПоНесколькимЗаказам Тогда
		МассивЗаказов = Неопределено;
	Иначе
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(Объект.ЗаказКлиента);
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ОтображатьСообщение", Ложь);
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
		Объект,
		Объект.Товары,
		Объект.СкидкиНаценки,
		Склад,
		МассивЗаказов,
		ПараметрыЗаполнения);
	
	ОбновитьИнформациюПоЗаказам();
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	Объект.СкидкиРассчитаны = Истина;
	
КонецФункции

&НаСервере
Функция ПривязатьСтрокиРеализацииКЗаказамКлиентов(ОтобратьПоЗаказу)
	
	Если (Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов")) Или
		(Не ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам")
		И Не ЗначениеЗаполнено(Объект.ЗаказКлиента)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|ВЫБРАТЬ
		|	ТаблицаЗаказы.ЗаказКлиента.Сделка       КАК Сделка,
		|	ТаблицаЗаказы.ЗаказКлиента              КАК ЗаказКлиента,
		|	ТаблицаЗаказы.Номенклатура              КАК Номенклатура,
		|	ТаблицаЗаказы.Характеристика            КАК Характеристика,
		|	ТаблицаЗаказы.КодСтроки                 КАК КодСтроки,
		|	ТаблицаЗаказы.Склад                     КАК Склад,
		|	ТаблицаЗаказы.Серия                     КАК Серия,
		|	СУММА(ТаблицаЗаказы.КОформлению)        КАК КОформлениюОстаток
		|ПОМЕСТИТЬ
		|	ЗаказыКлиентов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|		ЗаказыОстатки.Характеристика КАК Характеристика,
		|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
		|		ЗаказыОстатки.Склад КАК Склад,
		|		ЗаказыОстатки.Серия КАК Серия,
		|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(,
		|				ВЫБОР
		|						КОГДА &ОтобратьПоЗаказу
		|							ТОГДА ЗаказКлиента = &ЗаказКлиента
		|						ИНАЧЕ ЗаказКлиента.Партнер = &Партнер
		|								И ЗаказКлиента.Контрагент = &Контрагент
		|								И ЗаказКлиента.Договор = &Договор
		|								И ЗаказКлиента.Организация = &Организация
		|								И ЗаказКлиента.ХозяйственнаяОперация В (&ХозяйственныеОперацииРаспоряжений)
		|								И ЗаказКлиента.Соглашение = &Соглашение
		|								И ЗаказКлиента.Сделка = &Сделка
		|								И (ЗаказКлиента.Валюта = &ВалютаВзаиморасчетов ИЛИ
		|									&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
		|								И ЗаказКлиента.ЦенаВключаетНДС = &ЦенаВключаетНДС
		|								И ЗаказКлиента.ПорядокРасчетов = &ПорядокРасчетов
		|								И ЗаказКлиента.ВернутьМногооборотнуюТару = &ВернутьМногооборотнуюТару
		|								И ВЫБОР
		|									КОГДА НЕ &ИспользоватьНаправленияДеятельности
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ЗаказКлиента.НаправлениеДеятельности = &НаправлениеДеятельности
		|								КОНЕЦ
		|					КОНЕЦ
		|					И ВЫБОР
		|						КОГДА ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ЭтоГруппа
		|							ТОГДА Склад В ИЕРАРХИИ (&Склад)
		|									ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИНАЧЕ Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &Склад)
		|					КОНЕЦ
		|					И Номенклатура.ВариантОформленияПродажи В (ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг),
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав))
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							Товары.Номенклатура КАК Номенклатура,
		|							Товары.Характеристика КАК Характеристика
		|						ИЗ
		|							Товары КАК Товары)) КАК ЗаказыОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказыДвижения.ЗаказКлиента,
		|		ЗаказыДвижения.Номенклатура,
		|		ЗаказыДвижения.Характеристика,
		|		ЗаказыДвижения.КодСтроки,
		|		ЗаказыДвижения.Склад,
		|		ЗаказыДвижения.Серия,
		|		ВЫБОР
		|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЗаказыДвижения.КОформлению
		|			ИНАЧЕ ЗаказыДвижения.КОформлению
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов КАК ЗаказыДвижения
		|	ГДЕ
		|		ЗаказыДвижения.Регистратор = &Регистратор
		|		И ВЫБОР
		|				КОГДА &ОтобратьПоЗаказу
		|					ТОГДА ЗаказыДвижения.ЗаказКлиента = &ЗаказКлиента
		|				ИНАЧЕ ЗаказыДвижения.ЗаказКлиента.Партнер = &Партнер
		|						И ЗаказыДвижения.ЗаказКлиента.Контрагент = &Контрагент
		|						И ЗаказыДвижения.ЗаказКлиента.Договор = &Договор
		|						И ЗаказыДвижения.ЗаказКлиента.Организация = &Организация
		|						И ЗаказыДвижения.ЗаказКлиента.ХозяйственнаяОперация В (&ХозяйственныеОперацииРаспоряжений)
		|						И ЗаказыДвижения.ЗаказКлиента.Соглашение = &Соглашение
		|						И ЗаказыДвижения.ЗаказКлиента.Сделка = &Сделка
		|						И (ЗаказыДвижения.ЗаказКлиента.Валюта = &ВалютаВзаиморасчетов ИЛИ
		|							&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
		|						И ЗаказыДвижения.ЗаказКлиента.ЦенаВключаетНДС = &ЦенаВключаетНДС
		|						И ЗаказыДвижения.ЗаказКлиента.ПорядокРасчетов = &ПорядокРасчетов
		|						И ЗаказыДвижения.ЗаказКлиента.ВернутьМногооборотнуюТару = &ВернутьМногооборотнуюТару
		|						И ВЫБОР
		|							КОГДА НЕ &ИспользоватьНаправленияДеятельности
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЗаказыДвижения.ЗаказКлиента.НаправлениеДеятельности = &НаправлениеДеятельности
		|						КОНЕЦ
		|			КОНЕЦ
		|		И ЗаказыДвижения.Активность
		|		И ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ЭтоГруппа
		|					ТОГДА ЗаказыДвижения.Склад В ИЕРАРХИИ (&Склад)
		|							ИЛИ ЗаказыДвижения.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				ИНАЧЕ ЗаказыДвижения.Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &Склад)
		|			КОНЕЦ
		|		И ЗаказыДвижения.Номенклатура.ВариантОформленияПродажи В (ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав))
		|		И (ЗаказыДвижения.Номенклатура, ЗаказыДвижения.Характеристика) В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура КАК Номенклатура,
		|					Товары.Характеристика КАК Характеристика
		|				ИЗ
		|					Товары КАК Товары)) КАК ТаблицаЗаказы
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.ЗаказКлиента,
		|	ТаблицаЗаказы.Номенклатура,
		|	ТаблицаЗаказы.Характеристика,
		|	ТаблицаЗаказы.КодСтроки,
		|	ТаблицаЗаказы.Склад,
		|	ТаблицаЗаказы.Серия
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаЗаказы.КОформлению) > 0
		|;
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*)                     КАК КоличествоДублей,
		|	ЗаказыКлиентов.Номенклатура       КАК Номенклатура,
		|	ЗаказыКлиентов.Характеристика     КАК Характеристика,
		|	ЗаказыКлиентов.Серия              КАК Серия,
		|	ЗаказыКлиентов.Склад              КАК Склад
		|ПОМЕСТИТЬ
		|	ДублиТоваров
		|ИЗ
		|	ЗаказыКлиентов КАК ЗаказыКлиентов
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Склад
		|;
		|ВЫБРАТЬ
		|	ЗаказыКлиентов.ЗаказКлиента            КАК ЗаказКлиента,
		|	ЗаказыКлиентов.Номенклатура            КАК Номенклатура,
		|	ЗаказыКлиентов.Характеристика          КАК Характеристика,
		|	ЗаказыКлиентов.КодСтроки               КАК КодСтроки,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаТовары.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|			ТОГДА ЗаказыКлиентов.ЗаказКлиента.Назначение
		|		ИНАЧЕ Значение(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Назначение,
		|	ЗаказыКлиентов.Склад                   КАК Склад,
		|	ЗаказыКлиентов.Серия                   КАК Серия,
		|	ЗаказыКлиентов.КОформлениюОстаток      КАК КОформлениюОстаток,
		|	ЗаказКлиентаТовары.СрокПоставки        КАК СрокПоставки,
		|	ЗаказКлиентаТовары.ВидЦены             КАК ВидЦены,
		|	ЗаказКлиентаТовары.Цена                КАК Цена,
		|	ЗаказКлиентаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ЗаказКлиентаТовары.СтавкаНДС           КАК СтавкаНДС,
		|	0                                 КАК Распределено,
		|	ДублиТоваров.КоличествоДублей     КАК КоличествоДублей
		|ИЗ
		|	ЗаказыКлиентов КАК ЗаказыКлиентов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДублиТоваров
		|ПО
		|	ЗаказыКлиентов.Номенклатура = ДублиТоваров.Номенклатура
		|	И ЗаказыКлиентов.Характеристика = ДублиТоваров.Характеристика
		|	И ЗаказыКлиентов.Склад = ДублиТоваров.Склад
		|	И ЗаказыКлиентов.Серия = ДублиТоваров.Серия
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ПО
		|	ЗаказКлиентаТовары.Ссылка = ЗаказыКлиентов.ЗаказКлиента
		|	И ЗаказКлиентаТовары.КодСтроки = ЗаказыКлиентов.КодСтроки
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Характеристика,
		|	ЗаказКлиентаТовары.Склад,
		|	ЗаказКлиентаТовары.Серия,
		|	ЗаказКлиентаТовары.ДатаОтгрузки,
		|	ЗаказКлиентаТовары.Ссылка,
		|	ЗаказКлиентаТовары.НомерСтроки
		|");
		
	Запрос.УстановитьПараметр("ЗаказКлиента",              Объект.ЗаказКлиента);
	Запрос.УстановитьПараметр("Партнер",                   Объект.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор",                   Объект.Договор);
	Запрос.УстановитьПараметр("Организация",               Объект.Организация);
	Запрос.УстановитьПараметр("Сделка",                    Объект.Сделка);
	Запрос.УстановитьПараметр("Соглашение",                Объект.Соглашение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",      Объект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",           Объект.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ПорядокРасчетов",           Объект.ПорядокРасчетов);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("Склад",                     Объект.Склад);
	Запрос.УстановитьПараметр("Регистратор",               Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",          ОтобратьПоЗаказу);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",     Объект.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",   Объект.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ИспользоватьНаправленияДеятельности",
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности"));
	
	ХозяйственныеОперацииРаспоряжений = Новый Массив();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет Тогда
		
		ХозяйственныеОперацииРаспоряжений.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственныеОперацииРаспоряжений.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		ХозяйственныеОперацииРаспоряжений.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию  Тогда
		
		ХозяйственныеОперацииРаспоряжений.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		ХозяйственныеОперацииРаспоряжений.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ХозяйственныеОперацииРаспоряжений", ХозяйственныеОперацииРаспоряжений);
	
	Запрос.УстановитьПараметр("Товары",  Объект.Товары.Выгрузить(,"КодСтроки,Номенклатура,Характеристика,ЗаказКлиента"));
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	ТаблицаНераспределенныхТоваров = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Характеристика");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Склад");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Серия");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("ЗаказКлиента");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Количество");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("СрокПоставки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("ВидЦены");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Цена");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("ПроцентРучнойСкидки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("СтавкаНДС");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",        Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",      Выборка.Характеристика);
		СтруктураПоиска.Вставить("Склад",               Выборка.Склад);
		СтруктураПоиска.Вставить("Серия",               Выборка.Серия);
		СтруктураПоиска.Вставить("ВидЦены",             Выборка.ВидЦены);
		СтруктураПоиска.Вставить("Цена",                Выборка.Цена);
		СтруктураПоиска.Вставить("ПроцентРучнойСкидки", Выборка.ПроцентРучнойСкидки);
		СтруктураПоиска.Вставить("СтавкаНДС",           Выборка.СтавкаНДС);
		СтруктураПоиска.Вставить("КодСтроки", 0);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличество = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной
		Если Выборка.КоличествоДублей < 2 Тогда
		
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказКлиента,Назначение,СрокПоставки");
				НераспределенноеКоличество = НераспределенноеКоличество - ТекСтрока.Количество;
				
				Если НераспределенноеКоличество <= 0 Тогда
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают
			
			НайденаПодходящаяСтрока = Ложь;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ТекСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказКлиента,Назначение,СрокПоставки");
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли товаров, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхТоваров.Количество() > 0 Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
				Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		Для Каждого НераспределеннаяСтрока Из ТаблицаНераспределенныхТоваров Цикл
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("КодСтроки",           0);
			СтруктураПоиска.Вставить("ЗаказКлиента",        Неопределено);
			СтруктураПоиска.Вставить("Номенклатура",        НераспределеннаяСтрока.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика",      НераспределеннаяСтрока.Характеристика);
			СтруктураПоиска.Вставить("Склад",               НераспределеннаяСтрока.Склад);
			СтруктураПоиска.Вставить("ВидЦены",             НераспределеннаяСтрока.ВидЦены);
			СтруктураПоиска.Вставить("Цена",                НераспределеннаяСтрока.Цена);
			СтруктураПоиска.Вставить("ПроцентРучнойСкидки", НераспределеннаяСтрока.ПроцентРучнойСкидки);
			СтруктураПоиска.Вставить("СтавкаНДС",           НераспределеннаяСтрока.СтавкаНДС);
			СтруктураПоиска.Вставить("Серия",               НераспределеннаяСтрока.Серия);
			
			СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				
				Если СтрокаТовары.Количество = НераспределеннаяСтрока.Количество Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказКлиента,Назначение,СрокПоставки");
					НераспределеннаяСтрока.Количество = 0;
				ИначеЕсли СтрокаТовары.Количество > НераспределеннаяСтрока.Количество Тогда
					Разница = СтрокаТовары.Количество - НераспределеннаяСтрока.Количество;
					
					НоваяСтрокаТовары = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
					НоваяСтрокаТовары.Количество = Разница;
					СтрокиТовары.Добавить(НоваяСтрокаТовары);
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказКлиента,Назначение,СрокПоставки,Количество");
					
					НераспределеннаяСтрока.Количество = 0;
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, Неопределено);
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, Неопределено);
					
				ИначеЕсли СтрокаТовары.Количество < НераспределеннаяСтрока.Количество Тогда
					Разница = НераспределеннаяСтрока.Количество - СтрокаТовары.Количество;
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказКлиента,Назначение,СрокПоставки");
					НераспределеннаяСтрока.Количество = Разница;
					
				КонецЕсли;
				
				Если НераспределеннаяСтрока.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		ОбновитьОтклоненияОтЗаказа();
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьРеквизитовОплаты(Форма)
	
	Объект = Форма.Объект;
	
	КоличествоРасхождений 	   = Объект.Товары.Итог("РасхождениеЗаказ");
	ЕстьСтрокиСверхЗаказа      = Объект.РеализацияПоЗаказам И Форма.РеализацияСверхЗаказа И КоличествоРасхождений > 0;
	ПорядокРасчетовПоНакладным = (Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
	ЭтоПередачаНаКомиссию      = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	
	ВидимостьЭлемента = НЕ ЭтоПередачаНаКомиссию
		И (Не Объект.РеализацияПоЗаказам Или ПорядокРасчетовПоНакладным Или ЕстьСтрокиСверхЗаказа);
	Форма.Элементы.НадписьЭтапыОплаты.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыФинансовогоУчета()
	
	ЭтоПередачаНаКомиссию = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма, Ложь, Объект.РеализацияПоЗаказам);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ПриИзмененииСкладаВТабличнойЧастиСервер();
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	ТолькоПросмотрЭлементов = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	Если Не Объект.РеализацияПоЗаказам Тогда
		МассивЭлементов.Добавить("Дата");
	КонецЕсли;
	
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("ПартнерБезКЛ");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Договор");
	
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("АвторасчетНДС");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	МассивЭлементов.Добавить("РеализацияПоЗаказам");
	МассивЭлементов.Добавить("РеализацияПоЗаказу");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("ДатаВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением,ПередНачаломИзменения");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
	
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	
	МассивЭлементов.Добавить("ТоварыПодобратьТоварыПоЗаказамОрдерам");
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыЗагрузитьИзВнешнегоФайла");
	МассивЭлементов.Добавить("ТоварыСоставНабора");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("СчитатьКартуЛояльностиКлиент");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	МассивЭлементов.Добавить("ТоварыПолучитьВес");
	МассивЭлементов.Добавить("ТоварыПроверитьКоличествоВДокументе");
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	
	МассивЭлементов.Добавить("ТоварыОтвязатьОтЗаказа");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюОтвязатьОтЗаказа");
	
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, ТолькоПросмотрЭлементов);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыОткрытьПодбор",                "Доступность", 
		Не Объект.РеализацияПоЗаказам ИЛИ (Объект.РеализацияПоЗаказам И РеализацияСверхЗаказа));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыДополнитьМногооборотнойТарой", "Доступность", Не Объект.РеализацияПоЗаказам);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиОткрытьИнформациюОСкидках",                "Доступность", Не Объект.РеализацияПоЗаказам);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюУслугиОткрытьИнформациюОСкидках", "Доступность", Не Объект.РеализацияПоЗаказам);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыОтвязатьОтЗаказа",                "Видимость", Объект.РеализацияПоЗаказам И РеализацияСверхЗаказа);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКонтекстноеМенюОтвязатьОтЗаказа", "Видимость", Объект.РеализацияПоЗаказам И РеализацияСверхЗаказа);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗагрузитьИзВнешнегоФайла",                "Доступность", 
		Не Объект.РеализацияПоЗаказам ИЛИ (Объект.РеализацияПоЗаказам И РеализацияСверхЗаказа));

	Если Не Объект.РеализацияПоЗаказам Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьСкладВВыделенныхСтроках", "Доступность", СкладГруппа);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТоварыЗаполнитьСкладВВыделенныхСтроках", "Видимость", Ложь);
	КонецЕсли;
	
	Если Объект.РеализацияПоЗаказам Тогда
		
		МассивЭлементов = Новый Массив;
		
		МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
		
		МассивЭлементов.Добавить("СчитатьКартуЛояльности");
		МассивЭлементов.Добавить("СчитатьКартуЛояльностиКлиент");
		МассивЭлементов.Добавить("КартаЛояльности");
		
		Если НЕ РеализацияСверхЗаказа Тогда
			МассивЭлементов.Добавить("ТоварыСкопировать");
			МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
			МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
			МассивЭлементов.Добавить("ТоварыКонтекстноеМенюРазбитьСтроку");
			МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
			
			МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
			МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
			МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
			МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Ложь);
		
	КонецЕсли;
	
	Если Объект.РеализацияПоЗаказам И Не ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж() Тогда
		
		МассивЭлементов = Новый Массив;
		
		// Элементы управления шапки
		МассивЭлементов.Добавить("Партнер");
		МассивЭлементов.Добавить("ПартнерБезКЛ");
		МассивЭлементов.Добавить("Соглашение");
		МассивЭлементов.Добавить("Договор");
		МассивЭлементов.Добавить("Валюта");
		МассивЭлементов.Добавить("ЦенаВключаетНДС");
		МассивЭлементов.Добавить("Организация");
		МассивЭлементов.Добавить("Контрагент");
		
		МассивЭлементов.Добавить("АвторасчетНДС");
		
		МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
		МассивЭлементов.Добавить("РеализацияПоЗаказам");
		МассивЭлементов.Добавить("РеализацияПоЗаказу");
		МассивЭлементов.Добавить("КартаЛояльности");
		
		Если Не РеализацияСверхЗаказа Тогда
			МассивЭлементов.Добавить("ТоварыНоменклатура");
			МассивЭлементов.Добавить("ТоварыКодСтроки");
			МассивЭлементов.Добавить("ТоварыХарактеристика");
			МассивЭлементов.Добавить("ТоварыУпаковка");
			МассивЭлементов.Добавить("ТоварыВидЦены");

			МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
			МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
			МассивЭлементов.Добавить("ТоварыСтавкаНДС");
			
		КонецЕсли;
		
		МассивЭлементов.Добавить("Склад");
		МассивЭлементов.Добавить("ХозяйственнаяОперация");
		МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
		МассивЭлементов.Добавить("ДатаВозвратаМногооборотнойТары");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "ТолькоПросмотр", Истина);
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
		МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
		МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
		МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
		МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", РеализацияСверхЗаказа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	ВидимостьЭлементов = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	Элементы.ВалютаВзаиморасчетов.Видимость = ВидимостьЭлементов;
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("СуммаСкидки");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("СчитатьКартуЛояльностиКлиент");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ВидимостьЭлементов);
	
	Элементы.ФормаОткрытьВзаиморасчетыПоУпрОрганизации.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
	
	Элементы.ДекорацияОтступТребуетсяЗалогЗаТару.Видимость = Элементы.ТребуетсяЗалогЗаТару.Видимость;
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Элементы.НалогообложениеНДСПоУмолчанию, Объект.ХозяйственнаяОперация);
	
	УстановитьПараметрыВыбораВидаЦены();
	
	УстановитьВидимостьПоляПартнер();                                                                                    
	
	Элементы.РеализацияПоЗаказу.Доступность = НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет;
	Элементы.РеализацияПоЗаказам.Доступность = НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = ИспользоватьОтгрузкуБезПереходаПраваСобственности;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = Ложь;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ВозможнаРеализацияБезПереходаПраваСобственности = 
			ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ВозможнаРеализацияБезПереходаПраваСобственности");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Элементы.Найти("ХозяйственнаяОперация") <> Неопределено  Тогда
	
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьУправленческуюОрганизацию") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(
			Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
		
		Если Не ВозможнаРеализацияБезПереходаПраваСобственности Тогда
			
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		Иначе
			
			Если ЭлементСписка = Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(
					Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
	
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,
		Объект.ВидыЗапасов,
		УникальныйИдентификатор,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТЧСкидкиНаценки(СтрокаТЧТовары)
	
	Если ЗначениеЗаполнено(СтрокаТЧТовары.КлючСвязи) Тогда
		
		Для Каждого СтрокаКУдалению Из Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧТовары.КлючСвязи)) Цикл
			
			Объект.СкидкиНаценки.Удалить(СтрокаКУдалению);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Если Объект.РеализацияПоЗаказам И СписокЗаказов.Количество() <= 1
			И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
		
		Если ТипЗнч(Объект.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			Документы.ЗаказКлиента.РассчитатьСостояние(
				Объект.ЗаказКлиента,
				Объект.Договор,
				ЭтаФорма);
		
		ИначеЕсли ТипЗнч(Объект.ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			
			Документы.ЗаявкаНаВозвратТоваровОтКлиента.РассчитатьСостояние(
				Объект.ЗаказКлиента,
				Объект.Договор,
				ЭтаФорма);
			
		КонецЕсли;
		
	Иначе
		
		Документы.РеализацияТоваровУслуг.РассчитатьСостояние(
			Объект.Ссылка,
			Объект.Договор,
			ЭтаФорма);
		
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Расчеты по договору';uk='Розрахунки за договором'");
	ИначеЕсли Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
	 И Объект.РеализацияПоЗаказам
	 И ТипЗнч(Объект.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Расчеты = НСтр("ru='Оплачено по заказу';uk='Сплачено за замовленням'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	ИначеЕсли Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
	 И Объект.РеализацияПоЗаказам
	 И ТипЗнч(Объект.ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Расчеты = НСтр("ru='Оплачено по заявке на возврат';uk='Сплачено за заявкою на повернення'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	Иначе
		Расчеты = НСтр("ru='Оплачено';uk='Оплачено'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	КонецЕсли;
	
	Элементы.Расчеты.Видимость = Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт
	
	ЗаполнитьЦеныПоСоглашению(Команда);
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииСкладаВТабличнойЧастиСервер()
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа, Ложь);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	СкладыТаблицы = Объект.Товары.Выгрузить(,"Склад").ВыгрузитьКолонку("Склад");
	ОрдернаяСхемаПриОтгрузке = СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(СкладыТаблицы, Объект.Дата, Объект.Склад);

КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	РеализацияСверхЗаказаПоЗаказу = РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам;
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, 
										ТолькоВыделенныеСтроки, , , , РеализацияСверхЗаказаПоЗаказу);
	
КонецФункции


&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации()
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                   Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя",  Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",   Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",       Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",                Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                 Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",              Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",                Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ПредставительКонтрагента",       Объект.ПредставительКонтрагента);
	СтруктураПараметров.Вставить("ДоверенностьСерия",              Объект.ДоверенностьСерия);
	СтруктураПараметров.Вставить("ДоверенностьАльтернативныйВидДокумента", Объект.ДоверенностьАльтернативныйВидДокумента);
	СтруктураПараметров.Вставить("ДоверенностьПримечание",         Объект.ДоверенностьПримечание);
	СтруктураПараметров.Вставить("ДоверенностьНомер",               Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("ПолучилПоДругомуДокументу",      Объект.ПолучилПоДругомуДокументу);
	СтруктураПараметров.Вставить("МестоСоставленияДокумента",      Объект.МестоСоставленияДокумента);
	СтруктураПараметров.Вставить("ПредставительОрганизации",       Объект.ПредставительОрганизации);
	СтруктураПараметров.Вставить("ПредставительОрганизацииДолжность",Объект.ПредставительОрганизацииДолжность);
	СтруктураПараметров.Вставить("Партнер",                         Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",           Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                      Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                  Ложь);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "РеализацияТоваровУслуг");
	СтруктураПараметров.Вставить("РеализацияПоЗаказам",             Объект.РеализацияПоЗаказам);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",       Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Организация",                     Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                            Объект.Дата);
	СтруктураПараметров.Вставить("Склад",                          Объект.Склад);
	СтруктураПараметров.Вставить("Менеджер",                       Объект.Менеджер);

	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	Перем ВидимостьТекста;
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		ВидимостьТекста,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость);
	
	Элементы.ТекстОстатокДопустимогоКредита.Видимость = ВидимостьТекста
		И Элементы.ГруппаДоговор.Видимость;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Склад)
	
	Возврат Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ХозОперация = Объект.ХозяйственнаяОперация;
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	УстановитьВидимостьОпераций();
	Если ХозОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет ТОгда
		Объект.ХозяйственнаяОперация = ХозОперация;
	КонецЕсли;
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ГруппаНадписьДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуммаПредоплатыПоСоглашению(Знач Объект, Знач ЭтапыГрафикаОплаты, СуммаВсего)
	
	СуммаПродажи      = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	СуммаЗалогаЗаТару = ?(Объект.ТребуетсяЗалогЗаТару, СуммаВсего - СуммаПродажи, 0);
	
	Возврат ПродажиСервер.СуммаПредоплатыПоСоглашению(
		Объект,
		ЭтапыГрафикаОплаты,
		СуммаПродажи,
		СуммаЗалогаЗаТару);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПредоплаты(Форма)
	
	СуммаПродажи         = Форма.Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	СуммаЗалогаЗаТару    = ?(Форма.Объект.ТребуетсяЗалогЗаТару, Форма.СуммаВсего - СуммаПродажи, 0);
	
	Форма.СуммаПредоплатыВВалютеДокумента = СуммаПродажи * Форма.ПроцентПредоплаты / 100;
	Форма.СуммаПредоплатыЗаТаруВВалютеДокумента = СуммаЗалогаЗаТару * Форма.ПроцентПредоплатыЗаТару / 100;
	
	Форма.НадписьЭтапыОплаты = НадписьЭтапыОплаты(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПроцентПредоплаты(Форма);
	
	Форма.ПроцентПредоплаты       = 0;
	Форма.ПроцентПредоплатыЗаТару = 0;
	
	Если Форма.ИспользоватьСтатусыРеализацийТоваровУслуг Тогда
		
		СуммаПродажи      = Форма.Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
		СуммаЗалогаЗаТару = ?(Форма.Объект.ТребуетсяЗалогЗаТару, Форма.СуммаВсего - СуммаПродажи, 0);
		
		Если СуммаПродажи > 0 Тогда
			Форма.ПроцентПредоплаты = Форма.СуммаПредоплатыВВалютеДокумента * 100 / СуммаПродажи;
		КонецЕсли;
		Если СуммаЗалогаЗаТару > 0 Тогда
			Форма.ПроцентПредоплатыЗаТару = Форма.СуммаПредоплатыЗаТаруВВалютеДокумента * 100 / СуммаЗалогаЗаТару;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПересчетСуммПредоплаты(СуммаПредоплаты, СуммаПредоплатыЗаТару, ТекущаяВалюта, НоваяВалюта, Дата)
	
	СуммаПредоплатыВВалютеВзаиморасчетов = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(
		СуммаПредоплаты,
		ТекущаяВалюта,
		НоваяВалюта,
		Дата);
	
	СуммаПредоплатыЗаТаруВВалютеВзаиморасчетов = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(
		СуммаПредоплатыЗаТару,
		ТекущаяВалюта,
		НоваяВалюта,
		Дата);
	
	СтруктураСуммПредоплаты = Новый Структура;
	СтруктураСуммПредоплаты.Вставить("СуммаПредоплаты",       СуммаПредоплатыВВалютеВзаиморасчетов);
	СтруктураСуммПредоплаты.Вставить("СуммаПредоплатыЗаТару", СуммаПредоплатыЗаТаруВВалютеВзаиморасчетов);
	
	Возврат СтруктураСуммПредоплаты;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДатуПлатежаПоУмолчаниюНаСервере()
	
	Объект.ДатаПлатежа = Объект.Дата;
	ЭтапыОплатыСервер.ЗаполнитьДатуПлатежаПоУмолчанию(Объект, , Истина);
	
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов() Экспорт
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	УстановитьВидимостьГруппыФинансовогоУчета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ДатаВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивЭлементов,
		"Доступность",
		Форма.Объект.ВернутьМногооборотнуюТару);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВернутьМногооборотнуюТару",
		"Доступность",
		Форма.Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействийДобавленныеСтроки);
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика,Склад",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
		
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности()
	
	Элементы.ДатаПереходаПраваСобственности.Видимость = 
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
		И Объект.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате;
		
	Элементы.Статус.Видимость = (НЕ Объект.РеализацияПоЗаказам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	Если Не Объект.ВернутьМногооборотнуюТару Тогда
		Объект.ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ПересчитатьСуммуСверхЗаказа();
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер()
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаЦены()
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВыводитьПроизвольныйВидЦен", Истина));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьПриПродаже", Истина));
	
	Элементы.ТоварыВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу()
	
	Перем КешированныеЗначения;
	СтруктураДействий = Новый Структура();
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	Если Объект.Товары.Количество() = 0 или Не Объект.РеализацияПоЗаказам или НЕ ИспользоватьЗаказыКлиентов Тогда
		Элементы.КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		Элементы.КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
		НадписьРасхождениеЗаказ = "";
		
		Если Объект.Товары.Количество()>0 Тогда
			Для каждого СтрокаТовары Из Объект.Товары Цикл
				
				СтрокаТовары.РасхождениеЗаказ = 0;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, КешированныеЗначения);
				
			КонецЦикла;
		КонецЕсли;
		
		КоличествоРасхождений = 0;
		СуммаСверхЗаказа = 0;
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммуСверхЗаказа();
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Товары, НадписьРасхождениеЗаказ, ЭлементыФормы)
	КоличествоРасхождений = Товары.Итог("РасхождениеЗаказ");
	
	Если КоличествоРасхождений > 0 Тогда
		ЭлементыФормы.КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		ЭлементыФормы.КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		НадписьРасхождениеЗаказ = СтрЗаменить(НСтр("ru='Строк сверх заказа';uk='Рядків понад замовлення'") + НСтр("ru=': %КоличествоРасхождений%';uk=': %КоличествоРасхождений%'"), "%КоличествоРасхождений%", КоличествоРасхождений);
	Иначе
		ЭлементыФормы.КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		ЭлементыФормы.КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
		НадписьРасхождениеЗаказ = "";
		КоличествоРасхождений = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)

	Если СтрокиОтвязаны Тогда
		ТекстОповещения = НСтр("ru='В документе от заказов отвязано строк (%%Количество%%).';uk='В документі від замовлень відв''язано рядків (%%Количество%%).'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Количество%%", КоличествоОтработанныхСтрок);
		ПоказатьОповещениеПользователя(
			НСтр("ru='Строки отвязаны';uk='Рядки відв''язані'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='Строки не отвязаны';uk='Рядки не відв''язані'"),
			,
			НСтр("ru='Ни одна строка не была отвязана.';uk='Жоден рядок не був відв''язаний.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, РеализацияПоЗаказам, ТребуетсяЗалогЗаТару)
	
	Если РеализацияПоЗаказам Тогда
		Если ТекущаяСтрока.КодСтроки = 0 Тогда
			ТекущаяСтрока.РасхождениеЗаказ = 1;
			ТекущаяСтрока.СуммаСверхЗаказа = ?(ТребуетсяЗалогЗаТару, ТекущаяСтрока.СуммаСНДС, ТекущаяСтрока.СуммаСНДСБезВозвратнойТары);
		Иначе
			ТекущаяСтрока.РасхождениеЗаказ = 0;
			ТекущаяСтрока.СуммаСверхЗаказа =0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтклоненияОтЗаказа()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекСтрока, Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока)
	
	// Если текущая строка не связана с заказом
	Если ТекущаяСтрока.КодСтроки = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	// Если ни один из ключевых реквизитов не изменился
	Если ТекущаяСтрока.Номенклатура = ПредыдущиеРеквизитыСтроки.Номенклатура
		И ТекущаяСтрока.Характеристика = ПредыдущиеРеквизитыСтроки.Характеристика
		И ТекущаяСтрока.Склад = ПредыдущиеРеквизитыСтроки.Склад Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ТекстВопроса = НСтр("ru='Редактируемая строка перестанет быть связанной со строкой заказа. Продолжить?';uk='Редагований рядок перестане бути пов''язаним з рядком замовлення. Продовжити?'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	// Если пользователь потвердил изменение значения ключевого реквизита
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КодСтроки = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ДополнительныеПараметры.ТекущаяСтрока, Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	Иначе
		
		// Если пользователь отказался менять связанную строку, возвращем старые значения
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущаяСтрока, ПредыдущиеРеквизитыСтроки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВозможноНазначениеРучнойСкидкиНаценки()
	
	ВозможноНазначениеРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары';uk='Товари'"));
	
	Если ВозможноНазначениеРучнойСкидкиНаценки И РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам И Объект.Товары.Итог("РасхождениеЗаказ") = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Ручная скидка (наценка) не может быть назначена на строки по заказу.';uk='Ручна знижка (націнка) не може бути призначена на рядки по замовленню.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
	Иначе
		Возврат ВозможноНазначениеРучнойСкидкиНаценки
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВозможнаОтменаРучныхСкидокНаценок()
	
	ВозможнаОтменаРучныхСкидокНаценок = СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары';uk='Товари'"));
	
	Если ВозможнаОтменаРучныхСкидокНаценок И РеализацияСверхЗаказа И Объект.РеализацияПоЗаказам И Объект.Товары.Итог("РасхождениеЗаказ") = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Ручная скидка (наценка) не может быть отменена в строках по заказу.';uk='Ручна знижка (націнка) не може бути скасована у рядках по замовленню.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
	Иначе
		Возврат ВозможнаОтменаРучныхСкидокНаценок
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтвязатьОтЗаказаСервер(ВсеСтроки = Истина, ОтвязатьТолькоСтроки = Истина)
	
	Перем КэшированныеЗначения;
	СтруктураДействий = Новый Структура();
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	Если ВсеСтроки Тогда
		КоллекцияСтрок = Объект.Товары;
	Иначе
		КоллекцияСтрок = Элементы.Товары.ВыделенныеСтроки;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из КоллекцияСтрок Цикл
		
		Если ВсеСтроки Тогда
			СтрокаТаблицы = ТекСтрока;
			ТекСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
		Иначе
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
		КонецЕсли;
		НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(СтрокаТаблицы,КэшированныеЗначения,ПараметрыУказанияСерий);
		
		СтрокаТаблицы.КодСтроки = 0;
		Если ОтвязатьТолькоСтроки Тогда
			СтрокаТаблицы.РасхождениеЗаказ = 1;
		Иначе
			СтрокаТаблицы.ЗаказКлиента = Неопределено;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
		
		СтрокаТаблицы.СуммаСверхЗаказа = ?(Объект.ТребуетсяЗалогЗаТару,СтрокаТаблицы.СуммаСНДС, СтрокаТаблицы.СуммаСНДСБезВозвратнойТары);
		// Переподчиним строки серий
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,ПараметрыУказанияСерий,ТекСтрока,КэшированныеЗначения);
		
	КонецЦикла;
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров, , "КодСтроки");
		ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТЧТовары, Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	РассчитатьСуммуПредоплаты(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	УстановитьВидимостьРеквизитовОплаты(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуСверхЗаказа()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	СуммаСверхЗаказа = Объект.Товары.Итог("СуммаСверхЗаказа");
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЭтапыОплатыВоВременноеХранилищеНаСервере(СуммаПродажи, СуммаЗалогаЗаТару)
	
	ТаблицаЭтапов = Новый ТаблицаЗначений();
	
	ТаблицаЭтапов.Колонки.Добавить("ВариантОплаты");
	ТаблицаЭтапов.Колонки.Добавить("ДатаПлатежа");
	ТаблицаЭтапов.Колонки.Добавить("ПроцентПлатежа");
	ТаблицаЭтапов.Колонки.Добавить("СуммаПлатежа");
	ТаблицаЭтапов.Колонки.Добавить("ПроцентЗалогаЗаТару");
	ТаблицаЭтапов.Колонки.Добавить("СуммаЗалогаЗаТару");
	
	СтрокаПредоплаты = ТаблицаЭтапов.Добавить();
	СтрокаПредоплаты.ВариантОплаты       = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки;
	СтрокаПредоплаты.ДатаПлатежа         = Объект.Дата;
	СтрокаПредоплаты.ПроцентПлатежа      = ПроцентПредоплаты;
	СтрокаПредоплаты.СуммаПлатежа        = СуммаПредоплатыВВалютеДокумента;
	СтрокаПредоплаты.ПроцентЗалогаЗаТару = ПроцентПредоплатыЗаТару;
	СтрокаПредоплаты.СуммаЗалогаЗаТару   = СуммаПредоплатыЗаТаруВВалютеДокумента;
	
	СтрокаКредита = ТаблицаЭтапов.Добавить();
	СтрокаКредита.ВариантОплаты       = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
	СтрокаКредита.ДатаПлатежа         = Объект.ДатаПлатежа;
	СтрокаКредита.ПроцентПлатежа      = ?(СуммаПродажи > 0, 100-ПроцентПредоплаты, 0);
	СтрокаКредита.СуммаПлатежа        = СуммаПродажи - СуммаПредоплатыВВалютеДокумента;
	СтрокаКредита.ПроцентЗалогаЗаТару = ?(СуммаЗалогаЗаТару > 0, 100-ПроцентПредоплатыЗаТару, 0);
	СтрокаКредита.СуммаЗалогаЗаТару   = СуммаЗалогаЗаТару - СуммаПредоплатыЗаТаруВВалютеДокумента;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЭтапов);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	СуммаПредоплатыВВалютеДокумента = 0;
	СуммаПредоплатыЗаТаруВВалютеДокумента = 0;
	Объект.ДатаПлатежа   = Неопределено;
	
	Для Каждого СтрокаЭтапа Из ЭтапыОплаты Цикл
		Если СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
			СуммаПредоплатыВВалютеДокумента       = СуммаПредоплатыВВалютеДокумента + СтрокаЭтапа.СуммаПлатежа;
			СуммаПредоплатыЗаТаруВВалютеДокумента = СуммаПредоплатыЗаТаруВВалютеДокумента + СтрокаЭтапа.СуммаЗалогаЗаТару;
		Иначе
			Объект.ДатаПлатежа = СтрокаЭтапа.ДатаПлатежа;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступенВводПредоплаты(Форма)
	
	Возврат
		(НЕ Форма.Объект.РеализацияПоЗаказам 
			ИЛИ Форма.Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"))
		И Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
		И Форма.ИспользоватьСтатусыРеализацийТоваровУслуг;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьЭтапыОплаты(Форма)
	
	Объект = Форма.Объект;
	
	Параметры = ЭтапыОплатыКлиентСервер.СтруктураПолученияНадписиЭтаповОплатыДляРеализациииТоваровУслуг();
	ЗаполнитьЗначенияСвойств(Параметры, Форма.Объект);
	
	ОбщаяСуммаПредоплаты = Форма.СуммаПредоплатыВВалютеДокумента + Форма.СуммаПредоплатыЗаТаруВВалютеДокумента;
	
	Параметры.Вставить("ПорядокРасчетов", Объект.ПорядокРасчетов);
	Параметры.Вставить("СуммаВсего",      Форма.СуммаВсего);
	Параметры.Вставить("СуммаПредоплаты", ОбщаяСуммаПредоплаты);
	Параметры.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", Форма.ИспользоватьСтатусыРеализацийТоваровУслуг);
	Параметры.Вставить("ГрафикИсполненияВДоговоре", Форма.ГрафикИсполненияВДоговоре);
	
	Возврат ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатыДляРеализациииТоваровУслуг(Параметры);
	
КонецФункции

&НаСервере
Процедура ИзменитьЗаголовкиПоВариантуОформленияПродажи()
	
	Если Объект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		АвтоЗаголовок = Ложь;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Шаблон = НСтр("ru='%1 %2 от %3';uk='%1 %2 від %3'");
		Иначе
			Шаблон = НСтр("ru='%1 (создание)';uk='%1 (створення)'");
		КонецЕсли;
		ЗаголовокТекстом = НСтр("ru='Акт на передачу прав';uk='Акт на передачу прав'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ЗаголовокТекстом, Объект.Номер, Объект.Дата);
	Иначе
		АвтоЗаголовок = Истина;
		Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстНалоговыхДокументов()
	
	ТекстНалоговыеДокументы = ПродажиСервер.ПредставленияНалоговыхДокументовВДокументеПродажи(
		Объект.Ссылка, Объект.Организация);
	
	ПродажиКлиентСервер.СформироватьТекстДокументыНаОсновании(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокРеквизитовПечати()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") Тогда
		Элементы.РеквизитыПечатиТОРГ12.Заголовок = 
			НСтр("ru='Реквизиты печати ТОРГ12 / Акта на передачу прав';uk='Реквізити печатки ТОРГ12 / Акта на передачу прав'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам()
	
	СкладыТаблицы = Объект.Товары.Выгрузить(,"Склад").ВыгрузитьКолонку("Склад");
	ОрдернаяСхемаПриОтгрузке = СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(СкладыТаблицы, Объект.Дата, Объект.Склад);
	
	Если НЕ ОрдернаяСхемаПриОтгрузке И НЕ ИспользоватьРеализациюПоНесколькимЗаказам И ИспользоватьЗаказыКлиентов Тогда
		ЗаголовокЗаполнить = НСтр("ru='Подобрать товары из заказа';uk='Підібрати товари з замовлення'");
	ИначеЕсли НЕ ОрдернаяСхемаПриОтгрузке И ИспользоватьРеализациюПоНесколькимЗаказам И ИспользоватьЗаказыКлиентов Тогда
		ЗаголовокЗаполнить = НСтр("ru='Подобрать товары из заказов';uk='Підібрати товари з замовлень'");
	ИначеЕсли ОрдернаяСхемаПриОтгрузке И НЕ ИспользоватьЗаказыКлиентов Тогда
		ЗаголовокЗаполнить = НСтр("ru='Подобрать товары по ордерам';uk='Підібрати товари по ордерах'");
	Иначе
		ЗаголовокЗаполнить = НСтр("ru='Подобрать товары по заказам/ордерам';uk='Підібрати товари по замовленнях/ордерах'");
	КонецЕсли;
	Элементы.ТоварыПодобратьТоварыПоЗаказамОрдерам.Заголовок = ЗаголовокЗаполнить;
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад()
	
	Элементы.ТоварыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ТоварыСклад, "Ссылка", ДанныеВыбораСкладов(Объект.Склад));

КонецПроцедуры


&НаКлиенте
Процедура АвторасчетНДСПриИзменении(Элемент)
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(Команда)
	
	Если ВыполнитьАвторасчетНДСКлиент() Тогда
	
		ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьАвторасчетНДСКлиент()
	
	Если (НЕ ПерерасчетПроизведен) И Объект.АвторасчетНДС Тогда
		
		ВыполнитьАвторасчетНДССервер();
		ПерерасчетПроизведен = Истина;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВыполнитьАвторасчетНДССервер()
	
	// соответствие для хранения погрешностей округлений
	ПогрешностиОкругления = Новый Соответствие();
	// пересчет сумм НДС с учетом ошибок округления
	НДСИсходящийСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, Объект.Ссылка, Объект.ЦенаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(Объект.Валюта));
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Объект.Товары, 0, "СуммаВзаиморасчетов");
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНалогообложениеНДСПоУмолчанию(ПриОткрытииФормы = Ложь)
	
	НалогообложениеНДСПоУмолчаниюИзменено = Ложь;
	ДоступностьНалогообложенияНДСПоУмолчанию = Истина;
	ЗаполнитьСтавкиНДС = Ложь;
	
	НовоеНалогообложениеНДСПоУмолчанию       = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(Объект.Организация, Объект.Контрагент, Объект.Соглашение, Объект.Дата, Истина, Неопределено);
	ДоступностьНалогообложенияНДСПоУмолчанию = НДСОбщегоНазначенияСервер.ДоступностьНалогообложенияНДС(Объект.Организация, Объект.Дата);
	Если НалогообложениеНДСПоУмолчанию <> НовоеНалогообложениеНДСПоУмолчанию Тогда
		ЗаполнитьСтавкиНДС = НДСОбщегоНазначенияСервер.НужноОбработатьНовоеНалогообложениеНДС(НалогообложениеНДСПоУмолчанию, НовоеНалогообложениеНДСПоУмолчанию);
		НалогообложениеНДСПоУмолчанию = НовоеНалогообложениеНДСПоУмолчанию;
		НалогообложениеНДСПоУмолчаниюИзменено = Истина;
	КонецЕсли;
	
	Если НалогообложениеНДСПоУмолчаниюИзменено И ЗаполнитьСтавкиНДС И НЕ ПриОткрытииФормы Тогда
		НалогообложениеНДСПоУмолчаниюПриИзмененииСервер();
	Иначе
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("ГруппаАвторасчетНДС");
		
		НовыйАвторасчетНДС = НДСИсходящийСервер.ПолучитьФлагИОбработатьДоступностьАвторасчетаНДС(НалогообложениеНДСПоУмолчанию, Элементы, МассивЭлементов);
		
		Если Объект.АвторасчетНДС = ИСТИНА И НовыйАвторасчетНДС = ЛОЖЬ Тогда
			Объект.АвторасчетНДС = НовыйАвторасчетНДС;
		КонецЕсли;
	КонецЕсли; 
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДСПоУмолчанию", "Доступность", ДоступностьНалогообложенияНДСПоУмолчанию);
	
КонецПроцедуры // УстановитьНалогообложениеНДСПоУмолчанию

&НаКлиенте
Процедура ПриИзмененииВалюты()
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента) Тогда
		
		ПриИзмененииВалютыСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПриИзмененииЗавершение(КодВозврата, Элемент) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		УдалитьРаспоряжениеИзТранспортныхНакладных();		
	Иначе
		Объект.СпособДоставки = ТекущийСпособДоставки;
	КонецЕсли;
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
		
КонецПроцедуры

#КонецОбласти

#Область ТранспортнаяНакладная

&НаСервере
Функция ОбработкаВыбораТранспортнойНакладной(ВыбраннаяТранспортнаяНакладная)
	
	Если ЗначениеЗаполнено(ВыбраннаяТранспортнаяНакладная) Тогда
		
		ТранспортнаяНакладнаяОбъект = ВыбраннаяТранспортнаяНакладная.ПолучитьОбъект();
		НоваяСтрока = ТранспортнаяНакладнаяОбъект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Объект.Ссылка;
		Попытка
			ТранспортнаяНакладнаяОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки; 		
		
	КонецЕсли;
	
	ДанныеТранспортныхНакладных = ПолучитьИнформациюТранспортныхНакладных();
	
	Возврат ДанныеТранспортныхНакладных;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюТранспортныхНакладных()
	
	Возврат Документы.ТранспортнаяНакладная.ПолучитьИнформациюТранспортныхНакладных(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыТранспортныхНакладныхНаСервере()
	Документы.ТранспортнаяНакладная.ОбновитьРеквизитыТранспортныхНакладных(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УдалитьРаспоряжениеИзТранспортныхНакладных()
	Документы.ТранспортнаяНакладная.УдалитьРаспоряжениеИзТранспортныхНакладных(Объект.Ссылка);
	ПродажиСервер.ПолучитьОбновитьИнформациюТранспортныхНакладных(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПартнерБезКЛ" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДСПоУмолчанию" Тогда
		НалогообложениеНДСПоУмолчаниюПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "АвторасчетНДС" Тогда
		АвторасчетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВалютаВзаиморасчетов" Тогда
		ВалютаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "РеализацияПоЗаказам" Тогда
		РеализацияПоЗаказамПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "РеализацияПоЗаказу" Тогда
		РеализацияПоЗаказамПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
		ТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСерия" Тогда
		ТоварыСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
		ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаРучнойСкидки" Тогда
		ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
		ТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСклад" Тогда
		ТоварыСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "ПоискПоШтрихкоду" Тогда
		ПоискПоШтрихкодуВыполнить(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьДанныеИзТСД" Тогда
		ЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "РазбитьСтроку" Тогда
		РазбитьСтроку(Команда);
	ИначеЕсли Команда.Имя = "ОткрытьПодбор" Тогда
		ОткрытьПодбор(Команда);
	ИначеЕсли Команда.Имя = "ДополнитьМногооборотнойТарой" Тогда
		ДополнитьМногооборотнойТарой(Команда);
	ИначеЕсли Команда.Имя = "НазначитьАвтоматическиеСкидки" Тогда
		НазначитьАвтоматическиеСкидки(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныПоСоглашению" Тогда
		ЗаполнитьЦеныПоСоглашению(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен" Тогда
		ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда);
	ИначеЕсли Команда.Имя = "ОтменитьРучныеСкидки" Тогда
		ОтменитьРучныеСкидки(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидку" Тогда
		НазначитьРучнуюСкидку(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидкуВыделенныхСтрок" Тогда
		НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда);
	ИначеЕсли Команда.Имя = "ПодобратьТоварыПоЗаказамОрдерам" Тогда
		ПодобратьТоварыПоЗаказамОрдерам(Команда);
	ИначеЕсли Команда.Имя = "РассчитатьСкидкиНаценки" Тогда
		РассчитатьСкидкиНаценки(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьИзВнешнегоФайла" Тогда
		ЗагрузитьИзВнешнегоФайла(Команда);
	ИначеЕсли Команда.Имя = "СчитатьКартуЛояльности" Тогда
		СчитатьКартуЛояльности(Команда);
	ИначеЕсли Команда.Имя = "ПолучитьВес" Тогда
		ПолучитьВес(Команда);
	ИначеЕсли Команда.Имя = "ПроверитьКоличествоВДокументе" Тогда
		ПроверитьКоличествоВДокументе(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьСкладВВыделенныхСтроках" Тогда
		ЗаполнитьСкладВВыделенныхСтроках(Команда);
	ИначеЕсли Команда.Имя = "ОтвязатьОтЗаказа" Тогда
		ОтвязатьОтЗаказа(Команда);
	ИначеЕсли Команда.Имя = "ВставитьСтроки" Тогда
		ВставитьСтроки(Команда);
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		СоставНабора(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередНачаломИзменения(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередУдалением(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкиПередИзменениемСтатуса()
	
	
	РеквизитМожноИзменить = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
			"РезультатВопросаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено
		Или СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		РеквизитМожноИзменить = Истина;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
	РеквизитМожноИзменить = Истина;
	
	Возврат РеквизитМожноИзменить;
	
КонецФункции

&НаКлиенте
Процедура РезультатВопросаЗавершение(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = "ВвестиКорректировку" Тогда
		ОткрытьФорму("Документ.КорректировкаРеализации.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РеализацияТоваровУслуг));
	ЗаполнитьСтатусыУказанияСерийСервер();
	УстановитьВидимостьЭлементовСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		ОбщегоНазначенияУТКлиент.ВернутьПредыдущееЗначениеРеквизита(ЭтаФорма, Элемент);
		Возврат;
	Иначе
		ОбщегоНазначенияУТКлиент.СохранитьЗначениеРеквизита(ЭтаФорма, Элемент);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[Элемент.Имя], Элемент.ТекущиеДанные);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПередПодборомТоваровИзЗаказаСервер(МассивКодовСтрок, АдресТоваров)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(СтрокаТЧ.ЗаказКлиента) Тогда
			МассивКодовСтрок.Добавить(Новый Структура("КодСтроки,ЗаказКлиента", СтрокаТЧ.КодСтроки, СтрокаТЧ.ЗаказКлиента));
		КонецЕсли;
		
	КонецЦикла;
	
	АдресТоваров = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить());
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПоЗаказамПриИзмененииПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаказКлиента = Результат;
    
    Если ЗаказКлиента = Неопределено Тогда
        Объект.РеализацияПоЗаказам = Ложь;
        Возврат;
    КонецЕсли;
    
    Если Объект.Товары.Количество() = 0 Тогда
        ТекстВопроса = СтрЗаменить(НСтр("ru='Список Товары будет заполнен остатками неоформленных товаров по документу %ЗаказКлиента%. Продолжить?';uk='Список Товари буде заповнений залишками неоформлених товарів за документом %ЗаказКлиента%. Продовжити?'"), "%ЗаказКлиента%", ЗаказКлиента);
    Иначе
        ТекстВопроса = СтрЗаменить(НСтр("ru='Строки в списке Товары будут привязаны к строкам документа %ЗаказКлиента%. Строки, которые невозможно привязать к строкам заказа, будут удалены.  Продолжить?';uk='Рядки в списку Товари будуть прив''язані до рядків документа %ЗаказКлиента%. Рядки, які неможливо прив''язати до рядків замовлення, будуть вилучені. Продовжити?'"), "%ЗаказКлиента%", ЗаказКлиента);
    КонецЕсли;
    
    
    РеализацияПоЗаказамПриИзмененииФрагмент(ЗаказКлиента, ТекстВопроса);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоляПартнер()
	
	ВидимостьКЛ = Элементы.СчитатьКартуЛояльностиКлиент.Видимость;
	Если ВидимостьКЛ Тогда
		ВидимостьКЛ = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	КонецЕсли;
	
	Элементы.ПартнерБезКЛ.Видимость = НЕ ВидимостьКЛ;
	Элементы.Партнер.Видимость      = ВидимостьКЛ;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	НужноЗадатьВопрос = Ложь;
	ТекстВопроса = "";
	
	Если КоличествоТранспортныхНакладных > 0
		И (ТекущийСпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз")
			ИЛИ ТекущийСпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика"))
		И (Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
			ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу")) Тогда
				
		НужноЗадатьВопрос = Истина;	
		ТекстВопроса = НСтр("ru='По текущему распоряжению имеются оформленные ТТН. Для выбранного способа доставки транспортные накладные можно будет оформить из задания на перевозку. Информация о ТТН будет очищена без возможности возврата.';uk='За поточним розпорядженням є оформлені ТТН. Для обраного способу доставки транспортні накладні можна буде оформити з завдання на перевезення. Інформація про ТТН буде видалено без можливості повернення.'");
		
	КонецЕсли;	
	
	Если КоличествоТранспортныхНакладных > 0
		И (Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз")
				ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика"))
		И (ТекущийСпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
				ИЛИ ТекущийСпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу")) Тогда
	
		НужноЗадатьВопрос = Истина;	
		ТекстВопроса = НСтр("ru='По распоряжению имеются оформленные ТТН. Для выбранного способа доставки транспортные накладные можно будет оформить из текущего документа. Информация о ТТН будет очищена без возможности возврата.';uk='За розпорядженням є оформлені ТТН. Для вибраного способу доставки транспортні накладні можна буде оформити з поточного документа. Інформація про ТТН буде видалена без можливості повернення.'");
		
	КонецЕсли;
	
	Если НужноЗадатьВопрос Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("СпособМестоДоставкиПриИзмененииЗавершение", ЭтаФорма, Элемент);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Продолжить';uk='Продовжити'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить изменение';uk='Скасувати зміну'"));
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, СписокКнопок);		
	Иначе
		ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

#КонецОбласти


#Область ЭДО

&НаКлиенте
Процедура ВыгрузкаПервичныхДокументовВЗвит1С(Команда)
	
	Если НЕ КонтрагентИспользуетЭДО(Объект.Контрагент)  Тогда
		ПоказатьПредупреждение(, НСтр("ru='В карточке контрагента не установлен признак ""Использовать FREDO ДокМен""!';uk= 'В картці контрагента не встановлена ознака ""Використовувати FREDO ДокМен""!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С(Истина) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные еще не записаны."
					 "Выполнение действия ""%1"" возможно только после записи данных."
					 "Данные будут записаны.';uk='Дані ще не записані."
				 	 "Виконання дії ""%1"" можливо тільки після запису даних."
					 "Дані будуть записані.'"),
					 НСтр("ru='выгрузки';uk= 'вивантаження'"));
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
	Иначе
		ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	глМенеджерЗвит1С.ВыгрузитьПервичныйДокумент(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентИспользуетЭДО(Контрагент)  
	Возврат Контрагент.ИспользоватьЭДО1СЗвит;
КонецФункции
#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ЗаполнитьДеревоСобытий();
	
	ПериодФормирования = Элементы.ПериодФормирования.СписокВыбора[0];
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиОтбора",Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Отчет.КалендарьСобытий", "ФормаОтчета", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ДеревоВидыСобытийНастройки = Настройки.Получить("ВидыСобытий");
	Если ДеревоВидыСобытийНастройки <> Неопределено Тогда
		
		ДеревоВидыСобытийФорма = РеквизитФормыВЗначение("ВидыСобытий");
		Для каждого СтрокаДереваНастройки Из ДеревоВидыСобытийНастройки.Строки Цикл
			
			Если СтрокаДереваНастройки.Пометка > 0 Тогда
				
				НайденнаяСтрока = ДеревоВидыСобытийФорма.Строки.Найти(СтрокаДереваНастройки.ВидСобытия, "ВидСобытия",Ложь);
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Пометка = СтрокаДереваНастройки.Пометка;
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрокаДереваНастройки Из СтрокаДереваНастройки.Строки Цикл
				
				Если ПодчиненнаяСтрокаДереваНастройки.Пометка > 0 Тогда
					
					НайденнаяСтрока = ДеревоВидыСобытийФорма.Строки.Найти(ПодчиненнаяСтрокаДереваНастройки.ВидСобытия, "ВидСобытия",Истина);
					Если НайденнаяСтрока <> Неопределено Тогда
						НайденнаяСтрока.Пометка = ПодчиненнаяСтрокаДереваНастройки.Пометка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Настройки.Удалить("ВидыСобытий");
		ЗначениеВРеквизитФормы(ДеревоВидыСобытийФорма,"ВидыСобытий");
		
		Для каждого ГруппаВидовСобытий Из ВидыСобытий.ПолучитьЭлементы() Цикл
			
			ПомеченныхЭлементовВГруппе = 0;
			
			Для каждого ВидСобытия Из ГруппаВидовСобытий.ПолучитьЭлементы() Цикл
			
				Если ВидСобытия.Пометка = 1 Тогда
					ПомеченныхЭлементовВГруппе = ПомеченныхЭлементовВГруппе + 1;
				КонецЕсли;
			
			КонецЦикла;
			
			Если ПомеченныхЭлементовВГруппе = 0 Тогда
				ГруппаВидовСобытий.Пометка = 0 ;
			ИначеЕсли ПомеченныхЭлементовВГруппе <> ГруппаВидовСобытий.ПолучитьЭлементы().Количество() Тогда
				ГруппаВидовСобытий.Пометка = 2 ;
			Иначе
				ГруппаВидовСобытий.Пометка = 1 ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьСостояниеОтчетНеСформирован();
	УправлениеДоступностью();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	СхемаДляОтбора = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("СхемаОтборы");
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаДляОтбора,УникальныйИдентификатор);
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Отчет.КалендарьСобытий","ФормаОтчета");
	
	Если ЗначениеНастроек <> Неопределено И ЗначениеНастроек.НастройкиОтбора <> Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ЗначениеНастроек.НастройкиОтбора);
		Отчет.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодФормированияПриИзменении(Элемент)

	УстановитьСостояниеОтчетНеСформирован();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();

	Если НастройкиОтчетаЗаполеныНеПравильно() Тогда
		Возврат;
	КонецЕсли;
	СформироватьОтчетСервер();
	
	УправлениеДоступностью()
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыДляФормыНастроек = СтруктураФормыНастроек();
	ОткрытьФорму("Отчет.КалендарьСобытий.Форма.ФормаНастроек",ПараметрыДляФормыНастроек,ЭтаФорма,,,, 
		Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        
        ОбработатьРезультатНаСервере(Результат.ВидыСобытий);
        Отчет.КомпоновщикНастроек = Результат.КомпоновщикНастроек;
        ИзменилисьНастройки = Истина;
        УстановитьСостояниеОтчетНеСформирован();
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьРасчеты(Команда)
	
	Если НастройкиОтчетаЗаполеныНеПравильно() Тогда
		Возврат;
	КонецЕсли;
	
	КодОтвета = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("АктуализироватьРасчетыЗавершение", ЭтотОбъект), НСтр("ru='Актуализировать расчеты с клиентами?';uk='Актуалізувати розрахунки з клієнтами?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьРасчетыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        
        АктуализироватьРасчетыОбновитьОтчет();
        ПоказатьОповещениеПользователя(
        НСтр("ru='Расчеты актуализированы';uk='Розрахунки актуалізовані'"),
        , // НавигационнаяСсылка
        НСтр("ru='Расчеты с клиентами актуализированы';uk='Розрахунки з клієнтами актуалізовані'"));
        
    КонецЕсли;
    
    УправлениеДоступностью();

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция НастройкиОтчетаЗаполеныНеПравильно()

	Для каждого ГруппаВидовСобытий Из ВидыСобытий.ПолучитьЭлементы() Цикл
	
		Для каждого ВидСобытий Из ГруппаВидовСобытий.ПолучитьЭлементы() Цикл
		
			Если ВидСобытий.Пометка = 1 Тогда
				Возврат Ложь;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо выбрать хотя бы один вид событий в настройках';uk='Необхідно вибрати хоча б один вид подій в настройках'"));
	Возврат Истина;

КонецФункции

&НаСервере
Функция СтруктураФормыНастроек()

	ПараметрыДляФормыНастроек = Новый Структура();
	ПараметрыДляФормыНастроек.Вставить("ВидыСобытий",ВременноеХранилищеНастроекНаСервере());
	ПараметрыДляФормыНастроек.Вставить("НастройкаКомпоновки",Отчет.КомпоновщикНастроек);
	ПараметрыДляФормыНастроек.Вставить("УИД_ВызывающейФормы",УникальныйИдентификатор);
	
	Возврат  ПараметрыДляФормыНастроек;

КонецФункции

&НаСервере
Функция ВременноеХранилищеНастроекНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ВидыСобытий"),УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатНаСервере(АдресДереваПоказатели)
	
	ЗначениеВДанныеФормы(ПолучитьИзВременногоХранилища(АдресДереваПоказатели),ВидыСобытий);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетСервер()

	ТаблицаОтчета.Очистить();
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	
	ОбъектОтчет.СформироватьОтчет(ТаблицаОтчета,СтруктураПараметрыФормированияОтчета());
	ЗначениеВРеквизитФормы(ОбъектОтчет,"Отчет");
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;

КонецПроцедуры 

&НаСервере
Функция СтруктураПараметрыФормированияОтчета()

	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ВидыСобытий",РеквизитФормыВЗначение("ВидыСобытий"));
	СтруктураПараметров.Вставить("ПериодФормирования", ПериодФормирования);
	СтруктураПараметров.Вставить("ЕстьПравоЗадачиПроектов", ЕстьПравоЗадачиПроектов);
	СтруктураПараметров.Вставить("ИспользоватьБизнесПроцессыИЗадачи", ИспользоватьБизнесПроцессыИЗадачи);
	СтруктураПараметров.Вставить("ЕстьПравоЗадачаИсполнителя", ЕстьПравоЗадачаИсполнителя);
	СтруктураПараметров.Вставить("ЕстьПравоРолиИсполнителей", ЕстьПравоРолиИсполнителей);
	
	Возврат СтруктураПараметров;

КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеФлажкаВключать(ЗначениеФлажка,Родитель)
	
	Для каждого Элемент Из Родитель.ПолучитьЭлементы() Цикл
	
		Элемент.Пометка = ЗначениеФлажка;
		УстановитьЗначениеФлажкаВключать(ЗначениеФлажка,Элемент);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСобытий()
	
	ФиксироватьПретензииКлиентов                    = ПолучитьФункциональнуюОпцию("ФиксироватьПретензииКлиентов");
	ИспользоватьПочтовыйКлиент                      = ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент");
	ИспользоватьПрочиеВзаимодействия                = ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия");
	ИспользоватьУправлениеСделками                  = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеСделками");
	ИспользоватьЗаказыКлиентов                      = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьЗаказыПоставщикам                   = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов    = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");
	ИспользоватьЗаказыНаВнутреннееПотребление       = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление");
	ИспользоватьВнутреннееПотребление               = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление");
	ИспользоватьЗаявкиНаРасходованиеДенежныхСредств = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	ИспользоватьБизнесПроцессыИЗадачи               = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	ИспользоватьАктыРасхожденийПослеОтгрузки        = ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям");
	
	ЕстьПраваНаПартнеров                  = ПравоДоступа("Чтение",Метаданные.Справочники.Партнеры);
	ЕстьПраваНаФизЛиц                     = ПравоДоступа("Чтение",Метаданные.Справочники.ФизическиеЛица);
	ЕстьПраваНаДоговора                   = ПравоДоступа("Чтение",Метаданные.Справочники.ДоговорыКонтрагентов);
	ЕстьПраваНаМаркетинговыеМероприятия   = ПравоДоступа("Чтение",Метаданные.Справочники.МаркетинговыеМероприятия);
	ЕстьПраваНаПроекты                    = ПравоДоступа("Чтение",Метаданные.Справочники.Проекты);
	ЕстьПраваНаСделки                     = ПравоДоступа("Чтение",Метаданные.Справочники.СделкиСКлиентами);
	ЕстьПравоСоглашенияСКлиентами         = ПравоДоступа("Чтение",Метаданные.Справочники.СоглашенияСКлиентами);
	ЕстьПравоСоглашенияСПоставщиками      = ПравоДоступа("Чтение",Метаданные.Справочники.СоглашенияСПоставщиками);
	ЕстьПравоЗадачиПроектов               = ПравоДоступа("Чтение",Метаданные.Справочники.ЗадачиПроектов);
	ЕстьПравоКоммерческиеПредложения      = ПравоДоступа("Чтение",Метаданные.Документы.КоммерческоеПредложениеКлиенту);
	ЕстьПравоУстановкаЦен                 = ПравоДоступа("Чтение",Метаданные.Документы.УстановкаЦенНоменклатуры);
	ЕстьПравоЗаказыКлиентов               = ПравоДоступа("Чтение",Метаданные.Документы.ЗаказКлиента);
	ЕстьПравоОРасхожденияхПослеОтгрузки   = ПравоДоступа("Чтение",Метаданные.Документы.АктОРасхожденияхПослеОтгрузки);
	ЕстьПравоЗаказыПоставщику             = ПравоДоступа("Чтение",Метаданные.Документы.ЗаказПоставщику);
	ЕстьПравоВозвратыПоставщику           = ПравоДоступа("Чтение",Метаданные.Документы.ВозвратТоваровПоставщику);
	ЕстьПравоЗаявкиНаВозврат              = ПравоДоступа("Чтение",Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ЕстьПравоРеализацияТоваровУслуг       = ПравоДоступа("Чтение",Метаданные.Документы.РеализацияТоваровУслуг);
	ЕстьПравоДоверенностьПолучениеТоваров = ПравоДоступа("Чтение",Метаданные.Документы.ДоверенностьВыданная);
	ЕстьПравоЗаказВнутреннееПотребление   = ПравоДоступа("Чтение",Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ЕстьПравоРегистрВнутреннееПотребление = ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление);
	ЕстьПравоВнутреннееПотребление        = ПравоДоступа("Чтение",Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	ЕстьПравоЗаявкаНаРасходованиеДС       = ПравоДоступа("Чтение",Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	ЕстьПравоСверкаВзаиморасчетов         = ПравоДоступа("Чтение",Метаданные.Документы.СверкаВзаиморасчетов);
	ЕстьПравоЗадачаИсполнителя            = ПравоДоступа("Чтение",Метаданные.Задачи.ЗадачаИсполнителя);
	ЕстьПравоРолиИсполнителей             = ПравоДоступа("Просмотр",Метаданные.РегистрыСведений.ИсполнителиЗадач);
	ЕстьПравоРегистрЗаявкиНаВозврат       = ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
	ЕстьПравоРегистрТоварыКОтгрузке       = ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
	ЕстьПравоРегистрРасчетыПоставщиками   = ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам);
	ЕстьПравоРегистрРасчетыКлиентами      = ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам);
	
	
	ЕстьПраваНаВзаимодействия = ПравоДоступа("Чтение",Метаданные.Документы.Встреча) И 
	                            ПравоДоступа("Чтение",Метаданные.Документы.ТелефонныйЗвонок) И
	                            ПравоДоступа("Чтение",Метаданные.Документы.ЭлектронноеПисьмоВходящее) И
	                            ПравоДоступа("Чтение",Метаданные.Документы.ЭлектронноеПисьмоИсходящее);
	
	УзелДерева = ДобавленноеВДеревоВидСобытия(ВидыСобытий,"Маркетинг", НСтр("ru='Маркетинг';uk='Маркетинг'"));
	Если ЕстьПраваНаМаркетинговыеМероприятия Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "МаркетинговыеМероприятия",НСтр("ru='Маркетинговые мероприятия';uk='Маркетингові заходи'"));
	КонецЕсли;
	Если ЕстьПравоУстановкаЦен Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "УстановкаЦен", НСтр("ru='Установка цен номенклатуры';uk='Встановлення цін номенклатури'"));
	КонецЕсли;
	УдалитьРодительскийУзелДереваЕслиПустой(УзелДерева);
	
	УзелДерева = ДобавленноеВДеревоВидСобытия(ВидыСобытий,"Продажи", НСтр("ru='Продажи';uk='Продажі'"));
	Если ЕстьПравоСоглашенияСКлиентами Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "СоглашенияСКлиентам", НСтр("ru='Соглашения с клиентами';uk='Оферти клієнтам'"));
	КонецЕсли;
	Если ЕстьПравоЗаказыКлиентов И ИспользоватьЗаказыКлиентов И ЕстьПраваНаДоговора И ЕстьПравоРегистрРасчетыКлиентами  Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ЗаказыКлиентов", НСтр("ru='Заказы клиентов';uk='Замовлення клієнтів'"));
	КонецЕсли;
	Если ЕстьПравоЗаявкиНаВозврат И ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов И ЕстьПравоРегистрЗаявкиНаВозврат И ЕстьПравоРегистрРасчетыКлиентами  Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ЗаявкиНаВозврат", НСтр("ru='Заявки на возврат';uk='Заявки на повернення'"));
	КонецЕсли;
	Если ЕстьПравоКоммерческиеПредложения Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "КоммерческиеПредложения", НСтр("ru='Коммерческие предложения';uk='Комерційні пропозиції'"));
	КонецЕсли;
	Если ИспользоватьУправлениеСделками И ЕстьПраваНаСделки Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "Сделки", НСтр("ru='Сделки';uk='Угоди'"));
	КонецЕсли;
	Если ЕстьПравоРеализацияТоваровУслуг И ЕстьПравоРегистрРасчетыКлиентами Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "РеализацииТоваровУслуг", НСтр("ru='Реализации товаров и услуг';uk='Реалізації товарів і послуг'"));
	КонецЕсли;
	Если ЕстьПравоОРасхожденияхПослеОтгрузки И ИспользоватьАктыРасхожденийПослеОтгрузки Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "АктыПриемкиКлиента", НСтр("ru='Акты приемки клиента';uk='Акти приймання клієнта'"));
	КонецЕсли;
	УдалитьРодительскийУзелДереваЕслиПустой(УзелДерева);

	Если ЕстьПраваНаВзаимодействия И ИспользоватьПочтовыйКлиент Тогда
		
		УзелДерева = ДобавленноеВДеревоВидСобытия(ВидыСобытий,"Взаимодействия", "Взаимодействия");
		
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ВходящиеПисьма",НСтр("ru='Входящие письма';uk='Вхідні листи'"));
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ИсходящиеПисьма", НСтр("ru='Исходящие письма';uk='Вихідні листи'"));
		Если ИспользоватьПрочиеВзаимодействия Тогда
			ДобавленноеВДеревоВидСобытия(УзелДерева, "Встречи", НСтр("ru='Встречи';uk='Зустрічі'"));
			ДобавленноеВДеревоВидСобытия(УзелДерева, "ТелефонныеЗвонки", НСтр("ru='Телефонные звонки';uk='Телефонні дзвінки'"));
			ДобавленноеВДеревоВидСобытия(УзелДерева, "ЗапланированныеВзаимодействия",НСтр("ru='Запланированные взаимодействия';uk='Заплановані взаємодії'"));
		КонецЕсли;
		
	КонецЕсли;
	
	УзелДерева = ДобавленноеВДеревоВидСобытия(ВидыСобытий,"Закупки", НСтр("ru='Закупки';uk='Купівлі'"));
	Если ЕстьПравоСоглашенияСПоставщиками Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "СоглашенияСПоставщиками", НСтр("ru='Соглашения с поставщиками';uk='Оферти постачальників'"));
	КонецЕсли;
	Если ИспользоватьЗаказыПоставщикам И ЕстьПравоЗаказыПоставщику И ЕстьПраваНаДоговора И ЕстьПравоРегистрРасчетыПоставщиками Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ЗаказыПоставщикам", НСтр("ru='Заказы поставщикам';uk='Замовлення постачальникам'"));
	КонецЕсли;
	Если ЕстьПравоВозвратыПоставщику И ЕстьПравоРегистрТоварыКОтгрузке И ЕстьПравоРегистрРасчетыПоставщиками Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ВозвратыПоставщику", НСтр("ru='Возвраты товаров поставщику';uk='Повернення товарів постачальнику'"));
	КонецЕсли;
	Если ЕстьПравоДоверенностьПолучениеТоваров Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ДоверенностьПолучениеТоваров", НСтр("ru='Доверенность на получение товаров';uk='Довіреність на отримання товарів'"));
	КонецЕсли;
	УдалитьРодительскийУзелДереваЕслиПустой(УзелДерева);
	
	УзелДерева = ДобавленноеВДеревоВидСобытия(ВидыСобытий,"Финансы", НСтр("ru='Финансы';uk='Фінанси'"));
	Если ЕстьПравоЗаявкаНаРасходованиеДС И ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ЗаявкаНаРасходованиеДенежныхСредств", НСтр("ru='Заявки на расходование денежных средств';uk='Заявки на витрачання грошових коштів'"));
	КонецЕсли;
	УдалитьРодительскийУзелДереваЕслиПустой(УзелДерева);
	
	УзелДерева = ДобавленноеВДеревоВидСобытия(ВидыСобытий,"ВнутреннееТовародвижение", НСтр("ru='Внутреннее товародвижение';uk='Внутрішній рух товарів'"));
	Если ЕстьПравоЗаказВнутреннееПотребление И ИспользоватьЗаказыНаВнутреннееПотребление И ЕстьПравоРегистрВнутреннееПотребление Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ЗаказНаВнутреннееПотребление", НСтр("ru='Заказы на внутреннее потребление';uk='Замовлення на внутрішнє споживання'"));
	КонецЕсли;
	Если ЕстьПравоВнутреннееПотребление И ИспользоватьВнутреннееПотребление Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ВнутреннееПотребление", НСтр("ru='Внутреннее потребление товаров';uk='Внутрішнє споживання товарів'"));
	КонецЕсли;
	УдалитьРодительскийУзелДереваЕслиПустой(УзелДерева);
	
	УзелДерева = ДобавленноеВДеревоВидСобытия(ВидыСобытий,"Прочее", НСтр("ru='Прочее';uk='Інше'"));
	Если ЕстьПраваНаПартнеров И ЕстьПраваНаФизЛиц Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ДниРожденияКонтактныхЛиц", НСтр("ru='Дни рождения контактных лиц';uk='Дні народження контактних осіб'"));
	КонецЕсли;
	Если ЕстьПравоСверкаВзаиморасчетов Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "СверкаВзаиморасчетов", НСтр("ru='Сверки взаиморасчетов';uk='Звірки взаєморозрахунків'"));
	КонецЕсли;
	Если ЕстьПраваНаДоговора Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ДоговораКонтрагентов", НСтр("ru='Договора контрагентов';uk='Договори контрагентів'"));
	КонецЕсли;
	Если ЕстьПраваНаПроекты Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "Проекты", НСтр("ru='Проекты';uk='Проекти'"));
	КонецЕсли;
	Если ИспользоватьБизнесПроцессыИЗадачи И ЕстьПравоЗадачаИсполнителя Тогда
		ДобавленноеВДеревоВидСобытия(УзелДерева, "ЗадачаИсполнителя", НСтр("ru='Прочие задачи исполнителя';uk='Інші задачі виконавця'"));
	КонецЕсли;
	УдалитьРодительскийУзелДереваЕслиПустой(УзелДерева);
	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРодительскийУзелДереваЕслиПустой(УзелДерева)

	Если УзелДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		ВидыСобытий.ПолучитьЭлементы().Удалить(УзелДерева);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ДобавленноеВДеревоВидСобытия(СтрокаРодитель, ВидСобытия, Представление)

	НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ВидСобытия = ВидСобытия;
	НоваяСтрока.Представление = Представление;
	Возврат НоваяСтрока

КонецФункции

&НаКлиенте
Процедура УстановитьСостояниеОтчетНеСформирован()
	
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Элементы.Результат.ОтображениеСостояния.Текст = НСтр("ru='Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.';uk='Звіт не сформований. Натисніть ""Сформувати"" для одержання звіту.'");
	Элементы.Результат.ОтображениеСостояния.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьРасчетыОбновитьОтчет()
	
	Если Отчет.ЕстьНеактуальныеРасчетыСКлиентами ИЛИ Отчет.ЕстьНеактуальныеРасчетыСПоставщиками Тогда
		МассивАналитикДляАктуализации = АналитикаДляАктуализацииРасчетов();
	КонецЕсли;
	
	Если Отчет.ЕстьНеактуальныеРасчетыСКлиентами Тогда
		ОкончаниеРасчета = КонецМесяца(ТекущаяДатаСеанса()) + 1;
		РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСКлиентами(ОкончаниеРасчета, МассивАналитикДляАктуализации);
		Отчет.ЕстьНеактуальныеРасчетыСКлиентами = Ложь;
	КонецЕсли;
	
	Если Отчет.ЕстьНеактуальныеРасчетыСПоставщиками Тогда
		ОкончаниеРасчета = КонецМесяца(ТекущаяДатаСеанса()) + 1;
		РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСПоставщиками(ОкончаниеРасчета, МассивАналитикДляАктуализации);
		Отчет.ЕстьНеактуальныеРасчетыСПоставщиками = Ложь;
	КонецЕсли;
	
	СформироватьОтчетСервер();
	
КонецПроцедуры

&НаСервере
Функция АналитикаДляАктуализацииРасчетов()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АналитикаУчетаПоПартнерам.КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Партнер В(&МассивПартнеров)";
	
	Запрос.УстановитьПараметр("МассивПартнеров", Отчет.ПартнерыНеактуальныеРасчеты.ВыгрузитьЗначения());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КлючАналитики");
	
КонецФункции

&НаКлиенте
Процедура УправлениеДоступностью()

	Элементы.АктуализироватьРасчеты.Доступность = Отчет.ЕстьНеактуальныеРасчетыСКлиентами ИЛИ Отчет.ЕстьНеактуальныеРасчетыСПоставщиками;

КонецПроцедуры

#КонецОбласти

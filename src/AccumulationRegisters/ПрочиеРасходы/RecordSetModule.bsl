#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)

	Если РасчетСебестоимости.ДвиженияЗаписываютсяРасчетомСебестоимости(ЭтотОбъект)
	 ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
	 ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	РасчетСебестоимости.СохранитьДвиженияСформированныеРасчетомСебестоимости(ЭтотОбъект, Замещение);
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	БлокироватьДляИзменения = Истина;
	
	// Текущее состояние остатков помещается во временную таблицу,
	// чтобы при записи получить изменение актуальных остатков регистра.
	
	ТекстыЗапросовДляПолученияТаблицыИзменений = 
		ЗакрытиеМесяцаУТВызовСервера.ТекстыЗапросовДляПолученияТаблицыИзмененийРегистраНакопления(ЭтотОбъект.Метаданные());
	
	Запрос = Новый Запрос;
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстыЗапросовДляПолученияТаблицыИзменений.ТекстВыборкиНачальныхДанных;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	
	Запрос.Выполнить();
	
	ДополнительныеСвойства.Вставить("ТекстВыборкиТаблицыИзменений", ТекстыЗапросовДляПолученияТаблицыИзменений.ТекстВыборкиТаблицыИзменений);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если РасчетСебестоимости.ДвиженияЗаписываютсяРасчетомСебестоимости(ЭтотОбъект)
	 ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
	 ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;

	// Рассчитывается изменение остатков регистра с учетом нового набора записей
	// и помещается во временную таблицу.
	
	Запрос = Новый Запрос;
	Запрос.Текст = ДополнительныеСвойства.ТекстВыборкиТаблицыИзменений;
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.Подразделение,
	|	ТаблицаИзменений.НалоговоеНазначение,
	|	ТаблицаИзменений.СтатьяРасходов,
	|	ТаблицаИзменений.АналитикаРасходов,
	|	СУММА(ТаблицаИзменений.Сумма) КАК СуммаИзменение,
	|	СУММА(ТаблицаИзменений.СуммаБезНДС) КАК СуммаБезНДСИзменение,
	|	СУММА(ТаблицаИзменений.СуммаРегл) КАК СуммаРеглИзменение,
	|	СУММА(ТаблицаИзменений.СуммаРеглБезНДС) КАК СуммаРеглБезНДСИзменение,
	|	СУММА(ТаблицаИзменений.НДСРегл) КАК НДСРеглИзменение,
	|	СУММА(ТаблицаИзменений.ПостояннаяРазница) КАК ПостояннаяРазницаИзменение,
	|	СУММА(ТаблицаИзменений.ВременнаяРазница) КАК ВременнаяРазницаИзменение
	|ПОМЕСТИТЬ ДвиженияПрочиеРасходыИзменение
	|ИЗ
	|	ТаблицаИзмененийПрочиеРасходы КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Подразделение,
	|	ТаблицаИзменений.НалоговоеНазначение,
	|	ТаблицаИзменений.СтатьяРасходов,
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.АналитикаРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаИзменений.Сумма) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаБезНДС) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаРегл) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаРеглБезНДС) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.НДСРегл) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.ПостояннаяРазница) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.ВременнаяРазница) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.Регистратор КАК Документ
	|ИЗ
	|	ТаблицаИзмененийПрочиеРасходы КАК ТаблицаИзменений
	|ГДЕ
    |	ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
    |   ИЛИ (НЕ &ФормироватьФинансовыйРезультат И ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ),
	|	ТаблицаИзменений.Регистратор,
	|	ТаблицаИзменений.Период,
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.Подразделение,
	|	ТаблицаИзменений.НалоговоеНазначение,
	|	ТаблицаИзменений.СтатьяРасходов,
	|	ТаблицаИзменений.АналитикаРасходов,
	|	ТаблицаИзменений.ХозяйственнаяОперация,
	|	ТаблицаИзменений.АналитикаУчетаНоменклатуры
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаИзменений.Сумма) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаБезНДС) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаРегл) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.СуммаРеглБезНДС) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.НДСРегл) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.ПостояннаяРазница) <> 0
	|	ИЛИ СУММА(ТаблицаИзменений.ВременнаяРазница) <> 0";
    
    Запрос.УстановитьПараметр("ФормироватьФинансовыйРезультат", ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
    
	Результат = Запрос.ВыполнитьПакет();
	
	// Информация о разнице между остатками была помещена во временную таблицу.
	// Добавляется информация о ее существовании и наличии в ней записей.
	Если Не ОбменДанными.Загрузка И ПроведениеСервер.РассчитыватьИзменения(ДополнительныеСвойства) Тогда
		Выборка = Результат[0].Выбрать();
		Выборка.Следующий();
		СтруктураВременныеТаблицы.Вставить("ДвиженияПрочиеРасходыИзменение", Выборка.Количество > 0);
	КонецЕсли;
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Результат[1].Выбрать());
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
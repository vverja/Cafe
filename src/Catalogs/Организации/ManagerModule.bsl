#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


#Область ОбособленныеПодразделения

// Проверяет взаимосвязанность организации по организационной структуре.
// Если первая и вторая организации одинаковы, то считается, что они относятся к одной головной.
//
// Параметры:
//	ПерваяОрганизация - СправочникСсылка.Организации - проверяемая организация.
//	ВтораяОрганизация - СправочникСсылка.Организации - организация, с которой выполняется сравнение.
//
// Возвращаемое значение:
//	Булево - признак взаимосвязанности. Если первая организация является обособленным подразделением,
//		либо если вторая организация является обособленным подразделением первой,
//		либо если обе организации являются обособленными подразделениями одной и той же головной организации.
//		В противном случае возвращается Ложь.
//
Функция ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ПерваяОрганизация, ВтораяОрганизация) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(ПерваяОрганизация) И ЗначениеЗаполнено(ВтораяОрганизация))
		ИЛИ ПерваяОрганизация = ВтораяОрганизация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивВзаимосвязанныхОрганизаций = МассивВзаимосвязанныхОрганизаций(ПерваяОрганизация);
	ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре = (МассивВзаимосвязанныхОрганизаций.Найти(ВтораяОрганизация) <> Неопределено);
	
	Возврат ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре;
	
КонецФункции

// Проверяет, связана ли организация с другими организациями по организационной структуре.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - проверяемая организация.
//
// Возвращаемое значение:
//	Булево - признак взаимосвязанности. Если организация взаимосвязана с другими,
//		возвращается Истина, в противном случае Ложь.
//
Функция ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация) Экспорт
	
	МассивВзаимосвязанныхОрганизаций = МассивВзаимосвязанныхОрганизаций(Организация);
	ОрганизацияВзаимосвязанаСДругимиОрганизациями = (МассивВзаимосвязанныхОрганизаций.Количество() <> 0);
	
	Возврат ОрганизацияВзаимосвязанаСДругимиОрганизациями;
	
КонецФункции

// Возвращает массив организаций, взаимосвязанных по организационной структуре.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, для которой нужно искать связи,
//		если не указана, то возвращаются все взаимосвязанные организации.
//
// Возвращаемое значение:
//	Массив - массив взаимосвязанных организаций.
//
Функция МассивВзаимосвязанныхОрганизаций(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	Организации.ГоловнаяОрганизация КАК Ссылка,
	|	NULL КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВзаимосвязанныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.ГоловнаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимосвязанныеОрганизации.Ссылка
	|ИЗ
	|	ВзаимосвязанныеОрганизации КАК ВзаимосвязанныеОрганизации
	|ГДЕ
	|	ВзаимосвязанныеОрганизации.Ссылка <> &Организация
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ВзаимосвязанныеОрганизации.Ссылка = &ГоловнаяОрганизация
	|			ИЛИ ВзаимосвязанныеОрганизации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И &ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ВзаимосвязанныеОрганизации.ГоловнаяОрганизация = &Организация)");
	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ?(ЗначениеЗаполнено(Организация),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация"), Справочники.Организации.ПустаяСсылка()));
		
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивОрганизаций;
	
КонецФункции

// Возвращает массив филиалов организации у которых разрешено ведение взаиморасчетов через головную организацию.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, для которой нужно найти филиалы,
//		если не указана, то возвращаются все филиалы в которых допускаются взаиморасчеты через головную организацию.
//
// Возвращаемое значение:
//	Массив - массив взаимосвязанных организаций.
//
Функция ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Организация = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И (Организации.Ссылка <> &Организация И Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


#КонецОбласти

#Область ИспользованиеНесколькихОрганизаций

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Организация = Выборка.Организация;
	КонецЕсли;
	
	Возврат Организация;

КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
		
	Возврат Количество;
	
КонецФункции

// Возвращает признак использования нескольких организаций.
//
// Возвращаемое значение:
//		Булево
//
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецФункции

// Возвращает массив доступных организаций.
//
// Параметры:
//	ТолькоРазрешенные - Булево - определяет, надо ли получить все организации ИБ, или только доступные текущему пользователю.
//
// Возвращаемое значение:
//	Массив - массив организаций
//
Функция ДоступныеОрганизации(ТолькоРазрешенные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	ИЛИ &ИспользоватьУправленческуюОрганизацию
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию",
		ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Если ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	Иначе
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

#КонецОбласти

#Область Прочие

//Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Результат.Добавить("ОбособленноеПодразделение");
		Результат.Добавить("ГоловнаяОрганизация");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция определяет значения реквизитов выбранной организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Ссылка на организацию
//  Период - дата получения реквизитов, которые зависят от даты
//
// Возвращаемое значение:
//	Структура - реквизиты выбранной организации
//
Функция ПолучитьРеквизитыОрганизации(Организация, Период = '00010101') Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование,
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	Организации.КодКВЕД КАК КодКВЕД,
	|	Организации.ВЭД КАК ВЭД,
	|	Организации.КодОПФГ КАК КодОПФГ,
	|	Организации.ОПФГ КАК ОПФГ,
	|	Организации.НалоговаяИнспекция КАК НалоговаяИнспекция,
	|	Организации.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ЕСТЬNULL(УчетнаяПолитикаОрганизацийСрезПоследних.ИННПлательщикаНДС, """") КАК ИННПлательщикаНДС,
	|	ЕСТЬNULL(УчетнаяПолитикаОрганизацийСрезПоследних.НомерСвидетельстваПлательщикаНДС, """") КАК НомерСвидетельства,
	|	ЕСТЬNULL(УчетныеПолитики.ИнформацияОСтатусеПлательщикаНалогов, """") КАК ИнформацияОСтатусеПлательщикаНалогов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|		ПО Организации.Ссылка = УчетнаяПолитикаОрганизацийСрезПоследних.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитики
	|		ПО (УчетнаяПолитикаОрганизацийСрезПоследних.УчетнаяПолитика = УчетныеПолитики.Ссылка)
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Представление = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		Наименование = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		НаименованиеПолное = Выборка.НаименованиеПолное;
		ИННПлательщикаНДС = Выборка.ИННПлательщикаНДС;
		КодПоЕДРПОУ = Выборка.КодПоЕДРПОУ;
		КодКВЕД = Выборка.КодКВЕД;
		ВЭД = Выборка.ВЭД;
		КодОПФГ = Выборка.КодОПФГ;
		ОПФГ = Выборка.ОПФГ;
		НомерСвидетельства = Выборка.НомерСвидетельства;
		НалоговаяИнспекция = Выборка.НалоговаяИнспекция;
		ЮрФизЛицо = Выборка.ЮрФизЛицо;
		ИнформацияОСтатусеПлательщикаНалогов = Выборка.ИнформацияОСтатусеПлательщикаНалогов;
	Иначе
		Представление = "";
		Наименование = "";
		НаименованиеПолное = "";
		ИННПлательщикаНДС = "";
		КодПоЕДРПОУ = "";
		КодКВЕД = "";
		ВЭД = "";
		КодОПФГ = "";
		ОПФГ = "";
		НомерСвидетельства = "";
		НалоговаяИнспекция = Справочники.НалоговыеИнспекции.ПустаяСсылка();
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ПустаяСсылка();
		ИнформацияОСтатусеПлательщикаНалогов = "";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Представление, Наименование, НаименованиеПолное, ИННПлательщикаНДС, КодПоЕДРПОУ, КодКВЕД, ВЭД, КодОПФГ, ОПФГ, НомерСвидетельства, НалоговаяИнспекция, ЮрФизЛицо, ИнформацияОСтатусеПлательщикаНалогов",
		Представление,
		Наименование,
		НаименованиеПолное,
		ИННПлательщикаНДС,
		КодПоЕДРПОУ,
		КодКВЕД,
		ВЭД,
		КодОПФГ,
		ОПФГ,
		НомерСвидетельства,
		НалоговаяИнспекция,
		ЮрФизЛицо,
		ИнформацияОСтатусеПлательщикаНалогов
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции


// Функция определяет налоговое назначение НДС организации по умолчанию.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется налоговое назначение НДС
//	Дата - Дата определения налогового назначения НДС
//
// Возвращаемое значение:
//	СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат - Налоговое назначение НДС организации 
//
Функция НалоговоеНазначениеНДС(Организация, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
    
    Если Организация = Справочники.Организации.УправленческаяОрганизация Тогда
        Возврат НалоговоеНазначениеУправленческойОрганизации();
    КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НалоговоеНазначениеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, Дата);
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		Если ПараметрыУчетнойПолитики.ПлательщикНДС Тогда
			НалоговоеНазначениеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Иначе
			НалоговоеНазначениеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НалоговоеНазначениеНДС;
	
КонецФункции // НалоговоеНазначениеНДС

Функция НалоговоеНазначениеУправленческойОрганизации() Экспорт 
	Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.Управленческое;
КонецФункции // НалоговоеНазначениеУправленческойОрганизации()
 



// Получает организацию, если организация одна в справочнике.
// Если управленческая организация отключена в настройках, то она не учитывается.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Найденная организация
// 	СправочникСсылка.Организации.ПустаяСсылка - если организаций нет или организаций больше одной
//
Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|";
	
	Если Не Константы.ИспользоватьУправленческуюОрганизацию.Получить() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И Не Организации.Предопределенный";
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Организация = Выборка.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Организация;

КонецФункции


// Функция определяет, является ли организация плательщиком НДС на указанную дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется, является ли она плательщиком единого налога
//	Дата        - Дата определения 
//
// Возвращаемое значение:
//	Булево
//
Функция ПлательщикНДС(Организация, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	ПлательщикНДС = Ложь;
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, Дата);
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		ПлательщикНДС = ПараметрыУчетнойПолитики.ПлательщикНДС;
	КонецЕсли;
	
	Возврат ПлательщикНДС;
	
КонецФункции

// Функция определяет, является ли организация плательщиком единого налога на указанную дату
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется, является ли она плательщиком единого налога
//	Дата        - Дата определения 
//
// Возвращаемое значение:
//	Булево
//
Функция ПлательщикЕдиногоНалога(Организация, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	ПлательщикЕдиногоНалога = Ложь;
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, Дата);
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		ПлательщикЕдиногоНалога = ПараметрыУчетнойПолитики.ПлательщикЕН;
	КонецЕсли;
	
	Возврат ПлательщикЕдиногоНалога;
	
КонецФункции

Функция ПлательщикНалогаНаПрибыль(Организация, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	ПлательщикНалогаНаПрибыль = Ложь;
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, Дата);
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		ПлательщикНалогаНаПрибыль = ПараметрыУчетнойПолитики.ПлательщикНалогаНаПрибыль;
	КонецЕсли;
	
	Возврат ПлательщикНалогаНаПрибыль;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);	
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Префикс");
	Результат.Добавить("КонтактнаяИнформация.*");
	
	Возврат Результат
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникРаботыФаксимильнойПечати") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НапечататьПомощникРаботыФаксимильнойПечати", 
			НСтр("ru='Как создать факсимильную подпись и печать?';uk='Як створити факсимільний підпис та печатку?'"), 
			СформироватьПомощникРаботыФаксимильнойПечати(МассивОбъектов[0], ОбъектыПечати));
		
		КонецЕсли;
		
КонецПроцедуры

Функция СформироватьПомощникРаботыФаксимильнойПечати(Организация, ОбъектыПечати)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации.ПомощникРаботыФаксимильнойПечати");
	
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация);
	
	// Вывести подписи
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабличныйДокумент.Вывести(Область);

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
	Если Локализация.КодЯзыкаИнтерфейса() = "uk" Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("СхемаУкр"));	
	Иначе
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	КонецЕсли; 
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область ПервоначальноеЗаполнениеИнформационнойБазы

Процедура ЗаполнитьПредопределеннуюОрганизацию() Экспорт
	
	ЗаписыватьОбъект = Ложь;
	
	СправочникОбъект = Справочники.Организации.УправленческаяОрганизация.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(СправочникОбъект.ЮрФизЛицо) Тогда
		СправочникОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СправочникОбъект.Префикс) Тогда
		СправочникОбъект.Префикс = "УУ";
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗаписыватьОбъект Тогда
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


// Обработчик обновления версии BAS УТ 3.2.1
// Объединяет значения реквизитов УдалитьДопускаютсяВзаиморасчетыСКлиентамиЧерезГоловнуюОрганизацию 
// и УдалитьДопускаютсяВзаиморасчетыСПоставщикамиЧерезГоловнуюОрганизацию
// в один новый ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию.
//
Процедура ОбъединитьФлагиДопускаютсяВзаиморасчеты() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ИСТИНА КАК ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию,
	|	ЛОЖЬ КАК УдалитьДопускаютсяВзаиморасчетыСКлиентамиЧерезГоловнуюОрганизацию,
	|	ЛОЖЬ КАК УдалитьДопускаютсяВзаиморасчетыСПоставщикамиЧерезГоловнуюОрганизацию
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.УдалитьДопускаютсяВзаиморасчетыСКлиентамиЧерезГоловнуюОрганизацию
	|			ИЛИ Организации.УдалитьДопускаютсяВзаиморасчетыСПоставщикамиЧерезГоловнуюОрганизацию)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектОрганизация = Выборка.Организация.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектОрганизация, Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектОрганизация);
	КонецЦикла;
	
КонецПроцедуры


// Вызывается при начальном заполнении 
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Юридический адрес организации';uk='Юридична адреса організації'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.АдресТолькоРоссийский = Истина;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Фактический адрес организации';uk='Фактична адреса організації'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Телефон организации';uk='Телефон організації'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Факс организации';uk='Факс організації'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты организации';uk='Адреса електронної пошти організації'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Почтовый адрес организации';uk='Поштова адреса організації'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Любая другая контактная информация';uk='Будь-яка інша контактна інформація'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию БСП 2.2.1.12
//
Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") =
			ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

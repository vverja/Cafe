#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает параметр компоновки
//
// Параметры:
//  ПараметрыКомпоновки  - ПараметрыСхемыКомпоновкиДанных - в них будет добавлен новый параметр.
//  ИмяПараметра         - Строка - имя параметра компоновки данных.
//  ЗначениеПараметра    - Произвольный - значение параметра компоновки данных.
//
Процедура УстановитьПараметрКомпоновки(ПараметрыКомпоновки, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ЭлементПараметра = ПараметрыКомпоновки.Добавить();
	ЭлементПараметра.Имя = ИмяПараметра;
	ЭлементПараметра.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ЭлементПараметра.Значение = ЗначениеПараметра;
	
КонецПроцедуры

// Дополняет строку до нужной длины нулями слева
//
// Параметры:
//  Строка      - Строка - исходная строка.
//  ДлинаСтроки - Число - до какой длины необходимо дополнить исходную строку.
//
Процедура ДополнитьСтрокуНулямиСлева(Строка, ДлинаСтроки) Экспорт
	
	Строка = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка, ДлинаСтроки, "0", "Слева");
	
КонецПроцедуры

// Заполнение Реквизитов Адреса по строке XTDO
//  СкладАдрес - Структура, в которой необходимо представить адресную информацию о складе
//        Поля структуры: ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира
//  ЗначениеПолей - Значение полей адреса
Процедура ЗаполнитьСтруктуруПолейАдресаПоЗначениюПолей(СкладАдрес, ЗначениеПолей) Экспорт
	
	ДанныеАдреса = ЗначениеПолей.Состав;
	
	// Индекс просто ставим
	СкладАдрес.ПочтовыйИндекс = Формат(УправлениеКонтактнойИнформациейСлужебный.ПочтовыйИндексАдреса(ДанныеАдреса), "ЧГ=");
	
	// Страна по наименованию
	НаименованиеСтраны = СокрЛП(ДанныеАдреса.Страна);
	Если ПустаяСтрока(НаименованиеСтраны) Тогда
		СкладАдрес.Страна = НСтр("ru='Украина';uk='Україна'",Локализация.КодЯзыкаИнформационнойБазы());
	Иначе
		СкладАдрес.Страна = НаименованиеСтраны;
	КонецЕсли;
	
	// Синтетический "Населенный пункт" получаем как представление
	НаселенныйПункт = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеНаселенногоПункта(ДанныеАдреса);
	
	СкладАдрес.НаселенныйПункт         = НаселенныйПункт;
	
	СкладАдрес.Город  = ДанныеАдреса.Состав.Город;
	СкладАдрес.Район  = ДанныеАдреса.Состав.ВнутригРайон;
	СкладАдрес.Регион = ДанныеАдреса.Состав.СубъектРФ;
	
	
	// Синтетическую "Улицу" получаем как представление
	Улица = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеУлицы(ДанныеАдреса);
	СкладАдрес.Улица       = Улица;
	
	// Дом, строение, помещение
	ЗданияИПомещения = УправлениеКонтактнойИнформациейСлужебный.ЗданияИПомещенияАдреса(ДанныеАдреса);
	
	// Первые два здания выделяем отдельно, остальное в списке
	ТаблицаДанных = ЗданияИПомещения.Здания;
	
	// Вид = 1 - признак дома, владения. Вид = 2, доп строение
	СтрокаДома = ТаблицаДанных.Найти(1, "Вид");
	Если СтрокаДома<>Неопределено Тогда
		СкладАдрес.Дом     = СтрокаДома.Значение;
		ТаблицаДанных.Удалить(СтрокаДома);
	КонецЕсли;
	
	СтрокаДома = ТаблицаДанных.Найти(2, "Вид");
	Если СтрокаДома<>Неопределено Тогда
		СкладАдрес.Корпус    = СтрокаДома.Значение;
		ТаблицаДанных.Удалить(СтрокаДома);
	КонецЕсли;
	
КонецПроцедуры

// Ищет номенклатуру по наименованию и виду номенлатуры.
//
// Параметры:
//  Наименование     - Строка - наименование, используемое для поиска.
//  ВидНоменклатуры  - СправочникСсылка.ВидыНоменлатуры - вид номенлатуры, по которому выполняется поиск
//
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура, Неопределено - ссылка на найденный элемент справочника Номенклатура, Неорпределено, если не найдено.
//
Функция НоменклатураПоНаименованиюИВиду(Наименование, ВидНоменклатуры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0][0];
	
КонецФункции

// Ищет номенлатуру по уникальному идентификатору
//
// Параметры:
//  Номенклатура                      - СправочникСсылка.Номенлкатура - найденная номенклатура будет помещена в данный параметр.
//  ДанныеНоменклатуры                - Структура - содержит данные о номенклатуре, в частности свойство ИД, по которому будет выполняться поиск.
//  ПрикладныеПараметры               - Структура - содержит параметры узла обмена с сайтом.
//  УникальныйИдентификаторКорректен  - Булево - признак того, что уникальный идентификатор в данных номенклатуры был коррекнтым
//
// Возвращаемое значение:
//   Булево   - признак того, что номенклатура успешно найдена
//
Функция УспешноНайденТоварПоСсылке(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, УникальныйИдентификаторКорректен) Экспорт
	
	Попытка
		
		УникальныйИдентификаторНоменклатуры = Новый УникальныйИдентификатор(ДанныеНоменклатуры.Ид);
		
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УникальныйИдентификаторНоменклатуры);
		
		Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
			И Номенклатура.ПолучитьОбъект() <> Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	Исключение
		
		УникальныйИдентификаторКорректен = Ложь;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет дополнительные реквизиты документа "Заказ клиента" соотвествующие номеру и дате заказа с сайта
//
// Параметры:
//  ДокументОбъект      - ДокументОбъект.ЗаказКлиента - документ, дополнетельные реквзиты которого необходимо обновить
//  РеквизитыЗаказа     - Структура - содержит информацию о данных заказа, полученных с сайта.
//  ПрикладныеПараметры - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//
Процедура ЗаполнитьНомерИДатуЗаказаДополнительныеРеквизиты(ДокументОбъект, РеквизитыЗаказа, ПрикладныеПараметры) Экспорт

	Если ЗначениеЗаполнено(ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте) Тогда
		НайденныеСтроки = ДокументОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСвойства = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
		Иначе
			СтрокаСвойства = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаСвойства.Свойство = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте;
		СтрокаСвойства.Значение = РеквизитыЗаказа.Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте) Тогда
		НайденныеСтроки = ДокументОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСвойства = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
		Иначе
			СтрокаСвойства = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаСвойства.Свойство = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте;
		СтрокаСвойства.Значение = РеквизитыЗаказа.Номер;
	КонецЕсли;

КонецПроцедуры

// Заполняет массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
//
// Возвращаемое значение:
//   Массиив  - массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
//
Функция РеквизитыОбменаТоварами() Экспорт

	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ВыгружатьФайлы");
	МассивРеквизитов.Добавить("КлассифицироватьПоВидамНоменклатуры");
	МассивРеквизитов.Добавить("СписокТочекСамовывоза");
	МассивРеквизитов.Добавить("КоэффициентПересчетаВеса");

	Возврат МассивРеквизитов;

КонецФункции

// Заполняет массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
//
// Возвращаемое значение:
//   Массиив  - массив реквизитов формы узла обмена с сайтами, отвечающих за настройки обмена заказами.
//
Функция РеквизитыОбменаЗаказами() Экспорт
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте");
	МассивРеквизитов.Добавить("ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте");
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ВидНоменклатурыТовар");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслуга");
	МассивРеквизитов.Добавить("ЕдиницаИзмеренияНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("Соглашение");
	МассивРеквизитов.Добавить("Склад");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("Менеджер");
	МассивРеквизитов.Добавить("ПричинаОтменыЗаказа");
	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	МассивРеквизитов.Добавить("СоздаватьПартнеровДляНовыхКонтрагентов");
	МассивРеквизитов.Добавить("ГруппаДоступаПартнеров");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Создает нового контрагента
//
// Параметры:
//  ДанныеКонтрагента        - Структура - содержит данные покупателя с сайта.
//  ПрикладныеПараметры      - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//  ОписаниеОшибки           - Строка - в нее записывается текст ошибки, которая может возникнуть при создании нового контрагента.
//  СтруктураСвойстваЗаказа  - Структура - содержит свойства заказа с сайта.
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагент   - ссылка на вновь созданного контрагента
//
Функция СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа) Экспорт
	
	НовыйКонтрагент                     = Справочники.Контрагенты.СоздатьЭлемент(); 
	
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	НовыйКонтрагент.ЮрФизЛицо          = ?(ДанныеКонтрагента.ЮрЛицо, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
	НовыйКонтрагент.Наименование       = ДанныеКонтрагента.Наименование;
	НовыйКонтрагент.НаименованиеПолное = ?(ДанныеКонтрагента.ЮрЛицо, ДанныеКонтрагента.ОфициальноеНаименование, ДанныеКонтрагента.ПолноеНаименование);
	
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег(НСтр("ru='Фактический адрес';uk='Фактична адреса'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru='Юридический адрес';uk='Юридична адреса'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru='ТелефонРабочий';uk='ТелефонРабочий'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Телефон,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru='Почта';uk='Пошта'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			                             СтрокаИнформации.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов")
		ИЛИ ПрикладныеПараметры.СоздаватьПартнеровДляНовыхКонтрагентов Тогда
		
		НовыйКонтрагент.Партнер = ВновьСозданныйПартнер(ДанныеКонтрагента,
		                                                ПрикладныеПараметры);
		
	Иначе
		
		НовыйКонтрагент.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
		
	КонецЕсли;
		
	НовыйКонтрагент.Записать();
	
	
	СтруктураСвойстваЗаказа.Партнер = НовыйКонтрагент.Партнер;
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

// Заполняет табличную часть "Товары" документа "Заказ клиента".
//
// Параметры:
//  Документ            - ДокументОбъект.ЗаказКлиента - документ, чья табличная часть "Товары" будет заполнена.
//  ТаблицаТоваровСайт  - ТаблицаЗначений - таблица заказанных товаров по данным с сайта.
//  ПрикладныеПараметры - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//
Процедура ЗаполнитьТабличнуюЧастьДокумента(Документ, ТаблицаТоваровСайт, ПрикладныеПараметры) Экспорт
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Документ);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", Новый Структура("Склад, СкладГруппа", Документ.Склад, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьСодержание", Новый Структура("ЗаполнятьДляВсехУслуг", Истина));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно, СтатусЗаказаКлиента", Ложь, Документ.Статус)); 
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Документ.Товары.Очистить();
	ТаблицаТоварыДокумент = Документ.Товары.Выгрузить();
	ТаблицаТоварыДокумент.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	Для Каждого ТекСтрока Из ТаблицаТоваровСайт Цикл
		
		НоваяСтрока = ТаблицаТоварыДокумент.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.СтавкаНДС = СтавкаНДСПоЗначениюПриЗагрузке(ТекСтрока.СтавкаНДС);
		НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Документ.Товары.Загрузить(ТаблицаТоварыДокумент);
	
КонецПроцедуры

// Ищет валюту по коду валюту, переданному с сайта.
// Если валюту найти не удалось, получает валюту регламентированного учета.
//
// Параметры:
//  Валюта           - СправочникСсылка.Валюта - в данный параметр устанавливается найденная валюта
//  КодВалютыСтрока  - Строка - код валюты, по которому выполняется поиск.
//
Процедура ОбработатьВалютуXML(Валюта, КодВалютыСтрока) Экспорт
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию(КодВалютыСтрока);
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
КонецПроцедуры

// Получает значение ставки НДС по строковому значению, переданному с сайта.
//
// Параметры:
//  СтавкаНалогаСтрока - Строка - строковое представление ставки НДС
//
// Возвращаемое значение:
//   ПеречислениеСсылка.СтавкиНДС   - найденное по строковому описанию значение ставки НДС
//
Функция СтавкаНДСПоЗначениюПриЗагрузке(СтавкаНалогаСтрока) Экспорт
	
	Возврат НДСОбщегоНазначенияКлиентСервер.ПолучитьПоСтрокеСтавкуНДС(СтавкаНалогаСтрока);
		
КонецФункции

// Возвращает пустую таблицу значений, в которыю будут добавляться дополнительные поля отбора
//
Функция ДобавляемыеПоляОтбора() Экспорт
	
	ПоляОтбора = Новый ТаблицаЗначений;
	
	ПоляОтбора.Колонки.Добавить("Наименование");
	ПоляОтбора.Колонки.Добавить("Синоним");
	ПоляОтбора.Колонки.Добавить("ТипЗначения");
	ПоляОтбора.Колонки.Добавить("Отбор");
	
	Возврат ПоляОтбора;
	
КонецФункции

// Возращает массив структур по которым происходит отбор соглашения
//
Функция ПараметрыОтбораСоглашения() Экспорт
	
	ОтборСоглашения = Новый Массив;
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора", "Типовое", Истина));
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора","ДоступноВнешнимПользователям", Истина));
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора","СегментПартнеров",
		Справочники.СегментыПартнеров.ПустаяСсылка()));
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора","Статус",
		Перечисления.СтатусыСоглашенийСКлиентами.Действует));
	ОтборСоглашения.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора","ХозяйственнаяОперация",
		Перечисления.ХозяйственныеОперации.РеализацияКлиенту));
		
	Возврат ОтборСоглашения;
		
КонецФункции

// Возращает массив структур по которым происходит отбор сегмена номенклатуры
//
Функция ПараметрыОтбораСегмента() Экспорт
	
	ЗначенияОтбора = Новый Массив;
	ЗначенияОтбора.Добавить(Перечисления.СпособыФормированияСегментов.ФормироватьВручную);
	ЗначенияОтбора.Добавить(Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять);
	
	ОтборСегмента = Новый Массив;
	ОтборСегмента.Добавить(Новый Структура("ИмяПоля, ЗначениеОтбора", "СпособФормирования", ЗначенияОтбора));
	
	Возврат ОтборСегмента;

КонецФункции

#Область ОбработчикиОбновления
Процедура ФормаУзлаОбменаСоглашениеПриИзмененииНаСервере(Форма, ЭтоЧтение = Ложь) Экспорт
	
	ДанныеСоглашения = Новый Структура("Склад, ЭтоГруппаСкладов", Неопределено, Ложь);
	Если ЗначениеЗаполнено(Форма.Соглашение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СоглашенияСКлиентами.Склад,
		|	ЕСТЬNULL(Склады.ЭтоГруппа, ЛОЖЬ) КАК ЭтоГруппаСкладов,
		|	СоглашенияСКлиентами.Менеджер
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СоглашенияСКлиентами.Склад = Склады.Ссылка
		|ГДЕ
		|	СоглашенияСКлиентами.Ссылка = &Соглашение";
		
		Запрос.УстановитьПараметр("Соглашение", Форма.Соглашение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДанныеСоглашения, Выборка);
			Если НЕ ЭтоЧтение И НЕ ЗначениеЗаполнено(Форма.Менеджер) Тогда
				Форма.Менеджер = Выборка.Менеджер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СамообслуживаниеСервер.УправлениеЭлементомФормыСклад(Форма, ДанныеСоглашения, Форма.Элементы.Склад)
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ВновьСозданныйПартнер(ДанныеКонтрагента , Параметры)
	
	ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	ПартнерОбъект.Клиент             = Истина;
	ПартнерОбъект.ЮрФизЛицо          = ?(ДанныеКонтрагента.Юрлицо, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	ПартнерОбъект.ДатаРегистрации    = ТекущаяДата();
	ПартнерОбъект.Комментарий        = НСтр("ru='Создан автоматически при импорте заказов с сайта';uk='Створений автоматично при імпорті замовлень з сайту'");
	ПартнерОбъект.Наименование       = ДанныеКонтрагента.Наименование;
	ПартнерОбъект.НаименованиеПолное =?(ДанныеКонтрагента.ЮрЛицо, ДанныеКонтрагента.ОфициальноеНаименование, ДанныеКонтрагента.ПолноеНаименование);
	ПартнерОбъект.ОсновнойМенеджер   = Параметры.Менеджер;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаПартнеров") Тогда
		ПартнерОбъект.ГруппаДоступа = Параметры.ГруппаДоступаПартнеров;
	КонецЕсли;
	
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег(НСтр("ru='Фактический адрес';uk='Фактична адреса'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(ПартнерОбъект,
			                             Справочники.ВидыКонтактнойИнформации.АдресПартнера,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru='ТелефонРабочий';uk='ТелефонРабочий'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(ПартнерОбъект,
			                             Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
			                             Перечисления.ТипыКонтактнойИнформации.Телефон,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru='Почта';uk='Пошта'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(ПартнерОбъект,
			                             Справочники.ВидыКонтактнойИнформации.EmailПартнера,
			                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			                             СтрокаИнформации.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПартнерОбъект.Записать();
	
	Возврат ПартнерОбъект.Ссылка;
	
КонецФункции

Процедура ДобавитьКонтактнуюИнформацию(Объект, ВидКИ, ТипКИ, Представление)
	
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Представление, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидКИ, ТипКИ);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработчиковОбновленния

#КонецОбласти 

#КонецОбласти

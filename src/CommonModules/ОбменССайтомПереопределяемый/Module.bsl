////////////////////////////////////////////////////////////////////////////////
// ОбменССайтомПереопределяемый: механизм обмена с сайтом
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФормаУзлаОбмена

// Определяет имя формы узла плана обмена "Обмен с сайтом"
//
Процедура ПереопределитьФормуУзла(ВыбраннаяФорма) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - Объект узла плана обмена "ОбменССайтом"
//
Процедура ФормаУзлаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ОбменССайтамиУТ.ФормаУзлаОбменаСоглашениеПриИзмененииНаСервере(Форма, Истина);
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")) И ТекущийОбъект.ОбменЗаказами Тогда
		Форма.Объект.ОбменЗаказами = Ложь;
		Форма.Элементы.СтраницаОбменЗаказами.Видимость = Ложь;
	КонецЕсли;
	
	Форма.ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Форма.ИспользуютсяГруппыДоступаПартнеров   = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаПартнеров");
	
	ОбменССайтомКлиентСерверПереопределяемый.УстановитьДоступностьЭлементовФормыУзла(Форма, ТекущийОбъект);

КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события
//
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.СпособИдентификацииКонтрагентов)  Тогда
		
		Форма.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП;
		
	КонецЕсли;
	
	Если Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		Форма.Элементы.ГруппаДоступаПартнеров.Заголовок = НСтр("ru='Группа доступа создаваемых контрагентов';uk='Група доступу створюваних контрагентів'");
	Иначе
		Форма.Элементы.ГруппаДоступаПартнеров.Заголовок = НСтр("ru='Группа доступа создаваемых партнеров';uk='Група доступу створюваних партнерів'");
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект
//  ПараметыЗаписи - Структура - структура, содержащая параметры записи
//
Процедура ФормаУзлаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект
//  ПараметыЗаписи - Структура - структура, содержащая параметры записи
//
Процедура ФормаУзлаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

//Формирует текст запроса, который позволит получить таблицу значений,
// описанную в макете "СхемаВыгрузкиОбновлениеПакетаПредложений"
// плана обмена "Обмен с сайтом"
Процедура ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|{ГДЕ
	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры,
	|	НоменклатураСегмента.Номенклатура.*}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад,
	|	Склады.Наименование
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склад}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|	СоглашенияСКлиентами.Валюта КАК Валюта,
	|	СоглашенияСКлиентами.Наименование
	|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|{ГДЕ
	|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентами.ВидЦен
	|ПОМЕСТИТЬ ВидыЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Ссылка В
	|			(ВЫБРАТЬ
	|				ДоступныеСоглашенияСоглашения.Ссылка
	|			ИЗ
	|				ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиТовары.ВидЦены
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|ГДЕ
	|	СоглашенияСКлиентамиТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ДоступныеСоглашенияСоглашения.Ссылка
	|			ИЗ
	|				ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|ГДЕ
	|	СоглашенияСКлиентамиЦеновыеГруппы.Ссылка В
	|			(ВЫБРАТЬ
	|				ДоступныеСоглашенияСоглашения.Ссылка
	|			ИЗ
	|				ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	Товары.ЕдиницаИзмерения,
	|	ДоступныеСоглашенияСоглашения.Ссылка КАК ТипЦены,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) = 0
	|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0)
	|	КОНЕЦ / ВЫБОР
	|		КОГДА СоглашенияСКлиентамиТовары.Упаковка ЕСТЬ НЕ NULL 
	|				И СоглашенияСКлиентамиТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА &ТекстЗапросаКоэффициентУпаковки1 = 0
	|						ТОГДА 1
	|					ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
	|					ТОГДА 1
	|				ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ЦенаЗаЕдиницу,
	|	ДоступныеСклады.Склад КАК Склад,
	|	ЕСТЬNULL(РезервИзПоступлений.Количество, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ОстатокНаСкладе,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL 
	|				И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ДоступныеСоглашенияСоглашения.Валюта) КАК Справочник.Валюты).Код
	|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Код
	|	КОНЕЦ КАК ТипЦеныВалютаКод,
	|	ЕСТЬNULL(Товары.ЕдиницаИзмерения.МеждународноеСокращение, """") КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	ТипЦены.*,
	|	ЦенаЗаЕдиницу,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТипЦеныЕдиницаЦеныКоэффициент}
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА Товары.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.Ссылка
	|				КОГДА Товары.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.ВидНоменклатуры
	|				КОГДА Товары.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Склад).* КАК Склад, ((Номенклатура, Характеристика) В
	|				    (ВЫБРАТЬ
	|				        ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|				        ТаблицаОтбора.Характеристика КАК Характеристика
	|				    ИЗ
	|				        ОтборПоСегментуНоменклатуры КАК ТаблицаОтбора
	|				    ГДЕ
	|				        ТаблицаОтбора.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}) КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеСклады.Склад = СвободныеОстаткиОстатки.Склад
	|			И (Товары.Ссылка = СвободныеОстаткиОстатки.Номенклатура)
	|			И (СвободныеОстаткиОстатки.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК РезервИзПоступлений
	|		ПО (СвободныеОстаткиОстатки.Номенклатура = РезервИзПоступлений.Номенклатура)
	|			И (ЕСТЬNULL(СвободныеОстаткиОстатки.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = РезервИзПоступлений.Характеристика)
	|			И (СвободныеОстаткиОстатки.Склад = РезервИзПоступлений.Склад)
	|			И (РезервИзПоступлений.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
	|			И (РезервИзПоступлений.Количество < 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ПО (ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка)
	|			И (СоглашенияСКлиентамиТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|			И (СоглашенияСКлиентамиТовары.Номенклатура = Товары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ПО (ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка)
	|			И (Товары.ЦеноваяГруппа = СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ВидыЦен.ВидЦен
	|					ИЗ
	|						ВидыЦен КАК ВидыЦен) {(Номенклатура).* КАК Номенклатура, ((Номенклатура, Характеристика) В
	|				    (ВЫБРАТЬ
	|				        ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|				        ТаблицаОтбора.Характеристика КАК Характеристика
	|				    ИЗ
	|				        ОтборПоСегментуНоменклатуры КАК ТаблицаОтбора
	|				    ГДЕ
	|				        ТаблицаОтбора.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ИСТИНА)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = Товары.Ссылка)
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) > 0
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиТовары.ВидЦены
	|				КОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ Товары.ЭтоГруппа
	|{ГДЕ
	|	Товары.Ссылка.* КАК Номенклатура,
	|	((Товары.Ссылка, ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуНоменклатуры.Номенклатура КАК Номенклатура,
	|				ОтборПоСегментуНоменклатуры.Характеристика КАК Характеристика
	|			ИЗ
	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	|			ГДЕ
	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)),
	|	(ЕСТЬNULL(РезервИзПоступлений.Количество, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0)) КАК ОстатокНаСкладе}";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашенияСКлиентамиТовары.Упаковка",
		"СоглашенияСКлиентамиТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
КонецПроцедуры

 // Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстЗапросаОбновлениеПакетаПредложений
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры, ПараметрыКомпоновки)  Экспорт
	
	ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет структуру полями, которые должны быть добавлены в отбор настройки каталога
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом"
//   Параметры:
// ПоляОтбора - Структура, в которую добавляются поля отбора
//		* Ключ - Наименование поля отбора
//		* Значение - Описание типа значения добавляемого поля
Процедура ЗаполнитьПоляОтбораОбновленияПакетаПредложений(ПоляОтбора) Экспорт
	
	ПоляЦеныИОстатки = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	
	НоваяСтрока = ПоляЦеныИОстатки.Добавить(); 
	НоваяСтрока.Наименование = "Соглашение";
	НоваяСтрока.Синоним = НСтр("ru='Соглашение';uk='Оферта'");
	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСоглашения();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		НоваяСтрока = ПоляЦеныИОстатки.Добавить(); 
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru='Сегмент номенклатуры';uk='Сегмент номенклатури'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		
	КонецЕсли;
	
	ПоляОтбора.Вставить("ЦеныИОстатки", ПоляЦеныИОстатки);
	
КонецПроцедуры

//Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений"
// плана обмена "Обмен с сайтом"
// Параметры:
//		ТекстыЗапросов - структура содердащая тексты запросов
//			* Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом"
//			* Остатки- поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом"
//
Процедура ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Цены =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|{ГДЕ
	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры,
	|	НоменклатураСегмента.Номенклатура.*}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|	СоглашенияСКлиентами.Валюта КАК Валюта,
	|	СоглашенияСКлиентами.Наименование
	|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|{ГДЕ
	|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентами.ВидЦен
	|ПОМЕСТИТЬ ВидыЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Ссылка В
	|			(ВЫБРАТЬ
	|				ДоступныеСоглашенияСоглашения.Ссылка
	|			ИЗ
	|				ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиТовары.ВидЦены
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|ГДЕ
	|	СоглашенияСКлиентамиТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ДоступныеСоглашенияСоглашения.Ссылка
	|			ИЗ
	|				ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|ГДЕ
	|	СоглашенияСКлиентамиЦеновыеГруппы.Ссылка В
	|			(ВЫБРАТЬ
	|				ДоступныеСоглашенияСоглашения.Ссылка
	|			ИЗ
	|				ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Номенклатура,
	|	Товары.Наименование КАК НоменклатураНаименование,
	|	Товары.Артикул КАК НоменклатураАртикул,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ДоступныеСоглашенияСоглашения.Ссылка КАК ТипЦены,
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ДоступныеСоглашенияСоглашения.ЦенаВключаетНДС КАК ТипЦеныЦенаВключаетНДС,
	|	ДоступныеСоглашенияСоглашения.Наименование КАК ТипЦеныНаименование,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL 
	|				ИЛИ СоглашенияСКлиентамиТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ДоступныеСоглашенияСоглашения.Валюта) КАК Справочник.Валюты).Наименование
	|		КОГДА НЕ СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|			ТОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен.ВалютаЦены.Наименование
	|		КОГДА НЕ СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL 
	|			ТОГДА СоглашенияСКлиентамиТовары.ВидЦены.ВалютаЦены.Наименование
	|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Наименование
	|	КОНЕЦ КАК ТипЦеныВалютаКод,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) = 0
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0)
	|		КОНЕЦ / ВЫБОР
	|			КОГДА СоглашенияСКлиентамиТовары.Упаковка ЕСТЬ НЕ NULL 
	|					И СоглашенияСКлиентамиТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА &ТекстЗапросаКоэффициентУпаковки1 = 0
	|							ТОГДА 1
	|						ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ЦенаЗаЕдиницу,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ЕдиницыИзмерения.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	НоменклатураНаименование,
	|	НоменклатураАртикул,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураПометкаУдаления,
	|	ТипЦены.*,
	|	ТипЦеныЦенаВключаетНДС,
	|	ТипЦеныНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЦенаЗаЕдиницу}
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА Товары.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.Ссылка
	|				КОГДА Товары.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.ВидНоменклатуры
	|				КОГДА Товары.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (Товары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка
	|			И (СоглашенияСКлиентамиТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|			И (СоглашенияСКлиентамиТовары.Номенклатура = Товары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка
	|			И (Товары.ЦеноваяГруппа = СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ВидыЦен.ВидЦен
	|					ИЗ
	|						ВидыЦен КАК ВидыЦен) {(Номенклатура).* КАК Номенклатура, ((Номенклатура, Характеристика) В
	|				    (ВЫБРАТЬ
	|				        ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|				        ТаблицаОтбора.Характеристика КАК Характеристика
	|				    ИЗ
	|				        ОтборПоСегментуНоменклатуры КАК ТаблицаОтбора
	|				    ГДЕ
	|				        ТаблицаОтбора.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2}) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ИСТИНА)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = Товары.Ссылка)
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) > 0
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиТовары.ВидЦены
	|				КОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ Товары.ЭтоГруппа
	|{ГДЕ
	|	Товары.Ссылка.* КАК Номенклатура,
	|	((Товары.Ссылка, ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуНоменклатуры.Номенклатура КАК Номенклатура,
	|				ОтборПоСегментуНоменклатуры.Характеристика КАК Характеристика
	|			ИЗ
	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	|			ГДЕ
	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2}";

	ТекстыЗапросов.Цены = СтрЗаменить(ТекстыЗапросов.Цены,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашенияСКлиентамиТовары.Упаковка",
		"СоглашенияСКлиентамиТовары.Номенклатура"));
		
	ТекстыЗапросов.Цены = СтрЗаменить(ТекстыЗапросов.Цены,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстыЗапросов.Остатки =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|{ГДЕ
	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры,
	|	НоменклатураСегмента.Номенклатура.*}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад,
	|	Склады.Наименование
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склад}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	Товары.ЕдиницаИзмерения,
	|	ДоступныеСклады.Склад КАК Склад,
	|	ДоступныеСклады.Наименование КАК СкладНаименование,
	|	ЕСТЬNULL(РезервИзПоступлений.Количество, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ОстатокНаСкладе
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ЕдиницаИзмерения.*,
	|	СкладНаименование}
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА Товары.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.Ссылка
	|				КОГДА Товары.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.ВидНоменклатуры
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Склад).* КАК Склад, ((Номенклатура, Характеристика) В
	|				    (ВЫБРАТЬ
	|				        ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|				        ТаблицаОтбора.Характеристика КАК Характеристика
	|				    ИЗ
	|				        ОтборПоСегментуНоменклатуры КАК ТаблицаОтбора
	|				    ГДЕ
	|				        ТаблицаОтбора.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2}) КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеСклады.Склад = СвободныеОстаткиОстатки.Склад
	|			И (Товары.Ссылка = СвободныеОстаткиОстатки.Номенклатура)
	|			И (СвободныеОстаткиОстатки.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК РезервИзПоступлений
	|		ПО (СвободныеОстаткиОстатки.Номенклатура = РезервИзПоступлений.Номенклатура)
	|			И (ЕСТЬNULL(СвободныеОстаткиОстатки.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = РезервИзПоступлений.Характеристика)
	|			И (СвободныеОстаткиОстатки.Склад = РезервИзПоступлений.Склад)
	|			И (РезервИзПоступлений.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
	|			И (РезервИзПоступлений.Количество < 0)
	|ГДЕ
	|	НЕ Товары.ЭтоГруппа
	
	|{ГДЕ
	|	Товары.Ссылка.* КАК Номенклатура,
	|	((Товары.Ссылка, ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуНоменклатуры.Номенклатура КАК Номенклатура,
	|				ОтборПоСегментуНоменклатуры.Характеристика КАК Характеристика
	|			ИЗ
	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	|			ГДЕ
	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2,
	|	(ЕСТЬNULL(РезервИзПоступлений.Количество, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0)) КАК ОстатокНаСкладе}";
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстЗапросаПакетПредложений
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет соотвествие полями, которые должны быть добавлены в отбор настройки каталога
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Поля в соотвествии хранятся с привязкой к набору данных, к которому они относятся 
//   Параметры:
// ПоляОтбора - Соотвествие, в которую добавляются поля отбора
//		* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений"
//		* Структура с полями данного набора
//			* Ключ - Наименование поля отбора
//			* Значение - Описание типа значения добавляемого поля
Процедура ЗаполнитьПоляОтбораПакетаПредложений(ПоляОтбора) Экспорт
	
	ПоляЦены = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	
	НоваяСтрока = ПоляЦены.Добавить();
	НоваяСтрока.Наименование = "Соглашение";
	НоваяСтрока.Синоним = НСтр("ru='Соглашение';uk='Оферта'");
	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСоглашения();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		НоваяСтрока = ПоляЦены.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru='Сегмент номенклатуры';uk='Сегмент номенклатури'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОстатки = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
		НоваяСтрока = ПоляОстатки.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru='Сегмент номенклатуры';uk='Сегмент номенклатури'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОтбора.Вставить("Остатки", ПоляОстатки);
		
	КонецЕсли;
	
	ПоляОтбора.Вставить("Цены", ПоляЦены);

	
КонецПроцедуры

//Формирует тексты запросов, которые позволят получить таблицы значений,
// описанные в макете "СхемаВыгрузкиКаталог"
// плана обмена "Обмен с сайтом"
// Параметры:
//	ТекстыЗапросов - структура содердащая тексты запросов
//		* Номенклатура - поле, в которое нужно поместить текст запроса для заполнения источника данных "Номенклатура"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Свойства      - поле, в которое нужно поместить текст запроса для заполнения источника данных "Свойства"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Файлы          - поле, в которое нужно поместить текст запроса для заполнения источника данных "Файлы"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Характеристики - поле, необязательное поле, поле в которое нужно поместить текст запроса для заполнения источника данных "Характерстики"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
Процедура ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Номенклатура =
	"ВЫБРАТЬ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|{ГДЕ
	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры,
	|	НоменклатураСегмента.Номенклатура.*}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Владелец,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтриховыеКоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	И Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|{ГДЕ
	|	Штрихкоды.Номенклатура.*,
	|	(Штрихкоды.Номенклатура В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуНоменклатуры.Номенклатура
	|			ИЗ
	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	|			ГДЕ
	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ВЫБОР
	|		КОГДА &КлассифицироватьПоВиду
	|			ТОГДА Номенклатура.ВидНоменклатуры
	|		ИНАЧЕ Номенклатура.Родитель
	|	КОНЕЦ КАК НоменклатураРодитель,
	|	Номенклатура.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|	Номенклатура.Код КАК НоменклатураКод,
	|	Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА Номенклатура.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	КОНЕЦ КАК НоменклатураТипНоменклатуры,
	|	Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	Номенклатура.Описание КАК НоменклатураОписание,
	|	Номенклатура.ФайлКартинки КАК НоменклатураОсновноеИзображение,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ЕСТЬNULL(ШтрихКодыНоменклатуры.Штрихкод, """") КАК НоменклатураШтрихкод,
	|	Номенклатура.Производитель КАК НоменклатураПроизводитель,
	|	Номенклатура.СтавкаНДС КАК НоменклатураСтавкаНДСЗначение,
	|	ВЫБОР
	|		КОГДА &ВыгружатьПрочиеФайлы
	|			ТОГДА Номенклатура.ФайлОписанияДляСайта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураФайлОписанияHTML
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураПометкаУдаления,
	|	НоменклатураРодитель.*,
	|	НоменклатураЭтоГруппа,
	|	НоменклатураКод,
	|	НоменклатураНаименование,
	|	НоменклатураНаименованиеПолное,
	|	НоменклатураАртикул,
	|	НоменклатураТипНоменклатуры.*,
	|	НоменклатураВидНоменклатуры.*,
	|	НоменклатураОписание,
	|	НоменклатураОсновноеИзображение.*,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураШтрихкод,
	|	НоменклатураПроизводитель.*,
	|	НоменклатураСтавкаНДСЗначение.*,
	|	НоменклатураФайлОписанияHTML.*}
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтриховыеКоды КАК ШтрихКодыНоменклатуры
	|		ПО Номенклатура.Ссылка = ШтрихКодыНоменклатуры.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|{ГДЕ
	|	Номенклатура.Ссылка.*,
	|	(Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуНоменклатуры.Номенклатура КАК Ссылка
	|			ИЗ
	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	|			ГДЕ
	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}";
	
	Если ТекстыЗапросов.Свойство("Характеристики") Тогда
		
		ТекстыЗапросов.Характеристики = 
		"ВЫБРАТЬ
		|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
		|	НоменклатураСегмента.Характеристика КАК Характеристика,
		|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
		|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|{ГДЕ
		|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры,
		|	НоменклатураСегмента.Номенклатура.*}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, 
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА Номенклатура.Ссылка
		|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА Номенклатура.ВладелецХарактеристик
		|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА Номенклатура.ВидНоменклатуры
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецХарактеристик
		|ПОМЕСТИТЬ ТаблицаВладельцевНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|{ГДЕ
		|	Номенклатура.Ссылка.*,
		|	(Номенклатура.Ссылка В
		|			(ВЫБРАТЬ
		|				ОтборПоСегментуНоменклатуры.Номенклатура Как Ссылка
		|			ИЗ
		|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
		|			ГДЕ
		|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
		|	ТаблицаВладельцевНоменклатуры.Номенклатура КАК Номенклатура
		|{ВЫБРАТЬ
		|	Характеристика.*,
		|	ХарактеристикаНаименование,
		|	Номенклатура.*}
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВладельцевНоменклатуры КАК ТаблицаВладельцевНоменклатуры
		|		ПО ХарактеристикиНоменклатуры.Владелец = ТаблицаВладельцевНоменклатуры.ВладелецХарактеристик
		|{ГДЕ
		|	(ХарактеристикиНоменклатуры.Ссылка В
		|			(ВЫБРАТЬ
		|				ОтборПоСегментуНоменклатуры.Характеристика Как Ссылка
		|			ИЗ
		|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
		|			ГДЕ
		|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}";
		
	КонецЕсли;
	
	ТекстыЗапросов.Свойства =
	"ВЫБРАТЬ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|{ГДЕ
	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры,
	|	НоменклатураСегмента.Номенклатура.*}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоНоменклатуры,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	СвойствоНоменклатуры.*,
	|	ЗначениеСвойства.*}
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|{ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка.* КАК Номенклатура,
	|	(НоменклатураДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуНоменклатуры.Номенклатура
	|			ИЗ
	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	|			ГДЕ
	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)),
	|	(ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения)).* КАК СвойствоНоменклатуры}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения),
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
	|{ГДЕ
	|	ДополнительныеСведения.Объект.* КАК Номенклатура,
	|	(ДополнительныеСведения.Объект В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуНоменклатуры.Номенклатура
	|			ИЗ
	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	|			ГДЕ
	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)),
	|	(ВЫРАЗИТЬ(ДополнительныеСведения.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения)).* КАК СвойствоНоменклатуры}";
	
	ТекстыЗапросов.Файлы =
	"ВЫБРАТЬ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|{ГДЕ
	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры,
	|	НоменклатураСегмента.Номенклатура.*}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК НоменклатураФайл,
	|	ЕСТЬNULL(ПрисоединенныеФайлы.ХранимыйФайл, НоменклатураПрисоединенныеФайлы.ФайлХранилище) КАК НоменклатураФайлДанныеФайла,
	|	НоменклатураПрисоединенныеФайлы.Том КАК НоменклатураФайлТом,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК НоменклатураФайлРасширение,
	|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу КАК НоменклатураФайлПутьКФайлу,
	|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК НоменклатураФайлТипХраненияФайла,
	|	НоменклатураПрисоединенныеФайлы.Описание КАК НоменклатураФайлОписание
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураФайл.*,
	|	НоменклатураФайлДанныеФайла,
	|	НоменклатураФайлТом.*,
	|	НоменклатураФайлРасширение,
	|	НоменклатураФайлПутьКФайлу,
	|	НоменклатураФайлТипХраненияФайла.*,
	|	НоменклатураФайлОписание}
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО (ПрисоединенныеФайлы.ПрисоединенныйФайл = НоменклатураПрисоединенныеФайлы.Ссылка)
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|	ПО НоменклатураПрисоединенныеФайлы.ВладелецФайла = Номенклатура.Ссылка
	|		И (ВЫБОР
	|			КОГДА &ВыгружатьПрочиеФайлы
	|					И &ВыгружатьКартинки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|						КОГДА &ВыгружатьКартинки
	|							ТОГДА НоменклатураПрисоединенныеФайлы.Расширение В (&МассивРасширенийКартинок)
	|						КОГДА &ВыгружатьПрочиеФайлы
	|							ТОГДА НЕ НоменклатураПрисоединенныеФайлы.Расширение В (&МассивРасширенийКартинок)
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					ИЛИ Номенклатура.ФайлОписанияДляСайта = НоменклатураПрисоединенныеФайлы.Ссылка
	|		КОНЕЦ)
	|{ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла.*,
	|	(НоменклатураПрисоединенныеФайлы.ВладелецФайла В
	|			(ВЫБРАТЬ
	|				ОтборПоСегментуНоменклатуры.Номенклатура
	|			ИЗ
	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	|			ГДЕ
	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}";

КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстыЗапросовКаталог
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "МассивРасширенийКартинок", ОбменССайтом.МассивДопустимыхРасширенийИзображений());
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ВыгружатьПрочиеФайлы", ПрикладныеПараметры.ВыгружатьФайлы);
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ВыгружатьКартинки", ПрикладныеПараметры.ВыгружатьКартинки);
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КлассифицироватьПоВиду", ПрикладныеПараметры.КлассифицироватьПоВидамНоменклатуры);
	
КонецПроцедуры

// Заполняет соотвествие полями, которые должны быть добавлены в отбор настройки каталога 
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом"
// Поля в соотвествии хранятся с привязкой к набору данных, к которому они относятся 
//   Параметры:
//	* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений" 
//	* ПоляОтбора - Таблица значений, в которую добавляются поля отбора			
// 		* Наименование - строка - Имя поля
// 		* Синоним - строка - пользовательское представление
// 		* ТипЗначения - ОписаниеТипов - Тип значения поля
//		* Отбор - Массив - Содержит стуктуры  - описание отбора, необходимого при открытии формы выбора поля
//
Процедура ЗаполнитьПоляОтбораКаталога(ПоляОтбора) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		ПоляНоменклатуры = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
		
		НоваяСтрока = ПоляНоменклатуры.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru='Сегмент номенклатуры';uk='Сегмент номенклатури'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОтбора.Вставить("Номенклатура", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Свойства", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Файлы", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Характеристики", ПоляНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

// Позволяет внести изменения в компоновщик настроек СКД после загрузки в нее настроек при получении данных для выгрузки
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек, в который можно внести изменения
//  ИмяМакета  - Строка - имя макета выполняемой СКД которая выполняется
//
Процедура КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек, ИмяМакета) Экспорт
	
	Если ВРег(ИмяМакета) = ВРег("Каталог") 
		ИЛИ ВРег(ИмяМакета) = ВРег("ПакетПредложений")
		ИЛИ ВРег(ИмяМакета) = ВРег("ОбновлениеПакетаПредложений") Тогда
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек, Истина);
	КонецЕсли;
	
КонецПроцедуры

//Формирует текст запроса, который позволит получить таблицу значений,
// описанную в макете "СхемаВыгрузкиЗаказов"
// плана обмена "Обмен с сайтом"
Процедура ПолучитьТекстЗапросаЗаказы(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Ссылка КАК Заказ,
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение КАК НомерЗаказаНаСайте,
	|	СостоянияЗаказовКлиентов.Состояние КАК СостояниеЗаказа,
	|	ЗаказКлиента.СуммаДокумента - ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты, 0) КАК ЗаказКОплатеОстаток,
	|	ЗаказКлиента.СуммаДокумента - ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки, 0) КАК ЗаказКОтгрузкеОстаток,
	|	ЗаказКлиента.Валюта
	|ПОМЕСТИТЬ ЗаказыДляВыгрузки
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство = &НомерНаСайте
	|	И ЗаказКлиентаДополнительныеРеквизиты.Значение <> """"""""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ЗаказОтгрузка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыДляВыгрузки.Заказ КАК Заказ,
	|		МАКСИМУМ(Оформлено.Регистратор) КАК Регистратор
	|	ИЗ
	|		ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов КАК Оформлено
	|			ПО ЗаказыДляВыгрузки.Заказ = Оформлено.ЗаказКлиента
	|			 И Оформлено.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыДляВыгрузки.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ЗаказОплата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыДляВыгрузки.Заказ КАК Заказ,
	|		МАКСИМУМ(РасчетыСКлиентами.Регистратор) КАК Регистратор
	|	ИЗ
	|		ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ПО ЗаказыДляВыгрузки.Заказ = РасчетыСКлиентами.ЗаказКлиента
	|				И (РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|				И (РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнойКарте)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыДляВыгрузки.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыДляВыгрузки.Заказ,
	|	ЗаказыДляВыгрузки.НомерЗаказаНаСайте КАК ЗаказНомерНаСайте,
	|	ЕСТЬNULL(ЗаказКлиентаДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаНаСайте,
	|	ЗаказыДляВыгрузки.ЗаказКОплатеОстаток,
	|	ЗаказыДляВыгрузки.ЗаказКОтгрузкеОстаток,
	|	ЗаказКлиента.Номер КАК ЗаказНомер,
	|	ЗаказКлиента.Дата КАК ЗаказДата,
	|	ЗаказКлиента.Проведен КАК ЗаказПроведен,
	|	ЗаказКлиента.ПометкаУдаления,
	|	ЕСТЬNULL(ЗаказОплата.Номер, """") КАК ЗаказНомерОплаты,
	|	ЕСТЬNULL(ЗаказОплата.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОплаты,
	|	ЕСТЬNULL(ЗаказОтгрузка.Номер, """") КАК ЗаказНомерОтгрузки,
	|	ЕСТЬNULL(ЗаказОтгрузка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОтгрузки,
	|	ЕСТЬNULL(Валюты.Код, """") КАК ЗаказВалютаКод,
	|	ЗаказКлиента.ЦенаВключаетНДС КАК ЗаказСуммаВключаетНДС,
	|	ЗаказыДляВыгрузки.СостояниеЗаказа КАК ЗаказСостояниеЗаказа,
	|	ЗаказыДляВыгрузки.СостояниеЗаказа КАК ЗаказСтатусЗаказа,
	|	ЛОЖЬ КАК ЗаказЗакрыт,
	|	ЗаказКлиента.Комментарий КАК ЗаказКомментарий,
	|	ЗаказКлиента.Контрагент КАК ЗаказКонтрагент,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК ЗаказКурс,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ТоварыНоменклатура,
	|	ЕСТЬNULL(ДанныеНоменлатуры.Артикул, """") КАК ТоварыНоменклатураАртикул,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|					ИЛИ ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
	|					ИЛИ ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				ТОГДА ""Товар""
	|			ИНАЧЕ ""Услуга""
	|		КОНЕЦ, """") КАК ТоварыНоменклатураТипНоменклатуры,
	|	&ТекстЗапросаЕдиницаИзмерения КАК ТоварыЕдиницаИзмерения,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаНаименованиеПолноеЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	&ТекстЗапросаМеждународноеСокращениеЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.КоличествоУпаковок, 0) КАК ТоварыКоличество,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Цена, 0) КАК ТоварыЦена,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Сумма, 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК ТоварыСтавкаНДС,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаНДС, 0) КАК ТоварыСуммаНДС,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаСНДС, 0) КАК ТоварыВсего,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ПроцентРучнойСкидки, 0) + ЕСТЬNULL(ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки, 0) КАК ТоварыПроцентСкидки,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ТоварыХарактеристика,
	|	ЕСТЬNULL(ЗаказКлиента.СуммаДокумента, 0) КАК ЗаказСуммаДокумента,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаРучнойСкидки, 0) + ЕСТЬNULL(ЗаказКлиентаТовары.СуммаАвтоматическойСкидки, 0) КАК ТоварыСуммаСкидки,
	|	ЗаказКлиента.Контрагент,
	|	ЕСТЬNULL(Контрагенты.Наименование, """") КАК КонтрагентНаименование,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, """") КАК КонтрагентНаименованиеПолное,
	|	ЕСТЬNULL(Контрагенты.ЮрФизЛицо, ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ПустаяСсылка)) КАК КонтрагентЮрФизЛицо,
	|	ЕСТЬNULL(Контрагенты.КодПоЕДРПОУ, """") КАК КонтрагентКодПоЕДРПОУ
	|{ВЫБРАТЬ
	|	Заказ.*,
	|	ЗаказНомерНаСайте.*,
	|	ЗаказДатаНаСайте.*,
	|	ЗаказКОплатеОстаток,
	|	ЗаказКОтгрузкеОстаток,
	|	ЗаказНомер,
	|	ЗаказДата,
	|	ЗаказПроведен,
	|	ПометкаУдаления,
	|	ЗаказНомерОплаты,
	|	ЗаказДатаОплаты,
	|	ЗаказНомерОтгрузки,
	|	ЗаказДатаОтгрузки,
	|	ЗаказВалютаКод,
	|	ЗаказСуммаВключаетНДС,
	|	ЗаказСостояниеЗаказа.*,
	|	ЗаказСтатусЗаказа.*,
	|	ЗаказЗакрыт,
	|	ЗаказКомментарий,
	|	ЗаказКонтрагент.*,
	|	ЗаказКурс,
	|	ТоварыНоменклатура.*,
	|	ТоварыНоменклатураАртикул,
	|	ТоварыНоменклатураТипНоменклатуры,
	|	ТоварыЕдиницаИзмерения.*,
	|	ТоварыЕдиницаИзмеренияКод,
	|	ТоварыЕдиницаИзмеренияНаименование,
	|	ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ТоварыКоличество,
	|	ТоварыЦена,
	|	ТоварыСумма,
	|	ТоварыСтавкаНДС.*,
	|	ТоварыСуммаНДС,
	|	ТоварыВсего,
	|	ТоварыПроцентСкидки,
	|	ТоварыХарактеристика.*,
	|	ЗаказСуммаДокумента,
	|	ТоварыСуммаСкидки,
	|	Контрагент.*,
	|	КонтрагентНаименование,
	|	КонтрагентНаименованиеПолное,
	|	КонтрагентЮрФизЛицо.*,
	|	КонтрагентКодПоЕДРПОУ}
	|ИЗ
	|	ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказОплата КАК ЗаказОплата
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказОплата.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказОтгрузка КАК ЗаказОтгрузка
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказОтгрузка.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиентаДополнительныеРеквизиты.Ссылка
	|			И (ЗаказКлиентаДополнительныеРеквизиты.Свойство = &ДатаНаСайте)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО ЗаказКлиента.Контрагент = Контрагенты.Ссылка
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЗаказыДляВыгрузки.Валюта = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&Период,
	|				Валюта В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗаказыДляВыгрузки.Валюта
	|					ИЗ
	|						ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки)) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказыДляВыгрузки.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиентаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменлатуры
	|		ПО (ЗаказКлиентаТовары.Номенклатура = ДанныеНоменлатуры.Ссылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаНаименованиеПолноеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"НаименованиеПолное", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаМеждународноеСокращениеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"МеждународноеСокращение", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстЗапросаЗаказы
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметыТекстаЗапросаЗаказы(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	Если ПрикладныеПараметры.Свойство("ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте") Тогда
		ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НомерНаСайте", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте);
	КонецЕсли;

	Если ПрикладныеПараметры.Свойство("ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте") Тогда
		ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ДатаНаСайте", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте);
	КонецЕсли;
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораКаталог(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораПакетПредложений(УдаляемыеПоля) Экспорт
	
	УдаляемыеПоля.Добавить("ТипЦены");
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораОбновлениеПакетаПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// В данной процедуре возможно изменить параметры обмена перед началом обмена
//
// Параметры:
//  ПараметрыОбмена  - Структрура - текущие параметры обмена
//  УзелОбмена  - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//
Процедура ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена) Экспорт

	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")) И ПараметрыОбмена.ОбменЗаказами Тогда
		ПараметрыОбмена.ОбменЗаказами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура записывает в БП информацию о номера и дате заказа на сайте
// Параметры:
// ТаблицаЗаказов. Тип: Таблица значений
//		Колонки:	Заказ - Ссылка на документ Заказ покупателя
//					НомерЗаказа - строка, номер заказа на сайте
//					ДатаЗаказа - Дата, Дата заказа на сайте
// 
// ПрикладныеПараметры. Тип: структура
// Структура содержит параметры обмена которые были добавлены в форму узла при встраивании подсистемы в прикладное решение
//
Процедура ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет информацию о складах
//   Параметры:
// СписокТочекСамовывоза - СписокЗначений - точки самовывоза, указанные в узле обмена
// СписокСкладов - список значений - склады полученные в результате выполнения запроса (при выгрузке пакета предложений)
// ИнформацияОТочкахСамомывоза - таблица значений - таблица, в которой будет храниться информация о точках самовывоза и складах
//		Колонки:Склад - Ссылка, ссылка на элемент справочника (склады или точки самовывоза)
//				СкладНаименование - наименование склада
//				СкладАдрес - Адресная информация о складе - Структура СкладАдрес
//				СкладКонтактнаяИнформация - Контактная информация о складе  -структура "СкладКонтактнаяИнформация" 
//
//	СкладАдрес - Структура, в которой необходимо представить адресную информацию о складе
//		Поля: ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира
//
//	СкладКонтактнаяИнформация - структура , в которой необходимо представить контактную информацию о складе
//		Поля: ТелефонРабочий, Почта, КоординатыНаКарте, Прочее
Процедура ЗаполнитьИнформациюОСкладахИТочкахСамовывоза(СписокТочекСамовывоза,
	                                                   СписокСкладов,
	                                                   ИнформацияОТочкахСамовывоза,
	                                                   СкладАдрес,
	                                                   СкладКонтактнаяИнформация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка,
	|	Склады.Наименование,
	|	ЕСТЬNULL(СкладыКонтактнаяОтправитель.Представление, """") КАК АдресСклада,
	|	ЕСТЬNULL(СкладыКонтактнаяОтправитель.ЗначенияПолей, """") КАК ЗначенияПолей
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяОтправитель
	|		ПО Склады.Ссылка = СкладыКонтактнаяОтправитель.Ссылка
	|			И (СкладыКонтактнаяОтправитель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада))
	|ГДЕ
	|	(Склады.Ссылка В (&СписокТочекСамовывоза)
	|			ИЛИ Склады.Ссылка В (&СписокСкладов))";
	
	Запрос.УстановитьПараметр("СписокТочекСамовывоза", СписокТочекСамовывоза);
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ИнформацияОТочкахСамовывоза.Добавить();
		СтрокаТаблицы.Склад                     = Выборка.Ссылка;
		СтрокаТаблицы.СкладНаименование         = Выборка.Наименование;
		СтрокаТаблицы.СкладАдрес                = СкладАдрес;
		СтрокаТаблицы.СкладКонтактнаяИнформация = СкладКонтактнаяИнформация;
		
		СтранаПоУмолчанию = Справочники.СтраныМира.Украина;
		
		Если ЗначениеЗаполнено(Выборка.АдресСклада) Тогда
			
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Выборка.ЗначенияПолей) 
			Тогда
				РезультатыЧтения = Новый Структура;
				XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Выборка.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
					// Распознали с ошибками, сообщим при открытии.
					XDTOКонтактная.Представление = Выборка.АдресСклада;
					XDTOКонтактная.Состав.Страна = Строка(СтранаПоУмолчанию);
				КонецЕсли;
			Иначе
				XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Выборка.ЗначенияПолей, Выборка.АдресСклада, );
			КонецЕсли;
			
			ОбменССайтамиУТ.ЗаполнитьСтруктуруПолейАдресаПоЗначениюПолей(СтрокаТаблицы.СкладАдрес, XDTOКонтактная);
			
			СтрокаТаблицы.СкладКонтактнаяИнформация.Почта = Выборка.АдресСклада;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//В зависимости от значения функциональной опции "Использовать статусы заказов"
// устанавливается видимость табличной части "Соответствия заказов"
Процедура УстановитьВидимостьТабличнойЧастиСоотвествиеЗаказовФормыУзлаПланаОбмена(Видимость) Экспорт
	
	Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
КонецПроцедуры

// В зависимости от типа регистрируемых данных определяет данные, которые необходимо зарегистрировать в плане обмена
//
// Параметры:
//	Объект. Тип: СправочникОбъект, ДокументОбъект
//			Регистрируемый объект данных, например, НоменклатураОбъект, ЗаказОбъект
// 
//	МассивУзловТовары. Тип: массив значений
//			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случе если он является Номенклатурой
//
//	МассивУзловЗаказы. Тип: массив значений
//			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случе если он является Заказом
Процедура ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение = Ложь) Экспорт
	
	Если МассивУзловТовары.Количество() = 0 И МассивУзловЗаказы.Количество() =0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.СвободныеОстатки")
		Или ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		Или ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДоступныеОстаткиПланируемыхПоступлений") Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
		КонецЦикла;
	
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);

		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказКлиента") Тогда 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
			
			СтруктураРеквизитовЗаказаНаСайте = РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена);
			Если СтруктураРеквизитовЗаказаНаСайте <> Неопределено Тогда
				
				Если Объект.ПометкаУдаления Тогда
					 ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект.Ссылка);
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.СостоянияЗаказовКлиентов") Тогда
		
		Если Объект.Отбор.Найти("Заказ") = Неопределено 
			Или Не ЗначениеЗаполнено(Объект.Отбор.Заказ.Значение)
			Или ТипЗнч(Объект.Отбор.Заказ.Значение) <> Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Возврат;
		КонецЕсли;
		
		Если Замещение Тогда
			
			Если Объект.Отбор.Количество() <> 1 Тогда
				Возврат;
			КонецЕсли;
			
			ДокументЗаказ = Объект.Отбор[0].Значение;
			
			МассивУзловКРегистрации = Новый Массив;
			Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
				
				СтруктураРеквизитовЗаказаНаСайте = РеквизитыЗаказаНаСайте(ДокументЗаказ, УзелОбмена);
				Если СтруктураРеквизитовЗаказаНаСайте <> Неопределено Тогда
					Если СтруктураРеквизитовЗаказаНаСайте.Свойство("НомерЗаказаНаСайте")
						И ЗначениеЗаполнено(СтруктураРеквизитовЗаказаНаСайте.НомерЗаказаНаСайте) Тогда
						
						МассивУзловКРегистрации.Добавить(УзелОбмена);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Объект.Количество() <> 1 Тогда
				
				ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзловКРегистрации, ДокументЗаказ);
				Возврат;
				
			КонецЕсли;
			
			ЭлементОтбора = Объект.Отбор[0];
			Если ЭлементОтбора.Использование = Ложь Тогда
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументЗаказ) Тогда
				Возврат;
			КонецЕсли;
			
			Если МассивУзловКРегистрации.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			НовоеСостояниеЗаказа = Объект[0].Состояние;
			Если НовоеСостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
				
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	СостоянияЗаказовКлиентов.Состояние
				|ИЗ
				|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
				|ГДЕ
				|	СостоянияЗаказовКлиентов.Заказ = &Заказ";
				
				Запрос.УстановитьПараметр("Заказ", ДокументЗаказ);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Если Выборка.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловКРегистрации, ДокументЗаказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет статус контрагента по значению перечисления
// Параметры
//			ДанныеКонтрагентаЮрФизЛицо. Тип ПеречислениеСсылка
// Перечисление, которое определяет юридический статус контрагента
// В зависимости от статуса контрагента при выгрузке на сайт
// будут по разному заполняется данные о контрагенте
// Если это юр. лицо заполняться будут ИНН, КПП, если это физ лицо то наименование
Процедура ОпределитьЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо, ЭтоЮрЛицо) Экспорт
	
	ЭтоЮрЛицо = ПартнерыИКонтрагенты.ЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо);
	
КонецПроцедуры

// К ИД номенклатуры добавляет ИД характеристики, если она задана
// Параметры:
//	Номенклатура. Тип - Ссылка, например, СправочникСсылка.Номенклатура
//	Характерстика. Тип - Ссылка, например, СправочникСсылка.ХарактеристикиНоменклатуры
Процедура ДополнитьИдНоменклатурыХарактеристикой(Номенклатура, Характеристика, Ид) Экспорт
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
		И (НЕ Номенклатура.ЭтоГруппа)
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

// Получает заказы, загруженные с сайта
//  Параметры:
// ПрикладныеПараметры - структура, содержащая параметры прикладного решения
// ТаблицаНомераИДатыЗаказа - Таблица значений, содержащая номера и даты заказов, загруженных с сайта
//		Колонки: НомерЗаказа, ДатаЗаказа
// 
// Результат - таблица значений, в которую будет помещаться информация о заказах
// 		Колонки:ЗаказПокупателя - ссылка на документ Заказ
//				НомерЗаказаНаСайте - Номер заказа
//				НеОбновлятьЗаказ - Признак того, что Заказ не должен перезаписываться 
// 
Процедура ПолучитьРанееЗагруженныеДокументы(ПрикладныеПараметры, ТаблицаНомераИДатыЗаказов, Результат) Экспорт
	
	НомерНаСайте = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте;
	МассивНомеров = ТаблицаНомераИДатыЗаказов.ВыгрузитьКолонку("НомерЗаказа");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	Запрос.УстановитьПараметр("НомерНаСайте", НомерНаСайте);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Значение КАК НомерЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодСтроки = -1
	|				ИЛИ ВложенныйЗапрос.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОбновлятьЗаказ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиентаДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|		ЗаказКлиентаДополнительныеРеквизиты.Значение КАК Значение,
	|		ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ВЫБОР
	|				КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			КОНЕЦ) КАК Состояние,
	|		МАКСИМУМ(ЕСТЬNULL(ЗаказКлиентаТовары.КодСтроки, -1)) КАК КодСтроки
	|	ИЗ
	|		Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|			ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|			ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиентаТовары.Ссылка
	|				И (НЕ ЗаказКлиентаТовары.Отменено)
	|	ГДЕ
	|		ЗаказКлиентаДополнительныеРеквизиты.Свойство = &НомерНаСайте
	|		И ЗаказКлиентаДополнительныеРеквизиты.Значение В(&МассивНомеров)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказКлиентаДополнительныеРеквизиты.Ссылка,
	|		ЗаказКлиентаДополнительныеРеквизиты.Значение,
	|		ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ВЫБОР
	|				КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			КОНЕЦ)) КАК ВложенныйЗапрос";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Создает новый документ "Заказ покупателя"
// Параметры
// ДокументОбъект - ДокументОбъект. Выходной параметр, запоняется созданным Объектом документа Заказ
Процедура СоздатьНовыйДокументЗаказ(ДокументОбъект) Экспорт
	
	ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	
КонецПроцедуры

// Заполнят документ заказ данными с сайта
// 
//	Параметры:
//	
//	ДокументОбъект. Тип - ДокументОбъект, объект документа Заказ покупателя
//	
//	СтруктураРеквизитов. Тип - Структура, структура, содержащая в себе значения реквизитов заказа, закгруженных с сайта
//		Состав полей:
//					Ид					- Идентификатор заказа, очень часто тоже что и номер
//					Дата				- дата создания заказа на сайте
//					Номер				- номер заказа на сайте
//					ДатаОтгрузки		- дата отгрузки товара по заказу
//					ВалютаДокументаКод	- 3-х значный идентификатор валюты
//					ВидЦенНаименование	- наименование вида цены
//					СуммаВключаетНДС	- признак включения НДС
//					НаименованиеСкидки	- наименование скидки
//					ПроцентСкидки		- процент скидки
//					СуммаСкидки			- Сумма скидки по заказу
//					СкладНаименование 	- наименование склада, точки самовывоза
//					ПодразделениеНаименование - наименование подразделения
//					Контрагент			- Ссылка на контрагента, который уже был идентифицирован в базе
//					ТочкаСамовывоза		- Ссылка на элемент справочника, который в прикладном решении является справочником точек самовывоза или Неопределено
//					Товары				- табличная часть документа
//					Комментарий			- текстовый комментарий
//	
//	СвойстваЗаказа. Тип - соответсвие, содержит строкое представления свойств и значений заказа
//	ПрикладныеПараметры. Тип - Структура, содержит параметры прикладного решения, добавленные на форму узла плана обмена
//	ОписаниеОшибки. Тип - Строка, текстовое представление ошибки
//	Успешно. Тип - Булево - Признак успешного заполнения документа
Процедура ЗаполнитьЗаказ(ДокументОбъект, РеквизитыЗаказа, СвойстваЗаказа,
                         ПрикладныеПараметры, ОписаниеОшибки, Успешно) Экспорт
	
	Валюта = Неопределено;
	ОбменССайтамиУТ.ОбработатьВалютуXML(Валюта, РеквизитыЗаказа.ВалютаДокументаКод);
	
	ДокументОбъект.Дата          = РеквизитыЗаказа.Дата;
	ДокументОбъект.Валюта        = Валюта;
	ДокументОбъект.Соглашение    = ПрикладныеПараметры.Соглашение;
	ДокументОбъект.Организация   = ПрикладныеПараметры.Организация;
	ДокументОбъект.Менеджер      = ПрикладныеПараметры.Менеджер;
	ДокументОбъект.Контрагент    = РеквизитыЗаказа.Контрагент;
	ДокументОбъект.Партнер       = РеквизитыЗаказа.Партнер;
	ДокументОбъект.ЦенаВключаетНДС = РеквизитыЗаказа.СуммаВключаетНДС;
	ДокументОбъект.Склад           = ?(ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза),
	                                   РеквизитыЗаказа.ТочкаСамовывоза, 
	                                   ПрикладныеПараметры.Склад);
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ПрикладныеПараметры.Соглашение);
	ДокументОбъект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	ЗаполнитьЗначенияСвойств(ДокументОбъект,
	                         УсловияПродаж,
	                        "ХозяйственнаяОперация, ГруппаФинансовогоУчета,
	                        |ТребуетсяЗалогЗаТару, ФормаОплаты, ГрафикОплаты");
	Если ЗначениеЗаполнено(ДокументОбъект.ГрафикОплаты) Тогда
		ДокументОбъект.ФормаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ГрафикОплаты, "ФормаОплаты");
	КонецЕсли;
	
	ДокументОбъект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	ДокументОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ДокументОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокументОбъект,
		                                                                  УсловияПродаж.ХозяйственнаяОперация,
		                                                                  Валюта);
		
	КонецЕсли;
	
	Комментарий = "";
	Если Не ПустаяСтрока(РеквизитыЗаказа.Комментарий) Тогда
		Комментарий = Комментарий + НСтр("ru='Комментарий менеджера на сайте';uk='Коментар менеджера на сайті'") + ": " +РеквизитыЗаказа.Комментарий;
	КонецЕсли;
	
	КомментарийПокупателя = СвойстваЗаказа.Получить("Комментарии покупателя");
	Если Не КомментарийПокупателя = Неопределено И Не ПустаяСтрока(КомментарийПокупателя) Тогда
		Комментарий = Комментарий + ?(ПустаяСтрока(Комментарий),"",Символы.ПС) + НСтр("ru='Комментарий покупателя на сайте';uk='Коментар покупця на сайті'") + ": " + КомментарийПокупателя;
	КонецЕсли;
	
	ДокументОбъект.Комментарий   = Комментарий;
	
	ТаблицаНоменклатура = Неопределено;
	
	ОбменССайтамиУТ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);
	ДокументОбъект.СуммаДокумента = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок();
	ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
	ОбменССайтамиУТ.ЗаполнитьНомерИДатуЗаказаДополнительныеРеквизиты(ДокументОбъект, РеквизитыЗаказа, ПрикладныеПараметры);
	
	СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
	Если Не СтатусЗаказа = Неопределено Тогда
		
		ТаблицаСтатусов = ПрикладныеПараметры.СоответствиеСтатусовЗаказов;
		ЗначениеСтатуса = ТаблицаСтатусов.Найти(СтатусЗаказа, "СтатусЗаказаНаСайте");
		
		Если Не ЗначениеСтатуса = Неопределено Тогда
			ДокументОбъект.Статус = ЗначениеСтатуса.СтатусЗаказаВБазе;
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		КонецЕсли;
		
	Иначе
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		
	КонецЕсли;
	
	Успешно = Истина;
	
КонецПроцедуры

// Ищет контрагента согласно настройкам плана обмена
// Параметры:
//	СтруктураСвойстваЗаказа. Тип - Структура.
//		Содержит реквизиты заказа, загруженные с сайта. В данной структуре необходимо заполнить поле "Контрагент"
//	ДанныеКонтрагента. Тип - Структура.
//		Содержит реквизита контаргента, загруженная с заказа, по данным реквизитам будет происходить поиск существующего контрагента
//		или создание нового
//		Описание полей:
//			ЮрЛицо - Тип Булево. Признак наличия статуса Юр. лицо у контарагента
//			ОфициальноеНаоименование - Тип строка.Официальное Наименование контрагента Юр лица
//			ПолноеНаименование - Тип строка. Полное наименование контрагента Юр лица
//			Наименование - Тип строка. Наименование контрагента
//			ФИО - ФИО контрагента, если он Физ. лицо
//			ОКПО - код ОКПО
//			ИНН - код ИНН
//			КПП - код КПП
//			РасчетныеСчета - Массив - Элементами массива является структура, в которой описаны свойства расчетного счета(необязательное поле)
//					Поля:
//						НомерСчета - Строка - Номер банковского счета контрагента
//						ДанныеБанка - Структура - Данные банка расчетного счета
//							Наименование - Строка
//							БИК - Строка
//							SWIFT - Строка
//							КоррСчет - Строка
//							Адрес - Строка
//							Город - Строка
//			ИнформацияПоКонтрагенту - Таблица значений, содержит строковое представление и значение контакнтной информации о контрагенте
//					Колонки:
//						Вид - Вид контактной информации
//						Значение - значение контактной инормации
//			Пример: ИнформацияПоКонтрагенту
//					Вид:							Значение:
//					"Наименование"					Администратор
//					"Полное наименование"			Администратор
//					"Юр./Физ. лицо"					Физ. лицо
//					"Юридический адрес"				Ул. Ленина
//					"Почта"							email@example.com
//					"Контактные лица"				Администратор
//
//	ПрикладныеПараметры - Стуктура, содаржащая параметры прикданого решения
//	ОписаниеОшибки - текствое представление ошибки
//
Процедура ИдентифицироватьКонтрагента(СтруктураСвойстваЗаказа, ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки) Экспорт

	СтруктураСвойстваЗаказа.Вставить("Партнер", Неопределено);
	
	Наименование  = ДанныеКонтрагента.Наименование;
	ЮрЛицо        = ДанныеКонтрагента.ЮрЛицо;
	КодПоЕДРПОУ   = ДанныеКонтрагента.КодПоЕДРПОУ;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент, 
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	
	Если ПустаяСтрока(Наименование) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru='Наименование контрагента должно быть заполнено!';uk='Найменування контрагента має бути заповнене!'"));
		
		Возврат ;
		
	КонецЕсли;
	
	ТекстСообщенияНайденоНесколькоКонтрагентов = "";
	
	Если ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления.СпособыИдентификацииКонтрагентов.Наименование ИЛИ ПустаяСтрока(КодПоЕДРПОУ) Тогда
		
		ТекстСообщенияНайденоНесколькоКонтрагентов = " " + НСтр("ru='по наименованию:';uk='за найменуванням:'")+ " " + Наименование;
		
		Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.Наименование = &Наименование ";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	ИначеЕсли ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП Тогда
			
		ТекстСообщенияНайденоНесколькоКонтрагентов = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' по коду ЕДРПОУ: %1';uk=' за кодом ЄДРПОУ: %1'"), КодПоЕДРПОУ);
		
		Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ";
		
		Запрос.УстановитьПараметр("КодПоЕДРПОУ", КодПоЕДРПОУ);
		
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		КонтрагентСсылка = ОбменССайтамиУТ.СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КонтрагентСсылка = Выборка.Контрагент;
		СтруктураСвойстваЗаказа.Партнер = Выборка.Партнер;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru='Не удалось найти или создать контрагента!';uk='Не вдалося знайти або створити контрагента!'"));
		
		Возврат ;
		
	КонецЕсли;
	
	СтруктураСвойстваЗаказа.Контрагент = КонтрагентСсылка;
	
КонецПроцедуры

// Ищет номенклатуру по ИД, если не находит - ищет по артикулу и наименованию, если не находит - создает новую
// Параметры:
// Номенклатура. Тип - неопределено. Ссылка на найденную или новую номенклатуру
// ДанныеНоменклатуры. Тип - структура. Структура, содержащая инормацию о номенклатуре, загруженной с сайта.
//	По данным этой структуры необходимо провести поиск существующей номенклатуры или создать новую
//		Описание полей:
//				Ид - внутренний идентификатор номенклатуры
//				АртикулНоменклатуры - Артикул номенклатуры
//				НаименованиеНоменклатуры - Наименование номенклатуры
//				ЕдиницаИзмерения  - ссылка на единицу измерения товара
//				ЭтоУслуга - признак услуги
//				СтавкаНДС - ставка НДС номенклатуры
//
// ПрикладныеПараметры - структура,содержащая параметры прикладного решения, добавленные в узел плана обмена
// ОписаниеОшибки - текстовое представление ошибки
Процедура НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	УникальныйИдентификаторКорректен = Истина;
	
	Если ОбменССайтамиУТ.УспешноНайденТоварПоСсылке(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, УникальныйИдентификаторКорректен) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВидНоменклатуры = ?(ДанныеНоменклатуры.ЭтоУслуга, ПрикладныеПараметры.ВидНоменклатурыУслуга, ПрикладныеПараметры.ВидНоменклатурыТовар);
	
	Номенклатура = ОбменССайтамиУТ.НоменклатураПоНаименованиюИВиду(ДанныеНоменклатуры.НаименованиеНоменклатуры, ВидНоменклатуры);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницаПоКлассификатору = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдиницаИзмерения.КодБазовойЕдиницы) Тогда
		
		ЕдиницаПоКлассификатору = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ДанныеНоменклатуры.ЕдиницаИзмерения.КодБазовойЕдиницы);
		
	КонецЕсли;
	
	Если ЕдиницаПоКлассификатору = Неопределено 
		И ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеБазовойЕдиницы) Тогда
		
		ЕдиницаПоКлассификатору = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеБазовойЕдиницы, Истина);
		
	КонецЕсли;
	
	Если ЕдиницаПоКлассификатору = Неопределено Тогда
		ЕдиницаПоКлассификатору = ПрикладныеПараметры.ЕдиницаИзмеренияНовойНоменклатуры;
	КонецЕсли;
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.ВидНоменклатуры    = ВидНоменклатуры;

	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(НоменклатураОбъект);
	
	НоменклатураОбъект.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(ЕдиницаПоКлассификатору), ЕдиницаПоКлассификатору, НоменклатураОбъект.ЕдиницаИзмерения);
	НоменклатураОбъект.Родитель           = ПрикладныеПараметры.ГруппаДляНовойНоменклатуры;
	НоменклатураОбъект.Наименование       = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	НоменклатураОбъект.НаименованиеПолное = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	
	СтавкаНДС = ОбменССайтамиУТ.СтавкаНДСПоЗначениюПриЗагрузке(ДанныеНоменклатуры.СтавкаНДС);
	НоменклатураОбъект.СтавкаНДС          = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, НоменклатураОбъект.СтавкаНДС);
	
	Если УникальныйИдентификаторКорректен Тогда
		НоменклатураОбъект.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеНоменклатуры.Ид)));
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	Номенклатура = НоменклатураОбъект.Ссылка;
	
КонецПроцедуры

// Ищет единицу измерения товара по ее коду
Процедура НайтиСоздатьУпаковку(КодУпаковки, Упаковка) Экспорт
	
	Упаковка = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(КодУпаковки);
	
КонецПроцедуры


// Создает новый элемент справочника являющегося в прикладном решении точками самовывоза, например, Склады, Магазины
// Параметры:
// ДанныеТочкиСамовывоза - Струтура.
//		Описание полей:
//			Ид - Строка, идентификатор точки самовывоза
//			Адрес - Структура с полями "ТипАдреса" и "ЗначениеАдреса"
//			Контакты- Структура с полями "ТипКонтакта" и "ЗначениеКонтакта"
//			Наименование - Строка, наименнование точки самовывоза
//
// ТочкаСамовывоза - ссылка на элемент справочника,который в прикладном решении является точкой самовывоза
Процедура СоздатьТочкуСамовывоза(ДанныеТочки, ТочкаСамовывоза) Экспорт
	
	
КонецПроцедуры

// Вычисляет значение ставки НДС по переданному элементу справочника или перечисления
// Параметры:
// СтавкаНДС. Тип - ПеречислениеСсылка, СправочникССылка, Ставка НДС, выраженная элементом объекта метаданных прикладного решения
// ЗначениеСтавкиНДС. Тип - Число. Значение ставки НДС выраженное числом
Процедура ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС, ЗначениеСтавкиНДС) Экспорт
	
	ЗначениеСтавкиНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(СтавкаНДС);
	
КонецПроцедуры

// Записывает в регистр сведений дополнительные сведения о заказе
// Параметры:
// ОбновленыСвойстваЗаказа.Тип - булево. Признак успешного выпонения процедуры
// ЗаказПокупателя. Тип - ДокументСсылка. Ссылка на документ ЗаказПокупателя
// СвойстваЗаказа. Тип - Соотвествие. Строковое представление параметров заказа и их значений
// ОписаниеОшибки. Тип - Строка. Текстовое представление ошибки
Процедура ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
													  ЗаказПокупателя,
														СвойстваЗаказа,
														ОписаниеОшибки) Экспорт
	
КонецПроцедуры

// В зависимости от настроек прикладного решения устанавливает флаг использования характеристик
//
// Пример:ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики")
Процедура УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// Меняет статус заказа на "Отменен".
//	Параметры:
//		ПрикладныеПараметры - Структура, параметры прикладного решения, добавленные в форму узла плана обмена
//		ДокументСсылка - Ссылка на документ Заказ, у которого нужно поменять статус.
Процедура ОтменитьЗаказ(ПрикладныеПараметры, ДокументСсылка) Экспорт
	
	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ОбъектЗаказ = ДокументСсылка.ПолучитьОбъект();
	ЕстьИзменения = Ложь;
	Для Каждого СтрокаТовары Из ОбъектЗаказ.Товары Цикл
		Если НЕ СтрокаТовары.Отменено Тогда
			СтрокаТовары.Отменено = Истина;
			Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
				СтрокаТовары.ПричинаОтмены = ПрикладныеПараметры.ПричинаОтменыЗаказа;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ОбъектЗаказ.ЗаполнитьЭтапыГрафикаОплаты();
		ОбъектЗаказ.Записать(?(ОбъектЗаказ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет была ли оплата по заказу
//Параметры: 
//		ЗаказОплачен. Тип - Булево. Признак того, что заказ был оплачен
//					 Данные признак влияет на статус оплаты закаща на сайте
//		СтатусЗаказа. Тип - ПеречислениеСсылка. Статус заказа в прикладном решении
//		ДанныеДокументаКОплатеОстаток. Тип - Число. Не оплаченный остаток денег по заказу
Процедура ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, СтатусЗаказа, 
	                                    ДанныеДокументаКОплатеОстаток) Экспорт
	
	ЗаказОплачен = НЕ (ДанныеДокументаКОплатеОстаток > 0);
	
КонецПроцедуры

// Проверяет текущее состояние заказа
//	Параметры:
// ЗаказВРаботе. Тип - Булево. Признак того, что заказ был "обработан" в прикладном решении (т.е. поменял свой статус после щагрузки с сайта)
//								Данные признак влияет на статус заказа на сайте
// ДанныеДокументаСостояниеЗаказа. Тип - ПеречислениеССылка, СправочникССылка. Статус заказа, который он может принимать в прикладном решении
Процедура ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокументаСостояниеЗаказа) Экспорт
	
	ЗаказВРаботе = ДанныеДокументаСостояниеЗаказа <> Перечисления.СостоянияЗаказовКлиентов.Закрыт;
	
КонецПроцедуры

// Определяет была ли отгрузка товара по заказу
// Параметры:
//	ЗаказОтгружен. Тип - Булево. Признак того, что товар по заказу был отгружен. Влияет на статус отгрузки заказа на сайте
//	ДанныеДокументаСтатусЗаказа. Тип - ПеречислениеСсылка, СпрвочникСсылка. Статус, который может иметь заказ в прикладном решени
//	ДанныеДокументаКОтгрузкеОстаток. Тип - Число. Неотгруженный остаток по заказу (заказно было 7, а отгрузили 5)
Процедура ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокументаСтатусЗаказа,
	                                      ДанныеДокументаКОтгрузкеОстаток) Экспорт
	
	ЗаказОтгружен =  НЕ (ДанныеДокументаКОтгрузкеОстаток > 0);
	
КонецПроцедуры

// Определяем нужно ли считать НДС
// Паратетры:
// СчитатьНДС.Тип- Булево. Признак о небходимости считать НДС по заказу
// ВыборкаДокументовНалогообложениеНДС. Тип - ПеречислениеСсылка, СправочникСсылка. 
Процедура ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ВыборкаДокументовНалогообложениеНДС) Экспорт
	
	СчитатьНДС = (ВыборкаДокументовНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеДокументов(СоответствиеДокументов) Экспорт
	
	СоответствиеДокументов.Вставить("ЗаказПокупателя","ЗаказКлиента");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры", "ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("НаборыДополнительныхРеквизитовИСведений", "НаборыДополнительныхРеквизитовИСведений");
	СоответствиеСправочников.Вставить("ВидыЦен", "ВидыЦен");
	СоответствиеСправочников.Вставить("НоменклатураПрисоединенныеФайлы", "НоменклатураПрисоединенныеФайлы");
	СоответствиеСправочников.Вставить("Склады", "Склады");
	СоответствиеСправочников.Вставить("ТочкиСамовывоза", "Склады");
	СоответствиеСправочников.Вставить("Организации", "Организации");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеПВХ(СоответствиеПВХ) Экспорт
	
	СоответствиеПВХ.Вставить("ДополнительныеРеквизитыИСведения", "ДополнительныеРеквизитыИСведения");
	
КонецПроцедуры

// Заполняет соотвесветсиве форм библотеки и прикадного решения
// Параметры:
// СоответствиеФорм. Тип - соответсвие. Используется для переопределения форм, вызываемых библиотекой
Процедура ПолучитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	СоответствиеФорм.Вставить("ФормаВыбораТочекСамовывоза","Справочник.Склады.ФормаВыбора");
	
КонецПроцедуры

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие:
//  ИспользоватьПрокси - использовать ли прокси-сервер
//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//  Сервер       - адрес прокси-сервера
//  Порт         - порт прокси-сервера
//  Пользователь - имя пользователя для авторизации на прокси-сервере
//  Пароль       - пароль пользователя
//
Функция ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
#Если Клиент Тогда
	НастройкаПроксиСервера = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
#Иначе
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
#КонецЕсли
	
КонецФункции

// Определяет номер и дату заказа на сайте
//
//Параметры:
// ДокСсылка - Ссылка на документ Заказ
// ПрикладныеПараметры .Тип - Структура.Параметры прикладного рещения, размещенные в форме узла плана обмена
//
//Возращаемое значение:
// РеквизитыЗаказаНаСайте. Тип - структура. Структура, содержащая реквизиты заказа
// Описание полей:
// НомерЗаказаНаСайте. Тип - Строка. Номер заказа на сайте
// ДатаЗаказаНаСайте.Тип - Дата. Дата заказа на сайте
//
Функция РеквизитыЗаказаНаСайте(Заказ, УзелОбмена) Экспорт
	
	ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте = 
	           ОбменССайтомПовтИсп.РеквизитПрикладногоРешения(УзелОбмена, "ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте");
	ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте = 
	           ОбменССайтомПовтИсп.РеквизитПрикладногоРешения(УзелОбмена, "ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение,
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Ссылка = &ЗаказКлиента
	|	И (ЗаказКлиентаДополнительныеРеквизиты.Свойство = &СвойствоНомерЗаказа
	|			ИЛИ ЗаказКлиентаДополнительныеРеквизиты.Свойство = &СвойствоДатаЗаказа)";
	
	Запрос.УстановитьПараметр("СвойствоНомерЗаказа", ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте);
	Запрос.УстановитьПараметр("СвойствоДатаЗаказа", ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте);
	Запрос.УстановитьПараметр("ЗаказКлиента", Заказ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерЗаказаНаСайте", "");
	СтруктураВозврата.Вставить("ДатаЗаказаНаСайте", Дата(1,1,1));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Свойство = ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте Тогда
			СтруктураВозврата.НомерЗаказаНаСайте = Выборка.Значение;
		КонецЕсли;
		Если Выборка.Свойство = ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте Тогда
			СтруктураВозврата.ДатаЗаказаНаСайте = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заполняет массив реквизитам формы, значение которых должно быть сохранено
//
Процедура ЗаполнитьПрикладныеРеквизитыФормыУзлаОбменСсайтом(МассивРеквизитов) Экспорт
	
	РеквизитыТоваров = ОбменССайтамиУТ.РеквизитыОбменаТоварами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыТоваров);
	
	РеквизитыЗаказов = ОбменССайтамиУТ.РеквизитыОбменаЗаказами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыЗаказов);
	
КонецПроцедуры

// Корректирует проверяемые при записи реквизиты формы узла 
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма плана узла обмена, в которой выполняется запись.
//  ПроверяемыеРеквизиты  - Массив - массив имен проверяемых на заполненность реквизитов формы.
//  ОбменТоварами         - Булево - признак того, что будет выполняться обмен товарами.
//  ОбменЗаказами         - Булево - признак того, что будет выполняться обмен заказами.
//
Процедура СкоректироватьПроверяемыеРеквизитыФормыУзла(Форма, ПроверяемыеРеквизиты, ОбменТоварами, ОбменЗаказами) Экспорт
	
	Если Не ОбменЗаказами Тогда
		НепроверяемыеРеквизиты = ОбменССайтамиУТ.РеквизитыОбменаЗаказами();
	Иначе
		
		НепроверяемыеРеквизиты = Новый Массив;
		
		Если Не Форма.ИспользуютсяГруппыДоступаПартнеров 
			Или (НЕ Форма.ИспользоватьПартнеровКакКонтрагентов И НЕ Форма.СоздаватьПартнеровДляНовыхКонтрагентов) Тогда
			НепроверяемыеРеквизиты.Добавить("ГруппаДоступаПартнеров");
		КонецЕсли;
		
	КонецЕсли;
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

// Добавляет в произвольные поля в стукруту ПрикладныеПараметры
// Параметры
//   ПрикладныеПараметры - структура, содержащая параметры прикладнного решения, необходимые для обмена с сайтом
//
Процедура ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

// В данной процедуре можно изменить условное оформление формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом
//
Процедура УстановитьУсловноеОформлениеФормаУзлаОбмена(Форма) Экспорт
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ГруппаДоступаПартнеров.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуютсяГруппыДоступаПартнеров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ГруппаОтбораИ = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПартнеровКакКонтрагентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоздаватьПартнеровДляНовыхКонтрагентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// В данной процедуре можно изменить видимость элементов формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом
//
Процедура УстановитьВидимостьЭлементовФормыУзла(Форма) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти




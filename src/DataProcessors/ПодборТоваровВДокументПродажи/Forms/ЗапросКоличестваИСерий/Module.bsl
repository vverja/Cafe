#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Действие = "ВсеДействия";
	РежимОтображенияСерий = "ТолькоОстатки";
	
	Дата                      = Параметры.Дата;
	Склад                     = Параметры.Склад;
	Номенклатура              = Параметры.Номенклатура;
	Характеристика            = Параметры.Характеристика;
	Упаковка 				  = Параметры.Упаковка;
	ТипНоменклатуры           = Параметры.ТипНоменклатуры;
	
	ПодборТоваров             = Параметры.ПодборТоваров;
	Если Не ПодборТоваров Тогда
		ПодборВариантовОбеспечения = Истина;
	Иначе
		ПодборВариантовОбеспечения = Параметры.ПодборВариантовОбеспечения;
	КонецЕсли;
	Параметры.Свойство("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПодборСерий               = ЗначениеЗаполнено(ПараметрыУказанияСерий);
	АдресТаблицыПодобраноРанее= Параметры.АдресТаблицыПодобраноРанее;
	Подразделение             = Параметры.Подразделение;
	Назначение                = Параметры.Назначение;
	КоличествоОформлено       = Параметры.КоличествоОформлено;
	Регистратор               = Параметры.Регистратор;
	Параметры.Свойство("РазборкаНаКомплектующие", РазборкаНаКомплектующие);
	
	РедактироватьВидЦены      = Параметры.РедактироватьВидЦены;
	
	БезОтбораПоВключениюНДСВЦену = Неопределено;
	Параметры.Свойство("БезОтбораПоВключениюНДСВЦену", БезОтбораПоВключениюНДСВЦену);
	
	Параметры.Свойство("СкрыватьВариантОбеспеченияОтгрузить",
		СкрыватьВариантОбеспеченияОтгрузить);
	Параметры.Свойство("СкрыватьВариантОбеспеченияОтгрузитьОбособленно",
		СкрыватьВариантОбеспеченияОтгрузитьОбособленно);
	Параметры.Свойство("ПроизводитсяВПроцессе", ПроизводитсяВПроцессе);
	ВыборСерии = Ложь;
	Параметры.Свойство("ВыборСерии", ВыборСерии);
	Если ВыборСерии = Неопределено Тогда
		ВыборСерии = Ложь;
	КонецЕсли;
	Параметры.Свойство("ТолькоОбособленно", ТолькоОбособленно);
	
	//Установка заголовка формы
	Если ПодборТоваров Тогда
		Если Параметры.СкрытьЦену Тогда
			ЭтаФорма.Заголовок         = НСтр("ru='Ввод количества';uk='Введення кількості'");
		КонецЕсли;
	ИначеЕсли ВыборСерии Тогда
		ЭтаФорма.Заголовок         = НСтр("ru='Указание серий';uk='Зазначення серій'");
	Иначе
		ЭтаФорма.Заголовок         = НСтр("ru='Выбор действия';uk='Вибір дії'");
	КонецЕсли;
 
	//Параметры для расчета серий
	ПараметрыРасчетаРаспоряжения = Новый Структура;
	ПараметрыРасчетаРаспоряжения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыРасчетаРаспоряжения.Вставить("ЗначенияПолейДляОпределенияРаспоряжения", Новый Массив);
	
	Распоряжение = Обработки.ПодборСерийВДокументы.РаспоряжениеПоПараметрамФормы(ПараметрыРасчетаРаспоряжения);

	//Параметры номенклатуры
	НаименованиеТовара = "" + Параметры.Номенклатура +
		?(ЗначениеЗаполнено(Параметры.Характеристика),
		" (" + Параметры.Характеристика + ")",
		"");
	
	СтруктураНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура,
		"ЕдиницаИзмерения, ИспользоватьУпаковки, ВидНоменклатуры");
	ВидНоменклатуры = СтруктураНоменклатуры.ВидНоменклатуры;
	
	//Настройка полей колечиства и упаковок
	Если Упаковка.Пустая()
		И СтруктураНоменклатуры.ИспользоватьУпаковки Тогда 
		Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(Номенклатура);
	КонецЕсли;
	Если СтруктураНоменклатуры.ИспользоватьУпаковки Тогда
		Элементы.Упаковка.ПодсказкаВвода = СтруктураНоменклатуры.ЕдиницаИзмерения;
	КонецЕсли;
	ЕдиницаИзмеренияНоменклатуры = СтруктураНоменклатуры.ЕдиницаИзмерения;
	СтараяУпаковка               = Упаковка;
	КоэффициентУпаковки          = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	КоличествоУпаковок           = 1;
	
	СтруктураИзмеренийУказанияВДокументах = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ПлощадьМожноУказыватьВДокументах, ОбъемМожноУказыватьВДокументах, ВесМожноУказыватьВДокументах, ДлинаМожноУказыватьВДокументах");
	Если СтруктураИзмеренийУказанияВДокументах.ПлощадьМожноУказыватьВДокументах
		Или СтруктураИзмеренийУказанияВДокументах.ВесМожноУказыватьВДокументах
		Или СтруктураИзмеренийУказанияВДокументах.ОбъемМожноУказыватьВДокументах
		Или СтруктураИзмеренийУказанияВДокументах.ДлинаМожноУказыватьВДокументах
		Или ЗначениеЗаполнено(Номенклатура.НаборУпаковок) Тогда
		
		Элементы.Упаковка.Видимость = Истина;
		Элементы.ЕдиницаИзмерения.Видимость = Ложь;
		Элементы.Упаковка.ПодсказкаВвода = СтруктураНоменклатуры.ЕдиницаИзмерения;
	Иначе
		Элементы.Упаковка.Видимость = Ложь;
		Элементы.ЕдиницаИзмерения.Видимость = Истина;
	КонецЕсли;
	
	//Настройки склада
	Если Параметры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Если Не Параметры.Свойство("Склады")
		Или Параметры.Склады = Неопределено
		Или Параметры.Склады.Количество() = 0 Тогда
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
		|	И Не Склады.ЭтоГруппа");
		ЗапросПоСкладам.УстановитьПараметр("Склад", Склад);
		Склады.ЗагрузитьЗначения(ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
	Иначе
		Склады.ЗагрузитьЗначения(Параметры.Склады);
	КонецЕсли;
		
	//Настройки ценовых параметров
	Если ПодборТоваров Тогда
		ВидЦены                   = Параметры.ВидЦены;
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			ВидЦеныПредставление  = ВидЦены;
		Иначе
			ВидЦеныПредставление  = НСтр("ru='<произвольная>';uk='<довільна>'");
		КонецЕсли;
		Цена                      = Параметры.Цена;
		Валюта                    = Параметры.Валюта;
		ЦенаВключаетНДС           = Параметры.ЦенаВключаетНДС;
		Соглашение                = Параметры.Соглашение;
		
		Если Параметры.СкрытьЦену Тогда
			Элементы.Цена.Видимость    = Ложь;
			Элементы.ВидЦеныПредставление.Видимость    = Ложь;
			Элементы.Валюта.Видимость  = Ложь;
			ЭтаФорма.АвтоЗаголовок     = Ложь;
			ЭтаФорма.Заголовок         = НСтр("ru='Ввод количества';uk='Введення кількості'");
		КонецЕсли;
		
		Элементы.Цена.Доступность = Параметры.РедактироватьВидЦены;
		
		ЗаполнитьСписокЦен();
		
		// Настроить видимость и установить значения реквизитов для редактирования ручных скидок, наценок.
		СуммаДокумента = КоличествоУпаковок * Цена;
		
		Если Не Параметры.ИспользоватьРучныеСкидкиВПродажах Или Параметры.СкрыватьРучныеСкидки Тогда
			
			Элементы.ГруппаПараметрыСкидкиНаценки.Видимость = Ложь;
			
		Иначе
			
			// Установить свойства элементов относящихся к скидкам (наценкам).
			ИспользоватьОграниченияРучныхСкидок = (ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
				Или ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям"));
			
			Если ИспользоватьОграниченияРучныхСкидок Тогда
				
				СтруктураТаблиц = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
				
				МаксимальныйПроцентСкидки  = СтруктураТаблиц.Ограничения[0].МаксимальныйПроцентРучнойСкидки;
				МаксимальныйПроцентНаценки = СтруктураТаблиц.Ограничения[0].МаксимальныйПроцентРучнойНаценки;
				
				Если МаксимальныйПроцентСкидки > 0 Тогда
					Элементы.ПроцентРучнойСкидкиНаценки.КнопкаСпискаВыбора = Истина;
					Элементы.ПроцентРучнойСкидкиНаценки.СписокВыбора.Добавить(МаксимальныйПроцентСкидки,
						Формат(МаксимальныйПроцентСкидки, "ЧЦ=15; ЧДЦ=2"));
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.НадписьМаксимальнаяРучнаяСкидка.Видимость  = ИспользоватьОграниченияРучныхСкидок;
			Элементы.НадписьМаксимальнаяРучнаяСкидка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%2 Макс. скидка: %1%2';uk='%2 Макс. знижка: %1%2'"),
				МаксимальныйПроцентСкидки,
				"%");
			
			Элементы.НадписьМаксимальнаяРучнаяНаценка.Видимость = ИспользоватьОграниченияРучныхСкидок;
			Элементы.НадписьМаксимальнаяРучнаяНаценка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%2 Макс. наценка: %1%2';uk='%2 Макс. націнка: %1%2'"),
				МаксимальныйПроцентНаценки,
				"%");
			
			Элементы.НадписьМаксимальнаяСкидкаНеОграничена.Видимость   = Не ИспользоватьОграниченияРучныхСкидок;
			Элементы.НадписьМаксимальнаяНаценкаНеОграничена.Видимость  = Не ИспользоватьОграниченияРучныхСкидок;
			
			// Установить варианты выбора ручной скидки (наценки).
			Элементы.ВариантПредоставления.СписокВыбора.Добавить("Скидка", НСтр("ru='Скидка';uk='Знижка'"));
			Элементы.ВариантПредоставления.СписокВыбора.Добавить("Наценка", НСтр("ru='Наценка';uk='Націнка'"));
			
			// Установить значение варианта предоставления при открытии.
			ВариантПредоставления = "Скидка"; // Скидка
			Элементы.ВариантыПредоставления.ТекущаяСтраница = Элементы.ВариантыПредоставления.ПодчиненныеЭлементы.Скидка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Настройки по типу номенклатуры
	ЭтоНабор = Параметры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор;
	Если ЭтоНабор Тогда
		РассчитатьПараметрыНабора();
		Элементы.СоставНабора.Видимость = Истина;
		Элементы.ГруппаВНаличииДоступноПоНабору.Видимость = Истина;
		Элементы.ГруппаВНаличииДоступноПоНабору.Видимость = Истина;
		ТекущаяНоменклатура = СоставНабора[0].Номенклатура;
		ТекущаяХарактеристика = СоставНабора[0].Характеристика;
		ТекущийТипНоменклатуры = СоставНабора[0].ТипНоменклатуры;
		ТекущийВидНоменклатуры = СоставНабора[0].ВидНоменклатуры;
	Иначе
		ТекущаяНоменклатура = Номенклатура;
		ТекущаяХарактеристика = Характеристика;
		ТекущийТипНоменклатуры = ТипНоменклатуры;
		ТекущийВидНоменклатуры = ВидНоменклатуры
	КонецЕсли;
	
	//Настройки варианта открытия формы из подбора/документа
	Если Не ПодборТоваров Тогда
		Элементы.ГруппаКоличество.Видимость = Ложь;
		Элементы.ГруппаЦеновыеПараметры.Видимость = Ложь;
		Элементы.НадписьПодобратьПодобрано.Видимость = Ложь;
		Элементы.ДекорацияОтступ3.Видимость = Ложь;
		Элементы.ДекорацияОтступ4.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПодборВариантовОбеспечения Тогда
		Элементы.Действие.Видимость = Ложь;
		Элементы.НадписьОбеспечено.Видимость = Ложь;
		Элементы.ДекорацияОтступ5.Видимость = Ложь;
	КонецЕсли;
		
	//Получение доступных остатков по действиям
	Отбор = Новый Структура("Номенклатура, Характеристика, Склад, Подразделение, Назначение, ТипНоменклатуры");
	ЗаполнитьЗначенияСвойств(Отбор, Параметры);
	Отбор.Номенклатура = ТекущаяНоменклатура;
	Отбор.Характеристика = ТекущаяХарактеристика;
	Отбор.ТипНоменклатуры = ТекущийТипНоменклатуры;
	АдресаВХранилище = Новый Структура("АдресКорректировки, АдресТаблицыПодобраноРанее"); // первый параметр передается из формы заказа, второй из формы подбора
	ЗаполнитьЗначенияСвойств(АдресаВХранилище, Параметры);
	
	ПолучитьТаблицуДоступныхДействий(Отбор, АдресаВХранилище, Элементы.НадписьОбеспечено.Заголовок);
	Элементы.НадписьОбеспечено.Заголовок = СтрЗаменить(Элементы.НадписьОбеспечено.Заголовок,
		"ЕдиницаИзмерения",
		ТекущаяЕдиницаИзмерения());
	
	Если ПодборВариантовОбеспечения Тогда
		ОбновитьСписокВыбораДоступныхДействий();
	КонецЕсли;
		
	// Доп. реквизиты таб. части серий
	Если ПодборСерий Тогда
		СерииИспользуются = Ложь;
		Для Каждого Строка Из ТаблицаДоступныхДействий Цикл
			Если Строка.СтатусУказанияСерий <> 0 Тогда
				СерииИспользуются = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СерииИспользуются И Не ЭтоНабор Тогда
			УправлениеСвойствамиУТ.ДобавитьКолонкиДополнительныхРеквизитов(
				Обработки.ПодборСерийВДокументы.ВладелецСвойствСерий(ВидНоменклатуры),
				ЭтаФорма,
				"ОстаткиСерий",
				"ОстаткиСерий",
				"ОстаткиСерийСвободныйОстаток",
				Истина);
			УправлениеСвойствамиУТ.ЗаполнитьКолонкиДополнительныхРеквизитов(
				ЭтаФорма,
				"ОстаткиСерий",
				"Серия");
				
			УправлениеСвойствамиУТ.ДобавитьКолонкиДополнительныхРеквизитов(
				Обработки.ПодборСерийВДокументы.ВладелецСвойствСерий(ВидНоменклатуры),
				ЭтаФорма,
				"ОстаткиСерийТекущие",
				"ОстаткиСерийТекущие",
				"ОстаткиСерийТекущиеСвободныйОстаток",
				Истина);
			УправлениеСвойствамиУТ.ЗаполнитьКолонкиДополнительныхРеквизитов(
				ЭтаФорма,
				"ОстаткиСерийТекущие",
				"Серия");
			КонецЕсли;
	КонецЕсли;
	
	// Выделение строк из заказа
	Если Не ПодборТоваров Тогда
		
		ТекущийСклад = Параметры.СкладВТЧ;
		ТекущийВариантОбеспечения = Параметры.ВариантОбеспечения;
		
		Отбор = Новый Структура;
		Если ЗначениеЗаполнено(Параметры.СкладВТЧ) Тогда
			Отбор.Вставить("Склад", Параметры.СкладВТЧ);
		КонецЕсли;
		Отбор.Вставить("ВариантОбеспечения", Параметры.ВариантОбеспечения);
		
		Если ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда
			Отбор.Вставить("ДатаОтгрузки", Параметры.ТекущийВариант.ДатаДоступности);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаДоступныхДействий.НайтиСтроки(Отбор);
		
		Если Отбор.Свойство("ДатаОтгрузки") Тогда
			Отбор.Удалить("ДатаОтгрузки");
		КонецЕсли;
		
		Если НайденныеСтроки.Количество()=0 Тогда
			Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Требуется);
			НайденныеСтроки = ТаблицаДоступныхДействий.НайтиСтроки(Отбор);
		КонецЕсли;
		Если НайденныеСтроки.Количество()=0 Тогда
			Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Обособленно);
			НайденныеСтроки = ТаблицаДоступныхДействий.НайтиСтроки(Отбор);
		КонецЕсли;
		
		//Если Склад не достпен по РЛС, то подберем любой доступный склад.
		Если НайденныеСтроки.Количество()=0 Тогда
			Если Параметры.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
				Или Параметры.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Обособленно);
			Иначе
				Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Требуется);
			КонецЕсли;
			Отбор.Удалить("Склад");
			НайденныеСтроки = ТаблицаДоступныхДействий.НайтиСтроки(Отбор);
		КонецЕсли;
		
		СтрокаЗаказа = НайденныеСтроки[0];
		СтрокаЗаказа.СтрокаЗаказа = 1;
		СтрокаЗаказа.Количество = Параметры.Количество;
		СтрокаЗаказа.ПроизводитсяВПроцессе = ПроизводитсяВПроцессе;
		
		ВариантПолучениеДанныхИзРегистров = Обработки.ПодборСерийВДокументы.ВариантПолучениеДанныхИзРегистровПоПараметрамФормы(ПараметрыУказанияСерий,
			Распоряжение,
			ТекущийСклад,
			ВидНоменклатуры);
		Если ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить 
			Или ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
			Или ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			ВыполнитьЗапросЗаполненияТаблицыОстатков();
			
			Если РазборкаНаКомплектующие Тогда
				Для Каждого СтруктураСерия Из Параметры.Серия Цикл
					
					Отбор.Вставить("Серия", СтруктураСерия.Серия);
					Отбор.Вставить("ВариантОбеспечения", ТекущийВариантОбеспечения);
					НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество()>0 Тогда
						НайденныеСтроки[0].Количество = СтруктураСерия.Количество;
						НайденныеСтроки[0].СвободныйОстаток = НайденныеСтроки[0].СвободныйОстаток - СтруктураСерия.Количество;
						НайденныеСтроки[0].СтрокаЗаказа =1;
						СтрокаЗаказа.КоличествоСерий = СтрокаЗаказа.КоличествоСерий + СтруктураСерия.Количество;
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Отбор.Вставить("Серия", Параметры.Серия);
				Отбор.Вставить("ВариантОбеспечения", ТекущийВариантОбеспечения);
				
				НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество()>0 Тогда
					НайденныеСтроки[0].Количество = Параметры.Количество;
					НайденныеСтроки[0].СвободныйОстаток = НайденныеСтроки[0].СвободныйОстаток-Параметры.Количество;
					НайденныеСтроки[0].СтрокаЗаказа =1;
					СтрокаЗаказа.КоличествоСерий = Параметры.Количество;
				КонецЕсли;
					
			КонецЕсли;
			ПересчитатьСтатусУказанияСерий(СтрокаЗаказа,
				ПараметрыУказанияСерий,
				СтрокаЗаказа.Количество,
				СтрокаЗаказа.КоличествоСерий);
		КонецЕсли;
	КонецЕсли;
	
	//Вывод даннах на форму
	РасчитатьДоступноеКоличество();
	УстановитьОтборПоДействиюИТовару();
	
	
	Если ПодборТоваров Тогда
		ОбновитьКоличество();
	Иначе
		Количество = Параметры.Количество;
		ОбновитьПодобранноеКоличесто();
		ОбновитьКоличествоУпаковок();
	КонецЕсли;
	
	Если Не ПодборТоваров Тогда
		СтрокаЗаказа = ТаблицаДоступныхДействийТекущая.НайтиСтроки(Новый Структура("СтрокаЗаказа",1))[0];
		ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая = СтрокаЗаказа.ПолучитьИдентификатор();
		Элементы.ТаблицаДоступныхДействийТекущая.ТекущаяСтрока = ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая;
		
		Если ВыборСерии Тогда
			КУказаниюСерийНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ЕдинственныйСклад И Не ЭтоНабор Тогда
		Если ТаблицаДоступныхДействийТекущая[0].СтатусУказанияСерий <> 0
			И ЗначениеЗаполнено(ТаблицаДоступныхДействийТекущая[0].ВариантОбеспечения) Тогда
			КУказаниюСерийНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьКоличествоЕдиницХранения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	УпаковкаПриИзмененииНаСервере(СтараяУпаковка);
	
	СтараяУпаковка = Упаковка;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	УпаковкаПриИзмененииНаСервере(СтараяУпаковка);
	
	СтараяУпаковка = Упаковка;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		
		ВидЦены = Неопределено;
		ВидЦеныПредставление = НСтр("ru='<произвольная>';uk='<довільна>'");
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ВидЦены = ВыбранноеЗначение;
		ВидЦеныПредставление = ВыбранноеЗначение;
		
		Для Каждого Строка Из ВидЦеныЦена Цикл
			Если Строка.ВидЦены = ВыбранноеЗначение Тогда
				Цена = Строка.Цена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЭтоНабор Тогда
		ОбновитьЦеныКомплектующих();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидЦены = Неопределено;
	ВидЦеныПредставление = НСтр("ru='<произвольная>';uk='<довільна>'");
	Цена = Число(Текст);
	
	Если ЭтоНабор Тогда
		ОбновитьЦеныКомплектующих();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПредоставленияПриИзменении(Элемент)
	
	Элементы.ПроцентРучнойСкидкиНаценки.КнопкаСпискаВыбора = Ложь;
	Элементы.ПроцентРучнойСкидкиНаценки.СписокВыбора.Очистить();
	
	Если ВариантПредоставления = "Скидка" Тогда
		Элементы.ВариантыПредоставления.ТекущаяСтраница = Элементы.ВариантыПредоставления.ПодчиненныеЭлементы.Скидка;
		Если МаксимальныйПроцентСкидки > 0 Тогда
			Элементы.ПроцентРучнойСкидкиНаценки.КнопкаСпискаВыбора = Истина;
			Элементы.ПроцентРучнойСкидкиНаценки.СписокВыбора.Добавить(МаксимальныйПроцентСкидки, Формат(МаксимальныйПроцентСкидки, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли;
	Иначе
		Элементы.ВариантыПредоставления.ТекущаяСтраница = Элементы.ВариантыПредоставления.ПодчиненныеЭлементы.Наценка;
		Если МаксимальныйПроцентНаценки > 0 Тогда
			Элементы.ПроцентРучнойСкидкиНаценки.КнопкаСпискаВыбора = Истина;
			Элементы.ПроцентРучнойСкидкиНаценки.СписокВыбора.Добавить(МаксимальныйПроцентНаценки, Формат(МаксимальныйПроцентНаценки, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ОбновитьКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ОбновитьКоличествоУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПриИзменении(Элемент)
	КУказаниюСерийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриИзменении(Элемент)
	УстановитьОтборПоДействиюИТовару();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицаТаблицаДоступныхДействийТекущая

&НаКлиенте
Процедура ТаблицаДоступныхДействийТекущаяКоличествоПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПриИзмененииПодобранногоКоличестваНаСервере(Элементы.ТаблицаДоступныхДействийТекущая.ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхДействийТекущаяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаДоступныхДействийТекущаяСтатусУказанияСерий"
		И Элементы.ТаблицаДоступныхДействийТекущая.ТекущиеДанные.СтатусУказанияСерий <>0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ТаблицаДоступныхДействийТекущая.ТекущиеДанные;
		ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая = ТекущиеДанные.ПолучитьИдентификатор();
		ТекущийСклад = ТекущиеДанные.Склад;
		ТекущийВариантОбеспечения = ТекущиеДанные.ВариантОбеспечения;
		
		КУказаниюСерийНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхДействийТекущаяПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаДоступныхДействийТекущаяПодобратьКоличество" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ПрекратитьПодбор Тогда
			ПрекратитьПодбор = Ложь;
			Элемент.ТекущийЭлемент = Элементы.ТаблицаДоступныхДействийТекущаяКоличество;
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Элементы.ТаблицаДоступныхДействийТекущая.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаДоступныхДействийТекущаяПодобратьКоличество(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицаОстаткиСерийТекущие

&НаКлиенте
Процедура ОстаткиСерийТекущиеКоличествоПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ОстаткиСерийТекущиеКоличествоПриИзмененииНаСервере(Элементы.ОстаткиСерийТекущие.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицаСоставНабора

&НаКлиенте
Процедура СоставНабораПриАктивизацииСтроки(Элемент)
	
	ИмяСобытия = "Обработка.ПодборТоваровВДокументПродажи.ЗапросКоличестваИСерий.Событие.СоставНабораПриАктивизацииСтроки";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ИмяСобытия);

	Если Элементы.СоставНабора.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНабора = СоставНабора.НайтиПоИдентификатору(Элементы.СоставНабора.ТекущаяСтрока);
		
	Если ТекущаяНоменклатура <> СтрокаНабора.Номенклатура 
		Или ТекущаяХарактеристика <> СтрокаНабора.Характеристика Тогда
		
		ТекущаяНоменклатура = СтрокаНабора.Номенклатура;
		ТекущаяХарактеристика = СтрокаНабора.Характеристика;
		ТекущийВидНоменклатуры = СтрокаНабора.ВидНоменклатуры;
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Склад, Подразделение, Назначение, ТипНоменклатуры");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаНабора);
		Отбор.Склад = Склад;
		Отбор.Подразделение = Подразделение;
		Отбор.Назначение = Назначение;
		ОтобразитьИнформациюПоНоменклатуре(Отбор);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Функция СформироватьПодобранныеТовары()
	
	ПодобранныеТовары = Новый Массив;
	
	Если ЭтоНабор Тогда
		
		Для Каждого ПозицияНабора Из СоставНабора Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", ПозицияНабора.Номенклатура);
			Отбор.Вставить("Характеристика", ПозицияНабора.Характеристика);
			
			ПараметрыКомплектующей = ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующей, ПозицияНабора);
			КоэффициентУпаковкиКомплектующей = ПозицияНабора.КоэффициентУпаковки;
			
			ПараметрыКомплектующей.Цена = ПозицияНабора.Цена;
			ПараметрыКомплектующей.ВидЦены = ВидЦены;
			Если ВариантПредоставления = "Скидка" Тогда
				ПараметрыКомплектующей.ПроцентРучнойСкидки = ПроцентРучнойСкидкиНаценки;
			Иначе
				ПараметрыКомплектующей.ПроцентРучнойСкидки = -ПроцентРучнойСкидкиНаценки;
			КонецЕсли;
			
			Если Склады.Количество() = 1 Тогда
				ПараметрыКомплектующей.Вставить("Склад", Склады.Получить(0).Значение);
			КонецЕсли;
	
			Для Каждого СтрокаТовары Из ТаблицаДоступныхДействий.НайтиСтроки(Отбор) Цикл
				Если СтрокаТовары.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыТовара = ПараметрыТовара();
				ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТовары);
				ПараметрыТовара.Упаковка = ПозицияНабора.Упаковка;
				
				ПараметрыТовара.Цена = ПозицияНабора.Цена;
				ПараметрыТовара.ВидЦены = ВидЦены;
				
				Если ВариантПредоставления = "Скидка" Тогда
					ПараметрыТовара.ПроцентРучнойСкидки = ПроцентРучнойСкидкиНаценки;
				Иначе
					ПараметрыТовара.ПроцентРучнойСкидки = -ПроцентРучнойСкидкиНаценки;
				КонецЕсли;
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
				СтруктураОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
				СтруктураОтбора.Вставить("Склад", СтрокаТовары.Склад);
				СтруктураОтбора.Вставить("ВариантОбеспечения", СтрокаТовары.ВариантОбеспечения);
				СтрокиСерий = ОстаткиСерий.НайтиСтроки(СтруктураОтбора);
				
				Если СтрокиСерий.Количество()>0 Тогда
					СтрокаДобавлена = Ложь;
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Если СтрокаСерии.Количество = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаССерией = ПараметрыТовара();
						ЗаполнитьЗначенияСвойств(СтрокаССерией,ПараметрыТовара);
						СтрокаССерией.КоличествоУпаковок = СтрокаСерии.Количество/КоэффициентУпаковкиКомплектующей;
						СтрокаССерией.Количество = СтрокаСерии.Количество;
						СтрокаССерией.Серия = СтрокаСерии.Серия;
						ПодобранныеТовары.Добавить(СтрокаССерией);
						СтрокаДобавлена = Истина;
					КонецЦикла;
					
					Если Не СтрокаДобавлена Тогда
						ПараметрыТовара.КоличествоУпаковок = СтрокаТовары.Количество/КоэффициентУпаковкиКомплектующей;
						ПодобранныеТовары.Добавить(ПараметрыТовара);
					КонецЕсли;
				Иначе
					ПараметрыТовара.КоличествоУпаковок = СтрокаТовары.Количество/КоэффициентУпаковкиКомплектующей;
					ПодобранныеТовары.Добавить(ПараметрыТовара);
				КонецЕсли;
			КонецЦикла;
			
			Если ПозицияНабора.КоличествоПодобрать > ПозицияНабора.КоличествоПодобрано Тогда
				ПараметрыКомплектующей.КоличествоУпаковок = ПозицияНабора.КоличествоПодобрать - ПозицияНабора.КоличествоПодобрано;
				ПараметрыКомплектующей.Количество = ПараметрыКомплектующей.КоличествоУпаковок * КоэффициентУпаковкиКомплектующей;
				ПодобранныеТовары.Добавить(ПараметрыКомплектующей);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ОсновнаяСтрока = ПараметрыТовара();
		ЗаполнитьЗначенияСвойств(ОсновнаяСтрока, ЭтаФорма);
		ОсновнаяСтрока.ВариантОбеспечения = ТекущийВариантОбеспечения;
		Если ВариантПредоставления = "Скидка" Тогда
			ОсновнаяСтрока.ПроцентРучнойСкидки = ПроцентРучнойСкидкиНаценки;
		Иначе
			ОсновнаяСтрока.ПроцентРучнойСкидки = -ПроцентРучнойСкидкиНаценки;
		КонецЕсли;
		Если Склады.Количество()=1 Тогда
			ОсновнаяСтрока.Склад = Склады[0].Значение;
		Иначе
			ОсновнаяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из ТаблицаДоступныхДействий Цикл
			Если СтрокаТовары.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыТовара = ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТовары);
			ПараметрыТовара.Упаковка = Упаковка;
			ПараметрыТовара.ТипНоменклатуры = ТипНоменклатуры;
			ПараметрыТовара.Цена = Цена;
			ПараметрыТовара.ВидЦены = ВидЦены;
			
			Если ВариантПредоставления = "Скидка" Тогда
				ПараметрыТовара.ПроцентРучнойСкидки = ПроцентРучнойСкидкиНаценки;
			Иначе
				ПараметрыТовара.ПроцентРучнойСкидки = -ПроцентРучнойСкидкиНаценки;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
			СтруктураОтбора.Вставить("Склад", СтрокаТовары.Склад);
			СтруктураОтбора.Вставить("ВариантОбеспечения", СтрокаТовары.ВариантОбеспечения);
			СтрокиСерий = ОстаткиСерий.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиСерий.Количество()>0 Тогда
				СтрокаДобавлена = Ложь;
				Для Каждого СтрокаСерии Из СтрокиСерий Цикл
					Если СтрокаСерии.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаССерией = ПараметрыТовара();
					ЗаполнитьЗначенияСвойств(СтрокаССерией,ПараметрыТовара);
					СтрокаССерией.КоличествоУпаковок = СтрокаСерии.Количество/КоэффициентУпаковки;
					СтрокаССерией.Количество = СтрокаСерии.Количество;
					Если СтрокаСерии.СтрокаЗаказа Тогда
						ПараметрыТовара.Отгружено = КоличествоОформлено;
					КонецЕсли;
					СтрокаССерией.Серия = СтрокаСерии.Серия;
					ПодобранныеТовары.Добавить(СтрокаССерией);
					СтрокаДобавлена = Истина;
					ОсновнаяСтрока.КоличествоУпаковок = ОсновнаяСтрока.КоличествоУпаковок - СтрокаССерией.КоличествоУпаковок;
				КонецЦикла;
				
				Если Не СтрокаДобавлена Тогда
					ПараметрыТовара.КоличествоУпаковок = СтрокаТовары.Количество/КоэффициентУпаковки;
					Если СтрокаТовары.СтрокаЗаказа Тогда
						ПараметрыТовара.Отгружено = КоличествоОформлено;
					КонецЕсли;
					ПодобранныеТовары.Добавить(ПараметрыТовара);
					ОсновнаяСтрока.КоличествоУпаковок = ОсновнаяСтрока.КоличествоУпаковок - ПараметрыТовара.КоличествоУпаковок;
				КонецЕсли;
			Иначе
				ПараметрыТовара.КоличествоУпаковок = СтрокаТовары.Количество/КоэффициентУпаковки;
				Если СтрокаТовары.СтрокаЗаказа Тогда
					ПараметрыТовара.Отгружено = КоличествоОформлено;
				КонецЕсли;
				ПодобранныеТовары.Добавить(ПараметрыТовара);
				ОсновнаяСтрока.КоличествоУпаковок = ОсновнаяСтрока.КоличествоУпаковок - ПараметрыТовара.КоличествоУпаковок;
			КонецЕсли;
		КонецЦикла;
		
		Если ОсновнаяСтрока.КоличествоУпаковок > 0 Тогда
			ПодобранныеТовары.Добавить(ОсновнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	МаксимальнаяДатаОтгрузки = '00010101';
	Для Каждого Элемент Из ПодобранныеТовары Цикл
		
		Если Элемент.Отгружено = 0 Тогда
			МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, Элемент.ДатаОтгрузки);
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Структура("ПодобранныеТовары, МаксимальнаяДатаОтгрузки", ПодобранныеТовары, МаксимальнаяДатаОтгрузки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыТовара()
	
	ПараметрыТовара = Новый Структура();
	Если ЭтоНабор Тогда
		ПараметрыТовара.Вставить("НоменклатураНабора",Номенклатура);
		ПараметрыТовара.Вставить("ХарактеристикаНабора",Характеристика);
	КонецЕсли;
		
	ПараметрыТовара.Вставить("Номенклатура",Справочники.Номенклатура.ПустаяСсылка());
	ПараметрыТовара.Вставить("Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПараметрыТовара.Вставить("ТипНоменклатуры",Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	ПараметрыТовара.Вставить("Упаковка",Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ПараметрыТовара.Вставить("Цена",0);
	ПараметрыТовара.Вставить("ВидЦены",Справочники.Склады.ПустаяСсылка());
	ПараметрыТовара.Вставить("Склад",Справочники.Склады.ПустаяСсылка());
	ПараметрыТовара.Вставить("ДатаОтгрузки",Дата('00010101'));
	ПараметрыТовара.Вставить("ВариантОбеспечения",Перечисления.ВариантыОбеспечения.ПустаяСсылка());
	ПараметрыТовара.Вставить("ПроцентРучнойСкидки",0);
	ПараметрыТовара.Вставить("КоличествоУпаковок",0);
	ПараметрыТовара.Вставить("Количество",0);
	ПараметрыТовара.Вставить("Отгружено",0);
	ПараметрыТовара.Вставить("СтатусУказанияСерий",0);
	ПараметрыТовара.Вставить("Серия",Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Возврат ПараметрыТовара;
	
КонецФункции

&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если КоличествоУпаковок = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено количество';uk='Не заповнена кількість'"),,"КоличествоУпаковок",,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтраницаСерии Тогда
		ПерейтиКВыборуДействий(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СформироватьПодобранныеТовары();
	
	Если РазборкаНаКомплектующие Тогда
		ВариантыОбеспечения = Новый Соответствие;
		КоличествоСерий = 0;
		Для Каждого СтрокаТовары Из Результат.ПодобранныеТовары Цикл
			ВариантыОбеспечения.Вставить(СтрокаТовары.ВариантОбеспечения);
			Если СтрокаТовары.СтатусУказанияСерий = 14 Тогда
				КоличествоСерий = КоличествоСерий + 1;
			КонецЕсли;
		КонецЦикла;
		Если ВариантыОбеспечения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выбрано нескольно вариантов обеспечения, должно быть выбрано одно';uk='Вибрано декілька варіантів забезпечення, повинно бути вибрано одне'"),,,,Отказ);
		КонецЕсли;
		Если КоличествоСерий > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выбрано нескольно серий, должна быть выбрано одна';uk='Вибрано декілька серій, повинна бути вибрана одна'"),,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Округлить(Команда)
	
	Количество = Окр(Количество, 0, РежимОкругления.Окр15как20);
	ОбновитьКоличествоУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура КУказаниюСерий(Команда)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("Обработка.ПодборТоваровВДокументПродажи.ЗапросКоличестваИСерий.Команда.КУказаниюСерий");
	
	ТекущиеДанные = Элементы.ТаблицаДоступныхДействийТекущая.ТекущиеДанные;
	ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая = ТекущиеДанные.ПолучитьИдентификатор();
	Если ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
		ТекстСообщения = НСтр("ru='Для этого действия серии указывать не нужно.';uk='Для цієї дії серії вказувати не потрібно.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущийСклад = ТекущиеДанные.Склад;
	ТекущийВариантОбеспечения = ТекущиеДанные.ВариантОбеспечения;
	
	КУказаниюСерийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КВыборуДействий(Команда)
	
	ОчиститьСообщения();
	ПерейтиКВыборуДействий();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстаток(Команда)
	Если Не РаспределитьОстатокНаСервере() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Все количество товара распределено по сериям.';uk='Вся кількість товару розподілена по серіях.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоFEFO(Команда)
	
	Если Не ЗаполнитьПоFEFOНаСервере() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Все количество товара распределено по сериям.';uk='Вся кількість товару розподілена по серіях.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПерейтиКВыборуДействий(Отказ = Ложь)
	
	ТекущиеДанные = ТаблицаДоступныхДействийТекущая.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая);

	ВведенноеКоличествоСерий = 0;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
	Отбор.Вставить("Склад",ТекущиеДанные.Склад);
	НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаСерийТекущая Из НайденныеСтроки Цикл
		ВведенноеКоличествоСерий = ВведенноеКоличествоСерий + СтрокаСерийТекущая.Количество;
	КонецЦикла;
	
	Если Не ПодборТоваров Тогда
		
		СтрокаЗаказа = ТаблицаДоступныхДействий.НайтиСтроки(Новый Структура("СтрокаЗаказа",1))[0];
		ДопустимоеКоличествоСерий = ?(ТекущиеДанные.СтрокаЗаказа = 1, 0, СтрокаЗаказа.Количество - КоличествоОформлено) + ТекущиеДанные.Количество;
		
		Если ВведенноеКоличествоСерий > ДопустимоеКоличествоСерий Тогда
			ТекстСообщения = НСтр("ru='Введено серий больше чем требуется.';uk='Введено серій більше ніж потрібно.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Введено серий больше чем требуется. Требуется указать %1 %2';uk='Введено серій більше ніж потрібно. Потрібно вказати %1 %2'"),
				ДопустимоеКоличествоСерий,
				ЕдиницаИзмеренияНоменклатуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.СтрокаЗаказа Тогда
		ДополнитьСтрокуЗаказаКоличеством = ТекущиеДанные.Количество - ВведенноеКоличествоСерий;
		Если ДополнитьСтрокуЗаказаКоличеством<>0 Тогда
			
			Отбор = Новый Структура("СтрокаЗаказа", 1);
			НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаЗаказаСерий = НайденныеСтроки[0];
				СтрокаЗаказаСерий.Количество = СтрокаЗаказаСерий.Количество + ДополнитьСтрокуЗаказаКоличеством;
				ВведенноеКоличествоСерий = ВведенноеКоличествоСерий + ДополнитьСтрокуЗаказаКоличеством;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущиеДанные.Количество = ВведенноеКоличествоСерий;
	КонецЕсли;
	
	ТекущиеДанные.КоличествоСерий = ВведенноеКоличествоСерий;
	ПриИзмененииПодобранногоКоличестваНаСервере(ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая);
	
	Элементы.СтраницыТоварыСерии.ТекущаяСтраница = Элементы.СтраницаТовары;
	СтраницаСерии = Ложь;
	НастроитьВидимостьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентРучнойСкидкиНаценки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентРучнойСкидкиНаценки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("МаксимальныйПроцентСкидки");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьОграниченияРучныхСкидок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантПредоставления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Скидка";

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентРучнойСкидкиНаценки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентРучнойСкидкиНаценки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("МаксимальныйПроцентНаценки");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьОграниченияРучныхСкидок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантПредоставления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Наценка";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураЕдиницаИзмерения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Количество.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказаноДробноеКоличествоВБазовыхЕдиницах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяДействие.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяТипСтроки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодборВариантовОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодборВариантовОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяКоличествоДоступноТекущее.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.Доступно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокВариантовОбеспечения = Новый СписокЗначений;
	СписокВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	СписокВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
	СписокВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
	СписокВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
	СписокВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
	ОтборЭлемента.ПравоеЗначение = СписокВариантовОбеспечения;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Любое';uk='Будь-яке'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяСклад.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяТипСтроки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяДействие.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяКоличествоДоступноТекущее.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяПодобратьКоличество.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяКоличество.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяСтатусУказанияСерий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.СтрокаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиСерийТекущиеНомер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиСерийТекущиеГоденДо.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиСерийТекущиеСвободныйОстаток.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиСерийТекущие.СтрокаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяПодобратьКоличество.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.СтрокаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиСерийТекущиеСвободныйОстаток.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиСерийТекущие.РежимОтображенияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ВсеСерии";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Любое';uk='Будь-яке'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Без остатков';uk='Без залишків'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяСклад.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяТипСтроки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяДействие.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяКоличествоДоступноТекущее.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяПодобратьКоличество.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяКоличество.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДоступныхДействийТекущаяСтатусУказанияСерий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДоступныхДействийТекущая.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

КонецПроцедуры

&НаСервере
Процедура УпаковкаПриИзмененииНаСервере(СтараяУпаковка)
	
	СтарыйКоэффициентУпаковки = КоэффициентУпаковки;

	УстановитьВидимостьКоличествоЕдиницХранения();
	ОбновитьКоличество();
	
	ЗаполнитьСписокЦен();
	Если Не ЗначениеЗаполнено(ВидЦены) 
		Или Не РедактироватьВидЦены Тогда
		Цена = Цена *
			КоэффициентУпаковки /
			СтарыйКоэффициентУпаковки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЦен()
	Если РедактироватьВидЦены Тогда
		// Заполнить список выбора видов цен.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	НЕ ВидыЦен.ПометкаУдаления
		|	И ВидыЦен.ИспользоватьПриПродаже
		|	И (&БезОтбораПоВключениюНДСВЦену
		|			ИЛИ ВидыЦен.ЦенаВключаетНДС = &ЦенаВключаетНДС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсыСрезПоследних.Валюта КАК Валюта,
		|	КурсыСрезПоследних.Курс,
		|	КурсыСрезПоследних.Кратность
		|ПОМЕСТИТЬ КурсыСрезПоследних
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсыСрезПоследнихВалютаЦены.Валюта КАК Валюта,
		|	КурсыСрезПоследнихВалютаЦены.Курс,
		|	КурсыСрезПоследнихВалютаЦены.Кратность
		|ПОМЕСТИТЬ КурсыСрезПоследнихВалютаЦены
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Коэффициент
		|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И ВидЦены В
		|					(ВЫБРАТЬ
		|						ВидыЦен.ВидЦены
		|					ИЗ
		|						ВидыЦен КАК ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * КурсыСрезПоследних.Курс / КурсыСрезПоследних.Кратность / КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаЦены.Кратность * ЦеныНоменклатурыСрезПоследних.Коэффициент КАК ЧИСЛО(15, 2)) КАК Цена
		|ИЗ
		|	ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыСрезПоследних КАК КурсыСрезПоследних
		|		ПО (КурсыСрезПоследних.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыСрезПоследнихВалютаЦены КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (ИСТИНА)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)", Неопределено));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		Запрос.УстановитьПараметр("ЦенаВключаетНДС", ЦенаВключаетНДС);
		Запрос.УстановитьПараметр("БезОтбораПоВключениюНДСВЦену", 
			?(БезОтбораПоВключениюНДСВЦену = Неопределено, Ложь, БезОтбораПоВключениюНДСВЦену));
		
		Запрос.УстановитьПараметр("Дата",           Дата);
		Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		Запрос.УстановитьПараметр("Упаковка",       Упаковка);
		Запрос.УстановитьПараметр("Валюта",         Валюта);
		
		СписокВыбораЦен = Элементы.Цена.СписокВыбора;
		СписокВыбораЦен.Очистить();
		ВидЦеныЦена.Загрузить(Запрос.Выполнить().Выгрузить());
		
		ВидЦеныСовпал = Ложь;
		Для Каждого Строка Из ВидЦеныЦена Цикл
			Представление = Формат(Строка.Цена, "ЧДЦ=2; ЧН=") + " (" + Строка.ВидЦены + ")";
			СписокВыбораЦен.Добавить(Строка.ВидЦены,Представление);
			Если Строка.ВидЦены = ВидЦены Тогда
				Цена = Строка.Цена;
				ВидЦеныСовпал = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВидЦеныСовпал Тогда
			ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			ВидЦеныПредставление  = НСтр("ru='<произвольная>';uk='<довільна>'");
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ОбновитьКоличество()
	
	Если ЭтоНабор Тогда
		
		Для Каждого СтрокаНабора Из СоставНабора Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",СтрокаНабора.Номенклатура);
			Отбор.Вставить("Характеристика",СтрокаНабора.Характеристика);
			
			ПодобраноПоТовару = 0;
			Для Каждого Строка Из ТаблицаДоступныхДействий.НайтиСтроки(Отбор) Цикл
				ПодобраноПоТовару = ПодобраноПоТовару + Строка.Количество;
			КонецЦикла;
			
			СтрокаНабора.КоличествоПодобрано = ПодобраноПоТовару/СтрокаНабора.КоэффициентУпаковки;
			
			Если КоличествоУпаковок < ПодобраноПоТовару/СтрокаНабора.КоэффициентУпаковки Тогда
				КоличествоУпаковок = ПодобраноПоТовару/СтрокаНабора.КоэффициентУпаковки;
			КонецЕсли;
		КонецЦикла;
		
		Количество = КоличествоУпаковок;
		
		Для Каждого СтрокаНабора Из СоставНабора Цикл
			СтрокаНабора.КоличествоПодобрать = КоличествоУпаковок * СтрокаНабора.КоличествоУпаковок;
		КонецЦикла;
		
		УстановитьВидимостьОкруглить();
		
	Иначе
		
		КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
		Количество = КоличествоУпаковок*КоэффициентУпаковки;
		
		ТекущиеДанные = Неопределено;
		Отбор = Новый Структура("ТипСтроки", 0);
		Строки = ТаблицаДоступныхДействийТекущая.НайтиСтроки(Отбор);
		Если Строки.Количество() = 1
			И (Строки[0].ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
			Или Строки[0].ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно) Тогда
			ТекущиеДанные = Строки[0];
		КонецЕсли;
		
		СообщитьОбОшибке = Ложь;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Количество = Мин(Макс(Количество, КоличествоПодобрано - ТекущиеДанные.Количество),
				ТекущиеДанные.ДоступноТекущее + КоличествоПодобрано);
		ИначеЕсли Количество < КоличествоПодобрано Тогда
			Количество = КоличествоПодобрано;
			СообщитьОбОшибке = Истина;
		КонецЕсли;
		
		КоличествоУпаковок = Количество/КоэффициентУпаковки;
		
		Если СообщитьОбОшибке Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Введено количество упаковок меньше, чем уже подобрано. Подобрано %1 %2.';uk='Введено кількість упаковок менше, ніж вже підібрано. Підібрано %1 %2.'"),
				КоличествоУпаковок,
				?(ЗначениеЗаполнено(Упаковка), Упаковка, ЕдиницаИзмеренияНоменклатуры));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,);
		КонецЕсли;
			
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Количество = Количество + ТекущиеДанные.Количество  - КоличествоПодобрано;
			
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
			Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
			Отбор.Вставить("ДатаОтгрузки",ТекущиеДанные.ДатаОтгрузки);
			Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
			Отбор.Вставить("Склад",ТекущиеДанные.Склад);
			
			ОсновнаяСтрока = ТаблицаДоступныхДействий.НайтиСтроки(Отбор)[0];
			ОсновнаяСтрока.КоличествоСерий = ТекущиеДанные.КоличествоСерий;
			
			ОбновитьТаблицуДоступныхОстатковПриИзмененииКоличества(ТекущиеДанные.Склад,
				ТекущиеДанные.Номенклатура,
				ТекущиеДанные.Характеристика,
				ОсновнаяСтрока.ПолучитьИдентификатор(),
				ОсновнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		УстановитьВидимостьОкруглить();
		
	КонецЕсли;
	
	СфоримроватьНадписьПодобратьПодобрано();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоУпаковок()
	
	КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
	
	Если Количество<КоличествоПодобрано Тогда
		Количество = КоличествоПодобрано;
	КонецЕсли; 
	
	КоличествоУпаковок = Количество/КоэффициентУпаковки;
	
	УстановитьВидимостьОкруглить();
	
	СфоримроватьНадписьПодобратьПодобрано();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКоличествоЕдиницХранения()
	
	ЕдиницаИзмеренияТипИзмеряемойВеличины = "";
	УпаковкаТипИзмеряемойВеличины = "";
	
	ЕдиницаМерная = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения"),
																			ЕдиницаИзмеренияТипИзмеряемойВеличины);
																			
	УпаковкаМерная = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Упаковка,
																			УпаковкаТипИзмеряемойВеличины);
	Если ЕдиницаМерная
		И УпаковкаТипИзмеряемойВеличины <> ЕдиницаИзмеренияТипИзмеряемойВеличины
		И УпаковкаТипИзмеряемойВеличины <> "Упаковка"
		И УпаковкаТипИзмеряемойВеличины <> ""
		Или ЕдиницаИзмеренияТипИзмеряемойВеличины = "КоличествоШтук" 
		И УпаковкаМерная Тогда 
		
		Элементы.Количество.Видимость = Истина;
		Элементы.НоменклатураЕдиницаИзмерения.Видимость = Истина;
		
	Иначе
		
		Элементы.Количество.Видимость = Ложь;
		Элементы.НоменклатураЕдиницаИзмерения.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОкруглить()
	
	Если ПодборТоваров Тогда
		Если Количество <> Цел(Количество) И Элементы.Количество.Видимость И Не ЕдиницаМерная Тогда
			УказаноДробноеКоличествоВБазовыхЕдиницах = Истина;
			Элементы.Округлить.Видимость = Истина;
		Иначе
			УказаноДробноеКоличествоВБазовыхЕдиницах = Ложь;
			Элементы.Округлить.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекущаяЕдиницаИзмерения()
	
	ТекущаяЕдиницаИзмерения = НСтр("ru='ед';uk='од'");
	Если ЭтоНабор Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура", ТекущаяНоменклатура);
		Отбор.Вставить("Характеристика",ТекущаяХарактеристика);
		СтрокиНабора = СоставНабора.НайтиСтроки(Отбор);
		Если СтрокиНабора.Количество() > 0 Тогда
			ТекущаяЕдиницаИзмерения = СтрокиНабора[0].ЕдиницаИзмерения;
		КонецЕсли;
		
	Иначе
		
		ТекущаяЕдиницаИзмерения = ЕдиницаИзмеренияНоменклатуры;
		
	КонецЕсли;
	
	Возврат ТекущаяЕдиницаИзмерения;
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьНаСервере()

	Элементы.ГруппаКоличество.ТолькоПросмотр = СтраницаСерии И Не ЕдинственныйСклад;
	Элементы.ГруппаЦеновыеПараметры.ТолькоПросмотр = СтраницаСерии;
	Элементы.СоставНабора.Доступность = Не СтраницаСерии;
	
КонецПроцедуры

&НаСервере
Процедура СфоримроватьНадписьПодобратьПодобрано()
	
	Если ЭтоНабор Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",ТекущаяНоменклатура);
		Отбор.Вставить("Характеристика",ТекущаяХарактеристика);
		ТекущаяСтрокаНабора = СоставНабора.НайтиСтроки(Отбор)[0];
		
		Элементы.НадписьПодобратьПодобрано.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Требуется подобрать - %1 %3. Подобрано - %2 %3';uk='Потрібно підібрати - %1 %3. Підібрано - %2 %3'"),
				Количество*ТекущаяСтрокаНабора.Количество,
				КоличествоПодобрано,
				ТекущаяСтрокаНабора.ЕдиницаИзмерения);
	Иначе
		Если Не ПодборТоваров Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("СтрокаЗаказа",1);
			СтрокаЗаказа = ТаблицаДоступныхДействий.НайтиСтроки(Отбор)[0];
			
			Элементы.НадписьПодобратьПодобрано.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Требуется распределить - %1 %3. Распределено на другой вариант обеспечения - %2 %3';uk='Потрібно розподілити - %1 %3. Розподілено на інший варіант забезпечення - %2 %3'"),
					Количество,
					КоличествоПодобрано - СтрокаЗаказа.Количество,
					ЕдиницаИзмеренияНоменклатуры);
		Иначе
			Элементы.НадписьПодобратьПодобрано.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Требуется подобрать - %1 %3. Подобрано - %2 %3';uk='Потрібно підібрати - %1 %3. Підібрано - %2 %3'"),
					Количество,
					КоличествоПодобрано,
					ЕдиницаИзмеренияНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныКомплектующих()
	
	ПодобранныеТовары = ПодобранныеТовары();
	
	ЦенаНабора = 0;
	
	Для Каждого СтрокаТЧ Из ПодобранныеТовары Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",СтрокаТЧ.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаТЧ.Характеристика);
		Строка = СоставНабора.НайтиСтроки(Отбор)[0];
		Строка.Цена = СтрокаТЧ.Цена;
		
		ЦенаНабора = ЦенаНабора + СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковок;
		
	КонецЦикла;
	
	Элементы.ЕдиницаИзмерения.Видимость = Истина;
	
КонецПроцедуры

#Область Наборы

&НаСервере
Функция ПодобранныеТовары()
	
	Если ВариантПредоставления = "Скидка" Тогда
		ПроцентРучнойСкидки = ПроцентРучнойСкидкиНаценки;
	Иначе
		ПроцентРучнойСкидки = -ПроцентРучнойСкидкиНаценки;
	КонецЕсли;
	
	ПараметрыКомплектующих = Новый Структура;
	ПараметрыКомплектующих.Вставить("НоменклатураНабора",              Номенклатура);
	ПараметрыКомплектующих.Вставить("ХарактеристикаНабора",            Характеристика);
	ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
	ПараметрыКомплектующих.Вставить("ВидЦены", ВидЦены);
	ПараметрыКомплектующих.Вставить("Валюта", Валюта);
	Если Склады.Количество() = 1 Тогда
		ПараметрыКомплектующих.Вставить("Склад", Склады.Получить(0).Значение);
	КонецЕсли;
	ПараметрыКомплектующих.Вставить("КоличествоУпаковок", КоличествоУпаковок);
	ПараметрыКомплектующих.Вставить("Количество", КоличествоУпаковок);
	ПараметрыКомплектующих.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	ПараметрыКомплектующих.Вставить("ПроцентРучнойСкидки", ПроцентРучнойСкидки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Дата",    Дата);
	ДополнительныеПараметры.Вставить("Валюта",  Валюта);
	ДополнительныеПараметры.Вставить("Цена",    Цена);
	ДополнительныеПараметры.Вставить("ВидЦены", ВидЦены);
	ДополнительныеПараметры.Вставить("Соглашение", Соглашение);
	ДополнительныеПараметры.Вставить("Склады", Склады);
	
	ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
	
	Возврат ПодобранныеТовары;
	
КонецФункции

&НаСервере
Процедура РассчитатьПараметрыНабора()
	
	ПараметрыВариантаКомплектацииНоменклатуры = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(
		Номенклатура,
		Характеристика);
		
	Если Не ЗначениеЗаполнено(ПараметрыВариантаКомплектацииНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	ВариантКомплектацииНоменклатуры = ПараметрыВариантаКомплектацииНоменклатуры.ВариантКомплектацииНоменклатуры;
	
	ПодобранныеТовары = ПодобранныеТовары();
	
	ЦенаНабора = 0;
	ВНаличииНаборов = Неопределено;
	ДоступноНаборов = Неопределено;
	
	СоставНабора.Очистить();
	Для Каждого СтрокаТЧ Из ПодобранныеТовары Цикл
		
		НоваяКомплектующая = СоставНабора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяКомплектующая, СтрокаТЧ);
		Если НоваяКомплектующая.Количество <> 0 Тогда
			НоваяКомплектующая.КоэффициентУпаковки = НоваяКомплектующая.Количество/НоваяКомплектующая.КоличествоУпаковок;
		КонецЕсли;
		
		Если СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			ИЛИ СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		
			НоваяКомплектующая.ВНаличии = СтрокаТЧ.ВНаличии;
			НоваяКомплектующая.Доступно = СтрокаТЧ.Доступно;
			
			Если НоваяКомплектующая.Количество <> 0 Тогда
				ВНаличииВСтроке = Цел (НоваяКомплектующая.ВНаличии / НоваяКомплектующая.Количество);
			Иначе
				ВНаличииВСтроке = 0;
			КонецЕсли;
			
			Если НоваяКомплектующая.Количество <> 0 Тогда
				ДоступноВСтроке = Цел (НоваяКомплектующая.Доступно / НоваяКомплектующая.Количество);
			Иначе
				ДоступноВСтроке = 0;
			КонецЕсли;
			
			Если ВНаличииНаборов = Неопределено Или ВНаличииВСтроке < ВНаличииНаборов Тогда
				ВНаличииНаборов = ВНаличииВСтроке;
			КонецЕсли;
			
			Если ДоступноНаборов = Неопределено Или ДоступноВСтроке < ДоступноНаборов Тогда
				ДоступноНаборов = ДоступноВСтроке;
			КонецЕсли;
			
		КонецЕсли;
		
		ЦенаНабора = ЦенаНабора + СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковок;
		
	КонецЦикла;
	
	ВНаличии = ВНаличииНаборов;
	Доступно = ДоступноНаборов;
	
	Элементы.ЕдиницаИзмерения.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюПоНоменклатуре(Отбор)
	
	ПолучитьТаблицуДоступныхДействий(Отбор, АдресаВХранилище, Элементы.НадписьОбеспечено.Заголовок);
	Элементы.НадписьОбеспечено.Заголовок = СтрЗаменить(Элементы.НадписьОбеспечено.Заголовок, "ЕдиницаИзмерения", ТекущаяЕдиницаИзмерения());
	
	ОбновитьСписокВыбораДоступныхДействий();
	РасчитатьДоступноеКоличество();
	УстановитьОтборПоДействиюИТовару();
	ОбновитьПодобранноеКоличесто();
КонецПроцедуры

#КонецОбласти

#Область ПолучениеТаблицыДоступныхДействий

&НаСервере
Процедура ЗаполнитьПараметрыПолученияТаблицыДоступныхДействий(ПараметрыПолученияТаблицыДоступныхДействий)
	
	Если СкрыватьВариантОбеспеченияОтгрузить Тогда
		
		ПараметрыПолученияТаблицыДоступныхДействий.ИсключаемыеВарианты.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
		
	КонецЕсли;
	
	Если СкрыватьВариантОбеспеченияОтгрузитьОбособленно Тогда
		
		ПараметрыПолученияТаблицыДоступныхДействий.ИсключаемыеВарианты.Добавить(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуДоступныхДействий(Отбор, АдресаВХранилище, НадписьОбеспечено)
	
	ОтборПоТовару = Новый Структура;
	ОтборПоТовару.Вставить("Номенклатура",Отбор.Номенклатура);
	ОтборПоТовару.Вставить("Характеристика",Отбор.Характеристика);
	
	СтрокиОстатков = ТаблицаДоступныхДействий.НайтиСтроки(ОтборПоТовару);
	Если СтрокиОстатков.Количество() = 0 Тогда
		Если ПодборТоваров Тогда
			
			ПараметрыПолученияТаблицыДоступныхДействий = ОбеспечениеСервер.ПараметрыПолученияТаблицыДоступныхДействий();
			ЗаполнитьПараметрыПолученияТаблицыДоступныхДействий(ПараметрыПолученияТаблицыДоступныхДействий);
			ТаблицаДоступныхДействийПоОтбору = ОбеспечениеСервер.ТаблицаДоступныхДействийВызовИзФормыПодбора(
				Отбор,
				АдресаВХранилище,
				НадписьОбеспечено,
				ПараметрыПолученияТаблицыДоступныхДействий);
				
			Если Отбор.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
				Или Отбор.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				 ТаблицаДоступныхДействийПоОтбору.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(),"Склад");
			КонецЕсли;
			
			ОстаткиЕсть = Ложь;
			Для Каждого Строка Из ТаблицаДоступныхДействийПоОтбору Цикл
				Если (Не ТолькоОбособленно
					Или Не Отбор.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
					Или (ТолькоОбособленно
					И (Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
					Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно)))
					И (ПодборВариантовОбеспечения 
					Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить И Не ЗначениеЗаполнено(Назначение)
					Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно И ЗначениеЗаполнено(Назначение)) Тогда
					НоваяСтрока = ТаблицаДоступныхДействий.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					ОстаткиЕсть = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ОстаткиЕсть Тогда
				НоваяСтрока = ТаблицаДоступныхДействий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор);
			КонецЕсли;
		
		Иначе // вызов из формы заказа.
			
			ПараметрыПолученияТаблицыДоступныхДействий = ОбеспечениеСервер.ПараметрыПолученияТаблицыДоступныхДействий();
			ЗаполнитьПараметрыПолученияТаблицыДоступныхДействий(ПараметрыПолученияТаблицыДоступныхДействий);
			ТаблицаДоступныхДействийВызовИзФормыЗаказа = ОбеспечениеСервер.ТаблицаДоступныхДействийВызовИзФормыЗаказа(
				Отбор,
				АдресаВХранилище,
				НадписьОбеспечено,
				ПараметрыПолученияТаблицыДоступныхДействий);
				
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
				Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				 ТаблицаДоступныхДействийВызовИзФормыЗаказа.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(),"Склад");
			КонецЕсли;
			
			Если ТолькоОбособленно И Отбор.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				Для Каждого Строка Из ТаблицаДоступныхДействийВызовИзФормыЗаказа Цикл
					Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Или
						Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
						НоваяСтрока = ТаблицаДоступныхДействий.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ТаблицаДоступныхДействий.Загрузить(ТаблицаДоступныхДействийВызовИзФормыЗаказа);
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоОформлено > 0 Тогда
			СтруктураПоиска = Новый Структура("ВариантОбеспечения, Склад");
			Если ЗначениеЗаполнено(Отбор.Назначение) Тогда
				СтруктураПоиска.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
			Иначе
				СтруктураПоиска.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			КонецЕсли;
			СтруктураПоиска.Склад = Отбор.Склад;
			
			НайденныеСтроки = ТаблицаДоступныхДействий.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество()>0 Тогда
				НайденныеСтроки[0].Доступно = НайденныеСтроки[0].Доступно + КоличествоОформлено;
			Иначе
				НоваяСтрока = ТаблицаДоступныхДействий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаДоступныхДействий[ТаблицаДоступныхДействий.Количество()-2]);
				НоваяСтрока.ВариантОбеспечения = СтруктураПоиска.ВариантОбеспечения;
				НоваяСтрока.Доступно = КоличествоОформлено;
			КонецЕсли;
		КонецЕсли;
		
		ДополнитьТаблицуДоступныхДействий();
		СтрокиОстатков = ТаблицаДоступныхДействий.НайтиСтроки(ОтборПоТовару);
	
	КонецЕсли;
	
	НужноУказыватьСерии = Ложь;
	Для Каждого Строка Из СтрокиОстатков Цикл
		НужноУказыватьСерии = НужноУказыватьСерии Или Строка.СтатусУказанияСерий<>0;
	КонецЦикла;
		
	Элементы.ТаблицаДоступныхДействийТекущаяСтатусУказанияСерий.Видимость = НужноУказыватьСерии;
	Элементы.УказатьСерии.Видимость = НужноУказыватьСерии;
	Элементы.ДекорацияОтступ.Видимость = НужноУказыватьСерии;
	
	Если СтрокиОстатков.Количество() = 1 Тогда
		ЕдинственныйСклад = Истина;
		ТекущийСклад = СтрокиОстатков[0].Склад;
		ТекущийВариантОбеспечения = СтрокиОстатков[0].ВариантОбеспечения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуДоступныхДействий()
	
	Если ПодборВариантовОбеспечения Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",  ТекущаяНоменклатура);
		СтруктураОтбора.Вставить("Характеристика", ТекущаяХарактеристика);
		
		СтрокиГруппировок = ТаблицаДоступныхДействий.Выгрузить(СтруктураОтбора,"Склад");
		СтрокиГруппировок.Свернуть("Склад");
		
		Для Каждого Строка Из СтрокиГруппировок Цикл
			Если ЗначениеЗаполнено(Строка.Склад) Тогда
				НоваяСтрока = ТаблицаДоступныхДействий.Добавить();
				НоваяСтрока.Склад = Строка.Склад;
				НоваяСтрока.Номенклатура = ТекущаяНоменклатура;
				НоваяСтрока.Характеристика = ТекущаяХарактеристика;
				НоваяСтрока.ТипСтроки = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаДоступныхДействий Цикл
		
		Если ЗначениеЗаполнено(Строка.Действие) И ЗначениеЗаполнено(Строка.ПриоритетДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда
			Строка.Действие = СтрЗаменить(Строка.ВариантОбеспечения, "дате", Формат(Строка.ДатаОтгрузки,"ДФ  = 'дд.ММ.гггг'"));
		Иначе
			Строка.Действие = Строка.ВариантОбеспечения;
		КонецЕсли;
		
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			Строка.ПриоритетДействия = 1;
		ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			Строка.ПриоритетДействия = 2;
		ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			Строка.ПриоритетДействия = 3;
		ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов Тогда
			Строка.ПриоритетДействия = 4;
		ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
			Строка.ПриоритетДействия = 5;
		ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Тогда
			Строка.ПриоритетДействия = 6;
		ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда
			Строка.ПриоритетДействия = 7;
		КонецЕсли;
		
		Строка.ЗаказатьНаСклад = Истина;
		
		Если ЗначениеЗаполнено(Строка.ВариантОбеспечения) // Это не строка группировки
			И ПодборСерий Тогда
			Обработки.ПодборТоваровВДокументПродажи.ЗаполнитьСтатусУказанияСерииВСтроке(Строка,ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДоступныхДействий.Сортировать("Номенклатура, Характеристика, Склад, ТипСтроки Убыв, ПриоритетДействия");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДействиюИТовару()

	ТаблицаДоступныхДействийТекущая.Очистить();
	
	МассивСкладов = Новый Массив;
	Для Каждого Строка Из ТаблицаДоступныхДействий Цикл
		
		Если Строка.Номенклатура <> ТекущаяНоменклатура
			Или Строка.Характеристика <> ТекущаяХарактеристика Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Действие = "Отгрузить" 
			И ((Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
			Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно)
			Или Строка.ТипСтроки = 1))
			Или (Действие = "РезервироватьОбеспечивать" 
			И ((Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов
			Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
			Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
			Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
			Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется)
			Или Строка.ТипСтроки = 1))
			Или Действие = "ВсеДействия"
			Тогда
			НоваяСтрока = ТаблицаДоступныхДействийТекущая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
			Если МассивСкладов.Найти(Строка.Склад) = Неопределено Тогда
				МассивСкладов.Добавить(Строка.Склад);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОтборСклад Из МассивСкладов Цикл
		
		НайденныеСтроки = ТаблицаДоступныхДействийТекущая.НайтиСтроки(Новый Структура("Склад", ОтборСклад));
		Если НайденныеСтроки.Количество() = 1
			И НайденныеСтроки[0].ТипСтроки = 1 Тогда
			ТаблицаДоступныхДействийТекущая.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕдинственныйСклад И Не ЭтоНабор Тогда
		ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая = ТаблицаДоступныхДействийТекущая[0].ПолучитьИдентификатор();
		Элементы.ТаблицаДоступныхДействийТекущая.ТекущаяСтрока = ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораДоступныхДействий()
	Элементы.Действие.СписокВыбора.Очистить();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура",ТекущаяНоменклатура);
	СтруктураОтбора.Вставить("Характеристика",ТекущаяХарактеристика);
	СтруктураОтбора.Вставить("ВариантОбеспечения",Перечисления.ВариантыОбеспечения.Отгрузить);
	Если ТаблицаДоступныхДействий.НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
		Элементы.Действие.СписокВыбора.Добавить("Отгрузить", НСтр("ru='Отгрузить';uk='Відвантажити'"));
	КонецЕсли;
	СтруктураОтбора.Вставить("ВариантОбеспечения",Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
	Если ТаблицаДоступныхДействий.НайтиСтроки(СтруктураОтбора).Количество() > 0
		И Элементы.Действие.СписокВыбора.Количество() = 0 Тогда
		Элементы.Действие.СписокВыбора.Добавить("Отгрузить", НСтр("ru='Отгрузить';uk='Відвантажити'"));
	КонецЕсли;
	Если Действие = "Отгрузить" И Элементы.Действие.СписокВыбора.Количество() = 0 Тогда
		Действие = "ВсеДействия";
	КонецЕсли;
	Элементы.Действие.СписокВыбора.Добавить("РезервироватьОбеспечивать", НСтр("ru='Резервировать / Обеспечивать';uk='Резервувати / Забезпечувати'"));
	Элементы.Действие.СписокВыбора.Добавить("ВсеДействия", НСтр("ru='Все действия';uk='Всі дії'"));	
КонецПроцедуры

&НаСервере
Процедура РасчитатьДоступноеКоличество(Склад = Неопределено, Номенклатура = Неопределено, Характеристика = Неопределено)
	
	Если Номенклатура = Неопределено Тогда
		ТаблицаНоменклатур = ТаблицаДоступныхДействий.Выгрузить(,"Номенклатура");
		ТаблицаНоменклатур.Свернуть("Номенклатура");
		МассивНоменклатур = ТаблицаНоменклатур.ВыгрузитьКолонку("Номенклатура");
	Иначе
		МассивНоменклатур = Новый Массив;
		МассивНоменклатур.Добавить(Номенклатура);
	КонецЕсли;
	
	Если Характеристика = Неопределено Тогда
		ТаблицаХарактеристик = ТаблицаДоступныхДействий.Выгрузить(,"Характеристика");
		ТаблицаХарактеристик.Свернуть("Характеристика");
		МассивХарактеристик = ТаблицаХарактеристик.ВыгрузитьКолонку("Характеристика");
	Иначе
		МассивХарактеристик = Новый Массив;
		МассивХарактеристик.Добавить(Характеристика);
	КонецЕсли;
	
	Если Склад = Неопределено Тогда
		ТаблицаСкладов = ТаблицаДоступныхДействий.Выгрузить(,"Склад");
		ТаблицаСкладов.Свернуть("Склад");
		МассивСкладов = ТаблицаСкладов.ВыгрузитьКолонку("Склад");
	Иначе
		МассивСкладов = Новый Массив;
		МассивСкладов.Добавить(Склад);
	КонецЕсли;
	
	Для Каждого НоменклатураОтбор Из МассивНоменклатур Цикл
		Для Каждого ХарактеристикаОтбор Из МассивХарактеристик Цикл
			Для Каждого СкладОтбор Из МассивСкладов Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура", НоменклатураОтбор);
				Отбор.Вставить("Характеристика", ХарактеристикаОтбор);
				Отбор.Вставить("Склад", СкладОтбор);
				Отбор.Вставить("ТипСтроки", 0);
				
				СтрокиТаблицы = ТаблицаДоступныхДействий.НайтиСтроки(Отбор);
				КоличествоСтрок = СтрокиТаблицы.Количество()-1;
				
				ОстатокПодобрано = 0;
				//Обход снизу вверх для вычета доступного остатка
				Для Индекс = 0 По КоличествоСтрок Цикл
					
					Строка = СтрокиТаблицы[КоличествоСтрок - Индекс];
					Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
						Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
						Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Тогда
						Продолжить;
					ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
						Строка.ДоступноОстаток = Строка.Доступно - Строка.Количество;
					Иначе
						ПодобраноПоСтроке = Мин(Строка.Доступно, Строка.Количество + ОстатокПодобрано);
						Строка.ДоступноОстаток = Строка.Доступно - ПодобраноПоСтроке;
						ОстатокПодобрано = ОстатокПодобрано + Строка.Количество - ПодобраноПоСтроке;
					КонецЕсли;
					
				КонецЦикла;
				
				ДоступныйОстаток = 0;
				//Обход по порядку для расчета доступного остатка
				Для Индекс = 0 По КоличествоСтрок Цикл
					
					Строка = СтрокиТаблицы[Индекс];
					Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
						Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
						Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется Тогда
						Продолжить;
					ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
						Строка.ДоступноТекущее = Строка.ДоступноОстаток;
					Иначе
						Строка.ДоступноТекущее = Строка.ДоступноОстаток + ДоступныйОстаток;
						ДоступныйОстаток = ДоступныйОстаток + Строка.ДоступноОстаток;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеПодобранногоКоличества

&НаСервере
Процедура ТаблицаДоступныхДействийТекущаяПодобратьКоличество(ИдентификаторТекущейСтроки)
	
	ТекущиеДанные = ТаблицаДоступныхДействийТекущая.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("ДатаОтгрузки",ТекущиеДанные.ДатаОтгрузки);
	Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
	Отбор.Вставить("Склад",ТекущиеДанные.Склад);
	
	ОсновнаяСтрока = ТаблицаДоступныхДействий.НайтиСтроки(Отбор)[0];
	ОсновнаяСтрока.КоличествоСерий = ТекущиеДанные.КоличествоСерий;
	
	Если ЭтоНабор Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",ТекущаяНоменклатура);
		Отбор.Вставить("Характеристика",ТекущаяХарактеристика);
		ТекущаяСтрокаНабора = СоставНабора.НайтиСтроки(Отбор)[0];
		
		КоличествоПодобрать = Количество*ТекущаяСтрокаНабора.Количество - КоличествоПодобрано;
		СтрокаЗаказа = ОсновнаяСтрока;
	Иначе
		Если ПодборТоваров Тогда
			КоличествоПодобрать = Количество - КоличествоПодобрано;
			СтрокаЗаказа = ОсновнаяСтрока;
		Иначе
			Отбор = Новый Структура();
			Отбор.Вставить("СтрокаЗаказа",1);
			СтрокаЗаказа = ТаблицаДоступныхДействий.НайтиСтроки(Отбор)[0];
			
			Если (СтрокаЗаказа.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
				Или СтрокаЗаказа.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")) Тогда
				КоличествоПодобрать = СтрокаЗаказа.Количество-КоличествоОформлено;
			Иначе
				КоличествоПодобрать = СтрокаЗаказа.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодборТоваров И КоличествоПодобрать = 0 Тогда
		КоличествоПодобрать = 1;
	КонецЕсли;
	
	Если (ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")
		И ТекущиеДанные.Доступно <> 0)
		Или (ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
		И ТекущиеДанные.Доступно <> 0)
		Или ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада")
		Или ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов") Тогда
		
		Если Не ПодборТоваров
			И ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
			Или ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			ДоступноеИзмененненноеКоличество = Мин(КоличествоПодобрать, ТекущиеДанные.ДоступноТекущее + КоличествоПодобрать);
		Иначе
			ДоступноеИзмененненноеКоличество = Мин(КоличествоПодобрать, ТекущиеДанные.ДоступноТекущее);
		КонецЕсли;
	Иначе
		ДоступноеИзмененненноеКоличество = КоличествоПодобрать;
	КонецЕсли;
	
	Если ДоступноеИзмененненноеКоличество = 0 Тогда
		ТекущиеДанные.Количество = ОсновнаяСтрока.Количество;
		ПересчитатьСтатусыУказанияСерий(ОсновнаяСтрока.ПолучитьИдентификатор(), СтрокаЗаказа.ПолучитьИдентификатор());
		ТекущиеДанные.СтатусУказанияСерий = ОсновнаяСтрока.СтатусУказанияСерий;
		Возврат;
	КонецЕсли;
	
	ОсновнаяСтрока.Количество = ОсновнаяСтрока.Количество+ДоступноеИзмененненноеКоличество;
	ИзмененитьКоличествоСерий = 0;
	
	Если ОсновнаяСтрока.СтатусУказанияСерий<>0 Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
		Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
		Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
		Отбор.Вставить("Склад",ТекущиеДанные.Склад);
		НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
		
		ИзмененитьКоличествоСерий = ДоступноеИзмененненноеКоличество;
		
		КоличествоСерий = 0;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если Строка.Количество<>0 Тогда
				
				Если Строка.РежимОтображенияСерий = "ВсеСерии" Тогда
					ДоступноеИзмененненноеКоличествоСерий = Макс(ИзмененитьКоличествоСерий,-Строка.Количество);
				Иначе
					ДоступноеИзмененненноеКоличествоСерий = Макс(Мин(ИзмененитьКоличествоСерий,Строка.СвободныйОстаток),
						-Строка.Количество);
				КонецЕсли;
				
				Строка.Количество = Строка.Количество + ДоступноеИзмененненноеКоличествоСерий;
				Строка.СвободныйОстаток = Строка.СвободныйОстаток - ДоступноеИзмененненноеКоличествоСерий;
					
				ИзмененитьКоличествоСерий = ИзмененитьКоличествоСерий - ДоступноеИзмененненноеКоличествоСерий;
				
				Отбор = Новый Структура();
				Отбор.Вставить("Номенклатура",Строка.Номенклатура);
				Отбор.Вставить("Характеристика",Строка.Характеристика);
				Отбор.Вставить("Склад",Строка.Склад);
				Отбор.Вставить("Серия",Строка.Серия);
				
				СтрокиСерий = ОстаткиСерий.НайтиСтроки(Отбор);
				
				Для Каждого СтрокаСерии Из СтрокиСерий Цикл
					Если СтрокаСерии.ВариантОбеспечения = Строка.ВариантОбеспечения Тогда
						СтрокаСерии.Количество = Строка.Количество;
					КонецЕсли;
					СтрокаСерии.СвободныйОстаток = Строка.СвободныйОстаток;
				КонецЦикла;
				
				Если ИзмененитьКоличествоСерий = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОсновнаяСтрока.КоличествоСерий = ОсновнаяСтрока.КоличествоСерий +
			(ДоступноеИзмененненноеКоличество - ИзмененитьКоличествоСерий);
	КонецЕсли;
	
	Если Не ПодборТоваров Тогда
		СтрокаЗаказа.Количество = СтрокаЗаказа.Количество - ДоступноеИзмененненноеКоличество;
		
		Если СтрокаЗаказа.СтатусУказанияСерий<>0 Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
			Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
			Отбор.Вставить("ВариантОбеспечения",СтрокаЗаказа.ВариантОбеспечения);
			Отбор.Вставить("Склад",ТекущиеДанные.Склад);
			НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
			
			ПеренестиСерииСтрокиЗаказа = ИзмененитьКоличествоСерий;
			ИзмененитьКоличествоСерий = -ДоступноеИзмененненноеКоличество;
			
			КоличествоСерий = 0;
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если Строка.Количество<>0 Тогда
					
					Если Строка.РежимОтображенияСерий = "ВсеСерии" Тогда
						ДоступноеИзмененненноеКоличествоСерий = Макс(ИзмененитьКоличествоСерий, - Строка.Количество);
					Иначе
						ДоступноеИзмененненноеКоличествоСерий = Макс(Мин(ИзмененитьКоличествоСерий, Строка.СвободныйОстаток),
							- Строка.Количество);
					КонецЕсли;
					
					Строка.Количество = Строка.Количество + ДоступноеИзмененненноеКоличествоСерий;
					Строка.СвободныйОстаток = Строка.СвободныйОстаток - ДоступноеИзмененненноеКоличествоСерий;
					ИзмененитьКоличествоСерий = ИзмененитьКоличествоСерий - ДоступноеИзмененненноеКоличествоСерий;
					
					Отбор = Новый Структура();
					Отбор.Вставить("Номенклатура",Строка.Номенклатура);
					Отбор.Вставить("Характеристика",Строка.Характеристика);
					Отбор.Вставить("Склад",Строка.Склад);
					Отбор.Вставить("Серия",Строка.Серия);
					
					СтрокиСерий = ОстаткиСерий.НайтиСтроки(Отбор);
					
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Если СтрокаСерии.ВариантОбеспечения = Строка.ВариантОбеспечения Тогда
							СтрокаСерии.Количество = Строка.Количество;
						КонецЕсли;
						СтрокаСерии.СвободныйОстаток = Строка.СвободныйОстаток;
					КонецЦикла;
					
					Если ТекущиеДанные.Склад = СтрокаЗаказа.Склад 
						И ПеренестиСерииСтрокиЗаказа > 0 Тогда
						Отбор = Новый Структура();
						Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
						Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
						Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
						Отбор.Вставить("Склад",ТекущиеДанные.Склад);
						Отбор.Вставить("Серия",Строка.Серия);
						НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
						
						Для Каждого СтрокаСерии Из НайденныеСтроки Цикл
							СтрокаСерии.Количество = СтрокаСерии.Количество - ДоступноеИзмененненноеКоличествоСерий;
							СтрокаСерии.СвободныйОстаток = СтрокаСерии.СвободныйОстаток + ДоступноеИзмененненноеКоличествоСерий;
						КонецЦикла;
						ПеренестиСерииСтрокиЗаказа = ПеренестиСерииСтрокиЗаказа + ДоступноеИзмененненноеКоличествоСерий;
						ОсновнаяСтрока.КоличествоСерий = ОсновнаяСтрока.КоличествоСерий - ДоступноеИзмененненноеКоличествоСерий;
					КонецЕсли;
					
					Если ИзмененитьКоличествоСерий = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаЗаказа.КоличествоСерий = СтрокаЗаказа.КоличествоСерий -
				(ДоступноеИзмененненноеКоличество + ИзмененитьКоличествоСерий);
			
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТаблицуДоступныхОстатковПриИзмененииКоличества(ТекущиеДанные.Склад,
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.Характеристика,
		ОсновнаяСтрока.ПолучитьИдентификатор(),
		СтрокаЗаказа.ПолучитьИдентификатор());
	
	//Спозиционироваться на текущей строке
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("ДатаОтгрузки",ТекущиеДанные.ДатаОтгрузки);
	Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
	Отбор.Вставить("Склад",ТекущиеДанные.Склад);
	ТекущаяСтрока = ТаблицаДоступныхДействийТекущая.НайтиСтроки(Отбор)[0];
	Элементы.ТаблицаДоступныхДействийТекущая.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	ПрекратитьПодбор = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодобранногоКоличестваНаСервере(ИдентификаторТекущейСтроки, ПересчитыватьСерииВОсновнойСтроке = Ложь)
	
	ТекущиеДанные = ТаблицаДоступныхДействийТекущая.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("ДатаОтгрузки",ТекущиеДанные.ДатаОтгрузки);
	Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
	Отбор.Вставить("Склад",ТекущиеДанные.Склад);
	
	ОсновнаяСтрока = ТаблицаДоступныхДействий.НайтиСтроки(Отбор)[0];
	ОсновнаяСтрока.КоличествоСерий = ТекущиеДанные.КоличествоСерий;
	
	ИзмененноеКоличество = ТекущиеДанные.Количество - ОсновнаяСтрока.Количество;
	Если (ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")
		И ТекущиеДанные.Доступно <> 0)
		Или (ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
		И ТекущиеДанные.Доступно <> 0)
		Или ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада")
		Или ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов") Тогда
		
		ДоступноеИзмененненноеКоличество = Мин(ИзмененноеКоличество, ТекущиеДанные.ДоступноТекущее);
	Иначе
		ДоступноеИзмененненноеКоличество = ИзмененноеКоличество;
	КонецЕсли;

	Если Не ПодборТоваров Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("СтрокаЗаказа",1);
		СтрокаЗаказа = ТаблицаДоступныхДействий.НайтиСтроки(Отбор)[0];
		
		Если (ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
			Или ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить)
			И (ТекущиеДанные.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
			Или ТекущиеДанные.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить) Тогда
			ДоступноеИзмененненноеКоличество = Мин(ИзмененноеКоличество, ТекущиеДанные.ДоступноТекущее + СтрокаЗаказа.Количество);
		КонецЕсли;
		
		Если (СтрокаЗаказа.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
			Или СтрокаЗаказа.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")) Тогда
			ДоступноеИзмененненноеКоличество = Мин(СтрокаЗаказа.Количество-КоличествоОформлено,ДоступноеИзмененненноеКоличество);
		Иначе
			ДоступноеИзмененненноеКоличество = Мин(СтрокаЗаказа.Количество,ДоступноеИзмененненноеКоличество);
		КонецЕсли;
		Если ИзмененноеКоличество > ДоступноеИзмененненноеКоличество Тогда
			
			ТекстСообщенияОформлено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Оформлено и изменить вариант обеспечения нельзя для %1 %2.';uk='Оформлено і змінити варіант забезпечення не можна для %1 %2.'"),
					КоличествоОформлено,
					ЕдиницаИзмеренияНоменклатуры);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Введено количества больше, чем требуется перераспределить.%1 Доступно для изменения %2 %3.';uk='Введено кількості більше, ніж потрібно перерозподілити.%1 Доступно для зміни %2 %3.'"),
				?(КоличествоОформлено = 0, "", ТекстСообщенияОформлено),
				ДоступноеИзмененненноеКоличество,
				ЕдиницаИзмеренияНоменклатуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,);
		КонецЕсли;
	Иначе
		СтрокаЗаказа = ОсновнаяСтрока;
	КонецЕсли;
	
	Если ДоступноеИзмененненноеКоличество = 0 Тогда
		ТекущиеДанные.Количество = ОсновнаяСтрока.Количество;
		ПересчитатьСтатусыУказанияСерий(ОсновнаяСтрока.ПолучитьИдентификатор(), СтрокаЗаказа.ПолучитьИдентификатор());
		ТекущиеДанные.СтатусУказанияСерий = ОсновнаяСтрока.СтатусУказанияСерий;
		Возврат;
	КонецЕсли;
	
	ОсновнаяСтрока.Количество = ОсновнаяСтрока.Количество+ДоступноеИзмененненноеКоличество;
	ИзмененитьКоличествоСерий = 0;
	
	Если ОсновнаяСтрока.СтатусУказанияСерий<>0 И ПересчитыватьСерииВОсновнойСтроке Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
		Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
		Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
		Отбор.Вставить("Склад",ТекущиеДанные.Склад);
		НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
		
		ИзмененитьКоличествоСерий = ДоступноеИзмененненноеКоличество;
		
		КоличествоСерий = 0;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если Строка.Количество<>0 Тогда
				
				Если Строка.РежимОтображенияСерий = "ВсеСерии" Тогда
					ДоступноеИзмененненноеКоличествоСерий = Макс(ИзмененитьКоличествоСерий,-Строка.Количество);
				Иначе
					ДоступноеИзмененненноеКоличествоСерий = Макс(Мин(ИзмененитьКоличествоСерий, Строка.СвободныйОстаток), -Строка.Количество);
				КонецЕсли;
				
				Строка.Количество = Строка.Количество + ДоступноеИзмененненноеКоличествоСерий;
				Строка.СвободныйОстаток = Строка.СвободныйОстаток - ДоступноеИзмененненноеКоличествоСерий;
				
				ИзмененитьКоличествоСерий = ИзмененитьКоличествоСерий - ДоступноеИзмененненноеКоличествоСерий;
				
				Отбор = Новый Структура();
				Отбор.Вставить("Номенклатура",Строка.Номенклатура);
				Отбор.Вставить("Характеристика",Строка.Характеристика);
				Отбор.Вставить("Склад",Строка.Склад);
				Отбор.Вставить("Серия",Строка.Серия);
				
				СтрокиСерий = ОстаткиСерий.НайтиСтроки(Отбор);
				
				Для Каждого СтрокаСерии Из СтрокиСерий Цикл
					Если СтрокаСерии.ВариантОбеспечения = Строка.ВариантОбеспечения Тогда
						СтрокаСерии.Количество = Строка.Количество;
					КонецЕсли;
					СтрокаСерии.СвободныйОстаток = Строка.СвободныйОстаток;
				КонецЦикла;
						
				Если ИзмененитьКоличествоСерий = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОсновнаяСтрока.КоличествоСерий = ОсновнаяСтрока.КоличествоСерий + (ДоступноеИзмененненноеКоличество - ИзмененитьКоличествоСерий);
	КонецЕсли;
	
	Если Не ПодборТоваров 
		И СтрокаЗаказа<>ОсновнаяСтрока Тогда
		СтрокаЗаказа.Количество = СтрокаЗаказа.Количество - ДоступноеИзмененненноеКоличество;
		
		Если СтрокаЗаказа.СтатусУказанияСерий<>0 Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
			Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
			Отбор.Вставить("ВариантОбеспечения",СтрокаЗаказа.ВариантОбеспечения);
			Отбор.Вставить("Склад",ТекущиеДанные.Склад);
			НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
			
			ПеренестиСерииСтрокиЗаказа = ИзмененитьКоличествоСерий;
			ИзмененитьКоличествоСерий = -ДоступноеИзмененненноеКоличество;
			
			КоличествоСерий = 0;
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если Строка.Количество<>0 Тогда
					
					Если Строка.РежимОтображенияСерий = "ВсеСерии" Тогда
						ДоступноеИзмененненноеКоличествоСерий = Макс(ИзмененитьКоличествоСерий, - Строка.Количество);
					Иначе
						ДоступноеИзмененненноеКоличествоСерий = Макс(Мин(ИзмененитьКоличествоСерий, Строка.СвободныйОстаток), - Строка.Количество);
					КонецЕсли;
					
					Строка.Количество = Строка.Количество + ДоступноеИзмененненноеКоличествоСерий;
					Строка.СвободныйОстаток = Строка.СвободныйОстаток - ДоступноеИзмененненноеКоличествоСерий;
					
					ИзмененитьКоличествоСерий = ИзмененитьКоличествоСерий - ДоступноеИзмененненноеКоличествоСерий;
					
					Отбор = Новый Структура();
					Отбор.Вставить("Номенклатура",Строка.Номенклатура);
					Отбор.Вставить("Характеристика",Строка.Характеристика);
					Отбор.Вставить("Склад",Строка.Склад);
					Отбор.Вставить("Серия",Строка.Серия);
					
					СтрокиСерий = ОстаткиСерий.НайтиСтроки(Отбор);
					
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Если СтрокаСерии.ВариантОбеспечения = Строка.ВариантОбеспечения Тогда
							СтрокаСерии.Количество = Строка.Количество;
						КонецЕсли;
						СтрокаСерии.СвободныйОстаток = Строка.СвободныйОстаток;
					КонецЦикла;
					
					Если ТекущиеДанные.Склад = СтрокаЗаказа.Склад 
						И ПеренестиСерииСтрокиЗаказа > 0 Тогда
						Отбор = Новый Структура();
						Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
						Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
						Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
						Отбор.Вставить("Склад",ТекущиеДанные.Склад);
						Отбор.Вставить("Серия",Строка.Серия);
						НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
						
						Для Каждого СтрокаСерии Из НайденныеСтроки Цикл
							СтрокаСерии.Количество = СтрокаСерии.Количество - ДоступноеИзмененненноеКоличествоСерий;
							СтрокаСерии.СвободныйОстаток = СтрокаСерии.СвободныйОстаток + ДоступноеИзмененненноеКоличествоСерий;
						КонецЦикла;
						ПеренестиСерииСтрокиЗаказа = ПеренестиСерииСтрокиЗаказа + ДоступноеИзмененненноеКоличествоСерий;
						ОсновнаяСтрока.КоличествоСерий = ОсновнаяСтрока.КоличествоСерий - ДоступноеИзмененненноеКоличествоСерий;
					КонецЕсли;
					
					Если ИзмененитьКоличествоСерий = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаЗаказа.КоличествоСерий = СтрокаЗаказа.КоличествоСерий -
				(ДоступноеИзмененненноеКоличество + ИзмененитьКоличествоСерий);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТаблицуДоступныхОстатковПриИзмененииКоличества(ТекущиеДанные.Склад,
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.Характеристика,
		ОсновнаяСтрока.ПолучитьИдентификатор(),
		СтрокаЗаказа.ПолучитьИдентификатор());
	
	//Спозиционироваться на текущей строке
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("ДатаОтгрузки",ТекущиеДанные.ДатаОтгрузки);
	Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
	Отбор.Вставить("Склад",ТекущиеДанные.Склад);
	ТекущаяСтрока = ТаблицаДоступныхДействийТекущая.НайтиСтроки(Отбор)[0];
	Элементы.ТаблицаДоступныхДействийТекущая.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуДоступныхОстатковПриИзмененииКоличества(Склад, Номенклатура, Характеристика, ИдентификаторОсновнаяСтрока, ИдентификаторСтрокаЗаказа)
	ПересчитатьСтатусыУказанияСерий(ИдентификаторОсновнаяСтрока, ИдентификаторСтрокаЗаказа);

	РасчитатьДоступноеКоличество(Склад, Номенклатура, Характеристика);
	ОбновитьПодобранноеКоличесто();
	УстановитьОтборПоДействиюИТовару();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодобранноеКоличесто()
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущаяНоменклатура);
	Отбор.Вставить("Характеристика",ТекущаяХарактеристика);
	
	КоличествоПодобрано = 0;
	Для Каждого Строка Из ТаблицаДоступныхДействий.НайтиСтроки(Отбор) Цикл
		КоличествоПодобрано = КоличествоПодобрано + Строка.Количество;
	КонецЦикла;

	Если ЭтоНабор Тогда
		ТекущаяСтрокаНабора = СоставНабора.НайтиСтроки(Отбор)[0];
		Если КоличествоПодобрано>Количество*ТекущаяСтрокаНабора.Количество Тогда
			Количество = КоличествоПодобрано/ТекущаяСтрокаНабора.Количество;
			КоличествоУпаковок = Количество;
		КонецЕсли;
		
		ТекущаяСтрокаНабора.КоличествоПодобрано = КоличествоПодобрано/ТекущаяСтрокаНабора.КоэффициентУпаковки;
		
		Для Каждого СтрокаНабора Из СоставНабора Цикл
			СтрокаНабора.КоличествоПодобрать = КоличествоУпаковок * СтрокаНабора.КоличествоУпаковок;
		КонецЦикла;
	Иначе
		Если КоличествоПодобрано>Количество Тогда
			Количество = КоличествоПодобрано;
			КоличествоУпаковок = Количество / Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
	СфоримроватьНадписьПодобратьПодобрано();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура ОстаткиСерийТекущиеКоличествоПриИзмененииНаСервере(ИдентификаторТекущейСтроки)
	
	ТекущиеДанные = ОстаткиСерийТекущие.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);

	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("Склад",ТекущиеДанные.Склад);
	Отбор.Вставить("Серия",ТекущиеДанные.Серия);
	Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
	
	Если ТекущиеДанные.СтрокаЗаказа
		И (ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
			Или ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")) Тогда
		Если ТекущиеДанные.Количество < КоличествоОформлено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Введено количество меньше, чем уже оформлено. Оформлено %1 %2.';uk='Введено кількість менша, ніж вже оформлено. Оформлено %1 %2.'"),
			КоличествоОформлено,
			ЕдиницаИзмеренияНоменклатуры);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,);
		КонецЕсли;
		
		ТекущиеДанные.Количество = Макс(ТекущиеДанные.Количество, КоличествоОформлено);
	КонецЕсли;
	
	ОсновнаяСтрока = ОстаткиСерий.НайтиСтроки(Отбор)[0];
	ИзмененноеКоличество = ТекущиеДанные.Количество - ОсновнаяСтрока.Количество;
	Если ОсновнаяСтрока.РежимОтображенияСерий = "ВсеСерии" Тогда
		ДоступноеИзмененненноеКоличество = ИзмененноеКоличество;
	Иначе
		ДоступноеИзмененненноеКоличество = Мин(ИзмененноеКоличество, ТекущиеДанные.СвободныйОстаток);
	КонецЕсли;
	
	Если ДоступноеИзмененненноеКоличество = 0 Тогда
		ТекущиеДанные.Количество = ОсновнаяСтрока.Количество;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Количество = ОсновнаяСтрока.Количество+ДоступноеИзмененненноеКоличество;
	ТекущиеДанные.СвободныйОстаток = ОсновнаяСтрока.СвободныйОстаток-ДоступноеИзмененненноеКоличество;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("Склад",ТекущиеДанные.Склад);
	Отбор.Вставить("Серия",ТекущиеДанные.Серия);
	
	СтрокиСерий = ОстаткиСерий.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаСерии Из СтрокиСерий Цикл
		Если СтрокаСерии.ВариантОбеспечения = ТекущиеДанные.ВариантОбеспечения Тогда
			СтрокаСерии.Количество = ТекущиеДанные.Количество;
		КонецЕсли;
		СтрокаСерии.СвободныйОстаток = ТекущиеДанные.СвободныйОстаток;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросЗаполненияТаблицыОстатков()
	
	ПараметрыЗапросаВрем = Новый Структура;
	ПараметрыЗапросаВрем.Вставить("Номенклатура", ТекущаяНоменклатура);
	ПараметрыЗапросаВрем.Вставить("Характеристика", ТекущаяХарактеристика);
	Если ЗначениеЗаполнено(Назначение) И ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
		ПараметрыЗапросаВрем.Вставить("БезНазначения", Ложь);
		ДвиженияПоСкладскимРегистрам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "ДвиженияПоСкладскимРегистрам");
		Если ДвиженияПоСкладскимРегистрам Тогда
			ПараметрыЗапросаВрем.Вставить("Назначение", Назначение);
		Иначе
			ПараметрыЗапросаВрем.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
		КонецЕсли;
		
		ПараметрыЗапросаВрем.Вставить("ВсеСерии", Ложь);
	Иначе
		ПараметрыЗапросаВрем.Вставить("БезНазначения", Истина);
		ПараметрыЗапросаВрем.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
		ПараметрыЗапросаВрем.Вставить("ВсеСерии", Истина);
	КонецЕсли;
	ПараметрыЗапросаВрем.Вставить("Склад",        ТекущийСклад);
	ПараметрыЗапросаВрем.Вставить("Помещение",    Справочники.СкладскиеПомещения.ПустаяСсылка());
	ПараметрыЗапросаВрем.Вставить("Регистратор",  Регистратор);
	ПараметрыЗапросаВрем.Вставить("Распоряжение", Распоряжение);
	
	ПараметрыЗапросаОстаткаСерий = Новый ФиксированнаяСтруктура(ПараметрыЗапросаВрем);
	
	ТекстЗапроса = Обработки.ПодборСерийВДокументы.ТекстЗапросаФормированияТаблицыДанныеРегистров(ВариантПолучениеДанныхИзРегистров,
		ТекущийСклад);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ДанныеРегистров.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ДанныеРегистров.Серия КАК Справочник.СерииНоменклатуры).Номер КАК Номер,
	|	ВЫРАЗИТЬ(ДанныеРегистров.Серия КАК Справочник.СерииНоменклатуры).ГоденДо КАК ГоденДо,
	|	ДанныеРегистров.СвободныйОстаток КАК СвободныйОстаток
	|ПОМЕСТИТЬ ОстаткиСерий
	|ИЗ
	|	ДанныеРегистров КАК ДанныеРегистров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.Количество
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Серия,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ПодобранныеСерии
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура = &Номенклатура
	|	И ТаблицаТоваров.Характеристика = &Характеристика
	|	И ТаблицаТоваров.Склад = &Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСерий.Серия,
	|	ОстаткиСерий.Номер,
	|	ОстаткиСерий.ГоденДо,
	|	ОстаткиСерий.СвободныйОстаток - ЕСТЬNULL(ПодобранныеСерии.Количество,0) КАК СвободныйОстаток
	|ИЗ
	|	ОстаткиСерий КАК ОстаткиСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодобранныеСерии КАК ПодобранныеСерии
	|		ПО ОстаткиСерий.Серия = ПодобранныеСерии.Серия
	|УПОРЯДОЧИТЬ ПО
	|	ГоденДо,
	|	Номер";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого Параметр из ПараметрыЗапросаОстаткаСерий Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	ТаблицаТоваров = ОстаткиСерий.Выгрузить().СкопироватьКолонки();
	Для Каждого Строка Из ПолучитьИзВременногоХранилища(АдресТаблицыПодобраноРанее) Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Для Каждого СтрокаСерий Из Запрос.Выполнить().Выгрузить() Цикл
		НоваяСтрокаСерий = ОстаткиСерий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, СтрокаСерий);
		НоваяСтрокаСерий.Номенклатура = ТекущаяНоменклатура;
		Если СтрокаСерий.СвободныйОстаток>0 Тогда
			НоваяСтрокаСерий.РежимОтображенияСерий = "ТолькоОстатки";
		Иначе
			НоваяСтрокаСерий.РежимОтображенияСерий = "ВсеСерии";
		КонецЕсли;
		НоваяСтрокаСерий.Характеристика = ТекущаяХарактеристика;
		НоваяСтрокаСерий.Склад = ТекущийСклад;
		
		Если ТекущийВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			НоваяСтрокаСерий.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
		Иначе
			НоваяСтрокаСерий.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			
			НоваяСтрокаСерийСоСклада = ОстаткиСерий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийСоСклада, НоваяСтрокаСерий);
			НоваяСтрокаСерийСоСклада.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
		КонецЕсли;
	КонецЦикла;
	
	// Доп. реквизиты
	УправлениеСвойствамиУТ.ДобавитьКолонкиДополнительныхРеквизитов(
		Обработки.ПодборСерийВДокументы.ВладелецСвойствСерий(ВидНоменклатуры),
		ЭтаФорма,
		"ОстаткиСерий",
		"ОстаткиСерий",
		"ОстаткиСерийСвободныйОстаток",
		Истина);
	УправлениеСвойствамиУТ.ЗаполнитьКолонкиДополнительныхРеквизитов(
		ЭтаФорма,
		"ОстаткиСерий",
		"Серия");
	
	УправлениеСвойствамиУТ.ДобавитьКолонкиДополнительныхРеквизитов(
		Обработки.ПодборСерийВДокументы.ВладелецСвойствСерий(ВидНоменклатуры),
		ЭтаФорма,
		"ОстаткиСерийТекущие",
		"ОстаткиСерийТекущие",
		"ОстаткиСерийТекущиеСвободныйОстаток",
		Истина);
	УправлениеСвойствамиУТ.ЗаполнитьКолонкиДополнительныхРеквизитов(
		ЭтаФорма,
		"ОстаткиСерийТекущие",
		"Серия");
		
КонецПроцедуры

&НаСервере
Процедура КУказаниюСерийНаСервере()
		
	ВариантПолучениеДанныхИзРегистров = Обработки.ПодборСерийВДокументы.ВариантПолучениеДанныхИзРегистровПоПараметрамФормы(ПараметрыУказанияСерий, Распоряжение, ТекущийСклад, ТекущийВидНоменклатуры);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", ТекущаяНоменклатура);
	Отбор.Вставить("Характеристика", ТекущаяХарактеристика);
	Отбор.Вставить("Склад", ТекущийСклад);
	Отбор.Вставить("ВариантОбеспечения", ТекущийВариантОбеспечения);
	
	Если ОстаткиСерий.НайтиСтроки(Отбор).Количество()=0 Тогда
		ВыполнитьЗапросЗаполненияТаблицыОстатков();
	КонецЕсли;
	
	ОстаткиСерийТекущие.Очистить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", ТекущаяНоменклатура);
	Отбор.Вставить("Характеристика", ТекущаяХарактеристика);
	Отбор.Вставить("ВариантОбеспечения", ТекущийВариантОбеспечения);
	Отбор.Вставить("Склад", ТекущийСклад);
	Если РежимОтображенияСерий = "ТолькоОстатки" Тогда
		Отбор.Вставить("РежимОтображенияСерий", РежимОтображенияСерий);
	КонецЕсли;
	
	Колонки = ОстаткиСерий.Выгрузить().Колонки;
	КолонкиДопРеквизитов = Новый Массив;
	Для Каждого Колонка Из Колонки Цикл
		Если СтрНайти(Колонка.Имя, "ДополнительныйРеквизитЗначение") <> 0 Тогда
			КолонкиДопРеквизитов.Добавить(СтрЗаменить(Колонка.Имя,"ОстаткиСерий",""));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСерий Из ОстаткиСерий.НайтиСтроки(Отбор) Цикл
		НоваяСтрокаСерий = ОстаткиСерийТекущие.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, СтрокаСерий);
		
		Для Каждого Колонка Из КолонкиДопРеквизитов Цикл
			НоваяСтрокаСерий["ОстаткиСерийТекущие"+Колонка] = СтрокаСерий["ОстаткиСерий"+Колонка]
		КонецЦикла;
	КонецЦикла;
	
	Заголовки = Обработки.ПодборСерийВДокументы.ЗаголовкиПоВариантуПолучениеДанныхИзРегистров(ВариантПолучениеДанныхИзРегистров);
	Элементы.РежимОтображенияСерий.СписокВыбора[0].Представление = Заголовки.ЗаголовокКнопки;
	
	НастройкиИспользованияСерий = Новый ФиксированнаяСтруктура(ЗначениеНастроекПовтИсп.НастройкиИспользованияСерий(
																							ТекущийВидНоменклатуры,
																							ТекущийСклад));
		
	Элементы.ОстаткиСерийТекущиеГоденДо.Видимость = НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии;
	Элементы.ОстаткиСерийТекущиеНомер.Видимость = НастройкиИспользованияСерий.ИспользоватьНомерСерии;
	Элементы.ОстаткиСерийЗаполнитьПоFEFO.Видимость = НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии;
	
	Элементы.СтраницыТоварыСерии.ТекущаяСтраница = Элементы.СтраницаСерии;
	СтраницаСерии = Истина;
	НастроитьВидимостьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтатусыУказанияСерий(ИдентификаторОсновнаяСтрока, ИдентификаторСтрокаЗаказа)
	ОсновнаяСтрока = ТаблицаДоступныхДействий.НайтиПоИдентификатору(ИдентификаторОсновнаяСтрока);
	ПересчитатьСтатусУказанияСерий(ОсновнаяСтрока, ПараметрыУказанияСерий, ОсновнаяСтрока.Количество, ОсновнаяСтрока.КоличествоСерий);
	
	Если Не ПодборТоваров Тогда
		СтрокаЗаказа = ТаблицаДоступныхДействий.НайтиПоИдентификатору(ИдентификаторСтрокаЗаказа);
		ПересчитатьСтатусУказанияСерий(СтрокаЗаказа, ПараметрыУказанияСерий, СтрокаЗаказа.Количество, СтрокаЗаказа.КоличествоСерий);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСтатусУказанияСерий(Строка, ПараметрыУказанияСерий, КоличествоТоваров, КоличествоСерий)
	
	ВариантОбеспечения  = Строка.ВариантОбеспечения;
	
	Если Строка.СтатусУказанияСерий = 0 Тогда
		Возврат;
	ИначеЕсли ПараметрыУказанияСерий.ЭтоЗаказ
		И ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
		И ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")
		И ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада") Тогда
		Строка.СтатусУказанияСерий = 0;
		Возврат;
	КонецЕсли;
	
	СерииУказаныПолностью = КоличествоТоваров > 0
		И КоличествоТоваров = КоличествоСерий;
	
	НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
		Строка.СтатусУказанияСерий,
		СерииУказаныПолностью,
		КоличествоСерий,
		ВариантОбеспечения);
	
КонецПроцедуры

&НаСервере
Функция РаспределитьОстатокНаСервере()
	
	ТекущиеДанные = ТаблицаДоступныхДействийТекущая.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая);

	ВведенноеКоличествоСерий = 0;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",ТекущиеДанные.Номенклатура);
	Отбор.Вставить("Характеристика",ТекущиеДанные.Характеристика);
	Отбор.Вставить("ВариантОбеспечения",ТекущиеДанные.ВариантОбеспечения);
	Отбор.Вставить("Склад",ТекущиеДанные.Склад);
	НайденныеСтроки = ОстаткиСерий.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаСерийТекущая Из НайденныеСтроки Цикл
		ВведенноеКоличествоСерий = ВведенноеКоличествоСерий + СтрокаСерийТекущая.Количество;
	КонецЦикла;

	Если ЕдинственныйСклад И Не ЭтоНабор Тогда
		КоличествоКРаспределению = Количество - ВведенноеКоличествоСерий;
	Иначе
		КоличествоКРаспределению = ТекущиеДанные.Количество - ВведенноеКоличествоСерий;
	КонецЕсли;
	
	Если КоличествоКРаспределению <= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из Элементы.ОстаткиСерийТекущие.ВыделенныеСтроки Цикл
		
		Если КоличествоКРаспределению <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаСерии = ОстаткиСерийТекущие.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаСерии.РежимОтображенияСерий = "ВсеСерии" Тогда
			КоличествоНаСтроку = Макс(КоличествоКРаспределению, 0);
		Иначе
			КоличествоНаСтроку = Макс(Мин(КоличествоКРаспределению, СтрокаСерии.СвободныйОстаток), 0);
		КонецЕсли;
		
		КоличествоКРаспределению = КоличествоКРаспределению - КоличествоНаСтроку;
		
		СтрокаСерии.Количество = СтрокаСерии.Количество + КоличествоНаСтроку;
		СтрокаСерии.СвободныйОстаток = СтрокаСерии.СвободныйОстаток - КоличествоНаСтроку;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",СтрокаСерии.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаСерии.Характеристика);
		Отбор.Вставить("Склад",СтрокаСерии.Склад);
		Отбор.Вставить("Серия",СтрокаСерии.Серия);
		
		СтрокиСерий = ОстаткиСерий.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаСерииОсновная Из СтрокиСерий Цикл
			Если СтрокаСерииОсновная.ВариантОбеспечения = ТекущийВариантОбеспечения Тогда
				СтрокаСерииОсновная.Количество = СтрокаСерии.Количество;
			КонецЕсли;
			СтрокаСерииОсновная.СвободныйОстаток = СтрокаСерии.СвободныйОстаток;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаполнитьПоFEFOНаСервере()
	
	ТекущиеДанные = ТаблицаДоступныхДействийТекущая.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиТаблицаДоступныхДействийТекущая);
	
	Если ЕдинственныйСклад И Не ЭтоНабор Тогда
		КоличествоКРаспределению = Количество;
	Иначе
		КоличествоКРаспределению = ТекущиеДанные.Количество;
	КонецЕсли;

	Если КоличествоКРаспределению <= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.СтрокаЗаказа
		И (ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
		Или ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")) Тогда
		КоличествоКРаспределению = КоличествоКРаспределению - КоличествоОформлено;
	КонецЕсли;
	
	Для Каждого СтрокаСерии Из ОстаткиСерийТекущие Цикл
		
		Если СтрокаСерии.СтрокаЗаказа
			И (СтрокаСерии.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
				Или СтрокаСерии.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")) Тогда
			КоличествоКРаспределению = КоличествоКРаспределению + КоличествоОформлено;
		КонецЕсли;
		
		Если КоличествоКРаспределению <= 0 Тогда
			СтрокаСерии.СвободныйОстаток   = СтрокаСерии.СвободныйОстаток + СтрокаСерии.Количество;
			СтрокаСерии.Количество = 0;
		Иначе
			Если СтрокаСерии.РежимОтображенияСерий = "ВсеСерии" Тогда
				КоличествоПоСтроке = КоличествоКРаспределению;
			Иначе
				КоличествоПоСтроке = Мин(СтрокаСерии.СвободныйОстаток + СтрокаСерии.Количество, КоличествоКРаспределению);
			КонецЕсли;
			
			СтрокаСерии.СвободныйОстаток   = СтрокаСерии.СвободныйОстаток + СтрокаСерии.Количество - КоличествоПоСтроке;
			СтрокаСерии.Количество = КоличествоПоСтроке;
			КоличествоКРаспределению = КоличествоКРаспределению - КоличествоПоСтроке; 
			
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",СтрокаСерии.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаСерии.Характеристика);
		Отбор.Вставить("Склад",СтрокаСерии.Склад);
		Отбор.Вставить("Серия",СтрокаСерии.Серия);
		
		СтрокиСерий = ОстаткиСерий.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаСерииОсновная Из СтрокиСерий Цикл
			Если СтрокаСерииОсновная.ВариантОбеспечения = ТекущийВариантОбеспечения Тогда
				СтрокаСерииОсновная.Количество = СтрокаСерии.Количество;
			КонецЕсли;
			СтрокаСерииОсновная.СвободныйОстаток = СтрокаСерии.СвободныйОстаток;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Параметры.Свойство("Организация",  Организация);
	Параметры.Свойство("Период",       ПериодРасчетов);
	
	МассивВидовОперацийУсловнойПродажи = Новый Массив;
	МассивВидовОперацийУсловнойПродажи.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа);
	
	Если НЕ ЗначениеЗаполнено(ПериодРасчетов) Тогда
		ПериодРасчетов = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	ЗаполнитьТаблицуУсловныхПродаж();
	ИнициализироватьОтборДинамическихСписков();
	УстановитьОтборДинамическихСписков();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка());
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты,, Ложь);
	// Конец МенюОтчеты
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЗаполнитьТаблицуУсловныхПродаж();
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьНалоговыеДокументы(Команда)
	
	ВыделенныеСтроки = Элементы.УсловныеПродажи.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходимо выделить строки в списке!';uk='Необхідно виділити рядки в списку!'"));
		Возврат;
	КонецЕсли;
	
	СформироватьНалоговыеДокументыСервер(ВыделенныеСтроки);
	Элементы.Список.Обновить();
	УстановитьВидимостьДекорацииАктуальностьТаблицыКОформлению(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуКОформлению(Команда)
	
	ЗаполнитьТаблицуУсловныхПродаж();
	УстановитьВидимостьДекорацииАктуальностьТаблицыКОформлению(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодРасчетовПриИзменении(Элемент)
	
	ЗаполнитьТаблицуУсловныхПродаж();
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	УстановитьВидимостьДекорацииАктуальностьТаблицыКОформлению(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	СтруктураОтбора = Новый Структура();
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;

	ФиксСтруктура = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.УсловныеПродажи.ОтборСтрок = ФиксСтруктура;
	
	Элементы.ДекорацияПредупреждениеЕН.Видимость = ОрганизацииРасширенныйПериод.Количество() > 0 
		И (НЕ ЗначениеЗаполнено(Организация) ИЛИ ОрганизацииРасширенныйПериод.НайтиПоЗначению(Организация) <> Неопределено)
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНалоговыеДокументыСервер(ВыделенныеСтроки)	

	ВыделенныеСтрокиТЧ = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.УсловныеПродажи.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			ВыделенныеСтрокиТЧ.Добавить(СтрокаТаблицы);
		КонецЕсли; 
	КонецЦикла;	

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.ВидУсловнойПродажи,
	|	Данные.Организация,
	|	Данные.Номенклатура,
	|	Данные.Характеристика,
	|	Данные.СтавкаНДС,
	|	Данные.НалоговоеНазначение,
	|	Данные.НалоговоеНазначениеПоФакту,
	|	Данные.ПредполагаемоеКоличество,
	|	Данные.Количество,
	|	Данные.ПредполагаемаяСтоимостьРегл,
	|	Данные.СтоимостьРегл,
	|	Данные.ПредполагаемыйНДСРегл,
	|	Данные.НДСРегл,
	|	Данные.НДСРеглРучныеКорректировки,
	|	&Дата
	|ПОМЕСТИТЬ ДанныеФормирования
	|ИЗ
	|	&Данные КАК Данные";
	
	Запрос.УстановитьПараметр("Данные", Объект.УсловныеПродажи.Выгрузить(ВыделенныеСтрокиТЧ));
	Запрос.УстановитьПараметр("Дата", КонецМесяца(ПериодРасчетов));
	
	Запрос.Выполнить();
	
	НДСИсходящийСервер.СформироватьНалоговыеДокументыПоУсловнымПродажам(МенеджерВременныхТаблиц);
	
	ЗаполнитьТаблицуУсловныхПродаж();
	
КонецПроцедуры

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	ОбластьДобавления = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ОбластьДобавления, "Организация", ,               Организация,                  ВидСравненияКомпоновкиДанных.Равно,          ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ОбластьДобавления, ,              "НачалоМесяца", НачалоМесяца(ПериодРасчетов), ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ЗначениеЗаполнено(ПериодРасчетов));
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ОбластьДобавления, ,              "КонецМесяца",  КонецМесяца(ПериодРасчетов),  ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ЗначениеЗаполнено(ПериодРасчетов));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтборДинамическихСписков()
	
	ОбластьДобавления = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления, "Организация", ВидСравненияКомпоновкиДанных.Равно,          Организация, ,                                ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления, "Дата",        ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоМесяца(ПериодРасчетов), "НачалоМесяца", ЗначениеЗаполнено(ПериодРасчетов));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления, "Дата",        ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецМесяца(ПериодРасчетов),  "КонецМесяца",  ЗначениеЗаполнено(ПериодРасчетов));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуУсловныхПродаж()
	
	Запрос = Новый Запрос;

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	НДСИсходящийСервер.ПодготовитьДанныеДляАнализаУсловныхПродаж(Запрос.МенеджерВременныхТаблиц, Неопределено, ПериодРасчетов); 

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УсловнаяПродажа.Организация,
	|	УсловнаяПродажа.ВидУсловнойПродажи,
	|	УсловнаяПродажа.Номенклатура,
	|	УсловнаяПродажа.Характеристика,
	|	УсловнаяПродажа.СтавкаНДС,
	|	УсловнаяПродажа.НалоговоеНазначение,
	|	УсловнаяПродажа.НалоговоеНазначениеПоФакту,
	|	УсловнаяПродажа.ПредполагаемоеКоличество,
	|	УсловнаяПродажа.Количество,
	|	УсловнаяПродажа.ПредполагаемаяСтоимостьРегл,
	|	УсловнаяПродажа.СтоимостьРегл,
	|	УсловнаяПродажа.ПредполагаемыйНДСРегл,
	|	УсловнаяПродажа.НДСРегл,
	|	УсловнаяПродажа.НДСРеглРучныеКорректировки
	|ИЗ
	|	АнализУсловныхПродаж КАК УсловнаяПродажа
	|ГДЕ
	|	УсловнаяПродажа.СтатусРасхождения >= 3
	|
	|УПОРЯДОЧИТЬ ПО
	|	УсловнаяПродажа.ВидУсловнойПродажи,
	|	УсловнаяПродажа.Организация,
	|	УсловнаяПродажа.СтавкаНДС,
	|	УсловнаяПродажа.НалоговоеНазначение,
	|	УсловнаяПродажа.НалоговоеНазначениеПоФакту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыАнализаПродажПоОрганизациям.Организация
	|ИЗ
	|	ПериодыАнализаПродажПоОрганизациям КАК ПериодыАнализаПродажПоОрганизациям
	|ГДЕ
	|	ПериодыАнализаПродажПоОрганизациям.РасширенныйПериод";
		

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаЗначений = РезультатЗапроса[0].Выгрузить();
	
	ОрганизацииРасширенныйПериод.Очистить();
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацииРасширенныйПериод.Добавить(Выборка.Организация);
	КонецЦикла;
	
	Объект.УсловныеПродажи.Загрузить(ТаблицаЗначений);
	
	НастроитьЭлементыФормы();
	
	Элементы.УсловныеПродажи.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловныеПродажиКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловныеПродажиПредполагаемоеКоличество.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УсловныеПродажи.ПредполагаемоеКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УсловныеПродажи.Количество");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловныеПродажиНДСРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловныеПродажиПредполагаемыйНДСРегл.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УсловныеПродажи.ПредполагаемыйНДСРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УсловныеПродажи.НДСРегл");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловныеПродажиСтоимостьРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловныеПродажиПредполагаемаяСтоимостьРегл.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УсловныеПродажи.ПредполагаемаяСтоимостьРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УсловныеПродажи.СтоимостьРегл");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УсловныеПродажиНДСРеглРучныеКорректировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УсловныеПродажи.НДСРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УсловныеПродажи.НДСРеглРучныеКорректировки");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);

	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ВидОперации
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокВидОперации.Имя);

	//Группа отбора
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//Отбор
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа");
	//Отбор
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Тип");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("ДокументСсылка.Приложение2КНалоговойНакладной");

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Сторно условной продажи';uk='Сторно умовного продажу'"));
	
	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ВидОперации
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокВидОперации.Имя);

	//Группа отбора
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//Отбор
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа");
	//Отбор
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Тип");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("ДокументСсылка.Приложение2КНалоговойНакладной");

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Корректировка условной продажи';uk='Коригування умовного продажу'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДекорацииАктуальностьТаблицыКОформлению(Актуальность)

	Элементы.ДекорацияАктуальностьТаблицыКОформлению.Видимость = Не Актуальность; 	

КонецПроцедуры

#КонецОбласти



#Область ПрограммныйИнтерфейс

// Возвращает валюту управленческого учета
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту УУ. Если валюта УУ не заполнена - возвращает пустую ссылку на валюту
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты
//
Функция ПолучитьВалютуУправленческогоУчета(Знач Валюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		Возврат Валюта;
	КонецЕсли;
	
КонецФункции // ПолучитьВалютуУправленческогоУчета()

// Процедура заполняет статью и аналитику расходов последними использованными в документах.
//
Процедура ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(ХозяйственнаяОперация, Организация, Подразделение, ТекущиеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|
	|	ТаблицаАналитикРасходов.СтатьяРасходов		КАК СтатьяРасходов,
	|	ТаблицаАналитикРасходов.АналитикаРасходов	КАК АналитикаРасходов
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документ.Дата						КАК Период,
	|		ДанныеДокумента.СтатьяРасходов		КАК СтатьяРасходов,
	|		ДанныеДокумента.АналитикаРасходов	КАК АналитикаРасходов
	|	ИЗ
	|		Документ.ЗаказНаВнутреннееПотребление КАК Документ
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ЗаказНаВнутреннееПотребление.Товары КАК ДанныеДокумента
	|		ПО
	|			Документ.Ссылка = ДанныеДокумента.Ссылка
	|			И ДанныеДокумента.Номенклатура = &Номенклатура
	|	ГДЕ
	|		Документ.Проведен
	|		И Документ.Организация				= &Организация
	|		И Документ.Подразделение			= &Подразделение
	|		И Документ.ХозяйственнаяОперация	= &ХозяйственнаяОперация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Документ.Дата						КАК Период,
	|		ДанныеДокумента.СтатьяРасходов		КАК СтатьяРасходов,
	|		ДанныеДокумента.АналитикаРасходов	КАК АналитикаРасходов
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров КАК Документ
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ВнутреннееПотреблениеТоваров.Товары КАК ДанныеДокумента
	|		ПО
	|			Документ.Ссылка = ДанныеДокумента.Ссылка
	|			И ДанныеДокумента.Номенклатура = &Номенклатура
	|	ГДЕ
	|		Документ.Проведен
	|		И Документ.Организация				= &Организация
	|		И Документ.Подразделение			= &Подразделение
	|		И Документ.ХозяйственнаяОперация	= &ХозяйственнаяОперация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Документ.Дата						КАК Период,
	|		ДанныеДокумента.СтатьяРасходов		КАК СтатьяРасходов,
	|		ДанныеДокумента.АналитикаРасходов	КАК АналитикаРасходов
	|	ИЗ
	|		Документ.ПрочееОприходованиеТоваров КАК Документ
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ПрочееОприходованиеТоваров.Товары КАК ДанныеДокумента
	|		ПО
	|			Документ.Ссылка = ДанныеДокумента.Ссылка
	|			И ДанныеДокумента.Номенклатура = &Номенклатура
	|	ГДЕ
	|		Документ.Проведен
	|		И Документ.Организация				= &Организация
	|		И Документ.Подразделение			= &Подразделение
	|		И Документ.ХозяйственнаяОперация	= &ХозяйственнаяОперация
	|	) КАК ТаблицаАналитикРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаАналитикРасходов.Период УБЫВ");
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",	ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Подразделение",			Подразделение);
	Запрос.УстановитьПараметр("Номенклатура",			ТекущиеДанные.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Выборка);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию()

// Процедура выполняет заполнение или очистку аналитики доходов при изменении статьи доходов.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Данные документа
//	СтатьяДоходов - ПланВидовХарактеристикСсылка.СтатьиДоходов - Указанная в документе статья доходов
//	АналитикаДоходов - Характеристика.СтатьиДоходов - Аналитика статьи доходов
//
Процедура СтатьяДоходовПриИзменении(Объект, СтатьяДоходов, Подразделение, АналитикаДоходов) Экспорт
	
	Если ЗначениеЗаполнено(АналитикаДоходов) Тогда
		Если ЗначениеЗаполнено(СтатьяДоходов) Тогда
			ОписаниеТипов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДоходов, "ТипЗначения");
			ОчиститьАналитику = НЕ ОписаниеТипов.СодержитТип(ТипЗнч(АналитикаДоходов)); 
		Иначе
			ОчиститьАналитику = Истина;
		КонецЕсли;
		Если ОчиститьАналитику Тогда
			АналитикаДоходов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АналитикаДоходов) Тогда
		АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
			СтатьяДоходов,
			Объект,
			Подразделение);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение или очистку аналитики расходов при изменении статьи расходов.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Данные документа
//	СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Указанная в документе статья расходов
//	АналитикаРасходов - Характеристика.СтатьиРасходов - Аналитика статьи расходов
//
Процедура СтатьяРасходовПриИзменении(Объект, СтатьяРасходов, АналитикаРасходов) Экспорт
	
	Если СтатьяРасходов.ЭтоГруппа Тогда
		СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АналитикаРасходов) Тогда
		Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
			ОписаниеТипов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходов, "ТипЗначения");
			ОчиститьАналитику = НЕ ОписаниеТипов.СодержитТип(ТипЗнч(АналитикаРасходов)); 
		Иначе
			ОчиститьАналитику = Истина;
		КонецЕсли;
		Если ОчиститьАналитику Тогда
			АналитикаРасходов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АналитикаРасходов) Тогда
		АналитикаРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьАналитикуРасходовПоУмолчанию(
			СтатьяРасходов,
			Объект);
	Иначе
		ОчиститьАналитикуПрочихРасходов(СтатьяРасходов, АналитикаРасходов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает аналитику расходов, если она не соответствует статье расходов.
//
// Параметры:
//	СтатьяРасходов - ПланВидоХарактеристик.СтатьиРасходов - Выбранная статья расходов
//	АналитикаРасходов - Характеристика.СтатьиРасходов - Указанная аналитика расходов
//
Процедура ОчиститьАналитикуПрочихРасходов(СтатьяРасходов, АналитикаРасходов) Экспорт
	
	Если ТипЗнч(АналитикаРасходов) = Тип("СправочникСсылка.ПрочиеРасходы") Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина КАК ОчиститьАналитику
		|ИЗ
		|	Справочник.ПрочиеРасходы КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &АналитикаРасходов
		|	И ДанныеСправочника.Владелец <> &СтатьяРасходов
		|");
		Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
		Запрос.УстановитьПараметр("АналитикаРасходов", АналитикаРасходов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ОчиститьАналитику Тогда
				АналитикаРасходов = Справочники.ПрочиеРасходы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение или очистку аналитики активов и пассивов при изменении статьи активов и пассивов.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Данные документа
//	СтатьяАктивовПассивов - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - Указанная в документе статья активов и пассивов
//	АналитикаАктивовПассивов - Характеристика.СтатьиАктивовПассивов - Аналитика статьи активов и пассивов
//
Процедура СтатьяАктивовПассивовПриИзменении(Объект, СтатьяАктивовПассивов, АналитикаАктивовПассивов) Экспорт
	
	Если ЗначениеЗаполнено(АналитикаАктивовПассивов) Тогда
		Если ЗначениеЗаполнено(СтатьяАктивовПассивов) Тогда
			ОписаниеТипов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяАктивовПассивов, "ТипЗначения");
			ОчиститьАналитику = НЕ ОписаниеТипов.СодержитТип(ТипЗнч(АналитикаАктивовПассивов)); 
		Иначе
			ОчиститьАналитику = Истина;
		КонецЕсли;
		Если ОчиститьАналитику Тогда
			АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АналитикаАктивовПассивов) Тогда
		АналитикаАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПолучитьАналитикуАктивовПассивовПоУмолчанию(
			СтатьяАктивовПассивов,
			Объект);
	Иначе
		ОчиститьАналитикуПрочихАктивовПассивов(СтатьяАктивовПассивов, АналитикаАктивовПассивов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает аналитику активов и пассивов, если она не соответствует статье активов и пассивов.
//
// Параметры:
//	СтатьяАктивовПассивов - ПланВидоХарактеристик.СтатьиАктивовПассивов - Выбранная статья активов и пассивов
//	АналитикаАктивовПассивов - Характеристика.СтатьиАктивовПассивов - Указанная аналитика активов и пассивов
//
Процедура ОчиститьАналитикуПрочихАктивовПассивов(СтатьяАктивовПассивов, АналитикаАктивовПассивов) Экспорт
	
	Если ТипЗнч(АналитикаАктивовПассивов) = Тип("СправочникСсылка.ПрочиеАктивыПассивы") Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина КАК ОчиститьАналитику
		|ИЗ
		|	Справочник.ПрочиеАктивыПассивы КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &АналитикаАктивовПассивов
		|	И ДанныеСправочника.Владелец <> &СтатьяАктивовПассивов
		|");
		Запрос.УстановитьПараметр("СтатьяАктивовПассивов", СтатьяАктивовПассивов);
		Запрос.УстановитьПараметр("АналитикаАктивовПассивов", АналитикаАктивовПассивов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ОчиститьАналитику Тогда
				АналитикаАктивовПассивов = Справочники.ПрочиеАктивыПассивы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает контрагента из документа основания
//
// Параметры
//  ДокументОснование	- документ-основание
//
// Возвращаемое значение:
//   Ссылка на контрагента
//
Функция ПолучитьКонтрагентаИзОснования(ДокументОснование) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТипОснования = ТипЗнч(ДокументОснование);
	
	Контрагент = Неопределено;
	
	Если ТипОснования = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Контрагент,ХозяйственнаяОперация,БанковскийСчетПолучатель");
		Если ЗначенияРеквизитов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Контрагент = ЗначенияРеквизитов.БанковскийСчетПолучатель.Владелец;
		Иначе
			Контрагент = ЗначенияРеквизитов.Контрагент;
		КонецЕсли; 

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Контрагент,ХозяйственнаяОперация,КассаПолучатель");

		Если ЗначенияРеквизитов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Контрагент = ЗначенияРеквизитов.КассаПолучатель.Владелец;
		Иначе
			Контрагент = ЗначенияРеквизитов.Контрагент;
		КонецЕсли; 
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		// Нет возможности однозначно определить контрагента, т.к. сведения хранятся в табличной части
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		// Нет возможности однозначно определить контрагента, т.к. сведения хранятся в табличной части
		
	КонецЕсли;

	Возврат Контрагент;
	
КонецФункции

// Процедура заполняет значение реквизита ТЧ "ТипСтатьи" значением:
// 	- 1, если в качестве статьи выбрана СтатьяРасходов
// 	- 2, если в качестве статьи выбрана СтатьяДоходов
// 	- 3, если в качестве статьи выбрана СтатьяАктивовПассивов
// Данный реквизит используется в условном оформлении формы.
// 
// Параметры:
// 		ТаблицаФормы - ДанныеФормыКоллекция
// 		ИмяПоляСтатьи - Строка - Имя поля статьи, тип которой необходимо проанализировать
//
Процедура ЗаполнитьТипСтатьи(ТаблицаФормы, ИмяПоляСтатьи = "СтатьяРасходов") Экспорт
	
	Для каждого Строка Из ТаблицаФормы Цикл
		Статья = Строка[ИмяПоляСтатьи];
		Если (ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")) Тогда 
			Строка.ТипСтатьи = 1;
		ИначеЕсли (ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов")) Тогда
			Строка.ТипСтатьи = 2;
		ИначеЕсли (ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов")) Тогда
			Строка.ТипСтатьи = 3;
		Иначе
			Строка.ТипСтатьи = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура инициализирует поле статьи составного типа в ТЧ пустой ссылкой по умолчанию
//
// Параметры:
// 	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
// 	ИмяРекизита - Строка - Имя реквизита статьи расходов, доходов или активов/пассивов
//
Процедура ИнициализироватьПустоеЗначениеСтатьиВТЧ(ТабличнаяЧасть, ИмяРекизита) Экспорт
	
	Если ИмяРекизита = "СтатьяРасходов" Тогда
		ПустаяСтатья = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	ИначеЕсли ИмяРекизита = "СтатьяДоходов" Тогда
		ПустаяСтатья = ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка();
	Иначе
		ПустаяСтатья = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		Если Строка[ИмяРекизита] = Неопределено Тогда
			Строка[ИмяРекизита] = ПустаяСтатья;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура дополняет условное оформление элементами, обеспечивающими совместное отображение в табличной части
// аналитики статей доходов, статей расходов и статьей активов/пассивов
//
// Параметры:
// 	 УсловноеОформление - УсловноеОформление - условное оформление формы
// 	 ИмяТЧ - Строка - имя табличной части
// 	 ТипыСтатей - Массив - Типы статей, которые используются в ТЧ (1 - Статьи расходов, 2 - Статьи доходов, 3 - СтатьиАктивовПассивов)
//
Процедура УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(Форма, ИмяТЧ, ТипыСтатей) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	Если ТипыСтатей.Найти(1) <> Неопределено Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "АналитикаРасходов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 1;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	КонецЕсли;
	
	Если ТипыСтатей.Найти(2) <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "АналитикаДоходов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 2;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
	Если ТипыСтатей.Найти(3) <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "АналитикаАктивовПассивов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 3;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыРаспределенияДоходовИРасходовПоБазеРаспределения

// Процедура выполняет распределение расходов на себестоимость товаров 
// по рассчитанной базе распределения.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	СтруктураДополнительныеСвойства - Структура - Дополнительные свойства документа
//	Движения - КоллекцияДвижений - Наборы записей регистров
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура РаспределитьРасходыНаСебестоимостьТоваровПоБазе(ДокументОбъект, СтруктураДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасходов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходов;
	РезультатЗапросаПоБазе = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.РезультатЗапросаПоБазе;

	Если Отказ Или ТаблицаРасходов.Количество() = 0 Или РезультатЗапросаПоБазе.Пустой() Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейСебестоимостьТоваров = Движения.СебестоимостьТоваров;
	НаборЗаписейСебестоимостьТоваров.Записывать = Истина;

	СчетчикЗаписей  = 0;
	СтруктураОтбора = Новый Структура("ИндексБазы");

	// Выборка строк базы распределения по индексу аналитики.
	ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексу.Следующий() Цикл
		
		СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;

		// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
		// Данные затраты будут распределены по одинаковой базе распределения.
		МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		Если МассивРасходов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоИндексу.База = 0 Тогда
			
			Выборка.Следующий();
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отсутствует база для распределения расходов по правилу %1 для аналитики %2. Укажите другое правило или удалите строку из документа.';uk='Відсутня база для розподілу витрат за правилом %1 для аналітики %2. Вкажіть інше правило або видаліть рядок з документа.'"),
				Выборка.ПравилоРаспределения,
				Выборка.АналитикаРасходов);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Расходы[" + (МассивРасходов[0].НомерСтроки - 1) + "].ПравилоРаспределения",
				,
				Отказ);
			
			Продолжить;
			
		КонецЕсли;

		Для Каждого СтрокаРасходов Из МассивРасходов Цикл
		
			СуммаКРаспределению = СтрокаРасходов.Сумма;
			СуммаБезНДСКРаспределению = СтрокаРасходов.СуммаБезНДС;
			СуммаРеглКРаспределению = СтрокаРасходов.СуммаРегл;
			БазаВсего = ВыборкаПоИндексу.База;
		
			// Выборка строк базы распределения по индексу базы распределения
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл

				Если БазаВсего <> 0 Тогда
					Стоимость = Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьБезНДС = Окр(СуммаБезНДСКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьРегл = Окр(СуммаРеглКРаспределению * Выборка.База / БазаВсего, 2, 1);
				Иначе
					Стоимость = 0;
					СтоимостьБезНДС = 0;
					СтоимостьРегл = 0;
				КонецЕсли;

				СуммаКРаспределению = СуммаКРаспределению - Стоимость;
				СуммаБезНДСКРаспределению = СуммаБезНДСКРаспределению - СтоимостьБезНДС;
				СуммаРеглКРаспределению = СуммаРеглКРаспределению - СтоимостьРегл;
				БазаВсего = БазаВсего - Выборка.База;

				СчетчикЗаписей = СчетчикЗаписей + 1;
				НоваяЗапись = НаборЗаписейСебестоимостьТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРасходов);
				НоваяЗапись.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры;
				НоваяЗапись.Количество = 0;
				НоваяЗапись.ВидЗапасов = Выборка.ВидЗапасов;
				НоваяЗапись.Организация = Выборка.Организация;
				НоваяЗапись.СуммаДопРасходов = Стоимость;
				НоваяЗапись.СуммаДопРасходовБезНДС = СтоимостьБезНДС;
				НоваяЗапись.СтоимостьРегл = СтоимостьРегл;

				Если СчетчикЗаписей > 1000 Тогда

					СчетчикЗаписей = 0;
					НаборЗаписейСебестоимостьТоваров.Записать(Ложь);

				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если СчетчикЗаписей > 0 Тогда
		НаборЗаписейСебестоимостьТоваров.Записать(Ложь);
	КонецЕсли;

	НаборЗаписейСебестоимостьТоваров.Записывать = Ложь;

КонецПроцедуры // РаспределитьРасходыНаСебестоимостьТоваровПоБазе()

#КонецОбласти

#Область ПолучениеТаблицыРаспределенияРасходовНаСебестоимостьТоваровДляФормированияДокументаПоступлениеДопрасходовПриОбменеСБп20

// Функция формирует таблицу с данными распределения расходов на себестоимость товаров.
//
// Параметры:
//	ДокументСсылка - Документ, которым отражены расходы, распределяемые на себестоимость товаров.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Тбалица распределения расходов
//
Функция ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ТекстЗапроса = ТекстЗапросаВтТаблицаРасходов()
		+ ТекстЗапросаТаблицаСпособовРаспределения()
		+ ТекстЗапросаТаблицаДокументов()
		+ ТекстЗапросаТаблицаПоступленияТоваров()
		+ ТекстЗапросаТаблицаБазыРаспределения()
		+ ТекстЗапросаТаблицаРасходов()
	;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// МассивРезультатов[0] - временная таблица "ВтТаблицаРасходов"
	// МассивРезультатов[1] - временная таблица "ТаблицаСпособовРаспределения"
	// МассивРезультатов[2] - временная таблица "ТаблицаДокументов"
	// МассивРезультатов[3] - временная таблица "ВтПоступленияТоваров"
	// МассивРезультатов[4] - временная таблица "ТаблицаПоступленияТоваров"
	РезультатЗапросаПоБазе = МассивРезультатов[5];
	ТаблицаРасходов = МассивРезультатов[6].Выгрузить();
	
	// Сформируем таблицу распределения расходов.
	ТаблицаРаспределенияРасходов = Новый ТаблицаЗначений;
	Колонки = ТаблицаРаспределенияРасходов.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3));
	Колонки.Добавить("СтоимостьТоваров", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("СуммаНДС", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	Колонки.Добавить("ДокументПоступления", Новый ОписаниеТипов(МассивТипов));
	
	Если Не ТаблицаРасходов.Количество() = 0
	 И Не РезультатЗапросаПоБазе.Пустой() Тогда
	 
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		КэшКурсовВалют = РаботаСКурсамивалютУТ.ИнициализироватьКэшКурсовВалют();
		КурсВалютыУпр = 1;
		КурсВалютыРегл = 1;

		СтруктураОтбора = Новый Структура("ИндексБазы");

		// Выборка строк базы распределения по индексу аналитики.
		ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоИндексу.Следующий() Цикл
			
			СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;

			// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
			// Данные затраты будут распределены по одинаковой базе распределения.
			МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
			Если МассивРасходов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаПоИндексу.База = 0 Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаРасходов Из МассивРасходов Цикл
			
				СуммаКРаспределению = СтрокаРасходов.Сумма;
				СуммаНДСкРаспределению = СтрокаРасходов.СуммаНДС;
				БазаВсего = ВыборкаПоИндексу.База;
			
				// Выборка строк базы распределения по индексу базы распределения
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл

					Если БазаВсего <> 0 Тогда
						Сумма = Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1); 
						СуммаНДС = Окр(СуммаНДСкРаспределению * Выборка.База / БазаВсего, 2, 1) ;
					Иначе
						Сумма = 0;
						СуммаНДС = 0;
					КонецЕсли;

					СуммаКРаспределению = СуммаКРаспределению - Сумма;
					СуммаНДСКРаспределению = СуммаНДСкРаспределению - СуммаНДС;
					БазаВсего = БазаВсего - Выборка.База;
					
					НоваяСтрока = ТаблицаРаспределенияРасходов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Сумма = Сумма;
					НоваяСтрока.СуммаНДС = СуммаНДС;
					
					Если ВалютаУпр <> ВалютаРегл Тогда
						КурсВалютыУпр = РаботаСКурсамиВалютУт.ПолучитьКурсВалютыИзКэша(ВалютаУпр, Выборка.Дата, КэшКурсовВалют);
						КурсВалютыРегл = РаботаСКурсамиВалютУт.ПолучитьКурсВалютыИзКэша(ВалютаРегл, Выборка.Дата, КэшКурсовВалют);
						Если КурсВалютыРегл <> 0 Тогда
							НоваяСтрока.СтоимостьТоваров = НоваяСтрока.СтоимостьТоваров * КурсВалютыУпр / КурсВалютыРегл;
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРаспределенияРасходов; 
	
КонецФункции // ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров()

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоУчетуДоходовИРасходов

// Процедура формирования движений по регистру "Учет прочих доходов".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрочиеДоходы;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.ПрочиеДоходы;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьПрочиеДоходы()

// Процедура формирования движений по регистру "Учет прочих расходов".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрочиеРасходы;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.ПрочиеРасходы;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьПрочиеРасходы()

// Процедура формирования движений по регистру "Прочие активы и пассивы".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрочиеАктивыПассивы;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.ПрочиеАктивыПассивы;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Партии прочих расходов".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииПрочихРасходов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПартииПрочихРасходов.Записывать = Истина;
	Движения.ПартииПрочихРасходов.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Учет себестоимости товаров".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСебестоимостьТоваров;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.СебестоимостьТоваров;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьСебестоимостьТоваров()

// Процедура формирования движений по регистру "Себестоимость товаров".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыручкаИСебестоимостьПродаж;

	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДвиженияРасчеты = Движения.ВыручкаИСебестоимостьПродаж;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьПрочиеРасходы()

// Процедура формирования движений по регистру "Финансовые результаты".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьФинансовыеРезультаты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыеРезультаты;

	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДвиженияРасчеты = Движения.ФинансовыеРезультаты;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьФинансовыеРезультаты()

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоУчетуНдс


// Процедура формирования движений по регистру "Корректировки НДС партий"
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьКорректировкиНДСПартий(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКорректировкиНДСПартий;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.КорректировкиНДСПартий.Записывать = Истина;
	Движения.КорректировкиНДСПартий.Загрузить(ТаблицаДвижений);
	Движения.КорректировкиНДСПартий.УстановитьАктивность(Истина);
	
КонецПроцедуры // ОтразитьКорректировкиНДСПартий

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеТаблицыРаспределенияРасходовНаСебестоимостьТоваровДляФормированияДокументаПоступлениеДопрасходовПриОбменеСБп20

// Функция формирует текст запроса для временной таблицы расходов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаВтТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.СтатьяРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения,
	|	ТаблицаТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС
	|
	|ПОМЕСТИТЬ ВтТаблицаРасходов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаРасходы.СтатьяРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(ТаблицаРасходы.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРасходы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов.Расходы КАК ТаблицаРасходы
	|ГДЕ
	|	ТаблицаРасходы.Ссылка = &Ссылка
	|	И ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов
	|;
	|////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВтТаблицаРасходов()

// Функция формирует текст запроса для таблицы способов распределения.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаСпособовРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРасходы.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР КОГДА ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК АналитикаЗаполнена,
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК ИндексБазы
	|	
	|ПОМЕСТИТЬ ТаблицаСпособовРаспределения
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ВЫБОР КОГДА ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов
	|;
	|///////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаСпособовРаспределения()

// Функция формирует текст запроса для таблицы документов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаДокументов()
	
	ТекстЗапроса = "
	|// Поступление товаров по конкретным документам закупки или по заказам поставщикам.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И (ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|       	ИЛИ ТаблицаТовары.ЗаказПоставщику = ТаблицаСпособовРаспределения.АналитикаРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Поступления товаров по любым документам закупки.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (ТаблицаТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) 
	|		И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Передачи товаров между организациями.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|///////////////////////////////////////////////////////////////////////////////////	
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаДокументов()

// Функция формирует текст запроса для таблицы поступления товаров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаПоступленияТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	АналитикаНоменклатуры.Склад КАК Склад,
	|	УчетСебестоимости.Период КАК Период,
	|	УчетСебестоимости.Регистратор КАК ДокументПоступления,
	|	УчетСебестоимости.КоличествоПриход КАК Количество,
	|	УчетСебестоимости.СтоимостьРеглПриход КАК Стоимость
	|
	|ПОМЕСТИТЬ ВтПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Обороты(,, Регистратор,
	|		РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		И Организация = &Организация
	|	) КАК УчетСебестоимости
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|
	|ГДЕ
	|	УчетСебестоимости.КоличествоПриход > 0
	|	И УчетСебестоимости.СтоимостьРеглПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	ДокументПоступления
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексБазы КАК ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(ВтПоступленияТоваров.Количество) КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость) КАК Стоимость
	|
	|ПОМЕСТИТЬ ТаблицаПоступленияТоваров
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ВтПоступленияТоваров.ДокументПоступления = ТаблицаДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(ВтПоступленияТоваров.Количество) КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость) КАК Стоимость
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ВтПоступленияТоваров.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (ТаблицаСпособовРаспределения.АналитикаРасходов = ВтПоступленияТоваров.Склад
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ВтПоступленияТоваров.Номенклатура
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексБазы
	|;
	|///////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаПоступленияТоваров()

// Функция формирует текст запроса для таблицы базы распределения.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаБазыРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	ТаблицаПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	ТаблицаПоступленияТоваров.ДокументПоступления.Дата КАК Дата,
	|	ТаблицаПоступленияТоваров.Количество КАК Количество,
	|	ТаблицаПоступленияТоваров.Стоимость КАК СтоимостьТоваров,
	|	
	|	ВЫБОР КОГДА ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		= ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноКоличеству)
	|	ТОГДА
	|		ЕСТЬNULL(ТаблицаПоступленияТоваров.Количество, 0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ТаблицаПоступленияТоваров.Стоимость, 0)
	|	КОНЕЦ КАК База
	|
	|ИЗ
	|	ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПоступленияТоваров КАК ТаблицаПоступленияТоваров
	|	ПО
	|		ТаблицаСпособовРаспределения.ИндексБазы = ТаблицаПоступленияТоваров.ИндексБазы
	|ИТОГИ
	|	СУММА(База)
	|ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаБазыРаспределения()

// Функция формирует текст запроса для таблицы расходов к распределению.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	СУММА(ТаблицаРасходы.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРасходы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаРасходы.ПравилоРаспределения = ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		И ТаблицаРасходы.АналитикаРасходов = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаРасходов()

#КонецОбласти

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список используемых способов для обеспечения работой.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура работы,
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика работы,
//
// Возвращаемое значение:
//  Список значений - Список, содержащий способы обеспечения работой.
//
Функция СписокСпособовОбеспечения(Номенклатура, Характеристика) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаборДанных.Способ                             КАК СпособОбеспечения,
		|	ПРЕДСТАВЛЕНИЕ(НаборДанных.Способ)              КАК СпособОбеспеченияПредставление,
		|	МИНИМУМ(НаборДанных.Приоритет)                 КАК Приоритет,
		|	МИНИМУМ(НаборДанных.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
		|ИЗ(
		|	ВЫБРАТЬ
		|		Способы.СпособОбеспеченияПотребностей КАК Способ,
		|		1                                     КАК Приоритет,
		|		Способы.РеквизитДопУпорядочивания     КАК РеквизитДопУпорядочивания
		|	ИЗ
		|		РегистрСведений.ВариантыОбеспеченияТоварами КАК Способы
		|	ГДЕ
		|		Способы.Характеристика            = &Характеристика
		|		И Способы.Номенклатура            = &Номенклатура
		|		И &Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И Способы.СпособОбеспеченияПотребностей.ТипОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство))
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Способы.СпособОбеспеченияПотребностей КАК Способ,
		|		2                                     КАК Приоритет,
		|		Способы.РеквизитДопУпорядочивания     КАК РеквизитДопУпорядочивания
		|	ИЗ
		|		РегистрСведений.ВариантыОбеспеченияТоварами КАК Способы
		|	ГДЕ
		|		Способы.Характеристика            = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И Способы.Номенклатура            = &Номенклатура
		|		И Способы.СпособОбеспеченияПотребностей.ТипОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство))
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		КонстантаОсновнойСпособ.Значение КАК Способ,
		|		3                                КАК Приоритет,
		|		1                                КАК РеквизитДопУпорядочивания
		|	ИЗ
		|		Константа.ОсновнойСпособОбеспеченияПотребностей КАК КонстантаОсновнойСпособ
		|	ГДЕ
		|		КонстантаОсновнойСпособ.Значение <> ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)
		|		И КонстантаОсновнойСпособ.Значение.ТипОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)) ) КАК НаборДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.Способ
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	РеквизитДопУпорядочивания";

	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);

	Выборка = Запрос.Выполнить().Выбрать();

	Список = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.СпособОбеспечения, Выборка.СпособОбеспеченияПредставление);
	КонецЦикла;

	Возврат Список;

КонецФункции

Функция ЗаполнитьСпособОбеспечения(Таблица, СпособОбеспечения) Экспорт
	
	Набор = РегистрыСведений.ВариантыОбеспеченияРаботами.СоздатьНаборЗаписей();
	ОбработанныеСтроки = Новый Массив();
	
	Если ЗначениеЗаполнено(СпособОбеспечения) Тогда
		
		Набор.Добавить();
		Запись = Набор[0];
		Запись.РеквизитДопУпорядочивания = 1;
		Запись.СпособОбеспеченияПотребностей = СпособОбеспечения;
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
			Набор.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
			Набор.Отбор.Характеристика.Установить(СтрокаТаблицы.Характеристика);
			
			Попытка
				
				Набор.Записать();
				ОбработанныеСтроки.Добавить(СтрокаТаблицы.Идентификатор);
				
			Исключение
				
			КонецПопытки;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			Набор.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
			Набор.Отбор.Характеристика.Установить(СтрокаТаблицы.Характеристика);
			
			Попытка
				
				Набор.Записать();
				ОбработанныеСтроки.Добавить(СтрокаТаблицы.Идентификатор);
				
			Исключение
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	Возврат ОбработанныеСтроки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
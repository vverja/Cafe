#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Выполняет расчет ABC класса номенклатуры и записывает его в регистр
//
//	Параметры:
//		ДатаКлассификации - Дата - дата окончания периода, за который нужно выбрать данные для
//			классификации, если Неопределенно - используется текущая дата
//
Процедура ВыполнитьABCКлассификацию(ДатаКлассификации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж");
	УчитыватьПравилаВнутреннегоТовародвижения = Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриABCКлассификацииНоменклатуры.Получить();
	
	Если Не ИспользоватьКлассификациюПоВаловойПрибыли И Не ИспользоватьКлассификациюПоВыручке И Не ИспользоватьКлассификациюПоКоличеству Тогда
		Возврат;
	КонецЕсли;
	
	ПериодКлассификации = Константы.ПериодABCКлассификацииНоменклатуры.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовABCКлассификацииНоменклатуры.Получить();
	
	Если ПериодКлассификации.Пустая() Или КоличествоПериодовКлассификации = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Склад КАК Склад,
	|	РегистрСведенийАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ВыручкаИСебестоимостьПродажОбороты.Подразделение КАК Подразделение,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот - ВыручкаИСебестоимостьПродажОбороты.СебестоимостьОборот - ВыручкаИСебестоимостьПродажОбороты.СуммаДополнительныхРасходовОборот КАК ВаловаяПрибыль,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Выручка,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &ОкончаниеПериода, , ) КАК ВыручкаИСебестоимостьПродажОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрСведенийАналитикаУчетаПоПартнерам
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам = РегистрСведенийАналитикаУчетаПоПартнерам.КлючАналитики
	|ГДЕ
	|	РегистрСведенийАналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	НЕОПРЕДЕЛЕНО КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел0
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура   КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////
	|" + СтрЗаменить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ"), "РАЗРЕШЕННЫЕ", "")
	+"ВЫБРАТЬ
	|	1 КАК РазделительКлассификации,
	|	ИсточникДанных.Склад КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел1
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсточникДанных.Склад КАК Склад,
	|		ИсточникДанных.Номенклатура КАК Номенклатура,
	|		ИсточникДанных.Характеристика КАК Характеристика,
	|		ИсточникДанных.ВаловаяПрибыль КАК ВаловаяПрибыль,
	|		ИсточникДанных.Выручка КАК Выручка,
	|		ИсточникДанных.Количество КАК Количество
	|	ИЗ
	|		ИсточникДанных КАК ИсточникДанных
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|		И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей,
	|		ИсточникДанных.Номенклатура,
	|		ИсточникДанных.Характеристика,
	|		ИсточникДанных.ВаловаяПрибыль,
	|		ИсточникДанных.Выручка,
	|		ИсточникДанных.Количество
	|	ИЗ
	|		ИсточникДанных КАК ИсточникДанных
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособовОбеспечения
	|			ПО ТаблицаСпособовОбеспечения.Склад          = ИсточникДанных.Склад
	|			 И ТаблицаСпособовОбеспечения.Номенклатура   = ИсточникДанных.Номенклатура
	|			 И ТаблицаСпособовОбеспечения.Характеристика = ИсточникДанных.Характеристика
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособыОбеспечения
	|			ПО СпрСпособыОбеспечения.Ссылка = ТаблицаСпособовОбеспечения.СпособОбеспеченияПотребностей

	|	ГДЕ
	|		&УчитыватьПравилаВнутреннегоТовародвижения
	|		И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|		И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		И СпрСпособыОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
	|		И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей НЕ В(
	|			НЕОПРЕДЕЛЕНО,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|			ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2 КАК РазделительКлассификации,
	|	ИсточникДанных.Организация КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел2
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	3 КАК РазделКлассификации,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел3
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел0.РазделительКлассификации КАК РазделительКлассификации,
	|	ВТ_Раздел0.РазделКлассификации КАК РазделКлассификации,
	|	ВТ_Раздел0.Номенклатура КАК Номенклатура,
	|	ВТ_Раздел0.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел0.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВаловаяПрибыль,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.Выручка > 0
	|			ТОГДА ВТ_Раздел0.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выручка,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.Количество > 0
	|			ТОГДА ВТ_Раздел0.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВТ_Раздел0 КАК ВТ_Раздел0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел1.РазделительКлассификации,
	|	ВТ_Раздел1.РазделКлассификации,
	|	ВТ_Раздел1.Номенклатура,
	|	ВТ_Раздел1.Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел1.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.Выручка > 0
	|			ТОГДА ВТ_Раздел1.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.Количество > 0
	|			ТОГДА ВТ_Раздел1.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Раздел1 КАК ВТ_Раздел1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел2.РазделительКлассификации,
	|	ВТ_Раздел2.РазделКлассификации,
	|	ВТ_Раздел2.Номенклатура,
	|	ВТ_Раздел2.Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел2.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.Выручка > 0
	|			ТОГДА ВТ_Раздел2.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.Количество > 0
	|			ТОГДА ВТ_Раздел2.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2";
	
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		?(ДатаКлассификации = Неопределено, ТекущаяДата(), ДатаКлассификации), 
			ПериодКлассификации, -КоличествоПериодовКлассификации);
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("УчитыватьПравилаВнутреннегоТовародвижения", УчитыватьПравилаВнутреннегоТовародвижения);

	РезультатКлассификации = Запрос.Выполнить().Выгрузить();
	
	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда
		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "ВаловаяПрибыль");
		ОбновитьДанныеКлассификации(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоВыручке Тогда
		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "Выручка");
		ОбновитьДанныеКлассификации(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.Выручка, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоКоличеству Тогда
		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "Количество");
		ОбновитьДанныеКлассификации(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.Количество, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет XYZ класса номенклатуры и записывает его в регистр
//
//	Параметры:
//		ДатаКлассификации - Дата - дата окончания периода, за который нужно выбрать данные для
//			классификации, если Неопределенно - используется текущая дата
//
Процедура ВыполнитьXYZКлассификацию(ДатаКлассификации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж");
	УчитыватьПравилаВнутреннегоТовародвижения = Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриXYZКлассификацииНоменклатуры.Получить();
	
	Если НЕ ИспользоватьКлассификациюПоВаловойПрибыли И НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда
		Возврат;
	КонецЕсли;
	
	ПериодКлассификации = Константы.ПериодXYZКлассификацииНоменклатуры.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовXYZКлассификацииНоменклатуры.Получить();
	ПодпериодКлассификации = Константы.ПодпериодXYZКлассификацииНоменклатуры.Получить();
	
	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 ИЛИ ПодпериодКлассификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПодпериодКлассификации = ОбщегоНазначения.ИмяЗначенияПеречисления(ПодпериодКлассификации);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Склад КАК Склад,
	|	РегистрСведенийАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ВыручкаИСебестоимостьПродажОбороты.Подразделение КАК Подразделение,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.Период КАК Период,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот - ВыручкаИСебестоимостьПродажОбороты.СебестоимостьОборот - ВыручкаИСебестоимостьПродажОбороты.СуммаДополнительныхРасходовОборот КАК ВаловаяПрибыль,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Выручка,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(НАЧАЛОПЕРИОДА(&НачалоПериода, " + СтрокаПодпериодКлассификации + "), КОНЕЦПЕРИОДА(&ОкончаниеПериода, " + СтрокаПодпериодКлассификации + "), " + СтрокаПодпериодКлассификации + ", ) КАК ВыручкаИСебестоимостьПродажОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрСведенийАналитикаУчетаПоПартнерам
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам = РегистрСведенийАналитикаУчетаПоПартнерам.КлючАналитики
	|ГДЕ
	|	РегистрСведенийАналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура   КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////
	|" + СтрЗаменить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ"), "РАЗРЕШЕННЫЕ", "")
	+"ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	НЕОПРЕДЕЛЕНО КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Период КАК Период,
	|	ИсточникДанных.ВаловаяПрибыль КАК ВаловаяПрибыль,
	|	ИсточникДанных.Выручка КАК Выручка,
	|	ИсточникДанных.Количество КАК Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЕСТЬNULL(СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)),
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособовОбеспечения
	|			ПО ТаблицаСпособовОбеспечения.Склад          = ИсточникДанных.Склад
	|			 И ТаблицаСпособовОбеспечения.Номенклатура   = ИсточникДанных.Номенклатура
	|			 И ТаблицаСпособовОбеспечения.Характеристика = ИсточникДанных.Характеристика
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособыОбеспечения
	|			ПО СпрСпособыОбеспечения.Ссылка = ТаблицаСпособовОбеспечения.СпособОбеспеченияПотребностей

	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И СпрСпособыОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
	|	И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей НЕ В(
	|		НЕОПРЕДЕЛЕНО,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))

	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделительКлассификации
	|ИТОГИ
	|	МАКСИМУМ(РазделительКлассификации),
	|	СУММА(ВаловаяПрибыль),
	|	СУММА(Выручка),
	|	СУММА(Количество)
	|ПО
	|	РазделКлассификации,
	|	Номенклатура,
	|	Характеристика,
	|	Период ПЕРИОДАМИ(" + СтрокаПодпериодКлассификации
			+ ", НАЧАЛОПЕРИОДА(&НачалоПериода, " + СтрокаПодпериодКлассификации
			+ "), КОНЕЦПЕРИОДА(&ОкончаниеПериода, " + СтрокаПодпериодКлассификации + "))";
	
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		?(ДатаКлассификации = Неопределено, ТекущаяДата(), ДатаКлассификации),
		ПериодКлассификации,
		- КоличествоПериодовКлассификации);
	
	Запрос.УстановитьПараметр("НачалоПериода",    Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("УчитыватьПравилаВнутреннегоТовародвижения", УчитыватьПравилаВнутреннегоТовародвижения);

	ИсточникДанных = Новый Структура("ИсточникДанных", Запрос.Выполнить());
	
	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда
		
		РезультатКлассификации =
			Классификация.ВыполнитьXYZКлассификацию(
				ИсточникДанных, 
				"ВаловаяПрибыль", 
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);
		
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоВыручке Тогда
	
		РезультатКлассификации =
			Классификация.ВыполнитьXYZКлассификацию(
				ИсточникДанных,
				"Выручка",
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);
		
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоКоличеству Тогда
		
		РезультатКлассификации =
			Классификация.ВыполнитьXYZКлассификацию(
				ИсточникДанных,
				"Количество",
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);

	КонецЕсли;

КонецПроцедуры

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ВестиУчетПоГТД");
	Результат.Добавить("НоменклатураГТД");
	Результат.Добавить("ЦеноваяГруппа");
	Результат.Добавить("ИспользоватьУпаковки");
	Результат.Добавить("НаборУпаковок");
	Результат.Добавить("Качество");
	Результат.Добавить("СтавкаНДС");
	Результат.Добавить("ЛьготаНДС");
	Результат.Добавить("ИзмеряетсяТолькоВСуммовомВыражении");
	Результат.Добавить("ТекстДляПечатиВКолонкеЦенаНалоговойНакладной");
	Результат.Добавить("ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной");
	Результат.Добавить("ПодакцизныйТовар");
	Результат.Добавить("СтатьяДекларацииПоАкцизномуНалогу");
	Результат.Добавить("УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека");
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("Принципал");
	Результат.Добавить("Контрагент");
	
	Возврат Результат;

КонецФункции

// Проверяет могут ли переданные характеристика и упавка являться характеристикой и упаковой переданной
//номенклатуры. При проверке учитывается, что характеристики могут быть общими для вида номенклатуры,
//а упаковки общими для набора упаковок
//
//		Параметры:
//			Номенклатура - СправочникСсылка.Номенклатура - номенклатура-владелец характеристик и упаковок
//			Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - проверяемая характеристика
//			Упаковка - СправочникСсылка.Упаковка - проверяемая упаковка
//
//		Возвращаемое значение:
//			Структура - стуктура с полями
//				Характеристика - если проверяемая характеристика подходит, то записывается она, если нет - пустая ссылка
//				Упаковка - если провуеряемая упаковка подходит, то записывается она, если нет - пустая ссылка
//				ХарактеристикиИспользуются - равно ИСТИНА, если по номенклатуре ведется учет характеристик
//
Функция ХарактеристикаИУпаковкаПринадлежатВладельцу(Номенклатура, Характеристика, Упаковка) Экспорт
	
	СтруктураВозврата = Новый Структура("Характеристика, Упаковка, ХарактеристикиИспользуются");
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		СтруктураВозврата.Характеристика             = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СтруктураВозврата.Упаковка                   = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		СтруктураВозврата.ХарактеристикиИспользуются = Ложь;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(СпрУпаковки.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(СпрХарактеристики.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|		ПО (ВЫБОР
	|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА СпрНоменклатура.ВидНоменклатуры
	|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА СпрНоменклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = СпрХарактеристики.Владелец)
	|			И (СпрХарактеристики.Ссылка = &Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
	|		ПО (ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ СпрНоменклатура.НаборУпаковок
	|			КОНЕЦ = СпрУпаковки.Владелец)
	|			И (СпрУпаковки.Ссылка = &Упаковка)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка", 		Упаковка);
	
    Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	
	Возврат СтруктураВозврата;

КонецФункции

// Проверяет используются ли характеристики для переденной номенклатуры
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//	Возвращаемое значение:
//		Булево - ИСТИНА, если характеристики используются
//
Функция ХарактеристикиИспользуются(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикиИспользуются;
	
КонецФункции

// Возвращает значения реквизитов номеклатуры, если номенклатура не передана - возвращаются значения по умолчанию
//
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - номенклатура, чьи реквизиты нужно вернуть
//	Возвращаемое значение:
//		Структура - поля ВестиУчетПоГТД, НоменклатураГТД, ЕдиницаИзмерения, СтавкаНДС, ГруппаФинансовогоУчета, ЭтоУслуга, ПодакцизныйТовар, СтатьяДекларацииПоАкцизномуНалогу, УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека
//
Функция ЗначенияРеквизитовНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Номенклатура.ВестиУчетПоГТД КАК ВестиУчетПоГТД,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Номенклатура.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	Номенклатура.СтатьяДекларацииПоАкцизномуНалогу КАК СтатьяДекларацииПоАкцизномуНалогу,
	|	Номенклатура.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека КАК УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека,
	|	Номенклатура.НоменклатураГТД КАК НоменклатураГТД,
	|	ВЫБОР КОГДА Номенклатура.ТипНоменклатуры НЕ В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ЭтоУслуга
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВестиУчетПоГТД = Выборка.ВестиУчетПоГТД;
		СтавкаНДС = Выборка.СтавкаНДС;
		ЭтоУслуга = Выборка.ЭтоУслуга;
		ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		ГруппаФинансовогоУчета = Выборка.ГруппаФинансовогоУчета;
		ПодакцизныйТовар = Выборка.ПодакцизныйТовар;
		СтатьяДекларацииПоАкцизномуНалогу = Выборка.СтатьяДекларацииПоАкцизномуНалогу;
		УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека = Выборка.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека;
		НоменклатураГТД = Выборка.НоменклатураГТД;
	Иначе
		ВестиУчетПоГТД = Ложь;
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ЭтоУслуга = Неопределено;
		ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка();
		ПодакцизныйТовар = Ложь;
		СтатьяДекларацииПоАкцизномуНалогу = Неопределено;
		УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека = Ложь;
		НоменклатураГТД = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоГТД, 
											|СтавкаНДС, 
											|ЭтоУслуга, 
											|ЕдиницаИзмерения, 
											|ГруппаФинансовогоУчета, 
											|НоменклатураГТД, 
											|ПодакцизныйТовар, 
											|СтатьяДекларацииПоАкцизномуНалогу,
											|УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека",
	
		ВестиУчетПоГТД,
		СтавкаНДС,
		ЭтоУслуга,
		ЕдиницаИзмерения,
		ГруппаФинансовогоУчета,
		НоменклатураГТД,
		ПодакцизныйТовар,
		СтатьяДекларацииПоАкцизномуНалогу,
		УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека
		
	);
		
	
	Возврат СтруктураРеквизитов;

КонецФункции // ЗначенияРеквизитовНоменклатуры()

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") Тогда
		НеРедактируемыеРеквизиты.Добавить("ВидНоменклатуры");
	КонецЕсли;
	НеРедактируемыеРеквизиты.Добавить("ЕстьТоварыДругогоКачества");
	НеРедактируемыеРеквизиты.Добавить("ИспользованиеХарактеристик");
	НеРедактируемыеРеквизиты.Добавить("КодДляПоиска");
	НеРедактируемыеРеквизиты.Добавить("НаименованиеПолное");
	НеРедактируемыеРеквизиты.Добавить("ПоставляетсяВМногооборотнойТаре");
	НеРедактируемыеРеквизиты.Добавить("НоменклатураМногооборотнаяТара");
	НеРедактируемыеРеквизиты.Добавить("ХарактеристикаМногооборотнаяТара");
	НеРедактируемыеРеквизиты.Добавить("Описание");
	НеРедактируемыеРеквизиты.Добавить("ТипНоменклатуры");
	НеРедактируемыеРеквизиты.Добавить("ВладелецХарактеристик");
	НеРедактируемыеРеквизиты.Добавить("ВладелецСерий");
	НеРедактируемыеРеквизиты.Добавить("ВладелецТоварныхКатегорий");
	НеРедактируемыеРеквизиты.Добавить("ФайлКартинки");
	НеРедактируемыеРеквизиты.Добавить("ФайлОписанияДляСайта");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Если для переданной номенклатуры ведутся характеристики, то в параметре возвращается владелец характеристик
//
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//		ВладелецХарактеристики - СправочникСсылка.Номенклатура, СправочникСслыка.ВидыНоменклатуры - в этом параметре
//			возвращается владелец характеристик (это зависит от того, какие характеристики используются - индивидуальные
//			или общие для вида номенклатуры)
//	Возвращаемое значение:
//		Булево - признак того, что для переданной номенклатуры ведется учет по характеристикам
//
Функция ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(Номенклатура, ВладелецХарактеристики) Экспорт

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВидНоменклатуры"           , "ВидНоменклатуры");
	СтруктураРеквизитов.Вставить("ИспользованиеХарактеристик", "ИспользованиеХарактеристик");
	СтруктураРеквизитов.Вставить("ВладелецХарактеристик"     , "ВладелецХарактеристик");
	ЗначенияРеквизитовВИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);

	Если ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		ИспользованиеХарактеристик = Ложь;
	Иначе
		ИспользованиеХарактеристик = Истина;

		Если ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
			ВладелецХарактеристики = ЗначенияРеквизитовВИБ.ВидНоменклатуры;
		ИначеЕсли ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
			ВладелецХарактеристики = ЗначенияРеквизитовВИБ.ВладелецХарактеристик;
		Иначе
			ВладелецХарактеристики = Номенклатура;
		КонецЕсли;
	КонецЕсли;

	Возврат ИспользованиеХарактеристик;

КонецФункции

//Если для переданной номенклатуры ведутся характеристики, то в параметре возвращается владелец характеристик
//
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//		ВестиУчетПоНоменклатуреГТД - Булево - в этом параметре возвращается признак учета в разрезе номенклатуры ГТД
//                                            для номенклатуры
//	Возвращаемое значение:
//		Булево - признак того, что для переданной номенклатуры ведется учет по характеристикам
//
Функция ПроверитьИспользованиеНоменклатурыГТД(Номенклатура, ВестиУчетПоНоменклатуреГТД = Неопределено) Экспорт

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	СтруктураРеквизитов.Вставить("ВестиУчетПоГТД",  "ВестиУчетПоГТД");
	ЗначенияРеквизитовВИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);

	
	Если ЗначенияРеквизитовВИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		ИспользоватьНоменклатурыГТД = Ложь;
		ВестиУчетПоНоменклатуреГТД = Ложь;
		
	Иначе
		ИспользоватьНоменклатурыГТД = Истина;
		ВестиУчетПоНоменклатуреГТД = ЗначенияРеквизитовВИБ.ВестиУчетПоГТД;
		
	КонецЕсли;

	Возврат ИспользоватьНоменклатурыГТД;

КонецФункции // ПроверитьИспользованиеНоменклатурыГТД

// Заполняет реквизиты элемента номенклатуры значениями соответствующих реквизитов вида номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура	 - заполняемый элемент номенклатуры
//  Отказ		 - Булево - если происходит смена вида номенклатуры, то делается проверка корректности этой смены. \
//                          Если та проверка выдает ошибку, то параметр выставляется в ИСТИНА
//
Процедура ЗаполнитьРеквизитыПоВидуНоменклатуры(Номенклатура,
												ПрерыватьЗаполнениеПриОшибкеПроверки = Ложь,
												Отказ = Ложь,
												ЗаполнениеПоИсточникуКопирования = Ложь) Экспорт
	
	Если Номенклатура.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры) Тогда
		Возврат;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		СтарыйВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.Ссылка, "ВидНоменклатуры");
		Если ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
			ПроверитьКорректностьСменыВидаНоменклатурыЗаполнитьПоНовомуВиду(Номенклатура, СтарыйВидНоменклатуры, Отказ);
		КонецЕсли;
		Если Отказ
			И ПрерыватьЗаполнениеПриОшибкеПроверки Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		СтарыйВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	СтрогоБерутсяИзВида = 
	"ТипНоменклатуры,ВариантОформленияПродажи,ГруппаДоступа,ИспользованиеХарактеристик,"
	+"ВладелецСерий,ВладелецХарактеристик,ВладелецТоварныхКатегорий";
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры =
	"ЕдиницаИзмерения,ЕдиницаДляОтчетов,КоэффициентЕдиницыДляОтчетов,ВестиУчетПоГТД,ПодакцизныйТовар,"
	+"ОбособленнаяЗакупкаПродажа,СтавкаНДС,ЦеноваяГруппа";
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры = ЗаполняютсяТолькоПриСозданииНоменклатуры + ",СтатьяДекларацииПоАкцизномуНалогу,ЛьготаНДС";
	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию = 
	"СкладскаяГруппа,СезоннаяГруппа,ГруппаАналитическогоУчета,ГруппаФинансовогоУчета,"
	+"ШаблонЦенника,ШаблонЭтикетки,СхемаОбеспечения,СпособОбеспеченияПотребностей";
	
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены =
	"ИспользоватьУпаковки,НаборУпаковок,"
	+"ПоставляетсяВМногооборотнойТаре,НоменклатураМногооборотнаяТара,ХарактеристикаМногооборотнаяТара,"
	+"ВестиУчетСертификатовНоменклатуры";
	//при этом булевы реквизиты не заполнены, если равны ЛОЖЬ, т.е. булевы могут поменяться только с ЛОЖЬ на ИСТИНА
	
	//Очистим реквизиты, которые точно нужно перезаполнить по виду	
	ОчиститьЗначенияСвойств(Номенклатура, СтрогоБерутсяИзВида);
	
	//Получим реквизиты нового вида, если нужно заполнять только при создании, то просто не будем получать такие реквизиты
	РеквизитыНовогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	Номенклатура.ВидНоменклатуры,
	СтрогоБерутсяИзВида
	+ ?(ЗначениеЗаполнено(СтарыйВидНоменклатуры), "", "," + ЗаполняютсяТолькоПриСозданииНоменклатуры)
	+ "," + ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию
	+ "," + ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены);
	
	//Если номенклатура создается, то очистим реквизиты, которые при создании заполняются по виду, если в новом виде эти реквизиты заполнены
	Если Не ЗначениеЗаполнено(СтарыйВидНоменклатуры)
		И Не ЗаполнениеПоИсточникуКопирования Тогда
		
		ЗаполняютсяТолькоПриСозданииНоменклатурыМассив = СтрРазделить(ЗаполняютсяТолькоПриСозданииНоменклатуры, ",", Ложь);
		
		Для Каждого ИмяРеквизита из ЗаполняютсяТолькоПриСозданииНоменклатурыМассив Цикл
			
			Если ЗначениеЗаполнено(РеквизитыНовогоВида[ИмяРеквизита]) Тогда
				Номенклатура[ИмяРеквизита] = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	//Очистим реквизиты, которые раньше были заполнены значениями по умолчанию (если в новом виде эти умолчания не заданы
	//очищать не будем)
	Если ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
		РеквизитыСтарогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыйВидНоменклатуры, ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию);
		
		Для Каждого КлючЗначение из РеквизитыСтарогоВида Цикл
			Если Номенклатура[КлючЗначение.Ключ] = КлючЗначение.Значение
				И ЗначениеЗаполнено(РеквизитыНовогоВида[КлючЗначение.Ключ]) Тогда
				Номенклатура[КлючЗначение.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Заполним только незаполненные реквизиты - те, которые нужно перезаполнять всегда были ранее принудительно очищены
	ЗаполнитьЗначенияПустыхСвойств(Номенклатура, РеквизитыНовогоВида);
		
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ГруппаФинансовогоУчета", Справочники.ГруппыФинансовогоУчетаНоменклатуры.ПолучитьГруппуФинансовогоУчетаПоУмолчанию());
	ЗначенияПоУмолчанию.Вставить("СкладскаяГруппа", ЗначениеНастроекПовтИсп.СкладскаяГруппаНоменклатурыПоУмолчанию());
	ЗначенияПоУмолчанию.Вставить("ГруппаАналитическогоУчета", Справочники.ГруппыАналитическогоУчетаНоменклатуры.ПолучитьГруппуАналитическогоУчетаПоУмолчанию());
	
	ЗаполнитьЗначенияПустыхСвойств(Номенклатура, ЗначенияПоУмолчанию);
	ОтработатьЛогикуСвязиРеквизитов(Номенклатура);
КонецПроцедуры

// Процедура выполняет гармонизацию значений реквизитов между собой, исключая недопустимые сочетания значений
//
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитво 
Процедура ОтработатьЛогикуСвязиРеквизитов(Номенклатура) Экспорт
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда 
		
		Номенклатура.НаборУпаковок        = Справочники.НаборыУпаковок.ПустаяСсылка();
		Номенклатура.СкладскаяГруппа      = Справочники.СкладскиеГруппыНоменклатуры.ПустаяСсылка();
		Номенклатура.ВестиУчетПоГТД       = Ложь;
		Номенклатура.ПодакцизныйТовар     = Ложь;
		Номенклатура.СтатьяДекларацииПоАкцизномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		Номенклатура.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека = Ложь;
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			Номенклатура.НоменклатураГТД      = Неопределено;
		КонецЕсли;
		Номенклатура.ИспользоватьУпаковки = Ложь;
		Номенклатура.Качество             = Перечисления.ГрадацииКачества.Новый;
		Номенклатура.ПоставляетсяВМногооборотнойТаре  = Ложь;
		Номенклатура.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
		Номенклатура.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Номенклатура.ВестиУчетСертификатовНоменклатуры = Ложь;
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		
		Если ЗначениеЗаполнено(Номенклатура.Принципал)
			И ТипЗнч(Номенклатура.Принципал) = Тип("СправочникСсылка.Организации") Тогда
			Номенклатура.Контрагент = Номенклатура.Принципал;
		КонецЕсли;
	КонецЕсли;
		
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		
		Номенклатура.Принципал  = Неопределено;
		Номенклатура.Контрагент = Неопределено;	
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда	
		
		Номенклатура.НаборУпаковок        = Справочники.НаборыУпаковок.ПустаяСсылка();
		Номенклатура.ИспользоватьУпаковки = Ложь;
		Номенклатура.ПоставляетсяВМногооборотнойТаре  = Ложь;
		Номенклатура.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
		Номенклатура.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Номенклатура.ВестиУчетСертификатовНоменклатуры = Ложь;
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда	
		
		Если Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Номенклатура.ЕдиницаИзмерения) Тогда
			Номенклатура.ПоставляетсяВМногооборотнойТаре  = Ложь;
			Номенклатура.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
			Номенклатура.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Не Номенклатура.ИспользоватьУпаковки Тогда
		Номенклатура.НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка();
	Иначе
		Номенклатура.ПоставляетсяВМногооборотнойТаре  = Ложь;
		Номенклатура.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
		Номенклатура.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура.НаборУпаковок)
		И Номенклатура.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		
		Номенклатура.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.НаборУпаковок, "ЕдиницаИзмерения");
		
	КонецЕсли;
	
	Номенклатура.ИспользоватьИндивидуальныйШаблонЦенника  = ЗначениеЗаполнено(Номенклатура.ШаблонЦенника);
	Номенклатура.ИспользоватьИндивидуальныйШаблонЭтикетки = ЗначениеЗаполнено(Номенклатура.ШаблонЭтикетки);
	
	ИспользоватьТоварныеКатегории = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	
	Если ИспользоватьТоварныеКатегории
		И ЗначениеЗаполнено(Номенклатура.ТоварнаяКатегория) Тогда
		
		ВладелецКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ТоварнаяКатегория, "Владелец");
		
		Если ВладелецКатегории <> Номенклатура.ВидНоменклатуры 
			И ВладелецКатегории <> Номенклатура.ВладелецТоварныхКатегорий Тогда
			
			Номенклатура.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.ЕдиницаДляОтчетов) Тогда
		Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.КоэффициентЕдиницыДляОтчетов)
		Или Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения Тогда
		Номенклатура.КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	ТипЕдиницы = "";
	МернаяЕдиницаХранения = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Номенклатура.ЕдиницаИзмерения, ТипЕдиницы);
	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Вес");	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Объем");	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Площадь");	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Длина");	
	
	Если Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
		И Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда	
		
		Номенклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка();		
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
		
		Номенклатура.СпособОбеспеченияПотребностей = Справочники.СпособыОбеспеченияПотребностей.ПустаяСсылка();		
		
	КонецЕсли;		
	
	Если НЕ (Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор) Тогда 
		
		
		Номенклатура.ИзмеряетсяТолькоВСуммовомВыражении = Ложь;
		Номенклатура.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной = "";
		Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной = "";
		
	КонецЕсли;
	
	Если Не Номенклатура.ИзмеряетсяТолькоВСуммовомВыражении Тогда
		Номенклатура.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной       = "";
		Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной = "";
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность смены вида номенклатуры и в случае проблем выставлят отказ в ИСТИНА
//
// Параметры:
//  Номенклатура			 - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура 
//  СтарыйВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры до смены 
//  Отказ					 - Булево 
//
Процедура ПроверитьКорректностьСменыВидаНоменклатурыЗаполнитьПоНовомуВиду(Номенклатура, СтарыйВидНоменклатуры, Отказ) Экспорт
	
	УсловияВыбораНовогоВидаНоменклатуры = УсловияВыбораНовогоВидаНоменклатуры();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ";
	
	Для Каждого КлючЗначение Из УсловияВыбораНовогоВидаНоменклатуры Цикл
		
		ТекстЗапроса = ТекстЗапроса + КлючЗначение.Значение + " КАК " + КлючЗначение.Ключ + ", ";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + " 
	|	НовыйВидНоменклатуры.Ссылка КАК Ссылка 
	|ИЗ
	|   Справочник.ВидыНоменклатуры КАК НовыйВидНоменклатуры ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ПараметрыЗапроса = Запрос.НайтиПараметры();

	ИменаРеквизитов = "";
	Для Каждого Параметр из ПараметрыЗапроса Цикл
		ИменаРеквизитов = ИменаРеквизитов + "," + Параметр.Имя;
	КонецЦикла;
	
	СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыйВидНоменклатуры, ИменаРеквизитов);
	Для Каждого Параметр из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтарыеРеквизиты[Параметр.Имя]);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	НовыйВидНоменклатуры.Ссылка = &НовыйВидНоменклатуры ";
	Запрос.УстановитьПараметр("НовыйВидНоменклатуры", Номенклатура.ВидНоменклатуры);

	Результат = Запрос.Выполнить().Выгрузить();
	ЗначениеОшибки = Результат[0];
	
	Для Каждого Ошибка Из Результат.Колонки Цикл
		Если Ошибка.Имя = "Ссылка"
			Или Не ЗначениеОшибки[Ошибка.Имя] Тогда
			Продолжить;
		КонецЕсли;

		Если Ошибка.Имя = "ЕстьПроблемаТипНоменклатуры" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Проблема при изменении вида номенклатуры: у нового вида другой тип номенклатуры.';uk='Проблема при зміні виду номенклатури: у нового виду інший тип номенклатури.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Ошибка.Имя = "ЕстьПроблемаИспользоватьСерии" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Проблема при изменении вида номенклатуры: у нового вида несовместимые настройки ведения серий.';uk='Проблема при зміні виду номенклатури: у нового виду несумісні настройки ведення серій.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Ошибка.Имя = "ЕстьПроблемаИспользованиеХарактеристик" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Проблема при изменении вида номенклатуры: у нового вида несовместимые настройки ведения характеристик.';uk='Проблема при зміні виду номенклатури: у нового виду несумісні настройки ведення характеристик.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ТекстИсключения = НСтр("ru='Неизвестный код ошибки.';uk='Невідомий код помилки.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
	
	 
КонецПроцедуры

// Условия выбора нового вида номенклатуры. Используются как для ограничения списка выбора, так и для проверки смены вида.
// Возвращаемое значение:
//  Структура - струтура условий. Ключ - имя условия, значения - текст запроса условия
//
Функция УсловияВыбораНовогоВидаНоменклатуры() Экспорт
      
    УсловияВыбораНовогоВидаНоменклатуры = Новый Структура;
    
    ЕстьПроблемаТипНоменклатуры = "
    |	ВЫБОР
    |		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА &ТипНоменклатуры <> НовыйВидНоменклатуры.ТипНоменклатуры
	|			ТОГДА ИСТИНА
    |		ИНАЧЕ ЛОЖЬ
    |	КОНЕЦ ";
    УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаТипНоменклатуры", ЕстьПроблемаТипНоменклатуры);
    
	ЕстьПроблемаИспользоватьСерии = "
	|	ВЫБОР
    |		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ(НЕ &ИспользоватьСерии
	|						И НЕ НовыйВидНоменклатуры.ИспользоватьСерии
	|					ИЛИ &ИспользоватьСерии
	|						И НовыйВидНоменклатуры.ИспользоватьСерии
	|						И (&ВладелецСерий = НовыйВидНоменклатуры.ВладелецСерий
	|								И &ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|								И НовыйВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|							ИЛИ &ВладелецСерий = НовыйВидНоменклатуры.Ссылка
	|							ИЛИ НовыйВидНоменклатуры.ВладелецСерий = &Ссылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";	 
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаИспользоватьСерии", ЕстьПроблемаИспользоватьСерии);
	
	ЕстьПроблемаИспользованиеХарактеристик = "
	|	ВЫБОР
    |		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ(&ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ИЛИ &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|					ИЛИ &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И НовыйВидНоменклатуры.ВладелецХарактеристик = &Ссылка
	|					ИЛИ НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|						И &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ВладелецХарактеристик = НовыйВидНоменклатуры.Ссылка
	|					ИЛИ НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ВладелецХарактеристик = НовыйВидНоменклатуры.ВладелецХарактеристик)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаИспользованиеХарактеристик", ЕстьПроблемаИспользованиеХарактеристик);

	Возврат УсловияВыбораНовогоВидаНоменклатуры;
	
КонецФункции

Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных)
    
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;

	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
    Для Каждого Тип Из МассивтиповДляПроверки Цикл
        
		Если ОбщегоНазначенияУТ.ЭтоПримитивныйТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
        
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РеквизитыОтключенныеПоФО, РежимВидимостиПоказатьТолькоВажные,
	ТаблицаОбязательныхРеквизитов)
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита])
				И РеквизитыОтключенныеПоФО.Найти(ИмяРеквизита) = Неопределено
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//	Структура - струтура видимости элементов. Ключ - имя элемента, значения - видимость
//
Функция СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	СтруктураВидимости = Новый Структура;
	
	#Область ФункциональныеОпции
	
	ИспользоватьМногооборотнуюТару 			= ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	ИспользоватьХарактеристикиНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьНесколькоВидовНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	ИспользоватьСерииНоменклатуры 			= ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"); 
	ИспользоватьСборкуРазборку 				= ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку");
	ИспользоватьСертификатыНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	ИспользоватьСегментыНоменклатуры 		= ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	ИспользоватьПроизводство 				= ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	ИспользоватьАдресноеХранение			= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьАдресноеХранениеСправочно	= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно");
	ИспользоватьРаздельныйУчетПоНалогообложению = ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению");
	ИспользоватьКомиссиюПриЗакупках			= ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках");
	ИспользоватьНесколькоОрганизаций		= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНоменклатуруПродаваемуюСовместно = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
	ИспользоватьПодпиткуЗонБыстрогоОтбора	= ПолучитьФункциональнуюОпцию("ИспользоватьПодпиткуЗонБыстрогоОтбора");
	ФормироватьФинансовыйРезультат			= ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	#КонецОбласти
	
	#Область ПризнакиТипаНоменклатуры
	
	ЭтоТовар				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара 	= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	
	#КонецОбласти
	
	#Область НастройкаПоВидуНоменклатуры
	
	ИменаРеквизитовВидаНоменклатуры = "ИспользоватьСерии, НастройкаИспользованияСерий, ИспользоватьСрокГодностиСерии,"
									+ "ВариантОказанияУслуг, ШаблонЭтикетки, ШаблонЦенника"; 
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, ИменаРеквизитовВидаНоменклатуры);
	Иначе
		РеквизитыВидаНоменклатуры = Новый Структура(ИменаРеквизитовВидаНоменклатуры);
		РеквизитыВидаНоменклатуры.ИспользоватьСерии             = Ложь;
		РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии = Ложь;
	КонецЕсли;	
    
	РеквизитыОтключенныеПоФО  = РеквизитыОтключенныеПоФО();
    ТаблицаОбязательныхРеквизитов = ТаблицаНастроекРеквизитов(Объект.ВидНоменклатуры);
    
	НастройкиРеквизитов = ЗависимостьРеквизитовОтТипаНоменклатуры(
        Объект.ТипНоменклатуры,
		РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии,
		РеквизитыВидаНоменклатуры.ВариантОказанияУслуг,
		Объект.ИспользованиеХарактеристик,
        ,  
        Объект.ВестиУчетПоГТД,
		Объект.ИзмеряетсяТолькоВСуммовомВыражении,
		Объект.ПодакцизныйТовар
    );
    
	Для Каждого СтрТабл из НастройкиРеквизитов Цикл
		ИмяРеквизита = СтрТабл.Реквизит.Имя;
		Отбор = Новый Структура("Наименование", ИмяРеквизита);
	    СтруктураВидимости.Вставить(ИмяРеквизита, СтрТабл.ДействиеСРеквизитом = "Добавить"
			    И ВидимостьРеквизита(
                    ИмяРеквизита,
					ИмяРеквизита,
					РеквизитыОтключенныеПоФО,
					РежимВидимостиПоказатьТолькоВажные,
					ТаблицаОбязательныхРеквизитов
                )
        );
        
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ШапкаФормы
	
	СтруктураВидимости.Вставить("ЗаполнитьРабочееНаименованиеПоШаблону", 	ЗначениеЗаполнено(Объект.ВидНоменклатуры));
	СтруктураВидимости.Вставить("ЗаполнитьНаименованиеДляПечатиПоШаблону", 	ЗначениеЗаполнено(Объект.ВидНоменклатуры));
	
	ГиперссылкаПерейтиШтрихкодыНоменклатурыВидимость = ПравоДоступа("Просмотр",
			Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствамиВидимость = ПравоДоступа("Просмотр", 
			Метаданные.РегистрыСведений.НоменклатураСегмента)
		И Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь()
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиШтрихкодыНоменклатуры", 
		ГиперссылкаПерейтиШтрихкодыНоменклатурыВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами",
		ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствамиВидимость);
	
	#КонецОбласти
	
	#Область Описание

	ГиперссылкаПерейтиФайлыВидимость = ПравоДоступа("Просмотр", Метаданные.Справочники.НоменклатураПрисоединенныеФайлы)
		И Не РежимВидимостиПоказатьТолькоВажные;
        
	ВидимостьКомандФайлаКартинки = ВидимостьРеквизита("ФайлКартинки",
									"ФайлКартинки",
									РеквизитыОтключенныеПоФО,
									РежимВидимостиПоказатьТолькоВажные,
									ТаблицаОбязательныхРеквизитов);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиФайлы", ГиперссылкаПерейтиФайлыВидимость);
    
	СтруктураВидимости.Вставить("ДобавитьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ОчиститьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ИзменитьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ПросмотретьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ВыбратьКартинкуИзПрисоединенныхФайлов", ЗначениеЗаполнено(Объект.Ссылка));
	
	#КонецОбласти

	#Область ДополнительныеРеквизиты

	//Установка видимости для обязательных реквизитов
	ВсеДополнительныеРеквизитыНоменклатуры = ВсеДополнительныеРеквизиты(Объект.ВидНоменклатуры, "Номенклатура");
	
	Для Каждого СтрокаТаблицыДопРеквизитов Из ВсеДополнительныеРеквизитыНоменклатуры Цикл
		
		ИмяРеквизита     = СтрокаТаблицыДопРеквизитов.ИмяРеквизита;
		ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
			+ СтрЗаменить(?(СтрокаТаблицыДопРеквизитов.ЭтоОбщийРеквизит,
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.Набор.УникальныйИдентификатор())),
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.НаборСвойств.УникальныйИдентификатор()))),
				"-",
				"x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(СтрокаТаблицыДопРеквизитов.Свойство.УникальныйИдентификатор())), "-", "x");
			
		СтруктураВидимости.Вставить(ИмяЭлементаФормы, ВидимостьРеквизита(СтрокаТаблицыДопРеквизитов,
																			ИмяРеквизита,
																			РеквизитыОтключенныеПоФО,
																			РежимВидимостиПоказатьТолькоВажные,
																			ТаблицаОбязательныхРеквизитов));
		
	КонецЦикла;

	#КонецОбласти

	#Область ПланированиеИМаркетинг
	
	ГиперссылкаПерейтиСовместныеПродажиВидимость = ИспользоватьНоменклатуруПродаваемуюСовместно
		И Не ЭтоНабор
		И Не ЭтоМногооборотнаяТара
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НоменклатураПродаваемаяСовместно)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ГиперссылкаПерейтиСегментыВидимость = ИспользоватьСегментыНоменклатуры
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НоменклатураСегмента)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСовместныеПродажи", ГиперссылкаПерейтиСовместныеПродажиВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСегменты", ГиперссылкаПерейтиСегментыВидимость);
	
	#КонецОбласти
	
	#Область ОбеспечениеИПроизводство
	
	ГиперссылкаПерейтиВариантыКомплектацииВидимость = ИспользоватьСборкуРазборку
		И (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
			Или Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар)
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ВариантыКомплектацииНоменклатуры)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ГиперссылкаПерейтиПараметрыОбеспеченияПотребностейВидимость = 
		 ИспользоватьРасширенноеОбеспечениеПотребностей
		И (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ПараметрыОбеспеченияПотребностей);
		
	ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоВидимость = Ложь;
	
	ГиперссылкаПерейтиПроизводствоВидимость = Ложь;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ГиперссылкаПерейтиВариантыКомплектацииВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПараметрыОбеспеченияПотребностей",
		ГиперссылкаПерейтиПараметрыОбеспеченияПотребностейВидимость);
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство",
		ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПроизводство", ГиперссылкаПерейтиПроизводствоВидимость);
	
	#КонецОбласти
	
	#Область Цены
	
	ГиперссылкаПерейтиПрайсЛистКомпанииВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ПрайсЛист);
	
	ГиперссылкаПерейтиПрайсЛистыПоставщиковВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ПрайсЛистПоставщика);
	
	ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиковВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатурыПоставщиков);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПрайсЛистКомпании", ГиперссылкаПерейтиПрайсЛистКомпанииВидимость);
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПрайсЛистыПоставщиков",
		ГиперссылкаПерейтиПрайсЛистыПоставщиковВидимость);
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИсторияИзмененияЦенКомпании",
		ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииВидимость);
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков",
		ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиковВидимость);
	
	#КонецОбласти
    
	#Область ПечатьЭтикетокИЦенников
	
	ВидимостьШаблонЭтикетки = ВидимостьРеквизита("ШаблонЭтикетки",
								"ШаблонЭтикетки",
								РеквизитыОтключенныеПоФО,
								РежимВидимостиПоказатьТолькоВажные,
								ТаблицаОбязательныхРеквизитов);
	ВидимостьШаблонЦенника = ВидимостьРеквизита("ШаблонЦенника",
								"ШаблонЦенника",
								РеквизитыОтключенныеПоФО,
								РежимВидимостиПоказатьТолькоВажные,
								ТаблицаОбязательныхРеквизитов);
	
	СтруктураВидимости.Вставить("ИспользоватьИндивидуальныйШаблонЭтикетки", ВидимостьШаблонЭтикетки);
	СтруктураВидимости.Вставить("ИспользоватьОбщийШаблонЭтикетки",			ВидимостьШаблонЭтикетки);
	СтруктураВидимости.Вставить("ШаблонЭтикетки",							ВидимостьШаблонЭтикетки);
	СтруктураВидимости.Вставить("ВидНоменклатурыШаблонЭтикетки",			ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЭтикетки)
																			И ВидимостьШаблонЭтикетки
																			И Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки);
	СтруктураВидимости.Вставить("ВидНоменклатурыШаблонЭтикеткиНеУказан",	Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЭтикетки)
																			И ВидимостьШаблонЭтикетки
																			И Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки);
	СтруктураВидимости.Вставить("ШаблонЭтикеткиОтступ",						ВидимостьШаблонЭтикетки
																			И Объект.ИспользоватьИндивидуальныйШаблонЭтикетки);
		
	СтруктураВидимости.Вставить("ШаблоныЭтикотокЦенниковОтступ",			ВидимостьШаблонЦенника);
	СтруктураВидимости.Вставить("ИспользоватьИндивидуальныйШаблонЦенника",	ВидимостьШаблонЦенника);
	СтруктураВидимости.Вставить("ИспользоватьОбщийШаблонЦенника",			ВидимостьШаблонЦенника);
	СтруктураВидимости.Вставить("ШаблонЦенника",							ВидимостьШаблонЦенника);
	СтруктураВидимости.Вставить("ВидНоменклатурыШаблонЦенника",				ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЦенника)
																			И ВидимостьШаблонЦенника
																			И Не Объект.ИспользоватьИндивидуальныйШаблонЦенника);
	СтруктураВидимости.Вставить("ВидНоменклатурыШаблонЦенникаНеУказан",		Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЦенника)
																			И ВидимостьШаблонЦенника
																			И Не Объект.ИспользоватьИндивидуальныйШаблонЦенника);
	СтруктураВидимости.Вставить("ШаблонЦенникаОтступ",						ВидимостьШаблонЦенника
																			И Объект.ИспользоватьИндивидуальныйШаблонЦенника);
	
	#КонецОбласти
	
	#Область ОсновныеПараметрыУчета
	
	ВидНоменклатурыВидимость = ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
	ВидНоменклатурыПереключательВидимость = Не ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
	ВидНоменклатурыОбязательныеПоляВидимость = ИспользоватьНесколькоВидовНоменклатуры И РежимВидимостиПоказатьТолькоВажные;
	ВидНоменклатурыПереключательОбязательныеПоляВидимость = Не ИспользоватьНесколькоВидовНоменклатуры И РежимВидимостиПоказатьТолькоВажные;
	ТипНоменклатурыВидимость = ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ВидНоменклатуры", 								ВидНоменклатурыВидимость);
	СтруктураВидимости.Вставить("ВидНоменклатурыПереключатель", 				ВидНоменклатурыПереключательВидимость);
	СтруктураВидимости.Вставить("ВидНоменклатурыОбязательныеПоля", 				ВидНоменклатурыОбязательныеПоляВидимость);
	СтруктураВидимости.Вставить("ВидНоменклатурыПереключательОбязательныеПоля", ВидНоменклатурыПереключательОбязательныеПоляВидимость);
	СтруктураВидимости.Вставить("ТипНоменклатуры", 								ТипНоменклатурыВидимость);
	
	ИспользованиеХарактеристикВидимость  = РеквизитыОтключенныеПоФО.Найти("ИспользованиеХарактеристик") = Неопределено
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ИспользованиеХарактеристик", ИспользованиеХарактеристикВидимость);
	
	ГиперссылкаПерейтиХарактеристикиНоменклатурыВидимость = ИспользованиеХарактеристикВидимость
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ХарактеристикиНоменклатуры)
		И Объект.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиХарактеристикиНоменклатуры", 
		ГиперссылкаПерейтиХарактеристикиНоменклатурыВидимость);
		
	НастройкаИспользованияСерийВидимость = ИспользоватьСерииНоменклатуры
		И (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ГиперссылкаПерейтиТоварыДругогоКачестваВидимость = СтруктураВидимости.Качество
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ТоварыДругогоКачества)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("НастройкаИспользованияСерий", НастройкаИспользованияСерийВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСоставНабора", 
									ПравоДоступа("Просмотр", Метаданные.Справочники.ВариантыКомплектацииНоменклатуры)
									И Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
									И Не РежимВидимостиПоказатьТолькоВажные);
									
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиТоварыДругогоКачества",
		ГиперссылкаПерейтиТоварыДругогоКачестваВидимость);
	
	#КонецОбласти
	
	#Область ЕдиницыИзмеренияИУсловияХранения
	
	ВидимостьНастроекУпаковок = РеквизитыОтключенныеПоФО.Найти("ИспользоватьУпаковки") = Неопределено
								И Объект.ИспользоватьУпаковки
								И Не РежимВидимостиПоказатьТолькоВажные;
							
	НастройкиОбщегоНабораУпаковокВидимость = ВидимостьНастроекУпаковок
											И Объект.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
							
	ГиперссылкаПерейтиУпаковкиНоменклатурыВидимость = ВидимостьНастроекУпаковок
		И Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры
		И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	
	ГиперссылкаПерейтиПрогнозыРасходаУпаковокВидимость = ВидимостьНастроекУпаковок
		И ИспользоватьПодпиткуЗонБыстрогоОтбора
		И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПрогнозыРасходаУпаковок)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиАдресныхСкладов);
	
	ГиперссылкаПерейтиРазмещениеНоменклатурыВидимость = ИспользоватьАдресноеХранениеСправочно
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиУпаковкиНабора", 		НастройкиОбщегоНабораУпаковокВидимость
																			И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения));
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатуры",	ГиперссылкаПерейтиУпаковкиНоменклатурыВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПрогнозыРасходаУпаковок",
		ГиперссылкаПерейтиПрогнозыРасходаУпаковокВидимость);
	
	СтруктураВидимости.Вставить("НаборУпаковокОтступ", 						ВидимостьНастроекУпаковок);
	СтруктураВидимости.Вставить("ИспользованиеУпаковокИндивидуальныйНабор", ВидимостьНастроекУпаковок);
	СтруктураВидимости.Вставить("ИспользованиеУпаковокОбщийНабор", 			ВидимостьНастроекУпаковок);
	
	ЕдиницаДляОтчетовВидимость = РеквизитыОтключенныеПоФО.Найти("ЕдиницаДляОтчетов") = Неопределено
								И Не РежимВидимостиПоказатьТолькоВажные
								И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.ЕдиницаДляОтчетов)
								И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.ЕдиницаДляОтчетов);
	
	КоэффициентЕдиницыДляОтчетовВидимость = ЕдиницаДляОтчетовВидимость
											  И ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов)
											  И Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения
											  И Не РежимВидимостиПоказатьТолькоВажные;
											  
	ЕдиницаДляОтчетовЕдиницаИзмеренияНадписьВидимость = КоэффициентЕдиницыДляОтчетовВидимость
														И Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения
														И Не РежимВидимостиПоказатьТолькоВажные;
											  
	СтруктураВидимости.Вставить("ЕдиницаДляОтчетов", 							ЕдиницаДляОтчетовВидимость);
	СтруктураВидимости.Вставить("ЕдиницаДляОтчетовЕдиницаИзмеренияНадпись", 	ЕдиницаДляОтчетовЕдиницаИзмеренияНадписьВидимость);
	СтруктураВидимости.Вставить("КоэффициентЕдиницыДляОтчетов", 				КоэффициентЕдиницыДляОтчетовВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиРазмещениеНоменклатуры",
		ГиперссылкаПерейтиРазмещениеНоменклатурыВидимость);
	
	#КонецОбласти

	#Область РегламентированныйИФинансовыйУчет
	
	ГиперссылкаПерейтиСертификатыНоменклатурыВидимость = ИспользоватьСертификатыНоменклатуры
		И Объект.ВестиУчетСертификатовНоменклатуры
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ОбластиДействияСертификатовНоменклатуры);
	
	ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности = 
		(ЭтоТовар Или ЭтоМногооборотнаяТара)
		И ФормироватьФинансовыйРезультат
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкаРаспределенияПоНаправлениямДеятельности)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСертификатыНоменклатуры",
		ГиперссылкаПерейтиСертификатыНоменклатурыВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности",
		ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности);
		
    СтруктураВидимости.Вставить("НоменклатураГТДДекорация", СтруктураВидимости.НоменклатураГТД);
	
	ЭтоСтавкаБезНДСИлиНеНДС = (Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")) ИЛИ (Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС"));
	ЛьготаНДС = ЭтоСтавкаБезНДСИлиНеНДС;
	СтруктураВидимости.Вставить("ЛьготаНДС", ЛьготаНДС);
	СтруктураВидимости.Вставить("КодЛьготы", ЛьготаНДС);

	#КонецОбласти
	
	//Реквизиты с настройкой видиомости по интерфейсу и зависящие от связанных полей
	СтруктураВидимости.Вставить("НаборУпаковок", НастройкиОбщегоНабораУпаковокВидимость
		И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.НаборУпаковок)
		И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.НаборУпаковок));
	
	ДоступностьТары = ЗначениеЗаполнено(Объект.ЕдиницаИзмерения)
		И Не Объект.ИспользоватьУпаковки
		И Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения);
	
	ПоставляетсяВМногооборотнойТареВидимость = ИспользоватьМногооборотнуюТару
		И ЭтоТовар
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.ПоставляетсяВМногооборотнойТаре);
	
	НоменклатураМногооборотнаяТараВидимость = ПоставляетсяВМногооборотнойТареВидимость 
		И ДоступностьТары
		И Объект.ПоставляетсяВМногооборотнойТаре;
	
	ХарактеристикаМногооборотнаяТараВидимость = НоменклатураМногооборотнаяТараВидимость
		И ЗначениеЗаполнено(Объект.НоменклатураМногооборотнаяТара) 
		И ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара);
	
	ТараОтступВидимость = ПоставляетсяВМногооборотнойТареВидимость
		И Объект.ПоставляетсяВМногооборотнойТаре;
		
	СтруктураВидимости.Вставить("НоменклатураМногооборотнаяТара", 	НоменклатураМногооборотнаяТараВидимость);
	СтруктураВидимости.Вставить("ХарактеристикаМногооборотнаяТара", ХарактеристикаМногооборотнаяТараВидимость);
	СтруктураВидимости.Вставить("ТараОтступ", 						ТараОтступВидимость);
	

	//Прочие элементы
	СтруктураВидимости.Вставить("ПроверитьУникальность", 
								РежимВидимостиПоказатьТолькоВажные
								И Константы.КонтролироватьУникальностьНоменклатурыИХарактеристикПоСочетаниюЗначенийРеквизитов.Получить()
								И Не ЗначениеЗаполнено(Объект.Ссылка));
	
	#Область Отчеты
	
	СтруктураВидимости.Вставить("ВедомостьПоТоварамОрганизаций", (ЭтоТовар
			Или ЭтоМногооборотнаяТара
			Или ЭтоРабота)
		И (ИспользоватьНесколькоОрганизаций
			Или ИспользоватьКомиссиюПриЗакупках
			Или ИспользоватьРаздельныйУчетПоНалогообложению)
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций));
	
	СтруктураВидимости.Вставить("ВедомостьПоСериямНоменклатуры", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И РеквизитыВидаНоменклатуры.ИспользоватьСерии
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры));
	
	СтруктураВидимости.Вставить("ВедомостьПоТоварамНаСкладах", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах));
	
	СтруктураВидимости.Вставить("ТоварыВЯчейках", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И ИспользоватьАдресноеХранение
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах));
	
	СтруктураВидимости.Вставить("ОстаткиИДоступностьТоваров", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИДоступностьТоваров));
	
	СтруктураВидимости.Вставить("ТоварыНаСкладахПоСрокамГодности", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И РеквизитыВидаНоменклатуры.ИспользоватьСерии
		И (РеквизитыВидаНоменклатуры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров
			Или РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии)
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности));
	
	СтруктураВидимости.Вставить("ВыручкаИСебестоимостьПродаж",
		ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж));
	
	СтруктураВидимости.Вставить("СостояниеАссортимента",
		ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеАссортимента));
	
	#КонецОбласти
	
	Возврат СтруктураВидимости;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//	СтруктураВидимостиЭлементов - Структура - струтура видимости элементов
//
// Возвращаемое значение:
//	Структура - струтура заголовков элементов. Ключ - имя элемента, значения - заголовок
//
Функция СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимостиЭлементов) Экспорт
	
	СтруктураЗаголовков = Новый Структура;
	
	#Область ПризнакиТипаНоменклатуры
	
	ЭтоТовар				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара 	= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	
	#КонецОбласти
	
	СтруктураЗаголовков.Вставить("ЕдиницаИзмерения", ?(ЭтоТовар Или ЭтоМногооборотнаяТара,
															НСтр("ru='Единица хранения';uk='Одиниця зберігання'"),
															НСтр("ru='Единица измерения';uk='Одиниця вимірювання'")));
															
	Если ЭтоРабота Тогда
		СтруктураЗаголовков.Вставить("ГруппаАгентскиеУслуги", НСтр("ru='Работа выполняется по агентскому договору';uk='Робота виконується за агентським договором'"));
	Иначе
		СтруктураЗаголовков.Вставить("ГруппаАгентскиеУслуги", НСтр("ru='Услуга реализуется по агентскому договору';uk='Послуга реалізується за агентським договором'"));
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		СтруктураЗаголовков.Вставить("ДекорацияЗаголовокОбеспечение", НСтр("ru='Обеспечение';uk='Забезпечення'"));
	Иначе
		СтруктураЗаголовков.Вставить("ДекорацияЗаголовокОбеспечение", НСтр("ru='Обеспечение и производство';uk='Забезпечення і виробництво'"));
	КонецЕсли;
	
	Если Объект.ВестиУчетПоГТД Тогда
		СтруктураЗаголовков.Вставить("НоменклатураГТДДекорация", НСтр("ru='Код номенклатуры для НН указывается для любых товаров, номер ГТД указывается только для импортных товаров';uk='Код номенклатури для ПН вказується для будь-яких товарів, номер ВМД вказується тільки для імпортних товарів'"));
	Иначе
		СтруктураЗаголовков.Вставить("НоменклатураГТДДекорация", НСтр("ru='Указывается справочно, только для заполнения в налоговых документах';uk='Вказується довідково, тільки для заповнення в податкових документах'"));
	КонецЕсли;
	
	#Область ЗаголовокиГиперссылок
	
	Картинка = Новый Картинка;
	КартинкаПредупреждение = БиблиотекаКартинок.ПредупреждениеСНачалаСтроки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыДругогоКачества.Номенклатура,
	|	ТоварыДругогоКачества.НоменклатураБрак,
	|	ТоварыДругогоКачества.ГрадацияКачества
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.НомерСтроки
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантКомплектацииНоменклатуры
	|	И НЕ ВариантыКомплектацииНоменклатурыТовары.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.Владелец = &Номенклатура
	|	И НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = &ВладелецУпаковки
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|ГДЕ
	|	(ОбластиДействияСертификатовНоменклатуры.Номенклатура = &Номенклатура
	|			ИЛИ ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|				И ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И НЕ ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ПометкаУдаления
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &Номенклатура
	|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСегмента.Сегмент
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Номенклатура = &Номенклатура
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СегментыНоменклатуры.Ссылка КАК Сегмент,
	|	СегментыНоменклатуры.Ответственный,
	|	СегментыНоменклатуры.СпособФормирования
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|ГДЕ
	|	(НЕ СегментыНоменклатуры.ЭтоГруппа)
	|	И (НЕ СегментыНоменклатуры.ПометкаУдаления)
	|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	
	ВариантКомплектацииНоменклатуры = НаборыВызовСервера.ВариантКомплектацииНоменклатурыПоУмолчанию(
											Объект.Ссылка,
											Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ВариантКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
	
	Если Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		ВладелецХарактеристики = Объект.Ссылка;
	ИначеЕсли Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
		ВладелецХарактеристики = Объект.ВидНоменклатуры;
	ИначеЕсли Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
		ВладелецХарактеристики = Объект.ВладелецХарактеристик;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецХарактеристики", ВладелецХарактеристики);
	
	Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		ВладелецУпаковки = Объект.Ссылка;
	Иначе 
		ВладелецУпаковки = Объект.НаборУпаковок;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецУпаковки", ВладелецУпаковки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборки = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Истина);
	ВидимостьЭлемента = Ложь;
	
	Если РазделВиден("ГиперссылкаПерейтиТоварыДругогоКачества", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[0].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Товары другого качества';uk='Товари іншої якості'") 
																+ " (" + Количество + ")",,,,"ТоварыДругогоКачестваКоличество");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиТоварыДругогоКачества", ЗаголовокГиперссылки);
	КонецЕсли;
	
	
	Если РазделВиден("ГиперссылкаПерейтиШтрихкодыНоменклатуры", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[1].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Штрихкоды';uk='Штрихкоди'") + " (" + Количество + ")",,,,"ШтрихкодыНоменклатурыКоличество");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиШтрихкодыНоменклатуры", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСоставНабора", СтруктураВидимостиЭлементов) Тогда 
		Количество = Выборки[2].Выбрать().Количество();
		Если Количество <> 0 Тогда
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Состав набора';uk='Склад набору'") + " (" + Количество + ")",,,,"Состав набора");
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", Ложь);
		Иначе
			ВидимостьПредупреждения = Выборки[3].Выбрать().Количество() = 0;
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(НСтр("ru='Настроить набор';uk='Настроїти набір'"),,,,"Настроить набор"),
				?(ВидимостьПредупреждения,Новый ФорматированнаяСтрока(КартинкаПредупреждение),""));
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", ВидимостьПредупреждения);
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ЗаголовокГиперссылки);
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСоставНабора", ЗаголовокГиперссылки);
	ИначеЕсли РазделВиден("ГиперссылкаПерейтиВариантыКомплектации", СтруктураВидимостиЭлементов) Тогда	
  		Количество = Выборки[3].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Варианты комплектации';uk='Варіанти комплектації'") + " (" + Количество + ")",,,,"Варианты комплектации");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ЗаголовокГиперссылки);
	КонецЕсли;
		
	Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[4].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"ХарактеристикиНоменклатуры");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиХарактеристикиНоменклатуры", ЗаголовокГиперссылки);
	КонецЕсли;
		
	Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатуры", СтруктураВидимостиЭлементов) 
			Или РазделВиден("ГиперссылкаПерейтиУпаковкиНабора", СтруктураВидимостиЭлементов) Тогда 
		Количество = Выборки[5].Выбрать().Количество();
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"УпаковкиНоменклатуры");
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"УпаковкиНоменклатуры"),
											Новый ФорматированнаяСтрока(КартинкаПредупреждение));
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", Истина);
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатуры", ЗаголовокГиперссылки);
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"УпаковкиНабора");
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабораВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"УпаковкиНабора"),
										Новый ФорматированнаяСтрока(КартинкаПредупреждение));
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабораВнимание", Истина);
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиУпаковкиНабора", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатуры", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[6].Выбрать().Количество();
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"СертификатыНоменклатуры");
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'") + " (" + Количество + ")",,,,"СертификатыНоменклатуры"),
											Новый ФорматированнаяСтрока(КартинкаПредупреждение));
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", Истина);
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСертификатыНоменклатуры", ЗаголовокГиперссылки);
	КонецЕсли;	
	
	Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[7].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Файлы';uk='Файли'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиФайлы", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимостиЭлементов) Тогда
		Сегменты = Выборки[8].Выгрузить().ВыгрузитьКолонку("Сегмент");
		
		ЕстьДинамическиеСегменты = Выборки[9].Выбрать().Следующий();
		ТекстДинамическиеСегменты = ?(ЕстьДинамическиеСегменты, НСтр("ru=', без учета формируемых динамически';uk=', без урахування тих що формуються динамічно'"), "");
		
		Количество = Сегменты.Количество();
		Если Количество = 1 Тогда
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Сегмент';uk='Сегмент'") + " " + Сегменты[0] + ТекстДинамическиеСегменты,,,,"Сегменты");
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru='Сегменты';uk='Сегменти'") + " (" + Количество + ТекстДинамическиеСегменты + ")",,,,"Сегменты");
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСегменты", ЗаголовокГиперссылки);
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат СтруктураЗаголовков;

КонецФункции

// Возвращает признак типа Булево о наличии для переданного параметра НоменклатураВладелец подчиненных элементов типа НоменклатураГТД.
// Параметры:
//	НоменклатураВладелец - СправочникСсылка.Номенклатура - элемент справочника номенклатуры
//
// Возвращаемое значение:
//	Булево - есть подчиненные объекты типа НоменклатураГТД
//
Функция ЕстьПодчиненныеОбъектыНоменклатураГТД(НоменклатураВладелец) Экспорт

	ЕстьПодчиненныеОбъекты = Ложь;
	
	Если ТипЗнч(НоменклатураВладелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ЕстьПодчиненныеОбъекты;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК НаличиеПодчиненных
	|ИЗ
	|	Справочник.НоменклатураГТД КАК НоменклатураГТД
	|ГДЕ
	|	НоменклатураГТД.Владелец = &Владелец
	|	И НЕ НоменклатураГТД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НоменклатураВладелец);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ЕстьПодчиненныеОбъекты = НЕ РезультатЗапроса.Пустой();
	
	Возврат ЕстьПодчиненныеОбъекты;

КонецФункции // ЕстьПодчиненныеОбъектыНоменклатураГТД()
 

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий
 
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда	
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			ОбъектКопирования = Параметры.ЗначениеКопирования;
			Если Не ОбъектКопирования.ЭтоГруппа Тогда
				СтандартнаяОбработка = Ложь;
				Параметры = Новый Структура("ЗначениеКопирования", ОбъектКопирования);
				ВыбраннаяФорма = "ФормаЭлемента";
			КонецЕсли;
		ИначеЕсли Параметры.Свойство("РежимВыбора") Тогда
			Если Параметры.РежимВыбора
				И Не Параметры.ЭтоГруппа Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлемента";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ВыборГруппИЭлементов = Неопределено;
		Если Параметры.Свойство("ВыборГруппИЭлементов",ВыборГруппИЭлементов) Тогда
			Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаВыбораГруппИЭлементов";
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораГруппИЭлементов";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	НоменклатураВызовСервера.НоменклатураОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Карточка номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КарточкаНоменклатуры";
	КомандаПечати.Представление = НСтр("ru='Печать';uk='Друк'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru='Карточка номенклатуры';uk='Картка номенклатури'");
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаНоменклатуры") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"КарточкаНоменклатуры", 
			?(МассивОбъектов.Количество() = 1, МассивОбъектов[0], НСтр("ru='Список номенклатуры';uk='Список номенклатури'")), 
			СформироватьПечатнуюФормуКарточкиНоменклатуры(
				МассивОбъектов, 
				ОбъектыПечати, 
				ПараметрыПечати,
				ПараметрыВывода
			),
			,
			,
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма  
		);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКарточкиНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода)		
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КАРТОЧКАНОМЕНКЛАТУРЫ";
	
	ПерваяКарточка = Истина;
	
	Для Каждого Номенклатура Из МассивОбъектов Цикл
		Если ПерваяКарточка Тогда
			ПерваяКарточка = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабличныйДокумент.Вывести(ПолучитьТабличныйДокументКарточкиНоменклатуры(Номенклатура, ПараметрыВывода));	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#Область КарточкаНоменклатуры

// Возвращает табличный документ номенклатуры.
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитво 
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с реквизитами
//
Функция ПолучитьТабличныйДокументКарточкиНоменклатуры(Номенклатура, ПараметрыВывода = Неопределено) Экспорт	
	
	Перем Заголовок;
	
	Объект = Неопределено;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Объект = Номенклатура.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникОбъект.Номенклатура")
		Или ТипЗнч(Номенклатура) = Тип("ДанныеФормыСтруктура") Тогда
		Объект = Номенклатура;
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокументКарточка = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_КарточкаНоменклатуры");
	Если ПараметрыВывода <> Неопределено Тогда
		КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Иначе
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	КонецЕсли; 
	Если ЗначениеЗаполнено(КодЯзыкаПечать) Тогда
		Макет.КодЯзыкаМакета = КодЯзыкаПечать; 
	КонецЕсли;
		
	СтруктураВидимости = СтруктураВидимостиЭлементовФормы(Объект);
	УстановитьПривилегированныйРежим(Истина);
	СтруктураЗаголовков = СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимости);
	УстановитьПривилегированныйРежим(Ложь);
	
	#Область Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Объект);
		
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		ОбластьШапка.Параметры.Наименование = ТекстЗначенияНеЗаполнен("Наименование");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаНаименование = "Наименование";

	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		ОбластьШапка.Параметры.НаименованиеПолное = ТекстЗначенияНеЗаполнен("НаименованиеПолное");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаНаименованиеПолное = "НаименованиеПолное";


	Если Не ЗначениеЗаполнено(Объект.Артикул) Тогда
		ОбластьШапка.Параметры.Артикул = ТекстЗначенияНеЗаполнен("Артикул");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаАртикул = "Артикул";

	
	Если Не ЗначениеЗаполнено(Объект.Код) Тогда
		ОбластьШапка.Параметры.Код = ТекстЗначенияНеЗаполнен("Код");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаКод = "Код";

	Если РазделВиден("ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами", СтруктураВидимости) Тогда
		ОбластьШапка.Параметры.РасшифровкаГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами = "ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами";
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиШтрихкодыНоменклатуры", СтруктураВидимости) Тогда 
		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиШтрихкодыНоменклатуры", Заголовок) Тогда
			ОбластьШапка.Параметры.ГиперссылкаПерейтиШтрихкодыНоменклатуры = Заголовок;	
		КонецЕсли;
		ОбластьШапка.Параметры.РасшифровкаГиперссылкаПерейтиШтрихкодыНоменклатуры = "ГиперссылкаПерейтиШтрихкодыНоменклатуры";
	КонецЕсли;
	
	ТабличныйДокументКарточка.Присоединить(ОбластьШапка);
	
	#КонецОбласти
		
	ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	
	#Область ТабличныйДокументЛево
	
	ТабличныйДокументЛево = Новый ТабличныйДокумент;
		
	#Область Описание
	
	Если ГлаваВидна("Описание", СтруктураВидимости) Тогда 
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ОписаниеЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		// Вывод картинки
        Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
            
			ОбластьОписаниеКартинка = Макет.ПолучитьОбласть("ОписаниеКартинка");
            
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				ДанныеКартинкиНоменклатуры = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Объект.ФайлКартинки);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				ДанныеКартинкиНоменклатуры = Неопределено;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ДанныеКартинкиНоменклатуры) Тогда
				Если ТипЗнч(ДанныеКартинкиНоменклатуры) = Тип("Картинка") Тогда
					КартинкаНоменклатуры = ДанныеКартинкиНоменклатуры;
				ИначеЕсли ТипЗнч(ДанныеКартинкиНоменклатуры) = Тип("ДвоичныеДанные") Тогда
					КартинкаНоменклатуры = Новый Картинка(ДанныеКартинкиНоменклатуры);
				КонецЕсли;
				
				Рисунок = ОбластьОписаниеКартинка.Рисунки.Изображение;
				Рисунок.Картинка = КартинкаНоменклатуры;
				
				Рисунок.Расшифровка = "АдресКартинки";
				
				ТабличныйДокументЛево.Вывести(ОбластьОписаниеКартинка);
			КонецЕсли;
			
		Иначе
			
			ОписаниеКартинкиНет = Макет.ПолучитьОбласть("ФайлКартинкиСтрока");
			ОписаниеКартинкиНет.Параметры.Расшифровка = "АдресКартинки";
			ТабличныйДокументЛево.Вывести(ОписаниеКартинкиНет);
			
		КонецЕсли;	
		
		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Описание", Объект.Описание);
		
		Если РазделВиден("ФайлОписанияДляСайта", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ФайлОписанияДляСайта", Объект.ФайлОписанияДляСайта);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимости) Тогда
			ОбластьОписаниеФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиФайлы", Заголовок) Тогда
				ОбластьОписаниеФайлыСтрока.Параметры.Файлы = Заголовок;
				ОбластьОписаниеФайлыСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиФайлы";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеФайлыСтрока);
		КонецЕсли;
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область ДополнительныеРеквизиты
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство,
	|	ВидыНоменклатуры.НаборСвойств КАК НаборСвойств,
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение,
	|	ЛОЖЬ КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки КАК НомерСтрокиДляСортировки
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ПО ВидыНоменклатуры.НаборСвойств = НаборыДополнительныхРеквизитов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура)
	|			И (НаборыДополнительныхРеквизитов.Свойство = НоменклатураДополнительныеРеквизиты.Свойство)
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И ВидыНоменклатуры.Ссылка В(&ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство,
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие),
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок,
	|	НоменклатураДополнительныеРеквизиты.Значение,
	|	ИСТИНА КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура)
	|			И НаборыДополнительныхРеквизитов.Свойство = НоменклатураДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	ДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	
	Если ГлаваВидна("ДополнительныеРеквизиты", СтруктураВидимости, ДополнительныеРеквизиты.Количество()) Тогда

		ДополнительныеРеквизиты.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ДополнительныеРеквизитыЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);
		
		Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл
			ИмяЭлементаДопРеквизита =  "ДополнительныйРеквизитЗначение_" 
				+ СтрЗаменить(ВРег(Строка(ДопРеквизит.НаборСвойств.УникальныйИдентификатор())), "-", "x")
				+ "_"
				+ СтрЗаменить(ВРег(Строка(ДопРеквизит.Свойство.УникальныйИдентификатор())), "-", "x");
			Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизиты", ДопРеквизит.Значение, ДопРеквизит.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита);		
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти	
	
	#Область СведенияОПроизводителе
	
	Если ГлаваВидна("СведенияОПроизводителе", СтруктураВидимости) Тогда 

		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("СведенияОПроизводителеЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("Производитель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Производитель", Объект.Производитель);
		КонецЕсли;
		
		Если РазделВиден("Марка", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Марка", Объект.Марка);
		КонецЕсли;
		
		Если РазделВиден("Принципал", СтруктураВидимости) Или РазделВиден("Контрагент", СтруктураВидимости) Тогда
			ОбластьРеализацияУслугиПоАгенсткомуДоговору = Макет.ПолучитьОбласть("РеализацияУслугиПоАгенсткомуДоговору");
			Если СтруктураЗаголовков.Свойство("ГруппаАгентскиеУслуги", Заголовок) Тогда
				ОбластьРеализацияУслугиПоАгенсткомуДоговору.Параметры.РеализацияУслугиПоАгенсткомуДоговору = Заголовок;
			КонецЕсли;
			ОбластьРеализацияУслугиПоАгенсткомуДоговору.Параметры.Расшифровка = "ГруппаАгентскиеУслуги";
			ТабличныйДокументЛево.Вывести(ОбластьРеализацияУслугиПоАгенсткомуДоговору);
		КонецЕсли;
		
		Если РазделВиден("Принципал", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Принципал", Объект.Принципал);
		КонецЕсли;
		
		Если РазделВиден("Контрагент", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Контрагент", Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ПланированиеИМаркетинг
	
	Если ГлаваВидна("ПланированиеИМаркетинг", СтруктураВидимости) Тогда 
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ПланированиеИМаркетингЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("ТоварнаяКатегория", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ТоварнаяКатегория", Объект.ТоварнаяКатегория);
		КонецЕсли;
		
		Если РазделВиден("КоллекцияНоменклатуры", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КоллекцияНоменклатуры", Объект.КоллекцияНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("СезоннаяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "СезоннаяГруппа", Объект.СезоннаяГруппа);
		КонецЕсли;
		
		Если РазделВиден("РейтингПродаж", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "РейтингПродаж", Объект.РейтингПродаж);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСовместныеПродажи", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСовместныеПродажиСтрока");
			ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиСовместныеПродажи";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиСегменты = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСегментыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСегменты", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиСегменты.Параметры.ГиперссылкаПерейтиСегменты = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиСегменты.Параметры.Расшифровка = "ГиперссылкаПерейтиСегменты";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСегменты);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ОбеспечениеИПроизводство
	
	Если ГлаваВидна("ОбеспечениеИПроизводство", СтруктураВидимости) Тогда 
		
		Область = Макет.ПолучитьОбласть("ОбеспечениеИПроизводствоЗаголовок");
		Если СтруктураЗаголовков.Свойство("ДекорацияЗаголовокОбеспечение", Заголовок) Тогда
			Область.Параметры.ОбеспечениеПроизводство = Заголовок;
		КонецЕсли;		
		ТабличныйДокументЛево.Вывести(Область);
		
		Если РазделВиден("ОбособленнаяЗакупкаПродажа", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ОбособленнаяЗакупкаПродажаСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ОбособленнаяЗакупкаПродажа);
			Область.Область("ОбособленнаяЗакупкаПродажаФлаг").Картинка = Картинка;
			Область.Параметры.Расшифровка = "ОбособленнаяЗакупкаПродажа";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("СпособОбеспеченияПотребностей", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "СпособОбеспеченияПотребностей", Объект.СпособОбеспеченияПотребностей);
		КонецЕсли;
		
		Если РазделВиден("СхемаОбеспечения", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "СхемаОбеспечения", Объект.СхемаОбеспечения);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиВариантыКомплектации", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиВариантыКомплектацииСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиВариантыКомплектации", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиВариантыКомплектации = Заголовок;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиВариантыКомплектации";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПараметрыОбеспеченияПотребностей", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПараметрыОбеспеченияПотребностейСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПараметрыОбеспеченияПотребностей";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПроизводство", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПроизводствоСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПроизводство";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область Цены
	
	Если ГлаваВидна("Цены", СтруктураВидимости) Тогда 
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ЦеныЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("ЦеноваяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ЦеноваяГруппа", Объект.ЦеноваяГруппа);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрайсЛистКомпании", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ПрайсЛистКомпанииСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрайсЛистКомпании";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрайсЛистыПоставщиков", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ПрайсЛистыПоставщиковСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрайсЛистыПоставщиков";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиИсторияИзмененияЦенКомпании", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ИсторияИзмененияЦенКомпанииСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиИсторияИзмененияЦенКомпании";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ИсторияИзмененияЦенПоставщиковСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПечатьЭтикетокИЦенников
	
	Если ГлаваВидна("ПечатьЭтикетокИЦенников", СтруктураВидимости) Тогда 
		
		ВидНоменклатурыШаблоны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, "ШаблонЦенника, ШаблонЭтикетки");
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ПечатьЭтикетокИЦенниковЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Область = Макет.ПолучитьОбласть("ИспользоватьИндивидуальныйШаблонЭтикеткиСтрока");
		Если Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЭтикетки = НСтр("ru='Индивидуальный шаблон этикетки:';uk='Індивідуальний шаблон етикетки:'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЭтикетки";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЭтикетки = Макет.ПолучитьОбласть("ШаблонЭтикеткиСтрока");
			ОбластьЭтикетки.Параметры.ШаблонЭтикетки = Объект.ШаблонЭтикетки;
			ОбластьЭтикетки.Параметры.Расшифровка = "ШаблонЭтикетки";
			ТабличныйДокументЛево.Вывести(ОбластьЭтикетки);
		Иначе
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЭтикетки = НСтр("ru='Используется общий для вида шаблон этикетки';uk='Використовується загальний для виду шаблон етикетки'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЭтикетки";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЭтикетки = Макет.ПолучитьОбласть("ШаблонЭтикеткиСтрока");
			Если ЗначениеЗаполнено(ВидНоменклатурыШаблоны.ШаблонЭтикетки) Тогда
				ОбластьЭтикетки.Параметры.ШаблонЭтикетки = ВидНоменклатурыШаблоны.ШаблонЭтикетки;
			Иначе
				ОбластьЭтикетки.Параметры.ШаблонЭтикетки =  НСтр("ru='<не указан>';uk='<не зазначено>'");
			КонецЕсли;
			ОбластьЭтикетки.Параметры.Расшифровка = "ШаблонЭтикетки";
			ТабличныйДокументЛево.Вывести(ОбластьЭтикетки);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ИспользоватьИндивидуальныйШаблонЦенникаСтрока");
		Если Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЦенника = НСтр("ru='Индивидуальный шаблон ценника:';uk='Індивідуальний шаблон цінника:'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЦенника";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЦенника = Макет.ПолучитьОбласть("ШаблонЦенникаСтрока");
			ОбластьЦенника.Параметры.ШаблонЦенника = Объект.ШаблонЦенника;
			ОбластьЦенника.Параметры.Расшифровка = "ШаблонЦенника";
			ТабличныйДокументЛево.Вывести(ОбластьЦенника);
		Иначе
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЦенника = НСтр("ru='Используется общий для вида шаблон ценника';uk='Використовується загальний для виду шаблон цінника'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЦенника";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЦенника = Макет.ПолучитьОбласть("ШаблонЦенникаСтрока");
			Если ЗначениеЗаполнено(ВидНоменклатурыШаблоны.ШаблонЦенника) Тогда
				ОбластьЦенника.Параметры.ШаблонЦенника = ВидНоменклатурыШаблоны.ШаблонЦенника;
			Иначе
				ОбластьЦенника.Параметры.ШаблонЦенника =  НСтр("ru='<не указан>';uk='<не зазначено>'");
			КонецЕсли;
			ОбластьЦенника.Параметры.Расшифровка = "ШаблонЦенника";
			ТабличныйДокументЛево.Вывести(ОбластьЦенника);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
	
	#КонецОбласти
		
	#Область ТабличныйДокументПраво
	
	ТабличныйДокументПраво = Новый ТабличныйДокумент;
	
	
	#Область ОсновныеПараметрыУчета
	
	Если ГлаваВидна("ОсновныеПараметрыУчета", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОсновныеПараметрыУчетаЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("ВидНоменклатуры", СтруктураВидимости) Или РазделВиден("ВидНоменклатурыПереключатель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ВидНоменклатуры", Объект.ВидНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("ТипНоменклатуры", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ТипНоменклатуры", Объект.ТипНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСоставНабора", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСоставНабораСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСоставНабора", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиСоставНабора = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиСоставНабораВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиСоставНабораВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиСоставНабора";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ИспользованиеХарактеристик", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ИспользованиеХарактеристик", Объект.ИспользованиеХарактеристик);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиХарактеристикиНоменклатурыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиХарактеристикиНоменклатуры", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиХарактеристикиНоменклатуры = Заголовок;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиХарактеристикиНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;

		
		Если РазделВиден("НастройкаИспользованияСерий", СтруктураВидимости) Тогда
			НастройкаИспользованияСерий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "НастройкаИспользованияСерий");
            НастройкаИспользованияСерийСтрока = Строка(НастройкаИспользованияСерий);
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НастройкаИспользованияСерий", НастройкаИспользованияСерийСтрока);
		КонецЕсли;
		
		Если РазделВиден("ВариантОформленияПродажи", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ВариантОформленияПродажи", Объект.ВариантОформленияПродажи);
		КонецЕсли;
		
		Если РазделВиден("Родитель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Родитель", Объект.Родитель);
		КонецЕсли;
		
		Если РазделВиден("ГруппаДоступа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ГруппаДоступа", Объект.ГруппаДоступа);
		КонецЕсли;

		
		Если РазделВиден("Качество", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Качество", Объект.Качество);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиТоварыДругогоКачества", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиТоварыДругогоКачестваСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиТоварыДругогоКачества", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиТоварыДругогоКачества = Заголовок;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиТоварыДругогоКачества";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ЕдиницыИзмеренияИОбластьХранения
	
	Если ГлаваВидна("ЕдиницыИзмеренияИОбластьХранения", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЕдиницыИзмеренияИОбластьХраненияЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("ИспользоватьУпаковки", СтруктураВидимости) Тогда 
			Если Объект.ИспользоватьУпаковки Тогда
				Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
					Набор = НСтр("ru='Индивидуальный набор';uk='Індивідуальний набір'");
				Иначе
					Набор = Объект.НаборУпаковок;
				КонецЕсли;
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ИспользоватьУпаковки", Набор);
			Иначе
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ИспользоватьУпаковки", НСтр("ru='не используются';uk='не використовуються'"));
			КонецЕсли;
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатуры", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиУпаковкиНоменклатурыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиУпаковкиНоменклатуры", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиУпаковкиНоменклатуры = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиУпаковкиНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиУпаковкиНабора", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиУпаковкиНабораСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиУпаковкиНабора", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиУпаковкиНабора = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиУпаковкиНабораВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиУпаковкиНабораВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиУпаковкиНабора";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрогнозыРасходаУпаковок", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПрогнозыРасходаУпаковокСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрогнозыРасходаУпаковок";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ЕдиницаИзмерения", СтруктураВидимости) Тогда
			
			
			СтрокаЗаполнения = НСтр("ru='%ЕдиницаИзмерения%%Тара%';uk='%ЕдиницаИзмерения%%Тара%'");
			Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", НСтр("ru='<не указана>';uk='<не зазначена>'"));
			КонецЕсли;
			
			Если Объект.ПоставляетсяВМногооборотнойТаре Тогда 
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Тара%", НСтр("ru=', поставляется в таре';uk=', поставляється у тарі'"));
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Тара%", "");
			КонецЕсли;
			
			СтруктураЗаголовков.Свойство("ЕдиницаИзмерения", Заголовок);
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ЕдиницаИзмерения", СтрокаЗаполнения, Заголовок);
			
		КонецЕсли;
		
		Если РазделВиден("НоменклатураМногооборотнаяТара", СтруктураВидимости) Тогда
			
			СтрокаЗаполнения = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Объект.НоменклатураМногооборотнаяТара,
				Объект.ХарактеристикаМногооборотнаяТара);				
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НоменклатураМногооборотнаяТара", СтрокаЗаполнения);

			
		КонецЕсли;
		
		Если РазделВиден("ЕдиницаДляОтчетов", СтруктураВидимости) Тогда
			
			СтрокаЗаполнения = НСтр("ru='<не указана>';uk='<не зазначена>'");
			Если ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов) Тогда
				СтрокаЗаполнения = НСтр("ru='%ЕдиницаДляОтчетов%, содержит %Количество% %ЕдиницаИзмерения%';uk='%ЕдиницаДляОтчетов%, містить %Количество% %ЕдиницаИзмерения%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаДляОтчетов%", Объект.ЕдиницаДляОтчетов);
				Если Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения Тогда					
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество%", Объект.КоэффициентЕдиницыДляОтчетов);
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, ", содержит %Количество% %ЕдиницаИзмерения%", "");
				КонецЕсли;
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ЕдиницаДляОтчетов", СтрокаЗаполнения);
			
		КонецЕсли;
		
		Если РазделВиден("Вес", СтруктураВидимости) Тогда
			
			Если Объект.ВесИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru='%Количество1% %ЕдиницаИзмерения% весит %Количество2% %Единица%, %МожноУказыватьВДокументах%';uk='%Количество1% %ЕдиницаИзмерения% важить %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ВесЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ВесЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ВесЕдиницаИзмерения);				
				Если Объект.ВесМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='можно указывать количество в %ЕдиницаИзмерения% в документах';uk='можна вказувати кількість у %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ВесЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='указан справочно';uk='зазначено довідково'"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru='<не измеряется>';uk='<не вимірюється>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Вес", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Объем", СтруктураВидимости) Тогда
			
			Если Объект.ОбъемИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru='%Количество1% %ЕдиницаИзмерения% занимает объем %Количество2% %Единица%, %МожноУказыватьВДокументах%';uk='%Количество1% %ЕдиницаИзмерения% займає об''єм %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ОбъемЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ОбъемЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ОбъемЕдиницаИзмерения);				
				Если Объект.ОбъемМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='можно указывать количество в %ЕдиницаИзмерения% в документах';uk='можна вказувати кількість у %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ОбъемЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='указан справочно';uk='зазначено довідково'"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru='<не измеряется>';uk='<не вимірюється>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Объем", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Длина", СтруктураВидимости) Тогда
			
			Если Объект.ДлинаИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru='%Количество1% %ЕдиницаИзмерения% имеет длину %Количество2% %Единица%, %МожноУказыватьВДокументах%';uk='%Количество1% %ЕдиницаИзмерения% має довжину %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ДлинаЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ДлинаЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ДлинаЕдиницаИзмерения);				
				Если Объект.ДлинаМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='можно указывать количество в %ЕдиницаИзмерения% в документах';uk='можна вказувати кількість у %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ДлинаЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='указана справочно';uk='зазначено довідково '"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru='<не измеряется>';uk='<не вимірюється>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Длина", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Площадь", СтруктураВидимости) Тогда
			
			Если Объект.ПлощадьИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru='%Количество1% %ЕдиницаИзмерения% имеет площадь %Количество2% %Единица%, %МожноУказыватьВДокументах%';uk='%Количество1% %ЕдиницаИзмерения% має площу %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ПлощадьЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ПлощадьЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ПлощадьЕдиницаИзмерения);				
				Если Объект.ПлощадьМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='можно указывать количество в %ЕдиницаИзмерения% в документах';uk='можна вказувати кількість у %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ПлощадьЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru='указана справочно';uk='зазначено довідково '"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru='<не измеряется>';uk='<не вимірюється>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Площадь", СтрокаЗаполнения);
			
		КонецЕсли;
		
		Если РазделВиден("СкладскаяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "СкладскаяГруппа", Объект.СкладскаяГруппа);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиРазмещениеНоменклатуры", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиРазмещениеНоменклатурыСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиРазмещениеНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("СрокГодности", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru='%СрокГодности% %ЕдиницаИзмеренияСрокаГодности%';uk='%СрокГодности% %ЕдиницаИзмеренияСрокаГодности%'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%СрокГодности%", Объект.СрокГодности);
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмеренияСрокаГодности%", Объект.ЕдиницаИзмеренияСрокаГодности);
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "СрокГодности", СтрокаЗаполнения);
		КонецЕсли;	
		
	КонецЕсли;	
	
	#КонецОбласти
		
	#Область РегламентированныйИФинансовыйУчет
	
	Если ГлаваВидна("РегламентированныйИФинансовыйУчет", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РегламентированныйИФинансовыйУчетЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("СтавкаНДС", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "СтавкаНДС", Объект.СтавкаНДС);
		КонецЕсли;
		
		Если РазделВиден("ПодакцизныйТовар", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ПодакцизныйТоварСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ПодакцизныйТовар);
			Область.Область("ПодакцизныйТоварФлаг").Картинка = Картинка;
			Область.Параметры.Расшифровка = "ПодакцизныйТовар";
			ТабличныйДокументПраво.Вывести(Область);		
		КонецЕсли;
		
		Если РазделВиден("ВестиУчетПоГТД", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ВестиУчетПоГТДСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ВестиУчетПоГТД);
			Область.Область("ВестиУчетПоГТДФлаг").Картинка = Картинка;
			Область.Параметры.Расшифровка = "ВестиУчетПоГТД";
			ТабличныйДокументПраво.Вывести(Область);		
		КонецЕсли;
		
		Если РазделВиден("НоменклатураГТД", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НоменклатураГТД", Объект.НоменклатураГТД);
		КонецЕсли;
		
		Если РазделВиден("ВестиУчетСертификатовНоменклатуры", СтруктураВидимости) Тогда 
			
			
			Область = Макет.ПолучитьОбласть("ВестиУчетСертификатовНоменклатурыСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ВестиУчетСертификатовНоменклатуры);
			Область.Область("ВестиУчетСертификатовНоменклатурыФлаг").Картинка = Картинка;
						
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСертификатыНоменклатуры", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиСертификатыНоменклатуры = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
				Область.Параметры.РасшифровкаГиперссылки = "ГиперссылкаПерейтиСертификатыНоменклатуры";
			КонецЕсли;
			
			Область.Параметры.Расшифровка = "ВестиУчетСертификатовНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
			
		КонецЕсли;
		
		Если РазделВиден("ГруппаАналитическогоУчета", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ГруппаАналитическогоУчета", Объект.ГруппаАналитическогоУчета);	 
		КонецЕсли;
		
		Если РазделВиден("ГруппаФинансовогоУчета", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);	 
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельностиСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
			
	КонецЕсли;
	
	#КонецОбласти
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
	
	#КонецОбласти
	
	ТабличныйДокументКарточка.Вывести(ТабличныйДокументКолонки);
	
	Возврат ТабличныйДокументКарточка;
	
КонецФункции

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела)

	Если ИмяРаздела = "Наименование" Тогда
		Возврат НСтр("ru='<не указано>';uk='<не зазначено>'");	
	ИначеЕсли ИмяРаздела = "НаименованиеПолное" Тогда
		Возврат НСтр("ru='<не указано>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Артикул" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Код" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Описание" Тогда
		Возврат НСтр("ru='<не указано>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "ФайлОписанияДляСайта" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизиты" Тогда
		Возврат НСтр("ru='<значение не задано>';uk='<значення не задано>'");
	ИначеЕсли ИмяРаздела = "Производитель" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Марка" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "Контрагент" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "Принципал" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "ТоварнаяКатегория" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "КоллекцияНоменклатуры" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "СезоннаяГруппа" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "РейтингПродаж" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "СпособОбеспеченияПотребностей" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "СхемаОбеспечения" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "ЦеноваяГруппа" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "Родитель" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "ГруппаДоступа" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "СкладскаяГруппа" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "НоменклатураГТД" Тогда
		Возврат НСтр("ru='<не указан>';uk='<не зазначено>'");
	ИначеЕсли ИмяРаздела = "ГруппаАналитическогоУчета" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	ИначеЕсли ИмяРаздела = "ГруппаФинансовогоУчета" Тогда
		Возврат НСтр("ru='<не указана>';uk='<не зазначена>'");
	КонецЕсли;
	
КонецФункции

Процедура ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокумент, Макет, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита = Неопределено, НовоеИмяРаздела = Неопределено)
	
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяРаздела + "Строка");
		
	Если ТекстЗаголовкаРеквизита <> Неопределено Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела + "Реквизит"] = Строка(ТекстЗаголовкаРеквизита) + ":";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗначенияРеквизита) Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияРеквизита;
	Иначе
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияНеЗаполнен(ИмяРаздела);
	КонецЕсли;
	
	Если НовоеИмяРаздела = Неопределено Тогда 
		ОбластьСтрока.Параметры.Расшифровка = ИмяРаздела;
	Иначе
		ОбластьСтрока.Параметры.Расшифровка = НовоеИмяРаздела;
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	КоличествоДополнительныхСтрок = 0;
	
	КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита);
	
	Счетчик = КоличествоДополнительныхСтрок;
	
	ОбластьДопСтрока = Макет.ПолучитьОбласть(ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела));
	
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
	КонецЦикла;
	
	ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяРаздела + "Строка", КоличествоДополнительныхСтрок);
	                                                                                                           		
КонецПроцедуры

Процедура ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	Если КоличествоДопСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Область = ТабличныйДокумент.Область(ИмяОбласти);
	Область.Разъединить();
	Область.Имя = Неопределено;
	АдресОбласти = Область.Имя;
	СтруктураАдреса = СтруктураАдреса(АдресОбласти);
	
	АдресКолонкиЗаголовкаНачало = СтруктураАдреса.АдресКолонкиНачало + 1; // + 1, т.к. слева колонка-отступ
	АдресКолонкиЗаголовкаКонец = АдресКолонкиЗаголовкаНачало + 7; // +7, т.к. заголовок занимает 8 колонок
	АдресКолонкиЗначенияНачало = АдресКолонкиЗаголовкаКонец + 1;
	
	// В левой колонке карточки разность должна быть равна 20, в правой - 21
	Если СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 20 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец;
	ИначеЕсли СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 21 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец - 1;
	КонецЕсли;
	
	АдресСтрокиНачало = СтруктураАдреса.АдресСтрокиНачало; 
	АдресСтрокиКонец = СтруктураАдреса.АдресСтрокиКонец;
	
	//Для заголовка
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗаголовкаНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗаголовкаКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
	//Для значения
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗначенияНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗначенияКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
КонецПроцедуры

Функция СтруктураАдреса(Адрес)
	
	МассивАдресОбласти = СтрРазделить(Адрес, ":");
	Если МассивАдресОбласти.Количество() <> 2 Тогда
		// Это значит, что строка состоит из одной колонки, процедура объединения с такими не работает
		Возврат Неопределено;
	КонецЕсли;
	
	АдресНачало = МассивАдресОбласти[0];
	МассивАдресНачало = СтрРазделить(АдресНачало, "C");
	АдресСтрокиНачало = СтрЗаменить(МассивАдресНачало[0], "R", "");
	АдресКолонкиНачало = МассивАдресНачало[1];
	
	АдресКонец = МассивАдресОбласти[1];
	МассивАдресКонец = СтрРазделить(АдресКонец, "C");
	АдресСтрокиКонец = СтрЗаменить(МассивАдресКонец[0], "R", "");
	АдресКолонкиКонец = МассивАдресКонец[1];

	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("АдресСтрокиНачало", 	Число(АдресСтрокиНачало));
	СтруктураАдреса.Вставить("АдресКолонкиНачало", 	Число(АдресКолонкиНачало));
	СтруктураАдреса.Вставить("АдресСтрокиКонец", 	Число(АдресСтрокиКонец));
	СтруктураАдреса.Вставить("АдресКолонкиКонец", 	Число(АдресКолонкиКонец));
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела)
	
	Если ИмяРаздела = "ДополнительныеРеквизиты"
		Или ИмяРаздела = "Описание"
		Или ИмяРаздела = "Производитель"
		Или ИмяРаздела = "Марка"
		Или ИмяРаздела = "Принципал"
		Или ИмяРаздела = "Контрагент"
		Или ИмяРаздела = "ФайлОписанияДляСайта"
		Или ИмяРаздела = "ТоварнаяКатегория"
		Или ИмяРаздела = "КоллекцияНоменклатуры"
		Или ИмяРаздела = "СезоннаяГруппа"
		Или ИмяРаздела = "РейтингПродаж"
		Или ИмяРаздела = "ГиперссылкаПерейтиСегменты"
		Или ИмяРаздела = "ГиперссылкаПерейтиСовместныеПродажи"
		Или ИмяРаздела = "ОбособленнаяЗакупкаПродажа"
		Или ИмяРаздела = "СпособОбеспеченияПотребностей"
		Или ИмяРаздела = "СхемаОбеспечения"
		Или ИмяРаздела = "ГиперссылкаПерейтиВариантыКомплектации"
		Или ИмяРаздела = "ГиперссылкаПерейтиПараметрыОбеспеченияПотребностей"
		Или ИмяРаздела = "ГиперссылкаПерейтиПроизводство" 
		Или ИмяРаздела = "ЦеноваяГруппа"
		Или ИмяРаздела = "ГиперссылкаПерейтиПрайсЛистКомпании"
		Или ИмяРаздела = "ГиперссылкаПерейтиПрайсЛистыПоставщиков"
		Или ИмяРаздела = "ШаблонЭтикетки"
		Или ИмяРаздела = "ШаблонЦенника"
		Или ИмяРаздела = "ГруппаАналитическогоУчета"
		Или ИмяРаздела = "ГруппаФинансовогоУчета" 
		Или ИмяРаздела = "ГруппаФинансовогоУчета"  Тогда
		Возврат "ДопСтрокаЛево";
	Иначе
		Возврат "ДопСтрокаПраво";
	КонецЕсли;
	
КонецФункции

Функция КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗаполненияЗначения, ТекстЗаполненияРеквизита)
	
	ШиринаКолонки = 2.38;
	КоличествоКолонокВЗначенииРеквизита = 12;
	ШиринаЗначенияРеквизита = КоличествоКолонокВЗначенииРеквизита * ШиринаКолонки;
	ЧислоСтрокЗначения = КоличествоСтрок(ШиринаЗначенияРеквизита, ТекстЗаполненияЗначения);
		
	ЧислоСтрокСвойства = 0;
	Если ЗначениеЗаполнено(ТекстЗаполненияРеквизита) Тогда
		КоличествоКолонокВЗаголовкеРеквизита = 8;
		ШиринаЗаголовкаРеквизита = ШиринаКолонки * КоличествоКолонокВЗаголовкеРеквизита;
		ЧислоСтрокСвойства = КоличествоСтрок(ШиринаЗаголовкаРеквизита, ТекстЗаполненияРеквизита);
	КонецЕсли;
	
	ЧислоСтрок = Макс(ЧислоСтрокЗначения, ЧислоСтрокСвойства);
	
	Если ЧислоСтрок = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок - 1;	
	
КонецФункции

Функция КоличествоСтрок(ШиринаОбласти, Строка)
	
	 Если Не ЗначениеЗаполнено(Строка) Тогда 
		Возврат 0;
	КонецЕсли;
	
	СредняяШиринаСимвола = 0.75;
	
	МассивСлов = СтрРазделить(Строка, " ");
		
	КоличествоСтрок = 1; // = 1, т.к. проверку на заполненность мы сделали выше, а значит одна строка нужна точно
	ТекущаяСтрока = "";
	
	Для Каждого Слово Из МассивСлов Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + Слово + " ";
		Если СтрДлина(ТекущаяСтрока) * СредняяШиринаСимвола > ШиринаОбласти Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
			ТекущаяСтрока = Слово + " ";
		КонецЕсли;
		
	КонецЦикла;	 
	 	 
	Возврат КоличествоСтрок;
	
КонецФункции

Функция КартинкаФлагаПоЗначению(ЗначениеФлага)
	
	Если ЗначениеФлага Тогда
		Возврат БиблиотекаКартинок.ФлагУстановлен;
	Иначе
		Возврат БиблиотекаКартинок.ФлагНеУстановлен;
	КонецЕсли;
	
КонецФункции

Функция РазделВиден(ИмяРаздела, СтруктураВидимости)
	
	Видимость = Истина;
	Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
		Видимость = СтруктураВидимости[ИмяРаздела];	
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости, КоличествоДопРеквизитов = 0)
	
	Если ИмяГлавы = "Описание" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ДополнительныеРеквизиты" Тогда
		Возврат КоличествоДопРеквизитов > 0 И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");		
	КонецЕсли;
	
	Если ИмяГлавы = "СведенияОПроизводителе" Тогда
		Возврат РазделВиден("Производитель", СтруктураВидимости) 
					Или РазделВиден("Марка", СтруктураВидимости) 
					Или РазделВиден("Принципал", СтруктураВидимости)
					Или РазделВиден("Контрагент", СтруктураВидимости);		
	КонецЕсли;
				
	Если ИмяГлавы = "ПланированиеИМаркетинг" Тогда
		Возврат РазделВиден("ТоварнаяКатегория", СтруктураВидимости)
					Или РазделВиден("КоллекцияНоменклатуры", СтруктураВидимости)
					Или РазделВиден("СезоннаяГруппа", СтруктураВидимости)
					Или РазделВиден("РейтингПродаж", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиСовместныеПродажи", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "ОбеспечениеИПроизводство" Тогда
		Возврат РазделВиден("ОбособленнаяЗакупкаПродажаСтрока", СтруктураВидимости)
					Или РазделВиден("СпособОбеспеченияПотребностейСтрока", СтруктураВидимости)
					Или РазделВиден("СхемаОбеспеченияСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиВариантыКомплектацииСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПараметрыОбеспеченияПотребностейСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПроизводствоСтрока", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "Цены" Тогда
		Возврат РазделВиден("ЦеноваяГруппа", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПрайсЛистКомпании", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПрайсЛистыПоставщиков", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "ПечатьЭтикетокИЦенников" Тогда
		Возврат РазделВиден("ШаблонЭтикетки", СтруктураВидимости)
				Или РазделВиден("ШаблонЦенника", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "ОсновныеПараметрыУчета" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ЕдиницыИзмеренияИОбластьХранения" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "РегламентированныйИФинансовыйУчет" Тогда
		Возврат РазделВиден("СтавкаНДС", СтруктураВидимости)
					Или РазделВиден("ПодакцизныйТовар", СтруктураВидимости)
					Или РазделВиден("ВестиУчетПоГТД", СтруктураВидимости)
					Или РазделВиден("ВестиУчетСертификатовНоменклатуры", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатуры", СтруктураВидимости)
					Или РазделВиден("ГруппаАналитическогоУчета", СтруктураВидимости)
					Или РазделВиден("ГруппаФинансовогоУчета", СтруктураВидимости);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПодменюСоздатьНаОсновании

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область ПодменюОтчеты

// Заполняет список команд отчетов.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОстаткиИДоступность(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуТоварыВЯчейках(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуABCXYZАнализНоменклатуры(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуВедомостьПоНоменклатуреОрганизаций(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияТовара(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 3;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияТовараВЯчейках(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 4;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуВедомостьПоСериямТовара(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 5;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОстаткиНоменклатурыПоСрокамГодности(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПродажиПоНоменклатуре(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеАссортимента(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьАссортимент";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмыНастройкиРаботыСРеквизитамиВВидеНоменклатуры

// Возвращает имена реквизитов, которые в настоящий момент отключены функциональными опциями.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов
//
Функция РеквизитыОтключенныеПоФО(ЭтоРеквизитыХарактеристик = Ложь) Экспорт
    
	Результат = Новый Массив;
	ИспользоватьПродажуАгентскихУслуг 			= ПолучитьФункциональнуюОпцию("ИспользоватьПродажуАгентскихУслуг");
	
	Если Не ИспользоватьПродажуАгентскихУслуг Тогда
		Результат.Добавить("Принципал");
		Результат.Добавить("Контрагент");
	КонецЕсли;
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыводитьКачество							= ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	ИспользоватьАдресноеХранение				= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура);
	ВыводитьЦеновуюГруппу						= ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ВыводитьГруппуФинУчета						= ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	ВыводитьАссортимент							= ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	ВыводитьМногооборотнуюТару					= ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	ИспользоватьХарактеристики					= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьЕдиницыДляОтчетов				= ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов");
	ИспользоватьСезонныеКоэффициенты 			= ПолучитьФункциональнуюОпцию("ИспользоватьСезонныеКоэффициенты");
	ИспользоватьУправлениеКоллекциями 			= ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеКоллекциями");
	ИспользоватьРейтингиПродажНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользоватьРейтингиПродажНоменклатуры");
	ИспользоватьОбособленноеОбеспечениеЗаказов 	= ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	ИспользоватьСертификатыНоменклатуры			= ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	ИспользоватьИмпортныеТовары					= ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары");
	ИспользоватьСпособыОбеспечения 		        = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	ИспользоватьУпаковкиНоменклатуры 			= ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьГруппыАналитическогоУчетаНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыАналитическогоУчетаНоменклатуры");
	ИспользоватьГруппыДоступаНоменклатуры 		= ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры");
	ИспользоватьОбменССайтом 					= ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтом");
	


	
	Результат = Новый Массив;
	
	Если Не ВыводитьКачество Тогда
		Результат.Добавить("Качество");
	КонецЕсли;
	
	
	Если Не ИспользоватьАдресноеХранение Тогда
		Результат.Добавить("СкладскаяГруппа");
	КонецЕсли;
	
	Если Не ВыводитьЦеновуюГруппу Тогда
		Результат.Добавить("ЦеноваяГруппа");
	КонецЕсли;
	
	Если Не ВыводитьГруппуФинУчета Тогда
		Результат.Добавить("ГруппаФинансовогоУчета");
	КонецЕсли;
	
	Если Не ИспользоватьГруппыАналитическогоУчетаНоменклатуры Тогда
		Результат.Добавить("ГруппаАналитическогоУчета");
	КонецЕсли;
	
	Если Не ВыводитьАссортимент Тогда
		Результат.Добавить("ТоварнаяКатегория");
		Результат.Добавить("Марка");
	КонецЕсли;
	
	Если Не ВыводитьМногооборотнуюТару Тогда
		Результат.Добавить("ПоставляетсяВМногооборотнойТаре");
		Результат.Добавить("НоменклатураМногооборотнаяТара");
		Результат.Добавить("ХарактеристикаМногооборотнаяТара");
	ИначеЕсли Не ИспользоватьХарактеристики Тогда 	
		Результат.Добавить("ХарактеристикаМногооборотнаяТара");
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристики Тогда
		Результат.Добавить("ИспользованиеХарактеристик");
	КонецЕсли;
	
	Если Не ИспользоватьЕдиницыДляОтчетов Тогда
		Результат.Добавить("ЕдиницаДляОтчетов");
	КонецЕсли;
	
	Если Не ИспользоватьСезонныеКоэффициенты Тогда
		Результат.Добавить("СезоннаяГруппа");
	КонецЕсли;
	
	Если Не ИспользоватьУправлениеКоллекциями Тогда
		Результат.Добавить("КоллекцияНоменклатуры");
	КонецЕсли;
	
	Если Не ИспользоватьРейтингиПродажНоменклатуры Тогда
		Результат.Добавить("РейтингПродаж");
	КонецЕсли;
	
	Если Не ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		Результат.Добавить("ОбособленнаяЗакупкаПродажа");
	КонецЕсли;
	
	Если Не ИспользоватьСертификатыНоменклатуры Тогда
		Результат.Добавить("ВестиУчетСертификатовНоменклатуры");
	КонецЕсли;
	
	Если Не ИспользоватьИмпортныеТовары Тогда
		Результат.Добавить("ВестиУчетПоГТД");
	КонецЕсли;
	
	
	Если Не ИспользоватьСпособыОбеспечения Тогда
		Результат.Добавить("СхемаОбеспечения");
		Результат.Добавить("СпособОбеспеченияПотребностей");
	КонецЕсли;
	
	Если Не ИспользоватьУпаковкиНоменклатуры Тогда
		Результат.Добавить("ИспользоватьУпаковки");
	КонецЕсли;
	
	Если Не ИспользоватьГруппыДоступаНоменклатуры Тогда
		Результат.Добавить("ГруппаДоступа");
	КонецЕсли;
	
	Если Не ИспользоватьОбменССайтом Тогда
		Результат.Добавить("ФайлОписанияДляСайта");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание действий с реквизитами номенклатуры в форме номенклатуры в зависимости от типа номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
//	ИспользоватьСрокГодностиСерии - Булево
//	ВариантОказанияУслуг - ПеречислениеСсылка.ВариантыОказанияУслуг
//
// Возвращаемое значение:
//	ТаблицаЗначений с колонками
//		Реквизит - ОбъектМетаданных:Реквизит - реквизит справочника Номенклатура
//		ДействиеСРеквизитом - Строка - действие
//
Функция ЗависимостьРеквизитовОтТипаНоменклатуры(
    ТипНоменклатуры,
	ИспользоватьСрокГодностиСерии,
	ВариантОказанияУслуг,
	ИспользованиеХарактеристик,
	ЭтоРеквизитыХарактеристик = Ложь,
    ВестиУчетПоГТД = Ложь, 
    ИзмеряетсяТолькоВСуммовомВыражении = Ложь, 
    ПодакцизныйТовар = Ложь
    ) Экспорт
			
	
	Если ТипЗнч(ИспользованиеХарактеристик) = Тип("ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры") Тогда
		ИспользоватьХарактеристики = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	Иначе
		ИспользоватьХарактеристики = ИспользованиеХарактеристик;
	КонецЕсли;
												
	ЭтоТовар 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоНабор 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	ЭтоУслуга 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоРабота 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоМногооборотнаяТара 	= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
    
	// Сформировать таблицу реквизитов для заполнения.
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеСРеквизитом");
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Реквизиты = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты;
	Иначе
		Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	КонецЕсли;
	
	//Реквизиты, которые должны быть в номенклатуре только тогда, когда не используются характеристики
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит			= Реквизиты.Принципал;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоУслуга Или ЭтоРабота)
										И (ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме
										Или ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.Партнером)
										И (Не ИспользоватьХарактеристики
											Или ЭтоРеквизитыХарактеристик),
										"Добавить",
										"Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит			= Реквизиты.Контрагент;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоУслуга или ЭтоРабота)
										И ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.Партнером
										И (Не ИспользоватьХарактеристики
											Или ЭтоРеквизитыХарактеристик),
										"Добавить",
										"Удалить");
 
	//										
	Если ЭтоРеквизитыХарактеристик Тогда
		
		Для Каждого Реквизит из Реквизиты Цикл
			Если ТаблицаРеквизитов.Найти(Реквизит, "Реквизит") = Неопределено Тогда
				НоваяСтрока = ТаблицаРеквизитов.Добавить();
				НоваяСтрока.Реквизит            = Реквизит;
				НоваяСтрока.ДействиеСРеквизитом = "Добавить";
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТаблицаРеквизитов;
	КонецЕсли;
    

	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ВариантОформленияПродажи;
	НоваяСтрока.ДействиеСРеквизитом = ?(((ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") И ЭтоТовар)
													Или ЭтоРабота
													Или ЭтоУслуга), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.СкладскаяГруппа;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.Качество;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	#Область Вес
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ВесЕдиницаИзмерения;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ВесЗнаменатель;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ВесМожноУказыватьВДокументах;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ВесЧислитель;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ВесИспользовать;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	#КонецОбласти
	
	#Область Объем
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОбъемЕдиницаИзмерения;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОбъемЗнаменатель;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОбъемМожноУказыватьВДокументах;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОбъемЧислитель;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОбъемИспользовать;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	#КонецОбласти
	
	#Область Длина
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ДлинаЕдиницаИзмерения;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ДлинаЗнаменатель;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ДлинаМожноУказыватьВДокументах;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ДлинаЧислитель;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ДлинаИспользовать;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	#КонецОбласти
	
	#Область Площадь
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ПлощадьЕдиницаИзмерения;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ПлощадьЗнаменатель;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ПлощадьМожноУказыватьВДокументах;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ПлощадьЧислитель;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ПлощадьИспользовать;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара), "Добавить", "Удалить");
	#КонецОбласти
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ИспользоватьУпаковки;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар), "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.НаборУпаковок;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар), "Добавить", "Удалить");

	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ВестиУчетПоГТД;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
    

	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОбособленнаяЗакупкаПродажа;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар Или ЭтоРабота, "Добавить", "Удалить");
		
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ПоставляетсяВМногооборотнойТаре;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.НоменклатураМногооборотнаяТара;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ХарактеристикаМногооборотнаяТара;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ЕдиницаИзмерения;
	НоваяСтрока.ДействиеСРеквизитом = "Добавить";
    
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.СрокГодности;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар И ИспользоватьСрокГодностиСерии, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ЕдиницаИзмеренияСрокаГодности;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар И ИспользоватьСрокГодностиСерии, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ГруппаФинансовогоУчета;
	НоваяСтрока.ДействиеСРеквизитом = ?(Не ЭтоНабор, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ВестиУчетСертификатовНоменклатуры;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
    
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.СхемаОбеспечения;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар Или ЭтоМногооборотнаяТара,
										"Добавить", 
										"Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.СпособОбеспеченияПотребностей;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоРабота,
										"Добавить",
										"Удалить");

	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.НоменклатураГТД;
	НоваяСтрока.ДействиеСРеквизитом = ?(НЕ ЭтоНабор, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ИзмеряетсяТолькоВСуммовомВыражении;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Удалить", "Добавить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар Или ЭтоМногооборотнаяТара ИЛИ (НЕ ИзмеряетсяТолькоВСуммовомВыражении), "Удалить", "Добавить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар Или ЭтоМногооборотнаяТара ИЛИ (НЕ ИзмеряетсяТолькоВСуммовомВыражении), "Удалить", "Добавить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ПодакцизныйТовар;
	НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.СтатьяДекларацииПоАкцизномуНалогу;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара) И ПодакцизныйТовар, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека;
	НоваяСтрока.ДействиеСРеквизитом = ?((ЭтоТовар Или ЭтоМногооборотнаяТара) И ПодакцизныйТовар, "Добавить", "Удалить");
	
	//
	Для Каждого Реквизит из Реквизиты Цикл
		Если ТаблицаРеквизитов.Найти(Реквизит, "Реквизит") = Неопределено Тогда
			НоваяСтрока = ТаблицаРеквизитов.Добавить();
			НоваяСтрока.Реквизит            = Реквизит;
			НоваяСтрока.ДействиеСРеквизитом = "Добавить";
		КонецЕсли;
	КонецЦикла;
		
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Возвращает имена реквизитов, которые всегда отображаются при создании новой номенклатуры.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов
//
Функция ОбязательноОтображаемыеПриСозданииРеквизиты(ТипНоменклатуры, ВариантОказанияУслуг) Экспорт        
	
	Результат = Новый Массив;
	
	Результат.Добавить("НаименованиеПолное");
	Результат.Добавить("ВестиУчетПоГТД");
	Результат.Добавить("НоменклатураГТД");
	Результат.Добавить("ПодакцизныйТовар");
	Результат.Добавить("СтатьяДекларацииПоАкцизномуНалогу");
	Результат.Добавить("УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека");
	Результат.Добавить("СтавкаНДС");
	Результат.Добавить("ЛьготаНДС");
	Результат.Добавить("ИзмеряетсяТолькоВСуммовомВыражении");
    
	Если ВариантОказанияУслуг <> Перечисления.ВариантыОказанияУслуг.ОрганизациейПродавцом
		И ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, МассивРеквизитовАгентскихУслуг());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена реквизитов, которые не отображаются в таблице настроек.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов
//
Функция НеотображаемыеВТаблицеНастроекРеквизиты() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("КодДляПоиска");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЦенника");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЭтикетки");
	Результат.Добавить("ВариантОформленияПродажи");
	Результат.Добавить("ИспользоватьУпаковки");
	Результат.Добавить("НаборУпаковок");
	Результат.Добавить("ТипНоменклатуры");
	Результат.Добавить("ЕстьТоварыДругогоКачества");          
	Результат.Добавить("ИспользованиеХарактеристик");
	Результат.Добавить("НоменклатураМногооборотнаяТара");
	Результат.Добавить("ХарактеристикаМногооборотнаяТара");
	Результат.Добавить("ЕдиницаИзмеренияСрокаГодности");
	Результат.Добавить("КоэффициентЕдиницыДляОтчетов");
	Результат.Добавить("ВладелецХарактеристик");
	Результат.Добавить("ВладелецСерий");
	Результат.Добавить("ВладелецТоварныхКатегорий");
	Результат.Добавить("ГруппаДоступа");
	Результат.Добавить("ВариантОформленияПродажи");
	
	Результат.Добавить("ВесЕдиницаИзмерения");
	Результат.Добавить("ВесЗнаменатель");
	Результат.Добавить("ВесМожноУказыватьВДокументах");
	Результат.Добавить("ВесЧислитель");
	
	Результат.Добавить("ОбъемЕдиницаИзмерения");
	Результат.Добавить("ОбъемЗнаменатель");
	Результат.Добавить("ОбъемМожноУказыватьВДокументах");
	Результат.Добавить("ОбъемЧислитель");
	
	Результат.Добавить("ДлинаЕдиницаИзмерения");
	Результат.Добавить("ДлинаЗнаменатель");
	Результат.Добавить("ДлинаМожноУказыватьВДокументах");
	Результат.Добавить("ДлинаЧислитель");
	
	Результат.Добавить("ПлощадьЕдиницаИзмерения");
	Результат.Добавить("ПлощадьЗнаменатель");
	Результат.Добавить("ПлощадьМожноУказыватьВДокументах");
	Результат.Добавить("ПлощадьЧислитель");
	
	Результат.Добавить("УдалитьОбъем");
	
	Результат.Добавить("ТекстДляПечатиВКолонкеЦенаНалоговойНакладной");       // Используется совмесно с ИзмеряетсяТолькоВСуммовомВыражении
	Результат.Добавить("ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной"); // Используется совмесно с ИзмеряетсяТолькоВСуммовомВыражении
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена реквизитов, которые не используются для контроля уникальности.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов
//
Функция НеиспользуемыеДляКонтроляУникальностиРеквизиты() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("НаименованиеПолное");
	Результат.Добавить("Описание");
	Результат.Добавить("ФайлКартинки");
	Результат.Добавить("ШаблонЦенника");
	Результат.Добавить("ШаблонЭтикетки");
	Результат.Добавить("ФайлОписанияДляСайта");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЦенника");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЭтикетки");
	Результат.Добавить("СрокГодности");
	Результат.Добавить("ОбособленнаяЗакупкаПродажа");
	
	Результат.Добавить("ВесИспользовать");
	Результат.Добавить("ОбъемИспользовать");
	Результат.Добавить("ПлощадьИспользовать");
	Результат.Добавить("ДлинаИспользовать");
	
	
	Результат.Добавить("ЛьготаНДС");
	Результат.Добавить("ИзмеряетсяТолькоВСуммовомВыражении");
	Результат.Добавить("НоменклатураГТД");
	
	Возврат Результат;
	
КонецФункции
 
// Возвращает типы значений. Реквизиты данных типов не проверяются на заполненность.
//
// Возвращаемое значение:
//	Массив, элементы - ОписаниеТипов
//
Функция НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	Результат.Добавить(Новый ОписаниеТипов("ХранилищеЗначения"));
	Результат.Добавить(Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу, содержащую все реквизиты справочника Номенклатура, как они указаны в метаданных.
//
// Возвращаемое значение:
//	ТаблицаЗначений с колонками
//		ИмяРеквизита - Строка - имя реквизита из метаданных
//
Функция ВсеРеквизитыНоменклатуры() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	
	Для Каждого Реквизит из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.ИмяРеквизита = Реквизит.Имя;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


// Обработчик обновления BAS УТ 3.2.2
Процедура ОбновитьДляУказанияКоличестваВРазличныхЕдиницах() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ЕдиницаИзмерения.УдалитьУпаковка КАК ЕдиницаИзмерения,
	|	Упаковки.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	Номенклатура.ЕдиницаДляОтчетов.УдалитьУпаковка КАК ЕдиницаДляОтчетов
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО (Упаковки.Ссылка = Номенклатура.ЕдиницаИзмерения.УдалитьУпаковка)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Номенклатура.ЕдиницаИзмерения) = ТИП(Справочник.УдалитьЕдиницыИзмерения)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	Пока Выборка.Следующий() Цикл
		
		НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НоменклатураОбъект, Выборка);
		
		Если ЗначениеЗаполнено(НоменклатураОбъект.УдалитьОбъем)
			И НЕ Выборка.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем Тогда
			НоменклатураОбъект.ОбъемИспользовать = Истина;
			РазрядовДоЗапятой = Цел(Log10(НоменклатураОбъект.УдалитьОбъем));
			Дробь = НоменклатураОбъект.УдалитьОбъем - Цел(НоменклатураОбъект.УдалитьОбъем);
			Если Дробь * 100000 - Цел(Дробь * 100000) > 0
				И РазрядовДоЗапятой < 5 Тогда
				Знаменатель = 1000000;
			ИначеЕсли Дробь * 10000 > Цел(Дробь * 10000)
				И РазрядовДоЗапятой < 6 Тогда
				Знаменатель = 100000;
			ИначеЕсли Дробь * 1000 > Цел(Дробь * 1000)
				И РазрядовДоЗапятой < 7 Тогда
				Знаменатель = 10000;
			ИначеЕсли Дробь * 100 > Цел(Дробь * 100)
				И РазрядовДоЗапятой < 8 Тогда
				Знаменатель = 1000;
			ИначеЕсли Дробь * 10 > Цел(Дробь * 10)
				И РазрядовДоЗапятой < 9 Тогда
				Знаменатель = 100;
			ИначеЕсли Дробь > 0
				И РазрядовДоЗапятой < 10 Тогда
				Знаменатель = 10;
			Иначе
				Знаменатель = 1;
			КонецЕсли;
			
			НоменклатураОбъект.ОбъемЧислитель = НоменклатураОбъект.УдалитьОбъем * Знаменатель;
			НоменклатураОбъект.ОбъемЗнаменатель = Знаменатель;
			НоменклатураОбъект.ОбъемЕдиницаИзмерения = ЕдиницаИзмеренияОбъема;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоменклатураОбъект.ВесЧислитель)
			И НЕ Выборка.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес Тогда
			НоменклатураОбъект.ВесИспользовать = Истина;
			НоменклатураОбъект.ВесЧислитель = НоменклатураОбъект.ВесЧислитель;
			НоменклатураОбъект.ВесЗнаменатель = 1;
			НоменклатураОбъект.ВесЕдиницаИзмерения = ЕдиницаИзмеренияВеса;
		КонецЕсли;
		
		Справочники.Номенклатура.ОтработатьЛогикуСвязиРеквизитов(НоменклатураОбъект);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоменклатураОбъект);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

// Проверяет наличие прав у текущего пользователя на ввод информации по номенклатуре без контроля.
//
// Возвращаемое значение:
//	Булево - наличие права ввода
//
Функция ДоступенВводБезКонтроля() Экспорт
	                                     
	Возврат ПраваПользователяПовтИсп.ВводИнформацииПоНоменклатуреБезКонтроля();
	
КонецФункции

// Проверяет уникальность наименования номенклатуры.
//
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//
// Возвращаемое значение:
//	Булево - признак уникальности наименования данного элемента справочника
//
Функция РабочееНаименованиеУникально(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка <> &Ссылка
	|	И Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка",       Объект.Ссылка);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);

	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает имена реквизитов номенклатуры, используемых только для агентских услуг.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов
//
Функция МассивРеквизитовАгентскихУслуг() Экспорт
	
	МассивАгентскихРеквизитов = Новый Массив;
	
	МассивАгентскихРеквизитов.Добавить("Принципал");
	МассивАгентскихРеквизитов.Добавить("Контрагент");
	
	Возврат МассивАгентскихРеквизитов;
	
КонецФункции

Процедура ОбновитьДанныеКлассификации(РезультатКлассификации, ТипКлассификации, ТипПараметраКлассификации,
			ПериодКлассификации, НеКлассифицирован)
	
	Если РезультатКлассификации.Колонки.Найти("Период") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("Период");
	КонецЕсли;
	
	Если РезультатКлассификации.Колонки.Найти("ТипПараметраКлассификации") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("ТипПараметраКлассификации");
	КонецЕсли;
	
	Если РезультатКлассификации.Колонки.Найти("ТипКлассификации") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("ТипКлассификации");
	КонецЕсли;
	
	РезультатКлассификации.ЗаполнитьЗначения(ПериодКлассификации, 		"Период");
	РезультатКлассификации.ЗаполнитьЗначения(ТипПараметраКлассификации, "ТипПараметраКлассификации");
	РезультатКлассификации.ЗаполнитьЗначения(ТипКлассификации, 			"ТипКлассификации");

	НаборЗаписей = РегистрыСведений.ABCXYZКлассификацияНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодКлассификации);
	НаборЗаписей.Отбор.ТипКлассификации.Установить(ТипКлассификации);
	НаборЗаписей.Отбор.ТипПараметраКлассификации.Установить(ТипПараметраКлассификации);

	НаборЗаписей.Загрузить(РезультатКлассификации);
	НаборЗаписей.Записать(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ABCXYZКлассификацияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ABCXYZКлассификацияНоменклатуры.Характеристика КАК Характеристика,
	|	ABCXYZКлассификацияНоменклатуры.РазделКлассификации КАК РазделКлассификации
	|ПОМЕСТИТЬ РезультатКлассификации
	|ИЗ
	|	РегистрСведений.ABCXYZКлассификацияНоменклатуры КАК ABCXYZКлассификацияНоменклатуры
	|ГДЕ
	|	ABCXYZКлассификацияНоменклатуры.Период = НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ)
	|	И ABCXYZКлассификацияНоменклатуры.ТипПараметраКлассификации = &ТипПараметраКлассификации
	|	И ABCXYZКлассификацияНоменклатуры.ТипКлассификации = &ТипКлассификации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РазделКлассификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ) КАК Период,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.РазделКлассификации КАК РазделКлассификации,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.ТипКлассификации КАК ТипКлассификации,
	|	&НеКлассифицирован КАК Класс,
	|	0 КАК ЗначениеПараметраКлассификации
	|ИЗ
	|	РегистрСведений.ABCXYZКлассификацияНоменклатуры.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(&ПериодКлассификации, СЕКУНДА, -1),
	|			(НЕ (Номенклатура, Характеристика, РазделКлассификации) В
	|						(ВЫБРАТЬ
	|							РезультатКлассификации.Номенклатура КАК Номенклатура,
	|							РезультатКлассификации.Характеристика КАК Характеристика,
	|							РезультатКлассификации.РазделКлассификации КАК РазделКлассификации
	|						ИЗ
	|							РезультатКлассификации КАК РезультатКлассификации))
	|				И ТипПараметраКлассификации = &ТипПараметраКлассификации
	|				И ТипКлассификации = &ТипКлассификации) КАК ABCXYZКлассификацияНоменклатурыСрезПоследних");
	
	Запрос.УстановитьПараметр("ПериодКлассификации", 		ПериодКлассификации);
	Запрос.УстановитьПараметр("ТипКлассификации", 			ТипКлассификации);
	Запрос.УстановитьПараметр("ТипПараметраКлассификации", 	ТипПараметраКлассификации);
	Запрос.УстановитьПараметр("НеКлассифицирован", 			НеКлассифицирован);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПустыхСвойств(Приемник, Источник)
	
	Для каждого КлючЗначение из Источник Цикл
		Если (ТипЗнч(Приемник[КлючЗначение.Ключ]) = Тип("Булево")
			И Не Приемник[КлючЗначение.Ключ])
			Или Не ЗначениеЗаполнено(Приемник[КлючЗначение.Ключ]) Тогда
			Приемник[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьЗначенияСвойств(Объект,Свойства)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Свойства);
	
	Для Каждого Свойство из МассивСтрок Цикл
		Объект[Свойство] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, Мера) Экспорт
	
	Если Мера <> "Вес"
		И Мера <> "Длина"
		И Мера <> "Площадь"
		И Мера <> "Объем" Тогда
		Возврат;
	КонецЕсли;
	
	Если МернаяЕдиницаХранения
		И ТипЕдиницы = Мера
		И (Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
		
		Номенклатура[Мера + "Использовать"] = Истина;
		Номенклатура[Мера + "Знаменатель"]  = 1;
		Номенклатура[Мера + "Числитель"]    = 1;
		Номенклатура[Мера + "МожноУказыватьВДокументах"] = Истина;
		Номенклатура[Мера + "ЕдиницаИзмерения"] = Номенклатура.ЕдиницаИзмерения;
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
		Или Номенклатура[Мера + "Знаменатель"] = 0
		Или Номенклатура[Мера + "Числитель"] = 0
		Или Не Номенклатура[Мера + "Использовать"] Тогда 
		
		Номенклатура[Мера + "ЕдиницаИзмерения"]          = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		Номенклатура[Мера + "Знаменатель"]               = 0;
		Номенклатура[Мера + "Числитель"]                 = 0;
		Номенклатура[Мера + "МожноУказыватьВДокументах"] = Ложь;
		Номенклатура[Мера + "Использовать"]              = Ложь;
	Иначе
	
		Если Не ЗначениеЗаполнено(Номенклатура[Мера + "ЕдиницаИзмерения"]) Тогда
			Номенклатура[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаИзмеренияПоУмолчанию(Мера);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу обязательных реквизитов.
// Параметры:
//	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - элемент справочника виды номенклатуры
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с обязательными для заполнения и выводимыми при создании реквизитами
//
Функция ТаблицаНастроекРеквизитов(ВидНоменклатуры) Экспорт
	РеквизитыОтключенныеПоФО = РеквизитыОтключенныеПоФО(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РеквизитыДляКонтроля.ЭтоДопРеквизит
	|			ТОГДА РеквизитыДляКонтроля.Свойство.Представление
	|		ИНАЧЕ РеквизитыДляКонтроля.ПредставлениеРеквизита
	|	КОНЕЦ КАК Представление,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА РеквизитыДляКонтроля.ЭтоДопРеквизит
	|			ТОГДА РеквизитыДляКонтроля.Свойство.Наименование
	|		ИНАЧЕ РеквизитыДляКонтроля.ИмяРеквизита
	|	КОНЕЦ КАК Наименование,
	|	РеквизитыДляКонтроля.Свойство КАК СвойствоДопРеквизита,
	|	РеквизитыДляКонтроля.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
	|	РеквизитыДляКонтроля.Уникален КАК Уникален,
	|	РеквизитыДляКонтроля.ОтображатьПриСоздании КАК ОтображатьПриСоздании
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Ссылка = &ВидНоменклатуры
	|	И (РеквизитыДляКонтроля.ОбязателенДляЗаполнения
	|			ИЛИ РеквизитыДляКонтроля.ОтображатьПриСоздании
	|           ИЛИ РеквизитыДляКонтроля.Уникален)
	|	И НЕ РеквизитыДляКонтроля.ИмяРеквизита В (&РеквизитыОтключенныеПоФО)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("РеквизитыОтключенныеПоФО", РеквизитыОтключенныеПоФО);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


// Возвращает таблицу дополнительные реквизиты номенклатуры
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_Номенклатура_Общие
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты(ВидНоменклатуры, НазначениеДопРеквизитов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Таблица = Новый ТаблицаЗначений;
		Возврат Таблица;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка                        КАК Набор,
	|	ДополнительныеРеквизиты.Свойство.Наименование         КАК ИмяРеквизита,
	|	ДополнительныеРеквизиты.Свойство.Заголовок            КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизиты.Свойство                      КАК Свойство,
	|	ИСТИНА                                                КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                 КАК ЭтоОбщийРеквизит,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ДополнительныеРеквизиты.Свойство.НаборСвойств         КАК НаборСвойств,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения          КАК Тип
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	(ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|			ИЛИ ДополнительныеРеквизиты.Ссылка = &НаборВида)";
	
	Если НазначениеДопРеквизитов = "Номенклатура" Тогда
		ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)";
		НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойств";
	ИначеЕсли НазначениеДопРеквизитов = "ХарактеристикиНоменклатуры" Тогда
		ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)";
		НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойствХарактеристик";
	ИначеЕсли НазначениеДопРеквизитов = "СерииНоменклатуры" Тогда
		ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие)";
		НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойствСерий";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);  	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаборВида", НаборВида);  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	//Получение ФО
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьОтгрузкуБезПереходаПраваСобственности = ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности");
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ИспользоватьРеализациюПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");
	ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	ИспользоватьОрдернуюСхемуПриОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	
	// Установка отборов.
	НастройкиФормыПереоформленияНакладных = НастройкиФормыПереоформленияНакладных(ИспользоватьРеализациюПоНесколькимЗаказам);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("Статус", Статус);
		СтруктураБыстрогоОтбора.Свойство("СостояниеНакладной", СостояниеНакладной);
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = Справочники.Склады.СкладПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборПоСкладуСервер();
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Менеджер", Менеджер, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Статус", Статус, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СостояниеНакладной", 
		?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), СостояниеНакладной), 
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СостояниеОрдера", 
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,,,
		Истина);
	
	Элементы.Склад.Видимость = ИспользоватьНесколькоСкладов И ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.СписокРаспоряженияНаОформлениеСостояниеОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке
		И ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.СостояниеОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке И ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.СостояниеНакладной.Видимость = ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокРаспоряженияНаОформлениеОрганизация",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокРаспоряженияНаОформлениеСклад",
		"Видимость",
		ИспользоватьНесколькоСкладов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокРаспоряженияНаОформлениеСделка",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокРаспоряженияНаОформлениеВалюта",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));

	ЕстьПравоЧтенияОстатков = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
	
	Если НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента ИЛИ НЕ ЕстьПравоЧтенияОстатков Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	Элементы.СписокРаспоряженияНаОформление.Видимость = ЕстьПравоЧтенияОстатков;
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.МенеджерРеализация.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.РеализацияТоваровУслуг));
		
	ЗаполнитьСпискиВыбораПоСостояниямОтгрузки();
	
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоЗаказам.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.РеализацияТоваровУслуг)
		ИЛИ ПравоДоступа("Добавление", Метаданные.Документы.АктВыполненныхРабот);
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоОтгрузке.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.РеализацияТоваровУслуг);
	
	Элементы.СписокСоздатьАктВыполненныхРабот.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.АктВыполненныхРабот);
	Элементы.СписокСоздатьАктНаПередачуПрав.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.РеализацияТоваровУслуг);
	Элементы.СписокСоздатьРеализацияТоваровУслуг.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.РеализацияТоваровУслуг);
	
	УстановитьТекущуюСтраницу();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка());
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты,, Ложь);
	// Конец МенюОтчеты
	
	// ИнтеграцияС1СДокументооборотом         
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(
		ЭтаФорма, 
		Элементы.ГруппаГлобальныеКоманды, 
		Новый Структура("Источник", "ЖурналДокументов.ДокументыПродажи"));
		
	// Конец ИнтеграцияС1СДокументооборотом
	
	// КомандыЭДО
	ОбменСКонтрагентами.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюЭДО);
	// Конец КомандыЭДО
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_РеализацияТоваровУслуг"
	 ИЛИ ИмяСобытия = "Запись_ЗаказКлиента"
	 ИЛИ ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
	 ИЛИ ИмяСобытия = "Запись_АктВыполненныхРабот") 
	 И Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКОформлению Тогда
			Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;

	Если ИмяСобытия = "ВыбранТипДокументаПродажи" Тогда
		Если Параметр = "Реализация товаров и услуг" Тогда
			ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
				Элементы.СписокРаспоряженияНаОформление,
				ИспользоватьРеализациюПоНесколькимЗаказам,
				Склад,
				,
				,
				,
				ПараметрыОформления);
				
		ИначеЕсли Параметр = "Акт на передачу прав" Тогда
			ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
				Элементы.СписокРаспоряженияНаОформление,
				ИспользоватьРеализациюПоНесколькимЗаказам,
				Склад,
				,
				,
				Истина,
				ПараметрыОформления);
				
		ИначеЕсли Параметр = "Акт выполненных работ" Тогда
			ПродажиКлиент.СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(
				Элементы.СписокРаспоряженияНаОформление,
				ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ЖурналДокументов.ДокументыПродажи.Форма.ПараметрыОформленияДокументовПродажи" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			СохранитьНастройки(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		Настройки.Удалить("Склад");
		СтруктураБыстрогоОтбора.Свойство("СостояниеНакладной", СостояниеНакладной);
		Настройки.Удалить("СостояниеНакладной");
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
		Настройки.Удалить("СостояниеОрдера");
	Иначе
		Склад              = Настройки.Получить("Склад");
		СостояниеНакладной = Настройки.Получить("СостояниеНакладной");
		СостояниеОрдера    = Настройки.Получить("СостояниеОрдера");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Менеджер", Менеджер, СтруктураБыстрогоОтбора, Настройки);
	Настройки.Вставить("Менеджер", Менеджер);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Статус", Статус, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"СостояниеНакладной",
		?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), СостояниеНакладной),
		СтруктураБыстрогоОтбора, 
		Настройки,
		ЗначениеЗаполнено(СостояниеНакладной),
		,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"СостояниеОрдера",
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеОрдера),
		,
		Истина);
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтатусКПредоплате(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.Да, "Продолжить");
	СписокОтветов.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусКПредоплатеЗавершение",
		ЭтотОбъект, 
		Новый Структура("ВыделенныеСтроки, ОбрабатываемыйСписок", ВыделенныеСтроки, Элементы.Список)), 
		НСтр("ru='У выделенных в списке документов будет установлен статус ""К предоплате"".';uk='У виділених в списку документів буде встановлений статус ""До передплати"".'"), 
		СписокОтветов);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКПредоплатеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	ДопПараметры = Новый Структура("ИсключаемыеТипы", Новый ФиксированныйМассив(МассивТипов));
	
	ОчиститьСообщения();
	КоличествоОбработанных = УстановитьСтатусДокументов(ВыделенныеСтроки, "КПредоплате");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(ОбрабатываемыйСписок, 
		КоличествоОбработанных, 
		ВыделенныеСтроки.Количество(), 
		НСтр("ru='К предоплате';uk='До передплати'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализовано(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтрокиСодержатОтгрузку = Ложь;
	ВыделенныеСтрокиСодержатНеТолькоОтгрузку = Ложь;
	
	Если ИспользоватьОтгрузкуБезПереходаПраваСобственности Тогда
		
		СтруктураСписка = СформироватьСтруктуруСпискаДокументов(ВыделенныеСтроки);
		ВыделенныеСтрокиСодержатОтгрузку = СтруктураСписка.ВыделенныеСтрокиСодержатОтгрузку;
		ВыделенныеСтрокиСодержатНеТолькоОтгрузку = СтруктураСписка.ВыделенныеСтрокиСодержатНеТолькоОтгрузку;
		
	КонецЕсли;
	
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.Да, "Продолжить");
	СписокОтветов.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	Если Не ВыделенныеСтрокиСодержатОтгрузку Тогда
		Ответ = Неопределено;
		СтруктураОтвета = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусРеализованоПослеВопроса",
			ЭтотОбъект, 
			Новый Структура("ВыделенныеСтроки, ВыделенныеСтрокиСодержатНеТолькоОтгрузку, ОбрабатываемыйСписок, СтруктураОтвета", 
				ВыделенныеСтроки, 
				ВыделенныеСтрокиСодержатНеТолькоОтгрузку, 
				Элементы.Список, СтруктураОтвета)), 
			НСтр("ru='У выделенных в списке документов будет установлен статус ""Реализовано"".';uk='У виділених у списку документів буде встановлено статус ""Реалізовано"".'"),
			СписокОтветов);
		Возврат;
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаПереходаПраваСобственности", ОбщегоНазначенияКлиент.ДатаСеанса());
		ПараметрыФормы.Вставить("ВыделенныеСтрокиСодержатНеТолькоОтгрузку", ВыделенныеСтрокиСодержатНеТолькоОтгрузку);
		
		СтруктураОтвета = Неопределено;
		
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ВопросОСменеСтатуса", 
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("УстановитьСтатусРеализованоЗавершение", 
				ЭтотОбъект,
				Новый Структура("ВыделенныеСтроки, ОбрабатываемыйСписок", ВыделенныеСтроки, Элементы.Список)), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусРеализованоФрагмент(ВыделенныеСтроки, Элементы.Список, СтруктураОтвета);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализованоПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ВыделенныеСтрокиСодержатНеТолькоОтгрузку = ДополнительныеПараметры.ВыделенныеСтрокиСодержатНеТолькоОтгрузку;
	ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
	СтруктураОтвета = ДополнительныеПараметры.СтруктураОтвета;
	
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусРеализованоФрагмент(ВыделенныеСтроки, ОбрабатываемыйСписок, СтруктураОтвета);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализованоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
	
	
	СтруктураОтвета = Результат;
	Если СтруктураОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусРеализованоФрагмент(ВыделенныеСтроки, ОбрабатываемыйСписок, СтруктураОтвета);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализованоФрагмент(Знач ВыделенныеСтроки, Знач ОбрабатываемыйСписок, Знач СтруктураОтвета)
	
	Перем КоличествоОбработанных;
	
	ОчиститьСообщения();
	КоличествоОбработанных = УстановитьСтатусДокументов(ВыделенныеСтроки, "Отгружено", СтруктураОтвета);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(ОбрабатываемыйСписок, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Реализовано';uk='Реалізовано'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВПути(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.Да, "Продолжить");
	СписокОтветов.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусВПутиЗавершение", 
		ЭтотОбъект, 
		Новый Структура("ВыделенныеСтроки, ОбрабатываемыйСписок", ВыделенныеСтроки, Элементы.Список)), 
		НСтр("ru='У выделенных в списке документов будет установлен статус ""В пути"".';uk='У виділених в списку документів буде встановлений статус ""В дорозі"".'"), 
		СписокОтветов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВПутиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = УстановитьСтатусДокументов(ВыделенныеСтроки, "ВПути");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(ОбрабатываемыйСписок, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='В пути';uk='В дорозі'"));

КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктНаПередачуПрав(Команда)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("ВариантОформленияПродажи",
		ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав")));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоЗаказам(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ЖурналДокументов.ДокументыПродажи.ФормаСписка.Команда.ОформитьПоЗаказам");
	
	ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", Истина, Ложь);
	ОформитьПродажу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузке(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ЖурналДокументов.ДокументыПродажи.ФормаСписка.Команда.ОформитьПоОтгрузке");
	
	ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", Ложь, Истина);
	ОформитьПродажу();
	
КонецПроцедуры

&НаКлиенте
Процедура Параметры(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПараметрыЗавершение", ЭтотОбъект);
	ОткрытьФормуНастройкиПараметров(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		СохранитьНастройки(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = Новый СписокЗначений;
	МассивТиповДокументов = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ВыделенныйДокумент = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ВыделеннаяСтрока).Ссылка;
		ТипВыделенногоДокумента = ТипЗнч(ВыделенныйДокумент);
		
		Если МассивТиповДокументов.Найти(ТипВыделенногоДокумента) = Неопределено Тогда
			МассивТиповДокументов.Добавить(ТипВыделенногоДокумента);
			Если МассивТиповДокументов.Количество() > 1 Тогда
				ПоказатьПредупреждение( , НСтр("ru='Команда не может быть выполнена для документов разного вида.';uk='Команда не може бути виконана для документів різного виду.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокДокументов.НайтиПоЗначению(ВыделенныйДокумент) = Неопределено Тогда
			СписокДокументов.Добавить(ВыделенныйДокумент);
		КонецЕсли;
			
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", 
	             Новый Структура("ВходящиеДокументы", СписокДокументов), 
	             ЭтаФорма,
	             Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"Менеджер",
		Менеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"Статус",
		Статус,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьОтборПоСкладуСервер();

КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНакладнойПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СостояниеНакладной",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеНакладной));
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОрдераПриИзменении(Элемент)
	Состояние = ?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СостояниеОрдера",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеОрдера));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление динамического списка "СписокРаспоряженияНаОформление"
	СписокУсловноеОформление = СписокРаспоряженияНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Документ имеет высокий приоритет';uk='Документ має високий пріоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Документ имеет низкий приоритет';uk='Документ має низький пріоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление", "СписокРаспоряженияНаОформлениеДатаДокумента");

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСтруктуруСпискаДокументов(ВыделенныеСтроки)
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ВыделенныеСтрокиСодержатОтгрузку", Ложь);
	СтруктураВозврата.Вставить("ВыделенныеСтрокиСодержатНеТолькоОтгрузку", Ложь);
	
	МассивРеализаций = Новый Массив;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ТекСтрока) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			МассивРеализаций.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияХозОпераций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивРеализаций, "ХозяйственнаяОперация");
	
	Для Каждого ТекСтрока Из МассивРеализаций Цикл
		
		Если ЗначенияХозОпераций[ТекСтрока] = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
			СтруктураВозврата.Вставить("ВыделенныеСтрокиСодержатОтгрузку", Истина);
		ИначеЕсли ЗначенияХозОпераций[ТекСтрока] <> Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
			СтруктураВозврата.Вставить("ВыделенныеСтрокиСодержатНеТолькоОтгрузку", Истина);
		КонецЕсли;
		
		Если СтруктураВозврата.ВыделенныеСтрокиСодержатОтгрузку
			 И СтруктураВозврата.ВыделенныеСтрокиСодержатНеТолькоОтгрузку Тогда
			 Прервать;
		 КонецЕсли;
		 
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоСкладуСервер()
	
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Настройки)
	
	НастройкиОформленияСохранены = Истина;
	
	СоздаватьДокументПродажи       = Настройки.СоздаватьДокументПродажи;
	ПечататьРеализациюТоваровУслуг = Настройки.ПечататьРеализациюТоваровУслуг;
	ПечататьАктВыполненныхРабот    = Настройки.ПечататьАктВыполненныхРабот;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПараметров(Оповещение)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СоздаватьДокументПродажи",       СоздаватьДокументПродажи);
	ПараметрыФормы.Вставить("ПечататьРеализациюТоваровУслуг", ПечататьРеализациюТоваровУслуг);
	ПараметрыФормы.Вставить("ПечататьАктВыполненныхРабот",    ПечататьАктВыполненныхРабот);
	
	ОткрытьФорму("ЖурналДокументов.ДокументыПродажи.Форма.ПараметрыОформленияДокументовПродажи", 
		ПараметрыФормы,
		ЭтаФорма,
		,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСпискиВыбораПоСостояниямОтгрузки()
	
	СписокВыбора = Элементы.СостояниеНакладной.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0",НСтр("ru='Все оформлено';uk='Все оформлено'"),Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1",НСтр("ru='Создать накладную';uk='Створити накладну'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2",НСтр("ru='Дооформить накладную';uk='Дооформити накладну'"),Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
	СписокВыбора = Элементы.СостояниеОрдера.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0",НСтр("ru='Соответствуют накладным';uk='Відповідають накладним'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1",НСтр("ru='Не оформлены';uk='Не оформлені'"), Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3",НСтр("ru='Не соответствуют накладным';uk='Не відповідають накладним'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьСтатусДокументов(ВыделенныеСтроки, ИмяСтатуса, ДопПараметры = Неопределено)

	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура("ИсключаемыеТипы", Новый ФиксированныйМассив(МассивТипов));
	Иначе
		ДопПараметры.Вставить("ИсключаемыеТипы", Новый ФиксированныйМассив(МассивТипов));
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, ИмяСтатуса, ДопПараметры);
	
	Возврат КоличествоОбработанных
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область Создание_Документов

&НаКлиенте
Процедура ОформитьПродажу()
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Команда не может быть выполнена для указанного объекта.';uk='Команда не може бути виконана для зазначеного об''єкта.'"));
		Возврат;
	ИначеЕсли ПараметрыОформления.ПоЗаказам И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Оформление по заказам недоступно для данного вида документов.';uk='Оформлення по замовленнях недоступне для даного виду документів.'"));
		Возврат;
	КонецЕсли;

	Если Не НастройкиОформленияСохранены Тогда
		Оповещение = Новый ОписаниеОповещения("ОформитьПродажуЗавершение", ЭтотОбъект);
		ОткрытьФормуНастройкиПараметров(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если СоздаватьДокументПродажи Тогда
		СоздатьНапечататьДокументы();
	Иначе
		СоздатьНаОсновании();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПродажуЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		СохранитьНастройки(Результат);
	КонецЕсли;
	
	Если СоздаватьДокументПродажи Тогда
		СоздатьНапечататьДокументы();
	Иначе
		СоздатьНаОсновании();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНапечататьДокументы()
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		И ПараметрыОформления.ПоОрдерам Тогда
		
		ПерезаполняемаяНакладная = ТекущиеДанные.Ссылка;
	Иначе
		ПерезаполняемаяНакладная = Неопределено;
	КонецЕсли;
		
	МассивСсылокЗаказы = Новый Массив();
	МассивСсылокНакладные = Новый Массив();
	
	Для Каждого Строка Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
	
		Если ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") 
			ИЛИ ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка).Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ПараметрыОформления.ПоЗаказам Тогда
			
			Продолжить;
			
		ИначеЕсли ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка).Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ПараметрыОформления.ПоОрдерам Тогда
			МассивСсылокНакладные.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка).Ссылка);
		Иначе
			МассивСсылокЗаказы.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка).Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылокЗаказы.Количество() = 0 И МассивСсылокНакладные.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	ИначеЕсли МассивСсылокЗаказы.Количество() > 0 И МассивСсылокНакладные.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для разных типов документов!';uk='Команда не може бути виконана для різних типів документів!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	МассивДокументов = Новый Массив();
	Если МассивСсылокЗаказы.Количество() > 0 Тогда
		ПараметрыФормирования = СформироватьДокументыПродажиСервер(МассивСсылокЗаказы);
		МассивДокументов = ПараметрыФормирования.МассивДокументов;
		
		Если ПараметрыФормирования.Действие = "ПереоформлениеДокументовПродажи" Тогда
			ОткрытьФормуПереоформлениеНакладных(МассивСсылокЗаказы);
		КонецЕсли;
	КонецЕсли;
	ПерезаполнитьНакладнуюПоОрдерам(ПерезаполняемаяНакладная);
	
	МассивПечатаемыхДокументов = Новый Массив();
	
	Для Каждого ТекЭлемент Из МассивДокументов Цикл
		
		Если Не ТекЭлемент.Проведен Тогда
			
			Если ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
				ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
			ИначеЕсли ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда 
				ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
			КонецЕсли; 
			
		ИначеЕсли ТекЭлемент.Печатать Тогда
			
			МассивПечатаемыхДокументов.Добавить(ТекЭлемент.Документ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.СписокРаспоряженияНаОформление.Обновить();
	
	Если МассивПечатаемыхДокументов.Количество() > 0 Тогда
		
		Если ПечататьРеализациюТоваровУслуг Или ПечататьАктВыполненныхРабот Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
				"РегистрСведений.НастройкиПечатиОбъектов",
				"КомплектДокументов",
				МассивПечатаемыхДокументов,
				Новый Структура());
			ТекстСообщения = НСтр("ru='Документы созданы и напечатаны (%КоличествоДокументов%)';uk='Документи створені і надруковані (%КоличествоДокументов%)'");
		Иначе
			ТекстСообщения = НСтр("ru='Документы созданы (%КоличествоДокументов%)';uk='Документи створені (%КоличествоДокументов%)'");
		КонецЕсли;
			
		ПоказатьОповещениеПользователя(
			СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", МассивДокументов.Количество()),
			,,БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДокументыПродажиСервер(МассивСсылок)
	
	ВозвращаемыеПараметры = Новый Структура("МассивДокументов, Действие", Новый Массив(), Неопределено);
	
	Если ПараметрыОформления.ПоОрдерам Тогда
		
		Если НЕ ВозможноПерезаполнениеПоОтгрузке(МассивСсылок) Тогда
			ВозвращаемыеПараметры.Действие = "";
		КонецЕсли;
		
		Если ОпределитьНаличиеОформленныхРеализаций(МассивСсылок) Тогда
			ВыборКорректный = ОпределитьКорректностьВыбора(МассивСсылок);
			Если Не ВыборКорректный ТОгда
				ВозвращаемыеПараметры.Действие = "";
			Иначе
				ВозвращаемыеПараметры.Действие = "ПереоформлениеДокументовПродажи";
			КонецЕсли;
			
			Возврат ВозвращаемыеПараметры
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.Склад,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	СУММА(РаспоряжениеНаОформление.КОформлениюОстаток) КАК КОформлениюОстаток,
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.СпособДоставки,
		|	РаспоряжениеНаОформление.ПеревозчикПартнер,
		|	РаспоряжениеНаОформление.АдресДоставки,
		|	РаспоряжениеНаОформление.АдресДоставкиПеревозчика,
		|	РаспоряжениеНаОформление.ЗаказКлиента,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|   РаспоряжениеНаОформление.НаправлениеДеятельности
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Партнер КАК Партнер,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент КАК Контрагент,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Договор КАК Договор,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Организация КАК Организация,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение КАК Соглашение,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Сделка КАК Сделка,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Склад КАК Склад,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Подразделение КАК Подразделение,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ЭтоГруппа
		|					И ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ЗаказыКлиентовОстатки.ЗаказКлиента.Склад
		|		КОНЕЦ КАК СкладОтгрузки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ЭтоГруппа
		|					И ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			ИНАЧЕ ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация
		|		КОНЕЦ КАК ХозяйственнаяОперация,
		|		ЗаказыКлиентовОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Валюта КАК ВалютаВзаиморасчетов,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|		ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки КАК СпособДоставки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ПеревозчикПартнер
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОНЕЦ КАК ПеревозчикПартнер,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.АдресДоставки
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК АдресДоставки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.АдресДоставкиПеревозчика
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК АдресДоставкиПеревозчика,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ КАК КалендарьВозвратаТары,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(
		|				,
		|				ЗаказКлиента В (&МассивСсылок)
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура.ВариантОформленияПродажи В (ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг), ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав))) КАК ЗаказыКлиентовОстатки
		|	ГДЕ
		|		&ПоЗаказам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Партнер,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Договор,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Организация,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Сделка,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Подразделение,
		|		НЕОПРЕДЕЛЕНО,
		|		ЛОЖЬ,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.КОформлениюОстаток,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Валюта,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ЦенаВключаетНДС,
		|		ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ВернутьМногооборотнуюТару,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СрокВозвратаМногооборотнойТары,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.НаправлениеДеятельности
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(
		|				,
		|				ЗаказКлиента В (&МассивСсылок)
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ЗаказыКлиентовОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Партнер,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Контрагент,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Договор,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Организация,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Соглашение,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Сделка,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Склад,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Подразделение,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Склад.ЭтоГруппа
		|					И ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Склад
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Склад.ЭтоГруппа
		|					И ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|					ИЛИ ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			ИНАЧЕ ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ХозяйственнаяОперация
		|		КОНЕЦ,
		|		ТоварыКОтгрузкеОстатки.КОформлениюОстаток,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Валюта,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ЦенаВключаетНДС,
		|		ТоварыКОтгрузкеОстатки.Номенклатура.ВариантОформленияПродажи,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.СпособДоставки,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ТоварыКОтгрузкеОстатки.ДокументОтгрузки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ПеревозчикПартнер
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ТОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.АдресДоставки
		|			ИНАЧЕ """"
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ТоварыКОтгрузкеОстатки.ДокументОтгрузки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.АдресДоставкиПеревозчика
		|			ИНАЧЕ """"
		|		КОНЕЦ,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ВернутьМногооборотнуюТару,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.СрокВозвратаМногооборотнойТары,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|       ТоварыКОтгрузкеОстатки.ДокументОтгрузки.НаправлениеДеятельности
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|				,
		|				ДокументОтгрузки В (&МассивСсылок)
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ТоварыКОтгрузкеОстатки
		|	ГДЕ
		|		&ПоОрдерам) КАК РаспоряжениеНаОформление
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	РаспоряжениеНаОформление.ПеревозчикПартнер,
		|	РаспоряжениеНаОформление.СпособДоставки,
		|	РаспоряжениеНаОформление.АдресДоставкиПеревозчика,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.АдресДоставки,
		|	РаспоряжениеНаОформление.ЗаказКлиента,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.Склад,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|   РаспоряжениеНаОформление.НаправлениеДеятельности
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.ЗаказКлиента,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Склад",        Склад);
	Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	Запрос.УстановитьПараметр("ПоЗаказам",   ПараметрыОформления.ПоЗаказам);
	Запрос.УстановитьПараметр("ПоОрдерам",   ПараметрыОформления.ПоОрдерам);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивДокументов = Новый Массив();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выгрузка = РезультатЗапроса.Выгрузить();
		
		СтруктураПоиска = Новый Структура("
			|Партнер,
			|Контрагент,
			|Договор,
			|Организация,
			|Соглашение,
			|Сделка,
			|Склад,
			|Подразделение,
			|СкладОтгрузки,
			|ХозяйственнаяОперация,
			|ВалютаВзаиморасчетов,
			|ЦенаВключаетНДС,
			|ЗапрещеноВыбиратьГруппуСкладов,
			|ВариантОформленияПродажи,
			|СпособДоставки,
			|ПеревозчикПартнер,
			|АдресДоставки,
			|АдресДоставкиПеревозчика,
			|ВернутьМногооборотнуюТару,
			|СрокВозвратаМногооборотнойТары,
			|ТребуетсяЗалогЗаТару,
			|КалендарьВозвратаТары,
			|РассчитыватьДатуВозвратаТарыПоКалендарю,
			|НаправлениеДеятельности
			|");

		МассивОбработанныхЗаказов = Новый Массив();

		Для Каждого ТекСтрока Из Выгрузка Цикл

			Если МассивОбработанныхЗаказов.Найти(ТекСтрока.ЗаказКлиента) <> Неопределено Тогда
				Продолжить;
            КонецЕсли;
			
			МассивЗаказов = Новый Массив();
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			Выборка.Сбросить();
			
			Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
				МассивЗаказов.Добавить(Выборка.ЗаказКлиента);
				МассивОбработанныхЗаказов.Добавить(Выборка.ЗаказКлиента);
			КонецЦикла;
			
			ПараметрыОснования = Новый Структура();
			
			Если Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				ИЛИ Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
				ПараметрыОснования.Вставить("СкладОтгрузки", Склад);
				ПараметрыОснования.Вставить("ВариантОформленияПродажи", Выборка.ВариантОформленияПродажи);
				ПараметрыОснования.Вставить("ПараметрыОформления", ПараметрыОформления);
			КонецЕсли;
			
			Если ((Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				ИЛИ Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)
				И ИспользоватьРеализациюПоНесколькимЗаказам) Или
				(Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот
				И ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам) Тогда
				
				РеквизитыРаспоряжения = ПолучитьРеквизитыРаспоряжений(МассивЗаказов);
				РеквизитыШапки = Новый Структура();
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, РеквизитыРаспоряжения, Истина);
				
				ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
				ПараметрыОснования.Вставить("ДокументОснование", МассивЗаказов);
				
				СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, МассивДокументов);
				
			Иначе
				
				Для Каждого ТекЭлемент Из МассивЗаказов Цикл
					ПараметрыОснования.Вставить("ДокументОснование", ТекЭлемент);
					СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, МассивДокументов);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВозвращаемыеПараметры.МассивДокументов = МассивДокументов;
	
	Возврат ВозвращаемыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыРаспоряжений(МассивРаспоряжений)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчет
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетКонтрагента
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузоотправитель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузоотправитель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузополучатель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузополучатель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузоотправитель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузоотправителя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузоотправителя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузополучателя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузополучателя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузополучатель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузополучателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузополучателя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Касса
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Касса)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ КАК Касса,
	|	ЗаказКлиента.ФормаОплаты КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиЗначенияПолей КАК СТРОКА(1000))) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиЗначенияПолей КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(1000))
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА (ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|							И ЗаказКлиента.ЗонаДоставки <> ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.ЗонаДоставки
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЗонаДоставки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|	КОНЕЦ КАК ЗонаДоставки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиС
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиС)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиПо
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиПо)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000))) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиента.Контрагент КАК Контрагент,
	|		ЗаказКлиента.Организация КАК Организация,
	|		ЗаказКлиента.БанковскийСчет КАК БанковскийСчет,
	|		ЗаказКлиента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|		ЗаказКлиента.Грузоотправитель КАК Грузоотправитель,
	|		ЗаказКлиента.Грузополучатель КАК Грузополучатель,
	|		ЗаказКлиента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|		ЗаказКлиента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|		ЗаказКлиента.Касса КАК Касса,
	|		ЗаказКлиента.ФормаОплаты КАК ФормаОплаты,
	|		ЗаказКлиента.СпособДоставки                        КАК СпособДоставки,
	|		ЗаказКлиента.АдресДоставкиЗначенияПолей            КАК АдресДоставкиЗначенияПолей,
	|		ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|		ЗаказКлиента.ЗонаДоставки                          КАК ЗонаДоставки,
	|		ЗаказКлиента.ВремяДоставкиС                        КАК ВремяДоставкиС,
	|		ЗаказКлиента.ВремяДоставкиПо                       КАК ВремяДоставкиПо,
	|		ЗаказКлиента.ДополнительнаяИнформацияПоДоставке    КАК ДополнительнаяИнформацияПоДоставке
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В(&МассивРаспоряжений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаявкаНаВозвратТоваровОтКлиента.Контрагент,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Организация,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчет,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетКонтрагента,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Грузоотправитель,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Грузополучатель,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузоотправителя,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузополучателя,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Касса,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
	|		ЗаявкаНаВозвратТоваровОтКлиента.СпособДоставки,
	|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиЗначенияПолей,
	|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиПеревозчикаЗначенияПолей,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ЗонаДоставки,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиС,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиПо,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ДополнительнаяИнформацияПоДоставке
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|	ГДЕ
	|		ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&МассивРаспоряжений)) КАК ЗаказКлиента
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.ФормаОплаты");
		
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("БанковскийСчет",                 Выборка.БанковскийСчет);
	СтруктураРеквизитов.Вставить("БанковскийСчетКонтрагента",      Выборка.БанковскийСчетКонтрагента);
	СтруктураРеквизитов.Вставить("Грузоотправитель",               Выборка.Грузоотправитель);
	СтруктураРеквизитов.Вставить("Грузополучатель",                Выборка.Грузополучатель);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузоотправителя", Выборка.БанковскийСчетГрузоотправителя);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузополучателя",  Выборка.БанковскийСчетГрузополучателя);
	СтруктураРеквизитов.Вставить("Касса",                          Выборка.Касса);
	СтруктураРеквизитов.Вставить("ФормаОплаты",                    Выборка.ФормаОплаты);
	
	СтруктураРеквизитов.Вставить("АдресДоставкиЗначенияПолей",            Выборка.АдресДоставкиЗначенияПолей);
	СтруктураРеквизитов.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", Выборка.АдресДоставкиПеревозчикаЗначенияПолей);
	СтруктураРеквизитов.Вставить("ЗонаДоставки",                          Выборка.ЗонаДоставки);
	СтруктураРеквизитов.Вставить("ВремяДоставкиС",                        Выборка.ВремяДоставкиС);
	СтруктураРеквизитов.Вставить("ВремяДоставкиПо",                       Выборка.ВремяДоставкиПо);
	СтруктураРеквизитов.Вставить("ДополнительнаяИнформацияПоДоставке",    Выборка.ДополнительнаяИнформацияПоДоставке);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументПродажи(ПоляДокумента, ПараметрыОснования, МассивДокументов)
	
	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	ИначеЕсли ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав;
	Иначе
		НовыйДокумент = Документы.АктВыполненныхРабот.СоздатьДокумент();
	КонецЕсли;
	
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	НовыйДокумент.Заполнить(ПараметрыОснования);
	НовыйДокумент.СкидкиРассчитаны = Истина;
	
	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
		ИЛИ ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(НовыйДокумент,Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НовыйДокумент, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	
	Если НовыйДокумент.ПроверитьЗаполнение() Тогда
		
		Попытка
			
			Если (ПечататьРеализациюТоваровУслуг 
				И (ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				ИЛИ ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)) Или
				(ПечататьАктВыполненныхРабот И ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот) Тогда
				
				Печатать = Истина;
				
			Иначе
				
				Печатать = Ложь;
				
			КонецЕсли;
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			МассивДокументов.Добавить(Новый Структура("Документ,Проведен,Печатать", НовыйДокумент.Ссылка, Истина, Печатать));
			ДокументПроведен = Истина;
			
		Исключение
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			МассивДокументов.Добавить(Новый Структура("Документ,Проведен", НовыйДокумент.Ссылка, Ложь, Ложь));
			
		КонецПопытки;
		
		
	Иначе
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		МассивДокументов.Добавить(Новый Структура("Документ,Проведен", НовыйДокумент.Ссылка, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОсновании()
	
	МассивСсылокДляАктовВыполненныхРабот = Новый Массив();
	МассивСсылокДляРеализации = Новый Массив();
	МассивСсылокДляАктНаПередачуПрав = Новый Массив();
	МассивСсылокНакладные            = Новый Массив();
	
	Если ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		Для Каждого ЗаказКлиента Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") 
				ИЛИ ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ПараметрыОформления.ПоЗаказам Тогда
				
				Продолжить;
			ИначеЕсли ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ПараметрыОформления.ПоОрдерам Тогда
				МассивСсылокНакладные.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
			Иначе
				МассивСсылокДляАктовВыполненныхРабот.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ПараметрыОформления.ПоОрдерам Тогда
			
			МассивСсылокНакладные.Добавить(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
		Иначе
			МассивСсылокДляАктовВыполненныхРабот.Добавить(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьРеализациюПоНесколькимЗаказам Тогда
		Для Каждого ЗаказКлиента Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") 
				ИЛИ ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ПараметрыОформления.ПоЗаказам Тогда
				
				Продолжить;
			ИначеЕсли ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ПараметрыОформления.ПоОрдерам Тогда
				МассивСсылокНакладные.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
			Иначе
				МассивСсылокДляРеализации.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Если ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ПараметрыОформления.ПоОрдерам Тогда
			
			МассивСсылокНакладные.Добавить(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
		Иначе
			МассивСсылокДляРеализации.Добавить(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	МассивСсылокДляАктНаПередачуПрав = МассивСсылокДляРеализации;
	
	Если МассивСсылокНакладные.Количество() > 0
		И (МассивСсылокДляРеализации.Количество() > 0 
			ИЛИ МассивСсылокДляАктовВыполненныхРабот.Количество() > 0
			ИЛИ МассивСсылокДляАктНаПередачуПрав.Количество() > 0) Тогда
		
		ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для разных типов документов!';uk='Команда не може бути виконана для різних типів документів!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	Если ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПерезаполнитьНакладнуюПоОрдерам(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
		Действие = "";
	Иначе
		Действие = ДействиеВводаНаОсновании(МассивСсылокДляРеализации, 
			МассивСсылокДляАктНаПередачуПрав,
			МассивСсылокДляАктовВыполненныхРабот,
			Склад);
	КонецЕсли;
	
	Если Действие = "АктВыполненныхРабот" Тогда
		ПродажиКлиент.СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(
			Элементы.СписокРаспоряженияНаОформление,
			ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам);
	ИначеЕсли Действие = "АктНаПередачуПрав" Тогда
		ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
			Элементы.СписокРаспоряженияНаОформление,
			ИспользоватьРеализациюПоНесколькимЗаказам,
			Склад,
			,
			,
			Истина,
			ПараметрыОформления);
	ИначеЕсли Действие = "РеализацияТоваровУслуг" Тогда
		ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
			Элементы.СписокРаспоряженияНаОформление,
			ИспользоватьРеализациюПоНесколькимЗаказам,
			Склад,
			,
			,
			,
			ПараметрыОформления);
	КонецЕсли;
	Если Действие = "ПредложитьВыбратьТипДокументаПродажи" Тогда
		СписокЗаказовДляРеализации = Новый СписокЗначений;
		СписокЗаказовДляРеализации.ЗагрузитьЗначения(МассивСсылокДляРеализации);
		СписокЗаказовДляАктовВыполненныхРабот = Новый СписокЗначений;
		СписокЗаказовДляАктовВыполненныхРабот.ЗагрузитьЗначения(МассивСсылокДляАктовВыполненныхРабот);
		СписокЗаказовДляАктНаПередачуПрав = Новый СписокЗначений;
		СписокЗаказовДляАктНаПередачуПрав.ЗагрузитьЗначения(МассивСсылокДляАктНаПередачуПрав);
		ОткрытьФорму("ОбщаяФорма.ВыборТипаДокументаПродажи", 
							Новый Структура("СписокЗаказовДляРеализации, СписокЗаказовДляАктовВыполненныхРабот, СписокЗаказовДляАктНаПередачуПрав",
											СписокЗаказовДляРеализации, 
											СписокЗаказовДляАктовВыполненныхРабот,
											СписокЗаказовДляАктНаПередачуПрав,),,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
	Если Действие = "ПереоформлениеДокументовПродажи" Тогда
		ОткрытьФормуПереоформлениеНакладных(МассивСсылокДляРеализации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормыПереоформленияНакладных(ИспользоватьНакладныеПоНесколькимЗаказам)
	
	НастройкиФормы= НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.Заголовок = НСтр("ru='Переоформление документов продажи по выбранным распоряжениям';uk='Переоформлення документів продажу за обраним розпорядженням'");
	НастройкиФормы.ИмяФормыНакладной = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	НастройкиФормы.ИспользоватьНакладныеПоНесколькимЗаказам = ИспользоватьНакладныеПоНесколькимЗаказам;
	Возврат НастройкиФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПереоформлениеНакладных(МассивСсылок)
	
	РеквизитыШапки = Новый Структура();
	ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(МассивСсылок, РеквизитыШапки);
	ПараметрыФормы = Новый Структура("Заказы, Склад, РеквизитыШапки, НастройкиФормы",
		МассивСсылок, РеквизитыШапки.Склад, РеквизитыШапки, НастройкиФормыПереоформленияНакладных);
	
	ОткрытьФорму("ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ДействиеВводаНаОсновании(МассивСсылокДляРеализации, МассивСсылокДляАктНаПередачуПрав, МассивСсылокДляАктовВыполненныхРабот, Склад)
	
	Если МассивСсылокДляРеализации.Количество() = 0 
		И МассивСсылокДляАктовВыполненныхРабот.Количество() = 0
		И МассивСсылокДляАктНаПередачуПрав.Количество() = 0 Тогда
		
		Возврат "";
	КонецЕсли;
	
	ВыборКорректный = ОпределитьКорректностьВыбора(МассивСсылокДляРеализации, МассивСсылокДляАктНаПередачуПрав, МассивСсылокДляАктовВыполненныхРабот);
	Если Не ВыборКорректный ТОгда
		Возврат "";
	КонецЕсли;
	
	МассивСсылок = МассивСсылокДляРеализации;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылок, МассивСсылокДляАктНаПередачуПрав, Истина);
	Если ПараметрыОформления.ПоОрдерам Тогда
		Если НЕ ВозможноПерезаполнениеПоОтгрузке(МассивСсылок) Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыОформления.ПоОрдерам Тогда
		Если ОпределитьНаличиеОформленныхРеализаций(МассивСсылок) Тогда
			Возврат "ПереоформлениеДокументовПродажи";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|			,
		|			ЗаказКлиента В (&МассивСсылокДляРеализации)
		|				И (Склад = &Склад
		|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг)) КАК ЗаказыКлиентовОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|			,
		|			ЗаказКлиента В (&МассивСсылокДляАктНаПередачуПрав)
		|				И (Склад = &Склад
		|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав)) КАК ЗаказыКлиентовОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|			,
		|			ЗаказКлиента В (&МассивСсылокДляАктовВыполненныхРабот)
		|				И (Склад = &Склад
		|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ЗаказыКлиентовОстатки";
	Запрос.УстановитьПараметр("МассивСсылокДляРеализации", МассивСсылокДляРеализации);
	Запрос.УстановитьПараметр("МассивСсылокДляАктНаПередачуПрав", МассивСсылокДляАктНаПередачуПрав);
	Запрос.УстановитьПараметр("МассивСсылокДляАктовВыполненныхРабот", МассивСсылокДляАктовВыполненныхРабот);
	Запрос.УстановитьПараметр("Склад", Склад);
	ТаблицаВариантов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаВариантов.Количество()=1 Тогда
		Если ТаблицаВариантов[0].ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			Возврат "АктВыполненныхРабот";
		ИначеЕсли	ТаблицаВариантов[0].ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			Возврат "АктНаПередачуПрав";
		ИначеЕсли	ТаблицаВариантов[0].ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
			Возврат "РеализацияТоваровУслуг";
		КонецЕсли;
	ИначеЕсли	ТаблицаВариантов.Количество()>1 Тогда
		Возврат "ПредложитьВыбратьТипДокументаПродажи";
	Конецесли;
	
КонецФункции 

&НаСервере
Функция ОпределитьКорректностьВыбора(МассивСсылокДляРеализации, МассивСсылокДляАктНаПередачуПрав = Неопределено, МассивСсылокДляАктовВыполненныхРабот = Неопределено)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Партнер) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияПартнер,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Договор) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияДоговор,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияОрганизация,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Соглашение) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСоглашение,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Сделка) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСделка,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Склад) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСклад,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ХозяйственнаяОперация) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияХозяйственнаяОперация,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВалютаВзаиморасчетов) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияВалютаВзаиморасчетов,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ЦенаВключаетНДС) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияЦенаВключаетНДС,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВернутьМногооборотнуюТару) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияВернутьМногооборотнуюТару,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ТребуетсяЗалогЗаТару) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияТребуетсяЗалогЗаТару,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.СрокВозвратаМногооборотнойТары) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСрокВозвратаМногооборотнойТары,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ПорядокРасчетов) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияПорядокРасчетов,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.НаправлениеДеятельности) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияНаправлениеДеятельности,
					|
					|	НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
					|		И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.СпособДоставки) > 1
					|		И МАКСИМУМ(ВЫБОР
					|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
					|	                	ТОГДА ИСТИНА
					|	                	ИНАЧЕ ЛОЖЬ КОНЕЦ) = ИСТИНА    КАК ЕстьНесовместимыеСпособыДоставки
					|
					|ИЗ
					|	(ВЫБРАТЬ
					|		ЗаказКлиента.Партнер               КАК Партнер,
					|		ЗаказКлиента.Контрагент            КАК Контрагент,
					|		ЗаказКлиента.Организация           КАК Организация,
					|		ЗаказКлиента.Договор               КАК Договор,
					|		ЗаказКлиента.Соглашение            КАК Соглашение,
					|		ЗаказКлиента.Сделка                КАК Сделка,
					|		ВЫБОР
					|			КОГДА
					|				ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
					|			ТОГДА
					|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
					|			ИНАЧЕ
					|				ЗаказКлиента.Склад
					|		КОНЕЦ                                       КАК Склад,
					|		ЗаказКлиента.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
					|		ЗаказКлиента.Валюта                         КАК ВалютаВзаиморасчетов,
					|		ЗаказКлиента.ЦенаВключаетНДС                КАК ЦенаВключаетНДС,
					|		ЗаказКлиента.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
					|		ЗаказКлиента.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
					|		ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
					|		ЗаказКлиента.ПорядокРасчетов                КАК ПорядокРасчетов,
					|		ЗаказКлиента.НаправлениеДеятельности        КАК НаправлениеДеятельности,
					|		ЗаказКлиента.СпособДоставки                 КАК СпособДоставки
					|	ИЗ
					|		Документ.ЗаказКлиента КАК ЗаказКлиента
					|	ГДЕ
					|		(ЗаказКлиента.Ссылка В (&МассивСсылокДляАктовВыполненныхРабот)
					|				ИЛИ ЗаказКлиента.Ссылка В (&МассивСсылокДляАктНаПередачуПрав)
					|				ИЛИ ЗаказКлиента.Ссылка В (&МассивСсылокДляРеализации))
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		ЗаявкаНаВозврат.Партнер            КАК Партнер,
					|		ЗаявкаНаВозврат.Контрагент         КАК Контрагент,
					|		ЗаявкаНаВозврат.Организация        КАК Организация,
					|		ЗаявкаНаВозврат.Договор            КАК Договор,
					|		ЗаявкаНаВозврат.Соглашение         КАК Соглашение,
					|		ЗаявкаНаВозврат.Сделка             КАК Сделка,
					|		ЗаявкаНаВозврат.Склад              КАК Склад,
					|		ВЫБОР
					|			КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
					|					ИЛИ ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
					|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
					|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
					|		КОНЕЦ                                          КАК ХозяйственнаяОперация,
					|		ЗаявкаНаВозврат.Валюта                         КАК Валюта,
					|		ЗаявкаНаВозврат.ЦенаВключаетНДС                КАК ЦенаВключаетНДС,
					|		ЗаявкаНаВозврат.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
					|		ЗаявкаНаВозврат.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
					|		ЗаявкаНаВозврат.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
					|		ЗаявкаНаВозврат.ПорядокРасчетов                КАК ПорядокРасчетов,
					|		ЗаявкаНаВозврат.НаправлениеДеятельности        КАК НаправлениеДеятельности,
					|		ЗаявкаНаВозврат.СпособДоставки                 КАК СпособДоставки
					|	ИЗ
					|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
					|	ГДЕ
					|		(ЗаявкаНаВозврат.Ссылка В (&МассивСсылокДляАктовВыполненныхРабот)
					|				ИЛИ ЗаявкаНаВозврат.Ссылка В (&МассивСсылокДляАктНаПередачуПрав)
					|				ИЛИ ЗаявкаНаВозврат.Ссылка В (&МассивСсылокДляРеализации))) КАК ЗаказКлиента
					|
					|";
		
	Запрос.УстановитьПараметр("МассивСсылокДляРеализации", МассивСсылокДляРеализации);
	Запрос.УстановитьПараметр("МассивСсылокДляАктНаПередачуПрав", МассивСсылокДляАктНаПередачуПрав);
	Запрос.УстановитьПараметр("МассивСсылокДляАктовВыполненныхРабот", МассивСсылокДляАктовВыполненныхРабот);
	Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	ВыборкаРеквизитыШапки = Запрос.Выполнить().Выбрать();
	ВыборкаРеквизитыШапки.Следующий();
	
	Если ПродажиСервер.СообщитьОбОшибкахФормированияДанныхЗаполненияРеализации(ВыборкаРеквизитыШапки) Тогда
	
		ТекстОшибки = НСтр("ru='Ввод одного документа продажи на основании выделенных распоряжений невозможен';uk='Введення одного документа продажу на підставі виділених розпоряджень неможливе'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьНакладнуюПоОрдерам(ПерезаполняемаяНакладная)
	
	ПродажиКлиент.ПерезаполнитьНакладнуюПоОрдерам(ПерезаполняемаяНакладная);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьНаличиеОформленныхРеализаций(МассивСсылок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентовОстаткиИОбороты.ЗаказКлиента КАК Заказ,
	|	ЗаказыКлиентовОстаткиИОбороты.Регистратор КАК Реализация
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(
	|			,
	|			,
	|			Регистратор,
	|			,
	|			ЗаказКлиента В (&МассивСсылок)
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаказыКлиентовОстаткиИОбороты
	|ГДЕ
	|	ЗаказыКлиентовОстаткиИОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|;");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	РезультатЗапроса = Запрос.Выполнить();
	
	ОформленныеНакладные = РезультатЗапроса.Выгрузить();
	
	АдресТаблицаНакладныхВоВременномХранилище = ПоместитьВоВременноеХранилище(ОформленныеНакладные);
	
	Возврат ОформленныеНакладные.Количество() > 0;
	
КонецФункции

&НаСервере
Функция ВозможноПерезаполнениеПоОтгрузке(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказКлиентаТовары.Склад
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка В(&МассивДокументов)
		|	И ЗаказКлиентаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|	И ЗаказКлиентаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияТовары.Склад
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТовары
		|ГДЕ
		|	РеализацияТовары.Ссылка В(&МассивДокументов)
		|	И РеализацияТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|	И РеализацияТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявкаНаВозвратТоваровОтКлиента.Склад
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&МассивДокументов)
		|	И ЗаявкаНаВозвратТоваровОтКлиента.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|	И ЗаявкаНаВозвратТоваровОтКлиента.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки,
		|	ТоварыКОтгрузке.Склад КАК СкладОтгрузки,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК ХарактеристикаНоменклатуры,
		|	ТоварыКОтгрузке.Серия КАК Серия,
		|	ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ДокументОтгрузки В(&МассивДокументов)) КАК ТоварыКОтгрузке
		|ГДЕ
		|	(ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток - ТоварыКОтгрузке.СобраноКонечныйОстаток > 0
		|			ИЛИ ТоварыКОтгрузке.КОформлениюКонечныйОстаток > 0)
		|	И ((ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
		|		ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|			И ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход <> ТоварыКОтгрузке.КОформлениюРасход
		|		ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|			И ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток <> 0)
		|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЕстьОрдерныйСклад = НЕ РезультатЗапроса[0].Пустой();
	ЕстьРасхожденияПоОтгрузке = НЕ РезультатЗапроса[1].Пустой();

	Если НЕ ЕстьОрдерныйСклад ИЛИ НЕ ЕстьРасхожденияПоОтгрузке Тогда
		ВызватьИсключение НСтр("ru='По выбранным распоряжениям перезаполнение по отгрузке не требуется.';uk='За обраним розпорядженням перезаповнення по відвантаженню не потрібно.'");
	КонецЕсли;
	
	Возврат ЕстьОрдерныйСклад И ЕстьРасхожденияПоОтгрузке;
	
КонецФункции

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.АктВыполненныхРабот.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОформлено;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Производительность

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ЖурналДокументов.ДокументыПродажи.ФормаСписка.Элемент.Список.Выбор");
	
КонецПроцедуры

#КонецОбласти

#Область ЭДО

&НаКлиенте
Процедура ВыгрузкаПервичныхДокументовВЗвит1С(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыгрузкиПервичныхДокументов("");	
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);


КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДоверенностьВыданная) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ДоверенностьВыданная.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ДоверенностьВыданная);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьДоверенностиНаПолучениеТМЦ";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	Возврат; //В дальнейшем будет добавлен код команд

КонецПроцедуры

// Возвращает срок действия последней введенной ответственным в систему доверенности
//
// Возвращаемое значение:
//	Число - срок действия последней доверенности
//
Функция ПолучитьСрокДействияПоследнейДоверенности() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Доверенность.СрокДействия КАК СрокДействия
		|ИЗ
		|	Документ.ДоверенностьВыданная КАК Доверенность
		|ГДЕ
		|	НЕ Доверенность.ПометкаУдаления
		|	И Доверенность.Ответственный = &Ответственный
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|");
		
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СрокДействия;
	КонецЕсли;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыДоверенностей[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ИСТИНА КАК Проведен, // Для документа доверенности свойство <Проведенение> установлено в <Запретить>
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Дополнительные проверки для доверенности отсутствуют
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		Если ПолучитьфункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ") Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаСпискаДокументов";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция ДоверенностиПоЗаказам(МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|ГДЕ
	|	НЕ Доверенность.ПометкаУдаления
	|	И Доверенность.ДокументОснование В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если ПравоДоступа("Изменение", Метаданные.Документы.ДоверенностьВыданная) Тогда
		// М-2 (Доверенность)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "М2";
		КомандаПечати.Представление = НСтр("ru='Доверенность (М-2)';uk='Довіреність (М-2)'");
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ДоверенностьМ2");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		
	КонецЕсли;

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М2", НСтр("ru='Доверенность на получение ТМЦ (М-2)';uk='Довіреність на отримання ТМЦ (М-2)'"), СформироватьПечатнуюФорму(ПараметрыПечати["Тип"], МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
			КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		КонецЕсли;
		Если КомплектПечатныхФорм.Количество()>0 Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КомплектДокументов", НСтр("ru='Комплект документов';uk='Комплект документів'"), СформироватьПечатнуюФорму(КомплектПечатныхФорм[0].Имя, МассивОбъектов, ОбъектыПечати));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФорму(Тип, МассивОбъектов, ОбъектыПечати) Экспорт
	
	КодЯзыкаПечать = "uk";	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка,
	|	Доверенность.Номер КАК Номер,
	|	Доверенность.Дата КАК ДатаДокумента,
	|	Доверенность.Организация КАК Организация,
	|	Доверенность.Организация.Префикс КАК Префикс,
	|	ТаблицаОтветственныеЛица.РуководительПолноеФИО  КАК ФИОРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерПолноеФИО КАК ФИОГлавногоБухгалтера,
	|	Доверенность.ФизЛицо КАК ФизЛицо,
	|	Доверенность.ПоДокументу КАК РеквизитыДокументаНаПолучение,
	|	Доверенность.ДатаОкончанияДействия КАК СрокДействия,
	|	Доверенность.Должность КАК Должность,
	|	Доверенность.Ответственный КАК Ответственный,
	|	Доверенность.БанковскийСчет КАК БанковскийСчет,
	|	Доверенность.Контрагент.НаименованиеПолное КАК ПоставщикПредставление,
	|	Доверенность.ДокументОснование КАК ДокументОснование,
	|	Доверенность.ДокументОснование.Номер КАК НомерОснования,
	|	Доверенность.ДокументОснование.Дата КАК ДатаОснования,
	|	Доверенность.ДокументОснование.Организация.Префикс КАК ПрефиксОснования,
	|	Доверенность.Товары.(
	|		НомерСтроки КАК Номер,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.Товары.НоменклатураПоставщика) КАК НоменклатураПоставщика,
	|		Номенклатура.НаименованиеПолное КАК Номенклатура,
	|		Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ Доверенность.Товары.Упаковка.Наименование
	|		КОНЕЦ КАК Упаковка,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияПредставление,
	|		КоличествоУпаковок КАК КоличествоУпаковок
	|	),
	|	Доверенность.МатериальныеЦенности.(
	|		НомерСтроки КАК Номер,
	|		МатериальнаяЦенность КАК МатериальнаяЦенность,
	|		Количество КАК Количество,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.МатериальныеЦенности.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление
	|	),
	|	Доверенность.ВидДокументаФизЛица КАК ВидДокумента,
	|	Доверенность.СерияДокументаФизЛица КАК ПаспортСерия,
	|	Доверенность.НомерДокументаФизЛица КАК ПаспортНомер,
	|	Доверенность.КемВыданДокументФизлица КАК ПаспортВыдан,
	|	Доверенность.ДатаВыдачиДокументаФизЛица КАК ПаспортДатаВыдачи
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Доверенность.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Доверенность.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Доверенность.Товары.Упаковка",
			"Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Доверенность.Товары.Упаковка",
			"Доверенность.Товары.Номенклатура"));
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоверенностьВыданная.ПФ_MXL_UK_М2");
	
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2";
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		НомерДокументаНаПечать        = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ФамилияИмяОтчествоДоверенного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ФизЛицо, ДанныеПечати.ДатаДокумента);
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.ДатаДокумента,
			,
			ДанныеПечати.БанковскийСчет);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации, 
 			"ЮридическийАдрес",,КодЯзыкаПечать);
			
		КодПоОКУД = "";
		ОбластьМакета = Макет.ПолучитьОбласть("ЛицеваяСторона");

		СтруктураДанныхШапка = Новый Структура;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		СтруктураДанныхШапка.Вставить("НомерДокумента", НомерДокументаНаПечать);
		СтруктураДанныхШапка.Вставить("ДатаДокумента", Формат(ДанныеПечати.ДатаДокумента, "Л = " + КодЯзыкаПечать + "; ДФ='дд ММММ гггг ""р.'"));
		СтруктураДанныхШапка.Вставить("СрокДействия",  Формат(ДанныеПечати.СрокДействия,  "Л = " + КодЯзыкаПечать + "; ДФ='дд ММММ гггг ""р.'"));
		СтруктураДанныхШапка.Вставить("КомуВыдана",                      ?(НЕ ЗначениеЗаполнено(ДанныеПечати.Должность),"",ДанныеПечати.Должность + " ") + ДанныеПечати.ФизЛицо);
		СтруктураДанныхШапка.Вставить("ОрганизацияПредставление",        СведенияОбОрганизации.НаименованиеДСТУ);
		СтруктураДанныхШапка.Вставить("КодПоЕДРПОУ",                     СведенияОбОрганизации.КодПоЕДРПОУ);
		СтруктураДанныхШапка.Вставить("РеквизитыОрганизации",            ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("НомерРасчетногоСчетаОрганизации", СведенияОбОрганизации.НомерСчета);
		СтруктураДанныхШапка.Вставить("БанкОрганизации",                 СведенияОбОрганизации.Банк);
		СтруктураДанныхШапка.Вставить("МФОБанкаОрганизации",             СведенияОбОрганизации.МФО);
		СтруктураДанныхШапка.Вставить("ПодтверждающийДокументВид",       ДанныеПечати.ВидДокумента);
		СтруктураДанныхШапка.Вставить("ПодтверждающийДокументСерия",     ДанныеПечати.ПаспортСерия);
		СтруктураДанныхШапка.Вставить("ПодтверждающийДокументНомер",     ДанныеПечати.ПаспортНомер);
		СтруктураДанныхШапка.Вставить("ПодтверждающийДокументКемВыдан",  ДанныеПечати.ПаспортВыдан);
		СтруктураДанныхШапка.Вставить("ПодтверждающийДокументДатаВыдачи",ДанныеПечати.ПаспортДатаВыдачи);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Заполнить таблицу
		ОбластьМакета = Макет.ПолучитьОбласть("ОбратнаяСторонаШапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСпереносом");
		
		ВыборкаСтрокТовары = ДанныеПечати.Товары.Выбрать();
		ВыборкаСтрокМатериальныеЦенности = ДанныеПечати.МатериальныеЦенности.Выбрать();
		КоличествоСтрок = 0;
		НомерПоследнейСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокТовары.НоменклатураПоставщика) Тогда
				
				МатериальнаяЦенность = ВыборкаСтрокТовары.НоменклатураПоставщика;
				
			Иначе
				
				МатериальнаяЦенность = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.Номенклатура,
					ВыборкаСтрокТовары.Характеристика);
				
			КонецЕсли;
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", МатериальнаяЦенность);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокТовары.КоличествоУпаковок = 0,
				"",
				Строка(ВыборкаСтрокТовары.КоличествоУпаковок) + " (" + 
 				ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокТовары.КоличествоУпаковок,КодЯзыкаПечать) + ")"));
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокМатериальныеЦенности.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокМатериальныеЦенности);
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			НомерПоследнейСтроки = ВыборкаСтрокМатериальныеЦенности.Номер + КоличествоСтрок;
			СтруктураДанныхСтрокаТаблицы.Вставить("Номер", НомерПоследнейСтроки);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокМатериальныеЦенности.Количество = 0,
				"",
				Строка(ВыборкаСтрокМатериальныеЦенности.Количество) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокМатериальныеЦенности.Количество,КодЯзыкаПечать) + ")"));
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		
		// Заполнить реквизиты подвала
		ОбластьМакета = Макет.ПолучитьОбласть("ОбратнаяСторонаПодвал");		
		
		ОбластьМакета.Параметры.ФИОРуководителя = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(ДанныеПечати.ФИОРуководителя);
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(ДанныеПечати.ФИОГлавногоБухгалтера);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "М2", НСтр("ru='Доверенность на получение ТМЦ (М-2)';uk='Довіреність на отримання ТМЦ (М-2)'"), 1);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "М2", НСтр("ru='Доверенность на получение ТМЦ (М-2)';uk='Довіреність на отримання ТМЦ (М-2)'"), "Документ.ДоверенностьВыданная", Неопределено));
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ДоверенностьВыданная.Форма.ФормаСпискаДокументов";
	ИспользованиеДоверенностей = ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ");
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ДоверенностьВыданная))
		И (ПравоДоступа("Добавление", Метаданные.Документы.ДоверенностьВыданная)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ДоверенностьВыданная))
		И ИспользованиеДоверенностей;
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьРаспоряженийТовары = ИспользованиеДоверенностей
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
		
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	NULL КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров,
	|	NULL КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеДС,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.ДатаОкончанияДействия <= &ДатаАктуальности
	|					И ДокументДоверенность.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенностиИстекающиеНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.ДатаОкончанияДействия < &ДатаАктуальности
	|					И ДокументДоверенность.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенностиПросроченные
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДокументДоверенность
	|ГДЕ
	|	ДокументДоверенность.Ответственный = &Пользователь
	|	И (НЕ ДокументДоверенность.ПометкаУдаления)
	|";
	
	Если ДоступностьРаспоряженийТовары Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияНаДоставку.КоличествоПоступление + РаспоряженияНаДоставку.КоличествоВозвратРасширенные + РаспоряженияНаДоставку.КоличествоВозвратНеРасширенные,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаРаспоряженийПоступление.ЗаказПоставщику) КАК КоличествоПоступление,
		|		0 КАК КоличествоВозвратРасширенные,
		|		0 КАК КоличествоВозвратНеРасширенные
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ТаблицаРаспоряженийПоступление
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				МИНИМУМ(Доверенности.Ссылка) КАК ЕстьДоверенность,
		|				Доверенности.ДокументОснование КАК ДокументОснование
		|			ИЗ
		|				Документ.ДоверенностьВыданная КАК Доверенности
		|			ГДЕ
		|				НЕ Доверенности.ПометкаУдаления
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Доверенности.ДокументОснование) КАК Доверенности
		|			ПО ТаблицаРаспоряженийПоступление.ЗаказПоставщику = Доверенности.ДокументОснование
		|	ГДЕ
		|		ТаблицаРаспоряженийПоступление.КОформлениюОстаток > 0
		|		И (Доверенности.ЕстьДоверенность = 0
		|				ИЛИ Доверенности.ЕстьДоверенность ЕСТЬ NULL )
		|		И (ТИПЗНАЧЕНИЯ(ТаблицаРаспоряженийПоступление.ЗаказПоставщику) = ТИП(Документ.ЗаказПоставщику)
		|)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаРаспоряженийВозврат.ЗаявкаНаВозвратТоваровОтКлиента),
		|		0
		|	ИЗ
		|		РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки КАК ТаблицаРаспоряженийВозврат
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				МИНИМУМ(Доверенности.Ссылка) КАК ЕстьДоверенность,
		|				Доверенности.ДокументОснование КАК ДокументОснование
		|			ИЗ
		|				Документ.ДоверенностьВыданная КАК Доверенности
		|			ГДЕ
		|				НЕ Доверенности.ПометкаУдаления
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Доверенности.ДокументОснование) КАК Доверенности
		|			ПО ТаблицаРаспоряженийВозврат.ЗаявкаНаВозвратТоваровОтКлиента = Доверенности.ДокументОснование
		|	ГДЕ
		|		&ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|		И ТаблицаРаспоряженийВозврат.КОформлениюОстаток > 0
		|		И (Доверенности.ЕстьДоверенность = 0
		|				ИЛИ Доверенности.ЕстьДоверенность ЕСТЬ NULL )
		|		И ТИПЗНАЧЕНИЯ(ТаблицаРаспоряженийВозврат.ЗаявкаНаВозвратТоваровОтКлиента) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаРаспоряженийВозвратН.Ссылка)
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаРаспоряженийВозвратН
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				МИНИМУМ(Доверенности.Ссылка) КАК ЕстьДоверенность,
		|				Доверенности.ДокументОснование КАК ДокументОснование
		|			ИЗ
		|				Документ.ДоверенностьВыданная КАК Доверенности
		|			ГДЕ
		|				НЕ Доверенности.ПометкаУдаления
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Доверенности.ДокументОснование) КАК Доверенности
		|			ПО ТаблицаРаспоряженийВозвратН.Ссылка = Доверенности.ДокументОснование
		|	ГДЕ
		|		НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|		И (Доверенности.ЕстьДоверенность = 0
		|				ИЛИ Доверенности.ЕстьДоверенность ЕСТЬ NULL )
		|		И ТаблицаРаспоряженийВозвратН.Ссылка.Проведен) КАК РаспоряженияНаДоставку";
		
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ТекущиеДелаСлужебный.УстановитьОбщиеПараметрыЗапросов(Запрос, ОбщиеПараметрыЗапросов);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|//%Д1 	СУММА(ТаблицаПоказателей.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров) КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенности) КАК ВыданныеДоверенности,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенностиИстекающиеНаСегодня) КАК ВыданныеДоверенностиИстекающиеНаСегодня,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенностиПросроченные) КАК ВыданныеДоверенностиПросроченные
	|ИЗ
	|	ТаблицаПоказателей КАК ТаблицаПоказателей";
	
	// Уберем служебные коментарии из текста запроса - "разблокируем" строки запроса
	Если ДоступностьРаспоряженийТовары Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Д1", "     ");
	КонецЕсли;
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос);
	
	// Заполнение дел.
	// ДоверенностиНаПолучениеТМЦ
	// РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров
	ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров = Ложь;
	Если ДоступностьРаспоряженийТовары Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.НеВыдана);
		ПараметрыОтбора.Вставить("Актуальность", "");
		ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
		ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
		ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
		ПараметрыОтбора.Вставить("ТребуетсяДоверенность", Истина);
		ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru='Требующие создания доверенности';uk='Потребують створення довіреності'"));
		ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
		ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
		
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ДоверенностиНаПолучениеТМЦ";
		ДелоРодитель.Представление  = НСтр("ru='Доверенности на получение ТМЦ';uk='Довіреності на отримання ТМЦ'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров";
		Дело.ЕстьДела       = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров > 0;
		Дело.Представление  = НСтр("ru='Основания для оформления (получение товаров)';uk='Підстави для оформлення (отримання товарів)'");
		Дело.Количество     = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормы;
		Дело.ПараметрыФормы = ПараметрыФормы;
		Дело.Владелец       = "ДоверенностиНаПолучениеТМЦ";
		
		ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров = Дело.ЕстьДела;
		ДелоРодитель.ЕстьДела = Дело.ЕстьДела;
	КонецЕсли;
	
	
	ДелоРодительФинансы = ТекущиеДела.Добавить();
	ДелоРодительФинансы.Идентификатор  = "ВыданныеДоверенностиРодитель";
	ДелоРодительФинансы.Представление  = НСтр("ru='Выданные доверенности';uk='Видані довіреності'");
	ДелоРодительФинансы.Владелец       = Метаданные.Подсистемы.Казначейство;
	
	// ВыданныеДоверенности
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru='Требующие создания доверенности';uk='Потребують створення довіреності'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенности";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенности > 0;
	Дело.Представление  = НСтр("ru='Выданные доверенности';uk='Видані довіреності'");
	Дело.Количество     = Результат.ВыданныеДоверенности;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	// ВыданныеДоверенностиИстекающиеНаСегодня
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Сегодня';uk='Сьогодні'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru='Требующие создания доверенности';uk='Потребують створення довіреності'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенностиИстекающиеНаСегодня";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенностиИстекающиеНаСегодня > 0;
	Дело.Представление  = НСтр("ru='Доверенности, истекающие сегодня';uk='Довіреності, що закінчуються сьогодні'");
	Дело.Количество     = Результат.ВыданныеДоверенностиИстекающиеНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	// ВыданныеДоверенностиПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Просрочен", "Сегодня");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru='Требующие создания доверенности';uk='Потребують створення довіреності'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенностиПросроченные";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенностиПросроченные > 0;
	Дело.Представление  = НСтр("ru='Просроченные доверенности';uk='Прострочені довіреності'");
	Дело.Количество     = Результат.ВыданныеДоверенностиПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	Если Результат.ВыданныеДоверенности > 0
		Или Результат.ВыданныеДоверенностиИстекающиеНаСегодня > 0
		Или Результат.ВыданныеДоверенностиПросроченные > 0 Тогда
		ДелоРодительФинансы.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Процедура ЗаменитьСсылкиЕдиницИзмерения_ДанныеДляОбновления(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная.МатериальныеЦенности КАК Т
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Т.ЕдиницаИзмерения) = ТИП(Справочник.УдалитьЕдиницыИзмерения)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

Процедура ЗаменитьСсылкиЕдиницИзмерения(Параметры) Экспорт

	ПолноеИмяДокумента = "Документ.ДоверенностьВыданная";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
	СоответствиеЕдиницыУпаковки = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
            
            Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
            
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();						
				Продолжить;
			КонецЕсли;
			
			Справочники.УпаковкиЕдиницыИзмерения.ЗаменитьСсылкиЕдиницИзмеренияВОбъекте(
                ДокументОбъект, 
                СоответствиеЕдиницыУпаковки, 
                "МатериальныеЦенности"
            );
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
        Исключение
            
			ОтменитьТранзакцию();						
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ МЕТОДЫ ДЛЯ РАБОТЫ С ОБМЕНОМ С МОБИЛЬНЫМ ПРИЛОЖЕНИЕМ "МОНИТОР ERP"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выгружает справочники "Виды контактной информации", "Страны".
//
// Параметры:
//  Фабрика - ФабрикаXDTO - фабрика обмена;
//  ЗаписьXML - ЗаписьXML - сообщение обмена.
//
Процедура ВыгрузитьОсновныеСправочники(Фабрика, ЗаписьXML) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыКИ.Ссылка КАК ВидКИ
	|ПОМЕСТИТЬ ВидыКИ
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКИ
	|ГДЕ
	|	НЕ ВидыКИ.ЭтоГруппа
	|	И (ВидыКИ.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры))
	|			ИЛИ ВидыКИ.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрСтраны.Ссылка КАК Страна
	|ПОМЕСТИТЬ Страны
	|ИЗ
	|	Справочник.СтраныМира КАК СпрСтраны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочники.Страна КАК СтранаСсылка,
	|	Справочники.ВидКИ КАК ВидКИСсылка
	|ПОМЕСТИТЬ ВременныйСправочники
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрСтраны.Страна КАК Страна,
	|		NULL КАК ВидКИ
	|	ИЗ
	|		Страны КАК СпрСтраны
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		СпрВидКИ.ВидКИ
	|	ИЗ
	|		ВидыКИ КАК СпрВидКИ) КАК Справочники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочники.СтранаСсылка КАК СтранаСсылка,
	|	Справочники.СтранаСсылка.ПометкаУдаления КАК СтранаПометкаУдаления,
	|	Справочники.СтранаСсылка.Наименование КАК СтранаНаименование,
	|	Справочники.СтранаСсылка.Код КАК СтранаКод,
	|	Справочники.СтранаСсылка.ИмяПредопределенныхДанных КАК СтранаИмяПредопределенныхДанных,
	|	Справочники.СтранаСсылка.НаименованиеПолное КАК СтранаНаименованиеПолное,
	|	Справочники.СтранаСсылка.КодАльфа2 КАК СтранаКодАльфа2,
	|	Справочники.СтранаСсылка.КодАльфа3 КАК СтранаКодАльфа3,
	|	Справочники.ВидКИСсылка КАК ВидКИСсылка,
	|	Справочники.ВидКИСсылка.ПометкаУдаления КАК ВидКИПометкаУдаления,
	|	Справочники.ВидКИСсылка.Родитель КАК ВидКИРодитель,
	|	Справочники.ВидКИСсылка.ЭтоГруппа КАК ВидКИЭтоГруппа,
	|	Справочники.ВидКИСсылка.Наименование КАК ВидКИНаименование,
	|	Справочники.ВидКИСсылка.Тип КАК ВидКИТип,
	|	Справочники.ВидКИСсылка.РеквизитДопУпорядочивания КАК ВидКИРеквизитДопУпорядочивания,
	|	Справочники.ВидКИСсылка.РедактированиеТолькоВДиалоге КАК ВидКИРедактированиеТолькоВДиалоге,
	|	Справочники.ВидКИСсылка.МожноИзменятьСпособРедактирования КАК ВидКИМожноИзменятьСпособРедактирования,
	|	Справочники.ВидКИСсылка.АдресТолькоРоссийский КАК ВидКИАдресТолькоРоссийский,
	|	Справочники.ВидКИСсылка.ВключатьСтрануВПредставление КАК ВидКИВключатьСтрануВПредставление,
	|	Справочники.ВидКИСсылка.ОбязательноеЗаполнение КАК ВидКИОбязательноеЗаполнение,
	|	Справочники.ВидКИСсылка.ПроверятьКорректность КАК ВидКИПроверятьКорректность,
	|	Справочники.ВидКИСсылка.СкрыватьНеактуальныеАдреса КАК ВидКИСкрыватьНеактуальныеАдреса,
	|	Справочники.ВидКИСсылка.Подсказка КАК ВидКИПодсказка,
	|	Справочники.ВидКИСсылка.РазрешитьВводНесколькихЗначений КАК ВидКИРазрешитьВводНесколькихЗначений,
	|	Справочники.ВидКИСсылка.ИмяПредопределенныхДанных КАК ВидКИИмяПредопределенныхДанных
	|ИЗ
	|	ВременныйСправочники КАК Справочники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Страны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВидыКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременныйСправочники";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ТабОсновныхСправочников = Запрос.Выполнить().Выгрузить();
	ВыгруженныеОбъекты = Новый Массив;
	Для Каждого СтрокаСправочников ИЗ ТабОсновныхСправочников Цикл
		
		Если ЗначениеЗаполнено(СтрокаСправочников.СтранаСсылка) Тогда
			ЗаписатьСтрануСтроки(Фабрика, ЗаписьXML, СтрокаСправочников);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСправочников.ВидКИСсылка) Тогда
			ЗаписатьВидКИСтроки(Фабрика, ЗаписьXML, СтрокаСправочников, ВыгруженныеОбъекты);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Записывает данные в формат XML.
// Анализирует переданный объект данных и на основе этого анализа записывает его определенным образом в формат XML.
//
// Параметры:
//  ЗаписьXML - объект, записывающий XML данные;
//  Фабрика - фабрика XDTO для записи объектов;
//  Данные - данные, подлежащие записи в формат XML;
//  ВыгружатьКонтактныеТелефоны - булево - флаг выгрузки контактных телефонов.
//
Процедура ЗаписатьДанные(ЗаписьXML, Фабрика, Данные, ВыгружатьКонтактныеТелефоны) Экспорт
	
	Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданные= Данные.Метаданные();
	ОписаниеОбъекта = СтруктураОписанияОбъекта(ОбъектМетаданные);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	
	Если ОписаниеОбъекта.ИмяКласса = "Справочники" Тогда
		
		ТипОбъекта = Фабрика.Тип(URIИмен, "CatalogObject."+СокрЛП(ОписаниеОбъекта.ИмяОбъекта));
		ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
		ОбъектОбмена.Ref = Данные.Ссылка.УникальныйИдентификатор();
		ОбъектОбмена.DeletionMark = Данные.Ссылка.ПометкаУдаления;
		Если ОбъектМетаданные.ДлинаКода>0 Тогда
			ОбъектОбмена.Code = Данные.Код;
		КонецЕсли;
		
		Если ОбъектМетаданные.Иерархический Тогда
			Если Не СокрЛП(ОбъектМетаданные.ВидИерархии) = "ИерархияЭлементов" Тогда
				ОбъектОбмена.IsFolder = Данные.ЭтоГруппа;
			КонецЕсли;
			Если НЕ ОбъектОбмена.Свойства().Получить("Parent") = Неопределено Тогда
				ОбъектОбмена.Parent = Данные.Родитель.УникальныйИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
		ОбъектОбмена.Description = Данные.Наименование;
		
		Если Не ОбъектМетаданные.Реквизиты.Найти("НаименованиеПолное") = Неопределено Тогда
			ОбъектОбмена.НаименованиеПолное = Данные.НаименованиеПолное;
		КонецЕсли;
		
		Если СокрЛП(ОписаниеОбъекта.ИмяОбъекта) = "ВариантыОтчетов" Тогда
			ОбъектОбмена.ДатаОбновления = ТекущаяДата();
			ОбъектОбмена.КлючВарианта = Данные.КлючВарианта;
			ОбъектОбмена.Настройки = Данные.Настройки;
			
			// Отчет со стандартными настройками варианта.
			ОбъектОбмена.Результат = РезультатОтчета(Данные.Ссылка, Данные.Настройки);
			
			Если Данные.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний Тогда
				КлючОбъекта = Данные.Отчет.ПолноеИмя+"/"+Данные.КлючВарианта;
			Иначе
				КлючОбъекта = "ВнешнийОтчет." + Данные.Отчет.ИмяОбъекта+"/"+Данные.КлючВарианта;
			КонецЕсли;
			
			// Отчет с текущими настройками варианта.
			НастройкиПользователя = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта + "/ТекущиеПользовательскиеНастройки");
			Если Не НастройкиПользователя = Неопределено Тогда
				ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен,
					"CatalogTabularSectionRow.ВариантыОтчетов.ПользовательскиеНастройкиВариантовОтчетов");
				ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
				ОбъектОбменаСтрокаТаблицы.КлючНастройки = "ТекущиеПользовательскиеНастройки";
				ОбъектОбменаСтрокаТаблицы.ПредставлениеНастройки =
					НСтр("ru='Текущие пользовательские настройки';uk='Поточні користувацькі настройки'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ОбъектОбменаСтрокаТаблицы.Результат = РезультатОтчета(Данные.Ссылка, Данные.Настройки,,
					"ТекущиеПользовательскиеНастройки");
				ОбъектОбмена.ПользовательскиеНастройкиВариантовОтчетов.Добавить(ОбъектОбменаСтрокаТаблицы);
			КонецЕсли;
			
			// Отчет с сохраненными настройками варианта.
			ТаблицаРезультатов = ПользовательскиеНастройкиОтчетов(КлючОбъекта);
			
			Для Каждого СтрокаОтчетов Из ТаблицаРезультатов Цикл
				ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен,
					"CatalogTabularSectionRow.ВариантыОтчетов.ПользовательскиеНастройкиВариантовОтчетов");
				ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
				ОбъектОбменаСтрокаТаблицы.КлючНастройки = СтрокаОтчетов.КлючНастроек;
				ОбъектОбменаСтрокаТаблицы.ПредставлениеНастройки = СтрокаОтчетов.Представление;
				ОбъектОбменаСтрокаТаблицы.Результат = РезультатОтчета(Данные.Ссылка, Данные.Настройки,,
					СтрокаОтчетов.КлючНастроек);
				ОбъектОбмена.ПользовательскиеНастройкиВариантовОтчетов.Добавить(ОбъектОбменаСтрокаТаблицы);
			КонецЦикла;
			
			ПодсистемыДерево = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
			
			Если Данные.Размещение.Количество()=0 Тогда
				Для Каждого СтрокаОтчетов Из Данные.ПредопределенныйВариант.Размещение Цикл
					Если ПодсистемыДерево.Строки.Найти(СтрокаОтчетов.Подсистема, "Ссылка", Истина) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.Размещение");
					ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
					ОбъектОбменаСтрокаТаблицы.РазделИлиГруппа = СтрокаОтчетов.Подсистема.Синоним;
					ОбъектОбменаСтрокаТаблицы.Важный = СтрокаОтчетов.Важный;
					ОбъектОбменаСтрокаТаблицы.БыстрыйДоступ = БыстрыйДоступ(Данные.Ссылка, СтрокаОтчетов.Подсистема,
						ТекущийПользователь);
					ОбъектОбмена.Размещение.Добавить(ОбъектОбменаСтрокаТаблицы);
				КонецЦикла;
			Иначе
				Для Каждого СтрокаОтчетов Из Данные.Размещение Цикл
					Если Не СтрокаОтчетов.Использование Тогда
						Продолжить;
					КонецЕсли;
					Если ПодсистемыДерево.Строки.Найти(СтрокаОтчетов.Подсистема, "Ссылка", Истина) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.Размещение");
					ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
					ОбъектОбменаСтрокаТаблицы.РазделИлиГруппа = СтрокаОтчетов.Подсистема.Синоним;
					ОбъектОбменаСтрокаТаблицы.Важный = СтрокаОтчетов.Важный;
					ОбъектОбменаСтрокаТаблицы.БыстрыйДоступ = БыстрыйДоступ(Данные.Ссылка, СтрокаОтчетов.Подсистема,
						ТекущийПользователь);
					ОбъектОбмена.Размещение.Добавить(ОбъектОбменаСтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СокрЛП(ОписаниеОбъекта.ИмяОбъекта) = "ВариантыАнализаЦелевыхПоказателей" Тогда
			
			СтрокаВариантаОтображения = Данные.НастройкиДоступности.Найти(ТекущийПользователь, "Пользователь");
			ОбъектОбмена.ВариантОтображения = "Диаграмма";
			ОбъектОбмена.КатегорияЦели = СокрЛП(Данные.Владелец.КатегорияЦели);
			ОбъектОбмена.Результат = РезультатВарианта(Данные.Ссылка);
			ОбъектОбмена.ДатаОбновления = ТекущаяДатаСеанса();
			
			Для Каждого СтрокаОтчетов Из Данные.ОтчетыДляРасшифровки Цикл
				Если Не ВариантОтчетаДоступен(СтрокаОтчетов.ВариантОтчета) Тогда
					Продолжить;
				КонецЕсли;
				ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен,
					"CatalogTabularSectionRow.ВариантыАнализаЦелевыхПоказателей.ОтчетыДляРасшифровки");
				ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
				ОбъектОбменаСтрокаТаблицы.ВариантОтчетаИД = СтрокаОтчетов.ВариантОтчета.УникальныйИдентификатор();
				// Получаем настройки варианта отчета.
				СвойстваВариантаАнализа = СвойстваВариантаАнализа(Данные.Ссылка);
				СвойстваВариантаОтчета = СвойстваВариантаОтчета(СтрокаОтчетов.ВариантОтчета);
				НастройкиВариантаОтчета = МониторингЦелевыхПоказателейВызовСервера.СформироватьНастройкиВариантаОтчета(
					СвойстваВариантаАнализа, СвойстваВариантаОтчета);
				Если НастройкиВариантаОтчета = Неопределено Тогда
					ОбъектОбменаСтрокаТаблицы.РезультатОтчета = РезультатОтчета(СтрокаОтчетов.ВариантОтчета,
						СтрокаОтчетов.ВариантОтчета.Настройки,,, НастройкиВариантаОтчета.ПользовательскиеНастройки);
				Иначе
					ОбъектОбменаСтрокаТаблицы.РезультатОтчета = РезультатОтчета(СтрокаОтчетов.ВариантОтчета,
						СтрокаОтчетов.ВариантОтчета.Настройки, Данные.Ссылка.ПериодАнализа.Получить());
				КонецЕсли;
				ОбъектОбменаСтрокаТаблицы.ДатаОбновления = ТекущаяДатаСеанса();
				ОбъектОбмена.ОтчетыДляРасшифровки.Добавить(ОбъектОбменаСтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		Если СокрЛП(ОписаниеОбъекта.ИмяОбъекта) = "Партнеры" Тогда
			ОбъектОбмена.ДополнительнаяИнформация = ДосьеПартнера(Данные.Ссылка, ВыгружатьКонтактныеТелефоны);
			Если Не ВыгружатьКонтактныеТелефоны Тогда
				ЗаписатьКонтактнуюИнформацию(Фабрика, ОбъектОбмена, Данные.Ссылка, "Партнеры");
			КонецЕсли;
		КонецЕсли;
		
		Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
		
		Если СокрЛП(ОписаниеОбъекта.ИмяОбъекта) = "Партнеры" И Не ВыгружатьКонтактныеТелефоны Тогда
			ВыгрузитьКонтактныхЛицКлиента(Фабрика, ЗаписьXML, Данные.Ссылка, Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Регистрирует изменения, для всех данных, входящих в состав плана обмена.
//
// Параметры:
//  УзелОбмена - узел плана обмена, для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ЭлементСоставаПланаОбмена.Метаданные);
	КонецЦикла;
КонецПроцедуры

// Регистрирует изменения в узле обмена по переданным параметрам обмена.
//
// Параметры:
//  УзелОбмена - узел, для которого необходимо зарегистрировать изменения;
//  ПараметрыОбмена - Структура, содержащая параметры обмена.
//
Процедура ЗарегистрироватьИзмененияДанныхПоПараметрам(УзелОбмена, ПараметрыОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФильтрИзменений = ФильтрИзмененийПоПараметрам(ПараметрыОбмена);
	Для каждого Эл Из ФильтрИзменений Цикл
		Если ПараметрыОбмена.ПолныйОбмен Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Эл);
		Иначе
			Если ПараметрыОбмена.СписокОбъектов.Количество()>0 Тогда
				ЗарегистрироватьИзмененияДанныхПоСпискуОбъектов(УзелОбмена, ПараметрыОбмена.СписокОбъектов,
					ПараметрыОбмена.ОбъектыОбмена);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Выполняет проверку того, что данные нужно переностить в данный узел
//
// Параметры:
//  Данные – Объект, набор записей,... который нужно проверить.
//            То, что переносится везде, не обрабатывается.
//
// Возвращаемое значение:
//  Перенос - булево, если Истина - необходимо выполнять перенос, иначе - перенос выполнять не нужно.
//
Функция НуженПереносДанных(Данные) Экспорт
	
	Перенос = Истина;
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		
		Если Не ВариантОтчетаДоступен(Данные.Ссылка) Тогда
			Перенос = Ложь;
		Иначе
			Если НЕ Данные.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний Тогда
				Если Данные.ТипОтчета = Перечисления.ТипыОтчетов.Дополнительный Тогда
					Если НЕ Данные.Отчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
						И НЕ Данные.Отчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
						Перенос = Ложь;
					КонецЕсли;
				Иначе
					Перенос = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей") Тогда
		Если Не ВариантАнализаДоступен(Данные.Ссылка) Тогда
			Перенос = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.Партнеры") Тогда
		Если Не ПартнерДоступен(Данные.Ссылка) Тогда
			Перенос = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Перенос;
КонецФункции

// Записывает элемент справочника "Партнеры".
//
// Параметры:
//  МобильныйКлиент - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура ОбновитьКлиента(МобильныйКлиент, Сообщение) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ref", МобильныйКлиент.ref);
	СтруктураОтвета.Вставить("ТипОбъекта", "Партнеры");
	СтруктураОтвета.Вставить("Успешно", Ложь);
	
	Если НЕ ТипЗнч(МобильныйКлиент.ref) = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МобильныйКлиент.ref) Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерСсылка = МобильныйКлиент.ref;
	СтруктураОтвета.Вставить("ref", ПартнерСсылка.УникальныйИдентификатор());
	
	Партнер = ПартнерСсылка.ПолучитьОбъект();
	Если Партнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Партнер.Наименование = МобильныйКлиент.Description;
	Партнер.НаименованиеПолное = МобильныйКлиент.НаименованиеПолное;
	
	КонтактнаяИнформацияПартнера = Партнер.КонтактнаяИнформация;
	КонтактнаяИнформацияПартнера.Очистить();
	
	Если НЕ МобильныйКлиент.Свойства().Получить("КонтактнаяИнформация") = Неопределено Тогда
		Для Каждого СтрокаКИ Из МобильныйКлиент.КонтактнаяИнформация Цикл
			НоваяСтрока = КонтактнаяИнформацияПартнера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
		КонецЦикла;
	КонецЕсли;
	
	Партнер.ОбменДанными.Загрузка = Истина;
	
	Попытка
		Партнер.Записать();
		СтруктураОтвета.Вставить("Успешно", Истина);
	Исключение
		СтруктураОтвета.Вставить("Успешно", Ложь);
	КонецПопытки;
	
	Сообщение.Добавить(СтруктураОтвета);
КонецПроцедуры

// Возвращает сериализованный объект Вариант анализа для web-сервиса ERPMonitor ПолучитьРезультатВарианта.
//
// Параметры:
//  ВариантАнализа - Вариант анализа, сериализованный объект которого требуется получить.
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее сериализованный объект Вариант анализа.
//
Функция РезультатВариантаАнализа(ВариантАнализа) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Данные = ВариантАнализа.ПолучитьОбъект();
	
	Если Не НуженПереносДанных(Данные) Тогда
		
		МобильноеПриложениеМониторERPСервер.УдалениеДанных(Данные);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
		
	КонецЕсли;
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	
	МакетПравилОбмена = ПланыОбмена.МобильноеПриложениеМониторERP.ПолучитьМакет("МобильноеПриложение");
	
	ИмяВременногоФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xsd");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Фабрика = СоздатьФабрикуXDTO(ИмяВременногоФайлаПравилОбмена);
	ТипОбъекта   = Фабрика.Тип(URIИмен, "CatalogObject.ВариантыАнализаЦелевыхПоказателей");
	ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
	
	ОбъектОбмена.Ref = ВариантАнализа.УникальныйИдентификатор();
	ОбъектОбмена.DeletionMark  = ВариантАнализа.ПометкаУдаления;
	ОбъектОбмена.Description = ВариантАнализа.Наименование;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	СтрокаВариантаОтображения = ВариантАнализа.НастройкиДоступности.Найти(ТекущийПользователь, "Пользователь");
	Если СтрокаВариантаОтображения = Неопределено Тогда
		ВариантОтображения = "Диаграмма";
	Иначе
		ВариантОтображения = СокрЛП(СтрокаВариантаОтображения.ВариантОтображения);
	Конецесли;
	ОбъектОбмена.ВариантОтображения = ВариантОтображения;
	ОбъектОбмена.КатегорияЦели = СокрЛП(ВариантАнализа.Владелец.КатегорияЦели);
	ОбъектОбмена.Результат = РезультатВарианта(ВариантАнализа);
	ОбъектОбмена.ДатаОбновления  = ТекущаяДатаСеанса();
	
	Для Каждого СтрокаОтчетов Из ВариантАнализа.ОтчетыДляРасшифровки Цикл
		Если Не ВариантОтчетаДоступен(СтрокаОтчетов.ВариантОтчета) Тогда
			Продолжить;
		КонецЕсли;
		ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен,
			"CatalogTabularSectionRow.ВариантыАнализаЦелевыхПоказателей.ОтчетыДляРасшифровки");
		ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
		ОбъектОбменаСтрокаТаблицы.ВариантОтчетаИД = СтрокаОтчетов.ВариантОтчета.УникальныйИдентификатор();
		// Получаем настройки варианта отчета.
		СвойстваВариантаАнализа = СвойстваВариантаАнализа(ВариантАнализа);
		СвойстваВариантаОтчета  = СвойстваВариантаОтчета(СтрокаОтчетов.ВариантОтчета);
		НастройкиВариантаОтчета = МониторингЦелевыхПоказателейВызовСервера.СформироватьНастройкиВариантаОтчета(
			СвойстваВариантаАнализа, СвойстваВариантаОтчета);
		Если НастройкиВариантаОтчета = Неопределено Тогда
			ОбъектОбменаСтрокаТаблицы.РезультатОтчета = РезультатОтчета(СтрокаОтчетов.ВариантОтчета,
				СтрокаОтчетов.ВариантОтчета.Настройки,,, НастройкиВариантаОтчета.ПользовательскиеНастройки);
		Иначе
			ОбъектОбменаСтрокаТаблицы.РезультатОтчета = РезультатОтчета(СтрокаОтчетов.ВариантОтчета,
				СтрокаОтчетов.ВариантОтчета.Настройки, ВариантАнализа.ПериодАнализа.Получить());
		КонецЕсли;
		ОбъектОбменаСтрокаТаблицы.ДатаОбновления  = ТекущаяДатаСеанса();
		ОбъектОбмена.ОтчетыДляРасшифровки.Добавить(ОбъектОбменаСтрокаТаблицы);
	КонецЦикла;
	
	Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
КонецФункции

// Возвращает сериализованный объект Вариант отчета для web-сервиса ERPMonitor ПолучитьРезультатОтчета.
//
// Параметры:
//  ВариантОтчета - Вариант отчета, сериализованный объект которого требуется получить;
//  Настройки - Настройки вариант отчета, по которым требуется получить результат.
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее сериализованный объект Вариант отчета.
//
Функция РезультатВариантаОтчета(ВариантОтчета, Настройки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Данные = ВариантОтчета.ПолучитьОбъект();
	
	Если Не НуженПереносДанных(Данные) Тогда
		
		МобильноеПриложениеМониторERPСервер.УдалениеДанных(Данные);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	КонецЕсли;
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	
	МакетПравилОбмена = ПланыОбмена.МобильноеПриложениеМониторERP.ПолучитьМакет("МобильноеПриложение");
	
	ИмяВременногоФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xsd");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Фабрика = СоздатьФабрикуXDTO(ИмяВременногоФайлаПравилОбмена);
	ТипОбъекта = Фабрика.Тип(URIИмен, "CatalogObject.ВариантыОтчетов");
	ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
	
	ОбъектОбмена.Ref = ВариантОтчета.УникальныйИдентификатор();
	ОбъектОбмена.DeletionMark = ВариантОтчета.ПометкаУдаления;
	ОбъектОбмена.Description = ВариантОтчета.Наименование;
	
	ОбъектОбмена.ДатаОбновления  = ТекущаяДата();
	ОбъектОбмена.КлючВарианта = ВариантОтчета.КлючВарианта;
	ОбъектОбмена.Настройки = ВариантОтчета.Настройки;
	
	// Отчет со стандартными настройками варианта.
	ОбъектОбмена.Результат = РезультатОтчета(Данные.Ссылка, Данные.Настройки);
	
	Если Данные.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний Тогда
		КлючОбъекта = Данные.Отчет.ПолноеИмя+"/"+Данные.КлючВарианта;
	Иначе
		КлючОбъекта = "ВнешнийОтчет." + Данные.Отчет.ИмяОбъекта+"/"+Данные.КлючВарианта;
	КонецЕсли;
	
	// Отчет с текущими настройками варианта.
	НастройкиПользователя = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта + "/ТекущиеПользовательскиеНастройки");
	Если Не НастройкиПользователя = Неопределено Тогда
		ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен,
			"CatalogTabularSectionRow.ВариантыОтчетов.ПользовательскиеНастройкиВариантовОтчетов");
		ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
		ОбъектОбменаСтрокаТаблицы.КлючНастройки = "ТекущиеПользовательскиеНастройки";
		ОбъектОбменаСтрокаТаблицы.ПредставлениеНастройки =
			НСтр("ru='Текущие пользовательские настройки';uk='Поточні користувацькі настройки'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбъектОбменаСтрокаТаблицы.Результат = РезультатОтчета(Данные.Ссылка, Данные.Настройки,,
			"ТекущиеПользовательскиеНастройки");
		ОбъектОбмена.ПользовательскиеНастройкиВариантовОтчетов.Добавить(ОбъектОбменаСтрокаТаблицы);
	КонецЕсли;
	
	// Отчет с сохраненными настройками варианта.
	ТаблицаРезультатов = ПользовательскиеНастройкиОтчетов(КлючОбъекта);
	
	Для Каждого СтрокаОтчетов Из ТаблицаРезультатов Цикл
		ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен,
			"CatalogTabularSectionRow.ВариантыОтчетов.ПользовательскиеНастройкиВариантовОтчетов");
		ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
		ОбъектОбменаСтрокаТаблицы.КлючНастройки = СтрокаОтчетов.КлючНастроек;
		ОбъектОбменаСтрокаТаблицы.ПредставлениеНастройки = СтрокаОтчетов.Представление;
		ОбъектОбменаСтрокаТаблицы.Результат = РезультатОтчета(Данные.Ссылка, Данные.Настройки,,
			СтрокаОтчетов.КлючНастроек);
		ОбъектОбмена.ПользовательскиеНастройкиВариантовОтчетов.Добавить(ОбъектОбменаСтрокаТаблицы);
	КонецЦикла;
	
	ПодсистемыДерево = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
	
	Если ВариантОтчета.Размещение.Количество()=0 Тогда
		Для Каждого СтрокаОтчетов Из ВариантОтчета.ПредопределенныйВариант.Размещение Цикл
			Если ПодсистемыДерево.Строки.Найти(СтрокаОтчетов.Подсистема, "Ссылка", Истина) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.Размещение");
			ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
			ОбъектОбменаСтрокаТаблицы.РазделИлиГруппа = СтрокаОтчетов.Подсистема.Синоним;
			ОбъектОбменаСтрокаТаблицы.Важный = СтрокаОтчетов.Важный;
			ОбъектОбменаСтрокаТаблицы.БыстрыйДоступ = БыстрыйДоступ(ВариантОтчета, СтрокаОтчетов.Подсистема,
				Пользователи.ТекущийПользователь());
			ОбъектОбмена.Размещение.Добавить(ОбъектОбменаСтрокаТаблицы);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаОтчетов Из ВариантОтчета.Размещение Цикл
			Если Не СтрокаОтчетов.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПодсистемыДерево.Строки.Найти(СтрокаОтчетов.Подсистема, "Ссылка", Истина) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТипОбъектаСтрокаТаблицы = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.Размещение");
			ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
			ОбъектОбменаСтрокаТаблицы.РазделИлиГруппа = СтрокаОтчетов.Подсистема.Синоним;
			ОбъектОбменаСтрокаТаблицы.Важный = СтрокаОтчетов.Важный;
			ОбъектОбменаСтрокаТаблицы.БыстрыйДоступ = БыстрыйДоступ(ВариантОтчета, СтрокаОтчетов.Подсистема,
				Пользователи.ТекущийПользователь());
			ОбъектОбмена.Размещение.Добавить(ОбъектОбменаСтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
КонецФункции

// Возвращает сериализованный объект Партнер для web-сервиса ERPMonitor ПолучитьРезультатПартнер.
//
// Параметры:
//  УзелОбмена - узел обмена;
//  Партнер - Партнер, сериализованный объект которого требуется получить
//  Версия - строка, версия мобильного приложения.
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее сериализованный объект Вариант анализа.
//
Функция РезультатПартнер(УзелОбмена, Партнер, Версия = "") Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	Данные = Партнер.ПолучитьОбъект();
	ОбъектМетаданные= Данные.Метаданные();
	
	ВыгружатьКонтактныеТелефоны = Истина;
	Если Не ЗначениеЗаполнено(Версия) Тогда
		МакетПравилОбмена = ПланыОбмена.МобильноеПриложениеМониторERP.ПолучитьМакет("МобильноеПриложение");
	Иначе
		МакетПравилОбмена = ПланыОбмена.МобильноеПриложениеМониторERP.ПолучитьМакет("МобильноеПриложение1_0_3");
		ВыгружатьКонтактныеТелефоны = Ложь;
	КонецЕсли;
	
	ИмяВременногоФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xsd");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Фабрика = СоздатьФабрикуXDTO(ИмяВременногоФайлаПравилОбмена);
	
	Если НЕ ПартнерДоступен(Партнер) Тогда
		
		МобильноеПриложениеМониторERPСервер.УдалениеДанных(Данные);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		Если НЕ ВыгружатьКонтактныеТелефоны Тогда
			ВыгрузитьКонтактныхЛицКлиента(Фабрика, ЗаписьXML, Партнер, Истина);
		КонецЕсли;
		Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	КонецЕсли;
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	ТипОбъекта = Фабрика.Тип(URIИмен, "CatalogObject.Партнеры");
	ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
	
	ОбъектОбмена.Ref = Данные.Ссылка.УникальныйИдентификатор();
	ОбъектОбмена.DeletionMark  = Данные.Ссылка.ПометкаУдаления;
	Если ОбъектМетаданные.ДлинаКода>0 Тогда
		ОбъектОбмена.Code = Данные.Код;
	КонецЕсли;
	
	Если ОбъектМетаданные.Иерархический Тогда
		Если Не СокрЛП(ОбъектМетаданные.ВидИерархии) = "ИерархияЭлементов" Тогда
			ОбъектОбмена.IsFolder = Данные.ЭтоГруппа;
		КонецЕсли;
		ОбъектОбмена.Parent = Данные.Родитель.УникальныйИдентификатор();
	КонецЕсли;
	
	ОбъектОбмена.Description = Данные.Наименование;
	
	Если Не ОбъектМетаданные.Реквизиты.Найти("НаименованиеПолное") = Неопределено Тогда
		ОбъектОбмена.НаименованиеПолное = Данные.НаименованиеПолное;
	КонецЕсли;
	
	ОбъектОбмена.ДополнительнаяИнформация = ДосьеПартнера(Партнер, ВыгружатьКонтактныеТелефоны);
	
	Если Не ВыгружатьКонтактныеТелефоны Тогда
		ЗаписатьКонтактнуюИнформацию(Фабрика, ОбъектОбмена, Партнер, "Партнеры");
	КонецЕсли;
	
	Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	Если НЕ ВыгружатьКонтактныеТелефоны Тогда
		ВыгрузитьКонтактныхЛицКлиента(Фабрика, ЗаписьXML, Партнер, Ложь);
	КонецЕсли;
	
	ВыгрузитьОсновныеСправочники(Фабрика, ЗаписьXML);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
КонецФункции

// Записывает элемент справочника "Контактные лица партнеров".
//
// Параметры:
//  МобильноеКонтактноеЛицо - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьКонтактноеЛицоКлиента(МобильныеДанные, Сообщение) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ref", МобильныеДанные.ref);
	СтруктураОтвета.Вставить("ТипОбъекта", "КонтактныеЛицаПартнеров");
	СтруктураОтвета.Вставить("Успешно", Ложь);
	
	Если НЕ ТипЗнч(МобильныеДанные.ref) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МобильныеДанные.ref) Тогда
		Возврат;
	КонецЕсли;
	
	КонтактноеЛицоСсылка = МобильныеДанные.ref;
	СтруктураОтвета.Вставить("ref", КонтактноеЛицоСсылка.УникальныйИдентификатор());
	КонтактноеЛицо = КонтактноеЛицоСсылка.ПолучитьОбъект();
		
	Если КонтактноеЛицо = Неопределено Тогда
		ЭтоНовоеКЛ = Истина;
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		КонтактноеЛицо.УстановитьСсылкуНового(КонтактноеЛицоСсылка);
		КонтактноеЛицо.Владелец = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныеДанные.Owner));
		КонтактноеЛицо.Автор = ПараметрыСеанса.ТекущийПользователь;
		КонтактноеЛицо.ДатаРегистрацииСвязи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПометкаУдаления = МобильныеДанные.DeletionMark;
	КонтактноеЛицо.ПометкаУдаления = ПометкаУдаления;
	КонтактноеЛицо.Наименование = МобильныеДанные.Description;
	КонтактноеЛицо.ДатаРождения = МобильныеДанные.ДатаРождения;
	КонтактноеЛицо.ДолжностьПоВизитке = МобильныеДанные.ДолжностьПоВизитке;
	КонтактноеЛицо.Комментарий = МобильныеДанные.Комментарий;
	
	КонтактнаяИнформацияКЛ = КонтактноеЛицо.КонтактнаяИнформация;
	КонтактнаяИнформацияКЛ.Очистить();
	
	Если НЕ МобильныеДанные.Свойства().Получить("КонтактнаяИнформация") = Неопределено Тогда
		Для Каждого СтрокаКИ Из МобильныеДанные.КонтактнаяИнформация Цикл
			НоваяСтрока = КонтактнаяИнформацияКЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
		КонецЦикла;
	КонецЕсли;
	
	КонтактноеЛицо.ОбменДанными.Загрузка = Истина;
	
	Попытка
		КонтактноеЛицо.Записать();
		СтруктураОтвета.Вставить("Успешно", Истина);
	Исключение
		СтруктураОтвета.Вставить("Успешно", Ложь);
	КонецПопытки;
	
	Сообщение.Добавить(СтруктураОтвета);
КонецПроцедуры

// Формирует массив значений по переданным параметрам обмена.
//
// Параметры:
//  ПараметрыОбмена - Структура, содержащая параметры обмена.
// Возвращаемое значение:
//  массив - сформированный фильтр.
//
Функция ФильтрИзмененийПоПараметрам(ПараметрыОбмена) Экспорт
	
	ФильтрИзменений = Новый Массив;
	
	СоответствиеОбъектов = ПараметрыОбмена.ОбъектыОбмена;
	
	Для Каждого Эл Из СоответствиеОбъектов Цикл
		Если Эл.Значение Тогда
			ФильтрИзменений.Добавить(Метаданные.Справочники[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФильтрИзменений;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет проверку, входит ли Вариант отчета в быстрый доступ пользователя.
//
// Параметры:
//  Вариант – Ссылка, вариант отчета, который нужно проверить;
//  Подсистема – Ссылка, раздел или группа варианта отчета;
//  Пользователь - Ссылка, пользователь для которого производится проверка.
//
// Возвращаемое значение:
//  Булево, если Истина - вариант отчета входит в быстрый доступ, иначе - нет.
//
Функция БыстрыйДоступ(Вариант, Подсистема, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВариантовОтчетов.БыстрыйДоступ
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|ГДЕ
	|	НастройкиВариантовОтчетов.Пользователь = &Пользователь
	|	И НастройкиВариантовОтчетов.Подсистема = &Подсистема
	|	И НастройкиВариантовОтчетов.Вариант = &Вариант";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Подсистема", Подсистема);
	Запрос.УстановитьПараметр("Вариант", Вариант);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.БыстрыйДоступ;
КонецФункции

// Выполняет проверку того, что Вариант Анализа доступен текущему пользователю.
//
// Параметры:
//  ВариантАнализа	– Ссылка, вариант анализа, который нужно проверить.
//
// Возвращаемое значение:
//  Булево, если Истина - вариант отчета доступен, иначе - вариант отчета не доступен.
//
Функция ВариантАнализаДоступен(ВариантАнализа)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ВариантыАнализаПользовательскиеНастройки = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей",
		"ВариантыАнализаПользовательскиеНастройки",,, ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	ЗапросСостава = Новый Запрос;
	ЗапросСостава.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	ЗапросСостава.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	ЗапросСостава.УстановитьПараметр("ТекущийВариант", ВариантАнализа);
	
	Если Не ВариантыАнализаПользовательскиеНастройки = Неопределено
		И Не ВариантыАнализаПользовательскиеНастройки.Получить() = Неопределено Тогда
		ЗапросСостава.УстановитьПараметр("ВариантыАнализа", ВариантыАнализаПользовательскиеНастройки.Получить());
		ЗапросСостава.Текст = "ВЫБРАТЬ
		|	ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа,
		|	ПользовательскиеНастройкиВариантовАнализа.Доступность
		|ПОМЕСТИТЬ ПользовательскиеНастройкиВариантовАнализа
		|ИЗ
		|	&ВариантыАнализа КАК ПользовательскиеНастройкиВариантовАнализа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыАнализа.ВариантАнализа КАК ВариантАнализа
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
		|		ВЫБОР
		|			КОГДА ПользовательскиеНастройкиВариантовАнализа.Доступность ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПользовательскиеНастройкиВариантовАнализа.Доступность
		|		КОНЕЦ КАК Доступность
		|	ИЗ
		|		Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПользовательскиеНастройкиВариантовАнализа КАК ПользовательскиеНастройкиВариантовАнализа
		|			ПО ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка = ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа
		|	ГДЕ
		|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
		|		И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления) КАК ВариантыАнализа
		|ГДЕ
		|	ВариантыАнализа.ВариантАнализа = &ТекущийВариант
		|	И ВариантыАнализа.Доступность";
	Иначе
		ЗапросСостава.Текст = "ВЫБРАТЬ
		|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа
		|ИЗ
		|	Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
		|ГДЕ
		|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка = &ТекущийВариант
		|	И ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
		|	И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления";
	КонецЕсли;
	
	Результат = ЗапросСостава.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

// Выполняет проверку того, что Вариант Отчета доступен текущему пользователю.
//
// Параметры:
//  ВариантОтчета	– Ссылка, вариант отчета, который нужно проверить.
//
// Возвращаемое значение:
//  Булево, если Истина - вариант отчета доступен, иначе - вариант отчета не доступен.
//
Функция ВариантОтчетаДоступен(ВариантОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка,
	|	ПредопределенныеРазмещение.Подсистема,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		КОГДА ВариантыОтчетов.ВидимостьПоУмолчаниюПереопределена
	|			ТОГДА ВариантыОтчетов.ВидимостьПоУмолчанию
	|		ИНАЧЕ ПредопределенныеРазмещение.Ссылка.ВидимостьПоУмолчанию
	|	КОНЕЦ КАК ВидимостьПоУмолчанию
	|ПОМЕСТИТЬ втПредопределенные
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК ПредопределенныеРазмещение
	|		ПО (ПредопределенныеРазмещение.Подсистема В (&ДоступныеПодсистемы))
	|			И ВариантыОтчетов.ПредопределенныйВариант = ПредопределенныеРазмещение.Ссылка
	|			И (ВариантыОтчетов.Отчет В (&ОтчетыПользователя))
	|			И (НЕ ПредопределенныеРазмещение.Ссылка В (&ОтключенныеВариантыПрограммы))
	|			И (ВариантыОтчетов.Ссылка = &ТекущийВариант)
	|			И (НЕ ВариантыОтчетов.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыРазмещение.Ссылка,
	|	ВариантыРазмещение.Подсистема,
	|	ВариантыРазмещение.Использование,
	|	ВЫБОР
	|		КОГДА ВариантыРазмещение.Ссылка.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		КОГДА ВариантыРазмещение.Ссылка.ВидимостьПоУмолчаниюПереопределена
	|				ИЛИ ВариантыРазмещение.Ссылка.Пользовательский
	|				ИЛИ ВариантыРазмещение.Ссылка.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка)
	|			ТОГДА ВариантыРазмещение.Ссылка.ВидимостьПоУмолчанию
	|		ИНАЧЕ ВариантыРазмещение.Ссылка.ПредопределенныйВариант.ВидимостьПоУмолчанию
	|	КОНЕЦ КАК ВидимостьПоУмолчанию
	|ПОМЕСТИТЬ втВарианты
	|ИЗ
	|	Справочник.ВариантыОтчетов.Размещение КАК ВариантыРазмещение
	|ГДЕ
	|	ВариантыРазмещение.Ссылка = &ТекущийВариант
	|	И ВариантыРазмещение.Подсистема В(&ДоступныеПодсистемы)
	|	И ВариантыРазмещение.Ссылка.Отчет В(&ОтчетыПользователя)
	|	И НЕ ВариантыРазмещение.Ссылка.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)
	|	И (НЕ ВариантыРазмещение.Ссылка.ТолькоДляАвтора
	|			ИЛИ ВариантыРазмещение.Ссылка.Автор = &ТекущийПользователь)
	|	И НЕ ВариантыРазмещение.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втВарианты.Ссылка, втПредопределенные.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(втВарианты.Подсистема, втПредопределенные.Подсистема) КАК Подсистема,
	|	ЕСТЬNULL(втВарианты.ВидимостьПоУмолчанию, втПредопределенные.ВидимостьПоУмолчанию) КАК ВидимостьПоУмолчанию
	|ПОМЕСТИТЬ втВсеВарианты
	|ИЗ
	|	втПредопределенные КАК втПредопределенные
	|		ПОЛНОЕ СОЕДИНЕНИЕ втВарианты КАК втВарианты
	|		ПО втПредопределенные.Ссылка = втВарианты.Ссылка
	|			И втПредопределенные.Подсистема = втВарианты.Подсистема
	|ГДЕ
	|	(втВарианты.Использование = ИСТИНА
	|			ИЛИ втВарианты.Использование ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втВсеВарианты.Ссылка
	|ИЗ
	|	втВсеВарианты КАК втВсеВарианты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|		ПО втВсеВарианты.Подсистема = НастройкиВариантовОтчетов.Подсистема
	|			И втВсеВарианты.Ссылка = НастройкиВариантовОтчетов.Вариант
	|			И (НастройкиВариантовОтчетов.Пользователь = &ТекущийПользователь)
	|ГДЕ
	|	ЕСТЬNULL(НастройкиВариантовОтчетов.Видимость, втВсеВарианты.ВидимостьПоУмолчанию)";
	
	ДеревоЗначений = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
	ПодсистемыПользователя = Новый Массив;
	
	Если ДеревоЗначений.Строки.Количество()>0 Тогда
		ДополнитьМассивЗначениямиСтрокДерева(ПодсистемыПользователя, ДеревоЗначений.Строки, "Ссылка");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДоступныеПодсистемы", ПодсистемыПользователя);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ОтчетыПользователя",  ВариантыОтчетов.ОтчетыТекущегоПользователя());
	Запрос.УстановитьПараметр("ТекущийВариант", 	 ВариантОтчета);
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы", ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы());
	
	Попытка
		Результат = Запрос.Выполнить();
	Исключение
		Инфо = ИнформацияОбОшибке();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Не Результат.Пустой();
КонецФункции

// Записывает данные клиентов в сообщение для обмена для узла обмена с мобильным приложением.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - сообщение обмена;
//  Клиент - СправочникСсылка.Клиент - клиент, чьих контаткных лиц необходимо выгрузить в обмен;
//  УдалениеДанных - Булево - флаг передачи удаления данных для контактных лиц клиента.
//
Процедура ВыгрузитьКонтактныхЛицКлиента(Фабрика, ЗаписьXML, Клиент, УдалениеДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаКонтаткныхЛицКлиента();
	Запрос.УстановитьПараметр("Партнер", Клиент);
	Запрос.УстановитьПараметр("КодВладельца", СокрЛП(Клиент.УникальныйИдентификатор()));
	Результат = Запрос.Выполнить().Выгрузить();
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	Для каждого СтрокаДанных Из Результат Цикл
		Данные = СтрокаДанных.Ссылка.ПолучитьОбъект();
		Если УдалениеДанных Тогда
			МобильноеПриложениеЗаказыКлиентов.УдалениеДанных(Данные);
		КонецЕсли;
		Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
			Продолжить;
		КонецЕсли;
		ТипОбъекта = Фабрика.Тип(URIИмен, "CatalogObject.КонтактныеЛицаПартнеров");
		ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
		ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтрокаДанных);
		ОбъектОбмена.ref = СокрЛП(СтрокаДанных.Ссылка.УникальныйИдентификатор());
		ОбъектОбмена.ERPКод = СокрЛП(СтрокаДанных.Ссылка.УникальныйИдентификатор());
		ЗаписатьКонтактнуюИнформацию(Фабрика, ОбъектОбмена, СтрокаДанных.Ссылка, "КонтактныеЛицаПартнеров");
		Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	КонецЦикла;
КонецПроцедуры

// Записывает в переданный массив все значения колонки ИмяКолонки из всех строк дерева.
//
// Параметры:
//  ПодсистемыДерева	- Переданный Массив для Заполнения;
//  Строки - строки дерева;
//  ИмяКолонки - Имя колонки для выгрузки значений.
//
Процедура ДополнитьМассивЗначениямиСтрокДерева(ПодсистемыПользователя, Строки, ИмяКолонки)
	
	ПодсистемыДерева = Строки.ВыгрузитьКолонку(ИмяКолонки);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодсистемыПользователя, ПодсистемыДерева, Истина);
	Для Каждого Стр Из Строки Цикл
		Если Стр.Строки.Количество()>0 Тогда
			ДополнитьМассивЗначениямиСтрокДерева(ПодсистемыПользователя, Стр.Строки, ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает информацию, включающую отношения с партнером, табличный документ результата формирования отчета "Досье Партнера"
// и Контактную Информацию по партнеру (только телефоны).
//
// Параметры:
//  Партнер - СправочникСсылка.Партнеры - партнер, Досье которого требуется сформировать;
//  ВыгружатьКонтактныеТелефоны - булево - флаг выгрузки контактных телефонов партнера.
//
// Возвращаемое значение:
//  ХранилищеЗначения - хранилище значения, содержащее структуру.
//
Функция ДосьеПартнера(Партнер, ВыгружатьКонтактныеТелефоны = Истина)
	
	// Параметры записи в журнал регистрации.
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru='Монитор ERP. Синхронизация.';uk='Монітор ERP. Синхронізація.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные", Партнер);
	ПараметрыЖурнала.Вставить("Метаданные", Партнер.Метаданные());
	
	ИнформацияОПартнере = 
		Новый Структура("Клиент, Поставщик, Конкурент, ПрочиеОтношения, Перевозчик, Досье, КонтактныеТелефоны");
	
	ЗаполнитьЗначенияСвойств(ИнформацияОПартнере, Партнер, "Клиент, Поставщик, Конкурент, ПрочиеОтношения, Перевозчик");
	
	Отчет = Отчеты.ДосьеПартнера.Создать();
	Отчет.Контакты = Истина;
	Отчет.ДанныеКлиента = Партнер.Клиент;
	Отчет.ДанныеПоставщика = Партнер.Поставщик;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Отчет.СформироватьОтчет(ТабличныйДокумент, Партнер);
	ИнформацияОПартнере.Досье = ТабличныйДокумент;
	
	СписокКонтактов = Новый СписокЗначений;
	
	ИнформацияОбОшибке = Неопределено;
	КомментарийСПараметрами = "";
	
	Если Не ВыгружатьКонтактныеТелефоны Тогда
		ИнформацияОПартнере.КонтактныеТелефоны = СписокКонтактов;
		КомментарийСПараметрами = НСтр("ru='Досье клиента сформировано успешно.';uk='Досьє клієнта сформовано успішно.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		РассылкаОтчетов.ЗаписьЖурнала(ПараметрыЖурнала,, КомментарийСПараметрами, ИнформацияОбОшибке);
		Возврат Новый ХранилищеЗначения(ИнформацияОПартнере, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
	|	"""" КАК ДолжностьПоВизитке,
	|	ПартнерыКонтактнаяИнформация.Вид,
	|	ПартнерыКонтактнаяИнформация.Представление,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.ДолжностьПоВизитке,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец = &Партнер
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партнер.ОсновнойМенеджер.ФизическоеЛицо,
	|	&Ответственный,
	|	ФизическиеЛицаКонтактнаяИнформация.Вид,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.Партнеры КАК Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователь
	|		ПО (Партнер.ОсновнойМенеджер В (Пользователь.Ссылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО (Пользователь.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	Партнер.Ссылка = &Партнер
	|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Ответственный", НСтр("ru='Ответственный менеджер';uk='Відповідальний менеджер'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ЗаголовокТелефон = НСтр("ru='тел.:';uk='тел.:'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())+" ";
	
	Пока Выборка.Следующий() Цикл
		ПредставлениеКонтакта = СокрЛП(Выборка.Наименование)+" "+СокрЛП(Выборка.ДолжностьПоВизитке)+" "+СокрЛП(Выборка.Вид)
			+" "+СокрЛП(Выборка.Представление);
		ПредставлениеКонтакта = СтрЗаменить(ПредставлениеКонтакта,
			НСтр("ru='Телефон';uk='Телефон'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ЗаголовокТелефон);
		ПредставлениеКонтакта = СтрЗаменить(ПредставлениеКонтакта,
			НСтр("ru='телефон';uk='телефон'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ЗаголовокТелефон);
		НомерТелефона = ?(Лев(Выборка.Представление, 1) = "+" , "+" + Выборка.НомерТелефона, Выборка.НомерТелефона);
		СписокКонтактов.Добавить(НомерТелефона, ПредставлениеКонтакта);
	КонецЦикла;
	
	ИнформацияОПартнере.КонтактныеТелефоны = СписокКонтактов;
	
	КомментарийСПараметрами = НСтр("ru='Досье клиента сформировано успешно.';uk='Досьє клієнта сформовано успішно.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		РассылкаОтчетов.ЗаписьЖурнала(ПараметрыЖурнала,, КомментарийСПараметрами, ИнформацияОбОшибке);
	
	Возврат Новый ХранилищеЗначения(ИнформацияОПартнере, Новый СжатиеДанных(9));
КонецФункции

// Регистрирует изменения в узле обмена по переданным видам и списку объектов.
//
// Параметры:
//  УзелОбмена - узел, для которого необходимо зарегистрировать изменения;
//  СписокОбъектов - Список уникальных идентификаторов объектов для регистрации;
//  ОбъектыОбмена - Соответствие, содержащее виды объектов для регистрации.
//
Процедура ЗарегистрироватьИзмененияДанныхПоСпискуОбъектов(УзелОбмена, СписокОбъектов, ОбъектыОбмена)
	
	ИскомыйСправочник = Неопределено;
	
	Для Каждого Эл Из ОбъектыОбмена Цикл
		Если Эл.Значение Тогда
			ИскомыйСправочник = Справочники[Эл.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если ИскомыйСправочник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Эл Из СписокОбъектов Цикл
		РегистрируемыйОбъект = ИскомыйСправочник.ПолучитьСсылку(Эл.Значение);
		Если НЕ РегистрируемыйОбъект.Пустая() Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, РегистрируемыйОбъект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьКонтактнуюИнформацию(Фабрика, ИнформацияПоОбъекту, Знач СсылкаНаОбъект, Знач ИмяСправочника)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправочникКонтактнаяИнформация.Тип КАК Тип,
	|	СправочникКонтактнаяИнформация.Вид КАК Вид,
	|	СправочникКонтактнаяИнформация.Представление КАК Представление,
	|	СправочникКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	ВЫРАЗИТЬ(СправочникКонтактнаяИнформация.Страна КАК СТРОКА(100)) КАК Страна,
	|	СправочникКонтактнаяИнформация.Регион КАК Регион,
	|	СправочникКонтактнаяИнформация.Город КАК Город,
	|	СправочникКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	СправочникКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	СправочникКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	СправочникКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
	|ИЗ
	|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК СправочникКонтактнаяИнформация
	|ГДЕ
	|	НЕ СправочникКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации)
	|	И НЕ СправочникКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Skype)
	|	И СправочникКонтактнаяИнформация.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	ЗаписатьКонтактнуюИнформациюСправочника(Фабрика, ИнформацияПоОбъекту, ТабРезультат, ИмяСправочника);
КонецПроцедуры

Процедура ЗаписатьКонтактнуюИнформациюСправочника(Фабрика, ИнформацияПоОбъекту, Знач ТаблицаКИ,  Знач ИмяСправочника)
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	ЛокальноеИмяОбъекта = "CatalogTabularSectionRow." + ИмяСправочника + ".КонтактнаяИнформация";
	ТипОбъекта = Фабрика.Тип(URIИмен, ЛокальноеИмяОбъекта);
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
		ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтрокаКИ,, "Тип, Вид");
		Если ЗначениеЗаполнено(СтрокаКИ.Тип) Тогда
			ТипКИ = 
				Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ТипКИСТрокой = 
				Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.Получить(ТипКИ).Имя;
		Иначе
			ТипКИСТрокой = "";
		КонецЕсли;
		ОбъектОбмена.Тип = ТипКИСТрокой;
		Если ЗначениеЗаполнено(СтрокаКИ.Вид) Тогда
			ИдентификаторВидаКИ = СокрЛП(СтрокаКИ.Вид.УникальныйИдентификатор());
		Иначе
			ИдентификаторВидаКИ = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
		КонецЕсли;
		ОбъектОбмена.Вид = ИдентификаторВидаКИ;
		ИнформацияПоОбъекту.КонтактнаяИнформация.Добавить(ОбъектОбмена);
	КонецЦикла;
КонецПроцедуры

// Возвращает источник данных варианта анализа.
//
// Параметры:
//  ВариантАнализа - Вариант анализа, источник данных которого требуется получить.
//
// Возвращаемое значение:
//  Структура источника данных варианта анализа.
//
Функция ИсточникДанных(ВариантАнализа)
	
	ИсточникДанных = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ИсточникДанных
	|ИЗ
	|	РегистрСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ИсточникиДанныхВариантовАнализаЦелевыхПоказателей
	|ГДЕ
	|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
	|	И ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантОтображения = ЗНАЧЕНИЕ(Перечисление.ВариантыОтображенияВариантовАнализа.Диаграмма)";
	
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	Если ТабРезультат.Количество()>0 Тогда
		ИсточникДанных = ТабРезультат[0].ИсточникДанных;
	КонецЕсли;
	
	Возврат ИсточникДанных;
КонецФункции

// Выполняет проверку того, что Партнер доступен текущему пользователю.
//
// Параметры:
//  Партнер – Ссылка, партнер, которого нужно проверить.
//
// Возвращаемое значение:
//  Булево, если Истина - партнер доступен, иначе - партнер не доступен.
//
Функция ПартнерДоступен(Партнер)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Партнеры.Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер";
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

// Возвращает пользовательские настройки отчетов.
//
// Параметры:
//  Данные - Вариант отчета, пользовательские настройки которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаРезультатов - таблица значений, содержащая пользовательские настройки варианта отчета.
//
Функция ПользовательскиеНастройкиОтчетов(КлючОбъекта)
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("КлючНастроек");
	ТаблицаРезультатов.Колонки.Добавить("Представление");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("КлючОбъекта", КлючОбъекта);
	
	Выборка = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Фильтр);
	
	ИмяТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Пока Выборка.Следующий() Цикл
		Если ИмяТекущегоПользователя = Выборка.Пользователь Тогда
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.КлючНастроек = Выборка.КлючНастроек;
			НоваяСтрока.Представление = Выборка.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;
КонецФункции

// Возвращает структуру результат формирования варианта анализа.
//
// Параметры:
//  ВариантАнализа - Вариант анализа, результат которого требуется сформировать.
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее структуру результата формирования варианта анализа.
//
Функция РезультатВарианта(ВариантАнализа)
	
	// Параметры записи в журнал регистрации.
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru='Монитор ERP. Синхронизация.';uk='Монітор ERP. Синхронізація.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные", ВариантАнализа);
	ПараметрыЖурнала.Вставить("Метаданные", ВариантАнализа.Метаданные());
	
	ОтображаемоеЗначение = 0;
	ИндексКартинкиСостояния = 1;
	ИндексКартинкиТренда = 7;
	Размерность = "";
	КраткоеНаименованиеЦелевогоПоказателя = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя;
	ПорядокЗоныВнимания = 0;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИсточникДанных = ИсточникДанных(ВариантАнализа);
	
	ИнформацияОбОшибке = Неопределено;
	КомментарийСПараметрами = "";
	Если Не ИсточникДанных = Неопределено Тогда
		
		ОписаниеИсточникаДанных = Новый Структура;
		ОписаниеИсточникаДанных.Вставить("ВариантАнализа", ВариантАнализа);
		ОписаниеИсточникаДанных.Вставить("ИсточникДанных", ИсточникДанных);
		
		Попытка
			МониторингЦелевыхПоказателей.ВывестиОтдельныйПоказатель(ТабличныйДокумент, ОписаниеИсточникаДанных);
			КомментарийСПараметрами = НСтр("ru='Показатель сформирован успешно.';uk='Показник сформований успішно.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		
		ИсточникДанныхПоказателя = ОписаниеИсточникаДанных.ИсточникДанных.Получить();
		
		ТипАнализа = ВариантАнализа.ТипАнализа;
		ЕстьСравнение = (ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом);
		Если ЕстьСравнение Тогда
			ОтображаемоеЗначение = ИсточникДанныхПоказателя.СвойстваДанныхПоПериодам.ОбщийИтог;
		Иначе 
			ОтображаемоеЗначение = ИсточникДанныхПоказателя.СвойстваДанныхПоПериодам.ПоследнееЗначение;
		КонецЕсли;
		ИндексКартинкиСостояния =
			МониторингЦелевыхПоказателей.ПолучитьИндексКартинкиСостоянияДляПоказателя(ВариантАнализа, ИсточникДанныхПоказателя);
		ИндексКартинкиТренда =
			МониторингЦелевыхПоказателей.ПолучитьИндексКартинкиТрендаДляПоказателя(ВариантАнализа, ИсточникДанныхПоказателя);
		Размерность = СокрЛП(ИсточникДанныхПоказателя.ДинамическиеСвойстваВариантаАнализа.Размерность);
		ПорядокЗоныВнимания = ИсточникДанныхПоказателя.СвойстваЗоныАнализаИТренда.ПорядокЗоныВнимания;
	Иначе
		ИнформацияОбОшибке =  НСтр("ru='Не определен источник данных для показателя.';uk='Не визначено джерело даних для показника.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	СтруктураРезультата.Вставить("ИндексКартинкиСостояния", ИндексКартинкиСостояния);
	СтруктураРезультата.Вставить("ИндексКартинкиТренда", ИндексКартинкиТренда);
	СтруктураРезультата.Вставить("ОтображаемоеЗначение", ОтображаемоеЗначение);
	СтруктураРезультата.Вставить("Размерность", Размерность);
	СтруктураРезультата.Вставить("КраткоеНаименованиеЦелевогоПоказателя", КраткоеНаименованиеЦелевогоПоказателя);
	СтруктураРезультата.Вставить("ПорядокЗоныВнимания", ПорядокЗоныВнимания);
	СтруктураРезультата.Вставить("ПериодичностьКонтроля",
		Перечисления.Периодичность.Индекс(ВариантАнализа.ПериодичностьКонтроля));
	
	РассылкаОтчетов.ЗаписьЖурнала(ПараметрыЖурнала,, КомментарийСПараметрами, ИнформацияОбОшибке);
	
	Результат = Новый ХранилищеЗначения(СтруктураРезультата, Новый СжатиеДанных(9));
	
	Возврат Результат;
КонецФункции

// Возвращает табличный документ результата формирования варианта отчета.
//
// Параметры:
//  ВариантОтчета - Вариант отчета, результат которого требуется сформировать;
//  Настройки - Настройки вариант отчета, по которым требуется получить результат;
//  ПериодОтчета - необязательный - Параметр Настроек Компоновки данных "Период" вариант отчета, по которым требуется получить результат;
//  ПользовательскиеНастройкиИД - идентификатор пользовательских настроек;
//  НастройкиПользователя - Пользовательские настройки варианта отчета.
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее табличный документ результата формирования варианта отчета.
//
Функция РезультатОтчета(ВариантОтчета, НастройкиОтчетаХранилище, ПериодОтчета = Неопределено,
								ПользовательскиеНастройкиИД = Неопределено, НастройкиПользователя = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Параметры записи в журнал регистрации.
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru='Монитор ERP. Синхронизация.';uk='Монітор ERP. Синхронізація.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные", ВариантОтчета);
	ПараметрыЖурнала.Вставить("Метаданные", ВариантОтчета.Метаданные());
	
	Попытка
		НастройкиОтчета = НастройкиОтчетаХранилище.Получить();
	Исключение
		НастройкиОтчета = Неопределено;
	КонецПопытки;
	
	// Инициализация отчета.
	ПараметрыОтчета = Новый Структура("Отчет, Настройки, Форматы, ОтправлятьЕслиПустой");
	ПараметрыОтчета.Вставить("Отчет", ВариантОтчета);
	ПараметрыОтчета.Вставить("Настройки", НастройкиОтчета);
	
	Если НЕ РассылкаОтчетов.ИнициализироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, Ложь) Тогда
		Возврат Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Отчет = ПараметрыОтчета.Объект;
	
	Если ПараметрыОтчета.СКД Тогда
		
		// Настройки компоновки варианта отчета.
		Если НастройкиОтчета = Неопределено Тогда
			Вариант = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ВариантОтчета.КлючВарианта);
			Если Не Вариант = Неопределено Тогда
				НастройкиОтчета = Вариант.Настройки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПериодОтчета = Неопределено Тогда
			ПараметрПериод = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период");
			Если Не ПараметрПериод = Неопределено И 
				Не ПараметрПериод = ПериодОтчета Тогда
				НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПериодОтчета);
			КонецЕсли;
		КонецЕсли;
		
		Если Не НастройкиОтчета = Неопределено Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
		КонецЕсли;
		
		// Пользовательские настройки компоновки варианта отчета.
		Если НастройкиПользователя = Неопределено Тогда
			Если Не ПользовательскиеНастройкиИД = Неопределено Тогда
				Если ВариантОтчета.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний Тогда
					КлючОбъекта = ВариантОтчета.Отчет.ПолноеИмя+"/"+ВариантОтчета.КлючВарианта;
				Иначе
					КлючОбъекта = "ВнешнийОтчет." + ВариантОтчета.Отчет.ИмяОбъекта+"/"+ВариантОтчета.КлючВарианта;
				КонецЕсли;
				Если ПользовательскиеНастройкиИД = "ТекущиеПользовательскиеНастройки" Тогда
					НастройкиПользователя = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта+"/"+ПользовательскиеНастройкиИД);
				Иначе
					НастройкиПользователя = ХранилищеПользовательскихНастроекОтчетов.Загрузить(КлючОбъекта,
						ПользовательскиеНастройкиИД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не НастройкиПользователя = Неопределено Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НастройкиПользователя);
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияОбОшибке = Неопределено;
	КомментарийСПараметрами = "";
	Попытка
		Если ПараметрыОтчета.СКД Тогда
			Отчет.СкомпоноватьРезультат(ТабличныйДокумент);
		Иначе
			ТабДок = Отчет.Сформировать();
			Если ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
				ТабличныйДокумент = ТабДок;
			КонецЕсли;
		КонецЕсли;
		КомментарийСПараметрами = НСтр("ru='Вариант отчета сформирован успешно.';uk='Варіант звіту сформований успішно.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	Если ТабличныйДокумент.КоличествоУровнейГруппировокСтрок()>0 Тогда
		ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;
	
	РассылкаОтчетов.ЗаписьЖурнала(ПараметрыЖурнала,, КомментарийСПараметрами, ИнформацияОбОшибке);
	
	Возврат Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
КонецФункции

// Возвращает необходимые свойства варианта анализа.
//
// Параметры:
//  ВариантАнализа - Вариант анализа, свойства которого требуется получить.
//
// Возвращаемое значение:
//  Свойства Варианта анализа - структура, содержащая свойства Вариант анализа.
//
Функция СвойстваВариантаАнализа(ВариантАнализа)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПоказателя = Новый Структура("Ссылка, ПериодАнализа",
		ВариантАнализа, ВариантАнализа.ПериодАнализа.Получить());
	
	Возврат СтруктураПоказателя;
КонецФункции

// Возвращает необходимые свойства варианта отчета.
//
// Параметры:
//  ВариантОтчета - Вариант отчета, свойства которого требуется получить.
//
// Возвращаемое значение:
//  Свойства Варианта Отчета - структура, содержащая свойства Вариант отчета.
//
Функция СвойстваВариантаОтчета(ВариантОтчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваВариантаОтчета = Новый Структура("КлючВарианта, КлючОбъекта",
		ВариантОтчета.КлючВарианта, ВариантОтчета.Отчет.ПолноеИмя);
	
	Возврат СвойстваВариантаОтчета;
КонецФункции

Функция СтандартнаяСтруктураОбъекта()
	
	СтруктураСправочника = Новый Структура;
	СтруктураСправочника.Вставить("ref");
	СтруктураСправочника.Вставить("DeletionMark");
	СтруктураСправочника.Вставить("Description");
	
	Возврат СтруктураСправочника;
КонецФункции

// Возвращает структуру объекта мобильного приложения "Виды контактной информации" для обмена.
//
// Возвращаемое значение:
//  Структура
//
Функция СтруктураВидаКИ(Знач ЭтоГруппа)
	
	СтруктураВидаКИ = СтандартнаяСтруктураОбъекта();
	
	СтруктураВидаКИ.Вставить("IsFolder");
	СтруктураВидаКИ.Вставить("Parent");
	СтруктураВидаКИ.Вставить("PredefinedDataName");
	СтруктураВидаКИ.Вставить("ERPКод");
	
	Если ЭтоГруппа Тогда
		Возврат СтруктураВидаКИ;
	КонецЕсли;
	
	СтруктураВидаКИ.Вставить("Тип");
	СтруктураВидаКИ.Вставить("РеквизитДопУпорядочивания");
	СтруктураВидаКИ.Вставить("РедактированиеТолькоВДиалоге");
	СтруктураВидаКИ.Вставить("МожноИзменятьСпособРедактирования");
	СтруктураВидаКИ.Вставить("АдресТолькоРоссийский");
	СтруктураВидаКИ.Вставить("ВключатьСтрануВПредставление");
	СтруктураВидаКИ.Вставить("ОбязательноеЗаполнение");
	СтруктураВидаКИ.Вставить("ПроверятьКорректность");
	СтруктураВидаКИ.Вставить("СкрыватьНеактуальныеАдреса");
	СтруктураВидаКИ.Вставить("Подсказка");
	СтруктураВидаКИ.Вставить("РазрешитьВводНесколькихЗначений");
	// Поддержка мобильного приложения до версии 2.0.3.
	СтруктураВидаКИ.Вставить("ЗапрещатьВводНекорректного");
	
	Возврат СтруктураВидаКИ;
КонецФункции

// Возвращает структуру, содержащую имя таблицы для выборки и массив полей, которые нужно выбрать.
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, структуру описания которого требуется получить;
//  Изменения - признак того, что в качестве таблицы для выборки выступает таблица изменений.
//
// Возвращаемое значение:
//  Структура, содержащая описание объекта метаданных.
//
Функция СтруктураОписанияОбъекта(ОбъектМетаданных, Изменения = Ложь)
	
	Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Константы";
		ИмяТаблицы = "Константы";
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Справочники";
		ИмяТаблицы = "Справочник." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Документы";
		ИмяТаблицы = "Документ." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "РегистрыСведений";
		ИмяТаблицы = "РегистрСведений." + ОбъектМетаданных.Имя;
	КонецЕсли;
	
	// Если требуется только выборка изменений, то выбирать необходимо по таблицам изменений.
	Если Изменения Тогда
		ИмяТаблицы = ИмяТаблицы + ".Изменения";
	КонецЕсли;
	
	СтруктураОписания = Новый Структура();
	СтруктураОписания.Вставить("ИмяКласса", ИмяКласса);
	СтруктураОписания.Вставить("ИмяОбъекта", ОбъектМетаданных.Имя);
	СтруктураОписания.Вставить("ИмяТаблицы", ИмяТаблицы);
	
	Возврат СтруктураОписания;
КонецФункции

// Возвращает структуру объекта мобильного приложения "Страны мира" для обмена.
//
// Возвращаемое значение:
//  Структура
//
Функция СтруктураСтраны()
	
	СтруктураСтраны = СтандартнаяСтруктураОбъекта();
	
	СтруктураСтраны.Вставить("Code");
	СтруктураСтраны.Вставить("PredefinedDataName");
	СтруктураСтраны.Вставить("НаименованиеПолное");
	СтруктураСтраны.Вставить("КодАльфа2");
	СтруктураСтраны.Вставить("КодАльфа3");
	Возврат СтруктураСтраны;
КонецФункции

// Возвращает текст запроса контактных лиц клиента.
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаКонтаткныхЛицКлиента()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка,
	|	КонтактныеЛицаПартнеров.ПометкаУдаления КАК DeletionMark,
	|	КонтактныеЛицаПартнеров.Наименование КАК Description,
	|	&КодВладельца КАК Owner,
	|	"""" КАК ERPКод,
	|	КонтактныеЛицаПартнеров.Комментарий,
	|	КонтактныеЛицаПартнеров.ДолжностьПоВизитке,
	|	КонтактныеЛицаПартнеров.ДатаРождения
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер";
	
	Возврат ТекстЗапроса;
КонецФункции

#Область ЗаписьОсновныхСправочниковВОбмен

Процедура ЗаписатьВидКИСтроки(Фабрика, ЗаписьXML, Знач СтрокаДанных, ВыгруженныеОбъекты)
	
	Если СтрокаДанных.ВидКИТип = 
			Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВидаКИ = СтруктураВидаКИ(Ложь);
	
	СтруктураВидаКИ.ref = СокрЛП(СтрокаДанных.ВидКИСсылка.УникальныйИдентификатор());
	СтруктураВидаКИ.DeletionMark = СтрокаДанных.ВидКИПометкаУдаления;
	СтруктураВидаКИ.IsFolder = СтрокаДанных.ВидКИЭтоГруппа;
	СтруктураВидаКИ.Description = СтрокаДанных.ВидКИНаименование;
	СтруктураВидаКИ.PredefinedDataName = СтрокаДанных.ВидКИИмяПредопределенныхДанных;
	СтруктураВидаКИ.РеквизитДопУпорядочивания = СтрокаДанных.ВидКИРеквизитДопУпорядочивания;
	СтруктураВидаКИ.РедактированиеТолькоВДиалоге = СтрокаДанных.ВидКИРедактированиеТолькоВДиалоге;
	СтруктураВидаКИ.МожноИзменятьСпособРедактирования = СтрокаДанных.ВидКИМожноИзменятьСпособРедактирования;
	СтруктураВидаКИ.АдресТолькоРоссийский = СтрокаДанных.ВидКИАдресТолькоРоссийский;
	СтруктураВидаКИ.ВключатьСтрануВПредставление = СтрокаДанных.ВидКИВключатьСтрануВПредставление;
	СтруктураВидаКИ.ОбязательноеЗаполнение = СтрокаДанных.ВидКИОбязательноеЗаполнение;
	СтруктураВидаКИ.ПроверятьКорректность = СтрокаДанных.ВидКИПроверятьКорректность;
	СтруктураВидаКИ.СкрыватьНеактуальныеАдреса = СтрокаДанных.ВидКИСкрыватьНеактуальныеАдреса;
	СтруктураВидаКИ.Подсказка = СтрокаДанных.ВидКИПодсказка;
	СтруктураВидаКИ.РазрешитьВводНесколькихЗначений = СтрокаДанных.ВидКИРазрешитьВводНесколькихЗначений;
	СтруктураВидаКИ.ERPКод = СтруктураВидаКИ.ref;
	
	// Поддержка мобильного приложения до версии 2.0.3.
	СтруктураВидаКИ.ЗапрещатьВводНекорректного = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ВидКИТип) Тогда
		ТипКИ = 
			Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаДанных.ВидКИТип);
		ТипКИСТрокой = 
			Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.Получить(ТипКИ).Имя;
	Иначе
		ТипКИСТрокой = "";
	КонецЕсли;
	СтруктураВидаКИ.Тип = ТипКИСТрокой;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ВидКИРодитель) Тогда
		ИдентификаторРодителя = СокрЛП(СтрокаДанных.ВидКИРодитель.УникальныйИдентификатор());
		Если ВыгруженныеОбъекты.Найти(СтрокаДанных.ВидКИРодитель) = Неопределено Тогда
			ЗаписатьГруппуВидаКИ(Фабрика, ЗаписьXML, СтрокаДанных.ВидКИРодитель, ВыгруженныеОбъекты);
		КонецЕсли;
		СтруктураВидаКИ.Parent = ИдентификаторРодителя;
	Иначе
		СтруктураВидаКИ.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	КонецЕсли;
	
	ЗаписатьСправочник(Фабрика, ЗаписьXML, СтруктураВидаКИ, "ВидыКонтактнойИнформации");
КонецПроцедуры

Процедура ЗаписатьГруппуВидаКИ(Фабрика, ЗаписьXML, Знач СсылкаНаОбъект, ВыгруженныеОбъекты)
	
	ВыгруженныеОбъекты.Добавить(СсылкаНаОбъект);
	
	СтруктураВидаКИ = СтруктураВидаКИ(Истина);
	
	СтрокаЗапросаРеквизитов = "ЭтоГруппа, ПометкаУдаления, Наименование, Родитель, ИмяПредопределенныхДанных";
	СтрокаДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, СтрокаЗапросаРеквизитов);
	
	СтруктураВидаКИ.ref = СокрЛП(СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураВидаКИ.DeletionMark = СтрокаДанных.ПометкаУдаления;
	СтруктураВидаКИ.IsFolder = СтрокаДанных.ЭтоГруппа;
	СтруктураВидаКИ.Description = СтрокаДанных.Наименование;
	СтруктураВидаКИ.PredefinedDataName = СтрокаДанных.ИмяПредопределенныхДанных;
	СтруктураВидаКИ.ERPКод = СтруктураВидаКИ.ref;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Родитель) Тогда
		ИдентификаторРодителя = СокрЛП(СсылкаНаОбъект.Родитель.УникальныйИдентификатор());
		Если ВыгруженныеОбъекты.Найти(СсылкаНаОбъект.Родитель) = Неопределено Тогда
			ЗаписатьГруппуВидаКИ(Фабрика, ЗаписьXML, СсылкаНаОбъект.Родитель, ВыгруженныеОбъекты);
		КонецЕсли;
		СтруктураВидаКИ.Parent = ИдентификаторРодителя;
	Иначе
		СтруктураВидаКИ.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	КонецЕсли;
	
	ЗаписатьСправочник(Фабрика, ЗаписьXML, СтруктураВидаКИ, "ВидыКонтактнойИнформации");
КонецПроцедуры

Процедура ЗаписатьСправочник(Фабрика, ЗаписьXML, Знач СтруктураСправочника, Знач ИмяСправочника)
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	ЛокальноеИмяОбъекта = "CatalogObject." + ИмяСправочника;
	
	ТипОбъекта = Фабрика.Тип(URIИмен, ЛокальноеИмяОбъекта);
	ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
	
	ЗагрузитьКИ = Ложь;
	ИсключаемоеСвойство = "";
	Если СтруктураСправочника.Свойство("КонтактнаяИнформация") 
		И НЕ СтруктураСправочника.КонтактнаяИнформация = Неопределено Тогда
		ЗагрузитьКИ = Истина;
		ИсключаемоеСвойство = "КонтактнаяИнформация";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтруктураСправочника,, ИсключаемоеСвойство);
	Если ЗагрузитьКИ Тогда
		Для Каждого СтрокаКИ Из СтруктураСправочника.КонтактнаяИнформация Цикл
			ОбъектОбмена.КонтактнаяИнформация.Добавить(СтрокаКИ);
		КонецЦикла;
	КонецЕсли;
	
	Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
КонецПроцедуры

Процедура ЗаписатьСтрануСтроки(Фабрика, ЗаписьXML, Знач СтрокаДанных)
	
	СтруктураСтраны = СтруктураСтраны();
	
	СтруктураСтраны.ref					= СокрЛП(СтрокаДанных.СтранаСсылка.УникальныйИдентификатор());
	СтруктураСтраны.DeletionMark		= СтрокаДанных.СтранаПометкаУдаления;
	СтруктураСтраны.Code				= СтрокаДанных.СтранаКод;
	СтруктураСтраны.Description			= СтрокаДанных.СтранаНаименование;
	СтруктураСтраны.PredefinedDataName	= СтрокаДанных.СтранаИмяПредопределенныхДанных;
	СтруктураСтраны.НаименованиеПолное	= СтрокаДанных.СтранаНаименованиеПолное;
	СтруктураСтраны.КодАльфа2			= СтрокаДанных.СтранаКодАльфа2;
	СтруктураСтраны.КодАльфа3			= СтрокаДанных.СтранаКодАльфа3;
	
	ЗаписатьСправочник(Фабрика, ЗаписьXML, СтруктураСтраны, "СтраныМира");
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ПрограммныйИнтерфейс

#Область ИнтерактивныеДействия

//Функция-конструктор дополнительных параметров разбиения строки
//
// Возвращаемое значение:
// 		Структура:
//			*ИмяПоляКоличество - Строка - значение по умолчанию КоличествоУпаковок
//          *Заголовок - Строка - заголовок формы ввода числа, значение по умолчанию "Введите количество товара в новой строке"
//			*РазрешитьНулевоеКоличество - Булево - признак, что в исходной и конечной строке может быть 0, значение по умолчанию 0
//			*Количество - Неопределенно,Число - количество, которое будет отображено в форме редактирования числа. Если Неопределенно -
//					будет показано количество в текущей строке
//					
Функция ПараметрыРазбиенияСтроки() Экспорт
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru='Введите количество товара в новой строке';uk='Введіть кількість товару у новому рядку'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции

//Обработчик команды "Разбить строку"
//
//	Параметры:
//		ТЧ - ДанныеФормыКоллеция
//		ЭлементФормы - ТаблицаФормы
//		ОповещениеПослеРазбиения - ОписаниеОповещения
//		ПараметрыРазбиенияСтроки - см. ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки
//
Процедура РазбитьСтрокуТЧ(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения = Неопределено, ПараметрыРазбиенияСтроки = Неопределено) Экспорт
	
	Если ПараметрыРазбиенияСтроки = Неопределено Тогда
		ПараметрыОбработки = ПараметрыРазбиенияСтроки();
	Иначе
		ПараметрыОбработки = ПараметрыРазбиенияСтроки;
	КонецЕсли;
	
	ТекущаяСтрока	= ЭлементФормы.ТекущиеДанные;
	ЧислоВведено = Истина;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Для выполнения команды требуется выбрать строку табличной части.';uk='Для виконання команди потрібно вибрати рядок табличної частини.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] = 0
		И Не ПараметрыОбработки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru='Невозможно разбить строку с нулевым количеством.';uk='Неможливо розбити рядок з нульовою кількістю.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "НоменклатураНабор") Тогда
			НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭлементФормы, ЭлементФормы.Имя, Отказ, Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Отказ Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] <> 0 Тогда
		
		Количество = ?(ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] = 0, 0, Неопределено);
		
		Если Количество = Неопределено Тогда
			РазбитьСтрокуТЧВводЧисла(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыОбработки);
			Возврат;
			
		КонецЕсли;
	Иначе
		Количество = 0;
		
	КонецЕсли;
	
	РазбитьСтрокуТЧДобавлениеСтроки(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыОбработки);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура РазбитьСтрокуТЧВводЧисла(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыОбработки)
	
	ТекущаяСтрока	= ЭлементФормы.ТекущиеДанные;
	
	Если ПараметрыОбработки.Количество = Неопределено Тогда
		Количество = ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество];
	Иначе
		Количество = ПараметрыОбработки.Количество;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТЧ",                       ТЧ);
	ДополнительныеПараметры.Вставить("ЭлементФормы",             ЭлементФормы);
	ДополнительныеПараметры.Вставить("ОповещениеПослеРазбиения", ОповещениеПослеРазбиения);
	ДополнительныеПараметры.Вставить("ПараметрыОбработки",       ПараметрыОбработки);
	
	Оповещение = Новый ОписаниеОповещения(
		"РазбитьСтрокуТЧПослеВводаЧисла", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьВводЧисла(Оповещение, Количество, ПараметрыОбработки.Заголовок, 15, 3);

КонецПроцедуры

// Служебная процедура.
//
Процедура РазбитьСтрокуТЧДобавлениеСтроки(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыОбработки)
	
	ТекущаяСтрока	= ЭлементФормы.ТекущиеДанные;
	
	ИндексТекущейСтроки 	 = ТЧ.Индекс(ТекущаяСтрока);
	НоваяСтрока 			 = ТЧ.Вставить(ИндексТекущейСтроки + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ПараметрыОбработки.ИмяПоляКоличество]   = Количество;
	ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] = ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество]
		- НоваяСтрока[ПараметрыОбработки.ИмяПоляКоличество];
	
	Если ОповещениеПослеРазбиения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, НоваяСтрока);
	КонецЕсли; 
	
	ЭлементФормы.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

// Служебная процедура.
//
Процедура РазбитьСтрокуТЧПослеВводаЧисла(Количество, ДополнительныеПараметры) Экспорт
	
	ТЧ                       = ДополнительныеПараметры.ТЧ;
	ЭлементФормы             = ДополнительныеПараметры.ЭлементФормы;
	ОповещениеПослеРазбиения = ДополнительныеПараметры.ОповещениеПослеРазбиения;
	ПараметрыОбработки       = ДополнительныеПараметры.ПараметрыОбработки;
	
	ТекущаяСтрока            = ЭлементФормы.ТекущиеДанные;
	
	ЧислоВведено = Количество <> Неопределено;
	
	Если Не ЧислоВведено Тогда
		Если ОповещениеПослеРазбиения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, Неопределено);
		КонецЕсли;
		Возврат;
	ИначеЕсли Количество = 0
		И Не ПараметрыОбработки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru='Количество в новой строке не может быть равно нулю.';uk='Кількість в новому рядку не може дорівнювати нулю.'");
		Оповщение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповщение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] >= 0
		И Количество < 0 Тогда
		ТекстСообщения = НСтр("ru='Количество в новой строке не может быть отрицательным.';uk='Кількість в новому рядку не може бути від''ємною.'");
		Оповщение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповщение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] <= 0
		И Количество > 0 Тогда
		ТекстСообщения = НСтр("ru='Количество в новой строке не может быть положительным.';uk='Кількість в новому рядку не може бути додатною.'");
		Оповщение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповщение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] >= 0
		И Количество >  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] Тогда
		ТекстСообщения = НСтр("ru='Количество в новой строке не может быть больше количества в текущей.';uk='Кількість в новому рядку не може бути більше кількості в поточному.'");
		Оповщение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповщение,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] <= 0
		И Количество <  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество] Тогда
		ТекстСообщения = НСтр("ru='Количество в новой строке не может быть меньше количества в текущей.';uk='Кількість в новому рядку не може бути менше кількості в поточному.'");
		Оповщение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповщение,ТекстСообщения);
		Возврат;
	ИначеЕсли Количество =  ТекущаяСтрока[ПараметрыОбработки.ИмяПоляКоличество]
		И Не ПараметрыОбработки.РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru='Количество в новой строке должно отличаться от количества в текущей.';uk='Кількість в новому рядку повинно відрізнятися від кількості в поточному.'");
		Оповщение = Новый ОписаниеОповещения("РазбитьСтрокуТЧПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(Оповщение,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РазбитьСтрокуТЧДобавлениеСтроки(ТЧ, ЭлементФормы, Количество, ОповещениеПослеРазбиения, ПараметрыОбработки);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура РазбитьСтрокуТЧПослеПредупреждения(ДополнительныеПараметры) Экспорт
	
	ТЧ                       = ДополнительныеПараметры.ТЧ;
	ЭлементФормы             = ДополнительныеПараметры.ЭлементФормы;
	ОповещениеПослеРазбиения = ДополнительныеПараметры.ОповещениеПослеРазбиения;
	ПараметрыОбработки       = ДополнительныеПараметры.ПараметрыОбработки;
	
	РазбитьСтрокуТЧВводЧисла(ТЧ, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыОбработки);
	
КонецПроцедуры

// Процедура проверяет возможность заполнения табличной части документа.
//
// Параметры:
//	ВозможноЗаполнениеТабличнойЧасти - ОписаниеОповещения - оповещение о возможности заполнения табличной части
//	Форма - УправляемаяФорма - Форма документа
//	ТабличнаяЧасть - ДанныеФормыКоллекция - Проверяемая табличная часть
//	СтруктураРеквизитов - Структура - Проверяемые реквизиты
//	ПроверятьПроведенность - Булево - Необходимость проверки того, что документ не проведен
//
Процедура ПроверитьВозможностьЗаполненияТабличнойЧасти(ВозможноЗаполнениеТабличнойЧасти, Форма, ТабличнаяЧасть, СтруктураРеквизитов, ПроверятьПроведенность = Истина) Экспорт 
	
	Если (ПроверятьПроведенность И Форма.Объект.Проведен)
		ИЛИ (ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() > 0)  Тогда
		
		Если ПроверятьПроведенность 
			И Форма.Объект.Проведен 
			И (ТабличнаяЧасть = Неопределено 
			ИЛИ ТабличнаяЧасть.Количество() = 0) Тогда
			ТекстВопроса = НСтр("ru='Заполнение возможно только в непроведенном документе, отменить проведение?';uk='Заповнення можливо тільки в непроведеному документі, скасувати проведення?'");
		ИначеЕсли ТабличнаяЧасть <> Неопределено 
			И ТабличнаяЧасть.Количество() > 0
			И (НЕ ПроверятьПроведенность 
			ИЛИ НЕ Форма.Объект.Проведен) Тогда
			ТекстВопроса = НСтр("ru='Табличная часть будет очищена, продолжить?';uk='Таблична частина буде очищена, продовжити?'");
		Иначе
			ТекстВопроса = НСтр("ru='Заполнение возможно только в непроведенном документе.
                |Табличная часть будет очищена. Очистить и отменить проведение?'
                |;uk='Заповнення можливо тільки в непроведенному документі.
                |Таблична частина буде очищена. Очистити і скасувати проведення?'");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВозможноЗаполнениеТабличнойЧасти", ВозможноЗаполнениеТабличнойЧасти);
		ДополнительныеПараметры.Вставить("ПроверятьПроведенность", ПроверятьПроведенность);
		ДополнительныеПараметры.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьВозможностьЗаполненияТабличнойЧастиПослеВопроса", 
			ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение(ВозможноЗаполнениеТабличнойЧасти, СтруктураРеквизитов, Форма);
		
	КонецЕсли; 
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ПроверитьВозможностьЗаполненияТабличнойЧастиПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВозможноЗаполнениеТабличнойЧасти = ДополнительныеПараметры.ВозможноЗаполнениеТабличнойЧасти;
	ПроверятьПроведенность = ДополнительныеПараметры.ПроверятьПроведенность;
	СтруктураРеквизитов = ДополнительныеПараметры.СтруктураРеквизитов;
	Форма = ДополнительныеПараметры.Форма;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверятьПроведенность И Форма.Объект.Проведен Тогда
		
		Если Не Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Не удалось отменить проведение документа';uk='Не вдалося скасувати проведення документа'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение(ВозможноЗаполнениеТабличнойЧасти, СтруктураРеквизитов, Форма);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение(ВозможноЗаполнениеТабличнойЧасти, СтруктураРеквизитов, Форма)
	
	ЗаполнятьТабличнуюЧасть = Истина;
	
	Если СтруктураРеквизитов <> Неопределено Тогда
		ЗаполнятьТабличнуюЧасть = РеквизитыОбъектаЗаполнены(Форма.Объект, СтруктураРеквизитов);
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть И Не Форма.Модифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть Тогда
		ВыполнитьОбработкуОповещения(ВозможноЗаполнениеТабличнойЧасти, Истина);
	КонецЕсли;
	
КонецПроцедуры
 
// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода. 
//                              Может быть установлена пост-обрабокта в месте вызова после выбора периода.
// 
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры

// Позволяет выбрать период из выпадающего списка
//
// Параметры:
//  Форма				- Форма - форма, в которой выполняется выбор периода
//  Элемент				- ЭлементФормы - элемент, рядом с которым нужно открыть выпадающий список
//	ВидПериода			- ПеречислениеСсылка.ДоступныеПериодыОтчета - вид выбираемого периода
//	ОбработчикВыбора	- ОписаниеОповещения - обработчик, расположенный в форме, который будет вызван после выбора
//
Процедура ВыбратьПериодИзСписка(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора) Экспорт
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ОбщегоНазначенияУТКлиентСервер.НачалоПериодаОтчета(ВидПериода, ТекущаяДата());
	КонецЕсли;
	
	ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ПериодНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, ВидПериода, ОповещениеОВыборе, НачалоПериода) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ОтчетыКлиентСервер.НачалоПериодаОтчета(ВидПериода, ТекущаяДата());
	КонецЕсли;
	
	Список = ОбщегоНазначенияУТКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
	Если Список.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОВыборе, Неопределено);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВидПериода", ВидПериода);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе", ОповещениеОВыборе);
	ДополнительныеПараметры.Вставить("Список", Список);
	
	Оповещение = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	Форма.ПоказатьВыборИзСписка(Оповещение, Список, Элемент, ЭлементСписка);
	
КонецПроцедуры

Процедура ПериодНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод = Неопределено тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйПериод);
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 ИЛИ Индекс = ДополнительныеПараметры.Список.Количество() - 1 тогда
		ПериодНачалоВыбора(ДополнительныеПараметры.Форма, 
			ДополнительныеПараметры.Элемент, 
			Ложь, 
			ДополнительныеПараметры.ВидПериода, 
			ДополнительныеПараметры.ОповещениеОВыборе,
			ВыбранныйПериод.Значение);
		
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйПериод);
	
КонецПроцедуры

// Обертка для метода НачатьЗапускПриложения() в случае, если не требуется обработка результата запуска.
//
// Параметры:
//	СтрокаКоманды - Строка - Командная строка для запуска приложения 
//							 либо имя файла, ассоциированного с некоторым приложением.
//
Процедура ЗапуститьПриложениеБезОбработкиРезультата(СтрокаКоманды) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗапуститьПриложениеБезОбработкиРезультатаЗавершение",
		ЭтотОбъект);
		
	НачатьЗапускПриложения(ОписаниеОповещения, СтрокаКоманды);
	
КонецПроцедуры

// Обработчик команды "Пометить на удаление / Снять пометку"
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ТипСписка - Строка - тип документов списка.
//
Процедура УстановитьПометкуУдаления(Список, ТипСписка) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			
			Документ = ТекущиеДанные.Ссылка;
			ЕстьСтрокиПомеченныеНаУдаление = ТекущиеДанные.ПометкаУдаления;
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(Документ);
			
			ТекстВопроса = ?(ТекущиеДанные.ПометкаУдаления,
				НСтр("ru='Снять с ""%Документ%"" пометку на удаление?';uk='Зняти з ""%Документ%"" позначку для вилучення?'"),
				НСтр("ru='Пометить ""%Документ%"" на удаление?';uk='Позначити ""%Документ%"" для вилучення?'"));
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Документ%", Документ);
			
		Иначе
			
			Результат = ОбщегоНазначенияУТВызовСервера.СсылкиОбъектовПомеченныхНаУдаление(ВыделенныеСтроки, "Ссылка");
			
			МассивСсылок = Результат.МассивСсылок;
			ЕстьСтрокиПомеченныеНаУдаление = Результат.ЕстьСтрокиПомеченныеНаУдаление;
			
			ТекстВопроса = ?(Результат.ЕстьСтрокиПомеченныеНаУдаление,
				НСтр("ru='Снять с выделенных элементов пометку на удаление?';uk='Зняти з виділених елементів позначку на вилучення?'"),
				НСтр("ru='Пометить выделенные элементы на удаление?';uk='Відмітити виділені елементи для вилучення?'"));
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("Список, ВыделенныеСтроки, ТипСписка, УстановкаПометкиУдаления",
			Список, МассивСсылок, ТипСписка, Не ЕстьСтрокиПомеченныеНаУдаление);
		
		Оповещение = Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Провести"
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ТипСписка - Строка - тип документов списка.
//
Процедура ПровестиДокументы(Список, ТипСписка) Экспорт
	
	ОчиститьСообщения();
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НепроведенныеДокументы = Новый Массив;
	ШаблонСообщения = НСтр("ru='Документ %1 не проведен: %2';uk='Документ %1 не проведено: %2'");
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(МассивСсылок);
	
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
			ИнформацияОДокументе.Ссылка);
		
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	ПроведенныеДокументы = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСсылок, НепроведенныеДокументы);
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='ОК';uk='ОК'"));
		
		ТекстДиалога = НСтр("ru='Не удалось провести один или несколько документов.';uk='Не вдалося провести один або кілька документів.'");
		ДополнительныеПараметры = Новый Структура("Список, ПроведенныеДокументы, ТипСписка",
			Список, ПроведенныеДокументы, ТипСписка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПроведенностьДокументовЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстДиалога, КнопкиДиалога);
	Иначе
		ОповещениеПроведенияОтменыПроведенияДокумента(Список, МассивСсылок, ТипСписка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Отмена проведения"
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ТипСписка - Строка - тип документов списка.
//
Процедура ОтменаПроведения(Список, ТипСписка) Экспорт
	
	ОчиститьСообщения();
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаспроведенныеДокументы = ОбщегоНазначенияУТВызовСервера.СсылкиРаспроведенныхДокументов(МассивСсылок);
	
	Если РаспроведенныеДокументы.Количество() > 0 Тогда
		ОповещениеПроведенияОтменыПроведенияДокумента(Список, РаспроведенныеДокументы, ТипСписка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма          - форма элемента или документа
//
// Возвращаемое значение:
// 		Булево - признак отказа выполнения дальнейших действий
//
Функция ПриДействииСЭлементомЗависящимОтСтатуса(Форма) Экспорт
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение = Истина;
	Форма.Объект.Согласован = Ложь;
	
	Возврат Ложь;
	
КонецФункции

// Служебная процедура.
//
Процедура КонтрольНеСогласованныхИзмененийВызватьИсключение(Форма, Элемент) Экспорт
	ВызватьИсключение НСтр("ru='Внутренняя ошибка подсистемы контроля несогласованных изменений.';uk='Внутрішня помилка підсистеми контролю неузгоджених змін.'");
КонецПроцедуры

Функция ПолеВнутриТаблицы(Форма, Элемент)
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ТаблицаФормы") Тогда
		Возврат Элемент.Родитель;
	ИначеЕсли ТипЗнч(Элемент.Родитель) = Тип("УправляемаяФорма") Тогда
		Возврат Неопределено;
	Иначе	
		Возврат ПолеВнутриТаблицы(Форма, Элемент.Родитель);
	КонецЕсли;
	
КонецФункции

// Вызывается в формах документов и справочников для отказа от изменения значения реквизита.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// в механизме контроля несогласованных изменений.// Параметры:
// 		Форма          - форма элемента или документа
// 		Элемент        - Элемент формы
//
Процедура ВернутьПредыдущееЗначениеРеквизита(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Данные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента];
		ИначеЕсли ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Таблица.ТекущиеДанные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяТаблицы][СтрокаМассива];
			Прервать;
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в формах документов и справочников для сохранения предыдущего значения элемента.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// Параметры:
// 		Форма          - форма элемента или документа
// 		Элемент        - Элемент формы
//
Процедура СохранитьЗначениеРеквизита(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Возврат;
		Иначе
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента] = Данные[СтрокаМассива];
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма          - форма элемента или документа
//
Процедура ПослеИзмененияРеквизитаЗависящегоОтСтатуса(Форма) Экспорт
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОповещениеПользователейПриИзменении

//Процедура показывает оповещение после обработки статусов выделенных в списке документов
//
// Параметры:
//	СписокДокументов       - ДинамическийСписок - элемент формы
//	КоличествоОбработанных - Число - количество успешно обработанных документов
//	КоличествоВсего 	   - Число - количество выделенных в списке документов
//	Статус                 - Строка - устанавливаемый статус
//
Процедура ОповеститьПользователяОбУстановкеСтатуса(СписокДокументов, КоличествоОбработанных, КоличествоВсего, Статус) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
		
		Если СписокДокументов <> Неопределено Тогда
			СписокДокументов.Обновить();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""';uk='Для %КоличествоОбработанных% з %КоличествоВсего% виділених в списку документів встановлено статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен';uk='Статус ""%Статус%"" встановлено'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);

	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного документа.';uk='Статус ""%Статус%"" не встановлено для жодного документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен';uk='Статус ""%Статус%"" не встановлено'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура оповещение и записывает в историю пользователя изменение объекта, как делает платформа
//
// Параметры:
//	СсылкаНаОбъект       - ЛюбаяСсылка - измененный объект
//
Процедура ОповеститьПользователяОбИзмененииОбъекта(СсылкаНаОбъект, ТекстЗаголовка = "") Экспорт
	
	Если ПустаяСтрока(ТекстЗаголовка) Тогда	
		ТекстЗаголовка = НСтр("ru='Изменение:';uk='Зміна:'");
	КонецЕсли;
	ТекстСообщения = Строка(СсылкаНаОбъект);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
	ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);

	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	
КонецПроцедуры

// Выполняет оповещение пользователя об осуществленной установке пометки на удаление
// или снятия пометки с удаления документа, а также записывает в историю информацию об изменениях объекта.
//
//	Параметры:
//		РезультатВопроса - Перечисление - результат ответа на вопрос,
//		ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура УстановитьПометкуУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Список = ДополнительныеПараметры.Список;
		ТипСписка = ДополнительныеПараметры.ТипСписка;
		МассивСсылок = ДополнительныеПараметры.ВыделенныеСтроки;
		ПометитьНаУдаление = ДополнительныеПараметры.УстановкаПометкиУдаления;
		
		ОбщегоНазначенияУТВызовСервера.УстановитьПометкуУдаленияЗавершениеСервер(МассивСсылок, ПометитьНаУдаление);
		
		Если МассивСсылок.Количество() > 1 Тогда
			Документ = ТипСписка;
			ТекстОповещения = ?(Не ПометитьНаУдаление, 
				НСтр("ru='Пометка удаления снята (%КоличествоДокументов%)';uk='Позначка вилучення знята (%КоличествоДокументов%)'"),
				НСтр("ru='Пометка удаления установлена (%КоличествоДокументов%)';uk='Позначка вилучення встановлена (%КоличествоДокументов%)'"));
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", МассивСсылок.Количество());
		Иначе
			Документ = МассивСсылок[0];
			ТекстОповещения = ?(Не ПометитьНаУдаление,
				НСтр("ru='Пометка удаления снята';uk='Позначка вилучення знята'"),
				НСтр("ru='Пометка удаления установлена';uk='Позначка вилучення встановлена'"));
		КонецЕсли;
		
		Список.Обновить();
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет оповещение пользователя об осуществленном проведении документов
// а также обновляет информацию об измененных данных динамического списка.
//
//	Параметры:
//		РезультатВопроса - Перечисление - результат ответа на вопрос,
//		ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПроверитьПроведенностьДокументовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> Неопределено Тогда
		Список = ДополнительныеПараметры.Список;
		ТипСписка = ДополнительныеПараметры.ТипСписка;
		ПроведенныеДокументы = ДополнительныеПараметры.ПроведенныеДокументы;
		
		Если ПроведенныеДокументы.Количество() > 0 Тогда
			ОповещениеПроведенияОтменыПроведенияДокумента(Список, ПроведенныеДокументы, ТипСписка);
		Иначе
			Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедакторированиеЗаблокированныхРеквизитов

// Вызывается в формах объектов для разблокировки заблокированных реквизитов.
// 
// Параметры:
//     ЭтаФорма              - Форма объекта
//     ИмяФормыРазблокировки - Имя формы разблокировки
//     ОповещениеОРазблокировке - Описание оповещения после разблокировки
//
Процедура РазрешитьРедактированиеРеквизитовОбъекта(Форма, Знач ИмяФормыРазблокировки = "", ОповещениеОРазблокировке = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Если Не ЗначениеЗаполнено(ИмяФормыРазблокировки) Тогда
			МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Форма.ИмяФормы, ".");
			МассивИмениФормы[3] = "РазблокированиеРеквизитов";
			ИмяФормыРазблокировки = СтрСоединить(МассивИмениФормы, ".");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма",Форма);
		Если ОповещениеОРазблокировке <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("ОповещениеОРазблокировке",ОповещениеОРазблокировке);
		КонецЕсли; 
		Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ИмяФормыРазблокировки, 
			Новый Структура("Объект", Форма.Объект.Ссылка),
			,
			,
			,
			,
			Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Служебная процедура.
//
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Если Результат = Истина Тогда
		
		ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(Форма);
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьРазрешенностьРедактированияРеквизитов(Форма, ЗаблокированныеРеквизиты);
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеОРазблокировке") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОРазблокировке, Результат);
		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ЗаполненияТабличныхЧастейДокумента

// Копирует значения реквизитов текущей строки табличной части в служебный реквизит формы.
//
//  Параметры:
//   Форма - УправляемаяФорма - форма, содержащая таблицу.
//   ИмяТабличнойЧасти - Строка - имя таблицы формы, текущие данные которой необходимо скопировать в служебный реквизит формы.
//                                Имя служебного реквизита должно состоять из префикcа Кеш и имени табличной части.
//
Процедура КешироватьТекущуюСтроку(Форма, ИмяТабличнойЧасти) Экспорт

	ТекущиеДанные = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	СтруктураКеш = Новый Структура(Форма[ИмяТабличнойЧасти + "КешТекущейСтроки"]);
	ЗаполнитьЗначенияСвойств(СтруктураКеш, ТекущиеДанные);
	Форма[ИмяТабличнойЧасти + "КешТекущейСтроки"] = Новый ФиксированнаяСтруктура(СтруктураКеш);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСПериодомРегистрации

// Возвращает строковое представление периода.
//
// Параметры:
//  ПериодРегистрации - Дата   - Дата внутри месяца или квартала, представление которых нужно получить
//  КалендарныйПериод - Строка - "Месяц" или "Квартал"
//
// Возвращаемое значение:
//  Строка - Представление месяца или квартала, внутри которых находится значение ПериодРегистрации
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод = "Месяц") Экспорт

	КодЯзыкаДляФормат = ЛокализацияПовтИсп.ОпределитьКодЯзыкаДляФормат();
	
	Если КалендарныйПериод = "Месяц" Тогда
		Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy';Л="+КодЯзыкаДляФормат)
	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
		Возврат ПредставлениеПериода(НачалоКвартала(ПериодРегистрации), КонецКвартала(ПериодРегистрации),"Л="+КодЯзыкаДляФормат);
	КонецЕсли;

КонецФункции

// Увеличивает или уменьшает значение периода на одно значение.
//
// Параметры:
//  Направление                     - Число  - "1", если шагаем на следующий месяц, "-1", если шагаем в предыдущий месяц
//  СтандартнаяОбработка            - Булево - Признак стандартной обработки события
//  ПериодРегистрации               - Дата   - Переменная, в которую помещается значение следующего или предыдущего месяца
//  ПредставлениеПериодаРегистрации - Строка - Представление месяца ПериодаРегистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;

	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Выбирает период из списка возможных периодов.
//
// Параметры:
//  Элемент              - Поле формы - Поле формы, в котором наступает событие "НачалоВыбора".
//  СтандартнаяОбработка - Булево     - Признак стандартной обработки события
//  ПериодРегистрации    - Дата       - Переменная, в которую помещается выбранное значение
//  ЭтаФорма             - УправляемаяФорма - Управляемая форма, в которой происходит событие "Начало выбора"
//  ОповещениеОВыборе    - ОписаниеОповещения - Описание оповещения о выборе периода
//  НачальноеЗначение    - Дата       - Начальная дата для выбора периода
//  КалендарныйПериод    - Строка     - "Месяц" или "Квартал" - шаг периода
//
Процедура НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, Форма, ОповещениеОВыборе, НачальноеЗначение = Неопределено, КалендарныйПериод = "Месяц") Экспорт

	СтандартнаяОбработка = Ложь;

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли;

	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоПериодаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	
	Если КалендарныйПериод = "Месяц" Тогда
		КоличествоПериодовВГоду = 12;
		КоличествоМесяцевВПериоде = 1;
	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
		КоличествоПериодовВГоду = 4;
		КоличествоМесяцевВПериоде = 3;
	КонецЕсли;
	
	Для а = 1 По КоличествоПериодовВГоду Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоПериодаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоПериодаЗаполнения, КалендарныйПериод));
		Если НачальноеЗначение = НачалоПериодаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли;
		НачалоПериодаЗаполнения = ДобавитьМесяц(НачалоПериодаЗаполнения, КоличествоМесяцевВПериоде);
	КонецЦикла;
	
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент",              Элемент);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	ДополнительныеПараметры.Вставить("ПериодРегистрации",    ПериодРегистрации);
	ДополнительныеПараметры.Вставить("Форма",                Форма);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе",    ОповещениеОВыборе);
	ДополнительныеПараметры.Вставить("НачальноеЗначение",    НачальноеЗначение);
	ДополнительныеПараметры.Вставить("КалендарныйПериод",    КалендарныйПериод);
	
	Оповещение = Новый ОписаниеОповещения("НачалоВыбораПредставленияПериодаРегистрацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура НачалоВыбораПредставленияПериодаРегистрацииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДополнительныеПараметры.НачальноеЗначение) Тогда
		НачалоВыбораПредставленияПериодаРегистрации(
			ДополнительныеПараметры.Элемент, 
			ДополнительныеПараметры.СтандартнаяОбработка, 
			ДополнительныеПараметры.ПериодРегистрации,
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.ОповещениеОВыборе,
			ВыбранныйЭлемент.Значение, 
			ДополнительныеПараметры.КалендарныйПериод);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ВыборПериодаИзСписка

Процедура ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора)
	
	Список = ОбщегоНазначенияУТКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
	Если Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВидПериода", ВидПериода);
	ДополнительныеПараметры.Вставить("НачалоПериода", НачалоПериода);
	ДополнительныеПараметры.Вставить("Список", Список);
	ДополнительныеПараметры.Вставить("ОбработчикВыбора", ОбработчикВыбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, ЭлементСписка);
	
КонецПроцедуры

// Служебная процедура.
//
Процедура ВыбратьПериодОтчетаЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 ИЛИ Индекс = ДополнительныеПараметры.Список.Количество() - 1 тогда
		ВыбратьПериодОтчета(ДополнительныеПараметры.Форма, 
							ДополнительныеПараметры.Элемент, 
							ДополнительныеПараметры.ВидПериода, 
							ВыбранныйПериод.Значение, 
							ДополнительныеПараметры.ОбработчикВыбора);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикВыбора, ВыбранныйПериод);
	
КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод()
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт 

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ОбработатьЗаписьОбъектаВФорме(Форма, ПараметрыЗаписи, Отказ = Ложь) Экспорт
	
	ДействиеПослеЗаписи = Неопределено;
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Ложь;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Форма.НеВыполнятьПроверкуПередЗаписью = Истина;
	
	Отказ = Истина;
	ПараметрыЗаписи.Вставить(
		"ПринудительноЗакрытьФорму", Форма.ПринудительноЗакрытьФорму);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Форма.Объект.Ссылка));
	Результат = Форма.Записать(ПараметрыЗаписи);
	
	Форма.ПринудительноЗакрытьФорму = Ложь;
	Форма.НеВыполнятьПроверкуПередЗаписью = Ложь;
	
	Если Результат И ДействиеПослеЗаписи <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьДействияПослеЗаписи(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Если Не ПараметрыЗаписи.Свойство("НовыйОбъект") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.НовыйОбъект Тогда
		ТекстЗаголовка = НСтр("ru='Создание:';uk='Створення:'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Изменение:';uk='Зміна:'");
	КонецЕсли;
	ОповеститьПользователяОбИзмененииОбъекта(Объект.Ссылка, ТекстЗаголовка);
	
	Если Форма.ПринудительноЗакрытьФорму Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиИЗакрыть(Форма, РежимЗаписиПроведение = Истина) Экспорт
	
	ОчиститьСообщения();
	Форма.ПринудительноЗакрытьФорму = Истина;
	ПараметрыЗаписи = Новый Структура;
	Если РежимЗаписиПроведение Тогда
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Иначе
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	КонецЕсли;
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Форма.Объект.Ссылка));
	
	Форма.Записать(ПараметрыЗаписи);
	
КонецПроцедуры

Функция РеквизитыОбъектаЗаполнены(Объект, СтруктураРеквизитов)
	
	РеквизитыЗаполнены = Истина;
	ОчиститьСообщения();
	
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		
		Если Не ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'"),
				?(ПустаяСтрока(Элемент.Значение), Элемент.Ключ, Элемент.Значение));
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Поле = Элемент.Ключ;
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			
			РеквизитыЗаполнены = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыЗаполнены;
	
	
КонецФункции

Процедура ЗапуститьПриложениеБезОбработкиРезультатаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат; // обработка результата запуска не требуется
	
КонецПроцедуры

Процедура ПриОпределенииВозможностиОбновления() Экспорт
	
	
	МинимальноДопустимаяВерсия = "3.1.5"; // для BAS УТ3
	
	ПараметрыКлиента = Новый Структура;
	ОбщегоНазначенияУТВызовСервера.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыКлиента);
	
	Если ПараметрыКлиента.ВерсияДанных = "0.0.0.0" Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим допустимость обновления
	ТекущаяВерсияКонфигурации  = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ПараметрыКлиента.ВерсияДанных);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ТекущаяВерсияКонфигурации, МинимальноДопустимаяВерсия) < 0 Тогда
		Сообщение =
			НСтр("ru='Обновление на текущую версию допустимо только с версии %1 и выше.
            |(Недопустимая попытка обновления с версии %2)
            |Необходимо восстановить информационную базу из резервной копии
            |и повторить обновление согласно файлу 1cv8upd.htm'
            |;uk='Оновлення на поточну версію допустиме тільки з версії %1 і вище.
            |(Неприпустима спроба оновлення з версії %2)
            |Необхідно відновити інформаційну базу з резервної копії
            |і повторити оновлення згідно файлу 1cv8upd.htm'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			МинимальноДопустимаяВерсия,
			ПараметрыКлиента.ВерсияДанных);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	 
КонецПроцедуры

Функция ИмяФормыСпискаПрисоединенныхФайлов(Источник) Экспорт
	ИмяФормы = "ОбщаяФорма.ПрисоединенныеФайлы";
	
	
	Возврат ИмяФормы;
КонецФункции

// Выполняет оповещение пользователя о проведении или отмене проведения документов,
// а также записывает в историю информацию об изменениях объекта.
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ВыделенныеСтроки - Массив - массив ссылок документов,
//		ТипСписка - Строка - тип документов списка.
//
Процедура ОповещениеПроведенияОтменыПроведенияДокумента(Список, ВыделенныеСтроки, ТипСписка)
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Документ = ТипСписка;
		ТекстОповещения = НСтр("ru='Изменение (%КоличествоДокументов%)';uk='Зміна (%КоличествоДокументов%)'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", ВыделенныеСтроки.Количество());
	Иначе
		Документ = ВыделенныеСтроки[0];
		ТекстОповещения = НСтр("ru='Изменение';uk='Зміна'");
	КонецЕсли;
	
	Список.Обновить();
	ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

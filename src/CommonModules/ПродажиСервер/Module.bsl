////////////////////////////////////////////////////////////////////////////////
// Модуль "ПродажиСервер", содержит процедуры и функции для
// проверки корректности документов продажи и для обработки введенных данных
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет хозяйственную операцию возврата по хозяйственной операции реализации
//
// Параметры:
// ХозяйственнаяОперацияРеализация - ПеречислениеСсылка.ХозяйственныеОперации
//
// Возвращаемое значение:
// ПеречислениеСсылка.ХозяйственныеОперации
// Хозяйственная операция возврата
//
Функция ПолучитьХозяйственнуюОперациюВозвратаПоРеализации(Знач ХозяйственнаяОперацияРеализация) Экспорт
	
	Если ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
	 Или Не ЗначениеЗаполнено(ХозяйственнаяОперацияРеализация) Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
	ИначеЕсли ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
	КонецЕсли;
	
КонецФункции

// Определяет хозяйственную операцию соглашения по хозяйственной операции возврата
//
// Параметры:
// ХозяйственнаяОперацияРеализация - ПеречислениеСсылка.ХозяйственныеОперации
//
// Возвращаемое значение:
// ПеречислениеСсылка.ХозяйственныеОперации
// Хозяйственная операция возврата
//
Функция ПолучитьХозяйственнуюОперациюСоглашенияПоВозврату(Знач ХозяйственнаяОперацияВозврат) Экспорт
	
	Если ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента 
		ИЛИ ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя
		ИЛИ Не ЗначениеЗаполнено(ХозяйственнаяОперацияВозврат) Тогда
			Возврат Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		ИначеЕсли ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
			Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	КонецЕсли;
	
КонецФункции

// Отменяет все строки, по которым не было документально оформлена реализация
//
// Параметры:
// 		ДокументПродажи   - ДокументСсылка - ссылка на документ продажи,
// 			в котором необходимо отменить непоставленные строк
// 		ИмяТабличнойЧасти - Строка - имя табличной части, в которой необходимо осуществить проверку
// 		ПричинаОтмены     - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки
// 		ПроверятьОстатки  - Булево - признак, указывающий на необходимость запроса для проверки остатков
//
// Возвращаемое значение:
// 		Число - Количество отмененных строк
//
Функция ОтменитьНепоставленныеСтроки(ДокументПродажи, ИмяТабличнойЧасти, Знач ПричинаОтмены, Знач ПроверятьОстатки = Ложь) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	ТаблицаТовары = ДокументПродажи[ИмяТабличнойЧасти];
	
	СвойстваОтмененнойСтроки = Новый Структура(
		"Отменено, ПричинаОтмены, СтатусУказанияСерий",
		Истина, ПричинаОтмены, 0);
	
	Если Не ПроверятьОстатки Тогда
		Для н = 0 По ТаблицаТовары.Количество() - 1 Цикл
			Если Не ТаблицаТовары[н].Отменено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТовары[н], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено,
	|	ВЫРАЗИТЬ(ТаблицаТовары.ВариантОбеспечения КАК Перечисление.ВариантыОбеспечения) КАК ВариантОбеспечения,
	|	&ЗаказКлиента КАК ЗаказКлиента
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ВЫБОР 
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), 
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)) ТОГДА
	|				ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Услуга,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток КАК КОформлениюОстаток,
	|	ЗаказыКлиентовОстатки.СуммаКонечныйОстаток КАК СуммаОстаток,
	|	ВЫБОР КОГДА ТаблицаТовары.Количество > ЗаказыКлиентовОстатки.КОформлениюПриход ТОГДА
	|			ТаблицаТовары.Количество - ЗаказыКлиентовОстатки.КОформлениюПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСверхОформленного,
	|	ЗаказыКлиентовОстатки.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество = ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазбитьСтроку
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(,,,, ЗаказКлиента = &ЗаказКлиента) КАК ЗаказыКлиентовОстатки
	|		ПО ТаблицаТовары.КодСтроки = ЗаказыКлиентовОстатки.КодСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ВЫБОР 
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), 
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)) ТОГДА
	|				ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Услуга,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	0,
	|	0,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ЗаказКлиента.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
	|	ИЛИ ТаблицаТовары.ВариантОбеспечения НЕ В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузкеОстатки.Серия КАК Серия,
	|	ТоварыКОтгрузкеОстатки.Склад КАК Склад,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеРасход + ТоварыКОтгрузкеОстатки.СобраноПриход + ТоварыКОтгрузкеОстатки.СобираетсяПриход КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
	|		,,,,
	|		ДокументОтгрузки = &ЗаказКлиента) КАК ТоварыКОтгрузкеОстатки");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокументПродажи.Ссылка);
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		ДокументПродажи[ИмяТабличнойЧасти].Выгрузить(
			, // Массив строк для выгрузки
			"НомерСтроки, КодСтроки, Номенклатура, Упаковка, Количество, Отменено, ВариантОбеспечения"));
			
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Если ПакетРезультатов[1].Пустой() Тогда
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	СкладВСтроках = (Тип("ДокументСсылка.ЗаказКлиента") = ТипЗнч(ДокументПродажи.Ссылка));
	СкладЗаказа = Неопределено;
	Если НЕ СкладВСтроках Тогда
		СкладЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.Ссылка, "Склад");
	КонецЕсли; 
	
	Выборка = ПакетРезультатов[1].Выбрать();
	ОтгруженныеТовары = ПакетРезультатов[2].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ДокументПродажи[ИмяТабличнойЧасти][Выборка.НомерСтроки-1];
		Если Строка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить
			И Строка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			
			ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика,Склад, Серия", 
			Строка.Номенклатура,
			Строка.Характеристика, 
			?(СкладВСтроках, Строка.Склад, СкладЗаказа),
			Строка.Серия);
			
		ОтгруженноеКоличество = 0;
		ОтгруженнаяСтрока     = Неопределено;
		
		НайденныеСтроки = ОтгруженныеТовары.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОтгруженнаяСтрока = НайденныеСтроки[0];
			ОтгруженноеКоличество = ОтгруженнаяСтрока.Количество;
		КонецЕсли;
		Если Выборка.Услуга И Выборка.Количество > Выборка.КОформлениюОстаток Тогда
			ОтгруженноеКоличество = Выборка.Количество - Выборка.КОформлениюОстаток; 
		КонецЕсли;
		
		ОтменитьКоличество = 0;
		
		Если Выборка.КОформлениюОстаток = 0 И ОтгруженноеКоличество = 0 Тогда
			ОтменитьКоличество = Выборка.Количество;
		ИначеЕсли Выборка.Количество >= ОтгруженноеКоличество Тогда
			ОтменитьКоличество = Мин(Выборка.КОформлениюОстаток, Выборка.Количество - ОтгруженноеКоличество);
			Если ОтгруженнаяСтрока <> Неопределено Тогда
				Если ОтгруженноеКоличество > (Выборка.Количество - Выборка.КоличествоСверхОформленного - Выборка.КОформлениюОстаток) Тогда
					ОтгруженнаяСтрока.Количество = ОтгруженноеКоличество - (Выборка.Количество - Выборка.КоличествоСверхОформленного - Выборка.КОформлениюОстаток);
				Иначе
					ОтгруженнаяСтрока.Количество = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОтгруженнаяСтрока.Количество = ОтгруженнаяСтрока.Количество - Выборка.Количество;
		КонецЕсли;
		
		Если ОтменитьКоличество = Выборка.Количество Тогда
			
			ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			
		ИначеЕсли ОтменитьКоличество > 0 Тогда
			
			ОтменитьКоличество = ОтменитьКоличество + Выборка.КоличествоСверхОформленного;
			
			НоваяСтрока = ДокументПродажи[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
			НоваяСтрока.КодСтроки = 0;
			
			НоваяСтрока.Количество         = ОтменитьКоличество;
			НоваяСтрока.КоличествоУпаковок = ОтменитьКоличество / Выборка.КоэффициентУпаковки;
			НоваяСтрока.СуммаСНДС          = Строка.СуммаСНДС * ОтменитьКоличество/Выборка.Количество;
			
			Реквизиты = "Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки";
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(Реквизиты);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, Строка);
			
			Строка.Количество         = Выборка.Количество - ОтменитьКоличество;
			Строка.КоличествоУпаковок = (Выборка.Количество - ОтменитьКоличество) / Выборка.КоэффициентУпаковки;
			
			ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, Строка);
			ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, НоваяСтрока);
			
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Определяет имя табличной части по документу
//
// Параметры:
// ИмяТаблицы - строка - имя документа
//
// Возвращаемое значение:
// строка
// Имя табличной части документа
//
Функция ПолучитьИмяТабличнойЧасти(ИмяТаблицы) Экспорт
	
	Если ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ИмяТЧ = "ЗаменяющиеТовары";
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		ИмяТЧ = "Услуги";
	Иначе
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	Возврат ИмяТЧ;
	
КонецФункции

// Определяет представление табличной части по документу
//
// Параметры:
// ИмяТаблицы - строка - имя документа
//
// Возвращаемое значение:
// строка
// Представление табличной части документа
//
Функция ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы) Экспорт
	
	Если ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ПредставлениеТЧ = НСтр("ru='Заменяющие товары';uk='Замінюючі товари'");
	Иначе
		ПредставлениеТЧ = НСтр("ru='Товары';uk='Товари'");
	КонецЕсли;
	
	Возврат ПредставлениеТЧ;
	
КонецФункции

// Выводит сообщения об ошибках при вводе реализации по заказам
//
// Параметры:
// ВыборкаРеквизитыШапки - Выборка из результата запроса
//
// Возвращаемое значение:
// Булево
// Истина, если отказ от ввода на основании
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияРеализации(ВыборкаРеквизитыШапки) Экспорт
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных распоряжений отличается поле ""%ПредставлениеПоля%""';uk='У виділених розпоряджень відрізняється поле ""%ПредставлениеПоля%""'");
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПартнер Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Партнер';uk='Партнер'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Контрагент';uk='Контрагент'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Организация';uk='Організація'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСоглашение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Соглашение';uk='Оферта'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияДоговор Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Договор';uk='Договір'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСделка Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Сделка';uk='Угода'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСклад Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Склад';uk='Склад'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Операция';uk='Операція'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВалютаВзаиморасчетов Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Валюта взаиморасчетов';uk='Валюта взаєморозрахунків'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияЦенаВключаетНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Цена включает НДС';uk='Ціна включає ПДВ'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВернутьМногооборотнуюТару Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вернуть многооборотную тару';uk='Повернути багатооборотну тару'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияТребуетсяЗалогЗаТару Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Требуется залог за тару';uk='Потрібна застава за тару'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСрокВозвратаМногооборотнойТары Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Срок возврата многооборотной тары';uk='Строк повернення багатооборотної тари'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПорядокРасчетов Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Порядок расчетов';uk='Порядок розрахунків'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНаправлениеДеятельности Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Направление деятельности';uk='Напрям діяльності'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьНесовместимыеСпособыДоставки Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В одном из выделенных распоряжений указан способ доставки ""Перевозчик (с нашего склада)"", несовместимый со способами доставки других выделенных распоряжений.';uk='В одному з виділених розпоряджень вказаний спосіб доставки ""Перевізник (з нашого складу)"", несумісний зі способами доставки інших виділених розпоряджень.'"),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Возвращает наибольшую из дат аванса в строке тч ЭтапыОплаты
//
// Параметры:
//	ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - этапы оплаты, в которых необходимо рассчитать дату аванса
//
// Возвращаемое значение:
//	Дата - Максимальная дата аванса, если дат аванса нет - пустая дата
//
Функция МаксимальнаяДатаАванса(ЭтапыГрафикаОплаты) Экспорт
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
			ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МаксДатаАванса;
	
КонецФункции

// Формирование для элемента формы списка выбора адресов на основании контактной информации адресата.
//
Процедура ЗаполнитьСписокВыбораАдреса(ЭлементАдреса, АдресатСсылка, ОчищатьСписок = Истина) Экспорт
	
	Если ОчищатьСписок Тогда
		ЭлементАдреса.СписокВыбора.Очистить();
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(АдресатСсылка);
	
	Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов, 
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Для Каждого Адрес Из Адреса Цикл
		ЭлементАдреса.СписокВыбора.Добавить(Адрес.Представление, Строка(Адрес.Вид) + ": " + Адрес.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняет накладную по ордерам
//
// Параметры:
// 		Объект - ДанныеФормыСтруктура - перезаполняемая накладная
//
// Возвращаемое значение:
// 		Булево - "Истина", если накладная перезаполнена.
//
Функция ПерезаполнитьНакладнуюПоОрдерам(Объект) Экспорт
	
	ТаблицаРаспоряженийНаОтгрузку = Объект.Товары.Выгрузить(,"ЗаказКлиента");
	
	МассивРаспоряженийНаОтгрузку = ТаблицаРаспоряженийНаОтгрузку.ВыгрузитьКолонку("ЗаказКлиента");
	МассивРаспоряженийНаОтгрузку.Добавить(Объект.Ссылка);
	
	СостояниеОтгрузки = ПолучитьСостояниеФактическойОтгрузки(МассивРаспоряженийНаОтгрузку);
	
	Если НЕ СостояниеОтгрузки.ЕстьОтгруженныеТовары Тогда
		Текст = НСтр("ru='По данному документу не начата отгрузка!';uk='За цим документом не розпочато відвантаження!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Новый Структура("ЕстьИзменения, СостояниеОтгрузки", Ложь, СостояниеОтгрузки);
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЗависимыеРеквизиты = Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов"); 
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	СтруктураПараметров = ПродажиСервер.СтруктураДокументаДляЗаполненияПоФактическойОтгрузке();
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СостояниеОтгрузки);
	СтруктураПараметров.МассивРаспоряженийНаОтгрузку = МассивРаспоряженийНаОтгрузку;
	СтруктураПараметров.ЗаказЯвляетсяРаспоряжением = МассивРаспоряженийНаОтгрузку.Количество()>0;
	
	СтруктураПараметров.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	СтруктураПараметров.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	СтруктураПараметров.Вставить("СкладВТабличнойЧасти", Истина);
	СтруктураПараметров.Вставить("ДополнятьСтроки", Истина);
	СтруктураПараметров.Вставить("ПараметрыУказанияСерий", НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РеализацияТоваровУслуг));
	
	Если Объект.Свойство("РеализацияПоЗаказам") Тогда
		СтруктураПараметров.Вставить("ЗаполнятьНесобраннымиТоварами", Не Объект.РеализацияПоЗаказам);
	Иначе
		СтруктураПараметров.Вставить("ЗаполнятьНесобраннымиТоварами", Ложь);
	КонецЕсли;
	
	ЕстьИзменения = ПродажиСервер.ЗаполнитьПоФактическойОтгрузке(Объект, СтруктураПараметров);
	СостояниеОтгрузки.ЕстьНесобранныеТовары = СтруктураПараметров.ЗаполнятьНесобраннымиТоварами И СостояниеОтгрузки.ЕстьНесобранныеТовары;
	
	Возврат Новый Структура("ЕстьИзменения, СостояниеОтгрузки", ЕстьИзменения, СостояниеОтгрузки);
	
КонецФункции

// Функция возвращает состояние фактической отгрузки по документу
//
// Параметры:
// 		ДокументыОтгрузки - Массив - Ссылки на документы-распоряжения на отгрузку
//
// Возвращаемое значение:
// 		Структура - Структура с полями "ЕстьОтгруженныеТовары, ЕстьНесобранныеТовары" типа "Булево"
//
Функция ПолучитьСостояниеФактическойОтгрузки(ДокументыОтгрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеРасход),0)
	|	+ ЕСТЬNULL(СУММА(ТоварыКОтгрузкеОбороты.СобраноПриход),0)  КАК Количество,
	|	ЕСТЬNULL(СУММА(ТоварыКОтгрузкеОбороты.СобираетсяПриход),0) КАК КоличествоСобирается
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты( , , , ДокументОтгрузки В (&ДокументыОтгрузки)) КАК ТоварыКОтгрузкеОбороты");
	Запрос.УстановитьПараметр("ДокументыОтгрузки", ДокументыОтгрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьВыборка = Выборка.Следующий();
	
	СостояниеОтгрузки = Новый Структура(
		"ЕстьОтгруженныеТовары, ЕстьНесобранныеТовары",
		(ЕстьВыборка И Выборка.Количество > 0),
		(ЕстьВыборка И Выборка.КоличествоСобирается > 0));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СостояниеОтгрузки;
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииЗаполненияПоОтгрузке

// Возвращает типовую структру для заполнения документа по фактической отгрузке
//
// Возвращаемое значение:
// 		Структура
//
Функция СтруктураДокументаДляЗаполненияПоФактическойОтгрузке() Экспорт
	
	Возврат Новый Структура(
		"Ссылка, МассивРаспоряженийНаОтгрузку, Дата, Товары, Склад,
		|СкладВТабличнойЧасти, ЗаказЯвляетсяРаспоряжением,
		|ДополнятьСтроки,
		|РеализацияСверхЗаказа,
		|ЕстьОтгруженныеТовары, ЕстьНесобранныеТовары,
		|ЗаполнятьНеСобраннымиТоварами,
		|ПараметрыУказанияСерий,
		|СтруктураДействийСИзмененнымиСтроками, СтруктураДействийСДобавленнымиСтроками, ИмяЗаказаВТЧ",
		Неопределено, Неопределено, Неопределено, Неопределено, Неопределено,
		Ложь, Ложь,
		Ложь,
		Ложь,
		Ложь, Ложь,
		Ложь,
		Новый Структура,
		Новый Структура, Новый Структура, "ЗаказКлиента");
	
КонецФункции

// Заполняет табличные части документа по фактической отгрузке.
//
// Параметры:
// 		ОбъектДокумента - ДокументОбъект или ДанныеФормыСтруктура - Объект документа для заполнения
// 		СтруктураДокументаОтгрузки - Структура - Поля структуры описаны в функции "СтруктураДокументаДляЗаполненияПоФактическойОтгрузке"
//
// Возвращаемое значение:
// 		Булево - Истина, если табличные части перезаполнены
//
Функция ЗаполнитьПоФактическойОтгрузке(ОбъектДокумента, СтруктураДокументаОтгрузки) Экспорт
	
	Перем СтруктураРезультатаЗапроса;
	
	// Если нет отгруженных или несобранных товаров, то перезаполнять документ не нужно.
	Если Не (СтруктураДокументаОтгрузки.ЕстьОтгруженныеТовары
		Или (СтруктураДокументаОтгрузки.ЗаполнятьНеСобраннымиТоварами И СтруктураДокументаОтгрузки.ЕстьНесобранныеТовары)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураДокументаДляЗаполнения = СтруктураДокументаДляЗаполненияПоФактическойОтгрузке();
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СтруктураДокументаДляЗаполнения, СтруктураДокументаОтгрузки, Истина);
	
	// Получить данные об отгруженных и зарезервированных товарах.
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкиТоваров = "НомерСтроки, Номенклатура, Характеристика, Упаковка, Серия" + 
		?(СтруктураДокументаДляЗаполнения.СкладВТабличнойЧасти, ", Склад", "");
	
	ТаблицаТЧТовары = СтруктураДокументаДляЗаполнения.Товары.Выгрузить(, КолонкиТоваров);
	
	Если Не СтруктураДокументаДляЗаполнения.СкладВТабличнойЧасти Тогда
		ТаблицаТЧТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаТЧТовары.ЗаполнитьЗначения(СтруктураДокументаДляЗаполнения.Склад, "Склад");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаПоФактическойОтгрузке(СтруктураДокументаДляЗаполнения, СтруктураРезультатаЗапроса));
	
	ДатаРасчета = ?(ЗначениеЗаполнено(СтруктураДокументаДляЗаполнения.Дата), СтруктураДокументаДляЗаполнения.Дата, ТекущаяДата());
	
	Если СтруктураДокументаДляЗаполнения.МассивРаспоряженийНаОтгрузку <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДокументыОтгрузки", СтруктураДокументаДляЗаполнения.МассивРаспоряженийНаОтгрузку);
	Иначе
		Запрос.УстановитьПараметр("ДокументыОтгрузки", СтруктураДокументаДляЗаполнения.Ссылка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",                          ДатаРасчета);
	Запрос.УстановитьПараметр("Склад",                         СтруктураДокументаДляЗаполнения.Склад);
	Запрос.УстановитьПараметр("ЗаполнятьНеСобраннымиТоварами", СтруктураДокументаДляЗаполнения.ЗаполнятьНеСобраннымиТоварами);
	Запрос.УстановитьПараметр("Товары",                        ТаблицаТЧТовары);
	Запрос.УстановитьПараметр("Накладная",                     СтруктураДокументаДляЗаполнения.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[СтруктураРезультатаЗапроса.ТоварыКОтгрузке].Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ОтгруженныеТовары = Новый ТаблицаЗначений;
	ОтгруженныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтгруженныеТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОтгруженныеТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОтгруженныеТовары.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ОтгруженныеТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Если СтруктураДокументаДляЗаполнения.ЗаказЯвляетсяРаспоряжением Тогда
		МассивТиповЗаказов = Новый Массив;
		МассивТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
		МассивТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
		
		ОтгруженныеТовары.Колонки.Добавить(СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ, Новый ОписаниеТипов(МассивТиповЗаказов));
		ОтгруженныеТовары.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	КонецЕсли;
	
	ТоварыКОтгрузке = РезультатЗапроса[СтруктураРезультатаЗапроса.ТоварыКОтгрузке].Выбрать();
	
	Пока ТоварыКОтгрузке.Следующий() Цикл
		СтрокаТбл = ОтгруженныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТбл, ТоварыКОтгрузке);
		
		СтрокаТбл.Количество = ТоварыКОтгрузке.КоличествоОтгрузить;
		Если СтруктураДокументаДляЗаполнения.ЗаказЯвляетсяРаспоряжением Тогда
			СтрокаТбл[СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ] = ТоварыКОтгрузке.ДокументОтгрузки;
		КонецЕсли;
	КонецЦикла;
	
	ПоляПоиска = "Номенклатура, Характеристика, Серия" + 
		?(СтруктураДокументаДляЗаполнения.СкладВТабличнойЧасти, ", Склад", "") + 
		?(СтруктураДокументаДляЗаполнения.ЗаказЯвляетсяРаспоряжением, ", КодСтроки," + СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ, "");
	СтруктураПоискаПоТоварыКОформлению = Новый Структура(ПоляПоиска);
	
	ТоварыКОформлению = РезультатЗапроса[СтруктураРезультатаЗапроса.ТоварыКОформлению].Выгрузить();
	Для каждого СтрокаТбл Из ТоварыКОформлению Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоТоварыКОформлению, СтрокаТбл);
		СтруктураПоискаПоТоварыКОформлению.КодСтроки = 0;
		
		МассивСтрок = ОтгруженныеТовары.НайтиСтроки(СтруктураПоискаПоТоварыКОформлению);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаОтгружено = МассивСтрок.Получить(0);
			
			Разница = 0;
			Если СтрокаОтгружено.Количество >= СтрокаТбл.Количество Тогда
				Разница = СтрокаОтгружено.Количество - СтрокаТбл.Количество;
			КонецЕсли;
			
			Если Разница > 0 Тогда
				НовСтрока = ОтгруженныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаОтгружено);
				НовСтрока.Количество = Разница;
				
				СтрокаОтгружено.Количество = СтрокаТбл.Количество;
			КонецЕсли;
			
			СтрокаОтгружено.КодСтроки = СтрокаТбл.КодСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Запомнить данные по товарам до изменения.
	ТчТовары = СтруктураДокументаДляЗаполнения.Товары;
	
	СтруктураЗаполнения = Новый Структура("Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаВзаиморасчетов", 0, 0, 0, 0, 0, 0);
	
	СоответствиеКоличествоВСтрокахДоИзменения = Новый Соответствие;
	СоответствиеКоэффициентовУпаковок         = Новый Соответствие;
	
	Товары = РезультатЗапроса[СтруктураРезультатаЗапроса.Товары].Выбрать();
	Пока Товары.Следующий() Цикл
		
		СтрокаТчТовары = ТчТовары[Товары.НомерСтроки - 1];
		
		СоответствиеКоэффициентовУпаковок.Вставить(СтрокаТчТовары.Упаковка, Товары.КоэффициентУпаковки);
		СоответствиеКоличествоВСтрокахДоИзменения.Вставить(СтрокаТчТовары, СтрокаТчТовары.Количество);
		
		ЗаполнитьЗначенияСвойств(СтрокаТчТовары, СтруктураЗаполнения);
		
	КонецЦикла;
	
	СоответствиеКоэффициентовУпаковок.Вставить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), 1);
	
	// Перенести данные по фактически отгруженным товарам в ТЧ "Товары".
	
	СтруктураПоискаПоТЧТовары = Новый Структура(ПоляПоиска);
	
	ДобавленныеСтроки = Новый Соответствие;
	ИзмененныеСтроки  = Новый Соответствие;
	ТоварыЗаказов     = РезультатЗапроса[СтруктураРезультатаЗапроса.ТоварыЗаказов].Выгрузить();
	РаспоряжениеЗаказ = СтруктураДокументаДляЗаполнения.ЗаказЯвляетсяРаспоряжением;
	
	Если РаспоряжениеЗаказ И СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ = "ЗаказКлиента" Тогда
		ДополнительныеТаблицыЗаказов = ДополнительныеТаблицыЗаказов(СтруктураДокументаДляЗаполнения.МассивРаспоряженийНаОтгрузку, ОбъектДокумента.Валюта);
	КонецЕсли;
	
	// Если отгрузили больше, чем указано в строчке по товару в накладной - это количество пойдет новой строкой,
	//	если допустимо дополнять строки.
	// Если накладная по Заказу и допустимо дополнять строки, то все добавленные строки будут сверх заказа.
	Для Каждого СтрокаТбл Из ОтгруженныеТовары Цикл
		
		ПоследняяОбработаннаяСтрока = Неопределено;
		
		КоличествоОтгрузить = СтрокаТбл.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоТЧТовары, СтрокаТбл);
		МассивСтрокТчТовары = ТчТовары.НайтиСтроки(СтруктураПоискаПоТЧТовары);
		
		Для Каждого СтрокаТчТовары Из МассивСтрокТчТовары Цикл
			
			ПоследняяОбработаннаяСтрока = ?(ДобавленныеСтроки.Получить(СтрокаТчТовары) <> Неопределено, ПоследняяОбработаннаяСтрока, СтрокаТчТовары);
			
			КоличествоДоИзменения = ?(СоответствиеКоличествоВСтрокахДоИзменения[СтрокаТчТовары] = Неопределено, 0, СоответствиеКоличествоВСтрокахДоИзменения[СтрокаТчТовары]);
			Количество = КоличествоДоИзменения - СтрокаТчТовары.Количество;
			
			Если Количество < 0 Тогда
				Прервать
			КонецЕсли;
			
			КоличествоОтгрузить = КоличествоОтгрузить - Количество;
			
			Если КоличествоОтгрузить < 0 Тогда
				Количество = Количество + КоличествоОтгрузить;
				КоличествоОтгрузить = 0;
			КонецЕсли;
			
			СтрокаТчТовары.Количество = СтрокаТчТовары.Количество + Количество;
			
			ИзмененныеСтроки.Вставить(СтрокаТчТовары);
			
		КонецЦикла;
		
		Если КоличествоОтгрузить > 0 Тогда
			
			Если ПоследняяОбработаннаяСтрока <> Неопределено Тогда
				
				ПоследняяОбработаннаяСтрока.Количество = ПоследняяОбработаннаяСтрока.Количество + КоличествоОтгрузить;
				КоличествоОтгрузить = 0;
				ИзмененныеСтроки.Вставить(ПоследняяОбработаннаяСтрока);
				
				ЕстьИзменения = Истина;
				
			ИначеЕсли СтруктураДокументаДляЗаполнения.ДополнятьСтроки Тогда
				
				Если РаспоряжениеЗаказ И СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ = "ЗаказКлиента" Тогда
					НоваяСтрока = ЗаполнитьСтрокуПоЗаказуКлиента(СтруктураПоискаПоТЧТовары, 
						КоличествоОтгрузить,
						ОбъектДокумента, 
						ТоварыЗаказов,
						ДополнительныеТаблицыЗаказов);
				Иначе
					НоваяСтрока = ТчТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоискаПоТЧТовары);
					НоваяСтрока.Количество = КоличествоОтгрузить;
					НоваяСтрока.КоличествоУпаковок = КоличествоОтгрузить;
				КонецЕсли;
				
				ДобавленныеСтроки.Вставить(НоваяСтрока);
				
				КоличествоОтгрузить = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполнить доп. обработку измененных или добавленных строк.
	
	// ... удалить строки ТЧ "Товары" у которых количество равно 0.
	МассивСтрокТчТовары = ТчТовары.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТбл Из МассивСтрокТчТовары Цикл
		ТчТовары.Удалить(СтрокаТбл);
	КонецЦикла;
	
	// ... пересчитать количество упаковок в строках ТЧ "Товары".
	Для Каждого Строка Из ИзмененныеСтроки Цикл
		СтрокаТчТовары = Строка.Ключ;
		СтрокаТчТовары.КоличествоУпаковок = СтрокаТЧТовары.Количество / СоответствиеКоэффициентовУпаковок[СтрокаТчТовары.Упаковка];
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТчТовары, СтруктураДокументаДляЗаполнения.СтруктураДействийСИзмененнымиСтроками, Неопределено);
	КонецЦикла;
	
	// ... проверить характеристику номенклатуры по владельцу в строках ТЧ "Товары".
	Для Каждого Строка Из ДобавленныеСтроки Цикл
		СтрокаТчТовары = Строка.Ключ;
		СтруктураДокументаДляЗаполнения.СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТчТовары.Характеристика);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДокументаДляЗаполнения.СтруктураДействийСДобавленнымиСтроками, Неопределено);
	КонецЦикла;
	
	// ... заполнить статусы указания серий в документе.
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДокумента, СтруктураДокументаДляЗаполнения.ПараметрыУказанияСерий);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьИзменения = (ИзмененныеСтроки.Количество() > 0) Или (ДобавленныеСтроки.Количество() > 0) ИЛИ (ТчТовары.Количество() = 0);
	
	Возврат ЕстьИзменения;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПроверкиКорректностиЗаполненияДокументов

// Проверяет корректность заполнения документа продажи в соответствии с массивом проверок
// путем выполнения пакета запросов. Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументПродажи  - ДокументОбъект, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьЗаполненияДокументаПродажи(Знач ДокументПродажи, Отказ) Экспорт

	// Если документ уже заполнен некорректно - не будем выполнять запросы
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим доступность ролей
	ОтклонениеОтУсловийПродаж = ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж();
	РеализацияСверхЗаказа     = ПраваПользователяПовтИсп.РеализацияСверхЗаказа();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенПродажи = Константы.ВидМаксимальноДопустимыхЦенПродажи.Получить();
	ВидМинимальноДопустимыхЦенПродажи  = Константы.ВидМинимальноДопустимыхЦенПродажи.Получить();
	ПроверятьДиапазонЦен               = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенПродажи) Или ЗначениеЗаполнено(ВидМинимальноДопустимыхЦенПродажи);
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	МассивПроверок    = Новый Массив();
	ТипДокумента      = ТипЗнч(ДокументПродажи);
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	//Проверим возможность и состояние согласования через Документооборот
	СогласованиеЧерез1СДокументооборот = Константы.ИспользоватьИнтеграциюС1СДокументооборот.Получить() И Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить();
	Если СогласованиеЧерез1СДокументооборот И
		(ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента") ИЛИ
		 ТипДокумента = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") ИЛИ
		 ТипДокумента = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") ИЛИ
		 ТипДокумента = Тип("СправочникОбъект.СоглашенияСКлиентами")) Тогда
		СогласованВ1СДокументооборот = ИнтеграцияС1СДокументооборотПереопределяемый.ПолучитьСостояниеСогласованияВ1СДокументооборот(ДокументПродажи.Ссылка);
	Иначе
		СогласованВ1СДокументооборот = Ложь;
	КонецЕсли;
	
	ВсеСтрокиОтменены = Ложь;
	
	Если ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ДокументПродажи, "Товары", "Отменено");
		
		НужноСогласовать                            = Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		НужноСогласоватьРучныеСкидкиПоПользователям = Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		ИспользоватьСкидки                          = Истина;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ДокументПродажи, "ЗаменяющиеТовары", "Отменено");
		
		НужноСогласовать                            = Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		НужноСогласоватьРучныеСкидкиПоПользователям = Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		ИспользоватьСкидки                          = Истина;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.АктОРасхожденияхПослеОтгрузки") Тогда
		
		НужноСогласовать                            = Ложь;
		НужноСогласоватьРучныеСкидкиПоПользователям = Ложь;
		ИспользоватьСкидки                          = Ложь;
		
	ИначеЕсли ТипДокумента <> Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю")
	        И ТипДокумента <> Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
	        И ТипДокумента <> Тип("ДокументОбъект.ЧекККМ")
	        И ТипДокумента <> Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		НужноСогласовать                            = Не (ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		НужноСогласоватьРучныеСкидкиПоПользователям = Не (ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		ИспользоватьСкидки                          = Истина;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ЧекККМ") Тогда
		
		НужноСогласовать                            = Ложь;
		НужноСогласоватьРучныеСкидкиПоПользователям = Не ОтклонениеОтУсловийПродаж;
		ИспользоватьСкидки                          = Истина;
		
	Иначе
		
		НужноСогласовать                            = Не ОтклонениеОтУсловийПродаж;
		НужноСогласоватьРучныеСкидкиПоПользователям = Не ОтклонениеОтУсловийПродаж;
		ИспользоватьСкидки                          = Истина;
		
	КонецЕсли;
	
	ПроверятьСкидкиРассчитаны = Ложь;
	ВозвратМногооборотнойТары = Ложь;
	ТребуетсяЗалогЗаТару = Ложь;
	СуммаВзаиморасчетовРеализации = 0;
	СуммаЗалогаПоРеализации = 0;
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьАвтоматическиеСкидки             = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ПроверятьСкидкиНаценки                       = ИспользоватьАвтоматическиеСкидки Или ИспользоватьРучныеСкидки;
	ИспользоватьЦеновыеГруппы                    = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьОграниченияПоПользователям       = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                               И НужноСогласоватьРучныеСкидкиПоПользователям
	                                               И ИспользоватьСкидки;
	ИспользоватьОграниченияПоСоглашениям         = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям")
	                                               И НужноСогласовать
	                                               И ИспользоватьСкидки;
	ОграничиватьРучныеСкидки                     = ИспользоватьРучныеСкидки И (ИспользоватьОграниченияПоПользователям ИЛИ ИспользоватьОграниченияПоСоглашениям);
	
	// Проверим, нужно ли запрещать закрытие заказов без полной отгрузки/оплаты
	КонтролироватьРасчеты				= ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	// ПОМОЩНИК ПРОДАЖ
	Если ТипДокумента = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		
		// ПОМОЩНИК ПРОДАЖ - ЗАКАЗ КЛИЕНТА
		
		Если ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Или
			ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
			
			МассивПроверок.Добавить("КорректностьЗаполненияСклада");
			МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
			
			Если НужноСогласовать 
				И (ДокументПродажи.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован 
				ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента) Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				
				Если ИспользоватьСоглашенияСКлиентами Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
					МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				КонецЕсли;
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
			
				// Проверка корректности этапов оплаты осуществляется только для
				// заказов, в которых не все строки отменены и  в которых указан график оплаты.
				
				Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
					ДокументПродажи.СуммаДокумента <> 0 Тогда
					
					МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
					
				КонецЕсли;
				
				Если ИспользоватьАвтоматическиеСкидки И
					Не ДокументПродажи.СкидкиРассчитаны И
					ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
					ПроверятьСкидкиРассчитаны = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		// ПОМОЩНИК ПРОДАЖ - КОММЕРЧЕСКОЕ ПРЕДЛОЖЕНИЕ
			
		ИначеЕсли ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
			
			Если НужноСогласовать И ДокументПродажи.СтатусКоммерческогоПредложения <> Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				
				Если ИспользоватьСоглашенияСКлиентами Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
					МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				КонецЕсли;
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
				
				Если ИспользоватьАвтоматическиеСкидки И
					ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
					Не ДокументПродажи.СкидкиРассчитаны Тогда
					ПроверятьСкидкиРассчитаны = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		// ПОМОЩНИК ПРОДАЖ - РЕАЛИЗАЦИЯ ТОВАРОВ УСЛУГ
			
		ИначеЕсли ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Тогда
			
			Если ПроверятьСкидкиРассчитаны И
				ИспользоватьАвтоматическиеСкидки И
				Не ДокументПродажи.СкидкиРассчитаны И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
			Если НужноСогласовать Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				
				Если ИспользоватьСоглашенияСКлиентами Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
					МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				КонецЕсли;
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
				
				Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
					ИЛИ Не ЗначениеЗаполнено(ДокументПродажи.ХозяйственнаяОперация) Тогда
					
					МассивПроверок.Добавить("КорректностьДатыПлатежа");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// СОГЛАШЕНИЕ С КЛИЕНТОМ
	
	ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВозвращатьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если Не ДокументПродажи.Типовое И НужноСогласовать И
			ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияТипового");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального");
			МассивПроверок.Добавить("КорректностьЭтаповОплатыСоглашения");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповОплатыСоглашения");
			
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ДублиТоваров");
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
		Если НужноСогласовать И ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
		
			Если ЗначениеЗаполнено(ДокументПродажи.СегментНоменклатуры) Тогда
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Или Не ДокументПродажи.Типовое Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			Если Не ДокументПродажи.Типовое Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			КонецЕсли;
			
		КонецЕсли;
		
		ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаЦеновыеГруппы");
			МассивПроверок.Добавить("ДублиЦеновыхГрупп");
			
			Если Не ДокументПродажи.Типовое И НужноСогласовать И
			ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
				МассивПроверок.Добавить("СоответствиеЦеновыхГруппУсловиямПродаж");
			КонецЕсли;
		
		КонецЕсли;
		
	// ЗАКАЗ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВЗаказеКлиента");
		Если НЕ ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		КонецЕсли;
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦенСУчетомОтменнных");
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		
		Если НужноСогласовать 
			И (ДокументПродажи.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован 
			ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента) Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			// Проверка корректности этапов оплаты осуществляется только для
			// заказов, в которых не все строки отменены и  в которых указан график оплаты.
			
			Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
				ДокументПродажи.СуммаДокумента <> 0 Тогда
				
				Если ДокументПродажи.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИспользоватьАвтоматическиеСкидки И
				Не ДокументПродажи.СкидкиРассчитаны И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И (ДокументПродажи.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован 
			ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента) Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	
	
	// КОММЕРЧЕСКОЕ ПРЕДЛОЖЕНИЕ КЛИЕНТУ
	
	ИначеЕсли ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
	
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если НужноСогласовать И ДокументПродажи.Статус <> Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
			Если ИспользоватьАвтоматическиеСкидки И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
				Не ДокументПродажи.СкидкиРассчитаны Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию 
			И ДокументПродажи.Статус <> Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			Если МассивПроверок.Найти("ВременнаяТаблицаТовары") = Неопределено Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
				МассивПроверок.Добавить("ВременнаяТаблицаТовары");
				
			КонецЕсли;
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ
	
	ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		СуммаВзаиморасчетовРеализации = ДокументПродажи.ДополнительныеСвойства.СуммаВВалютеВзаиморасчетов;
		СуммаЗалогаПоРеализации = ДокументПродажи.ДополнительныеСвойства.СуммаЗалогаВВалютеВзаиморасчетов;
		
		Если ПроверятьСкидкиРассчитаны И
			ИспользоватьАвтоматическиеСкидки И
			Не ДокументПродажи.СкидкиРассчитаны И
			ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			ПроверятьСкидкиРассчитаны = Истина;
		КонецЕсли;
		
		Если (Не ДокументПродажи.РеализацияПоЗаказам ИЛИ РеализацияСверхЗаказа) И НужноСогласовать Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				Если НЕ ДокументПродажи.РеализацияПоЗаказам Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				КонецЕсли;
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Не ДокументПродажи.РеализацияПоЗаказам Или ДокументПродажи.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
			И НужноСогласовать И ИспользоватьСоглашенияСКлиентами Тогда
			
			Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
				ИЛИ Не ЗначениеЗаполнено(ДокументПродажи.ХозяйственнаяОперация) Тогда
				
				МассивПроверок.Добавить("КорректностьДатыПлатежа");
			КонецЕсли;
			
			Если ДокументПродажи.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСуммыВзаиморасчетов");
				МассивПроверок.Добавить("СоответствиеСуммыПредоплатыГрафикуОплат");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// ЗАЯВКА НА ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		НужнаЗаменаТоваров = ДокументПродажи.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВЗаказеКлиента");
		
		Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
			И НужнаЗаменаТоваров Тогда
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		КонецЕсли;
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если НужноСогласовать 
			И (ДокументПродажи.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована 
				ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента)Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				Если НужнаЗаменаТоваров Тогда
					МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				КонецЕсли;
			КонецЕсли;
			Если НужнаЗаменаТоваров И ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			// Проверка корректности этапов оплаты осуществляется только для
			// заявок, в которых не все строки отменены и  в которых указан график оплаты.
			
			Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
				И ДокументПродажи.ЗаменяющиеТовары.Количество() > 0
				И ДокументПродажи.СуммаДокумента <> 0
				И ДокументПродажи.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
				И НужнаЗаменаТоваров Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
				
			КонецЕсли;
			
			Если ИспользоватьАвтоматическиеСкидки И
				Не ДокументПродажи.СкидкиРассчитаны И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера И
				ДокументПродажи.ЗаменяющиеТовары.Количество() > 0 Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И (ДокументПродажи.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована 
				ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента)
			И НужнаЗаменаТоваров Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
			И НужнаЗаменаТоваров Тогда
			Если МассивПроверок.Найти("ВременнаяТаблицаТовары") = Неопределено Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
				МассивПроверок.Добавить("ВременнаяТаблицаТовары");
				
			КонецЕсли;
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// ЗАДАНИЕ ТОРГОВОМУ ПРЕДСТАВИТЕЛЮ
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		
		Если Не ОтклонениеОтУсловийПродаж Тогда	
			МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		КонецЕсли;
		
		Если Не ОтклонениеОтУсловийПродаж И ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
		КонецЕсли;
		
			
	// АКТ ВЫПОЛНЕННЫХ РАБОТ
	
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ПроверятьСкидкиРассчитаны И
			ИспользоватьАвтоматическиеСкидки И
			Не ДокументПродажи.СкидкиРассчитаны Тогда
			ПроверятьСкидкиРассчитаны = Истина;
		КонецЕсли;
		
		Если Не ДокументПродажи.АктПоЗаказам И НужноСогласовать Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Не ДокументПродажи.АктПоЗаказам Или ДокументПродажи.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
			И НужноСогласовать И ИспользоватьСоглашенияСКлиентами Тогда
			
			МассивПроверок.Добавить("КорректностьДатыПлатежа");
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
	// ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента" Тогда
		
		Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
			
			МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		КонецЕсли;
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВозвратПереданнойМногооборотнойТары;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ПредусмотренЗалогЗаТару;
		
		// АКТ О РАСХОЖДЕНИЯХ ПОСЛЕ ОТГРУЗКИ
	
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ДокументПродажи.Статус <> Перечисления.СтатусыАктаОРасхождениях.НеСогласовано Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		КонецЕсли;
		
        Если Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	МАКСИМУМ(РеализацияТоваровУслуг.ВернутьМногооборотнуюТару) КАК ВернутьМногооборотнуюТару,
			|	МАКСИМУМ(РеализацияТоваровУслуг.ТребуетсяЗалогЗаТару) КАК ТребуетсяЗалогЗаТару
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка В(&МассивРеализаций)";
			
			Запрос.УстановитьПараметр("МассивРеализаций", ДокументПродажи.Товары.ВыгрузитьКолонку("Реализация"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ВозвратМногооборотнойТары = Выборка.ВернутьМногооборотнуюТару;
				ТребуетсяЗалогЗаТару      = Выборка.ТребуетсяЗалогЗаТару;
			КонецЕсли;
			
			МассивПроверок.Добавить("КонтрольЗаполненияЦенАкт");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// ЧЕК ККМ
		
	ИначеЕсли ИмяТаблицы = "Документ.ЧекККМ" Тогда
		
		Если ОграничиватьРучныеСкидки Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
	// КОРРЕКТИРОВКА РЕАЛИЗАЦИИ
	
	ИначеЕсли ИмяТаблицы = "Документ.КорректировкаРеализации" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		Если ТипЗнч(ДокументПродажи.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВозвратМногооборотнойТары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.ДокументОснование, "ВернутьМногооборотнуюТару");
			ТребуетсяЗалогЗаТару = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.ДокументОснование, "ТребуетсяЗалогЗаТару");
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УчитыватьСкидкиНаценки = Не ((ИмяТаблицы = "Справочник.СоглашенияСКлиентами") 
		Или (ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю")
		Или (ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента"));
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок

	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата",          ДокументПродажи.Дата);
	ПараметрыЗапроса.Вставить("ЭтоСоглашение", ТипДокумента = Тип("СправочникОбъект.СоглашенияСКлиентами"));
	ПараметрыЗапроса.Вставить("Ссылка",        ДокументПродажи.Ссылка);
	ПараметрыЗапроса.Вставить("Пользователь",  Пользователи.АвторизованныйПользователь());
	ПараметрыЗапроса.Вставить("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	ПараметрыЗапроса.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("СуммаВзаиморасчетовРеализации", СуммаВзаиморасчетовРеализации);
	ПараметрыЗапроса.Вставить("СуммаЗалогаПоРеализации", СуммаЗалогаПоРеализации);
	ПараметрыЗапроса.Вставить("НеЗаданаСуммаЗалога", Ложь);
	ПараметрыЗапроса.Вставить("НеПроверятьКодСтроки", ТипДокумента <> Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
	
	Если ИспользоватьОграниченияПоСоглашениям Тогда
		ПараметрыЗапроса.Вставить("СоглашениеСКлиентом", ДокументПродажи.Соглашение);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаДокументПродажи" Тогда
		
			СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
		
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ИмяТаблицы, УчитыватьСкидкиНаценки);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦеновыеГруппы" Тогда
		
			СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
		
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ДублиТоваров" Тогда
			
			СформироватьЗапросНаличиеДублейТоваровДокументаПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямПродаж" Тогда
			
			СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ДублиЦеновыхГрупп" Тогда
			
			СформироватьЗапросНаличиеДублейЦеновыхГруппДокументаПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда
			
			СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда
			
			СформироватьЗапросПринадлежностьТоваровСегментуНоменклатуры(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СформироватьЗапросПринадлежностьПартнераСегментуПартнеров(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьДатыПлатежа" Тогда
			
			СформироватьЗапросКорректностьДатыПлатежа(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеУслуг" Тогда
			
			СформироватьЗапросНаличиеУслугВДокументеПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияСкладаВЗаказеКлиента" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСкладаВЗаказеКлиента(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса, ИмяТаблицы);
			
			
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения(ТекстЗапроса, ИспользоватьЦеновыеГруппы, ИспользоватьОграниченияПоПользователям, ИспользоватьОграниченияПоСоглашениям);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграниченияРучныхСкидок" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграниченияРучныхСкидок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияТипового" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСуммыВзаиморасчетов" Тогда
			
			СформироватьЗапросВременнаяТаблицаСуммыВзаиморасчетов(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда
			
			СформироватьЗапросСоответствиеСуммыПредоплатыГрафикуОплат(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦен" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦенАкт" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦенАкт(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦенСУчетомОтменнных" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦенСУчетомОтмененных(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	
	Если ПроверятьСкидкиРассчитаны Тогда
		СообщитьОбОшибкахСкидкиНеРассчитаны(ДокументПродажи, Отказ);
	КонецЕсли;
	
	НевозможноПровестиБезСогласования = Ложь;
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахШапкаДокументаПродажи(Выборка,ДокументПродажи,НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДублиТоваров" Тогда
			
			СообщитьОбОшибкахНаличиеДублейТоваровДокументаПродажи(Выборка, ДокументПродажи, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахТоварыДокументаПродажи(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ДублиЦеновыхГрупп" Тогда

			СообщитьОбОшибкахНаличиеДублейЦеновыхГруппДокументаПродажи(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			СообщитьОбОшибкахСоответствиеГруппЦенНоменклатурыУсловиямПродаж(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда

			СообщитьОбОшибкахПринадлежностьТоваровСегментуНоменклатуры(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СообщитьОбОшибкахПринадлежностьПартнераСегментуПартнеров(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда

			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьДатыПлатежа" Тогда

			СообщитьОбОшибкахКорректностьДатыПлатежа(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда

			СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);

		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУслуг" Тогда

			СообщитьОбОшибкахНаличиеУслугВДокументеПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда

			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСклада"
			ИЛИ МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВЗаказеКлиента" Тогда

			СообщитьОбОшибкахКорректностьЗаполненияСклада(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда

			СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Выборка, ДокументПродажи, Отказ);



		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповОплатыСоглашения" Тогда

			СообщитьОбОшибкахКорректностьЭтаповОплатыСоглашения(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда

			СообщитьОбОшибкахКорректностьКоличестваЭтаповОплатыСоглашения(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда

			СообщитьОбОшибкахСоответствиеСуммыПредоплатыГрафикуОплат(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦен" 
			ИЛИ МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦенСУчетомОтменнных"
			ИЛИ МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦенАкт" Тогда

			СообщитьОбОшибкахКонтрольЗаполненияЦен(Выборка, ДокументПродажи, ИмяТЧ, Отказ);

		КонецЕсли;
		
	КонецЦикла;
	
	Если НевозможноПровестиБезСогласования Тогда
		ТекстОшибки = НСтр("ru='Недостаточно прав на отклонение от условий продаж.';uk='Недостатньо прав на відхилення від умов продажу.'");
		
		Если ИмяТаблицы = "Документ.ЗаказКлиента"
			ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru='Документ необходимо провести в статусе ""На согласовании"".';uk='Документ необхідно провести в статус ""На погодженні"".'");
		КонецЕсли;
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			,
			,
			Отказ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Проверяет корректность заполнения этапов графика оплаты в документе продажи
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументПродажи                  - ДокументОбъект, для которого необходимо осуществить проверки
// СуммаОплатыПоДокументу           - Число - Сумма платежей по документу, в котором необходимо осуществить проверку
// СуммаЗалогаПоДокументу           - Число - Сумма залога за тару по документу, в котором необходимо осуществить проверку
// УчитыватьВариантОплаты           - Булево - признак необходимости проверки корректности вариантов оплаты
// Отказ                            - Булево - Флаг отказа от записи документа
// ПривязыватьСообщенияКГиперссылке - Булево - флаг, указывающий на необходимость привязки сообщений к гиперссылке
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплаты(Знач ДокументПродажи,
	                                               СуммаОплатыПоДокументу,
	                                               СуммаЗалогаПоДокументу = 0,
	                                               УчитыватьВариантОплаты,
	                                               Отказ,
	                                               ПривязыватьСообщенияКГиперссылке = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокументПродажи.Дата) Тогда
		ДатаДокумента = НачалоДня(ДокументПродажи.Дата);
	КонецЕсли;
	
	СуммаОплатыВсего = Окр(СуммаОплатыПоДокументу, 2);
	СуммаЗалогаВсего = Окр(СуммаЗалогаПоДокументу, 2);
	
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	
	Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаОплатыВсего > 0 Тогда
			
			Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
				ТекстОшибки = НСтр("ru='Не заполнены условия оплаты';uk='Не заповнені умови оплати'");
			Иначе
				ТекстОшибки = НСтр("ru='Необходимо заполнить этапы графика оплаты';uk='Необхідно заповнити етапи графіка оплати'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты"),
				,
				Отказ);
				
		КонецЕсли;
		
	Иначе
		
		ИтогПроцентПлатежа = 0;
		ИтогПроцентЗалогаЗаТару = 0;
		ИтогСуммаПлатежа = 0;
		ИтогСуммаЗалогаЗаТару = 0;
		Для ТекИндекс = 0 По ДокументПродажи.ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			ДанныеЭтапа = Новый Структура("НомерСтроки, ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, ПроцентЗалогаЗаТару, СуммаПлатежа, СуммаЗалогаЗаТару",
				0, Неопределено, '00010101', 0, 0, 0, 0);
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс]);
			ИтогПроцентПлатежа = ИтогПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			ИтогПроцентЗалогаЗаТару = ИтогПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
			ИтогСуммаПлатежа = ИтогСуммаПлатежа + ДанныеЭтапа.СуммаПлатежа;
			ИтогСуммаЗалогаЗаТару = ИтогСуммаЗалогаЗаТару + ДанныеЭтапа.СуммаЗалогаЗаТару;
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы графика оплаты""';uk=' у рядку %НомерСтроки% списку ""Етапи графіку оплати""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДанныеЭтапа.НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОплаты) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вариант оплаты""';uk='Не заповнена колонка ""Варіант оплати""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОплаты")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) Тогда
				
				Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
					ТекстОшибки = НСтр("ru='Не заполнена ""Дата платежа""';uk='Не заповнена ""Дата платежу""'");
				Иначе
					ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата платежа""';uk='Не заповнена колонка ""Дата платежу""'");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа""';uk='Не заповнена колонка ""Відсоток платежу""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ПроцентПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаПлатежа) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа) И 
				СуммаОплатыВсего - СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма платежа""';uk='Не заповнена колонка ""Сума платежу""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаПлатежа")),
					,
					Отказ);
				
				КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаЗалогаЗаТару) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) И 
				СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма залога за тару""';uk='Не заповнена колонка ""Сума застави за тару""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаЗалогаЗаТару")),
					,
					Отказ);
				
			КонецЕсли;
			
			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
				ЗначениеЗаполнено(ДокументПродажи.Дата) И
				ДанныеЭтапа.ДатаПлатежа < ДатаДокумента Тогда
				
				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%';uk='Дата платежу повинна бути не менше дати документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(ДокументПродажи.Дата, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если УчитыватьВариантОплаты Тогда
				
				// Дата платежа по авансовому этапу должна быть не больше даты отгрузки в шапке
				Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
					ЗначениеЗаполнено(ДокументПродажи.ЖелаемаяДатаОтгрузки) И
					(ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) И
					ДанныеЭтапа.ДатаПлатежа > ДокументПродажи.ЖелаемаяДатаОтгрузки Тогда
					
					ТекстОшибки = НСтр("ru='Дата платежа по авансовому этапу должна быть не больше желаемой даты отгрузки %ДатаОтгрузки%';uk='Дата платежу по авансовому етапу повинна бути не більше бажаної дати відвантаження %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(ДокументПродажи.ЖелаемаяДатаОтгрузки, "ДЛФ=DD"));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты",ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				// Дата платежа по кредитному этапу должна быть не меньше даты отгрузки в шапке
				ИначеЕсли ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И 
					ЗначениеЗаполнено(ДокументПродажи.ЖелаемаяДатаОтгрузки) И
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки И
					ДанныеЭтапа.ДатаПлатежа < ДокументПродажи.ЖелаемаяДатаОтгрузки Тогда
					
					ТекстОшибки = НСтр("ru='Дата платежа по кредитному этапу должна быть не меньше желаемой даты отгрузки %ДатаОтгрузки%';uk='Дата платежу по кредитному етапу повинна бути не менше бажаної дати відвантаження %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(ДокументПродажи.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогПроцентПлатежа <> 100 И СуммаОплатыВсего - СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';uk='Відсоток платежів за всіма етапами ""%ПроцентПоЭтапам%%"" повинен дорівнювати ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентПлатежа);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
				
			Если ИтогПроцентЗалогаЗаТару <> 100 И СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Процент залога за тару по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';uk='Відсоток застави за тару за всіма етапами ""%ПроцентПоЭтапам%%"" повинен дорівнювати ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентЗалогаЗаТару);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].ПроцентЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций
		
		Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогСуммаПлатежа + СуммаЗалогаВсего <> СуммаОплатыВсего Тогда
				
				ТекстОшибки = НСтр("ru='Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы заказанных строк ""%СуммаВсего% %Валюта%""';uk='Сума платежів за всіма етапами ""%СуммаПоЭтапам% %Валюта%"" не повинна відрізнятися від суми замовлених рядків ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаПлатежа + СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        ДокументПродажи.Валюта);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].СуммаПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если ИтогСуммаЗалогаЗаТару <> СуммаЗалогаВсего И СуммаЗалогаВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru='Сумма залога за тару по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы залога по документу ""%СуммаВсего% %Валюта%""';uk='Сума застави за тару за всіма етапами ""%СуммаПоЭтапам% %Валюта%"" не повинна відрізнятися від суми застави за документом ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаЗалогаЗаТару);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        ДокументПродажи.Валюта);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].СуммаЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоЭтапов = ДокументПродажи.ЭтапыГрафикаОплаты.Количество();
		
		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл
			
			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;
			
			Если УчитыватьВариантОплаты Тогда
				
				ПредыдущееЗначениеВариантаОплаты = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
				
				// В табличной части Этапы не должно быть строк со значением АвансДоОбеспечения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоОтгрузки
				// КредитПослеОтгрузки
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки ИЛИ
					 ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоОтгрузки
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеОтгрузки
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки) Тогда
					
					ТекстОшибки = НСтр("ru='Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
                    |не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%'
                    |;uk='Варіант оплати ""%ТекущееЗначениеВариантаОплаты%"" в рядку %ИндексТекущегоЭтапа%
                    |не може йти після варіанти оплати ""%ПредыдущееЗначениеВариантаОплаты%"" в рядку %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию
			Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И 
				ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
				ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда
				
				Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
					ТекстОшибки = НСтр("ru='Дата платежа по кредиту не должна быть меньше, чем дата платежа по предоплате';uk='Дата платежу по кредиту не повинна бути менше, ніж дата платежу по передплаті'");
				Иначе
					ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
                    |списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'
                    |;uk='Дата платежу в рядку %ИндексТекущегоЭтапа%
                    |списку ""Етапи оплати"" має бути не менше, ніж у рядку %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения документа продажи в соответствии с массивом проверок
// путем выполнения пакета запросов. Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументПродажи  - ДокументСсылка, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьНеобходимостьСогласованияУсловийПродажи(Знач ДокументПродажи,
	                                                       ЕстьОтклоненияОтЦеновыхУсловий,
	                                                       ЕстьОтклоненияОтФинансовыхУсловий,
	                                                       ЕстьОтклоненияОтЛогистическихУсловий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенПродажи = Константы.ВидМаксимальноДопустимыхЦенПродажи.Получить();
	ВидМинимальноДопустимыхЦенПродажи  = Константы.ВидМинимальноДопустимыхЦенПродажи.Получить();
	ПроверятьДиапазонЦен               = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенПродажи) Или ЗначениеЗаполнено(ВидМинимальноДопустимыхЦенПродажи);
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ПроверятьСкидкиНаценки           = ИспользоватьАвтоматическиеСкидки Или ИспользоватьРучныеСкидки;
	ИспользоватьЦеновыеГруппы                    = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьОграниченияПоПользователям = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	ИспользоватьОграниченияПоСоглашениям         = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ОграничиватьРучныеСкидки          = ИспользоватьРучныеСкидки И (ИспользоватьОграниченияПоПользователям ИЛИ ИспользоватьОграниченияПоСоглашениям);
	ИспользоватьСоглашенияСКлиентами  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	МассивПроверок  = Новый Массив();
	ТипДокумента      = ТипЗнч(ДокументПродажи);
	ИмяТаблицы = ДокументПродажи.Метаданные().ПолноеИмя();
	
	ЗапросПоШапке = Новый Запрос("
		|ВЫБРАТЬ
		|	ДокументПродажи.Дата КАК Дата,
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","
		|	ДокументПродажи.Типовое КАК Типовое
		|","
		|	ЛОЖЬ КАК Типовое
		|") + "
		|ИЗ
		|" + ИмяТаблицы + " КАК ДокументПродажи
		|ГДЕ
		|	ДокументПродажи.Ссылка = &ДокументПродажи
		|");
	
	ЗапросПоШапке.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	ВозвратМногооборотнойТары = Ложь;
	ТребуетсяЗалогЗаТару = Ложь;
	
	// СОГЛАШЕНИЕ С КЛИЕНТОМ
	
	Если ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		Если Не ВыборкаПоШапке.Типовое Тогда
		
			МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияТипового");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("КорректностьЭтаповОплатыСоглашения");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповОплатыСоглашения");
			
			ВозвратМногооборотнойТары = ДокументПродажи.ВозвращатьМногооборотнуюТару;
			ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			
			ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
			
			Если ИспользоватьЦеновыеГруппы Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЦеновыеГруппы");
				МассивПроверок.Добавить("СоответствиеЦеновыхГруппУсловиямПродаж");
			
			КонецЕсли;
			
		КонецЕсли;
			
	// ЗАКАЗ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
			
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
		
	// ЗАЯВКА НА ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
			
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
		
	// КОММЕРЧЕСКОЕ ПРЕДЛОЖЕНИЕ КЛИЕНТУ
	
	ИначеЕсли ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УчитыватьСкидкиНаценки = Не ((ИмяТаблицы = "Справочник.СоглашенияСКлиентами") Или (ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю"));
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок

	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата", ВыборкаПоШапке.Дата);
	ПараметрыЗапроса.Вставить("ЭтоСоглашение", ИмяТаблицы = "Справочник.СоглашенияСКлиентами");
	ПараметрыЗапроса.Вставить("Пользователь",  Пользователи.ТекущийПользователь());
	ПараметрыЗапроса.Вставить("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("НеПроверятьКодСтроки", ТипДокумента <> Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
	
	Если ИспользоватьОграниченияПоСоглашениям Тогда
		ПараметрыЗапроса.Вставить("СоглашениеСКлиентом", ДокументПродажи.Соглашение);
	КонецЕсли;

	ПоСсылке = Истина;
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаДокументПродажи" Тогда
		
			СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
		
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ИмяТаблицы, УчитыватьСкидкиНаценки, ПоСсылке);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦеновыеГруппы" Тогда
		
			СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
		
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы);

		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямПродаж" Тогда

			СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы);

		ИначеЕсли ТекЭлемент = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса);

		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда

			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);

		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда

			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса,ПараметрыЗапроса);

		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);

		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения(ТекстЗапроса, ИспользоватьЦеновыеГруппы, ИспользоватьОграниченияПоПользователям, ИспользоватьОграниченияПоСоглашениям);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграниченияРучныхСкидок" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграниченияРучныхСкидок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияТипового" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса);
			
		КонецЕсли;

	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();

	// Сообщим пользователю о результатах проверки для каждого результата запроса

	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл

		Выборка = МассивРезультатов[ТекИндекс].Выбрать();

		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий И ЕстьОтклоненияОтФинансовыхУсловий И ЕстьОтклоненияОтЛогистическихУсловий Тогда
				Продолжить;
			КонецЕсли;

			Если Выборка.Следующий() Тогда

				Если Выборка.ЕстьОшибкиЗаполненияВалюта Или
					Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Или
					Выборка.ЕстьОшибкиЗаполненияВидЦен Или
					Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Или
					Выборка.ЕстьОшибкиЗаполненияПроцентРучнойСкидки Или
					Выборка.ЕстьОшибкиЗаполненияПроцентРучнойНаценки Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					
				КонецЕсли;
					
				Если Выборка.ЕстьОшибкиЗаполненияГрафикОплаты Или
					Выборка.ЕстьОшибкиЗаполненияФормыОплаты Или
					Выборка.ЕстьОшибкиЗаполненияФормыОплатыСоглашения Или
					Выборка.ЕстьОшибкиЗаполненияКалендаря Тогда

					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					
				КонецЕсли;

				Если Выборка.ЕстьОшибкиЗаполненияСклад Или
					Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда
					
					ЕстьОтклоненияОтЛогистическихУсловий = Истина;
					
				КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл

				Если Выборка.ЕстьОшибкиЗаполненияЦена Или
					(Выборка.ЕстьОшибкиЗаполненияВидЦены И Выборка.ЦенаСоглашение = 0) Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Продолжить;
				
				КонецЕсли;

			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл

				Если Выборка.ЕстьОшибкиЗаполненияЦеновыеГруппы
					Или Выборка.ЕстьОшибкиЗаполненияВидЦен
					Или Выборка.ЕстьОшибкиЗаполненияРучнойСкидки
					Или Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Продолжить;
					
				КонецЕсли;

			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда

			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПроцентов = 0;
			СуммаПроцентовШаблона = 0;
			СуммаПроцентовЗалога = 0;
			СуммаПроцентовЗалогаШаблона = 0;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
					Прервать;
				КонецЕсли;
				
				Если Выборка.ЭтапШаблонаОтсутствует Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Календарь) Тогда
					
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Выборка.Календарь,
						?(Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки,
							?(ЗначениеЗаполнено(Выборка.ЖелаемаяДатаОтгрузки), Выборка.ЖелаемаяДатаОтгрузки, Выборка.Дата), Выборка.Дата),
						Выборка.Сдвиг);
						
				Иначе
						
					ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
					
				КонецЕсли;
				
				Если ДатаПлатежаШаблона < Выборка.ДатаПлатежа Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				
				КонецЕсли;
				
				// Проверка отклонений процентов платежей
				СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
				СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
				Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				
				// Проверка отклонений процентов залога за тару
				СуммаПроцентовЗалога = СуммаПроцентовЗалога + Выборка.ПроцентЗалогаЗаТару;
				СуммаПроцентовЗалогаШаблона = СуммаПроцентовЗалогаШаблона + Выборка.ПроцентЗалогаЗаТаруШаблона;
				Если СуммаПроцентовЗалога < СуммаПроцентовЗалогаШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда

			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка.Следующий();

			Если Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
				ЕстьОтклоненияОтФинансовыхУсловий = Истина;
			КонецЕсли;

		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЕстьОшибкиМинимальноДопустимаяЦена Или
					Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Следующий() Тогда
				ЕстьОтклоненияОтЦеновыхУсловий = Истина;
			КонецЕсли;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповОплатыСоглашения" Тогда
			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПроцентов = 0;
			СуммаПроцентовШаблона = 0;
			СуммаПроцентовЗалога = 0;
			СуммаПроцентовЗалогаШаблона = 0;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ЭтапШаблонаОтсутствует Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Или
					Выборка.СдвигШаблона < Выборка.Сдвиг Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;

				СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
				СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
				Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				
				СуммаПроцентовЗалога = СуммаПроцентовЗалога + Выборка.ПроцентЗалогаЗаТару;
				СуммаПроцентовЗалогаШаблона = СуммаПроцентовЗалогаШаблона + Выборка.ПроцентЗалогаЗаТаруШаблона;
				Если СуммаПроцентовЗалога < СуммаПроцентовЗалогаШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения Тогда
						ЕстьОтклоненияОтФинансовыхУсловий = Истина;
						Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения товаров документа возврата в соответствии 
// с реализованными товарами с учетом корректировок.
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументПродажи  - ДокументОбъект, для которого необходимо осуществить проверки
// ИмяТаблицы - Имя таблицы Товары
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьВозвращаемыхТоваров(Знач ДокументПродажи, ИмяТаблицы, Отказ, ТаблицаПроверяемыеТовары = Неопределено) Экспорт
	
	Если ТаблицаПроверяемыеТовары = Неопределено Тогда
		Если ИмяТаблицы = "ВозвращаемыеТовары" Тогда
			ПараметрыОтбора = Новый Структура("Отменено", Ложь); 
			ТаблицаПроверяемыеТовары = ДокументПродажи[ИмяТаблицы].Выгрузить(ПараметрыОтбора);
		Иначе
			ТаблицаПроверяемыеТовары = ДокументПродажи[ИмяТаблицы].Выгрузить();
		КонецЕсли;
		
		ТаблицаПроверяемыеТовары.Свернуть("Номенклатура,Характеристика,Серия,ДокументРеализации,СтатусУказанияСерий", "Количество, КоличествоУпаковок");
		
	КонецЕсли;
	
	ВозвратПоЧеку = ТипЗнч(ДокументПродажи) <> Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки")
		И ЗначениеЗаполнено(ДокументПродажи.ЧекККМ);
	
	Если ТаблицаПроверяемыеТовары.Количество() > 0 Тогда
		
		Если НЕ ВозвратПоЧеку Тогда
		
			Запрос = Новый Запрос;
			
			Если ТипЗнч(ДокументПродажи) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
				
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
				|	ТаблицаТовары.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
				|			ТОГДА ТаблицаТовары.Серия
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|	КОНЕЦ КАК Серия,
				|	ВЫРАЗИТЬ(ТаблицаТовары.ДокументРеализации КАК Документ.РеализацияТоваровУслуг) КАК ДокументРеализации,
				|	ТаблицаТовары.КоличествоУпаковокПоАкту - ТаблицаТовары.КоличествоУпаковокОснование КАК КоличествоУпаковок,
				|	(ТаблицаТовары.КоличествоУпаковокПоАкту - ТаблицаТовары.КоличествоУпаковокОснование) * ТаблицаТовары.КоэффициентУпаковки КАК Количество
				|ПОМЕСТИТЬ ПроверяемыеТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументРеализации В(НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))
				|	И ТаблицаТовары.КоличествоУпаковокПоАкту - ТаблицаТовары.КоличествоУпаковокОснование > 0
				|
				|;
				|";
				
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
				|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА ВозвратТоваровОтКлиентаТовары.СтатусУказанияСерий = 14
				|			ТОГДА ВозвратТоваровОтКлиентаТовары.Серия
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|	КОНЕЦ КАК Серия,
				|	ВозвратТоваровОтКлиентаТовары.Количество КАК Количество,
				|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК ДокументРеализации
				|ПОМЕСТИТЬ ПроверяемыеТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ВозвратТоваровОтКлиентаТовары
				|ГДЕ
				|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> НЕОПРЕДЕЛЕНО
				|	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
				|	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Серия
				|;
				|";
				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(КорректировкаРеализации.Дата) КАК Дата,
			|	ПроверяемыеТовары.ДокументРеализации КАК СсылкаРеализации
			|ПОМЕСТИТЬ ДанныеКорректировки
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|		ПО (КорректировкаРеализации.ДокументОснование = ПроверяемыеТовары.ДокументРеализации)
			|ГДЕ
			|	КорректировкаРеализации.Проведен
			|	И НЕ КорректировкаРеализации.ХозяйственнаяОперация В 
			|		(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара), 
			|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроверяемыеТовары.ДокументРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СсылкаРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(КорректировкаРеализации.Ссылка) КАК Ссылка,
			|	МАКСИМУМ(КорректировкаРеализации.Ссылка.Дата) КАК Дата,
			|	КорректировкаРеализации.Ссылка.ДокументОснование КАК СсылкаРеализации
			|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
			|ИЗ
			|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|ГДЕ
			|	(КорректировкаРеализации.Ссылка.ДокументОснование, КорректировкаРеализации.Ссылка.Дата) В
			|			(ВЫБРАТЬ
			|				ДанныеКорректировки.СсылкаРеализации КАК СсылкаРеализации,
			|				ДанныеКорректировки.Дата КАК Дата
			|			ИЗ
			|				ДанныеКорректировки)
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализации.Ссылка.ДокументОснование
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка,
			|	СсылкаРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
			|			ТОГДА ПроверяемыеТовары.ДокументРеализации
			|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
			|	КОНЕЦ КАК Ссылка
			|ПОМЕСТИТЬ СсылкиНаРеализации
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
			|		ПО ПроверяемыеТовары.ДокументРеализации = ДанныеПоследнейКорректировки.СсылкаРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
			|	КорректировкаРеализацииТовары.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииТовары.СтатусУказанияСерий = 14
			|			ТОГДА КорректировкаРеализацииТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ КАК Серия,
			|	СУММА(КорректировкаРеализацииТовары.Количество) КАК Количество,
			|	СРЕДНЕЕ(КорректировкаРеализацииТовары.Цена) КАК Цена,
			|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование КАК ДокументРеализации
			|ПОМЕСТИТЬ ДанныеРеализации
			|ИЗ
			|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|ГДЕ
			|	КорректировкаРеализацииТовары.Ссылка.Проведен
			|	И (КорректировкаРеализацииТовары.Номенклатура, КорректировкаРеализацииТовары.Характеристика, ВЫБОР
			|			КОГДА КорректировкаРеализацииТовары.СтатусУказанияСерий = 14
			|				ТОГДА КорректировкаРеализацииТовары.Серия
			|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		КОНЕЦ) В
			|			(ВЫБРАТЬ
			|				ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|				ПроверяемыеТовары.Характеристика КАК Характеристика,
			|				ПроверяемыеТовары.Серия КАК Серия
			|			ИЗ
			|				ПроверяемыеТовары КАК ПроверяемыеТовары)
			|	И КорректировкаРеализацииТовары.Ссылка В
			|			(ВЫБРАТЬ
			|				СсылкиНаРеализации.Ссылка КАК Ссылка
			|			ИЗ
			|				СсылкиНаРеализации КАК СсылкиНаРеализации)
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализацииТовары.Номенклатура,
			|	КорректировкаРеализацииТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииТовары.СтатусУказанияСерий = 14
			|			ТОГДА КорректировкаРеализацииТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ,
			|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Номенклатура,
			|	РеализацияТоваровУслугТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.СтатусУказанияСерий = 14
			|			ТОГДА РеализацияТоваровУслугТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ,
			|	СУММА(РеализацияТоваровУслугТовары.Количество),
			|	СРЕДНЕЕ(РеализацияТоваровУслугТовары.Цена),
			|	РеализацияТоваровУслугТовары.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка.Проведен
			|	И (РеализацияТоваровУслугТовары.Номенклатура, РеализацияТоваровУслугТовары.Характеристика, ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.СтатусУказанияСерий = 14
			|				ТОГДА РеализацияТоваровУслугТовары.Серия
			|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		КОНЕЦ) В
			|			(ВЫБРАТЬ
			|				ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|				ПроверяемыеТовары.Характеристика КАК Характеристика,
			|				ПроверяемыеТовары.Серия КАК Серия
			|			ИЗ
			|				ПроверяемыеТовары КАК ПроверяемыеТовары)
			|	И РеализацияТоваровУслугТовары.Ссылка В
			|			(ВЫБРАТЬ
			|				СсылкиНаРеализации.Ссылка КАК Ссылка
			|			ИЗ
			|				СсылкиНаРеализации КАК СсылкиНаРеализации)
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.Номенклатура,
			|	РеализацияТоваровУслугТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.СтатусУказанияСерий = 14
			|			ТОГДА РеализацияТоваровУслугТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ,
			|	РеализацияТоваровУслугТовары.Ссылка
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ОтчетОРозничныхПродажахТовары.Номенклатура,
			|	ОтчетОРозничныхПродажахТовары.Характеристика,
			|	ОтчетОРозничныхПродажахТовары.Серия,
			|	СУММА(ОтчетОРозничныхПродажахТовары.Количество),
			|	СРЕДНЕЕ(ОтчетОРозничныхПродажахТовары.Цена),
			|	ОтчетОРозничныхПродажахТовары.Ссылка
			|ИЗ
			|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
			|
			|ГДЕ
			|	ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
			|	И (Номенклатура,Характеристика,Серия) В
			|	(ВЫБРАТЬ
			|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|		ПроверяемыеТовары.Характеристика КАК Характеристика,
			|		ПроверяемыеТовары.Серия КАК Серия
			|	ИЗ
			|		ПроверяемыеТовары КАК ПроверяемыеТовары
			|	) И (Ссылка) В
			|	(ВЫБРАТЬ 
			|		СсылкиНаРеализации.Ссылка КАК Ссылка
			|	ИЗ
			|		СсылкиНаРеализации КАК СсылкиНаРеализации
			|	)
			|СГРУППИРОВАТЬ ПО
			|	ОтчетОРозничныхПродажахТовары.Номенклатура,
			|	ОтчетОРозничныхПродажахТовары.Характеристика,
			|	ОтчетОРозничныхПродажахТовары.Серия,
			|	ОтчетОРозничныхПродажахТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
			|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации
			|ПОМЕСТИТЬ ДанныеДокументовВозврата
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
			|		ПО ПроверяемыеТовары.ДокументРеализации = ТаблицаПроверяемыеТовары.ДокументРеализации
			|			И ПроверяемыеТовары.Номенклатура = ТаблицаПроверяемыеТовары.Номенклатура
			|			И ПроверяемыеТовары.Характеристика = ТаблицаПроверяемыеТовары.Характеристика
			|			И ПроверяемыеТовары.Серия = ТаблицаПроверяемыеТовары.Серия
			|ГДЕ
			|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
			|	И ТаблицаПроверяемыеТовары.Ссылка <> &ЭтотВозвратСсылка
			|	И ТаблицаПроверяемыеТовары.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента <> &ЭтотВозвратСсылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПроверяемыеТовары.Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ДанныеРеализации.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) КАК Количество,
			|	ПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ПроверяемыеТовары.Серия КАК Серия,
			|	ПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
			|	ПроверяемыеТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПроверяемыеТовары.ДокументРеализации.Номер КАК НомерРеализации
			|ИЗ
			|	ДанныеРеализации КАК ДанныеРеализации
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
			|		ПО ДанныеРеализации.ДокументРеализации = ДанныеДокументовВозврата.ДокументРеализации
			|			И ДанныеРеализации.Номенклатура = ДанныеДокументовВозврата.Номенклатура
			|			И ДанныеРеализации.Характеристика = ДанныеДокументовВозврата.Характеристика
			|			И ДанныеРеализации.Серия = ДанныеДокументовВозврата.Серия
			|		ПОЛНОЕ СОЕДИНЕНИЕ ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ПО ДанныеРеализации.ДокументРеализации = ПроверяемыеТовары.ДокументРеализации
			|			И ДанныеРеализации.Номенклатура = ПроверяемыеТовары.Номенклатура
			|			И ДанныеРеализации.Характеристика = ПроверяемыеТовары.Характеристика
			|			И ДанныеРеализации.Серия = ПроверяемыеТовары.Серия
			|ГДЕ
			|	ЕСТЬNULL(ДанныеРеализации.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) < 0
			|	И (ВЫРАЗИТЬ(ПроверяемыеТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) 
			|	ИЛИ (ВЫРАЗИТЬ(ПроверяемыеТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
			|		И НЕ ПроверяемыеТовары.ДокументРеализации.ВернутьМногооборотнуюТару))";
			
			Запрос.УстановитьПараметр("ТаблицаПроверяемыеТовары", ТаблицаПроверяемыеТовары);
			Запрос.УстановитьПараметр("ЭтотВозвратСсылка", ДокументПродажи.Ссылка);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
			|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
			|	ВозвратТоваровОтКлиентаТовары.Серия КАК Серия,
			|	ВозвратТоваровОтКлиентаТовары.Количество
			|ПОМЕСТИТЬ ЗаполняемыеТовары
			|ИЗ
			|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекККМТовары.Ссылка.КассоваяСмена КАК КассоваяСмена,
			|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
			|	ЧекККМТовары.Номенклатура КАК Номенклатура,
			|	ЧекККМТовары.Характеристика КАК Характеристика,
			|	ЧекККМТовары.Серия КАК Серия,
			|	СУММА(ЧекККМТовары.Количество) КАК Количество,
			|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации
			|ПОМЕСТИТЬ ЧекиККМ
			|ИЗ
			|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
			|ГДЕ
			|	ЧекККМТовары.Ссылка.Проведен
			|	И ЧекККМТовары.Ссылка = &ЧекККМ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЧекККМТовары.Ссылка,
			|	ЧекККМТовары.Номенклатура,
			|	ЧекККМТовары.Характеристика,
			|	ЧекККМТовары.Серия
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументРеализации,
			|	КассоваяСмена,
			|	Номенклатура,
			|	Характеристика,
			|	Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
			|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
			|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
			|	ЧекККМВозвратТовары.Серия КАК Серия,
			|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
			|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации
			|ПОМЕСТИТЬ ЧекиККМВозврат
			|ИЗ
			|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
			|ГДЕ
			|	ЧекККМВозвратТовары.Ссылка.Проведен
			|	И ЧекККМВозвратТовары.Ссылка.КассоваяСмена В (ВЫБРАТЬ КассоваяСмена Из ЧекиККМ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЧекККМВозвратТовары.Ссылка,
			|	ЧекККМВозвратТовары.Номенклатура,
			|	ЧекККМВозвратТовары.Характеристика,
			|	ЧекККМВозвратТовары.Серия,
			|	ЧекККМВозвратТовары.Ссылка.Дата
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументРеализации,
			|	Номенклатура,
			|	Характеристика,
			|	Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
			|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
			|	ТаблицаПроверяемыеТовары.Ссылка
			|ПОМЕСТИТЬ ДанныеВозврата
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
			|ГДЕ
			|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
			|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
			|	И ТаблицаПроверяемыеТовары.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента <> &ДокументВозврата
			|	И ТаблицаПроверяемыеТовары.Ссылка.ЧекККМ = &ЧекККМ
			|	
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПроверяемыеТовары.Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации,
			|	ТаблицаПроверяемыеТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекиККМ.ДокументРеализации КАК ДокументРеализации,
			|	ЧекиККМ.Номенклатура КАК Номенклатура,
			|	ЧекиККМ.Характеристика КАК Характеристика,
			|	ЧекиККМ.Серия КАК Серия,
			|	ЕСТЬNULL(ЧекиККМ.Количество, 0) - ЕСТЬNULL(ЗаполняемыеТовары.Количество, 0) - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
			|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
			|	ЧекиККМ.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЧекиККМ.ДокументРеализации.Номер КАК НомерРеализации
			|ИЗ
			|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМ КАК ЧекиККМ
			|			ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
			|			ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
			|				И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
			|				И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
			|				И ЧекиККМ.Серия = ЧекиККМВозврат.Серия
			|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
			|			ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.Ссылка.ЧекККМ
			|				И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
			|				И ЧекиККМ.Характеристика = ДанныеВозврата.Характеристика
			|				И ЧекиККМ.Серия = ДанныеВозврата.Серия
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
			|			ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
			|		ПО ЗаполняемыеТовары.Номенклатура = ЧекиККМ.Номенклатура
			|			И ЗаполняемыеТовары.Характеристика = ЧекиККМ.Характеристика
			|			И ЗаполняемыеТовары.Серия = ЧекиККМ.Серия
			|ГДЕ
			|	ЕСТЬNULL(ЧекиККМ.Количество, 0) - ЕСТЬNULL(ЗаполняемыеТовары.Количество, 0) - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) < 0
			|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаРеализации УБЫВ";
			Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыеТовары);
			Запрос.УстановитьПараметр("ДокументВозврата", ДокументПродажи.Ссылка);
			Запрос.УстановитьПараметр("ЧекККМ", ДокументПродажи.ЧекККМ);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			Отказ = Истина;
			СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Результат, ВозвратПоЧеку);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Формирует отчет "Отклонения от условий продаж" путем выполнения пакета запросов. 
// 
// Параметры:
// ДокументПродажи  - ДокументОбъект -Документ, для которого необходимо осуществить проверки
// ТаблицаОтчета  - ТабличныйДокумент - Табличный документ отчета
//
Процедура СформироватьОтчетОтклоненияОтУсловийПродаж(Знач ДокументПродажи, ТаблицаОтчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенПродажи = Константы.ВидМаксимальноДопустимыхЦенПродажи.Получить();
	ВидМинимальноДопустимыхЦенПродажи  = Константы.ВидМинимальноДопустимыхЦенПродажи.Получить();
	ПроверятьДиапазонЦен               = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенПродажи) Или ЗначениеЗаполнено(ВидМинимальноДопустимыхЦенПродажи);
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	МассивПроверок    = Новый Массив();
	ТипДокумента      = ТипЗнч(ДокументПродажи);
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	ЗапросПоШапке = Новый Запрос("
		|ВЫБРАТЬ
		|	ДокументПродажи.Дата КАК Дата,
		|	ДокументПродажи.Соглашение КАК Соглашение,
		|" + ?(ИмяТаблицы = "Документ.ЗаказКлиента" ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента","
		|	ДокументПродажи.ГрафикОплаты КАК ГрафикОплаты,
		|	ДокументПродажи.СуммаДокумента КАК СуммаДокумента,
		|","
		|	NULL КАК ГрафикОплаты,
		|	0 КАК СуммаДокумента,
		|") + "
		|" + ?(ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" ИЛИ ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю","
		|	NULL КАК ПорядокРасчетов,
		|","
		|	ДокументПродажи.ПорядокРасчетов КАК ПорядокРасчетов,
		|") + "
		|" + ?(ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента","
		|	ДокументПродажи.СпособКомпенсации КАК СпособКомпенсации,
		|	ДокументПродажи.СуммаЗамены КАК СуммаЗамены,
		|","
		|	NULL КАК СпособКомпенсации,
		|	0 КАК СуммаЗамены,
		|") + "
		|" + ?(ИмяТаблицы = "Документ.АктВыполненныхРабот","
		|	NULL КАК ХозяйственнаяОперация,
		|	Ложь КАК ТребуетсяЗалогЗаТару,
		|	ДокументПродажи.АктПоЗаказам КАК АктПоЗаказам,
		|","
		|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДокументПродажи.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|	ЛОЖЬ КАК АктПоЗаказам,
		|") + "
		|" + ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг","
		|	ДокументПродажи.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ДокументПродажи.РеализацияПоЗаказам КАК РеализацияПоЗаказам,
		|","
		|	0 КАК СуммаВзаиморасчетов,
		|	ЛОЖЬ КАК РеализацияПоЗаказам,
		|") + "
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","
		|	ДокументПродажи.Типовое КАК Типовое,
		|	ДокументПродажи.Типовое КАК СегментНоменклатуры,
		|	ДокументПродажи.ВозвращатьМногооборотнуюТару КАК ВозвратМногооборотнойТары
		|","
		|	ЛОЖЬ КАК Типовое,
		|	NULL КАК СегментНоменклатуры,
		|" + ?(ИмяТаблицы = "Документ.АктВыполненныхРабот","
		|	ЛОЖЬ КАК ВозвратМногооборотнойТары
		|","
		|	ДокументПродажи.ВернутьМногооборотнуюТару КАК ВозвратМногооборотнойТары
		|")) + "
		|ИЗ
		|" + ИмяТаблицы + " КАК ДокументПродажи
		|ГДЕ
		|	ДокументПродажи.Ссылка = &ДокументПродажи
		|");
	
	ЗапросПоШапке.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьАвтоматическиеСкидки             = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ПроверятьСкидкиНаценки                       = ИспользоватьАвтоматическиеСкидки Или ИспользоватьРучныеСкидки;	
	ИспользоватьЦеновыеГруппы                    = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	
	ИспользоватьОграниченияПоПользователям       = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	ИспользоватьОграниченияПоСоглашениям         = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ОграничиватьРучныеСкидки                     = ИспользоватьРучныеСкидки И (ИспользоватьОграниченияПоПользователям ИЛИ ИспользоватьОграниченияПоСоглашениям);
	
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	// СОГЛАШЕНИЕ С КЛИЕНТОМ
	Если ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ПроверятьДиапазонЦен Или Не ВыборкаПоШапке.Типовое Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		КонецЕсли;
		
		Если Не ВыборкаПоШапке.Типовое Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияТипового");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального");
			МассивПроверок.Добавить("КорректностьЭтаповОплатыСоглашения");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповОплатыСоглашения");
			Если ИспользоватьЦеновыеГруппы Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаЦеновыеГруппы");
				МассивПроверок.Добавить("СоответствиеЦеновыхГруппУсловиямПродаж");
			КонецЕсли;
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоШапке.СегментНоменклатуры) Тогда
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
		КонецЕсли;
		
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
	// ЗАКАЗ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
		КонецЕсли;
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
	
		// Проверка корректности этапов оплаты осуществляется только для
		// заказов, в которых не все строки отменены и  в которых указан график оплаты.
		
		Если ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
			ВыборкаПоШапке.СуммаДокумента <> 0 Тогда
			
			Если ВыборкаПоШапке.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
	// КОММЕРЧЕСКОЕ ПРЕДЛОЖЕНИЕ КЛИЕНТУ
	
	ИначеЕсли ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
	
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
		КонецЕсли;
		
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки 
			И ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
	// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ
	
	ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		Если Не ВыборкаПоШапке.РеализацияПоЗаказам Тогда
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		КонецЕсли;
		
		Если (Не ВыборкаПоШапке.РеализацияПоЗаказам Или ВыборкаПоШапке.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
			И ИспользоватьСоглашенияСКлиентами Тогда
			
			Если ВыборкаПоШапке.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
			 ИЛИ Не ЗначениеЗаполнено(ВыборкаПоШапке.ХозяйственнаяОперация) Тогда
				МассивПроверок.Добавить("КорректностьДатыПлатежа");
			КонецЕсли;
			
			Если ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСуммыВзаиморасчетов");
				МассивПроверок.Добавить("СоответствиеСуммыПредоплатыГрафикуОплат");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки И ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
	// ЗАЯВКА НА ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");

		НужнаЗаменаТоваров = ВыборкаПоШапке.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары;
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			Если НужнаЗаменаТоваров Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
		КонецЕсли;
		Если НужнаЗаменаТоваров И ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
	
		// Проверка корректности этапов оплаты осуществляется только для
		// заявок, в которых не все строки отменены и  в которых указан график оплаты.
		
		Если ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
			И ВыборкаПоШапке.СуммаЗамены > 0
			И ВыборкаПоШапке.СуммаДокумента <> 0
			И ВыборкаПоШапке.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
			И НужнаЗаменаТоваров Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
			МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И НужнаЗаменаТоваров Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
	// ЗАДАНИЕ ТОРГОВОМУ ПРЕДСТАВИТЕЛЮ
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
		КонецЕсли;
			
	// АКТ ВЫПОЛНЕННЫХ РАБОТ
	
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если Не ВыборкаПоШапке.АктПоЗаказам Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Не ВыборкаПоШапке.АктПоЗаказам Или ВыборкаПоШапке.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
			И ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("КорректностьДатыПлатежа");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УчитыватьСкидкиНаценки = Не ((ИмяТаблицы = "Справочник.СоглашенияСКлиентами") 
		Или (ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю")
		Или (ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента"));
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок

	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата",          ВыборкаПоШапке.Дата);
	ПараметрыЗапроса.Вставить("ЭтоСоглашение", ТипДокумента = Тип("СправочникОбъект.СоглашенияСКлиентами"));
	ПараметрыЗапроса.Вставить("Ссылка",        ДокументПродажи);
	ПараметрыЗапроса.Вставить("Пользователь",  Пользователи.АвторизованныйПользователь());
	ПараметрыЗапроса.Вставить("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	ПараметрыЗапроса.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВыборкаПоШапке.ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару", ВыборкаПоШапке.ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("СуммаВзаиморасчетовРеализации", ВыборкаПоШапке.СуммаВзаиморасчетов);
	ПараметрыЗапроса.Вставить("СуммаЗалогаПоРеализации", 0);
	ПараметрыЗапроса.Вставить("НеЗаданаСуммаЗалога", Истина);
	ПараметрыЗапроса.Вставить("НеПроверятьКодСтроки", ТипДокумента <> Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
	
	Если ИспользоватьОграниченияПоСоглашениям Тогда
		ПараметрыЗапроса.Вставить("СоглашениеСКлиентом", ВыборкаПоШапке.Соглашение);
	КонецЕсли;
	
	ПоСсылке = Истина;
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаДокументПродажи" Тогда
		
			СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
		
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ИмяТаблицы, УчитыватьСкидкиНаценки, ПоСсылке);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦеновыеГруппы" Тогда
		
			СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
		
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямПродаж" Тогда
			
			СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда
			
			СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда
			
			СформироватьЗапросПринадлежностьТоваровСегментуНоменклатуры(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СформироватьЗапросПринадлежностьПартнераСегментуПартнеров(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьДатыПлатежа" Тогда
			
			СформироватьЗапросКорректностьДатыПлатежа(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения(ТекстЗапроса, ИспользоватьЦеновыеГруппы, ИспользоватьОграниченияПоПользователям, ИспользоватьОграниченияПоСоглашениям);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграниченияРучныхСкидок" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграниченияРучныхСкидок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияТипового" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСуммыВзаиморасчетов" Тогда
			
			СформироватьЗапросВременнаяТаблицаСуммыВзаиморасчетов(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда
			
			СформироватьЗапросСоответствиеСуммыПредоплатыГрафикуОплат(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	МассивОтклоненийШапки         = Новый Массив;
	МассивОтклоненийСкидкиНаценки = Новый Массив;
	ДеревоОтклоненийТовары        = Отчеты.ОтклоненияОтУсловийПродаж.ИнициализироватьДеревоОтклонений();
	ДеревоОтклоненийГруппЦен      = Отчеты.ОтклоненияОтУсловийПродаж.ИнициализироватьДеревоОтклонений();
	ДеревоОтклоненийЭтапыОплаты   = Отчеты.ОтклоненияОтУсловийПродаж.ИнициализироватьДеревоОтклонений();
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахШапкаДокументаПродажи(Выборка,ДокументПродажи,Ложь,МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямПродаж" Тогда
		
			СообщитьОбОшибкахТоварыДокументаПродажи(Выборка,ДокументПродажи,Ложь,ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахСоответствиеГруппЦенНоменклатурыУсловиямПродаж(Выборка, ДокументПродажи, Ложь, ДеревоОтклоненийГруппЦен);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда
			
			СообщитьОбОшибкахПринадлежностьТоваровСегментуНоменклатуры(Выборка, ДокументПродажи, Ложь, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СообщитьОбОшибкахПринадлежностьПартнераСегментуПартнеров(Выборка, ДокументПродажи, Ложь, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументПродажи, Ложь, ДеревоОтклоненийЭтапыОплаты);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьДатыПлатежа" Тогда
			
			СообщитьОбОшибкахКорректностьДатыПлатежа(Выборка, ДокументПродажи, Ложь, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Выборка, ДокументПродажи, Ложь, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументПродажи, Ложь, ПроверятьСкидкиНаценки, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументПродажи,Ложь,ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповОплатыСоглашения(Выборка, ДокументПродажи, Ложь, ДеревоОтклоненийЭтапыОплаты);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СообщитьОбОшибкахКорректностьКоличестваЭтаповОплатыСоглашения(Выборка, ДокументПродажи, Ложь, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда
			СообщитьОбОшибкахСоответствиеСуммыПредоплатыГрафикуОплат(Выборка, ДокументПродажи, Ложь, МассивОтклоненийШапки);
		КонецЕсли;
	
	КонецЦикла;
	ЕстьОтклонения = МассивОтклоненийШапки.Количество() > 0 
		ИЛИ ДеревоОтклоненийГруппЦен.Строки.Количество() > 0 
		ИЛИ ДеревоОтклоненийТовары.Строки.Количество() > 0 
		ИЛИ ДеревоОтклоненийЭтапыОплаты.Строки.Количество() > 0
		ИЛИ МассивОтклоненийСкидкиНаценки.Количество() > 0;
	
	Отчеты.ОтклоненияОтУсловийПродаж.ВывестиЗаголовокОтчета(ТаблицаОтчета, ЕстьОтклонения);
	
	Если МассивОтклоненийШапки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияВОбластьШапки(МассивОтклоненийШапки, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийГруппЦен.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ДокументПродажи, ДеревоОтклоненийГруппЦен, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийТовары.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияТоварыДокументаПродажи(ДокументПродажи, ДеревоОтклоненийТовары, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийЭтапыОплаты.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияЭтапыОплатыДокументаПродажи(ДокументПродажи, ДеревоОтклоненийЭтапыОплаты, ТаблицаОтчета);
	КонецЕсли;
	
	Если МассивОтклоненийСкидкиНаценки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияСкидкиНаценки(МассивОтклоненийСкидкиНаценки, ТаблицаОтчета);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРасчетаЦенИСкидокВДокументахПродажи

// Заполняет реквизит "Цена" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"Дата" - Дата - Дата документа
// 				"Валюта" - СправочникСсылка.Валюты - Валюта документа
// 				"Соглашение" - СправочникСсылка.СоглашенияСКлиентами - если параметр отсутствует, значит должен быть заполнен параметр "ВидЦены"
// 				"ВидЦены" - СправочникСсылка.ВидыЦен - если параметр отсутствует, значит должен быть заполнен параметр "Соглашение"
// 			Необязательные поля:
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по умолчанию: "Цена". Дополнительные поля: "ВидЦены, СрокПоставки, СтавкаНДС"
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		КэшированныеЗначения - Структура - Структура кэшированных значений
// 		
//
Функция ЗаполнитьЦены(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ЦеныЗаполнены = Ложь;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Параметры заполнения не указаны';uk='Параметри не зазначені'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	// Получение структуры параметров по умолчанию
	Параметры = Новый Структура(
		"ПоляЗаполнения, КолонкиПоЗначению, ДругиеИменаКолонок",
		"Цена", Новый Структура, Новый Структура);
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не Параметры.Свойство("Соглашение") И Не Параметры.Свойство("ВидЦены") Тогда
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Соглашение"" или ""ВидЦены""';uk='У параметрах заповнення повинні бути вказані ""Оферта"" або ""ВидЦены""'");
		Возврат ЦеныЗаполнены;
	ИначеЕсли Не Параметры.Свойство("Дата") Или Не Параметры.Свойство("Валюта") Тогда
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Валюта"" и ""Дата""';uk='У параметрах заповнення повинні бути вказані ""Валюта"" і ""Дата""'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	ДополнительныеКолонки = "";
	ЕстьКоличествоУпаковок = Ложь;
	ЕстьКодСтроки = Ложь;
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		ЕстьКоличествоУпаковок = ТабличнаяЧасть.Колонки.Найти("КоличествоУпаковок") <> Неопределено;
	Иначе
		ЕстьКоличествоУпаковок = ТабличнаяЧасть.Выгрузить().Колонки.Найти("КоличествоУпаковок") <> Неопределено;
	КонецЕсли;
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		ЕстьКодСтроки = ТабличнаяЧасть.Колонки.Найти("КодСтроки") <> Неопределено;
	Иначе
		ЕстьКодСтроки = ТабличнаяЧасть.Выгрузить().Колонки.Найти("КодСтроки") <> Неопределено;
	КонецЕсли;
	Если ЕстьКоличествоУпаковок Тогда
		ДополнительныеКолонки = ?(Параметры.Свойство("РасчитыватьНаборы") И Параметры.РасчитыватьНаборы, "," + "Количество, КоличествоУпаковок, НоменклатураНабора, ХарактеристикаНабора", "");
	Иначе
		ДополнительныеКолонки = ?(Параметры.Свойство("РасчитыватьНаборы") И Параметры.РасчитыватьНаборы, "," + "Количество, НоменклатураНабора, ХарактеристикаНабора", "");
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		ТабличнаяЧасть,
		ВыделенныеСтроки,
		"НомерСтроки, Номенклатура, Характеристика, Упаковка" + ДополнительныеКолонки,
		Параметры.КолонкиПоЗначению,
		Параметры.ДругиеИменаКолонок);
		
	МаксимальныйИндексСтроки = 0;
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.НомерСтроки > МаксимальныйИндексСтроки Тогда
			МаксимальныйИндексСтроки = СтрокаТЧ.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	КоэффициентыПропорциональностиРасчетаЦенНаборов = Неопределено;
	ДанныеПоКоличествуНаборов = Неопределено;
	Если Параметры.Свойство("РасчитыватьНаборы") И Параметры.РасчитыватьНаборы Тогда
		
		Если НЕ ЕстьКоличествоУпаковок Тогда
			Таблица.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3));
			Для Каждого СтрокаТЧ Из Таблица Цикл
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
			КонецЦикла;
		КонецЕсли;
		
		КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(Таблица, Параметры);
		ДанныеПоКоличествуНаборов = КоличествоНаборов(Таблица);
		
		Наборы = КоэффициентыПропорциональностиРасчетаЦенНаборов.Скопировать();
		Наборы.Свернуть("НоменклатураНабора, ХарактеристикаНабора");
		Индекс = МаксимальныйИндексСтроки;
		Для Каждого Строка Из Наборы Цикл
			
			Индекс = Индекс + 1;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.НомерСтроки    = Индекс;
			НоваяСтрока.Номенклатура   = Строка.НоменклатураНабора;
			НоваяСтрока.Характеристика = Строка.ХарактеристикаНабора;
			НоваяСтрока.Упаковка       = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЦикла;
		
		Таблица.Колонки.Удалить("Количество");
		Таблица.Колонки.Удалить("КоличествоУпаковок");
		
	КонецЕсли;
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Валюта", Параметры.Валюта);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыТоваров("втТаблицаТовары");
	
	Если Параметры.Свойство("ВидЦены") Тогда
		
		Запрос.УстановитьПараметр("ВидЦены", Параметры.ВидЦены);
		
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦены", "втТаблицаТовары", Истина);
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	втТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	втТаблицаЦены.ВидЦены КАК ВидЦены,
		|	втТаблицаЦены.Цена КАК Цена
		|ИЗ
		|	втТаблицаТовары КАК втТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЦены КАК втТаблицаЦены
		|		ПО (втТаблицаЦены.НомерСтроки = втТаблицаТовары.НомерСтроки)";
		
	ИначеЕсли Параметры.Свойство("Соглашение") Тогда
		
		Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
		Запрос.УстановитьПараметр("ЭтоВыкупТары", ?(Параметры.Свойство("ЭтоВыкупТары"), Параметры.ЭтоВыкупТары, Ложь));
		Запрос.УстановитьПараметр("Организация", ?(Параметры.Свойство("Организация"), Параметры.Организация, Справочники.Организации.ПустаяСсылка()));

		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦенПоСоглашению("втТаблицаЦеныПоСоглашению", "втТаблицаТовары");
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦеныПоВидуЦен", "втТаблицаЦеныПоСоглашению", Ложь);
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	втТаблицаЦеныПоСоглашению.НомерСтроки КАК НомерСтроки,
		|	втТаблицаЦеныПоСоглашению.ВидЦены КАК ВидЦены,
		|	втТаблицаЦеныПоСоглашению.СтавкаНДС КАК СтавкаНДС,
		|	втТаблицаЦеныПоСоглашению.СрокПоставки КАК СрокПоставки,
		|	ВЫБОР
		|		КОГДА втТаблицаЦеныПоСоглашению.Цена = 0
		|			ТОГДА втТаблицаЦеныПоВидуЦен.Цена
		|		ИНАЧЕ втТаблицаЦеныПоСоглашению.Цена
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	втТаблицаЦеныПоСоглашению КАК втТаблицаЦеныПоСоглашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЦеныПоВидуЦен КАК втТаблицаЦеныПоВидуЦен
		|		ПО (втТаблицаЦеныПоВидуЦен.НомерСтроки = втТаблицаЦеныПоСоглашению.НомерСтроки)";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Расчет цен комплектующих набора
		Если Выборка.НомерСтроки > МаксимальныйИндексСтроки Тогда
			
			НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			Отбор = Новый Структура;
			Отбор.Вставить("НоменклатураНабора", НайденныеСтроки[0].Номенклатура);
			Отбор.Вставить("ХарактеристикаНабора", НайденныеСтроки[0].Характеристика);
			
			НайденныеСтроки = КоэффициентыПропорциональностиРасчетаЦенНаборов.НайтиСтроки(Отбор);
			
			КоличествоНаборов = 1;
			ДанныеПоКоличествуНаборовНайденныеСтроки = ДанныеПоКоличествуНаборов.НайтиСтроки(Отбор);
			Если ДанныеПоКоличествуНаборовНайденныеСтроки.Количество() > 0 Тогда
				КоличествоНаборов = ДанныеПоКоличествуНаборовНайденныеСтроки[0].КоличествоМинимум;
			КонецЕсли;
			
			ОбщаяСтоимость = 0;
			СуммаКРаспределению = Выборка.Цена * КоличествоНаборов;
			
			СлужебнаяТЧ = Новый ТаблицаЗначений;
			СлужебнаяТЧ.Колонки.Добавить("СтрокаТЧ");
			СлужебнаяТЧ.Колонки.Добавить("Количество");
			СлужебнаяТЧ.Колонки.Добавить("Стоимость");
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				
				СтрокаТЧ = ТабличнаяЧасть[ТекущаяСтрока.НомерСтроки - 1];

				Если ЕстьКодСтроки И СтрокаТЧ.КодСтроки <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Стоимость = ТекущаяСтрока.Цена;
				Количество = ?(ЕстьКоличествоУпаковок, СтрокаТЧ.КоличествоУпаковок, СтрокаТЧ.Количество);
				
				НоваяСтрока = СлужебнаяТЧ.Добавить();
				НоваяСтрока.СтрокаТЧ   = СтрокаТЧ;
				НоваяСтрока.Стоимость  = Стоимость;
				НоваяСтрока.Количество = Количество;
				
				ОбщаяСтоимость = ОбщаяСтоимость + ТекущаяСтрока.Цена;
				
			КонецЦикла;
			СлужебнаяТЧ.Сортировать("Количество УБЫВ");
			
			НомерСтроки = 0;
			КоличествоСтрок = СлужебнаяТЧ.Количество();
			Для Каждого ТекущаяСтрока Из СлужебнаяТЧ Цикл
				
				СтрокаТЧ = ТекущаяСтрока.СтрокаТЧ;
				Стоимость = ТекущаяСтрока.Стоимость;
				Количество = ТекущаяСтрока.Количество;
				
				НомерСтроки = НомерСтроки + 1;
				
				ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
				
				Если Количество <> 0 И ОбщаяСтоимость <> 0 Тогда
					СтрокаТЧ.Цена = Окр(((Стоимость / ОбщаяСтоимость) * СуммаКРаспределению) / Количество, 2);
				Иначе
					СтрокаТЧ.Цена = 0;
				КонецЕсли;
				
				ОбщаяСтоимость = ОбщаяСтоимость - Стоимость;
				СуммаКРаспределению = СуммаКРаспределению - СтрокаТЧ.Цена * Количество;
				
				Погрешность = 0;
				Если НомерСтроки = КоличествоСтрок Тогда
					Погрешность = СуммаКРаспределению;
				КонецЕсли;
				
				Если СтруктураДействий <> Неопределено Тогда
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
				КонецЕсли;
				
				Если СтруктураДействий <> Неопределено Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
			Если ТипЗнч(ТабличнаяЧасть) <> Тип("ТаблицаЗначений") Тогда
				СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
			Иначе
				НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаТЧ = НайденныеСтроки[0];
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
			Если СтруктураДействий <> Неопределено Тогда
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Заполняет реквизит "Цена" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"Дата" - Дата - Дата документа
// 				"Валюта" - СправочникСсылка.Валюты - Валюта документа
//				"Организация" - СправочникСсылка.Организации - Органиация документа
// 			Необязательные поля:
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по умолчанию: "Цена". Дополнительные поля: "ВидЦены, СрокПоставки, СтавкаНДС"
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		КэшированныеЗначения - Структура - Структура кэшированных значений
// 		
//
Функция ЗаполнитьЦеныПоСебестоимости(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ЦеныЗаполнены = Ложь;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Параметры заполнения не указаны';uk='Параметри не зазначені'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	// Получение структуры параметров по умолчанию
	Параметры = Новый Структура(
		"ПоляЗаполнения,  ДругиеИменаКолонок",
		"Цена", Новый Структура);
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не Параметры.Свойство("Дата") 
		Или Не Параметры.Свойство("Организация") 
		Или Не Параметры.Свойство("Склад")  Тогда
		
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Дата"", ""Организация"", ""Склад""';uk='У параметрах заповнення повинні бути вказані ""Дата"", ""Організація"", ""Склад""'");
		Возврат ЦеныЗаполнены;
		
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		ТабличнаяЧасть,
		ВыделенныеСтроки,
		"НомерСтроки, Номенклатура, Характеристика",
		Неопределено,
		Параметры.ДругиеИменаКолонок);
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);

	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыТоваровСписания("втТаблицаТоварыСписания");
	
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыСебестоимостей("втТаблицаСебестоимости", "втТаблицаТоварыСписания");
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	втТаблицаТоварыСписания.НомерСтроки КАК НомерСтроки,
	|	втТаблицаСебестоимости.Цена КАК Цена
	|ИЗ
	|	втТаблицаТоварыСписания КАК втТаблицаТоварыСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСебестоимости КАК втТаблицаСебестоимости
	|		ПО (втТаблицаСебестоимости.НомерСтроки = втТаблицаТоварыСписания.НомерСтроки)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
		Если СтруктураДействий <> Неопределено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает цену по отбору
//
// Параметры:
//		ПараметрыОтбора - Структура - Структура с обязательными полями
//			"Дата" - Дата - Дата получения цены
// 			"Номенклатура" - СправочникСсылка.Номенклатура
// 			"Характеристика" - СправочникСсылка.ХарактеристикиНоменклатуры
// 			"Упаковка" - СправочникСсылка.УпаковкиЕдиницыИзмерения
// 			"ВидЦены" - СправочникСсылка.ВидыЦен
// 			"Валюта" - СправочникСсылка.Валюты
//
// Возвращаемое значение:
// 		Число - Цена
//
Функция ПолучитьЦенуПоОтбору(ПараметрыОтбора) Экспорт
	
	Запрос = Новый Запрос;
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				ВидЦены = ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен)
	|				И Номенклатура = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)
	|				И Характеристика = ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры)
	|) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|ПО 
	|	ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	Запрос.Текст = ТекстЗапроса;	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Окр(Выборка.Цена, 2);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИнициализацииПравилПродаж

// Возвращает структуру условий продаж по торговому соглашению.
//
// Параметры:
// Соглашение - СправочникСсылка.СоглашенияСКлиентами - ссылка на соглашение с клиентом
//
// Возвращаемое значение:
// Структура
// Структура, включающая условия продаж
//
Функция ПолучитьУсловияПродаж(Знач Соглашение,
	                          Знач УчитыватьГруппыСкладов=Ложь,
	                          Знач ИсключитьГруппыСкладовДоступныеВЗаказах=Ложь) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
		|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
		|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
		|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
		|	СоглашениеСКлиентом.Организация                                 КАК Организация,
		|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
		|	ВЫБОР
		|		КОГДА &ИспользоватьГрафикиОплаты
		|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|	КОНЕЦ                                                           КАК ГрафикОплаты,
		|	ВЫБОР
		|		КОГДА &ИспользоватьГрафикиОплаты
		|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты
		|		ИНАЧЕ СоглашениеСКлиентом.ФормаОплаты
		|	КОНЕЦ                                                           КАК ФормаОплаты,
		|	СоглашениеСКлиентом.ПорядокОплаты                               КАК ПорядокОплаты,
		|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	СоглашениеСКлиентом.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
		|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
		|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
		|	СоглашениеСКлиентом.Период                                      КАК Период,
		|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
		|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
		|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
		|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
		|			ТОГДА СоглашениеСКлиентом.Склад
		|		КОГДА СоглашениеСКлиентом.Склад.ЭтоГруппа
		|				И &УчитыватьГруппыСкладов
		|				И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
		|			ТОГДА СоглашениеСКлиентом.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СоглашениеСКлиентом.СегментНоменклатуры                           КАК СегментНоменклатуры,
		|	СоглашениеСКлиентом.Типовое                                       КАК Типовое,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                            КАК ДатаНачалаДействия,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                         КАК ДатаОкончанияДействия,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                         КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                   КАК СпособРасчетаВознаграждения,
		|	СоглашениеСКлиентом.ПроцентВознаграждения                         КАК ПроцентВознаграждения,
		|	СоглашениеСКлиентом.УдержатьВознаграждение                        КАК УдержатьВознаграждение,
		|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                      КАК ОграничиватьРучныеСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                           КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                          КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов              КАК ИспользуютсяДоговорыКонтрагентов,
		|	СоглашениеСКлиентом.ПорядокРасчетов                               КАК ПорядокРасчетов,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                  КАК ДоступноВнешнимПользователям,
		|	СоглашениеСКлиентом.Статус                                        КАК СтатусСоглашения,
		|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                  КАК ВозвращатьМногооборотнуюТару,
		|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары                КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	СоглашениеСКлиентом.КалендарьВозвратаТары                         КАК КалендарьВозвратаТары,
		|	СоглашениеСКлиентом.ТребуетсяЗалогЗаТару                          КАК ТребуетсяЗалогЗаТару,
		|	СоглашениеСКлиентом.ОбеспечиватьЗаказыОбособленно                 КАК ОбеспечиватьЗаказыОбособленно,
		|	СоглашениеСКлиентом.Календарь                                     КАК Календарь,
		|	СоглашениеСКлиентом.НаправлениеДеятельности                       КАК НаправлениеДеятельности
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	СоглашениеСКлиентом.Ссылка = &Соглашение");
	
		Запрос.УстановитьПараметр("Соглашение",                Соглашение);
		Запрос.УстановитьПараметр("ВыборГруппыСкладов",        Справочники.Склады.ВариантыВыбораГруппыСкладов(ИсключитьГруппыСкладовДоступныеВЗаказах));
		Запрос.УстановитьПараметр("УчитыватьГруппыСкладов",    УчитыватьГруппыСкладов);
		Запрос.УстановитьПараметр("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка          = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		СтруктураРеквизитов = ПолучитьСтруктуруУсловийПродаж();
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.НалогообложениеНДС)
			И ЗначениеЗаполнено(СтруктураРеквизитов.Организация) Тогда
			СтруктураРеквизитов.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(
				СтруктураРеквизитов.Организация,
				СтруктураРеквизитов.Контрагент, 
				ТекущаяДатаСеанса(),
				Истина
			);
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
			СтруктураРеквизитов.Вставить("ИспользуютсяДоговорыКонтрагентов", Ложь);
		КонецЕсли;
		
		Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает структуру условий продаж по партнеру.
//
// Параметры:
// Партнер           - Ссылка на партнера, для которого необходимо получить условия продаж
// ПараметрыОтбора   - Структура - содержит параметры отбора соглашения
//
// Возвращаемое значение:
// Структура.
// Структура, включающая условия продаж
//
Функция ПолучитьУсловияПродажПоУмолчанию(Знач Партнер = Неопределено, ПараметрыОтбора = Неопределено) Экспорт
	
	СтруктураРеквизитов = ПолучитьСтруктуруУсловийПродаж();
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьДоговорыСКлиентами	 = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		
		// Учтем вариант использования соглашений
		ИспользоватьТиповыеСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
		ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
		
		ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
		ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
		
		ВсеПараметрыОтбора = Новый Структура();
		ВсеПараметрыОтбора.Вставить("ТолькоТиповые",                           ТолькоТиповые);
		ВсеПараметрыОтбора.Вставить("ТолькоИндивидуальные",                    ТолькоИндивидуальные);
		ВсеПараметрыОтбора.Вставить("ТолькоИспользуемыеВРаботеТП",             Ложь);
		ВсеПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Ложь);
		ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
		ВсеПараметрыОтбора.Вставить("ХозяйственнаяОперация",                   Перечисления.ХозяйственныеОперации.ПустаяСсылка());
		ВсеПараметрыОтбора.Вставить("ВыбранноеСоглашение",                     Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		
		Если ПараметрыОтбора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
		КонецЕсли;
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
			|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
			|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
			|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
			|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
			|	СоглашениеСКлиентом.Организация                                 КАК Организация,
			|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|	КОНЕЦ                                                             КАК ГрафикОплаты,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты
			|		ИНАЧЕ СоглашениеСКлиентом.ФормаОплаты
			|	КОНЕЦ                                                           КАК ФормаОплаты,
			|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
			|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
			|	СоглашениеСКлиентом.Период                                      КАК Период,
			|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
			|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
			|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
			|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
			|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
			|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ВЫБОР
			|		КОГДА
			|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		КОГДА
			|			СоглашениеСКлиентом.Склад.ЭтоГруппа
			|			И &УчитыватьГруппыСкладов
			|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|	КОНЕЦ КАК Склад,
			|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
			|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
			|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
			|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
			|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                    КАК ОграничиватьРучныеСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
			|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
			|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
			|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
			|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
			|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
			|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
			|	СоглашениеСКлиентом.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
			|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
			|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
			|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
			|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
			|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	СоглашениеСКлиентом.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
			|	СоглашениеСКлиентом.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
			|	СоглашениеСКлиентом.ОбеспечиватьЗаказыОбособленно               КАК ОбеспечиватьЗаказыОбособленно,
			|	СоглашениеСКлиентом.Календарь                                   КАК Календарь,
			|	СоглашениеСКлиентом.НаправлениеДеятельности                     КАК НаправлениеДеятельности
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
			|ГДЕ
			|	НЕ СоглашениеСКлиентом.ПометкаУдаления И
			|	СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) И
			|	СоглашениеСКлиентом.Типовое И НЕ &ТолькоИндивидуальные И 
			|" + ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП," СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей И ","") + "
			|" + ?(ЗначениеЗаполнено(ВсеПараметрыОтбора.ХозяйственнаяОперация)," СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация И ","") + "
			|" + ?(Не ЗначениеЗаполнено(Партнер),"СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка) ", "
			|
			|	(СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
			|	ИЛИ СоглашениеСКлиентом.СегментПартнеров В
			|		(ВЫБРАТЬ
			|			ПартнерыСегмента.Сегмент
			|		ИЗ
			|			РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|		ГДЕ
			|			ПартнерыСегмента.Партнер = &Партнер))
			|") + "
			|
			|" + ?(ВсеПараметрыОтбора.ТолькоТиповые Или Не ЗначениеЗаполнено(Партнер),";","
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 2
			|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
			|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
			|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
			|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
			|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
			|	СоглашениеСКлиентом.Организация                                 КАК Организация,
			|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|	КОНЕЦ                                                             КАК ГрафикОплаты,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты
			|		ИНАЧЕ СоглашениеСКлиентом.ФормаОплаты
			|	КОНЕЦ                                                           КАК ФормаОплаты,
			|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
			|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
			|	СоглашениеСКлиентом.Период                                      КАК Период,
			|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
			|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
			|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
			|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
			|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
			|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ВЫБОР
			|		КОГДА
			|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		КОГДА
			|			СоглашениеСКлиентом.Склад.ЭтоГруппа
			|			И &УчитыватьГруппыСкладов
			|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|	КОНЕЦ КАК Склад,
			|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
			|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
			|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
			|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
			|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                    КАК ОграничиватьРучныеСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
			|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
			|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
			|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
			|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
			|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
			|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
			|	СоглашениеСКлиентом.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
			|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
			|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
			|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
			|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
			|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	СоглашениеСКлиентом.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
			|	СоглашениеСКлиентом.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
			|	СоглашениеСКлиентом.ОбеспечиватьЗаказыОбособленно               КАК ОбеспечиватьЗаказыОбособленно,
			|	СоглашениеСКлиентом.Календарь                                   КАК Календарь,
			|	СоглашениеСКлиентом.НаправлениеДеятельности                     КАК НаправлениеДеятельности
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
			|ГДЕ
			|	НЕ СоглашениеСКлиентом.ПометкаУдаления
			|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) И
			|	НЕ СоглашениеСКлиентом.Типовое И НЕ &ТолькоТиповые И
			|" + ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП," СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей И ","") + "
			|" + ?(ЗначениеЗаполнено(ВсеПараметрыОтбора.ХозяйственнаяОперация)," СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация И ","") + "
			|	СоглашениеСКлиентом.Партнер = &Партнер
			|УПОРЯДОЧИТЬ ПО
			|	Типовое ВОЗР;
			|") + "
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
			|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
			|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
			|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
			|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
			|	СоглашениеСКлиентом.Организация                                 КАК Организация,
			|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|	КОНЕЦ                                                           КАК ГрафикОплаты,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты
			|		ИНАЧЕ СоглашениеСКлиентом.ФормаОплаты
			|	КОНЕЦ                                                           КАК ФормаОплаты,
			|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
			|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
			|	СоглашениеСКлиентом.Период                                      КАК Период,
			|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
			|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
			|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
			|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
			|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
			|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ВЫБОР
			|		КОГДА
			|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		КОГДА
			|			СоглашениеСКлиентом.Склад.ЭтоГруппа
			|			И &УчитыватьГруппыСкладов
			|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|	КОНЕЦ КАК Склад,
			|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
			|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
			|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
			|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
			|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                    КАК ОграничиватьРучныеСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
			|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
			|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
			|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
			|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
			|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
			|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
			|	СоглашениеСКлиентом.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
			|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
			|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
			|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
			|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
			|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	СоглашениеСКлиентом.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
			|	СоглашениеСКлиентом.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
			|	СоглашениеСКлиентом.ОбеспечиватьЗаказыОбособленно               КАК ОбеспечиватьЗаказыОбособленно,
			|	СоглашениеСКлиентом.Календарь                                   КАК Календарь,
			|	СоглашениеСКлиентом.НаправлениеДеятельности                     КАК НаправлениеДеятельности
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
			|ГДЕ
			|	НЕ СоглашениеСКлиентом.ПометкаУдаления
			|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) 
			|	И СоглашениеСКлиентом.Ссылка = &ВыбранноеСоглашение 
			|	И (СоглашениеСКлиентом.Партнер = &Партнер ИЛИ 
			|" + ?(Не ЗначениеЗаполнено(Партнер),"СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)) ", "
			|
			|	(СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
			|	ИЛИ СоглашениеСКлиентом.СегментПартнеров В
			|		(ВЫБРАТЬ
			|			ПартнерыСегмента.Сегмент
			|		ИЗ
			|			РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|		ГДЕ
			|			ПартнерыСегмента.Партнер = &Партнер)))
			|") + ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП,"И СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей ","") + "
			|" + ?(ЗначениеЗаполнено(ВсеПараметрыОтбора.ХозяйственнаяОперация),"И СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация ","") + "
			|");
		
		Запрос.УстановитьПараметр("Партнер",                Партнер);
		Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ВсеПараметрыОтбора.ИсключитьГруппыСкладовДоступныеВЗаказах));
		Запрос.УстановитьПараметр("ХозяйственнаяОперация",  ВсеПараметрыОтбора.ХозяйственнаяОперация);
		Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", ВсеПараметрыОтбора.УчитыватьГруппыСкладов);
		Запрос.УстановитьПараметр("ТолькоТиповые",          ВсеПараметрыОтбора.ТолькоТиповые);
		Запрос.УстановитьПараметр("ТолькоИндивидуальные",   ВсеПараметрыОтбора.ТолькоИндивидуальные);
		Запрос.УстановитьПараметр("ВыбранноеСоглашение",    ВсеПараметрыОтбора.ВыбранноеСоглашение);
		
		Запрос.УстановитьПараметр("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));

		РезультатЗапроса = Запрос.ВыполнитьПакет();

		// Если не найдено ни одного соглашения - возвращаем Неопределено 
		Если РезультатЗапроса[0].Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;

		Выборка = РезультатЗапроса[0].Выбрать();

		НайденноеСоглашение = Неопределено;

		// Если в выборке одно соглашение - используем его
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			НайденноеСоглашение = Выборка.Соглашение;
			
		КонецЕсли;

		// Если необходимы только типовые соглашения - дальнейшие проверки не имеют смысла
		Если НайденноеСоглашение = Неопределено И Не ВсеПараметрыОтбора.ТолькоТиповые Тогда
			
			// В выборке два или более соглашений
			Выборка.Следующий();
			
			ПервоеСоглашение        = Выборка.Соглашение;
			ПервоеСоглашениеТиповое = Выборка.Типовое;

			Выборка.Следующий();
			
			ВтороеСоглашениеТиповое = Выборка.Типовое;
			
			Выборка.Сбросить();
			Выборка.Следующий();
			
			// Если в выборке два соглашения разного типа - используем индивидуальное
			Если ПервоеСоглашениеТиповое <> ВтороеСоглашениеТиповое Тогда
				НайденноеСоглашение = ПервоеСоглашение;
			КонецЕсли;
		КонецЕсли;
		
		Если НайденноеСоглашение = Неопределено Тогда
			Если НЕ РезультатЗапроса[1].Пустой() Тогда
				Выборка = РезультатЗапроса[1].Выбрать();
				Выборка.Следующий();
				НайденноеСоглашение = Выборка.Соглашение;
			КонецЕсли;
		КонецЕсли;

		Если НайденноеСоглашение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Справочники.СоглашенияСКлиентами.ПустаяСсылка())
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизитов.НалогообложениеНДС) Тогда
			СтруктураРеквизитов.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(
				СтруктураРеквизитов.Организация, 
				СтруктураРеквизитов.Контрагент, 
				ТекущаяДатаСеанса(),
				Истина
			);
		КонецЕсли;
		
		Если Не ИспользоватьДоговорыСКлиентами Тогда
			СтруктураРеквизитов.Вставить("ИспользуютсяДоговорыКонтрагентов", ИспользоватьДоговорыСКлиентами);
		КонецЕсли;
		
	Иначе //соглашения не используются
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		
		ОтборВидаЦен          = Новый Структура("ИспользоватьПриПродаже", Истина);
		
		ВсеПараметрыОтбора = Новый Структура;
		ВсеПараметрыОтбора.Вставить("ПустаяСсылкаДокумента", Неопределено);
		Если ПараметрыОтбора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
		КонецЕсли;
		
		РеквизитыЦеныПоУмолчанию = Справочники.ВидыЦен.ВидЦеныИПризнакЦенаВключаетНДСПоУмолчанию(
			ОтборВидаЦен, ВсеПараметрыОтбора.ПустаяСсылкаДокумента);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, РеквизитыЦеныПоУмолчанию);
		
		СтруктураРеквизитов.Вставить("ПорядокРасчетов",                               Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		СтруктураРеквизитов.Вставить("ИспользуютсяДоговорыКонтрагентов",              ИспользоватьДоговорыСКлиентами);
		
	КонецЕсли;
	
	СтруктураРеквизитов.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(СтруктураРеквизитов.Валюта);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает дату последнего этапа по графику.
//
// Параметры:
// ДатаДокумента - Дата - дата, от которой необходимо получить последнюю дату по графику
// ГрафикОплаты  - СправочникСсылка.ГрафикиОплаты -ссылка на график оплаты
// СоглашениеСКлиентом - СправочникСсылка.СоглашенияСКлиентами - ссылка на соглашение с клиентом
//
// Возвращаемое значение:
// Число.
// Последняя дата по графику с учетом календаря
//
Функция ПолучитьПоследнююДатуПоГрафику(Знач ДатаДокумента, Знач ГрафикОплаты,  Знач СоглашениеСКлиентом) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг)  КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
			|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента,День,ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг),0)),День) КАК ДатаПлатежа
			|	
			|ИЗ
			|	Справочник.ГрафикиОплаты.Этапы КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ГрафикОплаты
			|	И ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыГрафикаОплаты.Ссылка
			|");
			
		Запрос.УстановитьПараметр("ГрафикОплаты",  ГрафикОплаты);
		
	ИначеЕсли ЗначениеЗаполнено(СоглашениеСКлиентом) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг) КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
			|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &СоглашениеСКлиентом
			|	И ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыГрафикаОплаты.Ссылка
			|");
			
		Запрос.УстановитьПараметр("СоглашениеСКлиентом", СоглашениеСКлиентом);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Календарь = Выборка.Календарь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		ДатаПлатежа = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаДокумента, Выборка.Сдвиг);
	Иначе
		ДатаПлатежа = Выборка.ДатаПлатежа;
	КонецЕсли;
	
	Возврат ДатаПлатежа;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПолученияЗначенийРеквизитовПоУмолчанию


// Возвращает структуру по ответственному лицу указанного склада
// В случае если склад является группой, возвращает значения,
// 		использовавшиеся в последнем документе указанного менеджера с указанным складом
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Структура - Структура с полями: "Ответственный" и "ОтветственныйДолжность"
//
Функция ПолучитьМестоСоставленияДокумента(ИмяДокумента, Менеджер, Склад = Неопределено) Экспорт
	
	// Если в документе есть реквизит Склад
	Если Склад <> Неопределено Тогда
		
		// По умолчанию - это адрес из карточки склада
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Возврат "";
		КонецЕсли;
		
		Если НЕ ЗначениеНастроекПовтИсп.ПолучитьПризнакСкладГруппа(Склад) Тогда
			АдресСклада = ЗначениеНастроекПовтИсп.ПолучитьАдресСклада(Склад);
			Если ЗначениеЗаполнено(АдресСклада) Тогда
				Возврат АдресСклада;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Документ.МестоСоставленияДокумента КАК МестоСоставленияДокумента,
	|	Документ.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.%ИмяДокумента% КАК Документ
	|ГДЕ
	|	Документ.Менеджер = &Менеджер
	|	И Документ.МестоСоставленияДокумента <> """"
	|	И Документ.Проведен = ИСТИНА
	|	%УсловиеПоСкладу%
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.МоментВремени УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоСкладу%", ?(ЗначениеЗаполнено(Склад), "И Документ.Склад = &Склад", ""));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МестоСоставленияДокумента;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьМестоСоставленияДокумента()

// Выполняет поиск действующего договора с контрагентом по заданным реквизитам.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
//
// Параметры:
// 		ТекущийДоговор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на текущий договор
// 		Партнер - СправочникСсылка.Партнеры - Деловой партнер предприятия, которому осуществляются продажи;
//		Контрагент - СправочникСсылка.Контрагенты - Контрагент, с которым заключен договор;
//		Организация - СправочникСсылка.Организации - Организация предприятия, от имени которой заключен договор;
//		ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных операций (тип договора);
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору;
//		Соглашение - СправочникСсылка.СоглашенияСКлиентами - Если не задан порядок, он будет получен из соглашения с клиентом.
// 
// Возвращаемое значение:
// 		СправочникСсылка.ДоговорыКонтрагентов
//
Функция ПолучитьДоговорПоУмолчанию(
	Объект,
	ХозяйственныеОперации,
	ВалютаВзаиморасчетов = Неопределено,
	НаправлениеДеятельности = Неопределено
	) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Объект.Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ((НЕ &ОтборСоглашение)
	|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ПорядокОплаты = ДоговорыКонтрагентов.ПорядокОплаты
	|				И ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ИспользуютсяДоговорыКонтрагентов)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности);
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ((НЕ &ОтборСоглашение)
	|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ПорядокОплаты = ДоговорыКонтрагентов.ПорядокОплаты
	|				И ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ИспользуютсяДоговорыКонтрагентов)
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности)
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", Объект.Договор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов", ЗначениеЗаполнено(ВалютаВзаиморасчетов));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")  Тогда
		Запрос.УстановитьПараметр("ОтборСоглашение", Ложь);
		Запрос.УстановитьПараметр("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	Иначе
		Попытка
			ОбъектСоглашение = Объект.Соглашение;
		Исключение
			ОбъектСоглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		КонецПопытки; 
		Если ЗначениеЗаполнено(ОбъектСоглашение) Тогда
		  	Запрос.УстановитьПараметр("ОтборСоглашение", Истина);
			Запрос.УстановитьПараметр("Соглашение", ОбъектСоглашение);
		Иначе
			Запрос.УстановитьПараметр("ОтборСоглашение", Ложь);
			Запрос.УстановитьПараметр("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		КонецЕсли;	
	КонецЕсли; 
	Запрос.УстановитьПараметр("ОтборНаправлениеДеятельности", НаправлениеДеятельности <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности"));
	Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Устанавливает видимость реквизита договора в зависимости от данных по соглашению
//
// Параметры:
// 		Соглашение - СправочникСсылка.СоглашенияСПоставщиками
// 		ДоступностьЭлемента - Булево
// 		Договор - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура УстановитьДоступностьДоговора(Объект, ДоступностьЭлемента, ВидимостьЭлемента, Договор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользуютсяДоговорыКонтрагентов     = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	
	ЗаполненыВлияющиеПоля = 
		ЗначениеЗаполнено(Объект.Партнер)
		И (ЗначениеЗаполнено(Объект.Контрагент) Или ИспользоватьПартнеровКакКонтрагентов)
		И ЗначениеЗаполнено(Объект.Организация);
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		ЗаполненыВлияющиеПоля = ЗаполненыВлияющиеПоля И ЗначениеЗаполнено(Объект.Соглашение);
		
		ИспользуютсяДоговорыКонтрагентов =
			ИспользуютсяДоговорыКонтрагентов
			И ЗначениеЗаполнено(Объект.Соглашение)
			И ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
			
	КонецЕсли;
		
	ДоступностьЭлемента = ЗаполненыВлияющиеПоля И ИспользуютсяДоговорыКонтрагентов;
	
	ВидимостьЭлемента = ИспользуютсяДоговорыКонтрагентов;
	
	Если НЕ ДоступностьЭлемента И ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры 

// Процедура устанавливает отметку незаполненности в зависимости от настроек системы
//
// Параметры:
// 		ЭлементыФормы - ВсеЭлементыФормы - элементы формы документа
// 		ИмяЭлемента - Строка - имя элемента формы договора
//

Процедура УстановитьОтметкуНезаполненногоДоговора(ЭлементыФормы, ИмяЭлемента) Экспорт
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, "АвтоОтметкаНезаполненного", ИспользоватьСоглашенияСКлиентами);
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет банковский счета документа по договору.
//
// Параметры:
//		Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор;
//		БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет организации;
//		БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет контрагента.
//
Процедура ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации = Неопределено, БанковскийСчетКонтрагента = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Справочники.ДоговорыКонтрагентов.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Процедура пересчитывает сумму документа в новую валюту.
//
// Параметры:
// Объект           - ДанныеФормыСтруктура - Текущий документ
// СтараяВалюта     - СправочникСсылка.Валюты - Исходная валюта
// НоваяВалюта      - СправочникСсылка.Валюты - Новая валюта
// ЕстьСуммаПродажи - Булево - признак наличия колонки СуммаПродаж в табличной части
// ЕстьСуммаПродажиНДС - Булево - признак наличия колонки СуммаПродажНДС в табличной части
//
Процедура ПересчитатьСуммуДокументаВВалюту(Объект, Знач СтараяВалюта, Знач НоваяВалюта, Знач ЕстьСуммаПродажи = Истина, Знач ЕстьСуммаПродажиНДС = Ложь) Экспорт

	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	ИтогСумма = Объект.Товары.Итог("Сумма");
	Если ЕстьСуммаПродажи Тогда
		ИтогСуммаПродажи = Объект.Товары.Итог("СуммаПродажи");
	Иначе
		ИтогСуммаПродажи = 0;
	КонецЕсли;
	
	НоваяСумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		ИтогСумма,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты.Курс,
		СтруктураКурсовНовойВалюты.Курс,
		СтруктураКурсовСтаройВалюты.Кратность,
		СтруктураКурсовНовойВалюты.Кратность);
	
	НоваяСуммаПродажи = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		ИтогСуммаПродажи,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты.Курс,
		СтруктураКурсовНовойВалюты.Курс,
		СтруктураКурсовСтаройВалюты.Кратность,
		СтруктураКурсовНовойВалюты.Кратность);
	
	Если ИтогСумма <> 0 ИЛИ ИтогСуммаПродажи <> 0 Тогда
	
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			
			Если ИтогСумма <> 0 Тогда
				СтрокаТаблицы.Сумма = Окр(НоваяСумма * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1);
				СтрокаТаблицы.Цена = ?(СтрокаТаблицы.КоличествоУпаковок <> 0, Окр(СтрокаТаблицы.Сумма / СтрокаТаблицы.КоличествоУпаковок, 2, 1), 0);
				СтрокаТаблицы.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СтрокаТаблицы.СтавкаНДС, Объект.ЦенаВключаетНДС);
				СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
			Если ИтогСуммаПродажи <> 0 Тогда
				СтрокаТаблицы.СуммаПродажи = Окр(НоваяСуммаПродажи * СтрокаТаблицы.СуммаПродажи / ИтогСуммаПродажи, 2, 1);
				СтрокаТаблицы.ЦенаПродажи = ?(СтрокаТаблицы.КоличествоУпаковок <> 0, Окр(СтрокаТаблицы.СуммаПродажи / СтрокаТаблицы.КоличествоУпаковок, 2, 1), 0);
				СтрокаТаблицы.СуммаВознаграждения = 0;
				Если ЕстьСуммаПродажиНДС Тогда
					СтрокаТаблицы.СуммаПродажиНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаПродажи, СтрокаТаблицы.СтавкаНДС, Истина);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Объект.Свойство("СуммаВознаграждения") Тогда
			Объект.СуммаВознаграждения = 0;
			Объект.СуммаНДСВознаграждения = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Свойство("ЭтапыГрафикаОплаты") Тогда
		
		ИтогСуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		Если ИтогСуммаЭтаповОплаты <> 0 Тогда
			
			Для Каждого СтрокаТаблицы Из Объект.ЭтапыГрафикаОплаты Цикл
				СтрокаТаблицы.СуммаПлатежа = Окр(НоваяСуммаПродажи * СтрокаТаблицы.СуммаПлатежа / ИтогСуммаЭтаповОплаты, 2, 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает сумму документа в новую валюту.
//
// Параметры:
// ДокументОбъект - ДанныеФормыСтруктура - документ, в котором необходимо заполнить суммы аванса и предоплаты
//
Процедура ЗаполнитьСуммыАвансаПредоплаты(ДокументОбъект) Экспорт
	
	ТаблицаЭтапов = ДокументОбъект.ЭтапыГрафикаОплаты.Выгрузить();
	Если ТаблицаЭтапов.Колонки.Найти("СуммаЗалогаЗаТару") = Неопределено Тогда
		ТаблицаЭтапов.Колонки.Добавить("СуммаЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	КонецЕсли;
	ТаблицаЭтапов.Свернуть("ВариантОплаты", "СуммаПлатежа,СуммаЗалогаЗаТару");
	
	СтрокаАвансаДоОбеспечения = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения, "ВариантОплаты");
	
	Если СтрокаАвансаДоОбеспечения = Неопределено Тогда
		
		ДокументОбъект.СуммаАвансаДоОбеспечения = 0;
		
	Иначе
		
		ДокументОбъект.СуммаАвансаДоОбеспечения = СтрокаАвансаДоОбеспечения.СуммаПлатежа + СтрокаАвансаДоОбеспечения.СуммаЗалогаЗаТару;
		
	КонецЕсли;
	
	СтрокаПредоплатыДоОтгрузки = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки, "ВариантОплаты");
	
	Если СтрокаПредоплатыДоОтгрузки = Неопределено Тогда
		
		ДокументОбъект.СуммаПредоплатыДоОтгрузки = 0;
		
	Иначе
		
		ДокументОбъект.СуммаПредоплатыДоОтгрузки = СтрокаПредоплатыДоОтгрузки.СуммаПлатежа + СтрокаПредоплатыДоОтгрузки.СуммаЗалогаЗаТару;
		
	КонецЕсли;

КонецПроцедуры


// Возвращает структуру параметров представления налоговых накладных в документе.
//
// Параметры:
//  Основание - ДокументСсылка - Документ, на основании которого вводится налоговый документ;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется налоговый документ;
//	НеТребуется - Булево - Истина - для документа не требуется вводить налоговый документ.
//
// Возвращаемое значение:
//	Строка - Представление налоговых документов.
//
Функция ПредставленияНалоговыхДокументовВДокументеПродажи(Основание, Организация, НеТребуется = Ложь) Экспорт
	
	НалоговыеДокументы = НДСИсходящийСервер.НалоговыеДокументыПоОснованию(Основание, Организация);
	МассивСтрок = Новый Массив;
	
	Если НалоговыеДокументы.Количество() > 0 Тогда
		
		ТекстНалоговыеДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Налоговые документы (%1)';uk='Податкові документи (%1)'"), Строка(НалоговыеДокументы.Количество()));
			
		СтрокаГиперссылки = Новый ФорматированнаяСтрока(
			ТекстНалоговыеДокументы, , 
			ЦветаСтиля.ЦветГиперссылки, ,
			"ВвестиНовыйНалоговыйДокумент");
		
		МассивСтрок.Добавить(СтрокаГиперссылки);
		
	ИначеЕсли НеТребуется Тогда
		
		ТекстНалоговыеДокументы = НСтр("ru='Налоговые документы не требуются';uk='Податкові документи не потрібні'");
		
		МассивСтрок.Добавить(ТекстНалоговыеДокументы);
		
	ИначеЕсли Не ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.НалоговаяНакладная) Тогда
		
		ТекстНалоговыеДокументы = НСтр("ru='Налоговые документы отсутствуют';uk='Податкові документи відсутні'");

		МассивСтрок.Добавить(ТекстНалоговыеДокументы);
		
	Иначе
		
		ТекстНалоговыеДокументы = НСтр("ru='Оформить налоговые документы';uk='Оформити податкові документи'");
		
		СтрокаГиперссылки = Новый ФорматированнаяСтрока(
			ТекстНалоговыеДокументы, ,
			ЦветаСтиля.ЦветГиперссылки, ,
			"ВвестиНовыйНалоговыйДокумент");
		
		МассивСтрок.Добавить(СтрокаГиперссылки);
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции // ПараметрыПредставленияНалоговыхДокументов

// Устанавливает режим выбора групп и элементов у склада на форме
//
Процедура УстановитьРежимВыбораГруппЭлементовСклада(Склад) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи") Тогда
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	Иначе
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора налогообложения "Продажа на экспорт" в форме.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Поле - ПолеФормы - Поле формы для выбора налогообложения
//
Процедура ЗаполнитьСписокВыбораНалогообложения(Поле, ХозяйственнаяОперация = Неопределено) Экспорт
	
	СписокНалогообложений = Поле.СписокВыбора;
	
	Если СписокНалогообложений.Количество() = 0 Тогда
		СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС);
		СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	КонецЕсли;
	
	ДоступнаПродажаНаЭкспорт = Константы.ИспользоватьПродажиНаЭкспорт.Получить();
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставОС
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставНМА
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		ДоступнаПродажаНаЭкспорт = Ложь;
	КонецЕсли;
	
	ЗначениеНаЭкспорт = СписокНалогообложений.НайтиПоЗначению(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	
	Если ДоступнаПродажаНаЭкспорт И ЗначениеНаЭкспорт = Неопределено Тогда
		СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	ИначеЕсли НЕ ДоступнаПродажаНаЭкспорт И ЗначениеНаЭкспорт <> Неопределено Тогда
		СписокНалогообложений.Удалить(ЗначениеНаЭкспорт);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	
КонецПроцедуры

// Получает все доступные договоры для переданных параметров
//
// Параметры:
// 		ТекущийДоговор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на текущий договор
// 		Партнер - СправочникСсылка.Партнеры - Деловой партнер предприятия, которому осуществляются продажи;
//		Контрагент - СправочникСсылка.Контрагенты - Контрагент, с которым заключен договор;
//		Организация - СправочникСсылка.Организации - Организация предприятия, от имени которой заключен договор;
//		ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных операций (тип договора);
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору;
//		Соглашение - СправочникСсылка.СоглашенияСКлиентами - Если не задан порядок, он будет получен из соглашения с клиентом.
// 
// Возвращаемое значение:
// 		Массив - массив доступных договоров
//
Функция ПолучитьДоступныеДоговоры(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации = Неопределено,
	ВалютаВзаиморасчетов = Неопределено,
	Соглашение = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА &ТекущийДоговор = ДоговорыКонтрагентов.Ссылка
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.Партнер = &Партнер
		|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ((НЕ &ОтборХозяйственнаяОперация)
		|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
		|	И ((НЕ &ОтборВалютаВзаиморасчетов)
		|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
		|	И ((НЕ &ОтборСоглашение)
		|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ПорядокОплаты = ДоговорыКонтрагентов.ПорядокОплаты
		|				И ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ИспользуютсяДоговорыКонтрагентов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов", ВалютаВзаиморасчетов <> Неопределено);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборСоглашение", Соглашение <> Неопределено);
	Запрос.УстановитьПараметр("Соглашение", ?(Соглашение=Неопределено, Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Соглашение));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе 
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции


// Заполняет документы реализаций и цены в табличной части документов возврата
//
// Параметры:
//		ДокументВозврата - ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента или ДокументОбъект.ВозвратТоваровОтКлиента
//		ИмяТаблицы - Имя таблицы Товары
Процедура ЗаполнитьРеализацииИЦены(ДокументВозврата, ИмяТаблицы) Экспорт
	Запрос = Новый Запрос;
	
	ТаблицаПроверяемыхТоваров = ДокументВозврата[ИмяТаблицы].Выгрузить();
	ТабличнаяЧастьВозврата    = ДокументВозврата[ИмяТаблицы];
	
	ВозвратОтРозничногоПокупателя = (ДокументВозврата.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	ЕстьПравоНаТару = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара);
	
	Если НЕ ВозвратОтРозничногоПокупателя Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Серия,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка,
		|	ВозвратТоваровОтКлиентаТовары.Количество
		|ПОМЕСТИТЬ ЗаполняемыеТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыРеализации
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО ЗаполняемыеТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = РеализацияТоваровУслугТовары.Характеристика
		|			И ЗаполняемыеТовары.Серия = РеализацияТоваровУслугТовары.Серия
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Проведен
		|	И РеализацияТоваровУслугТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
		|	И РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
		|	И РеализацияТоваровУслугТовары.Ссылка.Организация = &Организация
		|	И ВЫБОР
		|		КОГДА НЕ &ИспользоватьСоглашенияСКлиентами
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Соглашение = &Соглашение
		|	КОНЕЦ
		|	И РеализацияТоваровУслугТовары.Ссылка.Партнер = &Партнер
		|	И РеализацияТоваровУслугТовары.Ссылка.Дата <= &ДатаВозврата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КорректировкаРеализации.Дата) КАК Дата,
		|	ДокументыРеализации.Ссылка КАК СсылкаРеализации
		|ПОМЕСТИТЬ ДанныеКорректировки
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО (КорректировкаРеализации.ДокументОснование = ДокументыРеализации.Ссылка)
		|ГДЕ
		|	КорректировкаРеализации.Проведен
		|	И НЕ КорректировкаРеализации.ХозяйственнаяОперация В 
		|		(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара), 
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыРеализации.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СсылкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КорректировкаРеализации.Ссылка) КАК Ссылка,
		|	МАКСИМУМ(КорректировкаРеализации.Ссылка.Дата) КАК Дата,
		|	КорректировкаРеализации.Ссылка.ДокументОснование КАК СсылкаРеализации
		|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	(КорректировкаРеализации.Ссылка.ДокументОснование, КорректировкаРеализации.Ссылка.Дата) В
		|			(ВЫБРАТЬ
		|				ДанныеКорректировки.СсылкаРеализации КАК СсылкаРеализации,
		|				ДанныеКорректировки.Дата КАК Дата
		|			ИЗ
		|				ДанныеКорректировки)
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаРеализации.Ссылка.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	СсылкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА ДокументыРеализации.Ссылка
		|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
		|	КОНЕЦ КАК Ссылка
		|ПОМЕСТИТЬ СсылкиНаРеализации
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|		ПО ДокументыРеализации.Ссылка = ДанныеПоследнейКорректировки.СсылкаРеализации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия КАК Серия,
		|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.Упаковка,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	СУММА(ТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
		|	СУММА(ТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
		|	ТаблицаТовары.ДокументРеализации КАК ДокументРеализации
		|ПОМЕСТИТЬ ДанныеРеализации
		|ИЗ
		|	(ВЫБРАТЬ 
		|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализацииТовары.Характеристика КАК Характеристика,
		|	КорректировкаРеализацииТовары.Серия КАК Серия,
		|	КорректировкаРеализацииТовары.КоличествоУпаковок,
		|	КорректировкаРеализацииТовары.Количество,
		|	КорректировкаРеализацииТовары.Цена,
		|	КорректировкаРеализацииТовары.Упаковка,
		|	КорректировкаРеализацииТовары.Сумма,
		|	0 КАК СуммаРучнойСкидки,
		|	0 КАК СуммаАвтоматическойСкидки,
		|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование КАК ДокументРеализации
		|ИЗ
		|	СсылкиНаРеализации КАК СсылкиНаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|		ПО (КорректировкаРеализацииТовары.Ссылка = СсылкиНаРеализации.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика,
		|	РеализацияТоваровУслугТовары.Серия,
		|	РеализацияТоваровУслугТовары.КоличествоУпаковок,
		|	РеализацияТоваровУслугТовары.Количество,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.СуммаРучнойСкидки + РеализацияТоваровУслугТовары.СуммаАвтоматическойСкидки = 0
		|				ИЛИ РеализацияТоваровУслугТовары.КоличествоУпаковок = 0
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма / РеализацияТоваровУслугТовары.КоличествоУпаковок
		|	КОНЕЦ,
		|	РеализацияТоваровУслугТовары.Упаковка,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СуммаРучнойСкидки,
		|	РеализацияТоваровУслугТовары.СуммаАвтоматическойСкидки,
		|	РеализацияТоваровУслугТовары.Ссылка
		|ИЗ
		|	СсылкиНаРеализации КАК СсылкиНаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО (РеализацияТоваровУслугТовары.Ссылка = СсылкиНаРеализации.Ссылка))  КАК ТаблицаТовары
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.Упаковка,
		|	ТаблицаТовары.ДокументРеализации
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации
		|ПОМЕСТИТЬ ДанныеДокументовВозврата
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
		|		ПО (ТаблицаПроверяемыеТовары.ДокументРеализации = ДокументыРеализации.Ссылка)
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	ДокументРеализации
		|;" +
		?(ЕстьПравоНаТару, "////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереданнаяВозвратнаяТараОстатки.Номенклатура КАК Номенклатура,
		|	ПереданнаяВозвратнаяТараОстатки.Характеристика КАК Характеристика,
		|	ПереданнаяВозвратнаяТараОстатки.Партнер КАК Партнер,
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи КАК ДокументРеализации,
		|	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток КАК Количество,
		|	ПереданнаяВозвратнаяТараОстатки.СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ втПереданнаяВозвратнаяТара
		|ИЗ
		|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(
		|			, 
		|			(Номенклатура, Характеристика, Партнер) В
		|			(ВЫБРАТЬ
		|				Таблица.Номенклатура КАК Номенклатура,
		|				Таблица.Характеристика КАК Характеристика,
		|				&Партнер КАК Партнер
		|			ИЗ
		|				ЗаполняемыеТовары КАК Таблица)
		|	) КАК ПереданнаяВозвратнаяТараОстатки
		|ГДЕ
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи.Контрагент = &Контрагент И
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи.Организация = &Организация И
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьСоглашенияСКлиентами
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ПереданнаяВозвратнаяТараОстатки.ДокументПередачи.Соглашение = &Соглашение
		|	КОНЕЦ И
		|	&ВозвратПереданнойМногооборотнойТары
		|;", "") +
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДанныеРеализации.Номенклатура КАК Номенклатура,
		|	ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) КАК Количество,
		|	ДанныеРеализации.Характеристика КАК Характеристика,
		|	ДанныеРеализации.Серия КАК Серия,
		|	ВЫБОР
		|		КОГДА ДанныеРеализации.Упаковка = ЗаполняемыеТовары.Упаковка
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеРеализации.Упаковка ЕСТЬ NULL 
		|							ИЛИ ДанныеРеализации.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|						ТОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
		|					ИНАЧЕ (ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки1
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
		|				ИНАЧЕ (ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки2
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) = 0
		|			ТОГДА ДанныеРеализации.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДанныеРеализации.Упаковка = ЗаполняемыеТовары.Упаковка
		|					ТОГДА ВЫБОР
		|							КОГДА ДанныеРеализации.Упаковка ЕСТЬ NULL 
		|									ИЛИ ДанныеРеализации.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|								ТОГДА ДанныеРеализации.Сумма / (ДанныеРеализации.Количество)
		|							ИНАЧЕ ДанныеРеализации.Сумма / (ДанныеРеализации.Количество / &ТекстЗапросаКоэффициентУпаковки1)
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|								ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|							ТОГДА ДанныеРеализации.Сумма / (ДанныеРеализации.Количество)
		|					ИНАЧЕ ДанныеРеализации.Сумма / (ДанныеРеализации.Количество / &ТекстЗапросаКоэффициентУпаковки2)
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ДанныеРеализации.ДокументРеализации.Дата КАК ДатаРеализации,
		|	ДанныеРеализации.ДокументРеализации КАК ДокументРеализации,
		|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
		|	НЕОПРЕДЕЛЕНО ДатаПередачиТары
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРеализации КАК ДанныеРеализации
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
		|			ПО ДанныеРеализации.ДокументРеализации = ДанныеДокументовВозврата.ДокументРеализации
		|				И ДанныеРеализации.Номенклатура = ДанныеДокументовВозврата.Номенклатура
		|				И ДанныеРеализации.Характеристика = ДанныеДокументовВозврата.Характеристика
		|				И ДанныеРеализации.Серия = ДанныеДокументовВозврата.Серия
		|		ПО ЗаполняемыеТовары.Номенклатура = ДанныеРеализации.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ДанныеРеализации.Характеристика
		|			И ЗаполняемыеТовары.Серия = ДанныеРеализации.Серия
		|ГДЕ
		|	ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) > 0
		|	И ВЫБОР 
		|		КОГДА НЕ ДанныеРеализации.ДокументРеализации.ВернутьМногооборотнуюТару ТОГДА
		|			ДанныеРеализации.Номенклатура.ТипНоменклатуры В
		|				(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ИНАЧЕ ДанныеРеализации.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
		|	КОНЕЦ
		| " + 
		?(ЕстьПравоНаТару, "ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втПереданнаяВозвратнаяТара.Номенклатура КАК Номенклатура,
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) КАК Количество,
		|	втПереданнаяВозвратнаяТара.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА СУММА(втПереданнаяВозвратнаяТара.Количество) = 0
		|			ТОГДА СУММА(втПереданнаяВозвратнаяТара.Сумма)
		|		ИНАЧЕ СУММА(втПереданнаяВозвратнаяТара.Сумма) / СУММА(втПереданнаяВозвратнаяТара.Количество)
		|	КОНЕЦ КАК Цена,
		|	втПереданнаяВозвратнаяТара.ДокументРеализации.Дата КАК ДатаРеализации,
		|	втПереданнаяВозвратнаяТара.ДокументРеализации КАК ДокументРеализации,
		|	ИСТИНА КАК ЭтоВозвратнаяТара,
		|	втПереданнаяВозвратнаяТара.ДокументРеализации.ДатаВозвратаМногооборотнойТары КАК ДатаВозвратаТары
		|ИЗ
		|	втПереданнаяВозвратнаяТара КАК втПереданнаяВозвратнаяТара
		|
		|СГРУППИРОВАТЬ ПО
		|	втПереданнаяВозвратнаяТара.Номенклатура,
		|	втПереданнаяВозвратнаяТара.Характеристика,
		|	втПереданнаяВозвратнаяТара.ДокументРеализации
		|
		|ИМЕЮЩИЕ
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) > 0", "") + "
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоВозвратнаяТара ВОЗР,
		|	ДатаРеализации УБЫВ,
		|	ДатаПередачиТары ВОЗР";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ДанныеРеализации.Упаковка",
			"ДанныеРеализации.Номенклатура"));
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЗаполняемыеТовары.Упаковка",
			"ЗаполняемыеТовары.Номенклатура"));
			
		Запрос.УстановитьПараметр("Партнер", ДокументВозврата.Партнер);
		Запрос.УстановитьПараметр("Контрагент", ДокументВозврата.Контрагент);
		Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
		Запрос.УстановитьПараметр("Соглашение", ДокументВозврата.Соглашение);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
		Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
		Запрос.УстановитьПараметр("ВозвратПереданнойМногооборотнойТары", ?(ИмяТаблицы = "ВозвращаемыеТовары", 
				ДокументВозврата.ВернутьМногооборотнуюТару, 
				ДокументВозврата.ВозвратПереданнойМногооборотнойТары));
		Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", 
				ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
		Запрос.УстановитьПараметр("ДатаВозврата", ?(ЗначениеЗаполнено(ДокументВозврата.Дата),ДокументВозврата.Дата,ТекущаяДатаСеанса()));
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Серия КАК Серия,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Количество,
		|	ВозвратТоваровОтКлиентаТовары.НомерСтроки,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка
		|ПОМЕСТИТЬ ЗаполняемыеТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Характеристика КАК Характеристика,
		|	ЧекККМТовары.Серия КАК Серия,
		|	ЧекККМТовары.Упаковка КАК Упаковка,
		|	СУММА(ЧекККМТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ЧекККМТовары.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА СУММА(ЧекККМТовары.СуммаРучнойСкидки) + СУММА(ЧекККМТовары.СуммаАвтоматическойСкидки) = 0
		|				ИЛИ СУММА(ЧекККМТовары.КоличествоУпаковок) = 0
		|			ТОГДА ЧекККМТовары.Цена
		|		ИНАЧЕ СУММА(ЧекККМТовары.Сумма) / СУММА(ЧекККМТовары.КоличествоУпаковок)
		|	КОНЕЦ КАК Цена,
		|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации,
		|	Сумма(ЧекККМТовары.Сумма),
		|	ЧекККМТовары.СуммаАвтоматическойСкидки,
		|	ЧекККМТовары.СуммаРучнойСкидки
		|ПОМЕСТИТЬ ЧекиККМ
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ПО ЗаполняемыеТовары.Номенклатура = ЧекККМТовары.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ЧекККМТовары.Характеристика
		|ГДЕ
		|	(ЧекККМТовары.Ссылка.Партнер = &Партнер
		|			ИЛИ &Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.Организация = &Организация
		|	И (ЧекККМТовары.Ссылка = &ЧекККМ ИЛИ &ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка))
		|	И ЧекККМТовары.Ссылка.Дата <= &ДатаВозврата
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Серия,
		|	ЧекККМТовары.Упаковка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.Ссылка.Дата,
		|	ЧекККМТовары.СуммаАвтоматическойСкидки,
		|	ЧекККМТовары.СуммаРучнойСкидки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации,
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
		|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
		|	ЧекККМВозвратТовары.Серия КАК Серия,
		|	ЧекККМВозвратТовары.Упаковка КАК Упаковка,
		|	СУММА(ЧекККМВозвратТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
		|	ЧекККМВозвратТовары.Цена КАК Цена,
		|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации,
		|	ЧекККМВозвратТовары.Сумма
		|ПОМЕСТИТЬ ЧекиККМВозврат
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
		|ГДЕ
		|	ЧекККМВозвратТовары.Ссылка.Проведен
		|	И ЧекККМВозвратТовары.Ссылка.Организация = &Организация
		|	И ЧекККМВозвратТовары.Ссылка.Дата <= &ДатаВозврата
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМВозвратТовары.Упаковка,
		|	ЧекККМВозвратТовары.Номенклатура,
		|	ЧекККМВозвратТовары.Ссылка,
		|	ЧекККМВозвратТовары.Характеристика,
		|	ЧекККМВозвратТовары.Серия,
		|	ЧекККМВозвратТовары.Цена,
		|	ЧекККМВозвратТовары.Ссылка.Дата,
		|	ЧекККМВозвратТовары.Сумма
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации,
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаПроверяемыеТовары.Ссылка
		|ПОМЕСТИТЬ ДанныеВозврата
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
		|	ПО (ТаблицаПроверяемыеТовары.ДокументРеализации = ЧекиККМ.ДокументРеализации)
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации,
		|	ТаблицаПроверяемыеТовары.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации,
		|	ЧекиККМ.Номенклатура,
		|	ЧекиККМ.Характеристика,
		|	ЧекиККМ.Серия,
		|	ЧекиККМ.Упаковка,
		|	ВЫБОР
		|		КОГДА ЧекиККМ.Упаковка = ЗаполняемыеТовары.Упаковка ТОГДА
		|			ВЫБОР
		|				КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
		|				ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки1
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
		|				ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки2
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) = 0
		|			ТОГДА ЧекиККМ.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЧекиККМ.Упаковка = ЗаполняемыеТовары.Упаковка ТОГДА
		|					ВЫБОР
		|						КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
		|							ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|						ТОГДА ЧекиККМ.Сумма / (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0))
		|					ИНАЧЕ ЧекиККМ.Сумма / ((ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки1)
		|				КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР
		|					КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Сумма / ЧекиККМ.Количество
		|					ИНАЧЕ ЧекиККМ.Сумма / (ЧекиККМ.Количество / &ТекстЗапросаКоэффициентУпаковки2)
		|				КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМ КАК ЧекиККМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
		|			ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
		|				И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
		|				И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
		|				И ЧекиККМ.Серия = ЧекиККМВозврат.Серия
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
		|			ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.Ссылка.ЧекККМ
		|				И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
		|				И ЧекиККМ.Характеристика = ДанныеВозврата.Характеристика
		|				И ЧекиККМ.Серия = ДанныеВозврата.Серия
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|			ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
		|		ПО ЗаполняемыеТовары.Номенклатура = ЧекиККМ.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ЧекиККМ.Характеристика
		|			И ЗаполняемыеТовары.Серия = ЧекиККМ.Серия
		|ГДЕ
		|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) > 0
		|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРеализации УБЫВ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЧекиККМ.Упаковка",
			"ЧекиККМ.Номенклатура"));
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЗаполняемыеТовары.Упаковка",
			"ЗаполняемыеТовары.Номенклатура"));
			
		Запрос.УстановитьПараметр("Партнер", ДокументВозврата.Партнер);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
		Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
		Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
		Запрос.УстановитьПараметр("ЧекККМ", ДокументВозврата.ЧекККМ);
		Запрос.УстановитьПараметр("ДатаВозврата", ?(ЗначениеЗаполнено(ДокументВозврата.Дата),ДокументВозврата.Дата,ТекущаяДатаСеанса()));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТовары Из ТабличнаяЧастьВозврата Цикл
		НайденныеСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Серия",
														СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика, СтрокаТовары.Серия));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокаТовары.Количество <= НайденнаяСтрока.Количество Тогда
				
				СтрокаТовары.ДокументРеализации = НайденнаяСтрока.ДокументРеализации;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТовары.Количество;
				НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаТовары.КоличествоУпаковок;
				Если НайденнаяСтрока.Количество = 0 Тогда
					РезультатЗапроса.Удалить(НайденнаяСтрока);
				КонецЕсли;
			Иначе
				СтрокаТовары.ДокументРеализации = НайденнаяСтрока.ДокументРеализации;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				ДобавленнаяСтрока = ТабличнаяЧастьВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтрокаТовары, ,"КодСтроки");
				ДобавленнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок -  НайденнаяСтрока.КоличествоУпаковок;
				ДобавленнаяСтрока.Количество = СтрокаТовары.Количество - НайденнаяСтрока.Количество;
				СтрокаТовары.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок;
				СтрокаТовары.Количество = НайденнаяСтрока.Количество;
				РезультатЗапроса.Удалить(НайденнаяСтрока);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.ДокументРеализации = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			СтрокаТовары.Цена = 0;
		КонецЕсли;
	КонецЦикла;
		
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументВозврата);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ТипЗнч(ДокументВозврата.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", Новый Структура("ОтмененоБезВозвратнойТары", "Сумма, СуммаНДС, СуммаСНДС"));
	КонецЕсли;
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТабличнаяЧастьВозврата, СтруктураДействий, Неопределено);

КонецПроцедуры

// Обновляет информацию о количестве документов реализаций в табличной части документа возврата
//
// Параметры:
//		СписокРеализаций - Список значений, содержащий список документов реализаций
//		РеализацияВШапке - Ссылка на документ реализации в шапке документа
//		НадписьЗаголовок - Надпись, содержащая информацию о количестве документов реализаций
//		ЭлементыФормы - Элементы формы документа возврата
//		КолонкаВТабличнойЧасти - Колонка табличной части, содержащая документы реализации
//		ТабличнаяЧасть - Табличная часть документа возврата
//		ИмяРеализацииВТабличнойЧасти - Название колонки с документами реализаций в табличной части
//		
Процедура ОбновитьИнформациюПоРеализациямВФорме(СписокРеализаций,
	                                            РеализацияВШапке,
	                                            НадписьЗаголовок,
	                                            ЭлементыФормы,
	                                            КолонкаВТабличнойЧасти,
	                                            Знач ТабличнаяЧасть,
	                                            Знач ИмяРеализацииВТабличнойЧасти) Экспорт
	
	СписокРеализаций.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяРеализацииВТабличнойЧасти]) И СписокРеализаций.НайтиПоЗначению(ТекСтрока[ИмяРеализацииВТабличнойЧасти]) = Неопределено Тогда
			СписокРеализаций.Добавить(ТекСтрока[ИмяРеализацииВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокРеализаций.Количество() = 1 Тогда
		РеализацияВШапке = СписокРеализаций[0].Значение;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() > 1 Тогда
		НадписьЗаголовок = СтрЗаменить(
			НСтр("ru='Всего документов: %КоличествоРеализаций%';uk='Всього документів: %КоличествоРеализаций%'"), "%КоличествоРеализаций%",
			СписокРеализаций.Количество());
		РеализацияВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() < 1 Тогда
		РеализацияВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыРеализации.ТекущаяСтраница = ЭлементыФормы.СтраницаРеализация;
	Иначе
		ЭлементыФормы.СтраницыРеализации.ТекущаяСтраница = ЭлементыФормы.СтраницаРеализации;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ возврата товарами по чеку ККМ
//
// Параметры:
//		ДокументВозврата - ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента или ДокументОбъект.ВозвратТоваровОтКлиента
//		ИмяТаблицы - Имя таблицы Товары
Процедура ЗаполнитьВозвращаемыеТоварыПоЧеку (ДокументВозврата, ИмяТаблицы) Экспорт
	
	ТаблицаПроверяемыеТовары = ДокументВозврата[ИмяТаблицы].Выгрузить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Упаковка КАК Упаковка,
	|	СУММА(ЧекККМТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЧекККМТовары.Количество) КАК Количество,
	|	ЧекККМТовары.Цена КАК Цена,
	|	СУММА(ЧекККМТовары.Сумма) КАК Сумма,
	|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЧекККМТовары.СуммаНДС) КАК СуммаНДС,
	|	ЧекККМТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	СУММА(ЧекККМТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|	ЧекККМТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	СУММА(ЧекККМТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
	|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации,
	|	ЧекККМТовары.Ссылка.Номер КАК НомерРеализации,
	|	ЧекККМТовары.Ссылка.Валюта КАК ВалютаРеализации,
	|	ЧекККМТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекККМТовары.Ссылка.Партнер КАК Партнер
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМ
	|	И ЧекККМТовары.Ссылка.Проведен
	|	И ЧекККМТовары.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.Ссылка,
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Упаковка,
	|	ЧекККМТовары.Цена,
	|	ЧекККМТовары.СтавкаНДС,
	|	ЧекККМТовары.ПроцентАвтоматическойСкидки,
	|	ЧекККМТовары.ПроцентРучнойСкидки,
	|	ЧекККМТовары.Ссылка.Дата,
	|	ЧекККМТовары.Ссылка.Номер,
	|	ЧекККМТовары.Ссылка.Валюта,
	|	ЧекККМТовары.Ссылка.ЦенаВключаетНДС,
	|	ЧекККМТовары.Ссылка.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
	|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
	|	ЧекККМВозвратТовары.Упаковка КАК Упаковка,
	|	СУММА(ЧекККМВозвратТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
	|	ЧекККМВозвратТовары.Цена КАК Цена,
	|	СУММА(ЧекККМВозвратТовары.Сумма) КАК Сумма,
	|	ЧекККМВозвратТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЧекККМВозвратТовары.СуммаНДС) КАК СуммаНДС,
	|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации,
	|	ЧекККМВозвратТовары.Ссылка.Номер КАК НомерРеализации,
	|	ЧекККМВозвратТовары.Ссылка.Валюта КАК ВалютаРеализации,
	|	ЧекККМВозвратТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекККМВозвратТовары.Ссылка.Партнер КАК Партнер
	|ПОМЕСТИТЬ ЧекиККМВозврат
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
	|ГДЕ
	|	ЧекККМВозвратТовары.Ссылка.ЧекККМ = &ЧекККМ
	|	И ЧекККМВозвратТовары.Ссылка.Проведен
	|	И ЧекККМВозвратТовары.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМВозвратТовары.Упаковка,
	|	ЧекККМВозвратТовары.Номенклатура,
	|	ЧекККМВозвратТовары.СтавкаНДС,
	|	ЧекККМВозвратТовары.Ссылка,
	|	ЧекККМВозвратТовары.Характеристика,
	|	ЧекККМВозвратТовары.Цена,
	|	ЧекККМВозвратТовары.Ссылка.Дата,
	|	ЧекККМВозвратТовары.Ссылка.Номер,
	|	ЧекККМВозвратТовары.Ссылка.Валюта,
	|	ЧекККМВозвратТовары.Ссылка.ЦенаВключаетНДС,
	|	ЧекККМВозвратТовары.Ссылка.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
	|	ТаблицаПроверяемыеТовары.ДокументРеализации,
	|	ТаблицаПроверяемыеТовары.Ссылка,
	|	СУММА(ТаблицаПроверяемыеТовары.Сумма) КАК Сумма,
	|	СУММА(ТаблицаПроверяемыеТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаПроверяемыеТовары.СуммаСНДС) КАК СуммаСНДС
	|ПОМЕСТИТЬ ДанныеВозврата
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
	|		ПО ЧекиККМ.ДокументРеализации = ТаблицаПроверяемыеТовары.Ссылка.ЧекККМ
	|ГДЕ
	|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
	|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	ТаблицаПроверяемыеТовары.ДокументРеализации,
	|	ТаблицаПроверяемыеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации,
	|	ЧекиККМ.Номенклатура КАК Номенклатура,
	|	ЧекиККМ.Характеристика КАК Характеристика,
	|	ЧекиККМ.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
	|				ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
	|		ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) = 0
	|			ТОГДА ЧекиККМ.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
	|						ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА ЧекиККМ.Сумма / ЧекиККМ.Количество
	|				ИНАЧЕ ЧекиККМ.Сумма / (ЧекиККМ.Количество / &ТекстЗапросаКоэффициентУпаковки)
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЧекиККМ.Сумма - ЕСТЬNULL(ДанныеВозврата.Сумма, 0) - ЕСТЬNULL(ЧекиККМВозврат.Сумма, 0) КАК Сумма,
	|	ЧекиККМ.СтавкаНДС КАК СтавкаНДС,
	|	ЧекиККМ.СуммаНДС - ЕСТЬNULL(ДанныеВозврата.СуммаНДС, 0) - ЕСТЬNULL(ЧекиККМВозврат.СуммаНДС, 0) КАК СуммаНДС,
	|	ЧекиККМ.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЧекиККМ.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекиККМ.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЧекиККМ.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
	|	ЧекиККМ.НомерРеализации КАК НомерРеализации,
	|	ЧекиККМ.ВалютаРеализации КАК ВалютаРеализации,
	|	ЧекиККМ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекиККМ.Партнер КАК Партнер,
	|	ЧекиККМ.ДокументРеализации.Склад КАК Склад
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
	|		ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
	|			И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
	|			И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
	|		ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.Ссылка.ЧекККМ
	|			И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
	|			И ЧекиККМ.Характеристика = ДанныеВозврата.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) > 0
	|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРеализации УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЧекиККМ.Упаковка",
		"ЧекиККМ.Номенклатура"));
		
	Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
	Запрос.УстановитьПараметр("ЧекККМ", ДокументВозврата.ЧекККМ);
	Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументВозврата[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ДокументВозврата.Валюта <> Выборка.ВалютаРеализации Тогда
			КурсНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументВозврата.Валюта, ДокументВозврата.Дата);
			КурсСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаРеализации, ДокументВозврата.Дата);
			
			НоваяСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.Цена,
				Выборка.ВалютаРеализации,ДокументВозврата.Валюта,
				КурсСтаройВалюты.Курс,КурсНовойВалюты.Курс,
				КурсСтаройВалюты.Кратность,КурсНовойВалюты.Кратность);
		
		КонецЕсли;
		
		Ценообразование.ПересчитатьСуммыВСтроке(
				НоваяСтрока,
				Ложь,
				Истина,
				Ложь,
				ДокументВозврата.ЦенаВключаетНДС);
		
	КонецЦикла;
		
КонецПроцедуры

// Проверяет корректность заполнения этапов графика оплаты в таблице значений
//
// Параметры:
// ЭтапыГрафикаОплаты               - Таблица значений, для которой необходимо осуществить проверки
// СуммаОплатыПоДокументу           - Число - Сумма платежей по документу, в котором необходимо осуществить проверку
// СуммаЗалогаПоДокументу           - Число - Сумма залога за тару по документу, в котором необходимо осуществить проверку
// УчитыватьВариантОплаты           - Булево - признак необходимости проверки корректности вариантов оплаты
// Отказ                            - Булево - Флаг отказа от записи документа
// УпрощенныйРежимДиалога           - Булево - флаг, указывающий на использование простого диалога ввода этапов оплаты
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплатыПоТаблицеЗначений(Знач ЭтапыГрафикаОплаты,
	                                               СуммаОплатыПоДокументу,
	                                               СуммаЗалогаПоДокументу,
	                                               УчитыватьВариантОплаты,
	                                               Отказ,
	                                               УпрощенныйРежимДиалога = Ложь,
	                                               СтруктураПараметров) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Дата) Тогда
		ДатаДокумента = НачалоДня(СтруктураПараметров.Дата);
	КонецЕсли;
	
	СуммаОплатыВсего = Окр(СуммаОплатыПоДокументу, 2);
	СуммаЗалогаВсего = Окр(СуммаЗалогаПоДокументу, 2);
	
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаОплатыВсего <> 0 Или СуммаЗалогаВсего <> 0 Тогда
			
			Если УпрощенныйРежимДиалога Тогда
				ТекстОшибки = НСтр("ru='Необходимо заполнить хотя бы один из этапов';uk='Необхідно заповнити хоча б один з етапів'");
				ПолеОшибки  = "ПроцентПлатежаКредит";
			Иначе
				ТекстОшибки = НСтр("ru='Необходимо заполнить этапы графика оплаты';uk='Необхідно заповнити етапи графіка оплати'");
				ПолеОшибки  = "Объект.ЭтапыГрафикаОплаты";
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
			
		КонецЕсли;
		
	Иначе
		
		ИтогПроцентПлатежа = 0;
		ИтогПроцентЗалогаЗаТару = 0;
		ИтогСуммаПлатежа = 0;
		ИтогСуммаЗалогаЗаТару = 0;
		Для ТекИндекс = 0 По ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			ДанныеЭтапа = Новый Структура("НомерСтроки, ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, ПроцентЗалогаЗаТару, СуммаПлатежа, СуммаЗалогаЗаТару",
				0, Неопределено, '00010101', 0, 0, 0, 0);
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ЭтапыГрафикаОплаты[ТекИндекс]);
			ИтогПроцентПлатежа = ИтогПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			ИтогПроцентЗалогаЗаТару = ИтогПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
			ИтогСуммаПлатежа = ИтогСуммаПлатежа + ДанныеЭтапа.СуммаПлатежа;
			ИтогСуммаЗалогаЗаТару = ИтогСуммаЗалогаЗаТару + ДанныеЭтапа.СуммаЗалогаЗаТару;
			
			АдресОшибки = НСтр("ru='в строке %НомерСтроки% списка ""Этапы графика оплаты""';uk='у рядку %НомерСтроки% списку ""Етапи графіка оплати""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДанныеЭтапа.НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОплаты) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вариант оплаты""';uk='Не заповнена колонка ""Варіант оплати""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОплаты"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
						ТекстОшибки = НСтр("ru='Не заполнена ""Дата платежа"" по кредиту';uk='Не заповнена ""Дата платежу"" за кредитом'");
						ПолеОшибки  = "ДатаКредит";
					Иначе
						ТекстОшибки = НСтр("ru='Не заполнена ""Дата платежа"" по предоплате';uk='Не заповнена ""Дата платежу"" за передплатою'");
						ПолеОшибки  = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата платежа""';uk='Не заповнена колонка ""Дата платежу""'") + " " + АдресОшибки;
					ПолеОшибки  = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа""';uk='Не заповнена колонка ""Відсоток платежу""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаПлатежа) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа) И 
				СуммаОплатыВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма платежа""';uk='Не заповнена колонка ""Сума платежу""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаПлатежа"),
					,
					Отказ);
				
				КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаЗалогаЗаТару) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) И 
				СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма залога за тару""';uk='Не заповнена колонка ""Сума застави за тару""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
				ЗначениеЗаполнено(СтруктураПараметров.Дата) И
				ДанныеЭтапа.ДатаПлатежа < ДатаДокумента Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
						ПолеОшибки = "ДатаКредит";
					Иначе
						ПолеОшибки = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
				
				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%';uk='Дата платежу повинна бути не менше дати документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(СтруктураПараметров.Дата, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если УчитыватьВариантОплаты Тогда
			
				// Дата платежа по авансовому этапу должна быть не больше даты отгрузки в шапке
				Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаОтгрузки) И
					(ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) И
					ДанныеЭтапа.ДатаПлатежа > СтруктураПараметров.ЖелаемаяДатаОтгрузки Тогда
					
					ТекстОшибки = НСтр("ru='Дата платежа по авансовому этапу должна быть не больше желаемой даты отгрузки %ДатаОтгрузки%';uk='Дата платежу по авансовому етапу повинна бути не більше бажаної дати відвантаження %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(СтруктураПараметров.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(УпрощенныйРежимДиалога, "ДатаПредоплата", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты",ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				// Дата платежа по кредитному этапу должна быть не меньше даты отгрузки в шапке
				ИначеЕсли ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И 
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаОтгрузки) И
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки И
					ДанныеЭтапа.ДатаПлатежа < СтруктураПараметров.ЖелаемаяДатаОтгрузки Тогда
					
					ТекстОшибки = НСтр("ru='Дата платежа по кредитному этапу должна быть не меньше желаемой даты отгрузки %ДатаОтгрузки%';uk='Дата платежу по кредитному етапу повинна бути не менше бажаної дати відвантаження %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(СтруктураПараметров.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(УпрощенныйРежимДиалога, "ДатаКредит", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогПроцентПлатежа <> 100 И СуммаОплатыВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru='Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';uk='Відсоток платежів за всіма етапами ""%ПроцентПоЭтапам%%"" повинен дорівнювати ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентПлатежа);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(УпрощенныйРежимДиалога, "ПроцентПлатежаКредит", "ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
				
			Если ИтогПроцентЗалогаЗаТару <> 100 И СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Процент залога за тару по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';uk='Відсоток застави за тару за всіма етапами ""%ПроцентПоЭтапам%%"" повинен дорівнювати ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентЗалогаЗаТару);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(УпрощенныйРежимДиалога, "ПроцентЗалогаЗаТаруКредит", "ЭтапыГрафикаОплаты[0].ПроцентЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежей в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если СуммаОплатыВсего <> 0 И ИтогСуммаПлатежа <> СуммаОплатыВсего Тогда
				
				ТекстОшибки = НСтр("ru='Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы заказанных строк ""%СуммаВсего% %Валюта%""';uk='Сума платежів за всіма етапами ""%СуммаПоЭтапам% %Валюта%"" не повинна відрізнятися від суми замовлених рядків ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаПлатежа);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыВсего - СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);
				
				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
						ПолеОшибки = "СуммаПлатежаПредоплата";
					Иначе
						ПолеОшибки = "СуммаПлатежаКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаПлатежа";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если СуммаЗалогаВсего <> 0 И ИтогСуммаЗалогаЗаТару <> СуммаЗалогаВсего Тогда
				
				ТекстОшибки = НСтр("ru='Сумма залога за тару по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы залога по документу ""%СуммаВсего% %Валюта%""';uk='Сума застави за тару за всіма етапами ""%СуммаПоЭтапам% %Валюта%"" не повинна відрізнятися від суми застави за документом ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаЗалогаЗаТару);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);
				
				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
						ПолеОшибки = "СуммаЗалогаЗаТаруПредоплата";
					Иначе
						ПолеОшибки = "СуммаЗалогаЗаТаруКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаЗалогаЗаТару";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоЭтапов = ЭтапыГрафикаОплаты.Количество();
		
		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл
			
			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;
			
			Если УчитыватьВариантОплаты Тогда
				
				ПредыдущееЗначениеВариантаОплаты = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
				
				// В табличной части Этапы не должно быть строк со значением АвансДоОбеспечения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоОтгрузки
				// КредитПослеОтгрузки
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки ИЛИ
					 ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоОтгрузки
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеОтгрузки
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки) Тогда
					
					ТекстОшибки = НСтр("ru='Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
                    |не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%'
                    |;uk='Варіант оплати ""%ТекущееЗначениеВариантаОплаты%"" в рядку %ИндексТекущегоЭтапа%
                    |не може йти після варіанти оплати ""%ПредыдущееЗначениеВариантаОплаты%"" в рядку %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты"),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию
			Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И 
				ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
				ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					ТекстОшибки = НСтр("ru='Дата платежа по кредиту не должна быть меньше, чем дата платежа по предоплате';uk='Дата платежу по кредиту не повинна бути менше, ніж дата платежу по передплаті'");
					ПолеОшибки  = "ДатаПредоплата";
				Иначе
					ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
                    |списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'
                    |;uk='Дата платежу в рядку %ИндексТекущегоЭтапа%
                    |списку ""Етапи оплати"" має бути не менше, ніж у рядку %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);
					ПолеОшибки  = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет отображение ограничения задолженности в форме документа
//
// Параметры:
//	Договор           - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в документе
//	Текст             - Строка - Реквизит, которому присваивается текстовая строка об остатке допустимого кредита
//	ВидимостьТекста   - Булево - Реквизит, которому присвается значение видимости строки об остатке допустимого кредита
//	ЦветТекста        - ЦветаСтиля - Реквизит, которому присвается значение цвета строки об остатке допустимого кредита
//	ВидимостьКартинки - Булево - Реквизит, которому присваивается значение видимости картинки о запрете отгрузки
//
Процедура ОбновитьОграничениеЗадолженности(Договор, Дата, Текст, ВидимостьТекста, ЦветТекста, ВидимостьКартинки) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов)
	 И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		
		СоставРеквизитов = "
		|ОграничиватьСуммуЗадолженности,
		|ДопустимаяСуммаЗадолженности,
		|ВалютаВзаиморасчетов,
		|ЗапрещаетсяПросроченнаяЗадолженность";

		ДанныеДоговора = Новый Структура(СоставРеквизитов, Ложь, 0, Неопределено, Ложь);
		
		Если ЗначениеЗаполнено(Договор) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорыКонтрагентов.ОграничиватьСуммуЗадолженности КАК ОграничиватьСуммуЗадолженности,
			|	ДоговорыКонтрагентов.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
			|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДоговорыКонтрагентов.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Ссылка = &Договор");
			
			Запрос.УстановитьПараметр("Договор", Договор);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДанныеДоговора = Выборка;
			КонецЕсли;
			
		КонецЕсли;
		
		ПревышенаСумма = Ложь;
		Если ДанныеДоговора.ОграничиватьСуммуЗадолженности Тогда
			ОстатокДопустимогоКредита = ОстатокДопустимогоКредита(Договор, ДанныеДоговора.ДопустимаяСуммаЗадолженности);
			ПревышенаСумма = ОстатокДопустимогоКредита < 0;
		КонецЕсли;
		
		ПревышенСрок = Ложь;
		Если ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность Тогда
			СуммаПросроченнойЗадолженности = СуммаПросроченнойЗадолженности(Договор, Дата);
			ПревышенСрок = СуммаПросроченнойЗадолженности > 0;
		КонецЕсли;
		
		Если ПревышенаСумма ИЛИ ПревышенСрок Тогда
			Текст = НСтр("ru='Отгрузка запрещена';uk='Відвантаження заборонене'");
			ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			ВидимостьТекста = Истина;
			ВидимостьКартинки = Истина;
		ИначеЕсли ДанныеДоговора.ОграничиватьСуммуЗадолженности Тогда
			Текст = НСтр("ru='Остаток допустимого кредита:';uk='Залишок припустимого кредиту:'") + " " + Формат(ОстатокДопустимогоКредита, "ЧДЦ=2; ЧН=0,00") + " " + Строка(ДанныеДоговора.ВалютаВзаиморасчетов);
			ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			ВидимостьТекста = Истина;
			ВидимостьКартинки = Ложь;
		Иначе
			ВидимостьТекста = Ложь;
			ВидимостьКартинки = Ложь;
		КонецЕсли;
		
	Иначе
		
		ВидимостьТекста = Ложь;
		ВидимостьКартинки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры


// Формирует временную таблицу, содержащую коэффициенты упаковок по таблице товаров.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаТоваров с полями:
//		Ссылка,
//		НомерСтроки,
//		Номенклатура,
//		Упаковка,
//		КоличествоУпаковок,
//		Количество.
//
Процедура ПоместитьВременнуюТаблицуКоэффициентыУпаковок(МенеджерВременныхТаблиц, ИмяТаблицыТоваров = "ТаблицаТоваров") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	УпаковкиНоменклатуры.Владелец КАК Владелец,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
	|		КОНЕЦ) КАК Коэффициент
	|ПОМЕСТИТЬ Упаковки
	|ИЗ
	|	&ИмяТаблицыТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (УпаковкиНоменклатуры.Родитель = ТаблицаТоваров.Упаковка)
	|			И УпаковкиНоменклатуры.Владелец = 
	|				ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА ТаблицаТоваров.Номенклатура
	|					ИНАЧЕ ТаблицаТоваров.Упаковка.Владелец
	|				КОНЕЦ
	|ГДЕ
	|	НЕ УпаковкиНоменклатуры.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Упаковка,
	|	УпаковкиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.Номенклатура,
	|	Упаковки.Упаковка КАК Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки2 КАК КоэффициентУпаковки,
	|	МИНИМУМ(УпаковкиНоменклатуры.Ссылка) КАК ВложеннаяУпаковка,
	|	МИНИМУМ(&ТекстЗапросаКоэффициентУпаковки3) КАК КоэффициентВложеннойУпаковки
	|ПОМЕСТИТЬ ВложенныеУпаковки
	|ИЗ
	|	Упаковки КАК Упаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО Упаковки.Владелец = УпаковкиНоменклатуры.Владелец
	|			И Упаковки.Коэффициент = &ТекстЗапросаКоэффициентУпаковки3
	|ГДЕ
	|	УпаковкиНоменклатуры.Родитель = Упаковки.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.Номенклатура,
	|	Упаковки.Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.КоличествоУпаковок,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки4
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.КоэффициентУпаковки
	|	КОНЕЦ КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки4
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.КоэффициентВложеннойУпаковки
	|	КОНЕЦ КАК КоэффициентВложеннойУпаковки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения
	|					ИНАЧЕ ТаблицаТоваров.Упаковка
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.ВложеннаяУпаковка
	|	КОНЕЦ КАК ВидУпаковки,
	|	ТаблицаТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КоэффициентыУпаковок
	|ИЗ
	|	&ИмяТаблицыТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеУпаковки КАК ВложенныеУпаковки
	|		ПО ТаблицаТоваров.Номенклатура = ВложенныеУпаковки.Номенклатура
	|			И ТаблицаТоваров.Упаковка = ВложенныеУпаковки.Упаковка
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Упаковки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеУпаковки
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры",
		"ТаблицаТоваров.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Упаковки.Упаковка",
		"Упаковки.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры",
		"Упаковки.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки4",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТоваров.Упаковка",
		"ТаблицаТоваров.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыТоваров", ИмяТаблицыТоваров);
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Изменяет связанные с партнером реквизиты при изменении партнера
//
// Параметры:
//	Объект           - ДокументОбъект - Документ продажи
//
Процедура ПартнерПриИзменении(Объект) Экспорт
	
	Если Объект.Партнер <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Грузополучатель, "Партнер") Тогда
		Объект.Грузополучатель = Неопределено;
		Объект.БанковскийСчетГрузополучателя = Неопределено;
	КонецЕсли;
	Если Объект.Контрагент <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "Владелец") Тогда
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры


// Возвращает параметры формирования временной таблицы товаров
// для функции менеджеров документов ПоместитьВременнуюТаблицуТоваров()
//
// Возвращаемое значение
// Структура:
//	ПересчитыватьВВалютуРегл - Булево - Признак необходимости пересчета сумм табличной части в валюту регламентированного учета.
//	ВключаяНомераГТД - Булево - Выводить номера ГТД.
//	ВключаяДоКорректировки - Булево - Формировать дополнительные показатели изменений для документов корректировки.
//	АктуализироватьРасчеты - Булево - Актуализировать последовательность расчетов по документам с клиентами при необходимости.
//
Функция ПараметрыЗаполненияВременнойТаблицыТоваров() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПересчитыватьВВалютуРегл", Истина);
	СтруктураПараметров.Вставить("ВключаяНомераГТД", Ложь);
	СтруктураПараметров.Вставить("ВключаяДоКорректировки", Ложь);
	СтруктураПараметров.Вставить("АктуализироватьРасчеты", Истина);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеАналитикРасходовВДокументах

// Функция возвращает текст запроса по документам реализации и заказам.
// Используется в "ОбщиеФормы.ВыборАналитикиРасходов"
Функция ПолучитьТекстЗапросаДокументыРеализации(ВводПоСтроке = Ложь) Экспорт
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	И (ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|		ИЛИ ДанныеДокумента.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|	)
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияУслугПрочихАктивов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	Истина
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|		ИЛИ ДанныеДокумента.ЗаказКлиента = НЕОПРЕДЕЛЕНО)
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
	Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов")
	Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
	КонецЕсли;
	
	
	Если Лев(ТекстЗапроса, 10) = "ОБЪЕДИНИТЬ" Тогда
		ТекстЗапроса = Сред(ТекстЗапроса, 15);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДокументыРеализации(Истина);
	Запрос.УстановитьПараметр("СтрокаПоиска", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеВыбора = Новый Структура("АналитикаРасходов", Выборка.Ссылка);
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления",
				ЗначениеВыбора,
				(Выборка.СостояниеДокумента = 1)),
			Строка(Выборка.Ссылка));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыИФункцииРаботыСГТД

//Получить обновленную информацию ТН
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура ПолучитьОбновитьИнформациюТранспортныхНакладных(Форма) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда 
		ДанныеТранспортныхНакладных = ПродажиВызовСервера.ПолучитьДанныеТранспортныхНакладныхНаСервере(Форма.Объект.Ссылка);
		ПродажиКлиентСервер.ОбновитьИнформациюТранспортныхНакладных(Форма, ДанныеТранспортныхНакладных);
	Иначе
		ТекстТТН = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииЗаполненияПоОтгрузке

// Возвращает текст запроса для заполнения табличных частей документам по фактической отгрузке
//	
//	Параметры:
//		СтруктураРезультатаЗапроса - Структура - переменная в которую записывается структура результатов запроса.
//
// Возвращаемое значение:
//		Строка - Текст запроса.
//
Функция ТекстЗапросаПоФактическойОтгрузке(СтруктураДокументаДляЗаполнения, СтруктураРезультатаЗапроса = Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады) КАК Склад,
	|	ВЫРАЗИТЬ(Товары.Серия КАК Справочник.СерииНоменклатуры) КАК Серия
	|ПОМЕСТИТЬ ВТ_ТоварыДляЗапроса
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Склад КАК Склад,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	ВТ_ТоварыДляЗапроса КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ЕСТЬNULL(Товары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, ЛОЖЬ)
	|	И &Дата >= ЕСТЬNULL(Товары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
	|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА &ЗаполнятьНесобраннымиТоварами
	|			ТОГДА СУММА(ТоварыКОтгрузкеОбороты.СобираетсяПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ + СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеРасход) + СУММА(ТоварыКОтгрузкеОбороты.СобраноПриход) КАК КоличествоОтгрузить
	|ПОМЕСТИТЬ ВТТоварыКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , ДокументОтгрузки В (&ДокументыОтгрузки)) КАК ТоварыКОтгрузкеОбороты
	|ГДЕ
	|	ЕСТЬNULL(ТоварыКОтгрузкеОбороты.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, ЛОЖЬ)
	|	И &Дата >= ЕСТЬNULL(ТоварыКОтгрузкеОбороты.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
	|	ТоварыКОтгрузкеОбороты.Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика,
	|	ТоварыКОтгрузкеОбороты.Серия,
	|	ТоварыКОтгрузкеОбороты.Склад
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА &ЗаполнятьНесобраннымиТоварами
	|			ТОГДА СУММА(ТоварыКОтгрузкеОбороты.СобираетсяПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ + СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеРасход) + СУММА(ТоварыКОтгрузкеОбороты.СобраноПриход) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	ЗаказыОстатки.Склад КАК Склад,
	|	ЗаказыОстатки.Серия КАК Серия,
	|	-СУММА(ЗаказыОстатки.КОформлениюРасход) КАК КоличествоВНакладных
	|ПОМЕСТИТЬ ВТТоварыВНакладных
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(, , Регистратор, ЗаказКлиента В (&ДокументыОтгрузки)) КАК ЗаказыОстатки
	|ГДЕ
	|	ЗаказыОстатки.Регистратор <> &Накладная
	|	И ЕСТЬNULL(ЗаказыОстатки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, ЛОЖЬ)
	|	И &Дата >= ЕСТЬNULL(ЗаказыОстатки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказКлиента,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика,
	|	ЗаказыОстатки.Склад,
	|	ЗаказыОстатки.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КОформлениюРасход) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Серия КАК Серия,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.КоличествоОтгрузить + ЕСТЬNULL(ТоварыВНакладных.КоличествоВНакладных,0) КАК КоличествоОтгрузить
	|ИЗ
	|	ВТТоварыКОтгрузке КАК ТоварыКОтгрузке
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыВНакладных КАК ТоварыВНакладных
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ТоварыВНакладных.ЗаказКлиента
	|			И ТоварыКОтгрузке.Номенклатура = ТоварыВНакладных.Номенклатура
	|			И ТоварыКОтгрузке.Характеристика = ТоварыВНакладных.Характеристика
	|			И ТоварыКОтгрузке.Склад = ТоварыВНакладных.Склад
	|			И ТоварыКОтгрузке.Серия = ТоварыВНакладных.Серия
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки,
	|	&ТекстЗапросаКоэффициентУпаковки1 КАК КоэффициентУпаковки
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ЗаказКлиента,
	|	ТоварыКОформлению.КодСтроки,
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Склад,
	|	ТоварыКОформлению.Серия,
	|	СУММА(ТоварыКОформлению.Сумма) КАК Сумма,
	|	СУММА(ТоварыКОформлению.КоличествоОформить) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.Серия КАК Серия,
	|		ЗаказыОстатки.СуммаКонечныйОстаток КАК Сумма,
	|		ЗаказыОстатки.КОформлениюКонечныйОстаток КАК КоличествоОформить
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(, , , , ЗаказКлиента В (&ДокументыОтгрузки) И КодСтроки<>0) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыОбороты.ЗаказКлиента,
	|		ЗаказыОбороты.КодСтроки,
	|		ЗаказыОбороты.Номенклатура,
	|		ЗаказыОбороты.Характеристика,
	|		ЗаказыОбороты.Склад,
	|		ЗаказыОбороты.Серия,
	|		ЗаказыОбороты.СуммаРасход,
	|		ЗаказыОбороты.КОформлениюРасход
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Обороты(, , Регистратор, ЗаказКлиента В (&ДокументыОтгрузки)И КодСтроки<>0) КАК ЗаказыОбороты
	|	ГДЕ
	|		ЗаказыОбороты.Регистратор = &Накладная) КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.ЗаказКлиента,
	|	ТоварыКОформлению.КодСтроки,
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Склад,
	|	ТоварыКОформлению.Серия;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ЗаказКлиента КАК ИмяЗаказаВТЧ,
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.КодСтроки КАК КодСтроки,
	|	ТоварыКОформлению.Количество КАК Количество,
	|	ТоварыКОформлению.Сумма КАК СуммаВзаиморасчетов,
	|	ТоварыКОформлению.Склад КАК Склад,
	|	ТоварыКОформлению.Серия КАК Серия
	|ИЗ
	|	ВтТоварыКОформлению КАК ТоварыКОформлению
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки ВОЗР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказКлиента КАК ИмяЗаказаВТЧ,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.КодСтроки КАК КодСтроки,
	|	ТаблицаОстатки.Количество КАК Количество,
	|	ТаблицаОстатки.Сумма КАК СуммаВзаиморасчетов,
	|	ТаблицаОстатки.Склад КАК Склад,
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.Ссылка.Сделка КАК Сделка,
	|	ЗаказТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаказТовары.Серия КАК Серия,
	|	ЗаказТовары.ВидЦены КАК ВидЦены,
	|	ЗаказТовары.Количество КАК КоличествоВЗаказе,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказТовары.Сумма КАК Сумма,
	|	ЗаказТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказТовары.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказТовары.КлючСвязи КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки2
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаОстатки.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА ТаблицаОстатки.ЗаказКлиента.Назначение
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТоварыКОформлению КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказТовары
	|		ПО ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ТаблицаОстатки.Серия = ЗаказТовары.Серия
	|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ТаблицаОстатки.ЗаказКлиента = ЗаказТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказКлиента,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.КодСтроки КАК КодСтроки,
	|	ТаблицаОстатки.Количество КАК Количество,
	|	ТаблицаОстатки.Сумма КАК СуммаВзаиморасчетов,
	|	ТаблицаОстатки.Склад КАК Склад,
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.Ссылка.Сделка КАК Сделка,
	|	ЗаказТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаказТовары.Серия КАК Серия,
	|	ЗаказТовары.ВидЦены КАК ВидЦены,
	|	ЗаказТовары.Количество КАК КоличествоВЗаказе,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказТовары.Сумма КАК Сумма,
	|	ЗаказТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказТовары.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказТовары.КлючСвязи КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки2
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаОстатки.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА ТаблицаОстатки.ЗаказКлиента.Назначение
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТоварыКОформлению КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ЗаказТовары
	|		ПО ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ТаблицаОстатки.Серия = ЗаказТовары.Серия
	|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ТаблицаОстатки.ЗаказКлиента = ЗаказТовары.Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВТ_Товары.Упаковка",
		"ВТ_Товары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
		
	СтруктураРезультатаЗапроса = Новый Структура();
	СтруктураРезультатаЗапроса.Вставить("ВТ_ТоварыДляЗапроса", 0);
	СтруктураРезультатаЗапроса.Вставить("ВТ_Товары",           1);
	СтруктураРезультатаЗапроса.Вставить("ТоварыКОтгрузке",     4);
	СтруктураРезультатаЗапроса.Вставить("Товары",              5);
	СтруктураРезультатаЗапроса.Вставить("ТоварыКОформлению",   7);
	СтруктураРезультатаЗапроса.Вставить("ТоварыЗаказов",       8);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяЗаказаВТЧ", СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнительныеТаблицыЗаказов(МассивЗаказовКлиентов, Валюта)
	
	СтруктураТаблиц = Новый Структура("СкидкиНаценкиЗаказа, РеквизитыЗаказов, ТаблицаКурсовВалют, СтруктураКурсовНовойВалюты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказовКлиентов", МассивЗаказовКлиентов);
	Запрос.УстановитьПараметр("ВалютаДокумента",       Валюта);
	
	// Получение таблицы скидок/наценок
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказКлиента.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (&МассивЗаказовКлиентов)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (&МассивЗаказовКлиентов)
	|;
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Ссылка КАК ЗаказКлиента,
	|	ТаблицаЗаказов.Валюта КАК Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьВВалютуДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В(&МассивЗаказовКлиентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ),
	|	ТаблицаЗаказов.Ссылка,
	|	ТаблицаЗаказов.Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В(&МассивЗаказовКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ОбъединеннаяТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ОбъединеннаяТаблицаЗаказов.Валюта КАК Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|		ТаблицаЗаказов.Валюта КАК Валюта
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ТаблицаЗаказов
	|	ГДЕ
	|		ТаблицаЗаказов.Ссылка В(&МассивЗаказовКлиентов)
	|		И ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ),
	|		ТаблицаЗаказов.Валюта
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаЗаказов
	|	ГДЕ
	|		ТаблицаЗаказов.Ссылка В(&МассивЗаказовКлиентов)
	|		И ТаблицаЗаказов.Валюта <> &ВалютаДокумента) КАК ОбъединеннаяТаблицаЗаказов";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	СтруктураТаблиц.СкидкиНаценкиЗаказа = РезультатЗапроса[0].Выгрузить();
	СтруктураТаблиц.РеквизитыЗаказов = РезультатЗапроса[1].Выбрать();
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Выборка = РезультатЗапроса[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
		НоваяСтрока.Курс = КурсыВалюты.Курс;
		НоваяСтрока.Кратность = КурсыВалюты.Кратность;
		
	КонецЦикла;
	
	Если ТаблицаКурсовВалют.Количество() > 0 Тогда
		СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ТекущаяДата());
	КонецЕсли;
	СтруктураТаблиц.ТаблицаКурсовВалют = ТаблицаКурсовВалют;
	СтруктураТаблиц.СтруктураКурсовНовойВалюты = СтруктураКурсовНовойВалюты;
	
	Возврат СтруктураТаблиц
	
КонецФункции

Функция ЗаполнитьСтрокуПоЗаказуКлиента(СтруктураПоискаПоТЧТовары, КоличествоОтгрузить, ОбъектДокумента, ТоварыЗаказов, ДополнительныеТаблицыЗаказов)
	
	СкидкиНаценкиЗаказа = ДополнительныеТаблицыЗаказов.СкидкиНаценкиЗаказа;
	РеквизитыЗаказов = ДополнительныеТаблицыЗаказов.РеквизитыЗаказов;
	ТаблицаКурсовВалют = ДополнительныеТаблицыЗаказов.ТаблицаКурсовВалют;
	СтруктураКурсовНовойВалюты = ДополнительныеТаблицыЗаказов.СтруктураКурсовНовойВалюты;
	
	НоваяСтрока = ОбъектДокумента.Товары.Добавить();
	ИсключитьСвойства = "Количество";
	
	НайденныеСтроки = ТоварыЗаказов.НайтиСтроки(СтруктураПоискаПоТЧТовары);
	Если НайденныеСтроки.Количество()>0 Тогда
		
		НайденнаяСтрока = НайденныеСтроки.Получить(0);
		ПересчитатьСуммы = (КоличествоОтгрузить <> НайденнаяСтрока.КоличествоВЗаказе);
		Если ПересчитатьСуммы Тогда
			ИсключитьСвойства = ИсключитьСвойства + ", Сумма, СуммаНДС, СуммаАвтоматическойСкидки, СуммаРучнойСкидки";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, , ИсключитьСвойства);
		
		НоваяСтрока.Количество = КоличествоОтгрузить;
		НоваяСтрока.КоличествоУпаковок = КоличествоОтгрузить / НайденнаяСтрока.Коэффициент;;
		
		Если ПересчитатьСуммы Тогда
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВзаиморасчетов * КоличествоОтгрузить / НайденнаяСтрока.Количество;
			НоваяСтрока.СуммаСНДС = НоваяСтрока.СуммаВзаиморасчетов;
		КонецЕсли;
		
		РеквизитыЗаказов.Сбросить();
		ЗаказНайден = РеквизитыЗаказов.НайтиСледующий(НоваяСтрока.ЗаказКлиента, "ЗаказКлиента");
		
		ПараметрыОтбора = Новый Структура("Валюта,Дата", РеквизитыЗаказов.Валюта, РеквизитыЗаказов.Дата);
		КурсВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
		
		Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента Тогда
			
			Если КурсВалюты.Количество() = 1 Тогда
			
				НоваяСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.Цена,
					РеквизитыЗаказов.Валюта, ОбъектДокумента.Валюта,
					КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
					КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
				НоваяСтрока.СуммаСНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.СуммаСНДС,
					РеквизитыЗаказов.Валюта, ОбъектДокумента.Валюта,
					КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
					КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
				ПересчитатьСуммы = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, НоваяСтрока.Количество / ?(НайденнаяСтрока.КоличествоВЗаказе<>0,НайденнаяСтрока.КоличествоВЗаказе,1), 1);
		Если КоэффициентПересчетаСкидки <> 1 Тогда
			НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(НайденнаяСтрока.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
			НоваяСтрока.СуммаРучнойСкидки = ОКР(НайденнаяСтрока.СуммаРучнойСкидки * КоэффициентПересчетаСкидки,2);
		КонецЕсли;
		
		Если ЗаказНайден И ПересчитатьСуммы Тогда
			
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(
				НоваяСтрока, 
				РеквизитыЗаказов.ЦенаВключаетНДС,
				Ложь,
				Ложь,
				РеквизитыЗаказов.ПересчитатьВВалютуДокумента);
				
			Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И КурсВалюты.Количество() = 1 Тогда
				НоваяСтрока.СуммаАвтоматическойСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.СуммаАвтоматическойСкидки,
					РеквизитыЗаказов.Валюта, ОбъектДокумента.Валюта,
					КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
					КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
				НоваяСтрока.СуммаРучнойСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.СуммаРучнойСкидки,
					РеквизитыЗаказов.Валюта, ОбъектДокумента.Валюта,
					КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
					КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
			КонецЕсли;
		КонецЕсли;
		
		// Формирование табличной части скидок
		СуммаКРаспределению = НоваяСтрока.СуммаАвтоматическойСкидки;
		
		Если НоваяСтрока.КлючСвязи <> 0 Тогда
			Для Каждого СтрокаСкидкиЗаказа ИЗ СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("ЗаказКлиента,КлючСвязи", НоваяСтрока.ЗаказКлиента, НоваяСтрока.КлючСвязи)) Цикл
				
				СтрокаСкидки = ОбъектДокумента.СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
				СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
				
				Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И КурсВалюты.Количество() > 0 Тогда
					СтрокаСкидки.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаСкидки.Сумма,
						РеквизитыЗаказов.Валюта, ОбъектДокумента.Валюта,
						КурсВалюты[0].Курс, СтруктураКурсовНовойВалюты.Курс,
						КурсВалюты[0].Кратность, СтруктураКурсовНовойВалюты.Кратность);
					СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И СуммаКРаспределению <> 0 Тогда
			СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяСтрока
	
КонецФункции

#КонецОбласти

#Область ПроцедурыФормированияВременныхТаблицДляПроверкиКорректностиЗаполненияДокументов

// Формирует запрос к шапке документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса      - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса  - Структура - структура, содержащая параметры запроса
// ДокументПродажи   - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы        - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса,
	                                                              ПараметрыЗапроса,
	                                                              ДокументПродажи,
	                                                              ПоСсылке = Ложь,
	                                                              ИмяТаблицы = "")
	
	Если ПоСсылке Тогда
		
		Если ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение            КАК Соглашение,
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	NULL                                  КАК ЖелаемаяДатаОтгрузки,
				|	NULL                                  КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	СрокПоставки                          КАК СрокПоставки,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
			
		ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение            КАК Соглашение,
				|	ДокументПродажи.Статус                КАК Статус,
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДокументПродажи.ЖелаемаяДатаОтгрузки  КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	ДокументПродажи.ПорядокРасчетов       КАК ПорядокРасчетов,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
            
		ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение            КАК Соглашение,
				|	ДокументПродажи.Статус                КАК Статус,
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДокументПродажи.ЖелаемаяДатаОтгрузки  КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
            
		ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение            КАК Соглашение,
				|	ДокументПродажи.Статус                КАК Статус,
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДокументПродажи.ЖелаемаяДатаОтгрузки  КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	ДокументПродажи.Подразделение         КАК Подразделение,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	ДокументПродажи.ПорядокРасчетов       КАК ПорядокРасчетов,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
				
		ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                                    КАК Соглашение,
				|	ДокументПродажи.ГрафикОплаты                                  КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация                         КАК ХозяйственнаяОперация,
				|	NULL                                                          КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.Контрагент                                    КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                                КАК СуммаДокумента,
				|	ДокументПродажи.ВидЦен                                        КАК ВидЦен,
				|	ДокументПродажи.Склад                                         КАК Склад,
				|	NULL                                                          КАК ФормаОплаты,
				|	NULL                                                          КАК ВалютаВзаиморасчетов,
				|	ДокументПродажи.Регулярное                                    КАК Регулярное,
				|	ДокументПродажи.Типовое                                       КАК Типовое,
				|	ДокументПродажи.Период                                        КАК Период,
				|	ДокументПродажи.КоличествоПериодов                            КАК КоличествоПериодов,
				|	ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей     КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	ДокументПродажи.СегментПартнеров                              КАК СегментПартнеров,
				|	ДокументПродажи.СегментНоменклатуры                           КАК СегментНоменклатуры,
				|	ДокументПродажи.ДатаНачалаДействия                            КАК ДатаНачалаДействия,
				|	ДокументПродажи.ДатаОкончанияДействия                         КАК ДатаОкончанияДействия,
				|	ДокументПродажи.СрокПоставки                                  КАК СрокПоставки,
				|	ДокументПродажи.ПроцентРучнойСкидки                           КАК ПроцентРучнойСкидки,
				|	ДокументПродажи.ПроцентРучнойНаценки                          КАК ПроцентРучнойНаценки,
				|	ДокументПродажи.ОграничиватьРучныеСкидки                      КАК ОграничиватьРучныеСкидки,
				|	ДокументПродажи.Календарь                                     КАК Календарь,
				|	ДокументПродажи.ФормаОплаты                                   КАК ФормаОплатыСоглашения,
				|	ДокументПродажи.ДоступноВнешнимПользователям                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.ИспользуютсяДоговорыКонтрагентов              КАК ИспользуютсяДоговорыКонтрагентов,
				|	ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
				|	ДокументПродажи.КалендарьВозвратаТары                         КАК КалендарьВозвратаТары,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары                КАК СрокВозвратаМногооборотнойТары,
				|	ДокументПродажи.ПорядокРасчетов                               КАК ПорядокРасчетов,
				|	ДокументПродажи.СценарийПланирования                          КАК СценарийПланирования,
				|	ДокументПродажи.ВидПлана                                      КАК ВидПлана
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                     КАК Соглашение,
				|	ДокументПродажи.Договор                        КАК Договор,
				|	ДокументПродажи.СуммаВзаиморасчетов            КАК СуммаВзаиморасчетов,
				|	ДокументПродажи.СуммаПредоплаты                КАК СуммаПредоплаты,
				|	ДокументПродажи.СуммаПредоплатыЗаТару          КАК СуммаПредоплатыЗаТару,
				|	ДокументПродажи.Соглашение.ГрафикОплаты        КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
				|	NULL                                           КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.ДатаПлатежа                    КАК ДатаПлатежа,
				|	ДокументПродажи.Контрагент                     КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                 КАК СуммаДокумента,
				|	NULL                                           КАК ВидЦен,
				|	ДокументПродажи.Склад                          КАК Склад,
				|	ДокументПродажи.ФормаОплаты                    КАК ФормаОплаты,
				|	ДокументПродажи.ПорядокРасчетов                КАК ПорядокРасчетов,
				|	ДокументПродажи.ВалютаВзаиморасчетов           КАК ВалютаВзаиморасчетов,
				|	NULL                                           КАК Регулярное,
				|	NULL                                           КАК Типовое,
				|	NULL                                           КАК Период,
				|	NULL                                           КАК КоличествоПериодов,
				|	NULL                                           КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                           КАК СегментПартнеров,
				|	NULL                                           КАК СегментНоменклатуры,
				|	NULL                                           КАК ДатаНачалаДействия,
				|	NULL                                           КАК ДатаОкончанияДействия,
				|	NULL                                           КАК СрокПоставки,
				|	NULL                                           КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.Статус                         КАК Статус,
				|	NULL                                           КАК СрокВозвратаМногооборотнойТары
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                     КАК Соглашение,
				|	ДокументПродажи.Договор                        КАК Договор,
				|	NULL                                           КАК СуммаВзаиморасчетов,
				|	NULL                                           КАК СуммаПредоплаты,
				|	NULL                                           КАК СуммаПредоплатыЗаТару,
				|	NULL                                           КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
				|	NULL                                           КАК ЖелаемаяДатаОтгрузки,
				|	NULL                                           КАК ДатаПлатежа,
				|	ДокументПродажи.Контрагент                     КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                 КАК СуммаДокумента,
				|	NULL                                           КАК ВидЦен,
				|	NULL                                           КАК Склад,
				|	NULL                                           КАК ФормаОплаты,
				|	NULL                                           КАК ПорядокРасчетов,
				|	NULL                                           КАК ВалютаВзаиморасчетов,
				|	NULL                                           КАК Регулярное,
				|	NULL                                           КАК Типовое,
				|	NULL                                           КАК Период,
				|	NULL                                           КАК КоличествоПериодов,
				|	NULL                                           КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                           КАК СегментПартнеров,
				|	NULL                                           КАК СегментНоменклатуры,
				|	NULL                                           КАК ДатаНачалаДействия,
				|	NULL                                           КАК ДатаОкончанияДействия,
				|	NULL                                           КАК СрокПоставки,
				|	NULL                                           КАК ДоступноВнешнимПользователям,
				|	NULL                                           КАК СрокВозвратаМногооборотнойТары
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                     КАК Соглашение,
				|	ДокументПродажи.Договор                        КАК Договор,
				|	ДокументПродажи.СуммаВзаиморасчетов            КАК СуммаВзаиморасчетов,
				|	NULL                                           КАК СуммаПредоплаты,
				|	NULL                                           КАК СуммаПредоплатыЗаТару,
				|	ДокументПродажи.Соглашение.ГрафикОплаты        КАК ГрафикОплаты,
				|	NULL                                           КАК ХозяйственнаяОперация,
				|	NULL                                           КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.ДатаПлатежа                    КАК ДатаПлатежа,
				|	ДокументПродажи.Контрагент                     КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                 КАК СуммаДокумента,
				|	NULL                                           КАК ВидЦен,
				|	NULL                                           КАК Склад,
				|	ДокументПродажи.ФормаОплаты                    КАК ФормаОплаты,
				|	ДокументПродажи.ПорядокРасчетов                КАК ПорядокРасчетов,
				|	ДокументПродажи.ВалютаВзаиморасчетов           КАК ВалютаВзаиморасчетов,
				|	NULL                                           КАК Регулярное,
				|	NULL                                           КАК Типовое,
				|	NULL                                           КАК Период,
				|	NULL                                           КАК КоличествоПериодов,
				|	NULL                                           КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                           КАК СегментПартнеров,
				|	NULL                                           КАК СегментНоменклатуры,
				|	NULL                                           КАК ДатаНачалаДействия,
				|	NULL                                           КАК ДатаОкончанияДействия,
				|	NULL                                           КАК СрокПоставки,
				|	NULL                                           КАК ДоступноВнешнимПользователям,
				|	NULL                                           КАК СрокВозвратаМногооборотнойТары
				|";
				
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ДокументПродажи.Партнер                                   КАК Партнер,
			|	ДокументПродажи.Валюта                                    КАК Валюта,
			|	ДокументПродажи.ЦенаВключаетНДС                           КАК ЦенаВключаетНДС,
			|	ДокументПродажи.Дата                                      КАК Дата,
			|	ДокументПродажи.Организация                               КАК Организация"
			+ ?(ПустаяСтрока(ВременныйТекст), "", ", " + ВременныйТекст) + "
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаДокументПродажи
			|ИЗ
			|" + ИмяТаблицы + " КАК ДокументПродажи
			|ГДЕ
			|	ДокументПродажи.Ссылка = &ДокументПродажи
			|;
			|";
		
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
		
	Иначе

		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ДокументПродажи.Партнер                                       КАК Партнер,
			|	ДокументПродажи.Контрагент                                    КАК Контрагент,
			|	ДокументПродажи.Валюта                                        КАК Валюта,
			|	ДокументПродажи.ВалютаВзаиморасчетов                          КАК ВалютаВзаиморасчетов,
			|	ДокументПродажи.ЦенаВключаетНДС                               КАК ЦенаВключаетНДС,
			|	ДокументПродажи.Соглашение                                    КАК Соглашение,
			|	ДокументПродажи.ИспользуютсяДоговорыКонтрагентов              КАК ИспользуютсяДоговорыКонтрагентов,
			|	ДокументПродажи.Дата                                          КАК Дата,
			|	ДокументПродажи.ВидЦен                                        КАК ВидЦен,
			|	ДокументПродажи.Организация                                   КАК Организация,
			|	ДокументПродажи.Склад                                         КАК Склад,
			|	ДокументПродажи.Подразделение                                 КАК Подразделение,
			|	ДокументПродажи.ГрафикОплаты                                  КАК ГрафикОплаты,
			|	ДокументПродажи.ФормаОплаты                                   КАК ФормаОплаты,
			|	ДокументПродажи.Календарь                                     КАК Календарь,
			|	ДокументПродажи.ДатаПлатежа                                   КАК ДатаПлатежа,
			|	ДокументПродажи.Регулярное                                    КАК Регулярное,
			|	ДокументПродажи.Типовое                                       КАК Типовое,
			|	ДокументПродажи.Период                                        КАК Период,
			|	ДокументПродажи.КоличествоПериодов                            КАК КоличествоПериодов,
			|	ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей     КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ДокументПродажи.СегментПартнеров                              КАК СегментПартнеров,
			|	ДокументПродажи.СегментНоменклатуры                           КАК СегментНоменклатуры,
			|	ДокументПродажи.ДатаНачалаДействия                            КАК ДатаНачалаДействия,
			|	ДокументПродажи.ДатаОкончанияДействия                         КАК ДатаОкончанияДействия,
			|	ДокументПродажи.СрокПоставки                                  КАК СрокПоставки,
			|	ДокументПродажи.ХозяйственнаяОперация                         КАК ХозяйственнаяОперация,
			|	ДокументПродажи.СуммаДокумента                                КАК СуммаДокумента,
			|	ДокументПродажи.ЖелаемаяДатаОтгрузки                          КАК ЖелаемаяДатаОтгрузки,
			|	ДокументПродажи.ПроцентРучнойСкидки                           КАК ПроцентРучнойСкидки,
			|	ДокументПродажи.ПроцентРучнойНаценки                          КАК ПроцентРучнойНаценки,
			|	ДокументПродажи.ОграничиватьРучныеСкидки                      КАК ОграничиватьРучныеСкидки,
			|	ДокументПродажи.ДоступноВнешнимПользователям                  КАК ДоступноВнешнимПользователям,
			|	ДокументПродажи.Договор                                       КАК Договор,
			|	ДокументПродажи.Статус                                        КАК Статус,
			|	ДокументПродажи.СуммаВзаиморасчетов                           КАК СуммаВзаиморасчетов,
			|	ДокументПродажи.СуммаПредоплаты                               КАК СуммаПредоплаты,
			|	ДокументПродажи.СуммаПредоплатыЗаТару                         КАК СуммаПредоплатыЗаТару,
			|	ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	ДокументПродажи.КалендарьВозвратаТары                         КАК КалендарьВозвратаТары,
			|	ДокументПродажи.СрокВозвратаМногооборотнойТары                КАК СрокВозвратаМногооборотнойТары,
			|	ДокументПродажи.ПорядокРасчетов                               КАК ПорядокРасчетов,
			|	ДокументПродажи.СценарийПланирования                          КАК СценарийПланирования,
			|	ДокументПродажи.ВидПлана                                      КАК ВидПлана
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаДокументПродажи
			|ИЗ
			|	&ДокументПродажи КАК ДокументПродажи
			|;
			|";
			
		// Сформируем необходимые колонки таблицы шапки документа продажи
			
		ТипВалюта = Новый ОписаниеТипов("СправочникСсылка.Валюты");
		ТипБулево = Новый ОписаниеТипов("Булево");
		ТипЧисло  = Новый ОписаниеТипов("Число");
		ТипДата   = Новый ОписаниеТипов("Дата");
		
		МассивТиповСтатусов = Новый Массив;
		МассивТиповСтатусов.Добавить(Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов"));
		МассивТиповСтатусов.Добавить(Тип("ПеречислениеСсылка.СтатусыЗаявокНаВозвратТоваровОтКлиентов"));
		МассивТиповСтатусов.Добавить(Тип("ПеречислениеСсылка.СтатусыРеализацийТоваровУслуг"));
		
		ТаблицаДокумента = Новый ТаблицаЗначений();
		ТаблицаДокумента.Колонки.Добавить("Партнер",                                       Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		ТаблицаДокумента.Колонки.Добавить("Контрагент",                                    Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаДокумента.Колонки.Добавить("Валюта",                                        ТипВалюта);
		ТаблицаДокумента.Колонки.Добавить("ВалютаВзаиморасчетов",                          ТипВалюта);
		ТаблицаДокумента.Колонки.Добавить("ЦенаВключаетНДС",                               ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ХозяйственнаяОперация",                         Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
		ТаблицаДокумента.Колонки.Добавить("Дата",                                          ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ВидЦен",                                        Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ТаблицаДокумента.Колонки.Добавить("Организация",                                   Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаДокумента.Колонки.Добавить("Склад",                                         Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаДокумента.Колонки.Добавить("Подразделение",                                 Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		ТаблицаДокумента.Колонки.Добавить("Соглашение",                                    Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
		ТаблицаДокумента.Колонки.Добавить("ГрафикОплаты",                                  Новый ОписаниеТипов("СправочникСсылка.ГрафикиОплаты"));
		ТаблицаДокумента.Колонки.Добавить("ФормаОплаты",                                   Новый ОписаниеТипов("ПеречислениеСсылка.ФормыОплаты"));
		ТаблицаДокумента.Колонки.Добавить("Календарь",                                     Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
		ТаблицаДокумента.Колонки.Добавить("ДатаПлатежа",                                   ТипДата);
		ТаблицаДокумента.Колонки.Добавить("СегментНоменклатуры",                           Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
		ТаблицаДокумента.Колонки.Добавить("СтавкаНДС",                                     Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаДокумента.Колонки.Добавить("Регулярное",                                    ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Типовое",                                       ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Период",                                        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
		ТаблицаДокумента.Колонки.Добавить("КоличествоПериодов",                            ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ИспользуетсяВРаботеТорговыхПредставителей",     ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("СегментПартнеров",                              Новый ОписаниеТипов("СправочникСсылка.СегментыПартнеров"));
		ТаблицаДокумента.Колонки.Добавить("ДатаНачалаДействия",                            ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ДатаОкончанияДействия",                         ТипДата);
		ТаблицаДокумента.Колонки.Добавить("СрокПоставки",                                  ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("СуммаДокумента",                                ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ЖелаемаяДатаОтгрузки",                          ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ПроцентРучнойСкидки",                           ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ПроцентРучнойНаценки",                          ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ОграничиватьРучныеСкидки",                      ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ДоступноВнешнимПользователям",                  ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ИспользуютсяДоговорыКонтрагентов",              ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Договор",                                       Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаДокумента.Колонки.Добавить("Статус",                                        Новый ОписаниеТипов(МассивТиповСтатусов));
		ТаблицаДокумента.Колонки.Добавить("СуммаВзаиморасчетов",                           ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("СуммаПредоплаты",                               ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("СуммаПредоплатыЗаТару",                         ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю",       ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("КалендарьВозвратаТары",                         Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
		ТаблицаДокумента.Колонки.Добавить("СрокВозвратаМногооборотнойТары",                ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ПорядокРасчетов",                               Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетов"));
		ТаблицаДокумента.Колонки.Добавить("СценарийПланирования",                          Новый ОписаниеТипов("СправочникСсылка.СценарииТоварногоПланирования"));
		ТаблицаДокумента.Колонки.Добавить("ВидПлана",                                      Новый ОписаниеТипов("СправочникСсылка.ВидыПланов"));
		
		// Добавим строку и заполним значениями из шапки документа
		
		НоваяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументПродажи);
		
		ПараметрыЗапроса.Вставить("ДокументПродажи", ТаблицаДокумента);
		
	КонецЕсли;

КонецПроцедуры

// Формирует запрос к тч Товары документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса           - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса       - Структура - структура, содержащая параметры запроса
// ДокументПродажи        - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ИмяТаблицы             - Строка - имя таблицы документа, к которой необходимо сформировать запрос
// УчитыватьСкидкиНаценки - флаг, определяющий наличие в проверяемом документе скидок и наценок
// ПоСсылке               - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
//
Процедура СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса,
	                                                               ПараметрыЗапроса,
	                                                               ДокументПродажи,
	                                                               ИмяТаблицы,
	                                                               УчитыватьСкидкиНаценки,
	                                                               ПоСсылке = Ложь)
	ИмяТабличнойЧасти = "Товары";
	ИмяДопТабличнойЧасти = "";
	ИменаКолонокДопТабличнойЧасти = "";
	ПредставлениеТабличнойЧасти    = "Товары";
	ПредставлениеДопТабличнойЧасти = "";
	
	Если ТипЗнч(ДокументПродажи) = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	Товары.ДатаОтгрузки                     КАК ДатаОтгрузки,
			|	Ложь                                    КАК Отменено,
			|	Товары.Склад                            КАК Склад,
			|	Товары.СрокПоставки                     КАК СрокПоставки,
			|	0                                       КАК КодСтроки,
			|	Товары.Количество                       КАК Количество,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	Товары.ВариантОбеспечения               КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Количество,
			|КоличествоУпаковок,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|ДатаОтгрузки,
			|Склад,
			|ВариантОбеспечения,
			|СрокПоставки";
		
	ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Ложь                  КАК ЭтоКомплектующие,
			|	Ложь                  КАК ЭтоНабор,
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки    КАК НомерСтроки,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Цена           КАК Цена,
			|	Товары.ВидЦены        КАК ВидЦены,
			|	Товары.Упаковка       КАК Упаковка,
			|	Товары.Цена           КАК ЦенаСоСкидкой,
			|	Товары.СрокПоставки   КАК СрокПоставки,
			|	0                     КАК КодСтроки,
			|	ИСТИНА                КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СрокПоставки";
			
	ИначеЕсли ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
			|	Ложь                                     КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	0                                        КАК СрокПоставки,
			|	0                                        КАК КодСтроки,
			|	Товары.Количество                        КАК Количество,
			|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|Количество,
			|КоличествоУпаковок,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки";
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки    КАК НомерСтроки,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Цена           КАК Цена,
			|	Товары.Сумма          КАК Сумма,
			|	Товары.ВидЦены        КАК ВидЦены,
			|	Товары.Упаковка       КАК Упаковка,
			|	Товары.СтавкаНДС      КАК СтавкаНДС,
			|	Товары.Цена           КАК ЦенаСоСкидкой,
			|	0                     КАК СрокПоставки,
			|	0                     КАК КодСтроки,
			|	ЛОЖЬ                  КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	Товары.ДатаОтгрузки                     КАК ДатаОтгрузки,
			|	Товары.Отменено                         КАК Отменено,
			|	Товары.Склад                            КАК Склад,
			|	Товары.СрокПоставки                     КАК СрокПоставки,
			|	Товары.КодСтроки                        КАК КодСтроки,
			|	Товары.Количество                       КАК Количество,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	Товары.ВариантОбеспечения               КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Количество,
			|КоличествоУпаковок,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|ДатаОтгрузки,
			|Отменено,
			|Склад,
			|СрокПоставки,
			|ВариантОбеспечения,
			|КодСтроки";
			
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора                              КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора                            КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                                     КАК НомерСтроки,
			|	Товары.Номенклатура                                    КАК Номенклатура,
			|	Товары.Характеристика                                  КАК Характеристика,
			|	Товары.Цена                                            КАК Цена,
			|	Товары.Сумма                                           КАК Сумма,
			|	Товары.ВидЦены                                         КАК ВидЦены,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|	Товары.СтавкаНДС                                       КАК СтавкаНДС,
			|	Товары.КлючСвязи                                       КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки                     КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки                       КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки                             КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                               КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                                       КАК ДатаОтгрузки,
			|	Ложь                                                   КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)               КАК Склад,
			|	0                                                      КАК СрокПоставки,
			|	0                                                      КАК КодСтроки,
			|	Товары.Количество                                      КАК Количество,
			|	Товары.Количество                                      КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                                   КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Услуги";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|СтавкаНДС,
			|КлючСвязи,
			|Количество,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки";
			
	ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.СуммаВзаиморасчетов              КАК СуммаВзаиморасчетов,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
			|	Ложь                                     КАК Отменено,
			|	Товары.Склад                             КАК Склад,
			|	Товары.СрокПоставки                      КАК СрокПоставки,
			|	Товары.КодСтроки                         КАК КодСтроки,
			|	Товары.Количество                        КАК Количество,
			|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|СуммаВзаиморасчетов,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|Количество,
			|КоличествоУпаковок,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|Склад,
			|СрокПоставки,
			|КодСтроки";
			
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.Склад                            КАК Склад,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.Сумма                            КАК Сумма,
			|	
			|	ДатаВремя(1,1,1)                                        КАК ДатаОтгрузки,
			|	Ложь                                                    КАК Отменено,
			|	0                                                       КАК СрокПоставки,
			|	0                                                       КАК КодСтроки,
			|	0                                                       КАК Количество,
			|	0                                                       КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки,
			|	0                                                       КАК КлючСвязи,
			|	0                                                       КАК ПроцентАвтоматическойСкидки,
			|	0                                                       КАК СуммаАвтоматическойСкидки,
			|	0                                                       КАК ПроцентРучнойСкидки,
			|	0                                                       КАК СуммаРучнойСкидки,
			|	Товары.Цена                                             КАК ЦенаСоСкидкой
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|Склад,
			|СтавкаНДС,
			|Сумма";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	Товары.ДатаОтгрузки                      КАК ДатаОтгрузки,
			|	Товары.Отменено                          КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	Товары.СрокПоставки                      КАК СрокПоставки,
			|	0                                        КАК КодСтроки,
			|	Товары.Количество                        КАК Количество,
			|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
			|	Товары.ВариантОбеспечения                КАК ВариантОбеспечения,
			|	ЛОЖЬ                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "ЗаменяющиеТовары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|Количество,
			|КоличествоУпаковок,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|ДатаОтгрузки,
			|Отменено,
			|ВариантОбеспечения,
			|СрокПоставки";
			
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора   КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки          КАК НомерСтроки,
			|	Товары.Номенклатура         КАК Номенклатура,
			|	Товары.Характеристика       КАК Характеристика,
			|	Товары.Цена                 КАК Цена,
			|	Товары.Сумма                КАК Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	Товары.Упаковка             КАК Упаковка,
			|	Товары.СтавкаНДС            КАК СтавкаНДС,
			|	0                                        КАК КлючСвязи,
			|	0                                        КАК ПроцентАвтоматическойСкидки,
			|	0                                        КАК СуммаАвтоматическойСкидки,
			|	0                                        КАК ПроцентРучнойСкидки,
			|	0                                        КАК СуммаРучнойСкидки,
			|	Товары.Цена                              КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
			|	Ложь                                     КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	0                         КАК СрокПоставки,
			|	0                         КАК КодСтроки,
			|	Товары.Количество         КАК Количество,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                      КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|Упаковка,
			|Количество,
			|КоличествоУпаковок,
			|СтавкаНДС";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЧекККМ" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	0                                       КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                        КАК ДатаОтгрузки,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	Товары.Количество                       КАК Количество,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	Ложь                                    КАК Отменено,
			|	0                                       КАК СрокПоставки,
			|	0                                       КАК КодСтроки,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Упаковка,
			|Количество,
			|КоличествоУпаковок,
			|Цена,
			|Сумма,
			|СтавкаНДС,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки";
			
	ИначеЕсли ИмяТаблицы = "Документ.КорректировкаРеализации" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	Товары.Количество                       КАК Количество,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	0                                       КАК КодСтроки,
			|	Товары.Склад                            КАК Склад,
			|	0                                       КАК КлючСвязи,
			|	0                                       КАК ПроцентАвтоматическойСкидки,
			|	0                                       КАК СуммаАвтоматическойСкидки,
			|	0                                       КАК ПроцентРучнойСкидки,
			|	0                                       КАК СуммаРучнойСкидки,
			|	Товары.Цена                             КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                        КАК ДатаОтгрузки,
			|	Ложь                                    КАК Отменено,
			|	0                                       КАК СрокПоставки,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|%ПодготовкаВременныхТаблицНаборы%
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Количество,
			|КоличествоУпаковок,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|Склад";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПодготовкаВременныхТаблицНаборы%", СформироватьТекстЗапросаВременныеТаблицыНаборы());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбора%", ?(ПоСсылке, "ГДЕ Товары.Ссылка = &ДокументПродажи", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ?(ПоСсылке, ИмяТаблицы + "." + ИмяТабличнойЧасти, "&Товары"));
	
	Если Не ПустаяСтрока(ИмяДопТабличнойЧасти) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДопТаблицы%", ?(ПоСсылке, ИмяТаблицы + "." + ИмяДопТабличнойЧасти, "&ДопТовары"));
		
		ПараметрыЗапроса.Вставить("ИмяДопТабличнойЧасти", ИмяДопТабличнойЧасти);
		ПараметрыЗапроса.Вставить("ПредставлениеДопТабличнойЧасти", ПредставлениеДопТабличнойЧасти);
		
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ПараметрыЗапроса.Вставить("ПредставлениеТабличнойЧасти", ПредставлениеТабличнойЧасти);
	
	Если ПоСсылке Тогда
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
	Иначе
		ПараметрыЗапроса.Вставить("Товары", ДокументПродажи[ИмяТабличнойЧасти].Выгрузить(, ИменаКолонок));
		Если Не ПустаяСтрока(ИмяДопТабличнойЧасти) Тогда
			ПараметрыЗапроса.Вставить("ДопТовары", ДокументПродажи[ИмяДопТабличнойЧасти].Выгрузить(, ИменаКолонокДопТабличнойЧасти));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос к тч ЦеновыеГруппы документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка -  текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса,
	                                                                      ПараметрыЗапроса,
	                                                                      ДокументПродажи,
	                                                                      ПоСсылке = Ложь,
	                                                                      ИмяТаблицы = "")
	
	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЦеновыеГруппы.НомерСтроки          КАК НомерСтроки,
			|	ЦеновыеГруппы.ЦеноваяГруппа        КАК ЦеноваяГруппа,
			|	ЦеновыеГруппы.ВидЦен               КАК ВидЦен,
			|	ЦеновыеГруппы.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидки,
			|	ЦеновыеГруппы.ПроцентРучнойНаценки КАК ПроцентРучнойНаценки,
			|	ЦеновыеГруппы.СрокПоставки         КАК СрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЦеновыеГруппы
			|ИЗ
			|" + ИмяТаблицы + ".ЦеновыеГруппы КАК ЦеновыеГруппы
			|ГДЕ
			|	ЦеновыеГруппы.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	ЦеноваяГруппа
			|;
			|";
			
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
			
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЦеновыеГруппы.НомерСтроки          КАК НомерСтроки,
			|	ЦеновыеГруппы.ЦеноваяГруппа        КАК ЦеноваяГруппа,
			|	ЦеновыеГруппы.ВидЦен               КАК ВидЦен,
			|	ЦеновыеГруппы.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидки,
			|	ЦеновыеГруппы.ПроцентРучнойНаценки КАК ПроцентРучнойНаценки,
			|	ЦеновыеГруппы.СрокПоставки         КАК СрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЦеновыеГруппы
			|ИЗ
			|	&ЦеновыеГруппы КАК ЦеновыеГруппы
			|ИНДЕКСИРОВАТЬ ПО
			|	ЦеноваяГруппа
			|;
			|";
			
		ПараметрыЗапроса.Вставить("ЦеновыеГруппы", ДокументПродажи.ЦеновыеГруппы.Выгрузить(,"НомерСтроки,ЦеноваяГруппа,ВидЦен, ПроцентРучнойСкидки, ПроцентРучнойНаценки, СрокПоставки"));
			
	КонецЕсли;

КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ЕстьМетаданныеЗалогаЗаТару = ИмяТаблицы = "Справочник.ГрафикиОплаты"
			Или ИмяТаблицы = "Справочник.СоглашенияСКлиентами"
			Или ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю"
			Или ИмяТаблицы = "Документ.ЗаказКлиента"
			Или ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа,
			|" + ?(ЕстьМетаданныеЗалогаЗаТару,
				"ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару",
				"0 КАК ПроцентЗалогаЗаТару") + "
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|" + ИмяТаблицы + ".ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки         КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты       КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа         КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа      КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
		
		ТаблицаЭтапов = ДокументПродажи.ЭтапыГрафикаОплаты.Выгрузить();
		Если ТаблицаЭтапов.Колонки.Найти("ПроцентЗалогаЗаТару") = Неопределено Тогда
			ТаблицаЭтапов.Колонки.Добавить("ПроцентЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		КонецЕсли;
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ТаблицаЭтапов);
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты соглашения и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки         КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты       КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг               КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа      КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения
			|ИЗ
			|" + ИмяТаблицы + ".ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
		
		Иначе
			
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки         КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты       КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг               КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа      КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
	
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты.Выгрузить(, "НомерСтроки,Сдвиг,ВариантОплаты,ПроцентПлатежа,ПроцентЗалогаЗаТару"));
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты соглашения и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашенияОснования
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = ВЫРАЗИТЬ(&ДокументПродажи КАК Справочник.СоглашенияСКлиентами).Соглашение
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);

	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашенияОснования
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты  КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &Соглашение
			|;
			|";
	
			ПараметрыЗапроса.Вставить("Соглашение", ДокументПродажи.Соглашение);

	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к курсам валют на дату документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс      КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаКурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|";

КонецПроцедуры

// Формирует запрос по элементам справочника "Склады" и помещает во временную таблицу
// К корректным складам относятся:
// 		- Склад, равный складу соглашения
// 		- Склады, входящие в иерархию склада соглашения
//
Процедура СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ СкладыКорректныеПоСоглашению
	|ИЗ
	|	Справочник.Склады КАК Склады
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокумента
	|
	|	ПО
	|		ИСТИНА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|	ПО
	|		ВременнаяТаблицаДокумента.Соглашение = СоглашенияСКлиентами.Ссылка
	|		И СоглашенияСКлиентами.Склад ЕСТЬ НЕ NULL
	|		И СоглашенияСКлиентами.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаДокумента.Соглашение.Склад
	|			ИЗ
	|				ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокумента)
	|;
	|";
	
КонецПроцедуры

// Помещает во временную таблицу заданные суммы взаиморасчетов по реализации.
// В случае необходимости вычисляет сумму взаиморасчетов по таре.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаСуммыВзаиморасчетов(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	МАКСИМУМ(&СуммаВзаиморасчетовРеализации) - 
	|		ВЫБОР 
	|			КОГДА МАКСИМУМ(&НеЗаданаСуммаЗалога) = ИСТИНА
	|				ТОГДА ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)
	|			ИНАЧЕ МАКСИМУМ(&СуммаЗалогаПоРеализации)
	|		КОНЕЦ КАК СуммаКОплате,
	|	ВЫБОР 
	|		КОГДА МАКСИМУМ(&НеЗаданаСуммаЗалога) = ИСТИНА
	|			ТОГДА ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)
	|		ИНАЧЕ МАКСИМУМ(&СуммаЗалогаПоРеализации)
	|	КОНЕЦ КАК СуммаЗалогаЗаТару
	|ПОМЕСТИТЬ ВременнаяТаблицаСуммыВзаиморасчетов
	|ИЗ
	|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПредварительная КАК Тара
	|	ПО Тара.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		И &ТребуетсяЗалогЗаТару
	|;
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиКорректностиЗаполненияДокументов

// Формирует запрос для проверки наличия дублей в тч Товары документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеДублейТоваровДокументаПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки)    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура             КАК Номенклатура,
		|	ДокументТовары.Характеристика           КАК Характеристика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки наличия дублей в тч ЦеновыеГруппы документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеДублейЦеновыхГруппДокументаПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументЦеновыеГруппы.НомерСтроки) КАК НомерСтроки,
		|	ДокументЦеновыеГруппы.ЦеноваяГруппа         КАК ЦеноваяГруппа
		|ИЗ
		|	ВременнаяТаблицаЦеновыеГруппы КАК ДокументЦеновыеГруппы
		|СГРУППИРОВАТЬ ПО
		|	ДокументЦеновыеГруппы.ЦеноваяГруппа
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";

КонецПроцедуры

// Формирует текст запроса для проверки заполненности склада
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОшибкиЗаполненияСклад
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаДокументПродажи.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности склада
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладаВЗаказеКлиента(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОшибкиЗаполненияСклад
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		И НЕ ВременнаяТаблицаТовары.Отменено
		|		И НЕ ВременнаяТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|ГДЕ
		|	ВременнаяТаблицаДокументПродажи.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И(НЕ ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры ЕСТЬ NULL
		|		ИЛИ ВременнаяТаблицаДокументПродажи.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)))
		|;
		|";
	
КонецПроцедуры


// Формирует текст запроса для проверки заполенности реквизита "Склад" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа товар;
// 		- в шапке документа указан заполнен реквизит "Склад".
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса, ИмяТаблицы)
	
	Если ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	&ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	&ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|		ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	&ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	&ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументПродажи.Склад.ЭтоГруппа
		|	И ВременнаяТаблицаДокументПродажи.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И НЕ ВременнаяТаблицаТовары.Отменено
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И НЕ ВременнаяТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|;
		|";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	&ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	&ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументПродажи.Склад.ЭтоГруппа
		|	И ВременнаяТаблицаДокументПродажи.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
		
	КонецЕсли;
	
КонецПроцедуры


// Формирует запрос для проверки корректности количества этапов оплаты в соглашении
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашения) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашенияОснования)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашения) КАК КоличествоЭтаповСоглашения,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашенияОснования) КАК КоличествоЭтаповСоглашенияОснования
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыСоглашения.НомерСтроки) КАК КоличествоЭтаповСоглашения,
			|		NULL КАК КоличествоЭтаповСоглашенияОснования
			|	ИЗ
			|		ВременнаяТаблицаЭтапыОплатыСоглашения КАК ЭтапыСоглашения
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповСоглашения,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыСоглашенияОснования.НомерСтроки) КАК КоличествоЭтаповСоглашенияОснования
			|	ИЗ
			|		ВременнаяТаблицаЭтапыОплатыСоглашенияОснования КАК ЭтапыСоглашенияОснования
			|	) КАК ВложенныйЗапрос
			|;
			|";
			
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов оплаты в соглашении
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.НомерСтроки ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтапШаблонаОтсутствует,
			|	ЭтапыДокумента.НомерСтроки КАК НомерСтроки,
			|	ЭтапыДокумента.ВариантОплаты КАК ВариантОплаты,
			|	ЭтапыДокумента.Сдвиг КАК Сдвиг,
			|	ЭтапыДокумента.ПроцентПлатежа КАК ПроцентПлатежа,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыДокумента.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ПроцентЗалогаЗаТару,
			|	
			|	ЭтапыШаблона.НомерСтроки КАК НомерСтрокиШаблона,
			|	ЭтапыШаблона.ВариантОплаты КАК ВариантОплатыШаблона,
			|	ЭтапыШаблона.ПроцентПлатежа КАК ПроцентПлатежаШаблона,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыШаблона.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ПроцентЗалогаЗаТаруШаблона,
			|	
			|	ЭтапыШаблона.Сдвиг КАК СдвигШаблона,
			|	ВЫБОР
			|		КОГДА ЭтапыДокумента.ВариантОплаты <> ЭтапыШаблона.ВариантОплаты
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты
			|ИЗ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения КАК ЭтапыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыШаблона
			|		ПО ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
			|			И ЭтапыШаблона.Ссылка В (ВЫБРАТЬ ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение ИЗ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|";

КонецПроцедуры

// Формирует проверки для контроля завершения отгрузки по заказу
// и для контроля завершения расчетов по заказу
//
// Параметры:
// КонтролируемыйЗаказ - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - контролируемый документ.
// Отказ - Булево - параметр Отказ.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(КонтролируемыйЗаказ, Отказ) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, 
		|			ЗаказКлиента = &Ссылка
		|			И (ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|				ИЛИ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|			И (ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|				И ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
		|	) КАК ЗаказыКлиентовОстатки
		|ГДЕ
		|	&КонтролироватьОтгрузку
		|	И (ЗаказыКлиентовОстатки.ЗаказаноОстаток > 0 
		|		ИЛИ ЗаказыКлиентовОстатки.КОформлениюОстаток > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, 
		|			ДокументОтгрузки = &Ссылка
		|			И (ДокументОтгрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|				ИЛИ ДокументОтгрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|			И (ДокументОтгрузки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|				И ДокументОтгрузки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
		|	) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	&КонтролироватьОтгрузку
		|	И (ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток) > 0
		|;
		|
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|			ЗаказКлиента = &Ссылка
		|			И (ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|				ИЛИ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|			И (ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|				И ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
		|			И ЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	) КАК РасчетыСКлиентамиОстатки
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И РасчетыСКлиентамиОстатки.КОплатеОстаток > 0
		|");
		
	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
	КонтролироватьРасчеты  = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
	
	Запрос.УстановитьПараметр("Ссылка", КонтролируемыйЗаказ);
	Запрос.УстановитьПараметр("КонтролироватьОтгрузку", КонтролироватьОтгрузку);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты", КонтролироватьРасчеты);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОтгрузка = Результат[0].Выбрать();
	ВыборкаРасчеты  = Результат[1].Выбрать();
	
	Если ВыборкаОтгрузка.Следующий() Тогда 
		Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ТекстОшибки = НСтр("ru='Документ ""%Заказ%"" отгружен не полностью.
            |Закрытие заказа возможно только с полностью отгруженными/отмененными строками'
            |;uk='Документ ""%Заказ%"" відвантажено не повністю.
            |Закриття замовлення можливе тільки з повністю отгруженными/скасованими рядками'");
		ИначеЕсли ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ТекстОшибки = НСтр("ru='Заменяющие товары по документу ""%Заказ%"" отгружены не полностью.
            |Заявка может быть переведена в статус ""Выполнена"" только с полностью отгруженными/отмененными строками'
            |;uk='Замінюючі товари за документом ""%Заказ%"" відвантажено не повністю.
            |Заявка може бути переведена в статус ""Виконано"" тільки з повністю відвантаженимискасованими рядками'");
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заказ%", КонтролируемыйЗаказ);
		
		СообщитьПользователюОбОшибке(
				ТекстОшибки,
				,
				,
				Отказ);
	КонецЕсли;
	
	Если ВыборкаРасчеты.Следующий() Тогда 
		Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ТекстОшибки = НСтр("ru='Расчеты по документу ""%Заказ%"" не завершены.
            |Для закрытия заказа требуется оплата %СуммаКОплате% %Валюта%.
            |Закрытие заказа возможно только с полностью оплаченными/отмененными строками'
            |;uk='Розрахунки за документом ""%Заказ%"" не завершені.
            |Для закриття замовлення вимагається оплата %СуммаКОплате% %Валюта%.
            |Закриття замовлення можливе тільки з повністю сплаченими/скасованими рядками'");
		ИначеЕсли ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ТекстОшибки = НСтр("ru='Расчеты по документу ""%Заказ%"" не завершены. Требуется оплата %СуммаКОплате% %Валюта%.
            |Заявка может быть переведена в статус ""Выполнена"" только с полностью оплаченными/отмененными строками'
            |;uk='Розрахунки за документом ""%Заказ%"" не завершені. Вимагається оплата %СуммаКОплате% %Валюта%.
            |Заявка може бути переведена в статус ""Виконано"" тільки з повністю сплаченими/скасованими рядками'");
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заказ%",        КонтролируемыйЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаКОплате%", Строка(ВыборкаРасчеты.КОплатеОстаток));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",       Строка(ВыборкаРасчеты.Валюта));
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Формирует тескт запроса для контроля завершения отгрузки по заказу
// и для контроля завершения расчетов по заказу
//
//	Возвращаемое значение:
//		Строка
//
Функция ТекстЗапросаКонтрольЗаказаПослеПроведения() Экспорт
	
	Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрольЗакрытия.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	ВтОстаткиПоЗаказам
		|ИЗ (ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, 
		|			ЗаказКлиента В (&МассивДокументов)
		|			И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|			И (ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|				И ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
		|	) КАК ЗаказыКлиентовОстатки
		|ГДЕ
		|	&КонтролироватьОтгрузку
		|	И (ЗаказыКлиентовОстатки.ЗаказаноОстаток > 0 
		|		ИЛИ ЗаказыКлиентовОстатки.КОформлениюОстаток > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, 
		|			ДокументОтгрузки В (&МассивДокументов)
		|			И (&Статус  = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|				ИЛИ &Статус  = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|			И (ДокументОтгрузки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|				И ДокументОтгрузки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
		|	) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	&КонтролироватьОтгрузку
		|	И (ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток) > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|			ЗаказКлиента В (&МассивДокументов)
		|			И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|			И (ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|				И ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
		|			И ЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	) КАК РасчетыСКлиентамиОстатки
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И РасчетыСКлиентамиОстатки.КОплатеОстаток > 0) КАК КонтрольЗакрытия
		|;"
		
КонецФункции

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиСоответствияДокументовУсловиямПродаж

// Формирует запрос для проверки шапки документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ИмяТаблицы   - Строка - имя таблицы документа, к которой необходимо сформировать проверочный запрос
//
Процедура СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Партнер ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Типовое = ЛОЖЬ И
		|			ДокументПродажи.Партнер <> СоглашениеСКлиентом.Партнер
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПартнер,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Организация ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И
		|			ДокументПродажи.Организация <> СоглашениеСКлиентом.Организация
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОрганизация,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ЦенаВключаетНДС ЕСТЬ НЕ NULL И
		|			ДокументПродажи.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) И
		|			ДокументПродажи.ЦенаВключаетНДС <> СоглашениеСКлиентом.ЦенаВключаетНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦенаВключаетНДС,
		|	ЕСТЬNULL(СоглашениеСКлиентом.Склад.ЭтоГруппа, ЛОЖЬ) КАК СкладСоглашениеЕстьГруппа,
		|" + ?(ИмяТаблицы = "Документ.АктВыполненныхРабот","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСклад,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару,
		|","
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Склад ЕСТЬ НЕ NULL
		|			И СоглашениеСКлиентом.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И СкладыКорректныеПоСоглашению.Склад ЕСТЬ NULL
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСклад,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару <> &ВозвратМногооборотнойТары
		|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ТребуетсяЗалогЗаТару <> &ТребуетсяЗалогЗаТару
		|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару,
		|") + ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг" ИЛИ ИмяТаблицы = "Документ.АктВыполненныхРабот","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияГрафикОплаты,
		|","
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ГрафикОплаты ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.ГрафикОплаты <> ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка) И
		|			ДокументПродажи.ГрафикОплаты <> СоглашениеСКлиентом.ГрафикОплаты И
		|			(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			 ИЛИ ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|			 ИЛИ ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияГрафикОплаты,
		|") + ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг","
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Валюта ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ВалютаВзаиморасчетов <> СоглашениеСКлиентом.Валюта
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалюта,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаПлатежа,
		|	ИСТИНА КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Валюта ЕСТЬ НЕ NULL И
		|			ДокументПродажи.Валюта <> СоглашениеСКлиентом.Валюта
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалюта,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаПлатежа,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.СрокВозвратаМногооборотнойТары <> СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|") + "
		|
		|	// Проверки только для торговых соглашений
		|
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","
		|
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ВидЦен ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ВидЦен <> СоглашениеСКлиентом.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦен,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.СценарийПланирования ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.СценарийПланирования <> ЗНАЧЕНИЕ(Справочник.СценарииТоварногоПланирования.ПустаяСсылка) И
		|			ДокументПродажи.СценарийПланирования <> СоглашениеСКлиентом.СценарийПланирования
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСценарияПланирования,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ВидПлана ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.ВидПлана <> ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка) И
		|			ДокументПродажи.ВидПлана <> СоглашениеСКлиентом.ВидПлана
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидПлана,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.СегментНоменклатуры ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.СегментНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) И
		|			ДокументПродажи.СегментНоменклатуры <> СоглашениеСКлиентом.СегментНоменклатуры
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСегментНоменклатуры,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Регулярное ЕСТЬ НЕ NULL И
		|			ДокументПродажи.Регулярное <> СоглашениеСКлиентом.Регулярное
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРегулярное,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Период ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Регулярное = ИСТИНА И 
		|			ДокументПродажи.Период <> СоглашениеСКлиентом.Период
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПериод,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.КоличествоПериодов ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Регулярное = ИСТИНА И
		|			ДокументПродажи.КоличествоПериодов < СоглашениеСКлиентом.КоличествоПериодов
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКоличествоПериодов,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей <> СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ДоступноВнешнимПользователям ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ДоступноВнешнимПользователям <> СоглашениеСКлиентом.ДоступноВнешнимПользователям
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДоступноВнешнимПользователям,
		|	ВЫБОР
		|		КОГДА Не ДокументПродажи.Типовое И
		|			СоглашениеСКлиентом.ДатаНачалаДействия ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) И
		|			СоглашениеСКлиентом.ДатаНачалаДействия > ДокументПродажи.ДатаНачалаДействия
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДатаНачалаДействия,
		|	ВЫБОР
		|		КОГДА Не ДокументПродажи.Типовое И
		|			СоглашениеСКлиентом.ДатаОкончанияДействия ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1,1,1) И
		|			(СоглашениеСКлиентом.ДатаОкончанияДействия < ДокументПродажи.ДатаОкончанияДействия
		|			ИЛИ ДокументПродажи.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДатаОкончанияДействия,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ПроцентРучнойСкидки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойСкидки > СоглашениеСКлиентом.ПроцентРучнойСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПроцентРучнойСкидки,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ПроцентРучнойНаценки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойНаценки > СоглашениеСКлиентом.ПроцентРучнойНаценки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПроцентРучнойНаценки,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ОграничиватьРучныеСкидки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ОграничиватьРучныеСкидки <> СоглашениеСКлиентом.ОграничиватьРучныеСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.Календарь <> СоглашениеСКлиентом.Календарь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКалендаря,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.ФормаОплаты <> СоглашениеСКлиентом.ФормаОплаты
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормыОплатыСоглашения,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.ИспользуютсяДоговорыКонтрагентов <> СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю <> СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.КалендарьВозвратаТары <> СоглашениеСКлиентом.КалендарьВозвратаТары
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКалендарьВозвратаТары,
		|	СоглашениеСКлиентом.СегментНоменклатуры                       КАК СегментНоменклатурыСоглашение,
		|	СоглашениеСКлиентом.КалендарьВозвратаТары                     КАК КалендарьВозвратаТарыСоглашение,
		|	ДокументПродажи.КалендарьВозвратаТары                         КАК КалендарьВозвратаТары,
		|	СоглашениеСКлиентом.Регулярное                                КАК РегулярноеСоглашение ,
		|	СоглашениеСКлиентом.Период                                    КАК ПериодСоглашение,
		|	СоглашениеСКлиентом.КоличествоПериодов                        КАК КоличествоПериодовСоглашение,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей КАК ИспользуетсяВРаботеТорговыхПредставителейСоглашение,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                       КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                      КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.Календарь                                 КАК Календарь,
		|	СоглашениеСКлиентом.ФормаОплаты                               КАК ФормаОплатыСоглашенияСКлиентом,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям              КАК ДоступноВнешнимПользователям,
		|	СоглашениеСКлиентом.СценарийПланирования                      КАК СценарийПланированияСоглашение,
		|	СоглашениеСКлиентом.ВидПлана                                  КАК ВидПланаСоглашение,
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВидЦен,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСценарияПланирования,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВидПлана,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСегментНоменклатуры,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияРегулярное,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПериод,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКоличествоПериодов,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДоступноВнешнимПользователям,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДатаНачалаДействия,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДатаОкончанияДействия,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПроцентРучнойСкидки,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПроцентРучнойНаценки,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКалендаря,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияФормыОплатыСоглашения,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКалендарьВозвратаТары,
		|	NULL КАК СегментНоменклатурыСоглашение,
		|	NULL КАК КалендарьВозвратаТарыСоглашение,
		|	NULL КАК КалендарьВозвратаТары,
		|	NULL КАК РегулярноеСоглашение,
		|	NULL КАК ПериодСоглашение,
		|	NULL КАК КоличествоПериодовСоглашение,
		|	NULL КАК ИспользуетсяВРаботеТорговыхПредставителейСоглашение,
		|	NULL КАК ПроцентРучнойСкидки,
		|	NULL КАК ПроцентРучнойНаценки,
		|	NULL КАК Календарь,
		|	NULL КАК ФормаОплатыСоглашенияСКлиентом,
		|	NULL КАК СценарийПланированияСоглашение,
		|	NULL КАК ВидПланаСоглашение,
		|") + "
		|
		|	// Проверки только для соглашений и коммерческих предложений
		|
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Или ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту","
		|
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.СрокПоставки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.СрокПоставки < СоглашениеСКлиентом.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		|	СоглашениеСКлиентом.СрокПоставки КАК СрокПоставкиСоглашение,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияФормыОплаты,
		|	NULL КАК ФормаОплатыГрафик,
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		|	NULL КАК СрокПоставкиСоглашение,
		|	ВЫБОР
		|		КОГДА
		|			ДокументПродажи.ГрафикОплаты.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
		|			И ДокументПродажи.ГрафикОплаты.ФормаОплаты <> ДокументПродажи.ФормаОплаты
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормыОплаты,
		|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты КАК ФормаОплатыГрафик,
		|") + "
		|
		|	// Проверки только для не коммерческих предложений
		|
		|" + ?(ИмяТаблицы <> "Документ.АктВыполненныхРабот","
		|" + ?(ИмяТаблицы <> "Документ.КоммерческоеПредложениеКлиенту","
		|" + ?(ИмяТаблицы <> "Документ.ЗаявкаНаВозвратТоваровОтКлиента","
		|
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСКлиентом.ХозяйственнаяОперация ЕСТЬ NULL
		|			И НЕ ДокументПродажи.ХозяйственнаяОперация ЕСТЬ NULL
		|			И ДокументПродажи.ХозяйственнаяОперация <> СоглашениеСКлиентом.ХозяйственнаяОперация
		|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
		|			И СоглашениеСКлиентом.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|","
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСКлиентом.ХозяйственнаяОперация ЕСТЬ NULL
		|			И НЕ ДокументПродажи.ХозяйственнаяОперация ЕСТЬ NULL
		|			И ((ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту))
		|				ИЛИ
		|				(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
		|				ИЛИ
		|				(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|") + "
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Контрагент ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Типовое = ЛОЖЬ И
		|			СоглашениеСКлиентом.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И
		|			ДокументПродажи.Контрагент <> СоглашениеСКлиентом.Контрагент
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКонтрагент,
		|","
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСКлиентом.ХозяйственнаяОперация ЕСТЬ NULL
		|			И НЕ ДокументПродажи.ХозяйственнаяОперация ЕСТЬ NULL
		|			И ДокументПродажи.ХозяйственнаяОперация <> СоглашениеСКлиентом.ХозяйственнаяОперация
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКонтрагент,
		|") + "
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Контрагент ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Типовое = ЛОЖЬ И
		|			СоглашениеСКлиентом.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И
		|			ДокументПродажи.Контрагент <> СоглашениеСКлиентом.Контрагент
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКонтрагент,
		|") + "
		|" + ?(ИмяТаблицы <> "Документ.КоммерческоеПредложениеКлиенту" И ИмяТаблицы <> "Документ.ЗаданиеТорговомуПредставителю","
		|	ВЫБОР
		|		КОГДА ДокументПродажи.ПорядокРасчетов <> СоглашениеСКлиентом.ПорядокРасчетов
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПорядокРасчетов,
		|	СоглашениеСКлиентом.ПорядокРасчетов                           КАК ПорядокРасчетовСоглашение,
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПорядокРасчетов,
		|	NULL КАК ПорядокРасчетовСоглашение,
		|") + "
		|	ДокументПродажи.Соглашение,
		|	СоглашениеСКлиентом.Партнер                                 КАК ПартнерСоглашение,
		|	СоглашениеСКлиентом.Контрагент                              КАК КонтрагентСоглашение,
		|	СоглашениеСКлиентом.Организация                             КАК ОрганизацияСоглашение,
		|	СоглашениеСКлиентом.Валюта                                  КАК ВалютаСоглашение,
		|	СоглашениеСКлиентом.Склад                                   КАК СкладСоглашение,
		|	СоглашениеСКлиентом.ВидЦен                                  КАК ВидЦенСоглашение,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                         КАК ЦенаВключаетНДССоглашение,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                   КАК ХозяйственнаяОперацияСоглашение,
		|	СоглашениеСКлиентом.Статус                                  КАК СтатусСоглашение,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                      КАК ДатаНачалаДействияСоглашение,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                   КАК ДатаОкончанияДействияСоглашение,
		|	СоглашениеСКлиентом.ГрафикОплаты                            КАК ГрафикОплатыСоглашение,
		|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	&ЭтоСоглашение                                              КАК ЭтоСоглашение,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов        КАК ИспользуютсяДоговорыКонтрагентов,
		|	&ВозвратМногооборотнойТары                                  КАК ВозвратМногооборотнойТары
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи           КАК ДокументПродажи
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами              КАК СоглашениеСКлиентом
		|ПО
		|	ДокументПродажи.Соглашение = СоглашениеСКлиентом.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	СкладыКорректныеПоСоглашению КАК СкладыКорректныеПоСоглашению
		|ПО 
		|	ДокументПродажи.Склад = СкладыКорректныеПоСоглашению.Склад
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки тч Товары документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ИмяТаблицы   - Строка - имя таблицы документа, к которой необходимо сформировать проверочный запрос
//
Процедура СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	&ЭтоСоглашение                              КАК ЭтоСоглашение,
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.ЭтоНабор             КАК ЭтоНабор,
		|	ВременнаяТаблицаТовары.ЭтоКомплектующие     КАК ЭтоКомплектующие,
		|	ВременнаяТаблицаТовары.НоменклатураНабора   КАК НоменклатураНабора,
		|	ВременнаяТаблицаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаТовары.Цена                 КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			(СоглашениеТовары.Номенклатура ЕСТЬ НЕ NULL)
		|		ТОГДА
		|			ВЫРАЗИТЬ(ЕСТЬNULL(СоглашениеТовары.Цена,0)
		|			/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					СоглашениеШапка.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыДокументаПродажи.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыДокументаПродажи.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.Курс, 0) > 0
		|						ТОГДА
		|							(КурсыВалютыСоглашения.Курс * КурсыВалютыДокументаПродажи.Кратность)
		|							/ (КурсыВалютыДокументаПродажи.Курс * КурсыВалютыСоглашения.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК ЦенаСоглашение,
		|
		|	ВЫБОР
		|
		| // ВИД ЦЕНЫ И ЦЕНА В СОГЛАШЕНИИ НЕ ОПРЕДЕЛЕНЫ
		|
		|		КОГДА
		|			СоглашениеШапка.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И (СоглашениеТовары.ВидЦены ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|			И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|			И (СоглашениеТовары.Номенклатура ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.Цена = 0)
		|			И (ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|				ИЛИ (НЕ &ВозвратМногооборотнойТары 
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)))
		|		ТОГДА
		|			ИСТИНА
		|
		| // ВИД ЦЕНЫ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ С ВИДОМ ЦЕН В ТЧ СОГЛАШЕНИЯ ЦЕНОВЫЕ ГРУППЫ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеЦеновыеГруппы.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|
		| // ВИД ЦЕНЫ В ТЧ ДОКУМЕНТА СРАВНИВАЕМ С ВИДОМ ЦЕНЫ В ТЧ СОГЛАШЕНИЯ ТОВАРЫ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеТовары.ВидЦены
		|		ТОГДА
		|			ИСТИНА
		|
		| // ВИД ЦЕН В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ С ВИДОМ ЦЕН В ШАПКЕ СОГЛАШЕНИЯ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеШапка.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦены,
		|
		|	ВЫБОР
		|
		| // СРОК ПОСТАВКИ НЕ ПРОВЕРЯЕТСЯ
		|		КОГДА
		|			НЕ ВременнаяТаблицаТовары.ПроверятьОшибкиЗаполненияСрокПоставки
		|		ТОГДА
		|			ЛОЖЬ
		|
		| // СРОК ПОСТАВКИ В СОГЛАШЕНИИ НЕ ОПРЕДЕЛЕН
		|
		|		КОГДА
		|			СоглашениеШапка.СрокПоставки = 0
		|			И (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|			
		|		ТОГДА
		|			ЛОЖЬ
		|
		| // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ТЧ СОГЛАШЕНИЯ ЦЕНОВЫЕ ГРУППЫ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ НЕ NULL И СоглашениеЦеновыеГруппы.СрокПоставки > 0
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеЦеновыеГруппы.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|
		| // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ТЧ СОГЛАШЕНИЯ ТОВАРЫ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ НЕ NULL И СоглашениеТовары.СрокПоставки > 0)
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеТовары.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|
		| // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ШАПКЕ СОГЛАШЕНИЯ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|			И СоглашениеШапка.СрокПоставки <> 0
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеШапка.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		|	ВЫБОР
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ НЕ NULL
		|			И СоглашениеЦеновыеГруппы.СрокПоставки > 0
		|		ТОГДА
		|			СоглашениеЦеновыеГруппы.СрокПоставки
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|		ТОГДА
		|			СоглашениеШапка.СрокПоставки
		|		ИНАЧЕ
		|			СоглашениеТовары.СрокПоставки
		|	КОНЕЦ КАК СрокПоставкиСоглашение,
		|
		|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|		ТОГДА
		|			СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА	(СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|		ТОГДА
		|			СоглашениеШапка.ВидЦен
		|		ИНАЧЕ
		|			СоглашениеТовары.ВидЦены
		|	КОНЕЦ КАК ВидЦеныСоглашение,
		|	ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС КАК СтавкаНДСНоменклатура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена,0) = 0
		|			И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|			И &ВозвратМногооборотнойТары
		|		ТОГДА
		|			ЛОЖЬ
		|		КОГДА (СоглашениеТовары.Номенклатура ЕСТЬ НЕ NULL) И
		|		СоглашениеТовары.Цена > 0 И
		|		ВременнаяТаблицаТовары.Цена <
		|		ВЫРАЗИТЬ(ЕСТЬNULL(СоглашениеТовары.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					СоглашениеШапка.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыДокументаПродажи.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыДокументаПродажи.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.Курс, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыСоглашения.Курс * КурсыВалютыДокументаПродажи.Кратность)
		|							/ (КурсыВалютыДокументаПродажи.Курс * КурсыВалютыСоглашения.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦена
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|
		|// СОЕДИНЕНИЯ С ТОРГОВЫМ СОГЛАШЕНИЕМ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеТовары.Ссылка
		|			И ВременнаяТаблицаТовары.Номенклатура = СоглашениеТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = СоглашениеТовары.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеЦеновыеГруппы.Ссылка
		|			И ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеШапка.Ссылка
		|
		|/////////////////////////////////////////////////////////////////////////////
		|// СОЕДИНЕНИЯ С КУРСАМИ ВАЛЮТ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыДокументаПродажи
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Валюта = КурсыВалютыДокументаПродажи.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыСоглашения
		|		ПО
		|			СоглашениеШапка.Валюта = КурсыВалютыСоглашения.Валюта
		|" + ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг","
		|ГДЕ
		|	ВременнаяТаблицаТовары.КодСтроки = 0", "") + "
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашениеТовары.Упаковка",
		"СоглашениеТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
КонецПроцедуры

// Формирует запрос для проверки соответствия тч ЦеновыеГруппы условиям продаж
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументПродажи.ЦеноваяГруппа   КАК ЦеноваяГруппа,
		|	ДокументПродажи.ВидЦен          КАК ВидЦен,
		|	Соглашение.ЦеноваяГруппа        КАК ЦеноваяГруппаСоглашение,
		|	Соглашение.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидкиСоглашение,
		|	Соглашение.ПроцентРучнойНаценки КАК ПроцентРучнойНаценкиСоглашение,
		|	Соглашение.ВидЦен               КАК ВидЦенСоглашение,
		|	Соглашение.СрокПоставки         КАК СрокПоставкиСоглашение,
		|	ВЫБОР
		|		КОГДА Соглашение.ЦеноваяГруппа ЕСТЬ NULL
		|			ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦеновыеГруппы,
		|	ВЫБОР
		|		КОГДА Соглашение.ВидЦен ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ВидЦен <> Соглашение.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦен,
		
		|	ВЫБОР
		|		КОГДА Соглашение.ПроцентРучнойСкидки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойСкидки > Соглашение.ПроцентРучнойСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРучнойСкидки,
		|	ВЫБОР
		|		КОГДА Соглашение.ПроцентРучнойНаценки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойНаценки > Соглашение.ПроцентРучнойНаценки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРучнойНаценки,
		
		|	ВЫБОР
		|		КОГДА Соглашение.СрокПоставки ЕСТЬ НЕ NULL И
		|			Соглашение.СрокПоставки <> 0 И
		|			ДокументПродажи.СрокПоставки < Соглашение.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		
		|	ДокументПродажи.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаЦеновыеГруппы КАК ДокументПродажи
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК Соглашение
		|ПО 
		|	ДокументПродажи.ЦеноваяГруппа = Соглашение.ЦеноваяГруппа
		|	И Соглашение.Ссылка В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение
		|			ИЗ
		|				ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки принадлежности товаров сегменту номенклатуры
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросПринадлежностьТоваровСегментуНоменклатуры(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                         КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                        КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика                      КАК Характеристика,
		|	ВложенныйЗапрос.НоменклатураСегмента                КАК НоменклатураСегмента,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатурыСегмента  КАК ХарактеристикаНоменклатурыСегмента,
		|	ВложенныйЗапрос.СегментНоменклатуры                 КАК СегментНоменклатуры
		|ИЗ
		|(ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки                          КАК НомерСтроки,
		|	ДокументТовары.Номенклатура                         КАК Номенклатура,
		|	ДокументТовары.Характеристика                       КАК Характеристика,
		|	НоменклатураСегмента.Номенклатура                   КАК НоменклатураСегмента,
		|	НоменклатураСегмента.Характеристика                 КАК ХарактеристикаНоменклатурыСегмента,
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ КАК СегментНоменклатуры
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ПО
		|	СоглашениеСКлиентом.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|ПО
		|	ДокументТовары.Номенклатура = НоменклатураСегмента.Номенклатура
		|	И ДокументТовары.Характеристика = НоменклатураСегмента.Характеристика
		|	И НоменклатураСегмента.Сегмент = 
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ
		|	И
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
		|) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СегментНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) И
		|	(ВложенныйЗапрос.НоменклатураСегмента ЕСТЬ NULL
		|	ИЛИ ВложенныйЗапрос.ХарактеристикаНоменклатурыСегмента ЕСТЬ NULL)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки принадлежности партнера сегменту партнеров
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросПринадлежностьПартнераСегментуПартнеров(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	СоглашениеСКлиентом.СегментПартнеров        КАК СегментПартнеров,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|		ТОГДА
		|			ЛОЖЬ
		|		КОГДА
		|			ПартнерыСегмента.Партнер ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСегментПартнеров
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ПО
		|	СоглашениеСКлиентом.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПартнерыСегмента            КАК ПартнерыСегмента
		|ПО
		|	ПартнерыСегмента.Сегмент = СоглашениеСКлиентом.СегментПартнеров
		|	И ПартнерыСегмента.Партнер = ВременнаяТаблицаДокументПродажи.Партнер
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов графика оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|				ИЛИ ВременнаяТаблицаДокументПродажи.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.НомерСтроки ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтапШаблонаОтсутствует,
			|	ЭтапыДокумента.НомерСтроки КАК НомерСтроки,
			|	ЭтапыДокумента.ВариантОплаты КАК ВариантОплаты,
			|	ЭтапыДокумента.ДатаПлатежа КАК ДатаПлатежа,
			|	ЭтапыДокумента.ПроцентПлатежа КАК ПроцентПлатежа,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыДокумента.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ПроцентЗалогаЗаТару,
			|	
			|	ЭтапыШаблона.НомерСтроки КАК НомерСтрокиШаблона,
			|	ЭтапыШаблона.ВариантОплаты КАК ВариантОплатыШаблона,
			|	ЭтапыШаблона.ПроцентПлатежа КАК ПроцентПлатежаШаблона,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыШаблона.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ПроцентЗалогаЗаТаруШаблона,
			|	
			|	ЭтапыШаблона.Сдвиг КАК Сдвиг,
			|	ЭтапыШаблона.Ссылка.Календарь КАК Календарь,
			|	ВременнаяТаблицаДокументПродажи.Дата КАК Дата,
			|	ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
			|			ТОГДА ВЫБОР
			|					КОГДА ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
			|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.Дата, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|					ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|				КОНЕЦ
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.Дата, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|	КОНЕЦ КАК ДатаПлатежаШаблона,
			|	ВЫБОР
			|		КОГДА ЭтапыДокумента.ВариантОплаты <> ЕСТЬNULL(ЭтапыШаблона.ВариантОплаты, НЕОПРЕДЕЛЕНО)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты
			|ИЗ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты.Этапы КАК ЭтапыШаблона
			|		ПО (ВременнаяТаблицаДокументПродажи.ГрафикОплаты = ЭтапыШаблона.Ссылка)
			|			И ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
			|ГДЕ
			|	&ИспользоватьГрафикиОплаты
			|	И 0 В (
			|	ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки) КАК КоличествоЭтаповГрафика
			|	ИЗ
			|		Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ГрафикиОплатыЭтапы
			|	ГДЕ
			|		ГрафикиОплатыЭтапы.Ссылка В (ВЫБРАТЬ ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение ИЗ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|)
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|				ИЛИ ВременнаяТаблицаДокументПродажи.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.НомерСтроки ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтапШаблонаОтсутствует,
			|	ЭтапыДокумента.НомерСтроки КАК НомерСтроки,
			|	ЭтапыДокумента.ВариантОплаты КАК ВариантОплаты,
			|	ЭтапыДокумента.ДатаПлатежа КАК ДатаПлатежа,
			|	ЭтапыДокумента.ПроцентПлатежа КАК ПроцентПлатежа,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыДокумента.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ПроцентЗалогаЗаТару,
			|	
			|	ЭтапыШаблона.НомерСтроки КАК НомерСтрокиШаблона,
			|	ЭтапыШаблона.ВариантОплаты КАК ВариантОплатыШаблона,
			|	ЭтапыШаблона.ПроцентПлатежа КАК ПроцентПлатежаШаблона,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыШаблона.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ПроцентЗалогаЗаТаруШаблона,
			|	
			|	ЭтапыШаблона.Сдвиг КАК Сдвиг,
			|	ЭтапыШаблона.Ссылка.Календарь КАК Календарь,
			|	ВременнаяТаблицаДокументПродажи.Дата КАК Дата,
			|	ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
			|			ТОГДА ВЫБОР
			|					КОГДА ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
			|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.Дата, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|					ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|				КОНЕЦ
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.Дата, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|	КОНЕЦ КАК ДатаПлатежаШаблона,
			|	ВЫБОР
			|		КОГДА ЭтапыДокумента.ВариантОплаты <> ЕСТЬNULL(ЭтапыШаблона.ВариантОплаты, НЕОПРЕДЕЛЕНО)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты
			|ИЗ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыШаблона
			|		ПО ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
			|			И (ВременнаяТаблицаДокументПродажи.Соглашение.Ссылка = ЭтапыШаблона.Ссылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|";

КонецПроцедуры

// Формирует запрос для проверки корректности заполнения даты платежа
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ИмяТаблицы   - Строка - имя таблицы документа, к которой необходимо сформировать проверочный запрос
//
Процедура СформироватьЗапросКорректностьДатыПлатежа(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ИмяТаблицы)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(МАКСИМУМ(ВложенныйЗапрос.Дата),День,ЕСТЬNULL(МАКСИМУМ(ВложенныйЗапрос.Сдвиг),0)),День) КАК ДатаПлатежаШаблона,
		|	НАЧАЛОПЕРИОДА(МАКСИМУМ(ВложенныйЗапрос.Дата),День) КАК Дата,
		|	МАКСИМУМ(ВложенныйЗапрос.ДатаПлатежа)              КАК ДатаПлатежа,
		|	МАКСИМУМ(ВложенныйЗапрос.Календарь)                КАК Календарь,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(ВложенныйЗапрос.ГрафикОплаты) = 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ГрафикОплатыНеУказан,
		|	МАКСИМУМ(ВложенныйЗапрос.Сдвиг) КАК Сдвиг
		|ИЗ (
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг) КАК Сдвиг,
		|	ЭтапыГрафикаОплаты.Ссылка          КАК ГрафикОплаты,
		|	NULL                               КАК Дата,
		|	NULL                               КАК ДатаПлатежа,
		|	NULL                               КАК Календарь
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ЭтапыГрафикаОплаты
		|ГДЕ
		|	ЭтапыГрафикаОплаты.Ссылка В (
		|		ВЫБРАТЬ
		|			ВременнаяТаблицаДокументПродажи.Соглашение.ГрафикОплаты
		|		ИЗ
		|			ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыГрафикаОплаты.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL                                                              КАК Сдвиг,
		|	ВременнаяТаблицаДокументПродажи.Соглашение.ГрафикОплаты           КАК ГрафикОплаты,
		|	ВременнаяТаблицаДокументПродажи.Дата                              КАК Дата,
		|	ВременнаяТаблицаДокументПродажи.ДатаПлатежа                       КАК ДатаПлатежа,
		|	ВременнаяТаблицаДокументПродажи.Соглашение.ГрафикОплаты.Календарь КАК Календарь
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи
		|) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ГрафикОплаты
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки корректности количества авансовых этапов оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповГрафика)
			|				И МАКСИМУМ(ВложенныйЗапрос.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты) = ИСТИНА
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) КАК КоличествоЭтаповДокумента,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповГрафика) КАК КоличествоЭтаповГрафика
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыДокумента.НомерСтроки) КАК КоличествоЭтаповДокумента,
			|		NULL КАК КоличествоЭтаповГрафика,
			|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповДокумента,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки) КАК КоличествоЭтаповГрафика,
			|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
			|	ГДЕ
			|		ГрафикиОплатыЭтапы.Ссылка В
			|				(ВЫБРАТЬ
			|					ВременнаяТаблицаДокументПродажи.ГрафикОплаты КАК ГрафикОплаты
			|				ИЗ
			|					ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповДокумента,
			|		NULL КАК КоличествоЭтаповГрафика,
			|		ВЫБОР
			|			КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|					ИЛИ ВременнаяТаблицаДокументПродажи.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи) КАК ВложенныйЗапрос
			|ГДЕ
			|	0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки) КАК КоличествоЭтаповГрафика
			|			ИЗ
			|				Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ГрафикиОплатыЭтапы
			|			ГДЕ
			|				ГрафикиОплатыЭтапы.Ссылка В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение
			|					ИЗ
			|						ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи))
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(&ИспользоватьГрафикиОплаты) = ИСТИНА
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповГрафика)
			|				И МАКСИМУМ(ВложенныйЗапрос.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты) = ИСТИНА
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) КАК КоличествоЭтаповДокумента,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповГрафика) КАК КоличествоЭтаповГрафика
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыДокумента.НомерСтроки) КАК КоличествоЭтаповДокумента,
			|		NULL КАК КоличествоЭтаповГрафика,
			|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповДокумента,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки) КАК КоличествоЭтаповГрафика,
			|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ГрафикиОплатыЭтапы
			|	ГДЕ
			|		ГрафикиОплатыЭтапы.Ссылка В
			|				(ВЫБРАТЬ
			|					ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение
			|				ИЗ
			|					ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповДокумента,
			|		NULL КАК КоличествоЭтаповГрафика,
			|		ВЫБОР
			|			КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|					ИЛИ ВременнаяТаблицаДокументПродажи.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи) КАК ВложенныйЗапрос
			|;
			|";
			
КонецПроцедуры

// Формирует запрос для проверки вхождения цен документа продажи в допустимый диапазон
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                 КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика              КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                  КАК ВалютаЦены,
		|	ВложенныйЗапрос.Цена                        КАК Цена,
		|	ВложенныйЗапрос.МинимальноДопустимаяЦена    КАК МинимальноДопустимаяЦена,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена   КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МинимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена < ВложенныйЗапрос.МинимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМинимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МаксимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаДокументПродажи.Валюта      КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.ЦенаСоСкидкой        КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			МинимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МинимальнаяЦенаОтсутствует,
		|	ВЫБОР
		|		КОГДА
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МаксимальнаяЦенаОтсутствует,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МинимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМинимальнойЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМинимальнойЦены.Курс, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыМинимальнойЦены.Курс * КурсыВалютыЦены.Кратность)
		|							/ (КурсыВалютыЦены.Курс * КурсыВалютыМинимальнойЦены.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|				КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КАК МинимальноДопустимаяЦена,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки3,1)
		|			* ВЫБОР 
		|				КОГДА 
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.Курс, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыМаксимальнойЦены.Курс * КурсыВалютыЦены.Кратность)
		|							/ (КурсыВалютыЦены.Курс * КурсыВалютыМаксимальнойЦены.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КАК МаксимальноДопустимаяЦена
		|
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|		ПО
		|			ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Валюта = КурсыВалютыЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|// СОЕДИНЕНИЯ С МИНИМАЛЬНО ДОПУСТИМЫМИ ЦЕНАМИ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦены В (
		|					ВЫБРАТЬ
		|						Константы.ВидМинимальноДопустимыхЦенПродажи КАК ВидЦены
		|					ИЗ
		|						Константы КАК Константы
		|					)
		|				И (Номенклатура,Характеристика) В (
		|					ВЫБРАТЬ
		|						Товары.Номенклатура,
		|						Товары.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Товары
		|					)
		|			) КАК МинимальныеЦеныНоменклатурыСрезПоследних
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМинимальнойЦены
		|		ПО
		|			МинимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМинимальнойЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|// СОЕДИНЕНИЯ С МАКСИМАЛЬНО ДОПУСТИМЫМИ ЦЕНАМИ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦены В (
		|					ВЫБРАТЬ
		|						Константы.ВидМаксимальноДопустимыхЦенПродажи КАК ВидЦены
		|					ИЗ
		|						Константы КАК Константы
		|					)
		|				И (Номенклатура,Характеристика) В (
		|					ВЫБРАТЬ 
		|						Товары.Номенклатура,
		|						Товары.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Товары
		|					)
		|			) КАК МаксимальныеЦеныНоменклатурыСрезПоследних
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = МаксимальныеЦеныНоменклатурыСрезПоследних.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМаксимальнойЦены
		|		ПО
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМаксимальнойЦены.Валюта
		|
		|ГДЕ
		|	ВременнаяТаблицаТовары.Цена > 0
		|	И (ВременнаяТаблицаТовары.КодСтроки = 0 ИЛИ &НеПроверятьКодСтроки)
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"МинимальныеЦеныНоменклатурыСрезПоследних.Упаковка",
		"МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Упаковка",
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
КонецПроцедуры

// Формирует текст запроса для проверки наличия услуг в документе продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеУслугВДокументеПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки допустимости ручных скидок и наценок
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ЭтоНабор               КАК ЭтоНабор,
		|	ВременнаяТаблицаТовары.ЭтоКомплектующие       КАК ЭтоКомплектующие,
		|	ВременнаяТаблицаТовары.НоменклатураНабора     КАК НоменклатураНабора,
		|	ВременнаяТаблицаТовары.ХарактеристикаНабора   КАК ХарактеристикаНабора,
		|	ВременнаяТаблицаТовары.НомерСтроки            КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.ПроцентРучнойСкидки > 0
		|			И ВременнаяТаблицаТовары.ПроцентРучнойСкидки > ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияРучнойСкидки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.ПроцентРучнойСкидки < 0
		|			И -ВременнаяТаблицаТовары.ПроцентРучнойСкидки > ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойНаценки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияРучнойНаценки,
		|	ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойСкидки          КАК МаксимальнаяСуммаРучнойСкидки,
		|	ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойНаценки         КАК МаксимальнаяСуммаРучнойНаценки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаОграниченияРучныхСкидок КАК ВременнаяТаблицаОграниченияРучныхСкидок
		|		ПО ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВременнаяТаблицаОграниченияРучныхСкидок.ЦеноваяГруппа
		|		ИЛИ (ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа Не В (Выбрать Т.ЦеноваяГруппа Из ВременнаяТаблицаОграниченияРучныхСкидок КАК Т) И ВременнаяТаблицаОграниченияРучныхСкидок.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
		|ГДЕ
		|	ВременнаяТаблицаТовары.ПроцентРучнойСкидки <> 0
		|	И (ВременнаяТаблицаТовары.КодСтроки = 0 ИЛИ &НеПроверятьКодСтроки)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

Процедура СформироватьЗапросСоответствиеСуммыПредоплатыГрафикуОплат(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			ВЫРАЗИТЬ(
		|			ВЫБОР
		|				КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате) > 0
		|					ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате)
		|				ИНАЧЕ 0
		|			КОНЕЦ + 
		|			ВЫБОР
		|				КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару) > 0
		|					ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентЗалогаЗаТару) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару)
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ЧИСЛО(15,2))
		|				<> МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаПредоплаты)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате) > 0
		|				ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате)
		|			ИНАЧЕ 0
		|		КОНЕЦ + 
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару) > 0
		|				ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентЗалогаЗаТару) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару)
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15,2)) КАК СуммаПредоплатыПоГрафику
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ДанныеГрафикаОплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|	ПО
		|		ДанныеГрафикаОплаты.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		ВременнаяТаблицаСуммыВзаиморасчетов КАК СуммыВзаиморасчетов ПО ИСТИНА
		|	
		|
		|ГДЕ
		|	&ИспользоватьСтатусыРеализацийТоваровУслуг
		|	И ДанныеГрафикаОплаты.Ссылка.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|	И (ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)
		|	ИЛИ ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			ВЫРАЗИТЬ(
		|			ВЫБОР
		|				КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате) > 0
		|					ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате)
		|				ИНАЧЕ 0
		|			КОНЕЦ + 
		|			ВЫБОР
		|				КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару) > 0
		|					ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентЗалогаЗаТару) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару)
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ЧИСЛО(15,2))
		|				<> МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаПредоплаты)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате) > 0
		|				ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате)
		|			ИНАЧЕ 0
		|		КОНЕЦ + 
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару) > 0
		|				ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентЗалогаЗаТару) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару)
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15,2)) КАК СуммаПредоплатыПоГрафику
		|
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ДанныеГрафикаОплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|		ПО
		|			ДанныеСоглашения.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|		
		|	ПО
		|		ДанныеГрафикаОплаты.Ссылка = ДанныеСоглашения.ГрафикОплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаСуммыВзаиморасчетов КАК СуммыВзаиморасчетов ПО ИСТИНА
		|
		|ГДЕ
		|	&ИспользоватьСтатусыРеализацийТоваровУслуг
		|	И (ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)
		|	ИЛИ ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки))
		|
		|;
		|";
	
КонецПроцедуры


// Формирует текст запроса для проверки заполнения цен в документе
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИсходныйНомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Сумма = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА &ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияСумм,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА &ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	Не ВременнаяТаблицаТовары.ЭтоНабор
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры
	
// Формирует текст запроса для проверки заполнения цен в документе "Акт приемки клиентом"
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗаполненияЦенАкт(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИсходныйНомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА &ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияЦен,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСумм
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	Не ВременнаяТаблицаТовары.ЭтоНабор
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполнения цен в документе, позволяя нулевые цены в отмененных строках
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗаполненияЦенСУчетомОтмененных(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИсходныйНомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Сумма = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|					ИЛИ ВременнаяТаблицаТовары.Отменено ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияСумм,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|					ИЛИ ВременнаяТаблицаТовары.Отменено ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	Не ВременнаяТаблицаТовары.ЭтоНабор
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахЗаполненияДокументов

// Выводит сообщения об ошибках наличия дублей в тч Товары документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеДублейТоваровДокументаПродажи(Знач Выборка,
	                                                            Знач ДокументПродажи,
	                                                            Отказ)

	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" повторяется';uk='Номенклатура ""%Номенклатура%"" з характеристикою ""%Характеристика%"" повторюється'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);

		Иначе
				
			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" повторяется';uk='Номенклатура ""%Номенклатура%"" повторюється'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках наличия дублей в тч ЦеновыеГруппы документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеДублейЦеновыхГруппДокументаПродажи(Знач Выборка,
	                                                                 Знач ДокументПродажи,
	                                                                 Отказ)

	Пока Выборка.Следующий() Цикл

		ТекстОшибки = НСтр("ru='Ценовая группа ""%ЦеноваяГруппа%"" повторяется';uk='Цінова група ""%ЦеноваяГруппа%"" повторюється'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Выборка.ЦеноваяГруппа);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ЦеноваяГруппа"),
			,
			Отказ);

	КонецЦикла;

КонецПроцедуры


// Выводит сообщения об ошибках заполнения склада в документе продажи
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСклада(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)
	
	Если Выборка.Следующий() Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Склад"" не заполнено';uk='Поле ""Склад"" не заповнено'");
		
		Если ТипЗнч(ДокументПродажи) = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.Склад",
				,
				Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументПродажи,
				"Склад",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в табличной части "Товары" документа продажи
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Не заполнена колонка ""Склад"" в строке %НомерСтроки% списка ""%ИмяТЧ%""';uk='Не заповнена колонка ""Склад"" в рядку %НомерСтроки% списку ""%ИмяТЧ%""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяТЧ%",        Выборка.ПредставлениеТабличнойЧасти);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "Склад"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения цен в табличной части "Товары" документа продажи
//
Процедура СообщитьОбОшибкахКонтрольЗаполненияЦен(Знач Выборка,
	                                             Знач ДокументПродажи,
												 Знач ИмяТЧ,
	                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьОшибкиЗаполненияЦен Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Цена"" в строке %НомерСтроки% списка ""%ТабЧасть%""';uk='Не заповнена колонка ""Ціна"" у рядку %НомерСтроки% списку ""%ТабЧасть%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабЧасть%", ИмяТЧ);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"Цена"),
				,
				Отказ);
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСумм Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма"" в строке %НомерСтроки% списка ""%ТабЧасть%""';uk='Не заповнена колонка ""Сума"" в рядку %НомерСтроки% списку ""%ТабЧасть%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабЧасть%", ИмяТЧ);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"Сумма"),
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахСоответствияДокументовУсловиямПродаж

Процедура СообщитьПользователюОбОшибке(ТекстОшибки, ДокументПродажи, Поле="", Отказ)

	Если ТипЗнч(ДокументПродажи) = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект." + Поле,
			,
			Отказ);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			Поле,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках в шапке документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа 
// МассивОтклонений - Массив - Масиив отклонений шапки документ от условий продаж
//
Процедура СообщитьОбОшибкахШапкаДокументаПродажи(Знач Выборка,
	                                             Знач ДокументПродажи,
	                                             Отказ,
	                                             МассивОтклонений = Неопределено)
	
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЕстьОшибкиЗаполненияПартнер Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Партнер не должен отличаться от значения в соглашении ""%ПартнерСоглашение%""';uk='Партнер не повинен відрізнятися від значення в оферті ""%ПартнерСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Партнер",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%ПартнерДокумент%"" отличается от партнера в соглашении ""%ПартнерСоглашение%""';uk='""%ПартнерДокумент%"" відрізняється від партнера в оферті ""%ПартнерСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерДокумент%", ДокументПродажи.Партнер);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Партнер';uk='Партнер'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияКонтрагент Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Контрагент не должен отличаться от значения в соглашении ""%КонтрагентСоглашение%""';uk='Контрагент не повинен відрізнятися від значення в оферті ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Контрагент",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%Контрагент%"" отличается от контрагента в соглашении ""%КонтрагентСоглашение%""';uk='""%Контрагент%"" відрізняється від контрагента в оферті ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", ДокументПродажи.Контрагент);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Контрагент';uk='Контрагент'"), ТекстОшибки, МассивОтклонений);
			
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияОрганизация Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Организация не должна отличаться от значения в типовом соглашении ""%ОрганизацияСоглашение%""';uk='Організація не повинна відрізнятися від значення в типовій оферті ""%ОрганизацияСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Организация не должна отличаться от значения в соглашении ""%ОрганизацияСоглашение%""';uk='Організація не повинна відрізнятися від значення в оферті ""%ОрганизацияСоглашение%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Организация",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='""%Организация%"" отличается от организации в типовом соглашении ""%ОрганизацияСоглашение%""';uk='""%Организация%"" відрізняється від організації в типовій оферті ""%ОрганизацияСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='""%Организация%"" отличается от организации в соглашении ""%ОрганизацияСоглашение%""';uk='""%Организация%"" відрізняється від організації в оферті ""%ОрганизацияСоглашение%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", ДокументПродажи.Организация);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Организация';uk='Організація'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалюта Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Валюта не должна отличаться от значения в типовом соглашении ""%ВалютаСоглашение%""';uk='Валюта не повинна відрізнятися від значення в типовій оферті ""%ВалютаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Валюта не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""';uk='Валюта не повинна відрізнятися від значення в оферті ""%ВалютаСоглашение%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Валюта",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='""%Валюта%"" отличается от валюты в типовом соглашении ""%ВалютаСоглашение%""';uk='""%Валюта%"" відрізняється від валюти в типовій оферті ""%ВалютаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='""%Валюта%"" отличается от валюты в соглашении ""%ВалютаСоглашение%""';uk='""%Валюта%"" відрізняється від валюти в оферті ""%ВалютаСоглашение%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументПродажи.Валюта);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Валюта';uk='Валюта'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Валюта взаиморасчетов не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""';uk='Валюта взаєморозрахунків не повинна відрізнятися від значення в оферті ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВалютаВзаиморасчетов",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%Валюта%"" отличается от валюты взаиморасчетов в соглашении ""%ВалютаСоглашение%""';uk='""%Валюта%"" відрізняється від валюти взаєморозрахунків в оферті ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументПродажи.ВалютаВзаиморасчетов);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Валюта взаиморасчетов';uk='Валюта взаєморозрахунків'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки Тогда
			ТекстОшибки = НСтр("ru='Признак ограничивать ручные скидки не должен отличаться от значения в типовом соглашении';uk='Ознака обмежувати ручні знижки не повинна відрізнятися від значення в типовій оферті'");
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ОграничиватьРучныеСкидки",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Ручные скидки';uk='Ручні знижки'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВидЦен Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.ВидЦенСоглашение) Тогда
				
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='Вид цен не должен отличаться от значения в типовом соглашении ""%ВидЦенСоглашение%""';uk='Вид цін не повинен відрізнятися від значення в типовій оферті ""%ВидЦенСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='Вид цен не должен отличаться от значения в соглашении ""%ВидЦенСоглашение%""';uk='Вид цін не повинен відрізнятися від значення в оферті ""%ВидЦенСоглашение%""'");
					КонецЕсли;
						
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);

				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='Вид цен в типовом соглашении не определен. Вид цен не может быть установлен без согласования';uk='Вид цін у типовій оферті не визначено. Вид цін не може бути встановлений без погодження'");
					Иначе
						ТекстОшибки = НСтр("ru='Вид цен в соглашении не определен. Вид цен не может быть установлен без согласования';uk='Вид цін в оферті не визначено. Вид цін не може бути встановлений без погодження'");
					КонецЕсли;
						
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВидЦен",
					Отказ);
			Иначе 
					
				Если ЗначениеЗаполнено(Выборка.ВидЦенСоглашение) Тогда
				
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='""%ВидЦен%"" отличается от вида цен в типовом соглашении ""%ВидЦенСоглашение%""';uk='""%ВидЦен%"" відрізняється від виду цін у типовій оферті ""%ВидЦенСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='""%ВидЦен%"" отличается от вида цен в соглашении ""%ВидЦенСоглашение%""';uk='""%ВидЦен%"" відрізняється від виду цін в оферті ""%ВидЦенСоглашение%""'");
					КонецЕсли;
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%", ?(ЗначениеЗаполнено(ДокументПродажи.ВидЦен),ДокументПродажи.ВидЦен,НСтр("ru='произвольный';uk='довільний'")));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);
				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='Вид цен в типовом соглашении не определен. Вид цен не может быть установлен без согласования';uk='Вид цін у типовій оферті не визначено. Вид цін не може бути встановлений без погодження'");
					Иначе
						ТекстОшибки = НСтр("ru='Вид цен в соглашении не определен. Вид цен не может быть установлен без согласования';uk='Вид цін в оферті не визначено. Вид цін не може бути встановлений без погодження'");
					КонецЕсли;
						
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Вид цен';uk='Вид цін'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияСценарияПланирования Тогда
			
			Если Не ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.СценарийПланированияСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru='Сценарий планирования не должен отличаться от значения в типовом соглашении ""%СценарийПланированияСоглашение%""';uk='Сценарій планування не повинен відрізнятися від значення в типовій оферті ""%СценарийПланированияСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланированияСоглашение%", Выборка.СценарийПланированияСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru='Сценарий планирования в типовом соглашении не определен. Сценарий планирования не может быть установлен без согласования';uk='Сценарій планування в типовій оферті не визначено. Сценарій планування не може бути встановлений без погодження'");
					
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СценарийПланирования",
					Отказ);
			Иначе 
				
				Если ЗначениеЗаполнено(Выборка.СценарийПланированияСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru='""%СценарийПланирования%"" отличается от сценария в типовом соглашении ""%СценарийПланированияСоглашение%""';uk='""%СценарийПланирования%"" відрізняється від сценарію у типовій оферті ""%СценарийПланированияСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланирования%", ДокументПродажи.СценарийПланирования);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланированияСоглашение%", Выборка.СценарийПланированияСоглашение);
				Иначе
					
					ТекстОшибки = НСтр("ru='Сценарий планирования в типовом соглашении не определен. Сценарий планирования не может быть установлен без согласования';uk='Сценарій планування в типовій оферті не визначено. Сценарій планування не може бути встановлений без погодження'");
					
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Сценарий планирования';uk='Сценарій планування'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияВидПлана Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.ВидПланаСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru='Вид плана не должен отличаться от значения в типовом соглашении ""%ВидПланаСоглашение%""';uk='Вид плану не повинен відрізнятися від значення в типовій оферті ""%ВидПланаСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПланаСоглашение%", Выборка.ВидПланаСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru='Вид плана в типовом соглашении не определен. Вид плана не может быть установлен без согласования';uk='Вид плану в типовій оферті не визначено. Вид плану не може бути встановлений без погодження'");
					
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВидПлана",
					Отказ);
			Иначе 
				Если ЗначениеЗаполнено(Выборка.ВидПланаСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru='""%ВидПлана%"" отличается от вида плана в типовом соглашении ""%ВидПланаСоглашение%""';uk='""%ВидПлана%"" відрізняється від виду плану в типовій оферті ""%ВидПланаСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПлана%", ДокументПродажи.ВидПлана);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПланаСоглашение%", Выборка.ВидПланаСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru='Вид плана в типовом соглашении не определен. Вид плана не может быть установлен без согласования';uk='Вид плану в типовій оферті не визначено. Вид плану не може бути встановлений без погодження'");
					
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Вид плана';uk='Вид плану'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
			
		КонецЕсли;

			
		Если Выборка.ЕстьОшибкиЗаполненияХозяйственнаяОперация Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Операция не должна отличаться от значения в типовом соглашении ""%Операция%""';uk='Операція не повинна відрізнятися від значення в типовій оферті ""%Операция%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Операция не должна отличаться от значения в соглашении ""%Операция%""';uk='Операція не повинна відрізнятися від значення в оферті ""%Операция%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", Выборка.ХозяйственнаяОперацияСоглашение); 
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ХозяйственнаяОперация",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='""%Операция%"" отличается от операции в типовом соглашении ""%ОперацияСоглашения%""';uk='""%Операция%"" відрізняється від операції в типовій оферті ""%ОперацияСоглашения%""'");
				Иначе
					ТекстОшибки = НСтр("ru='""%Операция%"" отличается от операции в соглашении ""%ОперацияСоглашения%""';uk='""%Операция%"" відрізняється від операції в оферті ""%ОперацияСоглашения%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", ДокументПродажи.ХозяйственнаяОперация); 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОперацияСоглашения%", Выборка.ХозяйственнаяОперацияСоглашение); 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Хозяйственная операция';uk='Господарська операція'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Признак ""Цена включает НДС"" не должен отличаться от значения в типовом соглашении ""%ЦенаВключаетНДС%""';uk='Ознака ""Ціна включає ПДВ"" не повинна відрізнятися від значення в типовій оферті ""%ЦенаВключаетНДС%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении ""%ЦенаВключаетНДС%""';uk='Ознака ""Ціна включає ПДВ"" не повинна відрізнятися від значення в оферті ""%ЦенаВключаетНДС%""'");
			КонецЕсли;
				
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаВключаетНДС%", ?(Выборка.ЦенаВключаетНДССоглашение, НСтр("ru='Цена включает НДС';uk='Ціна включає ПДВ'"), НСтр("ru='Цена не включает НДС';uk='Ціна не включає ПДВ'")));
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ЦенаВключаетНДС",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Цена включает НДС';uk='Ціна включає ПДВ'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияДатаНачалаДействия Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Дата начала действия должна быть не меньше, чем дата начала действия типового соглашения ""%ДатаНачалаДействияСоглашение%""';uk='Дата початку дії повинна бути не менше, ніж дата початку дії типової оферти ""%ДатаНачалаДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачалаДействияСоглашение%", Формат(Выборка.ДатаНачалаДействияСоглашение, "ДЛФ=DD"));
			
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДатаНачалаДействия",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%ДатаНачала%"" меньше, чем дата начала действия типового соглашения ""%ДатаНачалаДействияСоглашение%""';uk='""%ДатаНачала% менше, ніж дата початку дії типової оферти ""%ДатаНачалаДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачалаДействияСоглашение%", Формат(Выборка.ДатаНачалаДействияСоглашение, "ДЛФ=DD"));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачала%", Формат(ДокументПродажи.ДатаНачалаДействия, "ДЛФ=DD"));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Дата начала действия';uk='Дата початку дії'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияДатаОкончанияДействия Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Дата окончания действия должна быть не больше, чем дата окончания действия типового соглашения ""%ДатаОкончанияДействияСоглашение%""';uk='Дата закінчення дії повинна бути не більше, ніж дата закінчення дії типової оферти ""%ДатаОкончанияДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействияСоглашение%", Формат(Выборка.ДатаОкончанияДействияСоглашение, "ДЛФ=DD"));
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДатаОкончанияДействия",
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru='""%ДатаОкончания%"" больше, чем дата окончания действия типового соглашения ""%ДатаОкончанияДействияСоглашение%""';uk='""%ДатаОкончания% більше, ніж дата закінчення дії типової оферти ""%ДатаОкончанияДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействияСоглашение%", Формат(Выборка.ДатаОкончанияДействияСоглашение, "ДЛФ=DD"));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончания%", Формат(ДокументПродажи.ДатаОкончанияДействия, "ДЛФ=DD"));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Дата окончания действия';uk='Дата закінчення дії'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияГрафикОплаты Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='График оплаты не должен отличаться от значения в типовом соглашении ""%ГрафикОплатыСоглашение%""';uk='Графік оплати не повинен відрізнятися від значення в типовій оферті ""%ГрафикОплатыСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='График оплаты не должен отличаться от значения в соглашении ""%ГрафикОплатыСоглашение%""';uk='Графік оплати не повинен відрізнятися від значення в оферті ""%ГрафикОплатыСоглашение%""'");
				КонецЕсли;
					
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплатыСоглашение%", Выборка.ГрафикОплатыСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ГрафикОплаты",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='""%ГрафикОплаты%"" отличается от графика в типовом соглашении ""%ГрафикОплатыСоглашение%""';uk='""%ГрафикОплаты%"" відрізняється від графіка в типовій оферті ""%ГрафикОплатыСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='""%ГрафикОплаты%"" отличается от графика в соглашении ""%ГрафикОплатыСоглашение%""';uk='""%ГрафикОплаты%"" відрізняється від графіка в оферті ""%ГрафикОплатыСоглашение%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплатыСоглашение%", Выборка.ГрафикОплатыСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплаты%", ДокументПродажи.ГрафикОплаты);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='График оплаты';uk='Графік оплати'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru='Склад должен входить в группу складов типового соглашения ""%СкладСоглашение%""';uk='Склад повинен входити в групу складів типової оферти ""%СкладСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='Склад не должен отличаться от значения в типовом соглашении ""%СкладСоглашение%""';uk='Склад не повинен відрізнятися від значення в типовій оферті ""%СкладСоглашение%""'");
					КонецЕсли;
				Иначе
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru='Склад должен входить в группу складов соглашения ""%СкладСоглашение%""';uk='Склад повинен входити в групу складів оферти ""%СкладСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='Склад не должен отличаться от значения в соглашении ""%СкладСоглашение%""';uk='Склад не повинен відрізнятися від значення в оферті ""%СкладСоглашение%""'");
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Склад",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru='""%Склад%"" должен входить в группу складов типового соглашения ""%СкладСоглашение%""';uk='""%Склад%"" повинен входити в групу складів типової оферти ""%СкладСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='""%Склад%"" отличается от склада в типовом соглашении ""%СкладСоглашение%""';uk='""%Склад%"" відрізняється від складу в типовій оферті ""%СкладСоглашение%""'");
					КонецЕсли;
				Иначе
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru='""%Склад%"" должен входить в группу складов соглашения ""%СкладСоглашение%""';uk='""%Склад%"" повинен входити в групу складів оферти ""%СкладСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='""%Склад%"" отличается от склада в соглашении ""%СкладСоглашение%""';uk='""%Склад%"" відрізняється від складу в оферті ""%СкладСоглашение%""'");
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", ДокументПродажи.Склад);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Склад';uk='Склад'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Признак возврата многообортной тары не должен отличаться от значения в типовом соглашении';uk='Ознака повернення многообортной тари не повинна відрізнятися від значення в типовій оферті'");
			Иначе
				ТекстОшибки = НСтр("ru='Признак возврата многообортной тары не должен отличаться от значения в соглашении';uk='Ознака повернення многообортной тари не повинна відрізнятися від значення в оферті'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					?(Выборка.ЭтоСоглашение,"ВозвращатьМногооборотнуюТару","ВернутьМногооборотнуюТару"),
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Возврат тары';uk='Повернення тари'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Признак необходимости залога за тару не должен отличаться от значения в типовом соглашении';uk='Ознака необхідності застави за тару не повинна відрізнятися від значення в типовій оферті'");
			Иначе
				ТекстОшибки = НСтр("ru='Признак необходимости залога за тару не должен отличаться от значения в соглашении';uk='Ознака необхідності застави за тару не повинна відрізнятися від значення в оферті'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ТребуетсяЗалогЗаТару",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Залог за тару';uk='Застава за тару'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю Тогда
			
			ТекстОшибки = НСтр("ru='Способ расчета даты возврата многообортной тары не должен отличаться от значения в типовом соглашении ""%РассчитыватьДатуВозвратаТарыПоКалендарю%""';uk='Спосіб розрахунку дати повернення багатообортної тари не повинен відрізнятися від значення в типовій оферті ""%РассчитыватьДатуВозвратаТарыПоКалендарю%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РассчитыватьДатуВозвратаТарыПоКалендарю%", 
				?(Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю, НСтр("ru='По календарю предприятия';uk='За календарем підприємства'"),НСтр("ru='По всем дням';uk='По всіх днях'")));
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"РассчитыватьДатуВозвратаТарыПоКалендарю",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Способ расчета даты возврата';uk='Спосіб розрахунку дати повернення'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			Если НЕ ВыводитьВОтчет Тогда 
				
				ТекстОшибки = НСтр("ru='Срок возврата многообортной тары не должен отличаться от значения в соглашении (%СрокВозврата%)';uk='Строк повернення багатообортной тари не повинен відрізнятися від значення в оферті (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СрокВозвратаМногооборотнойТары",
					Отказ);
			Иначе 
					
				ТекстОшибки = НСтр("ru='(%СрокВозвратаТиповое%) отличается от срока в соглашении (%СрокВозврата%)';uk='(%СрокВозвратаТиповое%) відрізняється від строку в оферті (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозвратаТиповое%", ДокументПродажи.СрокВозвратаМногооборотнойТары);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Срок возврата тары';uk='Строк повернення тари'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиДатаВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
				ДокументПродажи,
				Выборка.СрокВозвратаМногооборотнойТары,
				Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю,
				Выборка.КалендарьВозвратаТары);
			
			Если ДатаВозвратаМногооборотнойТары <> ДокументПродажи.ДатаВозвратаМногооборотнойТары Тогда
				ТекстОшибки = НСтр("ru='Дата возврата многообортной тары не должна отличаться от указанной в соглашении ""%ДатаВозвратаМногооборотнойТары%""';uk='Дата повернення многообортної тари не повинна відрізнятися від зазначеної в оферті ""%ДатаВозвратаМногооборотнойТары%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаВозвратаМногооборотнойТары%", Формат(ДатаВозвратаМногооборотнойТары, "ДЛФ=DD"));
				
				Если Не ВыводитьВОтчет Тогда
					СообщитьПользователюОбОшибке(
						ТекстОшибки,
						ДокументПродажи,
						"ДатаВозвратаМногооборотнойТары",
						Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Дата возврата тары';uk='Дата повернення тари'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКалендарьВозвратаТары Тогда
			
			ТекстОшибки = НСтр("ru='Календарь возврата тары не должен отличаться от указанного в соглашении %КалендарьВозвратаТарыСоглашение%';uk='Календар повернення тари не повинен відрізнятися від вказаного в оферті %КалендарьВозвратаТарыСоглашение%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КалендарьВозвратаТарыСоглашение%", Выборка.КалендарьВозвратаТарыСоглашение);
				
			Если Не ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"КалендарьВозвратаТары",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Календарь возврата тары';uk='Календар повернення тари'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСегментНоменклатуры Тогда

			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Сегмент номенклатуры не должен отличаться от значения в типовом соглашении ""%СегментНоменклатурыСоглашение%""';uk='Сегмент номенклатури не повинен відрізнятися від значення в типовій оферті ""%СегментНоменклатурыСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатурыСоглашение%", Выборка.СегментНоменклатурыСоглашение);
			
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СегментНоменклатуры",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%СегментНоменклатуры%"" отличается от сегмента в типовом соглашении ""%СегментНоменклатурыСоглашение%""';uk='""%СегментНоменклатуры%"" відрізняється від сегменту в типовій оферті ""%СегментНоменклатурыСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатурыСоглашение%", Выборка.СегментНоменклатурыСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатуры%", ДокументПродажи.СегментНоменклатуры);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Сегмент номенклатуры';uk='Сегмент номенклатури'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияПроцентРучнойСкидки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Процент ручной скидки не должен быть больше значения, чем в типовом соглашении (%ПроцентРучнойСкидки%%)';uk='Відсоток ручної знижки не повинен бути більше значення, ніж у типовій оферті (%ПроцентРучнойСкидки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидки%", Выборка.ПроцентРучнойСкидки);
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПроцентРучнойСкидки",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='(%ПроцентРучнойСкидкиТиповое%%) больше значения в типовом соглашении (%ПроцентРучнойСкидки%%)';uk='(%ПроцентРучнойСкидкиТиповое%%) більше значення в типовій оферті (%ПроцентРучнойСкидки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидки%", Выборка.ПроцентРучнойСкидки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидкиТиповое%", ДокументПродажи.ПроцентРучнойСкидки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Процент ручной скидки';uk='Відсоток ручної знижки'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияПроцентРучнойНаценки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Процент ручной наценки не должен быть больше значения, чем в типовом соглашении (%ПроцентРучнойНаценки%%)';uk='Відсоток ручної націнки не повинен бути більше значення, ніж у типовій оферті (%ПроцентРучнойНаценки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценки%", Выборка.ПроцентРучнойНаценки);
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПроцентРучнойНаценки",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='(%ПроцентРучнойНаценкиТиповое%%) больше значения в типовом соглашении (%ПроцентРучнойНаценки%%)';uk='(%ПроцентРучнойНаценкиТиповое%%) більше значення в типовій оферті (%ПроцентРучнойНаценки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценки%", Выборка.ПроцентРучнойНаценки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценкиТиповое%", ДокументПродажи.ПроцентРучнойНаценки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Процент ручной наценки';uk='Відсоток ручної націнки'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияРегулярное Тогда
			ТекстОшибки = НСтр("ru='Признак регулярности не должен отличаться от значения в типовом соглашении';uk='Ознака регулярності не повинна відрізнятися від значення в типовій оферті'");
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Регулярное",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Регулярность';uk='Регулярність'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияПериод Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Период не должен отличаться от значения в типовом соглашении ""%ПериодСоглашение%""';uk='Період не повинен відрізнятися від значення в типовій оферті ""%ПериодСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПериодСоглашение%", Выборка.ПериодСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Период",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%Период%"" отличается от периода в типовом соглашении ""%ПериодСоглашение%""';uk='""%Период%"" відрізняється від періоду у типовій оферті ""%ПериодСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПериодСоглашение%", Выборка.ПериодСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Период%", ДокументПродажи.Период);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Период';uk='Період'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияКоличествоПериодов Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Количество периодов не должен быть меньше, чем в типовом соглашении - %КоличествоПериодовСоглашение%';uk='Кількість періодів не повинна бути менше, ніж у типовій угоді - %КоличествоПериодовСоглашение%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодовСоглашение%", Выборка.КоличествоПериодовСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"КоличествоПериодов",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='%КоличествоПериодов% меньше, чем в типовом соглашении - %КоличествоПериодовСоглашение%';uk='%КоличествоПериодов% менше, ніж у типовій оферті - %КоличествоПериодовСоглашение%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодовСоглашение%", Выборка.КоличествоПериодовСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодов%", ДокументПродажи.КоличествоПериодов);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Количество периодов';uk='Кількість періодів'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей Тогда

			ТекстОшибки = НСтр("ru='Признак использования в работе торговых представителей не должен отличаться от значения в типовом соглашении';uk='Ознака використання в роботі торгових представників не повинна відрізнятися від значення в типовій оферті'");
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ИспользуетсяВРаботеТорговыхПредставителей",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Торговые представители';uk='Торгові представники'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияДоступноВнешнимПользователям Тогда

			ТекстОшибки = НСтр("ru='Признак доступности внешним пользователям не должен отличаться от значения в типовом соглашении';uk='Ознака доступності зовнішнім користувачам не повинна відрізнятися від значення в типовій оферті'");
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДоступноВнешнимПользователям",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Внешние пользователи';uk='Зовнішні користувачі'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем в типовом соглашении - %СрокПоставкиСоглашение% дн.';uk='Строк поставки не повинен бути менше, ніж у типовій оферті - %СрокПоставкиСоглашение% дн.'");
				Иначе
					ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем в соглашении - %СрокПоставкиСоглашение% дн.';uk='Строк поставки не повинен бути менше, ніж в оферті - %СрокПоставкиСоглашение% дн.'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
		
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СрокПоставки",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='%СрокПоставки% дн. меньше, чем в типовом соглашении - %СрокПоставкиСоглашение% дн.';uk='%СрокПоставки% дн. менше, ніж у типовій оферті - %СрокПоставкиСоглашение% дн.'");
				Иначе
					ТекстОшибки = НСтр("ru='%СрокПоставки% дн. меньше, чем в соглашении - %СрокПоставкиСоглашение% дн.';uk='%СрокПоставки% дн. менше, ніж у оферті - %СрокПоставкиСоглашение% дн.'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставки%", ДокументПродажи.СрокПоставки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Срок поставки';uk='Строк поставки'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияФормыОплаты Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Форма оплаты не должна отличаться от значения в графике оплаты ""%ФормаОплатыГрафик%""';uk='Форма оплати не повинна відрізнятися від значення у графіку оплати ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыГрафик);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ФормаОплаты",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%ФормаОплаты%"" отличается от формы оплаты в графике оплаты ""%ФормаОплатыГрафик%""';uk='""%ФормаОплаты%"" відрізняється від форми оплати в графіку оплати ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыГрафик);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ДокументПродажи.ФормаОплаты),ДокументПродажи.ФормаОплаты, НСтр("ru='Любая';uk='Будь-яка'")));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Форма оплаты';uk='Форма оплати'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКалендаря Тогда

			Если ЗначениеЗаполнено(Выборка.Календарь) и Не ЗначениеЗаполнено(ДокументПродажи.Календарь) Тогда
				
				ТекстОшибки = НСтр("ru='Режим учета отсрочки не должен отличаться от значения в типовом соглашении ""по рабочим дням""';uk='Режим обліку відстрочки не повинен відрізнятися від значення в типовій оферті ""по робочим дням""'");
				
			ИначеЕсли Не ЗначениеЗаполнено(Выборка.Календарь) и ЗначениеЗаполнено(ДокументПродажи.Календарь) Тогда
				
				ТекстОшибки = НСтр("ru='Режим учета отсрочки не должен отличаться от значения в типовом соглашении ""по календарным дням""';uk='Режим обліку відстрочки не повинен відрізнятися від значення в типовій оферті "". по календарних днях""'");
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Календарь не должен отличаться от значения ""%Календарь%""';uk='Календар не повинен відрізнятися від значення ""%Календарь%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Календарь%", Выборка.Календарь);
				
			КонецЕсли;
			
			ВидимостьЭтаповОплаты = ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
			
			Если ВидимостьЭтаповОплаты Тогда 
				Поле = "НадписьОплата";
				КлючДанныхСообщения = Неопределено;
			Иначе
				Поле = "ГрафикОплаты";
				КлючДанныхСообщения = ДокументПродажи;
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					КлючДанныхСообщения,
					Поле,
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Календарь';uk='Календар'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияФормыОплатыСоглашения Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Форма оплаты не должна отличаться от значения в типовом соглашении ""%ФормаОплатыГрафик%""';uk='Форма оплати не повинна відрізнятися від значення в типовій оферті ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашенияСКлиентом);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ФормаОплаты",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%ФормаОплаты%"" отличается от формы оплаты в типовом соглашении ""%ФормаОплатыГрафик%""';uk='""%ФормаОплаты%"" відрізняється від форми оплати в типовій оферті ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашенияСКлиентом);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ДокументПродажи.ФормаОплаты),ДокументПродажи.ФормаОплаты, НСтр("ru='Любая';uk='Будь-яка'")));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Форма оплаты';uk='Форма оплати'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
					ТекстОшибки = НСтр("ru='Использование договоров не должно отличаться от значения в типовом соглашении ""Требуется указание договора""';uk='Використання договорів не повинне відрізнятися від значення в типовій оферті ""Потрібне зазначення договору""'");
				Иначе
					ТекстОшибки = НСтр("ru='Использование договоров не должно отличаться от значения в типовом соглашении ""Договоры не используются""';uk='Використання договорів не повинне відрізнятися від значення в типовій оферті ""Договори не використовуються""'");
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ИспользуютсяДоговорыКонтрагентов",
					Отказ);
			Иначе 
				Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
					ТекстОшибки = НСтр("ru='""Договоры не используются"" отличается от значения в типовом соглашении ""Требуется указание договора""';uk='""Договори не використовуються"" відрізняється від значення в типовій оферті ""Необхідне зазначення договору""'");
				Иначе
					ТекстОшибки = НСтр("ru='""Требуется указание договора"" отличается от значения в типовом соглашении ""Договоры не используются""';uk='""Потрібне зазначення договору"" відрізняється від значення в типовій оферті ""Договори не використовуються""'");
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Использование договоров';uk='Використання договорів'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияПорядокРасчетов
			И Не Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Порядок расчетов не должен отличаться от значения в типовом соглашении ""%ПорядокРасчетов%""';uk='Порядок розрахунків не повинен відрізнятися від значення в типовій оферті ""%ПорядокРасчетов%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Порядок расчетов не должен отличаться от значения в соглашении ""%ПорядокРасчетов%""';uk='Порядок розрахунків не повинен відрізнятися від значення в оферті ""%ПорядокРасчетов%""'");
			КонецЕсли;
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокРасчетов%", Выборка.ПорядокРасчетовСоглашение);
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПорядокРасчетов",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Порядок расчетов';uk='Порядок розрахунків'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж
//
Процедура СообщитьОбОшибкахТоварыДокументаПродажи(Знач Выборка,
	                                              Знач ДокументПродажи,
	                                              Отказ,
	                                              ДеревоОтклонений = Неопределено)
	
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';uk=' у рядку %НомерСтроки% списку ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);

		Если Выборка.ЕстьОшибкиЗаполненияЦена Тогда
			
			Если (Выборка.ЭтоКомплектующие)  Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ЭтоНабор Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Цена набора должна быть не ниже фиксированной цены в типовом соглашении ""%ЦенаСоглашение%""';uk='Ціна набору повинна бути не нижче фіксованої ціни в типовій оферті ""%ЦенаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена набора должна быть не ниже фиксированной цены в соглашении ""%ЦенаСоглашение%""';uk='Ціна набору повинна бути не нижче фіксованої ціни в оферті ""%ЦенаСоглашение%""'");
				КонецЕсли;
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Цена должна быть не ниже фиксированной цены в типовом соглашении ""%ЦенаСоглашение%""';uk='Ціна повинна бути не нижче фіксованої ціни в типовій оферті ""%ЦенаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена должна быть не ниже фиксированной цены в соглашении ""%ЦенаСоглашение%""';uk='Ціна повинна бути не нижче фіксованої ціни в оферті ""%ЦенаСоглашение%""'");
				КонецЕсли;
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаСоглашение%", Формат(Выборка.ЦенаСоглашение,"ЧДЦ=2"));
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений, Выборка.ЭтоНабор, Выборка.Цена);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
					Отказ);
			КонецЕсли;
		ИначеЕсли Выборка.ЕстьОшибкиЗаполненияВидЦены И Выборка.ЦенаСоглашение = 0 Тогда
			
			Если (Выборка.ЭтоКомплектующие)  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ВидЦеныСоглашение) Тогда
				
				Если ЗначениеЗаполнено (Выборка.ВидЦены) Тогда
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='Вид цены не должен отличаться от вида цены в типовом соглашении ""%ВидЦеныСоглашение%""';uk='Вид ціни не повинен відрізнятися від виду ціни в типовій оферті ""%ВидЦеныСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='Вид цены не должен отличаться от вида цены в соглашении ""%ВидЦеныСоглашение%""';uk='Вид ціни не повинен відрізнятися від виду ціни в оферті ""%ВидЦеныСоглашение%""'");
					КонецЕсли;
						
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныСоглашение%", Выборка.ВидЦеныСоглашение);
					
				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='Вид цены должен быть заполнен и не должен отличаться от вида цены в типовом соглашении ""%ВидЦеныСоглашение%""';uk='Вид ціни повинен бути заповнений і не повинен відрізнятися від виду ціни в типовій оферті ""%ВидЦеныСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='Вид цены должен быть заполнен и не должен отличаться от вида цены в соглашении ""%ВидЦеныСоглашение%""';uk='Вид ціни повинен бути заповнений і не повинен відрізнятися від виду ціни в оферті ""%ВидЦеныСоглашение%""'");
					КонецЕсли;
						
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныСоглашение%", Выборка.ВидЦеныСоглашение);
					
				КонецЕсли;
				
				Если ВыводитьВОтчет Тогда
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВидЦены", ТекстОшибки, ДеревоОтклонений, Выборка.ЭтоНабор, Выборка.Цена);
				Иначе
					СообщитьПользователюОбОшибке(
						ТекстОшибки + АдресОшибки,
						ДокументПродажи,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ВидЦены"),
						Отказ);
				КонецЕсли;
			Иначе
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='В типовом соглашении цены не определены. Вид цены ""%ВидЦены%"" по данному соглашению не может быть установлен без согласования';uk='У типовій оферті ціни не визначені. Вид ціни ""%ВидЦены%"" за даною офертою не може бути встановлений без погодження'");
					Иначе
						ТекстОшибки = НСтр("ru='В соглашении цены не определены. Вид цены ""%ВидЦены%"" по данному соглашению не может быть установлен без согласования';uk='В оферті ціни не визначені. Вид ціни ""%ВидЦены%"" за даною офертою не може бути встановлений без погодження'");
					КонецЕсли;
					
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦены%", Выборка.ВидЦены);
					Если ВыводитьВОтчет Тогда
						Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВидЦены", ТекстОшибки, ДеревоОтклонений, Выборка.ЭтоНабор, Выборка.Цена);
					Иначе
						СообщитьПользователюОбОшибке(
							ТекстОшибки + АдресОшибки,
							ДокументПродажи,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ВидЦены"),
							Отказ);
					КонецЕсли;
				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='В типовом соглашении цены не определены. Цена по данному соглашению не может быть установлена без согласования';uk='У типовій оферті ціни не визначені. Ціна за даною офертою не може бути встановлена без погодження'");
					Иначе
						ТекстОшибки = НСтр("ru='В соглашении цены не определены. Цена по данному соглашению не может быть установлена без согласования';uk='В оферті ціни не визначені. Ціна за даною офертою не може бути встановлена без погодження'");
					КонецЕсли;
					
					Если ВыводитьВОтчет Тогда
						Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений, Выборка.ЭтоНабор, Выборка.Цена);
					Иначе
						СообщитьПользователюОбОшибке(
							ТекстОшибки + АдресОшибки,
							ДокументПродажи,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
							Отказ);
					КонецЕсли;
				КонецЕсли;
					
			КонецЕсли;

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда

			Если Выборка.ЭтоСоглашение Тогда
				
				ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем в типовом соглашении - %СрокПоставкиСоглашение% дн.';uk='Строк поставки не повинен бути менше, ніж у типовій оферті - %СрокПоставкиСоглашение% дн.'");
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем в соглашении - %СрокПоставкиСоглашение% дн.';uk='Строк поставки не повинен бути менше, ніж в оферті - %СрокПоставкиСоглашение% дн.'");
				
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "СрокПоставки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СрокПоставки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия тч ЦеновыеГруппы условиям продаж
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений - ДеревоЗначений - Дерево отклонений от условий продаж
//
Процедура СообщитьОбОшибкахСоответствиеГруппЦенНоменклатурыУсловиямПродаж(Знач Выборка,
	                                                                      Знач ДокументПродажи,
	                                                                      Отказ,
	                                                                      ДеревоОтклонений = Неопределено)
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Группы цен номенклатуры""';uk=' у рядку %НомерСтроки% списку ""Групи цін номенклатури""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		Если Выборка.ЕстьОшибкиЗаполненияЦеновыеГруппы Тогда

			ТекстОшибки = НСтр("ru='Ценовая группа ""%ЦеноваяГруппа%"" отсутствует в типовом соглашении';uk='Цінова група ""%ЦеноваяГруппа%"" відсутня в типовій оферті'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Выборка.ЦеноваяГруппа);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ЦеноваяГруппа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ЦеноваяГруппа"),
					Отказ);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияВидЦен Тогда

			ТекстОшибки = НСтр("ru='Вид цен не должен отличаться от значения в типовом соглашении ""%ВидЦенСоглашение%""';uk='Вид цін не повинен відрізнятися від значення в типовій оферті ""%ВидЦенСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВидЦен", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ВидЦен"),
					Отказ);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияРучнойСкидки Тогда

			ТекстОшибки = НСтр("ru='Процент ручной скидки не должен отличаться от значения в типовом соглашении (%Значение%%)';uk='Відсоток ручної знижки не повинна відрізнятися від значення в типовій оферті (%Значение%%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Значение%", Выборка.ПроцентРучнойСкидкиСоглашение);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойСкидки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ПроцентРучнойСкидки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда

			ТекстОшибки = НСтр("ru='Процент ручной наценки не должен отличаться от значения в типовом соглашении (%Значение%%)';uk='Відсоток ручної націнки не повинен відрізнятися від значення в типовій оферті (%Значение%%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Значение%", Выборка.ПроцентРучнойНаценкиСоглашение);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойНаценки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ПроцентРучнойНаценки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда

			ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем значение в типовом соглашении - %СрокПоставкиСоглашение% дн.';uk='Строк поставки не повинен бути меншим, ніж значення в типовій оферті - %СрокПоставкиСоглашение% дн.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "СрокПоставки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "СрокПоставки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия товаров сегменту номенклатуры
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж
//
Процедура СообщитьОбОшибкахПринадлежностьТоваровСегментуНоменклатуры(Знач Выборка,
	                                                                 Знач ДокументПродажи,
	                                                                 Отказ,
	                                                                 ДеревоОтклонений = Неопределено)
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		Пока Выборка.Следующий() Цикл
			НомерСтроки = Выборка.НомерСтроки;
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';uk=' у рядку %НомерСтроки% списку ""%ПредставлениеТЧ%""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     НомерСтроки);
			АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);

			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" 
                | должна входить в сегмент номенклатуры ""%СегментНоменклатуры%"", определенный в соглашении'
                |;uk='Номенклатура ""%Номенклатура%"" з характеристикою ""%Характеристика%"" 
                |повинна входити до сегменту номенклатури ""%СегментНоменклатуры%"", визначеного в оферті'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",        Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",      Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатуры%", Выборка.СегментНоменклатуры);

			Иначе

				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%""
                | должна входить в сегмент номенклатуры ""%СегментНоменклатуры%"", определенный в соглашении'
                |;uk='Номенклатура ""%Номенклатура%""
                |повинна входити до сегменту номенклатури ""%СегментНоменклатуры%"", визначеного в оферті'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",        Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СегментНоменклатуры%", Выборка.СегментНоменклатуры);

			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Товар", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Номенклатура"),
					Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия партнера сегменту партнеров
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений
//
Процедура СообщитьОбОшибкахПринадлежностьПартнераСегментуПартнеров(Знач Выборка,
	                                                               Знач ДокументПродажи,
	                                                               Отказ,
	                                                               МассивОтклонений = Неопределено)
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров") И Выборка.Следующий() Тогда
		Если Выборка.ЕстьОшибкиЗаполненияСегментПартнеров Тогда
			
			ТекстОшибки = НСтр("ru='Партнер должен входить в сегмент партнеров ""%СегментПартнеров%"", определенный в типовом соглашении';uk='Партнер повинен входити до сегменту партнерів ""%СегментПартнеров%"", визначеного в типовій оферті'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментПартнеров%", Выборка.СегментПартнеров); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Партнер';uk='Партнер'"), ТекстОшибки, МассивОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Партнер",
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж
//
Процедура СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Отказ,
	                                                       ДеревоОтклонений = Неопределено)
	МаксДатаАванса = Дата(1,1,1);
	ОдинДень       = 86400;
	СуммаПроцентов = 0;
	СуммаПроцентовШаблона = 0;
	СуммаПроцентовЗалога = 0;
	СуммаПроцентовЗалогаШаблона = 0;
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			Возврат;
		КонецЕсли;
		
		Если Выборка.ЭтапШаблонаОтсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы оплаты""';uk=' у рядку %НомерСтроки% списку ""Етапи оплати""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);

		Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда

			ТекстОшибки = НСтр("ru='Вариант оплаты отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""';uk='Варіант оплати відрізняється від значення у графіку оплати ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", Выборка.ВариантОплатыШаблона); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВариантОплаты", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Календарь = Выборка.Календарь;
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			
			Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
				Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаОтгрузки) Тогда
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.ЖелаемаяДатаОтгрузки, Выборка.Сдвиг );
				ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, МаксДатаАванса, Выборка.Сдвиг);
				Иначе
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
				КонецЕсли;
			Иначе
				ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаОтгрузки) Тогда
				ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
			ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
				ДатаПлатежаШаблона = МаксДатаАванса + Выборка.Сдвиг * ОдинДень;
			Иначе
				ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
			Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
			
			МаксДатаАванса = ДатаПлатежаШаблона;
			
		КонецЕсли;
		
		Если ДатаПлатежаШаблона < Выборка.ДатаПлатежа Тогда
			
			ТекстОшибки = НСтр("ru='Дата платежа должна быть не больше, чем в графике оплаты ""%ДатаПлатежаШаблона%""';uk='Дата платежу повинна бути не більше, ніж у графіку оплати ""%ДатаПлатежаШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПлатежаШаблона%", Формат(ДатаПлатежаШаблона, "ДЛФ=DD")); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ДатаПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Проверка отклонений процентов платежей
		СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
		СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
		Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны быть меньше процентов по графику соглашения (""%ПроцентПлатежаШаблона%%"")';uk='Відсотки до наступного платежу за графіком (""%ПроцентПлатежа%%"") не повинні бути менше відсотків за графіком угоди (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентов);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовШаблона);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		СуммаПроцентовЗалога = СуммаПроцентовЗалога + Выборка.ПроцентЗалогаЗаТару;
		СуммаПроцентовЗалогаШаблона = СуммаПроцентовЗалогаШаблона + Выборка.ПроцентЗалогаЗаТаруШаблона;
		Если СуммаПроцентовЗалога < СуммаПроцентовЗалогаШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Проценты залога за тару до следующего платежа по графику (""%ПроцентЗалогаЗаТару%%"") не должны быть меньше процентов по графику соглашения (""%ПроцентЗалогаЗаТаруШаблона%%"")';uk='Відсотки застави за тару до наступного платежу за графіком (""%ПроцентЗалогаЗаТару%%"") не повинні бути менше відсотків за графіком угоди (""%ПроцентЗалогаЗаТаруШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентЗалогаЗаТару%", СуммаПроцентовЗалога);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентЗалогаЗаТаруШаблона%", СуммаПроцентовЗалогаШаблона);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентЗалогаЗаТару", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения даты платежа
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений
//
Процедура СообщитьОбОшибкахКорректностьДатыПлатежа(Знач Выборка,
	                                               Знач ДокументПродажи,
	                                               Отказ,
	                                               МассивОтклонений = Неопределено)
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ГрафикОплатыНеУказан Тогда
			Возврат;
		КонецЕсли;
		
		Календарь = Выборка.Календарь;
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
		Иначе
			ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
		КонецЕсли;
		
		Если Выборка.ДатаПлатежа > ДатаПлатежаШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Дата платежа должна быть не больше, чем в графике оплаты, указанном в соглашении ""%ДатаПлатежаШаблона%""';uk='Дата платежу повинна бути не більше, ніж у графіку оплати, зазначеному в оферті ""%ДатаПлатежаШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПлатежаШаблона%", Формат(ДатаПлатежаШаблона, "ДЛФ=DD")); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Дата платежа';uk='Дата платежу'"), ТекстОшибки, МассивОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДатаПлатежа",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности количества этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений
//
Процедура СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Знач Выборка,
	                                                                 Знач ДокументПродажи,
	                                                                 Отказ,
	                                                                 МассивОтклонений = Неопределено)
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			
		ТекстОшибки = НСтр("ru='Количество этапов оплаты в документе (%КоличествоЭтаповДокумента%) должно совпадать с количеством этапов в графике (%КоличествоЭтаповГрафика%)';uk='Кількість етапів оплати в документі (%КоличествоЭтаповДокумента%) має збігатися з кількістю етапів у графіку (%КоличествоЭтаповГрафика%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповДокумента%", Выборка.КоличествоЭтаповДокумента);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповГрафика%",   Выборка.КоличествоЭтаповГрафика);
		
		Если ВыводитьВОтчет Тогда
			Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Этапы оплаты';uk='Етапи оплати'"), ТекстОшибки, МассивОтклонений);
		Иначе 
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				,
				"НадписьЭтапыОплаты",
				Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках вхождения цен документа продажи в допустимый диапазон
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ИспользоватьСкидкиНаценки - Булево - Признак использования скидок
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж
//
Процедура СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Отказ,
	                                                       ИспользоватьСкидкиНаценки,
	                                                       ДеревоОтклонений = Неопределено)
	
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);

	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';uk=' у рядку %НомерСтроки% списку ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Если Выборка.ЕстьОшибкиМинимальноДопустимаяЦена Тогда

			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна з урахуванням знижки (націнки) на номенклатуру ""%Номенклатура%"" з характеристикою ""%Характеристика%"" не повинна бути нижче мінімально допустимої ціни ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна на номенклатуру ""%Номенклатура%"" з характеристикою ""%Характеристика%"" не повинна бути нижче мінімально допустимої ціни ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",             Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",           Выборка.Характеристика);  
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МинимальноДопустимаяЦена%", Выборка.МинимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",               Выборка.ВалютаЦены);

			Иначе

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна з урахуванням знижки (націнки) на номенклатуру ""%Номенклатура%"" не повинна бути нижче мінімально допустимої ціни ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна на номенклатуру ""%Номенклатура%"" не повинна бути нижче мінімально допустимої ціни ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",             Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МинимальноДопустимаяЦена%", Выборка.МинимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",               Выборка.ВалютаЦены);

			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
					Отказ);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда

			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна з урахуванням знижки (націнки) на номенклатуру ""%Номенклатура%"" з характеристикою ""%Характеристика%"" не повинна бути вище максимально допустимої ціни ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна на номенклатуру ""%Номенклатура%"" з характеристикою ""%Характеристика%"" не повинна бути вище максимально допустимої ціни ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);  
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%", Выборка.ВалютаЦены);

			Иначе

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна з урахуванням знижки (націнки) на номенклатуру ""%Номенклатура%"" не повинна бути вище максимально допустимої ціни ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна на номенклатуру ""%Номенклатура%"" не повинна бути вище максимально допустимої ціни ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);

			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
					Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе продажи
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеУслугВДокументеПродажи(Знач Выборка,
	                                                     Знач ДокументПродажи,
	                                                     Знач ИмяТЧ,
	                                                     Знач ПредставлениеТЧ,
	                                                     Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Нельзя указывать номенклатуру с типом ""Услуга"" и ""Работа"" (строка %НомерСтроки% списка ""%ПредставлениеТЧ%"")';uk='Не можна вказувати номенклатуру з типом ""Послуга"" і ""Робота"" (рядок %НомерСтроки% списку ""%ПредставлениеТЧ%"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",    Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе продажи
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж
//
Процедура СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Отказ,
	                                                       ДеревоОтклонений = Неопределено)
	
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.ЭтоКомплектующие)  Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';uk=' у рядку %НомерСтроки% списку ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойСкидки Тогда
		
			Если Выборка.ЭтоНабор Тогда
				ТекстОшибки = НСтр("ru='Ручная скидка на набор превышает максимально допустимую скидку ""%МаксимальнаяСуммаРучнойСкидки% %""';uk='Ручна знижка на набір перевищує максимально припустиму знижку ""%МаксимальнаяСуммаРучнойСкидки% %""'");
			Иначе
				ТекстОшибки = НСтр("ru='Ручная скидка превышает максимально допустимую скидку ""%МаксимальнаяСуммаРучнойСкидки% %""';uk='Ручна знижка перевищує максимально припустиму знижку ""%МаксимальнаяСуммаРучнойСкидки% %""'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойСкидки%", Выборка.МаксимальнаяСуммаРучнойСкидки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                   Выборка.НомерСтроки);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойСкидки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
					Отказ);
			КонецЕсли;
			
		ИначеЕсли Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
			
			Если Выборка.ЭтоНабор Тогда
				ТекстОшибки = НСтр("ru='Ручная наценка на набор превышает максимально допустимую наценку ""%МаксимальнаяСуммаРучнойНаценки% %""';uk='Ручна націнка на набір перевищує максимально припустиму націнку ""%МаксимальнаяСуммаРучнойНаценки% %""'");
			Иначе
				ТекстОшибки = НСтр("ru='Ручная наценка превышает максимально допустимую наценку ""%МаксимальнаяСуммаРучнойНаценки% %""';uk='Ручна націнка перевищує максимально припустиму націнку ""%МаксимальнаяСуммаРучнойНаценки% %""'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойНаценки%", Выборка.МаксимальнаяСуммаРучнойНаценки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                    Выборка.НомерСтроки);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойСкидки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения о том, что скидки не рассчитаны
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахСкидкиНеРассчитаны(Знач ДокументПродажи, Отказ)

	ТекстОшибки = НСтр("ru='Автоматические скидки (наценки) не рассчитаны. Необходимо осуществить расчет автоматических скидок (наценок) в документе';uk='Автоматичні знижки (націнки) не розраховані. Необхідно здійснити розрахунок автоматичних знижок (націнок) в документі'");
	
	СообщитьПользователюОбОшибке(
		ТекстОшибки,
		ДокументПродажи,
		,
		Отказ);
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности количества этапов оплаты соглашения
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений
//
Процедура СообщитьОбОшибкахКорректностьКоличестваЭтаповОплатыСоглашения(Знач Выборка,
	                                                                    Знач ДокументПродажи,
	                                                                    Отказ,
	                                                                    МассивОтклонений = Неопределено)
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Выборка.Следующий();
	Если Выборка.ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения Тогда
			
		ТекстОшибки = НСтр("ru='Количество этапов оплаты в индивидуальном соглашении (%КоличествоЭтаповСоглашения%) должно совпадать с количеством этапов в типовом соглашении (%КоличествоЭтаповСоглашенияОснования%)';uk='Кількість етапів оплати в індивідуальній оферті (%КоличествоЭтаповСоглашения%) має збігатися з кількістю етапів в типовій оферті (%КоличествоЭтаповСоглашенияОснования%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповСоглашения%", Выборка.КоличествоЭтаповСоглашения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповСоглашенияОснования%",   Выборка.КоличествоЭтаповСоглашенияОснования);
		
		Если ВыводитьВОтчет Тогда
			Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Этапы оплаты';uk='Етапи оплати'"), ТекстОшибки, МассивОтклонений);
		Иначе
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				,
				"КомандаПереходаКОплате",
				Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж
//
Процедура СообщитьОбОшибкахКорректностьЭтаповОплатыСоглашения(Знач Выборка,
	                                                          Знач ДокументПродажи,
	                                                          Отказ,
	                                                          ДеревоОтклонений = Неопределено)

	СуммаПроцентов = 0;
	СуммаПроцентовШаблона = 0;
	СуммаПроцентовЗалога = 0;
	СуммаПроцентовЗалогаШаблона = 0;
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		Если Выборка.ЭтапШаблонаОтсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы оплаты""';uk=' у рядку %НомерСтроки% списку ""Етапи оплати""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);

		Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда

			ТекстОшибки = НСтр("ru='Вариант оплаты отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""';uk='Варіант оплати відрізняється від значення у графіку оплати ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", Выборка.ВариантОплатыШаблона); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВариантОплаты", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					,
					"КомандаПереходаКОплате",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.СдвигШаблона < Выборка.Сдвиг Тогда

			ТекстОшибки = НСтр("ru='Сдвиг должен быть не больше, чем в соглашении ""%СдвигШаблона%""';uk='Зсув повинен бути не більше, ніж в оферті ""%СдвигШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СдвигШаблона%", Выборка.СдвигШаблона); 
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Сдвиг", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					,
					"КомандаПереходаКОплате",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Проверка отклонений процентов платежей
		СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
		СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
		Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны быть меньше процентов по соглашению (""%ПроцентПлатежаШаблона%%"")';uk='Відсотки до наступного платежу за графіком (""%ПроцентПлатежа%%"") не повинні бути менше відсотків за угодою (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентов);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовШаблона);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					,
					"КомандаПереходаКОплате",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		СуммаПроцентовЗалога = СуммаПроцентовЗалога + Выборка.ПроцентЗалогаЗаТару;
		СуммаПроцентовЗалогаШаблона = СуммаПроцентовЗалогаШаблона + Выборка.ПроцентЗалогаЗаТаруШаблона;
		Если СуммаПроцентовЗалога < СуммаПроцентовЗалогаШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Проценты залога за тару до следующего платежа по графику (""%ПроцентЗалогаЗаТару%%"") не должны быть меньше процентов по соглашению (""%ПроцентЗалогаЗаТаруШаблона%%"")';uk='Відсотки застави за тару до наступного платежу за графіком (""%ПроцентЗалогаЗаТару%%"") не повинні бути менше відсотків за угодою (""%ПроцентЗалогаЗаТаруШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентЗалогаЗаТару%", СуммаПроцентов);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентЗалогаЗаТаруШаблона%", СуммаПроцентовШаблона);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентЗалогаЗаТару", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					,
					"КомандаПереходаКОплате",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения возвращаемых товаров
//
// Параметры:
// ТаблицаОшибок          - Выгрузка результата запроса
// ВозвратПоЧеку          - Булево
//
Процедура СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Знач ТаблицаОшибок, ВозвратПоЧеку)
	
	Для каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		СообщениеОбОшибке = НСтр("ru='Возврат по номенклатуре %Номенклатура% \ %Характеристика%%Серия% превышает количество реализованных товаров по документу продажи %НомерРеализации% на %Количество% %ЕдиницаИзмерения%';uk='Повернення по номенклатурі %Номенклатура% \ %Характеристика%%Серия% перевищує кількість реалізованих товарів за документом продажу %НомерРеализации% на %Количество% %ЕдиницаИзмерения%'");
		Если СтрокаОшибки.Количество < 0 Тогда
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Номенклатура%",         СтрокаОшибки.Номенклатура);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Характеристика%",       СтрокаОшибки.Характеристика);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Серия%",                "\ " + СтрокаОшибки.Серия);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Количество%",          -СтрокаОшибки.Количество);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%ЕдиницаИзмерения%",     СтрокаОшибки.ЕдиницаИзмерения);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерРеализации%",      СтрокаОшибки.НомерРеализации);
			Если ВозвратПоЧеку Тогда 
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, НСтр("ru='документу продажи';uk='документу продажу'"), НСтр("ru='чеку ККМ';uk='чека ККМ'"));
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаОшибки.Характеристика) Тогда
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "\",      "");
			КонецЕсли; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения суммы предоплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений
//
Процедура СообщитьОбОшибкахСоответствиеСуммыПредоплатыГрафикуОплат(Знач Выборка,
	                                                          Знач ДокументПродажи,
	                                                          Отказ,
	                                                          МассивОтклонений = Неопределено)
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если Выборка.Следующий() И Выборка.ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат Тогда
		
		ТекстОшибки = НСтр("ru='Сумма предоплаты не соответствует сумме, рассчитанной по графику оплаты соглашения %СуммаПредоплатыПоГрафику%';uk='Сума передплати не відповідає сумі, розрахованії за графіком оплати оферти %СуммаПредоплатыПоГрафику%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПредоплатыПоГрафику%", Формат(Выборка.СуммаПредоплатыПоГрафику, "ЧДЦ=2; ЧН=0,00"));
		
		Если ВыводитьВОтчет Тогда
			Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Предоплата';uk='Передоплата'"), ТекстОшибки, МассивОтклонений);
		Иначе
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				,
				"КомандаПереходаКОплате",
				Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииДляРасчетаЦенПродажи

// Возвращает текст запроса временной таблицы товаров
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваров(ИмяТаблицы)
	
	Возврат "
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
КонецФункции

// Возвращает текст запроса временной таблицы товаров списания
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваровСписания(ИмяТаблицы)
	
	Возврат "
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 		ВидЦенКакПараметр - Булево - Истина, если в запросе "ВидЦен" должен использоваться как параметр; Ложь - если как поле временной таблицы товаров
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦен(ИмяТаблицы, ИмяВременнойТаблицыТоваров, ВидЦеныКакПараметр=Истина)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	" + ?(ВидЦеныКакПараметр,"ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ВидЦены, &ВидЦены)","ЦеныНоменклатурыСрезПоследних.ВидЦены") + " КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ТОГДА
	|			&ТекстЗапросаКоэффициентУпаковки1
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	| " + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	| " + ?(ВидЦеныКакПараметр,"
	|				ВидЦены = &ВидЦены И
	|				(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.Характеристика
	|				ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|", "
	|				(Номенклатура, Характеристика, ВидЦены) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.Характеристика,
	|					ВременнаяТаблицаТовары.ВидЦены
	|				ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|") + "
	|) КАК ЦеныНоменклатурыСрезПоследних
	|ПО
	|	ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|	И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|	" + ?(ВидЦеныКакПараметр,"", "И ВременнаяТаблицаТовары.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены") + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|ПО 
	|	ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.Упаковка",
			"ВременнаяТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса временной таблицы себестоимости товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыСебестоимостей(ИмяТаблицы, ИмяВременнойТаблицыТоваров)
			
	Возврат "
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТоваров.НомерСтроки,
	|	ВременнаяТаблицаТоваров.Номенклатура,
	|	ВременнаяТаблицаТоваров.Характеристика,
	|	СправочникКлючейАналитики.Ссылка КАК КлючАналитикиУчетаНоменклатуры 
	| ПОМЕСТИТЬ ТаблицаТоваровСКлючамиАналитики
	|ИЗ 
	|	" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТоваров
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК СправочникКлючейАналитики
	|		ПО (СправочникКлючейАналитики.Номенклатура = ВременнаяТаблицаТоваров.Номенклатура)
	|			И (СправочникКлючейАналитики.Характеристика = ВременнаяТаблицаТоваров.Характеристика)
	|			И (СправочникКлючейАналитики.Склад = &Склад);
	|
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		ТаблицаТоваровСКлючамиАналитики.НомерСтроки КАК НомерСтроки,
	|		СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатуры.Стоимость, 0)) КАК Цена
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|	ИЗ
	|		ТаблицаТоваровСКлючамиАналитики КАК ТаблицаТоваровСКлючамиАналитики
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьТоваров.СрезПоследних(
	|					КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|					(АналитикаУчетаНоменклатуры, Организация) В
	|						(ВЫБРАТЬ
	|							Таблица.КлючАналитикиУчетаНоменклатуры,
	|							&Организация				
	|						ИЗ
	|							ТаблицаТоваровСКлючамиАналитики КАК Таблица)) КАК ЦеныНоменклатуры
	|		ПО ТаблицаТоваровСКлючамиАналитики.КлючАналитикиУчетаНоменклатуры = ЦеныНоменклатуры.АналитикаУчетаНоменклатуры
	|			И (ЦеныНоменклатуры.Организация = &Организация)
	|			
	|СГРУППИРОВАТЬ ПО 
	|ТаблицаТоваровСКлючамиАналитики.НомерСтроки; 
	|";
			
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦенПоСоглашению(ИмяТаблицы, ИмяВременнойТаблицыТоваров)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА
	|			СоглашениеШапка.ВозвращатьМногооборотнуюТару И НЕ &ЭтоВыкупТары
	|			И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОГДА СоглашениеШапка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ИЛИ (СоглашениеШапка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|				И РегУчетнаяПолитика.ПлательщикНДС)
	|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
	|		КОГДА СоглашениеШапка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|		КОГДА СоглашениеШапка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(СоглашениеТовары.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) * ВЫБОР
	|		КОГДА &Валюта <> СоглашениеШапка.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|						ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
	|			ТОГДА СоглашениеТовары.СрокПоставки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
	|					ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
	|				ИНАЧЕ СоглашениеШапка.СрокПоставки
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокПоставки
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И ВременнаяТаблицаТовары.Номенклатура = СоглашениеТовары.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = СоглашениеТовары.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ВременнаяТаблицаТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|			И (СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаСоглашения
	|		ПО (КурсыСрезПоследнихВалютаСоглашения.Валюта = СоглашениеШапка.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК РегУчетнаяПолитика
	|			ПО ИСТИНА
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашениеТовары.Упаковка",
		"СоглашениеТовары.Номенклатура"));
		
	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИнициализацииПравилПродаж

Функция ПолучитьСтруктуруУсловийПродаж()
	
	Возврат Новый Структура("
		|Партнер,
		|Контрагент,
		|КонтактноеЛицо,
		|Соглашение,
		|Организация,
		|Валюта,
		|Период,
		|ГрафикОплаты,
		|ФормаОплаты,
		|ПорядокОплаты,
		|ГруппаФинансовогоУчета,
		|СтатьяДвиженияДенежныхСредств,
		|СуммаДокумента,
		|Регулярное,
		|КоличествоПериодов,
		|СрокПоставки,
		|ВидЦен,
		|ЦенаВключаетНДС,
		|НалогообложениеНДС,
		|ИспользуетсяВРаботеТорговыхПредставителей,
		|Склад,
		|СегментНоменклатуры,
		|Типовое,
		|ДатаНачалаДействия,
		|ДатаОкончанияДействия,
		|ХозяйственнаяОперация,
		|ОграничиватьРучныеСкидки,
		|ПроцентРучнойСкидки,
		|ПроцентРучнойНаценки,
		|СпособРасчетаВознаграждения,
		|ПроцентВознаграждения,
		|УдержатьВознаграждение,
		|ИспользуютсяДоговорыКонтрагентов,
		|ПорядокРасчетов,
		|ДоступноВнешнимПользователям,
		|СтатусСоглашения,
		|ВозвращатьМногооборотнуюТару,
		|СрокВозвратаМногооборотнойТары,
		|РассчитыватьДатуВозвратаТарыПоКалендарю,
		|КалендарьВозвратаТары,
		|ТребуетсяЗалогЗаТару,
		|ОбеспечиватьЗаказыОбособленно,
		|Календарь,
		|НаправлениеДеятельности
		|");
		
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Возвращает остаток допустимого кредита по данным расчетов с клиентом и допустимой суммы задолженности
//
// Параметры:
//	Договор          - СправочникСсылка.Договор - Договор, по которому определяется задолженность клиента
//	ДопустимыйКредит - Число - Значение допустимой суммы задолженности
//
// Возвращаемое значение:
//	Число
//
Функция ОстатокДопустимогоКредита(Договор, ДопустимыйКредит)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток + РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток КАК ОстатокДолга
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|		,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			ГДЕ
	|				АналитикаПоПартнерам.Договор = &Договор
	|			)
	|	) КАК РасчетыСКлиентамиОстатки
	|");
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОстатокДопустимогоКредита = ДопустимыйКредит - Выборка.ОстатокДолга;
	Иначе
		ОстатокДопустимогоКредита = ДопустимыйКредит;
	КонецЕсли;
	
	Возврат ОстатокДопустимогоКредита;
	
КонецФункции

// Рассчитывает сумму предоплаты по реализации в сооветствии с графиком оплаты соглашения с клиентом
//
// Параметры:
//	Объект              - ДокументОбъект - Документ, по которому рассчитывается сумма предоплаты
//	ЭтапыГрафикаОплаты  - ТабличнаяЧасть - Табличная часть этапов оплаты
//	СуммаОплаты         - Число          - Сумма к оплате по документу для расчета предоплаты
//	СуммаЗалогаЗаТару   - Число          - Сумма залога за тару для для расчета предоплаты по залогу за тару
//
// Возвращаемое значение:
//	Структура с полями
//		СуммаПредоплаты - Число - сумма предоплаты за товар и услуги
//		СуммаПредоплатыЗаТару - Число - сумма предоплаты по залогу за тару
//
Функция СуммаПредоплатыПоСоглашению(Знач Объект, Знач ЭтапыГрафикаОплаты, СуммаОплаты, СуммаЗалогаЗаТару = 0) Экспорт
	
	СтруктураПредоплаты = Новый Структура("СуммаПредоплаты, СуммаПредоплатыЗаТару", 0, 0);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Возврат СтруктураПредоплаты;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") Тогда
		ГрафикОплаты             = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
		ГрафикЗаполнен           = ЗначениеЗаполнено(ГрафикОплаты);
	Иначе
		ГрафикЗаполнен           = Ложь;
	КонецЕсли;
	
	ГрафикСоглашенияЗаполнен = ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	
	Если ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Соглашение", Объект.Соглашение);
		СтруктураПараметров.Вставить("Дата", Объект.Дата);
		СтруктураПараметров.Вставить("ЖелаемаяДатаОтгрузки", Объект.Дата);
		СтруктураПараметров.Вставить("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты);
		СтруктураПараметров.Вставить("ГрафикОплаты", ГрафикОплаты);
		
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
			СтруктураПараметров,
			ГрафикСоглашенияЗаполнен,
			ГрафикЗаполнен,
			СуммаОплаты,
			СуммаЗалогаЗаТару);
			
		СуммаПредоплаты       = 0;
		СуммаПредоплатыЗаТару = 0;
		
		Для Каждого СтрокаЭтапа Из ЭтапыГрафикаОплаты Цикл
			Если СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
			 ИЛИ СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				СуммаПредоплаты       = СуммаПредоплаты + СтрокаЭтапа.СуммаПлатежа;
				СуммаПредоплатыЗаТару = СуммаПредоплатыЗаТару + СтрокаЭтапа.СуммаЗалогаЗаТару;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПредоплаты.СуммаПредоплаты       = СуммаПредоплаты;
		СтруктураПредоплаты.СуммаПредоплатыЗаТару = СуммаПредоплатыЗаТару;
		
	КонецЕсли;
	
	Возврат СтруктураПредоплаты;
	
КонецФункции

// Возвращает сумму просроченной задолженности по данным расчетов с клиентом
//
// Параметры:
//	Договор       - СправочникСсылка.Договор - Договор, по которому определяется задолженность клиента
//	ДатаДокумента - Дата - Дата документа, для которого выполняется контроль суммы просроченной задолженности
//
// Возвращаемое значение:
//	Число
//
Функция СуммаПросроченнойЗадолженности(Договор, ДатаДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток >
	|			РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток ТОГДА
	|		РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ), 0) КАК ПросроченнаяЗадолженность
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|		&ПериодКонтроляСрокаДолга,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			ГДЕ
	|				АналитикаПоПартнерам.Договор = &Договор
	|			)
	|	) КАК РасчетыСКлиентамиОстатки
	|
	|ГДЕ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
	|	И (РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток) > 0
	|");
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ПериодКонтроляСрокаДолга", Макс(КонецДня(ТекущаяДата()), КонецДня(ДатаДокумента)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаПросроченнойЗадолженности = Выборка.ПросроченнаяЗадолженность;
	Иначе
		СуммаПросроченнойЗадолженности = 0;
	КонецЕсли;
	
	Возврат СуммаПросроченнойЗадолженности;
	
КонецФункции

//Вызывает исключение, если партнер не является клиентом
//
// Параметры:
//	Партнер       - СправочникСсылка.Партнеры-Проверяемый партнер
//
Процедура ПроверитьВозможностьВводаНаОснованииПартнераКлиента(Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерКлиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "Клиент");
	
	Если Не ПартнерКлиент Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			ТекстОшибки = НСтр("ru='Контрагент не является клиентом. Ввод на основании доступен только для клиента.';uk='Контрагент не є клієнтом. Введення на підставі доступне тільки для клієнта.'");
		Иначе
			ТекстОшибки = НСтр("ru='Партнер не является клиентом. Ввод на основании доступен только для клиента.';uk='Партнер не є клієнтом. Введення на підставі доступне тільки для клієнта.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗапретОтгрузки(Партнер, Отказ) Экспорт
	
	ИспользоватьЗапретОтгрузки = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретОтгрузки");
	
	ТекстОшибки = НСтр("ru='Клиенту ""%Партнер%"" запрещена отгрузка.';uk='Клієнту ""%Партнер%"" заборонене відвантаження.'");
	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партнер%", Партнер);
	
	Если Партнер.Клиент И ИспользоватьЗапретОтгрузки 
		И НЕ ПраваПользователяПовтИсп.ОтгрузкаПартнерамЗапрещенныхСегментов() Тогда
		
		Если СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.Партнер",
				,
				Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

Функция КоличествоНаборов(Таблица)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Таблица.Номенклатура         КАК Номенклатура,
	|	Таблица.Характеристика       КАК Характеристика,
	|	Таблица.Упаковка             КАК Упаковка,
	|	Таблица.КоличествоУпаковок   КАК КоличествоУпаковок
	|ПОМЕСТИТЬ _СоставНабора
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатуры.Ссылка КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Таблица.Номенклатура         КАК Номенклатура,
	|	Таблица.Характеристика       КАК Характеристика,
	|	Таблица.Упаковка             КАК Упаковка,
	|	Таблица.КоличествоУпаковок   КАК КоличествоУпаковок
	|ПОМЕСТИТЬ СоставНабора
	|ИЗ
	|	_СоставНабора КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|                                                                ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец       КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка       КАК Упаковка,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок) КАК КоличествоУпаковокПоУмолчанию,
	|	СУММА(0) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ СоставНабора КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	0,
	|	Таблица.КоличествоУпаковок
	|ИЗ
	|	СоставНабора КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	СУММА(Таблица.КоличествоУпаковокПоУмолчанию) КАК КоличествоУпаковокПоУмолчанию,
	|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоУпаковокПоУмолчанию <> 0
	|				ТОГДА Результат.КоличествоУпаковок / Результат.КоличествоУпаковокПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК КоличествоМинимум
	|ИЗ
	|	Результат КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|");
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	ВозвращаемоеЗначение = Запрос.Выполнить().Выгрузить();
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьТекстЗапросаВременныеТаблицыНаборы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(Таблица.НомерСтроки)   КАК НомерСтроки,
	|	МИНИМУМ(Таблица.КодСтроки)     КАК КодСтроки,
	|	МИНИМУМ(Таблица.КлючСвязи)     КАК КлючСвязи,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	СУММА(Таблица.Сумма)           КАК Сумма,
	|	МАКСИМУМ(Таблица.ВидЦены)      КАК МаксимумВидЦены,
	|	МИНИМУМ(Таблица.ВидЦены)       КАК МинимумВидЦены,
	|	МАКСИМУМ(Таблица.СтавкаНДС)    КАК МаксимумСтавкаНДС,
	|	МИНИМУМ(Таблица.СтавкаНДС)     КАК МинимумСтавкаНДС,
	|	СУММА(Таблица.ПроцентАвтоматическойСкидки) КАК ПроцентАвтоматическойСкидки,
	|	СУММА(Таблица.СуммаАвтоматическойСкидки)   КАК СуммаАвтоматическойСкидки,
	|	СУММА(Таблица.ПроцентРучнойСкидки)         КАК ПроцентРучнойСкидки,
	|	СУММА(Таблица.СуммаРучнойСкидки)           КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	ВременнаяТаблицаТоварыПредварительная КАК Таблица
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|	                                                             ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора                     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                   КАК ХарактеристикаНабора,
	|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Комплектующие.Количество, 0) <> 0 ТОГДА
	|		Таблица.Количество / Комплектующие.Количество
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаТоварыПредварительная КАК Таблица
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Комплектующие
	|		ПО Комплектующие.Ссылка                                   = ВариантыКомплектацииНоменклатуры.Ссылка
	|		 И Комплектующие.Ссылка.НоменклатураОсновногоКомпонента   = Таблица.Номенклатура
	|		 И Комплектующие.Ссылка.ХарактеристикаОсновногоКомпонента = Таблица.Характеристика
	|		 И Комплектующие.Номенклатура                             = Таблица.Номенклатура
	|		 И Комплектующие.Характеристика                           = Таблица.Характеристика
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|	                                                             ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|	И НЕ Комплектующие.Количество ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора                                  КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                                КАК ХарактеристикаНабора,
	|	Таблица.КлючСвязи                                           КАК КлючСвязи,
	|	Таблица.НомерСтроки                                         КАК НомерСтроки,
	|	Таблица.КодСтроки                                           КАК КодСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)      КАК Упаковка,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                    КАК Склад,
	|	ВЫБОР КОГДА Таблица.МаксимумВидЦены = Таблица.МинимумВидЦены ТОГДА
	|		Таблица.МаксимумВидЦены
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫБОР КОГДА Таблица.МаксимумСтавкаНДС = Таблица.МинимумСтавкаНДС ТОГДА
	|		Таблица.МаксимумСтавкаНДС
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|	КОНЕЦ КАК СтавкаНДС,
	|	Таблица.Сумма КАК Сумма,
	|	(Таблица.Сумма + Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки) / ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Цена,
	|	(Таблица.Сумма) / ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1)                                                                 КАК ЦенаСоСкидкой,
	|	Таблица.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	Таблица.СуммаАвтоматическойСкидки   КАК СуммаАвтоматическойСкидки,
	|	Таблица.ПроцентРучнойСкидки         КАК ПроцентРучнойСкидки,
	|	Таблица.СуммаРучнойСкидки           КАК СуммаРучнойСкидки
	|	
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	Таблица.НоменклатураНабора               КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора             КАК ХарактеристикаНабора,
	|	Таблица.ЭтоНабор                         КАК ЭтоНабор,
	|	Таблица.ЭтоКомплектующие                 КАК ЭтоКомплектующие,
	|	Таблица.НомерСтроки                      КАК НомерСтроки,
	|	Таблица.ИсходныйНомерСтроки              КАК ИсходныйНомерСтроки,
	|	Таблица.Номенклатура                     КАК Номенклатура,
	|	Таблица.Характеристика                   КАК Характеристика,
	|	Таблица.Цена                             КАК Цена,
	|	Таблица.Сумма                            КАК Сумма,
	|	Таблица.ВидЦены                          КАК ВидЦены,
	|	Таблица.Упаковка                         КАК Упаковка,
	|	Таблица.СтавкаНДС                        КАК СтавкаНДС,
	|	Таблица.КлючСвязи                        КАК КлючСвязи,
	|	Таблица.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
	|	Таблица.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
	|	Таблица.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
	|	Таблица.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
	|	Таблица.ЦенаСоСкидкой                    КАК ЦенаСоСкидкой,
	|	Таблица.ДатаОтгрузки                     КАК ДатаОтгрузки,
	|	Таблица.Отменено                         КАК Отменено,
	|	Таблица.Склад                            КАК Склад,
	|	Таблица.СрокПоставки                     КАК СрокПоставки,
	|	Таблица.КодСтроки                        КАК КодСтроки,
	|	Таблица.ВариантОбеспечения               КАК ВариантОбеспечения,
	|	Таблица.ПроверятьОшибкиЗаполненияСрокПоставки КАК ПроверятьОшибкиЗаполненияСрокПоставки
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ (
	|
	|	ВЫБРАТЬ
	|		Таблица.НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора,
	|	
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		Ложь КАК ЭтоНабор,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.НомерСтроки
	|		ИНАЧЕ
	|			Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		
	|		Таблица.НомерСтроки                      КАК ИсходныйНомерСтроки,
	|		Таблица.Номенклатура                     КАК Номенклатура,
	|		Таблица.Характеристика                   КАК Характеристика,
	|		Таблица.Цена                             КАК Цена,
	|		Таблица.Сумма                            КАК Сумма,
	|		Таблица.ВидЦены                          КАК ВидЦены,
	|		Таблица.Упаковка                         КАК Упаковка,
	|		Таблица.СтавкаНДС                        КАК СтавкаНДС,
	|		Таблица.КлючСвязи                        КАК КлючСвязи,
	|		Таблица.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
	|		Таблица.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
	|		Таблица.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
	|		Таблица.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
	|		Таблица.ЦенаСоСкидкой                    КАК ЦенаСоСкидкой,
	|		Таблица.ДатаОтгрузки                     КАК ДатаОтгрузки,
	|		Таблица.Отменено                         КАК Отменено,
	|		Таблица.Склад                            КАК Склад,
	|		Таблица.СрокПоставки                     КАК СрокПоставки,
	|		Таблица.КодСтроки                        КАК КодСтроки,
	|		Таблица.ВариантОбеспечения               КАК ВариантОбеспечения,
	|		Таблица.ПроверятьОшибкиЗаполненияСрокПоставки КАК ПроверятьОшибкиЗаполненияСрокПоставки
	|	ИЗ
	|		ВременнаяТаблицаТоварыПредварительная КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|			 И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|	
	|		Таблица.НоменклатураНабора               КАК НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора             КАК ХарактеристикаНабора,
	|		Ложь                                     КАК ЭтоКомплектующие,
	|		Истина                                   КАК ЭтоНабор,
	|		Таблица.НомерСтроки                      КАК НомерСтроки,
	|		Таблица.НомерСтроки                      КАК ИсходныйНомерСтроки,
	|		Таблица.НоменклатураНабора               КАК Номенклатура,
	|		Таблица.ХарактеристикаНабора             КАК Характеристика,
	|		Таблица.Цена                             КАК Цена,
	|		Таблица.Сумма                            КАК Сумма,
	|		Таблица.ВидЦены                          КАК ВидЦены,
	|		Таблица.Упаковка                         КАК Упаковка,
	|		Таблица.СтавкаНДС                        КАК СтавкаНДС,
	|		Таблица.КлючСвязи                        КАК КлючСвязи,
	|		Таблица.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
	|		Таблица.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
	|		Таблица.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
	|		Таблица.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
	|		Таблица.ЦенаСоСкидкой                    КАК ЦенаСоСкидкой,
	|		ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
	|		Ложь                                     КАК Отменено,
	|		Таблица.Склад                            КАК Склад,
	|		ДатаВремя(1,1,1)                         КАК СрокПоставки,
	|		Таблица.КодСтроки                        КАК КодСтроки,
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
	|		Ложь                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК Таблица
	|) КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

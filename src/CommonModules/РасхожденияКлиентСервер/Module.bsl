
////////////////////////////////////////////////////////////////////////////////
// Модуль "РасхожденияКлиентСервер" содержит процедуры и функции, работающие на клиенте и сервер
// для работы документов отражения расхождений после отгрузки.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.РеализацияТоваровУслуг")
	        ИЛИ ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПустаяСсылка");
	
КонецФункции 

Функция ТипОснованияПеремещениеТоваров(ДокументСсылка) Экспорт
	
	Возврат ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения");
	
КонецФункции

Функция РассчитатьИтоговыеКоличественныеПоказателиФормы(ТаблицаТовары) Экспорт
	
	Структура = Новый Структура("Недостачи, Излишки, Расхождения, СтрокСРасхождениями", 0, 0, 0, 0);
	
	Структура.Недостачи = 0;
	Структура.Излишки   = 0;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.КоличествоУпаковокРасхождения <> 0 Тогда
			Структура.СтрокСРасхождениями = Структура.СтрокСРасхождениями + 1;
		КонецЕсли;
		
		Если СтрокаТовары.КоличествоУпаковокРасхождения > 0 Тогда
			Структура.Излишки = Структура.Излишки + СтрокаТовары.КоличествоУпаковокРасхождения;
		ИначеЕсли СтрокаТовары.КоличествоУпаковокРасхождения < 0 Тогда
			Структура.Недостачи = Структура.Недостачи + (-СтрокаТовары.КоличествоУпаковокРасхождения);
		КонецЕсли;
		
	КонецЦикла;
	
	Структура.Вставить("ЕстьИзлишки", Структура.Излишки > 0);
	Структура.Вставить("ЕстьНедостачи", Структура.Недостачи > 0);
	
	Структура.Расхождения = ТаблицаТовары.Итог("Количество") - ТаблицаТовары.Итог("КоличествоПоДокументу");
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураДействийПриИзмененииКоличестваУпаковок() Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьРасхождения");

	Возврат СтруктураДействий;

КонецФункции

Функция СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваров() Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьРасхождения");
	СтруктураДействий.Вставить("УстановитьПризнакДляЗаполненияТекстовогоОписания");
	СтруктураДействий.Вставить("ПризнакНаличиеКомментария");

	Возврат СтруктураДействий;

КонецФункции

Функция СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваровРасхожденияПослеОтгрузки() Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеОтгрузки");
	СтруктураДействий.Вставить("УстановитьПризнакДляЗаполненияТекстовогоОписания");
	СтруктураДействий.Вставить("ПризнакНаличиеКомментарияОтгрузка");

	Возврат СтруктураДействий;

КонецФункции

Функция СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваровРасхожденияПослеПриемки() Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеПриемки");
	СтруктураДействий.Вставить("ПризнакНаличиеКомментарияПриемка");

	Возврат СтруктураДействий;

КонецФункции

Процедура УправлениеДоступностью(Форма) Экспорт
	
	ВлияющиеРеквизитыДоступны = Форма.ДокументыОснования.Количество() = 0;
	
	Если ТипОснованияПеремещениеТоваров(Форма.Объект.Ссылка) Тогда
		
		ПодборДокументовОснованийДоступен = ЗначениеЗаполнено(Форма.Объект.СкладОтправитель)
		                                    И ЗначениеЗаполнено(Форма.Объект.СкладПолучатель)
		                                    И ЗначениеЗаполнено(Форма.Объект.Организация);
		
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
		
		ПодборДокументовОснованийДоступен = (Не Форма.ИспользоватьСоглашенияСКлиентами Или ЗначениеЗаполнено(Форма.Объект.Соглашение))
		                                    И ЗначениеЗаполнено(Форма.Объект.Партнер)
		                                    И ЗначениеЗаполнено(Форма.Объект.Контрагент)
		                                    И ЗначениеЗаполнено(Форма.Объект.Организация)
		                                    И ?(Форма.Элементы.Договор.Видимость И Форма.ИспользоватьСоглашенияСКлиентами,
		                                        ЗначениеЗаполнено(Форма.Объект.Договор), Истина)
		                                    И ЗначениеЗаполнено(Форма.Объект.Валюта)
		                                    И ЗначениеЗаполнено(Форма.Объект.ХозяйственнаяОперация);
		
	Иначе
		
		ПодборДокументовОснованийДоступен = ЗначениеЗаполнено(Форма.Объект.Партнер)
		                                    И ЗначениеЗаполнено(Форма.Объект.Контрагент)
		                                    И ЗначениеЗаполнено(Форма.Объект.Организация)
		                                    И ЗначениеЗаполнено(Форма.Объект.Валюта)
		                                    И ЗначениеЗаполнено(Форма.Объект.ХозяйственнаяОперация);
		
	КонецЕсли;
	
	ПодборТоваровДоступен = ПодборДокументовОснованийДоступен И (Форма.ДокументыОснования.Количество() > 0);
	
	Форма.Элементы.Организация.ТолькоПросмотр           = НЕ ВлияющиеРеквизитыДоступны;
	
	Если Не ТипОснованияПеремещениеТоваров(Форма.Объект.Ссылка) Тогда
		Форма.Элементы.Партнер.ТолькоПросмотр               = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.Контрагент.ТолькоПросмотр            = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.Соглашение.ТолькоПросмотр            = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.Договор.ТолькоПросмотр               = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.Валюта.ТолькоПросмотр                = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.ЦенаВключаетНДС.ТолькоПросмотр       = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.ХозяйственнаяОперация.ТолькоПросмотр = НЕ ВлияющиеРеквизитыДоступны;
	КонецЕсли;
	
	Форма.Элементы.ИзменитьДокументыОснования.Доступность     = ПодборДокументовОснованийДоступен;
	Форма.Элементы.ТоварыЗаполнитьПоОснованиям.Доступность    = ПодборТоваровДоступен;
	Форма.Элементы.ТоварыЗагрузитьИзВнешнегоФайла.Доступность = ПодборТоваровДоступен;
	Форма.Элементы.ТоварыОткрытьПодбор.Доступность            = ПодборТоваровДоступен;
	Форма.Элементы.ТоварыДобавить.Доступность                 = ПодборТоваровДоступен;
	Форма.Элементы.Товары.Доступность                         = ПодборТоваровДоступен;
	
	Если ТипОснованияПеремещениеТоваров(Форма.Объект.Ссылка) Тогда
		// Не обрабатывается
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении) 
		И Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту") Тогда
		Форма.Элементы.СпособОтраженияРасхождений.Доступность = Истина;
	ИначеЕсли Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПоступлениеТоваровУслуг") 
		И Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика") Тогда
		Форма.Элементы.СпособОтраженияРасхождений.Доступность = Истина;
	Иначе
		Форма.Элементы.СпособОтраженияРасхождений.Доступность = Ложь;
	КонецЕсли;
	
	Если ((Форма.ЕстьИзлишки Или Форма.ЕстьНедостачи)
	      И (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.КВыполнению")
	      Или Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Отработано"))) Тогда
		Форма.Элементы.ОформитьДокументы.Гиперссылка = Истина;
		Форма.Элементы.ОформитьДокументы.Заголовок   = НСтр("ru='Оформить документы';uk='Оформити документи'");
	Иначе
		Форма.Элементы.ОформитьДокументы.Гиперссылка = Ложь;
		Форма.Элементы.ОформитьДокументы.Заголовок   = НСтр("ru='Оформление документов доступно при наличии расхождений в статусах ""Отрабатывается"" и ""Отработано""';uk='Оформлення документів доступне при наявності розбіжностей в статусах ""Відпрацьовується"" і ""Відпрацьовано""'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
	                                                             "ТоварыЗаполнитьФактПоПриемке",
	                                                             "Доступность",
	                                                             Форма.Объект.Товары.Количество() > 0);
	
	Форма.Элементы.ТоварыИзменитьДействие.Доступность = Форма.ЕстьИзлишки Или Форма.ЕстьНедостачи;
	
КонецПроцедуры

Процедура ЗаполнитьДокументОснованиеВСтроке(СтрокаТаблицыТовары, ДокументыОснования) Экспорт

	Если Не СтрокаТаблицыТовары.ЗаполненоПоОснованию И Не ЗначениеЗаполнено(СтрокаТаблицыТовары.ДокументОснование) Тогда
		Если ДокументыОснования.Количество() = 1 Тогда
			СтрокаТаблицыТовары.ДокументОснование = ДокументыОснования[0].ДокументОснование;
			УстановитьПризнакОснованиеПоЗаказам(СтрокаТаблицыТовары, ДокументыОснования[0]);
			ЗаполнитьЗаказВСтроке(СтрокаТаблицыТовары, ДокументыОснования);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЗаказВСтроке(СтрокаТаблицыТовары, ДокументыОснования) Экспорт

	НайденныеСтроки = ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", СтрокаТаблицыТовары.ДокументОснование));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = НайденныеСтроки[0];

	Если Не ЗначениеЗаполнено(СтрокаТаблицыТовары.Заказ) Тогда
		Если НайденнаяСтрока.ЗаказыОснования.Количество() = 1 Тогда
			СтрокаТаблицыТовары.Заказ = НайденнаяСтрока.ЗаказыОснования.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПризнакОснованиеПоЗаказам(СтрокаТаблицыТовары, СтрокаДокументыОснования) Экспорт
	
	СтрокаТаблицыТовары.ОснованиеПоЗаказам = (СтрокаДокументыОснования.ЗаказыОснования.Количество() > 0);
	
КонецПроцедуры

Процедура УстановитьОтборСтатусаДинамическогоСписка(ДинамическийСписок, СтатусДляОтбора) Экспорт
	
	УстанавливаетсяОтбор = ЗначениеЗаполнено(СтатусДляОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, 
	                                                                        "Статус",
	                                                                        СтатусДляОтбора, 
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        УстанавливаетсяОтбор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, 
	                                                                        "Проведен",
	                                                                        Истина, 
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        УстанавливаетсяОтбор);
	
КонецПроцедуры

Процедура ЗаполнитьСделкуВСтроке(ТекущиеДанные, ЗаказыСделки) Экспорт

	Если ТекущиеДанные.ОснованиеПоЗаказам И ЗначениеЗаполнено(ТекущиеДанные.ЗаказПоставщику) Тогда
		
		НайденныеСтроки = ЗаказыСделки.НайтиСтроки(Новый Структура("ЗаказПоставщику", ТекущиеДанные.ЗаказПоставщику));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущиеДанные.Сделка = НайденныеСтроки[0].Сделка;
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущиеДанные.Сделка = ПредопределенноеЗначение("Справочник.СделкиСКлиентами.ПустаяСсылка");
	
КонецПроцедуры

Функция ИменаРеквизитовВЗависимостиОтТипаАкта(ЭтоАктОРасхожденияхПослеОтгрузки) Экспорт
	
	СтруктураИмен = Новый Структура;
	СтруктураИмен.Вставить("ЗаполненоПоОснованию", ?(ЭтоАктОРасхожденияхПослеОтгрузки,"ЗаполненоПоРеализации","ЗаполненоПоОснованию"));
	СтруктураИмен.Вставить("Основание", ?(ЭтоАктОРасхожденияхПослеОтгрузки,"Реализация","ДокументОснование"));
	СтруктураИмен.Вставить("Заказ", ?(ЭтоАктОРасхожденияхПослеОтгрузки,"ЗаказКлиента","ЗаказПоставщику"));
	СтруктураИмен.Вставить("ОснованиеПоЗаказам", ?(ЭтоАктОРасхожденияхПослеОтгрузки,"РеализацияПоЗаказам","ОснованиеПоЗаказам"));
	
	Возврат СтруктураИмен;
	
КонецФункции

Процедура РассчитатьИтоговыеПоказателиФормы(Форма) Экспорт

	Форма.Недостачи = 0;
	Форма.Излишки   = 0;
	Форма.ЕстьИзлишки     = Ложь;
	Форма.ЕстьНедостачи   = Ложь;
	
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		Если СтрокаТовары.СуммаРасхождения > 0 Тогда
			Форма.Излишки = Форма.Излишки + СтрокаТовары.СуммаРасхождения;
		ИначеЕсли СтрокаТовары.СуммаРасхождения < 0 Тогда
			Форма.Недостачи = Форма.Недостачи + (-СтрокаТовары.СуммаРасхождения);
		КонецЕсли;
		Если СтрокаТовары.КоличествоУпаковокРасхождения < 0 Тогда 
			Форма.ЕстьНедостачи   = Истина;
		КонецЕсли;
		Если СтрокаТовары.КоличествоУпаковокРасхождения > 0 Тогда 
			Форма.ЕстьИзлишки   = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Расхождения = Форма.Объект.Товары.Итог("Сумма") - Форма.Объект.Товары.Итог("СуммаПоДокументу");
	
КонецПроцедуры

Функция ЭтоАктОРасхожденияхПослеОтгрузки(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении)
	         Или ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратПоставщику") ;
	
КонецФункции

Функция ТекстЗапросаОбъединить() Экспорт
	
	Возврат "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ИзменитьДействиеВСтроке(Строка, РезультатВыбораПользователя) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбораПользователя.ДействиеНедостачи)
		И Строка.КоличествоУпаковокРасхождения < 0 Тогда
		ВариантДействия = РезультатВыбораПользователя.ДействиеНедостачи;
	Иначе
		ВариантДействия = РезультатВыбораПользователя.ДействиеИзлишки;
	КонецЕсли;
	
	ЕстьРеквизитПоВинеСтороннейКомпании = РезультатВыбораПользователя.Свойство("ПоВинеСтороннейКомпании");
	
	Если Строка.Действие = ВариантДействия Тогда
		Если ЕстьРеквизитПоВинеСтороннейКомпании Тогда
			Если Строка.ПоВинеСтороннейКомпании = РезультатВыбораПользователя.ПоВинеСтороннейКомпании Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы") 
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное") Тогда
		
		Если НЕ Строка.КоличествоУпаковокРасхождения > 0  Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления") Тогда
		
		Если НЕ Строка.КоличествоУпаковокРасхождения < 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	Строка.Действие = ВариантДействия;
	Если ЕстьРеквизитПоВинеСтороннейКомпании Тогда
		Если ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы") Тогда
			Строка.ПоВинеСтороннейКомпании =  РезультатВыбораПользователя.ПоВинеСтороннейКомпании;
		Иначе
			Строка.ПоВинеСтороннейКомпании =  Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользоватьОплатуПлатежнымиКартами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода,
	                                              |ДисплейПокупателя,
	                                              |ФискальныйРегистратор,
	                                              |ЭквайринговыйТерминал,
	                                              |СчитывательМагнитныхКарт";
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	РозничныеПродажи.ЗаполнитьТаблицуОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ОборудованиеПодключено = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(
			Неопределено,
			Неопределено,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()).Количество() > 0;
		ЗначениеОткрыватьФормуСПодключеннымОборудованием = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ЧекККМ", "ОткрыватьФормуСПодключеннымОборудованием");
		Если ЗначениеОткрыватьФормуСПодключеннымОборудованием = Неопределено Тогда
			ОткрыватьФормуСПодключеннымОборудованием = ОборудованиеПодключено;
		Иначе
			ОткрыватьФормуСПодключеннымОборудованием = ЗначениеОткрыватьФормуСПодключеннымОборудованием И ОборудованиеПодключено;
		КонецЕсли;
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
	НастроитьРМК();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Если ОткрыватьФормуСПодключеннымОборудованием И ВладелецФормы = Неопределено Тогда
			
			ПодключитьОбработчикОжидания("ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания", 0.5, Истина);
			
		Иначе
			
			Для Каждого СтрокаТЧ Из Оборудование Цикл
				
				МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
					Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПоИдентификаторуЗавершение", ЭтотОбъект, СтрокаТЧ),
					ЭтотОбъект.УникальныйИдентификатор,
					СтрокаТЧ.Ссылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	Если ПринудительнаяАвторизация И ВладелецФормы = Неопределено Тогда
		ПодключитьОбработчикОжидания("ОткрытьОкноАвторизации", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПринудительноеЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗакрытиемЧека(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.РеализацияПодарочныхСертификатов.Форма.ВыборОтложенногоЧека" Тогда
		ЗагрузитьНовыйЧек(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ОбработатьДанныеСчитывателяМагнитныхКарт(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "АвторизованПользователь" Тогда
		
		Если Параметр.Режим = "СменитьПрава" Тогда
			НастроитьПраваДляПользователя(Параметр.Пользователь);
			ПересчитатьДокументНаКлиенте();
		ИначеЕсли Параметр.Режим = "ЗакрытьЧекККМ" Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЧтениеКомандФормы"
		И Параметр.Форма = УникальныйИдентификатор Тогда
		
		Оповестить("ЧтениеКомандФормы", Новый Структура("Форма, ФормаВладелец, АдресВоВременномХранилище", Параметр.ФормаВладелец, УникальныйИдентификатор, ПолучитьКомандыФормы(Параметр.ФормаВладелец)));
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанПодарочныйСертификат"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ОбработатьПодарочныйСертификат(Параметр.ПодарочныйСертификат);
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОборудованиеПодключено" Тогда
		ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформационнаяПанельПрочиеПараметрыЗначениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарочныеСертификаты

&НаКлиенте
Процедура ПодарочныеСертификатыПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПодарочныйСертификатПриИзменении(Элемент)
	
	ПодарочныйСертификат = Элементы.ПодарочныеСертификаты.ТекущиеДанные.ПодарочныйСертификат;
	ОбработатьПодарочныйСертификат(ПодарочныйСертификат, Элементы.ПодарочныеСертификаты.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СчитатьПодарочныйСертификат(Команда)
	
	ОткрытьФорму(
		"Справочник.ПодарочныеСертификаты.Форма.СчитываниеПодарочногоСертификата",
		Новый Структура("НеИспользоватьРучнойВвод", Ложь),
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюОперацииСККМ(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ", Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",   Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ИзменитьКассуККМ", Истина);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюОперацииСККМ", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюПрочихОпераций(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ",       Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",         Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("Документ",       Объект.Ссылка);
	
	ПараметрыОткрытияФормы.Вставить("ПроверитьКоличествоВДокументе", Ложь);
	ПараметрыОткрытияФормы.Вставить("ПродажаПодарочногоСертификата", Ложь);
	ПараметрыОткрытияФормы.Вставить("ВозвратПодарочногоСертификата", Ложь);
	ПараметрыОткрытияФормы.Вставить("Заблокировать",                         ПринудительнаяАвторизация);
	ПараметрыОткрытияФормы.Вставить("АдресКомандПечатиВоВременномХранилище", АдресКомандПечатиВоВременномХранилище);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюПрочиеОперации", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключенноеОборудование(Команда)
	
	ОткрытьФормуПодключенноеОборудование(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	Объект.Дата = ТекущаяДата();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ОплатитьНаличнымиОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)
	
	Объект.Дата = ТекущаяДата();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект, 
		Новый ОписаниеОповещения("ОплатитьПлатежнойКартойОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплата(Команда)
	
	Объект.Дата = ТекущаяДата();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("СмешаннаяОплатаОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧек(Команда)
	
	ЗагрузитьНовыйЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратТовара(Команда)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ВозвратТовараОбработкаОповещения", ЭтотОбъект);
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(ЭтотОбъект, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОплатыПлатежнымиКартами(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ВыполнитьОбработкуОповещения(
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартами", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ПодарочныеСертификатыКлиент.ОбработатьПолученныйКодНаКлиенте(
		ЭтотОбъект,
		МассивШтрихкодов[0].Штрихкод,
		ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСчитывателяМагнитныхКарт(Данные)
	
	ПодарочныеСертификатыКлиент.ОбработатьПолученныйКодНаКлиенте(
		ЭтотОбъект,
		Данные,
		ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудование(ПодключитьОборудованиеПриОткрытии = Истина)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор",           УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ПодключитьОборудованиеПриОткрытии", ПодключитьОборудованиеПриОткрытии);
	ПараметрыОткрытия.Вставить("ПоддерживаемыеТипыПодключаемогоОборудования", ПоддерживаемыеТипыПодключаемогоОборудования);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ПодключенноеОборудование", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания()
	
	ОткрытьФормуПодключенноеОборудование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, СтрокаТЧ) Экспорт

	Если НЕ Данные.Результат Тогда
		
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка:
                                    |""%ОписаниеОшибки%"".'
                                    |;uk='При підключенні пристрою виникла помилка:
                                    |""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Данные.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		СтрокаТЧ.Подключено = 1;
		
	Иначе
		
		СтрокаТЧ.Подключено = 0;
		
		Если СтрокаТЧ.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя") Тогда
			ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	Дисплей = Неопределено;
	
	Если ВывестиКОплатеНаДисплейПокупателя Тогда
		
		ИнформацияОбОплате = ИнформацияОбОплате();
		ДПТекст1 = РозничныеПродажиКлиент.ПодготовитьСтрокуКВыводуНаДисплейПокупателя(
			НСтр("ru='К оплате:';uk='До оплати:'"), ИнформацияОбОплате.СуммаКОплате);
		ДПТекст2 = "";
		
	Иначе
		
		КоличествоСтрокВТЧ = Объект.ПодарочныеСертификаты.Количество();
		
		ТекущаяСтрока = Элементы.ПодарочныеСертификаты.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
			ТекущиеДанные = Объект.ПодарочныеСертификаты[КоличествоСтрокВТЧ - 1];
			Элементы.ПодарочныеСертификаты.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
			ТекущиеДанные = Неопределено;
		Иначе
			ТекущиеДанные = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(ТекущаяСтрока);
		КонецЕсли;
		
		ДПТекст1 = НСтр("ru='Здравствуйте!';uk='Доброго дня!'");
		Если ТекущиеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ПодарочныйСертификат) Тогда
				ДПТекст1 = Строка(ТекущиеДанные.Номинал) + " " + Строка(ТекущиеДанные.ВалютаНоминала);
			Иначе
				ДПТекст1 = "";
			КонецЕсли;
		КонецЕсли;
		
		ДПТекст2 = РозничныеПродажиКлиент.ПодготовитьСтрокуКВыводуНаДисплейПокупателя(
			НСтр("ru='Итог:';uk='Підсумок:'"), СуммаДокумента);
		
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		
		// Очистка
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			Дисплей.Ссылка,
			"ClearText",
			ВходныеПараметры,
			ВыходныеПараметры);
		
		// Подготовка данных
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(ДПТекст1 + Символы.ПС + ДПТекст2);
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			Дисплей.Ссылка,
			"DisplayText",
			ВходныеПараметры,
			ВыходныеПараметры);
		
		Если Не Результат Тогда
			ТекстСообщения = НСтр("ru='При использовании дисплея покупателя произошла ошибка.
                      |Дополнительное описание:
                      |%ДополнительноеОписание%'
                      |;uk='При використанні дисплея покупця сталася помилка.
                      |Додатковий опис:
                      |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%ДополнительноеОписание%",
				ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОткрытьОкноАвторизации()
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.Авторизация", Новый Структура("Режим", "СменитьПрава"), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ПодарочныйСертификат КАК ПодарочныйСертификат
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	&ПодарочныеСертификаты КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодарочныеСертификаты.Ссылка           КАК ПодарочныйСертификат,
		|	ПодарочныеСертификаты.Владелец.Номинал КАК Номинал,
		|	ПодарочныеСертификаты.Владелец.Валюта  КАК ВалютаНоминала,
		|	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(
		|				&Дата,
		|				ПодарочныйСертификат В
		|					(ВЫБРАТЬ
		|						Т.ПодарочныйСертификат
		|					ИЗ
		|						ВременнаяТаблица КАК Т)) КАК ИсторияПодарочныхСертификатов
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
		|		ПО (ВременнаяТаблица.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка)");
		
		Запрос.УстановитьПараметр("ПодарочныеСертификаты", Объект.ПодарочныеСертификаты.Выгрузить());
		Запрос.УстановитьПараметр("Дата",                  ТекущаяДатаСеанса());
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НайденныеСтроки = Объект.ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ПодарочныйСертификат", Выборка.ПодарочныйСертификат));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				СтрокаТЧ.Номинал        = Выборка.Номинал;
				СтрокаТЧ.Статус         = Выборка.Статус;
				СтрокаТЧ.ВалютаНоминала = Выборка.ВалютаНоминала;
			КонецЦикла;
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПриПроведенииЧекаВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		Если ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьНаСервере" Тогда
			РезультатОперации = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		КонецЕсли;
		
		Если РезультатОперации Тогда
			
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОписаниеОповещения,
				?(ДополнительныеПараметры.ВозвращатьРезультатФункции, РезультатОперации, ДополнительныеПараметры.РезультатПриУспешномПроведении));
			
		Иначе
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ДополнительныеПараметры.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОписаниеОповещения,
			?(ДополнительныеПараметры.ВозвращатьРезультатФункции, ДополнительныеПараметры.РезультатОперации, ДополнительныеПараметры.РезультатПриОтмене));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Значение = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.РеализацияПодарочныхСертификатов"));
		Значение.УстановитьСсылкуНового(Документы.РеализацияПодарочныхСертификатов.ПолучитьСсылку());
		ЗначениеВДанныеФормы(Значение, Объект);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.РеализацияПодарочныхСертификатов";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
	КонецПопытки;
	
	Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
	
	ЗафиксироватьТранзакцию();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Модифицированность Тогда
		
		Результат = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Результат Тогда
			Оповестить("Запись_РеализацияПодарочныхСертификатов", Новый Структура, Неопределено);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
    
	Элементы.ВозвратТовара.Доступность                    = ПраваДоступа.ВозвратТовара;
	
	Элементы.ПодарочныеСертификатыДобавить.Доступность    = ПраваДоступа.КорректировкаСтрок;
	Элементы.ПодарочныеСертификатыУдалить.Доступность     = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.ПодарочныеСертификатыКонтекстноеМенюДобавить.Доступность    = ПраваДоступа.КорректировкаСтрок;
	Элементы.ПодарочныеСертификатыКонтекстноеМенюУдалить.Доступность     = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.ПодарочныеСертификатыПодарочныйСертификат.ТолькоПросмотр = Не ПраваДоступа.КорректировкаСтрок;
	
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ОбновитьДанныеИнформационнойПанели(Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ЭквайринговыеТерминалы.Очистить();
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ИЗ
	|	Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка.РабочееМесто = &РабочееМесто
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМестоОборудования)
	|		Или ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|	И ЭквайринговыеТерминалы.ЭквайринговыйТерминал.БанковскийСчет.Владелец = &Организация
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
    Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос.УстановитьПараметр("РабочееМестоОборудования", РабочееМесто);
	Иначе
		Запрос.УстановитьПараметр("РабочееМестоОборудования", Справочники.РабочиеМеста.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭквайринговыйТерминал = Новый Структура;
		ЭквайринговыйТерминал.Вставить("Ссылка",                                 Выборка.Ссылка);
		ЭквайринговыйТерминал.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		ЭквайринговыйТерминал.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
		
		ЭквайринговыеТерминалы.Добавить(ЭквайринговыйТерминал);
		
	КонецЦикла;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя"));
	КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодарочныйСертификат(ПодарочныйСертификат, СтрокаТЧ = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодарочныеСертификаты.Владелец.Номинал КАК Номинал,
	|	ПодарочныеСертификаты.Владелец.Валюта  КАК ВалютаНоминала,
	|	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус,
	|	ПодарочныеСертификаты.Владелец.Номинал
	|	* ВЫБОР
	|		КОГДА &Валюта <> ПодарочныеСертификаты.Владелец.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыСертификаты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыСертификаты.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыСертификаты.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыСертификаты.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыСертификаты
	|ПО 
	|	ПодарочныеСертификаты.Владелец.Валюта = КурсыВалютыСертификаты.Валюта
	|	И ПодарочныеСертификаты.Ссылка = &Ссылка
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&Дата, ПодарочныйСертификат = &Ссылка) КАК ИсторияПодарочныхСертификатов
	|	По Истина
	|
	|ГДЕ
	|	ПодарочныеСертификаты.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ПодарочныйСертификат);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("Дата",   ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если СтрокаТЧ = Неопределено Тогда
			
			НайденныеСтроки = Объект.ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ПодарочныйСертификат", ПодарочныйСертификат));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденнаяСтрока = Объект.ПодарочныеСертификаты.Добавить();
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
		Иначе
			НайденнаяСтрока = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(СтрокаТЧ);
		КонецЕсли;
		
		НайденнаяСтрока.ПодарочныйСертификат = ПодарочныйСертификат;
		НайденнаяСтрока.Сумма = Выборка.Сумма;
		
		НайденнаяСтрока.Номинал        = Выборка.Номинал;
		НайденнаяСтрока.Статус         = Выборка.Статус;
		НайденнаяСтрока.ВалютаНоминала = Выборка.ВалютаНоминала;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ОплатаПлатежнымиКартами.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧек()
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документ помечен на удаление';uk='Документ позначений на вилучення'"), Объект.Ссылка,,,ЕстьОшибки);
	КонецЕсли;
	
	Объект.Дата = ТекущаяДата();
	Модифицированность = Истина;
	
	Если ЕстьОшибки Или Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ПробитьЧекПослеПроведения", ЭтотОбъект),
		НСтр("ru='Перед выполнением операции пробития чека не удалось провести документ.';uk='Перед виконанням операції пробиття чека не вдалося провести документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнить(ОписаниеОповещения)
	
	ЧекПробит = Ложь;
	
	ОписаниеОшибки = "";
	
	ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Результат = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваФР);
	
	Если Результат Или ИспользоватьБезПодключенияОборудования Тогда
		
		Если Не ИспользоватьБезПодключенияОборудования Тогда
			
			// Готовим данные
			ВходныеПараметры  = Новый Массив;
			ВыходныеПараметры = Неопределено;
			
			НомерСекции = 2;
			
			СтавкаНДССтрокой    = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС"));
			ЭтоПодакцизныйТовар = ЛОЖЬ;
			
			// Подготовка таблицы товаров
			ТаблицаТоваров = Новый Массив();
			
			Для Каждого СтрокаТЧ Из Объект.ПодарочныеСертификаты Цикл
				
				СтрокаТаблицыТоваров = Новый СписокЗначений();
				СтрокаТаблицыТоваров.Добавить(Строка(СтрокаТЧ.ПодарочныйСертификат));
				                                                            //  1 - Наименование
				СтрокаТаблицыТоваров.Добавить("");                          //  2 - Штрихкод
				СтрокаТаблицыТоваров.Добавить("");                          //  3 - Артикул
				СтрокаТаблицыТоваров.Добавить(НомерСекции);                 //  4 - Номер отдела
				СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Сумма);              //  5 - Цена за позицию без скидки
				СтрокаТаблицыТоваров.Добавить(1);                           //  6 - Количество
				СтрокаТаблицыТоваров.Добавить("");                          //  7 - Наименование скидки/наценки
				СтрокаТаблицыТоваров.Добавить(0);                           //  8 - Сумма скидки/наценки
				СтрокаТаблицыТоваров.Добавить(0);                           //  9 - Процент скидки/наценки
				СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Сумма);              // 10 - Сумма позиции со скидкой
				СтрокаТаблицыТоваров.Добавить(0);                           // 11 - Номер налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                           // 12 - Сумма налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                           // 13 - Процент налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                           // 14 - Номер налога (2)
				СтрокаТаблицыТоваров.Добавить(0);                           // 15 - Сумма налога (2)
				СтрокаТаблицыТоваров.Добавить(0);                           // 16 - Процент налога (2)
				СтрокаТаблицыТоваров.Добавить("");                          // 17 - Наименование секции форматирования товарной строки
				СтрокаТаблицыТоваров.Добавить(СтавкаНДССтрокой);            // 18 - Ставка НДС строкой
				СтрокаТаблицыТоваров.Добавить(ЭтоПодакцизныйТовар);         // 19 - Подакцизный товар
				СтрокаТаблицыТоваров.Добавить("");       					 // 20 - Код По УКТВЭД	
				СтрокаТаблицыТоваров.Добавить("");       			 		 // 21 - Артикул Товара
				СтрокаТаблицыТоваров.Добавить("");       		 	  		 // 22 - Штрихкоды акцизных марок
				СтрокаТаблицыТоваров.Добавить("");        					 // 23 - Единица Измерения Товара
				СтрокаТаблицыТоваров.Добавить(1);                            // 24 - Цена Включает НДС

				ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
				
			КонецЦикла;
			
			// Подготовка таблицы оплат
			ТаблицаОплат = Новый Массив();
			
			ИнформацияОбОплате = ИнформацияОбОплате();
			
			// Наличные
			СтрокаОплаты = Новый СписокЗначений();
			СтрокаОплаты.Добавить(0);
			СтрокаОплаты.Добавить(ИнформацияОбОплате.Наличные);
			СтрокаОплаты.Добавить("Наличная оплата");
			СтрокаОплаты.Добавить("");
			ТаблицаОплат.Добавить(СтрокаОплаты);
			// Безналичные
			СтрокаОплаты = Новый СписокЗначений();
			СтрокаОплаты.Добавить(1);
			СтрокаОплаты.Добавить(ИнформацияОбОплате.ПлатежныеКарты);
			СтрокаОплаты.Добавить("Безналичная оплата");
			СтрокаОплаты.Добавить("");
			ТаблицаОплат.Добавить(СтрокаОплаты);
			
			// Подготовка таблицы общих параметров
			ОбщиеПараметры = Новый Массив();
			ОбщиеПараметры.Добавить(0);                      //  1 - Тип чека
			ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
			ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
			ОбщиеПараметры.Добавить(ИнформацияОбОплате.СуммаДокумента); //  4 - Сумма по чеку без скидок/наценок
			ОбщиеПараметры.Добавить(ИнформацияОбОплате.СуммаДокумента); //  5 - Сумма по чеку с учетом всех скидок/наценок
			ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
			ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
			ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
			ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
			ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
			ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
			ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
			ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
			ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала
			ОбщиеПараметры.Добавить(Объект.Ссылка);          // 18 - Ссылка на чек ККМ, нужна для Програмного РРО
			ОбщиеПараметры.Добавить("0");                    // 19 - Номер чека ККМ, на основании которого делают возврат , нужнен для Програмного РРО
			ОбщиеПараметры.Добавить(Ложь);					 //20 - Признак наличия нескольких акцизных марок у одного товара	
			
			ВходныеПараметры.Добавить(ТаблицаТоваров);
			ВходныеПараметры.Добавить(ТаблицаОплат);
			ВходныеПараметры.Добавить(ОбщиеПараметры);
			
			// Печатаем чек.
			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
				ИдентификаторУстройстваФР,
				"PrintReceipt",
				ВходныеПараметры,
				ВыходныеПараметры);
			
		КонецЕсли;
		
		Если Результат Или ИспользоватьБезПодключенияОборудования Тогда
			
			// Установить полученное значение номера чека реквизиту документа.
			Если Не ИспользоватьБезПодключенияОборудования Тогда
				Объект.НомерЧекаККМ = ВыходныеПараметры[1];
			КонецЕсли;
			
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
			Объект.Дата   = ТекущаяДата();
			Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
				Объект.НомерЧекаККМ = 1;
			КонецЕсли;
			
			ДанныеДляЖурналаРегистрации = Новый Структура;
			ДанныеДляЖурналаРегистрации.Вставить("Дата");
			ДанныеДляЖурналаРегистрации.Вставить("Статус");
			ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаККМ");
			ЗаполнитьЗначенияСвойств(ДанныеДляЖурналаРегистрации, Объект);
			
			ВыполненаОперацияНаУстройстве = Истина;
			Модифицированность = Истина;
			
			ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
			ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
			Если Не ИзмененныеДанныеЗаписаны Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
				ДополнительныеПараметры.Вставить("ТекстСообщения", НСтр("ru='После пробития чека на ФР не удалось сохранить документ.';uk='Після пробиття чека на ФР не вдалося зберегти документ.'"));
				ДополнительныеПараметры.Вставить("ВозвращатьРезультатФункции", Ложь);
				ДополнительныеПараметры.Вставить("РезультатПриУспешномПроведении", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина));
				ДополнительныеПараметры.Вставить("РезультатПриОтмене", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь));
				ДополнительныеПараметры.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
				ДополнительныеПараметры.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
				
				Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
					ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
					Возврат;
				КонецЕсли;
				
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					ДополнительныеПараметры.ТекстСообщения,
					РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
				Возврат;
				
			КонецЕсли;
			
			ПересчитатьДокументНаКлиенте();
			
		Иначе
			
			ТекстСообщения = НСтр("ru='При печати чека произошла ошибка.
            |Чек не напечатан на фискальном регистраторе.
            |Дополнительное описание:
            |%ДополнительноеОписание%'
            |;uk='При друку чека виникла помилка.
            |Чек не надрукований на фіскальному реєстраторі.
            |Додатковий опис:
            |%ДополнительноеОписание%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			
			ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Фискальный регистратор не подключен. Чек не напечатан на фискальном регистраторе.';uk='Фіскальний реєстратор не підключений. Чек не надрукований на фіскальному реєстраторі.'"));
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ОписаниеОповещения,
		Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
			ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны));
	
КонецПроцедуры

&НаКлиенте
// Вызывается из формы МенюОперацииСККМ
Процедура ИзменитьКассуККМЗавершение(КассаККМ, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьКассуККМ(КассаККМ);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКассуККМ(КассаККМ)
	
	Объект.КассаККМ = КассаККМ;
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПослеПроведения(Проведен, ДополнительныеПараметры) Экспорт
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ПробитьЧекВыполнить(Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве
		И Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ТолькоПросмотр = Истина;
		
	Иначе
		
		Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
			ПараметрыФормы.Вставить("ТекстСообщения",
				НСтр("ru='ВНИМАНИЕ! Произошла исключительная ситуация:
                |Чек ККМ пробит, но не зафиксирован в системе.'
                |;uk='УВАГА! Виникла виняткова ситуація:
                |Чек ККМ пробитий, але не зафіксований у системі.'"));
			
			ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРМК()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучитьСсылкиНаОборудование();
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.СуммаБезСкидки.Ширина = 22;
		Элементы.СуммаКОплате.Ширина   = 22;
	КонецЕсли;
	
	Элементы.ПодарочныеСертификатыСумма.Заголовок = Элементы.ПодарочныеСертификатыСумма.Заголовок + " " + "(" + Объект.Валюта + ")";
	
	РозничныеПродажи.ПодписатьГорячиеКлавишиНаКнопках(ЭтотОбъект);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши, Неопределено)               КАК ГорячиеКлавиши,
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши.КомандыФормы, Неопределено)  КАК КомандыФормы,
	|	НастройкиРМК.ИспользоватьАвторизацию                              КАК ИспользоватьАвторизацию
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто
	|	И НастройкиРМК.Ссылка В (ВЫБРАТЬ Различные Т.Ссылка Из Справочник.НастройкиРМК.КассыККМ КАК Т Где Т.КассаККМ = &КассаККМ)
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ГорячиеКлавиши            = Выборка.ГорячиеКлавиши;
		ПринудительнаяАвторизация = Выборка.ИспользоватьАвторизацию;
		
		Если ЗначениеЗаполнено(ГорячиеКлавиши) Тогда
			РозничныеПродажи.НастроитьБыстрыеТоварыИГорячиеКлавиши(ЭтотОбъект, Выборка);
		КонецЕсли;
		
	Иначе
		
		ГорячиеКлавиши                          = Неопределено;
		ПринудительнаяАвторизация               = Ложь;
		
	КонецЕсли;
	
	НастроитьПраваДляПользователя(Объект.Кассир);
	
	ДоступныеВидыОплаты = ДоступныеВидыОплаты(ЭтотОбъект);
	Элементы.ОплатитьНаличными.Видимость = ДоступныеВидыОплаты.Наличные;
	Элементы.ОплатитьКартой.Видимость    = ДоступныеВидыОплаты.ПлатежныеКарты;
	Элементы.СмешаннаяОплата.Видимость   = ДоступныеВидыОплаты.ПлатежныеКарты;
	
	ЭлементыНаПерегруппировку = Новый Массив;
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьНаличными);
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьКартой);
	ЭлементыНаПерегруппировку.Добавить(Элементы.СмешаннаяОплата);
	
	РозничныеПродажи.ПерегруппироватьКнопкиФормы(ЭтотОбъект, ЭлементыНаПерегруппировку);
	
	РозничныеПродажи.НастроитьКомандыПечати(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПраваДляПользователя(Пользователь)
	
	ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователь);
	
	Объект.Кассир = Пользователь;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Заголовок = НСтр("ru='Продажа (Кассир: %Кассир%)';uk='Продаж (Касир: %Кассир%)'");
	Заголовок = СтрЗаменить(Заголовок, "%Кассир%", Объект.Кассир);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомандыФормы(УникальныйИдентификатор)
	
	КомандыФормы = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если НЕ КомандаФормы.СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
			КомандыФормы.Добавить(Новый Структура("ИмяКоманды, Заголовок, СочетаниеКлавиш", КомандаФормы.Имя, КомандаФормы.Заголовок, КомандаФормы.СочетаниеКлавиш));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(КомандыФормы, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеИнформационнойПанели(ОтобразитьСдачу = Ложь)
	
	ИнформацияОбОплате = ИнформацияОбОплате();
	
	ИнформационнаяПанельСуммаКОплате   = ИнформацияОбОплате.СуммаКОплате;
	ИнформационнаяПанельСуммаБезСкидки = ИнформацияОбОплате.СуммаДокумента;
	
	КоличествоСтрокВТЧ = Объект.ПодарочныеСертификаты.Количество();
	
	ТекущаяСтрока = Элементы.ПодарочныеСертификаты.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
		ТекущиеДанные = Объект.ПодарочныеСертификаты[КоличествоСтрокВТЧ - 1];
		Элементы.ПодарочныеСертификаты.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	НаименованиеТовара = "";
	Если ТекущиеДанные <> Неопределено Тогда
		НаименованиеТовара = Строка(ТекущиеДанные.ПодарочныйСертификат);
	КонецЕсли;
	
	ОбязательныеРеквизиты = Новый Массив;
	
	ДанныеСтроки = Новый Структура;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПодарочныйСертификат) Тогда
		ДанныеСтроки.Вставить("Номинал", Строка(ТекущиеДанные.Номинал) + " " + Строка(ТекущиеДанные.ВалютаНоминала));
		ДанныеСтроки.Вставить("Статус",  ТекущиеДанные.Статус);
	КонецЕсли;
	
	СуммовыеПараметры = Новый Структура;
	СуммовыеПараметры.Вставить("Количество",                0);
	СуммовыеПараметры.Вставить("Цена",                      0);
	СуммовыеПараметры.Вставить("СуммаРучнойСкидки",         0);
	СуммовыеПараметры.Вставить("СуммаАвтоматическойСкидки", 0);
	СуммовыеПараметры.Вставить("Сумма",                     0);
	Если ТекущиеДанные <> Неопределено Тогда
		СуммовыеПараметры.Количество = 1;
		СуммовыеПараметры.Цена       = ТекущиеДанные.Сумма;
		ЗаполнитьЗначенияСвойств(СуммовыеПараметры, ТекущиеДанные);
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("НаименованиеТовара",    НаименованиеТовара);
	Данные.Вставить("ДанныеСтроки",          ДанныеСтроки);
	Данные.Вставить("СуммовыеПараметры",     СуммовыеПараметры);
	Данные.Вставить("ОбязательныеРеквизиты", ОбязательныеРеквизиты);
	
	Если ОтобразитьСдачу Тогда
		
		ТекстСдача = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru='Сдача: %1';uk='Здача: %1'"),
				Формат(ИнформацияОбОплате.ИтогоОплачено - ИнформацияОбОплате.СуммаКОплате, "ЧДЦ=2; ЧН=0.00")));
		
		Данные.Вставить("ОтобразитьСдачу", Истина);
		Данные.Вставить("ТекстСдача",      ТекстСдача);
		
	Иначе
		Данные.Вставить("ОтобразитьСдачу", Ложь);
	КонецЕсли;

	РозничныеПродажиКлиентСервер.ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Данные);
	
КонецПроцедуры

&НаКлиенте
Функция ИнформацияОбОплате()
	
	СуммаДокумента = Объект.ПодарочныеСертификаты.Итог("Сумма");
	
	ИнформацияОбОплате = Новый Структура;
	ИнформацияОбОплате.Вставить("Документ",              Объект.Ссылка);
	
	ИнформацияОбОплате.Вставить("Наличные",              Объект.ПолученоНаличными);
	ИнформацияОбОплате.Вставить("ПлатежныеКарты",        Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
	ИнформацияОбОплате.Вставить("ПодарочныеСертификаты", 0);
	ИнформацияОбОплате.Вставить("БонусныеБаллы",         0);
	
	ИнформацияОбОплате.Вставить("СуммаДокумента",        СуммаДокумента);
	ИнформацияОбОплате.Вставить("СуммаКОплате",          СуммаДокумента);
	ИнформацияОбОплате.Вставить("СуммаСкидки",           0);
	ИнформацияОбОплате.Вставить("ИтогоОплачено",         ИнформацияОбОплате.Наличные + ИнформацияОбОплате.ПлатежныеКарты);
	
	ИнформацияОбОплате.Вставить("ДоступныеВидыОплаты", ДоступныеВидыОплаты(ЭтотОбъект));
	
	Возврат ИнформацияОбОплате;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеВидыОплаты(Форма)
	
	ОплатаПлатежнымиКартами = Ложь;
	Если Форма.ИспользоватьОплатуПлатежнымиКартами
		И Форма.ЭквайринговыеТерминалы.Количество() > 0 Тогда
		
		ОплатаПлатежнымиКартами = Истина;
		
	КонецЕсли;
	
	ДоступныеВидыОплаты = Новый Структура;
	ДоступныеВидыОплаты.Вставить("Наличные",              Истина);
	ДоступныеВидыОплаты.Вставить("ПлатежныеКарты",        ОплатаПлатежнымиКартами);
	ДоступныеВидыОплаты.Вставить("БонусныеБаллы",         Ложь);
	ДоступныеВидыОплаты.Вставить("ПодарочныеСертификаты", Ложь);
	
	Возврат ДоступныеВидыОплаты;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеПослеЗаписи(ОповещениеПриЗавершении, ТекстСообщения)
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения);
		ДополнительныеПараметры.Вставить("ВозвращатьРезультатФункции", Истина);
		ДополнительныеПараметры.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
		ДополнительныеПараметры.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДанныеИнформационнойПанели(Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуОплатыНаличными", ЭтотОбъект),
		НСтр("ru='Перед открытием формы оплаты не удалось записать документ.';uk='Перед відкриттям форми оплати не вдалося записати документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыНаличными(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате", ИнформацияОбОплате());
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаОплатыНаличными",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартойОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		Новый ОписаниеОповещения("ДобавитьОплатуКартой", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплатаОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
		НСтр("ru='Перед открытием формы оплаты не удалось записать документ.';uk='Перед відкриттям форми оплати не вдалося записати документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСмешаннойОплаты(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ДанныеОбОплате = Новый Массив;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате", ИнформацияОбОплате());
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаСмешаннойОплаты",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры

#Область ОплатаПлатежнымиКартами

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ДобавитьОплатуКартой(Результат, ПараметрыЗавершения) Экспорт
	
	Если ПараметрыЗавершения <> Неопределено Тогда
		Объект.ПолученоНаличными = ПараметрыЗавершения.ПолученоНаличными;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ИнформацияОбОплате = ИнформацияОбОплате();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения("ДобавитьОплатуКартойЗавершение", ЭтотОбъект, ПараметрыЗавершения));
	
	ДополнительныеПараметры.Вставить("ЭквайринговыеТерминалы", ЭквайринговыеТерминалы);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ",      ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ФормаАвторизации_Сумма",       ИнформацияОбОплате.СуммаКОплате - ИнформацияОбОплате.ИтогоОплачено);
	ДополнительныеПараметры.Вставить("ФормаАвторизации_ПределСуммы", ИнформацияОбОплате.СуммаКОплате - ИнформацияОбОплате.ИтогоОплачено + ИнформацияОбОплате.Наличные);
	ДополнительныеПараметры.Вставить("Валюта",                       Объект.Валюта);
	ДополнительныеПараметры.Вставить("СтруктураЭквайринговыйТерминал");
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ");
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ДобавитьОплатуКартой", РозничныеПродажиКлиент, ДополнительныеПараметры),
		НСтр("ru='Перед оплатой платежной картой не удалось записать документ.';uk='Перед оплатою платіжною карткою не вдалося записати документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Сохранить в таблице данные оплаты картой
	СтрокаОплатыКартой = Объект.ОплатаПлатежнымиКартами.Добавить();
	
	СтрокаОплатыКартой.ЭквайринговыйТерминал = Результат.СтруктураЭквайринговыйТерминал.Ссылка;
	СтрокаОплатыКартой.НомерПлатежнойКарты   = Результат.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
	СтрокаОплатыКартой.Сумма                 = Результат.СуммаОперации;
	СтрокаОплатыКартой.СсылочныйНомер        = Результат.НомерСсылкиОперации;
	СтрокаОплатыКартой.НомерЧекаЭТ           = Результат.НомерЧекаЭТ;
	СтрокаОплатыКартой.КодАвторизации        = Результат.КодАвторизации;
	
	ДанныеДляЖурналаРегистрации = Новый Структура;
	ДанныеДляЖурналаРегистрации.Вставить("СуммаОперации",  Результат.СуммаОперации);
	ДанныеДляЖурналаРегистрации.Вставить("СсылочныйНомер", Результат.НомерСсылкиОперации);
	ДанныеДляЖурналаРегистрации.Вставить("НомерКарты",     Результат.НомерКарты);
	ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаЭТ",    Результат.НомерЧекаЭТ);
	ДанныеДляЖурналаРегистрации.Вставить("КодАвторизации", Результат.КодАвторизации);
	
	Модифицированность = Истина;
	
	ПересчитатьДокументНаКлиенте();
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметрыЗавершение = Новый Структура;
		ДополнительныеПараметрыЗавершение.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ДобавитьОплатуКартойЗаписьЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		ДополнительныеПараметрыЗавершение.Вставить("ТекстСообщения", НСтр("ru='После проведения оплаты платежной картой не удалось сохранить документ.';uk='Після проведення оплати платіжною картою не вдалося зберегти документ.'"));
		ДополнительныеПараметрыЗавершение.Вставить("ВозвращатьРезультатФункции", Ложь);
		ДополнительныеПараметрыЗавершение.Вставить("РезультатПриУспешномПроведении", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина));
		ДополнительныеПараметрыЗавершение.Вставить("РезультатПриОтмене", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь));
		ДополнительныеПараметрыЗавершение.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
		ДополнительныеПараметрыЗавершение.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыЗавершение);
			Возврат;
		КонецЕсли;
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыЗавершение),
			ДополнительныеПараметрыЗавершение.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойЗаписьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru='ВНИМАНИЕ! Произошла исключительная ситуация:
            |Оплата произведена, но не зафиксирована в системе.'
            |;uk='УВАГА! Виникла виняткова ситуація:
            |Оплата зроблена, але не зафіксована в системі.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаОплатыПлатежнымиКартами

&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартами(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище());
	РезультатВыбора = Неопределено;
	
	Если ДополнительныеПараметры.Свойство("ПолученоНаличными") Тогда
		Объект.ПолученоНаличными = ДополнительныеПараметры.ПолученоНаличными;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ТабличнаяЧастьОплатаПлатежнымиКартами",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", ДополнительныеПараметры.Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДополнительныеПараметры.Форма.ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru='ВНИМАНИЕ! Произошла исключительная ситуация:
            |Отмена оплаты не зафиксирована в системе.'
            |;uk='УВАГА! Виникла виняткова ситуація:
            |Скасування оплати не зафіксоване в системі.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ДополнительныеПараметры.Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеВФормуОплаты") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартой(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОтменитьОплатуКартой", РозничныеПродажиКлиент, ДополнительныеПараметры),
		НСтр("ru='Перед открытием формы оплаты не удалось записать документ.';uk='Перед відкриттям форми оплати не вдалося записати документ.'"));
	
КонецПроцедуры

&НаКлиенте
Функция ОтменитьОплатуПлатежнымиКартами(ОповещениеОЗавершении)
	
	СтрокиОплатыПлатежнымиКартами = Новый Массив;
	Для каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		СтрокиОплатыПлатежнымиКартами.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СтрокиОплатыПлатежнымиКартами", СтрокиОплатыПлатежнымиКартами);
	
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта", Объект.Валюта);
	
	РозничныеПродажиКлиент.ОтменитьОплатуПлатежнымиКартамиПоследовательно(
		Неопределено,
		ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляЖурналаРегистрации = Новый Структура;
	ДанныеДляЖурналаРегистрации.Вставить("СуммаОперации",       ДополнительныеПараметры.СуммаОперации);
	ДанныеДляЖурналаРегистрации.Вставить("НомерСсылкиОперации", ДополнительныеПараметры.НомерСсылкиОперации);
	ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаЭТ",         ДополнительныеПараметры.НомерЧекаЭТ);
	
	Объект.ОплатаПлатежнымиКартами.Удалить(Объект.ОплатаПлатежнымиКартами.Индекс(ДополнительныеПараметры.СтрокаОплаты));
	Модифицированность = Истина;
	
	ПересчитатьДокументНаКлиенте();
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметрыПовторЗаписи = Новый Структура;
		ДополнительныеПараметрыПовторЗаписи.Вставить("ОписаниеОповещения", ДополнительныеПараметры.ОповещениеПриЗавершении);
		ДополнительныеПараметрыПовторЗаписи.Вставить("ТекстСообщения", НСтр("ru='После выполнения операции отмены оплаты не удалось записать документ.';uk='Після виконання операції скасування оплати не вдалося записати документ.'"));
		ДополнительныеПараметрыПовторЗаписи.Вставить("ВозвращатьРезультатФункции", Ложь);
		ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатПриУспешномПроведении", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина));
		ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатПриОтмене", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь));
		ДополнительныеПараметрыПовторЗаписи.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
		ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
			Возврат;
		КонецЕсли;
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметрыПовторЗаписи),
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Истина, Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ОтменитьОплату(Результат, ДополнительныеПараметры) Экспорт
	
	Объект.ПолученоНаличными = 0;
	
	ОтменитьОплатуПлатежнымиКартами(
		Новый ОписаниеОповещения("ОтменитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате());
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗавершениеОплаты(ПолученоНаличными, ДополнительныеПараметры) Экспорт
	
	Объект.ПолученоНаличными = ПолученоНаличными;
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеОплаты(ДополнительныеПараметры)
	
	ВывестиКОплатеНаДисплейПокупателя = Ложь;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ИнформацияОбОплате = ИнформацияОбОплате();
	// Команда оплаты картой вызвана из формы РМК
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Если ИнформацияОбОплате.ИтогоОплачено >= ИнформацияОбОплате.СуммаКОплате Тогда
			
			ВывестиКОплатеНаДисплейПокупателя = Истина;
			
			ОбновитьДанныеИнформационнойПанели(Истина);
			
			ПробитьЧек();
			
		ИначеЕсли ИнформацияОбОплате.ИтогоОплачено > 0 Тогда
			
			ВыполнитьДействиеПослеЗаписи(
				Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
				НСтр("ru='Перед открытием формы оплаты не удалось записать документ.';uk='Перед відкриттям форми оплати не вдалося записати документ.'"));
			
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧек(Ссылка = Неопределено)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
		
		Отказ = Ложь;
		ПередЗакрытиемЧека(
			Отказ,
			Новый ОписаниеОповещения("ЗагрузитьНовыйЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НовыйЧекНаСервере();
		ЗагрузитьНовыйЧекФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧекФрагмент()
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НовыйЧекНаСервере(ДополнительныеПараметры.Ссылка);
	
	ЗагрузитьНовыйЧекФрагмент();
	
КонецПроцедуры

&НаСервере
Функция ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи)
	
	ОтложитьВыполнено = Истина;
	
	СтарыйСтатус = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	Объект.Дата = ТекущаяДата();
	
	Попытка
		
		ОтложитьВыполнено = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Не ОтложитьВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		ОтложитьВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ОтложитьВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ОтложитьНаКлиенте(ОповещениеПриЗавершении) Экспорт
	
	Модифицированность = Истина;
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	Результат = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
	
	Если Не Результат Тогда
		
		ДополнительныеПараметрыПопытка = Новый Структура;
		ДополнительныеПараметрыПопытка.Вставить("ОписаниеОповещения", ОповещениеПриЗавершении);
		ДополнительныеПараметрыПопытка.Вставить("ТекстСообщения", НСтр("ru='Не удалось записать документ.';uk='Не вдалося записати документ.'"));
		ДополнительныеПараметрыПопытка.Вставить("ВозвращатьРезультатФункции", Истина);
		ДополнительныеПараметрыПопытка.Вставить("ИмяПроцедуры", "ОтложитьНаСервере");
		ДополнительныеПараметрыПопытка.Вставить("РезультатОперации", Результат);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПопытка);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПопытка),
			ДополнительныеПараметрыПопытка.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьЧек(Ссылка)
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ЧекОбъект = Ссылка.ПолучитьОбъект();
    
	Если ЧекОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Пробитый чек не может быть удален';uk='Пробитий чек не може бути вилучений'"));
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЧекОбъект.Удалить();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЧека(Отказ, ОписаниеОповещения = Неопределено)
	
	Кнопки = Новый СписокЗначений;
	
	Если Не ТолькоПросмотр И (Модифицированность ИЛИ ЗначениеЗаполнено(Объект.Ссылка)) Тогда
	
		Если ПраваДоступа.Отложить Тогда
			Кнопки.Добавить(1, НСтр("ru='Отложить';uk='Відкласти'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И ПраваДоступа.КорректировкаСтрок Тогда
			Кнопки.Добавить(4, НСтр("ru='Удалить чек';uk='Видалити чек'"));
		Иначе
			Если Модифицированность И ПраваДоступа.КорректировкаСтрок Тогда
				Кнопки.Добавить(3, НСтр("ru='Закрыть без сохранения';uk='Закрити без збереження'"));
			КонецЕсли;
			Если Не Модифицированность И ПраваДоступа.КорректировкаСтрок Тогда
				Кнопки.Добавить(3, НСтр("ru='Закрыть';uk='Закрити'"));
			КонецЕсли;
		КонецЕсли;
		
		Кнопки.Добавить(99, НСтр("ru='Отмена';uk='Відмінити'"));
	
	КонецЕсли;
	
	Если Кнопки.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросПередЗакрытиемЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			НСтр("ru='Выберите действие перед закрытием.';uk='Виберіть дію перед закриттям.'"),
			Кнопки);
		
	Иначе
		
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("Запись_РеализацияПодарочныхСертификатов", Новый Структура, Неопределено);
	
	Если Результат Тогда
		
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЧекаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = 1 Тогда
		
		// Отложить чек
		ОтложитьНаКлиенте(Новый ОписаниеОповещения("ВопросПередЗакрытиемОперацияЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Оповестить("Запись_РеализацияПодарочныхСертификатов", Новый Структура, Объект.Ссылка);
		
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = 3 Тогда
		
		// Закрыть без сохранения.
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = 4 Тогда
		
		// Удалить чек.
		УдалениеВыполнено = УдалитьЧек(Объект.Ссылка);
		
		Если УдалениеВыполнено Тогда
			
			Оповестить("Запись_РеализацияПодарочныхСертификатов", Новый Структура, Неопределено);
			
			Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
				ПринудительноеЗавершениеРаботы = Истина;
				Закрыть(Неопределено);
			Иначе
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НовыйЧекНаСервере(Ссылка = Неопределено)
	
	Если Ссылка = Неопределено Тогда
		НовыйЧек = Документы.РеализацияПодарочныхСертификатов.СоздатьДокумент();
		НовыйЧек.ОбработкаЗаполнения(Новый Структура("КассаККМ", Объект.КассаККМ), Истина);
	Иначе
		НовыйЧек = Ссылка.ПолучитьОбъект();
	КонецЕсли;
    
    РазблокироватьДанныеФормыДляРедактирования();    
	ЗначениеВДанныеФормы(НовыйЧек, Объект);
	
	ТолькоПросмотр = Ложь;
	Модифицированность = Ложь;
	ВывестиКОплатеНаДисплейПокупателя = Ложь;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратТовараОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ОформлениеВозвратаПодарочныхСертификатов", Новый Структура("КассаККМ", Объект.КассаККМ), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуПечати(ИмяКоманды, ДополнительныеПараметры) Экспорт

	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команды[ИмяКоманды], ЭтотОбъект, Объект);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
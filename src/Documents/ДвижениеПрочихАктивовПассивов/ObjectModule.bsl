
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Документы.ДвижениеПрочихАктивовПассивов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Источник,
		Получатель,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	ШаблонОшибки = НСтр("ru='В строке %1 таб. части ""Движения"" указана статья не соответствующего типа, необходимо выбрать статью с типом ""%3""';uk='У рядку %1 таб. частини ""Рухи"" вказана стаття не відповідного типу, необхідно вибрати статтю з типом ""%3""'");
	
	Для Каждого СтрТЧ из ДанныеОтражения Цикл
		
		// Источник
		ПровереннаяСтатья = ПроверитьСтатью(СтрТЧ.СтатьяИсточник, Источник);
		Если ПровереннаяСтатья.ЕстьОшибки Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				СтрТЧ.НомерСтроки,
				ПровереннаяСтатья.ТекстОшибки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеОтражения", СтрТЧ.НомерСтроки, "СтатьяИсточник"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Получатель
		ПровереннаяСтатья = ПроверитьСтатью(СтрТЧ.СтатьяПолучатель, Получатель);
		Если ПровереннаяСтатья.ЕстьОшибки Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				СтрТЧ.НомерСтроки,
				ПровереннаяСтатья.ТекстОшибки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеОтражения", СтрТЧ.НомерСтроки, "СтатьяПолучатель"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыПроверки = Новый Структура(
		"ДанныеОтражения",
		"СтатьяИсточник, АналитикаРасходовИсточник, СтатьяПолучатель, АналитикаРасходовПолучатель");
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, РеквизитыПроверки, МассивНепроверяемыхРеквизитов, Отказ);
	
	РеквизитыПроверки = Новый Структура(
		"ДанныеОтражения",
		"СтатьяИсточник, АналитикаДоходовИсточник, СтатьяПолучатель, АналитикаДоходовПолучатель");
	ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, РеквизитыПроверки, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ДвижениеПрочихАктивовПассивов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);

	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ПроверитьСтатью(Статья, ТипСтатьи)
	
	ТекстОшибки = "";
	Если Не (ЗначениеЗаполнено(Статья) И ЗначениеЗаполнено(ТипСтатьи)) Тогда
		// Будут другие ошибки, связанные с незаполненностью этих полей
	ИначеЕсли ТипСтатьи = Перечисления.ТипыСтатейАктивовПассивов.СтатьяАктивов Тогда
		
		Если Не (ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "АктивПассив") = Перечисления.ВидыСтатейУправленческогоБаланса.Актив) Тогда
			ТекстОшибки = НСтр("ru='Статья активов / пассивов (Отражение: ""В активе"")';uk='Стаття активів / пасивів (Відображення: ""В активі"")'");
		КонецЕсли;
		
	ИначеЕсли ТипСтатьи = Перечисления.ТипыСтатейАктивовПассивов.СтатьяПассивов Тогда
		
		Если Не (ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "АктивПассив") = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив) Тогда
			ТекстОшибки = НСтр("ru='Статья активов / пассивов (Отражение: ""В пассиве"")';uk='Стаття активів / пасивів (Відображення: ""В пасиві"")'");
		КонецЕсли;
		
	ИначеЕсли ТипСтатьи = Перечисления.ТипыСтатейАктивовПассивов.СтатьяДоходов Тогда
		
		Если Не (ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов")) Тогда
			ТекстОшибки = НСтр("ru='Статья доходов';uk='Стаття доходів'");
		КонецЕсли;
		
	Иначе // ТипСтатьи = Перечисления.ТипыСтатейАктивовПассивов.СтатьяРасходов
		
		Если Не (ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")) Тогда
			ТекстОшибки = НСтр("ru='Статья расходов';uk='Стаття витрат'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ЕстьОшибки, ТекстОшибки", Не ПустаяСтрока(ТекстОшибки), ТекстОшибки);
	
КонецФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Организация		= ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Валюта			= Константы.ВалютаУправленческогоУчета.Получить();
	Ответственный	= Пользователи.ТекущийПользователь();
	Источник		= Перечисления.ТипыСтатейАктивовПассивов.СтатьяАктивов;
	Получатель		= Перечисления.ТипыСтатейАктивовПассивов.СтатьяАктивов;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ПрочиеАктивыПассивы);
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
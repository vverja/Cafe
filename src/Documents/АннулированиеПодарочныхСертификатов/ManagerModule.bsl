
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);

КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры


#Область АннулированиеСертификатов

Процедура АннулироватьПодарочныеСертификатыПриЗакрытииМесяца(Организации, Период) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(НСтр("ru='Аннулирование подарочных сертификатов';uk='Анулювання подарункових сертифікатів'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияСертификатов.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ИсторияСертификатов.ПодарочныйСертификат.Владелец.СтатьяДоходов КАК СтатьяДоходов,
	|	ИсторияСертификатов.ПодарочныйСертификат.Владелец.АналитикаДоходов КАК АналитикаДоходов,
	|	АктивацияСертификатов.Регистратор.Организация КАК Организация
	|ПОМЕСТИТЬ ПодарочныеСертификаты
	|ИЗ
	|	РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&КонецПериода, ) КАК ИсторияСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияСертификатов
	|		ПО ИсторияСертификатов.ПодарочныйСертификат = АктивацияСертификатов.ПодарочныйСертификат
	|			И (АктивацияСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
	|ГДЕ
	|	ИсторияСертификатов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Аннулирован)
	|	И АктивацияСертификатов.Регистратор.Организация В(&Организации)
	|	И ВЫБОР
	|			КОГДА АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ДЕНЬ, АктивацияСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|			КОГДА АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, НЕДЕЛЯ, АктивацияСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|			КОГДА АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, МЕСЯЦ, АктивацияСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|			КОГДА АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, КВАРТАЛ, АктивацияСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|			КОГДА АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ГОД, АктивацияСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|			КОГДА АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ДЕКАДА, АктивацияСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|			КОГДА АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ПОЛУГОДИЕ, АктивацияСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|			ИНАЧЕ АктивацияСертификатов.Период
	|		КОНЕЦ < &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Организация КАК Организация,
	|	Сертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	Сертификаты.СтатьяДоходов КАК СтатьяДоходов,
	|	Сертификаты.АналитикаДоходов КАК АналитикаДоходов,
	|	ЕСТЬNULL(ОстаткиСертификатов.СуммаОстаток, 0) КАК СуммаВВалютеСертификата
	|ИЗ
	|	ПодарочныеСертификаты КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(
	|				&КонецПериода,
	|				ПодарочныйСертификат В
	|					(ВЫБРАТЬ
	|						ПодарочныеСертификаты.ПодарочныйСертификат
	|					ИЗ
	|						ПодарочныеСертификаты)) КАК ОстаткиСертификатов
	|		ПО Сертификаты.ПодарочныйСертификат = ОстаткиСертификатов.ПодарочныйСертификат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сертификаты.Организация");
	Запрос.УстановитьПараметр("Организации",   Организации);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	
	ДокументыОрганизаций = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = ДокументыОрганизаций.Получить(Выборка.Организация);
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы.АннулированиеПодарочныхСертификатов.СоздатьДокумент();
			ДокументОбъект.Дата = КонецМесяца(Период);
			ДокументОбъект.ИнициализироватьДокумент();
			ДокументОбъект.Организация = Выборка.Организация;
			ДокументыОрганизаций.Вставить(Выборка.Организация, ДокументОбъект);
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.ПодарочныеСертификаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	Для Каждого Документ Из ДокументыОрганизаций Цикл
		
		ДокументОбъект = Документ.Значение;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);

		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаПодарочныеСертификаты(ТекстыЗапроса, Регистры);
	ТекстЗапросаИсторияПодарочныхСертификатов(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеДоходы(ТекстыЗапроса, Регистры);
	ТекстЗапросаКонтрагентДоходыРасходы(ТекстыЗапроса, Регистры);
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата        КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Менеджер    КАК Менеджер
	|
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                                Реквизиты.Период);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",        Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",            Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("Организация",                           Реквизиты.Организация);
	Запрос.УстановитьПараметр("Менеджер",                              Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	
КонецПроцедуры

Функция ТекстЗапросаПодарочныеСертификаты(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПодарочныеСертификаты";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТабличнаяЧасть.ПодарочныйСертификат    КАК ПодарочныйСертификат,
	|	ТабличнаяЧасть.СуммаВВалютеСертификата КАК Сумма,
	|	
	|	ТабличнаяЧасть.СуммаВВалютеСертификата
	|		* ЕСТЬNULL(КурсыВалютСерт.Курс, 1) / ЕСТЬNULL(КурсыВалютСерт.Кратность, 1)
	|		/ ЕСТЬNULL(КурсВалютыРегл.Курс, 1) * ЕСТЬNULL(КурсВалютыРегл.Кратность, 1) КАК СуммаРегл
	|
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов.ПодарочныеСертификаты КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсыВалютСерт
	|	ПО
	|		КурсыВалютСерт.Валюта = ТабличнаяЧасть.ПодарочныйСертификат.Владелец.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсВалютыРегл
	|	ПО
	|		КурсВалютыРегл.Валюта = &ВалютаРегламентированногоУчета
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИсторияПодарочныхСертификатов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ИсторияПодарочныхСертификатов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                                                          КАК Период,
	|	ТабличнаяЧасть.ПодарочныйСертификат                              КАК ПодарочныйСертификат,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Аннулирован) КАК Статус
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов.ПодарочныеСертификаты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеДоходы(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ВидСертификата.СтатьяДоходов КАК СтатьяДоходов,
	|	ВидСертификата.АналитикаДоходов КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	
	|	ВЫБОР КОГДА ВидСертификата.Валюта = &ВалютаУправленческогоУчета ТОГДА
	|		Строки.СуммаВВалютеСертификата
	|	ИНАЧЕ
	|		Строки.СуммаВВалютеСертификата
	|			* ЕСТЬNULL(КурсыВалютСерт.Курс, 1) / ЕСТЬNULL(КурсыВалютСерт.Кратность, 1)
	|			/ ЕСТЬNULL(КурсВалютыУпр.Курс, 1) * ЕСТЬNULL(КурсВалютыУпр.Кратность, 1)
	|	КОНЕЦ КАК Сумма
	|
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов.ПодарочныеСертификаты КАК Строки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыПодарочныхСертификатов КАК ВидСертификата
	|	ПО
	|		ВидСертификата.Ссылка = Строки.ПодарочныйСертификат.Владелец
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсыВалютСерт
	|	ПО
	|		КурсыВалютСерт.Валюта = ВидСертификата.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсВалютыУпр
	|	ПО
	|		КурсВалютыУпр.Валюта = &ВалютаУправленческогоУчета
	|
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Строки.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКонтрагентДоходыРасходы(ТекстыЗапроса, Регистры = Неопределено)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АннулированиеПодарочныхСертификатов) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель) КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	Строки.ПодарочныйСертификат КАК ОбъектРасчетов,
	|
	|	ВидСертификата.СтатьяДоходов КАК СтатьяДоходовРасходов,
	|	ВидСертификата.АналитикаДоходов КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|
	|	ВЫБОР КОГДА ВидСертификата.Валюта = &ВалютаУправленческогоУчета ТОГДА
	|		Строки.СуммаВВалютеСертификата
	|	ИНАЧЕ
	|		Строки.СуммаВВалютеСертификата
	|			* ЕСТЬNULL(КурсыВалютСерт.Курс, 1) / ЕСТЬNULL(КурсыВалютСерт.Кратность, 1)
	|			/ ЕСТЬNULL(КурсВалютыУпр.Курс, 1) * ЕСТЬNULL(КурсВалютыУпр.Кратность, 1)
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ВидСертификата.Валюта = &ВалютаРегламентированногоУчета ТОГДА
	|		Строки.СуммаВВалютеСертификата
	|	ИНАЧЕ
	|		Строки.СуммаВВалютеСертификата
	|			* ЕСТЬNULL(КурсыВалютСерт.Курс, 1) / ЕСТЬNULL(КурсыВалютСерт.Кратность, 1)
	|			/ ЕСТЬNULL(КурсВалютыУпр.Курс, 1) * ЕСТЬNULL(КурсВалютыУпр.Кратность, 1)
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаРеглБезНДС,
	|
	|	ВидСертификата.Валюта КАК Валюта,
	|	Строки.СуммаВВалютеСертификата КАК СуммаВВалюте,
	|	ВидСертификата.Валюта КАК ВалютаВзаиморасчетов,
	|	Строки.СуммаВВалютеСертификата КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУРасчетов
	|
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов.ПодарочныеСертификаты КАК Строки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыПодарочныхСертификатов КАК ВидСертификата
	|	ПО
	|		ВидСертификата.Ссылка = Строки.ПодарочныйСертификат.Владелец
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсыВалютСерт
	|	ПО
	|		КурсыВалютСерт.Валюта = ВидСертификата.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсВалютыУпр
	|	ПО
	|		КурсВалютыУпр.Валюта = &ВалютаУправленческогоУчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсВалютыРегл
	|	ПО
	|		КурсВалютыРегл.Валюта = &ВалютаРегламентированногоУчета
	|
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И &ИспользоватьУчетПрочихДоходовРасходов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#Область ОбновлениеИнформационнойБазы


// Обработчик обновления BAS УТ 3.2.2
// Переносит аналитику доходов из шапки в табличную часть
Процедура ПеренестиАналитикуДоходовВТабЧасть(ПараметрыОбработчика) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        ПараметрыОбработчика.Очередь, 
        "Документ.АннулированиеПодарочныхСертификатов"
    );
    
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			БлокировкаДокумента = Блокировка.Добавить("Документ.АннулированиеПодарочныхСертификатов");
			БлокировкаДокумента.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого СтрокаТЧ Из ОбъектДокумента.ПодарочныеСертификаты Цикл
				СтрокаТЧ.СтатьяДоходов = ОбъектДокумента.УдалитьСтатьяДоходов;
				СтрокаТЧ.АналитикаДоходов = ОбъектДокумента.УдалитьАналитикаДоходов;
			КонецЦикла;
			ОбъектДокумента.УдалитьСтатьяДоходов = Неопределено;
			ОбъектДокумента.УдалитьАналитикаДоходов = Неопределено;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
	
	КонецЦикла;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        ПараметрыОбработчика.Очередь, 
        "Документ.АннулированиеПодарочныхСертификатов"
    );
	
КонецПроцедуры

Процедура ПеренестиАналитикуДоходовВТабЧастьДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.УдалитьСтатьяДоходов КАК СтатьяДоходов,
	|	ДанныеДокумента.УдалитьАналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеДокумента.МоментВремени
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.УдалитьСтатьяДоходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)");
	
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры



#КонецОбласти

#Область БлокировкаПриОбновленииИБ

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации)
	
	ВходящиеДанные = Новый Соответствие;
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПодарочныеСертификаты);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ИсторияПодарочныхСертификатов);
	
	ЗакрытиеМесяцаУТВызовСервера.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

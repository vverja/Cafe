#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТоварыПоЗаданиюНаПеревозку(КомандыСоздатьНаОсновании);

КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаданиеНаПеревозку) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ЗаданиеНаПеревозку.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ЗаданиеНаПеревозку);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеДоставкой";
	
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	Возврат; //В дальнейшем будет добавлен код команд

КонецПроцедуры

#Область ПроверкиПриСменеСтатуса

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаданийНаПеревозку[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольДоставки") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка КАК Ссылка,
		|	МИНИМУМ(ЗаданиеНаПеревозкуМаршрут.Доставлено) КАК Доставлено
		|ПОМЕСТИТЬ
		|	втМаршрут
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|ГДЕ
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка В (&МассивДокументов)
		|СГРУППИРОВАТЬ ПО
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА втМаршрут.Доставлено ЕСТЬ NULL 
		|				ИЛИ втМаршрут.Доставлено = ИСТИНА
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНедоставленныеСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	втМаршрут КАК втМаршрут
		|ПО
		|	втМаршрут.Ссылка = ТаблицаДокументов.Ссылка
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|;";
	
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольДоставки")
		И ВыборкаПроверки.ЕстьНедоставленныеСтроки Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. задание доставлено не полностью';uk='У документа %Документ% статус ""%Статус%"" не встановлений, оскільки завдання доставлене не повністю'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

// Возвращает текст запроса получения списка накладных из задания на перевозку
// Результат помещается в виртуальную таблицу "НакладныеПоЗаданиямНаПеревозку" с колонками:
// 		ЗаданиеНаПеревозку, Адрес, Накладная, НомерСтроки
// Запрос ожидает ожидает следующие параметры:
//		ЗаданияНаПеревозку - массив заданий на перевозку
//		НетВыделенныхСтрокАдресов - Булево - Истина, если нет выделенных строк в ТЧ Маршруты по заданию на перевозку
//		ВыделенныеСтрокиАдресов - массив номеров выделенных строк из ТЧ Маршруты
//		ВсеРаспоряжения - Булево - Истина, если нужно получить накладные по всем распоряжениям, иначе Ложь
//		Распоряжения - массив распоряжений, по которым нужно получить накладные, сработает если ВсеРаспоряжения = Ложь
// 
// Возвращаемое значение:
//  Строка - Строка с запросом
//
Функция ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку() Экспорт
	
	Возврат	
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК ЗаданиеНаПеревозку,
	|	ЗаданиеНаПеревозкуМаршрут.Адрес КАК АдресДоставки,
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
	|	ЗаданиеНаПеревозкуРаспоряжения.Склад,
	|	ЗаданиеНаПеревозкуМаршрут.НомерСтроки
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ПО ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи
	|			И ЗаданиеНаПеревозкуМаршрут.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Ссылка
	|ГДЕ
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка В(&ЗаданияНаПеревозку)
	|	И (ЗаданиеНаПеревозкуМаршрут.НомерСтроки В (&ВыделенныеСтрокиАдресов)
	|			ИЛИ &НетВыделенныхСтрокАдресов)
	|	И (ЗаданиеНаПеревозкуРаспоряжения.Распоряжение В (&Распоряжения)
	|			ИЛИ &ВсеРаспоряжения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Распоряжения.ЗаданиеНаПеревозку,
	|	Распоряжения.АдресДоставки,
	|	ДокументТовары.Ссылка КАК Накладная,
	|	Распоряжения.НомерСтроки
	|ПОМЕСТИТЬ НакладныеПоЗаданиямНаПеревозку
	|ИЗ
	|	Распоряжения КАК Распоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
	|		ПО Распоряжения.Распоряжение = ДокументТовары.ЗаказКлиента
	|			И Распоряжения.Склад = ДокументТовары.Склад
	|ГДЕ
	|	ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Распоряжения.ЗаданиеНаПеревозку,
	|	Распоряжения.АдресДоставки,
	|	ДокументТовары.Ссылка,
	|	Распоряжения.НомерСтроки
	|ИЗ
	|	Распоряжения КАК Распоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ДокументТовары
	|		ПО Распоряжения.Распоряжение = ДокументТовары.ЗаказНаПеремещение
	|			И Распоряжения.Склад = ДокументТовары.Ссылка.СкладОтправитель
	|ГДЕ
	|	ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Распоряжения.ЗаданиеНаПеревозку,
	|	Распоряжения.АдресДоставки,
	|	Распоряжения.Распоряжение,
	|	Распоряжения.НомерСтроки
	|ИЗ
	|	Распоряжения КАК Распоряжения
	|ГДЕ
	|	(Распоряжения.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|		ИЛИ Распоряжения.Распоряжение ССЫЛКА Документ.ПеремещениеТоваров		
	|		ИЛИ Распоряжения.Распоряжение ССЫЛКА Документ.ВозвратТоваровПоставщику)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Маршрутный лист
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("ru='Маршрутный лист';uk='Маршрутний лист'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН")
		И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда
		
		// 1-ТН (Товарно-транспортные накладные)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТТН";
		КомандаПечати.Представление = НСтр("ru='Товарно-транспортная накладная (1-ТН)';uk='Товарно-транспортна накладна (1-ТН)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		
	КонецЕсли;
	
	// Этикетки доставки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокДоставки";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ЭтикеткаДоставки";
	КомандаПечати.Представление = НСтр("ru='Этикетки доставки';uk='Етикетки доставки'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.СертификатыНоменклатуры)
		И ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры") Тогда
		// Реестр сертификатов номенклатуры
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СертификатыНоменклатурыРеестр";
		КомандаПечати.Представление = НСтр("ru='Сертификаты (реестр)';uk='Сертифікати (реєстр)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Изображения сертификатов номенклатуры
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СертификатыНоменклатурыИзображенияИзДокументов";
		КомандаПечати.Представление = НСтр("ru='Сертификаты (по каждой позиции документа)';uk='Сертифікати (по кожній позиції документа)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Изображения сертификатов номенклатуры
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СертификатыНоменклатурыИзображенияИзДокументовБезДублей";
		КомандаПечати.Представление = НСтр("ru='Сертификаты (по одному на сертификат)';uk='Сертифікати (по одному на сертифікат)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	// Комплект документов на принтер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КомплектДокументов";
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Представление = НСтр("ru='Комплект документов на принтер';uk='Комплект документів на принтер'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛист") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"МаршрутныйЛист",
				НСтр("ru='Маршрутный лист';uk='Маршрутний лист'"),
				СформироватьПечатнуюФормуМаршрутныйЛист(
					МассивОбъектов,
 					ОбъектыПечати,
					ПараметрыВывода
				),
				,
				,
				,
				Истина
			);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		СтруктураРаспоряжения = ПолучитьМассивРаспоряжений(МассивОбъектов);
		Для Каждого СсылкаЗадание Из СтруктураРаспоряжения.ПустыеЗадания Цикл
			ТекстСообщения = НСтр("ru='Не удалось напечатать товарно-транспортные накладные по документу ""%Задание%"": не заполнены распоряжения на доставку.';uk='Не вдалося надрукувати товарно-транспортні накладні за документом ""%Задание%"": не заповнені розпорядження на доставку.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Задание%", СсылкаЗадание);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ТТН",
				НСтр("ru='Товарно-транспортная накладная';uk='Товарно-транспортна накладна'"),
				Обработки.ПечатьТТН.СформироватьПечатнуюФормуТТН(
					СтруктураРаспоряжения.Распоряжения,
					ОбъектыПечати,
					ПараметрыПечати));
	КонецЕсли;
	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыРеестр") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыРеестр",
			НСтр("ru='Сертификаты (реестр)';uk='Сертифікати (реєстр)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуРеестрСертификатовНоменклатуры(МассивОбъектов, ОбъектыПечати, Неопределено),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_РеестрСертификатов");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыИзображенияИзДокументов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыИзображенияИзДокументов",
			НСтр("ru='Сертификаты (по каждой позиции документа)';uk='Сертифікати (по кожній позиції документа)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуИзображенияСертификатовИзДокументов(МассивОбъектов, ОбъектыПечати, Неопределено),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_ИзображенияСертификатов");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыИзображенияИзДокументовБезДублей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыИзображенияИзДокументовБезДублей",
			НСтр("ru='Сертификаты (по одному на сертификат)';uk='Сертифікати (по одному на сертифікат)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуИзображенияСертификатовИзДокументовБезДублей(МассивОбъектов, ОбъектыПечати, Неопределено),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_ИзображенияСертификатов");
	КонецЕсли;
		
КонецПроцедуры

Функция СформироватьПечатнуюФормуМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)	
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;	 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаданиеНаПеревозку_МаршрутныйЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаданиеНаПеревозку.ПФ_MXL_МаршрутныйЛист", КодЯзыкаПечать);
	
	ОбластьЗаголовокДокумента		= Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьШапкаДокумента 			= Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	
	ЗапросПоДокументу = Новый Запрос;
	ЗапросПоДокументу.Текст = 
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозку.Номер КАК НомерЗадания,
	|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланС КАК НачалоРейсаПлан,
	|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланПо КАК ОкончаниеРейсаПлан,
	|	ПРЕДСТАВЛЕНИЕ(ЗаданиеНаПеревозку.Водитель) КАК Водитель,
	|	ПРЕДСТАВЛЕНИЕ(ЗаданиеНаПеревозку.КурьерЭкспедитор) КАК КурьерЭкспедитор,
	|	ПРЕДСТАВЛЕНИЕ(ЗаданиеНаПеревозку.ТранспортноеСредство) КАК ТранспортноеСредство,
	|	ЗаданиеНаПеревозку.Приоритет,
	|	ЗаданиеНаПеревозку.Дата КАК Дата,
	|	ЗаданиеНаПеревозку.ДатаВремяРейсаФактС КАК НачалоРейсаФакт,
	|	ЗаданиеНаПеревозку.ДатаВремяРейсаФактПо КАК ОкончаниеРейсаФакт,
	|	ЗаданиеНаПеревозку.ДополнительнаяИнформация КАК ДопИнформация,
	|	ЗаданиеНаПеревозку.Ссылка,
	|	ЗаданиеНаПеревозку.Вес КАК ИтогоВес,
	|	ЗаданиеНаПеревозку.Объем КАК ИтогоОбъем
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПеревозку.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуМаршрут.Адрес,
	|	ЗаданиеНаПеревозкуМаршрут.Зона,
	|	ЗаданиеНаПеревозкуМаршрут.ВремяС КАК ВремяС,
	|	ЗаданиеНаПеревозкуМаршрут.ВремяПо КАК ВремяПо,
	|	ЗаданиеНаПеревозкуРаспоряжения.Вес,
	|	ЗаданиеНаПеревозкуРаспоряжения.Объем,
	|	ВЫРАЗИТЬ(ЗаданиеНаПеревозкуМаршрут.ДополнительнаяИнформация КАК СТРОКА(1000)) КАК ДополнительнаяИнформация,
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка КАК Ссылка,
	|	ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК Получатель,
	|	СУММА(ВЫБОР
	|			КОГДА РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|				ТОГДА ЕСТЬNULL(РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоМест
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
	|			ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка.ЗаданиеНаПеревозку
	|				И ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель = РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка.Получатель
	|				И (НЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка.ПометкаУдаления)
	|		ПО ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи
	|ГДЕ
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозкуМаршрут.Адрес,
	|	ЗаданиеНаПеревозкуМаршрут.Зона,
	|	ЗаданиеНаПеревозкуМаршрут.ВремяС,
	|	ЗаданиеНаПеревозкуМаршрут.ВремяПо,
	|	ЗаданиеНаПеревозкуРаспоряжения.Вес,
	|	ЗаданиеНаПеревозкуРаспоряжения.Объем,
	|	ВЫРАЗИТЬ(ЗаданиеНаПеревозкуМаршрут.ДополнительнаяИнформация КАК СТРОКА(1000)),
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка,
	|	ЗаданиеНаПеревозкуМаршрут.НомерСтроки,
	|	ЗаданиеНаПеревозкуРаспоряжения.НомерСтроки,
	|	ЗаданиеНаПеревозкуМаршрут.КлючСвязи,
	|	ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка,
	|	ЗаданиеНаПеревозкуМаршрут.НомерСтроки,
	|	ЗаданиеНаПеревозкуРаспоряжения.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка,
	|	ЗаданиеНаПеревозкуМаршрут.КлючСвязи,
	|	Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Склад,
	|	ВЫБОР
	|		КОГДА Т.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И Т.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= Т.Распоряжение.Дата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК Т
	|ГДЕ
	|	Т.Ссылка В(&МассивОбъектов)
	|	И НЕ Т.Склад.ЭтоГруппа";
	
	ЗапросПоДокументу.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапросаПоДокументу = ЗапросПоДокументу.ВыполнитьПакет();
	
	РезультатШапкаДокументов = РезультатЗапросаПоДокументу[0].Выбрать();
	ВыборкаПоСсылкам = РезультатЗапросаПоДокументу[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СкладыПогрузкиВыборка = РезультатЗапросаПоДокументу[2].Выбрать();
	
	Пока РезультатШапкаДокументов.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		РеквизитыДокумента = Новый Структура;
		РеквизитыДокумента.Вставить("Номер", РезультатШапкаДокументов.НомерЗадания);
		РеквизитыДокумента.Вставить("Дата", РезультатШапкаДокументов.Дата);
		
		ЗаголовокДокумента = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, НСтр("ru='Маршрутный лист';uk='Маршрутний лист'", КодЯзыкаПечать), КодЯзыкаПечать);
		ОбластьЗаголовокДокумента.Параметры.ЗаголовокДокумента = ЗаголовокДокумента;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент,
			Макет,
			ОбластьЗаголовокДокумента,
			РезультатШапкаДокументов.Ссылка);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокДокумента);
		
		ОбластьШапкаДокумента.Параметры.Заполнить(РезультатШапкаДокументов);
		
		СтрокаСкладыПогрузки = "";
				
		ЕстьОрдерныеСклады = Ложь;
		
		Пока СкладыПогрузкиВыборка.Следующий() Цикл
			Если СкладыПогрузкиВыборка.ОрдернаяСхемаПриОтгрузке И Не ЕстьОрдерныеСклады Тогда
				ЕстьОрдерныеСклады = Истина;
			КонецЕсли;
			СтрокаСкладыПогрузки = СтрокаСкладыПогрузки + СкладыПогрузкиВыборка.Склад + "," + " ";	
			
		КонецЦикла;
		
		Если ЕстьОрдерныеСклады Тогда 
			ОбластьШапкаТаблицы				= Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрокаТаблицы			= Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьДопСтрокаТаблицы			= Макет.ПолучитьОбласть("ДопСтрокаТаблицы");
			ОбластьПодвалТаблицы 			= Макет.ПолучитьОбласть("ПодвалТаблицы");
			ОбластьИтоги 					= Макет.ПолучитьОбласть("Итоги"); 
		Иначе
			ОбластьШапкаТаблицы				= Макет.ПолучитьОбласть("ШапкаТаблицыБезМест");
			ОбластьСтрокаТаблицы			= Макет.ПолучитьОбласть("СтрокаТаблицыБезМест");
			ОбластьДопСтрокаТаблицы			= Макет.ПолучитьОбласть("ДопСтрокаТаблицыБезМест");
			ОбластьПодвалТаблицы 			= Макет.ПолучитьОбласть("ПодвалТаблицыБезМест");
			ОбластьИтоги 					= Макет.ПолучитьОбласть("ИтогиБезМест");
		КонецЕсли;
		
		Если СтрокаСкладыПогрузки <> "" Тогда 
			
			СтрокаСкладыПогрузки = Лев(СтрокаСкладыПогрузки, СтрДлина(СтрокаСкладыПогрузки) - 2);
			ОбластьШапкаДокумента.Параметры.СкладыПогрузки = СтрокаСкладыПогрузки;
						
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
		
		Пока ВыборкаПоСсылкам.НайтиСледующий(Новый Структура ("Ссылка", РезультатШапкаДокументов.Ссылка)) Цикл
			
			ИмяСтолбцаВес = НСтр("ru='Вес';uk='Вага'", КодЯзыкаПечать)+", %ЕдиницаИзмеренияВес%";
			ИмяСтолбцаОбъем = НСтр("ru='Объем';uk='Об''єм'", КодЯзыкаПечать)+", %ЕдиницаИзмеренияОбъем%";
			ИмяСтолбцаВес = СтрЗаменить(ИмяСтолбцаВес, "%ЕдиницаИзмеренияВес%", Константы.ЕдиницаИзмеренияВеса.Получить());
			ИмяСтолбцаОбъем = СтрЗаменить(ИмяСтолбцаОбъем, "%ЕдиницаИзмеренияОбъем%", Константы.ЕдиницаИзмеренияОбъема.Получить());
			
			ОбластьШапкаТаблицы.Параметры.ВесШапка = ИмяСтолбцаВес;
			ОбластьШапкаТаблицы.Параметры.ОбъемШапка = ИмяСтолбцаОбъем;
			
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			ВыборкаПоКодамСтрок = ВыборкаПоСсылкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			НомерСтроки = 0;
			
			Пока ВыборкаПоКодамСтрок.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				ОбластьСтрокаТаблицы.Параметры.НомерЗаказа = НомерСтроки;
				
				ВыборкаПоПолучателям = ВыборкаПоКодамСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ПервыйПолучатель = Истина;
				
				КоличествоПолучателей = ВыборкаПоПолучателям.Количество();
				ИтогоКоличествомест = 0;
				
				Пока ВыборкаПоПолучателям.Следующий() Цикл
					
					Если ПервыйПолучатель Тогда 
						ЗаполняемаяОбласть = ОбластьСтрокаТаблицы;
						ПервыйПолучатель = Ложь;
					Иначе
						ЗаполняемаяОбласть = ОбластьДопСтрокаТаблицы;
					КонецЕсли;
					
					ИтогоВес = 0;
					ИтогоОбъем = 0;
					
					ИтогоКоличествомест = ИтогоКоличествомест + ВыборкаПоПолучателям.КоличествоМест;
					
					Выборка = ВыборкаПоПолучателям.Выбрать();
					
					Распоряжения = Новый Соответствие;
					
					Пока Выборка.Следующий() Цикл
						
						ИтогоВес = ИтогоВес + Выборка.Вес;
						ИтогоОбъем = ИтогоОбъем + Выборка.Объем;
						
						ЗаполняемаяОбласть.Параметры.Заполнить(Выборка);
						
						СтрокаРаспоряжения = Распоряжения.Получить(Выборка.Распоряжение.Метаданные());
						Если СтрокаРаспоряжения = Неопределено Тогда
							СтрокаРаспоряжения = Выборка.Распоряжение.Метаданные().ПредставлениеСписка + ": "
								+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Распоряжение.Номер);	
						Иначе
							СтрокаРаспоряжения = СтрокаРаспоряжения + "," + " "
								+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Распоряжение.Номер);
						КонецЕсли;	
								
						Распоряжения.Вставить(Выборка.Распоряжение.Метаданные(), СтрокаРаспоряжения);
					КонецЦикла;
					
					ЗаполняемаяОбласть.Параметры.Вес = ИтогоВес;
					ЗаполняемаяОбласть.Параметры.Объем = ИтогоОбъем;
					
					ЗаполняемаяОбласть.Параметры.Распоряжения = "";
					Для Каждого РаспоряжениеКлючЗначение Из Распоряжения Цикл
						
						ЗаполняемаяОбласть.Параметры.Распоряжения = ЗаполняемаяОбласть.Параметры.Распоряжения + РаспоряжениеКлючЗначение.Значение + Символы.ПС;
							
					КонецЦикла;
					
					ТабличныйДокумент.Вывести(ЗаполняемаяОбласть);
					
				КонецЦикла;
				
				Если ЕстьОрдерныеСклады Тогда 
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "НомерЗаказа", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "Адрес", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "Зона", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "ВремяС", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "ВремяПо", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "ДополнительнаяИнформацияСтрока", КоличествоПолучателей - 1);
				Иначе
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "НомерЗаказаБезМест", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "АдресБезМест", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "ЗонаБезМест", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "ВремяСБезМест", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "ВремяПоБезМест", КоличествоПолучателей - 1);
					ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, "ДополнительнаяИнформацияСтрокаБезМест", КоличествоПолучателей - 1);
				КонецЕсли;
				
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
			
			ОбластьИтоги.Параметры.ИтогоВес = РезультатШапкаДокументов.ИтогоВес / НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
			ОбластьИтоги.Параметры.ИтогоОбъем = РезультатШапкаДокументов.ИтогоОбъем;
			Если ЕстьОрдерныеСклады Тогда 
				ОбластьИтоги.Параметры.ИтогоКоличествоМест = ИтогоКоличествомест;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьИтоги);
			
			Если ЗначениеЗаполнено(РезультатШапкаДокументов.ДопИнформация) Тогда
				
				ОбластьДополнительнаяИнформация.Параметры.ДопИнформация = СокрЛП(РезультатШапкаДокументов.ДопИнформация);
				ТабличныйДокумент.Вывести(ОбластьДополнительнаяИнформация);
				
			КонецЕсли;
			
		КонецЦикла;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			РезультатШапкаДокументов.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ОбъединитьОбластьСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	Если КоличествоДопСтрок < 1 Тогда
		Возврат
	КонецЕсли;
	
	Область = ТабличныйДокумент.Область(ИмяОбласти);
	Область.Разъединить();
	Область.Имя = Неопределено;
	АдресОбласти = Область.Имя;
	МассивАдресОбласти = СтрРазделить(АдресОбласти, ":");
	Если МассивАдресОбласти.Количество() = 1 Тогда
		МассивАдресОбласти.Добавить(МассивАдресОбласти[0]);
	КонецЕсли;
	АдресОкончания = МассивАдресОбласти[1];
	МассивАдресОкончания = СтрРазделить(АдресОкончания, "C");
	НомерПоследнейСтрокиСтрока = Сред(МассивАдресОкончания[0],2);
	НовыйНомерПоследнейСтроки = Число(НомерПоследнейСтрокиСтрока) + КоличествоДопСтрок;
	НовыйАдрес = МассивАдресОбласти[0] + ":R" + НовыйНомерПоследнейСтроки + "C" + МассивАдресОкончания[1];
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	
	Область.Объединить();	
	
КонецПроцедуры

Процедура СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	НоваяСтрока = КоллекцияПечатныхФорм.Добавить();
	НоваяСтрока.ИмяМакета = "МаршрутныйЛист";
	НоваяСтрока.Экземпляров = 1;
	НоваяСтрока.ИмяВРЕГ = ВРЕГ(НоваяСтрока.ИмяМакета);
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"МаршрутныйЛист",
				НСтр("ru='Маршрутный лист';uk='Маршрутний лист'"),
				СформироватьПечатнуюФормуМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),
				,
				,
				,
				Истина
	);

				
	МассивНакладных = ПолучитьНакладныеПоЗаданиюНаПеревозку(МассивОбъектов);			
					
	Для Каждого Соответствие Из ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНакладных, "Проведен") Цикл
		Если НЕ Соответствие.Значение.Проведен Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ %1 не проведен. Печать комплекта по этому документу не будет выполнена.';uk='Документ %1 не проведено. Друк комплекту за цим документом не буде виконаний.'"),
				Соответствие.Ключ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Соответствие.Ключ);
			МассивНакладных.Удалить(МассивНакладных.Найти(Соответствие.Ключ));
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивНакладных);
	
	Для Каждого ТекТипОбъекта Из СоответствиеТипов Цикл
		
		МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекТипОбъекта.Ключ);
		МенеджерПечати.СформироватьКомплектПечатныхФорм(
			ТекТипОбъекта.Значение,
			ПараметрыПечати,
			КоллекцияПечатныхФорм,
 			ОбъектыПечати,
			ПараметрыВывода
		);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивРаспоряжений(МассивОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗаданиеНаПеревозку.Ссылка,
	|	ЗаданиеНаПеревозку.Дата,
	|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланС
	|ПОМЕСТИТЬ ВТЗадания
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуМаршрут.НомерСтроки,
	|	ЗаданиеНаПеревозкуМаршрут.КлючСвязи
	|ПОМЕСТИТЬ ВТПунктыМаршрута
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗадания КАК ВТЗадания
	|		ПО (ВТЗадания.Ссылка = ЗаданиеНаПеревозкуМаршрут.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗадания КАК ВТЗадания
	|		ПО (ВТЗадания.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПунктыМаршрута КАК ВТПунктыМаршрута
	|		ПО (ВТПунктыМаршрута.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ВТЗадания.ДатаВремяРейсаПланС = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТЗадания.Дата
	|		ИНАЧЕ ВТЗадания.ДатаВремяРейсаПланС
	|	КОНЕЦ,
	|	ВТПунктыМаршрута.НомерСтроки,
	|	ЗаданиеНаПеревозкуРаспоряжения.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПустыеЗадания.Ссылка КАК Ссылка
	|ИЗ
	|	ВТЗадания КАК ПустыеЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ПО ПустыеЗадания.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Ссылка
	|ГДЕ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка ЕСТЬ NULL");
	Запрос.УстановитьПараметр("МассивОбъектов",МассивОбъектов);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Распоряжения", РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Распоряжение"));
	СтруктураВозврата.Вставить("ПустыеЗадания", РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьНакладныеПоЗаданиюНаПеревозку(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку() +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НакладныеПоЗаданиямНаПеревозку.Накладная
	|ИЗ
	|	НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку";
	Запрос.УстановитьПараметр("ЗаданияНаПеревозку", 		МассивОбъектов);
	Запрос.УстановитьПараметр("НетВыделенныхСтрокАдресов", 	Истина);
	Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов",	Новый Массив);
	Запрос.УстановитьПараметр("ВсеРаспоряжения", 			Истина);	
	Запрос.УстановитьПараметр("Распоряжения", 				Новый Массив);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат.ВыгрузитьКолонку("Накладная");
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаданиеНаПеревозку";
КонецФункции

Процедура ЗаполнитьРаспоряженияСкладТоварыКДоставкеЗарегистрироватьКОбработке(Параметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозку.Ссылка
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Распоряжения.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результат);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
Процедура ЗаполнитьРаспоряженияСкладТоварыКДоставке(Параметры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();

	РезультатПолученияВременнойТаблицы = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, Метаданные.Документы.ЗаданиеНаПеревозку.ПолноеИмя(), МенеджерВременныхТаблиц);
	Если Не РезультатПолученияВременнойТаблицы.ЕстьЗаписиВоВременнойТаблице  Тогда
		Параметры.ОбработкаЗавершена = Не РезультатПолученияВременнойТаблицы.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуДоступныхДляЧтенияДанных(Параметры.Очередь, Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя(), МенеджерВременныхТаблиц);
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуДоступныхДляЧтенияДанных(Параметры.Очередь, Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя(), МенеджерВременныхТаблиц);
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь, Метаданные.РегистрыНакопления.ТоварыКОтгрузке.ПолноеИмя(), МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК ЗаданиеНаПеревозку,
	|	ДокументРаспоряжение.Ссылка КАК Распоряжение,
	|	МАКСИМУМ(ДокументРаспоряжение.Ссылка ЕСТЬ NULL ) КАК ЕстьЗаблокированныеРаспоряжения,
	|	ВЫБОР
	|		КОГДА Накладная.РеализацияПоЗаказам
	|			ТОГДА НакладнаяТовары.ЗаказКлиента
	|		ИНАЧЕ Накладная.Ссылка
	|	КОНЕЦ КАК ДокументОтгрузки
	|ПОМЕСТИТЬ ЗаданиеНаПеревозкуИЗависимыеДанные
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиЗаданиеНаПеревозку КАК ВтЗаданияНаПеревозку
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ВтЗаданияНаПеревозку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоступныДляЧтенияРеализацияТоваровУслуг КАК ДокументРаспоряжение
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Распоряжение = ДокументРаспоряжение.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Накладная
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК НакладнаяТовары
	|			ПО (НакладнаяТовары.Ссылка = Накладная.Ссылка)
	|		ПО (Накладная.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка,
	|	ДокументРаспоряжение.Ссылка,
	|	ВЫБОР
	|		КОГДА Накладная.РеализацияПоЗаказам
	|			ТОГДА НакладнаяТовары.ЗаказКлиента
	|		ИНАЧЕ Накладная.Ссылка
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка,
	|	ДокументРаспоряжение.Ссылка,
	|	МАКСИМУМ(ДокументРаспоряжение.Ссылка ЕСТЬ NULL ),
	|	ВЫБОР
	|		КОГДА Накладная.ПеремещениеПоЗаказам
	|			ТОГДА НакладнаяТовары.ЗаказНаПеремещение
	|		ИНАЧЕ Накладная.Ссылка
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиЗаданиеНаПеревозку КАК ВтЗаданияНаПеревозку
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ВтЗаданияНаПеревозку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоступныДляЧтенияПеремещениеТоваров КАК ДокументРаспоряжение
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Распоряжение = ДокументРаспоряжение.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК Накладная
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК НакладнаяТовары
	|			ПО (НакладнаяТовары.Ссылка = Накладная.Ссылка)
	|		ПО (Накладная.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка,
	|	ДокументРаспоряжение.Ссылка,
	|	ВЫБОР
	|		КОГДА Накладная.ПеремещениеПоЗаказам
	|			ТОГДА НакладнаяТовары.ЗаказНаПеремещение
	|		ИНАЧЕ Накладная.Ссылка
	|	КОНЕЦ
	|;
	|
	|//1//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТЗаблокированоТоварыКОтгрузке.Регистратор ЕСТЬ NULL ) = ЛОЖЬ
	|		ИЛИ МАКСИМУМ(ЗаданиеНаПеревозкуИЗависимыеДанные.ЕстьЗаблокированныеРаспоряжения) = ИСТИНА КАК ЗаблокированыЧитаемыеДанные,
	|	ЗаданиеНаПеревозкуИЗависимыеДанные.ЗаданиеНаПеревозку
	|ПОМЕСТИТЬ ЗаданияНаПеревозкуБлокировки
	|ИЗ
	|	ЗаданиеНаПеревозкуИЗависимыеДанные КАК ЗаданиеНаПеревозкуИЗависимыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоТоварыКОтгрузке КАК ВТЗаблокированоТоварыКОтгрузке
	|			ПО ТоварыКОтгрузке.Регистратор = ВТЗаблокированоТоварыКОтгрузке.Регистратор
	|		ПО ЗаданиеНаПеревозкуИЗависимыеДанные.ДокументОтгрузки = ТоварыКОтгрузке.ДокументОтгрузки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозкуИЗависимыеДанные.ЗаданиеНаПеревозку
	|	
	|;
	|
	|//2//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданиеНаПеревозкуИЗависимыеДанные.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ЗаданиеНаПеревозкуИЗависимыеДанные.Распоряжение КАК Распоряжение,
	|	ЗаданияНаПеревозкуБлокировки.ЗаблокированыЧитаемыеДанные
	|ИЗ
	|	ЗаданиеНаПеревозкуИЗависимыеДанные КАК ЗаданиеНаПеревозкуИЗависимыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаданияНаПеревозкуБлокировки КАК ЗаданияНаПеревозкуБлокировки
	|		ПО ЗаданиеНаПеревозкуИЗависимыеДанные.ЗаданиеНаПеревозку = ЗаданияНаПеревозкуБлокировки.ЗаданиеНаПеревозку
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПеревозку,
	|	Распоряжение
	|;
	|
	|//3//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданиеНаПеревозкуИЗависимыеДанные.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ЗаданиеНаПеревозкуИЗависимыеДанные.ДокументОтгрузки КАК ДокументОтгрузки
	|ИЗ
	|	ЗаданиеНаПеревозкуИЗависимыеДанные КАК ЗаданиеНаПеревозкуИЗависимыеДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПеревозку,
	|	ДокументОтгрузки";
	
	РезультатВыполенияЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатВыполенияЗапроса[2].Выбрать();
	ВыборкаПоДокументамОтгрузки = РезультатВыполенияЗапроса[3].Выбрать();
		
	Пока Выборка.СледующийПоЗначениюПоля("ЗаданиеНаПеревозку") Цикл
		ВыборкаПоДокументамОтгрузки.СледующийПоЗначениюПоля("ЗаданиеНаПеревозку"); // Выборки синхронизированы по полю "Задание на перевозку"
		
		Если Выборка.ЗаблокированыЧитаемыеДанные Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Выборка.ЗаданиеНаПеревозку.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ЗаданиеНаПеревозку);
			
			Пока Выборка.Следующий() Цикл
				Если ТипЗнч(Выборка.Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияТоваровУслуг");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Распоряжение);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ИначеЕсли ТипЗнч(Выборка.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					ЭлементБлокировки = Блокировка.Добавить("Документ.ПеремещениеТоваров");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Распоряжение);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				КонецЕсли;
			КонецЦикла;
			
			Пока ВыборкаПоДокументамОтгрузки.Следующий() Цикл
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
				ЭлементБлокировки.УстановитьЗначение("ДокументОтгрузки", ВыборкаПоДокументамОтгрузки.ДокументОтгрузки);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			КонецЦикла;
			
			Блокировка.Заблокировать();
			
			ЗаданиеНаПеревозкуОбъект = Выборка.ЗаданиеНаПеревозку.ПолучитьОбъект();
			
			Если ЗаданиеНаПеревозкуОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.ЗаданиеНаПеревозку);
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПеревозкаРаспоряжения.Ссылка КАК ЗаданиеНаПеревозку,
			|	ПеревозкаРаспоряжения.Распоряжение КАК РаспоряжениеНаДоставку,
			|	ПеревозкаРаспоряжения.КлючСвязи КАК КлючСвязи,
			|	СУММА(&ТекстЗапросаВес * НакладнаяТовары.Количество) КАК Вес,
			|	СУММА(&ТекстЗапросаОбъем * НакладнаяТовары.Количество) КАК Объем,
			|	ВЫБОР
			|		КОГДА Накладная.РеализацияПоЗаказам
			|			И НЕ НакладнаяТовары.ЗаказКлиента В (&ПустыеЗначенияРаспоряжений)
			|			ТОГДА НакладнаяТовары.ЗаказКлиента
			|		ИНАЧЕ Накладная.Ссылка
			|	КОНЕЦ КАК ДокументОтгрузки,
			|	НакладнаяТовары.Склад КАК Склад,
			|	Накладная.Партнер КАК Получатель,
			|	Накладная.РеализацияПоЗаказам КАК РаспоряжениеПоЗаказу,
			|	Накладная.ПеревозчикПартнер КАК Перевозчик,
			|	Накладная.ВремяДоставкиС КАК ВремяС,
			|	Накладная.ВремяДоставкиПо КАК ВремяПо,
			|	ВЫРАЗИТЬ(Накладная.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000)) КАК ДополнительнаяИнформация,
			|	МИНИМУМ(ПеревозкаРаспоряжения.Доставлено) КАК Доставлено
			|ПОМЕСТИТЬ ЗаданияДокументыОтгрузкиРаспоряжения
			|ИЗ
			|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ПеревозкаРаспоряжения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Накладная
			|		ПО (Накладная.Ссылка = ПеревозкаРаспоряжения.Распоряжение)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК НакладнаяТовары
			|		ПО (НакладнаяТовары.Ссылка = Накладная.Ссылка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО (СправочникНоменклатура.Ссылка = НакладнаяТовары.Номенклатура)
			|			И СправочникНоменклатура.ТипНоменклатуры В (
			|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
			|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|ГДЕ
			|	ПеревозкаРаспоряжения.Ссылка = &ЗаданиеНаПеревозку
			|
			|СГРУППИРОВАТЬ ПО
			|	НакладнаяТовары.Склад,
			|	ВЫБОР
			|		КОГДА Накладная.РеализацияПоЗаказам
			|			И НЕ НакладнаяТовары.ЗаказКлиента В (&ПустыеЗначенияРаспоряжений)
			|			ТОГДА НакладнаяТовары.ЗаказКлиента
			|		ИНАЧЕ Накладная.Ссылка
			|	КОНЕЦ,
			|	ПеревозкаРаспоряжения.Распоряжение,
			|	ПеревозкаРаспоряжения.Ссылка,
			|	Накладная.РеализацияПоЗаказам,
			|	ПеревозкаРаспоряжения.КлючСвязи,
			|	Накладная.Партнер,
			|	Накладная.ПеревозчикПартнер,
			|	Накладная.ВремяДоставкиС,
			|	Накладная.ВремяДоставкиПо,
			|	ВЫРАЗИТЬ(Накладная.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПеревозкаРаспоряжения.Ссылка,
			|	ПеревозкаРаспоряжения.Распоряжение,
			|	ПеревозкаРаспоряжения.КлючСвязи,
			|	СУММА(&ТекстЗапросаВес * НакладнаяТовары.Количество),
			|	СУММА(&ТекстЗапросаОбъем * НакладнаяТовары.Количество),
			|	ВЫБОР
			|		КОГДА Накладная.ПеремещениеПоЗаказам
			|			И НЕ НакладнаяТовары.ЗаказНаПеремещение В (&ПустыеЗначенияРаспоряжений)
			|			ТОГДА НакладнаяТовары.ЗаказНаПеремещение
			|		ИНАЧЕ Накладная.Ссылка
			|	КОНЕЦ,
			|	Накладная.СкладОтправитель,
			|	Накладная.СкладПолучатель,
			|	Накладная.ПеремещениеПоЗаказам,
			|	Накладная.ПеревозчикПартнер,
			|	Накладная.ВремяДоставкиС,
			|	Накладная.ВремяДоставкиПо,
			|	ВЫРАЗИТЬ(Накладная.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000)),
			|	МИНИМУМ(ПеревозкаРаспоряжения.Доставлено)
			|ИЗ
			|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ПеревозкаРаспоряжения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК Накладная
			|		ПО (Накладная.Ссылка = ПеревозкаРаспоряжения.Распоряжение)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК НакладнаяТовары
			|		ПО (НакладнаяТовары.Ссылка = Накладная.Ссылка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО (СправочникНоменклатура.Ссылка = НакладнаяТовары.Номенклатура)
			|ГДЕ
			|	ПеревозкаРаспоряжения.Ссылка = &ЗаданиеНаПеревозку
			|
			|СГРУППИРОВАТЬ ПО
			|	Накладная.ПеремещениеПоЗаказам,
			|	Накладная.СкладОтправитель,
			|	ПеревозкаРаспоряжения.Ссылка,
			|	ПеревозкаРаспоряжения.Распоряжение,
			|	ВЫБОР
			|		КОГДА Накладная.ПеремещениеПоЗаказам
			|			И НЕ НакладнаяТовары.ЗаказНаПеремещение В (&ПустыеЗначенияРаспоряжений)
			|			ТОГДА НакладнаяТовары.ЗаказНаПеремещение
			|		ИНАЧЕ Накладная.Ссылка
			|	КОНЕЦ,
			|	ПеревозкаРаспоряжения.КлючСвязи,
			|	Накладная.СкладПолучатель,
			|	Накладная.ПеревозчикПартнер,
			|	Накладная.ВремяДоставкиС,
			|	Накладная.ВремяДоставкиПо,
			|	ВЫРАЗИТЬ(Накладная.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000))
			|
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументОтгрузки,
			|	Склад
			|;
			|
			|//1//////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ДокументОтгрузки
			|ПОМЕСТИТЬ ДокументыОтгрузкиПоЗаказам
			|ИЗ
			|	ЗаданияДокументыОтгрузкиРаспоряжения КАК ЗаданияДокументыОтгрузкиРаспоряжения
			|ГДЕ
			|	ЗаданияДокументыОтгрузкиРаспоряжения.РаспоряжениеПоЗаказу
			|;
			|
			|//2//////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаданияДокументыОтгрузкиРаспоряжения.РаспоряжениеНаДоставку,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ЗаданиеНаПеревозку,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Склад
			|ПОМЕСТИТЬ ЗаданияИСтарыеРаспоряженияПоЗаказам
			|ИЗ
			|	ЗаданияДокументыОтгрузкиРаспоряжения КАК ЗаданияДокументыОтгрузкиРаспоряжения
			|ГДЕ
			|	ЗаданияДокументыОтгрузкиРаспоряжения.РаспоряжениеПоЗаказу
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗаданияДокументыОтгрузкиРаспоряжения.РаспоряжениеНаДоставку,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Склад
			|;
			|
			|//3//////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаданияИСтарыеРаспоряженияПоЗаказам.РаспоряжениеНаДоставку
			|ПОМЕСТИТЬ СтарыеРаспоряженияПоЗаказам
			|ИЗ
			|	ЗаданияИСтарыеРаспоряженияПоЗаказам КАК ЗаданияИСтарыеРаспоряженияПоЗаказам
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗаданияИСтарыеРаспоряженияПоЗаказам.РаспоряжениеНаДоставку
			|;
			|
			|//4//////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.ДокументОтгрузки КАК Распоряжение,
			|	Т.Номенклатура КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|	Т.Назначение КАК Назначение,
			|	Т.Склад КАК Склад,
			|	Т.Серия КАК Серия,
			|	Т.Получатель КАК Получатель,
			|	СУММА(Т.КОформлению) КАК ОстатокКДоставкеПоЗаказу,
			|	СУММА(Т.КОформлениюРасход) КАК КДоставкеПоНакладным
			|ПОМЕСТИТЬ ОстаткиТоваровКДоставке
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
			|		ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
			|		ТоварыКОтгрузке.Характеристика КАК Характеристика,
			|		ТоварыКОтгрузке.Назначение КАК Назначение,
			|		ТоварыКОтгрузке.Склад КАК Склад,
			|		ТоварыКОтгрузке.Серия КАК Серия,
			|		ТоварыКОтгрузке.Получатель КАК Получатель,
			|		ТоварыКОтгрузке.КОформлениюПриход КАК КОформлению,
			|		0 КАК КОформлениюРасход
			|	ИЗ
			|		РегистрНакопления.ТоварыКОтгрузке.Обороты(
			|				,
			|				,
			|				,
			|				ДокументОтгрузки В
			|					(ВЫБРАТЬ
			|						ДокументыОтгрузкиПоЗаказам.ДокументОтгрузки
			|					ИЗ
			|						ДокументыОтгрузкиПоЗаказам)) КАК ТоварыКОтгрузке
			|	ГДЕ
			|		ТоварыКОтгрузке.КОформлениюПриход > 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТоварыКОтгрузке.ДокументОтгрузки,
			|		ТоварыКОтгрузке.Номенклатура,
			|		ТоварыКОтгрузке.Характеристика,
			|		ТоварыКОтгрузке.Назначение,
			|		ТоварыКОтгрузке.Склад,
			|		ТоварыКОтгрузке.Серия,
			|		ТоварыКОтгрузке.Получатель,
			|		-ТоварыКОтгрузке.КОформлениюРасход,
			|		ТоварыКОтгрузке.КОформлениюРасход
			|	ИЗ
			|		РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ) КАК ТоварыКОтгрузке
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтарыеРаспоряженияПоЗаказам КАК СтарыеРаспоряженияПоЗаказам
			|			ПО (СтарыеРаспоряженияПоЗаказам.РаспоряжениеНаДоставку = ТоварыКОтгрузке.Регистратор)
			|	ГДЕ
			|		ТоварыКОтгрузке.КОформлениюРасход > 0) КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.ДокументОтгрузки,
			|	Т.Номенклатура,
			|	Т.Характеристика,
			|	Т.Назначение,
			|	Т.Склад,
			|	Т.Серия,
			|	Т.Получатель
			|
			|ИМЕЮЩИЕ
			|	СУММА(Т.КОформлениюРасход) > 0
			|;
			|
			|//5//////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЧастичноДоставляемые.Распоряжение КАК Распоряжение,
			|	ЧастичноДоставляемые.Склад КАК Склад,
			|	ЧастичноДоставляемые.Получатель КАК Получатель
			|ПОМЕСТИТЬ ЧастичноДоставляемые
			|ИЗ
			|	ОстаткиТоваровКДоставке КАК ЧастичноДоставляемые
			|ГДЕ
			|	ЧастичноДоставляемые.ОстатокКДоставкеПоЗаказу > 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Распоряжение,
			|	Склад
			|;
			|
			|//6//////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаданияИСтарыеРаспоряженияПоЗаказам.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
			|	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
			|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
			|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
			|	ТоварыКОтгрузке.Назначение КАК Назначение,
			|	ТоварыКОтгрузке.Склад КАК Склад,
			|	ТоварыКОтгрузке.Серия КАК Серия,
			|	ТоварыКОтгрузке.Получатель КАК Получатель,
			|	ТоварыКОтгрузке.Получатель КАК ПолучательОтправитель,
			|	СУММА(ТоварыКОтгрузке.КОформлению) КАК Количество,
			|	ЛОЖЬ КАК ВсеТовары
			|ИЗ
			|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЧастичноДоставляемые КАК ЧастичноДоставляемые
			|		ПО (ЧастичноДоставляемые.Распоряжение = ТоварыКОтгрузке.ДокументОтгрузки)
			|			И (ЧастичноДоставляемые.Склад = ТоварыКОтгрузке.Склад)
			|			И (ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
			|			И (ТоварыКОтгрузке.КОформлению > 0)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаданияИСтарыеРаспоряженияПоЗаказам КАК ЗаданияИСтарыеРаспоряженияПоЗаказам
			|		ПО ТоварыКОтгрузке.Регистратор = ЗаданияИСтарыеРаспоряженияПоЗаказам.РаспоряжениеНаДоставку
			|			И ТоварыКОтгрузке.Склад = ЗаданияИСтарыеРаспоряженияПоЗаказам.Склад
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаданияИСтарыеРаспоряженияПоЗаказам.ЗаданиеНаПеревозку,
			|	ТоварыКОтгрузке.ДокументОтгрузки,
			|	ТоварыКОтгрузке.Номенклатура,
			|	ТоварыКОтгрузке.Характеристика,
			|	ТоварыКОтгрузке.Назначение,
			|	ТоварыКОтгрузке.Склад,
			|	ТоварыКОтгрузке.Серия,
			|	ТоварыКОтгрузке.Получатель
			|
			|УПОРЯДОЧИТЬ ПО
			|	Распоряжение,
			|	Склад
			|;
			|
			|//7//////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
			|	МАКСИМУМ(ЗаданияДокументыОтгрузкиРаспоряжения.КлючСвязи) КАК КлючСвязи,
			|	СУММА(ЗаданияДокументыОтгрузкиРаспоряжения.Вес) КАК Вес,
			|	СУММА(ЗаданияДокументыОтгрузкиРаспоряжения.Объем) КАК Объем,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ДокументОтгрузки КАК Распоряжение,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Склад КАК Склад,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Получатель,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Получатель КАК ПолучательОтправитель,
			|	ВЫБОР
			|		КОГДА ЧастичноДоставляемые.Распоряжение ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ДоставляетсяПолностью,
			|	ИСТИНА КАК ВсеТовары,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Перевозчик,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ВремяС,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ВремяПо,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ДополнительнаяИнформация,
			|	МИНИМУМ(ЗаданияДокументыОтгрузкиРаспоряжения.Доставлено) КАК Доставлено
			|ИЗ
			|	ЗаданияДокументыОтгрузкиРаспоряжения КАК ЗаданияДокументыОтгрузкиРаспоряжения
			|		ЛЕВОЕ СОЕДИНЕНИЕ ЧастичноДоставляемые КАК ЧастичноДоставляемые
			|		ПО (ЧастичноДоставляемые.Распоряжение = ЗаданияДокументыОтгрузкиРаспоряжения.ДокументОтгрузки)
			|			И (ЧастичноДоставляемые.Склад = ЗаданияДокументыОтгрузкиРаспоряжения.Склад)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ЗаданиеНаПеревозку,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ДокументОтгрузки,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Склад,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Получатель,
			|	ЧастичноДоставляемые.Распоряжение,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.Перевозчик,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ВремяС,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ВремяПо,
			|	ЗаданияДокументыОтгрузкиРаспоряжения.ДополнительнаяИнформация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Распоряжение,
			|	Склад";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВес", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъем", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", Выборка.ЗаданиеНаПеревозку);
			ПустыеЗначенияРаспоряжений = Новый Массив;
			ПустыеЗначенияРаспоряжений.Добавить(Неопределено);
			ПустыеЗначенияРаспоряжений.Добавить(Документы.ЗаказКлиента.ПустаяСсылка());
			ПустыеЗначенияРаспоряжений.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка());
			ПустыеЗначенияРаспоряжений.Добавить(Документы.ЗаказНаПеремещение.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустыеЗначенияРаспоряжений", ПустыеЗначенияРаспоряжений);
			
			ТЧРаспоряжения = ЗаданиеНаПеревозкуОбъект.Распоряжения;
			
			НаборЗаписей = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаданиеНаПеревозку.Установить(Выборка.ЗаданиеНаПеревозку);
			
			СтруктураПоиска = Новый Структура("Склад", Справочники.Склады.ПустаяСсылка());
			НайденныеСтроки = ТЧРаспоряжения.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.ЗаданиеНаПеревозку);
				Продолжить;
			КонецЕсли;
			
			Для Каждого Стр Из НайденныеСтроки Цикл
				ТЧРаспоряжения.Удалить(Стр);
			КонецЦикла;
			
			Результат = Запрос.ВыполнитьПакет();
			
			ВыборкаТовары         = Результат[6].Выбрать();
			ВыборкаТЧРаспоряжения = Результат[7].Выбрать();
			
			Пока ВыборкаТЧРаспоряжения.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТЧРаспоряжения.Добавить(), ВыборкаТЧРаспоряжения);
				Если ЗаданиеНаПеревозкуОбъект.Статус <> Перечисления.СтатусыЗаданийНаПеревозку.Закрыто
					И ВыборкаТЧРаспоряжения.ДоставляетсяПолностью Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаТЧРаспоряжения);
				КонецЕсли;
			КонецЦикла;
				
			Пока ВыборкаТовары.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаТовары);
			КонецЦикла;
			
			ЗаданиеНаПеревозкуОбъект.Операция = Перечисления.ВидыДоставки.СоСклада;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаданиеНаПеревозкуОбъект);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.ЗаданиеНаПеревозку);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы[Выборка.ЗаданиеНаПеревозку.Метаданные().Имя],
			Выборка.ЗаданиеНаПеревозку,
			ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, Метаданные.Документы.ЗаданиеНаПеревозку.ПолноеИмя());
	
КонецПроцедуры

Функция ЗаполнитьРаспоряженияСкладТоварыКДоставке_ПроверитьДанныеОбновлены(МетаданныеИОтбор) Экспорт
	
	Если МетаданныеИОтбор.Метаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта()) Тогда
		Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК Т
	|ГДЕ
	|	Т.Распоряжение = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",МетаданныеИОтбор.Отбор);
	
	Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, ПолноеИмяОбъекта(), Ссылки);
	
КонецФункции

Процедура ОткатитьСтатусОтправленныхЗаданийСНеотгруженнымиОрдерамиЗарегистрироватьКОбработке(Параметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспоряженияПеревозок.Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ) КАК ТоварыКОтгрузкеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияПеревозок
	|		ПО (РаспоряженияПеревозок.Распоряжение = ТоварыКОтгрузкеОстатки.ДокументОтгрузки)
	|			И (РаспоряженияПеревозок.Ссылка.Проведен)
	|			И (РаспоряженияПеревозок.Ссылка.Статус В (&СтатусПеревозкиОтправленЗакрыт))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	СтатусПеревозкиОтправленЗакрыт = Новый Массив;
	СтатусПеревозкиОтправленЗакрыт.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Отправлено);
	СтатусПеревозкиОтправленЗакрыт.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Закрыто);
	Запрос.УстановитьПараметр("СтатусПеревозкиОтправленЗакрыт", СтатусПеревозкиОтправленЗакрыт);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результат);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
Процедура ОткатитьСтатусОтправленныхЗаданийСНеотгруженнымиОрдерами(Параметры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();

	РезультатПолученияВременнойТаблицы = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь,
		Метаданные.Документы.ЗаданиеНаПеревозку.ПолноеИмя(),
		МенеджерВременныхТаблиц
    );
    
	Если Не РезультатПолученияВременнойТаблицы.ЕстьЗаписиВоВременнойТаблице  Тогда
		Параметры.ОбработкаЗавершена = Не РезультатПолученияВременнойТаблицы.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуДоступныхДляЧтенияДанных(
        Параметры.Очередь,
		Метаданные.Документы.РасходныйОрдерНаТовары.ПолноеИмя(),
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры
    );
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТДляОбработкиЗаданиеНаПеревозку.Ссылка
	|ПОМЕСТИТЬ ВтЗаданияНаПеревозку
	|ИЗ
	|	ВТДляОбработкиЗаданиеНаПеревозку КАК ВТДляОбработкиЗаданиеНаПеревозку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перевозка.Ссылка,
	|	Перевозка.ВерсияДанных,
	|	РасходныйОрдерНаТовары.Ссылка ЕСТЬ NULL  КАК ОтметитьКакОтработана,
	|	РасходныйОрдерНаТовары.Ссылка КАК РасходныйОрдер
	|ПОМЕСТИТЬ ЗаданияНаПеревозкуИРасходныеОрдера
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК Перевозка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ПО (РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = Перевозка.Ссылка)
	|			И (РасходныйОрдерНаТовары.Проведен)
	|			И (НЕ РасходныйОрдерНаТовары.Статус В (&СтатусОрдераКОтгрузкеОтгружен))
	|			И (Перевозка.Проведен)
	|			И (Перевозка.Статус В (&СтатусПеревозкиОтправленЗакрыт))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаданияНаПеревозку КАК ВтЗаданияНаПеревозку
	|		ПО Перевозка.Ссылка = ВтЗаданияНаПеревозку.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияНаПеревозкуИРасходныеОрдера.Ссылка,
	|	МАКСИМУМ(ВТДоступныДляЧтенияРасходныйОрдерНаТовары.Ссылка ЕСТЬ NULL ) КАК ЕстьЗаблокированные
	|ПОМЕСТИТЬ ЗаданияНаПеревозкуЗаблокированы
	|ИЗ
	|	ЗаданияНаПеревозкуИРасходныеОрдера КАК ЗаданияНаПеревозкуИРасходныеОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоступныДляЧтенияРасходныйОрдерНаТовары КАК ВТДоступныДляЧтенияРасходныйОрдерНаТовары
	|		ПО ЗаданияНаПеревозкуИРасходныеОрдера.РасходныйОрдер = ВТДоступныДляЧтенияРасходныйОрдерНаТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданияНаПеревозкуИРасходныеОрдера.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияНаПеревозкуИРасходныеОрдера.Ссылка,
	|	ЗаданияНаПеревозкуИРасходныеОрдера.ВерсияДанных,
	|	МИНИМУМ(ЗаданияНаПеревозкуИРасходныеОрдера.ОтметитьКакОтработана) КАК ОтметитьКакОтработана
	|ИЗ
	|	ЗаданияНаПеревозкуИРасходныеОрдера КАК ЗаданияНаПеревозкуИРасходныеОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаданияНаПеревозкуЗаблокированы КАК ЗаданияНаПеревозкуЗаблокированы
	|		ПО ЗаданияНаПеревозкуИРасходныеОрдера.Ссылка = ЗаданияНаПеревозкуЗаблокированы.Ссылка
	|ГДЕ
	|	НЕ ЗаданияНаПеревозкуЗаблокированы.ЕстьЗаблокированные
	|	ИЛИ ЗаданияНаПеревозкуИРасходныеОрдера.ОтметитьКакОтработана
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданияНаПеревозкуИРасходныеОрдера.Ссылка,
	|	ЗаданияНаПеревозкуИРасходныеОрдера.ВерсияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияНаПеревозкуИРасходныеОрдера.Ссылка КАК Ссылка,
	|	ЗаданияНаПеревозкуИРасходныеОрдера.РасходныйОрдер КАК РасходныйОрдер
	|ИЗ
	|	ЗаданияНаПеревозкуИРасходныеОрдера КАК ЗаданияНаПеревозкуИРасходныеОрдера
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	РасходныйОрдер";
	
	СтатусОрдераКОтгрузкеОтгружен = Новый Массив;
	СтатусОрдераКОтгрузкеОтгружен.Добавить(Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
	СтатусОрдераКОтгрузкеОтгружен.Добавить(Перечисления.СтатусыРасходныхОрдеров.Отгружен);
	Запрос.УстановитьПараметр("СтатусОрдераКОтгрузкеОтгружен",СтатусОрдераКОтгрузкеОтгружен);
	
	СтатусПеревозкиОтправленЗакрыт = Новый Массив;
	СтатусПеревозкиОтправленЗакрыт.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Отправлено);
	СтатусПеревозкиОтправленЗакрыт.Добавить(Перечисления.СтатусыЗаданийНаПеревозку.Закрыто);
	Запрос.УстановитьПараметр("СтатусПеревозкиОтправленЗакрыт", СтатусПеревозкиОтправленЗакрыт);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[3].Выбрать();
	ВыборкаПоРасходнымОрдерам = РезультатЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка	
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			СтуктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			
			Пока ВыборкаПоРасходнымОрдерам.НайтиСледующий(СтуктураПоиска) Цикл
				Если ЗначениеЗаполнено(ВыборкаПоРасходнымОрдерам.РасходныйОрдер) Тогда
					
					ЭлементБлокировки = Блокировка.Добавить("Документ.РасходныйОрдерНаТовары");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоРасходнымОрдерам.РасходныйОрдер);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				КонецЕсли;
			КонецЦикла;
			
			Блокировка.Заблокировать();
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка,"ВерсияДанных") <> Выборка.ВерсияДанных Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокОбъект = Неопределено 
				Или Выборка.ОтметитьКакОтработана Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			ДокОбъект.Статус = Перечисления.СтатусыЗаданийНаПеревозку.КПогрузке;
			ДокОбъект.Операция = Перечисления.ВидыДоставки.СоСклада;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити документ: %Ссылка% з причини: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы[Выборка.Ссылка.Метаданные().Имя],
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, Метаданные.Документы.ЗаданиеНаПеревозку.ПолноеИмя());
	
КонецПроцедуры

Процедура ЗаполнитьОперациюКОтработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданиеНаПеревозку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДоставки.ПустаяСсылка)
	|";
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьОперациюОтложенно(Параметры) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Документ.ЗаданиеНаПеревозку");
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаданиеНаПеревозку");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено 
				Или ДокументОбъект.Операция = Перечисления.ВидыДоставки.СоСклада Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			ДокументОбъект.Операция = Перечисления.ВидыДоставки.СоСклада;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити документ: %Ссылка% з причини: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ЗаданиеНаПеревозку, Выборка.Ссылка, ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Документ.ЗаданиеНаПеревозку");
	
КонецПроцедуры

Процедура ЗаполнитьЗаданиеВыполняетКОтработке(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьПустойРеквизитЗначениемПоУмолчаниюЗарегистрироватьДанныеКОбработке(
        Параметры,
		"Документ.ЗаданиеНаПеревозку",
		"ЗаданиеВыполняет"
    );
	
КонецПроцедуры  

Процедура ЗаполнитьЗаданиеВыполняет(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьПустойРеквизитЗначениемПоУмолчанию(
        Параметры,
		"Документ.ЗаданиеНаПеревозку",
		"ЗаданиеВыполняет",
		Перечисления.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба
    ); 
	
КонецПроцедуры



#КонецОбласти

#Область Прочее
			
Процедура СформироватьОчередьПереоформленияРасходныхОрдеров(ЗаданиеНаПеревозку, Отказ) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаКонтроляРегистровТоварыКОтгрузкеИТоварыДоставке() +
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
	|	ТоварыКОтгрузкеОстатки.Склад,
	|	ТоварыКОтгрузкеОстатки.Получатель,
	|	ТоварыКОтгрузкеОстатки.Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика,
	|	ТоварыКОтгрузкеОстатки.Назначение,
	|	ТоварыКОтгрузкеОстатки.Серия,
	|	СУММА(ТоварыКОтгрузкеОстатки.КОтгрузкеПриход) КАК КОтгрузкеПриход,
	|	СУММА(ТоварыКОтгрузкеОстатки.КОтгрузкеРасход) КАК КОтгрузкеРасход,
	|	СУММА(ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток) КАК СобираетсяСобраноОстаток,
	|	СУММА(ТоварыКОтгрузкеОстатки.КСборкеОстаток) КАК КСборкеОстаток
	|ПОМЕСТИТЬ ТоварыКОтгрузкеОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОтгрузкеИДоставке.ДокументОтгрузки КАК ДокументОтгрузки,
	|		ТоварыКОтгрузкеИДоставке.Склад КАК Склад,
	|		ТоварыКОтгрузкеИДоставке.Получатель КАК Получатель,
	|		ТоварыКОтгрузкеИДоставке.Номенклатура КАК Номенклатура,
	|		ТоварыКОтгрузкеИДоставке.Характеристика КАК Характеристика,
	|		ТоварыКОтгрузкеИДоставке.Назначение КАК Назначение,
	|		ТоварыКОтгрузкеИДоставке.Серия КАК Серия,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузкеИДоставке.Количество < ТоварыКОтгрузкеИДоставке.КоличествоКотгрузке
	|				ТОГДА ТоварыКОтгрузкеИДоставке.Количество
	|			ИНАЧЕ ТоварыКОтгрузкеИДоставке.КоличествоКотгрузке
	|		КОНЕЦ КАК КОтгрузкеПриход,
	|		0 КАК КОтгрузкеРасход,
	|		0 КАК СобираетсяСобраноОстаток,
	|		0 КАК КСборкеОстаток
	|	ИЗ
	|		ТоварыКОтгрузкеИДоставке КАК ТоварыКОтгрузкеИДоставке
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКотгрузкеРасход.ДокументОтгрузки,
	|		ТоварыКотгрузкеРасход.Склад,
	|		ТоварыКотгрузкеРасход.Получатель,
	|		ТоварыКотгрузкеРасход.Номенклатура,
	|		ТоварыКотгрузкеРасход.Характеристика,
	|		ТоварыКотгрузкеРасход.Назначение,
	|		ТоварыКотгрузкеРасход.Серия,
	|		0,
	|		ТоварыКотгрузкеРасход.Количество,
	|		0,
	|		0
	|	ИЗ
	|		ТоварыКотгрузкеРасход КАК ТоварыКотгрузкеРасход
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыСобраноСобирается.ДокументОтгрузки,
	|		ТоварыСобраноСобирается.Склад,
	|		ТоварыСобраноСобирается.Получатель,
	|		ТоварыСобраноСобирается.Номенклатура,
	|		ТоварыСобраноСобирается.Характеристика,
	|		ТоварыСобраноСобирается.Назначение,
	|		ТоварыСобраноСобирается.Серия,
	|		0,
	|		0,
	|		ТоварыСобраноСобирается.Количество,
	|		0
	|	ИЗ
	|		ТоварыСобраноСобирается КАК ТоварыСобраноСобирается
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКСборке.ДокументОтгрузки,
	|		ТоварыКСборке.Склад,
	|		ТоварыКСборке.Получатель,
	|		ТоварыКСборке.Номенклатура,
	|		ТоварыКСборке.Характеристика,
	|		ТоварыКСборке.Назначение,
	|		ТоварыКСборке.Серия,
	|		0,
	|		0,
	|		0,
	|		ТоварыКСборке.Количество
	|	ИЗ
	|		ТоварыКСборке КАК ТоварыКСборке) КАК ТоварыКОтгрузкеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
	|	ТоварыКОтгрузкеОстатки.Склад,
	|	ТоварыКОтгрузкеОстатки.Получатель,
	|	ТоварыКОтгрузкеОстатки.Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика,
	|	ТоварыКОтгрузкеОстатки.Назначение,
	|	ТоварыКОтгрузкеОстатки.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКОтгрузкеОстатки.Склад,
	|	ТоварыКОтгрузкеОстатки.Получатель
	|ИЗ
	|	ТоварыКОтгрузкеОстатки КАК ТоварыКОтгрузкеОстатки
	|ГДЕ
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеПриход - ТоварыКОтгрузкеОстатки.КОтгрузкеРасход - ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток > ТоварыКОтгрузкеОстатки.КСборкеОстаток
	|			ИЛИ ТоварыКОтгрузкеОстатки.КСборкеОстаток > 0 И
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеПриход - ТоварыКОтгрузкеОстатки.КОтгрузкеРасход - ТоварыКОтгрузкеОстатки.СобираетсяСобраноОстаток < ТоварыКОтгрузкеОстатки.КСборкеОстаток";
	
	ОформлятьСначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить() = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;
	Запрос.УстановитьПараметр("ОформлятьСначалаНакладные", ОформлятьСначалаНакладные);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку); 
	Выборка = Запрос.Выполнить().Выбрать();
		                    
	Пока Выборка.Следующий() Цикл
			
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПереоформленияРасходныхОрдеров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Склад",Выборка.Склад);
		ЭлементБлокировки.УстановитьЗначение("Получатель",Выборка.Получатель);
		Блокировка.Заблокировать();
		
		НаборЗаписейОчереди = РегистрыСведений.ОчередьПереоформленияРасходныхОрдеров.СоздатьНаборЗаписей();
		
		НаборЗаписейОчереди.Отбор.Склад.Установить(Выборка.Склад);
		НаборЗаписейОчереди.Отбор.Получатель.Установить(Выборка.Получатель);
		
		НаборЗаписейОчереди.Прочитать();
		
		Если НаборЗаписейОчереди.Количество() = 0 Тогда
			
			ЗаписьОчереди = НаборЗаписейОчереди.Добавить();
			
			ЗаписьОчереди.Склад = Выборка.Склад;
			ЗаписьОчереди.Получатель = Выборка.Получатель;
			
			Попытка
				НаборЗаписейОчереди.Записать();
			Исключение
				
				ТекстСообщения = НСтр("ru='Не удалось выполнить проведение документа: %Ссылка% по причине: %Причина%';uk='Не вдалося виконати проведення документа: %Ссылка% по причині: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ЗаданиеНаПеревозку);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				ЗаданиеНаПеревозку.Метаданные(), ЗаданиеНаПеревозку, ТекстСообщения);
				
				Отказ = Истина;
				Возврат;
				
			КонецПопытки;
			
			СтруктураПараметров = Новый Структура("Склад, Получатель", Выборка.Склад, Выборка.Получатель);
			СкладыСервер.ЗапускВыполненияФоновогоПереоформленияРасходныхОрдеров(СтруктураПараметров);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаКонтроляРегистровТоварыКОтгрузкеИТоварыДоставке() Экспорт
	
 	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ЗаданиеНаПеревозкуРаспоряжения.Склад,
	 |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК ДокументОтгрузки
	 |ПОМЕСТИТЬ РаспоряженияНаОтгузку
	 |ИЗ
	 |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	 |ГДЕ
	 |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку
	 |	И ЗаданиеНаПеревозкуРаспоряжения.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	 |	И ЗаданиеНаПеревозкуРаспоряжения.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ДатаВремяРейсаПланС
	 |	И ЗаданиеНаПеревозкуРаспоряжения.Склад.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
	 |	ТоварыКОтгрузкеОбороты.Получатель КАК Получатель,
	 |	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
	 |	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
	 |	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
	 |	ТоварыКОтгрузкеОбороты.Назначение КАК Назначение,
	 |	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
	 |	СУММА(ВЫБОР
	 |		КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеРасход < 0
	 |			ТОГДА -ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА &ОформлятьСначалаНакладные
	 |					ТОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход - ТоварыКОтгрузкеОбороты.КОформлениюПриход
	 |				ИНАЧЕ ТоварыКОтгрузкеОбороты.КОтгрузкеПриход
	 |			КОНЕЦ
	 |	КОНЕЦ) КАК КоличествоКотгрузке
	 |ПОМЕСТИТЬ ТоварыКотгрузке
	 |ИЗ
	 |	РегистрНакопления.ТоварыКОтгрузке.Обороты(
	 |			,
	 |			,
	 |			,
	 |			(Склад, ДокументОтгрузки) В
	 |				(ВЫБРАТЬ
	 |					РаспоряженияНаОтгузку.Склад,
	 |					РаспоряженияНаОтгузку.ДокументОтгрузки
	 |				ИЗ
	 |					РаспоряженияНаОтгузку)) КАК ТоварыКОтгрузкеОбороты
	 |ГДЕ
	 |	(ВЫБОР
	 |		КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеРасход < 0
	 |			ТОГДА -ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА &ОформлятьСначалаНакладные
	 |					ТОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход - ТоварыКОтгрузкеОбороты.КОформлениюПриход
	 |				ИНАЧЕ ТоварыКОтгрузкеОбороты.КОтгрузкеПриход
	 |			КОНЕЦ
	 |	КОНЕЦ <> 0
	 |				И ТоварыКОтгрузкеОбороты.ДокументОтгрузки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	 |			ИЛИ ТоварыКОтгрузкеОбороты.ДокументОтгрузки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТоварыКОтгрузкеОбороты.Номенклатура,
	 |	ТоварыКОтгрузкеОбороты.Получатель,
	 |	ТоварыКОтгрузкеОбороты.Характеристика,
	 |	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
	 |	ТоварыКОтгрузкеОбороты.Серия,
	 |	ТоварыКОтгрузкеОбороты.Назначение,
	 |	ТоварыКОтгрузкеОбороты.Склад
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
	 |	ТоварыКОтгрузкеОбороты.Получатель,
	 |	ТоварыКОтгрузкеОбороты.Склад,
	 |	ТоварыКОтгрузкеОбороты.Номенклатура,
	 |	ТоварыКОтгрузкеОбороты.Характеристика,
	 |	ТоварыКОтгрузкеОбороты.Назначение,
	 |	ТоварыКОтгрузкеОбороты.Серия,
	 |	СУММА(ТоварыКОтгрузкеОбороты.КОформлениюРасход)
	 |ИЗ
	 |	РегистрНакопления.ТоварыКОтгрузке.Обороты(
	 |			,
	 |			,
	 |			,
	 |			(Склад, ДокументОтгрузки) В
	 |				(ВЫБРАТЬ
	 |					РаспоряженияНаОтгузку.Склад,
	 |					РаспоряженияНаОтгузку.ДокументОтгрузки
	 |				ИЗ
	 |					РаспоряженияНаОтгузку)) КАК ТоварыКОтгрузкеОбороты
	 |ГДЕ
	 |	(&ОформлятьСначалаНакладные
	 |				И ТоварыКОтгрузкеОбороты.КОформлениюРасход <> 0
	 |				И ТоварыКОтгрузкеОбороты.ДокументОтгрузки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	 |			ИЛИ ТоварыКОтгрузкеОбороты.ДокументОтгрузки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТоварыКОтгрузкеОбороты.Назначение,
	 |	ТоварыКОтгрузкеОбороты.Характеристика,
	 |	ТоварыКОтгрузкеОбороты.Склад,
	 |	ТоварыКОтгрузкеОбороты.Номенклатура,
	 |	ТоварыКОтгрузкеОбороты.Серия,
	 |	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
	 |	ТоварыКОтгрузкеОбороты.Получатель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТоварыКотгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	 |	ТоварыКотгрузке.Склад КАК Склад,
	 |	ТоварыКотгрузке.Получатель КАК Получатель,
	 |	ТоварыКотгрузке.Номенклатура КАК Номенклатура,
	 |	ТоварыКотгрузке.Характеристика КАК Характеристика,
	 |	ТоварыКотгрузке.Назначение КАК Назначение,
	 |	ТоварыКотгрузке.Серия КАК Серия,
	 |	ТоварыКотгрузке.КоличествоКотгрузке,
	 |	ВЫБОР
	 |		КОГДА ТоварыКДоставке.ВсеТовары
	 |			ТОГДА ТоварыКотгрузке.КоличествоКотгрузке
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА ТоварыКотгрузке.КоличествоКотгрузке >= ТоварыКДоставке.Количество
	 |					ТОГДА ТоварыКДоставке.Количество
	 |				ИНАЧЕ ТоварыКотгрузке.КоличествоКотгрузке
	 |			КОНЕЦ
	 |	КОНЕЦ КАК Количество
	 |ПОМЕСТИТЬ ТоварыКОтгрузкеИДоставке
	 |ИЗ
	 |	ТоварыКотгрузке КАК ТоварыКотгрузке
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	 |		ПО ТоварыКотгрузке.ДокументОтгрузки = ТоварыКДоставке.Распоряжение
	 |			И ТоварыКотгрузке.Склад = ТоварыКДоставке.Склад
	 |			И (ТоварыКотгрузке.Номенклатура = ТоварыКДоставке.Номенклатура
	 |					И ТоварыКотгрузке.Характеристика = ТоварыКДоставке.Характеристика
	 |					И ТоварыКотгрузке.Назначение = ТоварыКДоставке.Назначение
	 |					И ТоварыКотгрузке.Серия = ТоварыКДоставке.Серия
	 |				ИЛИ ТоварыКДоставке.ВсеТовары)
	 |			И (ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
	 |			И (ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен)
	 |			И (ТоварыКДоставке.ЗаданиеНаПеревозку.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется))
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	 |	ТоварыКОтгрузке.Склад,
	 |	ТоварыКОтгрузке.Получатель,
	 |	ТоварыКОтгрузке.Номенклатура,
	 |	ТоварыКОтгрузке.Характеристика,
	 |	ТоварыКОтгрузке.Назначение,
	 |	ТоварыКОтгрузке.Серия,
	 |	СУММА(ТоварыКОтгрузке.КОтгрузке) КАК Количество
	 |ПОМЕСТИТЬ ТоварыКотгрузкеРасход
	 |ИЗ
	 |	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаОтгузку КАК РаспоряженияНаОтгузку
	 |		ПО ТоварыКОтгрузке.Склад = РаспоряженияНаОтгузку.Склад
	 |			И ТоварыКОтгрузке.ДокументОтгрузки = РаспоряженияНаОтгузку.ДокументОтгрузки
	 |ГДЕ
	 |	ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	 |	И ТоварыКОтгрузке.КОтгрузке > 0
	 |	И ТоварыКОтгрузке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТоварыКОтгрузке.Серия,
	 |	ТоварыКОтгрузке.Назначение,
	 |	ТоварыКОтгрузке.Номенклатура,
	 |	ТоварыКОтгрузке.Характеристика,
	 |	ТоварыКОтгрузке.ДокументОтгрузки,
	 |	ТоварыКОтгрузке.Получатель,
	 |	ТоварыКОтгрузке.Склад
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	 |	ТоварыКОтгрузке.Получатель,
	 |	ТоварыКОтгрузке.Склад,
	 |	ТоварыКОтгрузке.Номенклатура,
	 |	ТоварыКОтгрузке.Характеристика,
	 |	ТоварыКОтгрузке.Назначение,
	 |	ТоварыКОтгрузке.Серия,
	 |	СУММА(ТоварыКОтгрузке.Собирается + ТоварыКОтгрузке.Собрано) КАК Количество
	 |ПОМЕСТИТЬ ТоварыСобраноСобирается
	 |ИЗ
	 |	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаОтгузку КАК РаспоряженияНаОтгузку
	 |		ПО ТоварыКОтгрузке.Склад = РаспоряженияНаОтгузку.Склад
	 |			И ТоварыКОтгрузке.ДокументОтгрузки = РаспоряженияНаОтгузку.ДокументОтгрузки
	 |ГДЕ
	 |	ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	 |	И ТоварыКОтгрузке.Собирается + ТоварыКОтгрузке.Собрано > 0
	 |	И ТоварыКОтгрузке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТоварыКОтгрузке.Серия,
	 |	ТоварыКОтгрузке.Назначение,
	 |	ТоварыКОтгрузке.Номенклатура,
	 |	ТоварыКОтгрузке.Характеристика,
	 |	ТоварыКОтгрузке.ДокументОтгрузки,
	 |	ТоварыКОтгрузке.Получатель,
	 |	ТоварыКОтгрузке.Склад
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	 |	ТоварыКОтгрузке.Получатель,
	 |	ТоварыКОтгрузке.Склад,
	 |	ТоварыКОтгрузке.Номенклатура,
	 |	ТоварыКОтгрузке.Характеристика,
	 |	ТоварыКОтгрузке.Назначение,
	 |	ТоварыКОтгрузке.Серия,
	 |	СУММА(ТоварыКОтгрузке.КСборке) КАК Количество
	 |ПОМЕСТИТЬ ТоварыКСборке
	 |ИЗ
	 |	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаОтгузку КАК РаспоряженияНаОтгузку
	 |		ПО ТоварыКОтгрузке.Склад = РаспоряженияНаОтгузку.Склад
	 |			И ТоварыКОтгрузке.ДокументОтгрузки = РаспоряженияНаОтгузку.ДокументОтгрузки
	 |ГДЕ
	 |	ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	 |	И ТоварыКОтгрузке.КСборке > 0
	 |	И ТоварыКОтгрузке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТоварыКОтгрузке.Серия,
	 |	ТоварыКОтгрузке.Назначение,
	 |	ТоварыКОтгрузке.Номенклатура,
	 |	ТоварыКОтгрузке.Характеристика,
	 |	ТоварыКОтгрузке.ДокументОтгрузки,
	 |	ТоварыКОтгрузке.Получатель,
	 |	ТоварыКОтгрузке.Склад
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |";
	 
	 Возврат ТекстЗапроса
		
КонецФункции	

#КонецОбласти

#КонецОбласти

#КонецЕсли

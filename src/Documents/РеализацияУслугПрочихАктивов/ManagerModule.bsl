#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Справочники.ПретензииКлиентов.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.РеализацияУслугПрочихАктивов) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.РеализацияУслугПрочихАктивов);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;


КонецПроцедуры


// Поставляет данные для зачета оплат
// Параметры:
//	ДокументСсылка - ДокументСсылка.РеализацияУслугПрочихАктивов - по данной ссылке формируется результат
// Возвращаемое значение:
//	Структура - Структура с данными указанного документа, данные могут быть подменены, в зависимости от состояния документа.
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	Реквизиты = Новый Структура(
		"Дата, ХозяйственнаяОперация, Организация,
		|Партнер, Контрагент,
		|Договор, ПорядокРасчетов, ПоЗаказу, ВалютаВзаиморасчетов, СуммаДокумента, СуммаВзаиморасчетов",
		'00010101', Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Справочники.Организации.ПустаяСсылка(),
		Справочники.Партнеры.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка(),
		Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), Перечисления.ПорядокРасчетов.ПустаяСсылка(), Ложь, Справочники.Валюты.ПустаяСсылка(), 0, 0);
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Данные.Дата КАК Дата,
		|	(ВЫБОР КОГДА Данные.ХозяйственнаяОперация=ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|		ИНАЧЕ Данные.ХозяйственнаяОперация КОНЕЦ) КАК ХозяйственнаяОперация,
		|	Данные.Организация КАК Организация,
		|	Данные.Партнер КАК Партнер,
		|	Данные.Контрагент КАК Контрагент,
		|	Данные.Договор КАК Договор,
		|	Данные.ПорядокРасчетов КАК ПорядокРасчетов,
		|	ЛОЖЬ КАК ПоЗаказу,
		|	Данные.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Данные.СуммаДокумента КАК СуммаДокумента,
		|	(ВЫБОР КОГДА Данные.Проведен ТОГДА Данные.СуммаВзаиморасчетов ИНАЧЕ 0 КОНЕЦ) КАК СуммаВзаиморасчетов
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &ДокументСсылка
		|");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	Возврат Реквизиты;
КонецФункции

// Расчитывает СостояниеРасчетов (ДолгПартнера, ПорядокРасчетов, СуммаДолга, ПроцентДолга, СуммаОплаты, ПроцентОплаты)
// Параметры:
//	ДокументСсылка - ДокументСсылка.РеализацияУслугПрочихАктивов - для этого документа вычисляется состояние расчетов
//	ДоговорСсылка - СправочникСсылка.ДоговорыКонтрагентов - если задан, то расчитываем относительно этого договора
//	СостояниеРасчетов - Структура или ДанныеФормыСтруктура - содержит результат расчета в полях
//		ДолгПартнера - булево - показывает, что рассчитанная сумма является задолженностью клиента
//		СуммаДолга - Число > 0. - накопленная сумма задолженности
//		ПроцентДолга - Число > 0.
//		СуммаОплаты - Число > 0. - расчет по договору дает 0.0, расчет по накладным дает неотрицательную сумму оплаты по накладной
//		ПроцентОплаты - Число > 0.
Процедура РассчитатьСостояние(Знач ДокументСсылка, Знач ДоговорСсылка, СостояниеРасчетов) Экспорт
	СостояниеРасчетов.ДолгПартнера = Ложь;
	СостояниеРасчетов.СуммаДолга = 0.;
	СостояниеРасчетов.ПроцентДолга = 0.;
	СостояниеРасчетов.СуммаОплаты = 0.;
	СостояниеРасчетов.ПроцентОплаты = 0.;
	СостояниеРасчетов.СуммаКОплате = 0.;
	
	Если Не (ЗначениеЗаполнено(ДокументСсылка) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами)) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(" // СуммаОстаток: (+) нам должны, (-) мы должны
		|ВЫБРАТЬ 
		|	ЕСТЬNULL(Расчеты.СуммаПриход,0) КАК СуммаВзаиморасчетов,
		|	ЕСТЬNULL(Расчеты.СуммаРасход,0) КАК СуммаОплаты,
		|	ЕСТЬNULL(Расчеты.СуммаКонечныйОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(Расчеты.КОплатеКонечныйОстаток, 0) КАК КОплатеОстаток
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК Накладная
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,, ЗаказКлиента=&Заказ) КАК Расчеты
		|		ПО ИСТИНА
		|ГДЕ
		|	Накладная.Ссылка = &Ссылка И Накладная.Проведен И Накладная.СуммаВзаиморасчетов > 0
		|");
	
	СтруктураРевизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПорядокРасчетов, Договор");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Если СтруктураРевизитов.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Запрос.УстановитьПараметр("Заказ", СтруктураРевизитов.Договор);
	Иначе
		Запрос.УстановитьПараметр("Заказ", ДокументСсылка);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СостояниеРасчетов.ДолгПартнера = (Выборка.СуммаОстаток >= 0.);
		СостояниеРасчетов.СуммаДолга = ?(Выборка.СуммаОстаток < 0., -Выборка.СуммаОстаток, Выборка.СуммаОстаток);
		Если СтруктураРевизитов.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			СостояниеРасчетов.СуммаОплаты = Выборка.СуммаОплаты;
			СостояниеРасчетов.ПроцентДолга = Окр(100 * СостояниеРасчетов.СуммаДолга / Выборка.СуммаВзаиморасчетов, 0);
			СостояниеРасчетов.ПроцентОплаты = Окр(100 * СостояниеРасчетов.СуммаОплаты / Выборка.СуммаВзаиморасчетов, 0);
		КонецЕсли;
		СостояниеРасчетов.СуммаКОплате = Выборка.КОплатеОстаток;
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСНоменклатурныйСоставДляНалоговыхНакладных(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                 КАК Период,
	|	ДанныеДокумента.ДатаПлатежа                          КАК ДатаПлатежа,
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Организация                          КАК Организация,
	|	ДанныеДокумента.Партнер                              КАК Партнер,
	|	ДанныеДокумента.Контрагент                           КАК Контрагент,
	|	ДанныеДокумента.Валюта                               КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов                 КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ЦенаВключаетНДС                      КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.Подразделение                        КАК Подразделение,
	|	ДанныеДокумента.ХозяйственнаяОперация                КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ФормаОплаты                          КАК ФормаОплаты,
	|	ДанныеДокумента.Договор                              КАК Договор,
	|	(ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ)                     КАК РасчетыПоДоговорам,
	|	ДанныеДокумента.Договор.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Поставка) КАК ВидПоставки,
	|	ДанныеДокумента.ГруппаФинансовогоУчета               КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	Запрос.УстановитьПараметр("Валюта",                          Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",            Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",  Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",      Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("Период",                          Реквизиты.Период);
	Запрос.УстановитьПараметр("ДатаПлатежа",                     Реквизиты.ДатаПлатежа);
	Запрос.УстановитьПараметр("ФормаОплаты",                     Реквизиты.ФормаОплаты);
	Запрос.УстановитьПараметр("Организация",                     Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                 ?(Реквизиты.ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("Подразделение",                   Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",           Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Договор",                         Реквизиты.Договор);
	Запрос.УстановитьПараметр("Контрагент",                      Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",              Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("ДопустимаяСуммаЗадолженности",    Реквизиты.ДопустимаяСуммаЗадолженности);
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", 
	                                                             ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")); 
	Запрос.УстановитьПараметр("Партнер",                         Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета",          Реквизиты.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",         Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре",       Реквизиты.ГрафикИсполненияВДоговоре);
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС",       НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ВидПоставки",                    Реквизиты.ВидПоставки);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуВзаиморасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта, 
	                                                                         Запрос.Параметры.ВалютаВзаиморасчетов, 
	                                                                         Запрос.Параметры.Период);

	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",           Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",          Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуВзаиморасчетов",Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДоходы.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	ТаблицаДоходы.СтатьяДоходов КАК СтатьяДоходов,
	|	ТаблицаДоходы.АналитикаДоходов КАК АналитикаДоходов,
	|
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА ТаблицаДоходы.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДоходы.Сумма + ТаблицаДоходы.СуммаНДС * &ЦенаВключаетНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК Сумма,
	|
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|ГДЕ
	|	ТаблицаДоходы.Ссылка = &Ссылка
	|	И &ИспользоватьУчетПрочихДоходовРасходов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Запрос.Параметры));
	
КонецПроцедуры


Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА &Договор ИНАЧЕ &Ссылка КОНЕЦ КАК ЗаказКлиента,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|
	|	СУММА(ТаблицаДоходы.СуммаВзаиморасчетов) КАК Сумма,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА СУММА(ТаблицаДоходы.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаДоходы.СуммаСНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА СУММА(ТаблицаДоходы.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаДоходы.СуммаСНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	0 КАК КОплате,
	|	0 КАК КОтгрузке,
	|
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ФормаОплаты КАК ФормаОплаты,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	&ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|
	|ГДЕ
	|	ТаблицаДоходы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&ДатаПлатежа, День) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА &Договор ИНАЧЕ &Ссылка КОНЕЦ КАК ЗаказКлиента,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	СУММА(ТаблицаДоходы.СуммаВзаиморасчетов) КАК КОплате,
	|	0 КАК КОтгрузке,
	|
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ФормаОплаты КАК ФормаОплаты,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	&ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|
	|ГДЕ
	|	ТаблицаДоходы.Ссылка = &Ссылка
	|	И НЕ &ГрафикИсполненияВДоговоре
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	ТаблицаДоходы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДоходы.СуммаСНДС - ТаблицаДоходы.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаДоходы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДоходы.СуммаНДС КАК СуммаНДС,
	|
	|	(ВЫБОР КОГДА ТаблицаДоходы.СуммаСНДС - ТаблицаДоходы.СуммаНДС = Суммы.СуммаБезНДС
	|		ТОГДА Суммы.СуммаБезНДСРегл ИНАЧЕ 0. КОНЕЦ) КАК СуммаБезНДСРегл,
	|
	|	(ВЫБОР КОГДА ТаблицаДоходы.СуммаНДС = Суммы.СуммаНДС
	|		ТОГДА Суммы.СуммаНДСРегл ИНАЧЕ 0. КОНЕЦ) КАК СуммаНДСРегл,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = ТаблицаДоходы.Ссылка
	|		И Суммы.ИдентификаторСтроки = ТаблицаДоходы.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаДоходы.Ссылка = &Ссылка
	|	И &Валюта <> &ВалютаРегламентированногоУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДоходы.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходы.СтатьяДоходов.ДоходыПоОбъектамЭксплуатации
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияОС)
	|		КОГДА ТаблицаДоходы.СтатьяДоходов.ДоходыПоНМАиНИОКР
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияНМА)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихУслуг)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	
	|	ТаблицаДоходы.СтатьяДоходов КАК СтатьяДоходовРасходов,
	|	ТаблицаДоходы.АналитикаДоходов КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА ТаблицаДоходы.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДоходы.СуммаСНДС * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА ТаблицаДоходы.СуммаВзаиморасчетов - ВЫБОР КОГДА ТаблицаДоходы.СуммаСНДС <> 0 ТОГДА
	|														ВЫРАЗИТЬ(ТаблицаДоходы.СуммаВзаиморасчетов * ТаблицаДоходы.СуммаНДС / ТаблицаДоходы.СуммаСНДС КАК ЧИСЛО(15, 2))
	|													ИНАЧЕ
	|														0
	|													КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДоходы.СуммаСНДС - ТаблицаДоходы.СуммаНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|		ТОГДА ТаблицаДоходы.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДоходы.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|		ТОГДА ТаблицаДоходы.СуммаВзаиморасчетов - ВЫБОР КОГДА ТаблицаДоходы.СуммаСНДС <> 0 ТОГДА
	|														ВЫРАЗИТЬ(ТаблицаДоходы.СуммаВзаиморасчетов * ТаблицаДоходы.СуммаНДС / ТаблицаДоходы.СуммаСНДС КАК ЧИСЛО(15, 2))
	|													ИНАЧЕ
	|														0
	|													КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДоходы.СуммаСНДС - ТаблицаДоходы.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) 
	|	КОНЕЦ КАК СуммаРеглБезНДС,
	|	
	|	&Валюта КАК Валюта,
	|	ТаблицаДоходы.СуммаСНДС КАК СуммаВВалюте,
	|	ТаблицаДоходы.СуммаСНДС - ТаблицаДоходы.СуммаНДС КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаДоходы.СуммаВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ТаблицаДоходы.СуммаВзаиморасчетов - ВЫБОР КОГДА ТаблицаДоходы.СуммаСНДС <> 0 ТОГДА
	|											ВЫРАЗИТЬ(ТаблицаДоходы.СуммаВзаиморасчетов * ТаблицаДоходы.СуммаНДС / ТаблицаДоходы.СуммаСНДС КАК ЧИСЛО(15, 2))
	|										ИНАЧЕ
	|											0
	|										КОНЕЦ КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА &РасчетыПоДоговорам
	|		ТОГДА &Договор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|ГДЕ
	|	ТаблицаДоходы.Ссылка = &Ссылка"; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСНоменклатурныйСоставДляНалоговыхНакладных(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСНоменклатурныйСоставДляНалоговыхНакладных";
	ИмяРегистраДляПроверки = "НДСНоменклатурныйСоставДляНалоговыхНакладных";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистраДляПроверки, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ КАК ОбъектРасчетов,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|	&Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.ТоварыПрочее) КАК СпособЗаполнения, 
	|
	|	ТаблицаДоходы.СтавкаНДС		КАК СтавкаНДС,
	|	Неопределено       			КАК НомерГТД,
	|	Неопределено   				КАК Номенклатура,
	|	Неопределено 				КАК Характеристика,
	|	Неопределено       			КАК Упаковка,
	|	0 							КАК ЦенаНН,
	|   &Ссылка                     КАК ДокументПоставки,
	|   НЕОПРЕДЕЛЕНО				КАК ДокументПоставкиДляВозвратов,
	|	СУММА(ТаблицаДоходы.СуммаСНДС) КАК СуммаВзаиморасчетов,
	|	0 							КАК КоличествоУпаковок
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|
	|ГДЕ
	|	&ОрганизацияПлательщикНДС
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов)
	|		)
	|	И ТаблицаДоходы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО 
	|	ТаблицаДоходы.СтавкаНДС
	|";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если НЕ ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		// Акт об оказании услуг
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьАктОбОказанииУслуг";
		КомандаПечати.Идентификатор = "Акт";
		КомандаПечати.Представление = НСтр("ru='Акт об оказании услуг';uk='Акт про надання послуг'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеРеализацийУслугПрочихАктивов, ЧтениеРеализацийУслугПрочихАктивов") Тогда
		// Реализация товаров
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
		КомандаПечати.Идентификатор  = "РасходнаяНакладная";
		КомандаПечати.Представление = НСтр("ru='Расходная накладная';uk='Видаткова накладна'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
		КомандаПечати.Порядок = 20;
	КонецЕсли;
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов) Экспорт
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
		|   ИСТИНА КАК УчитыватьНДС,
		|   Товары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Товары
		|ГДЕ
		|	Товары.Ссылка В(&МассивДокументов) И Товары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
		|СГРУППИРОВАТЬ ПО Товары.Ссылка 
		|;

		|// ЗАПРОС ПО ШАПКЕ
		|ВЫБРАТЬ // документы без посредника
		|	Реализация.Ссылка КАК Ссылка,
		|	Реализация.Номер КАК Номер,
		|	Реализация.Дата КАК Дата,
		|	Реализация.Партнер КАК Партнер,
		|	Реализация.Контрагент КАК Контрагент,
		|	Реализация.Организация КАК Организация,
		|	Реализация.Организация.Префикс КАК Префикс,
		|	Реализация.Валюта КАК Валюта,
		|	Реализация.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС,
		|	"""" КАК ДополнительнаяИнформация,
		|	"""" КАК ДополнительнаяИнформацияШапки,
		|	Реализация.Договор КАК Договор,
		|	Реализация.Договор.НаименованиеДляПечати                КАК ДоговорНаименованиеДляПечати,
		|	ЛОЖЬ                                                    КАК ПечататьЗаказ,
		|	НЕОПРЕДЕЛЕНО                                            КАК Заказ,
		|	Реализация.Соглашение                                   КАК Соглашение,
		|	ТаблицаОтветственныеЛица.РуководительНаименование       КАК РуководительОрганизации,
		|	ТаблицаОтветственныеЛица.РуководительДолжность          КАК ДолжностьРуководителяОрганизации,
		|	""""                                                    КАК РуководительКонтрагента,
		|	""""                                                    КАК ДолжностьРуководителяКонтрагента,
		|	Реализация.ПредставительОрганизации                     КАК ПредставительОрганизации,
		|	Реализация.ПредставительОрганизацииДолжность            КАК ПредставительОрганизацииДолжность,
		|	Реализация.ПредставительКонтрагента                     КАК ПредставительКонтрагента,
		|	""""                                                    КАК ПредставительОрганизацииПолучателя,
		|	""""                                                    КАК ПредставительОрганизацииПолучателяДолжность,
		|	Реализация.МестоСоставленияДокумента                    КАК МестоСоставленияДокумента,
		|	Реализация.БанковскийСчетОрганизации                    КАК БанковскийСчетОрганизации,
		|	Реализация.БанковскийСчетКонтрагента                    КАК БанковскийСчетКонтрагента
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК Реализация
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
		|		ПО Реализация.Ссылка = ТаблицаОтветственныеЛица.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
		|		ПО Реализация.Ссылка = ТаблицаУчитыватьНДС.Ссылка
		|ГДЕ
		|	Реализация.Ссылка В (&МассивДокументов) И Реализация.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка;
		|
		|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
		|ВЫБРАТЬ
		|	Реализация.Ссылка КАК Ссылка,
		|	Реализация.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	Реализация.Содержание КАК УслугаНаименованиеПолное,
		|	"""" КАК Код,
		|	"""" КАК Артикул,
		|	"""" КАК ЕдиницаЦены,
		|	Реализация.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НЕОПРЕДЕЛЕНО КАК Характеристика,
		|	"""" КАК ХарактеристикаНаименованиеПолное,
		|	"""" КАК УпаковкаНаименование,
		|	Реализация.СтавкаНДС КАК СтавкаНДС,
		|	Реализация.Цена КАК Цена,
		|	Реализация.Количество КАК Количество,
		|	Реализация.Сумма КАК Сумма,
		|	Реализация.СуммаНДС КАК СуммаНДС,
		|	0 КАК ПроцентСкидки,
		|	0 КАК СуммаСкидки,
		|	Реализация.Сумма КАК СуммаБезСкидки,
		|	Ложь КАК ЭтоВозвратнаяТара
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Реализация
		|ГДЕ
		|	Реализация.Ссылка В (&МассивДокументов)
		|УПОРЯДОЧИТЬ ПО
		|	Реализация.Ссылка, Реализация.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|";
		Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Возврат Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатыЗапроса[1], 
		РезультатыЗапроса[2]
		);
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыРасходнаяНакладная(ПараметрыПечати, МассивОбъектов) Экспорт	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|   ИСТИНА КАК УчитыватьНДС,
	|   Доходы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Доходы
	|ГДЕ
	|	Доходы.Ссылка В(&МассивДокументов) И Доходы.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|СГРУППИРОВАТЬ ПО Доходы.Ссылка 
	|;
	|ВЫБРАТЬ
	|	РеализацияУслугПрочихАктивов.Ссылка КАК Ссылка,
	|	РеализацияУслугПрочихАктивов.Номер КАК Номер,
	|	РеализацияУслугПрочихАктивов.Дата КАК Дата,
	|	РеализацияУслугПрочихАктивов.Партнер КАК Партнер,
	|	РеализацияУслугПрочихАктивов.Контрагент КАК Получатель,
	|	РеализацияУслугПрочихАктивов.Организация КАК Организация,
	|	РеализацияУслугПрочихАктивов.Организация.Префикс КАК Префикс,
	|	РеализацияУслугПрочихАктивов.Валюта КАК Валюта,
	|	РеализацияУслугПрочихАктивов.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС,
	|	РеализацияУслугПрочихАктивов.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	РеализацияУслугПрочихАктивов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	РеализацияУслугПрочихАктивов.Договор КАК Договор,
	|	РеализацияУслугПрочихАктивов.Договор.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ЛОЖЬ КАК ПечататьЗаказ,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	РеализацияУслугПрочихАктивов.АдресДоставки КАК АдресДоставки,
	|	РеализацияУслугПрочихАктивов.МестоСоставленияДокумента КАК МестоСоставленияДокумента,
	|	РеализацияУслугПрочихАктивов.ПредставительОрганизации.Наименование КАК ПредставительОрганизации,
	|	РеализацияУслугПрочихАктивов.ПредставительОрганизацииДолжность КАК ПредставительОрганизацииДолжность,
	|	РеализацияУслугПрочихАктивов.ПолучилПоДругомуДокументу КАК ПолучилПоДругомуДокументу,
	|	РеализацияУслугПрочихАктивов.ДоверенностьАльтернативныйВидДокумента КАК ДоверенностьАльтернативныйВидДокумента,
	|	РеализацияУслугПрочихАктивов.ДоверенностьСерия КАК ДоверенностьСерия,
	|	РеализацияУслугПрочихАктивов.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияУслугПрочихАктивов.ДоверенностьДата КАК ДоверенностьДата,
	|	РеализацияУслугПрочихАктивов.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РеализацияУслугПрочихАктивов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	РеализацияУслугПрочихАктивов.ДоверенностьПримечание КАК ДоверенностьПримечание
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
	|		ПО РеализацияУслугПрочихАктивов.Ссылка = ТаблицаУчитыватьНДС.Ссылка
	|ГДЕ
	|	РеализацияУслугПрочихАктивов.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияУслугПрочихАктивов.Ссылка КАК Ссылка,
	|		РеализацияУслугПрочихАктивов.Содержание КАК Содержание,
	|		РеализацияУслугПрочихАктивов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		РеализацияУслугПрочихАктивов.СтавкаНДС КАК СтавкаНДС,
	|		РеализацияУслугПрочихАктивов.Цена КАК Цена,
	|		РеализацияУслугПрочихАктивов.Количество КАК Количество,
	|		РеализацияУслугПрочихАктивов.Сумма КАК Сумма,
	|		РеализацияУслугПрочихАктивов.СуммаНДС КАК СуммаНДС,
	|		РеализацияУслугПрочихАктивов.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.РеализацияУслугПрочихАктивов.Доходы КАК РеализацияУслугПрочихАктивов
	|	ГДЕ
	|		РеализацияУслугПрочихАктивов.Ссылка В(&МассивДокументов)
	|		) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");

	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		МассивРезультатов[1],
		МассивРезультатов[2]
	);
	
КонецФункции


// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Валюта.
//
//	ПараметрыЗаполнения - Структура - структура, возвращаемая функцией ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл",       ПараметрыЗаполнения.ПересчитыватьВВалютуРегл);
	Запрос.УстановитьПараметр("ПустаяГТД",                      Справочники.НомераГТД.ПустаяСсылка());
	
	Если ПараметрыЗаполнения.ПересчитыватьВВалютуРегл И ПараметрыЗаполнения.АктуализироватьРасчеты Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаДанныхДокументов КАК ДанныеДокументов
		|	ПО
		|		РасчетыСКлиентами.Регистратор = ДанныеДокументов.Ссылка
		|
		|ГДЕ
		|	ДанныеДокументов.Валюта <> &ВалютаРегламентированногоУчета
		|	И РасчетыСКлиентами.Активность
		|";
		ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
		МассивАналитикУчетаПоПартнерам = ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		
		ОкончаниеПериодаРасчета = ТекущаяДатаСеанса();
		РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСКлиентами(ОкончаниеПериодаРасчета, МассивАналитикУчетаПоПартнерам);
		
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                 КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                            КАК НомерСтроки,
	|	ТаблицаДокумента.Содержание КАК Содержание,
	|	ТаблицаДокумента.Количество                             КАК Количество,
	|	ТаблицаДокумента.Количество                             КАК КоличествоУпаковок,
	|	ТаблицаДокумента.ЕдиницаИзмерения                       КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.ЕдиницаИзмерения                       КАК Упаковка,
	|	
	|	ЕСТЬNULL(
	|		СуммыДокументовВВалютеРегл.СуммаБезНДСРегл,
	|		ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС
	|	) КАК СуммаБезНДС,
	|	
	|	ТаблицаДокумента.СтавкаНДС                              КАК СтавкаНДС,
	|	
	|	ЕСТЬNULL(
	|		СуммыДокументовВВалютеРегл.СуммаНДСРегл,
	|		ТаблицаДокумента.СуммаНДС
	|	) КАК СуммаНДС,
	|	ТаблицаДокумента.АналитикаДоходов КАК АналитикаДоходов,
	|
	|	НЕОПРЕДЕЛЕНО                                            КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                                            КАК Характеристика,
	|	&ПустаяГТД                                              КАК НомерГТД,
	|
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ                                                   КАК ЭтоТовар,
	|	ЛОЖЬ                                                    КАК ВернутьМногооборотнуюТару
	|
	|ПОМЕСТИТЬ РеализацияУслугПрочихАктивовТаблицаТоваров
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО
	|		ТаблицаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|		И СуммыДокументовВВалютеРегл.Активность
	|		И &ПересчитыватьВВалютуРегл	
	|;";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "Акт", НСтр("ru='Акт выполненных работ';uk='Акт виконаних робіт'"), "Обработка.ПечатьАктОбОказанииУслуг", Неопределено));
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоУмолчанию(Объект) Экспорт
	
	Объект.Менеджер = Пользователи.ТекущийПользователь();
	Объект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.Менеджер, Объект.Подразделение);
	
	Объект.Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Объект.Валюта);
	Объект.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Объект.ВалютаВзаиморасчетов);
	
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Объект.Организация;
	СтруктураПараметров.БанковскийСчет		= Объект.БанковскийСчетОрганизации;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Объект.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
		Объект.ДатаПлатежа = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПартнеру(Объект, Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Или (Объект.Партнер <> Партнер) Тогда
		Объект.Партнер = Партнер;
	КонецЕсли;
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
		Объект.Партнер,
		Новый Структура("ХозяйственнаяОперация, ВыбранноеСоглашение", Объект.ХозяйственнаяОперация, Объект.Соглашение));
	
	Если ЗначениеЗаполнено(УсловияПродаж) Тогда
		Объект.Соглашение = УсловияПродаж.Соглашение;
		ЗаполнитьПоУсловиямПродаж(Объект, УсловияПродаж);
	Иначе
		Объект.Соглашение = Неопределено;
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Объект.Партнер, Объект.КонтактноеЛицо);
	
КонецПроцедуры

Процедура ЗаполнитьПоУсловиямПродаж(Объект, УсловияПродаж) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, УсловияПродаж, "Валюта, ЦенаВключаетНДС, ФормаОплаты, ГруппаФинансовогоУчета,НаправлениеДеятельности");
	
	Объект.ВалютаВзаиморасчетов = УсловияПродаж.Валюта;
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Объект.ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация<>Объект.Организация Тогда
		Объект.Организация = УсловияПродаж.Организация;
	КонецЕсли;
	Если (Не УсловияПродаж.Типовое) И ЗначениеЗаполнено(УсловияПродаж.Контрагент) И УсловияПродаж.Контрагент<>Объект.Контрагент Тогда
		Объект.Контрагент = УсловияПродаж.Контрагент;
	КонецЕсли;
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	Если (НЕ УсловияПродаж.Типовое) И НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Объект.КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
	КонецЕсли;
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
	
		Объект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Объект, Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Объект.ВалютаВзаиморасчетов);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Или ЗначениеЗаполнено(УсловияПродаж.Соглашение) Тогда
		Объект.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение);
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Объект.Организация;
	СтруктураПараметров.БанковскийСчет			= Объект.БанковскийСчетОрганизации;
	СтруктураПараметров.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	Объект.АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Объект.Партнер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Процедура ПеренестиРеквизитыПотерянныеСоответствия_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
    
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
    |ГДЕ 
    |   ДанныеДокумента.УДАЛИТЬМестоСоставленияДокумента <> ДанныеДокумента.МестоСоставленияДокумента
    |   ИЛИ ДанныеДокумента.УДАЛИТЬПредставительОрганизации <> ДанныеДокумента.ПредставительОрганизации
    |   ИЛИ ДанныеДокумента.УДАЛИТЬПредставительОрганизацииДолжность <> ДанныеДокумента.ПредставительОрганизацииДолжность
    |   ИЛИ ДанныеДокумента.УДАЛИТЬПредставительКонтрагента <> ДанныеДокумента.ПредставительКонтрагента
    |   ИЛИ ДанныеДокумента.УДАЛИТЬДоверенностьАльтернативныйВидДокумента <> ДанныеДокумента.ДоверенностьАльтернативныйВидДокумента
    |   ИЛИ ДанныеДокумента.УДАЛИТЬДоверенностьСерия <> ДанныеДокумента.ДоверенностьСерия
    |   ИЛИ ДанныеДокумента.УДАЛИТЬДоверенностьПримечание <> ДанныеДокумента.ДоверенностьПримечание
    |   ИЛИ ДанныеДокумента.УДАЛИТЬПолучилПоДругомуДокументу <> ДанныеДокумента.ПолучилПоДругомуДокументу
    |   ИЛИ ДанныеДокумента.УДАЛИТЬАвторасчетНДС <> ДанныеДокумента.АвторасчетНДС
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
Процедура ПеренестиРеквизитыПотерянныеСоответствия(Параметры) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        "Документ.РеализацияУслугПрочихАктивов"
    );
	
	Пока Выборка.Следующий() Цикл
		
        НачатьТранзакцию();
        
		Попытка
            
			Блокировка = Новый БлокировкаДанных;
            
			ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияУслугПрочихАктивов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
            
            Блокировка.Заблокировать();
            
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
            ДокументОбъект.МестоСоставленияДокумента              = ДокументОбъект.УДАЛИТЬМестоСоставленияДокумента;
            ДокументОбъект.ПредставительОрганизации               = ДокументОбъект.УДАЛИТЬПредставительОрганизации;
            ДокументОбъект.ПредставительОрганизацииДолжность      = ДокументОбъект.УДАЛИТЬПредставительОрганизацииДолжность;
            ДокументОбъект.ПредставительКонтрагента               = ДокументОбъект.УДАЛИТЬПредставительКонтрагента;
            ДокументОбъект.ДоверенностьАльтернативныйВидДокумента = ДокументОбъект.УДАЛИТЬДоверенностьАльтернативныйВидДокумента;
            ДокументОбъект.ДоверенностьСерия                      = ДокументОбъект.УДАЛИТЬДоверенностьСерия;
            ДокументОбъект.ДоверенностьПримечание                 = ДокументОбъект.УДАЛИТЬДоверенностьПримечание;
            ДокументОбъект.ПолучилПоДругомуДокументу              = ДокументОбъект.УДАЛИТЬПолучилПоДругомуДокументу;
            ДокументОбъект.АвторасчетНДС                          = ДокументОбъект.УДАЛИТЬАвторасчетНДС;
            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
            ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        "Документ.РеализацияУслугПрочихАктивов"
    );
	
КонецПроцедуры




Процедура ЗаменитьСсылкиЕдиницИзмерения_ДанныеДляОбновления(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Т
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Т.ЕдиницаИзмерения) = ТИП(Справочник.УдалитьЕдиницыИзмерения)";
	
    ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

Процедура ЗаменитьСсылкиЕдиницИзмерения(Параметры) Экспорт

	ПолноеИмяДокумента = "Документ.РеализацияУслугПрочихАктивов";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
	СоответствиеЕдиницыУпаковки = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Справочники.УпаковкиЕдиницыИзмерения.ЗаменитьСсылкиЕдиницИзмеренияВОбъекте(
                ДокументОбъект, 
                СоответствиеЕдиницыУпаковки, 
                "Доходы"
            );
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();		
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры
 


#КонецОбласти

#КонецОбласти

#КонецЕсли

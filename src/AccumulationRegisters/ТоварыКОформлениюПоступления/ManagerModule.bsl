#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура формирования движений по регистру 
//
Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюПоступления;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТоварыКОформлениюПоступления = Движения.ТоварыКОформлениюПоступления;
	ДвиженияТоварыКОформлениюПоступления.Записывать = Истина;
	ДвиженияТоварыКОформлениюПоступления.Загрузить(Таблица);
	
КонецПроцедуры

// Возвращает таблицу оформленных товаров переданного массив заказов, исключая записи переданной накладной
//
// Параметры:
//  МассивЗаказов	 - Массив - 
//  Накладная		 - ДокументСсылка.ВнутреннееПотреблениеТоваров, ДокументСсылка.ПеремещениеТоваров,
//  	ДокументСсылка.СборкаТоваров, ДокументСсылка.ПередачаМатериаловВПроизводство - 
//  Склад			 - СправочникСсылка.Склады - 
//  ДополнитьСериямиИзРегистратора	 - Булево - 
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, ИсключаемыеНакладные, Склад = Неопределено, ДополнитьСериямиИзРегистратора = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыКОформлениюПоступления.Регистратор КАК Регистратор,
	|	ТоварыКОформлениюПоступления.ДокументПоступления КАК Распоряжение,
	|	ТоварыКОформлениюПоступления.Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика,
	|	ТоварыКОформлениюПоступления.Назначение,
	|	ТоварыКОформлениюПоступления.Склад,
	|	ТоварыКОформлениюПоступления.Серия,
	|	СУММА(ТоварыКОформлениюПоступления.КОформлению) КАК Количество
	|//&ПОМЕСТИТЬ
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления КАК ТоварыКОформлениюПоступления
	|ГДЕ
	|	ТоварыКОформлениюПоступления.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НЕ ТоварыКОформлениюПоступления.Регистратор В (&ИсключаемыеНакладные)
	|	И ТоварыКОформлениюПоступления.ДокументПоступления В(&Заказы)
	|	И ТоварыКОформлениюПоступления.КОформлению > 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлениюПоступления.Регистратор,
	|	ТоварыКОформлениюПоступления.ДокументПоступления,
	|	ТоварыКОформлениюПоступления.Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика,
	|	ТоварыКОформлениюПоступления.Назначение,
	|	ТоварыКОформлениюПоступления.Серия,
	|	ТоварыКОформлениюПоступления.Склад";
	
	Если ДополнитьСериямиИзРегистратора Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&ПОМЕСТИТЬ", "ПОМЕСТИТЬ ВтДанныеРегистра")
		+ ТекстРазделителяЗапросов()
		+ "ВЫБРАТЬ
		|	Таблица.Ссылка КАК Регистратор,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение,
		|	Таблица.Серия,
		|	Сумма(Таблица.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтДанныеДокументаПоступления
		|ИЗ Документ.ПеремещениеТоваров.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (Выбрать Т.Регистратор Из ВтДанныеРегистра КАК Т)
		|	И Таблица.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение,
		|	Таблица.Серия
		|;
		|ВЫБРАТЬ
		|	Таблица.Распоряжение,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение,
		|	Таблица.Склад,
		|	ВЫБОР КОГДА Таблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) Тогда
		|		ДанныеДокументаПоступления.Серия
		|	ИНАЧЕ
		|		Таблица.Серия
		|	КОНЕЦ КАК Серия,
		|	Сумма(ВЫБОР КОГДА Таблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) Тогда
		|		ДанныеДокументаПоступления.Количество
		|	ИНАЧЕ
		|		Таблица.Количество
		|	КОНЕЦ) КАК Количество
		|ИЗ
		|	ВтДанныеРегистра КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеДокументаПоступления КАК ДанныеДокументаПоступления
		|		ПО Таблица.Регистратор = ДанныеДокументаПоступления.Регистратор
		|		И Таблица.Номенклатура = ДанныеДокументаПоступления.Номенклатура
		|		И Таблица.Характеристика = ДанныеДокументаПоступления.Характеристика
		|		И Таблица.Назначение = ДанныеДокументаПоступления.Назначение
		|		И (Таблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|			ИЛИ Таблица.Серия = ДанныеДокументаПоступления.Серия)
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Распоряжение,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение,
		|	ВЫБОР КОГДА Таблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) Тогда
		|		ДанныеДокументаПоступления.Серия
		|	ИНАЧЕ
		|		Таблица.Серия
		|	КОНЕЦ,
		|	Таблица.Склад";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("ИсключаемыеНакладные", ИсключаемыеНакладные);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", "И Склад = &Склад");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу принятых товаров переданного массива заказов, с указанием принятого ордерами количества
//
// Параметры:
//  МассивЗаказов	 - Массив - 
//  Склад			 - СправочникСсылка.Склады - 
//  ДополнитьСериямиИзРегистратора	 - Булево - 
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ПринятоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, Склад = Неопределено, ДополнитьСериямиИзРегистратора = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыКОформлениюПоступления.Регистратор КАК Регистратор,
	|	ТоварыКОформлениюПоступления.ДокументПоступления КАК Распоряжение,
	|	ТоварыКОформлениюПоступления.Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика,
	|	ТоварыКОформлениюПоступления.Назначение,
	|	ТоварыКОформлениюПоступления.Склад,
	|	ТоварыКОформлениюПоступления.Склад КАК СкладПолучатель,
	|	ТоварыКОформлениюПоступления.Серия,
	|	СУММА(ТоварыКОформлениюПоступления.КОформлению) КАК Количество
	|//&ПОМЕСТИТЬ
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления КАК ТоварыКОформлениюПоступления
	|ГДЕ
	|	ТоварыКОформлениюПоступления.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКОформлениюПоступления.ДокументПоступления В(&Заказы)
	|	И ТоварыКОформлениюПоступления.КОформлению > 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлениюПоступления.Регистратор,
	|	ТоварыКОформлениюПоступления.ДокументПоступления,
	|	ТоварыКОформлениюПоступления.Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика,
	|	ТоварыКОформлениюПоступления.Назначение,
	|	ТоварыКОформлениюПоступления.Серия,
	|	ТоварыКОформлениюПоступления.Склад";
	
	Если ДополнитьСериямиИзРегистратора Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&ПОМЕСТИТЬ", "ПОМЕСТИТЬ ВтДанныеРегистра")
		+ ТекстРазделителяЗапросов()
		+ "ВЫБРАТЬ
		|	Таблица.Ссылка КАК Регистратор,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение,
		|	Таблица.Серия,
		|	Сумма(Таблица.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтДанныеДокументаПоступления
		|ИЗ Документ.ПриходныйОрдерНаТовары.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (Выбрать Т.Регистратор Из ВтДанныеРегистра КАК Т)
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение,
		|	Таблица.Серия
		|;
		|ВЫБРАТЬ
		|	Таблица.Распоряжение,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение,
		|	Таблица.Склад,
		|	ВЫБОР КОГДА Таблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) Тогда
		|		ДанныеДокументаПоступления.Серия
		|	ИНАЧЕ
		|		Таблица.Серия
		|	КОНЕЦ КАК Серия,
		|	Сумма(ВЫБОР КОГДА Таблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) Тогда
		|		ДанныеДокументаПоступления.Количество
		|	ИНАЧЕ
		|		Таблица.Количество
		|	КОНЕЦ) КАК Количество
		|ИЗ
		|	ВтДанныеРегистра КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеДокументаПоступления КАК ДанныеДокументаПоступления
		|		ПО Таблица.Регистратор = ДанныеДокументаПоступления.Регистратор
		|		И Таблица.Номенклатура = ДанныеДокументаПоступления.Номенклатура
		|		И Таблица.Характеристика = ДанныеДокументаПоступления.Характеристика
		|		И Таблица.Назначение = ДанныеДокументаПоступления.Назначение
		|		И (Таблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|			ИЛИ Таблица.Серия = ДанныеДокументаПоступления.Серия)
		|		
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Распоряжение,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение,
		|	ВЫБОР КОГДА Таблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) Тогда
		|		ДанныеДокументаПоступления.Серия
		|	ИНАЧЕ
		|		Таблица.Серия
		|	КОНЕЦ,
		|	Таблица.Склад";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", "И Склад = &Склад");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Функция ПолноеИмяРегистра()
	Возврат "РегистрНакопления.ТоварыКОформлениюПоступления";
КонецФункции

Процедура ИсправитьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяРегистра();

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсправляемыйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СборкаТоваров КАК ИсправляемыйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюПоступления КАК ТоварыКПоступлению
	|		ПО ИсправляемыйДокумент.Ссылка = ТоварыКПоступлению.Регистратор
	|ГДЕ
	|	ИсправляемыйДокумент.Проведен
	|	И ИсправляемыйДокумент.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыСборокТоваров.УдалитьКСборкеРазборке), ЗНАЧЕНИЕ(Перечисление.СтатусыСборокТоваров.ВРаботе))
	|	И ИсправляемыйДокумент.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ИсправляемыйДокумент.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= ИсправляемыйДокумент.Дата
	|	И ТоварыКПоступлению.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсправляемыйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ИсправляемыйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюПоступления КАК ТоварыКПоступлению
	|		ПО ИсправляемыйДокумент.Ссылка = ТоварыКПоступлению.Регистратор
	|ГДЕ
	|	ИсправляемыйДокумент.Проведен
	|	И ИсправляемыйДокумент.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.УдалитьКОтгрузке), ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Отгружено))
	|	И ИсправляемыйДокумент.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ИсправляемыйДокумент.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= ИсправляемыйДокумент.Дата
	|	И НЕ ИсправляемыйДокумент.ПеремещениеПоЗаказам
	|	И ТоварыКПоступлению.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И (НЕ ДанныеРегистра.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ИЛИ ДанныеРегистра.Регистратор.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет))
    |";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Регистраторы = Результат.ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры,
		Регистраторы,
		ПолноеИмяРегистра()
    );
		
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры,
		Документы.ЗаказНаСборку.РазборкиКоторыеНужноПривязатьКНовымЗаказамПослеРазбиенияЗаказов(),
		ПолноеИмяРегистра()
    );
	
КонецПроцедуры

Процедура ИсправитьДвижения(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.СборкаТоваров");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.ПоступлениеТоваровУслуг");
    
    ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
		ПолноеИмяРегистра(),
		Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыКОформлениюПоступления";
	ИмяРегистра = "ТоварыКОформлениюПоступления";
	
	ТекстЗапросаМеханизмаПроведения = Документы.АктОРасхожденияхПослеПеремещения.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.АктОРасхожденияхПослеПеремещения");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Регистраторы,
	                                                                                  "РегистрНакопления.ТоварыКОформлениюПоступления",
	                                                                                  Параметры.Очередь);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстРазделителяЗапросов()

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

#КонецОбласти

#КонецЕсли


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Элементы.ГруппаПрефикс.Видимость = 
		(Объект.ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам);

	ЗаполнитьСпискиВыбораТипаРасчетов();
	
	УстановитьЗаголовок();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);


КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьТипОбъектаРасчетов();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ТипОперации", Объект.ТипОперации);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДополнятьНомераПриИзменении(Элемент)
	
	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;
	Если НЕ ЗначениеЗаполнено(Объект.Префикс) И Объект.ДополнятьНомера Тогда
		Объект.Префикс = СформироватьПрефикс(Объект.Организация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)

	Объект.Префикс = СформироватьПрефикс(Объект.Организация);
	МассивПараметров = ПолучитьПараметрыВыбораОрганизацииПолучателя(Объект.ОрганизацияПолучатель);
	Элементы.Покупатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	ПроверитьИОчиститьОрганизациюПолучатель(Объект.Организация, Объект.ОрганизацияПолучатель);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыПоРеализациям

&НаКлиенте
Процедура РасчетыПоРеализацииТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.РасчетныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ТипРасчетовОбработкаВыбора(Элемент, СтрокаТаблицы, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииНомерРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	НомерДатаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииДатаРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	НомерДатаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	ВалютаВзаиморасчетовПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.РасчетыПоРеализации.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыПоАвансам

&НаКлиенте
Процедура РасчетыПоАвансамТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.РасчетныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ТипРасчетовОбработкаВыбора(Элемент, СтрокаТаблицы, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамНомерРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	НомерДатаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамДатаРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	НомерДатаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	ВалютаВзаиморасчетовПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.РасчетыПоАвансам.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасчетыПоРеализацииНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасчетыПоРеализацииДатаРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасчетыПоАвансамНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасчетыПоАвансамДатаРасчетногоДокумента.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыМеждуОрганизациями.РасчетныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыМеждуОрганизациями.ТипРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Договор с контрагентом';uk='Договір з контрагентом'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасчетыПоРеализацииТипРасчетов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасчетыПоАвансамТипРасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыМеждуОрганизациями.РасчетныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не указан';uk='Не зазначений'"));

КонецПроцедуры

#Область ОбщиеОбработчикиСобытийТабличныхЧастейРасчетыПоРеализациямИРасчетыПоАвансам

&НаКлиенте
Процедура ТипРасчетовОбработкаВыбора(Элемент, СтрокаТаблицы, ВыбранноеЗначение)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = "Выбор" Тогда
		
		ЗначенияОтбора = Новый Структура;
		ЗначенияОтбора.Вставить("Организация", Объект.Организация);
		ЗначенияОтбора.Вставить("Контрагент",  Объект.ОрганизацияПолучатель);
		
		НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
		НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
		НастройкиВыбора.ЭтоРасчетыСКлиентами  = Истина;
		
		ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(ВыбранноеЗначение.Заказ));
		СтрокаТаблицы.ДатаРасчетногоДокумента = ВыбранноеЗначение.Дата;
		СтрокаТаблицы.НомерРасчетногоДокумента = ВыбранноеЗначение.Номер;
		СтрокаТаблицы.РасчетныйДокумент = ВыбранноеЗначение.Заказ;
		СтрокаТаблицы.ВалютаВзаиморасчетов = ВыбранноеЗначение.ВалютаВзаиморасчетов;
		
	Иначе
		
		Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) <> ТипЗнч(ВыбранноеЗначение) Тогда
			Если ВыбранноеЗначение = НСтр("ru='Не указан';uk='Не зазначений'") Тогда
				СтрокаТаблицы.РасчетныйДокумент = Неопределено;;
				СтрокаТаблицы.ТипРасчетов = ВыбранноеЗначение;
				СтрокаТаблицы.ДатаРасчетногоДокумента = Дата(1,1,1);
				СтрокаТаблицы.НомерРасчетногоДокумента = "";
			Иначе
				СтрокаТаблицы.РасчетныйДокумент = ВыбранноеЗначение;
				СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(ВыбранноеЗначение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДатаПриИзменении(ТекущиеДанные)
	
	ДополнитьНомер(ТекущиеДанные.НомерРасчетногоДокумента);
	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПодобратьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(СтрокаТаблицы)
	
	Если СтрокаТаблицы.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.СуммаРегл = СтрокаТаблицы.Сумма;
	Иначе
		СтрокаТаблицы.СуммаРегл = РассчитатьСуммуРегл(СтрокаТаблицы.Сумма, СтрокаТаблицы.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Сумма <> 0 Тогда
		СуммаПриИзменении(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	УстановитьВидимость();
	
	МассивПараметров = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель)
		И ФОИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные"));
	КонецЕсли;
	Элементы.Покупатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;
	ЗаполнитьТипОбъектаРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаРасчетыПоРеализации.Видимость = Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям;
	Элементы.ГруппаРасчетыПоАвансам.Видимость = Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	АвтоЗаголовок = Ложь;
	Заголовок = Документы.ВводОстатков.ЗаголовокДокументаПоТипуОперации(Объект.Ссылка,
																						  Объект.Номер,
																						  Объект.Дата,
																						  Объект.ТипОперации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПрефикс(Организация)
	
	Возврат Документы.ВводОстатков.УстановитьПрефикс(Организация);
	
КонецФункции

&НаКлиенте
Процедура ДополнитьНомер(Номер)
		
	Если Не Объект.ДополнятьНомера
		Или Не ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СокрЛП(Номер);
	
	Разделитель = ?(ПустаяСтрока(Объект.Префикс), "", "-");
	
	Начало = СокрЛП(Объект.Префикс) + Разделитель;
	
	Пока СтрДлина(Результат) < 11 - СтрДлина(Начало) Цикл
		Результат = "0" + Результат;
	КонецЦикла;
	
	Если СтрДлина(Результат) <= 11 - СтрДлина(Начало) Тогда
		Результат = Начало + Результат;
	КонецЕсли;
	
	Номер = Результат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораТипаРасчетов()
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		СписокВыбора = Элементы.РасчетыПоРеализацииТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("Не указан", НСтр("ru='Не указан';uk='Не зазначений'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru='Выбрать объект расчетов';uk='Вибрати об''єкт розрахунків'"));
		СписокВыбора.Добавить(Документы.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка(), НСтр("ru='Передача товаров';uk='Передача товарів'"));
		СписокВыбора.Добавить(Документы.ОтчетПоКомиссииМеждуОрганизациями.ПустаяСсылка(), НСтр("ru='Отчет по комиссии между организациями';uk='Звіт з комісії між організаціями'"));
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам Тогда
		СписокВыбора = Элементы.РасчетыПоАвансамТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("Не указан", НСтр("ru='Не указан';uk='Не зазначений'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru='Выбрать объект расчетов';uk='Вибрати об''єкт розрахунків'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипОбъектаРасчетов()
	
	Для Каждого СтрокаТаблицы Из Объект.РасчетыМеждуОрганизациями Цикл
		СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(СтрокаТаблицы.РасчетныйДокумент));
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораОрганизацииПолучателя(ОрганизацияПокупатель)
	
	МассивПараметров = Новый Массив;
	Если ЗначениеЗаполнено(ОрганизацияПокупатель)
		И ФОИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные"));
	КонецЕсли;
	Возврат МассивПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьИОчиститьОрганизациюПолучатель(Организация, ОрганизацияПолучатель)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
		И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
		ОрганизацияПолучатель = Неопределено;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор)
	
	ИмяТЧ = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(Объект.ТипОперации);
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Документы.ВводОстатков.ПодобратьДокументРасчетов(Объект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуРегл(Сумма, Валюта, ВалютаРегламентированногоУчета, ДатаДокумента)
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		СуммаРегл = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаРегламентированногоУчета, ДатаДокумента);
		СуммаРегл = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Возврат СуммаРегл;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВалютуВзаиморасчетовВСтроке(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) И Не ИспользоватьНесколькоВалют Тогда
		Строка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Обеспечение

// Получает оформленное накладными по заказам количество.
//
// Параметры:
//  ТаблицаОтбора - ТаблицаЗначений - Таблица с полями "Ссылка" и "КодСтроки", строки должны быть уникальными.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с полями "Ссылка", "КодСтроки", "Количество". Для каждой пары Заказ-КодСтроки содержит
//                    оформленное накладными количество.
//
Функция ТаблицаОформлено(ТаблицаОтбора) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка    КАК Ссылка,
		|	Таблица.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВтОтбор
		|ИЗ
		|	&ТаблицаОтбора КАК Таблица
		|ГДЕ
		|	Таблица.КодСтроки > 0
		|;
		|
		|////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отбор.КодСтроки КАК КодСтроки,
		|	Отбор.Ссылка    КАК Ссылка,
		|	МАКСИМУМ(РегистрЗаказы.Номенклатура)   КАК Номенклатура,
		|	МАКСИМУМ(РегистрЗаказы.Характеристика) КАК Характеристика,
		|	МАКСИМУМ(РегистрЗаказы.ЗаказНаПеремещение.СкладОтправитель) КАК Склад,
		|	МАКСИМУМ(РегистрЗаказы.Серия)          КАК Серия,
		|	СУММА(РегистрЗаказы.КОформлению) КАК Количество
		|ИЗ
		|	ВтОтбор КАК Отбор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПеремещение КАК РегистрЗаказы
		|		ПО РегистрЗаказы.ЗаказНаПеремещение = Отбор.Ссылка
		|		 И РегистрЗаказы.КодСтроки = Отбор.КодСтроки
		|		 И РегистрЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		 И РегистрЗаказы.КОформлению <> 0
		|		 И РегистрЗаказы.Активность
		|СГРУППИРОВАТЬ ПО
		|	Отбор.Ссылка, Отбор.КодСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Таблица.Индексы.Добавить("Ссылка, КодСтроки");
	
	Возврат Таблица;
	
КонецФункции

//Возвращает текст запроса заказанного количества из заказов, согласно отборам компоновки.
//Строки заказов с вариантами обеспечения Отгрузить и Отгрузить обособленно не учитываются.
//Текст запроса используется в обработке "Состояние обеспечения" для получения заказанного по заказам количества.
//
//Параметры:
//	ЕстьФильтр - Булево - Признак, определяющий необходимость предварительной фильтрации выборки по заказам,
//	                      передаваемым параметром "Заказы".
//
//Возвращаемое значение:
//	Строка - Текст запроса.
//
Функция ТекстЗапросаЗаказовКОбеспечению(ЕстьФильтр) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.ЗаказНаПеремещение    КАК Заказ,
		|	Т.КодСтроки             КАК КодСтроки,
		|	Т.ЗаказаноОстаток - Т.КОформлениюОстаток КАК Количество
		|ПОМЕСТИТЬ ВтРегистрЗаказыНаПеремещение
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
		|		{ЗаказНаПеремещение.* КАК Заказ} ЗаказНаПеремещение В (&Заказы)) КАК Т
		|ГДЕ
		|	Т.ЗаказаноОстаток > Т.КОформлениюОстаток
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ, КодСтроки
		|;
		|
		|////////////////////////////////////////////
		|";

	Если Не ЕстьФильтр Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ЗаказНаПеремещение В (&Заказы)", "");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

//Возвращает текст запроса заказов, согласно отборам компоновки.
//Строки заказов с вариантами обеспечения Отгрузить и Отгрузить обособленно не учитываются.
//Текст запроса используется в обработке "Состояние обеспечения" для получения заказов,
//содержащих указанную номенклатуру на указанном складе.
//
//Возвращаемое значение:
// Строка - текст запроса.
//
Функция ТекстЗапросаЗаказовНоменклатуры() Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.ЗаказНаПеремещение КАК Заказ
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
		|		{ЗаказНаПеремещение.СкладОтправитель.* КАК Склад, Номенклатура.* КАК Номенклатура}) КАК Т
		|ГДЕ
		|	Т.ЗаказаноОстаток > Т.КОформлениюОстаток";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область Состояния

// Возвращает текст запроса для расчета количества товара которое осталось отгрузить
// 
// Возвращаемое значение:
//   - Строка
//
Функция ВременнаяТаблицаОстаткиЗаказов() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ЗаказНаПеремещение КАК Распоряжение,
		|	Таблица.ЗаказаноОстаток    КАК КоличествоЗаказано
		|ПОМЕСТИТЬ ВтОстаткиЗаказов
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение В(&МассивЗаказов)) КАК Таблица";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Возвращает незакрытые (не полностью оформленные) заказы
//
// Параметры:
//  Склад						 - СправочникСсылка.Склады - 
//  ДатаПроверкиОрдерногоСклада	 - Дата - Дата начала применения ордерной схемы на складе
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция РаспоряженияРМВнутреннееТовародвижение(Склад, РаспоряженияДляПересчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаПеремещениеОстаткиИОбороты.КОформлениюРасход,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.КОформлениюПриход,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение КАК Ссылка,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладОтправитель КАК Склад,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладПолучатель КАК СкладПолучатель,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА Склады.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ КАК СостояниеОрдера,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В ПРИХОДНОМ ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА СкладыПолучатели.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ КАК СостояниеПриходногоОрдера
	|ПОМЕСТИТЬ втДанныеРегистраПоДокументуВЦелом
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.ОстаткиИОбороты() КАК ЗаказыНаПеремещениеОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладОтправитель = Склады.Ссылка
	|			И (Склады.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыПолучатели
	|		ПО ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладПолучатель = СкладыПолучатели.Ссылка
	|			И (СкладыПолучатели.ИспользоватьОрдернуюСхемуПриПоступлении)
	|			И (СкладыПолучатели.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)
	|
	|//ТекстУсловия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаПеремещениеОстаткиИОбороты.Номенклатура,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.Характеристика,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.Серия,
	|	ВЫБОР
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ И КОНКРЕТНАЯ СТРОКА ПОЛНОСТЬЮ ОФОРМЛЕНА
	|		КОГДА ЗаказыНаПеремещениеОстаткиИОбороты.КОформлениюКонечныйОстаток = 0
	|			И ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 0
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СостояниеНакладной,
	|	ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение КАК Ссылка,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.СкладПолучатель КАК СкладПолучатель,
	|	ДанныеДокумента.СостояниеОрдера КАК СостояниеОрдера,
	|	ДанныеДокумента.СостояниеПриходногоОрдера КАК СостояниеПриходногоОрдера
	|ПОМЕСТИТЬ втДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.ОстаткиИОбороты() КАК ЗаказыНаПеремещениеОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеРегистраПоДокументуВЦелом КАК ДанныеДокумента
	|		ПО ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение = ДанныеДокумента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(втДанныеРегистра.Ссылка) КАК Тип,
	|	МАКСИМУМ(втДанныеРегистра.СостояниеНакладной) КАК СостояниеНакладной,
	|	втДанныеРегистра.Ссылка КАК Ссылка,
	|	втДанныеРегистра.Склад,
	|	втДанныеРегистра.СкладПолучатель,
	|	МАКСИМУМ(втДанныеРегистра.СостояниеОрдера) КАК СостояниеОрдера,
	|	МАКСИМУМ(втДанныеРегистра.СостояниеПриходногоОрдера) КАК СостояниеПриходногоОрдера
	|ИЗ
	|	втДанныеРегистра КАК втДанныеРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(втДанныеРегистра.Ссылка),
	|	втДанныеРегистра.Ссылка,
	|	втДанныеРегистра.Склад,
	|	втДанныеРегистра.СкладПолучатель
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(втДанныеРегистра.СостояниеНакладной) > 0";
	
	ТекстУсловийВиртуальнойТаблицы = "";
	ТекстУсловия = "";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстУсловия = "ГДЕ ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладОтправитель = &Склад ИЛИ 
			|ЗаказыНаПеремещениеОстаткиИОбороты.ЗаказНаПеремещение.СкладПолучатель = &Склад";
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловийВиртуальнойТаблицы = "ЗаказНаПеремещение В (&Распоряжения)";
		Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийВиртуальнойТаблицы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОстаткиИОбороты(", "ОстаткиИОбороты(" + ", , , , " + ТекстУсловийВиртуальнойТаблицы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловия) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстУсловия", ТекстУсловия);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаПеремещение) Тогда
		Результат = Запрос.Выполнить().Выгрузить();
		Возврат Результат;
	Иначе
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;
	
КонецФункции

// Возвращает остаток к оформлению по переданному списку заказов
//
// Параметры:
//  МассивЗаказов		 - Массив - Массив заказов
//  ИсключаемаяНакладная - ДокументСсылка.ПеремещениеТоваров - Накладная, движения которой необходимо исключить из результата
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов, ИсключаемаяНакладная = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("ИсключаемаяНакладная", ИсключаемаяНакладная);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Распоряжение          КАК Распоряжение,
	|	Таблица.Номенклатура          КАК Номенклатура,
	|	Таблица.Характеристика        КАК Характеристика,
	|	Таблица.КодСтроки             КАК КодСтроки,
	|	Таблица.Серия                 КАК Серия,
	|	СУММА(Таблица.Количество)     КАК Количество,
	|	Таблица.ЗаказНаПеремещение    КАК ЗаказНаПеремещение,
	|	Таблица.Назначение            КАК Назначение,
	|	Таблица.НазначениеОтправителя КАК НазначениеОтправителя
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ЗаказНаПеремещение КАК Распоряжение,
	|		Таблица.Номенклатура       КАК Номенклатура,
	|		Таблица.Характеристика     КАК Характеристика,
	|		Таблица.КодСтроки          КАК КодСтроки,
	|		Таблица.Серия              КАК Серия,
	|		Таблица.КОформлениюОстаток КАК Количество,
	|		Таблица.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|		ТаблицаЗаказа.Назначение   КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаЗаказа.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаЗаказа.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|							ТОГДА ТаблицаЗаказа.Ссылка.Назначение
	|						ИНАЧЕ ТаблицаЗаказа.Назначение
	|					КОНЕЦ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                      КАК НазначениеОтправителя
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение В (&Заказы)) КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ТаблицаЗаказа
	|			ПО Таблица.ЗаказНаПеремещение = ТаблицаЗаказа.Ссылка
	|				И Таблица.КодСтроки = ТаблицаЗаказа.КодСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.ЗаказНаПеремещение,
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика,
	|		Таблица.КодСтроки,
	|		Таблица.Серия,
	|		Таблица.КОформлениюРасход,
	|		Таблица.ЗаказНаПеремещение,
	|		ТаблицаЗаказа.Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаЗаказа.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаЗаказа.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|							ТОГДА ТаблицаЗаказа.Ссылка.Назначение
	|						ИНАЧЕ ТаблицаЗаказа.Назначение
	|					КОНЕЦ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение.Обороты(, , Регистратор, ЗаказНаПеремещение В (&Заказы)) КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ТаблицаЗаказа
	|			ПО Таблица.ЗаказНаПеремещение = ТаблицаЗаказа.Ссылка
	|				И Таблица.КодСтроки = ТаблицаЗаказа.КодСтроки
	|	ГДЕ
	|		Таблица.Регистратор = &ИсключаемаяНакладная) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Распоряжение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.КодСтроки,
	|	Таблица.Серия,
	|	Таблица.ЗаказНаПеремещение,
	|	Таблица.Назначение,
	|	Таблица.НазначениеОтправителя";
	
	КодыСтрокЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат КодыСтрокЗаказов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


Процедура ИсправитьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ЗаказыНаПеремещение";
	ИмяРегистра       = "ЗаказыНаПеремещение";
	
#Область ЗаказНаПеремещение
	ТекстЗапросаАдаптированный = Документы.ЗаказНаПеремещение.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ЗаказНаПеремещение"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ПеремещениеТоваров
	ТекстЗапросаАдаптированный = Документы.ПеремещениеТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ПеремещениеТоваров"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТЧДокумента
	|ГДЕ
	|	ТЧДокумента.Ссылка.Проведен
	|	И (ТЧДокумента.СтатусУказанияСерий = 10
	|		И ТЧДокумента.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|	ИЛИ (ТЧДокумента.СтатусУказанияСерий В (11, 15)
	|		И НЕ ТЧДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ТЧДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТЧДокумента
	|ГДЕ
	|	ТЧДокумента.Ссылка.Проведен
	|	И ТЧДокумента.СтатусУказанияСерий = 10
	|	И ТЧДокумента.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ЗаказыНаПеремещение";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
// Заполняет измерение ""Серия"" в регистре ""Заказы на внутреннее потребление"" для серий со статусом указания серий 10.
Процедура ИсправитьДвижения(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ЗаказНаПеремещение");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
	    "РегистрНакопления.ЗаказыНаПеремещение",
	    Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#КонецЕсли

#Область ПрограммныйИнтерфейс

#Область ПолученияСтруктурКэшируемыхЗначений

Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбъемУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("ВесУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",				Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиРасходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиДоходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",			Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах",	Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",			Неопределено);  
	КэшированныеЗначения.Вставить("ПравоРегистрацииШтрихкодовНоменклатурыДоступно",	Неопределено);
	КэшированныеЗначения.Вставить("ПринимаетсяКНУ", Новый Соответствие);
	
	КэшированныеЗначения.Вставить("ПризнакиКатегорииЭксплуатации", Новый Соответствие);
	СтруктураПустойКатегории = Новый Структура;
	СтруктураПустойКатегории.Вставить("СрокЭксплуатации", 0);
	
	КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Вставить(ПредопределенноеЗначение("Справочник.КатегорииЭксплуатации.ПустаяСсылка"), СтруктураПустойКатегории);
	
    
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначения()

Функция СтуктураКешируемойИнформацииПоШтрихкоду() Экспорт
	
	ИнформацияПоШтрихкоду = Новый Структура;
	
	ИнформацияПоШтрихкоду.Вставить("Номенклатура");
	ИнформацияПоШтрихкоду.Вставить("ТипНоменклатуры");
	ИнформацияПоШтрихкоду.Вставить("Характеристика");
	ИнформацияПоШтрихкоду.Вставить("Упаковка");
	ИнформацияПоШтрихкоду.Вставить("ХарактеристикиИспользуются");
	ИнформацияПоШтрихкоду.Вставить("Коэффициент",              1);
	ИнформацияПоШтрихкоду.Вставить("ЕдиницаИзмерения");
	ИнформацияПоШтрихкоду.Вставить("ЕдиничнаяУпаковка");
	ИнформацияПоШтрихкоду.Вставить("НесколькоЕдиничныхУпаковок");
	ИнформацияПоШтрихкоду.Вставить("УпаковочныйЛист",          ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("НеизвестныйШтрихкод",      Истина);
	ИнформацияПоШтрихкоду.Вставить("Штрихкод",                 "");
	ИнформацияПоШтрихкоду.Вставить("КоличествоПоШтрихкоду",    0);
	ИнформацияПоШтрихкоду.Вставить("КоличествоУпаковок",       1);
	ИнформацияПоШтрихкоду.Вставить("ШтрихкодНеИзКэша",         Неопределено);
	ИнформацияПоШтрихкоду.Вставить("НоменклатураНабора",       ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ХарактеристикаНабора",     ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ВариантРасчетаЦеныНабора", ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка"));
	ИнформацияПоШтрихкоду.Вставить("ВыполненныеДействия",      Новый Структура("Добавлено, Изменено", Ложь, Ложь));
	ИнформацияПоШтрихкоду.Вставить("Назначения",               Неопределено);
	
	Возврат ИнформацияПоШтрихкоду;
	
КонецФункции

Функция ПолучитьСтруктуруКэшируемыеЗначенияУслуг() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("ПроцентыСтавокНДС",    Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",            Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",         Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",         Неопределено);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначенияУслуг()

#КонецОбласти

#Область ПолучениеСтруктурПараметровДляОбработкиТабличнойЧастиТовары

Функция ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, ЦенаВключаетНДС = Неопределено) Экспорт

	Возврат Новый Структура("Дата, ЦенаВключаетНДС", ?(НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Дата"), '00010101', Объект.Дата), ?(ЦенаВключаетНДС <> Неопределено, ЦенаВключаетНДС, Объект.ЦенаВключаетНДС));
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	СтруктураЗаполненияЦены.Вставить("Партнер",    Объект.Партнер);
	СтруктураЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	СтруктураЗаполненияЦены.Вставить("Ссылка",     Объект.Ссылка);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",    Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",  Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Склад", 	Объект.Склад);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, ПередачаНаКомиссию = Ложь, ИмяКоличества = "КоличествоУпаковок") Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	Если Не ПередачаНаКомиссию Тогда
		СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
		СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
	КонецЕсли;
	
	СтруктураЗаполненияЦены.Вставить("ИмяКоличества", ИмяКоличества);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект, ПриемНаКомиссию) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	Если Не ПриемНаКомиссию Тогда
		СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	КонецЕсли;
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

Функция ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуДляПользователя) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка",                             Объект.Ссылка);
	СтруктураПараметров.Вставить("Партнер",                            Объект.Партнер);
	СтруктураПараметров.Вставить("НеВыполнятьПроверкуДляПользователя", НеВыполнятьПроверкуДляПользователя);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Склад",       Объект.Склад);
	СтруктураПараметров.Вставить("СкладГруппа", СкладГруппа);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, ЗаполнятьДляВсехУслуг) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
	
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект, ЦенаВключаетНДС = Неопределено) Экспорт	
	
	Возврат Новый Структура("Дата, ЦенаВключаетНДС", Объект.Дата, ?(ЦенаВключаетНДС <> Неопределено, ЦенаВключаетНДС, Объект.ЦенаВключаетНДС));
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияСтавкиНДС(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Дата"       , Объект.Дата);
	Результат.Вставить("Организация", Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияПризнакаБезВозвратнойТары(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВернутьМногооборотнуюТару" , Объект.ВернутьМногооборотнуюТару);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПересчетаИЗаполненияКлиентСервер

Процедура ЗаполнитьРасхождения(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу;
	ТекущаяСтрока.ЕстьРасхождения               = (ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока)
	
	ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу;
	ТекущаяСтрока.СуммаРасхождения              = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаПоДокументу;
	ТекущаяСтрока.СуммаНДСРасхождения           = ТекущаяСтрока.СуммаНДС - ТекущаяСтрока.СуммаНДСПоДокументу;
	ТекущаяСтрока.СуммаСНДСРасхождения          = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаСНДСПоДокументу;
	ТекущаяСтрока.ЕстьРасхождения               = (ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0);
	
КонецПроцедуры

Процедура ЗаполнитьРасхожденияПослеОтгрузки(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасхожденияПослеПриемки(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьРасхожденияВСтрокеАкта(ТекущаяСтрока);
	
	Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы")) Тогда
		
		ТекущаяСтрока.Действие    = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
		ТекущаяСтрока.ПоВинеСтороннейКомпании = Ложь;
		
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 
		И (ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное")
		ИЛИ ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть")) Тогда
		
		ТекущаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияКомментарияПриемка(ТекущаяСтрока, СтруктураДействий) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментарияПриемка") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийПоставщика = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийПоставщика);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияКомментарияОтгрузка(ТекущаяСтрока, СтруктураДействий) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментарияОтгрузка") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийКлиента = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийКлиента);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияКомментария(ТекущаяСтрока, СтруктураДействий) Экспорт

	Если НЕ СтруктураДействий.Свойство("ПризнакНаличиеКомментария") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЕстьКомментарийПолучателя = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийПолучателя);
	ТекущаяСтрока.ЕстьКомментарийМенеджера = НЕ ПустаяСтрока(ТекущаяСтрока.КомментарийМенеджера);

КонецПроцедуры

Процедура ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока.Штрихкод)
			И ТекущаяСтрока.ШтрихкодНеОпределен
			И (ТекущаяСтрока.ЭтоУпаковочныйЛист И Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист)
				Или Не ТекущаяСтрока.ЭтоУпаковочныйЛист И Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура))
		Или ТекущаяСтрока.ЭтоУпаковочныйЛист
			И ТекущаяСтрока.КоличествоЗаполненныхПодчиненныхПозиций = 0
		Или ТекущаяСтрока.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста Тогда
		ТекущаяСтрока.ТребуетсяОбработка = 1;
	Иначе
		ТекущаяСтрока.ТребуетсяОбработка = 0;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую поля для пересчета суммы в табличной части документа
//
// Параметры:
//  Реквизиты - Строка - Содержит имена полей, заданных через запятую,
//  ЗависимыеРеквизиты - Структура - структура, каждое элемент которой есть структура с именами реквизитов без префикса,
//                       ключ элемента содержит префикс. Например Новый Структура("Тара", "Сумма, СуммаНДС") означает
//                       наличие реквизитов: "СуммаТара" и "СуммаНДСТара".
//  ИмяПоляКоличество     - Строка - Имя поля, по которому считается коэффициент пропорциональности.
//  РазрядностиОкругления - Структура - структура, в формате ИмяПоля => Количество знаков дробной части, которая будет
//                                      использоваться при пересчете реквизитов.
//
// Возвращаемое значение:
//  Структура - Структура со следующими полями:
//              Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Функция СтруктураПересчетаСуммы(Реквизиты, ЗависимыеРеквизиты = Неопределено, ИмяПоляКоличество = "Количество", РазрядностиОкругления = Неопределено) Экспорт

	Поля = Новый Структура(Реквизиты);
	Если ЗависимыеРеквизиты <> Неопределено Тогда
		
		Для Каждого ПолеСтруктуры Из ЗависимыеРеквизиты цикл

			Реквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Поле Из Реквизиты цикл
				Поля.Вставить(Поле.Ключ + ПолеСтруктуры.Ключ);
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Поля);
	Результат.Вставить("Строки", Новый Массив());
	Результат.Вставить("ИтогКоличество", 0);
	Результат.Вставить("ИмяПоляКоличество", ИмяПоляКоличество);
	Результат.Вставить("РазрядностиОкругления", РазрядностиОкругления);

	Возврат Результат;

КонецФункции

// Инициализирует структуру для пересчета суммы в табличной части документа
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура подлежащая инициализации, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//  ДанныеЗаполнения - ДанныеФормыЭлементКоллекции - строка, содержащая значения суммовых показателей,
//                     которые необходимо будет распределить между строками при пересчете сумм.
//
// Возвращаемое значение:
//  Структура - Структура со следующими полями:
//              Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Процедура ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ДанныеЗаполнения) Экспорт

	ЗаполнитьЗначенияСвойств(СтруктураПересчетаСуммы.Поля, ДанныеЗаполнения);

	СтруктураПересчетаСуммы.ИтогКоличество = 0;
	СтруктураПересчетаСуммы.Строки.Очистить();

КонецПроцедуры

// Добавляет строку для пересчета суммы в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//  Строка - ДанныеФормыЭлементКоллекции - строка, для которой необходимо рассчитать значения сумм.
//
Процедура ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, Строка) Экспорт

	СтруктураПересчетаСуммы.Строки.Добавить(Строка);
	СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество + Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

Конецпроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы) Экспорт
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		Если ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковокВДокументе - ТекущаяСтрока.КоличествоУпаковокВДокументеНеотгружаемые Тогда
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок - (ТекущаяСтрока.КоличествоУпаковокВДокументе - ТекущаяСтрока.КоличествоУпаковокВДокументеНеотгружаемые);
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковокФакт;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем УпаковкаНоменклатура;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", УпаковкаНоменклатура) Тогда
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура);
		ДанныеУпаковки = ПолучитьКоэффициентУпаковки(ПараметрыПересчета.Упаковка, КэшированныеЗначения, ПараметрыПересчета.Номенклатура);
		Количество = ТекущаяСтрока.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;

		Если ДанныеУпаковки.НужноОкруглятьКоличество
			И ПараметрыПересчета.НужноОкруглять Тогда
			ТекущаяСтрока.Количество = Окр(Количество, 0 ,РежимОкругления.Окр15как20);	
		Иначе
			ТекущаяСтрока.Количество = Количество;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ПараметрыПересчетаСуффикс;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаСуффикс) Тогда
		
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчетаСуффикс);
		ДанныеУпаковки = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура);
		
		Количество = ТекущаяСтрока["КоличествоУпаковок" + ПараметрыПересчета.Суффикс] * ДанныеУпаковки.Коэффициент;
		
		Если ДанныеУпаковки.НужноОкруглятьКоличество
			И ПараметрыПересчета.НужноОкруглять Тогда
			ТекущаяСтрока["Количество" + ПараметрыПересчета.Суффикс] = Окр(Количество, 0 ,РежимОкругления.Окр15как20);	
		Иначе
			ТекущаяСтрока["Количество" + ПараметрыПересчета.Суффикс] = Количество;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество
			/ ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем ПараметрыПересчетаСуффикс;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",ПараметрыПересчетаСуффикс) Тогда
		
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчетаСуффикс);
		
		ТекущаяСтрока["КоличествоУпаковок" + ПараметрыПересчета.Суффикс] = ТекущаяСтрока["Количество" + ПараметрыПересчета.Суффикс] 
		   / ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоОтклонение(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем ЕстьУпаковки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение", ЕстьУпаковки) Тогда
		ТекущаяСтрока.КоличествоОтклонение = ТекущаяСтрока.КоличествоФакт - ТекущаяСтрока.Количество;
		Если ЕстьУпаковки Тогда
			ТекущаяСтрока.КоличествоУпаковокОтклонение = ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт 

	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока["КоличествоУпаковок"] + ТекущаяСтрока["КоличествоУпаковокОтклонение"];
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.ЦенаЗаказа = ТекущаяСтрока.ЦенаЗаказа
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ЭтоВозвратнаяТара;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара)
		И ЭтоВозвратнаяТара И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНалоговоеНазначениеВозвратнойТарыВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ЭтоВозвратнаяТара;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНалоговоеНазначениеВозвратнойТары", ЭтоВозвратнаяТара)
		И ЭтоВозвратнаяТара И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		ТекущаяСтрока.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", ИмяКоличества) Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"; 
		КонецЕсли;
			
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"
		Конецесли;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуВСтрокеТЧРасхождения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ТекущаяСтрока.КоличествоУпаковокПоДокументу = 0 Тогда
				ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			Иначе
				ДоляРасхождения = ТекущаяСтрока.КоличествоУпаковок / ТекущаяСтрока.КоличествоУпаковокПоДокументу;
				ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаПоДокументу * ДоляРасхождения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры



Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества",ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
		КонецЕсли;
	#КонецЕсли
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И ТекущаяСтрока.Цена = 0 Тогда
					ТекущаяСтрока.СуммаРучнойСкидки = 0;
					ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				ИначеЕсли ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества",ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
		КонецЕсли;
	#КонецЕсли
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				
				Если ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи") Тогда
		
		ТекущаяСтрока.ЦенаПродажи = ?(ТекущаяСтрока.КоличествоУпаковок <> 0, Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока.КоличествоУпаковок, 2, 1), 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
			ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуРучнойСкидки = Неопределено;
		ИмяКоличества = Неопределено;
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуРучнойСкидки", ПересчитыватьСуммуРучнойСкидки);
			СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества);
			
			Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуРучнойСкидки = Ложь Тогда
			
		Иначе
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
			
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами", СтруктураПараметровДействия) Тогда
		
		Скидка = ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуБезНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем КоэффициентПересчетаИзВалютыУпрВРегл;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл) Тогда
		ТекущаяСтрока.СуммаРегл = Окр(ТекущаяСтрока.СуммаБезНДС * КоэффициентПересчетаИзВалютыУпрВРегл, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуПРВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПР") И НЕ ТекущаяСтрока.ПринимаетсяКНУ Тогда
		ТекущаяСтрока.СуммаПР = ТекущаяСтрока.СуммаРегл;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьНДСРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем КоэффициентПересчетаИзВалютыУпрВРегл;
	
	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл", КоэффициентПересчетаИзВалютыУпрВРегл) Тогда
		ТекущаяСтрока.НДСРегл = Окр(ТекущаяСтрока.СуммаНДС * КоэффициентПересчетаИзВалютыУпрВРегл, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСиАкцизногоНалогаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСиАкцизногоНалога", СтруктураПараметровДействия) Тогда
		
		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
		Если УчетАкцизногоНалога.ДействуетАкцизныйНалог(СтруктураПараметровДействия.Дата) Тогда
			ТекущаяСтрока.СуммаАкцизногоНалога = УчетАкцизногоНалога.РассчитатьСуммуАкцизногоНалога(
												 		ТекущаяСтрока.Сумма, 
														СтруктураПараметровДействия.ЦенаВключаетНДС, 
														ТекущаяСтрока.СтатьяДекларацииПоАкцизномуНалогу, 
														ТекущаяСтрока.ПодакцизныеТоварыДляКоммерческогоИспользования
														);
		Иначе
			ТекущаяСтрока.СуммаАкцизногоНалога = 0;
		КонецЕсли; 
		
		ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАкцизногоНалога, ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСПропорциональноВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПропорционально", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально") Тогда
			
			ТекКоэффициент = СтруктураПараметровДействия.КоэффициентПропорциональногоОтнесенияНДСНаОбязательства;
			ТекущаяСтрока.СуммаНДСПропорционально = ТекущаяСтрока.СуммаНДС * ТекКоэффициент;
		
		Иначе
		
			ТекущаяСтрока.СуммаНДСПропорционально = 0;
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.ЦенаПродажи * ТекущаяСтрока.КоличествоУпаковок;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия = Неопределено Или Не СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		ТекущийПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
		ТекущаяСтрока.СуммаПродажиНДС = Окр(ТекущаяСтрока.СуммаПродажи * ТекущийПроцентНДС / (1 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьАктивностьСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		ТекущаяСтрока.Активность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьНазначениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Назначение = Неопределено;
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение", Назначение) Тогда
		
		ТекущаяСтрока.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		
		Если Назначение <> Неопределено Тогда
			
			Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				
				ТекущаяСтрока.Назначение = Назначение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФлагиРасхождениеИИзлишекПорча(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда
		ТекущаяСтрока.Расхождение = (ТекущаяСтрока.КоличествоУпаковок <> ТекущаяСтрока.КоличествоУпаковокФакт);		
	КонецЕсли;
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда
		ТекущаяСтрока.КоличествоУпаковокОтклонение = ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		ТекущаяСтрока.ИзлишекПорча = Истина;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		ТекущаяСтрока.СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСуммуВознагражденияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаВознаграждения = 0;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПартнера(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьПартнера") Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
			ТекущаяСтрока.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруГТД(ТекущаяСтрока, СтруктураДействий) Экспорт

	Если Не СтруктураДействий.Свойство("ЗаполнитьНоменклатуруГТД") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.НомерГТД = Неопределено;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНоменклатуруГТД

Процедура ЗаполнитьСтатьюДекларацииПоАкцизномуНалогу(ТекущаяСтрока, СтруктураДействий) Экспорт

	Если Не СтруктураДействий.Свойство("ЗаполнитьСтатьюДекларацииПоАкцизномуНалогу") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.СтатьяДекларацииПоАкцизномуНалогу = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПризнакБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.БезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОтмененоБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.ОтмененоБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И ТекущаяСтрока.Отменено;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАктивностьБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.АктивностьБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И ТекущаяСтрока.Активность;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДубликатыЗависимыхРеквизитов(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	Если Не СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", ПараметрСтруктурыДействий) Тогда
		Возврат;
	КонецЕсли;
	
	// ПараметрСтруктурыДействий - Структура
	// 		Ключ: Имя реквизита флага активности
	// 		Значение: Строка с перечислением через запятую имен зависимых реквизитов
	
	Для Каждого ПолеСтруктуры Из ПараметрСтруктурыДействий Цикл
		
		ИмяФлагаАктивности = ПолеСтруктуры.Ключ;
		ЗначениеФлагаАктивности = ТекущаяСтрока[ИмяФлагаАктивности];
		
		ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
		Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
			ТекущаяСтрока[Реквизит.Ключ+ИмяФлагаАктивности] = ?(
				ЗначениеФлагаАктивности,
				ТекущаяСтрока[Реквизит.Ключ],
				0);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьСуммуСверхЗаказаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа", СтруктураПараметровДействия) Тогда
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "СуммаСверхЗаказа") Тогда
			ТекущаяСтрока.СуммаСверхЗаказа = ?(СтруктураПараметровДействия.РеализацияПоступлениеПоЗаказу И ТекущаяСтрока.КодСтроки = 0, 
			                                 ?(СтруктураПараметровДействия.ТребуетсяЗалогЗаТару, ТекущаяСтрока.СуммаСНДС, ТекущаяСтрока.СуммаСНДСБезВозвратнойТары), 0);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


Процедура НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("НоменклатураПриИзмененииПереопределяемый", ПараметрыДействия) Тогда
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		МодификацияКонфигурацииПереопределяемый.НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	#Иначе
		МодификацияКонфигурацииКлиентПереопределяемый.НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ХарактеристикаПриИзмененииПереопределяемый", ПараметрыДействия) Тогда
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		МодификацияКонфигурацииПереопределяемый.ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	#Иначе
		МодификацияКонфигурацииКлиентПереопределяемый.ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиКатегорииЭксплуатации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		
		СтруктураПризнаков = КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Получить(
			ТекущаяСтрока.КатегорияЭксплуатации);
			
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если СтруктураПризнаков = Неопределено Тогда
			СтруктураПризнаков = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущаяСтрока.КатегорияЭксплуатации,
				 "СрокЭксплуатации, ВидТМЦ");
			КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Вставить(
				ТекущаяСтрока.КатегорияЭксплуатации,
				СтруктураПризнаков);
		КонецЕсли;
	#КонецЕсли
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПризнаков);
		
	КонецЕсли;
	
КонецПроцедуры

 Процедура ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, СтруктураДействий) Экспорт
 	
 	ПараметрыДействия = Неопределено;
 	Если СтруктураДействий.Свойство("ЗаполнитьИндексАкцизнойМарки", ПараметрыДействия) Тогда
		Если ТекущаяСтрока.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека = Истина Тогда
 			
 			Если ПараметрыДействия <> Неопределено И ПараметрыДействия.Свойство("ИмяКолонкиКоличество") Тогда
 				ИмяКолонкиКоличество = ПараметрыДействия.ИмяКолонкиКоличество;
 			Иначе
 				ИмяКолонкиКоличество = "Количество";
 			КонецЕсли;
 			
			Если АкцизныеМаркиКлиентСерверПереопределяемый.КоличествоАкцизныхМарокСоответствуетКоличествуТовара(
				ТекущаяСтрока.КоличествоАкцизныхМарок, ТекущаяСтрока[ИмяКолонкиКоличество]) Тогда
				ТекущаяСтрока.ИндексАкцизнойМарки = 1;
 			Иначе
 				ТекущаяСтрока.ИндексАкцизнойМарки = 2;
 			КонецЕсли;
 		Иначе
 			ТекущаяСтрока.ИндексАкцизнойМарки = 0;
 		КонецЕсли;
 	КонецЕсли;
 	
 КонецПроцедуры


Процедура ПроверитьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяРасходов) Тогда
			ТекущаяСтрока.СтатьяРасходов = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.АналитикаРасходов) Тогда
			ТекущаяСтрока.АналитикаРасходов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет служебные реквизиты в строке списка товаров "ДатаОтгрузкиОбязательна" и "СкладОбязателен".
//
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции, Структура - данные обрабатываемой строки.
//  СтруктураДействий - Структура, если содержит свойство "ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
//                      то обработка данных строки будет произведена.
//                      свойство ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения - структура с двумя полями:
//                      "ЕстьРаботы" если значение свойства "Истина", значит в списке могут быть работы или услуги.
//                      "ЕстьОтменено" если значение свойства "Истина" значит в списке могут быть отмененные строки.
//
Процедура ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		
		ПараметрыДействия = СтруктураДействий.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения;
		Отменено = ПараметрыДействия.ЕстьОтменено И ТекущаяСтрока.Отменено;
		ЭтоРабота = ПараметрыДействия.ЕстьРаботы
			И(ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
				Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
			
		ТекущаяСтрока.ДатаОтгрузкиОбязательна = ?(Не Отменено И ТекущаяСтрока.ВариантОбеспечения
		                                        <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"), 1, 0);
		
		ЭтоПроизводство = ПараметрыДействия.Свойство("ЭтоПроизводство"); // Устанавливается в заказе материалов в производство, нарушает логику проверки склада.
		ТекущаяСтрока.СкладОбязателен = ?(Не ЭтоРабота И Не Отменено И (ТекущаяСтрока.ВариантОбеспечения
		                                <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
		                                Или ЭтоПроизводство), 1, 0);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрочиеПроцедуры

Функция НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура) Экспорт
	
	Если УпаковкаНоменклатура = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		Упаковка = ТекущаяСтрока.Упаковка;
		НужноОкруглять = Истина;
		
	ИначеЕсли ТипЗнч(УпаковкаНоменклатура) = Тип("Структура") Тогда
		
		Если УпаковкаНоменклатура.Свойство("Упаковка") Тогда
			Упаковка = УпаковкаНоменклатура.Упаковка;
		Иначе
			Упаковка = ТекущаяСтрока.Упаковка;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("Номенклатура") Тогда
			Номенклатура = УпаковкаНоменклатура.Номенклатура;
		Иначе
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = УпаковкаНоменклатура.НужноОкруглять;
		Иначе
			НужноОкруглять = Истина;
		КонецЕсли;
		
	Иначе
		Упаковка = УпаковкаНоменклатура;	
		Номенклатура = ТекущаяСтрока.Номенклатура;
		НужноОкруглять = Истина;
	КонецЕсли;

	Возврат Новый Структура("Номенклатура,Упаковка,НужноОкруглять", Номенклатура, Упаковка, НужноОкруглять); 
	
КонецФункции

Функция НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчета) Экспорт
	
	Суффикс = "";
	НужноОкруглять = Истина;
	
	Если ТипЗнч(ПараметрыПересчета) = Тип("Структура") Тогда
		
		Если ПараметрыПересчета.Свойство("Суффикс") Тогда
			Суффикс = ПараметрыПересчета.Суффикс;
		КонецЕсли;
		
		Если ПараметрыПересчета.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = ПараметрыПересчета.НужноОкруглять;
		КонецЕсли;
	Иначе
		Суффикс = ПараметрыПересчета;
	КонецЕсли;

	Если Суффикс = Неопределено Тогда
		Суффикс = "";
	КонецЕсли;
	
	Возврат Новый Структура("Суффикс,НужноОкруглять", Суффикс, НужноОкруглять); 
	
КонецФункции

Функция ПолучитьКоэффициентУпаковки(ТекУпаковка, КэшированныеЗначения, ТекНоменклатура = Неопределено) Экспорт

	Результат = Новый Структура("Коэффициент,НужноОкруглятьКоличество");
	
	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		КлючКоэффициента = КлючКэшаУпаковки(ТекНоменклатура, ТекУпаковка); 
		Кэш = КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента];
		Если Кэш = Неопределено Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ЗначенияРеквизитов = ОбработкаТабличнойЧастиСервер.ДанныеОбУпаковке(ТекНоменклатура, ТекУпаковка, КэшированныеЗначения);
				Результат.Коэффициент    		   =  ЗначенияРеквизитов.Коэффициент;
				Результат.НужноОкруглятьКоличество =  ЗначенияРеквизитов.НужноОкруглятьКоличество;
			#Иначе
				ТекстИсключения = НСтр("ru='Попытка получения коэффициента упаковки на клиенте.';uk='Спроба отримання коефіцієнта упаковки на клієнті.'");
				ВызватьИсключение ТекстИсключения;
			#КонецЕсли
		Иначе
			Результат = Кэш;
		КонецЕсли;
	Иначе
		Результат.Коэффициент = 1;
		Результат.НужноОкруглятьКоличество = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ПересчитатьКоличествоУпаковокПоВесу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу", Суффикс) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока.Вес *
			ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияВеса, КэшированныеЗначения).Коэффициент /
			ТекущаяСтрока.ВесУпаковки;
		ТекущаяСтрока["Количество" + Суффикс] = ТекущаяСтрока["КоличествоУпаковок" + Суффикс]
			* ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
		ОбъемЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияОбъема, КэшированныеЗначения).Коэффициент;
		Если ОбъемЕдиницыИзмерения<>0 Тогда
			ТекущаяСтрока.Объем = ТекущаяСтрока["КоличествоУпаковок" + Суффикс] *
				ТекущаяСтрока.ОбъемУпаковки /
				ОбъемЕдиницыИзмерения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокПоОбъему(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему", Суффикс) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока.Объем *
			ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияОбъема, КэшированныеЗначения).Коэффициент /
			ТекущаяСтрока.ОбъемУпаковки;
		ТекущаяСтрока["Количество" + Суффикс] = ТекущаяСтрока["КоличествоУпаковок" + Суффикс]
			* ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения, ТекущаяСтрока.Номенклатура).Коэффициент;
		ВесЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияВеса, КэшированныеЗначения).Коэффициент;
		Если ВесЕдиницыИзмерения<>0 Тогда
			ТекущаяСтрока.Вес = ТекущаяСтрока["КоличествоУпаковок" + Суффикс] *
				ТекущаяСтрока.ВесУпаковки /
				ВесЕдиницыИзмерения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьВесОбъемВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем", Суффикс) Тогда
		ВесЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияВеса, КэшированныеЗначения).Коэффициент;
		Если ВесЕдиницыИзмерения * ТекущаяСтрока.ВесУпаковки <> 0 Тогда
			ТекущаяСтрока.Вес = ТекущаяСтрока["КоличествоУпаковок" + Суффикс] *
				ТекущаяСтрока.ВесУпаковки /
				ВесЕдиницыИзмерения;
		КонецЕсли;
		ОбъемЕдиницыИзмерения = ПолучитьКоэффициентУпаковки(ТекущаяСтрока.ЕдиницаИзмеренияОбъема, КэшированныеЗначения).Коэффициент;
		Если ОбъемЕдиницыИзмерения * ТекущаяСтрока.ОбъемУпаковки<>0 Тогда
			ТекущаяСтрока.Объем = ТекущаяСтрока["КоличествоУпаковок" + Суффикс] *
				ТекущаяСтрока.ОбъемУпаковки /
				ОбъемЕдиницыИзмерения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция КлючКэшаУпаковки(Номенклатура, Упаковка) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		КлючНоменклатура = Строка(Номенклатура.УникальныйИдентификатор());
	Иначе
		КлючНоменклатура = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		КлючУпаковка = Строка(Упаковка.УникальныйИдентификатор());
	Иначе
		КлючУпаковка = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючНоменклатура + КлючУпаковка;
	
КонецФункции

Процедура ПриИзмененииНазначенияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		
		ТекущаяСтрока.НазначениеОтправителя = ТекущаяСтрока.Назначение;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

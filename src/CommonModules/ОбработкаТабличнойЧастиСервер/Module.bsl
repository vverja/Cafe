
#Область ПрограммныйИнтерфейс

// Обработка строки табличной части - вызывается из клиентского общего модуля при необходимости выполнения на сервере.
//
// СтруктураДействий - Структура. Возможно передавать следующие поля:
//  "ПроверитьХарактеристикуПоВладельцу", Характеристика.
//  "ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Упаковка.
//  "ПересчитатьКоличествоЕдиниц".
//  "ПересчитатьКоличествоЕдиницСуффикс". Суффикс
//  "ПересчитатьКоличествоУпаковок".,
//  "ПересчитатьКоличествоУпаковокСуффикс". Суффикс,
//  "ПересчитатьКоличествоУпаковокСуффиксИзОтклонения", Суффикс
//  "ПересчитатьВесОбъем",
//  "ЗаполнитьЦенуПродажи"              , СтруктураПараметровДействия.
//  "ЗаполнитьПомещение"                , СтруктураПараметровДействия.
//  "ЗаполнитьПродавца"                , СтруктураПараметровДействия.
//  "ПересчитатьСумму".
//  "ПересчитатьСуммуСУчетомРучнойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьСуммуСУчетомАвтоматическойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьЦенуПоСуммеВСтрокеТЧ",
//  "ПересчитатьЦенуЗаУпаковку".
//  "ПересчитатьСуммуНДС".
//  "ЗаполнитьСтавкуНДС".
//  "ОбработатьШтрихкоды".
//  "ЗаполнитьНоменклатуруПоНоменклатуреПоставщика".
//  "ЗаполнитьУсловияПродажВСтрокеТЧКлиент"
//  "ЗаполнитьУсловияЗакупокВСтрокеТЧКлиент"
//  "ЗаполнитьФлагИзлишекПорча"
//  "ЗаполнитьФлагРасхождение"
//  "ПересчитатьКоличествоУпаковокОтклонение"
//  "ОчиститьСуммуВзаиморасчетов"
//	"ЗаполнитьФлагиНедоборНеотгружаемые"
//  "ПересчитатьКоличествоНеОтгружать",
//	"ЗаполнитьПризнакАдресногоХранения", СтруктураПараметровАдресногоХранения
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ПроверитьАссортиментСтроки(                             										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьНоменклатуруПоставщикаПоНоменклатуреВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьСопоставленнуюНоменклатуруПоставщикаВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(     										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(  										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения); 
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение(						    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоВесу(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоОбъему(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьВидЦеныВСтрокеТЧ(                              										ТекущаяСтрока, СтруктураДействий); 
	ЗаполнитьЦенуПродажиВСтрокеТЧ(                          										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуЗакупкиВСтрокеТЧ(                          										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияПродажВСтрокеТЧ(                        										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияЗакупокВСтрокеТЧ(                       										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПартиюТМЦВЭксплуатации(                        										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСтавкуНДСВСтрокеТЧ(                            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСПоНоменклатуреВСтрокеТЧ(              										ТекущаяСтрока, СтруктураДействий);
	ПересчитатьЦенуСНДС(                                    										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьНалоговоеНазначениеВозвратнойТарыВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(								    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиПоСуммеСНДС(                     										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(  										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(                           										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтатьюДекларацииПоАкцизномуНалогу(            											ТекущаяСтрока, СтруктураДействий);
	ПересчитатьСуммуНДСиАкцизногоНалогаВСтрокеТЧ(          											ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНДСПропорциональноВСтрокеТЧ(          		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧ(              										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьСтатьюАналитикуРасходов(                       	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки(                             	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьСкладВСтрокеТЧ(                       										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(											ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьОбеспечениеВСтрокеТЧ(                 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьПолучитьВариантКомплектации(                   										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча(                 	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(                  	ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСодержаниеУслуги(                              										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(            										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера(                                      	ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПомещение(                                     										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПродавца(                                      										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьУчетноеКоличествоНоменклатуры(                 										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары(	                     	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары(              	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары(            	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов(                  	ТекущаяСтрока, СтруктураДействий);
	ПроверитьСериюРассчитатьСтатус(                         										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСверхЗаказаВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	УстановитьПризнакДляЗаполненияТекстовогоОписания(       										ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьВариантОбеспеченияПоДатеОтгрузки(              										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.НоменклатураПриИзмененииПереопределяемый(               	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ХарактеристикаПриИзмененииПереопределяемый(             	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакАналитикаРасходовОбязательна(           										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакАналитикаДоходовОбязательна(            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(       										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьТипСтатьи(               																ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакАдресногоХранения(                     											ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакИспользованияПомещений(															ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакиКатегорииЭксплуатации(                 	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки(                          ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки(                           ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения(                                       ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка(                  ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка(                 ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(			ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий);	
	ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ(                  	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьНоменклатуруГТД(                              											ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(                               ТекущаяСтрока, СтруктураДействий);
	
	
КонецПроцедуры

Процедура ОбработатьТЧ(ТЧ,СтруктураДействий,КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Для Каждого СтрТабл из ТЧ Цикл
		ОбработатьСтрокуТЧ(СтрТабл, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
КонецПроцедуры

// Процедура - Проверяет, ключ заполнения служебных реквизитов поддерживается
//
// Параметры:
//  КлючДействия - Строка	 - проверяемый ключ
//
Функция КлючЗаполненияСлужебныхРеквизитовПоддерживается(КлючДействия) Экспорт
	Возврат ПолучитьШаблонПоляВыборкиПоКлючуДействия(КлючДействия, Истина) <> Неопределено;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыПересчетаИЗаполненияСервер

Процедура ПроверитьПолучитьВариантКомплектации(ТекущаяСтрока, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда

		СтрутураРезультата = Справочники.ВариантыКомплектацииНоменклатуры.ПроверитьПринадлежностьВариантаКомплектации(
								ТекущаяСтрока.ВариантКомплектации, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		Если Не СтрутураРезультата.ПринадлежитНоменклатуреХарктеристике Тогда

			ТекущаяСтрока.ВариантКомплектации = СтрутураРезультата.ОсновнойВариантКомплектации;

		КонецЕсли;

	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И ТекущаяСтрока.ХарактеристикиИспользуются Тогда 

		ТекущаяСтрока.ВариантКомплектации = Неопределено;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем Характеристика;
	Перем Упаковка;
	СтруктураПараметровДействия = Неопределено;

	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу       = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);

	Если ПроверитьХарактеристикуПоВладельцу 
		Или ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(ТекущаяСтрока.Номенклатура, Характеристика, Упаковка);

		Если ПроверитьХарактеристикуПоВладельцу Тогда
			ТекущаяСтрока.Характеристика             = РезультатПроверки.Характеристика;
			ТекущаяСтрока.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		КонецЕсли;
		
		Если ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
			ТекущаяСтрока.Упаковка = РезультатПроверки.Упаковка;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара")
			И ПроверитьЗаполнитьУпаковкуПоВладельцу
			И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
			
				ТекущаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ИндентичнаяУпаковка(ТекущаяСтрока.НоменклатураИсходногоКачества, 
																										  ТекущаяСтрока.Номенклатура, 
																										  Упаковка);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара")
			И ЗначениеЗаполнено(Характеристика)
			И Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) 
			И ТекущаяСтрока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			ТекущаяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ИдентичнаяХарактеристика(
																						ТекущаяСтрока.НоменклатураИсходногоКачества, 
																						ТекущаяСтрока.Номенклатура, 
																						Характеристика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия = Неопределено
		 Или СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) = Ложь Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена * (ПроцентНДС + 1);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем НалогообложениеНДС;

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", НалогообложениеНДС) Тогда
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			Попытка
				СтавкаНДС = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура).СтавкаНДС;
			Исключение
				СтавкаНДС = НДСОбщегоНазначенияПовтИсп.СтавкаНДСПоУмолчанию();
			КонецПопытки; 
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
			
		КонецЕсли;
		
		ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Погрешность = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность) Тогда
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + Погрешность;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда		
		
			ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуНДСиАкцизногоНалогаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСиАкцизногоНалога", СтруктураПараметровДействия) Тогда
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(ТекущаяСтрока.СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		Если УчетАкцизногоНалога.ДействуетАкцизныйНалог(СтруктураПараметровДействия.Дата) Тогда
			ТекущаяСтрока.СуммаАкцизногоНалога = УчетАкцизногоНалога.РассчитатьСуммуАкцизногоНалога(
											 		ТекущаяСтрока.Сумма, 
													СтруктураПараметровДействия.ЦенаВключаетНДС, 
													ТекущаяСтрока.СтатьяДекларацииПоАкцизномуНалогу, 
													ТекущаяСтрока.ПодакцизныеТоварыДляКоммерческогоИспользования
													);
		Иначе
			ТекущаяСтрока.СуммаАкцизногоНалога = 0;
		КонецЕсли; 
		
		ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаАкцизногоНалога, ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуПродажиПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиПоСуммеСНДС", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.СуммаСНДС;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) Тогда

		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА
			|					&ТекстЗапросаКоэффициентУпаковки1
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ВложенныйЗапрос.Цена/ЕстьNULL(ВложенныйЗапрос.КоэффициентУпаковкиСоглашения,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|								/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА
			|					&ТекстЗапросаКоэффициентУпаковки1
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ЦеныНоменклатурыСрезПоследних.Цена/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|									/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена,
			|	ВложенныйЗапрос.СрокПоставки КАК СрокПоставки
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена,
			|СоглашениеТовары.Упаковка             КАК Упаковка,
			|&ТекстЗапросаКоэффициентУпаковки3 КАК КоэффициентУпаковкиСоглашения,
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
			|		ТОГДА СоглашениеТовары.СрокПоставки
			|	ИНАЧЕ ВЫБОР
			|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
			|				ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
			|			ИНАЧЕ СоглашениеШапка.СрокПоставки
			|		КОНЕЦ
			|КОНЕЦ КАК СрокПоставки
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|// СОЕДИНЕНИЯ С ЦЕНАМИ НОМЕНКЛАТУРАЫ И КУРСАМИ ВАЛЮТ
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашениеТовары.Упаковка",
		"СоглашениеТовары.Номенклатура"));
		
		Запрос.УстановитьПараметр("Упаковка"        , ТекущаяСтрока.Упаковка);
    КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда
		    Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВложенныйЗапрос.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|								/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ЦеныНоменклатурыСрезПоследних.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|									/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|// СОЕДИНЕНИЯ С ЦЕНАМИ НОМЕНКЛАТУРАЫ И КУРСАМИ ВАЛЮТ
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) 
	 ИЛИ СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда

		Запрос.УстановитьПараметр("Соглашение"      , СтруктураПараметровДействия.Соглашение);
		Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
		Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Валюта"          , СтруктураПараметровДействия.Валюта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущаяСтрока.Цена = Выборка.Цена;
			
			Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
				Иначе
					ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяСтрока.Свойство("СрокПоставки") Тогда
				
				ТекущаяСтрока.СрокПоставки = Выборка.СрокПоставки;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВидЦеныВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидЦены", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.ВидЦены = СтруктураПараметровДействия.ВидЦены;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидЦеныВСтрокеТЧ()

Процедура ЗаполнитьЦенуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
	Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Цена = ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Если ЗначениеЗаполнено(Цена) Тогда
		ТекущаяСтрока.Цена = Цена;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦены) Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияЗакупокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	Если Не СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ВидЦеныПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметровДействия.Соглашение, "ВидЦеныПоставщика");
	ТекущаяСтрока.ВидЦеныПоставщика = ВидЦеныПоставщика;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, Соглашение, ВидЦеныПоставщика, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	Если ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
		Цена = ЗакупкиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
		Если ЗначениеЗаполнено(Цена) Тогда
			ТекущаяСтрока.Цена = Цена;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, Соглашение, ВидЦеныПоставщика, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	Если ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
		Цена = ЗакупкиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
		Если ЗначениеЗаполнено(Цена) Тогда
			ТекущаяСтрока.Цена = Цена;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	СтруктураДействийЗаполнения = Новый Структура;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакУказыватьШтрихкодАкцизнойМаркиПриПечатиЧека", СтруктураПараметровДействия)
	  	И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
	  	
	  	СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакУказыватьШтрихкодАкцизнойМаркиПриПечатиЧека", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьВесУпаковки", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("КоличествоУпаковокВЕдиницеИзмеренияВеса", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("КоличествоУпаковокВЕдиницеИзмеренияВеса", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	// На этом этапе признак устанавливается без учета характеристики
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия);
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
	  	И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
	 	
	  	СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействийЗаполнения.Количество() <> 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(ТекущаяСтрока, СтруктураДействийЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА НоменклатураПоставщиков.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА НоменклатураПоставщиков.Номенклатура <> &Номенклатура
		|				И (НЕ НоменклатураПоставщиков.Номенклатура В
		|						(ВЫБРАТЬ
		|							ТоварыДругогоКачества.Номенклатура
		|						ИЗ
		|							РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
		|						ГДЕ
		|							ТоварыДругогоКачества.НоменклатураБрак = &Номенклатура))
		|			ТОГДА ИСТИНА
		|		КОГДА НоменклатураПоставщиков.Характеристика <> &Характеристика
		|			ТОГДА ИСТИНА
		|		КОГДА НоменклатураПоставщиков.Упаковка <> &Упаковка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеобходимоПерезаполнить
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Ссылка = &НоменклатураПоставщика";
		
		Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Упаковка", ТекущаяСтрока.Упаковка);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) И Выборка.НеобходимоПерезаполнить Тогда
				
				ТекущаяСтрока.Номенклатура   = Выборка.Номенклатура;
				ТекущаяСтрока.Характеристика = Выборка.Характеристика;
				Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
					СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Выборка.Характеристика);
				КонецЕсли;
				ТекущаяСтрока.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
				Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
					ТекущаяСтрока.Упаковка = Выборка.Упаковка;
					Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
						СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", Выборка.Упаковка);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоставщикаПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем Партнер;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
			|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
			|	НоменклатураПоставщиков.Упаковка КАК Упаковка
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Ссылка = &НоменклатураПоставщика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 2
			|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
			|	ВЫБОР
			|		КОГДА НоменклатураПоставщиков.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьУпаковка
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Владелец = &Партнер
			|	И (НоменклатураПоставщиков.Номенклатура = &Номенклатура
			|			ИЛИ НоменклатураПоставщиков.Номенклатура В
			|				(ВЫБРАТЬ
			|					ТоварыДругогоКачества.Номенклатура
			|				ИЗ
			|					РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
			|				ГДЕ
			|					ТоварыДругогоКачества.НоменклатураБрак = &Номенклатура))
			|	И НоменклатураПоставщиков.Характеристика = &Характеристика
			|	И (НоменклатураПоставщиков.Упаковка = &Упаковка ИЛИ НоменклатураПоставщиков.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
			|	И (НЕ НоменклатураПоставщиков.ЭтоГруппа)
			|	И (НЕ НоменклатураПоставщиков.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕстьУпаковка УБЫВ");
			
			Запрос.УстановитьПараметр("Партнер",                Партнер);
			Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
			Запрос.УстановитьПараметр("Номенклатура",           ТекущаяСтрока.Номенклатура);
			Запрос.УстановитьПараметр("Характеристика",         ТекущаяСтрока.Характеристика);
			Запрос.УстановитьПараметр("Упаковка",               ТекущаяСтрока.Упаковка);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			Выборка1 = РезультатЗапроса[0].Выбрать();
			Выборка2 = РезультатЗапроса[1].Выбрать();
			
			// Определение наличии упаковки в первой записи выборки 2
			// 		если выборка не сработала, присваиваем значение "Ложь"
			ЕстьУпаковка1 = (Выборка2.Следующий() И Выборка2.ЕстьУпаковка = 1);
			
			ПерезаполнятьНоменклатуруПоставщика = Ложь;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПоставщика) Тогда
				
				Если Выборка1.Следующий() Тогда
					
					Если ((Выборка1.Номенклатура <> ТекущаяСтрока.Номенклатура И ЗначениеЗаполнено(Выборка1.Номенклатура)) Или
						(Выборка1.Характеристика <> ТекущаяСтрока.Характеристика И ЗначениеЗаполнено(Выборка1.Характеристика)) Или
						(Выборка1.Упаковка <> ТекущаяСтрока.Упаковка И (ЕстьУпаковка1 ИЛИ ЗначениеЗаполнено(Выборка1.Упаковка)))) Тогда
						
						ПерезаполнятьНоменклатуруПоставщика = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ПерезаполнятьНоменклатуруПоставщика = Истина;
			КонецЕсли;
			
			Если ПерезаполнятьНоменклатуруПоставщика Тогда
				
				Если Выборка2.Количество() = 1 Тогда
					
					ТекущаяСтрока.НоменклатураПоставщика = Выборка2.НоменклатураПоставщика;
					
				ИначеЕсли Выборка2.Количество() > 1 Тогда
					
					НоменклатураПоставщика = Выборка2.НоменклатураПоставщика;
					
					Выборка2.Следующий();
					ЕстьУпаковка2 = Выборка2.ЕстьУпаковка;
					
					Если ЕстьУпаковка1 <> ЕстьУпаковка2 Тогда
						ТекущаяСтрока.НоменклатураПоставщика = НоменклатураПоставщика;
					Иначе
						ТекущаяСтрока.НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.ПустаяСсылка();
					КонецЕсли;
					
				Иначе
					
					ТекущаяСтрока.НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.ПустаяСсылка();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСопоставленнуюНоменклатуруПоставщикаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика", СтруктураПараметровДействия) Тогда
		
		ВыводитьПредупреждение = Ложь;
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(НоменклатураПоставщиков.Ссылка) КАК КоличествоНоменклатурыПоставщика,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка КАК Упаковка
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И (НЕ НоменклатураПоставщиков.ПометкаУдаления)
		|	И НоменклатураПоставщиков.Номенклатура = &Номенклатура
		|	И НоменклатураПоставщиков.Характеристика = &Характеристика
		|	И НоменклатураПоставщиков.Упаковка = &Упаковка
		|	И НоменклатураПоставщиков.Ссылка <> &НоменклатураПоставщика
		|	И ВЫРАЗИТЬ(&НоменклатураПоставщика КАК Справочник.НоменклатураПоставщиков).Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Характеристика,
		|	НоменклатураПоставщиков.Упаковка");
		
		Запрос.УстановитьПараметр("Партнер",                СтруктураПараметровДействия.Партнер);
		Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
		Запрос.УстановитьПараметр("Номенклатура",           ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",         ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Упаковка",               ТекущаяСтрока.Упаковка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
					
					ТекстОшибки = НСтр("ru='Номенклатуре ""%Номенклатура%"" с характеристикой ""%Характеристика%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПоставщика%)';uk='Номенклатурі ""%Номенклатура%"" з характеристикою ""%Характеристика%"" вже зіставлена інша номенклатура постачальника (%КоличествоНоменклатурыПоставщика%)'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",                   Выборка.Характеристика);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПоставщика%", Выборка.КоличествоНоменклатурыПоставщика);
					
				Иначе
					
					ТекстОшибки = НСтр("ru='Номенклатуре ""%Номенклатура%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПоставщика%)';uk='Номенклатурі ""%Номенклатура%"" вже зіставлена інша номенклатура постачальника (%КоличествоНоменклатурыПоставщика%)'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПоставщика%", Выборка.КоличествоНоменклатурыПоставщика);
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
					,
					ВыводитьПредупреждение);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия) Тогда
		Реквизиты = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
		ТекущаяСтрока.ВестиУчетПоГТД = Реквизиты.ВестиУчетПоГТД;
		ТекущаяСтрока.ЭтоУслуга = Реквизиты.ЭтоУслуга;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнитьСкладВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия) Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Или
			((ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
			И ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
			И ЗначениеЗаполнено(ТекущаяСтрока.Склад)) Тогда
				
			ТекущаяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
			
		ИначеЕсли Не СтруктураПараметровДействия.СкладГруппа
			И (ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
			
			ТекущаяСтрока.Склад = СтруктураПараметровДействия.Склад;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия) Тогда
		
		// Заполнение варианта обеспечения.
		Номенклатура = ТекущаяСтрока.Номенклатура;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ОбособленнаяЗакупкаПродажа");
			ТипНоменклатуры          = Реквизиты.ТипНоменклатуры;
			ОбособленнаяНоменклатура = Реквизиты.ОбособленнаяЗакупкаПродажа;
		Иначе
			Возврат;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ОбособленнаяЗакупкаПродажа");
		ТипНоменклатуры          = Реквизиты.ТипНоменклатуры;
		ОбособленнаяНоменклатура = Реквизиты.ОбособленнаяЗакупкаПродажа;
		
		ИсходныйВариантОбеспечения = ТекущаяСтрока.ВариантОбеспечения;
		
		ВариантОбеспеченияПоСтатусу   = ПараметрыДействия.ВариантОбеспеченияПоСтатусу;
		ПродажаОбособленаПоСоглашению = ПараметрыДействия.ПродажаОбособленаПоСоглашению;
		ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
		
		Если Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
			
			НовыйВариантОбеспечения = ВариантОбеспеченияПоСтатусу;
			Если НовыйВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
				
				Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
					Или ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
						
						НовыйВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущаяСтрока.ВариантОбеспечения = НовыйВариантОбеспечения;
			
		Иначе
			
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				НовыйВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
			ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				НовыйВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
			Иначе
				
				Если ПродажаОбособленаПоСоглашению Или ОбособленнаяНоменклатура Тогда
					НовыйВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
				Иначе
					
					Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
						НовыйВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
					Иначе // работа
						НовыйВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СохранитьИсходныйВариант = НовыйВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
				И ИсходныйВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
			
			Если Не СохранитьИсходныйВариант Тогда
				ТекущаяСтрока.ВариантОбеспечения = НовыйВариантОбеспечения;
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение даты отгрузки.
		Характеристика = ТекущаяСтрока.Характеристика;
		ДатаОтгрузки   = ТекущаяСтрока.ДатаОтгрузки;
		Склад          = ?(ПараметрыДействия.Склад <> Неопределено, ПараметрыДействия.Склад, ТекущаяСтрока.Склад);
		ЖелаемаяДатаОтгрузки = ПараметрыДействия.ЖелаемаяДатаОтгрузки;
		
		Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			
			Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
				Или ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
				
				ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ");
				ТекстЗапроса =
					"ВЫБРАТЬ
					|	&Номенклатура   КАК Номенклатура,
					|	&Характеристика КАК Характеристика,
					|	&Склад          КАК Склад
					|ПОМЕСТИТЬ ВтТовары
					|;
					|
					|/////////////////////////
					|"
					+ СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "")
					+ Справочники.СпособыОбеспеченияПотребностей.ТекстЗапросаДатПлановойПоставки()
					+ "ВЫБРАТЬ
					|	ДатыПлановойПоставки.Дата КАК ДатаПоставки
					|ИЗ
					|	ВтДатыПлановойПоставки КАК ДатыПлановойПоставки
					|ГДЕ
					|	НЕ ДатыПлановойПоставки.СпособОбеспечения = ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)";
				
				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
				Запрос.УстановитьПараметр("Характеристика", Характеристика);
				Запрос.УстановитьПараметр("Склад",          Склад);
				Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
				Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
					ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				ТекущаяСтрока.ДатаОтгрузки = ЖелаемаяДатаОтгрузки;
				Если Выборка.Следующий() И Выборка.ДатаПоставки > ТекущаяСтрока.ДатаОтгрузки Тогда
					ТекущаяСтрока.ДатаОтгрузки = Выборка.ДатаПоставки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьОбеспечениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение", СтруктураПараметровДействия) Тогда

		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущаяСтрока.Номенклатура, "ТипНоменклатуры, ОбособленнаяЗакупкаПродажа");
			
		ЗаполнитьОбособленно = СтруктураПараметровДействия.ЗаполнитьОбособленно = Истина
				ИЛИ РеквизитыНоменклатуры.ОбособленнаяЗакупкаПродажа = Истина;
			
		Если СтруктураПараметровДействия.Свойство("ОбособленнаяЗакупка") Тогда
			ЗаполнитьОбособленно = ЗаполнитьОбособленно И СтруктураПараметровДействия.ОбособленнаяЗакупка;
		КонецЕсли;
		
		ПараметрыЗаполненияВариантаОбеспечения = ОбеспечениеКлиентСервер.ПараметрыЗаполненияВариантаОбеспеченияПоУмолчанию();
		ПараметрыЗаполненияВариантаОбеспечения.ТипНоменклатуры = РеквизитыНоменклатуры.ТипНоменклатуры;
		ПараметрыЗаполненияВариантаОбеспечения.ЗаполнитьОбособленно = ЗаполнитьОбособленно;
		СтруктураПараметровДействия.Свойство("СтатусЗаказаКлиента",ПараметрыЗаполненияВариантаОбеспечения.СтатусЗаказаКлиента);
		ПараметрыЗаполненияВариантаОбеспечения.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
		ВариантОбеспечения = ОбеспечениеКлиентСервер.ВариантОбеспеченияПоУмолчанию(ПараметрыЗаполненияВариантаОбеспечения);
		СохранитьИсходныйВариант = ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
			И ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
		
		Если Не СохранитьИсходныйВариант Тогда
			ТекущаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
		КонецЕсли;
		

		Если ТекущаяСтрока.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			ДанныеСтроки = Новый Структура("Назначение, НазначениеОтправителя");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрока);
			
			Если ДанныеСтроки.НазначениеОтправителя <> Неопределено Тогда
				ТекущаяСтрока.НазначениеОтправителя = Справочники.Назначения.ПустаяСсылка();
			ИначеЕсли ДанныеСтроки.Назначение <> Неопределено Тогда
				ТекущаяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;     
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСодержаниеУслуги(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание", СтруктураПараметровДействия) ТОгда
		
		ЗаполнятьДляВсехУслуг = Неопределено;
		СтруктураПараметровДействия.Свойство("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
		
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗаполнятьДляВсехУслуг <> Неопределено Тогда
		
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущаяСтрока.Номенклатура,
				"ТипНоменклатуры, ВариантОформленияПродажи, НаименованиеПолное");
			
			Если ЗаполнятьДляВсехУслуг
				И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар 
				И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				
				ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					РеквизитыНоменклатуры.НаименованиеПолное, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Характеристика,"НаименованиеПолное"));
				
			ИначеЕсли Не ЗаполнятьДляВсехУслуг
				И РеквизитыНоменклатуры.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
				
				ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					РеквизитыНоменклатуры.НаименованиеПолное, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Характеристика,"НаименованиеПолное"));
				
			Иначе
				ТекущаяСтрока.Содержание = "";
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.Содержание = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПараметрСтруктурыДействий)
	 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтатьяРасходов) Тогда
		
		ДоходыИРасходыСервер.ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(ПараметрСтруктурыДействий.ХозяйственнаяОперация,
																		 ПараметрСтруктурыДействий.Организация,
																		 ПараметрСтруктурыДействий.Подразделение,
																		 ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПомещение(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", ПараметрСтруктурыДействий)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.Помещение) Тогда
		
		Параметры = Новый Структура("Склад, Номенклатура, Характеристика", ПараметрСтруктурыДействий.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		ТекущаяСтрока.Помещение = СкладыСервер.ПомещениеДляНоменклатуры(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПродавца(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", ПараметрСтруктурыДействий)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.Продавец) Тогда
		
		ТекущаяСтрока.Продавец = ПараметрСтруктурыДействий.Продавец;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьУчетноеКоличествоНоменклатуры(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры", ПараметрСтруктурыДействий) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Аналитика.КлючАналитики КАК КлючАналитики
		|
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|ГДЕ
		|	Аналитика.Склад = &Склад
		|	И Аналитика.Номенклатура = &Номенклатура
		|	И Аналитика.Характеристика = &Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
		|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоУчет
		|
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени,
		|		Организация = &Организация
		|		И АналитикаУчетаНоменклатуры В (
		|			ВЫБРАТЬ
		|				Аналитика.КлючАналитики
		|			ИЗ
		|				ВтАналитика КАК Аналитика
		|		)
		|	) КАК ТоварыОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
		|	-ТоварыОрганизаций.Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВтАналитика КАК Аналитика
		|	ПО
		|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.АналитикаУчетаНоменклатуры,
		|	СУММА(ЕСТЬNULL(ВременнаяТаблица.КоличествоУчет, 0)) КАК КоличествоУчет
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.АналитикаУчетаНоменклатуры
		|");
		
		Запрос.УстановитьПараметр("Регистратор",    ПараметрСтруктурыДействий.Регистратор);
		Запрос.УстановитьПараметр("Склад",          ПараметрСтруктурыДействий.Склад);
		Запрос.УстановитьПараметр("Организация",    ПараметрСтруктурыДействий.Организация);
		Запрос.УстановитьПараметр("МоментВремени",  ПараметрСтруктурыДействий.МоментВремени);
		Запрос.УстановитьПараметр("Номенклатура",   ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
				Коэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекущаяСтрока.Упаковка, ТекущаяСтрока.Номенклатура);
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			ТекущаяСтрока.КоличествоУпаковокУчет = Выборка.КоличествоУчет / Коэффициент;
			ТекущаяСтрока.КоличествоУпаковокФакт = Выборка.КоличествоУчет / Коэффициент;
		Иначе
			ТекущаяСтрока.КоличествоУпаковокУчет = 0;
			ТекущаяСтрока.КоличествоУпаковокФакт = 0;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПараметрСтруктурыДействий) Тогда
		
		Товары = Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ЗаполнитьЗначенияСвойств(Товары.Добавить(),ТекущаяСтрока);
		Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(Товары, ПараметрСтруктурыДействий);
		Если Товары.Количество() > 0 Тогда
			ТекущаяСтрока.ИндексСовместноПродаваемыеТовары = 1;
		Иначе
			ТекущаяСтрока.ИндексСовместноПродаваемыеТовары = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруГТД(ТекущаяСтрока, СтруктураДействий) 

	Перем СтруктураПараметровДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьНоменклатуруГТД", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока.НомерГТД = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНоменклатуры = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
	Если РеквизитыНоменклатуры.ЭтоУслуга Тогда
		Возврат;
	КонецЕсли;
		
	// По умолчанию заполняем только для товаров с установленном флагом ВестиУчетПоГТД
	// В некоторых документах (напр. РТУ, НН для печати) значение по умолчанию заполняется
	// не зависимо от того ведется учет или нет
	ЗаполнятьДляТоваровБезУчетаПоГТД = Ложь; 
	Если СтруктураПараметровДействия <> Неопределено Тогда
		Если СтруктураПараметровДействия.Свойство("ЗаполнятьДляТоваровБезУчетаПоГТД") Тогда 
			ЗаполнятьДляТоваровБезУчетаПоГТД = СтруктураПараметровДействия.ЗаполнятьДляВсех;
		КонецЕсли;
	КонецЕсли;
	
	Если Не РеквизитыНоменклатуры.ВестиУчетПоГТД И Не ЗаполнятьДляТоваровБезУчетаПоГТД Тогда
		Возврат;
	КонецЕсли;
		
	ТекущаяСтрока.НомерГТД = РеквизитыНоменклатуры.НоменклатураГТД;

КонецПроцедуры

Процедура ЗаполнитьСтатьюДекларацииПоАкцизномуНалогу(ТекущаяСтрока, СтруктураДействий) 

	Перем СтруктураПараметровДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьСтатьюДекларацииПоАкцизномуНалогу", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока.СтатьяДекларацииПоАкцизномуНалогу = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНоменклатуры = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
	Если НЕ РеквизитыНоменклатуры.ПодакцизныйТовар Тогда
		Возврат;
	КонецЕсли;
		
	ТекущаяСтрока.СтатьяДекларацииПоАкцизномуНалогу = РеквизитыНоменклатуры.СтатьяДекларацииПоАкцизномуНалогу;

КонецПроцедуры

Процедура ЗаполнитьПризнакАналитикаРасходовОбязательна(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем Параметры;
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", Параметры) Тогда
		
		Если ПустаяСтрока(Параметры) Тогда
			Параметры = "СтатьяРасходов, АналитикаРасходов";
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура(Параметры);
		Статья = Неопределено;
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			Если Статья = Неопределено Тогда
				Статья = ТекущаяСтрока[КлючИЗначение.Ключ];
				Продолжить;
			КонецЕсли;
			
			Контроль = Ложь;
			Если ЗначениеЗаполнено(Статья) И ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				Контроль = КэшированныеЗначения.КонтролироватьЗаполнениеАналитикиРасходов[Статья];
				Если Контроль = Неопределено Тогда
					Контроль = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "КонтролироватьЗаполнениеАналитики") = Истина);
					КэшированныеЗначения.КонтролироватьЗаполнениеАналитикиРасходов.Вставить(Статья, Контроль);
				КонецЕсли;
			КонецЕсли;
			ТекущаяСтрока[КлючИЗначение.Ключ + "Обязательна"] = Контроль;
			Статья = Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем Параметры;
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовЗаказРеализация", Параметры) Тогда
		
		Если ПустаяСтрока(Параметры) Тогда
			Статья = ТекущаяСтрока.СтатьяРасходов;
			ЭтоЗаказРеализация = Неопределено;
			Если ЗначениеЗаполнено(Статья) И ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				Если КэшированныеЗначения.Свойство("ЭтоЗаказРеализация") Тогда 
					ЭтоЗаказРеализация = КэшированныеЗначения.ЭтоЗаказРеализация[Статья];
				Иначе
					КэшированныеЗначения.Вставить("ЭтоЗаказРеализация", Новый Соответствие());
				КонецЕсли;
				Если ЭтоЗаказРеализация = Неопределено Тогда
					ЭтоЗаказРеализация = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "АналитикаРасходовЗаказРеализация") = Истина);
					КэшированныеЗначения.ЭтоЗаказРеализация.Вставить(Статья, ЭтоЗаказРеализация);
				КонецЕсли;
			КонецЕсли;
			ТекущаяСтрока.АналитикаРасходовЗаказРеализация = ЭтоЗаказРеализация;
			
		Иначе
			
			МассивСтатей = Новый Массив;
			Для Каждого КлючИЗначение Из Параметры Цикл
				МассивСтатей.Добавить(ТекущаяСтрока[КлючИЗначение.Ключ]);
			КонецЦикла;
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Статьи.Ссылка КАК Статья,	
			|	Статьи.АналитикаРасходовЗаказРеализация КАК ЭтоЗаказРеализация
			|ИЗ
			|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
			|ГДЕ
			|	Статьи.Ссылка В (&МассивСтатей)
			|");
			Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не КэшированныеЗначения.Свойство("ЭтоЗаказРеализация") Тогда 
					КэшированныеЗначения.Вставить("ЭтоЗаказРеализация", Новый Соответствие());
				КонецЕсли;
				КэшированныеЗначения.ЭтоЗаказРеализация.Вставить(Выборка.Статья, Выборка.ЭтоЗаказРеализация);
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из Параметры Цикл
				Статья = ТекущаяСтрока[КлючИЗначение.Ключ];
				ТекущаяСтрока[КлючИЗначение.Значение] = КэшированныеЗначения.ЭтоЗаказРеализация[Статья];
			КонецЦикла;
			
		Конецесли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАналитикаДоходовОбязательна(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем Параметры;
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаДоходовОбязательна", Параметры) Тогда
		
		Если ПустаяСтрока(Параметры) Тогда
			Параметры = "СтатьяДоходов, АналитикаДоходов";
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура(Параметры);
		Статья = Неопределено;
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			Если Статья = Неопределено Тогда
				Статья = ТекущаяСтрока[КлючИЗначение.Ключ];
				Продолжить;
			КонецЕсли;
			
			Контроль = Ложь;
			Если ЗначениеЗаполнено(Статья) И ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
				Контроль = КэшированныеЗначения.КонтролироватьЗаполнениеАналитикиДоходов[Статья];
				Если Контроль = Неопределено Тогда
					Контроль = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "КонтролироватьЗаполнениеАналитики") = Истина);
					КэшированныеЗначения.КонтролироватьЗаполнениеАналитикиДоходов.Вставить(Статья, Контроль);
				КонецЕсли;
			КонецЕсли;
			ТекущаяСтрока[КлючИЗначение.Ключ + "Обязательна"] = Контроль;
			Статья = Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПроверитьСериюРассчитатьСтатус(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус", ПараметрыДействия) Тогда
		
		РезультатРасчета = НоменклатураСервер.ПроверитьСериюРассчитатьСтатусПриИзмененииРеквизитаВТЧ(
								ТекущаяСтрока,
								ПараметрыДействия.Склад,
								ПараметрыДействия.ПараметрыУказанияСерий);
								
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РезультатРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПартиюТМЦВЭксплуатации(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПартиюТМЦВЭксплуатации", ПараметрыДействия)
		И (Не ПараметрыДействия.Свойство("ХозяйственнаяОперация")
			Или ПараметрыДействия.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТМЦВЭксплуатацииОбороты.Партия
			|ИЗ
			|	РегистрНакопления.ТМЦВЭксплуатации.Обороты(
			|			,
			|			&Дата,
			|			,
			|			Партия = &Партия
			|				И Организация = &Организация
			|				И Подразделение = &Подразделение
			|				И ФизическоеЛицо = &ФизическоеЛицо
			|				И Номенклатура = &Номенклатура
			|				И Характеристика = &Характеристика) КАК ТМЦВЭксплуатацииОбороты
			|ГДЕ
			|	ТМЦВЭксплуатацииОбороты.КоличествоОборот > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТМЦВЭксплуатацииОбороты.Партия КАК ПартияТМЦВЭксплуатации,
			|	РАЗНОСТЬДАТ(ТМЦВЭксплуатацииОбороты.Партия.ДатаЗавершенияЭксплуатации, &Дата, ДЕНЬ) КАК РазностьДат
			|ИЗ
			|	РегистрНакопления.ТМЦВЭксплуатации.Обороты(
			|			,
			|			&Дата,
			|			,
			|			Организация = &Организация
			|				И Подразделение = &Подразделение
			|				И ФизическоеЛицо = &ФизическоеЛицо
			|				И Номенклатура = &Номенклатура
			|				И Характеристика = &Характеристика) КАК ТМЦВЭксплуатацииОбороты
			|ГДЕ
			|	ТМЦВЭксплуатацииОбороты.КоличествоОборот > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	РазностьДат");
		
		Запрос.УстановитьПараметр("Партия", ТекущаяСтрока.ПартияТМЦВЭксплуатации);
		Запрос.УстановитьПараметр("Дата", ПараметрыДействия.Дата);
		Запрос.УстановитьПараметр("Организация", ПараметрыДействия.Организация);
		Запрос.УстановитьПараметр("Подразделение", ПараметрыДействия.Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ТекущаяСтрока.ФизическоеЛицо);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[0].Пустой() Тогда
			Если Результат[1].Пустой() Тогда
				ПустыеЗначения = Новый Структура("ПартияТМЦВЭксплуатации", Справочники.ПартииТМЦВЭксплуатации.ПустаяСсылка(), Ложь);
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПустыеЗначения);
			Иначе
				Выборка = Результат[1].Выбрать();
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
				
				СтруктураКоличества = Новый Структура("Количество, КоличествоУпаковок", 0, 0);
				ЗаполнитьЗначенияСвойств(СтруктураКоличества, ТекущаяСтрока);
				Если СтруктураКоличества.Количество = 0 Тогда
					СтруктураКоличества.Количество = 1;
				КонецЕсли;
				Если СтруктураКоличества.КоличествоУпаковок = 0 Тогда
					СтруктураКоличества.КоличествоУпаковок = 1;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураКоличества);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакДляЗаполненияТекстовогоОписания(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("УстановитьПризнакДляЗаполненияТекстовогоОписания") Тогда
		
		ТекущаяСтрока.ДляЗаполненияТекстовогоОписания = НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВариантОбеспеченияПоДатеОтгрузки(ТекущаяСтрока, СтруктураДействий)

	ПараметрыДействия = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОбеспеченияПоДатеОтгрузки", ПараметрыДействия) Тогда

		Если ЗначениеЗаполнено(ПараметрыДействия.ДатаОтгрузки) И(
			ПараметрыДействия.ИмяТипНоменклатуры = Неопределено Или Не (
			ТекущаяСтрока[ПараметрыДействия.ИмяТипНоменклатуры] = Перечисления.ТипыНоменклатуры.Работа Или
			ТекущаяСтрока[ПараметрыДействия.ИмяТипНоменклатуры] = Перечисления.ТипыНоменклатуры.Услуга)) Тогда
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ИзЗаказов;
		КонецЕсли;

		Если ПараметрыДействия.ИмяПоляВШапке <> Неопределено И
			ПараметрыДействия.Объект[ПараметрыДействия.ИмяПоляВШапке] < ПараметрыДействия.ДатаОтгрузки Тогда
			ПараметрыДействия.Объект[ПараметрыДействия.ИмяПоляВШапке] = ПараметрыДействия.ДатаОтгрузки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПризнакАдресногоХранения(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрыИспользуетсяАдресноеХранение;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАдресногоХранения", ПараметрыИспользуетсяАдресноеХранение) Тогда
		
		ДатаДокумента = Неопределено;
		
		ПараметрыИспользуетсяАдресноеХранение.Свойство("Дата", ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДатаСеанса();				
		КонецЕсли;
		
		ТекущаяСтрока.ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
			ПараметрыИспользуетсяАдресноеХранение.Склад, 
			ПараметрыИспользуетсяАдресноеХранение.Помещение,
			ДатаДокумента);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияПомещений(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрыИспользуютсяПомещения;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакИспользованияПомещений", ПараметрыИспользуютсяПомещения) Тогда
		
		ДатаДокумента = Неопределено;
		
		ПараметрыИспользуютсяПомещения.Свойство("Дата", ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДатаСеанса();				
		КонецЕсли;
		
		ТекущаяСтрока.ИспользоватьСкладскиеПомещения = СкладыСервер.ИспользоватьСкладскиеПомещения(
			ПараметрыИспользуютсяПомещения.Склад, 
			ДатаДокумента);
			
		КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий)
	
	Перем ИмяПоля;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", ИмяПоля) Тогда
		ТекущаяСтрока[ИмяПоля + "ДвиженияПоСкладскимРегистрам"] =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока[ИмяПоля], "ДвиженияПоСкладскимРегистрам");
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Возвращает шаблон поля выборки соответствуюий для указанного ключа действия
//
// Параметры:
//  КлючДействия						 - Строка	 - Строка имени ключа действия
//  ТолькоПроверитьПоддерживаемыеКлючи	 - Булево - признак проверки поддержки ключа действия
//
// Возвращаемое значение:
//  Строка, Неопределено - Строка шаблонов поля запроса. Неопределено, если ключ не поддерживается
//
Функция ПолучитьШаблонПоляВыборкиПоКлючуДействия(КлючДействия, ТолькоПроверитьПоддерживаемыеКлючи = Ложь)
	
	Если КлючДействия = "ЗаполнитьПризнакТипНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры КАК %Значение%";
	КонецЕсли;
	
	
	
	Если КлючДействия = "ЗаполнитьПризнакУказыватьШтрихкодАкцизнойМаркиПриПечатиЧека" Тогда
	  	Возврат ",
	  	|	втТаблицаНоменклатуры.%Ключ%.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЕдиницаИзмерения" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипИзмеряемойВеличины" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьВесУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаВесУпаковки
		|	ИНАЧЕ &ТекстЗапросаВесНоменклатуры
		|	КОНЕЦ КАК ВесУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьОбъемУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаОбъемУпаковки
		|	ИНАЧЕ &ТекстЗапросаОбъемНоменклатуры
		|	КОНЕЦ КАК ОбъемУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияВеса" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ВесЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияВеса";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияОбъема" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ОбъемЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияОбъема";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакАртикул" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Артикул КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВариантОформленияПродажи" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВариантОформленияПродажи КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакХарактеристикиИспользуются" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоГТД" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЭтоУслуга" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакПодакцизныйТовар" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ПодакцизныйТовар КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакСерииИспользуются" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры.ИспользоватьСерии КАК %Значение%";
	КонецЕсли;
	
	Если ТипЗнч(КлючДействия) = Тип("Строка")
		И Не ТолькоПроверитьПоддерживаемыеКлючи Тогда
		ТекстЗапроса =
			",
			|	втТаблицаНоменклатуры.%Ключ%.%ИмяПоля% КАК %Значение%";
		Возврат СтрЗаменить(ТекстЗапроса, "%ИмяПоля%", КлючДействия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает текст запроса выборки по служебным реквизитам номенклатуры
//
// Парметры:
// 		СтруктураРеквизитов - Структура - Структура с именами служебыных реквизитов в качестве полей
// 		СтруктураДопДанных - Структура - Структура с дополнительными данными
//
// Возвращаемое значение:
// 		Строка - Строка с текстом запроса
//
Функция ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных) Экспорт
	
	ШаблонЗапроса = "";
	
	// Формирование шаблона запроса временной таблицы по номенклатуре
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки%ТекстВЫБРАТЬ%
	|ПОМЕСТИТЬ втТаблицаНоменклатуры
	|ИЗ
	|	&КоллекцияДанных КАК Таблица;";
	
	ШаблонВЫБРАТЬ = ",
	|	ВЫРАЗИТЬ(Таблица.%ИмяПоля% КАК Справочник.Номенклатура) КАК %ИмяПоля%";
	
	ТекстВЫБРАТЬ = "";
	Для Каждого Поле Из СтруктураДопДанных.СтруктураИсточников Цикл
		Если Поле.Ключ = "Упаковка" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка";
		Иначе
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬ, "%ИмяПоля%", Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ТекстВЫБРАТЬ%", ТекстВЫБРАТЬ);
	
	// Шаблон запроса основной выборки
	ШаблонЗапроса = ШаблонЗапроса + "
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки%ТекстВЫБРАТЬ%
	|ИЗ
	|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	// Формирование полей запроса основной выборки
	ТекстВЫБРАТЬ = "";
	Для Каждого Действие Из СтруктураДействий Цикл
		ШаблонВЫБРАТЬ = ПолучитьШаблонПоляВыборкиПоКлючуДействия(Действие.Ключ);
		Если ШаблонВЫБРАТЬ <> Неопределено Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					ТекстВыбрать = ТекстВЫБРАТЬ + СтрЗаменить(СтрЗаменить(ШаблонВЫБРАТЬ, "%Значение%", Поле.Значение), "%Ключ%", Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ШаблонЗапроса, "%ТекстВЫБРАТЬ%", ТекстВЫБРАТЬ);
	
КонецФункции // ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ

// Возвращает структуру дополнительной информации получения служебных реквизитов
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получения служебных реквизитов
//
// Возвращаемое значение:
// 		Структура
//
Функция ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий) Экспорт
	
	СтруктураИсточников = Новый Структура;
	СтрокаРеквизитовЗаполнения = "";
	СтрокаРеквизитовВыгрузки = "";
	
	Для Каждого Действие Из СтруктураДействий Цикл
		Если ЗначениеЗаполнено(Действие.Значение) Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				Если Не СтруктураИсточников.Свойство(Поле.Ключ) Тогда
					СтруктураИсточников.Вставить(Поле.Ключ);
					СтрокаРеквизитовВыгрузки = СтрокаРеквизитовВыгрузки + ", " + Поле.Ключ;
				КонецЕсли;
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					СтрокаРеквизитовЗаполнения = СтрокаРеквизитовЗаполнения + ", " + Поле.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура(
		"СтруктураИсточников, РеквизитыЗаполнения, РеквизитыВыгрузки",
		СтруктураИсточников,
		Сред(СтрокаРеквизитовЗаполнения, 2), // Отрезать первый символ строки, т.к. это запятая
		СтрокаРеквизитовВыгрузки);
	
КонецФункции // ПолучитьСтруктуруДополнительнойИнформации()

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, Склад, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
	Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Цена = АссортиментСервер.ПолучитьЦенуПоАссортименту(СтруктураПараметровОтбора);
	ТекущаяСтрока.Цена = Цена;
	
КонецПроцедуры

Процедура ПроверитьАссортиментСтроки(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ПроверитьАссортиментСтроки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(
		СтруктураПараметровДействия.Склад, 
		СтруктураПараметровДействия.Дата);
	
	Если КонтролироватьАссортимент Тогда
		
		Если НЕ ТекущаяСтрока.Свойство("НоменклатураНабора") ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																								СтруктураПараметровДействия.Склад,
																								СтруктураПараметровДействия.Дата);
		Иначе
			СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.НоменклатураНабора,
																								СтруктураПараметровДействия.Склад,
																								СтруктураПараметровДействия.Дата);
		КонецЕсли;
		
		Если НЕ СтруктураСостояния[СтруктураПараметровДействия.ИмяРесурсаАссортимента] Тогда
			
			ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
			Если НЕ ТекущаяСтрока.Свойство("НоменклатураНабора") ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
					,
					Ложь);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.НоменклатураНабора);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ИндексНабора"),
					,
					Ложь);
			КонецЕсли;
			
			Если НЕ СтруктураПараметровДействия.РазрешатьДобавление Тогда
				ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		ТекущаяСтрока.СтавкаНДС = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура).СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьТипСтатьи(ТекущаяСтрока, СтруктураДействий)
	
	Перем Параметры;
	Если СтруктураДействий.Свойство("ЗаполнитьТипСтатьи", Параметры) Тогда
		
		Если Параметры = Неопределено Тогда
			ИмяПоляСтатья = "СтатьяРасходов";
		Иначе
			ИмяПоляСтатья = Параметры;
		КонецЕсли;
		
		Статья = ТекущаяСтрока[ИмяПоляСтатья];
		
		Если ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			ТекущаяСтрока.ТипСтатьи = 1;
		ИначеЕсли ТипЗнч(Статья)= Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
			ТекущаяСтрока.ТипСтатьи = 2;
		ИначеЕсли ТипЗнч(Статья)= Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
			ТекущаяСтрока.ТипСтатьи = 3;
		Иначе
			ТекущаяСтрока.ТипСтатьи = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеОбУпаковке(Номенклатура, Упаковка, КэшированныеЗначения) Экспорт 
	
	ДанныеОбУпаковке = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка, Номенклатура, , Ложь);
	
	
	КлючКоэффициента = ОбработкаТабличнойЧастиКлиентСервер.КлючКэшаУпаковки(Номенклатура, Упаковка);; 
	
	КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента,	Новый Структура("Коэффициент, НужноОкруглятьКоличество",
																							ДанныеОбУпаковке.Коэффициент,
																							ДанныеОбУпаковке.НужноОкруглятьКоличество));
	КэшированныеЗначения.ОбъемУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Вес);
	КэшированныеЗначения.ВесУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Объем);
	
	Возврат ДанныеОбУпаковке;
	
КонецФункции



#КонецОбласти

#КонецОбласти

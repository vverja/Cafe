////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентами: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Включает/выключает фукнционал ЭДО с контрагентами.
//
// Параметры:
// Включить - Булево - выключить или выключить функционал ЭДО.
//
Процедура УстановитьЗначенияКонстантЭДО(Включить = Истина) Экспорт
	
	ИспользуютсяОбменЭД = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьОбменЭД");
	Если Не ИспользуютсяОбменЭД Тогда
		Константы.ИспользоватьОбменЭД.Установить(Включить);
	КонецЕсли;
	
	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	Если Не ИспользуютсяЭП Тогда
		Константы.ИспользоватьЭлектронныеПодписи.Установить(Включить);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСВерсиямиЭлектронныхДокументов

// Получает представление (текст либо структура) состояний электронных документов по владельцам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
// ПомещатьВСтруктуру - булево, если истина, то представления состояний электронных документов
//                      (СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника),
//                      будут помещены в структуру, для возможности последующего разбора на клиенте.
//
// Возвращаемое значение:
// Соответствие - соответствие ссылок на документы ИБ состояниям ЭД. Ключ - ссылка на документ ИБ,
//                Значение - текст (состояние ЭД), либо структура - в зависимости от параметра ПомещатьВСтруктуру.
//
Функция ПолучитьТекстСостоянияЭДПоВладельцам(МассивСсылокНаВладельцев, ПомещатьВСтруктуру = Ложь) Экспорт
		
	ТаблицаДанных = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
	Соответствие = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		Если ПомещатьВСтруктуру Тогда
			СостояниеВерсииЭД = Новый Структура("СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника");
			ЗаполнитьЗначенияСвойств(СостояниеВерсииЭД, ТекСтрока);
		Иначе
			СостояниеВерсииЭД = Строка(ТекСтрока.СостояниеВерсииЭД);
		КонецЕсли;
		Соответствие.Вставить(ТекСтрока.ВладелецЭД, СостояниеВерсииЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЭлектронныхДокументов

// Возвращает текст запроса для электронных документов на подписи.
// Варианты - для рабочего места документов на подпись,
// или для показателя на рабочем столе (УТ 11)
//
// Параметры:
//  ДляРабочегоСтола - Булево, признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11)
//
Функция ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи(ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
		|	ЭДПрисоединенныеФайлы.СуммаДокумента,
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя,
		|	ВЫБОР
		|		КОГДА ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
		|			ТОГДА """"""""
		|		КОГДА ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЭДПрисоединенныеФайлы.НомерВерсииЭД
		|		ИНАЧЕ ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем
		|	КОНЕЦ КАК Версия,
		|	ЭДПрисоединенныеФайлы.ВидЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	ЭДПрисоединенныеФайлы.Изменил
		|ПОМЕСТИТЬ ЭДНаПодпись
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И НЕ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Покупатель)
		|	И НЕ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
		|	И Не ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец КАК ЭД,
		|	ЭДПрисоединенныеФайлы.СуммаДокумента,
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя,
		|	ВЫБОР
		|		КОГДА ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЭДПрисоединенныеФайлы.НомерВерсииЭД
		|		ИНАЧЕ ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем
		|	КОНЕЦ КАК Версия,
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ВидЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	ЭДПрисоединенныеФайлы.Изменил
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец
		|ГДЕ
		|	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|	И (ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
		|		Или ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
		|		Или ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	0,
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя,
		|	"""",
		|	ЭДПрисоединенныеФайлы.ВидЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	ЭДПрисоединенныеФайлы.Изменил
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
		|	И (ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
		|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
		|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан)
		|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПодготовленКОтправке)
		|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Получен)
		|				И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПроизвольныйЭД).ТребуетсяПодтверждение)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СлужебныеЭД.Ссылка,
		|	СлужебныеЭД.СуммаДокумента,
		|	СлужебныеЭД.ДатаДокументаОтправителя,
		|	ВЫБОР
		|		КОГДА СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
		|			ТОГДА """"""""
		|		КОГДА СлужебныеЭД.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА СлужебныеЭД.НомерВерсииЭД
		|		ИНАЧЕ СлужебныеЭД.ДатаФормированияЭДОтправителем
		|	КОНЕЦ,
		|	СлужебныеЭД.ВидЭД,
		|	СлужебныеЭД.НаправлениеЭД,
		|	СлужебныеЭД.Организация,
		|	СлужебныеЭД.Контрагент,
		|	СлужебныеЭД.ПрофильНастроекЭДО,
		|	СлужебныеЭД.СоглашениеЭД,
		|	СлужебныеЭД.СтатусЭД,
		|	СлужебныеЭД.Изменил
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК СлужебныеЭД
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = СлужебныеЭД.ЭлектронныйДокументВладелец
		|ГДЕ
		|	СлужебныеЭД.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
		|	И НЕ СлужебныеЭД.ПометкаУдаления
		|	И НЕ(СлужебныеЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
		|				ИЛИ СлужебныеЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.ВидЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Сертификат,
		|	ВложенныйЗапрос.ЭД
		|ПОМЕСТИТЬ ВТ_СертификатыИзНастроекИПрофилей
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ПрофилиЭДОСертификаты.Сертификат КАК Сертификат,
		|		ЭДНаПодпись.ЭД КАК ЭД
		|	ИЗ
		|		ЭДНаПодпись КАК ЭДНаПодпись
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|			ПО ЭДНаПодпись.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СоглашенияЭДСертификаты.Сертификат,
		|		ЭДНаПодпись.ЭД
		|	ИЗ
		|		ЭДНаПодпись КАК ЭДНаПодпись
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|			ПО ЭДНаПодпись.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
		|			ПО СертификатыЭП.Ссылка = ПодписываемыеВидыЭД.СертификатЭП
		|		ПО ВложенныйЗапрос.Сертификат = СертификатыЭП.Ссылка
		|ГДЕ
		|	(СертификатыЭП.Пользователь = &ТекущийПользователь
		|			ИЛИ СертификатыЭП.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ИЛИ СертификатыЭП.Пользователь = &ПользовательНеУказан)
		|	И НЕ СертификатыЭП.Отозван
		|	И НЕ СертификатыЭП.ПометкаУдаления
		|	И ПодписываемыеВидыЭД.Использовать
		|	И ПодписываемыеВидыЭД.ВидЭД = ВложенныйЗапрос.ЭД.ВидЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ПоляВыбора
		|ИЗ
		|	ЭДНаПодпись КАК ЭДНаПодпись
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
		|		ПО ЭДНаПодпись.СоглашениеЭД = СоглашенияЭД.Ссылка
		|			И (СоглашенияЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СертификатыИзНастроекИПрофилей КАК СертификатыЭП
		|		ПО ЭДНаПодпись.ЭД = СертификатыЭП.ЭД
		|ГДЕ
		|	НЕ СоглашенияЭД.ПометкаУдаления
		|	И НЕ СертификатыЭП.Сертификат.Отпечаток В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ЭД_ЭП.Отпечаток
		|				ИЗ
		|					Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭД_ЭП
		|				ГДЕ
		|					ЭД_ЭП.Ссылка = ЭДНаПодпись.ЭД)";
		
	Если ДляРабочегоСтола Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбора", "
			|	СертификатыЭП.Сертификат.Отпечаток КАК Отпечаток,
			|	СертификатыЭП.Сертификат.Представление КАК Сертификат,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыЭП.Сертификат) КАК ЗначениеПоказателя
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 И СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
			ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|СГРУППИРОВАТЬ ПО
			|	СертификатыЭП.Сертификат.Отпечаток,
			|	СертификатыЭП.Сертификат.Представление";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбора", "
			|	ЭДНаПодпись.ЭД КАК ЭлектронныйДокумент,
			|	ЭДНаПодпись.СуммаДокумента,
			|	ЭДНаПодпись.Версия,
			|	ЭДНаПодпись.ДатаДокументаОтправителя КАК ДатаДокумента,
			|	ЭДНаПодпись.ВидЭД КАК ВидЭД,
			|	СертификатыЭП.Сертификат КАК Сертификат
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Контрагент = &Контрагент";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.ВидЭД = &ВидЭД";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.НаправлениеЭД = &НаправлениеЭД";
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО ДатаДокумента";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеОбъектов

// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
// Параметры:
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
//    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
//    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
//    расположеной в первой строке таблицы-владельца. (подробнее см. схему ХДТО "АктТитулИсполнителя", список "ОписьРабот"
//    , вложенный список "Работа").
//
Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЭлементТЧ = (НомерСтроки <> Неопределено);
		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
		
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
			СтрокаДерева.ТЧ = ЭлементТЧ;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		Если ЭлементТЧ Тогда
			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
			Если СтрокиСписка.Количество() = 0 Тогда
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита = "Нпп";
				СтрокаДерева.ТЧ = ЭлементТЧ;
				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
			Иначе
				СтрокаДерева = СтрокиСписка[0];
			КонецЕсли;
		КонецЕсли;
		
		ДоступноСимволов = 0;
		Если ЮридическиЗначимый Тогда
			Если НомерСтроки = Неопределено Тогда
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
			Иначе
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДанныеРекурсивно(СтрокаДерева,
								 СтруктураДанных,
								 ДоступноСимволов,
								 ЮридическиЗначимый,
								 ЭлементТЧ,
								 НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодменюКомандЭДО

// Добавление команд ЭДО в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - текущая форма.
//  МестоРазмещенияКомандПоУмолчанию - ГруппаФормы - группа подменю для добавления команд.
//  НаправлениеЭД - Перечисление.НаправлениеЭД - необязательный параметр для отбора входящих и исходящих документов.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКомандПоУмолчанию = Неопределено, НаправлениеЭД = Неопределено) Экспорт
	
	Возврат;
	
	ЭлектронноеВзаимодействие.РазместитьНаФормеКомандыЭДО(Форма, МестоРазмещенияКомандПоУмолчанию, "ОбменСКонтрагентами", НаправлениеЭД);
	
КонецПроцедуры

// Формирование команд ЭДО.
//
// Параметры:
//  ПолноеИмя - Строка - имя объекта, например "Документ.РеализацияТоваровУслуг"
//  КомандыЭДО - ТаблицаЗначений - подготавливаемый список команд ЭДО
//  НаправлениеЭД - Перечисление.НаправлениеЭД - парамтр отбора входящих или исходящих документов.
//
Процедура СформироватьКомандыЭДО(ПолноеИмя, КомандыЭДО, НаправлениеЭД = Неопределено) Экспорт
	
	СоставКоманд = Новый Структура("Исходящие, Входящие, БезПодписи, Интеркампани", Новый Массив, Новый Массив,
		Новый Массив, Новый Массив);
	
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКоманд);
	
	ЗначениеФОИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	ЗначениеФОИспользоватьИнтеркампани = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭДМеждуОрганизациями");
	
	ЕстьПравоПросмотраЭД = Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ Пользователи.РолиДоступны("ЧтениеЭД");
		
	ЕстьПравоОбменаЭД = Пользователи.ЭтоПолноправныйПользователь()
		ИЛИ Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
			
		Если СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено 
			И НаправлениеЭД <> Перечисления.НаправленияЭД.Входящий Тогда
		
		Если ЗначениеФОИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru='Просмотреть электронный документ';uk='Переглянути електронний документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "СформироватьЭД";
			КомандаЭДО.Представление = НСтр("ru='Создать электронный документ';uk='Створити електронний документ'");
			КомандаЭДО.Порядок       = 11;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.СоздатьЭлементСписка;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
			КомандаЭДО.Представление = НСтр("ru='Отправить электронный документ';uk='Відправити електронний документ'");
			КомандаЭДО.Порядок       = 12;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
				
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ДеревоЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru='Открыть электронные документы';uk='Відкрити електронні документи'");
			КомандаЭДО.Порядок       = 13;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;

			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
			КомандаЭДО.Представление = НСтр("ru='Создать произвольный документ';uk='Створити довільний документ'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
		КонецЕсли;
		
		// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ВыгрузитьДанныеВФайл";
		КомандаЭДО.СписокФорм = "";
		КомандаЭДО.Идентификатор = "ВыгрузитьДанныеВФайл";
		КомандаЭДО.Представление = НСтр("ru='Выгрузить документ в файл';uk='Завантажити документ у файл'");
		КомандаЭДО.Порядок       = 50;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ВыгрузитьДанныеИзИнформационнойБазыВXMLФайл;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.ТолькоВоВсехДействиях = Истина;
		КомандаЭДО.Недоступна    = Ложь;
		
	КонецЕсли;
	
	Если СоставКоманд.Входящие.Найти(ПолноеИмя) <> Неопределено 
		И НаправлениеЭД <> Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если ЗначениеФОИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru='Просмотреть электронный документ';uk='Переглянути електронний документ'");
			КомандаЭДО.Порядок       = 21;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
				
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ДеревоЭД";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru='Открыть электронные документы';uk='Відкрити електронні документи'");
			КомандаЭДО.Порядок       = 22;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;

			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ПерезаполнитьДокумент";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "ПерезаполнитьДокумент";
			КомандаЭДО.Представление = НСтр("ru='Перезаполнить по электронному документу';uk='Перезаповнити по електронному документу'");
			КомандаЭДО.Порядок       = 23;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьДопСвойствоВНабор;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании";
			КомандаЭДО.СписокФорм = "";
			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
			КомандаЭДО.Представление = НСтр("ru='Создать произвольный документ';uk='Створити довільний документ'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
		КонецЕсли;
		
		// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ЗагрузитьДанныеИзФайла";
		КомандаЭДО.СписокФорм = "";
		КомандаЭДО.Идентификатор = "ЗагрузитьДанныеИзФайла";
		КомандаЭДО.Представление = НСтр("ru='Загрузить документ из файла';uk='Завантажити документ з файлу'");
		КомандаЭДО.Порядок       = 50;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.ТолькоВоВсехДействиях = Истина;
		КомандаЭДО.Недоступна    = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеФОИспользоватьИнтеркампани И СоставКоманд.Интеркампани.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
		КомандаЭДО.СписокФорм = "";
		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
		КомандаЭДО.Представление = НСтр("ru='Просмотреть электронный документ';uk='Переглянути електронний документ'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьЭД";
		КомандаЭДО.СписокФорм = "";
		КомандаЭДО.Идентификатор = "СформироватьЭД";
		КомандаЭДО.Представление = НСтр("ru='Создать электронный документ';uk='Створити електронний документ'");
		КомандаЭДО.Порядок       = 11;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.СоздатьЭлементСписка;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.СписокФорм = "";
		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.Представление = НСтр("ru='Подписать электронный документ';uk='Підписати електронний документ'");
		КомандаЭДО.Порядок       = 12;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;	
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция1СЭДОИ1СОтчетности

// В процедуре заполняются данные по организации для мастера 1С-Отчетности.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, по которой необходимо заполнить данные.
//  ДополнительныеПараметры - Струкутура - может иметь следующий набор свойств:
//    ЕстьПодключениеЭДО - Булево - признак подключенности переданной организации к сервису 1С-ЭДО;
//    МассивОператоровЭДО - Массив - перечень актуальных операторов ЭДО в сервисе 1С-ЭДО;
//    СсылкаОписаниеСервиса - Строка - ссылка на актуальную информацию о сервисе 1С-ЭДО.
//
Процедура ЗаполнитьДанныеПо1СЭДОДляМастера1СОтчетности(Организация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|	И ПрофилиНастроекЭДО.Организация = &Организация
	|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Запрос.Выполнить().Пустой() Тогда
		ДополнительныеПараметры.Вставить("ЕстьПодключениеЭДО", Ложь);
		
		ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
		ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
		
		// ОператорыЭДОПодключенныеК1СЭДО
		МассивОператоровЭДО = Новый Массив;
		Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
			
			ДеревоXML = ОбменСКонтрагентамиСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
			Если ДеревоXML <> Неопределено Тогда
				
				УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
				Если УзелОператорыЭДО <> Неопределено Тогда
					Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
						
						УзелОператорЭДОНаимОрг = УзелОператорЭДО.Строки.Найти("НаимОрг", "Имя");
						Если СтрНайти(УзелОператорЭДОНаимОрг.Значение, "тест") = 0 Тогда
							МассивОператоровЭДО.Добавить(УзелОператорЭДОНаимОрг.Значение);
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МассивОператоровЭДО) Тогда
			ДополнительныеПараметры.Вставить("МассивОператоровЭДО", МассивОператоровЭДО);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СсылкаОписаниеСервиса", "https://portal.1c.ru/applications/30/#conditions");
	
КонецПроцедуры

// Статус подключения организации.
//
// Параметры:
//  Организация - Справочник.Организации - ссылка на справочник Организация
//
// Возвращаемое значение:
//   Булево - признак подключения организации
//
Функция ОрганизацияПодключена(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|	И ПрофилиНастроекЭДО.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияКонтрагентовВ1СЭДО

// Метод запускает проверку состояния контрагента в сервисе 1С-ЭДО.
//
// Параметры:
//  СсылкаНаКонтрагента - Ссылка, ссылка не справочник контрагента, которого необходимо проверить по подключение к 1С-ЭДО.
//
Процедура ПроверитьКонтрагентаВ1СЭДОПриСозданииНаСервере(СсылкаНаКонтрагента) Экспорт
	
	// Проверим необходимость запуска фонового задания
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НеПодключен)";
	
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаКонтрагента);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Запуск фонового задания для проверки контрагента
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Контрагент",     СсылкаНаКонтрагента);
	ПараметрыЗапуска.Вставить("СохранятьРезультатСразуПослеПроверки", Истина);
	ПараметрыЗапуска.Вставить("АдресХранилища", Неопределено);
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаКонтрагента,
		ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
		
	ПараметрыЗапуска.Вставить("ИНН", ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
	ПараметрыЗапуска.Вставить("КПП", ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
	
	Попытка
	
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗапуска);
		
		ФоновыеЗадания.Выполнить("ОбменСКонтрагентамиСлужебный.ПроверитьКонтрагентаФоновоеЗадание", 
			Параметры, ПараметрыЗапуска.ИНН + " " + ПараметрыЗапуска.КПП, НСтр("ru='Проверка подключения ';uk='Перевірка підключення '"));
	
	Исключение
		
		// Исключение возникнет в случае запуска фонового задания с таким же ключем
		// Спецальной обработки не требуется
			
		Операция = НСтр("ru='Проверка подключения контрагента к 1С-ЭДО в фоновом задании.';uk='Перевірка підключення контрагента до 1С-ЕДО у фоновому завданні.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

 // Процедура используется для формирования дерева доп.данных.
// Данные из полученной структуры, рекурсивно добавляет в дерево доп.данных.
//
// Параметры:
//  СтрокаДереваДопДанных - Строка дерева значений - строка дерева, в которую добавляются данные.
//  СтруктураДанных - Структура - структура с добавляемыми в дерево данными. Элементами структуры могут быть: данные с
//    простым типом, массивы значений, вложенные структуры данных.
//  ДоступноСимволов - Число - количество символов, доступных для размещения данных внутри основного файла ЭД.
//  ЮридическиЗначимый - Булево - Истина - пометка данных, которые в последствии из дерева доп.данных надо будет
//    разместить в основном файле ЭД. Ложь - данные будут помещены в файл доп.данных.
//  ЭлементТЧ - Булево - данные принадлежат строке табличной части документа ИБ.
//  НомерСтроки - Строка - номер строки табличной части документа ИБ.
//
Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
								   СтруктураДанных,
								   ДоступноСимволов,
								   ЮридическиЗначимый,
								   ЭлементТЧ,
								   НомерСтроки)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Набор";
					
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = ЭлементТЧ;
					
					
					
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ,
					НомерСтроки);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Список";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = Истина;
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Список", Элемент.Ключ, ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;

					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый ;
					
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ТЗ = Элемент.Значение;
				ПоляСтруктурыТЗ = "";
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
				КонецЦикла;
				ЮридическийДо = ЮридическиЗначимый;
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтрокаДереваНпп = СтрокаДерева.Строки.Добавить();
					
					СтрокаДереваНпп.ИмяРеквизита = "Нпп";
					СтрокаДереваНпп.ТЧ = Истина;
					СтрокаДереваНпп.ЗначениеРеквизита = Строка(ТЗ.Индекс(СтрокаТЗ));
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Нпп", "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДереваНпп.ЮридическиЗначимый = ЮридическиЗначимый;
					
					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
					ДобавитьДанныеРекурсивно(СтрокаДереваНпп, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый,
						ЭлементТЧ, ТЗ.Индекс(СтрокаТЗ));
					
				КонецЦикла;
				Если Не ЮридическийДо = ЮридическиЗначимый Тогда
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
					ОбновитьСтрокиДерева(СтрокаДерева,ЮридическиЗначимый);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
																					Элемент.Значение,
																					ДоступноСимволов);
				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
					ЮридическиЗначимый = Ложь;
				КонецЕсли;
				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					НоваяСтрока.ИмяРеквизита = "Массив";
					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
					НоваяСтрока.ТЧ = ЭлементТЧ;
					Для Каждого Значение Из Элемент.Значение Цикл
						СтрокаЗн = НоваяСтрока.Строки.Добавить();
						СтрокаЗн.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
						СтрокаЗн.ТЧ = ЭлементТЧ;
						СтрокаЗн.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
						Если ТипЗнч(Значение) = Тип("Структура") Тогда
							СтрокаЗн.ЗначениеРеквизита = "Структура";
							ДобавитьДанныеРекурсивно(СтрокаЗн, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
						Иначе
							
							СтрокаЗн.ЗначениеРеквизита = Значение;
						КонецЕсли
					КонецЦикла;
				Иначе
					НоваяСтрока.ИмяРеквизита = Элемент.Ключ;
					НоваяСтрока.ЗначениеРеквизита = Элемент.Значение;
					НоваяСтрока.ТЧ = ЭлементТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
// символов), не должна превышать количества доступных символов.
//
// Параметры:
//  СтруктураДанных - Структура - заполняемая структура.
//  Ключ - Строка - ключ добавляемого элемента.
//  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
//  ДоступноСимволов - Число - количество доступных символов результирующей строки.
//
// Возвращаемое значение:
//  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
//
Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
	
	РазмещениеВозможно = Ложь;
	
	СлужебныеСимволы = 0;
	ДлинаСтрЗначения = 0;
	
	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значение Цикл
			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
		КонецЦикла;
		
		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Элемент Из Значение Цикл
			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
			Если НЕ РазмещениеВозможно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
	Иначе // простой тип.
		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
	КонецЕсли;
	
	Если ДоступноСимволов >= СлужебныеСимволы Тогда
		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
		РазмещениеВозможно = Истина;
	КонецЕсли;
	
	Возврат РазмещениеВозможно;
	
КонецФункции

Процедура ОбновитьСтрокиДерева(СтрокаДерева, ЮридическиЗначимый)
	
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		ТекСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
		Если ТекСтрока.Строки.Количество()> 0 Тогда
			ОбновитьСтрокиДерева(ТекСтрока, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область НовыеМетоды


#КонецОбласти

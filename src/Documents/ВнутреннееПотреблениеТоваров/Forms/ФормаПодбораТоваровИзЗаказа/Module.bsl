&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыНакладной = ПолучитьИзВременногоХранилища(Параметры.АдресТовары);
	ЗаполнитьРеквизитыПриСоздании(ТоварыНакладной);
	ЗаполнитьТаблицуТоваров(ТоварыНакладной);
	
	УстановитьОтборСтрокПоЗаказам();
	НастроитьЭлементыФормыПриСоздании();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Не ВыполняетсяЗакрытие И Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
		НСтр("ru='Данные были изменены. Перенести изменения в документ?';uk='Дані були змінені. Перенести зміни в документ?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ВыполняетсяЗакрытие = Истина;
		ПеренестиСтрокиВДокумент();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПоОрдеруПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаПодбораТоваровИзЗаказа.Элемент.ПоОрдеру.ПриИзменении");
	
	РассчитатьПоказательКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказуПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаПодбораТоваровИзЗаказа.Элемент.ПоЗаказу.ПриИзменении");
	
	ПоЗаказамПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказамПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаПодбораТоваровИзЗаказа.Элемент.ПоЗаказам.ПриИзменении");
	
	ПоЗаказамПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ЗаголовокСпискаЗаказов = НСтр("ru='Заказы на внутренее потребление (%КоличествоДокументов%)';uk='Замовлення на внутрішнє споживання (%КоличествоДокументов%)'");
	ПараметрыФормы = Новый Структура("СписокДокументов, Заголовок", СписокЗаказов, ЗаголовокСпискаЗаказов);
	
	ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,
		,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТаблицаТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаТовары.ТекущиеДанные <> Неопределено Тогда

		Если Поле.Имя = "ТаблицаТоварыЗаказНаВнутреннееПотребление"
			И ЗначениеЗаполнено(Элементы.ТаблицаТовары.ТекущиеДанные.ЗаказНаВнутреннееПотребление) Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТаблицаТовары.ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаТовары.ТекущиеДанные;
	
	ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок / ТекущаяСтрока.УпаковкаКоэффициент;
	ТекущаяСтрока.РасхождениеНакладная = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокВНакладной;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиСтрокиВДокумент();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтроки(Команда)

	ОтметитьСтроки(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)

	ОтметитьСтроки(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьТаблицуРассчитатьУпаковки(Таблица)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Упаковка =
			?(СтрокаТаблицы.УпаковкаЗаказа <> Неопределено, СтрокаТаблицы.УпаковкаЗаказа, СтрокаТаблицы.УпаковкаНакладной);
			
		НоваяСтрока.УпаковкаКоэффициент =
			?(ЗначениеЗаполнено(СтрокаТаблицы.УпаковкаЗаказаКоэффициент), СтрокаТаблицы.УпаковкаЗаказаКоэффициент,
			?(ЗначениеЗаполнено(СтрокаТаблицы.УпаковкаНакладнойКоэффициент), СтрокаТаблицы.УпаковкаНакладнойКоэффициент, 1));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТовары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоварыЗаказНаВнутреннееПотребление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.ЗаказНаВнутреннееПотребление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоварыКоличествоУпаковокВЗаказе.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоОрдеру");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПолностьюОбеспечен);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоварыКоличествоУпаковокВОрдере.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоОрдеру");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПолностьюОбеспечен);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоварыКоличествоУпаковок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.СтрокаВыбрана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<удалить>';uk='<вилучити>'"));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПриСоздании(ТоварыНакладной)
	
	// Реквизиты.
	ИспользоватьОрдернуюСхемуПриОтгрузке     = Параметры.ОрдернаяСхемаПриОтгрузке;
	ИспользоватьНакладныеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам");
	ЭтоРаспоряжениеНакладная = НакладныеСервер.ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Параметры.РеквизитыШапки.Ссылка);
	ИспользоватьЗаказы                       = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление")
	                                           И Не ЭтоРаспоряжениеНакладная;
	
	ПоОрдеру = ИспользоватьОрдернуюСхемуПриОтгрузке
		 И (Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить()
			= Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера);
	
	ПоЗаказам = Параметры.НакладнаяПоЗаказам;
	
	Заказ = Параметры.Заказ;
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(
		СписокЗаказов,
		Заказ,
		НадписьЗаголовокЗаказы,
		Элементы,
		Неопределено,
		ТоварыНакладной,
		"ЗаказНаВнутреннееПотребление",
		ИспользоватьНакладныеПоНесколькимЗаказам);
	
	Если ИспользоватьЗаказы И ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		Заголовок = НСтр("ru='Подбор товаров по заказам/ордерам';uk='Підбір товарів по замовленнях/ордерах'");
	ИначеЕсли ИспользоватьЗаказы Тогда
		Заголовок = НСтр("ru='Подбор товаров по заказам';uk='Підбір товарів по замовленнях'");
	Иначе
		Заголовок = НСтр("ru='Подбор товаров по ордерам';uk='Підбір товарів по ордерах'");
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.СформироватьЗаголовокФормыПодбора(Заголовок, Параметры.РеквизитыШапки.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваров(ТоварыНакладной)
	
	ДанныеОтбора = Новый Структура("РеквизитыШапки", Новый Структура(Новый ФиксированнаяСтруктура(Параметры.РеквизитыШапки)));
	МассивЗаказов = Новый Массив();
	
	// Если отгрузка уже началась, нельзя подбирать из заказов,
	// В подборе в данном случае отображаются только данные из накладной и ордеров по ней.
	МассивЗаказов.Добавить(Параметры.РеквизитыШапки.Ссылка);
	Если Не ЭтоРаспоряжениеНакладная Тогда
		МассивЗаказов.Очистить();
	КонецЕсли;
	
	ДанныеОтбора.Вставить("МассивЗаказов",      МассивЗаказов);
	ДанныеОтбора.Вставить("ТоварыНакладной",    ТоварыНакладной);
	ДанныеОтбора.Вставить("НакладнаяПоЗаказам", Параметры.НакладнаяПоЗаказам);
	
	РезультатЗапроса = Документы.ВнутреннееПотреблениеТоваров.РезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, "Подбор");
	ПоляКлюча = "ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, Назначение, Серия";
	НакладныеСервер.ЗаполнитьПоказательКоличествоПоОрдерам(РезультатЗапроса.ТаблицаОформить, РезультатЗапроса.ТаблицаОтгружено, ПоляКлюча);
	ЗагрузитьТаблицуРассчитатьУпаковки(РезультатЗапроса.ТаблицаОформить);
	ОбойтиТаблицуУдалитьСтрокиБезОтклонений(ТаблицаТовары);
	РассчитатьПоказательКоличество();
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиТаблицуУдалитьСтрокиБезОтклонений(Таблица)
	
	КоличествоСтрок = Таблица.Количество();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		
		СтрокаТаблицы = Таблица[КоличествоСтрок - Счетчик];
		РаспоряжениеНакладная = ТипЗнч(СтрокаТаблицы.ЗаказНаВнутреннееПотребление) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
		НетОтклоненийЗаказ = РаспоряжениеНакладная Или СтрокаТаблицы.КоличествоВНакладной = СтрокаТаблицы.КоличествоВЗаказе;
		НетОтклоненийОрдер = Не ИспользоватьОрдернуюСхемуПриОтгрузке Или СтрокаТаблицы.КоличествоВНакладной = СтрокаТаблицы.КоличествоВОрдере;
		НетОтклонений = НетОтклоненийЗаказ И НетОтклоненийОрдер;
		
		Если НетОтклонений Тогда
			Таблица.Удалить(КоличествоСтрок - Счетчик);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.КоличествоУпаковокВОрдере = СтрокаТаблицы.КоличествоВОрдере / СтрокаТаблицы.УпаковкаКоэффициент;
		СтрокаТаблицы.КоличествоУпаковокСобирается = СтрокаТаблицы.Собирается / СтрокаТаблицы.УпаковкаКоэффициент;
		СтрокаТаблицы.КоличествоУпаковокВЗаказе = СтрокаТаблицы.КоличествоВЗаказе / СтрокаТаблицы.УпаковкаКоэффициент;
		СтрокаТаблицы.КоличествоУпаковокВНакладной = СтрокаТаблицы.КоличествоВНакладной / СтрокаТаблицы.УпаковкаКоэффициент;
		
		Если РаспоряжениеНакладная Тогда
			СтрокаТаблицы.ЗаказНаВнутреннееПотребление = Неопределено;
		КонецЕсли;
		
		Если СписокЗаказов.НайтиПоЗначению(СтрокаТаблицы.ЗаказНаВнутреннееПотребление) <> Неопределено
			Или СтрокаТаблицы.ЗаказНаВнутреннееПотребление = Заказ Тогда
			
			СтрокаТаблицы.ЗаказИзНакладной = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказательКоличество()
	
	Для каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		СтрокаТоваров.КоличествоУпаковок = ?(ПоОрдеру, СтрокаТоваров.КоличествоУпаковокВОрдере, СтрокаТоваров.КоличествоУпаковокВЗаказе);
		СтрокаТоваров.Количество = ?(ПоОрдеру, СтрокаТоваров.КоличествоВОрдере, СтрокаТоваров.КоличествоВЗаказе);
		СтрокаТоваров.РасхождениеНакладная = СтрокаТоваров.КоличествоУпаковок - СтрокаТоваров.КоличествоУпаковокВНакладной;
		
		СтрокаТоваров.СтрокаВыбрана = СтрокаТоваров.РасхождениеНакладная <> 0
			И (СтрокаТоваров.ЗаказИзНакладной И ПоЗаказам Или Не ПоЗаказам);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	МенеджерНакладной = Документы.ВнутреннееПотреблениеТоваров;
	// Элементы формы.
	Элементы.ПоОрдеру.Видимость = ИспользоватьЗаказы И ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.СтраницыЗаказ.Видимость = ИспользоватьЗаказы И Параметры.НакладнаяПоЗаказам;
	
	// Элементы таблицы товаров.
	ПараметрыОбъекта = Новый Структура(МенеджерНакладной.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий());
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Параметры.РеквизитыШапки);
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ПараметрыОбъекта, МенеджерНакладной);
	Элементы.ТаблицаТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	Элементы.ТаблицаТоварыКоличествоУпаковокВОрдере.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.ТаблицаТоварыКоличествоУпаковокСобирается.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	
	Элементы.ТаблицаТоварыКоличествоУпаковокВЗаказе.Видимость    = ИспользоватьЗаказы;
	Элементы.ТаблицаТоварыЗаказНаВнутреннееПотребление.Видимость = ИспользоватьЗаказы;
	Элементы.ТаблицаТоварыКодСтроки.Видимость                    = ИспользоватьЗаказы;
	
	ЕстьСобирающиесяТовары = ТаблицаТовары.Итог("Собирается") > 0;
	Элементы.ДекорацияИнфо.Видимость = ЕстьСобирающиесяТовары;
	Элементы.ДекорацияИнформацияЕстьСобирающиесяТовары.Видимость = ЕстьСобирающиесяТовары;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСтрокПоЗаказам()
	
	Если ПоЗаказам Тогда
		Элементы.ТаблицаТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЗаказИзНакладной", Истина);
	Иначе
		Элементы.ТаблицаТовары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#Область Прочее

&НаСервере
Функция ПоместитьТоварыВХранилище()

	АдресВХранилище = НакладныеСервер.ПодборПоЗаказамПоместитьТоварыВХранилище(ТаблицаТовары);
	Возврат АдресВХранилище;

КонецФункции

&НаКлиенте
Процедура ПеренестиСтрокиВДокумент()

	// Снятие модифицированности, т.к. перед закрытием признак проверяется.
	Модифицированность = Ложь;
	ТекстПредупреждения = ПроверитьВыборНесколькихЗаказов();
	
	Если ТекстПредупреждения <> "" Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьТоварыВХранилище();

	Закрыть();

	ОповеститьОВыборе(Новый Структура("ВыполняемаяОперация, АдресВХранилище",
						"ПодборТоваровИзЗаказа", АдресВХранилище));

КонецПроцедуры

&НаСервере
Функция ПроверитьВыборНесколькихЗаказов()
	
	ПервыйЗаказ = Неопределено;
	ВыбранаСтрокаБезЗаказа = Ложь;
	ШаблонБолееОдногоЗаказа = НСтр("ru='Нельзя выбрать товары больше, чем по одному заказу.';uk='Не можна вибрати товари більше, ніж по одному замовленню.'");
	ШаблонБезЗаказаИПоЗаказу = НСтр("ru='Нельзя выбрать товары по заказу и без указания заказа одновременно.';uk='Не можна вибрати товари по замовленню і без зазначення замовлення одночасно.'");
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.СтрокаВыбрана И СтрокаТовары.Количество <> 0 Тогда
			
			Если ПервыйЗаказ <> Неопределено И СтрокаТовары.ЗаказНаВнутреннееПотребление <> ПервыйЗаказ
				И Не ИспользоватьНакладныеПоНесколькимЗаказам Тогда
					Возврат ШаблонБолееОдногоЗаказа;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.ЗаказНаВнутреннееПотребление) Тогда
				ПервыйЗаказ = СтрокаТовары.ЗаказНаВнутреннееПотребление;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.ЗаказНаВнутреннееПотребление) Тогда
				ВыбранаСтрокаБезЗаказа = Истина;
			КонецЕсли;
			
			Если ВыбранаСтрокаБезЗаказа И ПервыйЗаказ <> Неопределено Тогда
				Возврат ШаблонБезЗаказаИПоЗаказу;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ОтметитьСтроки(Значение)

	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		Если СтрокаТоваров.ЗаказИзНакладной И ПоЗаказам Или Не ПоЗаказам И СтрокаТоваров.СтрокаВыбрана <> Значение Тогда
		
			СтрокаТоваров.СтрокаВыбрана = Значение;
		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоЗаказамПриИзмененииСервер()
	
	УстановитьОтборСтрокПоЗаказам();
	
	Для каждого СтрокаТоваров Из ТаблицаТовары Цикл
		СтрокаТоваров.СтрокаВыбрана = СтрокаТоваров.РасхождениеНакладная <> 0
			И (СтрокаТоваров.ЗаказИзНакладной И ПоЗаказам Или Не ПоЗаказам);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

ВыполняетсяЗакрытие = Ложь;
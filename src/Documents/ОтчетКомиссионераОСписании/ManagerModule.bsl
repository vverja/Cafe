#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	Документы.СчетНаОплатуКлиенту.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	Справочники.ПретензииКлиентов.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);


КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ОтчетКомиссионераОСписании) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ОтчетКомиссионераОСписании.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ОтчетКомиссионераОСписании);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьКомиссиюПриПродажах";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСКомиссионерами(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуТоварыПереданныеНаКомиссию(КомандыОтчетов);

КонецПроцедуры


// Функция определяет реквизиты документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетКомиссионераОСписании - Ссылка на документ
//
// Возвращаемое значение:
//	Структура - Реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.КонецПериода КАК КонецПериода,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
		НачалоПериода = Выборка.НачалоПериода;
		КонецПериода = Выборка.КонецПериода;
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
		НачалоПериода = Неопределено;
		КонецПериода = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, СуммаДокумента, СуммаВзаиморасчетов, НачалоПериода, КонецПериода",
		Дата,
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании,
		СуммаДокумента,
		СуммаВзаиморасчетов,
		НачалоПериода,
		КонецПериода);
	
	Возврат СтруктураРеквизитов;

КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаТоварыПереданныеНаКомиссию(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Организация                КАК Организация,
		|	ДанныеДокумента.Партнер                    КАК Партнер,
		|	ДанныеДокумента.Контрагент                 КАК Контрагент,
		|	ДанныеДокумента.Дата                       КАК Период,
		|	ДанныеДокумента.Валюта                     КАК Валюта,
		|	ДанныеДокумента.Подразделение              КАК Подразделение,
		|	ДанныеДокумента.Соглашение                 КАК Соглашение,
		|	ДанныеДокумента.СтатьяДоходов              КАК СтатьяДоходов,
		|	ДанныеДокумента.АналитикаДоходов           КАК АналитикаДоходов,
		|	ДанныеДокумента.СтатьяРасходов             КАК СтатьяРасходов,
		|	ДанныеДокумента.АналитикаРасходов          КАК АналитикаРасходов,
		|	ДанныеДокумента.Договор                    КАК Договор,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                                  КАК РасчетыПоДоговорам,
		|		
		|	ВЫБОР КОГДА ДанныеДокумента.КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ ДанныеДокумента.КонецПериода > ДанныеДокумента.Дата ТОГДА
		|				ДанныеДокумента.Дата
		|			ИНАЧЕ
		|				ДанныеДокумента.КонецПериода
		|		КОНЕЦ                                  КАК КонецПериода,
		|		
		|	ДанныеДокумента.ГруппаФинансовогоУчета     КАК ГруппаФинансовогоУчета,
		|	ДанныеДокумента.НаправлениеДеятельности     КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|	
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка";
		
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                 Реквизиты.Период);
	Запрос.УстановитьПараметр("КонецПериода",           КонецДня(Реквизиты.КонецПериода));
	Запрос.УстановитьПараметр("Валюта",                 Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Организация",            Реквизиты.Организация);
	Запрос.УстановитьПараметр("Партнер",                Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Соглашение",             Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("Подразделение",          Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("СтатьяДоходов",          Реквизиты.СтатьяДоходов);
	Запрос.УстановитьПараметр("АналитикаДоходов",       Реквизиты.АналитикаДоходов);
	Запрос.УстановитьПараметр("СтатьяРасходов",         Реквизиты.СтатьяРасходов);
	Запрос.УстановитьПараметр("АналитикаРасходов",      Реквизиты.АналитикаРасходов);
	Запрос.УстановитьПараметр("Договор",                Реквизиты.Договор);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",     Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("Контрагент",             Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Реквизиты.ГруппаФинансовогоУчета);
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",          Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании);
	
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов",
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	Запрос.УстановитьПараметр("ИспользоватьПартионныйУчет", ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет"));
	
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Реквизиты.НаправлениеДеятельности);	
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыПереданныеНаКомиссию(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыПереданныеНаКомиссию";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнойТаблицыВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)        КАК ВидДвижения,
		|	&КонецПериода                                 КАК Период,
		|	&Организация                                  КАК Организация,
		|	&Партнер                                      КАК Партнер,
		|	&Соглашение                                   КАК Соглашение,
		|	ТаблицаВидыЗапасов.Номенклатура               КАК Номенклатура,
		|	ТаблицаВидыЗапасов.Характеристика             КАК Характеристика,
		|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.ЦелевоеНалоговоеНазначение КАК НалоговоеНазначение,
		|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество                 КАК Количество,
		|	0                                             КАК СуммаВыручки,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюОтчетовКомитенту";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнойТаблицыВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтСоответствиеКорВидовЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСоответствиеКорВидовЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	Строки.Валюта КАК Валюта,
	|	Строки.ВидЗапасов КАК ВидЗапасов,
	|	Строки.АналитикаНоменклатурыКомитента КАК АналитикаУчетаНоменклатуры,
	|	Строки.Номенклатура КАК Номенклатура,
	|	Строки.Характеристика КАК Характеристика,
	|	Строки.НомерГТД КАК НомерГТД,
	|	Строки.ЦелевоеНалоговоеНазначение КАК НалоговоеНазначение,
	|	Строки.СтавкаНДС КАК СтавкаНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Строки.Количество КАК КоличествоСписано,
	|	ВтСоответствиеКорВидовЗапасов.ВидЗапасов КАК КорВидЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСоответствиеКорВидовЗапасов КАК ВтСоответствиеКорВидовЗапасов
	|		ПО Строки.ЦелевоеНалоговоеНазначение = ВтСоответствиеКорВидовЗапасов.ЦелевоеНалоговоеНазначение
	|ГДЕ
	|	Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
		|	&Период КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|
		|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		&Ссылка
		|	КОНЕЦ КАК ЗаказКлиента,
		|
		|	&Валюта КАК Валюта,
		|	
		|	Истина КАК ИсключатьПриКонтроле,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	0 КАК КОплате,
		|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))  КАК СуммаУпр
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|	
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И ДанныеДокумента.СуммаДокумента <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(ДанныеДокумента.ДатаПлатежа, День) КАК Период,
		|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
		|	&Период КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|
		|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		&Ссылка
		|	КОНЕЦ КАК ЗаказКлиента,
		|
		|	&Валюта КАК Валюта,
		|	
		|	Истина КАК ИсключатьПриКонтроле,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	
		|	0 КАК Сумма,
		|	ДанныеДокумента.СуммаДокумента КАК КОплате,
		|	0 КАК СуммаРегл,
		|	0 КАК СуммаУпр
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|	
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И ДанныеДокумента.СуммаДокумента <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.СтатьяДоходов КАК СтатьяДоходов,
		|	ДанныеДокумента.АналитикаДоходов КАК АналитикаДоходов,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК Сумма
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|	
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И ДанныеДокумента.СуммаДокумента <> 0
		|	И &ИспользоватьУчетПрочихДоходовРасходов";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураДоходыРасходы";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнойТаблицыВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|
		|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	&Партнер КАК Склад,
		|	ТаблицаТовары.ТипЗапасов КАК ТипЗапасов,
		|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
		|		ТаблицаТовары.ВидЗапасов
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|	КОНЕЦ КАК ВидЗапасов,
		|
		|	&СтатьяРасходов КАК СтатьяДоходовРасходов,
		|	&АналитикаРасходов КАК АналитикаРасходов,
		|
		|	ТаблицаТовары.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	0 КАК СтоимостьБезНДС,
		|	0 КАК СтоимостьРегл,
		|
		|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
		|		ТаблицаТовары.ВидЗапасов
		|	ИНАЧЕ 
		|		ТаблицаТовары.Номенклатура
		|	КОНЕЦ КАК ИсточникГФУНоменклатуры
		|
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаТовары";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДоходыПоОтчетуКомиссионераОСписании) КАК ХозяйственнаяОперация,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|	
		|	&Партнер КАК Партнер,
		|	&Контрагент КАК Контрагент,
		|	&Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА &РасчетыПоДоговорам
		|			ТОГДА &Договор
		|		ИНАЧЕ &Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ДанныеДокумента.СтатьяДоходов КАК СтатьяДоходовРасходов,
		|	ДанныеДокумента.АналитикаДоходов КАК АналитикаДоходов,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
		|	
		|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК Сумма,
		|	0 КАК СуммаБезНДС,
		|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) КАК СуммаРегл,
		|	0 КАК СуммаРеглБезНДС,
		|	
		|	&Валюта КАК Валюта,
		|	ДанныеДокумента.СуммаДокумента КАК СуммаВВалюте,
		|	0 КАК СуммаБезНДСВВалюте,
		|	
		|	&Валюта КАК ВалютаВзаиморасчетов,
		|	ДанныеДокумента.СуммаДокумента КАК СуммаВВалютеВзаиморасчетов,
		|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
		|	
		|	ВЫБОР КОГДА &РасчетыПоДоговорам
		|		ТОГДА &Договор
		|		ИНАЧЕ &Ссылка
		|	КОНЕЦ КАК ИсточникГФУРасчетов
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|	
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И ДанныеДокумента.СуммаДокумента <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнойТаблицыВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтСоответствиеКорВидовЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСоответствиеКорВидовЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Строки.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)КАК ВидДвижения,
		|	&КонецПериода КАК Период,
		|	Строки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	&Организация КАК Организация,
		|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
		|	КОНЕЦ КАК РазделУчета,
		|
		|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
		|		Строки.ВидЗапасов
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|	КОНЕЦ КАК ВидЗапасов,
		|	Строки.НалоговоеНазначение 			КАК НалоговоеНазначение,
		|	Строки.ЦелевоеНалоговоеНазначение 	КАК КорНалоговоеНазначение,
		|
		|	Строки.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	&СтатьяРасходов КАК СтатьяРасходовСписания,
		|	&АналитикаРасходов КАК АналитикаРасходов,
		|	&Подразделение КАК Подразделение
		|ИЗ
		|	ВтВидыЗапасов КАК Строки
		|ГДЕ
		|	Строки.ТипЗапасов В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Строки.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)КАК ВидДвижения,
		|	&КонецПериода КАК Период,
		|	Строки.АналитикаНоменклатурыКомитента КАК АналитикаУчетаНоменклатуры,
		|	&Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
		|
		|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
		|		ВтСоответствиеКорВидовЗапасов.ВидЗапасов
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|	КОНЕЦ КАК ВидЗапасов,
		|	Строки.ЦелевоеНалоговоеНазначение 			КАК НалоговоеНазначение,
		|	Строки.ЦелевоеНалоговоеНазначение 	КАК КорНалоговоеНазначение,
		|
		|	Строки.Количество КАК Количество,
		|	0 КАК Стоимость,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	&СтатьяРасходов КАК СтатьяРасходовСписания,
		|	&АналитикаРасходов КАК АналитикаРасходов,
		|	&Подразделение КАК Подразделение
		|ИЗ
		|	ВтВидыЗапасов КАК Строки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСоответствиеКорВидовЗапасов КАК ВтСоответствиеКорВидовЗапасов
		|		ПО Строки.ЦелевоеНалоговоеНазначение = ВтСоответствиеКорВидовЗапасов.ЦелевоеНалоговоеНазначение
		|ГДЕ
		|	Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнойТаблицыВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ПересчитатьТаблицуТоваровВВалютуРегл(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Валюта КАК Валюта,
		|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаВидыЗапасов.СуммаСНДС - ТаблицаВидыЗапасов.СуммаНДС КАК СуммаБезНДС,
		|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокументаРегл.СуммаБезНДС КАК СуммаБезНДСРегл,
		|	ТаблицаДокументаРегл.СуммаНДС КАК СуммаНДСРегл,
		|	НЕОПРЕДЕЛЕНО КАК ТипРасчетов
		|
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаТоваровПредварительная КАК ТаблицаДокументаРегл
		|	ПО
		|		ТаблицаВидыЗапасов.ИдентификаторСтроки = ТаблицаДокументаРегл.ИдентификаторСтроки
		|
		|ГДЕ
		|	&Валюта <> &ВалютаРегламентированногоУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнойТаблицыВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	АналитикаКомитента.КлючАналитики КАК АналитикаНоменклатурыКомитента,
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ТаблицаВидыЗапасов.ВидЗапасов.Валюта КАК Валюта,
		|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
		|	ТаблицаВидыЗапасов.ВидЗапасов.Комитент КАК Комитент,
		|	ТаблицаВидыЗапасов.Количество КАК Количество,
		|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаВидыЗапасов.ВидЗапасов.НалоговоеНазначение КАК НалоговоеНазначение,
	    |	ТаблицаВидыЗапасов.ЦелевоеНалоговоеНазначение     КАК ЦелевоеНалоговоеНазначение,
		|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
		|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки
		|
		|ПОМЕСТИТЬ ВтВидыЗапасов
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании.ВидыЗапасов КАК ТаблицаВидыЗапасов
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|	ПО
		|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаКомитента
		|	ПО
		|		ТаблицаВидыЗапасов.ВидЗапасов.Комитент = АналитикаКомитента.Склад
		|		И Аналитика.Номенклатура = АналитикаКомитента.Номенклатура
		|		И Аналитика.Характеристика = АналитикаКомитента.Характеристика
		|		И Аналитика.Серия = АналитикаКомитента.Серия
		|ГДЕ
		|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос("
		|ВЫБРАТЬ
		|	ВидыЗапасов.Комитент КАК Склад,
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Характеристика КАК Характеристика,
		|	Аналитика.Серия КАК Серия
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании.ВидыЗапасов КАК ТаблицаВидыЗапасов
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ВидыЗапасов КАК ВидыЗапасов
		|	ПО
		|		ТаблицаВидыЗапасов.ВидЗапасов = ВидыЗапасов.Ссылка
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|	ПО
		|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
		|	ПО
		|		Аналитика.Номенклатура = Ключи.Номенклатура
		|		И Аналитика.Характеристика = Ключи.Характеристика
		|		И Аналитика.Серия = Ключи.Серия
		|		И ВидыЗапасов.Комитент = Ключи.Склад
		|ГДЕ
		|	ТаблицаВидыЗапасов.Ссылка = &Ссылка
		|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|	И Ключи.Номенклатура ЕСТЬ NULL");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта, , Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Запрос.Параметры));
	
КонецПроцедуры

Функция ТекстЗапросаВтСоответствиеКорВидовЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтСоответствиеКорВидовЗапасов"; 
	
	ИнициализироватьКорВидыЗапасов(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СоответствиеКорВидовЗапасов.ЦелевоеНалоговоеНазначение  КАК ЦелевоеНалоговоеНазначение,
	|	СоответствиеКорВидовЗапасов.ВидЗапасов		 			КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтСоответствиеКорВидовЗапасов
	|ИЗ
	|	&СоответствиеКорВидовЗапасов КАК СоответствиеКорВидовЗапасов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВтСоответствиеКорВидовЗапасов

Процедура ИнициализироватьКорВидыЗапасов(Запрос)
	
	Если Запрос.Параметры.Свойство("СоответствиеКорВидовЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеКорВидовЗапасов = Новый ТаблицаЗначений;
	СоответствиеКорВидовЗапасов.Колонки.Добавить("ЦелевоеНалоговоеНазначение", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат")); 
	СоответствиеКорВидовЗапасов.Колонки.Добавить("ВидЗапасов",		 Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов")); 
	
	ЗапросЦелевыхНазначений = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВидыЗапасов.ЦелевоеНалоговоеНазначение КАК ЦелевоеНалоговоеНазначение
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|");
	
	ЗапросЦелевыхНазначений.УстановитьПараметр("Ссылка",				Запрос.Параметры.Ссылка);
	
	Выборка = ЗапросЦелевыхНазначений.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КорВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
			Запрос.Параметры.Организация, 
			Запрос.Параметры.ХозяйственнаяОперация,
			,
			Выборка.ЦелевоеНалоговоеНазначение
		);
		
		НоваяСтрока = СоответствиеКорВидовЗапасов.Добавить();
		НоваяСтрока.ЦелевоеНалоговоеНазначение	= Выборка.ЦелевоеНалоговоеНазначение;
		НоваяСтрока.ВидЗапасов					= КорВидЗапасов;
		
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("СоответствиеКорВидовЗапасов", СоответствиеКорВидовЗапасов);
	
КонецПроцедуры // ИнициализироватьКорВидыЗапасов

Процедура ПересчитатьТаблицуТоваровВВалютуРегл(Запрос)
	
	Если Запрос.Параметры.Свойство("ТаблицаТоваровПредварительнаяРасчитана") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПредварительный = Новый Запрос;
	ЗапросПредварительный.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПредварительный.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
		|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
		|	ТаблицаДокумента.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
		|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
		|	ТаблицаДокумента.СтавкаНДС                             КАК СтавкаНДС,
		|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС,
		|	&Валюта                                                КАК Валюта,
		|	&Период                                                КАК Дата
		|
		|ПОМЕСТИТЬ ТаблицаТоваровПредварительная
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании.ВидыЗапасов КАК ТаблицаДокумента
		|
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И &Валюта <> &ВалютаРегламентированногоУчета";
		
	ЗапросПредварительный.УстановитьПараметр("Ссылка",                         Запрос.Параметры.Ссылка);
	ЗапросПредварительный.УстановитьПараметр("Период",                         Запрос.Параметры.Период);
	ЗапросПредварительный.УстановитьПараметр("Валюта",                         Запрос.Параметры.Валюта);
	ЗапросПредварительный.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ЗапросПредварительный.Выполнить();
	
	ОбщегоНазначенияУТ.ПересчитатьТаблицуТоваровВВалютуРегл(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("ТаблицаТоваровПредварительнаяРасчитана", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Отчет комиссионера о списании
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати                 = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор                  = "ОтчетКомиссионераСписание";
	КомандаПечати.Представление                  = НСтр("ru='Отчет комиссионера о списании';uk='Звіт комісіонера про списання'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыОтчетПоКомиссииОСписании(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|   ИСТИНА КАК УчитыватьНДС,
	|   Товары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов) И Товары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|СГРУППИРОВАТЬ ПО Товары.Ссылка 
	|;
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Контрагент КАК Комиссионер,
	|	ДанныеДокумента.Организация КАК Комитент,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	Истина КАК ЦенаВключаетНДС, // Цена и сумма комитента всегда выводятся с НДС
	|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС,
	|	"""" КАК МестоСоставленияДокумента,
	|	ДанныеДокумента.Договор.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	Истина КАК ЭтоОтчетКомиссионера,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетКомитента,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетКомиссионера,
	|	"""" КАК ПредставительКомитентаСтрокой,
	|	ДанныеДокумента.Менеджер.ТекущаяДолжность КАК ПредставительКомитентаДолжность,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ПредставительКомитента,
	|	"""" КАК ПредставительКомиссионераСтрокой,
	|	"""" КАК ПредставительКомиссионераДолжность,
	|	"""" КАК ПредставительКомиссионера
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
	|		ПО ДанныеДокумента.Ссылка = ТаблицаУчитыватьНДС.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивДокументов)
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ТаблицаТовары.Упаковка
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Упаковка КАК Упаковка,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.СуммаСНДС КАК Сумма,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка В(&МассивДокументов)
	|		И ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Наименование
	|	КОНЕЦ,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВложенныйЗапрос.Упаковка",
			"ВложенныйЗапрос.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Заголовок 					= НСтр("ru='Отчет комиссионера о списании';uk='Звіт комісіонера про списання'");
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[1];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[2];
	СтруктураДанныхДляПечати 	= Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти, Заголовок",
		РезультатПоШапке,
		РезультатПоТабличнойЧасти,
		Заголовок);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                                     "ОтчетКомиссионера", НСтр("ru='Отчет комиссионера';uk='Звіт комісіонера'"), "Обработка.ПечатьОбщихФорм", Неопределено));
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции


#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли

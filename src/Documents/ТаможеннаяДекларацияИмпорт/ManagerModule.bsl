#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);


КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ТаможеннаяДекларацияИмпорт) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ТаможеннаяДекларацияИмпорт);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьИмпортныеЗакупки";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,РабочееМесто";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,РабочееМесто";
	КонецЕсли;

КонецПроцедуры


// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, ВсеРеквизиты, РеквизитыОперации) Экспорт
	ВсеРеквизиты = Новый Массив;
	РеквизитыОперации = Новый Массив;
	
КонецПроцедуры

Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	Реквизиты = Новый Структура("
		|Дата,
		|ХозяйственнаяОперация,
		|Организация,
		|Партнер,
		|Контрагент,
		|Договор,
		|ПорядокРасчетов,
		|РасчетыПоДоговору,
		|ПоЗаказу,
		|ВалютаВзаиморасчетов,
		|СуммаДокумента,
		|СуммаВзаиморасчетов,
		|НаправлениеДеятельности",
		'00010101',
		Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно,
		Справочники.Организации.ПустаяСсылка(),
		Справочники.Партнеры.ПустаяСсылка(),
		Справочники.Контрагенты.ПустаяСсылка(),
		Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),
		Перечисления.ПорядокРасчетов.ПустаяСсылка(),
		Ложь,
		Ложь,
		Справочники.Валюты.ПустаяСсылка(),
		0,
		0,
		Справочники.НаправленияДеятельности.ПустаяСсылка());
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Дата КАК Дата,
	|	Данные.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Данные.Организация КАК Организация,
	|	Данные.Партнер КАК Партнер,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.Договор КАК Договор,
	|	Данные.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ВЫБОР КОГДА Данные.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,         
	|	ЛОЖЬ КАК ПоЗаказу,
	|	Данные.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Данные.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР КОГДА Данные.Проведен ТОГДА
	|		Данные.СуммаВзаиморасчетов
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Данные.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	Возврат Реквизиты;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ТаможеннаяДекларацияИмпорт";
	
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Склад");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Склад,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СуммаДокумента(Объект) Экспорт
	Возврат Объект.ТаможенныйСбор + Объект.Разделы.Итог("СуммаПошлины") + Объект.Разделы.Итог("СуммаАкциза") + Объект.Разделы.Итог("СуммаНДС");
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуВзаиморасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты =
		РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта, Запрос.Параметры.ВалютаВзаиморасчетов, Запрос.Параметры.Период);
	КоэффициентыВзаиморасчетов =
		РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.ВалютаВзаиморасчетов, , Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",            Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",           Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуВзаиморасчетов", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	
КонецПроцедуры


Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, СтруктураДополнительныеСвойства)
	
	 Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ПоставкаНаКомиссию КАК ПоставкаНаКомиссию,
	|	ДанныеДокумента.ПоступлениеСоглашение КАК ПоступлениеСоглашение,
	|	ДанныеДокумента.ВалютаВзаиморасчетовСКомитентом КАК ВалютаВзаиморасчетовСКомитентом,
	|	ДанныеДокумента.ОтнестиСтоимостьТаможеннойОчисткиНаРасходы КАК ОтнестиСтоимостьТаможеннойОчисткиНаРасходы,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ДанныеДокумента.Договор
	|	ИНАЧЕ
	|		ДанныеДокумента.Ссылка
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ВыпущеноСТаможни,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Менеджер КАК Менеджер,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.КонтрагентПоставщика КАК КонтрагентПоставщика,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|	
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("ОбъектРасчетов", Реквизиты.ОбъектРасчетов);
	Запрос.УстановитьПараметр("ВыпущеноСТаможни", Реквизиты.ВыпущеноСТаможни);
	Запрос.УстановитьПараметр("СебестоимостьПоВидамЗапасов", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Менеджер", Реквизиты.Менеджер);
	
	Запрос.УстановитьПараметр("Договор", Реквизиты.Договор);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Реквизиты.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("ИспользоватьПартионныйУчет", ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет"));
	Запрос.УстановитьПараметр("Валюта", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("КонтрагентПоставщика", Реквизиты.КонтрагентПоставщика);
	Запрос.УстановитьПараметр("ПоставкаНаКомиссию", Реквизиты.ПоставкаНаКомиссию);
	Запрос.УстановитьПараметр("ПоступлениеСоглашение", Реквизиты.ПоступлениеСоглашение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовСКомитентом", Реквизиты.ВалютаВзаиморасчетовСКомитентом);
	Запрос.УстановитьПараметр("ОтнестиСтоимостьТаможеннойОчисткиНаРасходы", Реквизиты.ОтнестиСтоимостьТаможеннойОчисткиНаРасходы);
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС", НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", Справочники.Организации.НалоговоеНазначениеНДС(Реквизиты.Организация, Реквизиты.Период));
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДополнительныеСвойства);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса

	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизацийКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
    ТекстЗапросаТаблицаНДСРеестрПолученныхНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры);
   	ТекстЗапросаТаблицаНДСУсловныеПродажи(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаТовары";
	
    УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходовСбор          КАК СтатьяРасходов,
    |	ДанныеДокумента.СтатьяРасходовСбор.ВариантРаспределенияРасходов КАК ВариантРаспределенияРасходов,
	|	ДанныеДокумента.АналитикаРасходовСбор       КАК АналитикаРасходов,
    |	ДанныеДокумента.ХозяйственнаяОперация       КАК ХозяйственнаяОперация,
    |   ДанныеДокумента.АналитикаУчетаПартий        КАК АналитикаУчетаПартийДанныеДокумента,
    |
	|	ТаблицаТовары.НомерСтроки                   КАК НомерСтроки,
	|	ТаблицаТовары.Ссылка                        КАК Ссылка,
	|	ТаблицаТовары.Номенклатура                  КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                КАК Характеристика,
	|	ТаблицаТовары.Серия                         КАК Серия,
	|
	|	ТаблицаТовары.НомерГТД                      КАК НомерГТД,
	|	ТаблицаТовары.ВидЗапасов                    КАК ВидЗапасов,
	|
	|	ТаблицаТовары.Количество                    КАК Количество,
	|	ТаблицаТовары.Склад                         КАК Склад,
	|	ТаблицаТовары.СуммаПошлины                  КАК СуммаПошлины,
    |	ТаблицаТовары.СуммаАкциза                   КАК СуммаАкциза,
    |	ТаблицаТовары.ТаможенныйСбор                КАК ТаможенныйСбор,
	|	ТаблицаТовары.СуммаНДС                      КАК СуммаНДС,
	|	ТаблицаТовары.СуммаНДСПропорционально       КАК СуммаНДСПропорционально,
	|	ТаблицаТовары.НалоговоеНазначение           КАК НалоговоеНазначение,
    |	ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ТаблицаТовары.АналитикаУчетаПартий          КАК АналитикаУчетаПартий,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|
	|	ВЫРАЗИТЬ (((ТаблицаТовары.СуммаПошлины+ТаблицаТовары.СуммаАкциза+ТаблицаТовары.ТаможенныйСбор+ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуУПР) КАК ЧИСЛО(15,2)) КАК СуммаСНДСУпр,
    |	ВЫРАЗИТЬ (((ТаблицаТовары.СуммаПошлины+ТаблицаТовары.СуммаАкциза+ТаблицаТовары.ТаможенныйСбор) * &КоэффициентПересчетаВВалютуУПР) КАК ЧИСЛО(15,2)) КАК СуммаБезНДСУпр,
    |
    |	ТаблицаТовары.СуммаПошлины+ТаблицаТовары.СуммаАкциза+ТаблицаТовары.ТаможенныйСбор+ТаблицаТовары.СуммаНДС КАК СуммаСНДСРегл,
    |	ТаблицаТовары.СуммаПошлины+ТаблицаТовары.СуммаАкциза+ТаблицаТовары.ТаможенныйСбор + ТаблицаТовары.СуммаНДСПропорционально КАК СуммаБезНДСРегл,
    |	ТаблицаТовары.СуммаНДС - ТаблицаТовары.СуммаНДСПропорционально КАК СуммаНДСРегл,
    |
    |	ТаблицаТовары.СуммаПошлины+ТаблицаТовары.СуммаАкциза+ТаблицаТовары.ТаможеннаяСтоимость КАК БазаНДСРегл
    |
	|
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаблицаТовары
    |
	|	    ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ПО 
	|			ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ // задолженность перед таможней/брокером
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	&ОбъектРасчетов КАК ЗаказПоставщику,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	0 КАК КОплате,
	|	0 КАК КПоступлению,
	|
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.Дата КАК ДатаРегистратора,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.СуммаВзаиморасчетов <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // к оплате таможне/брокеру
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.ДатаПлатежа, День) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	&ОбъектРасчетов КАК ЗаказПоставщику,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК КОплате,
	|	0 КАК КПоступлению,
	|
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.Дата КАК ДатаРегистратора,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка И ДанныеДокумента.СуммаВзаиморасчетов <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
    
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТоварыДокумента.Организация КАК Организация,
	|	ТоварыДокумента.Подразделение КАК Подразделение,
	|	ТоварыДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ТоварыДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|
    |	СУММА(ТоварыДокумента.СуммаСНДСУпр) КАК Сумма,
	|
	|	ТоварыДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтТаблицаТовары КАК ТоварыДокумента
    |
	|ГДЕ
	|	&ВыпущеноСТаможни
	|	И &ОтнестиСтоимостьТаможеннойОчисткиНаРасходы
	|	И (ТоварыДокумента.СуммаПошлины <> 0 ИЛИ 
	|	   ТоварыДокумента.СуммаАкциза <> 0 ИЛИ 
	|	   ТоварыДокумента.ТаможенныйСбор <> 0 ИЛИ
	|	   ТоварыДокумента.СуммаНДС <> 0)
	|	И ТоварыДокумента.ВариантРаспределенияРасходов <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
    |
    |СГРУППИРОВАТЬ ПО    
	|	ТоварыДокумента.Организация,
	|	ТоварыДокумента.Подразделение,
	|	ТоварыДокумента.СтатьяРасходов,
	|	ТоварыДокумента.АналитикаРасходов,
    |	ТоварыДокумента.ХозяйственнаяОперация
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
    
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	ВЫБОР КОГДА &СебестоимостьПоВидамЗапасов ТОГДА
	|		ТоварыДокумента.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	ТоварыДокумента.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТоварыДокумента.Организация КАК Организация,
	|
	|	0 КАК Количество,
	|	0 КАК Стоимость,
    |	0 КАК СтоимостьБезНДС,
	|	СУММА(ТоварыДокумента.СуммаСНДСУпр) КАК СуммаДопРасходов,
    |	СУММА(ТоварыДокумента.СуммаБезНДСУпр) КАК СуммаДопРасходовБезНДС,
	|
	|	СУММА(
	|	    ВЫБОР КОГДА ТоварыДокумента.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) ТОГДА
	|			ТоварыДокумента.СуммаБезНДСРегл + ТоварыДокумента.СуммаНДСРегл
	|		ИНАЧЕ
	|			ТоварыДокумента.СуммаБезНДСРегл
	|		КОНЕЦ) КАК СтоимостьРегл,
	|	СУММА(ТоварыДокумента.СуммаБезНДСРегл) КАК СтоимостьРеглБезНДС,
	|	СУММА(ТоварыДокумента.СуммаНДСРегл) КАК НДСРегл,
	|
	|	ТоварыДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТоварыДокумента.Подразделение КАК Подразделение
	|ИЗ
    |	ВтТаблицаТовары КАК ТоварыДокумента
	|
	|ГДЕ
	|	&ВыпущеноСТаможни
	|	И НЕ &ОтнестиСтоимостьТаможеннойОчисткиНаРасходы
	|	И (ТоварыДокумента.СуммаПошлины <> 0 ИЛИ 
	|	   ТоварыДокумента.СуммаАкциза <> 0 ИЛИ 
	|	   ТоварыДокумента.ТаможенныйСбор <> 0 ИЛИ
	|	   ТоварыДокумента.СуммаНДС <> 0)
    |
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &СебестоимостьПоВидамЗапасов ТОГДА
	|		ТоварыДокумента.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТоварыДокумента.НалоговоеНазначение,
	|	ТоварыДокумента.Организация,
	|	ТоварыДокумента.ХозяйственнаяОперация,
	|	ТоварыДокумента.Подразделение
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
    
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Организация КАК Организация,
	|	ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ТоварыДокумента.НомерГТД КАК НомерГТД,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ТоварыДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
    |	ВтТаблицаТовары КАК ТоварыДокумента
	|ГДЕ
	|	&ВыпущеноСТаможни
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
    
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
    КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК ДатаПоступления,
	|	Строки.Номенклатура   КАК Номенклатура,
	|	Строки.Характеристика КАК Характеристика,
	|	Строки.Серия          КАК Серия,
	|	Строки.ВидЗапасов     КАК ВидЗапасов,
	|	Строки.НомерГТД       КАК НомерГТД
	|ИЗ
    |	ВтТаблицаТовары КАК Строки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК Даты
	|	ПО
	|		Строки.ВидЗапасов = Даты.ВидЗапасов 
	|		И Строки.Номенклатура = Даты.Номенклатура
	|		И Строки.Характеристика = Даты.Характеристика 
	|		И Строки.Серия = Даты.Серия
	|		И Строки.НомерГТД = Даты.НомерГТД 
	|
	|
	|ГДЕ
    |	&ВыпущеноСТаможни
	|	И (Даты.ДатаПоступления ЕСТЬ NULL ИЛИ Даты.ДатаПоступления < &Период)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыОрганизацийКОформлению(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ВТТоварыОрганизацийКОформлению";
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВТПоступления", ТекстыЗапроса) Тогда
		ТекстЗапросаВТПоступления(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ТоварыОрганизацийКОформлению.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|			И НЕ ТоварыОрганизацийКОформлению.ДокументПоступления ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументПоступленияЗаполнен,
	|	ВТПоступления.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ВТТоварыОрганизацийКОформлению
	|ИЗ
	|	ВТПоступления КАК ВТПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизацийКОформлению КАК ТоварыОрганизацийКОформлению
	|		ПО ВТПоступления.ДокументПоступления = ТоварыОрганизацийКОформлению.Регистратор
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТПоступления(Запрос, ТекстыЗапроса)

	ИмяВременнойТаблицы = "ВТПоступления";

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаможеннаяДекларацияИмпортТовары.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ВТПоступления
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|ГДЕ
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКОформлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВТТоварыОрганизацийКОформлению", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТоварыОрганизацийКОформлению(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеДокумента.Поставщик КАК Поставщик,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ВЫБОР 
	|		КОГДА 
	|			ЕСТЬNULL(ВТТоварыОрганизацийКОформлению.ДокументПоступленияЗаполнен,ЛОЖЬ) ТОГДА
	|				ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|
	|	ТоварыДокумента.Количество КАК Количество,
	|	ВЫБОР 
	|		КОГДА 
	|			ЕСТЬNULL(ВТТоварыОрганизацийКОформлению.ДокументПоступленияЗаполнен,ЛОЖЬ) ТОГДА
	|				ТоварыДокумента.ТаможеннаяСтоимость
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сумма,
	|
	|	ТоварыДокумента.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТТоварыОрганизацийКОформлению КАК ВТТоварыОрганизацийКОформлению
	|	ПО
	|		ВТТоварыОрганизацийКОформлению.ДокументПоступления = ТоварыДокумента.ДокументПоступления
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции



Функция ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "ПартииРасходовНаСебестоимостьТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
    
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 			КАК ВидДвижения,
	|	ТоварыДокумента.Организация 					КАК Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка											КАК ДокументПоступления,
	|	ТоварыДокумента.ВидЗапасов 						КАК ВидЗапасов,
	|	ТоварыДокумента.АналитикаУчетаПартий 			КАК АналитикаУчетаПартий,
	|	&Ссылка 										КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО 									КАК СтатьяРасходов,
	|
	|	СУММА(ТоварыДокумента.Количество)				КАК Количество,
	|	СУММА(ТоварыДокумента.СуммаСНДСУпр)             КАК Стоимость,
    |	СУММА(ТоварыДокумента.СуммаБезНДСУпр)           КАК СтоимостьБезНДС,
	|	СУММА(ТоварыДокумента.СуммаБезНДСРегл)          КАК СтоимостьРегл,
	|	СУММА(ТоварыДокумента.СуммаНДСРегл)             КАК НДСРегл,
	|	&Подразделение									КАК ПодразделениеРасходов
	|ИЗ
    |	ВтТаблицаТовары КАК ТоварыДокумента
	|ГДЕ
	|	&ВыпущеноСТаможни
	|	И НЕ &ОтнестиСтоимостьТаможеннойОчисткиНаРасходы
	|	И &ИспользоватьПартионныйУчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ВидЗапасов,
	|	ТоварыДокумента.АналитикаУчетаПартий
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
    
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ
	|	&Период                                         КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)          КАК ВидДвижения,
	|	ТоварыДокумента.Организация                     КАК Организация,
	|	ТоварыДокумента.Подразделение                   КАК Подразделение,
	|	ТоварыДокумента.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ТоварыДокумента.АналитикаРасходов               КАК АналитикаРасходов,
	|
	|	СУММА(ТоварыДокумента.СуммаСНДСУпр)             КАК Стоимость,
    |	СУММА(ТоварыДокумента.СуммаБезНДСУпр)           КАК СтоимостьБезНДС,
	|	СУММА(ТоварыДокумента.СуммаБезНДСРегл)          КАК СтоимостьРегл,
	|	СУММА(ТоварыДокумента.СуммаНДСРегл)             КАК НДСРегл,
	|
	|	&Ссылка                                         КАК ДокументПоступленияРасходов,
	|	ТоварыДокумента.АналитикаУчетаПартийДанныеДокумента КАК АналитикаУчетаПартий
	|
	|ИЗ
    |	ВтТаблицаТовары КАК ТоварыДокумента
	|ГДЕ
	|	&ВыпущеноСТаможни 
	|	И &ОтнестиСтоимостьТаможеннойОчисткиНаРасходы
	|	И ТоварыДокумента.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.Организация,
	|	ТоварыДокумента.Подразделение,
	|	ТоварыДокумента.СтатьяРасходов,
	|	ТоварыДокумента.АналитикаРасходов,
	|	ТоварыДокумента.АналитикаУчетаПартийДанныеДокумента
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
    
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
	"// Отражение пошлины, акциза, таможенного сбора.
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер,
	|
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ТоварыДокумента.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &СебестоимостьПоВидамЗапасов
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|   КОНЕЦ КАК ВидЗапасов,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Соглашение,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|
	|	0 КАК Количество,
    |
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
    |
	|	ТоварыДокумента.СуммаСНДСУпр КАК Сумма,
    |	ТоварыДокумента.СуммаБезНДСУпр КАК СуммаБезНДС,
    |	ТоварыДокумента.СуммаСНДСРегл КАК СуммаРегл,
    |	ТоварыДокумента.СуммаБезНДСРегл КАК СуммаРеглБезНДС,
	|	0 КАК СуммаСкидки,
	|	ВЫБОР КОГДА ТоварыДокумента.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) ТОГДА
    |       ТоварыДокумента.СуммаСНДСРегл
	|	ИНАЧЕ
	|		ТоварыДокумента.СуммаБезНДСРегл
	|	КОНЕЦ КАК СтоимостьРегл,
    |
    |	ТоварыДокумента.СуммаСНДСУпр КАК СуммаДопРасходов,
    |	ТоварыДокумента.СуммаБезНДСУпр КАК СуммаДопРасходовБезНДС,
	|
	|	&Валюта КАК Валюта,
    |	ТоварыДокумента.СуммаСНДСРегл КАК СуммаВВалютеДокумента,
    |	ТоварыДокумента.СуммаБезНДСРегл КАК СуммаБезНДСВВалютеДокумента,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ТоварыДокумента.СуммаСНДСРегл   * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаВВалютеВзаиморасчетов,
	|	ВЫРАЗИТЬ(ТоварыДокумента.СуммаБезНДСРегл * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ ТоварыДокумента.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	&ОбъектРасчетов КАК ИсточникГФУРасчетов
	|ИЗ
    |	ВтТаблицаТовары КАК ТоварыДокумента
	|ГДЕ
	|	&ВыпущеноСТаможни
	|	И (ТоварыДокумента.СуммаПошлины <> 0
	|	   ИЛИ ТоварыДокумента.СуммаАкциза <> 0 
	|	   ИЛИ ТоварыДокумента.ТаможенныйСбор <> 0
	|	   ИЛИ ТоварыДокумента.СуммаНДС<>0
    |   )
    |	И НЕ &ОтнестиСтоимостьТаможеннойОчисткиНаРасходы
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
    
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);

	РасходыНаТаможенныеСборы = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РасходыНаТаможенныеСборыШтрафы) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	
	|	ТоварыДокумента.СтатьяРасходов КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	ТоварыДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СУММА(ТоварыДокумента.СуммаСНДСУпр) КАК Сумма,
	|	СУММА(ТоварыДокумента.СуммаБезНДСУпр) КАК СуммаБезНДС,
	|	СУММА(ТоварыДокумента.СуммаСНДСРегл) КАК СуммаРегл,
    |	СУММА(ТоварыДокумента.СуммаБезНДСРегл) КАК СуммаРеглБезНДС,
	|	
	|	&Валюта КАК Валюта,
	|	СУММА(ТоварыДокумента.СуммаСНДСРегл) КАК СуммаВВалюте,
    |	СУММА(ТоварыДокумента.СуммаБезНДСРегл) КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ВЫРАЗИТЬ(ТоварыДокумента.СуммаСНДСРегл * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(15, 2))) КАК СуммаВВалютеВзаиморасчетов,
	|	СУММА(ВЫРАЗИТЬ(ТоварыДокумента.СуммаБезНДСРегл * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(15, 2))) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	&ОбъектРасчетов КАК ИсточникГФУРасчетов
	|ИЗ
    |	ВтТаблицаТовары КАК ТоварыДокумента
	|ГДЕ
	|	&ВыпущеноСТаможни
	|	И &ОтнестиСтоимостьТаможеннойОчисткиНаРасходы
	|	И (ТоварыДокумента.СуммаПошлины <> 0
	|	   ИЛИ ТоварыДокумента.СуммаАкциза <> 0 
	|	   ИЛИ ТоварыДокумента.ТаможенныйСбор <> 0
	|	   ИЛИ ТоварыДокумента.СуммаНДС<>0
    |   )
    |
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.СтатьяРасходов,
	|	ТоварыДокумента.АналитикаРасходов
    |
	|"; 
    
	ТекстЗапроса = РасходыНаТаможенныеСборы;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаНДСРеестрПолученныхНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСРеестрПолученныхНалоговыхДокументов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Товары.СтатьяДекларацииНДСНалоговыйКредит КАК СтатьяДекларацииНДСНалоговыйКредит,
	|	Разделы.СтавкаНДС КАК СтавкаНДС,
	|	(Товары.ТаможеннаяСтоимость + Товары.СуммаПошлины + Товары.СуммаАкциза) КАК СуммаБезНДС,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК Разделы
	|		ПО Товары.Ссылка = Разделы.Ссылка
	|		И Товары.НомерРаздела = Разделы.НомерРаздела
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &ОрганизацияПлательщикНДС
	|
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


Функция ТекстЗапросаТаблицаНДСУсловныеПродажи(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСУсловныеПродажи";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидУсловнойПродажи.ПредполагаемаяСводнаяУсловнаяПродажа)  КАК ВидУсловнойПродажи,
	|
	|	Товары.Ссылка КАК Номенклатура,
	|	Разделы.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая) КАК НалоговоеНазначение,
	|	Товары.НалоговоеНазначение КАК НалоговоеНазначениеПоФакту,
	|	
	|	СУММА(ВЫБОР
	|			КОГДА Товары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.ПропорциональноОблагаемая)
	|				ТОГДА Товары.СуммаНДСПропорционально * 100 / ВЫБОР
	|						КОГДА Разделы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|							ТОГДА 20
    |						КОГДА Разделы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
    |							ТОГДА 14
	|						КОГДА Разделы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|							ТОГДА 7
	|						ИНАЧЕ 100
	|					КОНЕЦ
	|			ИНАЧЕ Товары.ТаможеннаяСтоимость + Товары.СуммаПошлины + Товары.СуммаАкциза
	|		КОНЕЦ) КАК СтоимостьРегл,
	|  	СУММА(ВЫБОР
	|      	КОГДА Товары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.ПропорциональноОблагаемая) ТОГДА
	|      		Товары.СуммаНДСПропорционально
	|      	ИНАЧЕ	
	|			Товары.СуммаНДС
	|   	КОНЕЦ )	КАК НДСРегл
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК Разделы
	|		ПО Товары.Ссылка = Разделы.Ссылка
	|		И Товары.НомерРаздела = Разделы.НомерРаздела
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ (Товары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая))
	|	И &ОрганизацияПлательщикНДС
    |	И Разделы.СтавкаНДС В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7))
	|	
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Разделы.СтавкаНДС,
	|	Товары.НалоговоеНазначение
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоУмолчанию(Объект) Экспорт
	Объект.Менеджер = Пользователи.ТекущийПользователь();
	Объект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.Менеджер, Объект.Подразделение);
	
	Объект.Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Объект.Валюта);
	Объект.ВалютаВзаиморасчетов = Объект.Валюта;
	
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Объект.Организация;
	СтруктураПараметров.БанковскийСчет		= Объект.БанковскийСчетОрганизации;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	
	Объект.ОтнестиСтоимостьТаможеннойОчисткиНаРасходы = Объект.ПоставкаНаКомиссию;
	
КонецПроцедуры
	
Процедура ЗаполнитьПоУсловиямЗакупок(Объект, УсловияЗакупок) Экспорт
	ЗаполнитьЗначенияСвойств(Объект, УсловияЗакупок, "ФормаОплаты, ГруппаФинансовогоУчета, НаправлениеДеятельности");
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер = УсловияЗакупок.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация<>Объект.Организация Тогда
		Объект.Организация = УсловияЗакупок.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) И УсловияЗакупок.Контрагент<>Объект.Контрагент Тогда
		Объект.Контрагент = УсловияЗакупок.Контрагент;
	КонецЕсли;
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеДатыПлатежа = ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, УсловияЗакупок.Соглашение);
	Если ЗначениеЗаполнено(ЗначениеДатыПлатежа) Тогда
		Объект.ДатаПлатежа = ЗначениеДатыПлатежа;
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Объект.Организация;
	СтруктураПараметров.БанковскийСчет			= Объект.БанковскийСчетОрганизации;
	СтруктураПараметров.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
КонецПроцедуры

Процедура ЗаполнитьПоПартнеру(Объект, Партнер) Экспорт
	УсловияЗакупок = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Или (Объект.Партнер <> Партнер) Тогда
		Объект.Партнер = Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок) Тогда
		ЗаполнитьПоУсловиямЗакупок(Объект, УсловияЗакупок);
	Иначе
		Контрагент = Объект.Контрагент;
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		БанковскийСчет = ?(Контрагент = Объект.Контрагент, Объект.БанковскийСчетКонтрагента, Неопределено);
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , БанковскийСчет);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоПоставщику(Объект, Поставщик) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Или (Объект.Поставщик <> Поставщик) Тогда
		Объект.Поставщик = Поставщик;
	КонецЕсли;
	
	УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(
		Объект.Поставщик, 
		Новый Структура("ТолькоДляЗакупки, ХозяйственныеОперации, ВыбранноеСоглашение", 
						Истина, ОперацииОтбораСоглашенияПоступлений(), Объект.ПоступлениеСоглашение
		)
	);
			
	Если ЗначениеЗаполнено(УсловияЗакупок) Тогда
		Объект.ПоступлениеСоглашение = УсловияЗакупок.Соглашение;
		Объект.ВалютаВзаиморасчетовСКомитентом = УсловияЗакупок.Валюта;
	Иначе
		Объект.ПоступлениеСоглашение = Неопределено;
		Объект.ВалютаВзаиморасчетовСКомитентом = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция СтруктураЗаполнения() Экспорт
	Возврат Новый Структура(
		"Организация, Поставщик, КонтрагентПоставщика,
		|ПоставкаНаКомиссию, ПоступлениеСоглашение, ВалютаВзаиморасчетовСКомитентом,
		|ВалютаПоступления, ЦенаВключаетНДС, Товары, НаправлениеДеятельности",
		Справочники.Организации.ПустаяСсылка(), Справочники.Партнеры.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка(),
		Перечисления.ТипыЗапасов.Товар, Справочники.СоглашенияСПоставщиками.ПустаяСсылка(), Справочники.Валюты.ПустаяСсылка(),
		Справочники.Валюты.ПустаяСсылка(), Ложь, Неопределено, Справочники.НаправленияДеятельности.ПустаяСсылка());
КонецФункции

Процедура ЗаполнитьПоДанным(Объект, Данные) Экспорт
	ЗаполнитьЗначенияСвойств(Объект, Данные);
	ЗаполнитьПоУмолчанию(Объект);
	Если Данные.Товары<>Неопределено Тогда
		Если Ложь <> Данные.ЦенаВключаетНДС Тогда
			Для Каждого Товар Из Данные.Товары Цикл // в поле Сумма получим сумму без НДС
				Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(Товар, Ложь, Ложь, Ложь);
			КонецЦикла;
		КонецЕсли;
		Если Объект.Валюта <> Данные.ВалютаПоступления И ЗначениеЗаполнено(Данные.ВалютаПоступления) Тогда
			ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата());
			КурсыСтарые = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Данные.ВалютаПоступления, ДатаДокумента);
			КурсыНовые  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, ДатаДокумента);
			Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
				Данные.Товары, Ложь, Данные.ВалютаПоступления, Объект.Валюта, КурсыСтарые, КурсыНовые);
        КонецЕсли;
        ТаблицаРазделов = Новый ТаблицаЗначений;
        ТаблицаРазделов.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
        ТаблицаРазделов.Колонки.Добавить("КодУКТВЭД",    Новый ОписаниеТипов("СправочникСсылка.КлассификаторУКТВЭД"));
        ТаблицаРазделов.Колонки.Добавить("НомерРаздела", ОбщегоНазначения.ОписаниеТипаЧисло(3));
        ТекущийНомерРаздела = 0;
		Для каждого ЭлементБуфера Из Данные.Товары Цикл
			Товар = Объект.Товары.Добавить();
            СтавкаНДСПоУмолчанию = ЭлементБуфера.СтавкаНДСПоУмолчанию;
            КодУКТВЭДПоУмолчанию = ЭлементБуфера.КодУКТВЭДПоУмолчанию;
            ПараметрыОтбора = Новый Структура;
            ПараметрыОтбора.Вставить("СтавкаНДС", СтавкаНДСПоУмолчанию);
            ПараметрыОтбора.Вставить("КодУКТВЭД", КодУКТВЭДПоУмолчанию);
            СтрокиРаздел = ТаблицаРазделов.НайтиСтроки(ПараметрыОтбора);
            Если СтрокиРаздел.Количество() > 0 Тогда
                
                Товар.НомерРаздела = СтрокиРаздел[0].НомерРаздела;
                Раздел = Объект.Разделы.Получить(Товар.НомерРаздела-1);
                
            Иначе
                
            	ТекущийНомерРаздела = ТекущийНомерРаздела + 1;
                
                Раздел = Объект.Разделы.Добавить();
                Раздел.НомерРаздела = ТекущийНомерРаздела;
                Раздел.СтавкаНДС    = СтавкаНДСПоУмолчанию;
                Раздел.КодУКТВЭД    = КодУКТВЭДПоУмолчанию;
                
                НоваяСтрокаТаблицаРазделов = ТаблицаРазделов.Добавить();
                НоваяСтрокаТаблицаРазделов.СтавкаНДС    = СтавкаНДСПоУмолчанию;
                НоваяСтрокаТаблицаРазделов.КодУКТВЭД    = КодУКТВЭДПоУмолчанию;
                НоваяСтрокаТаблицаРазделов.НомерРаздела = ТекущийНомерРаздела;
                
                Товар.НомерРаздела = ТекущийНомерРаздела;
                
            КонецЕсли; 
			ЗаполнитьЗначенияСвойств(Товар, ЭлементБуфера,
                "Номенклатура, Характеристика, Серия, Склад, ВидЗапасов, Упаковка, Количество, КоличествоУпаковок, ДокументПоступления, НалоговоеНазначение");
			Товар.ТаможеннаяСтоимость = ЭлементБуфера.Сумма;
			// сумму НДС не заполняем!!!
			Раздел.ТаможеннаяСтоимость = Раздел.ТаможеннаяСтоимость + Товар.ТаможеннаяСтоимость;
			Товар.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларации(Раздел.СтавкаНДС);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСтатьюНалоговойДекларации(СтавкаНДС) Экспорт
	
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0
          ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС14
		  ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС7
	      ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		// ст 12.1 Декларации
		Возврат Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагНДСТамож;
	Иначе
		// ст 12.3 Декларации
		Возврат Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагБезНДС;
	КонецЕсли; 

КонецФункции

#КонецОбласти

#Область Прочее

// возвращает массив операций, соглашения и договоры по которым доступны к использованию
Функция ОперацииОтбораСоглашенийДоговоров() Экспорт
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Возврат Операции;
КонецФункции

// возвращает массив операций, соглашения и договоры по которым доступны к использованию для поставщика
Функция ОперацииОтбораСоглашенияПоступлений() Экспорт
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
	Возврат Операции;
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ПеренестиРеквизитыПотерянныеСоответствия_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
    
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТабЧастьТовары
    |	ПО ТабЧастьТовары.Ссылка = ДанныеДокумента.Ссылка
    |ГДЕ 
    |   ТабЧастьТовары.НомерГТД <> ТабЧастьТовары.УДАЛИТЬНомерГТД
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
Процедура ПеренестиРеквизитыПотерянныеСоответствия(Параметры) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        "Документ.ТаможеннаяДекларацияИмпорт"
    );
	
	Пока Выборка.Следующий() Цикл
		
        НачатьТранзакцию();
        
		Попытка
            
			Блокировка = Новый БлокировкаДанных;
            
			ЭлементБлокировки = Блокировка.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
            
            Блокировка.Заблокировать();
            
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
            Для Каждого СтрокаТовары ИЗ ДокументОбъект.Товары Цикл
                СтрокаТовары.НомерГТД = СтрокаТовары.УДАЛИТЬНомерГТД;
			КонецЦикла;
            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
            ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        "Документ.ТаможеннаяДекларацияИмпорт"
    );
	
КонецПроцедуры


Процедура ПеренестиПоступленияВТабличнуюЧасть_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ 
    |	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка
    |ИЗ
    |	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
    |ГДЕ
    |	ТаможеннаяДекларацияИмпорт.УдалитьПоступлениеТоваров <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
    |";
    
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );	

КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
// Заполняет реквизит ДокументПоступления в табличной части "Товары" по значению документа поступления в шапке
Процедура ПеренестиПоступленияВТабличнуюЧасть(Параметры) Экспорт
    
    ПолноеИмяДокумента = "Документ.ТаможеннаяДекларацияИмпорт";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
    
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка	
			
			Блокировка = Новый БлокировкаДанных;
            
            ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
            
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            ДокументПоступления = ДокументОбъект.УдалитьПоступлениеТоваров;
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено 
				ИЛИ ДокументПоступления = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
			ДокументОбъект.УдалитьПоступлениеТоваров = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
			
			Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
				СтрокаТовары.ДокументПоступления = ДокументПоступления;
			КонецЦикла;
            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
										
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры


#Область ЗаполнитьКонтрагентаПоставщика

Процедура ЗаполнитьКонтрагентаПоставщика_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаблицаТовары
	|	ПО
	|		ТаможеннаяДекларацияИмпорт.Ссылка =  ТаблицаТовары.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ПО
	|		ТаблицаТовары.ДокументПоступления = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ТаможеннаяДекларацияИмпорт.КонтрагентПоставщика = &ПустойКонтрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаможеннаяДекларацияИмпорт.Ссылка
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеТоваровУслуг.Контрагент), 0) = 1 
	|		ИЛИ &ИспользоватьПартнеровКакКонтрагентов
	|";
	
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
// Заполняет в документе новый реквизит КонтрагентПоставщика по данным поступлений
Процедура ЗаполнитьКонтрагентаПоставщика(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ТаможеннаяДекларацияИмпорт";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяОбъекта, 
        МенеджерВТ
    );
    
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслуг.Контрагент, 
	|				ЕСТЬNULL(КонтрагентыПоПартнеру.Ссылка, 
	|					ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)))) КАК КонтрагентПоставщика
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТДляОбработки КАК ДокументыКОбработке
	|	ПО
	|		ТаможеннаяДекларацияИмпорт.Ссылка = ДокументыКОбработке.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаблицаТовары
	|	ПО
	|		ТаможеннаяДекларацияИмпорт.Ссылка =  ТаблицаТовары.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ПО
	|		ТаблицаТовары.ДокументПоступления = ПоступлениеТоваровУслуг.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК КонтрагентыПоПартнеру
	|	ПО
	|		ТаможеннаяДекларацияИмпорт.Поставщик = КонтрагентыПоПартнеру.Партнер
	|		И &ИспользоватьПартнеровКакКонтрагентов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаможеннаяДекларацияИмпорт.Ссылка
	|";
    
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос.УстановитьПараметр("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.КонтрагентПоставщика) Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			ДокументОбъект.КонтрагентПоставщика = Выборка.КонтрагентПоставщика;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать таможенную декларацию: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити митну декларацію: %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ТаможеннаяДекларацияИмпорт, 
				Выборка.Ссылка, 
                ТекстСообщения
            );
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяОбъекта
    );
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли

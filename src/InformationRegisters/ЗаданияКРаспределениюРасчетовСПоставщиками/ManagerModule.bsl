#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
//Метод выводит в табличный документ предупреждение,
//если отчет формируетя по неактуальным данным
//Параметры:
//	Макет - ТабличныйДокумент - Макет, в который выводится предупреждение
//	ПараметрыРасчета - Структура - Свойства, в которых указаны данные о границах расчета
Процедура ВывестиАктуальностьРасчета(Макет, ПараметрыРасчета) Экспорт
	Если  ЗначениеЗаполнено(ПараметрыРасчета) И ПараметрыРасчета.Свойство("ГраницаВзаиморасчетов") Тогда
		Если ЗначениеЗаполнено(ПараметрыРасчета.ГраницаВзаиморасчетов) Тогда
			ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
			ТекстПредупреждения = НСтр("ru='Распределение расчетов выполнено до %ДатаАктуальности. 
                                        |Запущено задание по распределению расчетов с %ДатаНачалаРаспределения (требуется распределить расчеты для %КоличествоДокументов). 
                                        |После распределения Вам будет предложено переформировать отчет.'
                                        |;uk='Розподіл розрахунків виконано до %ДатаАктуальности. 
                                        |Запущено завдання розподілу розрахунків з %ДатаНачалаРаспределения (потрібно розподілити розрахунки для %КоличествоДокументов). 
                                        |Після розподілу Вам буде запропоновано переформувати звіт.'");
			ДатаАктуальности = КонецМесяца(ПараметрыРасчета.ГраницаВзаиморасчетов - 1);
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаАктуальности", Формат(ДатаАктуальности, "ДФ=dd.MM.yyyy; ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаНачалаРаспределения", Формат(ПараметрыРасчета.ГраницаВзаиморасчетов, "ДФ=dd.MM.yyyy; ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%КоличествоДокументов", ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КРасчету));
			ОбластьПредупреждение.Текст = ТекстПредупреждения;
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Макет.ВставитьОбласть(ОбластьПредупреждение, Макет.Область(1,1,1,1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ПараметрыРасчета.Удалить("ГраницаВзаиморасчетов");
			ПараметрыРасчета.Удалить("НомерЗадания");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Метод возвращает значение константы "Номер задания",
//считанной при разделяемой блокировке
Функция ПолучитьНомерЗадания() Экспорт
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРаспределениюРасчетовСПоставщиками");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
	
	ЗафиксироватьТранзакцию();
	
	Возврат НомерЗадания;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоНеактуальныхДокументов(НачалоРасчета, КонецРасчета, АналитикиРасчета = Неопределено) Экспорт
	Запрос = Новый Запрос("
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КОЛИЧЕСТВО(Расчеты.Регистратор) КАК Количество
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ГДЕ
	|		Расчеты.Период МЕЖДУ &НачалоРасчета И &КонецРасчета
	|		И (Расчеты.АналитикаУчетаПоПартнерам В (&АналитикиРасчета)
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|			ИЛИ &ПоВсемАналитикам)
	|");
	
	Запрос.УстановитьПараметр("НачалоРасчета", НачалоРасчета);
	Запрос.УстановитьПараметр("КонецРасчета", КонецРасчета);
	Запрос.УстановитьПараметр("АналитикиРасчета", АналитикиРасчета);
	Запрос.УстановитьПараметр("ПоВсемАналитикам", НЕ Значениезаполнено(АналитикиРасчета));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		КоличествоДокументов = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	Возврат КоличествоДокументов;
КонецФункции

#Область ОбновлениеИнформационнойБазы


// Обработчик обновления BAS УТ 3.2.2
// Производится перенос неактуальных границ последовательности "Расчеты с поставщиками" в регистр заданий.
Процедура ПеренестиГраницыРасчетаПоставщиков() Экспорт
    
    Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Границы.Период КАК Месяц,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику КАК ОбъектРасчетов,
	|	Границы.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.УдалитьПроведениеПоРасчетамСПоставщиками.Границы КАК Границы
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
	|		И НАЧАЛОПЕРИОДА(Границы.Период, ДЕНЬ) <> ДАТАВРЕМЯ(1,1,1)
	|СГРУППИРОВАТЬ ПО
	|	Границы.Период,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику,
	|	Границы.Регистратор
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЕСТЬNULL(Границы.Период, ДАТАВРЕМЯ(1,1,1))) <= МАКСИМУМ(Расчеты.Период)
	|");
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРаспределениюРасчетовСПоставщиками");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьНаборЗаписей();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Месяц) Тогда
				Продолжить;
			КонецЕсли;
			Задание = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Задание, Выборка);
			Задание.НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаменитьАналитикуУчетаПоПартнерам_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Задания.Месяц                                        КАК Месяц,
	|	Задания.НомерЗадания                                 КАК НомерЗадания,
	|	Задания.АналитикаУчетаПоПартнерам                    КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов                               КАК ОбъектРасчетов,
	|	Задания.Документ                                     КАК Документ
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРегистра
	|		ПО Задания.АналитикаУчетаПоПартнерам = АналитикаРегистра.КлючАналитики
	|			И (АналитикаРегистра.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО (Договоры.Ссылка = 
	|				ВЫБОР КОГДА Задания.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|					ТОГДА Задания.ОбъектРасчетов
	|				ИНАЧЕ Задания.ОбъектРасчетов.Договор
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ Договоры.Ссылка ЕСТЬ NULL");
	
	СтруктураОтбора = Новый Структура("Месяц, НомерЗадания, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Документ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		
		НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьНаборЗаписей();
		Для Каждого ТекОтбор Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[ТекОтбор.Ключ].Установить(ТекОтбор.Значение);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Производит замену измерения "АналитикаУчетаПоПартнерам" с учетом договора в измерении "ОбъектРасчетов".
Процедура ЗаменитьАналитикуУчетаПоПартнерам(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц);
		
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаданияКРаспределениюРасчетовСПоставщиками.Месяц КАК Месяц,
	|	ЗаданияКРаспределениюРасчетовСПоставщиками.НомерЗадания КАК НомерЗадания,
	|	ЗаданияКРаспределениюРасчетовСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ЗаданияКРаспределениюРасчетовСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ЗаданияКРаспределениюРасчетовСПоставщиками.Документ КАК Документ,
	|	АналитикаРегистра.Партнер КАК Партнер,
	|	АналитикаРегистра.Организация КАК Организация,
	|	АналитикаРегистра.Контрагент КАК Контрагент,
	|	АналитикаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Договоры.Ссылка КАК Договор,
	|	ЕСТЬNULL(НоваяАналитика.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК КлючНовойАналитики
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК ЗаданияКРаспределениюРасчетовСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК ДляОбработки
	|			ПО ЗаданияКРаспределениюРасчетовСПоставщиками.Месяц = ДляОбработки.Месяц
	|				И ЗаданияКРаспределениюРасчетовСПоставщиками.НомерЗадания = ДляОбработки.НомерЗадания
	|				И ЗаданияКРаспределениюРасчетовСПоставщиками.АналитикаУчетаПоПартнерам = ДляОбработки.АналитикаУчетаПоПартнерам
	|				И ЗаданияКРаспределениюРасчетовСПоставщиками.ОбъектРасчетов = ДляОбработки.ОбъектРасчетов
	|				И ЗаданияКРаспределениюРасчетовСПоставщиками.Документ = ДляОбработки.Документ
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРегистра
	|			ПО ЗаданияКРаспределениюРасчетовСПоставщиками.АналитикаУчетаПоПартнерам = АналитикаРегистра.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО (Договоры.Ссылка = ВЫБОР
	|				КОГДА ЗаданияКРаспределениюРасчетовСПоставщиками.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|					ТОГДА ЗаданияКРаспределениюРасчетовСПоставщиками.ОбъектРасчетов
	|				ИНАЧЕ ЗаданияКРаспределениюРасчетовСПоставщиками.ОбъектРасчетов.Договор
	|			КОНЕЦ)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК НоваяАналитика
	|		ПО (АналитикаРегистра.Партнер = НоваяАналитика.Партнер)
	|			И (АналитикаРегистра.Организация = НоваяАналитика.Организация)
	|			И (АналитикаРегистра.Контрагент = НоваяАналитика.Контрагент)
	|			И АналитикаРегистра.НаправлениеДеятельности = НоваяАналитика.НаправлениеДеятельности
	|			И (Договоры.Ссылка = НоваяАналитика.Договор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ДляОбработки.Месяц                 		КАК Месяц,
	|	ДляОбработки.НомерЗадания				КАК НомерЗадания,
	|	ДляОбработки.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|	ДляОбработки.ОбъектРасчетов             КАК ОбъектРасчетов,
	|	ДляОбработки.Документ                   КАК Документ
	|ИЗ 
	|	ВТДляОбработки КАК ДляОбработки");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Результат = Запрос.ВыполнитьПакет();	
	КоличествоЗапросов = Результат.ВГраница();
	
	ТаблицаАналитик = Результат[КоличествоЗапросов-1].Выгрузить();
	Для Каждого СтрокаАналитики Из ТаблицаАналитик Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаАналитики.КлючНовойАналитики) Тогда
			НоваяАналитика = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(СтрокаАналитики);
			СтрокаАналитики.КлючНовойАналитики = НоваяАналитика;
		КонецЕсли;
	КонецЦикла;

	СтруктураОтбора = Новый Структура("Месяц, НомерЗадания, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Документ");
	
	Выборка = Результат[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		//Блокировка
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Месяц",   				  Выборка.Месяц);
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания", 			  Выборка.НомерЗадания);
			ЭлементБлокировки.УстановитьЗначение("АналитикаУчетаПоПартнерам", Выборка.АналитикаУчетаПоПартнерам);
			ЭлементБлокировки.УстановитьЗначение("ОбъектРасчетов",            Выборка.ОбъектРасчетов);
			ЭлементБлокировки.УстановитьЗначение("Документ",          		  Выборка.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		Исключение
			
			Отказ = Истина;
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		
		//Отмечаем обработку
		НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьНаборЗаписей();
		
		Для Каждого ТекОтбор Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[ТекОтбор.Ключ].Установить(ТекОтбор.Значение);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей,,Параметры.Очередь);
		
		НаборЗаписей.Прочитать();	
		Записи = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		//Создаем записи
		НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьНаборЗаписей();
		
		Для Каждого ТекОтбор Из СтруктураОтбора Цикл
			Если НЕ ТекОтбор.Ключ = "АналитикаУчетаПоПартнерам" Тогда
				НаборЗаписей.Отбор[ТекОтбор.Ключ].Установить(ТекОтбор.Значение);
			КонецЕсли;
		КонецЦикла;

		Для каждого ЗаписьНабора Из Записи Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураОтбора);
			
			Если ЗначениеЗаполнено(ЗаписьНабора.АналитикаУчетаПоПартнерам) Тогда
					
				СтруктураОтбора.Вставить("АналитикаУчетаПоПартнерам", ЗаписьНабора.АналитикаУчетаПоПартнерам);
				МассивСтрок = ТаблицаАналитик.НайтиСтроки(СтруктураОтбора);
					
				НоваяЗапись.АналитикаУчетаПоПартнерам = МассивСтрок[0].КлючНовойАналитики;
				
			КонецЕсли;
		
		КонецЦикла;
	
		Попытка
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось дополнить аналитику по партнерам договором при обработке регистра сведений ""Задания к распределению расчетов с поставщиками"" по причине: %Причина%';uk='Не вдалося доповнити аналітику за партнерами договорами при обробці регістра відомостей ""Завдання до розподілу розрахунків з постачальниками"" по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				, , ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
		Параметры.Очередь, "РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
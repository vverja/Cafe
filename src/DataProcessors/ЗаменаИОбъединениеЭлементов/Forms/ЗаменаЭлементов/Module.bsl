// Форма параметризуется.
//
// Параметры:
//     НаборСсылок - Массив, СписокЗначений - набор элементов для анализа.
//                                            Может быть коллекцией элементов, обладающих полем "Ссылка".
//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ОткрытаПоСценарию") Тогда
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.';uk='Обробка не призначена для безпосереднього використання.'");
	КонецЕсли;
	
	// Перекладываем параметры в таблицу ЗаменяемыеСсылки. 
	// Инициализируем реквизиты ЦелевойЭлемент, ОбщийВладелецЗаменяемыхСсылок, ТекстОшибкиПараметров.
	ИнициализироватьЗаменяемыеСсылки( МассивСсылокИзСписка(Параметры.НаборСсылок) );
	Если Не ПустаяСтрока(ТекстОшибкиПараметров) Тогда
		// Будет выдано предупреждение при открытии;
		Возврат;
	КонецЕсли;
	
	ЕстьПравоБезвозвратногоУдаления = ПравоДоступа("АдминистрированиеДанных", Метаданные);
	СобытиеОповещенияОЗамене        = Обработки.ЗаменаИОбъединениеЭлементов.СобытиеОповещенияОЗамене();
	ТекущийВариантУдаления          = "Пометка";
	
	// Инициализируем динамический список на форме - имитация формы выбора.
	ОсновныеМетаданные = ЦелевойЭлемент.Метаданные();
	Список.ПроизвольныйЗапрос = Ложь;
	Список.ОсновнаяТаблица = ОсновныеМетаданные.ПолноеИмя();
	Список.ДинамическоеСчитываниеДанных = Истина;
	
	Элементы.Добавить("СписокСсылкаНовый", Тип("ПолеФормы"), Элементы.СписокЭлемент).ПутьКДанным = "Список.Ссылка";
	
	// Код можно добавлять только если он есть.
	Если ВозможныйКодСсылки(ЦелевойЭлемент, Новый Соответствие) <> Неопределено Тогда
		НоваяКолонка = Элементы.Добавить("СписокКодНовый", Тип("ПолеФормы"), Элементы.Список);
		НоваяКолонка.ПутьКДанным = "Список.Код";
	КонецЕсли;
	
	Элементы["СписокСсылкаНовый"].Заголовок = НСтр("ru='Наименование';uk='Найменування'");
	
	Элементы.Список.ИзменятьПорядокСтрок = Ложь;
	Элементы.Список.ИзменятьСоставСтрок  = Ложь;
	
	СписокЗаменяемых = Новый СписокЗначений;
	СписокЗаменяемых.ЗагрузитьЗначения(ЗаменяемыеСсылки.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка",
		СписокЗаменяемых,
		ВидСравненияКомпоновкиДанных.НеВСписке,
		НСтр("ru='Не показывать заменяемые';uk='Не показувати замінні'"),
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,
		"5bf5cd06-c1fd-4bd3-94b9-4e9803e90fd5");
	
	Если ОбщийВладелецЗаменяемыхСсылок <> Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", ОбщийВладелецЗаменяемыхСсылок );
	КонецЕсли;
	
	Если ЗаменяемыеСсылки.Количество() > 1 Тогда
		Элементы.НадписьТипВыбираемого.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Выберите один из элементов ""%1"", на который следует заменить выбранные значения (%2):';uk='Оберіть один з елементів ""%1"", на який слід замінити вибрані значення (%2):'"),
			ОсновныеМетаданные.Представление(), ЗаменяемыеСсылки.Количество());
	Иначе
		Заголовок = НСтр("ru='Замена элемента';uk='Заміна елемента'");
		Элементы.НадписьТипВыбираемого.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Выберите один из элементов ""%1"", на который следует заменить ""%2"":';uk='Оберіть один з елементів ""%1"", на який слід замінити ""%2"":'"),
			ОсновныеМетаданные.Представление(), ЗаменяемыеСсылки[0].Ссылка);
	КонецЕсли;
	Элементы.ПодсказкаВыбораЦелевогоЭлемента.Заголовок = НСтр("ru='Элемент для замены не выбран.';uk='Елемент для заміни не вибрано.'");
	
	// Пошаговый мастер
	НастройкиПошаговогоМастера = ИнициализироватьМастер(Элементы.ШагиМастера, Элементы.Далее, Элементы.Назад, Элементы.Отмена);
	
	// Добавляем шаги, зависящие от логики формы.
	ИнициализироватьСценарийМастера();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Необходимость сообщения об ошибке.
	Если Не ПустаяСтрока(ТекстОшибкиПараметров) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстОшибкиПараметров);
		Возврат;
	КонецЕсли;
	
	// Указываем стартовую страницу.
	УстановитьНачальнуюСтраницуМастера(Элементы.ШагВыборЦелевогоЭлемента);
	ЗапуститьРаботуМастера();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Проверка задания.
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено = Ложь
		И НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено
		И НастройкиПошаговогоМастера.ЕстьПодтверждениеОтменыЗадания = Ложь Тогда
		Отказ = Истина;
		ФоновоеЗаданиеЗагрузитьНаКлиенте(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено = Ложь
		И НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено Тогда
		ФоновоеЗаданиеОтменить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ПодсказкаВыбораЦелевогоЭлементаОбработкаНавигационнойСсылки(Элемент, Ссылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Ссылка = "ПереключениеРежимаУдаления" Тогда
		Если ТекущийВариантУдаления = "Непосредственно" Тогда
			ТекущийВариантУдаления = "Пометка" 
		Иначе
			ТекущийВариантУдаления = "Непосредственно" 
		КонецЕсли;
		
		СформироватьЦелевойЭлементИПодсказку(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("СформироватьЦелевойЭлементИПодсказкуОтложенно", 0.01, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ШагМастера("Далее");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНеудачныеЗамены

&НаКлиенте
Процедура НеудачныеЗаменыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		РасшифровкаПричиныНеудачи = "";
	Иначе
		РасшифровкаПричиныНеудачи = ТекущиеДанные.ПодробнаяПричина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеудачныеЗаменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Ссылка = НеудачныеЗамены.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка;
	Если Ссылка <> Неопределено Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ШагМастераНазад(Команда)
	ШагМастера("Назад");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераДалее(Команда)
	ШагМастера("Далее");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераОтмена(Команда)
	ШагМастера("Отмена");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлементНеудачнойЗамены(Команда)
	ТекущиеДанные = Элементы.НеудачныеЗамены.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеНеудачныеЗамены(Команда)
	ДеревоФормы = Элементы.НеудачныеЗамены;
	Для Каждого Элемент Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		ДеревоФормы.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеНеудачныеЗамены(Команда)
	ДеревоФормы = Элементы.НеудачныеЗамены;
	Для Каждого Элемент Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		ДеревоФормы.Свернуть(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЦелевойЭлементИПодсказку(Контекст)
	
	ТекущиеДанные = Контекст.Элементы.Список.ТекущиеДанные;
	// Обходим пустоту и группы
	Если ТекущиеДанные = Неопределено Или ЗначениеРеквизита(ТекущиеДанные, "ЭтоГруппа", Ложь) Тогда
		Возврат;
	КонецЕсли;
	Контекст.ЦелевойЭлемент = ТекущиеДанные.Ссылка;
	
	Количество = Контекст.ЗаменяемыеСсылки.Количество();
	Если Количество = 1 Тогда
		
		Если Контекст.ЕстьПравоБезвозвратногоУдаления Тогда
			Если Контекст.ТекущийВариантУдаления = "Пометка" Тогда
				ТекстПодсказки = НСтр("ru='Выбранный элемент будет заменен на ""%1""
                    |и <a href = ""ПереключениеРежимаУдаления"">помечен на удаление</a>.'
                    |;uk='Обраний елемент буде замінено на ""%1""
                    |та <a href = ""ПереключениеРежимаУдаления"">позначений на вилучення</a>.'");
			Иначе
				ТекстПодсказки = НСтр("ru='Выбранный элемент будет заменен на ""%1""
                    |и <a href = ""ПереключениеРежимаУдаления"">удален безвозвратно</a>.'
                    |;uk='Обраний елемент буде замінено на ""%1""
                    |та <a href = ""ПереключениеРежимаУдаления"">вилучено безповоротно</a>.'");
			КонецЕсли;
		Иначе
			ТекстПодсказки = НСтр("ru='Выбранный элемент будет заменен на ""%1""
                |и помечен на удаление.'
                |;uk='Обраний елемент буде замінено на ""%1""
                |і позначено на вилучення.'");
		КонецЕсли;
		
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, Контекст.ЦелевойЭлемент);
		Контекст.Элементы.ПодсказкаВыбораЦелевогоЭлемента.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстПодсказки);
		
	Иначе
		
		Если Контекст.ЕстьПравоБезвозвратногоУдаления Тогда
			Если Контекст.ТекущийВариантУдаления = "Пометка" Тогда
				ТекстПодсказки = НСтр("ru='Выбранные элементы (%1) будут заменены на ""%2""
                    |и <a href = ""ПереключениеРежимаУдаления"">помечены на удаление</a>.'
                    |;uk='Обрані елементи (%1) будуть замінені на ""%2""
                    |та <a href = ""ПереключениеРежимаУдаления"">позначені на вилучення</a>.'");
			Иначе
				ТекстПодсказки = НСтр("ru='Выбранные элементы (%1) будут заменены на ""%2""
                    |и <a href = ""ПереключениеРежимаУдаления"">удалены безвозвратно</a>.'
                    |;uk='Вибрані елементи (%1) будуть замінені на ""%2""
                    |та <a href = ""ПереключениеРежимаУдаления"">вилучені безповоротно</a>.'");
			КонецЕсли;
		Иначе
			ТекстПодсказки = НСтр("ru='Выбранные элементы (%1) будут заменены на ""%2""
                |и помечен на удаление.'
                |;uk='Вибрані елементи (%1) будуть замінені на ""%2""
                |і позначені на вилучення.'");
		КонецЕсли;
			
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, Количество, Контекст.ЦелевойЭлемент);
		Контекст.Элементы.ПодсказкаВыбораЦелевогоЭлемента.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстПодсказки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЦелевойЭлементИПодсказкуОтложенно()
	СформироватьЦелевойЭлементИПодсказку(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Функция СообщениеОЗавершении()
	
	Количество = ЗаменяемыеСсылки.Количество();
	Если Количество = 1 Тогда
		ТекстРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Элемент ""%1"" заменен на ""%2""';uk='Елемент ""%1"" замінений на ""%2""'"),
			ЗаменяемыеСсылки[0].Ссылка,
			ЦелевойЭлементРезультат);
	Иначе
		ТекстРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Элементы (%1) заменены на ""%2""';uk='Елементи (%1) замінені на ""%2""'"),
			Количество,
			ЦелевойЭлементРезультат);
	КонецЕсли;
	
	Возврат ТекстРезультата;
	
КонецФункции

&НаКлиенте
Процедура СформироватьНадписьНеудачныеЗамены()
	
	Элементы.РезультатНеудачныеЗамены.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Не удалось заменить элементы (%1 из %2). В некоторых местах использования не может быть произведена
                   |автоматическая замена на ""%3""'
                   |;uk='Не вдалося замінити елементи (%1 з %2). В деяких місцях використання не може бути проведена
                   |автоматична заміна на ""%3""'"),
		НеудачныеЗамены.ПолучитьЭлементы().Количество(),
		ЗаменяемыеСсылки.Количество(),
		ЦелевойЭлемент);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьЗаменыСсылок()
	
	Результат = "";
	ПарыЗамен = Новый Соответствие;
	Для Каждого Строка Из ЗаменяемыеСсылки Цикл
		ПарыЗамен.Вставить(Строка.Ссылка, ЦелевойЭлемент);
	КонецЦикла;
	
	ПараметрыЗамены = Новый Структура("СпособУдаления", ТекущийВариантУдаления);
	Возврат ПоискИУдалениеДублей.ПроверитьВозможностьЗаменыЭлементовСтрока(ПарыЗамен, ПараметрыЗамены);
	
КонецФункции

&НаСервере
Функция ЗаполнитьНеудачныеЗамены(Знач РезультатыЗамены)
	// РезультатыЗамены - таблица с колонками Ссылка, ОбъектОшибки, ТипОшибки, ТекстОшибки.
	КорневыеСтроки = НеудачныеЗамены.ПолучитьЭлементы();
	КорневыеСтроки.Очистить();
	
	СоответствиеСтрок = Новый Соответствие;
	КэшМетаданных     = Новый Соответствие;
	
	Для Каждого СтрокаРезультата Из РезультатыЗамены Цикл
		Ссылка = СтрокаРезультата.Ссылка;
		
		ОшибкиПоСсылке = СоответствиеСтрок[Ссылка];
		Если ОшибкиПоСсылке = Неопределено Тогда
			СтрокаДерева = КорневыеСтроки.Добавить();
			СтрокаДерева.Ссылка = Ссылка;
			СтрокаДерева.Данные = Строка(Ссылка);
			СтрокаДерева.Код    = Строка( ВозможныйКодСсылки(Ссылка, КэшМетаданных) );
			СтрокаДерева.Пиктограмма = -1;
			
			ОшибкиПоСсылке = СтрокаДерева.ПолучитьЭлементы();
			СоответствиеСтрок.Вставить(Ссылка, ОшибкиПоСсылке);
		КонецЕсли;
		
		СтрокаОшибки = ОшибкиПоСсылке.Добавить();
		СтрокаОшибки.Ссылка = СтрокаРезультата.ОбъектОшибки;
		СтрокаОшибки.Данные = СтрокаРезультата.ПредставлениеОбъектаОшибки;
		
		ТипОшибки = СтрокаРезультата.ТипОшибки;
		Если ТипОшибки = "НеизвестныеДанные" Тогда
			СтрокаОшибки.Причина = НСтр("ru='Обнаружена данные, обработка которых не планировалась.';uk='Виявлені дані, обробка яких не планувалася.'");
			
		ИначеЕсли ТипОшибки = "ОшибкаБлокировки" Тогда
			СтрокаОшибки.Причина = НСтр("ru='Не удалось заблокировать данные.';uk='Не вдалося заблокувати дані.'");
			
		ИначеЕсли ТипОшибки = "ДанныеИзменены" Тогда
			СтрокаОшибки.Причина = НСтр("ru='Данные изменены другим пользователем.';uk='Дані змінені іншим користувачем.'");
			
		ИначеЕсли ТипОшибки = "ОшибкаЗаписи" Тогда
			СтрокаОшибки.Причина = СтрокаРезультата.ТекстОшибки;
			
		ИначеЕсли ТипОшибки = "ОшибкаУдаления" Тогда
			СтрокаОшибки.Причина = НСтр("ru='Невозможно удалить данные.';uk='Неможливо вилучити дані.'");
			
		Иначе
			СтрокаОшибки.Причина = НСтр("ru='Неизвестная ошибка.';uk='Невідома помилка.'");
			
		КонецЕсли;
		
		СтрокаОшибки.ПодробнаяПричина = СтрокаРезультата.ТекстОшибки;
	КонецЦикла; // результаты замены
	
	Возврат КорневыеСтроки.Количество() > 0;
КонецФункции

// Параметры:
//     СписокДанных - Массив - содержит измененные данные, о типе которых будет оповещено.
//
&НаКлиенте
Процедура ОповеститьОбУспешнойЗамене(Знач СписокДанных)
	// Изменения объектов, в которых происходили замены.
	СписокТипов = Новый Соответствие;
	Для Каждого Элемент Из СписокДанных Цикл
		Тип = ТипЗнч(Элемент);
		Если СписокТипов[Тип] = Неопределено Тогда
			ОповеститьОбИзменении(Тип);
			СписокТипов.Вставить(Тип, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Общее оповещение
	Если СписокТипов.Количество()>0 Тогда
		Оповестить(СобытиеОповещенияОЗамене, , ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

// Преобразует массив, список значений или коллекцию в массив.
//
&НаСервереБезКонтекста
Функция МассивСсылокИзСписка(Знач Ссылки)
	
	ТипПараметра = ТипЗнч(Ссылки);
	Если Ссылки = Неопределено Тогда
		МассивСсылок = Новый Массив;
		
	ИначеЕсли ТипПараметра  = Тип("СписокЗначений") Тогда
		МассивСсылок = Ссылки.ВыгрузитьЗначения();
		
	ИначеЕсли ТипПараметра = Тип("Массив") Тогда
		МассивСсылок = Ссылки;
		
	Иначе
		МассивСсылок = Новый Массив;
		Для Каждого Элемент Из Ссылки Цикл
			МассивСсылок.Добавить(Элемент.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивСсылок;
КонецФункции

// Возвращаемое значение:
//     Произвольный - код справочника и т.п. если он есть по метаданным, 
//     Неопределено - если кода нет.
//
&НаСервереБезКонтекста
Функция ВозможныйКодСсылки(Знач Ссылка, КэшМетаданных)
	Мета = Ссылка.Метаданные();
	ЕстьКод = КэшМетаданных[Мета];
	
	Если ЕстьКод = Неопределено Тогда
		// Проверяем, если ли код вообще.
		Тест = Новый Структура("ДлинаКода", 0);
		ЗаполнитьЗначенияСвойств(Тест, Мета);
		ЕстьКод = Тест.ДлинаКода > 0;
		
		КэшМетаданных[Мета] = ЕстьКод;
	КонецЕсли;
	
	Возврат ?(ЕстьКод, Ссылка.Код, Неопределено);
КонецФункции

// Безопасное получение значения реквизита.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеРеквизита(Знач Данные, Знач ИмяРеквизита, Знач ЗначениеПриОтсутствии = Неопределено)

	Проба = Новый Структура(ИмяРеквизита);
	
	ЗаполнитьЗначенияСвойств(Проба, Данные);
	Если Проба[ИмяРеквизита] <> Неопределено Тогда
		// Есть значение
		Возврат Проба[ИмяРеквизита];
	КонецЕсли;
	
	// Возможно значение в данных равно Неопределено.
	Проба[ИмяРеквизита] = Истина;
	ЗаполнитьЗначенияСвойств(Проба, Данные);
	Если Проба[ИмяРеквизита] <> Истина Тогда
		Возврат Проба[ИмяРеквизита];
	КонецЕсли;
	
	Возврат ЗначениеПриОтсутствии;
КонецФункции

&НаСервере
Процедура ИнициализироватьЗаменяемыеСсылки(Знач МассивСсылок)
	
	КоличествоСсылок = МассивСсылок.Количество();
	Если КоличествоСсылок = 0 Тогда
		ТекстОшибкиПараметров = НСтр("ru='Не указано ни одного элемента для замены.';uk='Не вказано жодного елемента для заміни.'");
		Возврат;
	КонецЕсли;
	
	ЦелевойЭлемент = МассивСсылок[0];
	
	ОсновныеМетаданные = ЦелевойЭлемент.Метаданные();
	Характеристики = Новый Структура("Владельцы, Иерархический, ВидИерархии", Новый Массив, Ложь);
	ЗаполнитьЗначенияСвойств(Характеристики, ОсновныеМетаданные);
	
	ЕстьВладельцы = Характеристики.Владельцы.Количество() > 0;
	ЕстьГруппы    = Характеристики.Иерархический И Характеристики.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	
	ДополнительныеПоля = "";
	Если ЕстьВладельцы Тогда
		ДополнительныеПоля = ДополнительныеПоля + ", Владелец КАК Владелец";
	Иначе
		ДополнительныеПоля = ДополнительныеПоля + ", НЕОПРЕДЕЛЕНО КАК Владелец";
	КонецЕсли;
	
	Если ЕстьГруппы Тогда
		ДополнительныеПоля = ДополнительныеПоля + ", ЭтоГруппа КАК ЭтоГруппа";
	Иначе
		ДополнительныеПоля = ДополнительныеПоля + ", ЛОЖЬ КАК ЭтоГруппа";
	КонецЕсли;
	
	ИмяТаблицы = ОсновныеМетаданные.ПолноеИмя();
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|Ссылка КАК Ссылка
		|" + ДополнительныеПоля + "
		|ПОМЕСТИТЬ ЗаменяемыеСсылки
		|ИЗ
		|	" + ИмяТаблицы + "
		|ГДЕ
		|	Ссылка В (&НаборСсылок)
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец,
		|	ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Владелец) КАК КоличествоВладельцев,
		|	МИНИМУМ(Владелец)              КАК ОбщийВладелец,
		|	МАКСИМУМ(ЭтоГруппа)            КАК ЕстьГруппы,
		|	КОЛИЧЕСТВО(Ссылка)             КАК КоличествоСсылок
		|ИЗ
		|	ЗаменяемыеСсылки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЦелеваяТаблица.Ссылка
		|ИЗ
		|	" + ИмяТаблицы + " КАК ЦелеваяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаменяемыеСсылки КАК ЗаменяемыеСсылки
		|		ПО ЦелеваяТаблица.Ссылка = ЗаменяемыеСсылки.Ссылка
		|		И ЦелеваяТаблица.Владелец = ЗаменяемыеСсылки.Владелец
		|ГДЕ
		|	ЗаменяемыеСсылки.Ссылка ЕСТЬ NULL
		|	И НЕ ЦелеваяТаблица.ЭтоГруппа");
		
	Если Не ЕстьВладельцы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЦелеваяТаблица.Владелец = ЗаменяемыеСсылки.Владелец", "");
	КонецЕсли;
	Если Не ЕстьГруппы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ ЦелеваяТаблица.ЭтоГруппа", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("НаборСсылок", МассивСсылок);
	
	Результат = Запрос.ВыполнитьПакет();
	Условия = Результат[1].Выгрузить()[0];
	Если Условия.ЕстьГруппы Тогда
		ТекстОшибкиПараметров = НСтр("ru='Один из заменяемых элементов является группой.
                                           |Группы не могут быть заменены.'
                                           |;uk='Один з замінних елементів є групою.
                                           |Групи не можуть бути замінені.'");
		Возврат;
	ИначеЕсли Условия.КоличествоВладельцев > 1 Тогда 
		ТекстОшибкиПараметров = НСтр("ru='У заменяемых элементов разные владельцы.
                                           |Такие элементы не могут быть заменены.'
                                           |;uk='У замінних елементів різні власники.
                                           |Такі елементи не можуть бути замінені.'");
		Возврат;
	ИначеЕсли Условия.КоличествоСсылок <> КоличествоСсылок Тогда
		ТекстОшибкиПараметров = НСтр("ru='Все заменяемые элементы должны быть одного типа.';uk='Усі змінні елементи повинні бути одного типу.'");
		Возврат;
	КонецЕсли;
	
	Если Результат[2].Выгрузить().Количество() = 0 Тогда
		Если КоличествоСсылок > 1 Тогда
			ТекстОшибкиПараметров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Выбранные элементы (%1) не на что заменить.';uk='Вибрані елементи (%1) немає на що замінити.'"), КоличествоСсылок);
		Иначе
			ТекстОшибкиПараметров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Выбранный элемент ""%1"" не на что заменить.';uk='Вибраний елемент ""%1"" немає на що замінити.'"), ОбщегоНазначения.ПредметСтрокой(ЦелевойЭлемент));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОбщийВладелецЗаменяемыхСсылок = ?(ЕстьВладельцы, Условия.ОбщийВладелец, Неопределено);
	Для Каждого Элемент Из МассивСсылок Цикл
		ЗаменяемыеСсылки.Добавить().Ссылка = Элемент;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСценарийМастера()
	
	// 0. Выбор основного элемента.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru='Заменить >';uk='Замінити >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru='Начать замену элементов';uk='Почата заміна елементів'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru='Отмена';uk='Відмінити'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru='Отказаться от замены элементов';uk='Відмовитися від заміни елементів'");
	
	ДобавитьШагМастера(Элементы.ШагВыборЦелевогоЭлемента, 
		ДействиеШагаМастера("ПриАктивации",         "ШагВыборЦелевогоЭлементаПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборЦелевогоЭлементаПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборЦелевогоЭлементаПередДействиемОтмена"))), 
		КнопкиМастера);
	
	// 1. Ожидание процесса
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru='Прервать';uk='Перервати'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru='Прервать замену элементов';uk='Перервати заміну елементів'");
	
	ДобавитьШагМастера(Элементы.ШагЗамена, 
		ДействиеШагаМастера("ПриАктивации",         "ШагЗаменаПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагЗаменаПередДействиемОтмена",
		ДействиеШагаМастера("ПриОбработкеОжидания", "ШагЗаменаПриОбработкеОжидания"))), 
		КнопкиМастера);
	
	// 2. Успешное объединение
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Далее.КнопкаПоУмолчанию = Ложь;
	КнопкиМастера.Отмена.КнопкаПоУмолчанию = Истина;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru='Закрыть';uk='Закрити'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru='Закрыть результаты замены элементов';uk='Закрити результати заміни елементів'");
	
	ДобавитьШагМастера(Элементы.ШагУспешногоЗавершения, 
		ДействиеШагаМастера("ПриАктивации",         "ШагУспешногоЗавершенияПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагУспешногоЗавершенияПередДействиемОтмена")), 
		КнопкиМастера);
	
	// 3. Ошибки замены ссылок
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Заголовок = НСтр("ru='< Назад';uk='< Назад'");
	КнопкиМастера.Назад.Подсказка = НСтр("ru='Вернутся к выбору целевого элемента';uk='Повернутися до вибору цільового елемента'");
	КнопкиМастера.Далее.Заголовок = НСтр("ru='Повторить замену >';uk='Повторити заміну >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru='Повторить замену элементов';uk='Повторити заміну елементів'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru='Закрыть';uk='Закрити'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru='Закрыть результаты замены элементов';uk='Закрити результати заміни елементів'");
	
	ДобавитьШагМастера(Элементы.ШагПовторЗамены,
		ДействиеШагаМастера("ПриАктивации",         "ШагПовторЗаменыПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагПовторЗаменыПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемНазад",  "ШагПовторЗаменыПередДействиемНазад",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагПовторЗаменыПередДействиемОтмена")))), 
		КнопкиМастера);
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборЦелевогоЭлементаПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	
	СформироватьЦелевойЭлементИПодсказку(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборЦелевогоЭлементаПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Проверяем на неправомерные замены.
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	ИначеЕсли ЗаменяемыеСсылки.Количество() = 1 И ТекущиеДанные.Ссылка = ЗаменяемыеСсылки.Получить(0).Ссылка Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нельзя заменять элемент сам на себя.';uk='Не можна замінювати елемент сам на себе.'"));
		Возврат;
		
	ИначеЕсли ЗначениеРеквизита(ТекущиеДанные, "ЭтоГруппа", Ложь) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нельзя заменять элемент на группу.';uk='Не можна замінювати елемент на групу.'"));
		Возврат;
	КонецЕсли;
	
	ТекущийВладелец = ЗначениеРеквизита(ТекущиеДанные, "Владелец");
	Если ТекущийВладелец <> ОбщийВладелецЗаменяемыхСсылок Тогда
		Текст = НСтр("ru='Нельзя заменять на элемент, подчиненный другому владельцу.
            |У выбранного элемента владелец ""%1"", а у заменяемого - ""%2"".'
            |;uk='Не можна замінювати на елемент, підпорядкований іншому власнику.
            |У вибраного елемента власник ""%1"", а у того, що заміняється - ""%2"".'");
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекущийВладелец, ОбщийВладелецЗаменяемыхСсылок));
		Возврат;
		
	ИначеЕсли Не ЗначениеРеквизита(ТекущиеДанные, "ПометкаУдаления", Ложь) Тогда
		// Нужна дополнительная проверка по прикладным данным.
		ПроверкаДопустимостиЗаменыПрикладнойОбласти(ПараметрыШага);
		Возврат;
		
	КонецЕсли;
	
	// Попытка заменить на элемент, помеченный на удаление.
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Элемент %1 помечен на удаление. Продолжить?';uk='Елемент %1 відмічений для вилучення. Продовжити?'"), ТекущиеДанные.Ссылка);
	
	Описание = Новый ОписаниеОповещения("ПодтверждениеВыбораЦелевогоЭлемента", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборЦелевогоЭлементаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ШагЗаменаПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	// Стартуем длительную обработку по замене.
	ФоновоеЗаданиеЗапустить();
КонецПроцедуры

&НаКлиенте
Процедура ШагЗаменаПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗаданиеЗагрузитьНаКлиенте(Ложь, Ложь) Тогда
		Прекратить = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагЗаменаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения();
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешногоЗавершенияПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	
	// Обновляем надпись 
	Элементы.РезультатЗамены.Заголовок = СообщениеОЗавершении();
	
	// Оповещаем о успешной замене.
	СписокОбновленного = Новый Массив;
	СписокОбновленного.Добавить(ЦелевойЭлемент);
	Для Каждого Строка Из ЗаменяемыеСсылки Цикл
		СписокОбновленного.Добавить(Строка.Ссылка);
	КонецЦикла;
	ОповеститьОбУспешнойЗамене(СписокОбновленного);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешногоЗавершенияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторЗаменыПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	// Обновляем количества неудач.
	СформироватьНадписьНеудачныеЗамены();
	
	// Оповещаем об успешной частичной замене.
	СписокОбновленного = УдалитьИзЗаменяемыхОбработанные();	// Заодно и удаляем из списка
	СписокОбновленного.Добавить(ЦелевойЭлемент);
	ОповеститьОбУспешнойЗамене(СписокОбновленного);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторЗаменыПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Повтор замены
	ПерейтиНаШагМастера(Элементы.ШагЗамена, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторЗаменыПередДействиемНазад(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ПерейтиНаШагМастера(Элементы.ШагВыборЦелевогоЭлемента, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторЗаменыПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// Возвращает список успешно замененных ссылок, тех которых нет в НеудачныеЗамены.
&НаКлиенте
Функция УдалитьИзЗаменяемыхОбработанные()
	Результат = Новый Массив;
	
	Неудачные = Новый Соответствие;
	Для Каждого Строка Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		Неудачные.Вставить(Строка.Ссылка, Истина);
	КонецЦикла;
	
	Индекс = ЗаменяемыеСсылки.Количество() - 1;
	Пока Индекс > 0 Цикл
		Ссылка = ЗаменяемыеСсылки[Индекс].Ссылка;
		Если Ссылка<>ЦелевойЭлемент И Неудачные[Ссылка] = Неопределено Тогда
			ЗаменяемыеСсылки.Удалить(Индекс);
			Результат.Добавить(Ссылка);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПодтверждениеВыбораЦелевогоЭлемента(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительная проверка по прикладным данным.
	ПроверкаДопустимостиЗаменыПрикладнойОбласти(ДополнительныеПараметры.ПараметрыШага);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДопустимостиЗаменыПрикладнойОбласти(Знач ПараметрыШага)
	// Проверка допустимости замен с прикладной точки зрения.
	ТекстОшибки = ПроверитьВозможностьЗаменыСсылок();
	Если ПустаяСтрока(ТекстОшибки) Тогда // Все замены допустимы.
		ЗавершитьШагМастера(ПараметрыШага);
		Возврат;
	КонецЕсли;
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	НастройкиДиалога.Вставить("Картинка", БиблиотекаКартинок.Предупреждение32);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию", 0);
	НастройкиДиалога.Вставить("Заголовок", НСтр("ru='Невозможно заменить элементы';uk='Неможливо замінити елементи'"));
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, НСтр("ru='ОК';uk='ОК'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Неопределено, ТекстОшибки, Кнопки, НастройкиДиалога);
КонецПроцедуры

&НаСервере
Функция ИнициализироватьМастер(Знач ГруппаСтраниц, Знач КнопкаДалее, Знач КнопкаНазад, Знач КнопкаОтмена)
	// Инициализирует структуры мастера.
	//
	// Параметры:
	//     ГруппаСтраниц - ГруппаФормы - Элемент формы, группа типа "страницы", содержащая в себе страницы-шаги мастера.
	//     КнопкаДалее   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Далее".
	//     КнопкаНазад   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Назад".
	//     КнопкаОтмена  - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Отмена".
	
	Результат = Новый Структура;
	
	Результат.Вставить("Шаги", Новый Массив);
	Результат.Вставить("НомерТекущегоШага", 0);
	Результат.Вставить("СтраницаСтарта", Неопределено);
	
	// Идентификаторы частей интерфейса.
	Результат.Вставить("ГруппаСтраниц", ГруппаСтраниц.Имя);
	Результат.Вставить("КнопкаДалее",   КнопкаДалее.Имя);
	Результат.Вставить("КнопкаНазад",   КнопкаНазад.Имя);
	Результат.Вставить("КнопкаОтмена",  КнопкаОтмена.Имя);
	
	// Таймаут вызова обработчика
	Результат.Вставить("ТаймаутОжиданияДлительнойОперации", 
		?( ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2) );
	
	// Для обработки длительных операций.
	Результат.Вставить("ИдентификаторФоновогоЗадания");
	Результат.Вставить("АдресРезультатаФоновогоЗадания");
	Результат.Вставить("ИнформацияОбОшибке");
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("ЕстьПодтверждениеОтменыЗадания", Ложь);
	
	// Для хранения пользовательских параметров.
	Результат.Вставить("ПользовательскиеПараметры", Новый Соответствие);
	
	Возврат Результат;
КонецФункции

// Добавляет шаг мастера. Переходы между страницами будут происходить согласно порядку добавления.
//
// Параметры:
//
//     Страница - ГруппаФормы - Группа-страница, содержащая элементы текущего шага страницы.
// 
//     Действия - Структура - Описание действий, возможных на текущем шаге. Поля структуры:
//
//          * ПриАктивации      - Строка - Необязательное имя процедуры, которая будет выполнена перед активацией
//                                         страницы с двумя параметрами:
//                                         <Страница> - ГруппаФормы - группа-страница, которая активизируется.
//                                         <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемДалее  - Строка - Необязательное имя процедуры, которая будет выполнена при нажатии кнопки
//                                            "Далее", перед переходом на следующую страницу. Процедура будет вызвана с
//                                            двумя параметрами:
//                                              <ПараметрыШага> - служебный реквизит. При успешном завершении цепочки
//                                                                немодальных  вызовов последняя процедура-обработчик
//                                                                должна произвести вызов.
//                                                                ЗавершитьШагМастера(ПараметрыШага), подтверждая
//                                                                действие.
//                                              <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемНазад  - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Назад".
//
//          * ПередДействиемОтмена - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Отмена".
//
//          * ПриОбработкеОжидания - Строка - Необязательное имя процедуры, которая будет периодически вызываться с
//                                            двумя  параметрами:
//                                              <Прекратить> - Если при выходе из процедуры установить в значение
//                                                             Истина, то периодические вызовы будут прекращены.
//                                              <ДополнительныеПараметры> - Неопределено
//
//      Кнопки - Структура - описание кнопок на текущем шаге. Поля структуры:
//
//          * Далее  - Структура - Описание кнопки "Далее". поля: Заголовок, Подсказка, Доступность, Видимость,
//                                 КнопкаПоУмолчанию.
//                                 Пустая подсказка заменяется на заголовок. По умолчанию будут использованы значения:
//                                 Заголовок = "Далее >", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Истина;
//
//          * Назад  - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "< Назад", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
//          * Отмена - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "Отмена", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
// Для составления параметров рекомендуется использовать вспомогательные методы "ДобавитьШагМастера",
// "ДействиеШагаМастера", "КнопкиМастера".
//
&НаСервере
Процедура ДобавитьШагМастера(Знач Страница, Знач Действия, Знач Кнопки)
	
	// Умолчания
	ОписаниеШага = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
	ОписаниеШага.Вставить("Страница", Страница.Имя);
	
	// Устанавливаем действия
	ЗаполнитьЗначенияСвойств(ОписаниеШага, Действия);
	
	// Регистрация описаний кнопок.
	Для Каждого КлючИЗначение Из Кнопки Цикл
		ИмяКнопки = КлючИЗначение.Ключ;
		ОписаниеКнопки = КлючИЗначение.Значение;
		// Заполнение вторичных свойств.
		Если Не ОписаниеКнопки.Видимость Тогда
			ОписаниеКнопки.Доступность = Ложь;
			ОписаниеКнопки.КнопкаПоУмолчанию = Ложь;
		Иначе
			Если Не ЗначениеЗаполнено(ОписаниеКнопки.Подсказка) Тогда
				ОписаниеКнопки.Подсказка = ОписаниеКнопки.Заголовок;
			КонецЕсли;
		КонецЕсли;
		// Регистрация с префиксом "Кнопка".
		ОписаниеШага.Вставить("Кнопка" + ИмяКнопки, ОписаниеКнопки);
	КонецЦикла;

	НастройкиПошаговогоМастера.Шаги.Добавить(ОписаниеШага);
КонецПроцедуры

// Вспомогательное формирование структуры, описывающей действие.
//
// Параметры:
//     Идентификатор    - Строка - Идентификатор действия, см описание метода "ДобавитьШагМастера".
//     ИмяОбработчика   - Строка - Имя процедуры, см описание метода "ДобавитьШагМастера".
//     СлужебныеДанные  - Структура - Накапливает значения.
//
// Возвращаемое значение:
//    Структура - СлужебныеДанные с добавленными полями.
//
&НаСервере
Функция ДействиеШагаМастера(Знач Идентификатор, Знач ИмяОбработчика, СлужебныеДанные = Неопределено)
	
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	СлужебныеДанные.Вставить(Идентификатор, ИмяОбработчика);;
	Возврат СлужебныеДанные;
	
КонецФункции

// Вспомогательное формирование структуры, описывающей кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Кнопки мастера.
//       * Назад  - Структура - Описание кнопки Назад, сформированное методом КнопкаМастера().
//       * Далее  - Структура - Описание кнопки Далее, сформированное методом КнопкаМастера().
//       * Отмена - Структура - Описание кнопки Отмена, сформированное методом КнопкаМастера().
//
&НаСервере
Функция КнопкиМастера()
	
	Результат = Новый Структура("Далее, Назад, Отмена", КнопкаМастера(), КнопкаМастера(), КнопкаМастера());
	Результат.Далее.КнопкаПоУмолчанию = Истина;
	Результат.Далее.Заголовок = НСтр("ru='Далее >';uk='Далі >'");
	Результат.Назад.Заголовок = НСтр("ru='< Назад';uk='< Назад'");
	Результат.Отмена.Заголовок = НСтр("ru='Отмена';uk='Відмінити'");
	Возврат Результат;
	
КонецФункции

// Описание настроек кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Настройки кнопки формы.
//       * Заголовок         - Строка - Заголовок кнопки.
//       * Подсказка         - Строка - Подсказка для кнопки.
//       * Видимость         - Булево - Когда Истина то кнопка видна. Значение по умолчанию: Истина.
//       * Доступность       - Булево - Когда Истина то кнопку можно нажимать. Значение по умолчанию: Истина.
//       * КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. Значение по умолчанию:
//                                      Ложь.
//
// См. также:
//   "КнопкаФормы" в синтакс-помощнике.
//
&НаСервере
Функция КнопкаМастера()
	Результат = Новый Структура;
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Подсказка", "");
	
	Результат.Вставить("Доступность", Истина);
	Результат.Вставить("Видимость", Истина);
	Результат.Вставить("КнопкаПоУмолчанию", Ложь);
	
	Возврат Результат;
КонецФункции

// Устанавливает начальную страницу для первого запуска мастера.
//
// Параметры:
//     СтартоваяСтраница - Число, Строка, ГруппаФормы - Номер шага, группа-страница, или ее идентификатор.
//
&НаКлиенте
Процедура УстановитьНачальнуюСтраницуМастера(Знач Страница)
	
	НастройкиПошаговогоМастера.СтраницаСтарта = НомерШагаМастераПоИдентификатору(Страница);
	
КонецПроцедуры

// Запускает начальную работу мастера с шага, установленного предварительно при помощи
// "УстановитьНачальнуюСтраницуМастера".
//
&НаКлиенте
Процедура ЗапуститьРаботуМастера()
	Если НастройкиПошаговогоМастера.СтраницаСтарта = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Перед запуском мастера должна быть установлена начальная страница.';uk='Перед запуском майстра повинна бути встановлена початкова сторінка.'");
		
	ИначеЕсли НастройкиПошаговогоМастера.СтраницаСтарта = -1 Тогда
		// Разогрев. Проверяем наличие обработчиков действий у всех шагов.
		ВозможныеДействия = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
		Для Каждого ОписаниеШага Из НастройкиПошаговогоМастера.Шаги Цикл
			Для Каждого КлючЗначение Из ВозможныеДействия Цикл
				ИмяДействия = КлючЗначение.Ключ;
				ИмяОбработчика = ОписаниеШага[ИмяДействия];
				Если Не ПустаяСтрока(ИмяОбработчика) Тогда
					Попытка
						Тест = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
					Исключение
						Текст = НСтр("ru='Ошибка создания обработчика события %1 для страницы %2, не определена процедура %3';uk='Помилка створення обробника події %1 для сторінки %2, не визначена процедура %3'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяДействия, ОписаниеШага.Страница, ИмяОбработчика);
						ВызватьИсключение Текст;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Фактический запуск
		ПерейтиНаШагМастера(НастройкиПошаговогоМастера.НомерТекущегоШага, Истина);
	Иначе
		// По умолчанию все отключено
		Элементы[НастройкиПошаговогоМастера.КнопкаДалее].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаНазад].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаОтмена].Видимость = Ложь;
		
		// Отложенный запуск
		НастройкиПошаговогоМастера.НомерТекущегоШага = НастройкиПошаговогоМастера.СтраницаСтарта;
		НастройкиПошаговогоМастера.СтраницаСтарта    = -1;
		ПодключитьОбработчикОжидания("ЗапуститьРаботуМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Выполняет переключение мастера на следующую или предыдущую страницу.
//
// Параметры:
//     КодКоманды - Строка - Идентификатор действия, может принимать значения "Далее", "Назад" или "Отмена".
//
&НаКлиенте
Процедура ШагМастера(Знач КодКоманды)
	Если КодКоманды = "Далее" Тогда
		Направление = 1;
	ИначеЕсли КодКоманды = "Назад" Тогда
		Направление = -1;
	ИначеЕсли КодКоманды = "Отмена" Тогда
		Направление = 0;
	Иначе
		ВызватьИсключение НСтр("ru='Некорректная команда шага помощника';uk='Некоректна команда кроку помічника'");
	КонецЕсли;
	
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть.
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// Отрабатываем уход с текущей страницы.
	Если Направление = 1 Тогда
		Действие = ОписаниеШага.ПередДействиемДалее;
	ИначеЕсли Направление = -1 Тогда
		Действие = ОписаниеШага.ПередДействиемНазад;
	Иначе
		Действие = ОписаниеШага.ПередДействиемОтмена;
	КонецЕсли;
	
	Если ПустаяСтрока(Действие) Тогда
		ЗавершитьШагМастера(Направление);
	Иначе
		Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Направление);
	КонецЕсли;
КонецПроцедуры

// Выполняет безусловное позиционирование мастера на страницу.
//
// Параметры:
//     ИдентификаторШага   - Число, Строка, ГруппаФормы - Номер, группа-страница формы или ее имя для перехода.
//     ИнициироватьСобытия - Булево - Флаг того, что необходимо вызывать события, связанные с активацией шага.
//
&НаКлиенте
Процедура ПерейтиНаШагМастера(Знач ИдентификаторШага, Знач ИнициироватьСобытия = Ложь)
	СледующийШаг = НомерШагаМастераПоИдентификатору(ИдентификаторШага);
	Если СледующийШаг = Неопределено Тогда
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден шаг помощника %1';uk='Не знайдений крок помічника %1'"), ИдентификаторШага);
		ВызватьИсключение Ошибка;
	КонецЕсли;
		
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть.
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// И запускаем новую страницу
	ШагМастераЗавершениеБезусловно(СледующийШаг, ИнициироватьСобытия);
КонецПроцедуры

// Подтверждает действие шага мастера и вызывает переключение страницы.
//
// Параметры:
//     ПараметрыШага - Служебный реквизит, полученный в обработчике перед началом действия.
//
&НаКлиенте
Процедура ЗавершитьШагМастера(Знач ПараметрыШага)
	СледующийШаг = НастройкиПошаговогоМастера.НомерТекущегоШага + ПараметрыШага;
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	Если ПараметрыШага = 0 Тогда
		// Подтверждение отмены - ничего не делаем.
		Возврат;
		
	ИначеЕсли ПараметрыШага = 1 И СледующийШаг > ПоследнийШаг Тогда
		// Попытка сделать шаг за пределы вперед.
		ВызватьИсключение НСтр("ru='Попытка выхода за последний шаг мастера';uk='Спроба виходу за останній крок майстра'");
		
	ИначеЕсли ПараметрыШага = -1 И СледующийШаг < 0 Тогда
		// Попытка сделать шаг за пределы назад.
		ВызватьИсключение НСтр("ru='Попытка выхода назад из первого шага мастера';uk='Спроба виходу назад з першого кроку майстра'");
		
	КонецЕсли;
	
	ШагМастераЗавершениеБезусловно(СледующийШаг);
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераЗавершениеБезусловно(Знач СледующийШаг, Знач ИнициироватьСобытия = Истина)
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу.
	Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	// Обход особенности платформы.
	ГруппаСтраницМастера = Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц];
	НоваяТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	ВидГруппыСтраница = ВидГруппыФормы.Страница;
	ТипГруппаФормы    = Тип("ГруппаФормы");
	Для Каждого Страница Из ГруппаСтраницМастера.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Страница) = ТипГруппаФормы И Страница.Вид = ВидГруппыСтраница Тогда
			Страница.Видимость = (Страница = НоваяТекущаяСтраница);
		КонецЕсли;
	КонецЦикла;
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	Если ИнициироватьСобытия И Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		// Отрабатываем "ПриАктивации" новой страницы, он же запустит ожидание.
		ПодключитьОбработчикОжидания("ОбработкаАктивацииСтраницыМастера", 0.1, Истина);
		
	ИначеЕсли Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Запускаем обработчик ожидания, если надо.
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваКнопкиМастера(Знач ИмяКнопки, Знач Описание)
	
	КнопкаМастера = Элементы[ИмяКнопки];
	ЗаполнитьЗначенияСвойств(КнопкаМастера, Описание);
	КнопкаМастера.РасширеннаяПодсказка.Заголовок = Описание.Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивацииСтраницыМастера()
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	Если Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		Оповещение = Новый ОписаниеОповещения(ОписаниеШага.ПриАктивации, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Элементы[ОписаниеШага.Страница]);
	КонецЕсли;
	
	// И запускаем ожидание, если надо.
	Если Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Первый запуск быстрый
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Может быть номер шага или группа-страница, или ее идентификатор.
&НаКлиенте
Функция НомерШагаМастераПоИдентификатору(Знач ИдентификаторШага)
	ТипПараметра = ТипЗнч(ИдентификаторШага);
	Если ТипПараметра = Тип("Число") Тогда
		Возврат ИдентификаторШага;
	КонецЕсли;
	
	ИмяПоиска = ?(ТипПараметра = Тип("ГруппаФормы"), ИдентификаторШага.Имя, ИдентификаторШага);
	Для НомерШага=0 По НастройкиПошаговогоМастера.Шаги.ВГраница() Цикл
		Если НастройкиПошаговогоМастера.Шаги[НомерШага].Страница = ИмяПоиска Тогда
			Возврат НомерШага;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден шаг ""%1"".';uk='Не знайдено крок ""%1"".'"), ИмяПоиска);
КонецФункции

// Возвращает флаг отмены
&НаКлиенте
Функция ОбработкаОжиданияСтраницыМастера()
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	Действие = ОписаниеШага.ПриОбработкеОжидания;
	Если ПустаяСтрока(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
	
	Прекратить = Ложь;
	ВыполнитьОбработкуОповещения(Оповещение, Прекратить);
	Продолжать = Не Прекратить;
	
	Если Продолжать Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", НастройкиПошаговогоМастера.ТаймаутОжиданияДлительнойОперации, Истина);
	КонецЕсли;
	
	Возврат Продолжать;
КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияОтменыЗаданияИЗакрытияФормы(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Прервать Тогда
		ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения();
	Иначе
		ОбработкаОжиданияСтраницыМастера();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФоновоеЗаданиеИЗакрытьФормуБезПодтверждения()
	Если Не ФоновоеЗаданиеЗагрузитьНаКлиенте(Истина, Ложь) Тогда
		НастройкиПошаговогоМастера.ЕстьПодтверждениеОтменыЗадания = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ФоновоеЗаданиеЗагрузитьНаКлиенте(ПрерватьЕслиНеВыполнено, ПоказатьДиалогПередЗакрытием)
	
	ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	
	ИнформацияОЗадании = ФоновоеЗаданиеЗагрузитьРезультат(ПрерватьЕслиНеВыполнено);
	Если Не ИнформацияОЗадании.Завершено Тогда
		Если ПоказатьДиалогПередЗакрытием Тогда
			Обработчик   = Новый ОписаниеОповещения("ПослеПодтвержденияОтменыЗаданияИЗакрытияФормы", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Прервать замену элементов и закрыть форму?';uk='Перервати заміну елементів і закрити форму?'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru='Прервать';uk='Перервати'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не прерывать';uk='Не переривати'"));
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнформацияОЗадании.ИнформацияОбОшибке = Неопределено Тогда
		Если ИнформацияОЗадании.Результат = Истина Тогда
			// Полностью успешно - закрыть форму и вывести оповещение.
			ПоказатьОповещениеПользователя(
				,
				ПолучитьНавигационнуюСсылку(ЦелевойЭлемент),
				СообщениеОЗавершении(),
				БиблиотекаКартинок.Информация32);
			СписокОбновленного = Новый Массив;
			Для Каждого Строка Из ЗаменяемыеСсылки Цикл
				СписокОбновленного.Добавить(Строка.Ссылка);
			КонецЦикла;
			ОповеститьОбУспешнойЗамене(СписокОбновленного);
			// Закрываем форму.
			Закрыть();
		Иначе
			// Частично успешно - вывести расшифровку.
			ПерейтиНаШагМастера(Элементы.ШагПовторЗамены, Истина);
			Активизировать();
		КонецЕсли
	Иначе
		// Фоновое задание завершено с ошибкой.
		ПоказатьПредупреждение(, ИнформацияОЗадании.ИнформацияОбОшибке);
		ПерейтиНаШагМастера(Элементы.ШагВыборЦелевогоЭлемента);
		Активизировать();
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	// Отмена предыдущего задания.
	ФоновоеЗаданиеОтменить();
	
	// Определение параметров запуска.
	ЦелевойЭлементРезультат = ЦелевойЭлемент;
	
	ПарыЗамен = Новый Соответствие;
	Для Каждого Строка Из ЗаменяемыеСсылки Цикл
		ПарыЗамен.Вставить(Строка.Ссылка, ЦелевойЭлемент);
	КонецЦикла;
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("СпособУдаления", ТекущийВариантУдаления);
	ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Истина);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ПарыЗамен", ПарыЗамен);
	ПараметрыМетода.Вставить("Параметры", ПараметрыЗамены);
	
	// Запуск.
	ИнформацияОбОшибке = Неопределено;
	Попытка
		Задание = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ПоискИУдалениеДублей.ЗаменитьСсылки",
			ПараметрыМетода,
			НСтр("ru='Поиск и удаление дублей: Замена ссылок';uk='Пошук і вилучення дублів: Заміна посилань'"));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Истина;
		НастройкиПошаговогоМастера.ИнформацияОбОшибке             = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Неопределено;
		НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Задание.АдресХранилища;
	НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Задание.ИдентификаторЗадания;
	НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Задание.ЗаданиеВыполнено;
	
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗагрузитьРезультат(Знач ПрерватьЕслиНеВыполнено = Ложь)
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
	Иначе
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания);
		Если Задание <> Неопределено Тогда
			Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
				НастройкиПошаговогоМастера.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			КонецЕсли;
			НастройкиПошаговогоМастера.ЗаданиеВыполнено = Задание.Состояние <> СостояниеФоновогоЗадания.Активно;
			Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
				// Текущие сообщения фонового задания.
				НакопленныеСообщения = Задание.ПолучитьСообщенияПользователю(Истина);
				Если НакопленныеСообщения <> Неопределено Тогда
					Для Каждого Сообщение Из НакопленныеСообщения Цикл
						Сообщение.Сообщить();
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Значение = Неопределено;
	Если НастройкиПошаговогоМастера.ЗаданиеВыполнено Тогда
		НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
		Если НастройкиПошаговогоМастера.ИнформацияОбОшибке = Неопределено Тогда
			Значение = ПолучитьИзВременногоХранилища(НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания);
			Значение = Не ЗаполнитьНеудачныеЗамены(Значение);
		КонецЕсли;
	ИначеЕсли ПрерватьЕслиНеВыполнено Тогда
		ФоновоеЗаданиеОтменить();
	КонецЕсли;
	
	ИнформацияОЗадании = Новый Структура;
	ИнформацияОЗадании.Вставить("Завершено",          НастройкиПошаговогоМастера.ЗаданиеВыполнено);
	ИнформацияОЗадании.Вставить("ИнформацияОбОшибке", НастройкиПошаговогоМастера.ИнформацияОбОшибке);
	ИнформацияОЗадании.Вставить("Результат",          Значение);
	
	Возврат ИнформацияОЗадании;
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеОтменить()
	Если НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания);
	КонецЕсли;
	НастройкиПошаговогоМастера.ЗаданиеВыполнено               = Ложь;
	НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	НастройкиПошаговогоМастера.ИнформацияОбОшибке             = Неопределено;
	НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания   = Неопределено;
КонецПроцедуры

#КонецОбласти

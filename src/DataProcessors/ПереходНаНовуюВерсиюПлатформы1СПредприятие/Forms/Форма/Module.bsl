
&НаКлиенте
Перем ОповещениеОбАвторизацииВСервисеОбновлений Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучениеОбновленийПрограммы.ДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		ТекстИсключения =
			НСтр("ru='Переход на новую версию платформы недоступен в текущем режиме работы.';uk='Перехід на нову версію платформи недоступний в поточному режимі роботи.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Элементы.ДекорацияНаписатьВТехПоддержку.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьДомен(
				НСтр("ru='<body>При возникновении проблем напишите в <a href=""mailto:webits-info@bas-soft.eu"">техподдержку</a>.</body>';uk='<body>При виникненні проблем напишіть у <a href=""mailto:webits-info@bas-soft.eu"">техпідтримку</a>.</body>'")));
	Если ПустаяСтрока(Параметры.ВерсияКонфигурации) Тогда
		ВерсияКонфигурации = ИнтернетПоддержкаПользователейКлиентСервер.ВерсияКонфигурации();
	Иначе
		ВерсияКонфигурации = Параметры.ВерсияКонфигурации;
	КонецЕсли;
	
	ОбновитьИнформацию = Параметры.ОбновитьИнформацию;
	
	Если Параметры.ДанныеАвторизации <> Неопределено Тогда
		Логин  = Параметры.ДанныеАвторизации.Логин;
		Пароль = Параметры.ДанныеАвторизации.Пароль;
	Иначе
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			// Получение и установка обновлений платформы доступна только администратору системы.
			ДанныеАвторизации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			Если ДанныеАвторизации <> Неопределено Тогда
				Логин  = ДанныеАвторизации.Логин;
				Пароль = ДанныеАвторизации.Пароль;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗапомнитьПароль = Истина;
	
	СоздатьРезервнуюКопию = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ");
	Элементы.СоздатьРезервнуюКопию.Видимость            = СоздатьРезервнуюКопию;
	Элементы.СоздатьРезервнуюКопиюУстановлено.Видимость = СоздатьРезервнуюКопию;
	
	Если Параметры.СкрытьЗаголовки Тогда
		Элементы.ГруппаИнформацияОбОбновлении.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаПлатформаУстановлена.ОтображатьЗаголовок   = Ложь;
	КонецЕсли;
	
	СценарийНерекомендуемаяВерсияПлатформы = Параметры.СценарийНерекомендуемаяВерсияПлатформы;
	Если СценарийНерекомендуемаяВерсияПлатформы Тогда
		
		ПараметрыБазовойФункциональности = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности();
		
		Элементы.Версия.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='<body>Для работы с программой %1 использовать версию платформы не ниже: <b>%2</b>
                    |<br />Используемая сейчас версия: %3</body>'
                    |;uk='<body>Для роботи з програмою %1 використовувати версію платформи не нижче: <b>%2</b>
                    |<br />Використовувана зараз версія: %3</body>'"),
				?(ПараметрыБазовойФункциональности.РаботаВПрограммеЗапрещена,
					НСтр("ru='необходимо';uk='необхідно'"),
					НСтр("ru='рекомендуется';uk='рекомендується'")),
				ПараметрыБазовойФункциональности.МинимальноНеобходимаяВерсияПлатформы,
				ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие()));
		
		ЗавершитьРаботу = ПараметрыБазовойФункциональности.РаботаВПрограммеЗапрещена;
		
		Если ЗавершитьРаботу Тогда
			Элементы.ТекстСообщения.Заголовок = НСтр("ru='Вход в программу невозможен.
                |Необходимо предварительно обновить версию платформы.'
                |;uk='Вхід в програму неможливий.
                |Необхідно попередньо оновити версію платформи.'");
		Иначе
			Элементы.ТекстСообщения.Заголовок = НСтр("ru='Рекомендуется обновить версию платформы.
                |В противном случае некоторые возможности программы будут недоступны или будут работать некорректно.'
                |;uk='Рекомендується оновити версію платформи.
                |В іншому випадку деякі можливості програми будуть недоступні або будуть працювати некоректно.'");
		КонецЕсли;
		
		ОтобразитьНерекомендуемаяВерсияПлатформы();
		
	КонецЕсли;
	
	ИнформацияОДоступномОбновлении = Параметры.ИнформацияОбОбновлении;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ СценарийНерекомендуемаяВерсияПлатформы Тогда
		ОтобразитьСтраницуИнформацииОДоступномОбновленииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолучениеОбновленийПрограммы_ПроверкаОткрытияФормы"
		И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Параметр.Форма = ЭтотОбъект;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПолучениеИУстановка
		И Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаУстановкаТихий Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИДФоновогоЗадания) Тогда
		ОтменитьВыполнениеЗадания(ИДФоновогоЗадания);
		ОтключитьОбработчикОжидания("ОтобразитьСостояниеЗадания");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЛогинПриИзменении(Элемент)
	
	ИзмененЛогинПароль = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ИзмененЛогинПароль = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранятьДистрибутивыПлатформыВКаталогПриИзменении(Элемент)
	
	Элементы.КаталогСохранения.Доступность = СохранятьДистрибутивыПлатформыВКаталог;
	Если СохранятьДистрибутивыПлатформыВКаталог Тогда
		КаталогСохранения = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	Иначе
		КаталогСохранения = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы()
			+ "setup\";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если Не ВебКлиент Тогда
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок = НСтр("ru='Каталог хранения дистрибутивов платформы';uk='Каталог зберігання дистрибутивів платформи'");
	ДиалогВыбора.Каталог = Элементы.КаталогСохранения.ТекстРедактирования;
	Если НЕ ДиалогВыбора.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	КаталогСохранения = ДиалогВыбора.Каталог;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗарегистрироватьсяНаПортале1СИТСНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/registration"),
		НСтр("ru='Регистрация';uk='Реєстрація'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОсобенностиПереходаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСообщениеОбОшибкеПолученияОбновленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРекомендацииПриОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаписатьВТехПоддержкуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьЖурналРегистрацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСообщениеСервисаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияУстановкаЗавершенаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнструкцияУстановкаЗавершенаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРезервнуюКопиюУстановленоПриИзменении(Элемент)
	
	Если СоздатьРезервнуюКопию Тогда
		Элементы.СтраницыИнстрУстановкаУстановлена.ТекущаяСтраница = Элементы.СтрУстановленаСоздатьРК;
	Иначе
		Элементы.СтраницыИнстрУстановкаУстановлена.ТекущаяСтраница = Элементы.СтрУстановленаНеСоздаватьРК;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРезервнуюКопиюПриИзменении(Элемент)
	
	Если СоздатьРезервнуюКопию Тогда
		Элементы.СтраницыИнстрУстановкаЗавершена.ТекущаяСтраница = Элементы.СтрЗавершеноСоздатьРК;
	Иначе
		Элементы.СтраницыИнстрУстановкаЗавершена.ТекущаяСтраница = Элементы.СтрЗавершеноНеСоздаватьРК;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ТекСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекСтраница = Элементы.СтраницаНеУдалосьПодключитьсяКСервису
		ИЛИ ТекСтраница = Элементы.СтраницаСообщениеСервиса Тогда
		
		Если НЕ ПустаяСтрока(URLФайлаОбновления) Тогда
			ОтобразитьВыборКаталогаСохранения();
		Иначе
			ОтобразитьСтраницуИнформацииОДоступномОбновлении();
		КонецЕсли;
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаДоступнаяВерсияПлатформы
		ИЛИ ТекСтраница = Элементы.СтраницаПлатформаУжеУстановлена Тогда
		
		ОтобразитьНерекомендуемаяВерсияПлатформы();
		
	Иначе
		
		ОтобразитьСтраницуИнформацииОДоступномОбновлении();
		
	КонецЕсли;
	
	ОчиститьРезультатУстановкиПлатформы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ТекСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	Если ТекСтраница = Элементы.СтраницаНетНовойВерсии Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если ТекСтраница = Элементы.СтраницаПлатформаУжеУстановлена
		ИЛИ ТекСтраница = Элементы.СтраницаУстановкаЗавершена Тогда
		
		Если СоздатьРезервнуюКопию Тогда
			
			Если СценарийНерекомендуемаяВерсияПлатформы Тогда
				// Если отображается в качестве нерекомедуемой версии платформы,
				// тогда нельзя выполнять закрытие, т.к. будет завершена работа системы.
				ОткрытьСозданиеРезервнойКопииИБ();
			Иначе
				Закрыть();
				ОткрытьСозданиеРезервнойКопииИБ();
			КонецЕсли;
			
		Иначе
			
			Закрыть();
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекСтраница = Элементы.СтраницаНерекомендуемаяВерсияПлатформы Тогда
		
		ОтобразитьСтраницуИнформацииОДоступномОбновленииНаКлиенте();
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаДоступнаяВерсияПлатформы Тогда
		
		Если НЕ ПустаяСтрока(КаталогУстановки) Тогда
			ОтобразитьУстановкаЗавершена();
		Иначе
			ОпределитьURLФайлаИПерейтиКУстановке();
		КонецЕсли;
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаПодключениеКПорталу Тогда
		
		ОчиститьСообщения();
		Отказ = Ложь;
		Если ПустаяСтрока(Логин) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнен логин.';uk='Не заповнений логін.'"),
				,
				"Логин",
				,
				Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(Пароль) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнен пароль.';uk='Не заповнений пароль.'"),
				,
				"Пароль",
				,
				Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОпределитьURLФайлаИПерейтиКУстановке();
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаКаталогДистрибутивов Тогда
		
		Отказ = Ложь;
		Если СохранятьДистрибутивыПлатформыВКаталог Тогда
			
			Если ПустаяСтрока(КаталогСохранения) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не выбран каталог хранения дистрибутивов платформы.';uk='Не вибраний каталог зберігання дистрибутивів платформи.'"),
					,
					"КаталогСохранения",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// Загрузка дистрибутива платформы
		НачатьПолучениеФайлаОбновления();
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаНеУдалосьПодключитьсяКСервису
		ИЛИ ТекСтраница = Элементы.СтраницаСообщениеСервиса Тогда
		
		Если НЕ ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
			
			// Повторить попытку получения информации об обновлении
			Состояние(, , НСтр("ru='Получение информации о доступном обновлении';uk='Отримання інформації про доступне оновлення'"));
			ОтобразитьИнформациюОДоступномОбновлении(Истина);
			Состояние();
			
		ИначеЕсли URLФайлаОбновления <> "" Тогда
			
			НачатьПолучениеФайлаОбновления();
			
		Иначе
			
			// Повторить попытку получения файла обновления
			ОпределитьURLФайлаИПерейтиКУстановке();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРаботуНаТекущейВерсии(Команда)
	
	Закрыть("Продолжить");
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылку(Ссылка)
	
	Если Ссылка = "open:RCInstruction" Тогда
		
		ОткрытьВнутреннийФайлИнструкции(
			"СозданиеРезервнойКопииИнформационнойБазы",
			НСтр("ru='Создание резервной копии.htm';uk='Створення резервної копии.htm'"));
		
	ИначеЕсли Ссылка = "open:V8Update" Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			ИнформацияОДоступномОбновлении.URLОсобенностиПерехода,
			НСтр("ru='Особенности перехода на новую версию платформы';uk='Особливості переходу на нову версію платформи'"),
			Логин,
			Пароль);
		
	ИначеЕсли Ссылка = "open:DistribFolder" Тогда
		
		#Если Не ВебКлиент Тогда
		ЗапуститьПриложение(КаталогДистрибутива, , Ложь);
		#КонецЕсли
		
	ИначеЕсли Ссылка = "open:ActiveUsers" Тогда
		
		ИмяОткрываемойФормы = "Обработка.АктивныеПользователи.Форма.АктивныеПользователи";
		ОткрытьФорму(ИмяОткрываемойФормы, Новый Структура("ОшибкаУстановкиМонопольногоРежима", Истина));
		
	ИначеЕсли Ссылка = "open:ProxySettings" Тогда
		
		ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера",
			Новый Структура("НастройкаПроксиНаКлиенте", Истина),
			ЭтотОбъект);
		
	ИначеЕсли НРег(Лев(Ссылка, 22)) = "mailto:webits-info@1c." Тогда
		
		ОтправитьСообщениеВТехПоддержку("webIts");
		
	ИначеЕсли НРег(Лев(Ссылка, 7)) = "mailto:" Тогда
		
		#Если Не ВебКлиент Тогда
		ЗапуститьПриложение(КаталогДистрибутива, , Ложь);
		#КонецЕсли
		
	ИначеЕсли Ссылка = "open:log" Тогда
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("Пользователь", ИмяПользователя()));
		
	ИначеЕсли Ссылка = "open:debuglog" Тогда
		
		#Если Не ВебКлиент Тогда
		ЗапуститьПриложение(ПутьПротоколаУстановки, , Ложь);
		#КонецЕсли
		
	ИначеЕсли НРег(Лев(Ссылка, 7)) = "http://"
		ИЛИ НРег(Лев(Ссылка, 8)) = "https://" Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			Ссылка,
			"",
			Логин,
			Пароль);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеВТехПоддержку(АдресПолучателя)
	
	Тема     = НСтр("ru='Интернет-поддержка. Переход на новую версию Платформы';uk='Інтернет-підтримка. Перехід на нову версію Платформи'");
	Вложения = Неопределено;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключениеКПорталу Тогда
		
		Если Элементы.ПанельОшибкаПодключения.Видимость Тогда
			ОписаниеПричины = ИнтернетПоддержкаПользователейКлиентСервер.ТекстФорматированногоЗаголовка(
				Элементы.ДекорацияСообщениеОбОшибкеПолученияОбновления.Заголовок);
		Иначе
			ОписаниеПричины = "";
		КонецЕсли;
		
		Сообщение = НСтр("ru='Не удалось подключиться к порталу ИТС.';uk='Не вдалося підключитися до порталу ІТС.'")
			+ ?(ПустаяСтрока(ОписаниеПричины),
				"",
				Символы.ПС + Символы.ПС + НСтр("ru='Описание:';uk='Опис:'") + Символы.ПС + ОписаниеПричины);
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНеУдалосьПодключитьсяКСервису Тогда
		
		Сообщение = НСтр("ru='Ошибка при подключении сервиса автоматического обновления платформы.';uk='Помилка при підключенні сервісу автоматичного оновлення платформи.'")
			+ ?(ПустаяСтрока(ПодробноеОписаниеОшибки),
				"",
				Символы.ПС + Символы.ПС + НСтр("ru='Описание:';uk='Опис:'") + Символы.ПС + ПодробноеОписаниеОшибки);
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСообщениеСервиса Тогда
		
		Если ПустаяСтрока(ПодробноеОписаниеОшибки) Тогда
			Сообщение = НСтр("ru='Сообщение при подключении сервиса автоматического обновления платформы:';uk='Повідомлення про підключення сервісу автоматичного оновлення платформи:'")
				+ Символы.ПС
				+ ИнтернетПоддержкаПользователейКлиентСервер.ТекстФорматированногоЗаголовка(
					Элементы.ДекорацияСообщениеСервиса.Заголовок);
		Иначе
			
			Если Не ПустаяСтрока(ПутьПротоколаУстановки) Тогда
				
				Вложения = Новый Массив;
				ОписательФайла = Новый Файл(ПутьПротоколаУстановки);
				Если ОписательФайла.Существует() И ОписательФайла.ЭтоФайл() Тогда
					Вложения.Добавить(
						Новый Структура("Представление, ИмяФайла",
							НСтр("ru='Протокол установки платформы.txt';uk='Протокол встановлення платформи.txt'"),
							ПутьПротоколаУстановки));
				КонецЕсли;
				
			КонецЕсли;
			
			Сообщение = НСтр("ru='Ошибка при получении и установке платформы:';uk='Помилка при отриманні та встановлення платформи:'")
				+ Символы.ПС
				+ ПодробноеОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиент.СлужебнаяОтправитьСообщениеВТехПоддержку(
		Тема,
		Сообщение,
		АдресПолучателя,
		Вложения,
		Логин,
		Пароль);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданиеРезервнойКопииИБ()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ") Тогда
		МодульРезервноеКопирование = ОбщегоНазначенияКлиент.ОбщийМодуль("РезервноеКопированиеИБКлиент");
		ПараметрыФормы = Новый Структура("КаталогПрограммы", КаталогУстановки);
		МодульРезервноеКопирование.ОткрытьФормуРезервногоКопирования(ПараметрыФормы);
	Иначе
		ТекстСообщения = НСтр("ru='Не встроена подсистема ""Резервное копирование ИБ"".';uk='Не вбудована підсистема ""Резервне копіювання ІБ"".'");
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнутреннийФайлИнструкции(ИмяМакета, ИмяФайла)
	
	#Если Не ВебКлиент Тогда
	ПутьФайлаИнструкции = ПодготовитьФайлМакетаИнструкции(ИмяМакета, ИмяФайла);
	
	// Открытие инструкции в Интернет-обозревателе по умолчанию
	Попытка
		ЗапуститьПриложение(ПутьФайлаИнструкции, , Ложь);
	Исключение
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при открытии внутреннего файла инструкции (%1).
                    |%2'
                    |;uk='Помилка при відкритті внутрішнього файлу інструкції (%1).
                    |%2'"),
				ИмяФайла,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ПоказатьПредупреждение(, НСтр("ru='Ошибка при открытии файла.';uk='Помилка при відкритті файлу.'"));
		Возврат;
	КонецПопытки;
	
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьФайлМакетаИнструкции(Знач ИмяМакета, Знач ИмяФайла)
	
	Если НЕ ПолучениеОбновленийПрограммы.ДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		ВызватьИсключение НСтр("ru='Использование обновления платформы недоступно в текущем режиме работы.';uk='Використання оновлення платформи недоступне в поточному режимі роботи.'");
	КонецЕсли;
	
	// Файл записывается в контексте сервера на компьютере пользователя,
	// т.к. механизм используется только в файловом режиме работы.
	
	КаталогДляРаботыСОбновлениями =
		ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	
	Если НЕ ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(КаталогДляРаботыСОбновлениями) Тогда
		Попытка
			СоздатьКаталог(КаталогДляРаботыСОбновлениями);
		Исключение
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при создании каталога для работы с обновлениями платформы (%1).
                        |%2'
                        |;uk='Помилка при створенні каталогу для роботи з оновленнями платформи (%1).
                        |%2'"),
					КаталогДляРаботыСОбновлениями,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ВызватьИсключение НСтр("ru='Ошибка при создании временного каталога.';uk='Помилка при створенні тимчасового каталогу.'");
		КонецПопытки;
	КонецЕсли;
	
	ПутьФайлаИнструкции = КаталогДляРаботыСОбновлениями + ИмяФайла;
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ПутьФайлаИнструкции);
		ЗаписьТекста.Записать(Обработки.ПереходНаНовуюВерсиюПлатформы1СПредприятие.ПолучитьМакет(ИмяМакета).ПолучитьТекст());
		ЗаписьТекста.Закрыть();
	Исключение
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при записи данных макета инструкции в файл на диске (%1).
                    |%2'
                    |;uk='Помилка при запису даних макета інструкції у файл на диску (%1).
                    |%2'"),
				ИмяФайла,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВызватьИсключение НСтр("ru='Ошибка при создании временного файла.';uk='Помилка при створенні тимчасового файлу.'");
	КонецПопытки;
	
	Возврат ПутьФайлаИнструкции;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОшибкаСоединения(КодОшибки)
	
	Возврат (КодОшибки = "ConnectError" ИЛИ КодОшибки = "ServerError" ИЛИ КодОшибки = "ClientError");
	
КонецФункции


#Область РаботаСФоновымЗаданием

&НаКлиенте
Процедура НачатьПолучениеФайлаОбновления()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСообщениеСервиса
		И ПолучениеОбновленийПрограммыКлиентСервер.ЭтоКодВозвратаПриОграниченииСистемныхПолитик(КодВозврата)
		И РежимУстановки = 0 Тогда
		
		// Обход ошибки политик безопасности при установке с настройками по умолчанию (в "тихом" режиме).
		// Если возникла ошибка ограничения политик безопасности при установке в тихом режиме,
		// тогда выполнить установку в полном интерактивном режиме.
		РежимУстановки = 1;
		
	КонецЕсли;
	
	ОчиститьРезультатУстановкиПлатформы(ЭтотОбъект);
	
	// Старт фонового задания
	НачатьПолучениеФайлаОбновленияНаСервере();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПолучениеИУстановка;
	Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаПолучение;
	
	ПодключитьОбработчикОжидания("ОтобразитьСостояниеЗадания", 1.0, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРезультатУстановкиПлатформы(Форма)
	
	Форма.ПутьПротоколаУстановки = "";
	Форма.КодВозврата            = 0;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеФайлаОбновленияНаСервере()
	
	Если НЕ ПолучениеОбновленийПрограммы.ДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		ВызватьИсключение НСтр("ru='Использование обновления платформы недоступно в текущем режиме работы.';uk='Використання оновлення платформи недоступне в поточному режимі роботи.'");
	КонецЕсли;
	
	// Сохранение настройки режима установки и каталога
	НастройкиОбновления = ПолучениеОбновленийПрограммы.НастройкиАвтоматическогоОбновления();
	
	НастройкиОбновления.РежимУстановки = РежимУстановки;
	
	Если НЕ СохранятьДистрибутивыПлатформыВКаталог Тогда
		НастройкиОбновления.КаталогДистрибутивовПлатформы = Неопределено;
	ИначеЕсли КаталогСохранения = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы() Тогда
		НастройкиОбновления.КаталогДистрибутивовПлатформы = "";
	Иначе
		НастройкиОбновления.КаталогДистрибутивовПлатформы = КаталогСохранения;
	КонецЕсли;
	ПолучениеОбновленийПрограммы.ЗаписатьНастройкиАвтоматическогоОбновления(
		НастройкиОбновления);
	
	// Запуск фонового задания для получения и установки дистрибутива
	// платформы.
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Версия", ИнформацияОДоступномОбновлении.Версия);
	Если НЕ СохранятьДистрибутивыПлатформыВКаталог Тогда
		ПараметрыЗадания.Вставить("КаталогХраненияДистрибутивов", Неопределено);
	Иначе
		ПараметрыЗадания.Вставить("КаталогХраненияДистрибутивов", КаталогСохранения);
	КонецЕсли;
	
	ПараметрыЗадания.Вставить("URLФайлаОбновления", URLФайлаОбновления);
	ПараметрыЗадания.Вставить("Логин"             , Логин);
	ПараметрыЗадания.Вставить("Пароль"            , Пароль);
	ПараметрыЗадания.Вставить("РежимУстановки"    , РежимУстановки);
	
	МассивПараметровЗадания = Новый Массив;
	МассивПараметровЗадания.Добавить(ПараметрыЗадания);
	Попытка
		Задание = ФоновыеЗадания.Выполнить(
			"ПолучениеОбновленийПрограммы.ЗагрузитьИУстановитьДистрибутивПлатформыВФоновомРежиме",
			МассивПараметровЗадания,
			,
			НСтр("ru='Получение и установка новой версии платформы';uk='Отримання та встановлення нової версії платформи'"));
	Исключение
		СообщениеЖурналаРегистрации =
			НСтр("ru='Ошибка запуска задания.';uk='Помилка запуску завдання.'") + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурналаРегистрации);
		
		ОтобразитьВнутреннююОшибку(НСтр("ru='Ошибка запуска задания.';uk='Помилка запуску завдання.'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			Неопределено,
			СообщениеЖурналаРегистрации);
		Возврат;
	КонецПопытки;
	
	ИДФоновогоЗадания = Задание.УникальныйИдентификатор;
	
	Элементы.ДекорацияПолучениеДистрибутива.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выполняется получение файла дистрибутива платформы (%1).';uk='Виконується отримання файла дистрибутиву платформи (%1).'") + " "
		+ НСтр("ru='Получение файла может занять от нескольких минут до нескольких часов в зависимости от размера обновления,';uk='Отримання файлу може зайняти від декількох хвилин до декількох годин в залежності від розміру оновлення,'") + " "
		+ НСтр("ru='скорости подключения к Интернету и производительности компьютера.';uk='швидкості підключення до Інтернету і продуктивності комп''ютера.'"),
		Элементы.НадписьРазмерОбновления.Заголовок);
	
	Элементы.КнопкаНазад.Доступность  = Ложь;
	Элементы.КнопкаДалее.Доступность  = Ложь;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаДалее.Заголовок  = НСтр("ru='Далее >';uk='Далі >'");
	Элементы.КнопкаОтмена.Заголовок = НСтр("ru='Отмена';uk='Відмінити'");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеЗадания()
	
	Завершено = Ложь;
	ОписательСостояния = СостояниеЗадания(ИДФоновогоЗадания);
	Если ОписательСостояния <> Неопределено Тогда
		
		КодОшибки = "";
		Если ОписательСостояния.Свойство("ДопПараметры")
			И ОписательСостояния.ДопПараметры <> Неопределено Тогда
			
			ДопПараметры = ОписательСостояния.ДопПараметры;
			Если ДопПараметры.Свойство("ПротоколУстановки") Тогда
				ПутьПротоколаУстановки = ДопПараметры.ПротоколУстановки;
			КонецЕсли;
			
			Если ДопПараметры.Свойство("КодВозврата") Тогда
				КодВозврата = ДопПараметры.КодВозврата;
			КонецЕсли;
			
			Если ДопПараметры.Свойство("КаталогУстановки") Тогда
				КаталогУстановки = ДопПараметры.КаталогУстановки;
			КонецЕсли;
			
			Если ДопПараметры.Свойство("КаталогДистрибутива") Тогда
				КаталогДистрибутива = ДопПараметры.КаталогДистрибутива;
			КонецЕсли;
			
			Если ДопПараметры.Свойство("КодОшибки") Тогда
				КодОшибки = ДопПараметры.КодОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		
		// Ошибка, Установка, УстановкаОтменена, Завершено
		Если ОписательСостояния.КодСостояния = "Ошибка" Тогда
			
			Завершено = Истина;
			СообщениеЖурналаРегистрации = Неопределено;
			ОписательСостояния.Свойство("СообщениеЖурналаРегистрации", СообщениеЖурналаРегистрации);
			
			Если ЭтоОшибкаСоединения(КодОшибки) Тогда
				ОтобразитьОшибкуПодключения(ОписательСостояния.Сообщение, СообщениеЖурналаРегистрации);
			Иначе
				Если РежимУстановки = 0
					И ПолучениеОбновленийПрограммыКлиентСервер.ЭтоКодВозвратаПриОграниченииСистемныхПолитик(
						КодВозврата) Тогда
					ОтобразитьВнутреннююОшибку(
						ОписательСостояния.Сообщение,
						НСтр("ru='Установить с ручными настройками >';uk='Встановити з ручними настройками >'"),
						СообщениеЖурналаРегистрации);
				Иначе
					ОтобразитьВнутреннююОшибку(
						ОписательСостояния.Сообщение,
						Неопределено,
						СообщениеЖурналаРегистрации);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ОписательСостояния.КодСостояния = "Установка" Тогда
			
			Если РежимУстановки = 0 Тогда
				Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаУстановкаТихий;
				Элементы.КнопкаОтмена.Доступность = Ложь;
			Иначе
				Элементы.СтраницыПолучениеУстановка.ТекущаяСтраница = Элементы.СтраницаУстановкаИнтерактивный;
			КонецЕсли;
			ПодключитьОбработчикОжидания("ОтобразитьСостояниеЗадания", 1.0, Истина);
			
		ИначеЕсли ОписательСостояния.КодСостояния = "УстановкаОтменена" Тогда
			
			Завершено = Истина;
			ОтобразитьИнформациюОДоступномОбновлении();
			
		ИначеЕсли ОписательСостояния.КодСостояния = "Завершено" Тогда
			
			Завершено = Истина;
			ОтобразитьУстановкаЗавершена();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Завершено Тогда
		ИДФоновогоЗадания = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Иначе
		ПодключитьОбработчикОжидания("ОтобразитьСостояниеЗадания", 1.0, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеЗадания(Знач ИДЗадания)
	
	Результат = Новый Структура("КодСостояния, Сообщение", "", "");
	
	Попытка
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИДЗадания);
	Исключение
		
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при обращении к заданию. %1';uk='Помилка при зверненні до завдання. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Результат.КодСостояния = "Ошибка";
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка при обращении к заданию. %1';uk='Помилка при зверненні до завдання. %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если Задание = Неопределено Тогда
		
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(НСтр("ru='Задание не найдено.';uk='Завдання не знайдено.'"));
		
		Результат.КодСостояния = "Ошибка";
		Результат.Сообщение    = НСтр("ru='Задание не найдено.';uk='Завдання не знайдено.'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Задание отменено администратором системы.';uk='Завдання скасовано адміністратором системи.'"));
		
		Результат.КодСостояния = "Ошибка";
		Результат.Сообщение = НСтр("ru='Задание отменено администратором системы.';uk='Завдання скасовано адміністратором системи.'");
		
		Возврат Результат;
		
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		
		ПолучениеОбновленийПрограммы.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Задание завершено с ошибкой. %1';uk='Завдання завершено з помилкою. %1'"),
				ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
		
		Результат.КодСостояния = "Ошибка";
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Задание завершено с ошибкой. %1';uk='Завдання завершено з помилкою. %1'"),
			КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ОписательСостояния = ДлительныеОперации.ПрочитатьПрогресс(ИДЗадания);
	Если ОписательСостояния <> Неопределено Тогда
		Результат.Сообщение = ОписательСостояния.Текст;
		Для каждого КлючЗначение Из ОписательСостояния.ДополнительныеПараметры Цикл
			Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИДЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИДЗадания);
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСоСтраницамиПомощника

&НаКлиенте
Процедура ОпределитьURLФайлаИПерейтиКУстановке()
	
	Если ПустаяСтрока(Логин)
		ИЛИ ПустаяСтрока(Пароль) Тогда
		ОтобразитьПодключениеКПорталу();
		Возврат;
	КонецЕсли;
	
	// Если URL файла не был получен ранее, тогда получить его
	Если ПустаяСтрока(URLФайлаОбновления) Тогда
		
		Состояние(, , НСтр("ru='Подключение к сервису Интернет-обновлений';uk='Підключення до сервісу Інтернет-оновлення'"));
		ОпределитьURLФайлаИПерейтиКУстановкеНаСервере();
		Состояние();
		
		Если НЕ ПустаяСтрока(URLФайлаОбновления) Тогда
			// Произошла успешная авторизация
			Если ИзмененЛогинПароль Тогда
				Если ОповещениеОбАвторизацииВСервисеОбновлений <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(
						ОповещениеОбАвторизацииВСервисеОбновлений,
						Новый Структура("Логин, Пароль",
							Логин,
							Пароль));
				КонецЕсли;
			КонецЕсли;
			ИзмененЛогинПароль = Ложь;
		КонецЕсли;
		
	Иначе
		
		ОпределитьURLФайлаИПерейтиКУстановкеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьURLФайлаИПерейтиКУстановкеНаСервере()
	
	Если ПустаяСтрока(URLФайлаОбновления) Тогда
		
		ОписательURL = ПолучениеОбновленийПрограммы.URLФайлаДистрибутиваОбновления(
			ИнформацияОДоступномОбновлении.ИДФайла,
			Логин,
			Пароль);
		
		Если ПустаяСтрока(ОписательURL.ИмяОшибки) Тогда
			URLФайлаОбновления = ОписательURL.URLФайла;
			
		Иначе
			Если ЭтоОшибкаСоединения(ОписательURL.ИмяОшибки) Тогда
				ОтобразитьОшибкуПодключения(ОписательURL.Сообщение, ОписательURL.ИнформацияОбОшибке);
				
			ИначеЕсли ОписательURL.ИмяОшибки = "LoginError" Тогда
				
				ОтобразитьПодключениеКПорталу(ОписательURL.Сообщение);
				
			Иначе
				ОтобразитьСообщениеСервиса(
					ОписательURL.Сообщение,
					НСтр("ru='Повторить попытку >';uk='Повторити спробу >'"),
					ОписательURL.ИнформацияОбОшибке);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		// Авторизация прошла успешно - сохранить логин и пароль при необходимости
		Если НЕ ПустаяСтрока(URLФайлаОбновления) И ИзмененЛогинПароль Тогда
			
			// Проверка права записи данных аутентификации
			Если Не ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП() Тогда
				ВызватьИсключение НСтр("ru='Недостаточно прав для записи данных аутентификации Интернет-поддержки.';uk='Недостатньо прав для запису даних аутентифікації Інтернет-підтримки.'");
			КонецЕсли;
			
			// Запись данных
			УстановитьПривилегированныйРежим(Истина);
			Если ЗапомнитьПароль Тогда
				ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(
					Новый Структура("Логин, Пароль", Логин, Пароль));
			Иначе
				ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтобразитьВыборКаталогаСохранения();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюОДоступномОбновлении(ОбновитьИнформацию = Ложь)
	
	Если ИнформацияОДоступномОбновлении = Неопределено ИЛИ ОбновитьИнформацию Тогда
		ИнформацияОДоступномОбновлении =
			ПолучениеОбновленийПрограммы.ИнформацияОДоступномОбновленииПлатформы(ВерсияКонфигурации);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
		Если ЭтоОшибкаСоединения(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
			ОтобразитьОшибкуПодключения(
				ИнформацияОДоступномОбновлении.Сообщение,
				ИнформацияОДоступномОбновлении.ИнформацияОбОшибке);
		Иначе
			ОтобразитьСообщениеСервиса(
				ИнформацияОДоступномОбновлении.Сообщение,
				НСтр("ru='Повторить попытку подключения >';uk='Повторити спробу підключення >'"),
				ИнформацияОДоступномОбновлении.ИнформацияОбОшибке);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЕстьОбновление = Истина;
	Если НЕ ЗначениеЗаполнено(ИнформацияОДоступномОбновлении.Версия) Тогда
		
		ЕстьОбновление = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНетНовойВерсии;
		Элементы.ДекорацияНетВерсии.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='<body>Используемая сейчас версия: %1</body>';uk='<body>Версія, яка використовується зараз: %1</body>'"),
					ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие()));
		
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
			ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие(),
			ИнформацияОДоступномОбновлении.Версия) >= 0 Тогда
		
		ЕстьОбновление = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНетНовойВерсии;
		Элементы.ДекорацияНетВерсии.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='<body>Рекомендуемая версия платформы: <b>%1</b>
                    |<br />Используемая сейчас версия: %2</body>'
                    |;uk='<body>Рекомендована версія платформи: <b>%1</b>
                    |<br />Використовувана зараз версія: %2</body>'"),
				ИнформацияОДоступномОбновлении.Версия,
				ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие()));
		
	КонецЕсли;
	
	Если НЕ ЕстьОбновление Тогда
		
		Элементы.КнопкаНазад.Доступность  = Ложь;
		Элементы.КнопкаДалее.Доступность  = Ложь;
		Элементы.КнопкаОтмена.Доступность = Истина;
		Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
		Элементы.КнопкаДалее.Заголовок    = НСтр("ru='Далее >';uk='Далі >'");
		Элементы.КнопкаОтмена.Заголовок   = НСтр("ru='Закрыть';uk='Закрити'");
		Возврат;
		
	Иначе
		
		КаталогУстановки = ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(
			ИнформацияОДоступномОбновлении.Версия);
		
		Установлена = (КаталогУстановки <> "");
		Если Установлена Тогда
			
			ОтобразитьСтраницуНоваяВерсияПлатформыУжеУстановленаНаКомпьютере();
			
		Иначе
			
			ОтобразитьСтраницуИнформацииОДоступномОбновлении();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтраницуИнформацииОДоступномОбновленииНаКлиенте()
	
	Если ИнформацияОДоступномОбновлении <> Неопределено
		И ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
		ОтобразитьИнформациюОДоступномОбновлении();
		Возврат;
	КонецЕсли;
	
	Если НЕ СценарийНерекомендуемаяВерсияПлатформы И НЕ ОбновитьИнформацию Тогда
		
		ШтампВремениИнформацииОбОбновлении = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
			"ШтампВремениИнформацииОбОбновлении",
			'00010101');
		Если (ОбщегоНазначенияКлиент.ДатаСеанса() - ШтампВремениИнформацииОбОбновлении) < 60 Тогда
			// Если информация о доступном обновлении была получена менее
			// минуты назад, тогда отобразить эту информацию об обновлении.
			ИнформацияОДоступномОбновлении = ПолучениеОбновленийПрограммыКлиент.ГлобальнаяИнформацияОДоступномОбновлении();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнформацияОДоступномОбновлении <> Неопределено Тогда
		ОтобразитьИнформациюОДоступномОбновлении();
	Иначе
		// Будет выполнен запрос к серверу обновлений
		// Информация об обновлении обновляется всегда
		Состояние(, , НСтр("ru='Получение информации о доступном обновлении';uk='Отримання інформації про доступне оновлення'"));
		ОтобразитьИнформациюОДоступномОбновлении();
		Состояние();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСтраницуИнформацииОДоступномОбновлении()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоступнаяВерсияПлатформы;
	Элементы.НадписьВерсия.Заголовок = НСтр("ru='Версия';uk='Версія'")
		+ " " + ИнформацияОДоступномОбновлении.Версия;
	Элементы.НадписьРазмерОбновления.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(
			ИнформацияОДоступномОбновлении.РазмерОбновления);
	Элементы.НадписьОсобенностиПерехода.Видимость =
		(ИнформацияОДоступномОбновлении.Свойство("URLОсобенностиПерехода")
		И НЕ ПустаяСтрока(ИнформацияОДоступномОбновлении.URLОсобенностиПерехода));
	
	Если Элементы.ГруппаИнформацияОбОбновлении.ОтображатьЗаголовок
		И ПустаяСтрока(Элементы.ГруппаИнформацияОбОбновлении.Заголовок) Тогда
		Элементы.ГруппаИнформацияОбОбновлении.Заголовок = ЗаголовокСтраницыНоваяВерсияПлатформы();
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = СценарийНерекомендуемаяВерсияПлатформы;
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru='Далее >';uk='Далі >'");
	Элементы.КнопкаОтмена.Заголовок   = НСтр("ru='Отмена';uk='Відмінити'");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьВыборКаталогаСохранения()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКаталогДистрибутивов;
	// Чтение настроек обновления
	НастройкиОбновления = ПолучениеОбновленийПрограммы.НастройкиАвтоматическогоОбновления();
	
	РежимУстановки = НастройкиОбновления.РежимУстановки;
	
	Если НастройкиОбновления.КаталогДистрибутивовПлатформы = Неопределено Тогда
		КаталогСохранения = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы()
			+ "setup\";
		СохранятьДистрибутивыПлатформыВКаталог = Ложь;
		Элементы.КаталогСохранения.Доступность = Ложь;
	Иначе
		КаталогСохранения = НастройкиОбновления.КаталогДистрибутивовПлатформы;
		Если ПустаяСтрока(КаталогСохранения) Тогда
			КаталогСохранения = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
		КонецЕсли;
		СохранятьДистрибутивыПлатформыВКаталог = Истина;
		Элементы.КаталогСохранения.Доступность = Истина;
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = Истина;
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru='Далее >';uk='Далі >'");
	Элементы.КнопкаОтмена.Заголовок   = НСтр("ru='Отмена';uk='Відмінити'");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьВнутреннююОшибку(СообщениеОбОшибке, ЗаголовокКнопкиДалее, ПодробноеОписаниеВнутрОшибки)
	
	ОтобразитьСообщениеСервиса(СообщениеОбОшибке, ЗаголовокКнопкиДалее, ПодробноеОписаниеВнутрОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПодключениеКПорталу(Сообщение = "")
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключениеКПорталу;
	Если ПустаяСтрока(Сообщение) Тогда
		Элементы.ПанельОшибкаПодключения.Видимость = Ложь;
	Иначе
		Элементы.ПанельОшибкаПодключения.Видимость = Истина;
		Элементы.ДекорацияСообщениеОбОшибкеПолученияОбновления.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(Сообщение);
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = Истина;
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru='Далее >';uk='Далі >'");
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСообщениеСервиса(Сообщение, ЗаголовокКнопкиДалее, ПодробноеОписаниеВнутрОшибки = "")
	
	ПодробноеОписаниеОшибки = ПодробноеОписаниеВнутрОшибки;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСообщениеСервиса;
	
	Если ВРег(Лев(Сообщение, 6)) <> "<BODY>" Тогда
		// Отобразить ссылку для перехода в журнал регистрации
		ПредставлениеHTML =
			ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьДомен(
				"<body>" + СтрЗаменить(Сообщение, Символы.ПС, "<br />")
				+ "<br />"
				+ "<br />" + НСтр("ru='Технические подробности см. в <a href=""open:log"" >журнале регистрации</a>.';uk='Технічні подробиці див. у <a href=""open:log"" >журналі реєстрації</a>.'")
				+ "<br /><br />" + НСтр("ru='При возникновении проблем напишите в <a href=""mailto:webits-info@bas-soft.eu"">техподдержку</a>.';uk='При виникненні проблем напишіть у <a href=""mailto:webits-info@bas-soft.eu"">техпідтримку</a>.'")
				+ "</body>");
		Элементы.ДекорацияСообщениеСервиса.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(ПредставлениеHTML);
	Иначе
		Элементы.ДекорацияСообщениеСервиса.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(Сообщение);
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки);
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаОтмена.Заголовок = НСтр("ru='Отмена';uk='Відмінити'");
	
	Если ЗаголовокКнопкиДалее = Неопределено Тогда
		Элементы.КнопкаДалее.Доступность  = Ложь;
		Элементы.КнопкаДалее.Заголовок  = НСтр("ru='Далее >';uk='Далі >'");
	Иначе
		Элементы.КнопкаДалее.Доступность  = Истина;
		Элементы.КнопкаДалее.Заголовок  = ЗаголовокКнопкиДалее;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкуПодключения(Сообщение, ОписаниеОшибкиПодключения)
	
	Элементы.Страницы.ТекущаяСтраница  = Элементы.СтраницаНеУдалосьПодключитьсяКСервису;
	
	ПодробноеОписаниеОшибки = ОписаниеОшибкиПодключения;
	Если ПустаяСтрока(Сообщение) Тогда
		Элементы.ДекорацияОшибкаПодключения.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияОшибкаПодключения.Видимость = Истина;
		Элементы.ДекорацияОшибкаПодключения.Заголовок = Сообщение;
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки);
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru='Повторить попытку подключения >';uk='Повторити спробу підключення >'");
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьУстановкаЗавершена()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУстановкаЗавершена;
	
	ШаблонЗаголовка = НСтр("ru='<body>Установлена версия: <b>%1</b>
        |<br />Дистрибутив платформы скопирован в каталог <a href=""open:DistribFolder"">%2</a></body>'
        |;uk='<body>Встановлена версія: <b>%1</b>
        |<br />Дистрибутив платформи скопійований у каталог <a href=""open:DistribFolder"">%2</a></body>'");
	
	Элементы.ДекорацияИнформацияУстановкаЗавершена.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка,
				ИнформацияОДоступномОбновлении.Версия,
				КаталогДистрибутива));
	
	Если ПустаяСтрока(Элементы.ДекорацияСтрЗавершеноСоздатьРК.Заголовок) Тогда
		Элементы.ДекорацияСтрЗавершеноСоздатьРК.Заголовок =
			ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(Элементы.ДекорацияСтрЗавершеноНеСоздаватьРК.Заголовок) Тогда
		Элементы.ДекорацияСтрЗавершеноНеСоздаватьРК.Заголовок =
			ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(Ложь);
	КонецЕсли;
	
	Если СоздатьРезервнуюКопию Тогда
		Элементы.СтраницыИнстрУстановкаЗавершена.ТекущаяСтраница = Элементы.СтрЗавершеноСоздатьРК;
	Иначе
		Элементы.СтраницыИнстрУстановкаЗавершена.ТекущаяСтраница = Элементы.СтрЗавершеноНеСоздаватьРК;
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = Истина;
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаДалее.Заголовок  = НСтр("ru='Готово';uk='Готово'");
	Элементы.КнопкаОтмена.Заголовок = НСтр("ru='Отмена';uk='Відмінити'");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСтраницуНоваяВерсияПлатформыУжеУстановленаНаКомпьютере()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПлатформаУжеУстановлена;
	
	Элементы.НадписьВерсияУстановлено.Заголовок =
		НСтр("ru='Версия';uk='Версія'") + " " + ИнформацияОДоступномОбновлении.Версия;
	
	Если ИнформацияОДоступномОбновлении.Свойство("URLОсобенностиПерехода")
		И НЕ ПустаяСтрока(ИнформацияОДоступномОбновлении.URLОсобенностиПерехода) Тогда
		
		Элементы.НадписьУстановленоДополнительно.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='<body>Версия платформы %1 уже установлена на компьютере.
                    |<br />Перед началом работы на новой версии платформы рекомендуется ознакомиться
                    |<br />с <a href=""open:V8Update"">особенностями перехода</a> на эту версию платформы.</body>'
                    |;uk='<body>Версія платформи %1 вже встановлена на комп''ютері.
                    |<br />Перед початком роботи на новій версії платформи рекомендується ознайомитися
                    |<br />з <a href=""open:V8Update"">особливостями переходу</a> на цю версію платформи.</body>'"),
				ИнформацияОДоступномОбновлении.Версия));
		
	Иначе
		
		Элементы.НадписьУстановленоДополнительно.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='<body>Версия платформы %1 уже установлена на компьютере.</body>';uk='<body>Версія платформи %1 вже встановлена на комп''ютері.</body>'"),
					ИнформацияОДоступномОбновлении.Версия));
		
	КонецЕсли;
	
	Если Элементы.ГруппаПлатформаУстановлена.ОтображатьЗаголовок
		И ПустаяСтрока(Элементы.ГруппаПлатформаУстановлена.Заголовок) Тогда
		Элементы.ГруппаПлатформаУстановлена.Заголовок = ЗаголовокСтраницыНоваяВерсияПлатформы();
	КонецЕсли;
	
	
	Если ПустаяСтрока(Элементы.ДекорацияСтрУстановленаСоздатьРК.Заголовок) Тогда
		Элементы.ДекорацияСтрУстановленаСоздатьРК.Заголовок =
			ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(Элементы.ДекорацияСтрУстановленаНеСоздаватьРК.Заголовок) Тогда
		Элементы.ДекорацияСтрУстановленаНеСоздаватьРК.Заголовок =
			ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(Ложь);
	КонецЕсли;
	
	Если СоздатьРезервнуюКопию Тогда
		Элементы.СтраницыИнстрУстановкаУстановлена.ТекущаяСтраница = Элементы.СтрУстановленаСоздатьРК;
	Иначе
		Элементы.СтраницыИнстрУстановкаУстановлена.ТекущаяСтраница = Элементы.СтрУстановленаНеСоздаватьРК;
	КонецЕсли;
	
	Элементы.КнопкаНазад.Доступность  = СценарийНерекомендуемаяВерсияПлатформы;
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = Ложь;
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru='Готово';uk='Готово'");
	Элементы.КнопкаОтмена.Заголовок   = НСтр("ru='Отмена';uk='Відмінити'");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНерекомендуемаяВерсияПлатформы()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНерекомендуемаяВерсияПлатформы;
	
	Элементы.КнопкаНазад.Доступность  = Ложь;
	Элементы.КнопкаДалее.Доступность  = Истина;
	Элементы.КнопкаОтмена.Доступность = Истина;
	Элементы.ПродолжитьРаботуНаТекущейВерсии.Видимость = НЕ ЗавершитьРаботу;
	
	Элементы.КнопкаДалее.Заголовок    = НСтр("ru='Обновить платформу >';uk='Оновити платформу >'");
	Элементы.КнопкаОтмена.Заголовок   = НСтр("ru='Завершить работу';uk='Завершити роботу'");
	
КонецПроцедуры

&НаСервере
Функция ТекстИнструкцииПоПереходуНаНовуюВерсиюПлатформы(ПараметрСоздатьРезервнуюКопию)
	
	Строки = Новый Массив;
	
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	ВнедренаПодсистемаРезервногоКопирования =
		ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ");
	
	Если ВнедренаПодсистемаРезервногоКопирования
		И ПараметрСоздатьРезервнуюКопию Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
			Строки.Добавить(
				НСтр("ru='<body>Будет автоматически завершена работа <a href=""open:ActiveUsers"">активных пользователей</a> программы, создана резервная копия';uk='<body>Буде автоматично завершена роботу <a href=""open:ActiveUsers"">активних користувачів</a> програми, створена резервна копія'"));
		Иначе
			Строки.Добавить(
				НСтр("ru='<body>Будет автоматически завершена работа активных пользователей программы, создана резервная копия';uk='<body>Буде автоматично завершено роботу активних користувачів програми, створена резервна копія'"));
		КонецЕсли;
		
		Если ЭтоБазоваяВерсияКонфигурации Тогда
			Строки.Добавить(НСтр("ru='информационной базы и запущен сеанс работы с программой на новой версии платформы.<body>';uk='інформаційної бази і запущений сеанс роботи з програмою на новій версії платформи.<body>'"));
		Иначе
			Строки.Добавить(НСтр("ru='информационной базы и запущен сеанс работы с программой на новой версии платформы.
                |<br />На компьютерах других пользователей программы необходимо обновить платформу вручную.</body>'
                |;uk='інформаційної бази і запущений сеанс роботи з програмою на новій версії платформи.
                |<br />На комп''ютерах інших користувачів програми необхідно оновити платформу вручну.</body>'"));
		КонецЕсли;
		
	Иначе
		
		Строки.Добавить(НСтр("ru='<body>Чтобы начать работать на новой версии платформы:';uk='<body>Щоб почати працювати на новій версії платформи:'"));
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
			Строки.Добавить(НСтр("ru='- завершите работу всех <a href=""open:ActiveUsers"">активных пользователей</a> программы;';uk='- завершіть роботу всіх <a href=""open:ActiveUsers"">активних користувачів</a> програми;'"));
		Иначе
			Строки.Добавить(НСтр("ru='- завершите работу всех активных пользователей программы;';uk='- завершіть роботу всіх активних користувачів програми;'"));
		КонецЕсли;
		
		Строки.Добавить(НСтр("ru='- завершите текущий сеанс работы с программой;';uk='- завершіть поточний сеанс роботи з програмою;'"));
		
		Если НЕ ЭтоБазоваяВерсияКонфигурации Тогда
			Строки.Добавить(НСтр("ru='- установите новую версию платформы на компьютеры других пользователей программы;';uk='- встановіть нову версію платформи на комп''ютери інших користувачів програми;'"));
		КонецЕсли;
		
		Строки.Добавить(НСтр("ru='- откройте программу на новой версии платформы;';uk='- відкрийте програму на новій версії платформи;'"));
		
		Если ВнедренаПодсистемаРезервногоКопирования Тогда
			Строки.Добавить(НСтр("ru='<br />Перед началом работы на новой версии платформы рекомендуется создать резервную копию.</body>';uk='<br />Перед початком роботи на новій версії платформи рекомендується створити резервну копію.</body>'"));
		Иначе
			Строки.Добавить(НСтр("ru='<br />Перед началом работы на новой версии платформы рекомендуется <a href=""open:RCInstruction"">создать резервную копию</a>.</body>';uk='<br />Перед початком роботи на новій версії платформи рекомендується <a href=""open:RCInstruction"">створити резервну копію</a>.</body>'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(СтрСоединить(Строки, Символы.ПС + "<br />"));
	
КонецФункции

&НаСервере
Функция ЗаголовокСтраницыНоваяВерсияПлатформы()
	
	Возврат ?(ИнформацияОДоступномОбновлении.РекомендуетсяПереход,
		НСтр("ru='Рекомендуется перейти на новую версию платформы';uk='Рекомендується перейти на нову версію платформи'"),
		НСтр("ru='Доступна новая версия платформы';uk='Доступна нова версія платформи'"));
	
КонецФункции

#КонецОбласти


#КонецОбласти
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	УстановитьВидимостьОпераций();
	
	ИспользоватьТиповыеСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьДоговорыСКлиентами                 = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ОтклонениеОтУсловийПродаж                      = ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КонтрагентПриИзмененииСервер();
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ЗначениеКопирования = Параметры.ЗначениеКопирования;
	СкидкиНаценкиСервер.ПриСозданииНаСервереИсточниковДействияСкидок(ЭтотОбъект,
	                                                                ?(ЗначениеКопирования.Пустая(), Объект.Ссылка, ЗначениеКопирования));
																	
	Элементы.Соглашение.Видимость				  = Не Объект.Типовое И ИспользоватьТиповыеСоглашенияСКлиентами 
													И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	Элементы.Соглашение.АвтоОтметкаНезаполненного = Не Объект.Типовое И ИспользоватьТиповыеСоглашенияСКлиентами 
													И ИспользоватьИндивидуальныеСоглашенияСКлиентами И НЕ ОтклонениеОтУсловийПродаж;
	
	Элементы.СегментПартнеров.Видимость = Объект.Типовое И ИспользоватьСоглашенияСКлиентами;
	Элементы.Партнер.Видимость 			= Не Объект.Типовое;
	Элементы.Контрагент.Видимость 		= Не Объект.Типовое И ИспользоватьСоглашенияСКлиентами;
	
	Элементы.Наименование.Видимость 		 = ИспользоватьСоглашенияСКлиентами;
	Элементы.ХозяйственнаяОперация.Видимость = ИспользоватьСоглашенияСКлиентами;
	Элементы.КонтактноеЛицо.Видимость 		 = ИспользоватьСоглашенияСКлиентами;
	Элементы.ГруппаПериодДействия.Видимость  = ИспользоватьСоглашенияСКлиентами;
	Элементы.СегментНоменклатуры.Видимость   = ИспользоватьСоглашенияСКлиентами;
	
	Элементы.Организация.Видимость 	  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.КонтактноеЛицо.Видимость = НЕ Объект.Типовое;
	
	ЗначениеПоложенияОтступаПорядкаРасчетов = ?(ИспользоватьДоговорыСКлиентами, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Авто);
	Элементы.ОтступПорядокРасчетов.Видимость = ИспользоватьДоговорыСКлиентами;
	Элементы.ПорядокРасчетов.ПоложениеЗаголовка = ЗначениеПоложенияОтступаПорядкаРасчетов; 
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																	"ГруппаРежимаРасчетаДатыВозврата",
																	"Видимость", 
																	ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару"),
																	Истина);
	
	Элементы.УстановитьСтатусДействует.Видимость = ПравоДоступа("Изменение", Метаданные.Справочники.СкидкиНаценки);
	Элементы.УстановитьСтатусНеДействует.Видимость = ПравоДоступа("Изменение", Метаданные.Справочники.СкидкиНаценки);
		
	// Заголовок документа
	
	Если Объект.Типовое Тогда
		
		Если ЗначениеЗаполнено(Объект.Номер) И ЗначениеЗаполнено(Объект.Дата) И ИспользоватьСоглашенияСКлиентами Тогда
			ТекстЗаголовка = НСтр("ru='Типовое соглашение об условиях продаж %Номер% от %Дата%';uk='Типова оферта, що містить умови продажів %Номер% від %Дата%'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Номер%", Объект.Номер);
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Дата%",  Объект.Дата);
		ИначеЕсли НЕ ИспользоватьСоглашенияСКлиентами Тогда
			ТекстЗаголовка = Объект.Наименование;
		Иначе
			ТекстЗаголовка = НСтр("ru='Типовое соглашение об условиях продаж';uk='Типова оферта, що містить умови продажів'");
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Номер) И ЗначениеЗаполнено(Объект.Дата) Тогда 
			ТекстЗаголовка = НСтр("ru='Индивидуальное соглашение об условиях продаж %Номер% от %Дата%';uk='Індивідуальна оферта, що містить умови продажів %Номер% від %Дата%'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Номер%", Объект.Номер);
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Дата%",  Объект.Дата);
		Иначе
			ТекстЗаголовка = НСтр("ru='Индивидуальное соглашение об условиях продаж';uk='Індивідуальна оферта, що містить  умови продажів'");
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка;
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	
	УстановитьЗаголовокФлагаДоступноВнешнимПользователям();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты,, Ложь);
	// Конец МенюОтчеты
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	УстановитьВидимостьКомандВводНаОсновани();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		ТребуетсяОткрытиеПечатнойФормы = Истина;
		Возврат;
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СкидкиНаценкиСервер.ПриЗаписиНаСервереИсточниковДействияСкидокНаценок(ТекущийОбъект, ЗначениеКопирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ДействиеСкидокНаценок" И Параметр.Источник.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		ОбновитьДеревоСкидок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		
		Отказ = Истина;
		СамообслуживаниеКлиент.ПечатьСоглашениеСКлиентом(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Ссылка, Объект.Дата, Истина,,,Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		Объект.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;

	ПриИзмененииСоглашенияСервер();
	
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
		Объект.Валюта,
		Объект.НалогообложениеНДС,
		Объект.ПорядокОплаты,
		Объект.ГруппаФинансовогоУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента) Тогда
		
		ПриИзмененииВалютыСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	Иначе
		
		ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
			Объект.Валюта,
			Объект.НалогообложениеНДС,
			Объект.ПорядокОплаты,
			Объект.ГруппаФинансовогоУчета);
		
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
	ЗаполнитьСписокВыбораПорядкаОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусДокумента = Объект.Статус;
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСКлиентами.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСКлиентами.Закрыто") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РегулярноеПриИзменении(Элемент)
	
	ПриИзмененииРегулярностиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	РассчитатьПериодДействияРегулярногоСоглашения();
	ОписаниеРегулярныхУсловий = ОписаниеРегулярныхУсловий(Объект.КоличествоПериодов, Объект.Период, Объект.СуммаДокумента, ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	РассчитатьПериодДействияРегулярногоСоглашения();
	ОписаниеРегулярныхУсловий = ОписаниеРегулярныхУсловий(Объект.КоличествоПериодов, Объект.Период, Объект.СуммаДокумента, ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ОписаниеРегулярныхУсловий = ОписаниеРегулярныхУсловий(Объект.КоличествоПериодов, Объект.Период, Объект.СуммаДокумента, ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаВознагражденияПриИзмененииСервер()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПроцентВознаграждения");
	МассивЭлементов.Добавить("УдержатьВознаграждение");
	
	Если Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Или
		Не ЗначениеЗаполнено(Объект.СпособРасчетаВознаграждения) Тогда
		Объект.ПроцентВознаграждения  = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.ПроцентВознаграждения.ЗначениеЗаполнения;
		Объект.УдержатьВознаграждение = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.УдержатьВознаграждение.ЗначениеЗаполнения;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияПриИзменении(Элемент)
	
	СпособРасчетаВознагражденияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		РассчитатьПериодДействияРегулярногоСоглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОплатыПриИзменении(Элемент)
	
	ЗаполнитьГруппуФинансовогоУчета(Объект.ПорядокОплаты, Объект.ГруппаФинансовогоУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаФинансовогоУчетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		ЗаполнитьПорядокОплаты(Объект.ГруппаФинансовогоУчета, Объект.ПорядокОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяДоговорыКонтрагентовПриИзменении(Элемент)
	
	Объект.ИспользуютсяДоговорыКонтрагентов = Булево(ИспользуютсяДоговорыКонтрагентов);
	
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьРучныеСкидкиПриИзменении(Элемент)
	
	ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращатьМногооборотнуюТаруПриИзменении(Элемент)
	
	Если Не Объект.ВозвращатьМногооборотнуюТару Тогда
		Объект.ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступноВнешнимПользователямПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовПланыПродаж(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПланированияПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовПланыПродаж(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВидЦеныПрайсЛистПриИзменении(Элемент)
	
	Если ИспользованиеПрайсЛиста = 1 Тогда
		Объект.ВидЦен = ВидЦенПрайсЛист;
	Иначе
		Объект.ВидЦен = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	Если Не ИспользоватьНесколькоВидовЦен Тогда
		УстановитьДоступностьИспользованияПрайсЛиста();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияСкидокПриИзменении(Элемент)
	
	ОбновитьДеревоСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСрезаПриИзменении(Элемент)
	
	ОбновитьДеревоСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьРасходныеОрдераПоРаспоряжениямПриИзменении(Элемент)
	Объект.РазбиватьРасходныеОрдераПоРаспоряжениям = Булево(РазбиватьРасходныеОрдераПоРаспоряжениямЧисло);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""';uk='Для редагування ціни виберіть вид ціни ""<довільна>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	Элементы.Товары.ТекущиеДанные.Цена = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиСкидкиНаценки

&НаКлиенте
Процедура СкидкиНаценкиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкиНаценкиПередРазворачиванием(Элемент, Строка, Отказ)
	
	СкидкиНаценкиКлиент.СохранитьПризнакРазвернутостиУзлаДереваВСписке(Строка, Элементы.СкидкиНаценки, РазвернутыеУзлыДерева, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкиНаценкиПередСворачиванием(Элемент, Строка, Отказ)
	
	СкидкиНаценкиКлиент.СохранитьПризнакРазвернутостиУзлаДереваВСписке(Строка, Элементы.СкидкиНаценки, РазвернутыеУзлыДерева, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОДействииСкидокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "НастроитьСкидки" Тогда
			
			ОткрытьФорму("Справочник.СкидкиНаценки.ФормаСписка", ,ЭтотОбъект);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура УстановитьИнтервалВыполнить(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачалаДействия", "ДатаОкончанияДействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦенВыделенныхСтрокТовары(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='В документе не заполнена таблица Товары. Вид цен не может быть заполнен';uk='В документі не заповнена таблиця Товари. Вид цін не може бути заповнений'"));
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ПродажиКлиент.ВыбратьВидЦен(
		Новый ОписаниеОповещения("ЗаполнитьВидЦенВыделенныхСтрокТоварыЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Объект.ЦенаВключаетНДС,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦенВыделенныхСтрокТоварыЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЗаполнитьВидЦенВыделенныхСтрокТоварыСервер(ВидЦен);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Вид цен заполнен';uk='Вид цін заповнений'"),
			,
			СтрЗаменить(НСтр("ru='Вид цен ""%ВидЦен%"" в таблице Товары заполнен.';uk='Вид цін ""%ВидЦен%"" в таблиці Товари заповнений.'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппы(Команда)
	
	Если Объект.ЦеновыеГруппы.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='В документе не заполнена таблица Ценовые группы. Вид цен не может быть заполнен';uk='В документі не заповнена таблиця Цінові групи. Вид цін не може бути заповнений'"));
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ПродажиКлиент.ВыбратьВидЦен(
		Новый ОписаниеОповещения("ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппыЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Объект.ЦенаВключаетНДС,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппыЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппыСервер(ВидЦен);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Вид цен заполнен';uk='Вид цін заповнений'"),
			,
			СтрЗаменить(НСтр("ru='Вид цен ""%ВидЦен%"" в таблице Ценовые группы заполнен.';uk='Вид цін ""%ВидЦен%"" таблиці Цінові групи заповнений.'"),"%ВидЦен%",ВидЦен),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	АдресВоВременномХранилище = Неопределено;

	ОткрытьФорму("Обработка.ПодборТоваровПоОтбору.Форма.Форма", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ДобавитьТоварыПоОтборуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтборуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресВоВременномХранилище = Результат;
    Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
        ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьОплатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФормаОплаты",                  Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("ДоступноВнешнимПользователям", Объект.ДоступноВнешнимПользователям);
	ПараметрыФормы.Вставить("Календарь",                    Объект.Календарь);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация",        Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("ТребуетсяЗалогЗаТару",         Объект.ВозвращатьМногооборотнуюТару И Объект.ТребуетсяЗалогЗаТару);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",      УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище",    ПоместитьВоВременноеХранилищеНаСервере());
	ПараметрыОплаты = Неопределено;

	ОткрытьФорму("Справочник.СоглашенияСКлиентами.Форма.ФормаОплаты", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НадписьОплатаНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОплатаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыОплаты = Результат;
    
    Если ПараметрыОплаты <> Неопределено Тогда
        
        Модифицированность = Истина;
        Объект.Согласован  = Ложь;
        Объект.ФормаОплаты = ПараметрыОплаты.ФормаОплаты;
        Объект.Календарь   = ПараметрыОплаты.Календарь;
        Объект.ЭтапыГрафикаОплаты.Очистить();
        Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
            ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
        КонецЕсли;
        НадписьОплата = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатаДляСоглашений(ЭтаФорма);
        УстановитьДоступностьЭлементовПоСтатусуСервер();
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьДатуВозвратаТарыПоКалендарюПриИзменении(Элемент)
	Объект.РассчитыватьДатуВозвратаТарыПоКалендарю = Булево(РассчитыватьДатуВозвратаТарыПоКалендарю);
	
	Элементы.КалендарьВозвратаТары.Доступность = Объект.РассчитыватьДатуВозвратаТарыПоКалендарю И Объект.ВозвращатьМногооборотнуюТару;
	Элементы.КалендарьВозвратаТары.АвтоОтметкаНезаполненного = Объект.РассчитыватьДатуВозвратаТарыПоКалендарю;
	
	Если Объект.РассчитыватьДатуВозвратаТарыПоКалендарю Тогда
		ЗаполнитьПроизводственныйКалендарьНаСервере();
	Иначе
		Объект.КалендарьВозвратаТары = ПредопределенноеЗначение("Справочник.ПроизводственныеКалендари.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ИсторияДействияСкидкиНаценки(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуИсторииИзмененияСтатуса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусДействует(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуУстановкиСтатуса(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.СтатусыДействияСкидок.Действует"),
		Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеДействует(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуУстановкиСтатуса(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.СтатусыДействияСкидок.НеДействует"),
		Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачалаДействия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачалаДействия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачалаДействия.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачалаДействия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СуммаСоглашения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СуммаДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СуммаСоглашения.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СуммаДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоПериодов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КоличествоПериодов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоПериодов.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КоличествоПериодов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Период.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Период");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Период.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Регулярное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Период");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Организация.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоступноВнешнимПользователям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Организация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоступноВнешнимПользователям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидЦен.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоступноВнешнимПользователям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидЦен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидЦен.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоступноВнешнимПользователям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидЦен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикОплаты.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоступноВнешнимПользователям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГрафикОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикОплаты.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоступноВнешнимПользователям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГрафикОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk='<Не використовується>'"));

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦеновыеГруппыВидЦен.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОграничиватьРучныеСкидки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформлениеФормыИсточникаДействияСкидок(УсловноеОформление, Элементы);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Соглашение = Объект.Соглашение;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
	КонтрагентПриИзмененииСервер();
	УстановитьНалогообложениеНДСПоУмолчанию();
	ЗаполнитьСписокВыбораПорядкаОплаты();
	
	Если Соглашение <> Объект.Соглашение Тогда
		ПриИзмененииСоглашенияСервер(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер(ЗаполнитьУсловияПродаж = Истина)
	
	Если ЗаполнитьУсловияПродаж Тогда
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		СправочникОбъект.ЗаполнитьУсловияПродажПоCоглашению();
		ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	КонецЕсли;
	
	УстановитьНалогообложениеНДСПоУмолчанию();
	ЗаполнитьСписокВыбораПорядкаОплаты();
	
	РассчитыватьДатуВозвратаТарыПоКалендарю = Число(Объект.РассчитыватьДатуВозвратаТарыПоКалендарю);
	ИспользуютсяДоговорыКонтрагентов = Число(Объект.ИспользуютсяДоговорыКонтрагентов);
	
	УстановитьВидимостьЭлементовПоРегулярностиСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(ЭтаФорма);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	Если Не ИспользоватьНесколькоВидовЦен Тогда
		ИспользованиеПрайсЛиста = ?(ЗначениеЗаполнено(Объект.ВидЦен), 1, 0);
		УстановитьДоступностьИспользованияПрайсЛиста();
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
	НадписьОплата = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатаДляСоглашений(ЭтаФорма);
	НастроитьЭлементыДоговорыКонтрагентовИПорядокРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	УстановитьНалогообложениеНДСПоУмолчанию();
	ЗаполнитьСписокВыбораПорядкаОплаты();
	УстановитьДоступностьРеквизитУдержатьВознаграждение();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)

	СтараяВалюта = ВалютаДокумента;
	
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	Ценообразование.ПересчитатьСуммыВВалютуТовары(
		Объект,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Ложь);
	
	ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
		Объект.Валюта,
		Объект.НалогообложениеНДС,
		Объект.ПорядокОплаты,
		Объект.ГруппаФинансовогоУчета);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРегулярностиСервер()

	Если Объект.Регулярное Тогда
		
		Объект.Период             = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.Период.ЗначениеЗаполнения;
		Объект.КоличествоПериодов = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.КоличествоПериодов.ЗначениеЗаполнения;
		Объект.СуммаДокумента     = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.СуммаДокумента.ЗначениеЗаполнения;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоРегулярностиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ГрафикиОплаты.ТолькоКредитныеЭтапы КАК ТолькоКредитныеЭтапы
				|ИЗ
				|	Справочник.ГрафикиОплаты КАК ГрафикиОплаты
				|ГДЕ
				|	ГрафикиОплаты.Ссылка = &ГрафикОплаты
				|");
				
			Запрос.УстановитьПараметр("ГрафикОплаты", Объект.ГрафикОплаты);
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Не Выборка.ТолькоКредитныеЭтапы Тогда
				Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаОплаты Из Объект.ЭтапыГрафикаОплаты Цикл
			Если СтрокаОплаты.ВариантОплаты <> Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОплаты);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			Объект.ЭтапыГрафикаОплаты.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		КоличествоЭтапов = Объект.ЭтапыГрафикаОплаты.Количество();
		Если КоличествоЭтапов =1 Тогда
			Объект.ЭтапыГрафикаОплаты[0].ПроцентПлатежа = 100;
		ИначеЕсли КоличествоЭтапов = 0 И Не ЗначениеЗаполнено(Объект.ГрафикОплаты)
				И ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах") Тогда
			СтрокаЭтапа = Объект.ЭтапыГрафикаОплаты.Добавить();
			СтрокаЭтапа.ВариантОплаты  = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
			СтрокаЭтапа.ПроцентПлатежа = 100;
		КонецЕсли;
		
		Объект.ОграничиватьРучныеСкидки = Ложь;
		Объект.ТребуетсяЗалогЗаТару = Ложь;
		Объект.ПроцентРучнойСкидки  = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.ПроцентРучнойСкидки.ЗначениеЗаполнения;
		Объект.ПроцентРучнойНаценки = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.ПроцентРучнойНаценки.ЗначениеЗаполнения;
		
		
		НадписьОплата = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатаДляСоглашений(ЭтаФорма);
		
	Иначе
		
		Объект.СпособРасчетаВознаграждения = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.СпособРасчетаВознаграждения.ЗначениеЗаполнения;
		Объект.ПроцентВознаграждения       = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.ПроцентВознаграждения.ЗначениеЗаполнения;
		Объект.УдержатьВознаграждение      = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.УдержатьВознаграждение.ЗначениеЗаполнения;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры


&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если Объект.Контрагент.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Объект.ПорядокОплаты 		= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах;
	Иначе	
		Объект.ПорядокОплаты 		= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		Если Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Объект.Валюта = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовПланыПродаж(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементыФормы.ВидПлана.Доступность = ЗначениеЗаполнено(Форма.Объект.СценарийПланирования);
	
	Если Форма.Объект.ДоступноВнешнимПользователям Тогда
		ЭлементыФормы.СтраницыПланыЗакупок.ТекущаяСтраница = ЭлементыФормы.СтраницаПланыЗакупокВидимы;
	Иначе
		ЭлементыФормы.СтраницыПланыЗакупок.ТекущаяСтраница = ЭлементыФормы.СтраницаПланыЗакупокНевидимы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	СтатусДокумента = Объект.Статус;
	РассчитыватьДатуВозвратаТарыПоКалендарю = Число(Объект.РассчитыватьДатуВозвратаТарыПоКалендарю);
	РазбиватьРасходныеОрдераПоРаспоряжениямЧисло = Число(Объект.РазбиватьРасходныеОрдераПоРаспоряжениям);
	
	ИспользоватьЗаказыКлиентов        = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьСоглашенияСКлиентами  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьНесколькоВидовЦен     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	
	УстановитьВидимостьЭлементовПоРегулярностиСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьКоманд();
	
	УстановитьНалогообложениеНДСПоУмолчанию(Истина);
	ЗаполнитьСписокВыбораПорядкаОплаты();
	
	УстановитьДоступностьРеквизитУдержатьВознаграждение(Ложь);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
	ИспользуютсяДоговорыКонтрагентов = Число(Объект.ИспользуютсяДоговорыКонтрагентов);
	НадписьОплата = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатаДляСоглашений(ЭтаФорма);
	
	ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(ЭтаФорма);
	
	ВидимостьЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Количество() > 0 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьОплата", "Видимость", ВидимостьЭтаповОплаты);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГрафикОплаты", "Видимость", Не ВидимостьЭтаповОплаты);
	
	НастроитьЭлементыДоговорыКонтрагентовИПорядокРасчетов();
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ОбновитьДоступностьЭлементовПланыПродаж(ЭтаФорма);
	
	Если Не ИспользоватьНесколькоВидовЦен Тогда
		ВидЦенПрайсЛист = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(Неопределено);;
		ИспользованиеПрайсЛиста = ?(ЗначениеЗаполнено(Объект.ВидЦен), 1, 0);
		Элементы.ИспользованиеПрайсЛиста.Доступность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦенПрайсЛист, "ЦенаВключаетНДС") = Объект.ЦенаВключаетНДС;
	КонецЕсли;
	Элементы.ИспользованиеПрайсЛиста.Видимость = Не ИспользоватьНесколькоВидовЦен;
	Элементы.ВидЦен.Видимость = ИспользоватьНесколькоВидовЦен;
	
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Закрыто Или
		Объект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("СегментПартнеров");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Регулярное");
	МассивЭлементов.Добавить("Период");
	МассивЭлементов.Добавить("КоличествоПериодов");
	МассивЭлементов.Добавить("СуммаСоглашения");
	МассивЭлементов.Добавить("ДатаНачалаДействия");
	МассивЭлементов.Добавить("ДатаОкончанияДействия");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("ВидЦен");
	МассивЭлементов.Добавить("НалогообложениеНДСПоУмолчанию");
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ПорядокОплаты");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("СрокПоставки");
	МассивЭлементов.Добавить("СегментНоменклатуры");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентРучнойНаценки");
	МассивЭлементов.Добавить("ОграничиватьРучныеСкидки");
	МассивЭлементов.Добавить("ЦеновыеГруппы");
	МассивЭлементов.Добавить("Товары");
	МассивЭлементов.Добавить("ДоступноВнешнимПользователям");
	МассивЭлементов.Добавить("ИспользуютсяДоговорыКонтрагентов");
	МассивЭлементов.Добавить("ПорядокРасчетов");
	МассивЭлементов.Добавить("ИспользуетсяВРаботеТорговыхПредставителей");
	МассивЭлементов.Добавить("ВозвращатьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("ЦеновыеГруппыЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппы");
	МассивЭлементов.Добавить("ТоварыЗаполнитьВидЦенВыделенныхСтрокТовары");
	МассивЭлементов.Добавить("ТоварыДобавитьТоварыПоОтбору");
	
	МассивЭлементов.Добавить("ВыводитьИнформациюОбОбъектеРасчетовПриПечатиДокументов");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИспользованияПрайсЛиста()
	
	ПризнакНДСПрайсЛиста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦенПрайсЛист, "ЦенаВключаетНДС");
	Элементы.ИспользованиеПрайсЛиста.Доступность = (ПризнакНДСПрайсЛиста = Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоРегулярностиСервер()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Период");
	МассивЭлементов.Добавить("КоличествоПериодов");
	МассивЭлементов.Добавить("ОписаниеРегулярныхУсловий");
	МассивЭлементов.Добавить("СуммаСоглашения");
	МассивЭлементов.Добавить("СуммаСоглашенияВалюта");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Объект.Регулярное);
	
	Если Объект.Регулярное Тогда
		ОписаниеРегулярныхУсловий = ОписаниеРегулярныхУсловий(Объект.КоличествоПериодов, Объект.Период, Объект.СуммаДокумента, ВалютаДокумента);
	Иначе
		ОписаниеРегулярныхУсловий = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Справочники.СоглашенияСКлиентами.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТолькоКредитныеЭтапы", Истина));
	КонецЕсли;
	Элементы.ГрафикОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СпособРасчетаВознаграждения");
	МассивЭлементов.Добавить("ПроцентВознаграждение");
	МассивЭлементов.Добавить("УдержатьВознаграждение");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Истина);
		СпособРасчетаВознагражденияПриИзмененииСервер();
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
	КонецЕсли;
	
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура, Истина);
	
	
	ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКоманд()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ФормаСкопировать");
	МассивЭлементов.Добавить("ФормаУдалить");
	МассивЭлементов.Добавить("ФормаУстановитьПометкуУдаления");
	МассивЭлементов.Добавить("ФормаГруппаКнопок");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидЦенВыделенныхСтрокТоварыСервер(ВидЦен)

	Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ВидЦены = ВидЦен;
		Если СтрокаТаблицы.Цена <> 0 Тогда
			СтрокаТаблицы.Цена = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ТекСтрока.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ТекСтрока.Характеристика);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора); 
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппыСервер(ВидЦен)

	Для Каждого ТекущаяСтрока Из Элементы.ЦеновыеГруппы.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ЦеновыеГруппы.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ВидЦен = ВидЦен;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(Валюта, НалогообложениеНДС, ПорядокОплаты, ГруппаФинансовогоУчета)
	
	ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта, НалогообложениеНДС);
	ЗаполнитьГруппуФинансовогоУчета(ПорядокОплаты, ГруппаФинансовогоУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьГруппуФинансовогоУчета(ПорядокОплаты, ГруппаФинансовогоУчета)
	
	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПорядокОплаты(ГруппаФинансовогоУчета, ПорядокОплаты)
	
	ПорядокОплаты = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьРеквизитыГруппыФинансовогоУчета(ГруппаФинансовогоУчета).ПорядокОплаты;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеРегулярныхУсловий(КоличествоПериодов, Период, СуммаДокумента, ВалютаДокумента)
	
	// Проверка на заполненность реквизитов
	Если КоличествоПериодов = 0 Или Период = ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка") Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеПериодов = Новый Соответствие;
	
	ПредставлениеКоличестваПериодов = "";
	ОстатокОтДеления10              = КоличествоПериодов % 10;
	ОстатокОтДеления100             = КоличествоПериодов % 100;
	ПериодСтрокой                   = Строка(Период);
	
	СоответствиеПериодов.Вставить("День",      НСтр("ru='каждый день';uk='кожен день'"));
	СоответствиеПериодов.Вставить("Неделя",    НСтр("ru='каждую неделю';uk='кожен тиждень'"));
	СоответствиеПериодов.Вставить("Декада",    НСтр("ru='каждую декаду';uk='кожну декаду'"));
	СоответствиеПериодов.Вставить("Месяц",     НСтр("ru='каждый месяц';uk='кожен місяць'"));
	СоответствиеПериодов.Вставить("Квартал",   НСтр("ru='каждый квартал';uk='кожен квартал'"));
	СоответствиеПериодов.Вставить("Полугодие", НСтр("ru='каждое полугодие';uk='кожне півріччя'"));
	СоответствиеПериодов.Вставить("Год",       НСтр("ru='каждый год';uk='кожен рік'"));
	
	Если ОстатокОтДеления10 = 1 
		И КоличествоПериодов <> 11 
		И ОстатокОтДеления100 <> 11 Тогда
		
		ПредставлениеКоличестваПериодов = Строка(КоличествоПериодов) + НСтр("ru=' периода.';uk=' періоду.'");
		
	Иначе
		
		ПредставлениеКоличестваПериодов = Строка(КоличествоПериодов) + НСтр("ru=' периодов.';uk=' періодів.'");
		
	КонецЕсли;
	
	ОписаниеРегулярныхУсловий = НСтр("ru='Поставки товаров должны осуществляться %ПериодСтрокой% на сумму %СуммаДокумента% %ВалютаДокумента% в течение %ПредставлениеКоличестваПериодов%';uk='Поставки товарів повинні здійснюватися %ПериодСтрокой% на суму %СуммаДокумента% %ВалютаДокумента% протягом %ПредставлениеКоличестваПериодов%'");
	ОписаниеРегулярныхУсловий = СтрЗаменить(ОписаниеРегулярныхУсловий, "%ПредставлениеКоличестваПериодов%", ПредставлениеКоличестваПериодов);
	ОписаниеРегулярныхУсловий = СтрЗаменить(ОписаниеРегулярныхУсловий, "%ПериодСтрокой%",                   СоответствиеПериодов.Получить(ПериодСтрокой));
	ОписаниеРегулярныхУсловий = СтрЗаменить(ОписаниеРегулярныхУсловий, "%СуммаДокумента%",                  СуммаДокумента);
	ОписаниеРегулярныхУсловий = СтрЗаменить(ОписаниеРегулярныхУсловий, "%ВалютаДокумента%",                 ВалютаДокумента);
	
	Возврат ОписаниеРегулярныхУсловий;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьПериодДействияРегулярногоСоглашения()
	
	Если Объект.Регулярное И ЗначениеЗаполнено (Объект.Период) И
		ЗначениеЗаполнено (Объект.КоличествоПериодов) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаДействия) И ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.ДатаНачалаДействия = Объект.Дата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		
			ДатаНачалаБлижайшегоПериода  = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуНачалаБлижайшегоПериода(Объект.ДатаНачалаДействия, Объект.Период);
			Объект.ДатаОкончанияДействия = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачалаБлижайшегоПериода, Объект.Период, Объект.КоличествоПериодов);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(Форма)
	
	ОграничиватьРучныеСкидки = Форма.Объект.ОграничиватьРучныеСкидки И Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	
	Форма.Элементы.ПроцентРучнойСкидки.Видимость  = ОграничиватьРучныеСкидки;
	Форма.Элементы.ПроцентРучнойНаценки.Видимость = ОграничиватьРучныеСкидки;
	Форма.Элементы.ЦеновыеГруппыПроцентРучнойСкидки.Видимость = ОграничиватьРучныеСкидки;
	Форма.Элементы.ЦеновыеГруппыПроцентРучнойНаценки.Видимость = ОграничиватьРучныеСкидки;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		
		Объект.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДоговорыКонтрагентовИПорядокРасчетов()
	
 	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		ВидимостьПорядкаРасчетов   = Ложь;
		ДоступностьПорядкаРасчетов = Ложь;
		ТекстИспользуютсяДоговорыКонтрагентов = НСтр("ru='Договоры не используются, порядок расчетов по отчетам по комиссии';uk='Договори не використовуються, порядок розрахунків за звітами по комісії'");
	ИначеЕсли НЕ ИспользоватьЗаказыКлиентов Тогда
		ВидимостьПорядкаРасчетов   = Ложь;
		ДоступностьПорядкаРасчетов = Ложь;
		ТекстИспользуютсяДоговорыКонтрагентов = НСтр("ru='Договоры не используются, порядок расчетов по накладным';uk='Договори не використовуються, порядок розрахунків за накладними'");
	ИначеЕсли Объект.ИспользуютсяДоговорыКонтрагентов Тогда
		ВидимостьПорядкаРасчетов   = Истина;
		ДоступностьПорядкаРасчетов = Ложь;
		ТекстИспользуютсяДоговорыКонтрагентов = НСтр("ru='Договоры не используются, порядок расчетов:';uk='Договори не використовуються, порядок розрахунків:'");
	Иначе
		ВидимостьПорядкаРасчетов   = Истина;
		ДоступностьПорядкаРасчетов = Истина;
		ТекстИспользуютсяДоговорыКонтрагентов = НСтр("ru='Договоры не используются, порядок расчетов:';uk='Договори не використовуються, порядок розрахунків:'");
	КонецЕсли;
	
	Элементы.ГруппаПорядокРасчетов.Видимость = ВидимостьПорядкаРасчетов;
	Элементы.ПорядокРасчетов.Доступность     = ДоступностьПорядкаРасчетов;
	
	Элементы.НеИспользуютсяДоговорыКонтрагентов.СписокВыбора.Очистить();
	Элементы.НеИспользуютсяДоговорыКонтрагентов.СписокВыбора.Добавить(0, ТекстИспользуютсяДоговорыКонтрагентов);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокРасчетов()
	
	Если ИспользоватьДоговорыСКлиентами И Объект.ИспользуютсяДоговорыКонтрагентов Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	ИначеЕсли НЕ ИспользоватьЗаказыКлиентов Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	КонецЕсли;
	НастроитьЭлементыДоговорыКонтрагентовИПорядокРасчетов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроизводственныйКалендарьНаСервере()
	
	КалендарныеГрафики.ЗаполнитьПроизводственныйКалендарьВФорме(ЭтаФорма, "Объект.КалендарьВозвратаТары");
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоСкидкиНаценки()
	
	СкидкиНаценкиСервер.ПостроитьДеревоСкидкиНаценкиВФорме(
	                                            ЭтотОбъект,
	                                            ?(ЗначениеКопирования.Пустая(),Объект.Ссылка, ЗначениеКопирования));
	ИнформацияОКоличествеСкидок = СкидкиНаценкиСервер.ИнформацияОКоличествеСкидок(
	                                            ?(ЗначениеКопирования.Пустая(),Объект.Ссылка, ЗначениеКопирования),
	                                            ДатаСреза);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьКомандВводНаОсновани()
	
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Документ.АктВыполненныхРабот", 				Не Объект.Типовое);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Документ.ЗаказКлиента", 					Не Объект.Типовое);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Документ.ЗаявкаНаВозвратТоваровОтКлиента", 	Не Объект.Типовое);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Документ.КоммерческоеПредложениеКлиенту", 	Не Объект.Типовое);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Документ.РеализацияТоваровУслуг", 			Не Объект.Типовое);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Справочник.ДоговорыКонтрагентов", 			Не Объект.Типовое);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНалогообложениеНДСПоУмолчанию(ПриОткрытииФормы = Ложь)
	
	НалогообложениеНДСПоУмолчаниюИзменено = Ложь;
	ДоступностьНалогообложенияНДСПоУмолчанию = Истина;
	
	НовоеНалогообложениеНДСПоУмолчанию       = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(Объект.Организация, Объект.Контрагент, Неопределено, Объект.Дата, Истина, Неопределено);
	ДоступностьНалогообложенияНДСПоУмолчанию = НДСОбщегоНазначенияСервер.ДоступностьНалогообложенияНДС(Объект.Организация, Объект.Дата);
	Если Объект.НалогообложениеНДС <> НовоеНалогообложениеНДСПоУмолчанию И (НЕ ПриОткрытииФормы) Тогда
		Объект.НалогообложениеНДС = НовоеНалогообложениеНДСПоУмолчанию;
		НалогообложениеНДСПоУмолчаниюИзменено = Истина;
	КонецЕсли;
	
	Если НалогообложениеНДСПоУмолчаниюИзменено Тогда
		ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
			Объект.Валюта,
			Объект.НалогообложениеНДС,
			Объект.ПорядокОплаты,
			Объект.ГруппаФинансовогоУчета);
	КонецЕсли; 
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДСПоУмолчанию", "Доступность", ДоступностьНалогообложенияНДСПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПорядкаОплаты()
	
	Если Объект.Организация = Справочники.Организации.УправленческаяОрганизация Тогда

		Если Элементы.ПорядокОплаты.СписокВыбора.НайтиПоЗначению(Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах) = Неопределено Тогда
			Элементы.ПорядокОплаты.СписокВыбора.Добавить(Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах);
		КонецЕсли;
		
	Иначе
		
		Если Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах Тогда
			Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		КонецЕсли;
		
		ЭлементСписка = Элементы.ПорядокОплаты.СписокВыбора.НайтиПоЗначению(Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах);
		
		Если НЕ (ЭлементСписка = Неопределено) Тогда
			Элементы.ПорядокОплаты.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитУдержатьВознаграждение(ЗаполнятьУдержатьВознаграждение = Истина)
	
	Если НДСОбщегоНазначенияПовтИсп.ОрганизацияПлательщикНДС(Объект.Организация, ТекущаяДата()) Тогда
		Элементы.УдержатьВознаграждение.Доступность = Ложь;
		Если ЗаполнятьУдержатьВознаграждение И Объект.УдержатьВознаграждение Тогда
			Объект.УдержатьВознаграждение = Ложь;
		КонецЕсли;
	Иначе
		Элементы.УдержатьВознаграждение.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Регулярное" Тогда
		РегулярноеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Период" Тогда
		ПериодПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "КоличествоПериодов" Тогда
		КоличествоПериодовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "СуммаСоглашения" Тогда
		СуммаДокументаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаНачалаДействия" Тогда
		ДатаНачалаДействияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДСПоУмолчанию" Тогда		
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПорядокОплаты" Тогда
		ПорядокОплатыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОграничиватьРучныеСкидки" Тогда
		ОграничиватьРучныеСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДоступноВнешнимПользователям" Тогда
		ДоступноВнешнимПользователямПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ИспользуютсяДоговорыКонтрагентов" Тогда
		ИспользуютсяДоговорыКонтрагентовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВозвращатьМногооборотнуюТару" Тогда
		ВозвращатьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "РассчитыватьДатуВозвратаТарыПоКалендарю" Тогда
		РассчитыватьДатуВозвратаТарыПоКалендарюПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "УстановитьИнтервал" Тогда
		УстановитьИнтервалВыполнить(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппы" Тогда
		ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппы(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьВидЦенВыделенныхСтрокТовары" Тогда
		ЗаполнитьВидЦенВыделенныхСтрокТовары(Команда);
	ИначеЕсли Команда.Имя = "ДобавитьТоварыПоОтбору" Тогда
		ДобавитьТоварыПоОтбору(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю");
	МассивЭлементов.Добавить("НеРассчитыватьДатуВозвратаТарыПоКалендарю");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	МассивЭлементов.Добавить("КалендарьВозвратаТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивЭлементов,
		"Доступность",
		Форма.Объект.ВозвращатьМногооборотнуюТару);
		
	Форма.Элементы.КалендарьВозвратаТары.Доступность = Форма.Объект.РассчитыватьДатуВозвратаТарыПоКалендарю И Форма.Объект.ВозвращатьМногооборотнуюТару;
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.СкидкиНаценки.ТекущиеДанные;
	СкидкаНаценка = ?(ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа, Неопределено, ТекущиеДанные.Ссылка);
	
	Если СкидкаНаценка <> АктивизированнаяСкидкаНаценка Тогда
		ОбновитьИспользованиеСкидокНаценок(СкидкаНаценка);
		АктивизированнаяСкидкаНаценка = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИспользованиеСкидокНаценок(СкидкаНаценка)
	
	ИспользованиеСкидкиНаценки = СкидкиНаценкиСервер.ИспользованиеСкидкиНаценки(СкидкаНаценка, ДатаСреза);
	СкидкиНаценкиСервер.СформироватьИнформационнуюНадписьИспользованиеСкидокНаценок(ИнформацияОДействииСкидок,
	                                                                                ИспользованиеСкидкиНаценки,
	                                                                                "НастроитьСкидки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоСкидок()
	
	ПостроитьДеревоСкидкиНаценки();
	СкидкиНаценкиКлиент.РазвернутьДеревоСкидокРекурсивно(СкидкиНаценки, Элементы.СкидкиНаценки, РазвернутыеУзлыДерева);
	СкидкиНаценкиКлиент.ПозиционироватьсяНаЗначениеВДереве(АктивизированнаяСкидкаНаценка, СкидкиНаценки, Элементы.СкидкиНаценки, "Ссылка");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФлагаДоступноВнешнимПользователям()

	ВнешниеПользователиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей");
	ОбменССайтомИспользуется        = ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтом");
	
	Если ВнешниеПользователиИспользуются И ОбменССайтомИспользуется Тогда
		Элементы.ДоступноВнешнимПользователям.Заголовок = НСтр("ru='Доступно внешним пользователям и для обмена с сайтом';uk='Доступне зовнішнім користувачам та для обміну з сайтом'");
	ИначеЕсли ОбменССайтомИспользуется Тогда
		Элементы.ДоступноВнешнимПользователям.Заголовок = НСтр("ru='Доступно для обмена с сайтом';uk='Доступне для обміну з сайтом'");
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	РазбиватьРасходныеОрдераПоРаспоряжениямВидимость = Истина;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке") Тогда
		
		РазбиватьРасходныеОрдераПоРаспоряжениямВидимость = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Склад) Тогда 
	
		Запрос = Новый Запрос; 
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ЭтоГруппа
		|				ТОГДА Склады.Ссылка В ИЕРАРХИИ (&Склад)
		|			ИНАЧЕ Склады.Ссылка = &Склад
		|		КОНЕЦ
		|	И Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|	И Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата";
		
		Запрос.УстановитьПараметр("Склад", 			Объект.Склад);
		Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДатаСеанса());
		
		// Если выбранный склад не является ордерным или в группе складов нет ордерных складов, 
		// т.е. запрос пустой, то скроем настройку группировки расходных ордеров.
		РазбиватьРасходныеОрдераПоРаспоряжениямВидимость = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Элементы.РазбиватьРасходныеОрдераПоРаспоряжениям.Видимость = РазбиватьРасходныеОрдераПоРаспоряжениямВидимость;
	
	Если Не РазбиватьРасходныеОрдераПоРаспоряжениямВидимость Тогда 
		Объект.РазбиватьРасходныеОрдераПоРаспоряжениям = Ложь;
		РазбиватьРасходныеОрдераПоРаспоряжениямЧисло = 0;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

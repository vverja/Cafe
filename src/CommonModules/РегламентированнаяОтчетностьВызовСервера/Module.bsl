
Функция ИзменитьПорядокЭлементов(Ссылка, УстановленныеОтборы, ОтображениеСписком, Вверх) Экспорт
	
	Информация = РегламентированнаяОтчетность.ПолучитьИнформациюДляПеремещенияОМетаданных(Ссылка);
	
	// Для иерархических справочников может быть установлен отбор по родителю, если нет,
	// то способ отображения должен быть иерархический или в виде дерева
	Если Информация.ЕстьРодитель И ОтображениеСписком И Не УстановленныеОтборы.ЕстьОтборПоРодителю Тогда
		Возврат НСтр("ru='Перед перемещением необходимо установить отображение в виде дерева или иерархического списка!';uk='Перед переміщенням необхідно встановити відображення у вигляді дерева або ієрархічного списку!'");
	КонецЕсли;
	
	// Для подчиненных справочников должен быть установлен отбор по владельцу
	Если Информация.ЕстьВладелец И НЕ УстановленныеОтборы.ЕстьОтборПоВладельцу Тогда
		Возврат НСтр("ru='Перед перемещением необходимо установить отбор по владельцу!';uk='Перед переміщенням необхідно встановити відбір за власником!'");
	КонецЕсли;
	
	// Проверим, есть ли у выбранного объекта реквизит доп. упорядочивания
	Если Информация.ЕстьГруппы Тогда
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
		Если ЭтоГруппа И Не Информация.ДляГрупп Тогда
			// Это группа, но для группа порядок не назначается
			Возврат "";
		ИначеЕсли Не ЭтоГруппа И Не Информация.ДляЭлементов Тогда
			// Это элемент, но для элементов порядок не назначается
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	масУсловия = Новый Массив;
	
	// Добавим условие по родителю
	Если Информация.ЕстьРодитель Тогда
		масУсловия.Добавить("Таблица.Родитель = &Родитель");
		Запрос.УстановитьПараметр("Родитель", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Родитель"));
	КонецЕсли;
	
	// Добавим условие по владельцу
	Если Информация.ЕстьВладелец Тогда
		масУсловия.Добавить("Таблица.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Владелец"));
	КонецЕсли;
	
	// Добавим условие на группу
	Если Информация.ЕстьГруппы Тогда
		Если Информация.ДляГрупп И Не Информация.ДляЭлементов Тогда
			масУсловия.Добавить("Таблица.ЭтоГруппа");
		ИначеЕсли Не Информация.ДляГрупп И Информация.ДляЭлементов Тогда
			масУсловия.Добавить("НЕ Таблица.ЭтоГруппа");
		КонецЕсли;
	КонецЕсли;
	
	// Составим строку со всеми условиями
	СтрУсловия = "";
	СтрДобавка = "
	|ГДЕ
	|	";
	Для Каждого Условие Из масУсловия Цикл
		СтрУсловия = СтрУсловия + СтрДобавка + Условие;
		СтрДобавка = "
		|	И ";
	КонецЦикла;
	
	// Составим текст запроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Код КАК ПорядокСтарый,
	|	Таблица.Код КАК ПорядокНовый
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
	|" + СтрУсловия + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	
	Запрос.Текст = ТекстЗапроса;
	ТабЭлементы = Запрос.Выполнить().Выгрузить();
	
	Стр1 = ТабЭлементы.Найти(Ссылка, "Ссылка");
	Если Стр1 = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Смещение = ?(Вверх, -1, 1);
	Индекс1 = ТабЭлементы.Индекс(Стр1);
	Индекс2 = Индекс1 + Смещение;
	Если (Индекс2 < 0) ИЛИ (Индекс2 >= ТабЭлементы.Количество()) Тогда
		Возврат "";
	КонецЕсли;
	Стр2 = ТабЭлементы[Индекс2];
	
	Стр1.ПорядокНовый = Стр2.ПорядокСтарый;
	Стр2.ПорядокНовый = Стр1.ПорядокСтарый;
	
	ТабЭлементы.Сдвинуть(Стр1, Смещение);
	
	предПорядок = 0;
	НачатьТранзакцию();
	
	Для Каждого Стр Из ТабЭлементы Цикл
		
		Если Число(предПорядок) >= Число(Стр.ПорядокНовый) Тогда
			Стр.ПорядокНовый = предПорядок + 1;
		КонецЕсли;
		предПорядок = Стр.ПорядокНовый;
		
		Если Стр.ПорядокНовый <> Стр.ПорядокСтарый Тогда
			Объект = Стр.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
			Объект.Код = Стр.ПорядокНовый;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат "";
	
КонецФункции


Функция ПравоДоступаКРегламентированномуОтчету(ИдентификаторОтчета) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.РегламентированныеОтчеты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Документы.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это документ
		
		Если НЕ ПравоДоступа("Изменение", Метаданные.Документы[ИдентификаторОтчета]) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Отчеты.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это отчет
		
		Если НЕ ПравоДоступа("Использование", Метаданные.Отчеты[ИдентификаторОтчета]) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции


Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт

	Если Организация = Неопределено ИЛИ Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(СписокПоказателей) = Тип("Строка") Тогда
		
		СписокПоказателейСтрока = Строка(СписокПоказателей);
		СписокПоказателей = Новый СписокЗначений;
		ВхождениеЗапятой = Найти(СписокПоказателейСтрока, ",");
		Пока ВхождениеЗапятой <> 0 Цикл
			ИмяПоказателя = СокрЛП(Лев(СписокПоказателейСтрока, ВхождениеЗапятой - 1));
			СписокПоказателейСтрока = Сред(СписокПоказателейСтрока, ВхождениеЗапятой + 1);
			ВхождениеЗапятой = Найти(СписокПоказателейСтрока, ",");
			Если ПустаяСтрока(ИмяПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			СписокПоказателей.Добавить("", ИмяПоказателя);
		КонецЦикла;
		ИмяПоказателя = СокрЛП(СписокПоказателейСтрока);
		Если НЕ ПустаяСтрока(ИмяПоказателя) Тогда
			СписокПоказателей.Добавить("", ИмяПоказателя);
		КонецЕсли;
		
	КонецЕсли;	
	
	ИДКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	Если ИДКонфигурации = "BASУТ" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизацииЕРП(Организация, ДатаЗначения, СписокПоказателей);
	ИначеЕсли ИДКонфигурации = "ЕРП" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизацииЕРП(Организация, ДатаЗначения, СписокПоказателей);
	ИначеЕсли ИДКонфигурации = "БП" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизацииБП(Организация, ДатаЗначения, СписокПоказателей);
	КонецЕсли;	

КонецФункции


Функция ПолучитьКодЯзыкаИнтерфейса() Экспорт
	
	ИДКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина);
	Если ИДКонфигурации = "BASERP" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодЯзыкаИнтерфейсаBASERP();
	Иначе
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодЯзыкаИнтерфейса();
	КонецЕсли;	
		
КонецФункции


Функция ПолучитьНомерНаПечать(НомерОбъекта, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс) Экспорт
	
	ИДКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина);
	Если ИДКонфигурации = "BASERP" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьНомерНаПечатьBASERP(НомерОбъекта, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс);
	Иначе
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьНомерНаПечать(НомерОбъекта, УдалитьПрефиксИнформационнойБазы, УдалитьПользовательскийПрефикс);
	КонецЕсли;	
		
КонецФункции


Функция ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, Знач КодПоказателя) Экспорт
	Перем ИмяСтраницы;
	
	ПоляПоиска = Новый Массив;
	ПоляПоиска.Добавить("КодПоказателяПоСоставу");
	ПоляПоиска.Добавить("КодПоказателяПоФорме");
		
	// В случае, если показатель многострочный (для импорта XML данных в зарплатных отчетах, тогда
	// определим его смысловую часть и найдем раздел.
	Если (Лев(КодПоказателя, 1) = "П") И (Найти(КодПоказателя, "_") = 14) Тогда
		КодПоказателя = Сред(КодПоказателя, 1, Найти(КодПоказателя, "_") - 1);
		// Временный обход для показателя по графе 10 раздела 3. В составе показателей
		// графы 10 нет, поэтому временно привяжем к разделу 3.
		Если КодПоказателя = "П000030001010" Тогда
			Возврат "Раздел3";
		КонецЕсли;
	КонецЕсли;

	Для Каждого ПолеПоиска Из ПоляПоиска Цикл
		
		НайденнаяСтрока = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура(ПолеПоиска, КодПоказателя));
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			ИмяСтраницы = НайденнаяСтрока[0].ИмяПоляТаблДокумента;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяСтраницы;

КонецФункции


Процедура ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
	
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ,ТипСмещенияТабличногоДокумента.ПоВертикали);
		
КонецПроцедуры


Процедура УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт
	
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
	
	ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
КонецПроцедуры


Функция СохранитьОбластиПечати(ТабличныйДокумент, ИмяОбластиПечати)

	// сохраняем не абсолютные координаты области,
	// а ее сдвиг от краев табличного документа
	// при добавлении многострочек сдвиг от верхнего/нижнего края документа останется неизменным.
	// И хотя координаты правого/левого края измениться не могут, сохраняем их идентично для общности.
	
	СохранаяемыеОбластиПечати = Новый ТаблицаЗначений();
	СохранаяемыеОбластиПечати.Колонки.Добавить("Имя");
	СохранаяемыеОбластиПечати.Колонки.Добавить("ТипОбласти");
	СохранаяемыеОбластиПечати.Колонки.Добавить("ОтступСВерху");
	СохранаяемыеОбластиПечати.Колонки.Добавить("ОтступСЛева");
	СохранаяемыеОбластиПечати.Колонки.Добавить("ОтступСнизу");
	СохранаяемыеОбластиПечати.Колонки.Добавить("ОтступСправа");
	
	Если НЕ ПустаяСтрока(ИмяОбластиПечати) Тогда
		
		ВысотаТаблицы  = ТабличныйДокумент.ВысотаТаблицы;
		ШиринаСтраницы = ТабличныйДокумент.ШиринаСтраницы;
		
		Область1 = "";
		Область2 = "";
		Если Найти(ИмяОбластиПечати, "|") > 0  Тогда
			Область1 = Лев(ИмяОбластиПечати,  Найти(ИмяОбластиПечати, "|") - 1);
			Область2 = Сред(ИмяОбластиПечати, Найти(ИмяОбластиПечати, "|") + 1);
		Иначе
			Область1 = ИмяОбластиПечати;
			Область2 = "";
		КонецЕсли;
		
		Если НЕ Область1 = "" Тогда
			
			Область = ТабличныйДокумент.Области[Область1];
		
			ПараметрыОбластиПечати = СохранаяемыеОбластиПечати.Добавить();
			
			ПараметрыОбластиПечати.Имя 	  		= Область1;
			ПараметрыОбластиПечати.ТипОбласти 	= Область.ТипОбласти;
			
			ПараметрыОбластиПечати.ОтступСЛева  = ?(Область.Лево = 0, Неопределено, Область.Лево - 1);
			ПараметрыОбластиПечати.ОтступСВерху = ?(Область.Верх = 0, Неопределено, Область.Верх - 1);
			ПараметрыОбластиПечати.ОтступСнизу  = ?(Область.Низ  = 0, Неопределено, ВысотаТаблицы  - Область.Низ);
			ПараметрыОбластиПечати.ОтступСправа = ?(Область.Право= 0, Неопределено, ШиринаСтраницы - Область.Право);
		
		КонецЕсли;
		
		Если НЕ Область2 = "" Тогда
		
			Область = ТабличныйДокумент.Области[Область2];
			
			ПараметрыОбластиПечати = СохранаяемыеОбластиПечати.Добавить();
			ПараметрыОбластиПечати.Имя 	  		= Область2;
			ПараметрыОбластиПечати.ТипОбласти 	= Область.ТипОбласти;
			
			ПараметрыОбластиПечати.ОтступСЛева  = ?(Область.Лево = 0, Неопределено, Область.Лево - 1);
			ПараметрыОбластиПечати.ОтступСВерху = ?(Область.Верх = 0, Неопределено, Область.Верх - 1);
			ПараметрыОбластиПечати.ОтступСнизу  = ?(Область.Низ  = 0, Неопределено, ВысотаТаблицы  - Область.Низ);
			ПараметрыОбластиПечати.ОтступСправа = ?(Область.Право= 0, Неопределено, ШиринаСтраницы - Область.Право);
		
		КонецЕсли;
	
	КонецЕсли;	

	Возврат СохранаяемыеОбластиПечати;
	
КонецФункции


Процедура ВосстановитьОбластиПечати(ТабличныйДокумент, СохранаяемыеОбластиПечати)

	Для каждого ПараметрыОбластиПечати  Из СохранаяемыеОбластиПечати Цикл
		
		ВысотаТаблицы  = ТабличныйДокумент.ВысотаТаблицы;
		ШиринаСтраницы = ТабличныйДокумент.ШиринаСтраницы;
		
		Если ПараметрыОбластиПечати.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		
			Область = ТабличныйДокумент.Область(1 + ПараметрыОбластиПечати.ОтступСверху, , ВысотаТаблицы - ПараметрыОбластиПечати.ОтступСнизу, );		
			
		ИначеЕсли ПараметрыОбластиПечати.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			
			Область = ТабличныйДокумент.Область( , 1 + ПараметрыОбластиПечати.ОтступСлева, , ШиринаСтраницы - ПараметрыОбластиПечати.ОтступСправа );		
			
		Иначе	
			
			Область = ТабличныйДокумент.Область(1 + ПараметрыОбластиПечати.ОтступСверху, 1 + ПараметрыОбластиПечати.ОтступСлева, ВысотаТаблицы - ПараметрыОбластиПечати.ОтступСнизу, ШиринаСтраницы - ПараметрыОбластиПечати.ОтступСправа);		
			
		КонецЕсли;
		
		Область.Имя = ПараметрыОбластиПечати.Имя; 
	
	КонецЦикла;

КонецПроцедуры


Процедура ВывестиРазделВТабличныйДокументНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	// сохраним области печати из макета.
	СохранаяемыеОбластиПечати = СохранитьОбластиПечати(Раздел, ИмяОбластиПечати);
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, всё, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	ДанныеГруппы = ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений"));
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		Для Каждого КолИмя ИЗ КолонкиМногострочныхРазделов[ИмяГруппы] Цикл
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеГруппы, Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
	
	// восстановим области печати
	ВосстановитьОбластиПечати(Раздел, СохранаяемыеОбластиПечати);	
	
КонецПроцедуры


Функция ПолучитьСсылкуНаФормуРеглОтчета(ТекДок, ПараметрыФормы) Экспорт
			
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ТекДок.ДатаНачала);
	ПараметрыФормы.Вставить("мСохраненныйДок", ТекДок.Ссылка);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", ТекДок.ДатаОкончания);
	ПараметрыФормы.Вставить("Организация", ТекДок.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма", ТекДок.ВыбраннаяФорма);
		
	Возврат Строка(РегламентированнаяОтчетность.ФормаРеглОтчета(ТекДок.ИсточникОтчета, ТекДок.ВыбраннаяФорма, , ТекДок.Ссылка)) + ".Форма." + Строка(ТекДок.ВыбраннаяФорма);
		
КонецФункции


Функция ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВерсияФормы) Экспорт
	
	ВерсияФормыДанных = Док.ДанныеОтчета.Получить().ВерсияФормы;
	
	Если НЕ РегламентированнаяОтчетность.ПродолжитьПриНесоответствииВерсийФорм(ВерсияФормыДанных, ВерсияФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


Функция ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаРеглОтч) Экспорт
	
	ПредставлениеДокументаРеглОтч = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Док.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоДня(Док.ДатаНачала));
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецДня(Док.ДатаОкончания));
	ПараметрыФормы.Вставить("мСохраненныйДок",          Док.Ссылка);
	ПараметрыФормы.Вставить("мПериодичность",           Док.Периодичность);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          Док.ВыбраннаяФорма);
	ПараметрыФормы.Вставить("ИсточникОтчета",           Док.ИсточникОтчета);
	ПараметрыФормы.Вставить("Организация",              Док.Организация);
			
	Возврат ПараметрыФормы;
	
КонецФункции


Функция РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	КонецЕсли;

	ИмяТекущейОбласти   = СтрЗаменить(ТекущаяОбласть.Имя, "УдалитьСтроку", "");
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, РегламентированнаяОтчетностьКлиентСервер.НайтиПоследнееВхождение(ИмяТекущейОбласти, "_")-1);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции


Функция ДокументыСУчетомКритериевОтбораКалендарь(ИсточникОтчета, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ОрганизацияОтбор, КодИФНС, Периодичность) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
			   	   |	И РегламентированныйОтчет.Организация = &Организация
				   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
	
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции


Процедура ПроверитьДоступностьОтчета(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор) Экспорт
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось открыть отчет!';uk='Не вдалося відкрити звіт!'");
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось открыть отчет!';uk='Не вдалося відкрити звіт!'");
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;

	Попытка
		ТекФорма.Организация =  ОрганизацияОтбор;
	Исключение
	КонецПопытки;

	Попытка
		ТекФорма.мДатаНачалаПериодаОтчета = ДатаНач;
		ТекФорма.мДатаКонцаПериодаОтчета = ДатаКон;
	Исключение
	КонецПопытки;

	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ТекФорма, "мПериодичность") Тогда
		Если Периодичность <> Неопределено Тогда
			ТекФорма.мПериодичность = Периодичность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



Функция ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания, СсылкаНаСохрРеглОтчет = Неопределено) Экспорт
	
	Если НЕ СсылкаНаСохрРеглОтчет = Неопределено Тогда
		
		Возврат СсылкаНаСохрРеглОтчет.ВыбраннаяФорма;
		
	КонецЕсли;
	
	ТаблицаФормОтчета = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета).ТаблицаФормОтчета();
	
	ФормаОтчета = Неопределено;
	
	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		
		Если (Строка.ДатаНачалоДействия > КонецДня(ДатаОкончания)) ИЛИ
			((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(ДатаОкончания))) Тогда

			Продолжить;
			
		КонецЕсли;

		ФормаОтчета = Строка.ФормаОтчета;

		Возврат ФормаОтчета;
		
	КонецЦикла;

	// Если не удалось найти форму, соответствующую выбранному периоду,
	// то по умолчанию выдаем текущую (действующую) форму.
	//Если ФормаОтчета = Неопределено Тогда
	//	ФормаОтчета = ТаблицаФормОтчета[0].ФормаОтчета;
	//КонецЕсли;
	
	Возврат ФормаОтчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПОДДЕРЖКИ ВНЕШНИХ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
//

Функция СвойстваВнешнегоОтчета(ОбъектЭлемент, Отчет) Экспорт
	
	СвойстваОтчета = Новый Структура;
	
	// создаем объект из выбранного внешнего отчета
	Если ЭтоАдресВременногоХранилища(Отчет) Тогда 
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
		ПолучитьИзВременногоХранилища(Отчет).Записать(ИмяФайлаОтчета);
		Попытка
			ОбъектОтчет = ВнешниеОтчеты.Создать(ИмяФайлаОтчета);
		Исключение
			
			ТекстПредупреждения = 	"Ошибка при загрузке внешнего отчета:
									|
									|" + ИнформацияОбОшибке().Описание;
			СвойстваОтчета.Вставить("Результат", Ложь);
			СвойстваОтчета.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Возврат СвойстваОтчета;
		КонецПопытки;
	Иначе
		ОбъектОтчет = Отчет;
	КонецЕсли;
	
	// заполняем свойства внешнего отчета
	ПолнаяВерсияВнешнегоОтчета = ПолучитьВерсиюРегламентированногоОтчета(ОбъектОтчет);
	СвойстваПолнойВерсии = РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсияВнешнегоОтчета);
	
	СвойстваОтчета.Вставить("Результат", Истина);
	
	СвойстваОтчета.Вставить("ИДКонфигурацииОтчета", СвойстваПолнойВерсии.ИДКонфигурации);
	СвойстваОтчета.Вставить("ИДКонфигурацииМетаданные", Метаданные.Имя);
	СвойстваОтчета.Вставить("ИДКонфигурацииИмя", РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации());
	
	СвойстваОтчета.Вставить("ВерсияКонфигурацииВнешнегоОтчета", СвойстваПолнойВерсии.ВерсияКонфигурации);
	СвойстваОтчета.Вставить("ВерсияКонфигурацииМетаданные", Метаданные.Версия);
	
	СвойстваОтчета.Вставить("КраткаяВерсияВнешнегоОтчета", СвойстваПолнойВерсии.КраткаяВерсия);
	СвойстваОтчета.Вставить("ОбъектОтчетМетаданныеИмя", ОбъектОтчет.Метаданные().Имя);
	
	Возврат СвойстваОтчета;
	
КонецФункции

Функция ЗарегистрироватьВнешнийОтчет(ОбъектСсылка, Отчет) Экспорт
	
	Результат = Новый Структура;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ТекстПредупреждения = "Метод не предназначен для использования в модели сервиса";
		Результат.Вставить("Зарегистрирован", Ложь);
		Результат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		Возврат Результат;
	КонецЕсли;
	
	// создаем объект из выбранного внешнего отчета
	Если ЭтоАдресВременногоХранилища(Отчет) Тогда 
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
		ПолучитьИзВременногоХранилища(Отчет).Записать(ИмяФайлаОтчета);
		Попытка
			ОбъектОтчет = ВнешниеОтчеты.Создать(ИмяФайлаОтчета);
		Исключение
			ТекстПредупреждения = 	"Ошибка при загрузке внешнего отчета:
									|
									|" + ИнформацияОбОшибке().Описание;
			Результат.Вставить("Зарегистрирован", Ложь);
			Результат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	Если ОбъектСсылка = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда 
		ОбъектЭлемент = Неопределено;
	Иначе
		ОбъектЭлемент = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	МетаданныеОтчета = ОбъектОтчет.Метаданные();
	ИмяМетаданныхОтчета = МетаданныеОтчета.Имя;
	СинонимМетаданныхОтчета = МетаданныеОтчета.Синоним;
	КомментарийКМетаданнымОтчета = МетаданныеОтчета.Комментарий;
	
	Если ОбъектЭлемент = Неопределено ИЛИ ПустаяСтрока(ОбъектЭлемент.ИсточникОтчета) Тогда
		Результат.Вставить("ИсточникОтчета", ИмяМетаданныхОтчета);
	КонецЕсли;
	
	Если ОбъектЭлемент = Неопределено ИЛИ ПустаяСтрока(ОбъектЭлемент.Наименование) Тогда
		Результат.Вставить("Наименование", ?(ЗначениеЗаполнено(СинонимМетаданныхОтчета), СинонимМетаданныхОтчета, ОбъектЭлемент.ИсточникОтчета));
	КонецЕсли;
	
	Если ОбъектЭлемент = Неопределено ИЛИ ПустаяСтрока(ОбъектЭлемент.Описание) И ЗначениеЗаполнено(КомментарийКМетаданнымОтчета) И КомментарийКМетаданнымОтчета <> МетаданныеОтчета.Синоним Тогда
		Результат.Вставить("Описание", КомментарийКМетаданнымОтчета);
	КонецЕсли;
	
	Результат.Вставить("ВнешнийОтчетИспользовать", Истина);
	
	ПолнаяВерсияВнешнегоОтчета = ПолучитьВерсиюРегламентированногоОтчета(ОбъектОтчет);
	СвойстваПолнойВерсии = РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсияВнешнегоОтчета);
	
	Результат.Вставить("ВнешнийОтчетВерсия", СвойстваПолнойВерсии.КраткаяВерсия);
	
	Результат.Вставить("Зарегистрирован", Истина);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВерсиюРегламентированногоОтчета(ОбъектОтчет) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ОбъектОтчет, "мВерсияОтчета") Тогда
		Возврат ОбъектОтчет.мВерсияОтчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсия) Экспорт
	
	Результат = Новый Структура("ИДКонфигурации, ВерсияКонфигурации, КраткаяВерсия, Подверсия");
	
	Если ЗначениеЗаполнено(ПолнаяВерсия) Тогда
		ВхождениеПробела = Найти(ПолнаяВерсия, " ");
		Если ВхождениеПробела <> 0 Тогда
			Результат.ИДКонфигурации = СокрЛП(Лев(ПолнаяВерсия, ВхождениеПробела - 1));
			Результат.КраткаяВерсия = СокрЛП(Сред(ПолнаяВерсия, ВхождениеПробела + 1));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.КраткаяВерсия) Тогда
		
		КраткаяВерсия = Результат.КраткаяВерсия;
		СтрДлинаКраткаяВерсия = СтрДлина(КраткаяВерсия);
		Для ОбратныйИндекс = 1 По СтрДлинаКраткаяВерсия Цикл
			Инд = СтрДлинаКраткаяВерсия - ОбратныйИндекс + 1;
			ТекСимв = Сред(КраткаяВерсия, Инд, 1);
			Если ТекСимв = "." Тогда
				Результат.ВерсияКонфигурации = СокрЛП(Лев(КраткаяВерсия, Инд - 1));
				Результат.Подверсия = СокрЛП(Сред(КраткаяВерсия, Инд + 1));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПараметрыВнешнихРегламентированныхОтчетов(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено)Экспорт
	
	ПараметрыСеанса.ПараметрыВнешнихРегламентированныхОтчетов = Новый ФиксированноеСоответствие(Новый Соответствие);
	
КонецПроцедуры

Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт 
	
	Если Найти(ЭтаФормаИмя, "Внешний") > 0 Тогда 
		ФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
		Возврат ВнешниеОтчеты.Создать(Сред(Лев(ФормаИмя, Найти(ФормаИмя, ".Форма.") - 1), 7));
	Иначе
		Возврат Отчеты[Сред(Лев(ЭтаФормаИмя, Найти(ЭтаФормаИмя, ".Форма.") - 1), 7)].Создать();
	КонецЕсли;
	
КонецФункции


Функция ИспользуетсяОднаОрганизация() Экспорт

	Возврат Ложь;
		
КонецФункции

Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти) Экспорт

	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли; 
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти, Постфикс = "ХХ_1") Экспорт
	
	// Определим область удаляемой строки.
	НазначитьИмяОбластиМЧ = Ложь;
	УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,);
	Если Найти(УдаляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = УдаляемаяОбласть.Имя;
	КонецЕсли;
	// Определяем позицию области ячейки номера строки, если она содержится в удаляемой строке.
	ПозицияОбластиЯчейкиНомераСтроки = 0;
	ОбластьЯчейкиНомераСтроки = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,).Области.Найти(ИмяГруппы + Постфикс);
	Если ОбластьЯчейкиНомераСтроки <> Неопределено Тогда
		Если НЕ ОбластьЯчейкиНомераСтроки.СодержитЗначение Тогда
			ПозицияОбластиЯчейкиНомераСтроки = ОбластьЯчейкиНомераСтроки.Лево;
		КонецЕсли; 
	КонецЕсли; 
	// Непосредственно удаляем область строки табличного документа.
	ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти,, НомерНижнЯчейкиОбласти,).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;
	// Восстанавливаем ячейку номера строки, если она была в составе удаленной области.
	Если ПозицияОбластиЯчейкиНомераСтроки > 0 Тогда
		ЗаменяемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, ПозицияОбластиЯчейкиНомераСтроки, НомерНижнЯчейкиОбласти, ПозицияОбластиЯчейкиНомераСтроки);
		ТекстОбластиЯчейкиНомераСтроки = ОбластьЯчейкиНомераСтроки.Текст;
		ЗаполнитьЗначенияСвойств(ЗаменяемаяОбласть, ОбластьЯчейкиНомераСтроки,, "Имя");
		ЗаменяемаяОбласть.Текст = ТекстОбластиЯчейкиНомераСтроки;
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено) Экспорт
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			// Определим, присутствует ли многостраничность в декларации или нет.
			Попытка
				МногостраничностьЕсть = ?(Форма.мСтруктураМногостраничныхРазделов = Неопределено, Ложь, Истина);
			Исключение
				МногостраничностьЕсть = Ложь;
			КонецПопытки;

			Если МногостраничностьЕсть Тогда
				Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
					
					ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
					
					// Раздел является многостраничным. Определим активную страницу раздела:
					СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

					Если СтрТаблицаСтраницы.Количество() > 0 Тогда
						НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
					КонецЕсли;
				КонецЕсли;

				Если МассивВариантовЗаполненияСтраниц.Количество() < НомерТекущейСтраницы Тогда
					Для Сч = МассивВариантовЗаполненияСтраниц.Количество() По НомерТекущейСтраницы Цикл
						Если ТипЗнч(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
						
							ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
							
							КопироватьДанныеФормы(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
							
						Иначе
							МассивВариантовЗаполненияСтраниц.Добавить(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения.Скопировать());
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1].ТаблицаВариантовЗаполнения;
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
			ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

			ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

			ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

			Если ТипЗнчСуммы = Неопределено Тогда
				ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
			Иначе
				ОписаниеТиповЧисло15 = ТипЗнчСуммы;
			КонецЕсли;

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

			// варианты заполнения определяем по макету СоставПоказателей
						
			МакетСоставаПоказателей = ОбъектОтчета(Форма.ИмяФормы).ПолучитьМакет(Форма.СтруктураРеквизитовФормы.мСоставПоказателей);

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					//стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
					стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					
					КодПоказателяПоСтруктуре = "";
					
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
						НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции


Функция	ПроверитьМенеджер1С(ИсточникОтчета, ВыводитьСообщенияОбОшибках) Экспорт
	
	Отчет = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	
	Если Отчет = Неопределено Тогда
		
		Если ВыводитьСообщенияОбОшибках Тогда
			
			Сообщить(НСтр("ru='Не удалось получить менеджер ""FREDO Звіт""!';uk='Не вдалося отримати менеджер ""FREDO Звіт""!'"), СтатусСообщения.Важное);
			
			НайденныйЭлемент = РегламентированнаяОтчетность.ПолучитьРеглОтчетПоУмолчанию(ИсточникОтчета);
			Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
				Сообщить(НСтр("ru='В справочнике ""Регламентированные отчеты"" не найден менеджер по работе с системой ""FREDO Звіт""';uk='У довіднику ""Регламентовані звіти"" не знайдено менеджер по роботі з системою ""FREDO Звіт""'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	


Функция ПолучитьДатаНачалаИспользованияЗвит1С(Организация) Экспорт

	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ДатаНачалаИспользованияЗвит1С");
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СписокПоказателей);
	
	Возврат СведенияОбОрганизации.ДатаНачалаИспользованияЗвит1С;

КонецФункции 


Функция ЕстьРасшифровкаПоПоказателям(АдресХранилищаРасшифровки, ИменаПоказателей, ИмяРаздела=Неопределено) Экспорт
	
	ТаблицаРасшифровок = ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровки);
	ТаблицаРасшифровок.Индексы.Добавить("ИмяПоказателя");
	
	ЕстьПоказателиИзСписка = Ложь;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		Если ЗначениеЗаполнено(ИмяРаздела) Тогда
			Если ТаблицаРасшифровок.НайтиСтроки(Новый Структура("ИмяПоказателя, ИмяРаздела", ИмяПоказателя, ИмяРаздела)).Количество() > 0 Тогда
				ЕстьПоказателиИзСписка = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Если ТаблицаРасшифровок.Найти(ИмяПоказателя, "ИмяПоказателя") <> Неопределено Тогда
				ЕстьПоказателиИзСписка = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьПоказателиИзСписка;
	
КонецФункции


// возвращает строку "Отчет" или "ВнешнийОтчет" в зависимости от настройки использования внешнего регл.отчета
Функция ВариантОткрытияОтчета(ИсточникОтчета) Экспорт
	
	ВОзврат ?(РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета), "ВнешнийОтчет", "Отчет");

КонецФункции // ()

Функция ЭтоОбычнаяФормаРегламентированногоОтчета(ВнешнийОтчет, ИмяОтчета, ИмяФормы) Экспорт

	Если ВнешнийОтчет Тогда
		МетаданныеОтчета = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета).Метаданные();
	Иначе
		МетаданныеОтчета = Метаданные.Отчеты[ИмяОтчета];
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Для Каждого Форма Из МетаданныеОтчета.Формы Цикл
			Если Форма.Имя = ИмяФормы Тогда
				Возврат Форма.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Обычная;
			КонецЕсли; 
		КонецЦикла;	
		Возврат Ложь;

	#Иначе
		Если НЕ МетаданныеОтчета.Формы.Найти(ИмяФормы) = Неопределено  Тогда
			Возврат МетаданныеОтчета.Формы[ИмяФормы].ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Обычная;
		КонецЕсли;
	#КонецЕсли
	
	Возврат Ложь
	
КонецФункции // ()

Функция ФормаРегламентированногоОтчетаСуществует(ВнешнийОтчет, ИмяОтчета, ИмяФормы) Экспорт

	Если ВнешнийОтчет Тогда
		МетаданныеОтчета = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета).Метаданные();
	Иначе
		МетаданныеОтчета = Метаданные.Отчеты[ИмяОтчета];
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Для Каждого Форма Из МетаданныеОтчета.Формы Цикл
			Если Форма.Имя = ИмяФормы Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЦикла;	
		Возврат Ложь;
	#Иначе
		Если НЕ МетаданныеОтчета.Формы.Найти(ИмяФормы) = Неопределено  Тогда
			Возврат Истина
		КонецЕсли;
	#КонецЕсли
		
	Возврат Ложь
	
КонецФункции // ()

// Функция возвращает номер телефона ответственного лица организации 
Функция ПолучитьТелефонОтветственногоЛица(Форма, ВидОтветственногоЛица) Экспорт
	
	ИДКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	Если ИДКонфигурации = "BASУТ" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьТелефонОтветственногоЛицаЕРП(Форма, ВидОтветственногоЛица);
	ИначеЕсли ИДКонфигурации = "ЕРП" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьТелефонОтветственногоЛицаЕРП(Форма, ВидОтветственногоЛица);
	ИначеЕсли ИДКонфигурации = "БП" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьТелефонОтветственногоЛицаБП(Форма, ВидОтветственногоЛица);
	КонецЕсли;	

КонецФункции // ()

// Функция возвращает номер телефона организации. 
Функция ПолучитьТелефонФаксОрганизацииПоПолям(Знач Организация, Знач ВидКИ) Экспорт
	
	ИДКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	Если ИДКонфигурации = "BASУТ" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьТелефонФаксОрганизацииПоПолямЕРП(Организация, ВидКИ);
	ИначеЕсли ИДКонфигурации = "ЕРП" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьТелефонФаксОрганизацииПоПолямЕРП(Организация, ВидКИ);
	ИначеЕсли ИДКонфигурации = "БП" Тогда
		Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьТелефонФаксОрганизацииПоПолямБП(Организация, ВидКИ);
	КонецЕсли;	

КонецФункции // ()

Функция НеобходимоОбновлениеПараметровРаботыПрограммы() Экспорт
	Возврат СтандартныеПодсистемыСервер.НеобходимоОбновлениеПараметровРаботыПрограммы(); 	
КонецФункции


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);


КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеНедостачТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.СписаниеНедостачТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.СписаниеНедостачТоваров);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОстаткиТоваровОрганизаций(КомандыОтчетов);

КонецПроцедуры


// Возвращает текст запроса для получениях доступных назначений
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Возврат Справочники.Назначения.ТекстЗапросаВсехНазначений(ПараметрыФормированияЗапроса);
	
КонецФункции

// Возвращает текст запроса для записи данных в регистр сведений ДанныеВнутреннихДокументов
//
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДанныеВнутреннихДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер,
	|	Документ.Дата,
	|	Документ.Организация,
	|	Документ.Склад,
	|	Документ.Подразделение,
	|	Документ.Ответственный,
	|	Документ.Комментарий,
	|	"""" КАК Дополнительно,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваров) КАК ХозяйственнаяОперация,
	|	"""" КАК Статус,
	|	Документ.Проведен,
	|	Документ.ПометкаУдаления
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет реквизиты выбранного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнутреннееПотреблениеТоваров - Ссылка на документ
//
// Возвращаемое значение:
//	Структура - реквизиты внутреннего потребления товаров
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
	Иначе
		Дата = Дата(1,1,1);
		Организация = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация",
		Дата,
		Организация,);
	
	Возврат СтруктураРеквизитов;

КонецФункции

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.СписаниеНедостачТоваров";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;            
	
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции


#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаТоварыКОформлениюИзлишковНедостач(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРозничныеПродажиПодакцизныхТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Ссылка,
	|	ДанныеДокумента.Дата              КАК Период,
	|	ДанныеДокумента.Организация       КАК Организация,
	|	ДанныеДокумента.Склад             КАК Склад,
	|	ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеДокумента.СтатьяРасходов    КАК СтатьяРасходов,
	|	ДанныеДокумента.Подразделение     КАК Подразделение,
	|	ДанныеДокумента.СтатьяДекларацииПоАкцизномуНалогу КАК СтатьяДекларацииПоАкцизномуНалогу,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|				И ДанныеДокумента.Дата >= ДанныеДокумента.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                            КАК ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты);

	Запрос.УстановитьПараметр("Ссылка",                  ДокументСсылка);
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Склад",                   Реквизиты.Склад);
	Запрос.УстановитьПараметр("Организация",             Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтатьяРасходов",          Реквизиты.СтатьяРасходов);
	Запрос.УстановитьПараметр("АналитикаРасходов",       Реквизиты.АналитикаРасходов);
	Запрос.УстановитьПараметр("Подразделение",           Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",   Перечисления.ХозяйственныеОперации.СписаниеТоваров);
	Запрос.УстановитьПараметр("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", 
	                                                     Реквизиты.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов", 
	                                                        ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("ИспользоватьПартионныйУчет", ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет"));
	Запрос.УстановитьПараметр("СтатьяДекларацииПоАкцизномуНалогу",   Реквизиты.СтатьяДекларацииПоАкцизномуНалогу);
	Запрос.УстановитьПараметр("СтавкаАкцизногоНалога",   УчетАкцизногоНалога.ПолучитьСтавкуАкцизногоНалога(Реквизиты.СтатьяДекларацииПоАкцизномуНалогу));
	Запрос.УстановитьПараметр("Валюта",                          Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",  Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",      Константы.ВалютаУправленческогоУчета.Получить());
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Склад",  Реквизиты.Склад);
	Запрос.УстановитьПараметр("Серия",  Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ВидЗапасов.Комитент   КАК Склад,
	|	Ключи.Номенклатура           КАК Номенклатура,
	|	Ключи.Характеристика         КАК Характеристика,
	|	&Серия                       КАК Серия
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.ВидыЗапасов КАК Товары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО
	|		Товары.АналитикаУчетаНоменклатуры = Ключи.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		Ключи.Номенклатура           = Аналитика.Номенклатура
	|		И Ключи.Характеристика       = Аналитика.Характеристика
	|		И Товары.ВидЗапасов.Комитент = Аналитика.Склад
	|		И &Серия                     = Аналитика.Серия
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|	И Товары.Ссылка = &Ссылка
	|	И Товары.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыКОформлениюИзлишковНедостач(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюИзлишковНедостач";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|		  ТОГДА ТаблицаТовары.Назначение
	|		  ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Количество               КАК КОформлениюАктов
	|
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	&ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|   И ТаблицаТовары.Количество <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|		  ТОГДА ТаблицаТовары.Назначение
	|		  ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Количество               КАК ВНаличии
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (НЕ &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
	|	И ТаблицаТовары.Количество <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ                                  КАК ВРезервеПодЗаказ,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	(НЕ &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|   И ТаблицаТовары.Количество <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура   КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|		  ТОГДА ТаблицаСерии.Назначение
	|		  ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                       КАК Назначение,
	|	ТаблицаСерии.Серия          КАК Серия,
	|	ТаблицаСерии.Количество     КАК Количество,
	|	&Склад                      КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтражениеНедостач) КАК СкладскаяОперация,
	|	&Ссылка                     КАК Документ,
	|	&Период                     КАК Период,
	|	&Ссылка                     КАК Регистратор,
	|	НЕ &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Строки.НомерСтроки КАК НомерСтроки,
	|	Строки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	АналитикаКомитента.КлючАналитики КАК АналитикаУчетаКомитента,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|
	|	СправочникВидЗапасов.РеализацияЗапасовДругойОрганизации КАК РеализацияЗапасовДругойОрганизации,
	|	СправочникВидЗапасов.ВидЗапасовВладельца КАК ВидЗапасовВладельца,
	|	Строки.ВидЗапасов КАК ВидЗапасов,
	|	Строки.ВидЗапасов.НалоговоеНазначение КАК НалоговоеНазначение,
	|   ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность) КАК ЦелевоеНалоговоеНазначение, 
	|	Строки.ВидЗапасов.Валюта КАК Валюта,
	|	Строки.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	Строки.ВидЗапасов.Валюта КАК ВидЗапасовВалюта,
	|	Строки.НомерГТД КАК НомерГТД,
	|	Строки.Количество КАК Количество,
	|	ВЫБОР КОГДА СправочникВидЗапасов.Комитент ССЫЛКА Справочник.Организации
	|		ТОГДА АналитикаРасчетовИнтеркампани.КлючАналитики
	|		ИНАЧЕ АналитикаРасчетов.КлючАналитики
	|	КОНЕЦ КАК АналитикаРасчетовСКомитентом
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.ВидыЗапасов КАК Строки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК СправочникВидЗапасов
	|	ПО
	|		Строки.ВидЗапасов = СправочникВидЗапасов.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		Строки.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаКомитента
	|	ПО
	|		Аналитика.Номенклатура = АналитикаКомитента.Номенклатура
	|		И Аналитика.Характеристика = АналитикаКомитента.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = АналитикаКомитента.Серия
	|		И Строки.ВидЗапасов.Комитент = АналитикаКомитента.Склад
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетов
	|		ПО АналитикаРасчетов.Организация = &Организация
	|		И АналитикаРасчетов.Партнер = СправочникВидЗапасов.Комитент
	|		И АналитикаРасчетов.Контрагент = СправочникВидЗапасов.Контрагент
	|		И АналитикаРасчетов.Договор = СправочникВидЗапасов.Договор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовИнтеркампани
	|		ПО АналитикаРасчетовИнтеркампани.Организация = &Организация
	|		И АналитикаРасчетовИнтеркампани.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И АналитикаРасчетовИнтеркампани.Контрагент = СправочникВидЗапасов.Контрагент
	|		И АналитикаРасчетовИнтеркампани.Договор = СправочникВидЗапасов.Договор
	|ГДЕ
	|	Строки.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрЗапросаКорВидЗапасов(Запрос)
	
	Если Запрос.Параметры.Свойство("КорВидЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	КорВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
			Запрос.Параметры.Организация, 
			Перечисления.ХозяйственныеОперации.СписаниеТоваров,
			Неопределено,
			Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность 
	);
	
	Запрос.УстановитьПараметр("КорВидЗапасов", КорВидЗапасов);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрЗапросаКорВидЗапасов(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Строки.НомерСтроки                      КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	Строки.АналитикаУчетаНоменклатуры       КАК АналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР КОГДА Строки.РеализацияЗапасовДругойОрганизации ТОГДА
	|		Строки.ВидЗапасовВладельца.Организация
	|	ИНАЧЕ
	|		&Организация
	|	КОНЕЦ КАК Организация,
	|
	|	ВЫБОР КОГДА Строки.РеализацияЗапасовДругойОрганизации ТОГДА
	|		Строки.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		Строки.ВидЗапасов
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	Строки.НомерГТД                         КАК НомерГТД,
	|	Строки.Количество                       КАК Количество,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Организация                            КАК ОрганизацияОтгрузки,
	|	Строки.Номенклатура                     КАК Номенклатура,
	|	Строки.Характеристика                   КАК Характеристика,
	|	Строки.ЦелевоеНалоговоеНазначение       КАК НалоговоеНазначение,
	|	&КорВидЗапасов                          КАК КорВидЗапасов,
	|	&АналитикаРасходов                      КАК АналитикаРасходов,
	|	&СтатьяРасходов                         КАК СтатьяРасходов
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюОтчетовКомитенту";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрЗапросаКорВидЗапасов(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Строки.НомерСтроки                     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	Строки.Валюта                          КАК Валюта,
	|	Строки.ВидЗапасов                      КАК ВидЗапасов,
	|	Строки.Номенклатура                    КАК Номенклатура,
	|	Строки.Характеристика                  КАК Характеристика,
	|	Строки.НомерГТД                        КАК НомерГТД,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	Строки.Количество                      КАК Количество,
	|	0                                      КАК КоличествоСписано,
	|	0                                      КАК СуммаВыручки,
	|	&КорВидЗапасов                         КАК КорВидЗапасов,
	|	Строки.ЦелевоеНалоговоеНазначение      КАК НалоговоеНазначение, 
	|	Строки.АналитикаУчетаКомитента         КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|ГДЕ
	|	Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И Строки.РеализацияЗапасовДругойОрганизации
	|	И Строки.ВидЗапасов.СпособПередачиТоваров <> ЗНАЧЕНИЕ(Перечисление.СпособыПередачиТоваров.ПередачаНаКомиссию)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.НомерСтроки                     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	Строки.Валюта                          КАК Валюта,
	|	Строки.ВидЗапасов                      КАК ВидЗапасов,
	|	Строки.Номенклатура                    КАК Номенклатура,
	|	Строки.Характеристика                  КАК Характеристика,
	|	Строки.НомерГТД                        КАК НомерГТД,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	0                                      КАК Количество,
	|	Строки.Количество                      КАК КоличествоСписано,
	|	0                                      КАК СуммаВыручки,
	|	&КорВидЗапасов                         КАК КорВидЗапасов,
	|	Строки.ЦелевоеНалоговоеНазначение      КАК НалоговоеНазначение, 
	|	Строки.АналитикаУчетаКомитента         КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|ГДЕ
	|	Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.НомерСтроки                     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	Строки.Валюта                          КАК Валюта,
	|	ВидыЗапасовВладельца.Ссылка            КАК ВидЗапасов,
	|	Строки.Номенклатура                    КАК Номенклатура,
	|	Строки.Характеристика                  КАК Характеристика,
	|	Строки.НомерГТД                        КАК НомерГТД,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	0                                      КАК Количество,
	|	Строки.Количество                      КАК КоличествоСписано,
	|	0                                      КАК СуммаВыручки,
	|	&КорВидЗапасов                         КАК КорВидЗапасов,
	|	Строки.ЦелевоеНалоговоеНазначение      КАК НалоговоеНазначение, 
	|	КлючиКомитента.КлючАналитики           КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
	|	ПО Строки.ВидЗапасов.ВидЗапасовВладельца = ВидыЗапасовВладельца.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиКомитента
	|	ПО Строки.Номенклатура = КлючиКомитента.Номенклатура
	|		И Строки.Характеристика = КлючиКомитента.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = КлючиКомитента.Серия
	|		И ВидыЗапасовВладельца.Комитент = КлючиКомитента.Склад
	|ГДЕ
	|	Строки.РеализацияЗапасовДругойОрганизации
	|	И Строки.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрЗапросаКорВидЗапасов(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	Строки.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		Строки.АналитикаУчетаКомитента
	|	ИНАЧЕ
	|		Строки.АналитикаУчетаНоменклатуры
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			&КорВидЗапасов
	|		ИНАЧЕ
	|			Строки.ВидЗапасов
	|		КОНЕЦ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ВидЗапасов,
	|	Строки.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	Строки.Количество КАК Количество,
	|
	|	Неопределено КАК КорРазделУчета,
	|	&КорВидЗапасов КАК КорВидЗапасов,
	|	Строки.ЦелевоеНалоговоеНазначение КАК КорНалоговоеНазначение,
	|	Неопределено КАК КорАналитикаУчетаНоменклатуры,
	|	&Подразделение КАК Подразделение,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	&СтатьяРасходов КАК СтатьяРасходовСписания,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Строки.АналитикаРасчетовСКомитентом КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|ГДЕ
	|	Строки.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	Строки.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	Строки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|	КОНЕЦ КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		Строки.ВидЗапасов
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ВидЗапасов,
	|	Строки.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	Строки.Количество КАК Количество,
	|
	|	Неопределено КАК КорРазделУчета,
	|	&КорВидЗапасов КАК КорВидЗапасов,
	|	Строки.ЦелевоеНалоговоеНазначение КАК КорНалоговоеНазначение,
	|	Неопределено КАК КорАналитикаУчетаНоменклатуры,
	|	&Подразделение КАК Подразделение,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	&СтатьяРасходов КАК СтатьяРасходовСписания,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Строки.АналитикаРасчетовСКомитентом КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|ГДЕ
	|	Строки.ТипЗапасов В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок, 
	|	НомерСтрокиДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураДоходыРасходы";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрЗапросаКорВидЗапасов(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&Склад КАК Склад,
	|	ТаблицаТовары.ТипЗапасов КАК ТипЗапасов,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|   	ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	&СтатьяРасходов КАК СтатьяДоходовРасходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|
	|	ТаблицаТовары.Количество КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ 
	|		ТаблицаТовары.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры
	|
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	ТаблицаТовары.АналитикаУчетаКомитента КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.АналитикаУчетаКомитента.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|   	&КорВидЗапасов
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	&СтатьяРасходов КАК СтатьяДоходовРасходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|
	|	ТаблицаТовары.Количество КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ 
	|		ТаблицаТовары.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКПередаче";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Склад КАК Склад,
	|	ТаблицаВидыЗапасов.ВидЗапасовВладельца.Организация КАК ОрганизацияВладелец,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасовПродавца,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|   ТаблицаВидыЗапасов.ЦелевоеНалоговоеНазначение КАК НалоговоеНазначение 
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                      КАК Период,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&Склад                       КАК Склад,
	|	ТаблицаТовары.Назначение     КАК Назначение,
	|	-ТаблицаТовары.Количество    КАК КЗаказу,
	|	ТаблицаТовары.Количество     КАК НаличиеПодЗаказ
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)	
	|	И ТаблицаТовары.Количество <> 0
	|	И (НЕ &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
		
КонецФункции


Функция ТекстЗапросаТаблицаРозничныеПродажиПодакцизныхТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РозничныеПродажиПодакцизныхТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА &СтавкаАкцизногоНалога = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаАкцизногоНалога / &СтавкаАкцизногоНалога
	|	КОНЕЦ КАК БазаАкцизногоНалога,
	|	Товары.СуммаАкцизногоНалога,
	|	ЛОЖЬ КАК ДляКоммерческогоИспользования,
	|	&СтатьяДекларацииПоАкцизномуНалогу КАК СтатьяДекларацииПоАкцизномуНалогу
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &СтатьяДекларацииПоАкцизномуНалогу <> ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	   
КонецФункции

Функция ТекстЗапросаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтДанныеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВтДанныеРасходы.Дата КАК Период,
	|	ВтДанныеРасходы.Организация,
	|	ВтДанныеРасходы.Подразделение,
	|	ВтДанныеРасходы.СтатьяРасходов,
	|	ВтДанныеРасходы.АналитикаРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы) КАК ХозяйственнаяОперация,
	|	ВтДанныеРасходы.Сумма
	|ИЗ
	|	ВтДанныеРасходы КАК ВтДанныеРасходы";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтДанныеРасходы";       
	
	УстановитьПараметрКоэффициентПересчетаВВалютуУпр(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документ.Организация КАК Организация,
	|	Документ.Дата КАК Дата,
	|	Документ.Подразделение КАК Подразделение,
	|	Документ.СтатьяРасходов КАК СтатьяРасходов,
	|	Документ.АналитикаРасходов КАК АналитикаРасходов,
	|	СтатьиРасходов.ВариантРаспределенияРасходов КАК ВариантРаспределенияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	СУММА(Строки.СуммаАкцизногоНалога * &КоэффициентПересчетаВВалютуУпр) КАК Сумма,
	|	СУММА(Строки.СуммаАкцизногоНалога * &КоэффициентПересчетаВВалютуУпр) КАК СуммаБезНДС,
	|	СУММА(Строки.СуммаАкцизногоНалога) КАК СуммаРегл,
	|	СУММА(Строки.СуммаАкцизногоНалога) КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность) КАК НалоговоеНазначение,
	|	СУММА(Строки.СуммаАкцизногоНалога) КАК СуммаВВалюте
	|ПОМЕСТИТЬ ВтДанныеРасходы
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК Строки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров КАК Документ
	|		ПО Строки.Ссылка = Документ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО (Документ.СтатьяРасходов = СтатьиРасходов.Ссылка)
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И Строки.СуммаАкцизногоНалога > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.СтатьяРасходов,
	|	Документ.АналитикаРасходов,
	|	СтатьиРасходов.ВариантРаспределенияРасходов,
	|	Документ.Дата,
	|	Документ.Подразделение,
	|	Документ.Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрКоэффициентПересчетаВВалютуУпр(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр") Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентПересчетаВВалютуУпр = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
	                                   Запрос.Параметры.Валюта, 
	                                   Запрос.Параметры.ВалютаУправленческогоУчета, 
	                                   Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр", КоэффициентПересчетаВВалютуУпр);
	
КонецПроцедуры


#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Акт о списании товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСписанияТоваров";
	КомандаПечати.Представление = НСтр("ru='Акт о списании товаров';uk='Акт про списання товарів'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияТоваров") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"АктСписанияТоваров",
			НСтр("ru='Акт о списании товаров';uk='Акт про списання товарів'"),
			СформироватьПечатнуюФормуАктСписанияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,,Истина)
				
	КонецЕсли;			
	
	
КонецПроцедуры

//	Параметры:
//			МассивДокументов - Массив - массив ссылок на документы, на даты которых нужно получить курсы валют
//

Функция СформироватьПечатнуюФормуАктСписанияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДопКолонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьДопКолонку = ЗначениеЗаполнено(ДопКолонка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Склад КАК Склад,
	|	Документ.Подразделение КАК Подразделение,
	|	Документ.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Подразделение) КАК ПодразделениеПредставление,
	|	Документ.Организация.НаименованиеСокращенное КАК ОрганизацияПредставление,
	|	Документ.Организация.Префикс КАК Префикс,
	|	ВЫБОР
	|		КОГДА Документ.ВидЦены<>ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ВыводитьСебестоимость,
	|	Документ.ВидЦены КАК ВидЦен,
	|	Документ.ВидЦены.ВалютаЦены КАК Валюта,
	|	Документ.ПредседательКомиссии КАК ПредседательКомиссии,
	|	Документ.ЧленКомиссии1 КАК ЧленКомиссии1,
	|	Документ.ЧленКомиссии2 КАК ЧленКомиссии2,
	|	Документ.ЧленКомиссии3 КАК ЧленКомиссии3,
	|	Документ.ДолжностьПредседателяКомиссии КАК ДолжностьПредседателяКомиссии,
	|	Документ.ДолжностьЧленаКомиссии1 КАК ДолжностьЧленаКомиссии1,
	|	Документ.ДолжностьЧленаКомиссии2 КАК ДолжностьЧленаКомиссии2,
	|	Документ.ДолжностьЧленаКомиссии3 КАК ДолжностьЧленаКомиссии3
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	СписаниеНедостачТоваровТовары.Ссылка КАК Ссылка,
	|	СписаниеНедостачТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	СписаниеНедостачТоваровТовары.Номенклатура КАК Номенклатура,
	|	СписаниеНедостачТоваровТовары.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|			/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|		КАК ЧИСЛО(15,2)) * СписаниеНедостачТоваровТовары.Количество КАК Сумма,
	|
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|			/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|		КАК ЧИСЛО(15,2)) КАК Цена,
	|	СписаниеНедостачТоваровТовары.Количество КАК Количество,
	|	" + ?(ВыводитьДопКолонку, "СписаниеНедостачТоваровТовары.Номенклатура." + ДопКолонка +" КАК ДопКолонка,", "") + "
	|	СписаниеНедостачТоваровТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	СписаниеНедостачТоваровТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеНедостачТоваровТовары.Серия) КАК СерияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеНедостачТоваровТовары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК СписаниеНедостачТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ДатаЦен, ДЕНЬ),
	|				(ВидЦены, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						&ВидЦен,
	|						СписаниеНедостачТоваровТовары.Номенклатура,
	|						СписаниеНедостачТоваровТовары.Характеристика
	|					ИЗ
	|						Документ.СписаниеНедостачТоваров.Товары КАК СписаниеНедостачТоваровТовары
	|					ГДЕ
	|						СписаниеНедостачТоваровТовары.Ссылка = &ТекущийДокумент)) КАК ЦеныНоменклатуры
	|		ПО СписаниеНедостачТоваровТовары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И СписаниеНедостачТоваровТовары.Характеристика = ЦеныНоменклатуры.Характеристика
	|ГДЕ
	|	СписаниеНедостачТоваровТовары.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ЗапросПоТоварам.Текст = СтрЗаменить(
				ЗапросПоТоварам.Текст, 
				"&ТекстЗапросаКоэффициентУпаковки", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ЦеныНоменклатуры.Упаковка",
				"ЦеныНоменклатуры.Номенклатура"));


	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	РеквизитыДокумента 	= Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента 	= НСтр("ru='Акт о списании товаров';uk= 'Акт про списання товарів'", КодЯзыкаПечать);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеНедостачТоваров_АктОСписанииТоваров";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеНедостачТоваров.ПФ_MXL_АктОСписанииТоваров",КодЯзыкаПечать);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Иначе
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокБезПодразделения");
	КонецЕсли;
	
	
	
	Если Не ВыводитьДопКолонку Тогда
		Макет.Область("ПерваяКолонкаТовара").ШиринаКолонки = Макет.Область("ПерваяКолонкаТовара").ШиринаКолонки
			+ Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	// При печати возможно два варианта:
	// 1. Без себестоимости
	ОбластьНомераШапкаБезСуммы         = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодовШапкаБезСуммы          = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТоварШапкаБезСуммы          = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьДанныеШапкаБезСуммы         = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	
	ОбластьНомераСтрокаБезСуммы        = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрокаБезСуммы         = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТоварСтрокаБезСуммы         = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьДанныхСтрокаБезСуммы        = Макет.ПолучитьОбласть("Строка|Данные");
	
	ОбластьНомераПодвалТаблицыБезСуммы = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
	ОбластьКодовПодвалТаблицыБезСуммы  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	ОбластьТоварПодвалТаблицыБезСуммы  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
	ОбластьДанныхПодвалТаблицыБезСуммы = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
	
	ОбластьКоличествоВсегоБезСуммы     = Макет.ПолучитьОбласть("КоличествоВсего");

	// 2. С себестоимостью
	ОбластьНомераШапкаССуммой          = Макет.ПолучитьОбласть("ШапкаТаблицыССуммой|НомерСтроки");
	ОбластьКодовШапкаССуммой           = Макет.ПолучитьОбласть("ШапкаТаблицыССуммой|КолонкаКодов");
	ОбластьТоварШапкаССуммой           = Макет.ПолучитьОбласть("ШапкаТаблицыССуммой|ТоварССуммой");
	ОбластьДанныеШапкаССуммой          = Макет.ПолучитьОбласть("ШапкаТаблицыССуммой|ДанныеССуммой");
	
	ОбластьНомераСтрокаССуммой         = Макет.ПолучитьОбласть("СтрокаССуммой|НомерСтроки");
	ОбластьКодовСтрокаССуммой          = Макет.ПолучитьОбласть("СтрокаССуммой|КолонкаКодов");
	ОбластьТоварСтрокаССуммой          = Макет.ПолучитьОбласть("СтрокаССуммой|ТоварССуммой");
	ОбластьДанныхСтрокаССуммой         = Макет.ПолучитьОбласть("СтрокаССуммой|ДанныеССуммой");
	
	ОбластьНомераПодвалТаблицыССуммой  = Макет.ПолучитьОбласть("ПодвалТаблицыССуммой|НомерСтроки");
	ОбластьКодовПодвалТаблицыССуммой   = Макет.ПолучитьОбласть("ПодвалТаблицыССуммой|КолонкаКодов");
	ОбластьТоварПодвалТаблицыССуммой   = Макет.ПолучитьОбласть("ПодвалТаблицыССуммой|ТоварССуммой");
	ОбластьДанныхПодвалТаблицыССуммой  = Макет.ПолучитьОбласть("ПодвалТаблицыССуммой|ДанныеССуммой");
		
	ОбластьКоличествоВсегоССуммой      = Макет.ПолучитьОбласть("КоличествоВсегоССуммой");

	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	ПервыйДокумент = Истина;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ВыборкаПоДокументам.Ссылка);
		ЗапросПоТоварам.УстановитьПараметр("ДатаЦен", ВыборкаПоДокументам.Дата);
		ЗапросПоТоварам.УстановитьПараметр("ВидЦен", ВыборкаПоДокументам.ВидЦен);
		РезультатыПоТоварам 	= ЗапросПоТоварам.ВыполнитьПакет();
		ВыборкаПоДатам			= РезультатыПоТоварам[0].Выбрать();
		
		Если ВыборкаПоДокументам.ВыводитьСебестоимость Тогда
			ОбластьНомераШапка         = ОбластьНомераШапкаССуммой;
			ОбластьКодовШапка          = ОбластьКодовШапкаССуммой;
			ОбластьТоварШапка          = ОбластьТоварШапкаССуммой;
			ОбластьДанныеШапка         = ОбластьДанныеШапкаССуммой;

			ОбластьНомераСтрока        = ОбластьНомераСтрокаССуммой;
			ОбластьКодовСтрока         = ОбластьКодовСтрокаССуммой;
			ОбластьТоварСтрока         = ОбластьТоварСтрокаССуммой;
			ОбластьДанныхСтрока        = ОбластьДанныхСтрокаССуммой;
			
			ОбластьНомераПодвалТаблицы = ОбластьНомераПодвалТаблицыССуммой;
			ОбластьКодовПодвалТаблицы  = ОбластьКодовПодвалТаблицыССуммой;
			ОбластьТоварПодвалТаблицы  = ОбластьТоварПодвалТаблицыССуммой;
			ОбластьДанныхПодвалТаблицы = ОбластьДанныхПодвалТаблицыССуммой;
		
			ОбластьКоличествоВсего     = ОбластьКоличествоВсегоССуммой;			
		Иначе
			ОбластьНомераШапка         = ОбластьНомераШапкаБезСуммы;
			ОбластьКодовШапка          = ОбластьКодовШапкаБезСуммы;
			ОбластьТоварШапка          = ОбластьТоварШапкаБезСуммы;
			ОбластьДанныеШапка         = ОбластьДанныеШапкаБезСуммы;

			ОбластьНомераСтрока        = ОбластьНомераСтрокаБезСуммы;
			ОбластьКодовСтрока         = ОбластьКодовСтрокаБезСуммы;
			ОбластьТоварСтрока         = ОбластьТоварСтрокаБезСуммы;
			ОбластьДанныхСтрока        = ОбластьДанныхСтрокаБезСуммы;
			
			ОбластьНомераПодвалТаблицы = ОбластьНомераПодвалТаблицыБезСуммы;
			ОбластьКодовПодвалТаблицы  = ОбластьКодовПодвалТаблицыБезСуммы;
			ОбластьТоварПодвалТаблицы  = ОбластьТоварПодвалТаблицыБезСуммы;
			ОбластьДанныхПодвалТаблицы = ОбластьДанныхПодвалТаблицыБезСуммы;
		
			ОбластьКоличествоВсего     = ОбластьКоличествоВсегоБезСуммы;			
			
		КонецЕсли;

		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента, КодЯзыкаПечать);
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);			
		
		ОбластьЗаголовок.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,ИНН,НомерСвидетельства",,КодЯзыкаПечать);
		ОбластьЗаголовок.Параметры.СкладПредставление = СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.СкладПредставление);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		
		// Вывод шапки.
		ТабДокумент.Вывести(ОбластьНомераШапка);
		
		Если ВыводитьДопКолонку Тогда
			ОбластьКодовШапка.Параметры.ДопКолонка = ДопКолонка;
			ТабДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьТоварШапка);
		ТабДокумент.Присоединить(ОбластьДанныеШапка);
		
		ВсегоНаименований = 0;
		
		Сумма          = 0;
		
		// Выводим многострочную часть документа
		ВыборкаПоСтрокам	= РезультатыПоТоварам[0].Выбрать();
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			ОбластьНомераСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Вывести(ОбластьНомераСтрока);
			Если ВыводитьДопКолонку Тогда
				ОбластьКодовСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
				ТабДокумент.Присоединить(ОбластьКодовСтрока);
			КонецЕсли;
			
			// Номенклатура.
			ОбластьТоварСтрока.Параметры.Номенклатура = ВыборкаПоСтрокам.Номенклатура;
			ОбластьТоварСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокам.НоменклатураПредставление,
				ВыборкаПоСтрокам.ХарактеристикаПредставление,
				ВыборкаПоСтрокам.СерияПредставление);
			
			ТабДокумент.Присоединить(ОбластьТоварСтрока);
			// Данные количестве.
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Присоединить(ОбластьДанныхСтрока);
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Сумма = Сумма + ВыборкаПоСтрокам.Сумма;
		КонецЦикла;
		
		// Вывод итогов.
		ТабДокумент.Вывести(ОбластьНомераПодвалТаблицы);
		Если ВыводитьДопКолонку Тогда
			ТабДокумент.Присоединить(ОбластьКодовПодвалТаблицы);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТоварПодвалТаблицы);
		Если ВыборкаПоДокументам.ВыводитьСебестоимость Тогда
			ОбластьДанныхПодвалТаблицы.Параметры.Всего = Сумма;
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанныхПодвалТаблицы);
		Если ВыборкаПоДокументам.ВыводитьСебестоимость Тогда
			ТекстИтоговойСтроки = НСтр("ru='Всего наименований %ВсегоНаименований%, на сумму %СуммаДокумента% ';uk= 'Всього найменувань %ВсегоНаименований%, на суму %СуммаДокумента% '", КодЯзыкаПечать);
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(Сумма, ВыборкаПоДокументам.Валюта));
		Иначе
			ТекстИтоговойСтроки = НСтр("ru='Всего наименований %ВсегоНаименований%';uk= 'Всього найменувань %ВсегоНаименований%'", КодЯзыкаПечать);			
		КонецЕсли;
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьКоличествоВсего.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		Если ВыборкаПоДокументам.ВыводитьСебестоимость Тогда
			ОбластьКоличествоВсего.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, ВыборкаПоДокументам.Валюта, , КодЯзыкаПечать);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьКоличествоВсего);
		
		// Вывод подписей.
		ОбластьПодписи.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписи.Параметры.ПредседательКомиссииФИО = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.ПредседательКомиссии);		
		ОбластьПодписи.Параметры.ЧленКомиссии1ФИО        = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.ЧленКомиссии1);		
		ОбластьПодписи.Параметры.ЧленКомиссии2ФИО        = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.ЧленКомиссии2);		
		ОбластьПодписи.Параметры.ЧленКомиссии3ФИО        = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.ЧленКомиссии3);		
		ТабДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли

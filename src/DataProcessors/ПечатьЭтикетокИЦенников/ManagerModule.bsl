#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Возвращаемое значение:
//  Стрруктура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, Режим) Экспорт
	
	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда
		ИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать();
	Иначе
		ИсходныеДанные = Неопределено;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Таблица",                             Неопределено);
	СтруктураРезультата.Вставить("СоответствиеПолейСКДКолонкамТаблицы", Новый Соответствие);

#Область ПодготовкаСхемыКомпоновкиДанныхИКомпоновщикаНастроекСкд
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
	 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкиНоменклатуры",
			"ИсходныеДанные.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЕдиничныеУпаковкиВладельцы.Упаковка",
			"ЕдиничныеУпаковкиВладельцы.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки3",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ИсходныеДанные.Упаковка",
			"ИсходныеДанные.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки4",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЕдиничныеУпаковкиНоменклатур.Упаковка",
			"ЕдиничныеУпаковкиНоменклатур.Номенклатура"));
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	Если Режим = "Товары" Тогда
		// Заполнение параметров.
		Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
			Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр
				УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
			Иначе
				УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
			КонецЕсли;
		КонецЦикла;
		УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя",        ТекущаяДата());
		УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Если Режим = "Товары" Тогда
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	КонецЕсли;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

#КонецОбласти

#Область ПодготовкаВспомогательныхДанныхДляСопоставленияПолейШаблонаИСкд
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;

#КонецОбласти

#Область ВыполнениеЗапроса
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Если Режим = "Товары" Тогда
		// Подмена запроса для расчета цен...
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			
			ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ЦеныНоменклатурыСрезПоследних.Цена
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
			|          * 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Число(15,2)) ";
			
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки1",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыСрезПоследних.Упаковка",
					"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки2",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ИсходныеДанныеПоследнийЗапрос.Упаковка",
					"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
			
			ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследнихДополнительно.Цена";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ЦеныНоменклатурыСрезПоследнихДополнительно.Цена
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
			|          * 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Число(15,2)) ";
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки1",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыСрезПоследнихДополнительно.Упаковка",
					"ЦеныНоменклатурыСрезПоследнихДополнительно.Номенклатура"));
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки2",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ИсходныеДанныеПоследнийЗапрос.Упаковка",
					"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
			
			ЗаменяемыйТекст = "ТоварыНаСкладахОстатки.ВНаличииОстаток";
			ТекстЗамены = " ВЫРАЗИТЬ(
			|          ТоварыНаСкладахОстатки.ВНаличииОстаток
			|          / 
			|          ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Число(15,2)) ";
			ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстЗапросаКоэффициентУпаковки",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ИсходныеДанныеПоследнийЗапрос.Упаковка",
					"ИсходныеДанныеПоследнийЗапрос.Номенклатура"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
			
		КонецЕсли;
		
		// Подмена запроса при печати этикеток...
		Если ИсходныеДанные <> Неопределено Тогда
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Порядок,
			|		0 КАК Количество)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОЛИЧЕСТВО(ИсходныеДанные.КоличествоЦенников)",
			                                         "СУММА(ИсходныеДанные.КоличествоЦенниковДляПечати)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОЛИЧЕСТВО(ИсходныеДанные.КоличествоЭтикеток)",
			                                         "СУММА(ИсходныеДанные.КоличествоЭтикеток)");	
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """Цена""", "ИсходныеДанные.Цена");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ЦенаДополнительно""", "ИсходныеДанные.ЦенаДополнительно");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ДатаПоследнегоИзмененияЦены""", "ИсходныеДанные.ДатаПоследнегоИзмененияЦены");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ДатаПоследнегоИзмененияЦеныДополнительно""", "ИсходныеДанные.ДатаПоследнегоИзмененияЦеныДополнительно");
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СкладскиеЯчейки" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "СерииНоменклатуры" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "Доставка" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
		
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка) КАК Ссылка,
			|		0 КАК Порядок,
			|		0 КАК КоличествоПозиций,
			|		0 КАК Мест,
			|		0 КАК ОбъемНакладной,
			|		0 КАК ВесНакладной)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) КАК Ссылка,
			|		0 КАК Порядок,
			|		0 КАК КоличествоПозиций,
			|		0 КАК Мест,
			|		0 КАК ОбъемНакладной,
			|		0 КАК ВесНакладной)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка) КАК Ссылка,
			|		0 КАК Порядок,
			|		0 КАК КоличествоПозиций,
			|		0 КАК Мест,
			|		0 КАК ОбъемНакладной,
			|		0 КАК ВесНакладной)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.ВозвратТоваровПоставщику.ПустаяСсылка) КАК Ссылка,
			|		0 КАК Порядок,
			|		0 КАК КоличествоПозиций,
			|		0 КАК Мест,
			|		0 КАК ОбъемНакладной,
			|		0 КАК ВесНакладной)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка) КАК Ссылка,
			|		0 КАК Порядок,
			|		0 КАК КоличествоПозиций,
			|		0 КАК Мест,
			|		0 КАК ОбъемНакладной,
			|		0 КАК ВесНакладной)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка) КАК Ссылка,
			|		0 КАК Порядок,
			|		0 КАК КоличествоПозиций,
			|		0 КАК Мест,
			|		0 КАК ОбъемНакладной,
			|		0 КАК ВесНакладной)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "УпаковочныеЛисты" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка) КАК Ссылка,
			|		"""" КАК Штрихкод,
			|		0 КАК Порядок)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;

	КонецЕсли;
	
	СтруктураРезультата.Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЦенникТовары") 
		Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаТовары") Тогда
		
		СформироватьПечатныеФормыЭтикетокИЦенниковТоваров(ПараметрыПечати, ОбъектыПечати, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаСкладскиеЯчейки") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭтикеткиСкладскойЯчейки(ПараметрыПечати, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаСкладскиеЯчейки",
			НСтр("ru='Этикетки складских ячеек';uk='Етикетки складських комірок'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаСерииНоменклатуры") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭтикеткиСерииНоменклатуры(ПараметрыПечати, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаСерииНоменклатуры",
			НСтр("ru='Этикетки серий номенклатуры';uk='Етикетки серій номенклатури'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаДоставки") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭтикеткиДоставки(ПараметрыПечати, ОбъектыПечати, КоллекцияПечатныхФорм);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаДоставки",
			НСтр("ru='Этикетки доставки';uk='Етикетки доставки'"),
			ТабличныйДокумент);
			
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаУпаковочныеЛисты") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭтикеткиУпаковочныеЛисты(ПараметрыПечати, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаУпаковочныеЛисты",
			НСтр("ru='Этикетки упаковочных листов';uk='Етикетки пакувальних аркушів'"),
			ТабличныйДокумент);
			
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПечатныеФормыЭтикетокИЦенниковТоваров(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.Товары);
	
	НужноПечататьЭтикетки = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, "ЭтикеткаТовары") Тогда
		НужноПечататьЭтикетки = Истина;
		КоллекцияПечатныхФормБСП.Удалить(КоллекцияПечатныхФормБСП.Найти(ВРег("ЭтикеткаТовары"), "ИмяВРЕГ"));
	КонецЕсли;
	
	НужноПечататьЦенники = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, "ЦенникТовары") Тогда
		НужноПечататьЦенники = Истина;
		КоллекцияПечатныхФормБСП.Удалить(КоллекцияПечатныхФормБСП.Найти(ВРег("ЦенникТовары"), "ИмяВРЕГ"));
	КонецЕсли;
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаПечатьТовары";
	
	// Собираем используемые поля из шаблонов.
	СоответствиеШаблонов = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И СтрокаТЧ.КоличествоЭтикеток > 0 И НужноПечататьЭтикетки Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И СтрокаТЧ.КоличествоЦенников > 0 И НужноПечататьЦенники Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
		КонецЕсли;
	КонецЦикла;
	Если ДанныеПечати.Свойство("СтруктураМакетаШаблона") И ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение ИЗ СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		Иначе
			СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(ШаблонЭтикетокИЦенников, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Организация", ДанныеПечати.Организация);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоОбмена",                 ДанныеПечати.ПравилоОбмена);
	СтруктураНастроек.ПараметрыДанных.Вставить("МаксимальныйКодВесовогоТовара", ДанныеПечати.МаксимальныйКодВесовогоТовара);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоВыгрузкиВВесы",          ДанныеПечати.ПравилоВыгрузкиВВесы);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены",       ДанныеПечати.ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("Дата",          ДанныеПечати.Дата);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦеныДополнительно", ДанныеПечати.ВидЦеныДополнительно);
	СтруктураНастроек.ПараметрыДанных.Вставить("ДатаДополнительно",    ДанныеПечати.ДатаДополнительно);
	
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;

#Область ПодготовкаСтруктурыДанныхШаблона
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "Товары");

#КонецОбласти

#Область ФормированиеТабличногоДокумента
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		
		Если ((ЗначениеЗаполнено(КлючИЗначение.Ключ) И КлючИЗначение.Ключ.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров) ИЛИ Не ЗначениеЗаполнено(КлючИЗначение.Ключ))
			И НужноПечататьЭтикетки Тогда
			
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Этикетка: "+КлючИЗначение.Ключ;
			ПечатнаяФорма.СинонимМакета        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Этикетка: %1';uk='Етикетка: %1'"), КлючИЗначение.Ключ);
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЭтикетокДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикеткиДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
			
		КонецЕсли;
		
		Если ((ЗначениеЗаполнено(КлючИЗначение.Ключ) И КлючИЗначение.Ключ.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров) ИЛИ Не ЗначениеЗаполнено(КлючИЗначение.Ключ))
			И НужноПечататьЦенники Тогда
			
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Ценник: " + КлючИЗначение.Ключ;
			ПечатнаяФорма.СинонимМакета        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ценник: %1';uk='Вартість: %1'"), КлючИЗначение.Ключ);
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЦенниковДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЦенникаДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		НомерКолонки = 0;
		НомерРяда = 0;
		
		Для Каждого СтрокаТовары Из СтруктураРезультата.Таблица Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0 И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
					ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
				КонецЕсли;
				
				Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
				
				// Применение настроек табличного документа.
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
				
				НомерСтрокиНачало = ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы + 1;

				Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
					Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
						НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
						Если НаименованиеКолонки <> Неопределено Тогда
							Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого Рисунок Из Область.Рисунки Цикл
					
					Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
						
						ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
						Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
							
							ПараметрыШтрихкода = Новый Структура;
							ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
							ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
							ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ЗначениеШтрихкода));
							ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
							ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
							ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта);
							
							Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрНайти(Рисунок.Имя, "ЗнакВалюты") = 1 Тогда
						ЗначениеКодаВалюты = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраКодВалюты())];
						Попытка
							Рисунок.Картинка = Новый Картинка(Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет("ЗнакВалюты" + ЗначениеКодаВалюты), Истина);
						Исключение
							Рисунок.Картинка = Новый Картинка;
						КонецПопытки;
					КонецЕсли;
					
				КонецЦикла;
				
				Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров
					
					НомерКолонки = НомерКолонки + 1;
					
					Если НомерКолонки = 1 Тогда
						
						НомерРяда = НомерРяда + 1;
						
						ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
						
					Иначе
						
						ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
						
					КонецЕсли;
					
					Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
						
						НомерРяда    = 0;
						НомерКолонки = 0;
						
						ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
					ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
						
						НомерКолонки = 0;
						
					КонецЕсли;
					
				КонецЦикла; // Цикл по количеству экземпляров
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров
		
	КонецЦикла;
	
#КонецОбласти
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
			НоваяСтрока = КоллекцияПечатныхФормБСП.Добавить();
			
			НоваяСтрока.ИмяМакета = ПечатнаяФорма.ИмяМакета;
			НоваяСтрока.ИмяВРЕГ   = ВРег(ПечатнаяФорма.ИмяМакета);
			НоваяСтрока.Экземпляров = 1;
			
			НоваяСтрока.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
			НоваяСтрока.СинонимМакета = ПечатнаяФорма.СинонимМакета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуЭтикеткиСкладскойЯчейки(ДанныеПечати, ОбъектыПечати)
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Ячейка");
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСкладскиеЯчейки";
	
	ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	
	СтруктураНастроек.ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.СкладскиеЯчейки);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или Не ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ШаблонЭтикетки.Шаблон.Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "СкладскиеЯчейки");
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ЗначениеШтрихкода));
					ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта);
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭтикеткиДоставки(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Распоряжение");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикетки");
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаДоставка";
	
	// Собираем используемые поля из шаблонов.
	ТаблицаДоставки = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
	СоответствиеШаблонов = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ТаблицаДоставки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
	КонецЦикла;
	Если ДанныеПечати.Свойство("СтруктураМакетаШаблона") И ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение ИЗ СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			СтруктураШаблона = ШаблонЭтикетокИЦенников.Шаблон.Получить();
		Иначе
			СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);	
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураНастроек.ИсходныеДанные = ТаблицаДоставки;

#Область ПодготовкаСтруктурыДанныхШаблона
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "Доставка");
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
	
		ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
		ПечатнаяФорма.ИмяМакета            = "Этикетка: "+КлючИЗначение.Ключ;
		ПечатнаяФорма.СинонимМакета        =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Этикетка: %1';uk='Етикетка: %1'"), КлючИЗначение.Ключ);
		ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикетки";
		ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		
	КонецЦикла;
	
#КонецОбласти
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	КоличествоПоВертикали =0;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		НомерРяда    = 0;
		НомерКолонки = 0;
		КоличествоПоВертикали = КоличествоПоВертикали + 1/СтруктураШаблона.КоличествоПоВертикали; 
		Если КоличествоПоВертикали > 1  Тогда
			КоличествоПоВертикали =0;
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		Для Каждого СтрокаТовары Из СтруктураРезультата.Таблица Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
				
				// Применение настроек табличного документа.
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
				
				НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
				Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
					Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
						НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
						Если НаименованиеКолонки <> Неопределено Тогда								
							Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				           
				НомерКолонки = НомерКолонки + 1;
				
				Если НомерКолонки = 1 Тогда
					
					НомерРяда = НомерРяда + 1;
					
					ТабличныйДокумент.Вывести(Область);
					
				Иначе
					
					ТабличныйДокумент.Присоединить(Область);
					
				КонецЕсли;
				
				Если НомерРяда = СтруктураШаблона.КоличествоПоВертикали И НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
					
					НомерРяда    = 0;
					НомерКолонки = 0;
					КоличествоПоВертикали =0;
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
					
					НомерКолонки = 0;
					КоличествоПоВертикали = КоличествоПоВертикали + 1/СтруктураШаблона.КоличествоПоВертикали;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭтикеткиСерииНоменклатуры(ДанныеПечати, ОбъектыПечати)
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("Серия");
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаСерииНоменклатуры";
	
	ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	
	СтруктураНастроек.ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или НЕ ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонЭтикетки, "Шаблон").Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "СерииНоменклатуры");
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ЗначениеШтрихкода));
					ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта);
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭтикеткиУпаковочныеЛисты(ДанныеПечати, ОбъектыПечати)
	
	СтруктураНастроек = СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("УпаковочныйЛист");
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаУпаковочныеЛисты";
	
	Если Не ДанныеПечати.Свойство("ШаблонЭтикетки") Тогда
		ШаблонЭтикетки = Константы.ШаблонЭтикеткиУпаковочногоЛиста.Получить();
		Если Не ЗначениеЗаполнено(ШаблонЭтикетки) Тогда
			ТекстИсключения = НСтр("ru='Печать этикетки не возможна, т.к. в настройках программы не выбран шаблон этикетки по умолчанию. Обратитесь к администратору.';uk='Друк етикетки не можливий, оскільки в настройках програми не вибрано шаблон етикетки по умовчанню. Зверніться до адміністратора.'");
			
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
	Иначе
	    ШаблонЭтикетки = ДанныеПечати.ШаблонЭтикетки;
	КонецЕсли;
	
	Если Не ДанныеПечати.Свойство("КоличествоЭкземпляров") Тогда
		КоличествоЭкземпляров = 1;
	Иначе
	    КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	КонецЕсли;
	
	СтруктураНастроек.ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или НЕ ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонЭтикетки, "Шаблон").Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, "УпаковочныеЛисты");
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
			
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ЗначениеШтрихкода));
					ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта);
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
	Возврат ТабличныйДокумент;
	
КонецФункции
 
#КонецОбласти

#Область Прочее

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		
		ЗначениеПараметраКомпоновкиДанных.Значение = ЗначениеПараметра;
		ЗначениеПараметраКомпоновкиДанных.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраКомпоновкиДанных.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

// Функция возвращает пустую структуру настроек
// 
// Параметры: 
//  Нет
// 
// Возвращаемое значение: 
//  Структура - структура настроек
Функция СтруктураНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные",                         Неопределено);
	СтруктураНастроек.Вставить("ОбязательныеПоля",                       Новый Массив);
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов", Новый Соответствие);
	СтруктураНастроек.Вставить("ПараметрыДанных"    ,                    Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек",                    Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных",         Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ДанныеДляПечатиЭтикетокДоставки(ПараметрКоманды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
				
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК ЗаданиеНаПеревозку,
		|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
		|	ЗаданиеНаПеревозкуРаспоряжения.Вес,
		|	ЗаданиеНаПеревозкуРаспоряжения.Объем,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ЗаданиеНаПеревозкуРаспоряжения.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ДатаВремяРейсаПланС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрдерныйСклад,
		|	ЗаданиеНаПеревозкуРаспоряжения.Склад,
		|	СУММА(ЕСТЬNULL(РасходныйОрдерНаТовары.ВсегоМест,0)) КАК ВсегоМест
		|ПОМЕСТИТЬ РаспоряженияПоЗаданию
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = РасходныйОрдерНаТовары.ЗаданиеНаПеревозку
		|ГДЕ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка В(&ПараметрКоманды)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаданиеНаПеревозкуРаспоряжения.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ЗаданиеНаПеревозкуРаспоряжения.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ДатаВремяРейсаПланС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЗаданиеНаПеревозкуРаспоряжения.Склад,
		|	ЗаданиеНаПеревозкуРаспоряжения.Объем,
		|	ЗаданиеНаПеревозкуРаспоряжения.Вес
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер КАК Перевозчик,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА ДокументРаспоряжение.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ ДокументРаспоряжение.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ КАК ШаблонЭтикетки,
		|	ВЫБОР
		|		КОГДА РаспоряженияПоЗаданию.ОрдерныйСклад
		|			ТОГДА РаспоряженияПоЗаданию.ВсегоМест
		|		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументРаспоряжениеТовары.НомерСтроки)
		|	КОНЕЦ КАК КоличествоПозиций
		|ПОМЕСТИТЬ РаспоряженияИШаблоны
		|ИЗ
		|	РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументРаспоряжение
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжение.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ДокументРаспоряжениеТовары
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжениеТовары.Ссылка
		|			И РаспоряженияПоЗаданию.Склад = ДокументРаспоряжениеТовары.Склад,
		|	Константа.ШаблонЭтикеткиДляДоставки КАК ШаблонЭтикеткиДляДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА ДокументРаспоряжение.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ ДокументРаспоряжение.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	РаспоряженияПоЗаданию.ОрдерныйСклад,
		|	РаспоряженияПоЗаданию.ВсегоМест
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА ДокументРаспоряжение.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ ДокументРаспоряжение.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РаспоряженияПоЗаданию.ОрдерныйСклад
		|			ТОГДА РаспоряженияПоЗаданию.ВсегоМест
		|		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументРаспоряжениеТовары.НомерСтроки)
		|	КОНЕЦ
		|ИЗ
		|	РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументРаспоряжение
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжение.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ДокументРаспоряжениеТовары
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжениеТовары.Ссылка
		|			И РаспоряженияПоЗаданию.Склад = ДокументРаспоряжениеТовары.Склад,
		|	Константа.ШаблонЭтикеткиДляДоставки КАК ШаблонЭтикеткиДляДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА ДокументРаспоряжение.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ ДокументРаспоряжение.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	РаспоряженияПоЗаданию.ОрдерныйСклад,
		|	РаспоряженияПоЗаданию.ВсегоМест
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА ДокументРаспоряжение.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ ДокументРаспоряжение.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РаспоряженияПоЗаданию.ОрдерныйСклад
		|			ТОГДА РаспоряженияПоЗаданию.ВсегоМест
		|		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументРаспоряжениеТовары.НомерСтроки)
		|	КОНЕЦ
		|ИЗ
		|	РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументРаспоряжение
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжение.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ДокументРаспоряжениеТовары
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжениеТовары.Ссылка,
		|	Константа.ШаблонЭтикеткиДляДоставки КАК ШаблонЭтикеткиДляДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА ДокументРаспоряжение.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ ДокументРаспоряжение.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	РаспоряженияПоЗаданию.ОрдерныйСклад,
		|	РаспоряженияПоЗаданию.ВсегоМест
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА ДокументРаспоряжение.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ ДокументРаспоряжение.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РаспоряженияПоЗаданию.ОрдерныйСклад
		|			ТОГДА РаспоряженияПоЗаданию.ВсегоМест
		|		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументРаспоряжениеТовары.НомерСтроки)
		|	КОНЕЦ
		|ИЗ
		|	РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ДокументРаспоряжение
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжение.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ДокументРаспоряжениеТовары
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжениеТовары.Ссылка,
		|	Константа.ШаблонЭтикеткиДляДоставки КАК ШаблонЭтикеткиДляДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА ДокументРаспоряжение.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ ДокументРаспоряжение.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	РаспоряженияПоЗаданию.ОрдерныйСклад,
		|	РаспоряженияПоЗаданию.ВсегоМест
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РаспоряженияПоЗаданию.ОрдерныйСклад
		|			ТОГДА РаспоряженияПоЗаданию.ВсегоМест
		|		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументРаспоряжениеТовары.НомерСтроки)
		|	КОНЕЦ
		|ИЗ
		|	РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ДокументРаспоряжение
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжение.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ДокументРаспоряжениеТовары
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжениеТовары.Ссылка,
		|	Константа.ШаблонЭтикеткиДляДоставки КАК ШаблонЭтикеткиДляДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	РаспоряженияПоЗаданию.ОрдерныйСклад,
		|	РаспоряженияПоЗаданию.ВсегоМест
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РаспоряженияПоЗаданию.ОрдерныйСклад
		|			ТОГДА РаспоряженияПоЗаданию.ВсегоМест
		|		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументРаспоряжениеТовары.НомерСтроки)
		|	КОНЕЦ
		|ИЗ
		|	РаспоряженияПоЗаданию КАК РаспоряженияПоЗаданию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ДокументРаспоряжение
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжение.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ДокументРаспоряжениеТовары
		|		ПО РаспоряженияПоЗаданию.Распоряжение = ДокументРаспоряжениеТовары.Ссылка,
		|	Константа.ШаблонЭтикеткиДляДоставки КАК ШаблонЭтикеткиДляДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияПоЗаданию.Распоряжение,
		|	ДокументРаспоряжение.ПеревозчикПартнер,
		|	РаспоряженияПоЗаданию.Вес,
		|	РаспоряженияПоЗаданию.Объем,
		|	ВЫБОР
		|		КОГДА ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ДокументРаспоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|		ИНАЧЕ ДокументРаспоряжение.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ,
		|	РаспоряженияПоЗаданию.ОрдерныйСклад,
		|	РаспоряженияПоЗаданию.ВсегоМест
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспоряженияИШаблоны.Распоряжение КАК Ссылка,
		|	РаспоряженияИШаблоны.Вес КАК ВесНакладной,
		|	РаспоряженияИШаблоны.Объем КАК ОбъемНакладной,
		|	РаспоряженияИШаблоны.КоличествоПозиций КАК КоличествоПозиций,
		|	РаспоряженияИШаблоны.ШаблонЭтикетки
		|ИЗ
		|	РаспоряженияИШаблоны КАК РаспоряженияИШаблоны
		|ГДЕ
		|	РаспоряженияИШаблоны.ШаблонЭтикетки <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспоряженияИШаблоны.Распоряжение КАК Ссылка,
		|	РаспоряженияИШаблоны.Перевозчик КАК Перевозчик
		|ИЗ
		|	РаспоряженияИШаблоны КАК РаспоряженияИШаблоны
		|ГДЕ
		|	РаспоряженияИШаблоны.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)";
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ИЛИ &ТекстЗапросаВесУпаковки1 = 0
		|				ТОГДА &ТекстЗапросаВесНоменклатуры1 * РеализацияТоваровУслугТовары.Количество
		|			ИНАЧЕ &ТекстЗапросаВесУпаковки1 * РеализацияТоваровУслугТовары.КоличествоУпаковок
		|		КОНЕЦ) КАК ВесНакладной,
		|	СУММА(ВЫБОР
		|			КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ИЛИ &ТекстЗапросаОбъемУпаковки1 = 0
		|				ТОГДА &ТекстЗапросаОбъемНоменклатуры1 * РеализацияТоваровУслугТовары.Количество
		|			ИНАЧЕ &ТекстЗапросаОбъемУпаковки1 * РеализацияТоваровУслугТовары.КоличествоУпаковок
		|		КОНЕЦ) КАК ОбъемНакладной,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслугТовары.НомерСтроки) КАК КоличествоПозиций,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(РеализацияТоваровУслуг.ПеревозчикПартнер.ШаблонЭтикетки, ИСТИНА) = ИСТИНА
		|				ИЛИ РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА РеализацияТоваровУслуг.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|							ИЛИ ЕСТЬNULL(РеализацияТоваровУслуг.Партнер.ШаблонЭтикетки, ИСТИНА) = ИСТИНА
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ РеализацияТоваровУслуг.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ РеализацияТоваровУслуг.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ КАК ШаблонЭтикетки
		|ПОМЕСТИТЬ РеализацияИШаблоны
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка,
		|	Константа.ШаблонЭтикеткиДляДоставки КАК ШаблонЭтикеткиДляДоставки
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка В(&ПараметрКоманды)
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(РеализацияТоваровУслуг.ПеревозчикПартнер.ШаблонЭтикетки, ИСТИНА) = ИСТИНА
		|				ИЛИ РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ВЫБОР
		|					КОГДА РеализацияТоваровУслуг.Партнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|							ИЛИ ЕСТЬNULL(РеализацияТоваровУслуг.Партнер.ШаблонЭтикетки, ИСТИНА) = ИСТИНА
		|						ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|					ИНАЧЕ РеализацияТоваровУслуг.Партнер.ШаблонЭтикетки
		|				КОНЕЦ
		|		ИНАЧЕ РеализацияТоваровУслуг.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ИЛИ &ТекстЗапросаВесУпаковки2 = 0
		|				ТОГДА &ТекстЗапросаВесНоменклатуры2 * ПеремещениеТоваровТовары.Количество
		|			ИНАЧЕ &ТекстЗапросаВесУпаковки2 * ПеремещениеТоваровТовары.КоличествоУпаковок
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ИЛИ &ТекстЗапросаОбъемУпаковки2 = 0
		|				ТОГДА &ТекстЗапросаОбъемНоменклатуры2 * ПеремещениеТоваровТовары.Количество
		|			ИНАЧЕ &ТекстЗапросаОбъемУпаковки2 * ПеремещениеТоваровТовары.КоличествоУпаковок
		|		КОНЕЦ),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровТовары.НомерСтроки),
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ПеремещениеТоваров.ПеревозчикПартнер.ШаблонЭтикетки, ИСТИНА) = ИСТИНА
		|				ИЛИ ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|		ИНАЧЕ ПеремещениеТоваров.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка,
		|	Константа.ШаблонЭтикеткиДляДоставки КАК ШаблонЭтикеткиДляДоставки
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка В(&ПараметрКоманды)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеТоваровТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.ПеревозчикПартнер.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ПеремещениеТоваров.ПеревозчикПартнер.ШаблонЭтикетки, ИСТИНА) = ИСТИНА
		|				ИЛИ ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ТОГДА ШаблонЭтикеткиДляДоставки.Значение
		|		ИНАЧЕ ПеремещениеТоваров.ПеревозчикПартнер.ШаблонЭтикетки
		|	КОНЕЦ
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// 1 Таблица распоряжений на доставку
		|ВЫБРАТЬ
		|	РеализацияИШаблоны.Ссылка,
		|	РеализацияИШаблоны.ВесНакладной,
		|	РеализацияИШаблоны.ОбъемНакладной,
		|	РеализацияИШаблоны.КоличествоПозиций,
		|	РеализацияИШаблоны.ШаблонЭтикетки
		|ИЗ
		|	РеализацияИШаблоны КАК РеализацияИШаблоны
		|ГДЕ
		|	РеализацияИШаблоны.ШаблонЭтикетки <> ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//2 Таблица ошибок
		|ВЫБРАТЬ
		|	РеализацияИШаблоны.Ссылка КАК Ссылка,
		|	РеализацияИШаблоны.Ссылка.ПеревозчикПартнер КАК Перевозчик
		|ИЗ
		|	РеализацияИШаблоны КАК РеализацияИШаблоны
		|ГДЕ
		|	РеализацияИШаблоны.ШаблонЭтикетки = ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка)";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаВесНоменклатуры1", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения", "РеализацияТоваровУслугТовары.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаОбъемНоменклатуры1", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения", "РеализацияТоваровУслугТовары.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаВесУпаковки1", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("РеализацияТоваровУслугТовары.Упаковка", "РеализацияТоваровУслугТовары.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаОбъемУпаковки1", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("РеализацияТоваровУслугТовары.Упаковка", "РеализацияТоваровУслугТовары.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаВесНоменклатуры2", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ПеремещениеТоваровТовары.Номенклатура.ЕдиницаИзмерения", "ПеремещениеТоваровТовары.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаОбъемНоменклатуры2", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ПеремещениеТоваровТовары.Номенклатура.ЕдиницаИзмерения", "ПеремещениеТоваровТовары.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаВесУпаковки2", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("ПеремещениеТоваровТовары.Упаковка", "ПеремещениеТоваровТовары.Номенклатура"));

		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаОбъемУпаковки2", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("ПеремещениеТоваровТовары.Упаковка", "ПеремещениеТоваровТовары.Номенклатура"));

		
		
		Запрос.Текст = ТекстЗапроса;
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ПараметрКоманды",ПараметрКоманды);
	ЗапросПакет = Запрос.ВыполнитьПакет();
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
		ТаблицаДоставки = ЗапросПакет[2].Выгрузить();
		ТаблицаОшибок   = ЗапросПакет[3].Выгрузить();
	Иначе
		ТаблицаДоставки = ЗапросПакет[1].Выгрузить();
		ТаблицаОшибок   = ЗапросПакет[2].Выгрузить();
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивСсылокСОшибками",ТаблицаОшибок.ВыгрузитьКолонку("Ссылка"));
	ТаблицаОшибок.Свернуть("Перевозчик");
	СтруктураВозврата.Вставить("МассивПеревозчиковБезШаблоновЭтикетки",ТаблицаОшибок.ВыгрузитьКолонку("Перевозчик"));
	ЕстьЭтикеткиДляПечати = ТаблицаДоставки.Количество() > 0;
	СтруктураВозврата.Вставить("ЕстьЭтикеткиДляПечати",ЕстьЭтикеткиДляПечати);
	Если ЕстьЭтикеткиДляПечати Тогда
		СтруктураВозврата.Вставить("АдресВХранилище",ПоместитьВоВременноеХранилище(ТаблицаДоставки));
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДанныеДляПечатиЭтикетокУпаковочныеЛисты(ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ОбъектыПечати[0]) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист КАК Ссылка,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.Код КАК Штрихкод
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка В(&ОбъектыПечати)";
	ИначеЕсли ТипЗнч(ОбъектыПечати[0]) = Тип("ДокументСсылка.УпаковочныйЛист") Тогда		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УпаковочныйЛист.Ссылка,
		|	УпаковочныйЛист.Код КАК Штрихкод
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Ссылка В(&ОбъектыПечати)";		
	Иначе 
		Возврат Новый Структура ("ЕстьШаблонЭтикетки",Ложь);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОбъектыПечати",ОбъектыПечати);
	ТаблицаУпаковочныхЛистов = Запрос.Выполнить().Выгрузить();
	ЕстьЭтикеткиДляПечати = ТаблицаУпаковочныхЛистов.Количество() > 0;
	ШаблонЭтикетки = Константы.ШаблонЭтикеткиУпаковочногоЛиста.Получить();
	ЕстьШаблонЭтикетки = ЗначениеЗаполнено(ШаблонЭтикетки);
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьШаблонЭтикетки",ЕстьШаблонЭтикетки);
	СтруктураВозврата.Вставить("ШаблонЭтикетки", ШаблонЭтикетки);
	СтруктураВозврата.Вставить("ЕстьЭтикеткиДляПечати",ЕстьЭтикеткиДляПечати);
	Если ЕстьЭтикеткиДляПечати Тогда
		СтруктураВозврата.Вставить("АдресВХранилище",ПоместитьВоВременноеХранилище(ТаблицаУпаковочныхЛистов));
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

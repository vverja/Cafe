
#Область ПрограммныйИнтерфейс
// ВебЧек ПРРО +
Функция ПолучитьXMLПакетДляОперации(ОбщиеПараметры) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InputParameters");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
//	ЗаписьXML.ЗаписатьАтрибут("CashierName", ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор';uk='Адміністратор'")));
ЗаписьXML.ЗаписатьАтрибут("CashierName","Оператор1");
ЗаписьXML.ЗаписатьАтрибут("CashierVATIN",XMLСтрока(ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо.КодПоДРФО));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции


Функция ПараметрыИзXMLПакетаККТ(Данные, ИдентификаторУстройства = Неопределено, РевизияИнтерфейса = 0) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыРегистрацииККТ();
	Параметры.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
		Если ПустаяСтрока(Параметры.ВерсияФФДФН) Тогда
			Параметры.ВерсияФФДФН = "1.0";
		КонецЕсли;
		Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
		Если ПустаяСтрока(Параметры.ВерсияФФДККТ) Тогда
			Параметры.ВерсияФФДККТ = "1.0";
		КонецЕсли;
		// ФФД 1.0
		Параметры.РегистрационныйНомерККТ        = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
		Параметры.ОрганизацияНазвание            = ЧтениеXML.ЗначениеАтрибута("OrganizationName");
		Параметры.ОрганизацияИНН                 = СокрЛП(ЧтениеXML.ЗначениеАтрибута("VATIN"));
		Параметры.АдресПроведенияРасчетов        = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
		Параметры.МестоПроведенияРасчетов        = ЧтениеXML.ЗначениеАтрибута("PlaceSettle");
		Параметры.КодыСистемыНалогообложения     = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
		Если ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
			Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVarinat");
		КонецЕсли;
		Параметры.ПризнакАвтономногоРежима       = ВРег(ЧтениеXML.ЗначениеАтрибута("OfflineMode")) = "TRUE";
		Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("AutomaticMode")) = "TRUE";
		Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
		Параметры.ПризнакФормированияБСО         = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
		Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("CalcOnlineSign")) = "TRUE";
		Параметры.ПризнакШифрованиеДанных        = ВРег(ЧтениеXML.ЗначениеАтрибута("DataEncryption")) = "TRUE";
		Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDVATIN"));
		Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDOrganizationName");
		Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
		Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
		Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
		Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
		Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
		Параметры.ПризнакРасчетовЗаУслуги    = ВРег(ЧтениеXML.ЗначениеАтрибута("ServiceSign")) = "TRUE";
		Параметры.ПродажаПодакцизногоТовара  = ВРег(ЧтениеXML.ЗначениеАтрибута("SaleExcisableGoods")) = "TRUE";
		Параметры.ПроведенияАзартныхИгр      = ВРег(ЧтениеXML.ЗначениеАтрибута("SignOfGambling")) = "TRUE";
		Параметры.ПроведенияЛотерей          = ВРег(ЧтениеXML.ЗначениеАтрибута("SignOfLottery")) = "TRUE";
		Параметры.ПризнакиАгента             = ЧтениеXML.ЗначениеАтрибута("SignOfAgent");
		Параметры.УстановкаПринтераВАвтомате = ВРег(ЧтениеXML.ЗначениеАтрибута("PrinterAutomatic")) = "TRUE";;
		Параметры.ОтправительEmail           = ЧтениеXML.ЗначениеАтрибута("SenderEmail");
		Параметры.АдресСайтаФНС              = ЧтениеXML.ЗначениеАтрибута("FNSWebSite");
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получить таблицу параметров смены из ККТ.
//
Функция ПолучитьПараметрыСменыИзXMLПакета(ДанныеXML) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "OutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				Параметры.ПревышеноВремяОжиданияОтветаОФД = ВРег(ЧтениеXML.ЗначениеАтрибута("OFDtimeout")) = "TRUE";
				Параметры.НеобходимаСтрочнаяЗаменаФН = ВРег(ЧтениеXML.ЗначениеАтрибута("UrgentReplacementFN")) = "TRUE";
				Параметры.ПамятьФНПереполнена        = ВРег(ЧтениеXML.ЗначениеАтрибута("MemoryOverflowFN")) = "TRUE";
				Параметры.РесурсФНИсчерпан           = ВРег(ЧтениеXML.ЗначениеАтрибута("ResourcesExhaustionFN")) = "TRUE";
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные, НомерСмены = Неопределено) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьДанныеИнкасации(ОбщиеПараметры, ПараметрыПодключения, ТипИнкассации) Экспорт
	
	ПараметрыФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
	//Если ТипИнкассации = 0 Тогда
	//	ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.Выемка
	//Иначе
	//	ПараметрыФискализации.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.Внесение
	//КонецЕсли;
	ПараметрыФискализации.ТипИнкассации = ТипИнкассации; 
	
	ПараметрыФискализации.Организация       = "";
	ПараметрыФискализации.ДокументОснование = "";
	ПараметрыФискализации.Кассир            = "";
	
	//Если ОбщиеПараметры.Свойство("ТорговыйОбъект") Тогда
	//	ПараметрыФискализации.ТорговыйОбъект = ОбщиеПараметры.ТорговыйОбъект;
	//КонецЕсли;
	
	ПараметрыФискализации.СуммаЧека      = ОбщиеПараметры[1];
	ПараметрыФискализации.ОплатаНаличные = ОбщиеПараметры[1];
	
	СтруктураОперации = Новый Структура;
	СтруктураОперации.Вставить("Кассир", "");
	ПараметрыФискализации.ДанныеЧекаXML  = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(СтруктураОперации);
	
	Возврат ПараметрыФискализации;
	
КонецФункции

// Записать операцию в журнал фискальных операций.
//
Процедура ЗаписатьФискальнуюОперацию(ПараметрыФискализации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторЗаписи = Новый УникальныйИдентификатор;

	НаборЗаписей = РегистрыСведений.ФискальныеОперации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыФискализации.ДокументОснование, Истина);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Дата = ПараметрыФискализации.ДатаВремяЧека;
	НоваяСтрока.ИдентификаторЗаписи = ИдентификаторЗаписи;
	НоваяСтрока.ДокументОснование = ПараметрыФискализации.ДокументОснование;
	НоваяСтрока.ФискальныйПризнак = ПараметрыФискализации.ФискальныйПризнак;
	НоваяСтрока.ТипДокумента      = ПараметрыФискализации.ТипДокумента; 
	НоваяСтрока.Организация       = ПараметрыФискализации.Организация;
	НоваяСтрока.ТорговыйОбъект    = ПараметрыФискализации.ТорговыйОбъект;
	НоваяСтрока.ТипРасчета        = ПараметрыФискализации.ТипРасчета;
	НоваяСтрока.НомерСменыККМ     = ПараметрыФискализации.НомерСменыККТ;
	НоваяСтрока.НомерЧекаККМ      = ПараметрыФискализации.НомерЧекаККТ;
	НоваяСтрока.Сумма            = ПараметрыФискализации.СуммаЧека;
	НоваяСтрока.ОплатаНаличные   = ПараметрыФискализации.ОплатаНаличные;
	НоваяСтрока.ОплатаЭлектронно = ПараметрыФискализации.ОплатаЭлектронно;
	НоваяСтрока.ОплатаПостоплата = ПараметрыФискализации.ОплатаПостоплата;
	НоваяСтрока.ОплатаПредоплата = ПараметрыФискализации.ОплатаПредоплата;
	НоваяСтрока.ОплатаВстречноеПредоставление = ПараметрыФискализации.ОплатаПредоплата;
	НоваяСтрока.ДополнительныйРеквизит  = ПараметрыФискализации.ДополнительныйРеквизит;
	НоваяСтрока.АдресСайтаПроверки      = ПараметрыФискализации.АдресСайтаПроверки;
	НоваяСтрока.ЗаводскойНомерФН        = ПараметрыФискализации.ЗаводскойНомерФН;
	НоваяСтрока.РегистрационныйНомерККТ = ПараметрыФискализации.РегистрационныйНомерККТ; 
	НоваяСтрока.КорректируемыйДокумент  = ПараметрыФискализации.КорректируемыйДокумент;
	Если ПараметрыФискализации.ДанныеЧекаXML <> Неопределено Тогда
		НоваяСтрока.ДанныеXML = Новый ХранилищеЗначения(ПараметрыФискализации.ДанныеЧекаXML);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПодготовитьДанныеФискализацииЧека(ОбщиеПараметры, ПараметрыПодключения) Экспорт
	
	ВерсияФФДККТ11 = ВерсияФФДККТ11 = "1.1"; // Признак ФФД 1.1
	ПараметрыФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
	ПараметрыФискализации.РегистрационныйНомерККТ = "";
	ПараметрыФискализации.ЗаводскойНомерФН  = "";
		ПараметрыФискализации.НомерСменыККТ  = 0;
				ПараметрыФискализации.НомерЧекаККТ  = 0;
	ПараметрыФискализации.ШиринаСтроки      = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	ПараметрыФискализации.РевизияИнтерфейса = 2002;
	ПараметрыФискализации.ДокументОснование = ОбщиеПараметры.КассирИНН;
	ПараметрыФискализации.Организация       = ОбщиеПараметры.ОрганизацияНазвание;
	ПараметрыФискализации.ТорговыйОбъект    = "";
	ПараметрыФискализации.Кассир       = ОбщиеПараметры.Кассир;
	ПараметрыФискализации.Электронно   = 0;
	ПараметрыФискализации.Отправляет1СSMS   = ОбщиеПараметры.Отправляет1СSMS;
	ПараметрыФискализации.Отправляет1СEmail = ОбщиеПараметры.Отправляет1СEmail;
		ПараметрыФискализации.ТипДокумента = "";
		МенеджерОборудованияВызовСервера.СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации);

	
	Возврат ПараметрыФискализации;
	
КонецФункции



Функция НормализированнаяСтрокаXML(Знач Строка1) //vlad

//Символы которые необходимо привести к HTML символам
СписокИсключений = Новый Соответствие;
СписокИсключений.Вставить("""","&#34;");
СписокИсключений.Вставить("'", "&#39;");
СписокИсключений.Вставить("<", "&#60;");
СписокИсключений.Вставить(">", "&#62;");
СписокИсключений.Вставить(".", "&#46;");

Строка1 = СтрЗаменить(Строка1, "&", "&#38;");
Для Каждого Исключ Из СписокИсключений Цикл
Строка1 = СтрЗаменить(Строка1, Исключ.Ключ, Исключ.Значение);
КонецЦикла;

Возврат Строка1;

КонецФункции




Процедура СформироватьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ПараметрыФискализации) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	Электронно   = 0;
	СуммаЧека = 0;
	СуммаНаличные       = 0;
	СуммаЭлектронно     = 0;
	СуммаПредоплата     = 0;
	СуммаПостоплата     = 0;
	СуммаПредоставление = 0;
	
	//ТипРасчета = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	//ТипыРасчета = Новый Соответствие();
	//ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")        , 1);
	//ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств")       , 2);
	//ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств")        , 3);
	//ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"), 4);
	//
	Если ОбщиеПараметры.ТипРасчета  = "ПРОДАЖА" Тогда
	ТипРасчета = 1;
иначе
	 ТипРасчета = 2;

	КонецЕсли;
	СистемаНалогообложения = 1;
	
	//// Таблица оплат
	Если ТаблицаОплат <> Неопределено Тогда
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
	Если ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда
				СуммаЭлектронно = СуммаЭлектронно + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 3 Тогда
				СуммаПостоплата = СуммаПостоплата + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
				СуммаНаличные = СуммаНаличные + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	ЗаписьXML.ЗаписатьАтрибут("PaymentType" , XMLСтрока(ТипРасчета));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant"  , XMLСтрока(СистемаНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("CashierName" , XMLСтрока(ОбщиеПараметры.Кассир));
	//ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
	ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
	//	Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) И Электронно Тогда // Отправитель Email указывается только для Электронно.
	ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(""));
	//	КонецЕсли;
	// Email отправляет средствами 1C
	//	Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
	ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(""));
	//	КонецЕсли;
	// SMS отправляет средствами 1C
	//	Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
	ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(""));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Табличная часть
	Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
			ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
			
			Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
				Если ТекущаяПозиция.ЦенаСоСкидками = 0 И ТекущаяПозиция.Сумма > 0 И ТекущаяПозиция.Количество > 0 Тогда
					ЦенаСоСкидками = Окр(ТекущаяПозиция.Сумма / ТекущаяПозиция.Количество, 2); 
				Иначе
					ЦенаСоСкидками = ТекущаяПозиция.ЦенаСоСкидками; 
				КонецЕсли;
				ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
				ЗаписьXML.ЗаписатьАтрибут("Name"             , XMLСтрока(НормализированнаяСтрокаXML(ТекущаяПозиция.Наименование)));
				ЗаписьXML.ЗаписатьАтрибут("Quantity"         , XMLСтрока(ТекущаяПозиция.Количество));
				ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount", XMLСтрока(ЦенаСоСкидками));
				ЗаписьXML.ЗаписатьАтрибут("SumWithDiscount"  , XMLСтрока(ТекущаяПозиция.Сумма));
				ЗаписьXML.ЗаписатьАтрибут("DiscountSum"      , XMLСтрока(ТекущаяПозиция.СуммаСкидок));
				ЗаписьXML.ЗаписатьАтрибут("Department"       , XMLСтрока(ТекущаяПозиция.НомерСекции));
				// ВебЧек ПРРО ++ 
				Если  ТекущаяПозиция.ЭтоПодакцизныйТовар  Тогда
					ЗаписьXML.ЗаписатьАтрибут("ExciseStamp"       , XMLСтрока(ТекущаяПозиция.ШтрихкодыАкцизныхМарок));
				КонецЕсли;	
				
				Если 	ТекущаяПозиция.Свойство("UKTZED") Тогда
					ЗаписьXML.ЗаписатьАтрибут("UKTZED"       , XMLСтрока(ТекущаяПозиция.UKTZED))
				КонецЕсли;	


				

					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						
						Если ТекущаяПозиция.СтавкаНДССтрокой = "7" Тогда
							ЗначениеСтавкаНДС = "7";
						ИначеЕсли ТекущаяПозиция.СтавкаНДССтрокой = "0" Тогда
							Если НЕ ТекущаяПозиция.ЭтоПодакцизныйТовар  Тогда
								ЗначениеСтавкаНДС = "0";								
							иначе
								ЗначениеСтавкаНДС = "0/5";
							КонецЕсли;
						ИначеЕсли ТекущаяПозиция.СтавкаНДССтрокой = "20" Тогда
							
							Если НЕ ТекущаяПозиция.ЭтоПодакцизныйТовар  Тогда
								ЗначениеСтавкаНДС = "20";								
							иначе
								ЗначениеСтавкаНДС = "20/5";
							КонецЕсли;						
							
						Иначе
							Если НЕ ТекущаяПозиция.ЭтоПодакцизныйТовар  Тогда
								ЗначениеСтавкаНДС = "none";							
							иначе
								ЗначениеСтавкаНДС = "0/5";
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						ЗначениеСтавкаНДС = "none";
					КонецЕсли;
				
				
					// ВебЧек ПРРО -- 
				ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
				
				Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакСпособаРасчета) Тогда
					ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
					ЗаписьXML.ЗаписатьАтрибут("SignMethodCalculation", XMLСтрока(ПризнакСпособаРасчета));
				КонецЕсли;
				Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакПредметаРасчета) Тогда
					ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
					ЗаписьXML.ЗаписатьАтрибут("SignCalculationObject", XMLСтрока(ПризнакПредметаРасчета));
				КонецЕсли;
				
				Если ТекущаяПозиция.Свойство("СуммаНДС") И НЕ ПустаяСтрока(ТекущаяПозиция.СуммаНДС) Тогда
					ЗаписьXML.ЗаписатьАтрибут("TaxSum", XMLСтрока(ТекущаяПозиция.СуммаНДС));
				КонецЕсли;
				
				Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И НЕ ПустаяСтрока(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета) Тогда
					ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
					ЗаписьXML.ЗаписатьАтрибут("SignSubjectCalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
				КонецЕсли;
				
				Если ТекущаяПозиция.Свойство("ЕдиницаИзмеренияПредметаРасчета") И ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета <> Неопределено Тогда
					ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit"   , XMLСтрока(ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета));
				КонецЕсли;
				//
				//ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента);
				//ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика);
				//ЗаписатьДанныеКодаТоварнойНоменклатуры(ЗаписьXML, ТекущаяПозиция.ДанныеКодаТоварнойНоменклатуры);
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
				
			ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
				
				Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
					ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ПараметрыФискализации.ШиринаСтроки);
				Иначе
					ТекстовыеСтроки = ТекущаяПозиция.Текст;
				КонецЕсли;
				Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
				Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
					ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
					ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ПараметрыФискализации.ШиринаСтроки, Выравнивание); 
					ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
					ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
					ЗаписьXML.ЗаписатьКонецЭлемента();  
				КонецЦикла;
				
			ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	// Таблица оплат
	Если ТаблицаОплат <> Неопределено Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличные));
		ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронно));
		ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплата));
		ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплата));
		ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставление));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	
	//ВебЧек    на чек   інформації з екв. термінала
	попытка
		Если ОбщиеПараметры.ДокументОснование.ОплатаПлатежнымиКартами.Количество()> 0 Тогда
			Для каждого СтрокаОПлати из ОбщиеПараметры.ДокументОснование.ОплатаПлатежнымиКартами Цикл	
				
				Если СтрДлина(СтрокаОПлати.СсылочныйНомер)>0  Тогда
					
					//Если ОбщиеПараметры.ДокументОснование.БезналичнаяОплата.Количество() > 0 Тогда
						МассивСтрок = СтрРазделить(Врег(СтрокаОПлати.СсылочныйНомер), ";");
						
						Если МассивСтрок.Количество()=7 Тогда
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("L");
							ЗаписьXML.ЗаписатьАтрибут("PA", МассивСтрок[0]);
							ЗаписьXML.ЗаписатьАтрибут("PB", МассивСтрок[1]);
							Если ТипРасчета = 2  Тогда
							ЗаписьXML.ЗаписатьАтрибут("PC", "ПОВЕРНЕННЯ");
	                        иначе
							ЗаписьXML.ЗаписатьАтрибут("PC", МассивСтрок[2]);
							КонецЕсли;
							ЗаписьXML.ЗаписатьАтрибут("PD", МассивСтрок[3]);
							ЗаписьXML.ЗаписатьАтрибут("PE", МассивСтрок[4]);
							ЗаписьXML.ЗаписатьАтрибут("PSNM", МассивСтрок[5]);
							ЗаписьXML.ЗаписатьАтрибут("RRN", МассивСтрок[6]);
							ЗаписьXML.ЗаписатьКонецЭлемента();
						КонецЕсли;
						
					//КонецЕсли;
				КонецЕсли;
				
				
			КонецЦИкла;
		КонецЕсли;
	исключение
	конецпопытки;
	//ВебЧек

	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ПараметрыФискализации.ДанныеЧекаXML = ЗаписьXML.Закрыть();
	ПараметрыФискализации.ТипРасчета = ОбщиеПараметры.ТипРасчета;
	ПараметрыФискализации.СуммаЧека = СуммаЧека;
	ПараметрыФискализации.ОплатаНаличные    = СуммаНаличные; 
	ПараметрыФискализации.ОплатаЭлектронно  = СуммаЭлектронно;
	ПараметрыФискализации.ОплатаПостоплата  = СуммаПостоплата;
	ПараметрыФискализации.ОплатаПредоплата  = СуммаПредоплата;
	ПараметрыФискализации.ОплатаВстречноеПредоставление = СуммаПредоставление;
	
КонецПроцедуры

Процедура ОбработатьДанныеФискализацииЧека(ПараметрыФискализации) Экспорт
	
	// Заполнить результаты фискализация чека из XML пакета.
	МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации); 
	
	Попытка
		// Записать фискальную операцию.
		МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
	Исключение
		ПараметрыФискализации.ОперацияЗаписана = Ложь;
	КонецПопытки;
	
	// Формируем текст сообщения с атрибутами фискального чека для отправки покупателю. 
	Если (ПараметрыФискализации.Отправляет1СSMS Или ПараметрыФискализации.Отправляет1СEmail) Тогда
		ПараметрыФискализации.ТекстСообщения = МенеджерОборудованияВызовСервера.ШаблонАтрибутовЧекаДляОтсылки(ПараметрыФискализации); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(ПараметрыФискализации) Экспорт
	
	Если Не ПустаяСтрока(ПараметрыФискализации.РезультатОперацииXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ПараметрыФискализации.РезультатОперацииXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.Имя = "DocumentOutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				ПараметрыФискализации.НомерСменыККТ = ЧтениеXML.ЗначениеАтрибута("ShiftNumber");
				ПараметрыФискализации.НомерЧекаККТ  = ЧтениеXML.ЗначениеАтрибута("CheckNumber");
				ПараметрыФискализации.НомерЧекаЗаСмену   = ЧтениеXML.ЗначениеАтрибута("ShiftClosingCheckNumber");
				ПараметрыФискализации.ФискальныйПризнак  = ЧтениеXML.ЗначениеАтрибута("FiscalSign");
				ПараметрыФискализации.АдресСайтаПроверки = ЧтениеXML.ЗначениеАтрибута("AddressSiteInspections");
				ДатаВремяЧека = ЧтениеXML.ЗначениеАтрибута("DateTime");
				Если НЕ ПустаяСтрока(ДатаВремяЧека) Тогда
					ПараметрыФискализации.ДатаВремяЧека = XMLЗначение(Тип("Дата"), ДатаВремяЧека);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получить шаблон атрибутов чека для отсылки.
// 
Функция ШаблонАтрибутовЧекаДляОтсылки(ПараметрыФискализации) Экспорт 
	
	ТекстСообщения  = НСтр("ru='ККТ№:'") + ПараметрыФискализации.РегистрационныйНомерККТ + ";" + Символы.НПП 
		+ НСтр("ru='СУММА:'") + Формат(ПараметрыФискализации.СуммаЧека, "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0") + ";" + Символы.НПП 
		+ Формат(ПараметрыФискализации.ДатаВремяЧека, "ДФ:""дд.ММ.гггг ЧЧ:мм""") + ";" + Символы.НПП 
		+ НСтр("ru='ФН№:'") + ПараметрыФискализации.ЗаводскойНомерФН + ";" + Символы.НПП 
		+ НСтр("ru='ФД№:'") + ПараметрыФискализации.НомерЧекаККТ + ";" + Символы.НПП 
		+ НСтр("ru='ФПД:'") + ПараметрыФискализации.ФискальныйПризнак + ";" + Символы.НПП 
		+ НСтр("ru='САЙТ:'") + ПараметрыФискализации.АдресСайтаПроверки;
		
	Возврат ТекстСообщения;
	
КонецФункции

// ВебЧек ПРРО -


// Возвращает номер версии библиотеки подключаемого оборудования.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.2.3.5";
	
КонецФункции

// Функция возвращает список подключенного в справочнике ПО
//
Функция ПолучитьСписокОборудования(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьСписокОборудования(ТипыПО, Идентификатор, РабочееМесто);
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры.
//
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);

КонецФункции

// Функция возвращает структуру с данными устройства.
//
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает структуру с данными драйвера.
// 
Функция ПолучитьДанныеДрайвера(Идентификатор) Экспорт

	Возврат Справочники.ДрайверыОборудования.ПолучитьДанныеДрайвера(Идентификатор);

КонецФункции

// Функция возвращает имя драйвера по наименованию обработчика.
//
Функция ПолучитьИмяДрайвераЭкземпляра(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = "";
	
	Для каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
		Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
			Результат = ИмяПеречисления.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Функция возвращает параметры драйвера по наименованию обработчика.
//
Функция ПолучитьПараметрыДрайвераПоОбработчику(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = Новый Структура;
	
	Для каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
		Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
			Результат.Вставить("Имя"            , ИмяПеречисления.Имя);
			Результат.Вставить("Наименование"   , ИмяПеречисления.Синоним);
			Результат.Вставить("ТипОборудования", Перечисления["ТипыПодключаемогоОборудования"][ИмяПеречисления.Комментарий]);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает из переменной сеанса имя компьютера клиента.
//
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера.
//
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт
	
	Если Не МенеджерОборудованияВызовСервераПереопределяемый.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ
	|");
	
	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);
	СписокКомпьютеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокКомпьютеров;
	
КонецФункции

// Функция устанавливает в переменную сеанса имя компьютера клиента.
//
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция получает макет драйвера и сохраняет его во временное хранилище,
// возвращая ссылку на временное хранилище.
Функция ПолучитьМакетССервера(ИмяМакета) Экспорт

	Ссылка = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(ИмяМакета));
	Возврат Ссылка;

КонецФункции

// Функция возвращает макет слип чека по наименованию макета.
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = Ложь) Экспорт
	
	СлипЧек  = "";  
	Документ = Новый ТекстовыйДокумент();
	Макет    = ПолучитьОбщийМакет(ИмяМакета);
	Область  = Макет.ПолучитьОбласть("Чек" + ШиринаСлипЧека + ?(АвторизацияПИН, "пин", ""));
	
	Для Каждого Параметр Из Параметры Цикл
		Область.Параметры[Параметр.Ключ] = Параметр.Значение;
	КонецЦикла;
	
	Если Область <> Неопределено Тогда
		Документ.Вывести(Область);
		
		Для Индекс = 1 По Документ.КоличествоСтрок() Цикл
			СлипЧек = СлипЧек + Документ.ПолучитьСтроку(Индекс)
			        + ?(Индекс = Документ.КоличествоСтрок(), "", Символ(13) + Символ(10));
		КонецЦикла;
	КонецЕсли;
	
	Возврат СлипЧек;
	
КонецФункции

// Функция возвращает значение константы.
//
Функция ПолучитьКонстанту(ИмяКонстанты) Экспорт
	
	Константа = Константы[ИмяКонстанты].Получить();
	Возврат Константа;
	
КонецФункции           

// Получает ссылку предопределенного элемента по его полному имени.
//
Функция ПредопределенныйЭлемент(Знач ПолноеИмяПредопределенного) Экспорт
	
	ИмяПредопределенного = ВРег(ПолноеИмяПредопределенного);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяТаблицы = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ &ПолноеИмяТаблицы ГДЕ ИмяПредопределенныхДанных = &ИмяПредопределенного";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ИмяКоллекции + "." + ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

// Функция возвращает доступность сохранение данных пользователя.
//
Функция ПравоДоступаСохранениеДанныхПользователя() Экспорт
	
	Возврат ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
КонецФункции

// Функция возвращает имя перечисления из его метаданных.
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	
	МетаОбъект = ТипОборудования.Метаданные();
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МетаОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// Функция возвращает перечисление по имени.
//
Функция ПолучитьТипОборудования(ТипОборудованияИмя) Экспорт
	
	Попытка
		Результат = Перечисления["ТипыПодключаемогоОборудования"][ТипОборудованияИмя]; 
	Исключение
		Результат = Перечисления.ТипыПодключаемогоОборудования.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает созданное рабочее место клиента.
//
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();

	РабочееМесто.Код           = Параметры.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = Параметры.ИмяКомпьютера;


	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());

	РабочееМесто.Записать();

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РабочееМесто.Ссылка;

КонецФункции // СоздатьРабочееМестоКлиентаПоИД()

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию.
//
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		
		// Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса.
		ТекущееРМ           = Справочники.РабочиеМеста.ПустаяСсылка();
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		СписокРМ = НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если СписокРМ.Количество() = 0 Тогда
			// Будет создано с клиента.
		Иначе
			ТекущееРМ = СписокРМ[0];
		КонецЕсли;
		
		УстановитьРабочееМестоКлиента(ТекущееРМ);
		
		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		Иначе
			УстановленныеПараметры.Добавить("РабочееМестоКлиента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список оборудования для которого необходима переустановка компоненты.
//
Функция ПолучитьСписокДрайверовДляПереустановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяПереустановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Возвращает список оборудования для которого необходима установка компоненты.
//
Функция ПолучитьСписокДрайверовДляУстановки(РабочееМесто) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПодключаемоеОборудование.ДрайверОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто 
	|	И ПодключаемоеОборудование.ТребуетсяУстановка");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("ДрайверОборудования, ДанныеДрайвера", Выборка.ДрайверОборудования, ПолучитьДанныеДрайвера(Выборка.ДрайверОборудования)); 
		Список.Добавить(Строка);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакПереустановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяПереустановка = &ТребуетсяПереустановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяПереустановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяПереустановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования для подключаемого оборудования.
//
Процедура УстановитьПризнакПереустановкиДрайвераДляОборудования(ПодключаемоеОборудование, Признак) Экспорт
	
	УстановитьПризнакПереустановкиДрайвера(ПодключаемоеОборудование.РабочееМесто, ПодключаемоеОборудование.ДрайверОборудования, Признак);
	
КонецПроцедуры

// Устанавливает признак необходимости установки оборудования для подключаемого оборудования на рабочем месте.
//
Процедура УстановитьПризнакУстановкиДрайвера(РабочееМесто, ДрайверОборудования, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ  
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.ДрайверОборудования = &ДрайверОборудования
	|	И НЕ ПодключаемоеОборудование.ТребуетсяУстановка = &ТребуетсяУстановка"); 
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ДрайверОборудования", ДрайверОборудования);
	Запрос.УстановитьПараметр("ТребуетсяУстановка", Признак);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетсяУстановка = Признак;
		ЗаписатьДанные(СправочникОбъект)
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования.
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
		
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из СписокНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить("ПользовательскиеНастройкиПодключаемогоОборудования", Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Производит разложение данных дорожек магнитной карты по шаблонам.
// На входе:
// ДанныеДорожек - массив строк. Значения полученные из дорожек.
// ПараметрыДорожек - массив структур содержащих параметры настройки устройства.
//  * Использовать, булево - признак использования дорожки.
//  * НомерДорожки, число - порядковый номер дорожки 1-3.
//
// На выходе:
// Массив структур содержащих расшифрованные данные по всем подходящим шаблонам со ссылкой на них.
// * Массив - шаблоны
//   * Структура - данные шаблона.
//     - Шаблон, СправочникСсылка.ШаблоныМагнитныхКарт
//     - ДанныеДорожек, массив полей всех дорожек.
//       * Структура - данные поля.
//         - Поле
//         - ЗначениеПоля
Функция РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек) Экспорт
	
	Если ДанныеДорожек.Количество() = 0
		ИЛИ ПараметрыДорожек.Количество() = 0 Тогда
		Возврат Неопределено; // нет данных
	КонецЕсли;
	
	ДанныеОтбор = Новый Массив;
	СчетчикДорожек = 0;
	Для каждого текПараметр Из ПараметрыДорожек Цикл
		Если текПараметр.Использовать Тогда
			Попытка
				ДанныеОтбор.Добавить(Новый Структура("НомерДорожки, ДлинаДорожки, ДанныеДорожки"
													, текПараметр.НомерДорожки, СтрДлина(ДанныеДорожек[СчетчикДорожек]), ДанныеДорожек[СчетчикДорожек]));
			Исключение
				Возврат Неопределено; // неверный формат шаблона
			КонецПопытки;
		КонецЕсли;
		СчетчикДорожек = СчетчикДорожек + 1;
	КонецЦикла;
	
	// 1 Этап. Ищем шаблоны совпадающие по длине кода
	// а) При сравнении играют роль только доступные дорожки
	// б) Необходимо чтобы хотя бы одна дорожка была доступной.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШаблоныМагнитныхКарт.Ссылка,
	|	
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки1,
	|	ШаблоныМагнитныхКарт.Префикс1,
	|	ШаблоныМагнитныхКарт.Суффикс1,
	|	ШаблоныМагнитныхКарт.ДлинаКода1,
	|	ШаблоныМагнитныхКарт.РазделительБлоков1,
	|	
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки2,
	|	ШаблоныМагнитныхКарт.Префикс2,
	|	ШаблоныМагнитныхКарт.Суффикс2,
	|	ШаблоныМагнитныхКарт.ДлинаКода2,
	|	ШаблоныМагнитныхКарт.РазделительБлоков2,
	|	
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки3,
	|	ШаблоныМагнитныхКарт.Префикс3,
	|	ШаблоныМагнитныхКарт.Суффикс3,
	|	ШаблоныМагнитныхКарт.ДлинаКода3,
	|	ШаблоныМагнитныхКарт.РазделительБлоков3
	|ИЗ
	|	Справочник.ШаблоныМагнитныхКарт КАК ШаблоныМагнитныхКарт
	|ГДЕ
	|	(ШаблоныМагнитныхКарт.ДоступностьДорожки1
	|			ИЛИ ШаблоныМагнитныхКарт.ДоступностьДорожки2
	|			ИЛИ ШаблоныМагнитныхКарт.ДоступностьДорожки3)
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки1
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода1 = &ДлинаКода1
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки2
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода2 = &ДлинаКода2
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки3
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода3 = &ДлинаКода3
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ");
	Запрос.УстановитьПараметр("ДлинаКода1", СтрДлина(ДанныеДорожек[0]));
	Запрос.УстановитьПараметр("ДлинаКода2", СтрДлина(ДанныеДорожек[1]));
	Запрос.УстановитьПараметр("ДлинаКода3", СтрДлина(ДанныеДорожек[2]));
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокШаблонов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		// 2-Ой этап - Пропускаем шаблоны не совпадающие по суффиксу, префиксу, разделителю.
		
		Если НЕ КодСоответствуетШаблонуМК(ДанныеДорожек, Выборка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДорожки = Новый Массив;
		Для каждого текОтбор Из ДанныеОтбор Цикл
			Для каждого текПоле Из Выборка.Ссылка["ПоляДорожки"+Строка(текОтбор.НомерДорожки)] Цикл
				
				// Поиск блока по номеру
				ДанныеСтрока = текОтбор.ДанныеДорожки;
				Префикс = Выборка["Префикс"+Строка(текОтбор.НомерДорожки)];
				Если Префикс = Лев(ДанныеСтрока, СтрДлина(Префикс)) Тогда
					ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Префикс)); // Удаляем префикс если есть
				КонецЕсли;
				Суффикс = Выборка["Суффикс"+Строка(текОтбор.НомерДорожки)];
				Если Суффикс = Прав(ДанныеСтрока, СтрДлина(Суффикс)) Тогда
					ДанныеСтрока = Лев(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Суффикс)); // Удаляем суффикс если есть
				КонецЕсли;
				
				текНомерБлока = 0;
				Пока текНомерБлока < текПоле.НомерБлока Цикл
					РазделительБлоков = Выборка["РазделительБлоков"+Строка(текОтбор.НомерДорожки)];
					ПозицияРазделителя = Найти(ДанныеСтрока, РазделительБлоков);
					Если ПустаяСтрока(РазделительБлоков) ИЛИ ПозицияРазделителя = 0 Тогда
						Блок = ДанныеСтрока;
					ИначеЕсли ПозицияРазделителя = 1 Тогда
						Блок = "";
						ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-1);
					Иначе
						Блок = Лев(ДанныеСтрока, ПозицияРазделителя-1);
						ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-ПозицияРазделителя);
					КонецЕсли;
					текНомерБлока = текНомерБлока + 1;
				КонецЦикла;
				
				// Поиск подстроки в блоке
				ЗначениеПоля = Сред(Блок, текПоле.НомерПервогоСимволаПоля, ?(текПоле.ДлинаПоля = 0, СтрДлина(Блок), текПоле.ДлинаПоля));
				
				ДанныеПоля = Новый Структура("Поле, ЗначениеПоля", текПоле.Поле, ЗначениеПоля);
				ДанныеДорожки.Добавить(ДанныеПоля);
			КонецЦикла;
		КонецЦикла;
		Шаблон = Новый Структура("Шаблон, ДанныеДорожек", Выборка.Ссылка, ДанныеДорожки);
		СписокШаблонов.Добавить(Шаблон);
	КонецЦикла;
	
	Если СписокШаблонов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокШаблонов;
	
КонецФункции

// Определяет соответствует ли код карты шаблону.
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
//	- Суффикс
//	- Префикс
//	- РазделительБлоков
//	- ДлинаКода
// На выходе:
// Истина - код соответствует шаблону.
Функция КодСоответствуетШаблонуМК(ДанныеДорожек, ДанныеШаблона)
	Для Итератор = 1 По 3 Цикл
		Если ДанныеШаблона["ДоступностьДорожки"+Строка(Итератор)] Тогда
			текСтрока = ДанныеДорожек[Итератор - 1];
			Если Прав(текСтрока, СтрДлина(ДанныеШаблона["Суффикс"+Строка(Итератор)])) <> ДанныеШаблона["Суффикс"+Строка(Итератор)]
				Или Лев(текСтрока, СтрДлина(ДанныеШаблона["Префикс"+Строка(Итератор)])) <> ДанныеШаблона["Префикс"+Строка(Итератор)]
				Или Найти(текСтрока, ДанныеШаблона["РазделительБлоков"+Строка(Итератор)]) = 0
				Или СтрДлина(текСтрока) <> ДанныеШаблона["ДлинаКода"+Строка(Итератор)] Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Получить таблицу товаров из XML структуры для ТСД.
//
Функция ПолучитьТаблицуТоваровТСД(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("BarCode"));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("Quantity"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД.
//
Функция СформироватьТаблицуТоваровТСД(ДанныеЗагрузки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode"                      , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"                         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement"            , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature" , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature"         , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality"                      , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"                        , XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity"                     , XMLСтрока(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляЗагрузкиТСД(ТаблицаВыгрузки, РазмерПакета) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		СтрокаМассиваТСД = Новый СписокЗначений; 
		СтрокаМассиваТСД.Добавить(Позиция[0].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[1].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[2].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[3].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[4].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[5].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[6].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[7].Значение);
		МассивТоваров.Добавить(СтрокаМассиваТСД);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровТСД(МассивТоваров);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для весов с печатью этикеток.
//
Функция СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(ДанныеЗагрузки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("PLU"          , XMLСтрока(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Code"         , XMLСтрока(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"         , XMLСтрока(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"        , XMLСтрока(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Description"  , XMLСтрока(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("ShelfLife"    , XMLСтрока(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("IsWeightGoods", XMLСтрока(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//      
Функция ПодготовитьПакетыДляЗагрузкиВВесыСПечатьюЭтикеток(ТаблицаВыгрузки, РазмерПакета) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();
	МассивТоваров = Новый Массив;
	
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	
	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		ВремНаименование = ?(Позиция.Свойство("Номенклатура"), Позиция.Номенклатура, "");
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		Если Позиция.Свойство("НаименованиеПолное") И Не ПустаяСтрока(Позиция.НаименованиеПолное) Тогда
			ВремНаименование = Позиция.НаименованиеПолное;
		КонецЕсли;
		
		СтрокаМассиваТоваров = Новый СписокЗначений; 
		СтрокаМассиваТоваров.Добавить(Число(Позиция.PLU));
		СтрокаМассиваТоваров.Добавить(Число(Позиция.Код));
		СтрокаМассиваТоваров.Добавить(ВремНаименование);
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("Цена"), Позиция.Цена, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ОписаниеТовара"), Позиция.ОписаниеТовара, ""));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("СрокХранения"), Позиция.СрокХранения, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ВесовойТовар"), Позиция.ВесовойТовар, Истина));
		МассивТоваров.Добавить(СтрокаМассиваТоваров);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(МассивТоваров);
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Функция получает значение атрибута текущего элемента.
//
Функция ПрочитатьАтрибут(ЧтениеXML, ИмяАтрибута, ЗначениеАтрибута)
	
	Значение = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	
	Если Значение = Неопределено Тогда
		ЗначениеАтрибута = Неопределено;
		Возврат Ложь;
	Иначе
		ЗначениеАтрибута = XMLЗначение(Тип("Строка"), Значение);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке)
	
	Попытка
		Результат = ЧтениеXML.Прочитать();
	Исключение
		ТекстСообщенияОбОшибке = НСтр("ru='При чтении XML-описания макета произошла ошибка.';uk='При читанні XML-опису макету сталася помилка.'");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура записывает значение атрибута текущего элемента.
//
Процедура ЗаписатьАтрибутЭлемента(ЗаписьXML, ИмяАтрибута, ЗначениеАтрибута, ФорматнаяСтрока="ЧРД=.; ЧН=0; ЧГ=0; БЛ=false; БИ=true")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) ИЛИ ТипЗнч(ЗначениеАтрибута)=Тип("Число") ИЛИ ИмяАтрибута="Value" Тогда
		ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, XMLСтрока(Формат(ЗначениеАтрибута, ФорматнаяСтрока)));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру с описанием макета.
//
Функция ПолучитьСтруктуруСОписаниемМакета(Источник, СообщениеОбОшибке, Результат) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Новый Массив);

	ЧтениеXML = Новый ЧтениеXML();
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(Источник, ПараметрыЧтения);

	ТекстСообщенияОбОшибке = "";
	
	Пока ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке) Цикл

		ЗначениеАтрибута = Неопределено;

		Если ЧтениеXML.Имя="Formatting" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда			

			Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Ширина", Число(ЗначениеАтрибута));				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Formatting произошла ошибка.';uk='При читанні файлу атрибуту Width елемента Formatting сталася помилка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Высота", Число(ЗначениеАтрибута));				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Formatting произошла ошибка.';uk='При читанні файлу атрибут Height елемента Formatting сталася помилка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда				
				Результат.Вставить("Ориентация", Число(ЗначениеАтрибута));				
			Иначе				
				Результат.Вставить("Ориентация", 0);				
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Scale", ЗначениеАтрибута) Тогда
				Результат.Вставить("Масштаб", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Масштаб", 1);
			КонецЕсли;
			
		ИначеЕсли (ЧтениеXML.Имя="Text" ИЛИ ЧтениеXML.Имя="Barcode" ИЛИ ЧтениеXML.Имя="Image" ИЛИ ЧтениеXML.Имя="UserData") И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда

			НовоеПоле = Новый Структура;			
			НовоеПоле.Вставить("Тип", ЧтениеXML.Имя);			

			Если ПрочитатьАтрибут(ЧтениеXML, "FieldName", ЗначениеАтрибута) Тогда				
				НовоеПоле.Вставить("Наименование", ЗначениеАтрибута);				
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FieldName элемента UserData произошла ошибка.';uk='При читанні файлу атрибута FieldName елемента UserData сталася помилка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если ПрочитатьАтрибут(ЧтениеXML, "TypeFill", ЗначениеАтрибута) Тогда

				Если ЗначениеАтрибута=Неопределено Тогда					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.';uk='При читанні файлу атрибута TypeFill елемента UserData сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				НовоеПоле.Вставить("ТипЗаполнения", ЗначениеАтрибута);

				Если ЗначениеАтрибута="Parameter" Тогда					
					Если ПрочитатьАтрибут(ЧтениеXML, "ValueDefault", ЗначениеАтрибута) Тогда						
						НовоеПоле.Вставить("ЗначениеПоУмолчанию", ЗначениеАтрибута);						
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда

						Если ЗначениеАтрибута=Неопределено Тогда							
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.';uk='При читанні файлу атрибута Value елемента UserData сталася помилка.'");
							Возврат Ложь;							
						Иначе							
							НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
						КонецЕсли;

					Иначе						
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.';uk='При читанні файлу атрибута Value елемента UserData сталася помилка.'");
						Возврат Ложь;						
					КонецЕсли;

				Иначе

					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
					КонецЕсли;

				КонецЕсли;
			Иначе				
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.';uk='При читанні файлу атрибута TypeFill елемента UserData сталася помилка.'");
				Возврат Ложь;				
			КонецЕсли;

			Если НовоеПоле.Тип<>"UserData" Тогда				

				Если ПрочитатьАтрибут(ЧтениеXML, "Left", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Лево", Число(ЗначениеАтрибута));					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Left элемента Text произошла ошибка.';uk='При читанні файлу атрибута Left елемента Text сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Top", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Верх", Число(ЗначениеАтрибута));					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Top элемента Text произошла ошибка.';uk='При читанні файлу атрибута Top елемента Text сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Право", НовоеПоле.Лево + Число(ЗначениеАтрибута) - 1);					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Text произошла ошибка.';uk='При читанні файлу атрибуту Width елемента Text сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Низ", НовоеПоле.Верх + Число(ЗначениеАтрибута) - 1);					
				Иначе					
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Text произошла ошибка.';uk='При читанні файлу атрибуту Height елемента Text сталася помилка.'");
					Возврат Ложь;					
				КонецЕсли;

				Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда					
					НовоеПоле.Вставить("Ориентация", Число(ЗначениеАтрибута));					
				КонецЕсли;				

				Если НовоеПоле.Тип="Text" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "FontName", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ИмяШрифта", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("РазмерШрифта", Число(ЗначениеАтрибута));
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Text произошла ошибка.';uk='При читанні файлу атрибута FontSize елемента Text сталася помилка.'");
						Возврат Ложь;
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontStyle", ЗначениеАтрибута) Тогда
						ЗначениеСтильШрифта = ЗначениеАтрибута;
						НовоеПоле.Вставить("Жирный", Найти(ЗначениеСтильШрифта, "Bold")>0);
						НовоеПоле.Вставить("Наклонный", Найти(ЗначениеСтильШрифта, "Italic")>0);
						НовоеПоле.Вставить("Подчеркивание",  Найти(ЗначениеСтильШрифта, "Underline")>0);
						НовоеПоле.Вставить("Зачеркивание", Найти(ЗначениеСтильШрифта, "Strikeout")>0);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Align", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоГоризонтали", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "VAlign", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоВертикали", ЗначениеАтрибута);
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "Multiline", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Многострочность", ЗначениеАтрибута);
					КонецЕсли;

				ИначеЕсли НовоеПоле.Тип="Barcode" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "Type", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ТипШтрихкода", ЗначениеАтрибута);
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Type элемента Barcode произошла ошибка.';uk='При читанні файлу атрибута Type елемента Barcode сталася помилка.'");
						Возврат Ложь;
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "PrintHRI", ЗначениеАтрибута) Тогда						
						НовоеПоле.Вставить("ПодписьШтрихкода", ЗначениеАтрибута);
						ПодписьШтрихкода = ЗначениеАтрибута;						
					Иначе						
						ПодписьШтрихкода = Истина;						
					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда

						Если ПодписьШтрихкода И ЗначениеАтрибута=Неопределено Тогда							
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Barcode произошла ошибка. При значении атрибута PrintHRI = True указание значения атрибута FontSize обязательно!';uk='При читанні файлу атрибута FontSize елемента Barcode сталася помилка. При значенні атрибуту PrintHRI = True вказання значення атрибута FontSize обов''язково!'");
							Возврат Ложь;							
						КонецЕсли;

						НовоеПоле.Вставить("РазмерШрифтаПодписи", Число(ЗначениеАтрибута));

					КонецЕсли;

					Если ПрочитатьАтрибут(ЧтениеXML, "CheckSymbol", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("КонтрольныйСимвол", ЗначениеАтрибута);
					КонецЕсли;

				КонецЕсли;

				Если НовоеПоле.Тип = "Text" ИЛИ НовоеПоле.Тип = "Image" Тогда

					Если ПрочитатьАтрибут(ЧтениеXML, "Border", ЗначениеАтрибута) Тогда
						ЗначениеBorder = ЗначениеАтрибута;
						НовоеПоле.Вставить("РамкаСлева", Найти(ЗначениеBorder, "Left")>0);
						НовоеПоле.Вставить("РамкаСверху", Найти(ЗначениеBorder, "Top")>0);
						НовоеПоле.Вставить("РамкаСправа",  Найти(ЗначениеBorder, "Right")>0);
						НовоеПоле.Вставить("РамкаСнизу", Найти(ЗначениеBorder, "Bottom")>0);

						Если ЗначениеЗаполнено(ЗначениеBorder) Тогда							

							Если ПрочитатьАтрибут(ЧтениеXML, "BorderStyle", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТипРамки", ЗначениеАтрибута);
							КонецЕсли;

							Если ПрочитатьАтрибут(ЧтениеXML, "BorderWidth", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТолщинаРамки", Число(ЗначениеАтрибута));
							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если НовоеПоле.Тип="UserData" ИЛИ НовоеПоле.Тип="Text" Тогда
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Format", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Формат", ЗначениеАтрибута);
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Поля.Добавить(НовоеПоле);

		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция формирует текст XML для передачи его принтеру этикеток.
//
Функция СформироватьДанныеДляПринтераЭтикеток(МассивЭтикеток, МакетЭтикетки) Экспорт
	
	ФорматыПолей = Новый Структура;
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");

	Если ЗначениеЗаполнено(МакетЭтикетки) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

		Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Ширина);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Высота);
		Иначе
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Высота);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Ширина);
		КонецЕсли;

		Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

			Если ТекЭлемент.Тип <> "UserData" Тогда
				
				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Лево-1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Право - ТекЭлемент.Лево+1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация <> 0 Тогда

					Если ТекЭлемент.Свойство("Ориентация") Тогда

						Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
							ОриентацияПоля = Число(ТекЭлемент.Ориентация);
						Иначе
							ОриентацияПоля = 0;
						КонецЕсли;

					Иначе
						ОриентацияПоля = 0;
					КонецЕсли;

					НовоеЗначениеОриентации = ОриентацияПоля + Число(МакетЭтикетки.Ориентация);
					НовоеЗначениеОриентации = Формат(?(НовоеЗначениеОриентации>270, НовоеЗначениеОриентации-360, НовоеЗначениеОриентации), "ЧГ=0");
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", НовоеЗначениеОриентации);

				Иначе

					Если ТекЭлемент.Свойство("Ориентация") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.ТипЗаполнения = "Parameter" Тогда

				Если ТекЭлемент.Свойство("ЗначениеПоУмолчанию") Тогда
					
					Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию, ТекЭлемент.Формат);
					Иначе
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Static", Истина);
				Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение, ТекЭлемент.Формат);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);
				КонецЕсли;
			КонецЕсли;
			
			Если ТекЭлемент.Тип = "Text" Тогда
				
				Если ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ФорматыПолей.Вставить("Формат" + СтрЗаменить(ТекЭлемент.Наименование, "-", ""), ТекЭлемент.Формат);
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("ИмяШрифта") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
				КонецЕсли;

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);

				СтильШрифта = "";
				
				Если ТекЭлемент.Свойство("Жирный") Тогда
					Если ТекЭлемент.Жирный Тогда
						СтильШрифта = "Bold";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Наклонный") Тогда
					Если ТекЭлемент.Наклонный Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Italic";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Подчеркивание") Тогда
					Если ТекЭлемент.Подчеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Underline";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Зачеркивание") Тогда
					Если ТекЭлемент.Зачеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "StrikeOut";
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);

				ГорВыравнивание = "Left";

				Если ТекЭлемент.Свойство("ПоложениеПоГоризонтали") Тогда

					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоГоризонтали) Тогда
						ГорВыравнивание = ТекЭлемент.ПоложениеПоГоризонтали;
					КонецЕсли;

				КонецЕсли;

				ВерВыравнивание = "Top";

				Если ТекЭлемент.Свойство("ПоложениеПоВертикали") Тогда

					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоВертикали) Тогда
						ВерВыравнивание = ТекЭлемент.ПоложениеПоВертикали;
					КонецЕсли;

				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ГорВыравнивание);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ВерВыравнивание);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда

					Если ВерВыравнивание="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					ИначеЕсли ВерВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВерВыравнивание="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					КонецЕсли;

					Если ГорВыравнивание="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ГорВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ГорВыравнивание="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда

					Если ГорВыравнивание="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ГорВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ГорВыравнивание="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВерВыравнивание="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВерВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВерВыравнивание="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда

					Если ВерВыравнивание="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВерВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВерВыравнивание="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ГорВыравнивание="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					ИначеЕсли ГорВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ГорВыравнивание="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("Многострочность") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
				КонецЕсли;

			ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);

				Если ТекЭлемент.Свойство("ПодписьШтрихкода") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

					Если ТекЭлемент.ПодписьШтрихкода Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("КонтрольныйСимвол") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
				КонецЕсли;	

			КонецЕсли;

			Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

				Рамка = "";
				
				Если ТекЭлемент.Свойство("РамкаСлева") Тогда
					Если ТекЭлемент.РамкаСлева Тогда
						Рамка = "Left";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСверху") Тогда
					Если ТекЭлемент.РамкаСверху Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Top";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСправа") Тогда
					Если ТекЭлемент.РамкаСправа Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Right";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСнизу") Тогда
					Если ТекЭлемент.РамкаСнизу Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Bottom";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Рамка) Тогда
					
					Если МакетЭтикетки.Ориентация = 0 Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Top", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Right", "T1op");
						Рамка=СтрЗаменить(Рамка, "Bottom", "R1ight");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Top", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Right", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Bottom", "T1op");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "T1op");
						Рамка=СтрЗаменить(Рамка, "Top", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Right", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Bottom", "L1eft");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТипРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТолщинаРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;

			ЗаписьXML.ЗаписатьКонецЭлемента();		

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("Labels");

	Для Каждого ТекЭтикетка Из МассивЭтикеток Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента("Label");

		Если ТекЭтикетка.Свойство("Количество") Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Quantity", ТекЭтикетка.Количество);
		КонецЕсли;

		Для Каждого ТекПоле Из ТекЭтикетка.Поля Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекПоле.ИмяПоля);
			Если ФорматыПолей.Свойство("Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение, ФорматыПолей["Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")]);
			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение);
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
Функция ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, МакетЭтикетки = Неопределено) Экспорт
	
	ПакетыДляВыгрузки = Новый Массив();  
	МассивТоваров = Новый Массив;
	
	ПервыйПакет      = Истина;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = МассивЭтикеток.Количество();
	
	Для Каждого Позиция Из МассивЭтикеток Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьДанныеДляПринтераЭтикеток(МассивТоваров, ?(ПервыйПакет, МакетЭтикетки, Неопределено));
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
			ПервыйПакет   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Функция формирует XML-описание макета.
//
Функция СохранитьXMLФайл(ШиринаЭтикетки, ВысотаЭтикетки, Ориентация, Поля) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ШиринаЭтикетки);
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ВысотаЭтикетки);

	Если ЗначениеЗаполнено(Ориентация) Тогда
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", Ориентация);
	КонецЕсли;

	Для Каждого ТекЭлемент Из Поля Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

		Если ТекЭлемент.Тип <> "UserData" Тогда
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево + 1);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх + 1);

			Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
			КонецЕсли;
			
		Иначе
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" Тогда

			Если ЗначениеЗаполнено(ТекЭлемент.ИмяШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
			СтильШрифта = "";

			Если ТекЭлемент.Жирный Тогда
				СтильШрифта = "Bold";
			КонецЕсли;

			Если ТекЭлемент.Наклонный Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Italic";
			КонецЕсли;

			Если ТекЭлемент.Подчеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Underline";
			КонецЕсли;

			Если ТекЭлемент.Зачеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Strikeout";
			КонецЕсли;

			Если ЗначениеЗаполнено(СтильШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ТекЭлемент.ПоложениеПоГоризонтали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ТекЭлемент.ПоложениеПоВертикали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

			Если ТекЭлемент.Тип = "Barcode" Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

			Если ТекЭлемент.ПодписьШтрихкода Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
			КонецЕсли;

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

			Рамка = "";

			Если ТекЭлемент.РамкаСверху Тогда
				Рамка = "Top";
			КонецЕсли;

			Если ТекЭлемент.РамкаСлева Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Left";
			КонецЕсли;

			Если ТекЭлемент.РамкаСправа Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Right";
			КонецЕсли;

			Если ТекЭлемент.РамкаСнизу Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Bottom";
			КонецЕсли;

			Если ЗначениеЗаполнено(Рамка) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
			КонецЕсли;

		КонецЕсли;

		ЗаписатьАтрибутЭлемента(ЗаписьXML, "TypeFill", ТекЭлемент.ТипЗаполнения);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);

		Если ТекЭлемент.ТипЗаполнения<>"Constant" И ЗначениеЗаполнено(ТекЭлемент.ЗначениеПоУмолчанию) Тогда			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueDefault", ТекЭлемент.ЗначениеПоУмолчанию);
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода2 = "";	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ТипШтрихкода2;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихкода = 14 Тогда // ITF14
		
		Коэффициент = 1; 
		Для Сч = 1 По 13 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если КодСимвола(Штрихкод, 14) = Сумма + 48 Тогда
			ТипШтрихкода2 = "ITF14";
 		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 13 Тогда // EAN13
		
		EAN13 = Истина;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN13 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			ТипШтрихкода2 = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		
		EAN8 = Истина;
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN8 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если EAN8 И (КодСимвола(Штрихкод, 8) = Сумма + 48) Тогда
			ТипШтрихкода2 = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипШтрихкода2= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола <> 32)
				И (ВремКодСимвола < 36 Или ВремКодСимвола > 37)
				И (ВремКодСимвола <> 43)
				И (ВремКодСимвола < 45 Или ВремКодСимвола > 57)
				И (ВремКодСимвола < 65 Или ВремКодСимвола > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ТипШтрихкода2 = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкода2= ""  Тогда // CODE128
		// CODE128 символы ASCII от 0 до 127 (цифры от «0» до «9», буквы от «A» до «Z» и от «a» до «z») и специальные символы;
		CODE128 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола > 127) Тогда
				CODE128 = Ложь;
			Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE128 Тогда
			ТипШтрихкода2 = "CODE128";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихкода2= "CODE128"  Тогда // EAN128
		// В коде EAN128 регламентирован словарь CODE128 но регламентированы группы кодов.
		Если КодСимвола(Штрихкод, 1) = 40 Тогда
			ТипШтрихкода2 = "EAN128";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипШтрихкода2;
	
КонецФункции

// Функция выполняет формирование изображения штрихкода.
// Параметры: 
//   ПараметрыШтрихкода 
// Возвращаемое значение: 
//   Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО.
Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	
	ВнешняяКомпонента = МенеджерОборудованияСерверПовтИсп.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Ошибка подключения внешней компоненты печати штрихкода!';uk='Помилка підключення зовнішньої компоненти друку штрихкоду!'");
	КонецЕсли;
	
	// Зададим размер картинки
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ПараметрыШтрихкода.Штрихкод);
		Если ТипШтрихкодаВрем = "EAN8" Тогда
			ВнешняяКомпонента.ТипКода = 0;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
			ВнешняяКомпонента.ТипКода = 1;
			// Если код содержит контрольный символ, обязательно указываем.
			ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихкода.Штрихкод) = 13;
		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
			ВнешняяКомпонента.ТипКода = 2;
		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
			ВнешняяКомпонента.ТипКода = 3;
		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
			ВнешняяКомпонента.ТипКода = 11;
		Иначе
			ВнешняяКомпонента.АвтоТип = Истина;
		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;

	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихкода.Штрихкод;
	
	Если ПараметрыШтрихкода.Свойство("УголПоворота") Тогда
		ВнешняяКомпонента.УголПоворота = ПараметрыШтрихкода.УголПоворота;
	Иначе
		ВнешняяКомпонента.УголПоворота = 0;
	КонецЕсли;
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
	КонецЕсли;
	
	// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
		ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
	КонецЕсли;

	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных.
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Функция получает содержание текстовых файлов из временного хранилища
// Параметры: 
//   ПомещенныеФайлы - массив содержащий элементы типа ОписаниеПередаваемогоФайла, из которых читается содержание
// Возвращаемое значение: 
//   РезультатЧтения - структура с ключами:
//    - Успешно - булево
//    - СодержаниеФайлов - массив структур, с ключами ОписаниеПереданногоФайла и ТекстСодержания; или Неопределено, в случае Успешно = Ложь.
//    - ТекстОшибки - строка
//
Функция ПолучитьСодержаниеТекстовыхФайловИзХранилища(ПомещенныеФайлы, Кодировка) Экспорт
	
	РезультатЧтения = Новый Структура;
	
	РезультатЧтения.Вставить("Успешно", Ложь);
	РезультатЧтения.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтения.Вставить("ТекстОшибки", "");
	
	СодержаниеФайлов = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Для Каждого Файл Из ПомещенныеФайлы Цикл
		
		СтруктураСодержанияФайла = Новый Структура;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Хранение);
		
		Попытка
			
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, Кодировка);
			ТекстСодержания = ЧтениеТекста.Прочитать();
			
			ЧтениеТекста.Закрыть();
			
			СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
			СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
			
			СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
			
		Исключение
			
			РезультатЧтения.ТекстОшибки = ОписаниеОшибки();
			Возврат РезультатЧтения;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатЧтения.Успешно = Истина;
	РезультатЧтения.СодержаниеФайлов = СодержаниеФайлов;
	
	Возврат РезультатЧтения;
	
КонецФункции

// Получить таблицу товаров из XML структуры для ТСД
//
Функция ПолучитьТаблицуТоваров(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("BarCode"));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("Quantity"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД
//
Функция СформироватьТаблицуТоваров(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode", Позиция[0].Значение);
		ЗаписьXML.ЗаписатьАтрибут("Name", Строка(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement", Строка(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature", Строка(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature", Строка(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality", Строка(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price", Строка(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity", Строка(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
    	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Сформировать таблицу доп.реквизитов для реализации
//
Функция СформироватьТаблицуДопРеквизитов(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("VAT", Позиция[0]);
		ЗаписьXML.ЗаписатьАтрибут("IsExcisable", Строка(Формат(Позиция[1], "БЛ=False; БИ=True")));
		ЗаписьXML.ЗаписатьАтрибут("UKTZED" , Позиция[2]);
		ЗаписьXML.ЗаписатьАтрибут("ExciseStampBarcode",Позиция[3]); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
    	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получить таблицу доп.реквизитов из XML структуры
//
Функция ПолучитьТаблицуДопРеквизитов(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Table" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("VAT"));
					Результат.Добавить(Булево(ЧтениеXML.ЗначениеАтрибута("IsExcisable")));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("UKTZED"));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("ExciseStampBarcode"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьПараметрыПО() Экспорт
	
	времНалоговаяГруппа0           = Неопределено;
	времНалоговаяГруппа7           = Неопределено;
	времНалоговаяГруппа14          = Неопределено;
	времНалоговаяГруппа20          = Неопределено;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
	|	ПодключаемоеОборудование.ИдентификаторУстройства,
	|	ПодключаемоеОборудование.Наименование КАК Наименование,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключаемоеОборудование.Параметры КАК Параметры
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	(НЕ ПодключаемоеОборудование.УстройствоОтключено)
	|	И (ПодключаемоеОборудование.ТипОборудования = &ТипОборудования)
	|	И (НЕ ПодключаемоеОборудование.ПометкаУдаления)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Параметры = Выборка.Параметры.Получить();
		
		Параметры.Свойство("НалоговаяГруппа0"          , времНалоговаяГруппа0);
		Параметры.Свойство("НалоговаяГруппа7"          , времНалоговаяГруппа7);
		Параметры.Свойство("НалоговаяГруппа14"         , времНалоговаяГруппа14);
		Параметры.Свойство("НалоговаяГруппа20"         , времНалоговаяГруппа20);
		
		НужноПерезаписать = Ложь;
		ТаблицаСоответствий = Новый Массив;
		
		Если времНалоговаяГруппа20 <> Неопределено Тогда
			
			Элемент = Новый Массив(3);
			
			Элемент[0] = времНалоговаяГруппа20;
			Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Перечисления.СтавкиНДС.НДС20);
			Элемент[2] = Ложь;
			
			ТаблицаСоответствий.Добавить(Элемент);
			
			НужноПерезаписать = Истина;
			
		КонецЕсли;
		
		Если времНалоговаяГруппа14 <> Неопределено Тогда
        	
        	Элемент = Новый Массив(3);
        	
        	Элемент[0] = времНалоговаяГруппа14;
        	Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Перечисления.СтавкиНДС.НДС14);
        	Элемент[2] = Ложь;
        	
        	ТаблицаСоответствий.Добавить(Элемент);
        	
        	НужноПерезаписать = Истина;
        	
        КонецЕсли;
		
		Если времНалоговаяГруппа7 <> Неопределено Тогда
			
			Элемент = Новый Массив(3);
			
			Элемент[0] = времНалоговаяГруппа7;
			Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Перечисления.СтавкиНДС.НДС7);
			Элемент[2] = Ложь;
			
			ТаблицаСоответствий.Добавить(Элемент);
			
			НужноПерезаписать = Истина;
			
		КонецЕсли;
		
		Если времНалоговаяГруппа0 <> Неопределено Тогда
			
			Элемент = Новый Массив(3);
			
			Элемент[0] = времНалоговаяГруппа0;
			Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Перечисления.СтавкиНДС.НДС0);
			Элемент[2] = Ложь;
			
			ТаблицаСоответствий.Добавить(Элемент);
			
			НужноПерезаписать = Истина;
			
		КонецЕсли;
		
		Если НужноПерезаписать Тогда
			
			Параметры.Вставить("ТаблицаСоответствийНалоговыхГрупп", ТаблицаСоответствий);
		
			ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектСправочника.Параметры = Новый ХранилищеЗначения(Параметры);
			ОбъектСправочника.Записать();
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
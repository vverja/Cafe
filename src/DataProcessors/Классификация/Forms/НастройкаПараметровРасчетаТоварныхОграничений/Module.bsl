
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ПериодРасчетаТоварныхОграничений = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовРасчетаТоварныхОграничений = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	
	ВыполнятьРасчетТоварныхОграниченийПо = Константы.ВыполнятьРасчетТоварныхОграниченийПоКоличествуПродаж.Получить();
	УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений = Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДекорацияРасчетТоварныхОграниченийОписание.Заголовок = НСтр("ru='По данным за период:';uk='За даними за період:'")
		+ " " + ОписаниеНастройки(ПериодРасчетаТоварныхОграничений, КоличествоПериодовРасчетаТоварныхОграничений);
	Элементы.УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений.Доступность = ВыполнятьРасчетТоварныхОграниченийПо;
	Элементы.ДекорацияУчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений.Доступность = ВыполнятьРасчетТоварныхОграниченийПо И УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодРасчетаТоварныхОграниченийПриИзменении(Элемент)
	
	Элементы.ДекорацияРасчетТоварныхОграниченийОписание.Заголовок = НСтр("ru='По данным за период:';uk='За даними за період:'")
		+ " " + ОписаниеНастройки(ПериодРасчетаТоварныхОграничений, КоличествоПериодовРасчетаТоварныхОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовРасчетаТоварныхОграниченийПриИзменении(Элемент)
	
	Элементы.ДекорацияРасчетТоварныхОграниченийОписание.Заголовок = НСтр("ru='По данным за период:';uk='За даними за період:'")
		+ " " + ОписаниеНастройки(ПериодРасчетаТоварныхОграничений, КоличествоПериодовРасчетаТоварныхОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьРасчетТоварныхОграниченийПоПриИзменении(Элемент)
	
	Элементы.УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений.Доступность = ВыполнятьРасчетТоварныхОграниченийПо;
	Элементы.ДекорацияУчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений.Доступность = ВыполнятьРасчетТоварныхОграниченийПо И УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграниченийПриИзменении(Элемент)
	
	Элементы.ДекорацияУчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений.Доступность = УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура OK(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		СохранитьПараметры();
		
		КодВозврата = Новый Структура;
		
		КодВозврата.Вставить("ПериодРасчетаТоварныхОграничений", ПериодРасчетаТоварныхОграничений);
		КодВозврата.Вставить("КоличествоПериодовРасчетаТоварныхОграничений", КоличествоПериодовРасчетаТоварныхОграничений);
		КодВозврата.Вставить("ВыполнятьРасчетТоварныхОграниченийПо", ВыполнятьРасчетТоварныхОграниченийПо);
		КодВозврата.Вставить("УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений", УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений);
		Оповестить("ЗакрытиеФормы", , ЭтаФорма);
		Закрыть(КодВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиенте
Функция ОписаниеНастройки(Период, КоличествоПериодов, Подпериод = Неопределено)
	
	ПредставлениеНастройки = "";
	
	Если НЕ ЗначениеЗаполнено(КоличествоПериодов) ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		
		Возврат ПредставлениеНастройки;
		
	КонецЕсли;
	
	ПараметрыПредметаИсчисления = "";
	
	Если Период = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru='предыдущий день, предыдущих дня, предыдущих дней, м,,,,, 0';uk='попередній день, попереднього дня, попередніх днів, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru='предыдущая неделя, предыдущие недели, предыдущих недель, ж,,,,, 0';uk='попередній тиждень, попередні тижні, попередніх тижнів, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru='предыдущая декада, предыдущие декады, предыдущих декад, ж,,,,, 0';uk='попередня декада, попередні декади, попередніх декад, ж,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru='предыдущий месяц, предыдущих месяца, предыдущих месяцев, м,,,,, 0';uk='попередній місяць, попереднього місяця, попередніх місяців, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru='предыдущий квартал, предыдущих квартала, предыдущих кварталов, м,,,,, 0';uk='попередній квартал, попереднього квартала, попередніх кварталів, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru='предыдущее полугодие, предыдущих полугодия, предыдущих полугодий, с,,,,, 0';uk='попереднє півріччя, попереднього півріччя, попередніх піврічь, с,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru='предыдущий год, предыдущих года, предыдущих лет, м,,,,, 0';uk='попередній рік, попереднього року, попередніх років, м,,,,, 0'");
		
	Иначе
		
		ПараметрыПредметаИсчисления = "";
		
	КонецЕсли;
	
	ПредставлениеНастройки = НРег(ЧислоПрописью(КоличествоПериодов,, ПараметрыПредметаИсчисления));
	
	Если ЗначениеЗаполнено(Подпериод) Тогда
		
		Если Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + НСтр("ru=' (по дням).';uk=' (по днях).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + НСтр("ru=' (по неделям).';uk=' (по тижнях).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + НСтр("ru=' (по декадам).';uk=' (по декадах).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + НСтр("ru=' (по месяцам).';uk=' (по місяцях).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + НСтр("ru=' (по кварталам).';uk=' (за кварталами).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + НСтр("ru=' (по полугодиям).';uk=' (по півріччях).'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + НСтр("ru=' (по годам).';uk=' (по роках).'");
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеНастройки = ПредставлениеНастройки + ".";
		
	КонецЕсли;
	
	Возврат ПредставлениеНастройки;
	
КонецФункции

&НаСервере
Процедура СохранитьПараметры()
	
	// Запись констант осуществляется в привелигированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ПериодРасчетаТоварныхОграничений.Установить(ПериодРасчетаТоварныхОграничений);
	Константы.КоличествоПериодовРасчетаТоварныхОграничений.Установить(КоличествоПериодовРасчетаТоварныхОграничений);
	Константы.ВыполнятьРасчетТоварныхОграниченийПоКоличествуПродаж.Установить(ВыполнятьРасчетТоварныхОграниченийПо);
	Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений.Установить(УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений);
	
	// Выключение привелигированного режима.
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

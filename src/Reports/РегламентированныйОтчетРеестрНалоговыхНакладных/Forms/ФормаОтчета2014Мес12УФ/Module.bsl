&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2014Мес12УФ";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1 = "T1R";
	СтруктураРеквизитовФормы.мИдГруппы2 = "T2R";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	КолИсхСтрокИдГруппы2 = 1;
	
	СтруктураДанныхВыданные	= Новый Структура;
	СтруктураДанныхПолученные = Новый Структура;
	СтруктураДанныхСлужебныеДанные 		= Новый Структура;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	

	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	
	ЗаполнитьСтруктурыКолонокМногострочныхЧастей();
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/12/2014";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Выданные";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	
	СтруктураРеквизитовФормы.ДатаКон  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.ДатаНач  = Параметры.мДатаНачалаПериодаОтчета;

	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
	// параметры заполнения отчета
	СтруктураРеквизитовФормы.Вставить("ДатаНач"								, '0001-01-01');
	СтруктураРеквизитовФормы.Вставить("ДатаКон"								, '0001-01-01');
	СтруктураРеквизитовФормы.Вставить("ОбособленноеПодразделение");
	СтруктураРеквизитовФормы.Вставить("ПоОбособленномуПодразделению" 		, Ложь);
	СтруктураРеквизитовФормы.Вставить("ПервыйНомерПолученные" 			, 1);
	СтруктураРеквизитовФормы.Вставить("ПервыйНомерВыданные" 				, 1);
	СтруктураРеквизитовФормы.Вставить("СортироватьВыданныеТолькоПоНомеру" , Ложь);	
	
КонецПроцедуры


// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			
		КонецЕсли;
		
		Модифицированность = Истина;
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузка.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Выданные";
	СтрокаУровня1.Представление            = НСтр("ru='Выданные НН';uk='Видані ПН'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Полученные";
	СтрокаУровня1.Представление            = НСтр("ru='Полученные НН';uk='Отримані ПН'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СлужебныеДанные";
	СтрокаУровня1.Представление            = НСтр("ru='Служебные данные';uk='Службові дані'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Выданные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Полученные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "СлужебныеДанные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
					
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если    Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Выданные"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Полученные" Тогда
	
		Элементы.ДобавитьСтроку.Доступность = Истина;
		Элементы.УдалитьСтроку.Доступность  = Истина;
		
	КонецЕсли;
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	//Если ИмяТекРаздела = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	// Многостраничные разделы.
	
	//Если НаимРаздела = "Раздел2" Тогда
	Если Ложь Тогда
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
			
		КонецЕсли;
					
	// Многострочные и обычные разделы.
	//
	ИначеЕсли НаимРаздела = "Выданные"
		  ИЛИ НаимРаздела = "Полученные"
		  ИЛИ НаимРаздела = "СлужебныеДанные" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // СохранитьДанныеРаздела()

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	   ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	//Если ИмяТекРаздела = "Раздел2" Тогда 
	Если Ложь Тогда  
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
	    
	    ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	    
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные и обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Выданные"
		  ИЛИ ИмяТекРаздела = "Полученные"
		  ИЛИ ИмяТекРаздела = "СлужебныеДанные" Тогда
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		
		КонецЦикла;
		
	КонецЕсли;	
	
	//ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "СлужебныеДанные" Тогда
		ЗаполнитьДатуПодписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);

	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);

	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт

	Перем ТекТабличноеПоле;
		
	Если  ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		
		ТекТабличноеПоле = "Выданные";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Полученные";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()


&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	
	
	ДатаСтрокой = Формат(Форма.ДатаПодписи, "ДФ=ddMMyyyy");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Полученные", "Д_", 8, ДатаСтрокой, Истина, Истина);	
	
	ЗаполнитьПоказательНаСервере("HFILL",  Форма.ДатаПодписи, Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("D_FILL", Форма.ДатаПодписи, Форма, "СлужебныеДанные");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	Организация 				= Форма.СтруктураРеквизитовФормы.Организация;	
	

	ЗаполнитьПоказательНаСервере("Штампик1", "ЗАТВЕРДЖЕНО", 											Форма, "Выданные");
	ЗаполнитьПоказательНаСервере("Штампик2", "Наказ Міністерства фінансів України", 				    Форма, "Выданные");
	ЗаполнитьПоказательНаСервере("Штампик3", "22 вересня 2014 року N 958",								Форма, "Выданные");
	
	ЗаполнитьПоказательНаСервере("HZ", "X",  Форма, "Выданные");	
	ЗаполнитьПоказательНаСервере("HZN", "",  Форма, "Выданные");	
	
	ЗаполнитьПоказательНаСервере("_021", "X", Форма, "Выданные");	
	ЗаполнитьПоказательНаСервере("_022", "",  Форма, "Выданные");	
	ЗаполнитьПоказательНаСервере("_023", "",  Форма, "Выданные");	
	ЗаполнитьПоказательНаСервере("_024", "",  Форма, "Выданные");	
	
	C_DOC_STAN = 1;
	ЗаполнитьПоказательНаСервере("C_DOC_STAN", C_DOC_STAN,  Форма, "СлужебныеДанные");	
	
	ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "Выданные");
	Если Форма.СтруктураРеквизитовФормы.ПоОбособленномуПодразделению Тогда
		ПриИзмененииОбособленногоПодразделения(Форма);
	КонецЕсли;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ИНН");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");

	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ИННБух");
	СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	
	КодЕДРПОУ         = Сведения.КодПоЕДРПОУ;
	ИНН         	  = Сведения.ИНН;
	
	ТекДата =  Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	НалоговаяИнспекция= Сведения.НалоговаяИнспекция;
	ФИОДиректора      = СведенияДатаПодписи.ФИОРук;
	ФИОГлавБуха       = СведенияДатаПодписи.ФИОБух;
	ИННФИОДиректора   = СведенияДатаПодписи.ИННРук;
	ИННГлавБуха       = СведенияДатаПодписи.ИННБух;
	
	ЗаполнитьПоказательНаСервере("TIN",   КодЕДРПОУ, 		Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HNPDV", ИНН, 				Форма, "Выданные");
	ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора, 	Форма, "Полученные");
	ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, 		Форма, "Полученные");
	ЗаполнитьПоказательНаСервере("HKBOS", ИННФИОДиректора, 	Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HKBUH", ИННГлавБуха, 		Форма, "СлужебныеДанные");
	
	ЗначениеВКвадраты = Формат(ИННФИОДиректора, "ЧГ=0");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Полученные", "ИННРук_", 10, ЗначениеВКвадраты, Ложь);					
	
	ЗначениеВКвадраты = Формат(ИННГлавБуха, "ЧГ=0");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Полученные", "ИННГБ_", 10, ЗначениеВКвадраты, Ложь);					
	
	//налоговая инспекция из справочника налоговых инспекций
    Если ЗначениеЗаполнено(НалоговаяИнспекция) Тогда 
		ЗаполнитьПоказательНаСервере("C_RAJ", НалоговаяИнспекция.КодАдмРайона, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_REG", НалоговаяИнспекция.Родитель.Код, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI_ORIG", НалоговаяИнспекция.Код, 		Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI", НалоговаяИнспекция.Код, 			Форма, "СлужебныеДанные");
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные"); //номер исправленного доекумента. Для первого подающегося документа  = 0
	ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");;
	
	ЗаполнитьПоказательНаСервере("C_DOC_STAN", 1,  Форма, "СлужебныеДанные");	
	ЗаполнитьПоказательНаСервере("PERIOD_TYPE",  1,  Форма, "СлужебныеДанные");
	
	PERIOD_MONTH = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	PERIOD_YEAR	 = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЗаполнитьПоказательНаСервере("PERIOD_YEAR",  PERIOD_YEAR,  Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("PERIOD_MONTH", PERIOD_MONTH, Форма, "СлужебныеДанные");
	
	ЗаполнитьПоказательНаСервере("HZY", PERIOD_YEAR,  Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HZM", PERIOD_MONTH, Форма, "СлужебныеДанные");
	
	ЗаполнитьПоказательНаСервере("HNP",   1, Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HNP_1", 0, Форма, "Выданные");
	ЗаполнитьПоказательНаСервере("HNP_2", 1, Форма, "Выданные");
	
	ЗаполнитьПоказательНаСервере("HFILL",  Форма.ДатаПодписи, Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("D_FILL", Форма.ДатаПодписи, Форма, "СлужебныеДанные");
	
	ДатаСтрокой = Формат(Форма.ДатаПодписи, "ДФ=ddMMyyyy");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Полученные", "Д_", 8, ДатаСтрокой, Истина, Истина);	
	
	ГодСтрокой = Формат(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=yyyy");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Выданные", "Год_", 4, ГодСтрокой, Истина, Истина);
	
	МесяцСтрокой = Формат(PERIOD_MONTH, "ЧЦ=2; ЧВН=");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Выданные", "Месяц_", 2, МесяцСтрокой, Истина, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Выданные" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы1);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Полученные" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы2);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("ДатаНач", 						СтруктураРеквизитовФормы.ДатаНач);
	СписокСохранения.Свойство("ДатаКон", 						СтруктураРеквизитовФормы.ДатаКон);
	
	СписокСохранения.Свойство("ОбособленноеПодразделение", 		СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	СписокСохранения.Свойство("ПоОбособленномуПодразделению", 	СтруктураРеквизитовФормы.ПоОбособленномуПодразделению);
	
	СписокСохранения.Свойство("ПервыйНомерПолученные", 		СтруктураРеквизитовФормы.ПервыйНомерПолученные);
	СписокСохранения.Свойство("ПервыйНомерВыданные", 			СтруктураРеквизитовФормы.ПервыйНомерВыданные);
	
	СписокСохранения.Свойство("СортироватьВыданныеТолькоПоНомеру", СтруктураРеквизитовФормы.СортироватьВыданныеТолькоПоНомеру);
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "Выданные";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1 Тогда
			НомерПервойСтроки = Форма.СтруктураРеквизитовФормы.ПервыйНомерВыданные;
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда
			НомерПервойСтроки = Форма.СтруктураРеквизитовФормы.ПервыйНомерПолученные;
		КонецЕсли;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	СписокСохранения.Вставить("ДатаНач", 						СтруктураРеквизитовФормы.ДатаНач);
	СписокСохранения.Вставить("ДатаКон", 						СтруктураРеквизитовФормы.ДатаКон);
	
	СписокСохранения.Вставить("ОбособленноеПодразделение", 		СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	СписокСохранения.Вставить("ПоОбособленномуПодразделению", 	СтруктураРеквизитовФормы.ПоОбособленномуПодразделению);
	
	СписокСохранения.Вставить("ПервыйНомерПолученные", 		СтруктураРеквизитовФормы.ПервыйНомерПолученные);
	СписокСохранения.Вставить("ПервыйНомерВыданные", 			СтруктураРеквизитовФормы.ПервыйНомерВыданные);
	
	СписокСохранения.Вставить("СортироватьВыданныеТолькоПоНомеру", СтруктураРеквизитовФормы.СортироватьВыданныеТолькоПоНомеру);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	#Если НаКлиенте Тогда
	//		Форма.ИзменитьЦветЯчеекНаКлиенте();
	//	#Иначе
	//		Форма.ИзменитьЦветЯчеекНаСервере();
	//	#КонецЕсли
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	//КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	//
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//	
	//	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	Иначе	
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
	//	КонецЕсли;
	//
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
	//	
	//Иначе	
	//	
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
	//	
	//	Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
	//			
	//КонецЕсли;
		
КонецПроцедуры // ИзменитьЦветЯчеек()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	////Если (ИмяПоказателя = "Сумма30Раздел1")
	//// Или (ИмяПоказателя = "Сумма40Раздел1")
	//// Или (ИмяПоказателя = "Сумма50Раздел1")
	//// Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	// обновим данные многострочных групп
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
		
		ИдГрупп = Новый Структура;
		ИдГрупп.Вставить("мИдГруппы1", Форма.СтруктураРеквизитовФормы.мИдГруппы1);
		ИдГрупп.Вставить("мИдГруппы2", Форма.СтруктураРеквизитовФормы.мИдГруппы2);
		
		ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели, , ИдГрупп);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
		КонецЦикла;
		
	КонецЕсли;
		
	Если ИмяСтраницыПанели = "Выданные" Тогда
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		Для НомерКолонки = 7 По 114 Цикл
			
			Если    НомерКолонки = 11 
				ИЛИ (НомерКолонки > 13 И НЕ (НомерКолонки >=110 И НомерКолонки <=114 И НомерКолонки <> 112)) Тогда
				Продолжить;
			КонецЕсли;
			
			Итог = 0;
			ИтогУ = 0;
			Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
				ТекЗначение = ЭлементТабл["T1RXXXXG"+НомерКолонки];
				
				Итог = Итог + ТекЗначение;
				Если ЗначениеЗаполнено(ЭлементТабл.T1RXXXXG43S) Тогда
					ИтогУ = ИтогУ + ТекЗначение;	
				КонецЕсли;
			КонецЦикла;
			Итог  = ОкруглитьЧислоПоФормату(Форма, Итог);
			ИтогУ = ОкруглитьЧислоПоФормату(Форма, ИтогУ);
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области["R011G"+НомерКолонки].Значение = Итог;		
				Форма.ТабличныйДокумент.Области["R012G"+НомерКолонки].Значение = ИтогУ;		
			Иначе
				Форма.СтруктураДанныхВыданные["R011G"+НомерКолонки] = Итог;		
				Форма.СтруктураДанныхВыданные["R012G"+НомерКолонки] = ИтогУ;		
			КонецЕсли;
			
		КонецЦикла; 
		
	ИначеЕсли	ИмяСтраницыПанели = "Полученные" Тогда	
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		Для НомерКолонки = 8 По 113 Цикл
			
			Если НомерКолонки > 16 И НЕ (НомерКолонки >=110) Тогда
				Продолжить;
			КонецЕсли;
			
			Итог = 0;
			ИтогУ = 0;
			Для Каждого ЭлементТабл Из ТаблицаБлока Цикл
				
				ТекЗначение = ЭлементТабл["T2RXXXXG"+НомерКолонки];
				// в некоторых колонках может быть строковый символ вместо числа
				Если НЕ ТипЗнч(ТекЗначение) = Тип("Число") Тогда
					ТекЗначение = 0;	
				КонецЕсли;
				
				Итог = Итог + ТекЗначение;
				Если ЗначениеЗаполнено(ЭлементТабл.T2RXXXXG53S) Тогда
					ИтогУ = ИтогУ + ТекЗначение;	
				КонецЕсли;
			КонецЦикла;
			Итог = ОкруглитьЧислоПоФормату(Форма, Итог);
			ИтогУ = ОкруглитьЧислоПоФормату(Форма, ИтогУ);
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
				Форма.ТабличныйДокумент.Области["R021G"+НомерКолонки].Значение = Итог;		
				Форма.ТабличныйДокумент.Области["R022G"+НомерКолонки].Значение = ИтогУ;		
			Иначе
				Форма.СтруктураДанныхПолученные["R021G"+НомерКолонки] = Итог;		
				Форма.СтруктураДанныхПолученные["R022G"+НомерКолонки] = ИтогУ;		
			КонецЕсли;
			
		КонецЦикла; 
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
		
		// В этом режиме перерассчитаем все показатели на листах в обратном порядке.
		Расчет(Форма, "Выданные",   ОбластьИмя);
		Расчет(Форма, "Полученные", ОбластьИмя);
		
	КонецЕсли;
	
КонецПроцедуры // Расчет()

// ОкруглитьЧислоПоФормату(Форма, )
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
    
    НомерСтраницы = 1;
    
    Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
        
        СтраницаРаздела.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
        СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
        
        НомерСтраницы = НомерСтраницы + 1;
        
    КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
		
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли

КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1 Тогда
			НомерПервойСтроки = Форма.СтруктураРеквизитовФормы.ПервыйНомерВыданные;
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда
			НомерПервойСтроки = Форма.СтруктураРеквизитовФормы.ПервыйНомерПолученные;
		КонецЕсли;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		//ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Форма.Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
   	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1 Тогда
			НомерПервойСтроки = Форма.СтруктураРеквизитовФормы.ПервыйНомерВыданные;
		ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда
			НомерПервойСтроки = Форма.СтруктураРеквизитовФормы.ПервыйНомерПолученные;
		КонецЕсли;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		//ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	//ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	
	Если Область.Имя = "HKV" Тогда
	    Область.Значение  = ?(ЗначениеЗаполнено(Область.Значение),"","X");
		Возврат;
	КонецЕсли;
	
	Если ИмяЯчейки = "HZ" Тогда
		
		ТабличныйДокумент.Области["HZ"].Значение = "X";
		ТабличныйДокумент.Области["HZN"].Значение = "";
		
		СтруктураДанныхСлужебныеДанные["C_DOC_STAN"] = 1;
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;

	Если ИмяЯчейки = "HZN" Тогда
		
		ТабличныйДокумент.Области["HZ"].Значение  = "";
		ТабличныйДокумент.Области["HZN"].Значение = "X";
		
		СтруктураДанныхСлужебныеДанные["C_DOC_STAN"] = 2;
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Лев(ИмяЯчейки, 3) = "_02" Тогда
		
		ТабличныйДокумент.Области["_021"].Значение  = "";
		ТабличныйДокумент.Области["_022"].Значение  = "";
		ТабличныйДокумент.Области["_023"].Значение  = "";
		ТабличныйДокумент.Области["_024"].Значение  = "";

		ТабличныйДокумент.Области[ИмяЯчейки].Значение  = "X";
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Лев(ИмяЯчейки, 4) = "HNP_" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Ном = ПолучитьПоказательНаСервере("HNP", ЭтаФорма, "СлужебныеДанные");
		                                      
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HNP",  "СлужебныеДанные",
																				 "HNP_", "Выданные",
																				 2, Истина, Истина));
		
		ПоказатьВводЧисла(ОписаниеОповещения,Ном, НСтр("ru='Введите значение';uk='Введіть значення'"), 2,0);
		
		Возврат;
		
	КонецЕсли;

	Если Лев(ИмяЯчейки, 6) = "ИННРук" Тогда
		
		ИНН = ПолучитьПоказательНаСервере("HKBOS", ЭтаФорма, "СлужебныеДанные");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HKBOS",  "СлужебныеДанные",
																				 "HKBOS_", "Полученые",
																				 10, Ложь, Неопределено));
		
		
		ПоказатьВводСтроки(ОписаниеОповещения, ИНН, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Лев(ИмяЯчейки, 5) = "ИННГБ" Тогда
		
		ИНН = ПолучитьПоказательНаСервере("HKBUH", ЭтаФорма, "СлужебныеДанные");
		                                      
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HKBUH",  "СлужебныеДанные",
																				 "HKBUH_", "Полученые",
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения, ИНН, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если    Лев(ИмяЯчейки, 11) = "T1RXXXXG43S"
	    ИЛИ Лев(ИмяЯчейки, 11) = "T2RXXXXG53S" Тогда
	
		ТекущееЗначение = ТабличныйДокумент.Области[ИмяЯчейки].Значение;	
		
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = ?(ЗначениеЗаполнено(ТекущееЗначение),"","У");
		
		ПоказатьПредупреждение(,НСтр("ru='Изменен признак уточняющего расчета (""У"")!';uk= 'Змінено ознаку уточнюючого розрахунку (""У"")!'"));
		
		ПозицияПодстроки = Найти(ИмяЯчейки, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяЯчейки = Лев(ИмяЯчейки, ПозицияПодстроки - 1);
		КонецЕсли;
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяЯчейки);		
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если    Лев(ИмяЯчейки, 11) = "T2RXXXXG52S" Тогда
	
		ТекущееЗначение = ТабличныйДокумент.Области[ИмяЯчейки].Значение;	
		
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = ?(ЗначениеЗаполнено(ТекущееЗначение),"","Р");
		
		ПоказатьПредупреждение(,НСтр("ru='Изменен признак распределения (""Р"")!';uk= 'Змінено ознаку розподілення (""Р"")!'"));
		
		ПозицияПодстроки = Найти(ИмяЯчейки, "_");
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(ИмяЯчейки);
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		Модифицированность = Истина;
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

		
Процедура ВводПоказателяВПолеТабличногоДокументЗавершение(Значение, ДополнительныеПараметры)
			
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере(ДополнительныеПараметры.ИмяЯчейки, Значение, ЭтаФорма, ДополнительныеПараметры.ИмяСтраницы);

	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСтраницыКвадратов) Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, ДополнительныеПараметры.ИмяСтраницыКвадратов, ДополнительныеПараметры.ИмяЯчейкиКвадратов, ДополнительныеПараметры.Размерность, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхВыданные.Очистить();
	СтруктураДанныхПолученные.Очистить();
	СтруктураДанныхСлужебныеДанные.Очистить();
	
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВвестиПоказатель()

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)

	ВыгрузитьОтчет();

КонецПроцедуры // Выгрузить()      

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		СтруктураПараметров.Вставить("Автомасштаб",        Истина);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()
	
// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаСервере()

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	_021 = СтруктураДанныхВыданные._021;
	_022 = СтруктураДанныхВыданные._022;
	_023 = СтруктураДанныхВыданные._023;
	_024 = СтруктураДанныхВыданные._024;
	
	ОчиститьНаСервере();
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	СтруктураДанныхВыданные._021 = _021;
	СтруктураДанныхВыданные._022 = _022;
	СтруктураДанныхВыданные._023 = _023;
	СтруктураДанныхВыданные._024 = _024;
	
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьЗапросРаздел1_2014Мес12(СортировкаТолькоПоНомеру = Ложь) 
	
	СтруктураПараметров = Новый Структура();

	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Накладная КАК Документ,
				   |	Номера_Документ.Номер КАК ДокументНомер,
				   
				   |	ВложенныйЗапрос.Накладная.СуммаДокумента КАК СуммаДокумента,
				   
				   |	ВложенныйЗапрос.Накладная.ПодтверждаетсяГТД КАК ПодтверждаетсяГТД,
				   |	ВложенныйЗапрос.Накладная.НомерГТД КАК НомерГТД,
				   
				   |	ВложенныйЗапрос.Накладная.СпецРежимНалогообложения 	   КАК СпецРежимНалогообложения,
				   
				   |	ВложенныйЗапрос.Накладная.ВидОперации КАК ВидОперации,
	               |	ВложенныйЗапрос.НакладнаяИзП2 КАК НакладнаяИзП2,
	               |	ВложенныйЗапрос.ПродажаНижеОбычнойЦены КАК ПродажаНижеОбычнойЦены,
	               |	ВложенныйЗапрос.Накладная.Дата КАК G2D,
				   
				   |	ВложенныйЗапрос.Накладная.НомерДляРеестра КАК НомерДляРеестра,
				   |	ВложенныйЗапрос.Накладная.ДатаДляРеестра  КАК ДатаДляРеестра,
				   
				   |	ВложенныйЗапрос.Накладная.ТипПричиныНевыдачиПокупателю КАК ТипПричиныНевыдачиПокупателю,
				   
				   |	ВложенныйЗапрос.Накладная.ДокументОснование КАК ДокументОснование,
				   |	Номера_ДокОснование.Номер КАК ДокументОснованиеНомер,
				   
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Накладная ССЫЛКА Документ.Приложение2КНалоговойНакладной
	               |			ТОГДА ВложенныйЗапрос.Накладная.НалоговаяНакладная.ОбособленноеПодразделение
	               |		ИНАЧЕ ВложенныйЗапрос.Накладная.ОбособленноеПодразделение
	               |	КОНЕЦ	КАК ОбособленноеПодразделение,
				   
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Накладная ССЫЛКА Документ.Приложение2КНалоговойНакладной
	               |			ТОГДА ВложенныйЗапрос.Накладная.НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов
	               |		ИНАЧЕ ВложенныйЗапрос.Накладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов
	               |	КОНЕЦ	КАК НаименованиеФилиала,
				   
				   |	ВложенныйЗапрос.Накладная.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены КАК НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены,
				   |	Номера_ННДляРезерва.Номер КАК НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦеныНомер,
				   
				   |	ЕстьNULL(ВложенныйЗапрос.Накладная.Контрагент.НеЯвляетсяРезидентом, Ложь) КАК НеЯвляетсяРезидентом,
				   
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Накладная ССЫЛКА Документ.Приложение2КНалоговойНакладной
	               |			ТОГДА ВложенныйЗапрос.Накладная.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	               |		ИНАЧЕ ВложенныйЗапрос.Накладная.ОбособленноеПодразделение.Префикс
	               |	КОНЕЦ КАК ПрефиксОП,
				   
				   |    НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Накладная.Дата, ДЕНЬ) КАК ПолеУпорядочиванияДата,

	               |	ВложенныйЗапрос.Накладная.Номер КАК ПолеУпорядочиванияНомер,
				   
				   | ВЫБОР
				   | 	КОГДА ВложенныйЗапрос.Накладная.ВидОперации В (&ОсобыеОперации)
				   |	ТОГДА Истина ИНАЧЕ Ложь 
				   | КОНЕЦ КАК ПокупателемЕстьОрганизация,
				   
				   | ВЫБОР
				   | 	КОГДА ВложенныйЗапрос.Накладная.ВидОперации В (&ОсобыеОперации)
				   |		ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.Накладная.Организация.НаименованиеПолное КАК СТРОКА(254))
				   |	ИНАЧЕ 
				   |		ВЫБОР 
				   |			КОГДА ВложенныйЗапрос.Накладная.Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина
				   |				И ВложенныйЗапрос.Накладная.Контрагент.ОбособленноеПодразделение = ИСТИНА
				   |			ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.Накладная.Контрагент.ГоловнойКонтрагент.НаименованиеПолное КАК СТРОКА(254)) + "" - "" + ВЫРАЗИТЬ(ВложенныйЗапрос.Накладная.Контрагент.НаименованиеПолное КАК СТРОКА(254))
				   |			ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Накладная.Контрагент.НаименованиеПолное КАК СТРОКА(254))
				   |		КОНЕЦ
				   | КОНЕЦ КАК G5S,
				   
				   |  ВЫБОР КОГДА ЕстьNULL(ВложенныйЗапрос.Накладная.ЭлектронныйДокумент, ""П"") = ИСТИНА ТОГДА ""Е"" ИНАЧЕ ""П"" КОНЕЦ КАК ВидНосителяДокумента,
				   
				   |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Накладная.ВидОперации В (&ОсобыеОперации)
	               |			ТОГДА ВЫБОР КОГДА ВложенныйЗапрос.Накладная.ВидОперации = &РаботыОтНерезидента
				   |					ТОГДА &ИННОрганизации
				   |					ИНАЧЕ ""400000000000""
				   |				  КОНЕЦ		
				   |		КОГДА Накладная.ПоставкаДипПредставительству = Истина И Накладная.ТипПричиныНевыдачиПокупателю <= 2 
			   	   |	    	ТОГДА ""400000000000""
				   |		КОГДА Накладная.ТипПричиныНевыдачиПокупателю = 7
			   	   |	    	ТОГДА ""300000000000""
				   |		ИНАЧЕ ВложенныйЗапрос.Накладная.Контрагент.ИНН
	               |	КОНЕЦ КАК G6,
				   
	               |	ВЫБОР
	               |		КОГДА       ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл1
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл1_ОС
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл7
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_1
				   |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_3
	               |			ТОГДА ВложенныйЗапрос.БазаНДС + ВложенныйЗапрос.НДС
	               |		КОГДА ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства       = &СтДекл2_1
				   |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл2_2
				   |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл3
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл4
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл5
	               |			ТОГДА ВложенныйЗапрос.БазаНДС
	               |	КОНЕЦ КАК G7,
				   
				   |	ВЫБОР КОГДА ВложенныйЗапрос.СтавкаНДС = &СтавкаНДС20 ТОГДА
				   |			ВЫБОР КОГДА ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства	  = &СтДекл1
	               |					ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл1_ОС
	               |					ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл7
	               |					ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_1
				   |					ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_3
	               |				ТОГДА ВложенныйЗапрос.БазаНДС
				   |			КОНЕЦ
				   |	КОНЕЦ КАК G8,
	               |	ВЫБОР КОГДА ВложенныйЗапрос.СтавкаНДС = &СтавкаНДС20 ТОГДА
		           |		ВЫБОР КОГДА ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства   = &СтДекл1
		           |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл1_ОС
		           |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл7
		           |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_1
		           |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_3
				   |			ТОГДА ВложенныйЗапрос.НДС
				   |		КОНЕЦ
	               |	КОНЕЦ КАК G9,
				   
				   |	ВЫБОР КОГДА ВложенныйЗапрос.СтавкаНДС = &СтавкаНДС7 ТОГДА
				   |		ВЫБОР КОГДА ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства	  = &СтДекл1
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл1_ОС
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_1
				   |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_3
	               |			ТОГДА ВложенныйЗапрос.БазаНДС
				   |		КОНЕЦ
				   |	КОНЕЦ КАК G110,
	               |	ВЫБОР КОГДА ВложенныйЗапрос.СтавкаНДС = &СтавкаНДС7 ТОГДА
		           |		ВЫБОР КОГДА ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства 	  = &СтДекл1
		           |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл1_ОС
		           |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_1
		           |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_3
				   |			ТОГДА ВложенныйЗапрос.НДС
				   |		КОНЕЦ
	               |	КОНЕЦ КАК G111,

				   
				   |	ВЫБОР КОГДА     ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл2_2
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_1
	               |					И ВложенныйЗапрос.СтавкаНДС = &СтавкаНДС0
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_3
	               |					И ВложенныйЗапрос.СтавкаНДС = &СтавкаНДС0
	               |			ТОГДА ВложенныйЗапрос.БазаНДС
				   
				   |	КОНЕЦ КАК G10,
				   
				   |	ВЫБОР КОГДА     ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл5
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_1
	               |					И (ВложенныйЗапрос.СтавкаНДС = &СтавкаБезНДС)
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_3
	               |					И (ВложенныйЗапрос.СтавкаНДС = &СтавкаБезНДС)
	               |			ТОГДА ВложенныйЗапрос.БазаНДС
	               |	КОНЕЦ КАК G113,
				   
				   |	ВЫБОР КОГДА     ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл3
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_1
	               |					И (ВложенныйЗапрос.СтавкаНДС = &СтавкаНеНДС)
	               |				ИЛИ ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл8_3
	               |					И (ВложенныйЗапрос.СтавкаНДС = &СтавкаНеНДС)
	               |			ТОГДА ВложенныйЗапрос.БазаНДС
	               |	КОНЕЦ КАК G114,
				   
				   |	ВЫБОР КОГДА  ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл2_1
	               |			ТОГДА ВложенныйЗапрос.БазаНДС
	               |	КОНЕЦ КАК G12,
				   
				   |	ВЫБОР КОГДА   ВложенныйЗапрос.СтатьяДекларацииНДСНалоговыеОбязательства = &СтДекл4
	               |			ТОГДА ВложенныйЗапрос.БазаНДС
	               |	КОНЕЦ КАК G13,
				   
				   |	ВЫБОР КОГДА ЕстьNULL(ВложенныйЗапрос.Накладная.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК УточняющийРасчет
				   
				   |ИЗ
	               |	(ВЫБРАТЬ
	               |		НДСНалоговыеОбязательства.Период КАК Период,
	               |		НДСНалоговыеОбязательства.СтатьяДекларацииНДСНалоговыеОбязательства КАК СтатьяДекларацииНДСНалоговыеОбязательства,
	               |		НДСНалоговыеОбязательства.СтавкаНДС КАК СтавкаНДС,
	               |		НДСНалоговыеОбязательства.БазаНДС КАК БазаНДС,
	               |		НДСНалоговыеОбязательства.НДС КАК НДС,
	               |		НДСНалоговыеОбязательства.Регистратор КАК Накладная,
	               |		НДСНалоговыеОбязательства.ПродажаНижеОбычнойЦены КАК ПродажаНижеОбычнойЦены,
	               |		ВЫБОР
	               |			КОГДА НДСНалоговыеОбязательства.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
	               |				ТОГДА НДСНалоговыеОбязательства.Регистратор.НалоговаяНакладная
	               |			ИНАЧЕ NULL
	               |		КОНЕЦ КАК НакладнаяИзП2
	               |	ИЗ
	               |		РегистрНакопления.НДСНалоговыеОбязательства КАК НДСНалоговыеОбязательства
	               |	ГДЕ
	               |		НДСНалоговыеОбязательства.Период >= &ДатаНач
	               |		И НДСНалоговыеОбязательства.Период <= &ДатаКон
	               |		И НДСНалоговыеОбязательства.Организация = &Организация
	               |		И (НДСНалоговыеОбязательства.Регистратор ССЫЛКА Документ.НалоговаяНакладная
	               |				ИЛИ НДСНалоговыеОбязательства.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной)
				   |		И (    НДСНалоговыеОбязательства.Регистратор.СпецРежимНалогообложения = &СпецРежимНалогообложения
				   |		   ИЛИ ВЫБОР КОГДА  &СпецРежимНалогообложения = 0 ТОГДА НДСНалоговыеОбязательства.Регистратор.СпецРежимНалогообложения = 7 ИНАЧЕ ЛОЖЬ КОНЕЦ)
				   |		 И ВЫБОР КОГДА &ПоОбособленномуПодразделению = Истина
				   |			ТОГДА ВЫБОР КОГДА НДСНалоговыеОбязательства.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной ТОГДА НДСНалоговыеОбязательства.Регистратор.НалоговаяНакладная.ОбособленноеПодразделение = &ОбособленноеПодразделение ИНАЧЕ НДСНалоговыеОбязательства.Регистратор.ОбособленноеПодразделение = &ОбособленноеПодразделение КОНЕЦ
				   |			ИНАЧЕ ИСТИНА
				   |		  КОНЕЦ
				   |	) КАК ВложенныйЗапрос
				   
				   | ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК Номера_Документ
				   |	ПО  Номера_Документ.Документ = ВложенныйЗапрос.Накладная
				   |	  И Номера_Документ.Организация = &Организация
				   
				   | ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК Номера_ННДляРезерва
				   |	ПО  Номера_ННДляРезерва.Документ 		= ВложенныйЗапрос.Накладная.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены
				   |	  И Номера_ННДляРезерва.Организация = &Организация
				   
				   | ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК Номера_ДокОснование
				   |	ПО  Номера_ННДляРезерва.Документ 		= ВложенныйЗапрос.Накладная.ДокументОснование
				   |	  И Номера_ННДляРезерва.Организация = &Организация
				   
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |//#СортировкаДата	ПолеУпорядочиванияДата,
	               |//#СортировкаДата	ПолеУпорядочиванияНомер,
	               |//#СортировкаНомер	ПолеУпорядочиванияНомер,
	               |//#СортировкаНомер	ПолеУпорядочиванияДата,
	               |	ПродажаНижеОбычнойЦены
	               |ИТОГИ
	               |	МАКСИМУМ(ВидОперации),
	               |	МАКСИМУМ(НакладнаяИзП2),
				   
				   |	МАКСИМУМ(ПодтверждаетсяГТД),
				   |	МАКСИМУМ(НомерГТД),
				   
				   |	МАКСИМУМ(ВидНосителяДокумента),
				   
				   |	МАКСИМУМ(ТипПричиныНевыдачиПокупателю),
				   |	МАКСИМУМ(СпецРежимНалогообложения),
				   |	МАКСИМУМ(СпецРежимНалогообложения),
				   
				   |	МАКСИМУМ(ОбособленноеПодразделение),
				   |	МАКСИМУМ(НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены),
				   
				   |	МАКСИМУМ(G2D),
	               |	МАКСИМУМ(G5S),
	               |	МАКСИМУМ(G6),
	               |	СУММА(G8),
	               |	СУММА(G9),
	               |	СУММА(G7),
	               |	СУММА(G12),
	               |	СУММА(G13),
	               |	СУММА(G10),
	               |	СУММА(G110),
				   |	СУММА(G111),
				   |	СУММА(G113),
				   |	СУММА(G114)
	               |ПО
	               |	Документ,
	               |	ПродажаНижеОбычнойЦены,
	               |	УточняющийРасчет";
				   
	    // поддерживаем старые релизы без новых реквизитов реквизита
		
		РеквизитыНН = Метаданные.Документы.НалоговаяНакладная.Реквизиты;
		
		Если СортировкаТолькоПоНомеру = Истина Тогда
			ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "//#СортировкаНомер", "");
		Иначе	
			ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "//#СортировкаДата", "");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
	   
	   ОсобыеОперации = Новый Массив();
	   ОсобыеОперации.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа);
	   ОсобыеОперации.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента);
	   ОсобыеОперации.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка);
	   СтруктураПараметров.Вставить("ОсобыеОперации", ОсобыеОперации);
	   
	   СтруктураПараметров.Вставить("РаботыОтНерезидента", 	Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента);
	   СтруктураПараметров.Вставить("ИННОрганизации", 		ПолучитьПоказательНаСервере("TIN", ЭтаФорма, "СлужебныеДанные"));
	   
	   СтруктураПараметров.Вставить("СтДекл1",    Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20);
	   СтруктураПараметров.Вставить("СтДекл1_ОС", Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20ПоставкаОФ);
	   СтруктураПараметров.Вставить("СтДекл2_1",  Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Экспорт);
	   СтруктураПараметров.Вставить("СтДекл2_2",  Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Другие);
	   СтруктураПараметров.Вставить("СтДекл3", 	  Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог);
	   СтруктураПараметров.Вставить("СтДекл4",    Справочники.СтатьиНалоговыхДеклараций.НДС_НОУслугиВнеУкраины);
	   СтруктураПараметров.Вставить("СтДекл5", 	  Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден);
	   СтруктураПараметров.Вставить("СтДекл7",    Справочники.СтатьиНалоговыхДеклараций.НДС_НОНерезидентУслуги);
	   СтруктураПараметров.Вставить("СтДекл8_1",  Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости);
	   СтруктураПараметров.Вставить("СтДекл8_3",  Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаТрансфЦенообразование);
	   
	   СтруктураПараметров.Вставить("СтавкаНДС20",  Перечисления.СтавкиНДС.НДС20);
	   СтруктураПараметров.Вставить("СтавкаНДС7",  Перечисления.СтавкиНДС.НДС7);
	   СтруктураПараметров.Вставить("СтавкаНДС0",   Перечисления.СтавкиНДС.НДС0);
	   СтруктураПараметров.Вставить("СтавкаБезНДС", Перечисления.СтавкиНДС.БезНДС);
	   СтруктураПараметров.Вставить("СтавкаНеНДС",  Перечисления.СтавкиНДС.НеНДС);
	   СтруктураПараметров.Вставить("ДатаНач", 		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	   СтруктураПараметров.Вставить("ДатаКон", 		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	   СтруктураПараметров.Вставить("Организация", 	СтруктураРеквизитовФормы.Организация);
	   СтруктураПараметров.Вставить("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	   
	   // заполним параметры запроса 
	   Для Каждого Параметр ИЗ СтруктураПараметров Цикл
		   Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	   КонецЦикла;
	   
	   Возврат Запрос;
    
КонецФункции

&НаСервере
Функция ПодготовитьЗапросРаздел2_2014Мес12()  
	
	СтруктураПараметров = Новый Структура();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НДСНалоговыйКредит.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(НДСНалоговыйКредит.Период,ДЕНЬ) КАК ПериодДень,
	|	НДСНалоговыйКредит.Регистратор КАК Документ,
	|	НДСНалоговыйКредит.Регистратор.Дата КАК G2D,
	|	НДСНалоговыйКредит.Регистратор.ДатаВходящегоДокумента КАК G3D,
	
	|	НДСНалоговыйКредит.Регистратор.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	НДСНалоговыйКредит.Регистратор.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных,
	
    |	ВЫБОР КОГДА ЕстьNULL(НДСНалоговыйКредит.Регистратор.ЭлектронныйДокумент, ""П"") = ИСТИНА ТОГДА ""Е"" ИНАЧЕ ""П"" КОНЕЦ КАК ВидНосителяДокумента,
	
	|   ВЫБОР 
	|		КОГДА ЕстьNULL(НДСНалоговыйКредит.Регистратор.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам, Ложь) = ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазы.ПоОплате)
	|		ТОГДА ""К""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПризнакКассовогоМетода,
	
	|   ВЫБОР 
	|		КОГДА НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7
	|		ТОГДА ""КО""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПризнакКорректировкиПоКонтролируемойОперации,
 
    |	НДСНалоговыйКредит.Регистратор.ДатаПолучения КАК ДатаПолучения,
	
	|	ВЫБОР
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.РегистрацияВходящегоНалоговогоДокумента
	|			ТОГДА НДСНалоговыйКредит.Регистратор.НомерВходящегоДокумента
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА НДСНалоговыйКредит.Регистратор.НомерГТД
	|	КОНЕЦ КАК G4S,
	|	ВЫБОР
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.РегистрацияВходящегоНалоговогоДокумента
	|			ТОГДА ВЫРАЗИТЬ(НДСНалоговыйКредит.Регистратор.Контрагент.НаименованиеПолное КАК СТРОКА(254))
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА ВЫРАЗИТЬ(НДСНалоговыйКредит.Регистратор.ПоставщикТоваров.НаименованиеПолное КАК СТРОКА(254))
	|	КОНЕЦ КАК G6S,
	|	ВЫБОР
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.РегистрацияВходящегоНалоговогоДокумента
	|			ТОГДА НДСНалоговыйКредит.Регистратор.Контрагент.ИНН
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА """"
	|	КОНЕЦ КАК G7,
	|	ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_1_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_3
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_3_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл14_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7
	|			ТОГДА 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_3
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_1_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_3
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_3_Усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл14_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл14_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4_НеХоз
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4_Усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7
	|			ТОГДА НДСНалоговыйКредит.БазаНДС + НДСНалоговыйКредит.НДС
	|	КОНЕЦ КАК G8,
	
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7
	|			ТОГДА НДСНалоговыйКредит.БазаНДС
	|		ИНАЧЕ 0 КОНЕЦ	
	|	КОНЕЦ КАК G110,
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7
	|			ТОГДА НДСНалоговыйКредит.НДС
	|		ИНАЧЕ 0 КОНЕЦ	
	|	КОНЕЦ КАК G111,
	
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7) ТОГДА ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7
	|			ТОГДА НДСНалоговыйКредит.БазаНДС
	|		ИНАЧЕ 0 КОНЕЦ	
	|	КОНЕЦ КАК G112,
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7) ТОГДА ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7
	|			ТОГДА НДСНалоговыйКредит.НДС
	|		ИНАЧЕ 0 КОНЕЦ	
	|	КОНЕЦ КАК G113,
	
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) ТОГДА ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7

	|			ТОГДА НДСНалоговыйКредит.БазаНДС
	|		ИНАЧЕ 0 КОНЕЦ	
	|	КОНЕЦ КАК G9,
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) ТОГДА ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_1_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_5_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6_ОС
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_5
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_7

	|			ТОГДА НДСНалоговыйКредит.НДС
	|		ИНАЧЕ 0 КОНЕЦ	
	|	КОНЕЦ КАК G10,
	
	|	ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1 И (СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) ИЛИ СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС))
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_3
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_3
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_2
	|			ТОГДА НДСНалоговыйКредит.БазаНДС
	|	КОНЕЦ КАК G11,
	|	ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_1 И (СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) ИЛИ СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС))
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл12_3
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_3
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_2
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_6_2
	|			ТОГДА НДСНалоговыйКредит.НДС
	|	КОНЕЦ КАК G12,
	|	ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл14_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4_НеХоз
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл14_2
	|			ТОГДА НДСНалоговыйКредит.БазаНДС
	|	КОНЕЦ КАК G13,
	|	ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл14_1
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4_НеХоз
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл14_2
	|			ТОГДА НДСНалоговыйКредит.НДС
	|	КОНЕЦ КАК G14,
	|	ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_1_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_3_Усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4_Усл
	|			ТОГДА НДСНалоговыйКредит.БазаНДС
	|	КОНЕЦ КАК G15,
	|	ВЫБОР
	|		КОГДА       НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл10_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл11_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_1_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_2_усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл13_3_Усл
	|				ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_4_Усл
	|			ТОГДА НДСНалоговыйКредит.НДС
	|	КОНЕЦ КАК G16,
	|	НДСНалоговыйКредит.Регистратор.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(НДСНалоговыйКредит.Регистратор.ВключаетсяВУточняющийРасчет , ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УточняющийРасчет,
	|	ЕстьNULL(НДСНалоговыйКредит.Регистратор.ПоставщикТоваров.НеЯвляетсяРезидентом, ЕстьNULL(НДСНалоговыйКредит.Регистратор.Контрагент.НеЯвляетсяРезидентом, Ложь)) КАК НеЯвляетсяРезидентом,
	|	ЕстьNULL(НДСНалоговыйКредит.Регистратор.ПоставщикТоваров, ЕстьNULL(НДСНалоговыйКредит.Регистратор.Контрагент, Ложь)) КАК Контрагент,
	|	"""" КАК ПризнакРаспределенияПропорциональногоНДС,	
	|	NULL КАК ВидДокумента
	|ИЗ
	|	РегистрНакопления.НДСНалоговыйКредит КАК НДСНалоговыйКредит
	|ГДЕ
	|	НДСНалоговыйКредит.Период >= &ДатаНач
	|	И НДСНалоговыйКредит.Период <= &ДатаКон
	|	И НДСНалоговыйКредит.Организация = &Организация
	|	И НДСНалоговыйКредит.КодОперации = &КодОперацииПервичныйДокумет
    |   И НДСНалоговыйКредит.Регистратор.СпецРежимНалогообложения = &СпецРежимНалогообложения
	
    |	И ВЫБОР КОГДА &ПоОбособленномуПодразделению = Истина
    |		ТОГДА ЕстьNULL(НДСНалоговыйКредит.Регистратор.ОбособленноеПодразделение, &ПустоеОбособленноеПодразделение) = &ОбособленноеПодразделение
    |		ИНАЧЕ ИСТИНА
    |	  КОНЕЦ
	
	| ОБЪЕДИНИТЬ ВСЕ
	
	
	|ВЫБРАТЬ
	|//#РаспределятьНДСВКонцеПериода	КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ) КАК Период,
	|//#РаспределятьНДСВКонцеПериода	НАЧАЛОПЕРИОДА(&ДатаКон,ДЕНЬ) КАК ПериодДень,
	|//#РаспределятьНДСВКонцеПериода	НДСНалоговыйКредит.Регистратор КАК Документ,
	|//#РаспределятьНДСВКонцеПериода	&ДатаКон КАК G2D,
	|//#РаспределятьНДСВКонцеПериода	НДСНалоговыйКредит.Регистратор.ДатаВходящегоДокумента КАК G3D,
	
	|//#РаспределятьНДССразу	НДСНалоговыйКредит.Период КАК Период,
	|//#РаспределятьНДССразу	НАЧАЛОПЕРИОДА(НДСНалоговыйКредит.Период,ДЕНЬ) КАК ПериодДень,
	|//#РаспределятьНДССразу	НДСНалоговыйКредит.Регистратор КАК Документ,
	|//#РаспределятьНДССразу	НДСНалоговыйКредит.Регистратор.Дата КАК G2D,
	|//#РаспределятьНДССразу	НДСНалоговыйКредит.Регистратор.ДатаВходящегоДокумента КАК G3D,
	
	|	НДСНалоговыйКредит.Регистратор.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	НДСНалоговыйКредит.Регистратор.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных,
	
    |  ВЫБОР КОГДА ЕстьNULL(НДСНалоговыйКредит.Регистратор.ЭлектронныйДокумент, ""П"") = ИСТИНА ТОГДА ""Е"" ИНАЧЕ ""П"" КОНЕЦ КАК ВидНосителяДокумента,
	
	|   ВЫБОР 
	|		КОГДА ЕстьNULL(НДСНалоговыйКредит.Регистратор.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам, Ложь) = ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазы.ПоОплате)
	|		ТОГДА ""К""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПризнакКассовогоМетода,
	
	|	"""" КАК ПризнакКорректировкиПоКонтролируемойОперации,
	
    |  НДСНалоговыйКредит.Регистратор.ДатаПолучения КАК ДатаПолучения,
	
	|	ВЫБОР
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.РегистрацияВходящегоНалоговогоДокумента
	|			ТОГДА НДСНалоговыйКредит.Регистратор.НомерВходящегоДокумента
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА НДСНалоговыйКредит.Регистратор.НомерГТД
	|	КОНЕЦ КАК G4S,
	|	ВЫБОР
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.РегистрацияВходящегоНалоговогоДокумента
	|			ТОГДА ВЫРАЗИТЬ(НДСНалоговыйКредит.Регистратор.Контрагент.НаименованиеПолное КАК СТРОКА(254))
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА ВЫРАЗИТЬ(НДСНалоговыйКредит.Регистратор.ПоставщикТоваров.НаименованиеПолное КАК СТРОКА(254))
	|	КОНЕЦ КАК G6S,
	|	ВЫБОР
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.РегистрацияВходящегоНалоговогоДокумента
	|			ТОГДА НДСНалоговыйКредит.Регистратор.Контрагент.ИНН
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА """"
	|	КОНЕЦ КАК G7,
	|	1 КАК ЕстьНДС,
	|	0 КАК G8,
	
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА - НДСНалоговыйКредит.БазаНДС  ИНАЧЕ 0 КОНЕЦ КАК G110,
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА - НДСНалоговыйКредит.НДС      ИНАЧЕ 0 КОНЕЦ КАК G111,
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)  ТОГДА - НДСНалоговыйКредит.БазаНДС  ИНАЧЕ 0 КОНЕЦ КАК G112,
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)  ТОГДА - НДСНалоговыйКредит.НДС      ИНАЧЕ 0 КОНЕЦ КАК G113,
	
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)  ТОГДА - НДСНалоговыйКредит.БазаНДС  ИНАЧЕ 0 КОНЕЦ КАК G9,
	|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)  ТОГДА - НДСНалоговыйКредит.НДС      ИНАЧЕ 0 КОНЕЦ КАК G10,
	
	|	НДСНалоговыйКредит.БазаНДС   КАК G11,
	|	НДСНалоговыйКредит.НДС       КАК G12,
	|	0 КАК G13,
	|	0 КАК G14,
	|	0 КАК G15,
	|	0 КАК G16,
	|	НДСНалоговыйКредит.Регистратор.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(НДСНалоговыйКредит.Регистратор.ВключаетсяВУточняющийРасчет , ЛОЖЬ)                    
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УточняющийРасчет,
	|	ЕстьNULL(НДСНалоговыйКредит.Регистратор.ПоставщикТоваров.НеЯвляетсяРезидентом, ЕстьNULL(НДСНалоговыйКредит.Регистратор.Контрагент.НеЯвляетсяРезидентом, Ложь)) КАК НеЯвляетсяРезидентом,
	|	ЕстьNULL(НДСНалоговыйКредит.Регистратор.ПоставщикТоваров, ЕстьNULL(НДСНалоговыйКредит.Регистратор.Контрагент, Ложь)) КАК Контрагент,
	
	|//#РаспределятьНДСВКонцеПериода	""Р"" КАК ПризнакРаспределенияПропорциональногоНДС,
	|//#РаспределятьНДССразу		    """" КАК ПризнакРаспределенияПропорциональногоНДС,	
	
	|	NULL КАК ВидДокумента
	
	|ИЗ
	|	РегистрНакопления.НДСНалоговыйКредит КАК НДСНалоговыйКредит
	|ГДЕ
	|	НДСНалоговыйКредит.Период >= &ДатаНач
	|	И НДСНалоговыйКредит.Период <= &ДатаКон
	|	И НДСНалоговыйКредит.Организация = &Организация
	|	И НДСНалоговыйКредит.КодОперации = &КодОперацииПервичныйДокумет
    |   И НДСНалоговыйКредит.Регистратор.СпецРежимНалогообложения = &СпецРежимНалогообложения
	|   И (    НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2
	|      ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл15_2_ОС
	|      ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6
	|      ИЛИ НДСНалоговыйКредит.СтатьяДекларацииНДСНалоговыйКредит = &СтДекл16_1_6_ОС)
	
    |   И ВЫБОР КОГДА &ПоОбособленномуПодразделению = Истина
    |		ТОГДА ЕстьNULL(НДСНалоговыйКредит.Регистратор.ОбособленноеПодразделение, &ПустоеОбособленноеПодразделение) = &ОбособленноеПодразделение
    |		ИНАЧЕ ИСТИНА
    |	  КОНЕЦ
	// добавим строку по годовому перерасчету кредита по приобретению товаров и ОС
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ)   КАК Период,
	|	НАЧАЛОПЕРИОДА(&ДатаКон,ДЕНЬ)   КАК ПериодДень,
	|	Перерасчет.Ссылка 			   КАК Документ,
	|	&ДатаКон 					   КАК G2D,
	|	Перерасчет.Дата 			   КАК G3D,
	|	ЛОЖЬ КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	NULL КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных,
	|   """" КАК ВидНосителяДокумента,
	
	|   """" КАК ПризнакКассовогоМетода,
	|	"""" КАК ПризнакКорректировкиПоКонтролируемойОперации,
	
	|	NULL КАК ДатаПолучения,
	|	"""" КАК G4S,
	|	"""" КАК G6S,
	|	"""" КАК G7,
	|	1 КАК ЕстьНДС,
	|	Перерасчет.СуммаКорректировкиНДС КАК G8,
	
	//|	0 КАК G110,
	//|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА Перерасчет.СуммаКорректировкиНДС ИНАЧЕ 0 КОНЕЦ КАК G111,
	//|	0 КАК G112,
	//|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7) ТОГДА Перерасчет.СуммаКорректировкиНДС ИНАЧЕ 0 КОНЕЦ КАК G113,
	//|	0 КАК G9,
	//|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) ТОГДА Перерасчет.СуммаКорректировкиНДС ИНАЧЕ 0 КОНЕЦ КАК G10,
	
	|	0 КАК G110,
	|	Перерасчет.СуммаКорректировкиНДС КАК G111,
	|	0 КАК G112,
	|	0 КАК G113,
	|	0 КАК G9,
	|	0 КАК G10,
	
	|	0 КАК G11,
	|	0 КАК G12,
	|	0 КАК G13,
	|	0 КАК G14,
	|	0 КАК G15,
	|	0 КАК G16,
	|	"""" КАК ВидОперации,
	|	ЛОЖЬ КАК УточняющийРасчет,
	|	ЛОЖЬ КАК НеЯвляетсяРезидентом,
	|	"""" КАК Контрагент,
	|   """" КАК ПризнакРаспределенияПропорциональногоНДС,	
	|	""БО"" КАК ВидДокумента
	|
	|ИЗ
	|	Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС КАК Перерасчет
	|ГДЕ
	|	  Перерасчет.Дата >= &ДатаНач
	|	И Перерасчет.Дата <= &ДатаКон
	|	И Перерасчет.Организация = &Организация
	|	И Перерасчет.Проведен
    |   И Перерасчет.СпецРежимНалогообложения = &СпецРежимНалогообложения
    |	И ВЫБОР КОГДА &ПоОбособленномуПодразделению = Истина
    |		ТОГДА &ОбособленноеПодразделение = &ПустоеОбособленноеПодразделение
    |	 	ИНАЧЕ ИСТИНА
    |	  КОНЕЦ
	
	// добавим строку по годовому перерасчету кредита по использованию ОС первые три года
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ)   КАК Период,
	|	НАЧАЛОПЕРИОДА(&ДатаКон,ДЕНЬ)   КАК ПериодДень,
	|	Перерасчет.Ссылка 			   КАК Документ,
	|	&ДатаКон 					   КАК G2D,
	|	Перерасчет.Ссылка.Дата 		   КАК G3D,
	|	ЛОЖЬ КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	NULL КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных,
	|   """" КАК ВидНосителяДокумента,
	
	|   """" КАК ПризнакКассовогоМетода,
	|	"""" КАК ПризнакКорректировкиПоКонтролируемойОперации,
	
	|	NULL КАК ДатаПолучения,
	|	"""" КАК G4S,
	|	"""" КАК G6S,
	|	"""" КАК G7,
	|	1 КАК ЕстьНДС,
	|	Перерасчет.СуммаКорректировкиНДС КАК G8,
	
	//|	0 КАК G110,
	//|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА Перерасчет.СуммаКорректировкиНДС ИНАЧЕ 0 КОНЕЦ КАК G111,
	//|	0 КАК G112,
	//|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7) ТОГДА Перерасчет.СуммаКорректировкиНДС ИНАЧЕ 0 КОНЕЦ КАК G113,
	//|	0 КАК G9,
	//|	ВЫБОР КОГДА СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) ТОГДА Перерасчет.СуммаКорректировкиНДС ИНАЧЕ 0 КОНЕЦ КАК G10,
	
	|	0 КАК G110,
	|	Перерасчет.СуммаКорректировкиНДС КАК G111,
	|	0 КАК G112,
	|	0 КАК G113,
	|	0 КАК G9,
	|	0 КАК G10,
	
	|	0 КАК G11,
	|	0 КАК G12,
	|	0 КАК G13,
	|	0 КАК G14,
	|	0 КАК G15,
	|	0 КАК G16,
	|	"""" КАК ВидОперации,
	|	ЛОЖЬ КАК УточняющийРасчет,
	|	ЛОЖЬ КАК НеЯвляетсяРезидентом,
	|	"""" КАК Контрагент,
	|   """" КАК ПризнакРаспределенияПропорциональногоНДС,	
	|	""БО"" КАК ВидДокумента
	|
	|ИЗ
	|	Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС.ПараметрыПерерасчетаОС КАК Перерасчет
	|ГДЕ
	|	  Перерасчет.Ссылка.Дата >= &ДатаНач
	|	И Перерасчет.Ссылка.Дата <= &ДатаКон
    |	И Перерасчет.ДатаНачалаИспользования < НАЧАЛОПЕРИОДА(&ДатаКон, ГОД)
	|	И Перерасчет.Ссылка.Организация = &Организация
	|	И Перерасчет.Ссылка.Проведен
    |   И Перерасчет.Ссылка.СпецРежимНалогообложения = &СпецРежимНалогообложения
    |	И ВЫБОР КОГДА &ПоОбособленномуПодразделению = Истина
    |		ТОГДА &ОбособленноеПодразделение = &ПустоеОбособленноеПодразделение
    |	 	ИНАЧЕ ИСТИНА
    |	  КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДень, Период
	|ИТОГИ
	|	СУММА(G8),
	
	|	СУММА(G110),
	|	СУММА(G111),
	|	СУММА(G112),
	|	СУММА(G113),
	
	|	СУММА(G9),
	|	СУММА(G10),
	|	СУММА(G11),
	|	СУММА(G12),
	|	СУММА(G13),
	|	СУММА(G14),
	|	СУММА(G15),
	|	СУММА(G16),
	
	|	СУММА(ЕстьНДС),
	
	|	МАКСИМУМ(G2D),
	|	МАКСИМУМ(G3D),
	|	МАКСИМУМ(G4S),
	|	МАКСИМУМ(G6S),
	|	МАКСИМУМ(G7),
	|	МАКСИМУМ(ВидНосителяДокумента),
	|	МАКСИМУМ(ВидДокумента),
	|	МАКСИМУМ(ПризнакРаспределенияПропорциональногоНДС),
	|   МАКСИМУМ(ПризнакКассовогоМетода),
	|	МАКСИМУМ(ПризнакКорректировкиПоКонтролируемойОперации)
	
	|ПО
	|	ПериодДень,
	|	ПризнакРаспределенияПропорциональногоНДС,
	|	Документ,
	|	УточняющийРасчет";
	
	
	ИмяДокументаЗКП = "РегистрацияВходящегоНалоговогоДокумента";
	
	РеквизитыНН = Метаданные.Документы[ИмяДокументаЗКП].Реквизиты;
	
	ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "NULL КАК ВидДокумента", "
	|	ВЫБОР
	|		КОГДА НДСНалоговыйКредит.Регистратор ССЫЛКА Документ.РегистрацияВходящегоНалоговогоДокумента
	|			ТОГДА НДСНалоговыйКредит.Регистратор.ВидДокумента
	|	КОНЕЦ КАК ВидДокумента");

	КоэффициентРасчетаПропорциональногоНДСПоДаннымПрошлогоГода = Ложь;
	

	ЗапросВариантРаспределенияПропорцНДС = Новый Запрос;
	ЗапросВариантРаспределенияПропорцНДС.Текст = "ВЫБРАТЬ
	                                             |	ЕСТЬNULL(Регистр.Регистратор.ПоДаннымПрошлогоГода, ЛОЖЬ) КАК ПоДаннымПрошлогоГода
	                                             |ИЗ
	                                             |	РегистрСведений.КоэффициентыПропорциональногоОтнесенияНДСНаКредит.СрезПоследних(&ДатаНач, Организация = &Организация) КАК Регистр
												 |";
	ЗапросВариантРаспределенияПропорцНДС.УстановитьПараметр("ДатаНач",         НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ЗапросВариантРаспределенияПропорцНДС.УстановитьПараметр("Организация", 	СтруктураРеквизитовФормы.Организация);
	Выборка = ЗапросВариантРаспределенияПропорцНДС.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоэффициентРасчетаПропорциональногоНДСПоДаннымПрошлогоГода = Выборка.ПоДаннымПрошлогоГода;
	КонецЕсли;
	
	Если КоэффициентРасчетаПропорциональногоНДСПоДаннымПрошлогоГода = Истина Тогда
		ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "//#РаспределятьНДССразу", "");
	Иначе	
		ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "//#РаспределятьНДСВКонцеПериода", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
   	
	СтруктураПараметров.Вставить("ДатаНач", 		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	СтруктураПараметров.Вставить("ДатаКон", 		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	СтруктураПараметров.Вставить("Организация", 	СтруктураРеквизитовФормы.Организация);
	
	СтруктураПараметров.Вставить("СтДекл10_1",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг);
	СтруктураПараметров.Вставить("СтДекл10_1_ОС",  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблагПриобрОФ);
	СтруктураПараметров.Вставить("СтДекл10_2",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРНеОблаг);
	СтруктураПараметров.Вставить("СтДекл10_2_усл", Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРНеОблагУслугВнеУкраины);
	СтруктураПараметров.Вставить("СтДекл11_1",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРОблаг);
	СтруктураПараметров.Вставить("СтДекл11_2",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг);
	СтруктураПараметров.Вставить("СтДекл11_2_усл", Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблагУслугВнеУкраины);
	СтруктураПараметров.Вставить("СтДекл12_1",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагНДСТамож);
	СтруктураПараметров.Вставить("СтДекл12_2",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагВексель);
	СтруктураПараметров.Вставить("СтДекл12_3",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагБезНДС);
	СтруктураПараметров.Вставить("СтДекл12_4",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагУслугиНерезидента);
	СтруктураПараметров.Вставить("СтДекл13_1",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектНДСТамож);
	СтруктураПараметров.Вставить("СтДекл13_1_усл", Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектНДСТаможУслугВнеУкраины);
	СтруктураПараметров.Вставить("СтДекл13_2",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектБезНДС);
	СтруктураПараметров.Вставить("СтДекл13_2_усл", Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектБезНДСУслугВнеУкраины);
	СтруктураПараметров.Вставить("СтДекл13_3",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектУслугиНерезидента);
	СтруктураПараметров.Вставить("СтДекл13_3_Усл", Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектУслугиНерезидентаУслугВнеУкраины);
	СтруктураПараметров.Вставить("СтДекл14_1",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСнеВР_);
	СтруктураПараметров.Вставить("СтДекл14_2",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСнеВР_);
	СтруктураПараметров.Вставить("СтДекл15_1",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредит);
	СтруктураПараметров.Вставить("СтДекл15_1_ОС",  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	СтруктураПараметров.Вставить("СтДекл15_2",     Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредит);
	СтруктураПараметров.Вставить("СтДекл15_2_ОС",  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ);
	
	СтруктураПараметров.Вставить("СтДекл16_1",     		Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости);
	СтруктураПараметров.Вставить("СтДекл16_1_2",   		Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимостиБезНК);
	СтруктураПараметров.Вставить("СтДекл16_1_4",   		Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаБезНК);
	СтруктураПараметров.Вставить("СтДекл16_1_4_НеХоз",  Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаБезНКНеХоз);
	СтруктураПараметров.Вставить("СтДекл16_1_4_Усл",    Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаБезНКДляУслугВнеУкраины);
	СтруктураПараметров.Вставить("СтДекл16_1_5",		Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредит);	
	СтруктураПараметров.Вставить("СтДекл16_1_5_ОС", 	Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);	
	СтруктураПараметров.Вставить("СтДекл16_1_6",    	Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредит);
	СтруктураПараметров.Вставить("СтДекл16_1_6_ОС", 	Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредитПоставкаОФ);
	
	СтруктураПараметров.Вставить("СтДекл16_2",   Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаЧастИспользВСХ);
	СтруктураПараметров.Вставить("СтДекл16_5",	 Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаВосстановлениеКредита);
	СтруктураПараметров.Вставить("СтДекл16_6_1", Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаВосстановлениеКредитаПропорциональноВклВКредит);
	СтруктураПараметров.Вставить("СтДекл16_6_2", Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаВосстановлениеКредитаПропорциональноНеВклВКредит);
	
	СтруктураПараметров.Вставить("СтДекл16_7",	 Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаТрансфЦенообразование);
	
	СтруктураПараметров.Вставить("КодОперацииПервичныйДокумет", 	Перечисления.КодыОперацийНДСНалоговыйКредит.ПервичныйДокумент);	
	
	// заполним параметры запроса 
	Для Каждого Параметр ИЗ СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
    
КонецФункции

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() <> "БП" Тогда
		Возврат;
	КонецЕсли;	
	СоответствиеСтранКонтрагентам = Новый Структура;
	
	////////////////////////////////////////
	// раздел 1 - выданные НН
	ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1];
	СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
	
	Запрос = ПодготовитьЗапросРаздел1_2014Мес12(СтруктураРеквизитовФормы.СортироватьВыданныеТолькоПоНомеру);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(СтруктураРеквизитовФормы.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(СтруктураРеквизитовФормы.ДатаКон));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ПоОбособленномуПодразделению", СтруктураРеквизитовФормы.ПоОбособленномуПодразделению);
	Запрос.УстановитьПараметр("ПустоеОбособленноеПодразделение", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
	
	
	Если ЗначениеЗаполнено(ЭтаФорма["СтруктураДанныхВыданные"]["_022"]) Тогда
		Запрос.УстановитьПараметр("СпецРежимНалогообложения",    2);
	ИначеЕсли ЗначениеЗаполнено(ЭтаФорма["СтруктураДанныхВыданные"]["_023"]) Тогда
		Запрос.УстановитьПараметр("СпецРежимНалогообложения",    3);
	ИначеЕсли ЗначениеЗаполнено(ЭтаФорма["СтруктураДанныхВыданные"]["_024"]) Тогда
		Запрос.УстановитьПараметр("СпецРежимНалогообложения",    4);
	Иначе
		Запрос.УстановитьПараметр("СпецРежимНалогообложения",    0);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Документ");
	ИндСтроки = 0;
	Пока ВыборкаДокументы.Следующий() Цикл
		ВывестиСтрокуВТаблицу(ВыборкаДокументы, СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы1, ИндСтроки);
		ИндСтроки = ИндСтроки + 1;
	КонецЦикла;
	ЗначениеВРеквизитФормы(СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы1);	
	
	
	////////////////////////////////////////
	// раздел 2 - полученные НН
	ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2];
	СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
	
	Запрос = ПодготовитьЗапросРаздел2_2014Мес12();

	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(СтруктураРеквизитовФормы.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(СтруктураРеквизитовФормы.ДатаКон));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("ПоОбособленномуПодразделению", СтруктураРеквизитовФормы.ПоОбособленномуПодразделению);
	Запрос.УстановитьПараметр("ПустоеОбособленноеПодразделение", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ЭтаФорма["СтруктураДанныхВыданные"]["_022"]) Тогда
		Запрос.УстановитьПараметр("СпецРежимНалогообложения",    2);
	ИначеЕсли ЗначениеЗаполнено(ЭтаФорма["СтруктураДанныхВыданные"]["_023"]) Тогда
		Запрос.УстановитьПараметр("СпецРежимНалогообложения",    3);
	ИначеЕсли ЗначениеЗаполнено(ЭтаФорма["СтруктураДанныхВыданные"]["_024"]) Тогда
		Запрос.УстановитьПараметр("СпецРежимНалогообложения",    4);
	Иначе
		Запрос.УстановитьПараметр("СпецРежимНалогообложения",    0);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИндСтроки = 0;
	ВыборкаДень = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ПериодДень");
	Пока ВыборкаДень.Следующий() Цикл
		ВыборкаРаспределниеНДС = ВыборкаДень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ПризнакРаспределенияПропорциональногоНДС");
		Пока ВыборкаРаспределниеНДС.Следующий() Цикл
			ВыборкаДокументы = ВыборкаРаспределниеНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Документ");
			Пока ВыборкаДокументы.Следующий() Цикл
				ВывестиСтрокуВТаблицу(ВыборкаДокументы, СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы2, ИндСтроки);
				ИндСтроки = ИндСтроки + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы2);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуВТаблицу(Выборка, Таблица,  Раздел, ИндексСтроки)
	
	перем ИсходноеКоличествоСтрокГруппы;

	мСтруктураИсхКолвоСтрокРазделов.Свойство(Раздел, ИсходноеКоличествоСтрокГруппы);	
	
	Если ИндексСтроки + 1 <= ИсходноеКоличествоСтрокГруппы Тогда
		СтрокаТаблицы = Таблица[ИндексСтроки];
	Иначе
		СтрокаТаблицы = Таблица.Добавить();
	КонецЕсли;
	
	// дата получения
	СтрокаТаблицы[Раздел + "XXXX" + "G2D"] = Выборка.G2D;	
	Если Раздел = СтруктураРеквизитовФормы.мИдГруппы2 
	   И ЗначениеЗаполнено(Выборка.ДатаПолучения)
	   Тогда
	   СтрокаТаблицы[Раздел + "XXXX" + "G2D"]  = Выборка.ДатаПолучения;  
    КонецЕсли;
	
	// дата выписки
	Если Раздел = СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		СтрокаТаблицы[Раздел + "XXXX" + "G3D"] = Выборка.G3D;
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			СтрокаТаблицы[Раздел + "XXXX" + "G3D"] = Выборка.G2D;
		КонецЕсли;
	КонецЕсли;
	
	// номер
	Если Раздел = СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		//полученные НН
		СтрокаТаблицы[Раздел + "XXXX" + "G4S"] = Выборка.G4S;	
	Иначе
		//выданные НН
		
		// добавим префиксы по спец. режимам и по обособленным подразделениям
		ФилиалПрефикс = "";
		СпецРежим = СокрЛП(Выборка.СпецРежимНалогообложения);
		Если ЗначениеЗаполнено(Выборка.СпецРежимНалогообложения)
			И НЕ Выборка.СпецРежимНалогообложения = "0" Тогда
			КодСпецРежима = "" + СпецРежим;
		Иначе
			КодСпецРежима = " ";//как и в реестре
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ПрефиксОП) Тогда
			Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= '2014-03-01' Тогда
			    НомерФилиала = "/" + Прав("" + СокрЛП(Формат(Число(Выборка.ПрефиксОП),"ЧЦ=4; ЧГ=0")),4);
			Иначе	
				НомерФилиала = Прав("0000" + СокрЛП(Выборка.ПрефиксОП),4);
			КонецЕсли;
		Иначе
			НомерФилиала = "";	
		КонецЕсли;
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ФилиалПрефикс = "/" + КодСпецРежима + НомерФилиала;
		КонецЕсли;			

		Если Выборка.ПодтверждаетсяГТД = Истина Тогда
		 	СтрокаТаблицы[Раздел + "XXXX" + "G3S"] = СокрЛП(Выборка.НомерГТД);
		Иначе
			Если  Выборка.ПродажаНижеОбычнойЦены = Истина 
				И ЗначениеЗаполнено(Выборка.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
				
				ТекНомер = Выборка.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦеныНомер;
				
				Если Не ЗначениеЗаполнено(ТекНомер) Тогда
					Если ЗначениеЗаполнено(Выборка.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены) Тогда
						ТекНомер = РегламентированнаяОтчетностьКлиентСервер.ПолучитьНомерНаПечать(Выборка.НалоговаяДляРезерваНомераПриПродажаНижеОбычнойЦены.Номер);	
					Иначе	
						ТекНомер = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе	
				
				ТекНомер = Выборка.ДокументНомер;
				Если Не ЗначениеЗаполнено(ТекНомер) Тогда
					
					Если Не ЗначениеЗаполнено(ТекНомер) Тогда
						Если ЗначениеЗаполнено(Выборка.Документ) Тогда
							ТекНомер = РегламентированнаяОтчетностьКлиентСервер.ПолучитьНомерНаПечать(Выборка.Документ.Номер);	
						Иначе	
							ТекНомер = "";
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТаблицы[Раздел + "XXXX" + "G3S"] = ТекНомер + ФилиалПрефикс;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Раздел = СтруктураРеквизитовФормы.мИдГруппы1 Тогда
		Если Выборка.УточняющийРасчет  = Истина Тогда
			Если  ЗначениеЗаполнено(Выборка.ДатаДляРеестра) Тогда
				СтрокаТаблицы[Раздел + "XXXX" + "G2D"] = Выборка.ДатаДляРеестра;
			КонецЕсли;		
			Если  ЗначениеЗаполнено(Выборка.НомерДляРеестра) Тогда
				СтрокаТаблицы[Раздел + "XXXX" + "G3S"] = Выборка.НомерДляРеестра;
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	//вид документа
	ВидДокумента = "";
	Если Раздел = СтруктураРеквизитовФормы.мИдГруппы2 Тогда

		Если Выборка.ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки Тогда
			
			ВидДокумента = Выборка.ВидДокумента;
			Если    ВидДокумента = "ПН"
				ИЛИ ВидДокумента = "РК"
				ИЛИ ВидДокумента = "МД" Тогда
				ВидДокумента = ВидДокумента + Выборка.ВидНосителяДокумента;	
				
				Если ЗначениеЗаполнено(Выборка.ПризнакКорректировкиПоКонтролируемойОперации) Тогда
					ВидДокумента = "БО" + ВидДокумента; 	
				КонецЕсли;
				
			ИначеЕсли ВидДокумента = "ВМД" Тогда
				// старый документ, с устаревшим кодом
				ВидДокумента = "МД" + Выборка.ВидНосителяДокумента;		
			КонецЕсли;
			
			Если Выборка.ВидДокумента = "ПН" Тогда
				ВидДокумента = ВидДокумента + Выборка.ПризнакКассовогоМетода;
			КонецЕсли;
			
		ИначеЕсли Выборка.ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита Тогда
			
			ВидДокумента = Выборка.ВидДокумента;
			
			Если    ВидДокумента = "-" 
				ИЛИ ВидДокумента = "БО" Тогда
				ВидДокумента = "";
			КонецЕсли;
			
			Если    ВидДокумента = "ПН"
				ИЛИ ВидДокумента = "РК"
				ИЛИ ВидДокумента = "МД" Тогда
				ВидДокумента = ВидДокумента + Выборка.ВидНосителяДокумента;	
			КонецЕсли;
			
			ВидДокумента = "БО" + ВидДокумента;
			
		ИначеЕсли  Выборка.ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная 
		       ИЛИ Выборка.ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода Тогда
			   
			   ВидДокумента = "ПН" + Выборка.ВидНосителяДокумента;
			   
		ИначеЕсли Выборка.ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат 
			  ИЛИ Выборка.ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка Тогда
			  
			  ВидДокумента = "РК" + Выборка.ВидНосителяДокумента;
			  
		ИначеЕсли Выборка.ВидОперации =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек Тогда
			ВидДокумента = Выборка.ВидДокумента;
			Если НЕ ЗначениеЗаполнено(Выборка.G7) Тогда
				// приобрели у неплательщика - его ИНН не заполнен в карточке
				ВидДокумента = "НП";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			ВидДокумента = "МД" + Выборка.ВидНосителяДокумента;
		//ИначеЕсли ТипЗнч(Выборка.Документ) = ТипДокументСсылкаПерерасчетНДС Тогда
		//	ВидДокумента = "БО";
		КонецЕсли;
		СтрокаТаблицы[Раздел + "XXXX" + "G51S"] = ВидДокумента;
		СтрокаТаблицы[Раздел + "XXXX" + "G52S"] = Выборка.ПризнакРаспределенияПропорциональногоНДС;
		СтрокаТаблицы[Раздел + "XXXX" + "G53S"] = ?(Выборка.УточняющийРасчет, "У", "")
		
	Иначе
		
		// выданные НН
		Если ЗначениеЗаполнено(Выборка.Документ) Тогда
			
			ТипПричиныНевыдачи = "";
			Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
				
				ВидДокумента = "ПН" + Выборка.ВидНосителяДокумента;
				
				Если 	Выборка.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации Тогда
					
					// подтвеждением операции поставки есть бух. документ
					ВидДокумента = "БО";
					// а номер документа это не номер технологической налоговой накладной из ИБ, а номер документа-основания.
					Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
						
						ТекНомер = Выборка.ДокументОснованиеНомер;
						Если Не ЗначениеЗаполнено(ТекНомер) Тогда
							Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
								ТекНомер = РегламентированнаяОтчетностьКлиентСервер.ПолучитьНомерНаПечать(Выборка.ДокументОснование.Номер);	
							Иначе	
								ТекНомер = "";
							КонецЕсли;
						КонецЕсли;
						
						СтрокаТаблицы[Раздел + "XXXX" + "G3S"] = ТекНомер;
					Иначе
						СтрокаТаблицы[Раздел + "XXXX" + "G3S"] = "";
					КонецЕсли;
					
				Иначе	 
					 //Если Выборка.ТипПричиныНевыдачиПокупателю <> 1 Тогда
					 ТипПричиныНевыдачи = Формат(Выборка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2; ЧВН="); 
					 //КонецЕсли;
					 
					Если Выборка.ПодтверждаетсяГТД = Истина Тогда
					 	ВидДокумента = "МД" + Выборка.ВидНосителяДокумента;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
	
				ВидДокумента = "РК" + Выборка.ВидНосителяДокумента;
				Если    Выборка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка
					ИЛИ Выборка.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат Тогда
					ВидДокумента = "БО";
				КонецЕсли;
				
				// электронная форма не предусматривает указания причины невыдачи для П2.
				//ВидДокумента = ВидДокумента + Формат(Выборка.ТипПричиныНевыдачиПокупателю, "ЧЦ=2; ЧВН=") 
				
			Иначе
				ВидДокумента = "БО";
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы[Раздел + "XXXX" + "G41S"] = ВидДокумента;
		СтрокаТаблицы[Раздел + "XXXX" + "G42S"] = ТипПричиныНевыдачи;
		СтрокаТаблицы[Раздел + "XXXX" + "G43S"] = ?(Выборка.УточняющийРасчет, "У", "");
		
	КонецЕсли;
	
	// наименование/ИНН
	Если Раздел = СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		
		СтранаНерезидента = "";
		// определим страну для нерезидента из адреса за пределами Украины
		Если    Выборка.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода 
			ИЛИ ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ГТДИмпорт") 
			И ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			
			Объект = Выборка.Контрагент;
			
			СтранаНерезидента = "";
			Если НЕ СоответствиеСтранКонтрагентам.Свойство(ПолучитьКлючПоСсылке(Объект), СтранаНерезидента) Тогда
				
				СтранаНерезидента = "";
				
				Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
					ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
					ИмяСправочника = "Организации";
				Иначе	
					ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;						    
					ИмяСправочника = "Контрагенты";
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
				Запрос.УстановитьПараметр("Ссылка", Объект);
				
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	КонтактнаяИнформация.Страна КАК СтранаНерезидента
					|ИЗ
					|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
					|ГДЕ
					|	КонтактнаяИнформация.Ссылка = &Ссылка
					|	И КонтактнаяИнформация.Вид = &Вид";
				
				ВыборкаСтрана = Запрос.Выполнить().Выбрать();
				Если ВыборкаСтрана.Следующий() Тогда
					СтранаНерезидента = "(" + СокрЛП(ВыборкаСтрана.СтранаНерезидента)+") ";
				КонецЕсли;
				
				СоответствиеСтранКонтрагентам.Вставить(ПолучитьКлючПоСсылке(Объект), СтранаНерезидента);
				
			КонецЕсли;
		
		КонецЕсли;
		СтрокаТаблицы[Раздел + "XXXX" + "G6S"] = СтранаНерезидента + СокрЛП(Выборка.G6S);
		
		Если    Выборка.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода 
			ИЛИ ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ГТДИмпорт")
			ИЛИ (НЕ ЗначениеЗаполнено(Выборка.G7) И Выборка.НеЯвляетсяРезидентом) Тогда			
			
			Если (НЕ Выборка.G13 = NULL  И Выборка.G13 > 0) ИЛИ (НЕ Выборка.G15 = NULL  И Выборка.G15 > 0) Тогда
			    //У разі якщо товари (послуги), придбані в нерезидента, не призначаються для використання у господарській діяльності 
				//або придбані з метою їх використання для поставки послуг за межами митної території України або послуг, місце 
				//поставки яких визначається відповідно до підпункту "д" пункту 6.5 статті 6 Закону, у графі 7 відображається умовний ІПН "200000000000". 
				СтрокаТаблицы[Раздел + "XXXX" + "G7"] = "200000000000";	
			Иначе
				//У разі якщо товари (послуги) придбані в нерезидента, у графі 7 відображається умовний ІПН "300000000000". 
				СтрокаТаблицы[Раздел + "XXXX" + "G7"] = "300000000000";
			КонецЕсли;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.G7) 
				//И НЕ ТипЗнч(Выборка.Документ) = ТипДокументСсылкаПерерасчетНДС 
				Тогда
			//У разі якщо товари (послуги) придбані в особи, яка не зареєстрована як платник податку, у графі 7 відображається умовний ІПН "400000000000".
			СтрокаТаблицы[Раздел + "XXXX" + "G7"] = "400000000000";
		Иначе
			СтрокаТаблицы[Раздел + "XXXX" + "G7"] = СокрЛП(Выборка.G7);
		КонецЕсли;	
	Иначе	
		
		СтрокаТаблицы[Раздел + "XXXX" + "G5S"] = СокрЛП(Выборка.G5S);	
		
		Если НЕ ЗначениеЗаполнено(Выборка.G6) 
			ИЛИ Найти("0123456789",Лев(СокрЛ(Выборка.G6),1)) = 0 Тогда
			СтрокаТаблицы[Раздел + "XXXX" + "G6"] = "400000000000";
			СтрокаТаблицы[Раздел + "XXXX" + "G5S"] = "Неплатник";
		Иначе
			СтрокаТаблицы[Раздел + "XXXX" + "G6"] = СокрЛП(Выборка.G6);
		КонецЕсли;	
		
	КонецЕсли;	
	
	
	// колонки уникальные в каждом разделе
	Если Раздел = СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		
		СтрокаТаблицы[Раздел + "XXXX"  + "G8"]  = Выборка.G8;
		СтрокаТаблицы[Раздел + "XXXX"  + "G110"] = Выборка.G110;
		СтрокаТаблицы[Раздел + "XXXX"  + "G111"] = Выборка.G111;
		СтрокаТаблицы[Раздел + "XXXX"  + "G112"] = Выборка.G112;
		СтрокаТаблицы[Раздел + "XXXX"  + "G113"] = Выборка.G113;
		
		СтрокаТаблицы[Раздел + "XXXX"  + "G9"]  = Выборка.G9;
		СтрокаТаблицы[Раздел + "XXXX"  + "G10"] = Выборка.G10;
		СтрокаТаблицы[Раздел + "XXXX"  + "G12"] = Выборка.G12;
		СтрокаТаблицы[Раздел + "XXXX"  + "G13"] = Выборка.G13;
		СтрокаТаблицы[Раздел + "XXXX"  + "G11"] = Выборка.G11;
		СтрокаТаблицы[Раздел + "XXXX"  + "G14"] = Выборка.G14;
		СтрокаТаблицы[Раздел + "XXXX"  + "G15"] = Выборка.G15;
		СтрокаТаблицы[Раздел + "XXXX"  + "G16"] = Выборка.G16;
		Если (Выборка.ЕстьНДС = NULL) Тогда
			//НеНДС или БезНДС
			СтрокаТаблицы[Раздел + "XXXX"  + "G111"] = "0";
			СтрокаТаблицы[Раздел + "XXXX"  + "G113"] = "0";
			СтрокаТаблицы[Раздел + "XXXX"  + "G10"]  = "0";
			СтрокаТаблицы[Раздел + "XXXX"  + "G12"]  = "0";
			СтрокаТаблицы[Раздел + "XXXX"  + "G14"]  = "0";
			СтрокаТаблицы[Раздел + "XXXX"  + "G16"]  = "0";
		КонецЕсли;	
		
	Иначе	
		
		СтрокаТаблицы[Раздел + "XXXX"  + "G7"]   = Выборка.G7;
		СтрокаТаблицы[Раздел + "XXXX"  + "G8"]  = Выборка.G8;
		СтрокаТаблицы[Раздел + "XXXX"  + "G9"]  = Выборка.G9;
		СтрокаТаблицы[Раздел + "XXXX"  + "G10"] = Выборка.G10;
		СтрокаТаблицы[Раздел + "XXXX"  + "G12"] = Выборка.G12;
		СтрокаТаблицы[Раздел + "XXXX"  + "G13"] = Выборка.G13;
		СтрокаТаблицы[Раздел + "XXXX"  + "G110"] = Выборка.G110;
		СтрокаТаблицы[Раздел + "XXXX"  + "G111"] = Выборка.G111;
		СтрокаТаблицы[Раздел + "XXXX"  + "G113"] = Выборка.G113;
		СтрокаТаблицы[Раздел + "XXXX"  + "G114"] = Выборка.G114;
		
	КонецЕсли;	
	
	СтрокаТаблицы[Раздел + "XXXX" + "GPoint"] = Выборка.Документ;	
	
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		Итератор = Формат(ИндексСтроки+1,"ЧГ=");
		СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С.Вставить(Раздел+"_UR_"+Итератор, ?(Выборка.УточняющийРасчет, "1", "0"));
		СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С.Вставить(Раздел+"_NR_"+Итератор, ?(Выборка.НеЯвляетсяРезидентом, "1", "0"));
		Если Раздел = СтруктураРеквизитовФормы.мИдГруппы2 Тогда
			// Полученные НН
			ЭтоКорректировка = Выборка.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат ИЛИ
			                   Выборка.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка;
		Иначе
			// Выданные НН
			ЭтоКорректировка = ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной");
		КонецЕсли;
		СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С.Вставить(Раздел+"_KOR_"+Итератор, ?(ЭтоКорректировка, "1", "0"));
	КонецЕсли;

	// сделаем проверку по входящим налговым накладным:
	//    если стоит галочка "необходимо проверить", но не стоит дата регистрации
	//    если стоит дата регистрации, но она позже окончания отчетного периода
	// - ругаемся но продолжаем заполнять
	Если Раздел = СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		ТекстСообщения = "";
		Если  Выборка.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных = Истина
			И НЕ ЗначениеЗаполнено(Выборка.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Во входящем налоговом документе (строка %1) ""%2 "" установлен флаг ""Необходимо проверить включение поставщиком в ЕРНН"", однако не указана дата регистрации. Возможно, по данному документу у Вас нет права на налоговый кредит.';uk='У вхідному податковому документі (рядок %1) ""%2 "" встановлено прапор ""Необхідно перевірити включення постачальником в ЄРПН"", однак не вказана дата реєстрації. Можливо, за цим документом у Вас немає права на податковий кредит.'"),ИндексСтроки + 1, Выборка.Документ);
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных)      // 15 дней
			И Выборка.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных > СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета + 1296000 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Во входящем налоговом документе (строка %1) ""%2"" указана дата регистрации в ЕРНН (%3) которая позже даты окончания отчетного периода более чем на 20 дней. Возможно, по данному документу у Вас нет права на налоговый кредит.';uk='У вхідному податковому документі (рядок %1) ""%2"" вказана дата реєстрації в ЄРПН (%3) яка пізніше дати закінчення звітного періоду більше ніж на 20 днів. Можливо, за цим документом у Вас немає права на податковий кредит.'"), ИндексСтроки + 1, Выборка.Документ, Формат(Выборка.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных, "ДФ=dd.MM.yyyy"));
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			Если  НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Иначе	                            // важное
				мСписокСообщенийЗвит1С.Добавить(4,ТекстСообщения);
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючПоСсылке(Ссылка)
	
	Уид 		  = Ссылка.УникальныйИдентификатор();
	Идентификатор = "И" + СтрЗаменить(Уид, "-", "");
	
	Возврат Идентификатор
	
КонецФункции

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
    Перем Ст8, Ст23;
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктурыКолонокМногострочныхЧастей()
	
	Если СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Неопределено Тогда
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Новый Структура;	
	КонецЕсли;
	
	Для каждого Многострочка Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяМногострочки = Многострочка.Ключ;
		
		ДанныеФормы 	= ЭтаФорма[Многострочка.Значение];
		Таблица 		= ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		
		СтруктураКолонок = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			СтруктураКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов.Вставить(ИмяМногострочки, СтруктураКолонок);
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Показатель Из ПоказателиОтчета.Полученные Цикл
		ПоказателиОтчета.Выданные.Вставить(Показатель.Ключ, Показатель.Значение);
	КонецЦикла; 
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Если ИдМногострочногоРаздела.Значение = СтруктураРеквизитовФормы.мИдГруппы2 Тогда
			
				Если ТипЗнч(Строка.T2RXXXXG111) = Тип("Строка") Тогда
					Строка.T2RXXXXG111 = ?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С,"0",0);
					ПоказателиОтчета.Выданные.Вставить("T2RXXXXG111_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ="), 0);
				КонецЕсли;
				Если ТипЗнч(Строка.T2RXXXXG113) = Тип("Строка") Тогда
					Строка.T2RXXXXG113 = ?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С,"0",0);
					ПоказателиОтчета.Выданные.Вставить("T2RXXXXG113_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ="), 0);
				КонецЕсли;
				Если ТипЗнч(Строка.T2RXXXXG10) = Тип("Строка") Тогда
					Строка.T2RXXXXG10 = ?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С,"0",0);
					ПоказателиОтчета.Выданные.Вставить("T2RXXXXG10_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ="), 0);
				КонецЕсли;
				Если ТипЗнч(Строка.T2RXXXXG12) = Тип("Строка") Тогда
					Строка.T2RXXXXG12 = ?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С,"0",0);
					ПоказателиОтчета.Выданные.Вставить("T2RXXXXG12_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ="), 0);
				КонецЕсли;
				Если ТипЗнч(Строка.T2RXXXXG14) = Тип("Строка") Тогда
					Строка.T2RXXXXG14 = ?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С,"0",0);
					ПоказателиОтчета.Выданные.Вставить("T2RXXXXG14_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ="), 0);
				КонецЕсли;
				Если ТипЗнч(Строка.T2RXXXXG16) = Тип("Строка") Тогда
					Строка.T2RXXXXG16 = ?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С,"0",0);
					ПоказателиОтчета.Выданные.Вставить("T2RXXXXG16_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ="), 0);
				КонецЕсли;
				
				Если СтрДлина(СокрЛП(Строка.T2RXXXXG7)) = 1 Тогда
					Строка.T2RXXXXG7 = "";
					ПоказателиОтчета.Выданные.Вставить("T2RXXXXG7_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ="), "");
				КонецЕсли;
				
			Иначе
				////Если СтрДлина(СокрЛП(Строка.T1RXXXXG6)) = 1 Тогда
				////	Строка.T1RXXXXG6 = "";
				////	ПоказателиОтчета.Выданные.Вставить("T1RXXXXG6_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ="), "");
				////КонецЕсли;
			КонецЕсли;
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;	
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуВыгружаемыхОтчетныхФорм() Экспорт

	АдресВХранилище = СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере();
	Возврат АдресВХранилище;

КонецФункции


&НаСервере
Функция СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере()

	ТаблицаСхемXML = ЗаполнитьТаблицуСоСхемамиВыгрузки();
	ОпределитьСписокВыгружаемыхСхем(ТаблицаСхемXML);

	Возврат ПоместитьВоВременноеХранилище(ТаблицаСхемXML, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруСоСхемамиВыгрузки() Экспорт

	АдресВХранилище = СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере()

	ТипМакетаСхемыXSD = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные;

	СтруктураXSD = Новый Структура;
	Объект = ОбъектОтчета(ЭтаФорма.ИмяФормы);

	МетаданныеМактов = Объект.Метаданные().Макеты;

	Для Каждого Макет Из МетаданныеМактов Цикл
		
		Если ВРЕГ(Макет.Имя) = ВРЕГ("АрхивСхемXSD") Тогда
			
			АрхивСхемXSD = Объект.ПолучитьМакет("АрхивСхемXSD");
			
			ВременноеИмяZIP      = ПолучитьИмяВременногоФайла(".zip");
			ВременноеИмяКаталога = ПолучитьИмяВременногоФайла();
			
			АрхивСхемXSD.Записать(ВременноеИмяZIP);
			ЧтениеZIP = Новый ЧтениеZipФайла(ВременноеИмяZIP);
			
			Для каждого Схема Из ЧтениеZIP.Элементы Цикл
				
				ЧтениеZIP.Извлечь(Схема, ВременноеИмяКаталога);
				
				СтруктураXSD.Вставить(Схема.ИмяБезРасширения , Новый ДвоичныеДанные(ВременноеИмяКаталога + "\" + Схема.Имя));
			
			КонецЦикла;
			
			Попытка
				УдалитьФайлы(ВременноеИмяZIP);
			Исключение КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременноеИмяКаталога);
			Исключение КонецПопытки;
		
		КонецЕсли;
		
		Если Макет.ТипМакета = ТипМакетаСхемыXSD  Тогда
		
			СтруктураXSD.Вставить(Макет.Имя, Объект.ПолучитьМакет(Макет));		
		
		КонецЕсли;	
		
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(СтруктураXSD, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура  ОпределитьСписокВыгружаемыхСхем(тбСхемыXML);

	Для Каждого стр Из  тбСхемыXML Цикл
		стр.фВыгрузка = 1;
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьТаблицуСоСхемамиВыгрузки()

	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",2);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));

	тбСхемыXML.Колонки.Добавить("Тип", ,НСтр("ru='Тип';uk='Тип'"));

	Если ЗначениеЗаполнено(ПолучитьПоказательНаСервере("_021", ЭтаФорма, "Выданные")) Тогда
		
			Если СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			
				НовСтрока = тбСхемыXML.Добавить();
				НовСтрока.ИмяСхемы = "J1201508"; 
				НовСтрока.ПредставлениеСхемы =НСтр("ru='Реестр налоговых накладных';uk='Реєстр податкових накладних'");
				НовСтрока.НазваниеСтраницыПанели ="Выданные";
				
			Иначе
				
				НовСтрока = тбСхемыXML.Добавить();
				НовСтрока.ИмяСхемы = "F1201508"; 
				НовСтрока.ПредставлениеСхемы =НСтр("ru='Реестр налоговых накладных';uk='Реєстр податкових накладних'");
				НовСтрока.НазваниеСтраницыПанели ="Выданные";
			
			КонецЕсли;
		//	
		//КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПолучитьПоказательНаСервере("_022", ЭтаФорма, "Выданные"))Тогда	
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J1209008"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Реестр налоговых накладных (для ';uk='Реєстр податкових накладних (для '") + НСтр("ru=' (для декларации по НДС сокращенной)';uk=' (для декларації з ПДВ скороченої)'");
		НовСтрока.НазваниеСтраницыПанели ="Выданные";
		
	ИначеЕсли ЗначениеЗаполнено(ПолучитьПоказательНаСервере("_024", ЭтаФорма, "Выданные")) Тогда	
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J1200808"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Реестр налоговых накладных';uk='Реєстр податкових накладних'") + НСтр("ru=' (для  декларации по НДС перераб. предпр.)';uk=' (для декларації з ПДВ перероб. підпр.)'");
		НовСтрока.НазваниеСтраницыПанели ="Выданные";
		
	Иначе// 023 "Специальная" 
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J1209408"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Реестр налоговых накладных';uk='Реєстр податкових накладних'") + НСтр("ru=' (для декларации по НДС специальной)';uk=' (для декларації з ПДВ спеціальної)'");
		НовСтрока.НазваниеСтраницыПанели ="Выданные";
	
	КонецЕсли;

	тбСхемыXML.ЗаполнитьЗначения(Перечисления.ВерсииФорматовВыгрузки.ГНСУ_XML, "Тип");

	Возврат  тбСхемыXML

КонецФункции

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	//глКомпонентаЗвит1С.Bring1CToFront();
	//ОткрытьФормуПараметров(Неопределено);	
	//глКомпонентаЗвит1С.BringZvitToFront();
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получене большего доп.параметров
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	
	// По умолчанию в отчете уже есть по одной строке на каждую табличную часть, доп.параметры должны быть
	СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С = Новый Структура("T1R_KOR_1, T1R_NR_1, T1R_UR_1,
																		 |T2R_KOR_1, T2R_NR_1, T2R_UR_1");
																		 
	// Заполнение зависит от формы реестра
	ЗаполнитьПоказательНаСервере("_021", "X", ЭтаФорма, "Выданные");	
	ЗаполнитьПоказательНаСервере("_022", "",  ЭтаФорма, "Выданные");	
	ЗаполнитьПоказательНаСервере("_023", "",  ЭтаФорма, "Выданные");	
	ЗаполнитьПоказательНаСервере("_024", "",  ЭтаФорма, "Выданные");	
	
	ТипСхемыЗвит1С = Лев(глМенеджерЗвит1С.ИмяСхемыЗвит1С, 6);
	Если ТипСхемыЗвит1С = "J12090" Тогда
		ЗаполнитьПоказательНаСервере("_022", "X", ЭтаФорма, "Выданные");	
	ИначеЕсли ТипСхемыЗвит1С = "J12094" Тогда
		ЗаполнитьПоказательНаСервере("_023", "X", ЭтаФорма, "Выданные");	
	ИначеЕсли ТипСхемыЗвит1С = "J12008" Тогда
		ЗаполнитьПоказательНаСервере("_024", "X", ЭтаФорма, "Выданные");	
	Иначе
		ЗаполнитьПоказательНаСервере("_021", "X", ЭтаФорма, "Выданные");	
	КонецЕсли;
	
	// Заполнение зависит от формы реестра
	ПараметрыЗаполненияЗвит1С = Неопределено;
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);

	Если глМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.Открыть();
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	//МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2014");
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2014");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T1RXXXXG41S", 5, , "Вид документа", КоллекцияСписковВыбора["ВидыВыданныхНН"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T2RXXXXG51S", 5, , "Вид документа", КоллекцияСписковВыбора["ВидыПолученныхНН"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T2RXXXXG54S", 2, , "Признак корректировки по контролируемой операции", КоллекцияСписковВыбора["ВидыРаспределений"]);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	Если ТипЗнч(Значения) = Тип("ТаблицаЗначений") Тогда
		НовСтр.ТаблицаЗначений.Загрузить(Значения);
	КонецЕсли;
		
КонецФункции // ДобавитьСтрокуОписанияВвода()

&НаКлиенте
Процедура ОткрытьФормуПараметров(Команда)

	мПараметрыФормы = Новый Структура;
	мПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	мПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	мПараметрыФормы.Вставить("ДатаНач", 						СтруктураРеквизитовФормы.ДатаНач);
	мПараметрыФормы.Вставить("ДатаКон", 						СтруктураРеквизитовФормы.ДатаКон);
	
	мПараметрыФормы.Вставить("ОбособленноеПодразделение", 	 СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	мПараметрыФормы.Вставить("ПоОбособленномуПодразделению", СтруктураРеквизитовФормы.ПоОбособленномуПодразделению);
	
	мПараметрыФормы.Вставить("ПервыйНомерПолученные", 		СтруктураРеквизитовФормы.ПервыйНомерПолученные);
	мПараметрыФормы.Вставить("ПервыйНомерВыданные", 		СтруктураРеквизитовФормы.ПервыйНомерВыданные);
	
	мПараметрыФормы.Вставить("СортироватьВыданныеТолькоПоНомеру", СтруктураРеквизитовФормы.СортироватьВыданныеТолькоПоНомеру);
	
	мПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	
	ИмяФормыПараметровНастройки = СтрЗаменить(ЭтаФорма.ИмяФормы, "ФормаОтчета", "ПараметрыОтчета");
	
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыПараметровНастройки, мПараметрыФормы, ЭтаФорма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПараметровЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	// перенумеруем строки
	Если ЗначениеЗаполнено(ПараметрыВозврата) Тогда
		
		ТекущаяСтраницаОтчета = Элементы.РазделыОтчета.ТекущиеДанные;
		Если НЕ ТекущаяСтраницаОтчета = Неопределено Тогда
		
			ИмяТекущейСтраницы 		 = ТекущаяСтраницаОтчета.КолонкаРазделыОтчетаСокрНаим;	
			НомерТекущейСтраницМнСтр = ТекущаяСтраницаОтчета.КолонкаНомерСтраницыРазделаОтчета;

			Если ПараметрыВозврата.Свойство("ЗановоВывестиРазделВыданные") Тогда
				ВывестиМакетСтраницыВТабличныйДокументНаСервере("Выданные", 0);
			КонецЕсли;

			Если ПараметрыВозврата.Свойство("ЗановоВывестиРазделПолученные") Тогда
				ВывестиМакетСтраницыВТабличныйДокументНаСервере("Полученные", 0);
			КонецЕсли;
			
			Если ПараметрыВозврата.Свойство("ЗаполнитьНаименованиеПоОбособленномуПодразделению") Тогда
				ПриИзмененииОбособленногоПодразделения(ЭтаФорма);
			КонецЕсли;
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекущейСтраницы, НомерТекущейСтраницМнСтр);
			
		КонецЕсли;	
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовНаСервере(Ссылка, ИменаРеквизитов)
	Возврат ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОбособленногоПодразделения(Форма)
	
	НаименованиеОрганизации = ПолучитьЗначенияРеквизитовНаСервере(Форма.СтруктураРеквизитовФормы.Организация, "НаименованиеПолное").НаименованиеПолное;
	
	Если   Форма.СтруктураРеквизитовФормы.ПоОбособленномуПодразделению = Истина
		И  ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.ОбособленноеПодразделение) Тогда
		
		Попытка
			НаименованиеОрганизации = НаименованиеОрганизации	
									  + " / " 
									  + ПолучитьЗначенияРеквизитовНаСервере(Форма.СтруктураРеквизитовФормы.ОбособленноеПодразделение, "НаименованиеПолное").НаименованиеПолное
									  + " (" + ПолучитьЗначенияРеквизитовНаСервере(Форма.СтруктураРеквизитовФормы.ОбособленноеПодразделение, "Префикс").Префикс +")"; 

		Исключение КонецПопытки;
		
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("HNAME", НаименованиеОрганизации, Форма, "Выданные");	
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	Возврат;
КонецПроцедуры

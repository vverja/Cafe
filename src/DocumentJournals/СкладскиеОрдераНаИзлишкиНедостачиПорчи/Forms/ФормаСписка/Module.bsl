
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ИспользоватьКачествоТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	СкладПомещениеПриИзмененииСервер();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка());
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	Элементы.СписокОрдеровСоздатьОрдерНаОтражениеИзлишков.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ОрдерНаОтражениеИзлишковТоваров);
	Элементы.СписокОрдеровСоздатьОрдерНаОтражениеНедостач.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ОрдерНаОтражениеНедостачТоваров);
	Элементы.СписокОрдеровСоздатьОрдерНаОтражениеПорчи.Видимость    = ПравоДоступа("Изменение", Метаданные.Документы.ОрдерНаОтражениеПорчиТоваров);
	
	Элементы.СписокОрдеровСкопировать.Видимость = 
		Элементы.СписокОрдеровСоздатьОрдерНаОтражениеИзлишков.Видимость
		ИЛИ Элементы.СписокОрдеровСоздатьОрдерНаОтражениеНедостач.Видимость
		ИЛИ Элементы.СписокОрдеровСоздатьОрдерНаОтражениеПорчи.Видимость;
	
	Элементы.СписокОрдеровУстановитьПометкуУдаления.Видимость = Элементы.СписокОрдеровСкопировать.Видимость;
	Элементы.СписокОрдеровПровести.Видимость = Элементы.СписокОрдеровСкопировать.Видимость;
	Элементы.СписокОрдеровОтменаПроведения.Видимость = Элементы.СписокОрдеровСкопировать.Видимость;
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании
	

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокОрдеров", "СписокОрдеровДата");

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Склад = Настройки.Получить("Склад");
	Помещение = Настройки.Получить("Помещение");
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОрдеров

&НаКлиенте
Процедура СписокОрдеровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		
		Отказ = Истина;
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Тип("ДокументСсылка.ОрдерНаОтражениеИзлишковТоваров"),,,БиблиотекаКартинок.Документ);
		СписокЗначений.Добавить(Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров"),,,БиблиотекаКартинок.Документ);
		
		Если ИспользоватьКачествоТоваров Тогда
			СписокЗначений.Добавить(Тип("ДокументСсылка.ОрдерНаОтражениеПорчиТоваров"),,,БиблиотекаКартинок.Документ);
		КонецЕсли;
		
		ВыбранноеЗначение = Неопределено;

		
		СписокЗначений.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("СписокОрдеровПередНачаломДобавленияЗавершение", ЭтотОбъект), НСтр("ru='Выбор типа документа';uk='Вибір типу документа'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОрдеровПередНачаломДобавленияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ВыбранныйЭлемент;
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        СоздатьОрдерКлиент(ВыбранноеЗначение.Значение)
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.СписокОрдеров);
	
КонецПроцедуры
// Конец ВводНаОсновании

&НаКлиенте
Процедура СоздатьОрдерНаОтражениеИзлишков(Команда)
	
	СоздатьОрдерКлиент(Тип("ДокументСсылка.ОрдерНаОтражениеИзлишковТоваров"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдерНаОтражениеНедостач(Команда)
	
	СоздатьОрдерКлиент(Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдерНаОтражениеПорчи(Команда)
	
	СоздатьОрдерКлиент(Тип("ДокументСсылка.ОрдерНаОтражениеПорчиТоваров"));
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокОрдеров);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	Если СкладыСервер.ИспользоватьСкладскиеПомещения(Склад) Тогда
		Элементы.ГруппаПомещение.ТекущаяСтраница = Элементы.СтраницаПомещение;
	Иначе
		Элементы.ГруппаПомещение.ТекущаяСтраница = Элементы.СтраницаПустая;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОрдеров, "Склад",Склад, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОрдеров, "Помещение",Помещение, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОрдерНаОтражениеИзлишковТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОрдерНаОтражениеНедостачТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОрдерНаОтражениеПорчиТоваров.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдерКлиент(Тип)
	Основание = Новый Структура;
	Основание.Вставить("Склад", Склад);
	Основание.Вставить("Помещение", Помещение);
	
	Если Тип = Тип("ДокументСсылка.ОрдерНаОтражениеИзлишковТоваров") Тогда
		ОткрытьФорму("Документ.ОрдерНаОтражениеИзлишковТоваров.ФормаОбъекта",Новый Структура("Основание",Основание));
	ИначеЕсли Тип = Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров") Тогда
		ОткрытьФорму("Документ.ОрдерНаОтражениеНедостачТоваров.ФормаОбъекта",Новый Структура("Основание",Основание));
	ИначеЕсли Тип = Тип("ДокументСсылка.ОрдерНаОтражениеПорчиТоваров") Тогда
		ОткрытьФорму("Документ.ОрдерНаОтражениеПорчиТоваров.ФормаОбъекта",Новый Структура("Основание",Основание));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

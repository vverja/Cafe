#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция получает элемент справочника - ключ аналитики учета номенклатураы.
//
// Параметры:
//	ПараметрыАналитики - Выборка или Структура с полями "Номенклатура, Характеристика, Склад".
//
// Возвращаемое значение:
//	СправочникСсылка.КлючиАналитикиУчетаНоменклатуры - Созданный элемент справочника
//
Функция ЗначениеКлючаАналитики(ПараметрыАналитики) Экспорт

	МенеджерЗаписи = ПолучитьМенеджерЗаписи(ПараметрыАналитики);
	
	Если МенеджерЗаписи <> Неопределено Тогда
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран()
		 И Не ЗначениеЗаполнено(МенеджерЗаписи.КлючАналитики) Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;

		Если МенеджерЗаписи.Выбран() И ЗначениеЗаполнено(МенеджерЗаписи.КлючАналитики) Тогда
			Результат = МенеджерЗаписи.КлючАналитики;
		Иначе
			Результат = СоздатьКлючАналитики(ПараметрыАналитики);
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

КонецФункции

// Функция получает элемент справочника - ключ аналитики учета.
//
// Параметры:
//	ПараметрыАналитики - Выборка или Структура  с полями "Номенклатура, Характеристика, Склад".
//
// Возвращаемое значение:
//	СправочникСсылка.КлючиАналитикиУчетаНоменклатуры - Созданный элемент справочника
//
Функция СоздатьКлючАналитики(ПараметрыАналитики) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыАналитики.Номенклатура) Тогда
		МенеджерЗаписи = ПолучитьМенеджерЗаписи(ПараметрыАналитики);
		
		Если МенеджерЗаписи <> Неопределено Тогда

			// Создание нового ключа аналитики.
			СправочникОбъект = Справочники.КлючиАналитикиУчетаНоменклатуры.СоздатьЭлемент();
			СправочникОбъект.Наименование = ПолучитьПолноеНаименованиеКлючаАналитики(МенеджерЗаписи);
			ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыАналитики, "Номенклатура, Характеристика, Серия, Склад");
			СправочникОбъект.Записать();

			Результат = СправочникОбъект.Ссылка;

			МенеджерЗаписи.КлючАналитики = Результат;
			МенеджерЗаписи.Записать(Ложь);

			Возврат Результат;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Заполняет поле АналитикаУчетаНоменклатуры в коллекции, содержащей номенклатуру, характеристику, серию, склад.
// Места учета и имена полей для мест учета трактуются следующим образом:
//	для ключей, кроме Произвольный:
//		если имя поля указано (есть ключ в структуре) и значение заполнено, то выбирать данные из этого поля коллекции;
//		если имя поля указано, но значение не заполнено ("" или Неопределено), то данные всегда устанавливать из мест учета;
//		если имя поля не указано, то смотрится заполнение ключа Произвольный;
//	для ключа Произвольный:
//		если значение имени поля заполнено, то все типы номенклатуры, которые не упомянуты в других ключах, выбирают
//		данные из этого поля коллекции, если в поле коллекции значение не задано, то данные устанавливаются из мест учета;
//		если значение поля не заполнено, то данные всегда устанавливаются из мест учета;
//
// Параметры:
//
//	Коллекция - Коллекция типа ТабличнаяЧасть
//
//	МестаУчета - Структура - {Произвольный [, Товар, МногооборотнаяТара, Услуга, Работа]}, ключ Произвольный обязателен.
//		задает значения общих места учета по типам номенклатуры и определяет, как заполняется поле Склад в аналитике,
//		если в коллекции нет данных для заполнения (нет полей или поле не заполнено).
//		для примера см. метод МестаУчета(...)
//
//	ИменаПолей - Структура - содержит реальные имена полей коллекции для получения и формирования аналитики.
//		содержит две секции, если значение ключа Неопределено, то имя поля берется из имени ключа.
//		секция идентификации {Номенклатура, Характеристика, АналитикаУчетаНоменклатуры [, СтатусУказанияСерий, Серия]},
//			ключи определения полей серии необязательны, использование серий определяется по полю СтатусУказанияСерий.
//		секция места учета {Произвольный [, Товар, МногооборотнаяТара, Услуга, Работа]}, ключ Произвольный обязателен.
//		по умолчанию заполняется методом ИменаПолейКоллекцииПоУмолчанию(...)
//			("Номенклатура, Характеристика, Серия, АналитикаУчетаНоменклатуры, Произвольный, Работа",
//			"Номенклатура", "Характеристика", "Серия", "АналитикаУчетаНоменклатуры", "", "")
//
// Пример 1:
//	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
//		ЭтотОбъект.ХозяйственнаяОперация, ЭтотОбъект.СкладОтправитель, Неопределено, Неопределено);
//	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
//	ИменаПолей.СтатусУказанияСерий = "СтатусУказанияСерийОтправитель";
//	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета, ИменаПолей);
//
// Пример 2:
//	МестаУчета = Новый Структура("Произвольный, Работа", ЭтотОбъект.Партнер, ЭтотОбъект.Подразделение)
//	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
//
Процедура ЗаполнитьВКоллекции(Коллекция, МестаУчета, ИменаПолей = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИменаПолей = Неопределено Тогда
		ИменаПолей = ИменаПолейКоллекцииПоУмолчанию();
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗначенияКлючейАналитикиВКоллекции(ИменаПолей));
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	Запрос.УстановитьПараметр("МестаУчетаТовар", ?(МестаУчета.Свойство("Товар"), МестаУчета.Товар, МестаУчета.Произвольный));
	Запрос.УстановитьПараметр("МестаУчетаМногооборотнаяТара", ?(МестаУчета.Свойство("МногооборотнаяТара"), МестаУчета.МногооборотнаяТара, МестаУчета.Произвольный));
	Запрос.УстановитьПараметр("МестаУчетаУслуга", ?(МестаУчета.Свойство("Услуга"), МестаУчета.Услуга, МестаУчета.Произвольный));
	Запрос.УстановитьПараметр("МестаУчетаРабота", ?(МестаУчета.Свойство("Работа"), МестаУчета.Работа, МестаУчета.Произвольный));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.АналитикаУчетаНоменклатуры) Тогда
			КлючАналитики = ЗначениеКлючаАналитики(Выборка)
		Иначе
			КлючАналитики = Выборка.АналитикаУчетаНоменклатуры;
		КонецЕсли;
		Коллекция[Выборка.Индекс][ИменаПолей.АналитикаУчетаНоменклатуры] = КлючАналитики;
	КонецЦикла;
КонецПроцедуры

// Формирует структуру, определяющую, какие места учета использовать для различных типов номенклатуры
// при заполнении ключей аналитики в табчастях товаров.
//
// Параметры:
//	Операция - ПеречислениеСсылка.ХозяйственныеОперации, ПеречислениеСсылка.ТипыОперацийВводаОстатков
//	Склад - СправочникСсылка.Склады
//	Подразделение - СправочникСсылка.СтруктураПредприятия
//	Партнер - СправочникСсылка.Партнеры
//
// Возвращаемое значение:
//	Структура - {Произвольный, Работа [, Товар, МногооборотнаяТара, Услуга]}, заданы ключи Произвольный и Работа.
//		реквизиты этой структуры содержат конкретные значения {склада | подразделения | партнера}, которые необходимо 
//		подставлять при формировании аналитики для одноименных типов номенклатуры.
//
Функция МестаУчета(Операция, Склад, Подразделение, Партнер) Экспорт
	Хозоперации = Перечисления.ХозяйственныеОперации;
	ОперацииОстатков = Перечисления.ТипыОперацийВводаОстатков;
	
	СкладУчета = ?(Склад = Неопределено, Справочники.Склады.ПустаяСсылка(), Склад);
	ПодразделениеУчета = ?(Подразделение = Неопределено, Справочники.СтруктураПредприятия.ПустаяСсылка(), Подразделение);
	ПартнерУчета = ?(Партнер = Неопределено, Справочники.Партнеры.ПустаяСсылка(), Партнер);
	
	МестаУчета = Новый Структура("Произвольный, Работа");
	
	ИспользоватьПартнера =
		(Операция = Хозоперации.ОтчетКомиссионера)
		Или (Операция = Хозоперации.ОтчетКомитенту)
		Или (Операция = Хозоперации.ПроизводствоУПереработчика)
		Или (Операция = ОперацииОстатков.ОстаткиТоваровПереданныхНаКомиссию)
		Или (Операция = ОперацииОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам)
		Или (Операция = ОперацииОстатков.ОстаткиМатериаловПереданныхПереработчикам);
	
	МестаУчета.Произвольный = ?(ИспользоватьПартнера, ПартнерУчета, СкладУчета);
	МестаУчета.Работа = ПодразделениеУчета;
	
	Возврат МестаУчета;
КонецФункции

// Возвращает структуру полей выбора информации из коллекции для формирования аналитики учета номенклатуры.
//
// Возвращаемое значение:
//	Структура - содержит реальные имена полей коллекции для получения и формирования аналитики.
//		содержит две секции, если значение ключа Неопределено, то имя поля должно браться из имени ключа.
//		секция идентификации {Номенклатура, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий, Серия},
//			все ключи заданы.
//		секция места учета {Произвольный, [Товар, ВозвратнаяТара, Услуга, ] Работа}, ключи Произвольный и Работа заданы.
//			реквизиты этой секции должны содержать имена колонок коллекции, откуда надо брать значения для одноименных
//			типов номенклатуры.
//
Функция ИменаПолейКоллекцииПоУмолчанию() Экспорт
	Возврат Новый Структура(
		"Номенклатура, Характеристика, АналитикаУчетаНоменклатуры, СтатусУказанияСерий, Серия, Произвольный, Работа",
		"Номенклатура", "Характеристика", "АналитикаУчетаНоменклатуры", "СтатусУказанияСерий", "Серия", "", "");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ПолучитьМенеджерЗаписи(ПараметрыАналитики)
	
	// В параметрах аналитики могут быть не все свойства
	СтруктураАналитики = Новый Структура("Номенклатура, Характеристика, Серия, Склад");
	ЗаполнитьЗначенияСвойств(СтруктураАналитики, ПараметрыАналитики);
	Если НЕ ЗначениеЗаполнено(СтруктураАналитики.Номенклатура)
	 И НЕ ЗначениеЗаполнено(СтруктураАналитики.Характеристика)
	 И НЕ ЗначениеЗаполнено(СтруктураАналитики.Серия) 
	 И НЕ ЗначениеЗаполнено(СтруктураАналитики.Склад) Тогда
		Возврат Неопределено
	Иначе 
		МенеджерЗаписи = РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыАналитики, "Номенклатура, Характеристика, Серия, Склад");
		ПроверитьЗаполнениеПоляСклад(МенеджерЗаписи);
		Возврат МенеджерЗаписи;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПолноеНаименованиеКлючаАналитики(МенеджерЗаписи)

	Возврат СокрЛП(МенеджерЗаписи.Номенклатура) + "; " 
		+ ?(ЗначениеЗаполнено(МенеджерЗаписи.Характеристика), СокрЛП(МенеджерЗаписи.Характеристика) + "; ", "")
		+ ?(ЗначениеЗаполнено(МенеджерЗаписи.Серия), СокрЛП(МенеджерЗаписи.Серия) + "; ", "")
		+ СокрЛП(МенеджерЗаписи.Склад);

КонецФункции

Процедура ПроверитьЗаполнениеПоляСклад(МенеджерЗаписиАналитикаУчетаНоменклатуры)

	Если МенеджерЗаписиАналитикаУчетаНоменклатуры.Склад = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Ошибочное значение парамера ""Склад""';uk='Помилкове значення параметру ""Склад""'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеКлючейАналитикиВКоллекции

Функция ТекстЗначенияКлючейАналитикиВКоллекции(ИменаПолей)
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Коллекция.НомерСтроки - 1 КАК Индекс,
		|	&ПолеАналитика КАК АналитикаУчетаНоменклатуры,
		|	&ПолеНоменклатура КАК Номенклатура,
		|	&ПолеХарактеристика КАК Характеристика,
		|	(ВЫБОР КОГДА &СтатусУказанияСерий = 14 ТОГДА &ПолеСерия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КОНЕЦ) КАК Серия,
		// места учета по типам номенклатуры
		|	(ВЫБОР КОГДА &ПолеСкладТовар В
		|		(ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
		|	ТОГДА &МестаУчетаТовар ИНАЧЕ &ПолеСкладТовар КОНЕЦ) КАК СкладТовар,
		|
		|	(ВЫБОР КОГДА &ПолеСкладМногооборотнаяТара В
		|		(ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
		|	ТОГДА &МестаУчетаМногооборотнаяТара ИНАЧЕ &ПолеСкладМногооборотнаяТара КОНЕЦ) КАК СкладМногооборотнаяТара,
		|
		|	(ВЫБОР КОГДА &ПолеСкладУслуга В
		|		(ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
		|	ТОГДА &МестаУчетаУслуга ИНАЧЕ &ПолеСкладУслуга КОНЕЦ) КАК СкладУслуга,
		|
		|	(ВЫБОР КОГДА &ПолеСкладРабота В
		|		(ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
		|	ТОГДА &МестаУчетаРабота ИНАЧЕ &ПолеСкладРабота КОНЕЦ) КАК СкладРабота
		|
		|ПОМЕСТИТЬ Коллекция
		|ИЗ &Коллекция КАК Коллекция;
		|
		|ВЫБРАТЬ
		|	Коллекция.Индекс,
		|	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
		|	Коллекция.Номенклатура,
		|	Коллекция.Характеристика,
		|	Коллекция.Серия,
		|	(ВЫБОР СН.ТипНоменклатуры
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА Коллекция.СкладТовар
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА Коллекция.СкладМногооборотнаяТара
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) ТОГДА Коллекция.СкладУслуга
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА Коллекция.СкладРабота
		|		КОНЕЦ) КАК Склад
		|ИЗ
		|	Коллекция КАК Коллекция
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СН
		|		ПО СН.Ссылка = Коллекция.Номенклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.Номенклатура = Коллекция.Номенклатура И Аналитика.Характеристика = Коллекция.Характеристика
		|		И Аналитика.Серия = Коллекция.Серия
		|		И Аналитика.Склад =
		|			(ВЫБОР СН.ТипНоменклатуры
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА Коллекция.СкладТовар
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА Коллекция.СкладМногооборотнаяТара
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) ТОГДА Коллекция.СкладУслуга
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА Коллекция.СкладРабота
		|				КОНЕЦ)
		|ГДЕ
		|	Аналитика.КлючАналитики ЕСТЬ NULL
		|	ИЛИ Аналитика.КлючАналитики <> Коллекция.АналитикаУчетаНоменклатуры
		|	ИЛИ Аналитика.КлючАналитики = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
		|";
	
	// заменим в тексте запроса подставляемые поля из структуры ИменаПолей
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеАналитика", "Коллекция." + ИменаПолей.АналитикаУчетаНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеНоменклатура", "Коллекция." + ИменаПолей.Номенклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеХарактеристика", "Коллекция." + ИменаПолей.Характеристика);
	
	// Поля серии могут быть не заданы
	СерииУказываются = ИменаПолей.Свойство("СтатусУказанияСерий") И ЗначениеЗаполнено(ИменаПолей.СтатусУказанияСерий);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСерия", ?(СерииУказываются, "Коллекция." + ИменаПолей.Серия, "НЕОПРЕДЕЛЕНО"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусУказанияСерий", ?(СерииУказываются, "Коллекция." + ИменаПолей.СтатусУказанияСерий, "0"));
	
	// сформируем имена полей получения склада из коллекции по типам товаров
	ИмяПоляПроизвольный = ?(ЗначениеЗаполнено(ИменаПолей.Произвольный), "Коллекция." + ИменаПолей.Произвольный, "НЕОПРЕДЕЛЕНО");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСкладТовар", ИмяПоляМестаУчета(ИменаПолей, "Товар", ИмяПоляПроизвольный));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСкладМногооборотнаяТара", ИмяПоляМестаУчета(ИменаПолей, "МногооборотнаяТара", ИмяПоляПроизвольный));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСкладУслуга", ИмяПоляМестаУчета(ИменаПолей, "Услуга", ИмяПоляПроизвольный));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСкладРабота", ИмяПоляМестаУчета(ИменаПолей, "Работа", ИмяПоляПроизвольный));
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ИмяПоляМестаУчета(ИменаПолей, КлючИмени, ИмяПоляПроизвольный, ИмяКоллекции = "Коллекция")
	Возврат
		?(Не ИменаПолей.Свойство(КлючИмени), ИмяПоляПроизвольный,
		?(ЗначениеЗаполнено(ИменаПолей[КлючИмени]), ИмяКоллекции + "." + ИменаПолей[КлючИмени],
		"НЕОПРЕДЕЛЕНО"));
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
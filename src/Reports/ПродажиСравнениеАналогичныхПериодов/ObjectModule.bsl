#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	
	Если КлючВарианта = "СравнениеПродажАналогичныхПериодовБизнесРегионы"
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы") Тогда
		Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;

КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - Произвольный - 
//       Параметры контекста, в котором используется отчет.
//       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//
// Примеры:
// 1. Компоновщик отчета инициализируется на основании схемы из общих макетов:
//	Если КлючСхемы <> "1" Тогда
//		КлючСхемы = "1";
//		СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//	КонецЕсли;
//
// 2. Схема зависит от значения параметра, выведенного в пользовательские настройки отчета:
//	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//		ПолноеИмяОбъектаМетаданных = "";
//		Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//				ИмяПараметра = Строка(ЭлементКД.Параметр);
//				Если ИмяПараметра = "ОбъектМетаданных" Тогда
//					ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//			КлючСхемы = ПолноеИмяОбъектаМетаданных;
//			СхемаКД = Новый СхемаКомпоновкиДанных;
//			// Наполнение схемы...
//			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ПодключаемыйВариантОтчета = СтрЗаменить(КлючВарианта, "БизнесРегионы", "");
	
	НовыеНастройкиКД = СхемаКомпоновкиДанных.ВариантыНастроек[ПодключаемыйВариантОтчета].Настройки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Проверка на корректность заданных пользователем периодов
	НастройкаПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
	НастройкаШагПериодовСравненияОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ШагПериодовСравнения");	
	Если ЗначениеЗаполнено(НастройкаПериодОтчета.Значение) 
		И ЗначениеЗаполнено(НастройкаШагПериодовСравненияОтчета.Значение) Тогда
		Если НЕ НастройкаПериодаЗаданаКорректно(НастройкаПериодОтчета.Значение.ДатаНачала,
			НастройкаПериодОтчета.Значение.ДатаОкончания,
			НастройкаШагПериодовСравненияОтчета.Значение) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Длительность шага периодов сравнения не должна быть меньше периода отчета.';uk='Тривалість кроку періодів порівняння не повинна бути менше періоду звіту.'"), , , , Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы);
	
	// Получим внешний источник данных
	НастройкаПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
	НастройкаШагПериодовСравненияОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ШагПериодовСравнения");
	НастройкаКоличествоПериодовОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "КоличествоПериодов");
	
	ТаблицаПериодов = МониторингЦелевыхПоказателей.ПолучитьТаблицуПериодов_СравнениеСАналогичнымиПериодамиПрошлого(
	НастройкаПериодОтчета.Значение.ДатаНачала,
	НастройкаПериодОтчета.Значение.ДатаОкончания,
	НастройкаШагПериодовСравненияОтчета.Значение,
	НастройкаКоличествоПериодовОтчета.Значение);
	
	Если ТаблицаПериодов.Количество() Тогда
		Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НачальныйГод");
		Параметр.Значение = Год(ТаблицаПериодов[ТаблицаПериодов.Количество()-1].ДатаНачалаРасчета);
		Параметр.Использование = Истина;
		
		Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаНачалаПериодаОтчета");
		Параметр.Значение = ТаблицаПериодов[0].ДатаНачалаРасчета;
		Параметр.Использование = Истина;
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Дополним периоды
	ПараметрДополнятьПериоды = НастройкиОсновнойСхемы.ПараметрыДанных.Элементы.Найти("ДополнятьПериоды");
	Если ПараметрДополнятьПериоды <> Неопределено
		И ПараметрДополнятьПериоды.Значение Тогда
		
		ПараметрКомпоновкиШагПериодовСравнения = НастройкиОсновнойСхемы.ПараметрыДанных.Элементы.Найти("ШагПериодовСравнения");
		Если ПараметрКомпоновкиШагПериодовСравнения <> Неопределено Тогда
			ШагПериодовСравнения = ПараметрКомпоновкиШагПериодовСравнения.Значение;
		Иначе
			ШагПериодовСравнения = Перечисления.Периодичность.Год;
		КонецЕсли;
		
		Если ШагПериодовСравнения = Неопределено 
			Или ШагПериодовСравнения = Перечисления.Периодичность.ПустаяСсылка() Тогда
			ИмяПериодаДополнения = "Год";
		Иначе
			ИмяПериодаДополнения = ОбщегоНазначения.ИмяЗначенияПеречисления(ШагПериодовСравнения);
		КонецЕсли;
		
		ДополнениеПериода = ТипДополненияПериодаКомпоновкиДанных[ИмяПериодаДополнения];
		
		ГруппировкаДатаНачалаРасчета = НастройкиОсновнойСхемы.ДоступныеПоляГруппировок.Элементы.Найти("ДатаНачалаРасчета");
		Если ГруппировкаДатаНачалаРасчета <> Неопределено Тогда
			ГруппировкиОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(НастройкиОсновнойСхемы);
			Для Каждого ГруппировкаОтчета Из ГруппировкиОтчета Цикл
				Если ГруппировкаОтчета.Значение.ПоляГруппировки.Элементы.Количество() = 1
					И ГруппировкаОтчета.Значение.ПоляГруппировки.Элементы[0].Поле = ГруппировкаДатаНачалаРасчета.Поле Тогда
					ГруппировкаДляДополнения = ГруппировкаОтчета.Значение.ПоляГруппировки.Элементы[0];
					ГруппировкаДляДополнения.ТипДополнения = ДополнениеПериода;
					ГруппировкаДляДополнения.НачалоПериода = ТаблицаПериодов[ТаблицаПериодов.Количество()-1].ДатаНачалаРасчета;
					ГруппировкаДляДополнения.КонецПериода = ТаблицаПериодов[0].ДатаОкончанияРасчета;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Продажи.Запрос;

	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаВесНоменклатуры", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("АналитикаНоменклатуры.Номенклатура.ЕдиницаИзмерения", "АналитикаНоменклатуры.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаОбъемНоменклатуры", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("АналитикаНоменклатуры.Номенклатура.ЕдиницаИзмерения", "АналитикаНоменклатуры.Номенклатура"));

	СхемаКомпоновкиДанных.НаборыДанных.Продажи.Запрос = ТекстЗапроса;	
	
	// Сформируем отчет
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);
	
	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(СтруктураЗаголовковПолей(), МакетКомпоновки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	КомпоновкаДанныхСервер.ОформитьДиаграммыОтчета(КомпоновщикНастроек, ДокументРезультат);
	КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметрыОтчета());
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Процедура УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы)
	КомпоновкаДанныхСервер.УстановитьПараметрыВалютыОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
	// Заполним настройки периодов
	НастройкаПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
	Если НЕ ЗначениеЗаполнено(НастройкаПериодОтчета.Значение) Тогда
		СтандартныйПериодГод = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодОтчета", СтандартныйПериодГод);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	НастройкаШагПериодовСравненияОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ШагПериодовСравнения");
	Если НЕ ЗначениеЗаполнено(НастройкаШагПериодовСравненияОтчета.Значение) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ШагПериодовСравнения", Перечисления.Периодичность.Год);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	НастройкаКоличествоПериодовОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "КоличествоПериодов");
	Если НЕ ЗначениеЗаполнено(НастройкаКоличествоПериодовОтчета.Значение) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КоличествоПериодов", 3);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	ПараметрПоказыватьПродажи = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПоказыватьПродажи");
	Если ПараметрПоказыватьПродажи <> Неопределено 
		И ПараметрПоказыватьПродажи.Значение = Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПоказыватьПродажи", 1);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек);
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
КонецПроцедуры

Функция ВспомогательныеПараметрыОтчета()
	
	ВспомогательныеПараметры = Новый Массив;
	
	ВспомогательныеПараметры.Добавить("КоличественныеИтогиПоЕдИзм");
	
	КомпоновкаДанныхСервер.ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ВспомогательныеПараметры);
	
	Возврат ВспомогательныеПараметры;

КонецФункции

Функция ДополнитьПериод(СтруктураКомпоновки, ПолеДополнения)
	Для Каждого ЭлементСтруктуры Из СтруктураКомпоновки Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 1
				И ЭлементСтруктуры.ПоляГруппировки.Элементы[0].Поле = ПолеДополнения Тогда
				
				Элемент = ЭлементСтруктуры.ПоляГруппировки.Элементы[0];
			КонецЕсли;
			
			ДополнитьПериод(ЭлементСтруктуры.Структура, ПолеДополнения);
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция НастройкаПериодаЗаданаКорректно(ДатаНачала, ДатаОкончания, Периодичность)
	
	СекундВМинуте = 60;
	МинутВЧасе = 60;
	ЧасовВДне = 24;
	ДнейВНеделе = 7;
	ДнейВДекаде = 10;
	ДнейВМесяце = 31;
	ДнейВКвартале = 92;
	ДнейВПолугодии = 184;
	ДнейВГоду = 366;
	
	ЧислоДнейВПериоде = (ДатаОкончания + 1 - ДатаНачала) / (СекундВМинуте * МинутВЧасе * ЧасовВДне);
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат ЧислоДнейВПериоде <= ДнейВГоду;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ЧислоДнейВПериоде <= ДнейВПолугодии;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат ЧислоДнейВПериоде <= ДнейВКвартале;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат ЧислоДнейВПериоде <= ДнейВМесяце;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Возврат ЧислоДнейВПериоде <= ДнейВДекаде;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат ЧислоДнейВПериоде <= ДнейВНеделе;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат ЧислоДнейВПериоде <= 1;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СтруктураЗаголовковПолей()
	СтруктураЗаголовковПолей = Новый Структура;
	
	СтруктураЗаголовковВалют = КомпоновкаДанныхСервер.СтруктураЗаголовковВалют(КомпоновщикНастроек);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЗаголовковПолей, СтруктураЗаголовковВалют, Ложь);
	
	СтруктуруЗаголовковПолейЕдиницИзмерений = КомпоновкаДанныхСервер.СтруктураЗаголовковПолейЕдиницИзмерений(КомпоновщикНастроек);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЗаголовковПолей, СтруктуруЗаголовковПолейЕдиницИзмерений, Ложь);
	
	Возврат СтруктураЗаголовковПолей;
КонецФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "Контрагент");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "Организация");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
		КомпоновкаДанныхСервер.УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроекФормы, "ЕдиницыКоличества");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
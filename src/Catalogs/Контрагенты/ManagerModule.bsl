#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт



КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция получает значения реквизитов выбранного контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента
//
// Возвращаемое значение:
//  Структура - реквизиты выбранного контрагента
//
Функция РеквизитыКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|	Контрагенты.ИННПлательщикаНДС КАК ИННПлательщикаНДС,
	|	Контрагенты.КодФилиала КАК КодФилиала,
	|	Контрагенты.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельства,
	|	Контрагенты.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Представление	= Выборка.НаименованиеПолное;
		Наименование	= Выборка.НаименованиеПолное;
		ИННПлательщикаНДС = Выборка.ИННПлательщикаНДС;
		КодФилиала		= Выборка.КодФилиала;
		КодПоЕДРПОУ		= Выборка.КодПоЕДРПОУ;
		НомерСвидетельства = Выборка.НомерСвидетельства;
		ЮрФизЛицо		= Выборка.ЮрФизЛицо;
	Иначе
		Представление	= "";
		Наименование	= "";
		ИННПлательщикаНДС = "";
		КодФилиала		= "";
		КодПоЕДРПОУ		= "";
		НомерСвидетельства = "";
		ЮрФизЛицо		= Перечисления.ЮрФизЛицо.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Представление, Наименование, ИННПлательщикаНДС, КодФилиала, КодПоЕДРПОУ, НомерСвидетельства, ЮрФизЛицо",
		Представление,
		Наименование,
		ИННПлательщикаНДС,
		КодФилиала,
		КодПоЕДРПОУ,
		НомерСвидетельства,
		ЮрФизЛицо);
	
	Возврат СтруктураРеквизитов;

КонецФункции 

//Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("ЮридическоеФизическоеЛицо");
	НеРедактируемыеРеквизиты.Добавить("ОбособленноеПодразделение");
	НеРедактируемыеРеквизиты.Добавить("ГоловнойКонтрагент");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений();
	Партнер = Неопределено;
	
	Если Параметры.Отбор.Свойство("Партнер") Тогда
		Партнер = ?(ЗначениеЗаполнено(Параметры.Отбор.Партнер),Параметры.Отбор.Партнер,Неопределено);
		Параметры.Отбор.Удалить("Партнер");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	Контрагенты.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Контрагенты.Ссылка) КАК Представление,
	|	ВЫБОР
	|		КОГДА ИерархияПартнеров.Партнер = &Партнер
	|			ТОГДА ИерархияПартнеров.Родитель.Наименование
	|		ИНАЧЕ Контрагенты.Партнер.Наименование
	|	КОНЕЦ КАК ПартнерНаименование,
	|	Контрагенты.Наименование,
	|	ВЫБОР
	|		КОГДА ИерархияПартнеров.Партнер = &Партнер
	|			ТОГДА ИерархияПартнеров.Уровень
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ПорядокВывода,
	|	Контрагенты.КодПоЕДРПОУ,
	|	&НайденоПоНаименованию КАК НайденоПо,
	|	Контрагенты.ПометкаУдаления
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|		ПО Контрагенты.Партнер = ИерархияПартнеров.Родитель
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &СтрокаВвода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 51
	|	Контрагенты.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Контрагенты.Ссылка),
	|	ВЫБОР
	|		КОГДА ИерархияПартнеров.Партнер = &Партнер
	|			ТОГДА ИерархияПартнеров.Родитель.Наименование
	|		ИНАЧЕ Контрагенты.Партнер.Наименование
	|	КОНЕЦ,
	|	Контрагенты.Наименование,
	|	ВЫБОР
	|		КОГДА ИерархияПартнеров.Партнер = &Партнер
	|			ТОГДА ИерархияПартнеров.Уровень
	|		ИНАЧЕ -1
	|	КОНЕЦ,
	|	Контрагенты.КодПоЕДРПОУ,
	|	&НайденоПоКодуЕДРПОУ,
	|	Контрагенты.ПометкаУдаления
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|		ПО Контрагенты.Партнер = ИерархияПартнеров.Родитель
	|ГДЕ
	|	Контрагенты.КодПоЕДРПОУ ПОДОБНО &СтрокаВвода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.ПометкаУдаления,
	|	ПорядокВывода УБЫВ";
	
	СтрокаПоиска = ?(Параметры.СтрокаПоиска = Неопределено, "", Параметры.СтрокаПоиска);
	
	Запрос.УстановитьПараметр("СтрокаВвода", СтрокаПоиска + "%" );
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("НайденоПоНаименованию","ПоНаименованию");
	Запрос.УстановитьПараметр("НайденоПоКодуЕДРПОУ","ПоКодуЕДРПОУ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДанныеВыбора.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
			
			Если Выборка.НайденоПо = "ПоНаименованию"  Тогда
				Представление = Выборка.Наименование;
			Иначе
				Представление = Выборка.КодПоЕДРПОУ + "(" +Выборка.Наименование + ")";
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
				Представление = Представление + "(" + Выборка.ПартнерНаименование + ")";
			КонецЕсли;
			
			Если Выборка.ПометкаУдаления Тогда
				СтруктураЗначение = Новый Структура("Значение,ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
				ДанныеВыбора.Добавить(СтруктураЗначение,Представление,,БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
			Иначе
				ДанныеВыбора.Добавить(Выборка.Ссылка,Представление);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			
			ИспользоватьПолнотекстовыйПоиск = ОбщегоНазначенияУТВызовСервера.ИспользуетсяПолнотекстовыйПоиск("ИспользоватьПолнотекстовыйПоиск");
			
			Если ИспользоватьПолнотекстовыйПоиск Тогда
				ВыбраннаяФорма       = "ФормаВыбораИспользуютсяТолькоПартнеры";
			Иначе
				ВыбраннаяФорма       = "ФормаВыбораИспользуютсяТолькоПартнерыБезПолнотекстовогоПоиска";
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Партнер") Тогда
				Параметры.Отбор.Удалить("Партнер");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Заполняет предопределенные элементы справочника "Контрагенты".
//
Процедура ЗаполнитьПредопределенныхКонтрагентов() Экспорт
	
	СправочникОбъект = Справочники.Контрагенты.РозничныйПокупатель.ПолучитьОбъект();
	СправочникОбъект.НаименованиеПолное = НСтр("ru='Розничный покупатель';uk='Роздрібний покупець'");
	СправочникОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	СправочникОбъект.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	Попытка
		СправочникОбъект.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры


Функция ПолноеИмяОбъекта()
	Возврат "Справочник.Контрагенты";
КонецФункции

Процедура ЗаполнитьСтраныРегистрацииКонтрагентовРезидентов_ДанныеДляОбновления(Параметры) Экспорт
    
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И НЕ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
    |";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
    
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
// Заполняет элементы справочника "Контрагенты" данными по стране регистрации "Украина" для контрагентов, не являющихся не резидентами.
Процедура ЗаполнитьСтраныРегистрацииКонтрагентовРезидентов(Параметры) Экспорт
    
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяОбъекта()
    );
    
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Если Не ОбновлениеИнформационнойБазы.МожноЧитатьИМенять(Параметры.Очередь, Выборка.Ссылка, ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки()) Тогда
				Продолжить;
			КонецЕсли;
            
            Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
            Если СпрОбъект = Неопределено ИЛИ (НЕ СпрОбъект.СтранаРегистрации.Пустая()) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			СпрОбъект.СтранаРегистрации = Справочники.СтраныМира.Украина;
					
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
			
			ЗафиксироватьТранзакцию();
            
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось установить страну регистрации ""Украина"" у элемента: %Ссылка% по причине: %Причина%';uk='Не вдалося встановити країну реєстрації ""Україна"" у елемента: %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.Контрагенты,
				Выборка.Ссылка,
				ТекстСообщения
            );
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяОбъекта()
    );
	
КонецПроцедуры


#Область СлужебныеПроцедурыИФункции

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуВедомостьРасчетов(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаЭлемента,ФормаСписка,ФормаСпискаПараметрическая";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли


#Область ПрограммныйИнтерфейс

Процедура ВыполнитьПодключаемуюКомандуОтчетПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	Форма = ДополнительныеПараметры.Форма;
	Источник = ДополнительныеПараметры.Источник;
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Форма.Записать();
		Если Источник.Ссылка.Пустая() Или Форма.Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПодключаемуюКомандуОтчетПодготовкаОбъектовОтчет(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ВыполнитьПодключаемуюКомандуОтчет(ОбъектыОснований, ДополнительныеПараметры) Экспорт
	
	Если ОбъектыОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОбъектыОснований", ОбъектыОснований);
	
	ВыполнитьПодключаемуюКомандуОчтетЗавершение(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ВыполнитьПодключаемуюКомандуОчтетЗавершение(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	Форма = ДополнительныеПараметры.Форма;
	ОбъектыОснований = ДополнительныеПараметры.ОбъектыОснований;
	
	ОписаниеКоманды = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписаниеКоманды);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ОписаниеКоманды.Вставить("ПараметрКоманды", ОбъектыОснований);
	Иначе 
		ОписаниеКоманды.Вставить("ПараметрКоманды", ОбъектыОснований[0]);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеКоманды.Обработчик) Тогда
		ОписаниеКоманды.Вставить("Форма", Форма);
		ИмяОбработчика = ОписаниеКоманды.Обработчик;
		Обработчик = ИмяОбработчика + "(ОписаниеКоманды)";
		Результат = Вычислить(Обработчик);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеКоманды.ИмяФормыОтчета) Тогда
		ИмяФормыОтчета = ОписаниеКоманды.ИмяФормыОтчета;
	ИначеЕсли СтрНайти(ОписаниеКоманды.Идентификатор, "Отчет.") <> 0 Тогда
		ИмяФормыОтчета = ОписаниеКоманды.Идентификатор + ".ФормаОбъекта";
	ИначеЕсли СтрНайти(ОписаниеКоманды.Идентификатор, "Обработка.") <> 0 Тогда
		ИмяФормыОтчета = ОписаниеКоманды.Идентификатор + ".Форма";
	ИначеЕсли СтрНайти(ОписаниеКоманды.Идентификатор, "РегистрСведений.") <> 0 Тогда
		ИмяФормыОтчета = ОписаниеКоманды.Идентификатор + ".ФормаСписка";
	Иначе 
		ИмяФормыОтчета = ОписаниеКоманды.Идентификатор;
	КонецЕсли;
	
	МенюОтчетыКлиент.ВыполнитьКомандуОтчет(ИмяФормыОтчета,
			ОписаниеКоманды.ПараметрКоманды, Форма, ОписаниеКоманды);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПодключаемуюКомандуОтчетПодготовкаОбъектовОтчет(ДополнительныеПараметры)
	
	ОбъектыОснований = ДополнительныеПараметры.Источник;
	Если ТипЗнч(ОбъектыОснований) <> Тип("Массив") Тогда
		ОбъектыОснований = ОбъектыОснований(ОбъектыОснований);
	КонецЕсли;
	
	Если ОбъектыОснований.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'")
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОписаниеКоманды.ТипыОбъектовСозданияНаОсновании.Количество() <> 0 Тогда // требуется проверка типа
		ЕстьСоздаваемыеНаОснованииОбъекты = Ложь;
		Для Каждого ОбъектОтчет Из ОбъектыОснований Цикл
			Если ДополнительныеПараметры.ОписаниеКоманды.ТипыОбъектовСозданияНаОсновании.Найти(ТипЗнч(ОбъектОтчет)) <> Неопределено Тогда
				ЕстьСоздаваемыеНаОснованииОбъекты = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьСоздаваемыеНаОснованииОбъекты Тогда
			ТекстСообщения = МенюОтчетыВызовСервера.СообщениеОПредназначенииКомандыОтчет(ДополнительныеПараметры.ОписаниеКоманды.ТипыОбъектовСозданияНаОсновании);
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОписаниеКоманды.ПроверкаПроведенияПередОтчетом Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуОтчет", ЭтотОбъект, ДополнительныеПараметры);
		МенюОтчетыКлиент.ПроверитьПроведенностьДокументов(ОписаниеОповещения, ОбъектыОснований, ДополнительныеПараметры.Форма);
		Возврат;
	КонецЕсли;
	
	ВыполнитьПодключаемуюКомандуОтчет(ОбъектыОснований, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверитьПроведенностьДокументовДиалогПроведения(Параметры) Экспорт
	
	Если МенюОтчетыВызовСервера.ДоступноПравоПроведения(Параметры.НепроведенныеДокументы) Тогда
		Если Параметры.НепроведенныеДокументы.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru='Для создания на основании необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';uk='Для створення на підставі необхідно попередньо провести документ. Виконати проведення документа і продовжити?'");
		Иначе
			ТекстВопроса = НСтр("ru='Для создания на основании необходимо предварительно провести документы. Выполнить проведение документов и продолжить?';uk='Для створення на підставі необхідно попередньо провести документи. Виконати проведення документів та продовжити?'");
		КонецЕсли;
	Иначе
		Если Параметры.НепроведенныеДокументы.Количество() = 1 Тогда
			ТекстПредупреждения = НСтр("ru='Для создания на основании необходимо предварительно провести документ. Недостаточно прав для проведения документа.';uk='Для створення на підставі необхідно попередньо провести документ. Недостатньо прав для проведення документа.'");
		Иначе
			ТекстПредупреждения = НСтр("ru='Для создания на основании необходимо предварительно провести документы. Недостаточно прав для проведения документов.';uk='Для створення на підставі необхідно попередньо провести документи. Недостатньо прав для проведення документів.'");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПроведенностьДокументовПроведениеДокументов", ЭтотОбъект, Параметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ПроверитьПроведенностьДокументовПроведениеДокументов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(ДополнительныеПараметры.НепроведенныеДокументы);
	ШаблонСообщения = НСтр("ru='Документ %1 не проведен: %2';uk='Документ %1 не проведено: %2'");
	НепроведенныеДокументы = Новый Массив;
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ИнформацияОДокументе.Ссылка), 
				ИнформацияОДокументе.ОписаниеОшибки), ИнформацияОДокументе.Ссылка);
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	ДополнительныеПараметры.Вставить("НепроведенныеДокументы", НепроведенныеДокументы);
	
	ПроведенныеДокументы = ОбщегоНазначенияКлиентСервер.СократитьМассив(ДополнительныеПараметры.СписокДокументов, НепроведенныеДокументы);
	ДополнительныеПараметры.Вставить("ПроведенныеДокументы", ПроведенныеДокументы);
	
	// Оповещаем открытые формы о том, что были проведены документы.
	ТипыПроведенныхДокументов = Новый Соответствие;
	Для Каждого ПроведенныйДокумент Из ПроведенныеДокументы Цикл
		ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
	КонецЦикла;
	Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
		ОповеститьОбИзменении(Тип.Ключ);
	КонецЦикла;
		
	// Если команда была вызвана из формы, то зачитываем в форму актуальную (проведенную) копию из базы.
	Если ТипЗнч(ДополнительныеПараметры.Форма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ДополнительныеПараметры.Форма.Прочитать();
		Исключение
			
		КонецПопытки;
	КонецЕсли;
		
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		// Спрашиваем пользователя о необходимости продолжения создания на основании при наличии непроведенных документов.
		ТекстДиалога = НСтр("ru='Не удалось провести один или несколько документов.';uk='Не вдалося провести один або кілька документів.'");
		
		КнопкиДиалога = Новый СписокЗначений;
		Если ПроведенныеДокументы.Количество() > 0 Тогда
			ТекстДиалога = ТекстДиалога + " " + НСтр("ru='Продолжить?';uk='Продовжити?'");
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru='Продолжить';uk='Продовжити'"));
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
		Иначе
			КнопкиДиалога.Добавить(КодВозвратаДиалога.ОК);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПроведенностьДокументовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстДиалога, КнопкиДиалога);
		Возврат;
	КонецЕсли;
	
	ПроверитьПроведенностьДокументовЗавершение(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверитьПроведенностьДокументовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> Неопределено И РезультатВопроса <> КодВозвратаДиалога.Пропустить Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеПроцедурыЗавершения, ДополнительныеПараметры.ПроведенныеДокументы);
	
КонецПроцедуры

Функция ОбъектыОснований(Источник)
	
	Результат = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("ТаблицаФормы") Тогда
		ВыделенныеСтроки = Источник.ВыделенныеСтроки;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяСтрока = Источник.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущаяСтрока <> Неопределено Тогда
				Результат.Добавить(ТекущаяСтрока.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат.Добавить(Источник.Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

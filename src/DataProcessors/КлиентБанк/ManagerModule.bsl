#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует таблицу баннковских счетов с настройками обмена
//
// Параметры
//    Загрузка - Булево - Признак подготовки счетов для загрузки или для выгрузки платежей
//
Функция ТаблицаСчетов(Загрузка = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНастройкиСчетов();
	Запрос.УстановитьПараметр("Загрузка", Загрузка);
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов;
	
КонецФункции

// Формирует таблицу документов к выгрузке в банк
//
// Параметры
//    МассивСчетов - Массив - счета для отбора платежей к выгрузке
//    ДатаНачала - Дата - Начало периода выборки документов
//    ДатаКонца - Дата - Конец периода выборки документов
//    ТолькоНевыгруженные - Булево - Признак отбора только не выгруженных ранее платежей
//
Функция ТаблицаДокументовКВыгрузке(МассивСчетов = Неопределено,
									ДатаНачала = '00010101',
									ДатаКонца = '00010101',
									ТолькоНевыгруженные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДокументыКВыгрузке();
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца);
	Запрос.УстановитьПараметр("ТолькоНевыгруженные", ТолькоНевыгруженные);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Выгружает платежи в файл
//
// Параметры
//    ПараметрыВыгрузки - Структура - Параметры выгрузки платежей
//    АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, куда будут помещены данные выгрузки
//
Процедура Выгрузить(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	
	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("Дата");
	НачПериода = ТаблицаДокументов[0].Дата;
	КонПериода = ТаблицаДокументов[КоличествоДокументов-1].Дата;
	
	Кодировка	   	= ПараметрыВыгрузки.Кодировка;
	ФайлВыгрузки   	= ПараметрыВыгрузки.НастройкаОбмена;
	Программа      	= "Система ""Клієнт-Банк""";
	Организация    	= ПараметрыВыгрузки.Организация;
	КодВалюты		= СокрЛП(ПараметрыВыгрузки.КодВалюты);
	
	БанковскиеСчетаВыгрузки = ПараметрыВыгрузки.БанковскийСчет;
	 
	
	Если ТипЗнч(БанковскиеСчетаВыгрузки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ОчереднойБанковскийСчет Из БанковскиеСчетаВыгрузки Цикл 
			
			БанковскийСчет = СокрЛП(ОчереднойБанковскийСчет.НомерСчета);
			ВыгрузитьФайлXML(НачПериода,КонПериода,ТаблицаДокументов,БанковскийСчет,Кодировка,ФайлВыгрузки,Программа,Организация,КодВалюты,АдресХранилища);
			
		КонецЦикла;
	Иначе
		
		БанковскийСчет 	= СокрЛП(БанковскиеСчетаВыгрузки.НомерСчета);
		ВыгрузитьФайлXML(НачПериода,КонПериода,ТаблицаДокументов,БанковскийСчет,Кодировка,ФайлВыгрузки,Программа,Организация,КодВалюты,АдресХранилища);	
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьФайлXML(НачПериода,КонПериода,ТаблицаДокументов,БанковскийСчет,Кодировка,ФайлВыгрузки,Программа,Организация,КодВалюты,АдресХранилища)
	
		
		ПотокВыгрузки = Новый ТекстовыйДокумент();

		
		Если Кодировка = "DOS" Тогда
		КодировкаXML = "DOS 866";
		ИначеЕсли Кодировка = "Windows" Тогда
			КодировкаXML = "Windows-1251";
		Иначе
			КодировкаXML = "UTF-8";
		КонецЕсли;
		
		// Формируем заголовок.
		СтрокаИнформацииОXML = "<?xml version=""1.0"" encoding=""" + КодировкаXML + """?>";
		
		УзелКорень = СоздатьУзел("_1CClientBankExchange");
		
		УзелКорень.ЗаписатьСоответствиеПространстваИмен("xsi","http://www.w3.org/2001/XMLSchema-instance");
		
		одЗаписатьЭлемент(УзелКорень,"ВерсияФормата",	"2.00");
		одЗаписатьЭлемент(УзелКорень,"Отправитель", 	Метаданные.Синоним);
		одЗаписатьЭлемент(УзелКорень,"Получатель",  	Программа);
		одЗаписатьЭлемент(УзелКорень,"ДатаСоздания", 	Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
		одЗаписатьЭлемент(УзелКорень,"ДатаНачала", 		Формат(НачПериода,"ДФ=yyyy-MM-dd"));
		одЗаписатьЭлемент(УзелКорень,"ДатаКонца", 		Формат(КонПериода,"ДФ=yyyy-MM-dd"));
		
		одЗаписатьЭлемент(УзелКорень,"РасчСчет", БанковскийСчет);
		
		одЗаписатьЭлемент(УзелКорень,"КодВалюты", КодВалюты);
		
		// Выводим отмеченные секции документов.
		Для Каждого СтрокаСекции Из ТаблицаДокументов Цикл
		//	
			Если НЕ СтрокаСекции.Выгружать Тогда
				Продолжить;
			КонецЕсли;
		//
			УзелСекцияДокумент = СоздатьУзел("СекцияДокумент");
		//	
			СтуртураДляЗаписи = СформироватьСтруктуруЭкспорта();
			ЗаполнитьЗначениеЭкспорта(СтуртураДляЗаписи, СтрокаСекции);
		//	
			Для каждого ВыгружаемыйРеквизит из СтуртураДляЗаписи Цикл
				Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
				Если НЕ ПустаяСтрока(Значение) Тогда
					одЗаписатьЭлемент(УзелСекцияДокумент, ВыгружаемыйРеквизит.Ключ, Значение);
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьПодчиненный(УзелКорень, УзелСекцияДокумент);
			
		КонецЦикла;	
		
		УзелКорень.ЗаписатьКонецЭлемента();
		XML = УзелКорень.Закрыть();
		
		// Записываем на диск.
		ПотокВыгрузки.ДобавитьСтроку(СтрокаИнформацииОXML);
		ПотокВыгрузки.ДобавитьСтроку(XML);
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если Кодировка = "DOS" Тогда 
		Кодир = "cp866";        // КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "Windows" Тогда
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	Иначе
		Кодир = "UTF-8";
	КонецЕсли;

		
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодир);
	
	ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), АдресХранилища);
		
КонецПроцедуры


// Загружает платежи в базу
//
// Параметры
//    ПараметрыВыгрузки - Структура - Параметры выгрузки платежей
//
Процедура Загрузить(ПараметрыЗагрузки, АдресХранилища) Экспорт
	
	ДанныеВыписки = РазобратьФайлВыписки(ПараметрыЗагрузки.СтрокиВыписки);
	
	Если ДанныеВыписки <> Неопределено Тогда
	
			
		БанковскийСчет = ПараметрыЗагрузки.БанковскийСчет;
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
		Валюта = РеквизитыСчета.Валюта;
		НомерСчета = СокрЛП(РеквизитыСчета.НомерСчета);
		
		ДокументыВыписки = ДанныеВыписки.ДокументыВыписки;
		ДокументыКЗагрузке = ПараметрыЗагрузки.ДокументыКЗагрузке;
		
		Если Не ДокументыВыписки.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для каждого ДокументВыписки Из ДокументыВыписки Цикл
			ДокументКЗагрузке = ДокументыКЗагрузке.Добавить();
			ЗаполнитьЗначенияСвойств(ДокументКЗагрузке, ДокументВыписки);
			ДокументКЗагрузке.БанковскийСчет = БанковскийСчет;
			ДокументКЗагрузке.Валюта = Валюта;
			ДокументКЗагрузке.Загружать = Истина;
			ДокументКЗагрузке.СоздаватьКонтрагента = Истина;
			ДокументКЗагрузке.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ПодготовитьСтрокиВыписки(ДокументыКЗагрузке, БанковскийСчет, НомерСчета);
		ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, ПараметрыЗагрузки.СоздаватьКонтрагентов, ПараметрыЗагрузки.ПроводитьДокументы);
		СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, ПараметрыЗагрузки.СоздаватьКонтрагентов, ПараметрыЗагрузки.ПроводитьДокументы);
		СнятьПризнакПроведения(ДокументыКЗагрузке, БанковскийСчет, ДанныеВыписки.Заголовок);
		
		Отбор = Новый Структура("Загружать", Истина);
		СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
		ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(СтрокиКЗагрузке);
		
		ПоместитьВоВременноеХранилище(ТаблицаДокументов, АдресХранилища);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает элемент справочника "Контрагенты"
//
// Параметры
//    ДокументыКЗагрузке - ТаблицаЗначений - Таблица документов выписки
//    СтрокаДокумента - СтрокаТаблицыЗначений - Содержит описание контрагента и связанных данных
//
// Возвращаемое значение
//    СправочникСсылка.Контрагенты - Ссылка на новый элемент справочника
//
Функция СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипКонтрагента = ?(СтрокаДокумента.Исходящий, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	СтруктураНаименования = ДенежныеСредстваСервер.НаименованиеОрганизации(СтрокаДокумента.ИмяКонтрагента);
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Наименование       = СтруктураНаименования.Наименование;
	НовыйКонтрагент.НаименованиеПолное = СтруктураНаименования.СокращенноеНаименование;
	НовыйКонтрагент.КодПоЕДРПОУ           = СтрокаДокумента[ТипКонтрагента + "ОКПО"];
	
	НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	
	НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
	НовыйПартнер.Клиент = Истина;
	НовыйПартнер.Поставщик = Истина;
	НовыйПартнер.ПрочиеОтношения = Истина;
	НовыйПартнер.ДатаРегистрации = ТекущаяДата();
	НовыйПартнер.Комментарий = НСтр("ru='#Создан автоматически при импорте банковских документов';uk='#Створений автоматично при імпорті банківських документів'");
	НовыйПартнер.Наименование = НовыйКонтрагент.Наименование;
	НовыйПартнер.НаименованиеПолное = НовыйКонтрагент.НаименованиеПолное;
	НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	НовыйПартнер.Записать();
	
	НовыйКонтрагент.Партнер = НовыйПартнер.Ссылка;
	
	НовыйКонтрагент.Записать();
	
	СтрокаДокумента.Контрагент = НовыйКонтрагент.Ссылка;
	СтрокаДокумента.Партнер = НовыйКонтрагент.Партнер;
	
	// Нужно подставить нового контрагента и партнера в другие строки выписки
	Если Не ПустаяСтрока(НовыйКонтрагент.КодПоЕДРПОУ) Тогда
		ПолеПоиска = ТипКонтрагента + "ОКПО";
		ЗначениеПоиска = НовыйКонтрагент.КодПоЕДРПОУ;
	Иначе
		ПолеПоиска = "ИмяКонтрагента";
		ЗначениеПоиска = НовыйКонтрагент.Наименование;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(ПолеПоиска + ", БанковскийСчет", ЗначениеПоиска, СтрокаДокумента.БанковскийСчет);
	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЗаписьКонтрагента из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.Контрагент = НовыйКонтрагент.Ссылка;
		ЗаписьКонтрагента.Партнер = НовыйКонтрагент.Партнер;
	КонецЦикла;
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

// Создает элемент справочника "БанковскиеСчетаКонтрагентов"
//
// Параметры
//    ДокументыКЗагрузке - ТаблицаЗначений - Таблица документов выписки
//    СтрокаДокумента - СтрокаТаблицыЗначений - Содержит описание счета и связанных данных
//    ВладелецСчета - СправочникСсылка.Контрагенты - Контрагент - владелец счета
//
// Возвращаемое значение
//    СправочникСсылка.БанковскиеСчетаКонтрагентов - Ссылка на новый элемент справочника
//
Функция СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ВладелецСчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
	НовыйСчет.Владелец = ВладелецСчета;
	НовыйСчет.ВалютаДенежныхСредств = СтрокаДокумента.Валюта;

	ТипКонтрагента = ?(СтрокаДокумента.Исходящий, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	НовыйСчет.НомерСчета = СокрЛП(СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
		
		// Банк контрагента
		КодБанка       = СокрЛП(СтрокаДокумента[ТипКонтрагента + "МФО"]);
		
		// Считаем, что если в файле нет реквизитов банка, то это внутренняя банковская операция
		Если ПустаяСтрока(КодБанка) Тогда
			Возврат СтрокаДокумента.БанковскийСчет;
		КонецЕсли;
		
		Банк = Неопределено;
	 	Если Не ПустаяСтрока(КодБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоКоду(КодБанка);
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Банк) Тогда
			НовыйСчет.Банк = Банк;
		Иначе
			НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
			НовыйСчет.КодБанка           = СОкрЛП(СтрокаДокумента[ТипКонтрагента + "МФО"]);
			НовыйСчет.НаименованиеБанка  = СокрЛП(СтрокаДокумента[ТипКонтрагента + "БАНК"]);
		КонецЕсли;
		
	
	Если НовыйСчет.РучноеИзменениеРеквизитовБанка Тогда
		СтрокаНаименования = Прав(СокрЛП(НовыйСчет.НомерСчета), 4)
			+ ?(ЗначениеЗаполнено(НовыйСчет.НаименованиеБанка), " в " + Строка(НовыйСчет.НаименованиеБанка), "")
			+ " (" + Строка(НовыйСчет.ВалютаДенежныхСредств) + ")";
	Иначе
		СтрокаНаименования = Прав(СокрЛП(НовыйСчет.НомерСчета), 4) 
			+ ?(ЗначениеЗаполнено(НовыйСчет.Банк), " в " + Строка(НовыйСчет.Банк), "")
			+ " (" + Строка(НовыйСчет.ВалютаДенежныхСредств) + ")";
	КонецЕсли;
	
	НовыйСчет.Наименование = Лев(СтрокаНаименования, 150);
	
	НовыйСчет.Записать();
	
	// Нужно подставить новый счет в другие строки выписки
	СтруктураПоиска = Новый Структура(ТипКонтрагента + "Счет, Контрагент, БанковскийСчет",
		НовыйСчет.НомерСчета, ВладелецСчета, СтрокаДокумента.БанковскийСчет);
	
	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЗаписьКонтрагента из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.СчетКонтрагента = НовыйСчет.Ссылка;
	КонецЦикла;
	
	Возврат НовыйСчет.Ссылка;
	
КонецФункции


// Преобразует строку в значение типа Дата. При неудаче возвращает пустую дату.
//
// Параметры
//    Источник - Строка - Преобразуемое значение
//
// Возвращаемое значение
//    Дата - Полученная дата
//
Функция ПолучитьДатуИзСтроки(Знач Источник) Экспорт
	
	Приемник = '00010101';
	
	Если ПустаяСтрока(Источник) Тогда
		Возврат Приемник;
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Источник);
		
	Исключение
	
		Буфер = Источник;
		
		ПозицияТочки = СтрНайти(Буфер, "-");
		 
		
		
		Если ПозицияТочки = 0 Тогда
			Возврат Приемник;
		КонецЕсли;
		
		ГодДаты = Лев(Буфер, ПозицияТочки - 1);
		
		Буфер = Сред(Буфер, ПозицияТочки + 1);
		
		ПозицияТочки = СтрНайти(Буфер, "-");
		
		Если ПозицияТочки = 0 Тогда
			Возврат Приемник;
		КонецЕсли;
		
		МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
		ЧислоДаты = Сред(Буфер, ПозицияТочки + 1);
		
		Попытка
			
			Если СтрДлина(ГодДаты) = 2 Тогда
			
				Если Число(ГодДаты) < 50 Тогда
					ГодДаты = "20" + ГодДаты;
				Иначе
					ГодДаты = "19" + ГодДаты;
				КонецЕсли;
			
			КонецЕсли;
			
		Исключение
			Возврат Приемник;
		КонецПопытки;
		
		Попытка
			
			Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
			
		Исключение
			
			Возврат Приемник;
			
		КонецПопытки;
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

// Преобразует строку в значение числового типа. При неудаче возвращает Неопределено.
//
// Параметры
//    Источник - Строка - Преобразуемое значение
//
// Возвращаемое значение
//    Число - Полученное число
//
Функция ПреобразоватьВЧисло(Знач Буфер) Экспорт
	
	Буфер = СокрЛП(СтрЗаменить(Буфер, " ", ""));
	Если Не ПустаяСтрока(Буфер)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		Результат = Число(Буфер);
		Если Результат < 0 Тогда
			Результат = - Результат;
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаНастройкиСчетов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка                            КАК Ссылка,
	|	БанковскиеСчета.Владелец                          КАК Организация,
	|	БанковскиеСчета.Наименование                      КАК Наименование,
	|	БанковскиеСчета.НомерСчета                        КАК НомерСчета,
	|	
	|	БанковскиеСчета.ИспользоватьОбменСБанком          КАК ОбменЧерезФайл,
	|	
	|	ВЫБОР 
	|	КОГДА БанковскиеСчета.ИспользоватьОбменСБанком ТОГДА
	|		ВЫБОР КОГДА &Загрузка ТОГДА
	|			БанковскиеСчета.ФайлЗагрузки
	|		ИНАЧЕ
	|			БанковскиеСчета.ФайлВыгрузки
	|		КОНЕЦ
	|	КОНЕЦ КАК НастройкаОбмена,
	|	ВЫРАЗИТЬ("""" КАК Строка(255)) КАК ПредставлениеНастройкиОбмена,
	|
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ИспользоватьОбменСБанком ТОГДА
	|			ВЫБОР КОГДА &Загрузка ТОГДА
	|				БанковскиеСчета.ФайлЗагрузки
	|			ИНАЧЕ
	|				БанковскиеСчета.ФайлВыгрузки
	|			КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ("""" КАК Строка(255))
	|	КОНЕЦ КАК ПравилоФайловогоОбменаСБанками,
	|
	|	БанковскиеСчета.Кодировка                         КАК Кодировка,
	|	
	|	0                                                 КАК КВыгрузке,
	|	
	|	ПоследнийОбменСБанками.ДатаВыгрузки               КАК ДатаПоследнейВыгрузки,
	|	ПоследнийОбменСБанками.ДатаНачалаЗагрузки         КАК ДатаНачалаПоследнейЗагрузки,
	|	ПоследнийОбменСБанками.ДатаКонцаЗагрузки          КАК ДатаКонцаПоследнейЗагрузки,
	|	НЕОПРЕДЕЛЕНО                                      КАК ДатаНачалаЗагрузки,
	|	НЕОПРЕДЕЛЕНО                                      КАК ДатаКонцаЗагрузки,
	|	ВЫРАЗИТЬ("""" КАК Строка(30))                     КАК ПоследняяВыписка,
	|	
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.КодБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК КодБанка,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк
	|	КОНЕЦ КАК Банк,
	|	Ложь                                              КАК ЕстьВозможностьПрямогоОбмена,
	|	БанковскиеСчета.Закрыт                            КАК Закрыт
	|	
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПоследнийОбменСБанками КАК ПоследнийОбменСБанками
	|	ПО
	|		ПоследнийОбменСБанками.БанковскийСчет = БанковскиеСчета.Ссылка
	|	
	|ГДЕ
	|	БанковскиеСчета.ОбменСБанкомВключен
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И НЕ БанковскиеСчета.Закрыт
	|	
	|УПОРЯДОЧИТЬ ПО
	|	БанковскиеСчета.Наименование
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДокументыКВыгрузке()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БезналичныеДенежныеСредства.Регистратор КАК Ссылка
	|
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК БезналичныеДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.Ссылка = БезналичныеДенежныеСредства.Регистратор
	|	
	|ГДЕ
	|	БезналичныеДенежныеСредства.КСписанию <> 0
	|	И (БезналичныеДенежныеСредства.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|		ИЛИ &ДатаКонца = ДАТАВРЕМЯ(1,1,1) И БезналичныеДенежныеСредства.Период >= &ДатаНачала)
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|	И ДанныеДокумента.БанковскийСчет В(&МассивСчетов)
	|	И (ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1) ИЛИ НЕ &ТолькоНевыгруженные)
	|	
	|СГРУППИРОВАТЬ ПО
	|	БезналичныеДенежныеСредства.Регистратор
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БезналичныеДенежныеСредства.Регистратор КАК Ссылка
	|
	|ПОМЕСТИТЬ ПлатежныеТребования
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК БезналичныеДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.Ссылка = БезналичныеДенежныеСредства.Регистратор
	|	
	|ГДЕ
	|	БезналичныеДенежныеСредства.КЗачислению <> 0
	|	И (БезналичныеДенежныеСредства.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|		ИЛИ &ДатаКонца = ДАТАВРЕМЯ(1,1,1) И БезналичныеДенежныеСредства.Период >= &ДатаНачала)
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|	И ДанныеДокумента.БанковскийСчет В(&МассивСчетов)
	|	И (ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1) ИЛИ НЕ &ТолькоНевыгруженные)
	|	
	|СГРУППИРОВАТЬ ПО
	|	БезналичныеДенежныеСредства.Регистратор
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса
		+ ТекстЗапросаПлатежныеПорученияТретьиЛица()
		+ ТекстЗапросаПлатежныеПорученияВнутренние()
		+ ТекстЗапросаПлатежныеПорученияПереводы()
		+ ТекстЗапросаПлатежныеТребованияТретьиЛица()
		+ ТекстЗапросаПлатежныеТребованияВнутренние()
		;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияТретьиЛица()
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.ДатаВыгрузки                       КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                              КАК Номер,
	|	ДанныеДокумента.Дата                               КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                     КАК Сумма,
	|	ДанныеДокумента.Валюта                             КАК Валюта,
	|	ДанныеДокумента.НазначениеПлатежа                  КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация              КАК Операция,
	|	ДанныеДокумента.Организация                        КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                     КАК БанковскийСчет,
	|	ДанныеДокумента.Комментарий                        КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента             КАК ВидДокумента,
	|	ДанныеДокумента.Ссылка                             КАК Ссылка,
	|	
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)) КАК СостояниеЭД,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Выгружать,
	|	
	
	// Организация и счет организации
	|	ДанныеДокумента.БанковскийСчет.НомерСчета КАК ОрганизацияСчет,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДанныеДокумента.БанковскийСчет.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчет.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаим,
	|	ДанныеДокумента.Организация.КодПоЕДРПОУ КАК ОрганизацияОКПО,
	|	
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК ОрганизацияБанк,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК ОрганизацияМФО,
	// Контрагент и счет контрагента
	|	ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета КАК КонтрагентСчет,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.БанковскийСчетКонтрагента.ТекстКорреспондента КАК Строка(255)) = """" ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|			ТОГДА
	|				ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|			ИНАЧЕ
	|				ДанныеДокумента.Контрагент.НаименованиеПолное
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетКонтрагента.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаим,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.Наименование
	|	КОНЕЦ КАК КонтрагентКратко,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.КодПоДРФО
	|		ИНАЧЕ
	|		ДанныеДокумента.Контрагент.КодПоЕДРПОУ
	|	КОНЕЦ КАК  КонтрагентОКПО,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетКонтрагента.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетКонтрагента.Банк.Наименование
	|	КОНЕЦ КАК КонтрагентБанк,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетКонтрагента.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетКонтрагента.Банк.Код
	|	КОНЕЦ КАК КонтрагентМФО,
	|	ДанныеДокумента.ОчередностьПлатежа КАК ОчередностьПлатежа
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО
	|		ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|	ПО
	|		ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияВнутренние()
	
	ТекстЗапроса = "ОБЪЕДИНИТЬ ВСЕ" + "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                       КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                              КАК Номер,
	|	ДанныеДокумента.Дата                               КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                     КАК Сумма,
	|	ДанныеДокумента.Валюта                             КАК Валюта,
	|	ДанныеДокумента.НазначениеПлатежа                  КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация              КАК Операция,
	|	ДанныеДокумента.Организация                        КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                     КАК БанковскийСчет,
	|	ДанныеДокумента.Комментарий                        КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента             КАК ВидДокумента,
	|	ДанныеДокумента.Ссылка                             КАК Ссылка,
	|	
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)) КАК СостояниеЭД,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Выгружать,
	|	
	
	// Организация и счет организации
	|	ДанныеДокумента.БанковскийСчет.НомерСчета КАК ОрганизацияСчет,
	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДанныеДокумента.БанковскийСчет.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчет.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаим,
	|	ДанныеДокумента.Организация.КодПоЕДРПОУ КАК ОрганизацияОКПО,
	|	
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК ОрганизацияБанк,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК ОрганизацияМФО,

	// Контрагент и счет контрагента
	
	|	ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета КАК КонтрагентСчет,
	|	ДанныеДокумента.БанковскийСчетПолучатель.Владелец КАК Контрагент,
	|	ДанныеДокумента.БанковскийСчетПолучатель.Владелец.Наименование КАК КонтрагентНаим,
	|	ДанныеДокумента.БанковскийСчетПолучатель.Владелец.Наименование КАК КонтрагентКратко,
	|	ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КодПоЕДРПОУ КАК КонтрагентОКПО,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетПолучатель.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетПолучатель.Банк.Наименование
	|	КОНЕЦ КАК КонтрагентБанк,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетПолучатель.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетПолучатель.Банк.Код
	|	КОНЕЦ КАК КонтрагентМФО,
	|	ДанныеДокумента.ОчередностьПлатежа КАК ОчередностьПлатежа
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО
	|		ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|	ПО
	|		ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияПереводы()
	
	ТекстЗапроса = "ОБЪЕДИНИТЬ ВСЕ" + "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                       КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                              КАК Номер,
	|	ДанныеДокумента.Дата                               КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                     КАК Сумма,
	|	ДанныеДокумента.Валюта                             КАК Валюта,
	|	ДанныеДокумента.НазначениеПлатежа                  КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация              КАК Операция,
	|	ДанныеДокумента.Организация                        КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                     КАК БанковскийСчет,
	|	ДанныеДокумента.Комментарий                        КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента             КАК ВидДокумента,
	|	ДанныеДокумента.Ссылка                             КАК Ссылка,
	|	
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)) КАК СостояниеЭД,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Выгружать,
	|	
	
	// Организация и счет организации
	
	|	ДанныеДокумента.БанковскийСчет.НомерСчета КАК ОрганизацияСчет,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДанныеДокумента.БанковскийСчет.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчет.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаим,
	|	ДанныеДокумента.Организация.КодПоЕДРПОУ КАК ОрганизацияОКПО,
	|	
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК ОрганизацияБанк,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК ОрганизацияМФО,
	
	// Контрагент и счет контрагента
	
	|	ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета КАК КонтрагентСчет,
	|	ДанныеДокумента.БанковскийСчетПолучатель.Владелец КАК Контрагент,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДанныеДокумента.БанковскийСчет.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчетПолучатель.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаим,
	|	ДанныеДокумента.Организация.Наименование КАК КонтрагентКратко,
	|	ДанныеДокумента.Организация.КодПоЕДРПОУ КАК КонтрагентОКПО,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетПолучатель.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетПолучатель.Банк.Наименование
	|	КОНЕЦ КАК КонтрагентБанк,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетПолучатель.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетПолучатель.Банк.Код
	|	КОНЕЦ КАК КонтрагентМФО,
	|	ДанныеДокумента.ОчередностьПлатежа КАК ОчередностьПлатежа
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО
	|		ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|	ПО
	|		ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация =
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеТребованияТретьиЛица()
	
	ТекстЗапроса = "ОБЪЕДИНИТЬ ВСЕ" + "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                       КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                              КАК Номер,
	|	ДанныеДокумента.Дата                               КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                     КАК Сумма,
	|	ДанныеДокумента.Валюта                             КАК Валюта,
	|	ДанныеДокумента.НазначениеПлатежа                  КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация              КАК Операция,
	|	ДанныеДокумента.Организация                        КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                     КАК БанковскийСчет,
	|	ДанныеДокумента.Комментарий                        КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента             КАК ВидДокумента,
	|	ДанныеДокумента.Ссылка                             КАК Ссылка,
	|	
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)) КАК СостояниеЭД,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Выгружать,
	
	// Организация и счет организации
	
	|	ДанныеДокумента.БанковскийСчет.НомерСчета,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДанныеДокумента.БанковскийСчет.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчет.ТекстКорреспондента
	|	КОНЕЦ,
	|	ДанныеДокумента.Организация.КодПоЕДРПОУ,
	|	
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК ОрганизацияМФО,
	
	// Контрагент и счет контрагента
	
	|	ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.НаименованиеПолное
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.КодПоДРФО
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.КодПоЕДРПОУ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетКонтрагента.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетКонтрагента.Банк.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетКонтрагента.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетКонтрагента.Банк.Код
	|	КОНЕЦ КАК КонтрагентМФО,
	|	"""" КАК ОчередностьПлатежа
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПлатежныеТребования КАК ПлатежныеТребования
	|	ПО
	|		ДанныеДокумента.Ссылка = ПлатежныеТребования.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|	ПО
	|		ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеТребованияВнутренние()
	
	ТекстЗапроса = "ОБЪЕДИНИТЬ ВСЕ" + "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                       КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                              КАК Номер,
	|	ДанныеДокумента.Дата                               КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                     КАК Сумма,
	|	ДанныеДокумента.Валюта                             КАК Валюта,
	|	ДанныеДокумента.НазначениеПлатежа                  КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация              КАК Операция,
	|	ДанныеДокумента.Организация                        КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                     КАК БанковскийСчет,
	|	ДанныеДокумента.Комментарий                        КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента             КАК ВидДокумента,
	|	ДанныеДокумента.Ссылка                             КАК Ссылка,
	|	
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)) КАК СостояниеЭД,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Выгружать,
	|	
	
	// Организация и счет организации
	
	|	ДанныеДокумента.БанковскийСчет.НомерСчета,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДанныеДокумента.БанковскийСчет.ТекстКорреспондента КАК СТРОКА(255))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеСокращенное
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчет.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаим,
	|	ДанныеДокумента.Организация.КодПоЕДРПОУ,
	|	
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчет.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчет.Банк.Код
	|	КОНЕЦ,
		
	// Контрагент и счет контрагента
	
	|	ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета,
	|	ДанныеДокумента.БанковскийСчетОтправитель.Владелец КАК Контрагент,
	|	ДанныеДокумента.БанковскийСчетОтправитель.Владелец.Наименование,
	|	ДанныеДокумента.БанковскийСчетОтправитель.Владелец.Наименование,
	|	ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КодПоЕДРПОУ,
	|	
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетОтправитель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетОтправитель.НаименованиеБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетОтправитель.Банк.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.БанковскийСчетОтправитель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			ДанныеДокумента.БанковскийСчетОтправитель.КодБанка
	|		ИНАЧЕ
	|			ДанныеДокумента.БанковскийСчетОтправитель.Банк.Код
	|	КОНЕЦ,
	|	"""" КАК ОчередностьПлатежа
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПлатежныеТребования КАК ПлатежныеТребования
	|	ПО
	|		ДанныеДокумента.Ссылка = ПлатежныеТребования.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|	ПО
	|		ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область РазборВыписки
 
// Возвращает данные файла выписки
//
// Параметры
//    СтрокиВыписки - Массив - Массив строк файла выписки
//    ЧитатьДокументы - Булево - Признак чтения всей выписки, включая документы
//
// Возвращаемое значение
//    Структура - Данные выписки
//
Функция РазобратьФайлВыписки(СтрокиВыписки, ЧитатьДокументы = Истина) Экспорт
	
	Если ТипЗнч(СтрокиВыписки) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиВыпискиБуфер = СтрокиВыписки;		
	
	Результат = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
	ЗаголовокВыписки        = Неопределено;
	СписокСчетовВыписки     = Новый Массив;
	РасчетныеСчетаВыписки   = Новый Массив;
	ДокументыВыписки        = Новый Массив;
	ОшибкиРазбора           = Новый Массив;
	
	
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.УстановитьСтроку(СтрокиВыписки);
	Пока ФайлXML.Прочитать() Цикл
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя));
		Если ИмяТега="СЕКЦИЯДОКУМЕНТ" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТегиСтрокиДокумента = ТегиСтрокиДокумента();
			Если НЕ ЗагрузитьСекциюДокументаXML(ТегиСтрокиДокумента, ФайлXML,СтрокиВыпискиБуфер) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ДокументыВыписки.Добавить(ТегиСтрокиДокумента);
		ИначеЕсли ИмяТега="СЕКЦИЯРАСЧСЧЕТ" Тогда
			СтруктураРССчет = ТегиРасчетногоСчета();
			
			Если НЕ ЗагрузитьСекциюРасчСчетаXML(СтруктураРССчет, ФайлXML) Тогда
				
				Возврат Неопределено;
			Иначе 
				РасчетныеСчетаВыписки.Добавить(СтруктураРССчет);
			КонецЕсли;
			

		ИначеЕсли ИмяТега="РАСЧСЧЕТ" Тогда
			Значение = "";
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ФайлXML.Прочитать();	
				Значение = ФайлXML.Значение;
			КонецЕсли;	
				
			Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ФайлXML.Прочитать();	
			КонецЕсли;	

				Если СписокСчетовВыписки.Найти(Значение) = Неопределено Тогда
					СписокСчетовВыписки.Добавить(СокрЛП(Значение));
				КонецЕсли;
				//			


		ИначеЕсли ИмяТега = "_1CCLIENTBANKEXCHANGE" Тогда
			
			Продолжить;
		
		Иначе
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ФайлXML.Прочитать();	
				Значение = ФайлXML.Значение;
			КонецЕсли;	
				
			ЗагрузитьСтрокуЗаголовкаXML(ИмяТега, Значение, ЗаголовокВыписки);
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ФайлXML.Прочитать();	
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	Результат.Заголовок        = ЗаголовокВыписки;
	Результат.СписокСчетов     = СписокСчетовВыписки;
	Результат.РасчетныеСчета   = РасчетныеСчетаВыписки;
	Результат.ОшибкиРазбора    = ОшибкиРазбора;
	Результат.ДокументыВыписки = ДокументыВыписки;
	
	Возврат Результат;
	
КонецФункции


 

Функция ТегиРасчетногоСчета()
	Возврат Новый Структура(ВРЕГ("ДатаНачала, ДатаКонца, РасчСчетОрг, НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток, КонецРасчСчет"));		
КонецФункции

Функция ТегиСтрокиДокумента()
	
	Возврат Новый Структура(
		"Номер, Дата, Сумма,
		|ВидПлатежа, ВидОплаты, Операция,
		|КодВалюты,СтатусДокумента,ДокументИД,
		|СтатусСоставителя,
		|ДатаСписано, ДатаПоступило,
		|ПлательщикСчет, Плательщик, ПлательщикМФО, ПлательщикОКПО, ПлательщикБанк,
		|ПолучательСчет, Получатель, ПолучательМФО, ПолучательОКПО, ПолучательБанк,
		|НазначениеПлатежа,
		|НомерСчетаПоставщика, ДатаОтсылкиДок,
		|ДанныеВыписки
		|");
		
КонецФункции

#КонецОбласти

#Область Выгрузка

		

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	Если ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		Плательщик = "Контрагент";
		Получатель = "Организация";
	Иначе
		Плательщик = "Организация";
		Получатель = "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		ВыборкаДляЭкспорта.Номер,
		Истина, // УдалитьПрефиксИнформационнойБазы
		Истина); // УдалитьПользовательскийПрефикс
	СтрокаЭкспорта.Дата           = Формат(ВыборкаДляЭкспорта.Дата, "ДЛФ=Д");
	СтрокаЭкспорта.Сумма          = Формат(ВыборкаДляЭкспорта.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "Счет"];
	СтрокаЭкспорта.ПолучательСчет = ВыборкаДляЭкспорта[Получатель + "Счет"];
	
	СтрокаЭкспорта.ВидДокумента	  = СокрЛП(ВыборкаДляЭкспорта.ВидДокумента);
	СтрокаЭкспорта.КодВалюты	  = СокрЛП(ВыборкаДляЭкспорта.Валюта.Код);
	
	
	
	// Плательщик
	СтрокаЭкспорта.Плательщик = ВыборкаДляЭкспорта[Плательщик+ "Наим"];
	
	// Плательщик, ПлательщикОКПО
	СтрокаЭкспорта.ПлательщикОКПО = СокрЛП(ВыборкаДляЭкспорта[Плательщик + "ОКПО"]);
 
	СтрокаЭкспорта.ПлательщикСчет 		 = СокрЛП(ВыборкаДляЭкспорта[Плательщик + "Счет"]);
	СтрокаЭкспорта.ПлательщикБанк   	 = ВыборкаДляЭкспорта[Плательщик + "Банк"];
	СтрокаЭкспорта.ПлательщикМФО         = СокрЛП(ВыборкаДляЭкспорта[Плательщик + "МФО"]);
	// Получатель
	СтрокаЭкспорта.Получатель = ВыборкаДляЭкспорта[Получатель+ "Наим"];
	
// Получатель, ПолучательОКПО
	СтрокаЭкспорта.ПолучательОКПО = СокрЛП(ВыборкаДляЭкспорта[Получатель + "ОКПО"]);
	
	// ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4
	СтрокаЭкспорта.ПолучательСчет = СокрЛП(ВыборкаДляЭкспорта[Получатель + "Счет"]);
	СтрокаЭкспорта.ПолучательБанк = ВыборкаДляЭкспорта[Получатель + "Банк"];
	СтрокаЭкспорта.ПолучательМФО  = СокрЛП(ВыборкаДляЭкспорта[Получатель + "МФО"]);
 

	
	
	// ДокументИД
	СтрокаЭкспорта.ДокументИД = ВыборкаДляЭкспорта.Номер;
	
	// НазначениеПлатежа
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");

	
КонецПроцедуры

 


Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Загрузка

Процедура ПодготовитьСтрокиВыписки(ДокументыКЗагрузке, БанковскийСчет, НомерСчета)
	
	ТипыПлатежныхДокументовПоступления = Новый Соответствие;
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("БАНКОВСКИЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	ТипыПлатежныхДокументовСписания = Новый Соответствие;
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("БАНКОВСКИЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	 
		
	СобственныеСчета = СобственныеСчета(БанковскийСчет);
	
	// Подготовка строк выписки к поиску документов и контрагентов, заполнение общих реквизитов. Первичное распознавание.
	Для каждого СтрокаДокумента Из ДокументыКЗагрузке Цикл
		
		Если Не СтрокаДокумента.Загружать Или
			(Не СтрокаДокумента.ПлательщикСчет = НомерСчета
			И Не СтрокаДокумента.ПолучательСчет = НомерСчета) Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		
		// Входящий или исходящий платеж
		Исходящий = (СтрокаДокумента.ПлательщикСчет = НомерСчета);
		СтрокаДокумента.Исходящий = Исходящий;
		
		// Дата документа
		СтрокаДокумента.ДатаДок = ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаДок) Тогда
			СтрокаДокумента.ДатаДок =
				ПолучитьДатуИзСтроки(?(Исходящий, СтрокаДокумента.ДатаСписано, СтрокаДокумента.ДатаПоступило));
		КонецЕсли;
		
		// Тип платежного документа
		ТипСтрокой = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е");
		Если Исходящий Тогда
			ТипПлатежногоДокумента = ТипыПлатежныхДокументовСписания.Получить(ТипСтрокой);
		Иначе
			ТипПлатежногоДокумента = ТипыПлатежныхДокументовПоступления.Получить(ТипСтрокой);
		КонецЕсли;
		Если ТипПлатежногоДокумента = Неопределено Тогда
			ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
		КонецЕсли;
		СтрокаДокумента.ТипПлатежногоДокумента = ТипПлатежногоДокумента;
		
				
		// Переводы
		Если СтрокаДокумента.Исходящий Тогда
			
			СтруктураПоиска = Новый Структура("НомерСчета, КодБанка", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательМФО);
			
			СобственныеСчетаПолучатели = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
			Если СобственныеСчетаПолучатели.Количество() > 0 Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет;
				СтрокаДокумента.СчетКонтрагента = СобственныеСчетаПолучатели[0].Ссылка;
			КонецЕсли;
		Иначе
			
			СтруктураПоиска = Новый Структура("НомерСчета, КодБанка", СтрокаДокумента.ПлательщикСчет, СтрокаДокумента.ПлательщикМФО);
			
			СобственныеСчетаОтправители = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
			Если СобственныеСчетаОтправители.Количество() > 0 Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета;
				СтрокаДокумента.СчетКонтрагента = СобственныеСчетаОтправители[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		// Инкассация
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			
			БалансовыйСчет = Лев(СтрокаДокумента.ПлательщикСчет, 5);
			Если БалансовыйСчет    = "20202" // поступление/списание наличных из кассы
				Или БалансовыйСчет = "20208" // поступление/списание наличных из банкомата, устройства Cash-in
			Тогда
				Если СтрокаДокумента.Исходящий Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
				Иначе
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Контрагент
		Если Исходящий тогда
			Если СтрокаДокумента.Получатель1 <> "" Тогда
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
		Иначе
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
		КонецЕсли;
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаДокумента.ИмяКонтрагента, 10)) Тогда
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаДокумента.ИмяКонтрагента, 12)) Тогда
				СтрокаДокумента.ИмяКонтрагента = СокрЛП(Сред(СтрокаДокумента.ИмяКонтрагента, 13));
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СокрЛП(Сред(СтрокаДокумента.ИмяКонтрагента, 11));
			КонецЕсли;
		КонецЕсли;
		
		ОКПОДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательОКПО, СтрокаДокумента.ПлательщикОКПО);
		СтрокаДокумента.ПроверятьОКПО = ЗначениеЗаполнено(ОКПОДляПоиска);

		// Назначение платежа
		Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
			Для инд = 2 По 6 Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + инд]) Тогда
					Прервать;
				КонецЕсли;
				СтрокаДокумента.НазначениеПлатежа =
					СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + инд];
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДокумента.ФорматированноеНазначениеПлатежа =
			ДенежныеСредстваСервер.ФорматироватьНазначениеПлатежа(СтрокаДокумента.НазначениеПлатежа);
		
		// Сумма
		Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДокумента.Сумма);
		Если Сумма <> Неопределено Тогда
			Если Сумма < 0 Тогда
				Сумма = - Сумма;
			КонецЕсли;
			СтрокаДокумента.СуммаДокумента = Сумма;
			Если Исходящий Тогда
				СтрокаДокумента.СуммаСписано   = Сумма;
			Иначе
				СтрокаДокумента.СуммаПоступило = Сумма;
			КонецЕсли;
		Иначе
			ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неверная сумма документа (%1)!';uk='Невірна сума документа (%1)!'"), СтрокаДокумента.Сумма));
		КонецЕсли;
		
		// Очередность платежа
		Буфер = СокрЛП(СтрокаДокумента.Очередность);
		Если Буфер <> "" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Буфер) Тогда
			СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
		Иначе
			СтрокаДокумента.ОчередностьПлатежа = 5;
		КонецЕсли;
		
				
		// Дата проведения банком
		Если Исходящий Тогда
			СтрокаДокумента.Списано = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаСписано);
			Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
				СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
			КонецЕсли;
		Иначе
			СтрокаДокумента.Поступило = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаПоступило);
			Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
				СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
			КонецЕсли;
		КонецЕсли;
		
		// Дата отсылки платежного требования
		Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
			СтрокаДокумента.ДатаОтсылки = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылкиДок);
		КонецЕсли;
		
	КонецЦикла;
	
	// Ранее загруженные/введенные вручную документы
	Отбор = Новый Структура("Загружать", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, ДатаДок, Номер, Исходящий, ПолучательСчет, ПлательщикСчет, ТипПлатежногоДокумента,
		|ПолучательОКПО, ПлательщикОКПО,ПроверятьОКПО
		|");
		 
		
	ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	
	 
		
	// Контрагенты, счета контрагентов
	Отбор = Новый Структура("Загружать", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, Исходящий, ИмяКонтрагента, Контрагент,
		|ПолучательСчет, ПлательщикСчет,ПолучательОКПО,ПлательщикОКПО,ПроверятьОКПО");
		 
		
	ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов);
	
	// Партнеры
	Отбор = Новый Структура("Загружать, НайденКонтрагент", Истина, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, Контрагент");
	ЗаполнитьПартнеров(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	
	// Образцы документов для заполнения
	Отбор = Новый Структура("Загружать, НайденДокументВБазе, НайденоОснованиеПлатежа, НайденСчетКонтрагента", Истина, Ложь, Ложь, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ЗаполнитьОбразцы(СтрокиКЗагрузке, БанковскийСчет);
	
	// Заполнение по косвенным данным
	Отбор = Новый Структура("Загружать, НайденДокументВБазе, НайденоОснованиеПлатежа, НайденОбразец, НайденКонтрагент",
		Истина, Ложь, Ложь, Ложь, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, БанковскийСчет);
	
	// Поиск ПКО при инкассации
	Отбор = Новый Структура("Загружать, НайденДокументВБазе, НайденоОснованиеПлатежа, НайденОбразец, ВидОперации",
		Истина, Ложь, Ложь, Ложь, Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, СуммаДокумента, ДатаПроведения");
	ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Истина);
	
	// Поиск РКО при инкассации
	Отбор = Новый Структура("Загружать, НайденДокументВБазе, НайденоОснованиеПлатежа, НайденОбразец, ВидОперации",
		Истина, Ложь, Ложь, Ложь, Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, СуммаДокумента, ДатаПроведения");
	ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Ложь);
	
КонецПроцедуры

Процедура ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		ДокументОбъект = СтрокаДокумента.Документ.ПолучитьОбъект();
		
		СделатьНепроведенным = Ложь;
		
		УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		
		// Контрагент
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
			Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект.ХозяйственнаяОперация,
				РеквизитыВсе,
				РеквизитыХозОперации);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект.ХозяйственнаяОперация,
				Ложь,
				РеквизитыВсе,
				РеквизитыХозОперации);
		КонецЕсли;
		
		Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
			ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
			Иначе
				УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		// Счет контрагента
		Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
			КонецЕсли;
		КонецЕсли;
		
		// Партнер
		Для каждого СтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.Партнер) Тогда
				СтрокаРасшифровки.Партнер = СтрокаДокумента.Партнер;
			КонецЕсли;
		КонецЦикла;
		
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента, Истина);
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки, Истина);
		
		СуммыРазличаются = (СтрокаДокумента.СуммаДокумента <> ДокументОбъект.СуммаДокумента);
		Если СуммыРазличаются Тогда
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа[0];
				СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
			Иначе
				СделатьНепроведенным = Истина;
				ОписаниеОшибки = НСтр("ru='Сумма документа отличается от суммы строк расшифровки платежа.';uk='Сума документа відрізняється від суми рядків розшифровки платежу.'");
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru='#Загружен из Клиент-Банка';uk='#Завантажений з Клієнт-Банку'"));
		
		Если ДокументОбъект.Модифицированность() Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДата(), Истина);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения, Истина);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, ?(СделатьНепроведенным, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписи));
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	Организация = РеквизитыСчета.Организация;
	Префикс     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс");
	Валюта      = РеквизитыСчета.Валюта;
	РазрешитьПлатежиБезУказанияЗаявок = РеквизитыСчета.РазрешитьПлатежиБезУказанияЗаявок;
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Ложь);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			ДокументОбъект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		Иначе
			ДокументОбъект = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		КонецЕсли;
		
		// Общие реквизиты
		ДатаВхДокумента = ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
		 
		
		Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", ДатаВхДокумента);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", СтрокаДокумента.ДатаДок);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер);
		
		УстановитьСвойство(ДокументОбъект, "Организация", Организация);
		УстановитьСвойство(ДокументОбъект, "БанковскийСчет", БанковскийСчет);
		УстановитьСвойство(ДокументОбъект, "Валюта", Валюта);
		
		УстановитьСвойство(ДокументОбъект, "ТипПлатежногоДокумента", СтрокаДокумента.ТипПлатежногоДокумента);
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента);
		
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки);
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru='#Загружен из Клиент-Банка';uk='#Завантажений з Клієнт-Банку'"));
		УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДата());
		
		УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", СтрокаДокумента.ОшибкиЗагрузки);
		
		// Индивидуальное заполнение
		Если СтрокаДокумента.Исходящий Тогда
			ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс);
		Иначе
			ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы);
		КонецЕсли;
		
		УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ДатаДок) Тогда		
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаДок);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", ДокументОбъект.Дата);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаВходящегоДокумента) Тогда
			ДокументОбъект.ДатаВходящегоДокумента = ДокументОбъект.Дата;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументОбъект.НомерВходящегоДокумента) Тогда
			ДокументОбъект.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументОбъект.Номер);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ДокументОбъект.ОшибкиЗагрузки + "
			|" + ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписи);
		
		СтрокаДокумента.Документ = ДокументОбъект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

Процедура СнятьПризнакПроведения(ДокументыКЗагрузке, БанковскийСчет, ЗаголовокВыписки)
	
	// Снимаем признак проведения банком для отсутствующих в выписке документов
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И ДанныеДокумента.ДатаПроведенияБанком МЕЖДУ &ДатаНач И &ДатаКон
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И ДанныеДокумента.ДатаПроведенияБанком МЕЖДУ &ДатаНач И &ДатаКон
	|";
	
	ДатаНачала = "";
	ДатаКонца = "";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПолучитьДатуИзСтроки(ЗаголовокВыписки.ДатаНачала)));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПолучитьДатуИзСтроки(ЗаголовокВыписки.ДатаКонца)));
	 
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКЗагрузке.НайтиСтроки(Новый Структура("Документ", Выборка.Ссылка));
		Если СтрокаВТаблицеИмпорта.Количество() = 0 Тогда
			
			Попытка
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ПроведеноБанком = Ложь;
				ДокументОбъект.ДатаПроведенияБанком = Неопределено;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
			Исключение
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ %1 не записан. Произошли ошибки при записи!';uk='Документ %1 не записаний. Відбулися помилки при запису!'"),
					ДокументОбъект);
			
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
				
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СобственныеСчета(БанковскийСчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Код КАК КодБанка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		БанковскиеСчетаОрганизаций.Владелец = БанковскиеСчета.Владелец
	|		И БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчет
	|	
	|ГДЕ
	|	БанковскиеСчета.Ссылка <> &БанковскийСчет
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ДатаДок,
	|	ТаблицаДокументов.Номер,
	|	ТаблицаДокументов.Исходящий,
	|	ТаблицаДокументов.ТипПлатежногоДокумента,
	|	ТаблицаДокументов.ПолучательСчет,
	|	ТаблицаДокументов.ПлательщикСчет,
	|	ТаблицаДокументов.ПлательщикОКПО,
	|	ТаблицаДокументов.ПолучательОКПО,
	|	ТаблицаДокументов.ПроверятьОКПО
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		
	|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|		И ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.Номер
	|		И ДанныеДокумента.ТипПлатежногоДокумента = ТаблицаДокументов.ТипПлатежногоДокумента
	|	
	|		И (ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета = ТаблицаДокументов.ПолучательСчет
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета = ТаблицаДокументов.ПолучательСчет
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета, """") = """")
	|			ИЛИ ТаблицаДокументов.ПолучательСчет = """"
	|			)
	|	
	|		И (НЕ ТаблицаДокументов.ПроверятьОКПО
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КодПоЕДРПОУ, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КодПоЕДРПОУ, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КодПоЕДРПОУ = ТаблицаДокументов.ПолучательОКПО
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КодПоЕДРПОУ = ТаблицаДокументов.ПолучательОКПО)
 	|		
	|ГДЕ
	|	ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		
	|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|		И ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.Номер
	|		И ДанныеДокумента.ТипПлатежногоДокумента = ТаблицаДокументов.ТипПлатежногоДокумента
	|	
	|		И (ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета = ТаблицаДокументов.ПлательщикСчет
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета = ТаблицаДокументов.ПлательщикСчет
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета, """") = """")
	|			ИЛИ ТаблицаДокументов.ПлательщикСчет = """"
	|			)
	|		И (НЕ ТаблицаДокументов.ПроверятьОКПО
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КодПоЕДРПОУ, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КодПоЕДРПОУ, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КодПоЕДРПОУ = ТаблицаДокументов.ПлательщикОКПО
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КодПоЕДРПОУ = ТаблицаДокументов.ПлательщикОКПО)
	|	
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			// Если документ найден, создавать новый не будем. Если найдено несколько документов, то обновлять данные документа не нужно.
			Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
				СтрокаДокумента.Загружать = Ложь;
			КонецЕсли;
			СтрокаДокумента.Документ = Выборка.Ссылка;
			СтрокаДокумента.НайденДокументВБазе = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ИмяКонтрагента КАК Наименование,
	|	ТаблицаДокументов.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательСчет
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикСчет
	|	КОНЕЦ КАК НомерСчета,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательОКПО
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикОКПО
	|	КОНЕЦ КАК ОКПО,

	|	ТаблицаДокументов.ПроверятьОКПО
 	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	0 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.КодПоЕДРПОУ = ТаблицаДокументов.ОКПО
	|		И ТаблицаДокументов.ПроверятьОКПО
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Контрагент уже найден, ищем счет
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	5 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ПО
	|		Контрагенты.Ссылка = ТаблицаДокументов.Контрагент
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец = Контрагенты.Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	10 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.КодПоЕДРПОУ = ТаблицаДокументов.ОКПО
 	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	20 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.КодПоЕДРПОУ = ТаблицаДокументов.ОКПО
	|		И ТаблицаДокументов.ПроверятьОКПО
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	30 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.Наименование
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	40 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.КодПоЕДРПОУ = ТаблицаДокументов.ОКПО
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	50 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.КодПоЕДРПОУ = ТаблицаДокументов.ОКПО
	|		И ТаблицаДокументов.ПроверятьОКПО
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	60 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НаименованиеПолное = ТаблицаДокументов.Наименование
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	70 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ФизическиеЛица КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Наименование = ТаблицаДокументов.Наименование
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			НайденоКонтрагентов = 0;
			ТекущийПриоритет = 99;
			
			Пока Выборка.Следующий() Цикл
				Если ТекущийПриоритет < Выборка.Приоритет Тогда
					Прервать;
				КонецЕсли;
				
				ТекущийПриоритет = Выборка.Приоритет;
				НайденоКонтрагентов = НайденоКонтрагентов + 1;
				
				Если НайденоКонтрагентов = 1 Тогда
					
					СтрокаДокумента.Контрагент = Выборка.Контрагент;
					СтрокаДокумента.НайденКонтрагент = Истина;
					
					Если ЗначениеЗаполнено(Выборка.СчетКонтрагента) Тогда
						СтрокаДокумента.СчетКонтрагента = Выборка.СчетКонтрагента;
						СтрокаДокумента.НайденСчетКонтрагента = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Если найдены дубли с одинаковым приоритетом, то контрагент останется пустым и новый создаваться не будет.
			Если НайденоКонтрагентов > 1 Тогда
				
				СтрокаДокумента.Контрагент = Неопределено;
				СтрокаДокумента.СчетКонтрагента = Неопределено;
				СтрокаДокумента.СоздаватьКонтрагента = Ложь;
				СтрокаДокумента.НайденКонтрагент = Ложь;
				СтрокаДокумента.НайденСчетКонтрагента = Ложь;
				
				// Записать замечание
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартнеров(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	Организация = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Организация;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.Контрагент КАК Контрагент
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ВЫБОР КОГДА ДанныеСправочника.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		ДанныеСправочника.Партнер
	|	КОГДА НЕ АналитикаУчетаПоПартнерам.Партнер ЕСТЬ NULL ТОГДА
	|		АналитикаУчетаПоПартнерам.Партнер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НеизвестныйПартнер)
	|	КОНЕЦ КАК Партнер
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Ссылка = ТаблицаДокументов.Контрагент
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|		ПО
	|			АналитикаУчетаПоПартнерам.Контрагент = ДанныеСправочника.Ссылка
	|			И АналитикаУчетаПоПартнерам.Организация = &Организация
	|			И АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.Партнер = Выборка.Партнер;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбразцы(СтрокиКЗагрузке, БанковскийСчет)
	
	РеквизитыХозОперацийПоступления = РеквизитыХозОперацийПоступления();
	РеквизитыХозОперацийСписания = РеквизитыХозОперацийСписания();
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаВходящие = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТабЧасть.СтатьяДвиженияДенежныхСредств КАК РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.КассаОтправитель КАК КассаОтправитель,
	|	ТабЧасть.Подразделение КАК РасшифровкаПлатежаПодразделение,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов,
	|	ДанныеДокумента.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ТабЧасть.СтатьяДоходов КАК РасшифровкаПлатежаСтатьяДоходов,
	|	ТабЧасть.АналитикаДоходов КАК РасшифровкаПлатежаАналитикаДоходов
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
	|	ПО
	|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|	
	|// Условие
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|";
	
	ТекстЗапросаИсходящие = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТабЧасть.СтатьяДвиженияДенежныхСредств КАК РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.КассаПолучатель КАК КассаПолучатель,
	|	ТабЧасть.Подразделение КАК РасшифровкаПлатежаПодразделение,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов,
	|	ДанныеДокумента.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ТабЧасть.СтатьяРасходов КАК РасшифровкаПлатежаСтатьяРасходов,
	|	ТабЧасть.АналитикаРасходов КАК РасшифровкаПлатежаАналитикаРасходов
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
	|	ПО
	|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|	
	|// Условие
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	// Шаг 1. Поиск по счету отправителя, получателя, назначению платежа
	УсловиеИсходящие = "
	|ГДЕ
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &СчетКонтрагента)
	|	И ДанныеДокумента.ФорматированноеНазначениеПлатежа = &ФорматированноеНазначениеПлатежа
	|	И ДанныеДокумента.Проведен
	|";

	УсловиеВходящие = "
	|ГДЕ
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &СчетКонтрагента)
	|	И ДанныеДокумента.ФорматированноеНазначениеПлатежа = &ФорматированноеНазначениеПлатежа
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг2 = Новый Массив;
	Для каждого СтрокаДокумента из СтрокиКЗагрузке Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Условие", ТекстУсловия);
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		Запрос.УстановитьПараметр("ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				Если ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия) Тогда
					
					СтрокаДокумента.НайденОбразец = Истина;
					СтрокаДокумента.Образец = Выборка.Ссылка;
					СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
					
					Для каждого Реквизит Из НаборРеквизитов Цикл
						Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
							ИмяРеквизита = Сред(Реквизит.Ключ, 19);
						Иначе
							ИмяРеквизита = Реквизит.Ключ;
						КонецЕсли;
						СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиПоискаШаг2.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиПоискаШаг2.Количество() Тогда
		Возврат;
	КонецЕСли;
	
	// Шаг 2. Поиск по счету отправителя, получателя, без учета назначения платежа
	УсловиеИсходящие = "
	|ГДЕ
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &СчетКонтрагента)
	|	И ДанныеДокумента.Проведен
	|";

	УсловиеВходящие = "
	|ГДЕ
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &СчетКонтрагента)
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг3 = Новый Массив;
	Для каждого СтрокаДокумента из СтрокиПоискаШаг2 Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Условие", ТекстУсловия);
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				Если ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия) Тогда
					
					СтрокаДокумента.НайденОбразец = Истина;
					СтрокаДокумента.Образец = Выборка.Ссылка;
					СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
					
					Для каждого Реквизит Из НаборРеквизитов Цикл
						Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
							ИмяРеквизита = Сред(Реквизит.Ключ, 19);
						Иначе
							ИмяРеквизита = Реквизит.Ключ;
						КонецЕсли;
						СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиПоискаШаг3.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиПоискаШаг3.Количество() Тогда
		Возврат;
	КонецЕСли;
	
	// Шаг 3. Зеркальный платеж
	УсловиеИсходящие = "
	|ГДЕ
	|	ДанныеДокумента.БанковскийСчет = &СчетКонтрагента
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &БанковскийСчет
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &БанковскийСчет)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	)
	|	И ДанныеДокумента.Проведен
	|";
	
	УсловиеВходящие = "
	|ГДЕ
	|	ДанныеДокумента.БанковскийСчет = &СчетКонтрагента
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &БанковскийСчет
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &БанковскийСчет)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	)
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг3 = Новый Массив;
	Для каждого СтрокаДокумента из СтрокиПоискаШаг3 Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
			КонецЕсли;
			
			СтрокаДокумента.НайденОбразец = Истина;
			СтрокаДокумента.Образец = Выборка.Ссылка;
			
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
			ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации;
			ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхДокументовПодотчетнику Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника;
			КонецЕсли;
			
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
			ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию;
			КонецЕсли;
			
			Для каждого Реквизит Из НаборРеквизитов Цикл
				Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
					ИмяРеквизита = Сред(Реквизит.Ключ, 19);
				Иначе
					ИмяРеквизита = Реквизит.Ключ;
				КонецЕсли;
				СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия)
	
	Запрос = Новый Запрос;
	
	Если СтрокаДокумента.Исходящий Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
		|	ПО
		|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
		|
		|// Условие
		|	
		|";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
		|	ПО
		|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
		|
		|// Условие
		|	
		|";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("БанковскийСчет", СтрокаДокумента.БанковскийСчет);
	Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
	Если Запрос.НайтиПараметры().Найти("ФорматированноеНазначениеПлатежа") <> Неопределено Тогда
		Запрос.УстановитьПараметр("ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Дата > &ПериодПроверки";
	Запрос.УстановитьПараметр("ПериодПроверки", ТекущаяДата() - 60 * 60 * 24 * 90); // Проверяются документы за последние 3 месяца
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Запрос.Текст = Запрос.Текст + " И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация И (ИСТИНА";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
	Иначе
		Запрос.Текст = Запрос.Текст + " И (ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Выборка.ХозяйственнаяОперация);
	КонецЕсли;
	
	СтрокаУсловия = "";
	Если НаборРеквизитов <> Неопределено Тогда
		Для каждого Реквизит Из НаборРеквизитов Цикл
			
			Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
				ИмяРеквизита = Сред(Реквизит.Ключ, 19);
				СтрокаУсловия = " ИЛИ ТабЧасть.ИмяРеквизита <> &ИмяРеквизита";
			Иначе
				ИмяРеквизита = Реквизит.Ключ;
				СтрокаУсловия = " ИЛИ ДанныеДокумента.ИмяРеквизита <> &ИмяРеквизита";
			КонецЕсли;
			
			СтрокаУсловия = СтрЗаменить(СтрокаУсловия, "ИмяРеквизита", ИмяРеквизита);
			Запрос.Текст = Запрос.Текст + СтрокаУсловия;
			Запрос.УстановитьПараметр(ИмяРеквизита, Реквизит.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ")";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Процедура ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, БанковскийСчет)
	
	Для каждого СтрокаДокумента из СтрокиКЗагрузке Цикл
		
		Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда // Собственная организация
			Если СтрокаДокумента.Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;
			Иначе
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Договор кредита/депозита
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеДоговора.Ссылка КАК Ссылка,
		|	ДанныеДоговора.ХарактерДоговора КАК ХарактерДоговора,
		|	ДанныеДоговора.СтатьяДДСПоступленияВыдачи КАК СтатьяДДСПоступленияВыдачи,
		|	ДанныеДоговора.СтатьяДДСОсновногоДолга КАК СтатьяДДСОсновногоДолга
		|
		|ИЗ
		|	Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
		|
		|ГДЕ
		|	ДанныеДоговора.БанковскийСчет = &БанковскийСчет
		|	И ДанныеДоговора.Контрагент = &Контрагент
		|	И ДанныеДоговора.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
		|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|";
		
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			СтрокаДокумента.ДоговорКредитаДепозита = Выборка.Ссылка;
			СтрокаДокумента.ВидОперации = Справочники.ДоговорыКредитовИДепозитов.ОперацияПоХарактеруДоговора(
				Выборка.ХарактерДоговора,
				Не СтрокаДокумента.Исходящий);
				
			Если Выборка.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
					?(Не СтрокаДокумента.Исходящий, Выборка.СтатьяДДСПоступленияВыдачи, Выборка.СтатьяДДСОсновногоДолга);
			Иначе
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
					?(Не СтрокаДокумента.Исходящий, Выборка.СтатьяДДСОсновногоДолга, Выборка.СтатьяДДСПоступленияВыдачи);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Договор с контрагентом
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеДоговора.Ссылка КАК Ссылка,
		|	ДанныеДоговора.ТипДоговора КАК ТипДоговора,
		|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|
		|ГДЕ
		|	ДанныеДоговора.БанковскийСчет = &БанковскийСчет
		|	И ДанныеДоговора.Контрагент = &Контрагент
		|	И ДанныеДоговора.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
		|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|";
		
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			СтрокаДокумента.ОбъектРасчетов = Выборка.Ссылка;
			СтрокаДокумента.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
			
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Исходящие)
	
	Если Не ТаблицаДокументов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ДатаПроведения,
	|	ТаблицаДокументов.СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Если Исходящие Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаДокументов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
		|		И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ТаблицаДокументов.ДатаПроведения
		|		И ДанныеДокумента.СуммаДокумента = ТаблицаДокументов.СуммаДокумента
		|		И ДанныеДокумента.Проведен
		|ГДЕ
		|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
		|";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаДокументов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк)
		|		И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ТаблицаДокументов.ДатаПроведения
		|		И ДанныеДокумента.СуммаДокумента = ТаблицаДокументов.СуммаДокумента
		|		И ДанныеДокумента.Проведен
		|ГДЕ
		|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.КассовыйДокумент = Выборка.Ссылка;
			СтрокаДокумента.Загружать = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
		УстановитьСвойство(ДокументОбъект, "Дата", СтрокаДокумента.Списано);
	Иначе
		УстановитьСвойство(ДокументОбъект, "Дата", СтрокаДокумента.ДатаДок);
	КонецЕсли;
	
	// Контроль заявок
	Если ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер
	Тогда
		ДокументОбъект.НеКонтролироватьЗаполнениеЗаявки = Истина;
	КонецЕсли;
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		Ложь,
		РеквизитыВсе,
		РеквизитыХозОперации);
	
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕслИ;
	КонецЕслИ;
	
	// Банковский счет получатель
	Если РеквизитыХозОперации.Найти("БанковскийСчетПолучатель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетПолучатель", СтрокаДокумента.СчетКонтрагента);
	КонецЕслИ;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, СтатьяАктивовПассивов, АналитикаАктивовПассивов, Подразделение, КассаПолучатель");
		
	УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", СтрокаДокумента.ОчередностьПлатежа);
	
	 
	
	
	// Расшифровка платежа
	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа.Заказ") = Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита, СтатьяРасходов, АналитикаРасходов, Подразделение");
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
		
		Иначе
			
			Реквизиты = Новый Структура("Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация",
				ДокументОбъект.Дата, ДокументОбъект.Организация, 0, ДокументОбъект.Валюта, ДокументОбъект.Контрагент, СтрокаДокумента.Партнер, ДокументОбъект.ХозяйственнаяОперация);
				
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			
			ТаблицаОстатковРасчетов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
		
			ТаблицаОстатковРасчетов.Колонки.Добавить("ОснованиеПлатежа");
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ОтборПоОрганизацииИКонтрагенту", Истина);
			ПараметрыОтбора.Вставить("ВводПоСтроке", Ложь);
			ПараметрыОтбора.Вставить("ИсключитьРедактируемыйДокумент", Ложь);
			ПараметрыОтбора.Вставить("ЗапретитьДоговорыПоДокументам", Ложь);
			ПараметрыОтбора.Вставить("ИсключитьХозяйственнуюОперацию", Ложь);
			
			ТекстЗапроса = ВзаиморасчетыСервер.ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками(ПараметрыОтбора);
			ЗапросДокументов = Новый Запрос;
			ЗапросДокументов.Текст = ТекстЗапроса;
			ЗапросДокументов.УстановитьПараметр("Дата", ДокументОбъект.Дата);
			ЗапросДокументов.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			ЗапросДокументов.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			ЗапросДокументов.УстановитьПараметр("Партнер", СтрокаДокумента.Партнер);
			ЗапросДокументов.УстановитьПараметр("ВыборОснованияПлатежа", Истина);
			
			ПараметрыЗапроса = ЗапросДокументов.НайтиПараметры();
			Если ПараметрыЗапроса.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
				ЗапросДокументов.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", СтрокаДокумента.СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			
			ТаблицаДокументов = ЗапросДокументов.Выполнить().Выгрузить();
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
			
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Заказ)) Тогда
					
					СтрокаТаблицыДокументов = ТаблицаДокументов.Найти(СтрокаТаблицы.Заказ, "Ссылка");
					
					Если НЕ СтрокаТаблицыДокументов = Неопределено Тогда
						СтрокаТаблицы.ОснованиеПлатежа = СтрокаТаблицыДокументов.ОбъектРасчетов;
					КонецЕсли;
					
					Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Заказ))
						И СтрокаТаблицы.ОснованиеПлатежа <> Неопределено Тогда
						
						НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТаблицы.ОснованиеПлатежа.Номер, Истина, Истина);
						Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
							
							СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
							
							СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
							РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
							
							ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы, , "Сумма");
							СтрокаРасшифровки.Сумма = СуммаСтроки;
							
							СтрокаТаблицы.Обработано = Истина;
							
							Если РаспределяемаяСумма <= 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы, , "Сумма");
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				Если РаспределяемаяСумма > 0 Тогда
					СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
					СтрокаРасшифровки.Партнер = СтрокаДокумента.Партнер;
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтрокаДокумента.СтатьяДвиженияДенежныхСредств;
					СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
				
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента, "Партнер, СтатьяДвиженияДенежныхСредств");
				СтрокаРасшифровки.Заказ = СтрокаДокумента.ОбъектРасчетов;
				СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Номер документа
	Если ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		
		ДокументОбъект.УстановитьНовыйНомер();
		УстанавливаемыйНомер = "";
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаДокумента.Номер) Тогда
			
			ОкончаниеНомера = Формат(Число(СокрЛП(СтрокаДокумента.Номер)), "ЧН=; ЧГ=0");
			ДлинаНомера     = СтрДлина(СокрЛП(ДокументОбъект.Номер));
			
			НомерПозиции = СтрНайти(ДокументОбъект.Номер, "-");
			
			Если НомерПозиции > 0 Тогда
				ДлинаОкончанияНомера = ДлинаНомера - (НомерПозиции + 1);
			Иначе
				ДлинаОкончанияНомера = ДлинаНомера - СтрДлина(Префикс);
			КонецЕсли;
			
			Если СтрДлина(ОкончаниеНомера) < ДлинаОкончанияНомера Тогда
				Если НомерПозиции > 0 Тогда
					УстанавливаемыйНомер = Лев(ДокументОбъект.Номер, НомерПозиции + 1)
						+ Формат(Число(ОкончаниеНомера), "ЧЦ=" 
						+ Строка(ДлинаОкончанияНомера) + "; ЧВН=; ЧГ=0");
				Иначе
					УстанавливаемыйНомер = Префикс + Формат(Число(ОкончаниеНомера), "ЧЦ=" 
					+ Строка(ДлинаОкончанияНомера) + "; ЧВН=; ЧГ=0");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗапросПоискаДокумента = Новый Запрос;
		
		ЗапросПоискаДокумента.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(СписаниеБезналичныхДенежныхСредств.Дата, ГОД) = &ДатаДок
		|	И СписаниеБезналичныхДенежныхСредств.Номер = &Номер
		|	И СписаниеБезналичныхДенежныхСредств.Организация = &Организация
		|";
	
		ЗапросПоискаДокумента.УстановитьПараметр("Номер", УстанавливаемыйНомер);
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", НачалоГода(ДокументОбъект.Дата));
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		
		Результат = ЗапросПоискаДокумента.Выполнить();
		Если Результат.Пустой() Тогда
			ДокументОбъект.Номер = УстанавливаемыйНомер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
		УстановитьСвойство(ДокументОбъект, "Дата", СтрокаДокумента.Поступило);
	Иначе
		УстановитьСвойство(ДокументОбъект, "Дата", СтрокаДокумента.ДатаДок);
	КонецЕсли;
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		РеквизитыВсе,
		РеквизитыХозОперации);
		
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕслИ;
	КонецЕсли;
	
	// Банковский счет отправитель
	Если РеквизитыХозОперации.Найти("БанковскийСчетОтправитель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетОтправитель", СтрокаДокумента.СчетКонтрагента);
	КонецЕсли;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, СтатьяАктивовПассивов, АналитикаАктивовПассивов, Подразделение, КассаОтправитель");
	
	// Расшифровка платежа
	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		//
		//ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.Заказ") = Неопределено Тогда // Прочие платежи
		Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа.Заказ") = Неопределено Тогда // Прочие платежи
		 	
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита, СтатьяДоходов, АналитикаДоходов, Подразделение");
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
		
		Иначе
			
			Реквизиты = Новый Структура("Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация",
			ДокументОбъект.Дата, ДокументОбъект.Организация, 0, ДокументОбъект.Валюта, ДокументОбъект.Контрагент, СтрокаДокумента.Партнер, ДокументОбъект.ХозяйственнаяОперация);
			
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			
			ТаблицаОстатковРасчетов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			ТаблицаОстатковРасчетов.Колонки.Добавить("ОснованиеПлатежа");
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ОтборПоОрганизацииИКонтрагенту", Истина);
			ПараметрыОтбора.Вставить("ВводПоСтроке", Ложь);
			ПараметрыОтбора.Вставить("ИсключитьРедактируемыйДокумент", Ложь);
			ПараметрыОтбора.Вставить("ЗапретитьДоговорыПоДокументам", Ложь);
			
			ТекстЗапроса = ВзаиморасчетыСервер.ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(Истина, ПараметрыОтбора);
			ЗапросДокументов = Новый Запрос;
			ЗапросДокументов.Текст = ТекстЗапроса;
			ЗапросДокументов.УстановитьПараметр("Дата", ДокументОбъект.Дата);
			ЗапросДокументов.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			ЗапросДокументов.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			ЗапросДокументов.УстановитьПараметр("Партнер", СтрокаДокумента.Партнер);
			ЗапросДокументов.УстановитьПараметр("ВыборОснованияПлатежа", Истина);
			
			ПараметрыЗапроса = ЗапросДокументов.НайтиПараметры();
			Если ПараметрыЗапроса.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
				ЗапросДокументов.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", СтрокаДокумента.СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			
			ТаблицаДокументов = ЗапросДокументов.Выполнить().Выгрузить();
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
			
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Заказ)) Тогда
					
					СтрокаТаблицыДокументов = ТаблицаДокументов.Найти(СтрокаТаблицы.Заказ, "Ссылка");
					
					Если НЕ СтрокаТаблицыДокументов = Неопределено Тогда
						СтрокаТаблицы.ОснованиеПлатежа = СтрокаТаблицыДокументов.ОбъектРасчетов;
					КонецЕсли;
					
					Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Заказ))
						И СтрокаТаблицы.ОснованиеПлатежа <> Неопределено Тогда
						
						НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТаблицы.ОснованиеПлатежа.Номер, Истина, Истина);
						Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
							
							СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
							
							СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
							РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
							
							ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы, , "Сумма");
							СтрокаРасшифровки.Сумма = СуммаСтроки;
							
							СтрокаТаблицы.Обработано = Истина;
							
							Если РаспределяемаяСумма <= 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы, , "Сумма");
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				Если РаспределяемаяСумма > 0 Тогда
					СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
					СтрокаРасшифровки.Партнер = СтрокаДокумента.Партнер;
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтрокаДокумента.СтатьяДвиженияДенежныхСредств;
					СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
				
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента, "Партнер, СтатьяДвиженияДенежныхСредств");
				СтрокаРасшифровки.Заказ = СтрокаДокумента.ОбъектРасчетов;
				СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыХозОперацийСписания()
	
	РеквизитыХозОпераций = Новый Соответствие;
	
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику,
		Новый Структура("ПодотчетноеЛицо, Подразделение, СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,
		Новый Структура("СтатьяДвиженияДенежныхСредств, Подразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,
		Новый Структура("СтатьяДвиженияДенежныхСредств, Подразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка,
		Новый Структура("КассаПолучатель"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяРасходов, РасшифровкаПлатежаАналитикаРасходов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяРасходов, РасшифровкаПлатежаАналитикаРасходов, РасшифровкаПлатежаАналитикаАктивовПассивов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	
	Возврат РеквизитыХозОпераций;
	
КонецФункции

Функция РеквизитыХозОперацийПоступления()
	
	РеквизитыХозОпераций = Новый Соответствие;
	
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк,
		Новый Структура("Касса"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочиеДоходы,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяДоходов, РасшифровкаПлатежаАналитикаДоходов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяДоходов, РасшифровкаПлатежаАналитикаДоходов, РасшифровкаПлатежаАналитикаАктивовПассивов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС,
		Новый Структура(""));
	
	Возврат РеквизитыХозОпераций;
	
КонецФункции

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь)
	
	Если ЗначениеСвойства <> Неопределено И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если (Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Или ОбязательнаяЗаменаСтарогоЗначения)
			Или ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
			Или ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗамечание(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		Шаблон = НСтр("ru='%1%2%3';uk='%1%2%3'");
		Буфер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Буфер,
			?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
			НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, РежимЗаписи)
	
	ТипДокумента = ТипЗнч(ОбъектДляЗаписи);
	
	ЭтоНовыйДокумент    = ОбъектДляЗаписи.ЭтоНовый();
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен      = ОбъектДляЗаписи.Проведен;
	Проводить = (РежимЗаписи = РежимЗаписиДокумента.Проведение Или ОбъектПроведен И РежимЗаписи = РежимЗаписиДокумента.Запись);
	
	ВершинаСтека = Неопределено;
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			
			НазваниеОбъекта = Строка(ОбъектДляЗаписи);
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1%2. Произошли ошибки при записи документа!';uk='%1%2. Відбулися помилки при записі документа!'"),
				Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
				?(ЭтоНовыйДокумент, НСтр("ru=' не создан';uk=' не створений'"), НСтр("ru=' не записан';uk=' не записаний'")));
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru='%1
                |%2'
                |;uk='%1
                |%2'");
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Данные. Изменение';uk='Дані. Зміна'"),
				УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(),
				?(ЭтоНовыйДокумент, "", ОбъектДляЗаписи.Ссылка),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ОписаниеОшибки.Описание,
					?(ЭтоНовыйДокумент, ТекстСообщения, НСтр("ru='Произошли ошибки при записи документа!';uk='Відбулися помилки при записі документа!'"))));
			
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НазваниеОбъекта = Строка(ОбъектДляЗаписи);
	
	Если Проводить И (ОбъектМодифицирован Или НЕ ОбъектПроведен) Тогда
		
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru='%1
                |Произошли ошибки при проведении!'
                |;uk='%1
                |Відбулися помилки при проведенні!'");
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Данные. Проведение';uk='Дані. Проведення'"),
				УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(), ОбъектДляЗаписи.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				ОписаниеОшибки.Описание));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


// Функция формирует структуру экспорта.
//
Функция СформироватьСтруктуруЭкспорта()
	
	СтруктураЭкспорта = Новый Структура;
	
	СтруктураЭкспорта.Вставить("Выгружать",              ""); // "_"
	СтруктураЭкспорта.Вставить("Готовность",             ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить("ВидДокумента"            "");  // "Вид документа",                      
	
	СтруктураЭкспорта.Вставить("НомерДок",               ""); // "№ Документа"
	СтруктураЭкспорта.Вставить("Номер",                  ""); // "Номер"
	СтруктураЭкспорта.Вставить("Дата",                   ""); // "Дата"
	
	СтруктураЭкспорта.Вставить("ДокументИД"              "");  // "№ Документа (ИД)",                      
	
	СтруктураЭкспорта.Вставить("Операция",               ""); // "Операция"
	СтруктураЭкспорта.Вставить("СчетОрганизации",        ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить("НомерСчетаОрганизации",  ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить("Сумма",                  ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить("КодВалюты",              "");  // "Валюта платежа",                     
	
	СтруктураЭкспорта.Вставить("Контрагент",             ""); // "Контрагент"
	СтруктураЭкспорта.Вставить("СчетКонтрагента",        ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить("НомерСчетаКонтрагента",  ""); // "Эл. Р/с контрагента"
	
	
	СтруктураЭкспорта.Вставить("ПлательщикСчет",         ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик",             ""); // "Плательщик"
	СтруктураЭкспорта.Вставить("ПлательщикОКПО",         "");  // "ОКПО (ЕДРПОУ) плательщика",            
	СтруктураЭкспорта.Вставить("ПлательщикБанк",         "");  // "Банк плательщика",       
	СтруктураЭкспорта.Вставить("ПлательщикМФО",          ""); // "МФО банка плательщика",  
	
	СтруктураЭкспорта.Вставить("ПолучательСчет",         ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель",             ""); // "Получатель"
	СтруктураЭкспорта.Вставить("ПолучательОКПО",         "");  // "ОКПО (ЕДРПОУ) получателя",             
	СтруктураЭкспорта.Вставить("ПолучательБанк",         "");  // "Банк получателя",        
	СтруктураЭкспорта.Вставить("ПолучательМФО",          ""); // "МФО банка получателя",   
	
	
	
	СтруктураЭкспорта.Вставить("НазначениеПлатежа",      ""); // "Назначение платежа"
	
	СтруктураЭкспорта.Вставить("Документ",               ""); // "Источник"
	СтруктураЭкспорта.Вставить("СекцияДокумент",         ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить("ОписаниеОшибок",         ""); // "Замечания"
	СтруктураЭкспорта.Вставить("ТипДокумента",           ""); // "Тип пл. документа"
	
	Возврат СтруктураЭкспорта;
	
КонецФункции // СформироватьСтруктуруЭкспорта

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЗапись


// Функция загружает секцию документа.
//
Функция ЗагрузитьСекциюДокументаXML(ТегиСтрокиДокумента, ФайлXML,СтрокиВыпискиБуфер)	
	
	ВидДокумента = ФайлXML.ПолучитьАтрибут("Вид");
	
	МассивСтрокДокумента = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокиВыпискиБуфер, Символы.ПС);		
	
	Если ВидДокумента <> Неопределено Тогда
		ТегиСтрокиДокумента.Операция = ВидДокумента;
		
	Иначе // по умолчанию: "Платежное поручение"	
		
		ВидДокумента = "ПлатежноеПоручение";
		
		ТегиСтрокиДокумента.Операция = ВидДокумента;
		
	КонецЕсли;	
	
	Пока ФайлXML.Прочитать() Цикл
		
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя)); 
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ФайлXML.Прочитать();	
			Значение = ФайлXML.Значение;
		КонецЕсли;	
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ФайлXML.Прочитать();	
		КонецЕсли;	
		
		Если ИмяТега = "ВИДДОКУМЕНТА" Тогда
			Если ТегиСтрокиДокумента.Операция <> Значение Тогда
				ТегиСтрокиДокумента.Операция = Значение;
				
			КонецЕсли;	
			
			Продолжить;
		КонецЕсли;
		
		Если ИмяТега="СЕКЦИЯДОКУМЕНТ" Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если ТегиСтрокиДокумента.Свойство(ИмяТега) = Истина Тогда
			
			ТегиСтрокиДокумента[ИмяТега] = Значение;
			
			Стр1 = "<"+ИмяТега+">";
			Стр2 = "</"+ИмяТега+">";
			
			Для Индекс = 0 по МассивСтрокДокумента.ВГраница() Цикл
				
				Текст = МассивСтрокДокумента[Индекс];
					Если СтрНачинаетсяС(ВРЕГ(СокрЛП(Текст)),Стр1) И СтрЗаканчиваетсяНа(ВРЕГ(СокрЛП(Текст)),Стр2) Тогда
						
						Позиция1 = СтрНайти(ВРЕГ(Текст),Стр1,,,);
						Позиция2 = СтрНайти(ВРЕГ(Текст),Стр2,,,);
						
						СимволыДоТега = Сред(Текст,1,Позиция1 - 1);
						НачалоТега 	 = Сред(Текст,Позиция1, СтрДлина(Стр1));
						ЗакрытиеТега = Сред(Текст,Позиция2, СтрДлина(Стр2));
						
						МассивСтрокДокумента[Индекс] = СимволыДоТега + НачалоТега + Значение + ЗакрытиеТега;
						
					КонецЕсли; 
			КонецЦикла;
			
			СтрокиВыписки = "";
			
			Для Индекс = 0 по МассивСтрокДокумента.ВГраница() Цикл
				СтрокиВыписки = СтрокиВыписки + МассивСтрокДокумента[Индекс] + Символы.ПС;
			КонецЦикла;
			
						
			Если НЕ ПустаяСтрока(СтрокиВыписки)  Тогда
				ТегиСтрокиДокумента["ДанныеВыписки"] = СтрокиВыписки; 
			КонецЕсли; 
			
		Иначе
						
			Возврат Ложь;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "КонецЦикла";
	Сообщение.Сообщить();
	
	//НоваяСтрокаДокументов.СостояниеДокумента = 3;
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьСекциюДокумента

// Функция загружает секцию расчетного счета.
//
Функция ЗагрузитьСекциюРасчСчетаXML(ТегиСтрокиРССчет, ФайлXML)
	
	
	Пока ФайлXML.Прочитать() Цикл
		
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя)); 
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ФайлXML.Прочитать();	
			Значение = ФайлXML.Значение;
		КонецЕсли;	
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ФайлXML.Прочитать();	
		КонецЕсли;	
		
		Если ИмяТега="СЕКЦИЯРАСЧСЧЕТ" Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если ТегиСтрокиРССчет.Свойство(ИмяТега) Тогда
			
			ТегиСтрокиРССчет[ИмяТега] = СокрЛП(Значение);
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неверный реквизит в секции описания банковского счета: %1!';uk='Невірний реквізит у секції опису банківського рахунку: %1!'"), ИмяТега);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	////Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
	////	Возврат Истина;
	////Иначе
	////	Возврат Ложь;
	////КонецЕсли;
	
КонецФункции

// Функция загружает заголовок файла обмена.
//
Функция ЗагрузитьСтрокуЗаголовкаXML(Тег, Значение, Импорт_Заголовок)
	
	Если ТипЗнч(Импорт_Заголовок) = Тип("Неопределено") Тогда
		Импорт_Заголовок = Новый Структура(
			ВРЕГ("ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца"));
	КонецЕсли;
	
	Если Импорт_Заголовок.Свойство(Тег) Тогда
		
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неверный реквизит заголовка: %1!';uk='Невірний реквізит заголовку: %1!'"), Тег);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);;
		
	КонецЕсли;
	
КонецФункции


// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт 

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);

	Возврат ЗаписьXML;

КонецФункции // СоздатьУзел()

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт

	СтрокаЗаписи = XMLСтрока(Значение);
	
	Узел.ЗаписатьАтрибут(Имя, СтрокаЗаписи);
	
КонецПроцедуры // УстановитьАтрибут()

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	Объект.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	Объект.ЗаписатьТекст(Стр);
	Объект.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // одЗаписатьЭлемент() 

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	Если ТипЗнч(Узел) <> Тип("Строка") Тогда
		Узел.ЗаписатьКонецЭлемента();
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	УзелРодитель.ЗаписатьБезОбработки(ИнформацияДляЗаписиВФайл);
		
КонецПроцедуры // ДобавитьПодчиненный() 


#КонецОбласти
#КонецОбласти

#КонецЕсли


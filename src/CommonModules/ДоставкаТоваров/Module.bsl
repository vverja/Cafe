////////////////////////////////////////////////////////////////////////////////
// Модуль "ДоставкаТоваров", содержит процедуры и функции для
// управления доставкой.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на заказ расчитывает и записывает в регистр сведений состояние заказа
//
//	Параметры:
//		РаспоряженияСсылки - Массив (состоящий из ДокументСсылка), ДокументСсылка - ссылки на документы, по которым
//					нужно рассчитать состояние отгрузки.
//					В модуле менеджера документов должна быть определена функция ТекстЗапросаРеквизитыДоставки()
//		Отказ - Булево - признак прерывания обработки проведения
//		УдалениеПроведения - Булево - признак обработки удаления проведения
//
Процедура ОтразитьСостояниеДоставки(РаспоряженияСсылки, Отказ = Ложь, УдалениеПроведения = Ложь, ЭтоОбновлениеИБ = Ложь) Экспорт
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РаспоряженияСсылки)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(РаспоряженияСсылки) = Тип("Массив") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(РаспоряженияСсылки);
	Иначе
		МассивСсылок = РаспоряженияСсылки;
	КонецЕсли;
	
	Если УдалениеПроведения Тогда
		Для Каждого Ссылка Из МассивСсылок Цикл
			Набор = РегистрыСведений.СостоянияИРеквизитыДоставки.СоздатьНаборЗаписей();
			Набор.Отбор.Распоряжение.Установить(Ссылка);
			Набор.Записать(Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ЭтоДоставкаНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(МассивСсылок[0]);
	
	ТаблицаРаспоряжений = Новый ТаблицаЗначений;
	ТаблицаРаспоряжений.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип);
	СоответствиеТипов = Новый Соответствие;
	ТекстЗапроса = "";
	Для Каждого Ссылка из МассивСсылок Цикл
		НоваяСтрока = ТаблицаРаспоряжений.Добавить();
		НоваяСтрока.Ссылка = Ссылка;
		ТипСсылки = ТипЗнч(Ссылка);
		Если СоответствиеТипов[ТипСсылки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеТипов.Вставить(ТипСсылки,Истина);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		ТекстЗапросаПоДокументу = МенеджерОбъекта.ТекстЗапросаРеквизитыДоставки();
		Если ТекстЗапроса = "" Тогда
			ПоложениеИЗ = СтрНайти(ТекстЗапросаПоДокументу, "ИЗ");
			ТекстЗапроса = Лев(ТекстЗапросаПоДокументу,ПоложениеИЗ - 1)
						+ " ПОМЕСТИТЬ ДанныеРаспоряжений
						|" + Прав(ТекстЗапросаПоДокументу,СтрДлина(ТекстЗапросаПоДокументу) - ПоложениеИЗ + 1);
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстЗапросаПоДокументу;
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + РазделительЗапроса()
	+
	"ВЫБРАТЬ
	|	ТаблицаРаспоряжений.Ссылка КАК Ссылка,
	|	ТаблицаРаспоряжений.Ссылка ССЫЛКА Документ.ПоручениеЭкспедитору КАК ЭтоПоручениеЭкспедитору
	|ПОМЕСТИТЬ ТаблицаРаспоряжений
	|ИЗ
	|	&ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ТоварыКДоставке.Распоряжение КАК Распоряжение,
	|	ТоварыКДоставке.Склад КАК Склад,
	|	ТоварыКДоставке.Номенклатура КАК Номенклатура,
	|	ТоварыКДоставке.Характеристика КАК Характеристика,
	|	ТоварыКДоставке.Назначение КАК Назначение,
	|	ТоварыКДоставке.Серия КАК Серия,
	|	ТоварыКДоставке.Количество КАК Количество,
	|	ТоварыКДоставке.ВсеТовары
	|ПОМЕСТИТЬ ТоварыКДоставке
	|	ИЗ
	|		РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|			ПО (ТаблицаРаспоряжений.Ссылка = ТоварыКДоставке.Распоряжение)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ДокументЗаданиеНаПеревозку
	|			ПО ДокументЗаданиеНаПеревозку.Ссылка = ТоварыКДоставке.ЗаданиеНаПеревозку
	|			И ДокументЗаданиеНаПеревозку.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Склад,
	|	ЗаданиеНаПеревозку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспоряженияЗаданий.Распоряжение КАК Ссылка,
	|	РаспоряженияЗаданий.Склад КАК Склад,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТоварыКДоставке.ЗаданиеНаПеревозку ЕСТЬ NULL
	|					И ЗаданиеНаПеревозкуШапка.Проведен
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВсеПроведенныеЗаданияБезТоваров,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА ТоварыКДоставке.ВсеТовары
	|						И ЗаданиеНаПеревозкуШапка.Проведен
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ), МАКСИМУМ(ЭтоПоручениеЭкспедитору)) КАК ВсеТоварыВДоставке,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЗаданиеНаПеревозкуШапка.Проведен
	|					И ЗаданиеНаПеревозкуШапка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыто)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВсеЗаданияЗакрыты,
	|	МАКСИМУМ(ЗаданиеНаПеревозкуШапка.Проведен) КАК ЕстьПроведенныеЗадания,
	|	МАКСИМУМ(ЭтоПоручениеЭкспедитору) КАК ЭтоПоручениеЭкспедитору
	|ПОМЕСТИТЬ ТаблицаПроверкиЗаданийИТоваровВДоставке
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияЗаданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозкуШапка
	|		ПО РаспоряженияЗаданий.Ссылка = ЗаданиеНаПеревозкуШапка.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|		ПО ТаблицаРаспоряжений.Ссылка = РаспоряженияЗаданий.Распоряжение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКДоставке КАК ТоварыКДоставке
	|		ПО РаспоряженияЗаданий.Распоряжение = ТоварыКДоставке.Распоряжение
	|			И РаспоряженияЗаданий.Склад = ТоварыКДоставке.Склад
	|			И РаспоряженияЗаданий.Ссылка = ТоварыКДоставке.ЗаданиеНаПеревозку
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспоряженияЗаданий.Распоряжение,
	|	РаспоряженияЗаданий.Склад";
	
	Если ЭтоДоставкаНаНашСклад Тогда
		ТекстЗапроса = ТекстЗапроса + РазделительЗапроса() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ЕстьТоварыНеВключенныеВЗадания,
		|	Т.Распоряжение КАК Ссылка,
		|	Т.Склад
		|ПОМЕСТИТЬ РаспоряженияЧастичноВДоставке
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
		|		ТоварыКДоставке.Склад КАК Склад,
		|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
		|		ТоварыКДоставке.Характеристика КАК Характеристика,
		|		ТоварыКДоставке.Назначение КАК Назначение,
		|		ТоварыКДоставке.Серия КАК Серия,
		|		-ТоварыКДоставке.Количество КАК Количество
		|	ИЗ
		|		ТоварыКДоставке КАК ТоварыКДоставке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ТоварыКДоставке.Склад)
		|				И (ТаблицаПроверки.Ссылка = ТоварыКДоставке.Распоряжение)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|				И НЕ ТаблицаПроверки.ЭтоПоручениеЭкспедитору
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеРаспоряженийПоТоварам.Ссылка,
		|		ДанныеРаспоряженийПоТоварам.Склад,
		|		ДанныеРаспоряженийПоТоварам.Номенклатура,
		|		ДанныеРаспоряженийПоТоварам.Характеристика,
		|		ДанныеРаспоряженийПоТоварам.Назначение,
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|		ДанныеРаспоряженийПоТоварам.Количество
		|	ИЗ
		|		Документ.ЗаказПоставщику.Товары КАК ДанныеРаспоряженийПоТоварам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ДанныеРаспоряженийПоТоварам.Склад)
		|				И (ТаблицаПроверки.Ссылка = ДанныеРаспоряженийПоТоварам.Ссылка)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеРаспоряженийПоТоварам.Ссылка,
		|		ДанныеРаспоряженийПоТоварам.Склад,
		|		ДанныеРаспоряженийПоТоварам.Номенклатура,
		|		ДанныеРаспоряженийПоТоварам.Характеристика,
		|		ДанныеРаспоряженийПоТоварам.Назначение,
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|		ДанныеРаспоряженийПоТоварам.Количество
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг.Товары КАК ДанныеРаспоряженийПоТоварам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ДанныеРаспоряженийПоТоварам.Склад)
		|				И (ТаблицаПроверки.Ссылка = ДанныеРаспоряженийПоТоварам.Ссылка)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Распоряжение,
		|	Т.Склад,
		|	Т.Характеристика,
		|	Т.Назначение,
		|	Т.Серия,
		|	Т.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК НетОстатка,
		|	ТоварыКПоступлениюОбороты.ДокументПоступления КАК ДокументОтгрузкиПоступления,
		|	ТоварыКПоступлениюОбороты.Склад КАК Склад
		|ПОМЕСТИТЬ ОстаткиКОтгрузкеКПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , , ДокументПоступления В (&Ссылки)) КАК ТоварыКПоступлениюОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления В (&Ссылки)) КАК ОстаткиТоварыКПоступлению
		|		ПО ТоварыКПоступлениюОбороты.ДокументПоступления = ОстаткиТоварыКПоступлению.ДокументПоступления
		|			И ТоварыКПоступлениюОбороты.Склад = ОстаткиТоварыКПоступлению.Склад
		|ГДЕ
		|	ТоварыКПоступлениюОбороты.КПоступлениюПриход > 0
		|	И ОстаткиТоварыКПоступлению.КПоступлениюОстаток ЕСТЬ NULL";
	Иначе
		ТекстЗапроса = ТекстЗапроса + РазделительЗапроса() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ЕстьТоварыНеВключенныеВЗадания,
		|	Т.Распоряжение КАК Ссылка,
		|	Т.Склад
		|ПОМЕСТИТЬ РаспоряженияЧастичноВДоставке
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
		|		ТоварыКДоставке.Склад КАК Склад,
		|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
		|		ТоварыКДоставке.Характеристика КАК Характеристика,
		|		ТоварыКДоставке.Назначение КАК Назначение,
		|		ТоварыКДоставке.Серия КАК Серия,
		|		-ТоварыКДоставке.Количество КАК Количество
		|	ИЗ
		|		ТоварыКДоставке КАК ТоварыКДоставке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ТоварыКДоставке.Склад)
		|				И (ТаблицаПроверки.Ссылка = ТоварыКДоставке.Распоряжение)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|				И НЕ ТаблицаПроверки.ЭтоПоручениеЭкспедитору
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКОтгрузке.ДокументОтгрузки,
		|		ТоварыКОтгрузке.Склад,
		|		ТоварыКОтгрузке.Номенклатура,
		|		ТоварыКОтгрузке.Характеристика,
		|		ТоварыКОтгрузке.Назначение,
		|		ТоварыКОтгрузке.Серия,
		|		ТоварыКОтгрузке.КОтгрузкеПриход
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , ДокументОтгрузки В (&Ссылки)) КАК ТоварыКОтгрузке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ТоварыКОтгрузке.Склад)
		|				И (ТаблицаПроверки.Ссылка = ТоварыКОтгрузке.ДокументОтгрузки)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|	ГДЕ
		|		ТоварыКОтгрузке.КОтгрузкеПриход > 0) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Распоряжение,
		|	Т.Склад,
		|	Т.Характеристика,
		|	Т.Назначение,
		|	Т.Серия,
		|	Т.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК НетОстатка,
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузкиПоступления,
		|	ТоварыКОтгрузкеОбороты.Склад КАК Склад
		|ПОМЕСТИТЬ ОстаткиКОтгрузкеКПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , ДокументОтгрузки В (&Ссылки)) КАК ТоварыКОтгрузкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&Ссылки)) КАК ОстаткиТоварыКОтгрузке
		|		ПО ТоварыКОтгрузкеОбороты.ДокументОтгрузки = ОстаткиТоварыКОтгрузке.ДокументОтгрузки
		|			И ТоварыКОтгрузкеОбороты.Склад = ОстаткиТоварыКОтгрузке.Склад
		|ГДЕ
		|	ТоварыКОтгрузкеОбороты.КОтгрузкеПриход > 0
		|	И ОстаткиТоварыКОтгрузке.КОтгрузкеОстаток ЕСТЬ NULL";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + РазделительЗапроса() +
	"ВЫБРАТЬ
	|	ТаблицаРаспоряжений.Ссылка КАК Распоряжение,
	|	ДанныеРаспоряжений.Номер,
	|	ДанныеРаспоряжений.Дата,
	|	ДанныеРаспоряжений.Склад,
	|	ДанныеРаспоряжений.ПолучательОтправитель,
	|	ДанныеРаспоряжений.Перевозчик,
	|	ДанныеРаспоряжений.СпособДоставки,
	|	ДанныеРаспоряжений.Зона,
	|	ДанныеРаспоряжений.Адрес,
	|	ДанныеРаспоряжений.АдресЗначенияПолей,
	|	ДанныеРаспоряжений.ВремяС,
	|	ДанныеРаспоряжений.ВремяПо,
	|	ДанныеРаспоряжений.ДополнительнаяИнформация,
	|	ДанныеРаспоряжений.ДоставитьПолностью,
	|	ДанныеРаспоряжений.ОсобыеУсловияПеревозки,
	|	ДанныеРаспоряжений.ОсобыеУсловияПеревозкиОписание,
	|	ДанныеРаспоряжений.РазбиватьРасходныеОрдераПоРаспоряжениям,
	|	ВЫБОР
	|		КОГДА ДанныеРаспоряжений.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеРаспоряжений.Проведен = ЛОЖЬ
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаПроверки.ВсеПроведенныеЗаданияБезТоваров
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаПроверки.ВсеЗаданияЗакрыты = ИСТИНА
	|				И ОстаткиКОтгрузкеКПоступлению.НетОстатка
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаПроверки.ВсеЗаданияЗакрыты = ИСТИНА
	|				И РаспоряженияЧастичноВДоставке.Ссылка ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|
	|		КОГДА ЕстьNULL(ТаблицаПроверки.ЕстьПроведенныеЗадания,Ложь)
	|				И НЕ ЕстьNULL(РаспоряженияЧастичноВДоставке.ЕстьТоварыНеВключенныеВЗадания,Ложь)
	|
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ПолностьюВДоставке)			
	|
	|		ИНАЧЕ
	|			
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка)
	|
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаспоряжений КАК ДанныеРаспоряжений
	|		ПО ДанныеРаспоряжений.Ссылка = ТаблицаРаспоряжений.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
	|		ПО ДанныеРаспоряжений.Склад = ТаблицаПроверки.Склад
	|			И ДанныеРаспоряжений.Ссылка = ТаблицаПроверки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаспоряженияЧастичноВДоставке КАК РаспоряженияЧастичноВДоставке
	|		ПО ДанныеРаспоряжений.Склад = РаспоряженияЧастичноВДоставке.Склад
	|			И ДанныеРаспоряжений.Ссылка = РаспоряженияЧастичноВДоставке.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиКОтгрузкеКПоступлению КАК ОстаткиКОтгрузкеКПоступлению
	|		ПО ДанныеРаспоряжений.Склад = ОстаткиКОтгрузкеКПоступлению.Склад
	|			И ДанныеРаспоряжений.Ссылка = ОстаткиКОтгрузкеКПоступлению.ДокументОтгрузкиПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРаспоряжений.Ссылка,
	|	ДанныеРаспоряжений.Склад";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", МассивСсылок);
	Запрос.УстановитьПараметр("ТаблицаРаспоряжений", ТаблицаРаспоряжений);
	Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
		
		НаборСостояние = РегистрыСведений.СостоянияИРеквизитыДоставки.СоздатьНаборЗаписей();
		НаборСостояние.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
		
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			
			Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
				ЗаполнитьЗначенияСвойств(НаборСостояние.Добавить(), Выборка);
			КонецЕсли;
			
		КонецЦикла;
		
        Если ЭтоОбновлениеИБ Тогда
            ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборСостояние);
        Иначе
            НаборСостояние.Записать();
        КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает свойства форм документов, в которых имеются реквизиты доставки при чтении, создании
// Параметры
//		ЭлементыФормы - все элементы формы для управления свойствами и переключения закладок
//		ДокОбъект - объект, реквизиты которого используются при заполнении свойств
//		НакладнаяПоЗаказу - Булево - Истина, если ДокОбъект является накладной и по заказам, иначе Ложь 
//		ПараметрыЗаполнения - Структура - см. ПараметрыЗаполненияРеквизитов()
//
Процедура ПриЧтенииСозданииРаспоряженийНаСервере(ЭлементыФормы,
	ДокОбъект,  НакладнаяПоЗаказу = Ложь, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если Не УстановитьВидимостьЭлементовДоставки(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказу) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьАдресовЗаполнитьСпискиВремени(ЭлементыФормы);
	
	ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы,ДокОбъект);
	
	СпособДоставки = ДокОбъект.СпособДоставки;
	
	Если СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
		ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, ДокОбъект);
	КонецЕсли;
	ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы, ДокОбъект);
	ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками");
	Если ЭлементыФормы.Найти("СтраницыДоставки") <> Неопределено Тогда
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы, ДокОбъект.СпособДоставки, ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками);
		Если ЭлементыФормы.Найти("СтраницаДоставкаПеревозчиком") <> Неопределено Тогда
			ЭлементыФормы.ОсобыеУсловияПеревозкиДоставкаПеревозчиком.Видимость         = ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками;
			ЭлементыФормы.ОсобыеУсловияПеревозкиОписаниеДоставкаПеревозчиком.Видимость = ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками;
		КонецЕсли;
	КонецЕсли;
	
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

// В зависимости от ФО РедактироватьАдресаДоставкиТолькоВДиалоге для элементов-адресов доставки
//	устанавливается признак РедактированиеТекста
// Параметры:
//		Форма - УправляемаяФорма - форма, для элементов которой происходит установка
//
Процедура УстановитьДоступностьАдресовДоставки(ЭлементыФормы) Экспорт
	
	РедактированиеРазрешено = Не ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
	Если РедактированиеРазрешено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
		 И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода
		 И СтрНайти(НРег(ЭлементФормы.Имя), НРег("Адрес")) > 0 Тогда
			ЭлементФормы.РедактированиеТекста = РедактированиеРазрешено;
			ЭлементФормы.КнопкаОчистки = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// В зависимости от ФО РедактироватьАдресаДоставкиТолькоВДиалоге для элементов-адресов доставки
//	устанавливается признак РедактированиеТекста
// Параметры:
//		Форма - УправляемаяФорма - форма, для элементов которой происходит установка
//
Процедура УстановитьДоступностьАдресовЗаполнитьСпискиВремени(ЭлементыФормы) Экспорт
	
	РедактированиеРазрешено = Не ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
	Если ЭлементыФормы.Найти("СтраницыДоставки") <> Неопределено Тогда
		ЭлементыДляОбхода = ЭлементыФормы.СтраницыДоставки.ПодчиненныеЭлементы;
	ИначеЕсли ЭлементыФормы.Найти("СтраницаДоставка") <> Неопределено Тогда
		ЭлементыДляОбхода = ЭлементыФормы.СтраницаДоставка.ПодчиненныеЭлементы;
	Иначе
		ЭлементыДляОбхода = ЭлементыФормы;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из ЭлементыДляОбхода Цикл
		
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
			ИмяЭлемента = ВРег(ЭлементФормы.Имя);
			Если Не РедактированиеРазрешено
				И СтрНайти(ИмяЭлемента, "АДРЕС") > 0
				И ИмяЭлемента <> "АДРЕСДОСТАВКИДЛЯПОСТАВЩИКА" Тогда
				ЭлементФормы.РедактированиеТекста = Ложь;
				ЭлементФормы.КнопкаОчистки = Истина;
			КонецЕсли;
			Если СтрНайти(ИмяЭлемента, "ВРЕМЯДОСТАВКИ") > 0 Тогда
				ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(ЭлементФормы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Возвращает параметры заполнения реквизитов доставки
// Параметры:
//  ЗаданиеНаПеревозку	 - ДокументСсылка.ЗаданиеНаПеревозку 
//  Получатель			 - ОпределяемыйТип.ОтправительПолучательДоставки
// 
// Возвращаемое значение:
//   Структура с ключами:
// 		Источник статистики - ДокументМенеджер - менеджеры документов,
//			из которых будет извлекаться статистика для заполнения реквизитов доставки
//
Функция ПараметрыЗаполненияРеквизитов() Экспорт
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ИсточникСтатистики", Неопределено);
	Возврат ПараметрыЗаполнения;
КонецФункции

Функция РеквизитыДоставки(ДокОбъект)
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект);
	РеквизитыДоставки = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект);
	РеквизитыДоставки.Вставить(ПолучательОтправитель.ИмяПоля, ПолучательОтправитель.Значение);
	РеквизитыДоставки.Вставить("Ссылка");
	ЗаполнитьЗначенияСвойств(РеквизитыДоставки, ДокОбъект);
	РеквизитыДоставки.Вставить("ПолучательОтправитель", ПолучательОтправитель);
	
	Возврат РеквизитыДоставки;
	
КонецФункции
	
// Заполняет реквизиты доставки в зависимости от элемента формы, в котором производятся изменения
// Параметры:
//		ЭлементыФормы - ВсеЭлементыФормы - все элементы формы, в которой производятся изменения,
//		ИмяЭлементаФормы - Строка - имя элемента формы, в котором произошли изменения,
//		ДокОбъект - ДанныеФормыСтруктура - объект, реквизиты которого используются при заполнении
//
Процедура ЗаполнитьРеквизитыДоставки(ЭлементыФормы, ИмяЭлементаФормы, ДокОбъект, ПараметрыЗаполнения = Неопределено) Экспорт
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект);
	
	Если ИмяЭлементаФормы = ПолучательОтправитель.ИмяПоля Тогда
		
		ПриИзмененииПолучателяОтправителя(ЭлементыФормы, ДокОбъект, ПараметрыЗаполнения);
		
	Иначе
		
		Если СтрНайти(ИмяЭлементаФормы,"СпособДоставки") > 0
			Или СтрНайти(ИмяЭлементаФормы,"МестоПередачи") > 0 Тогда
			
			ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект);
			
			
		ИначеЕсли СтрНайти(ИмяЭлементаФормы,"ПеревозчикПартнер") > 0 Тогда
			
			ПриИзмененииПеревозчика(ЭлементыФормы, ДокОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	
	РеквизитыДоставки = РеквизитыДоставки(ДокОбъект);
	
	ДопИнфоИзмененоПользователем = ДоставкаТоваровКлиентСервер.ДопИнфоИзмененоПользователем(ЭлементыФормы, ДокОбъект);
	
	ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);
			
	Если (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
		И ЗначениеЗаполнено(РеквизитыДоставки.ПеревозчикПартнер) Тогда
		ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, РеквизитыДоставки);
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыДоставки);
	
	Если ЭлементыФормы.Найти("СтраницыДоставки") <> Неопределено Тогда
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы, ДокОбъект.СпособДоставки, ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	КонецЕсли;
	
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

// Перезаполняет реквизиты доставки при изменении реквизиты формы
// Параметры:
//		ЭлементыФормы - ВсеЭлементыФормы - все элементы формы, в которой производятся изменения,
//		ДокОбъект - ДанныеФормыСтруктура - объект, реквизиты которого используются при заполнении
//
Процедура ПриИзмененииПолучателяОтправителя(ЭлементыФормы, ДокОбъект, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияРеквизитов();
	КонецЕсли;
	
	РеквизитыДоставки = РеквизитыДоставки(ДокОбъект);
	
	ПолучательОтправитель = РеквизитыДоставки.ПолучательОтправитель;
	
	ИмяЭлементаАдрес = ИмяЭлементаАдрес(ЭлементыФормы);
	ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(ЭлементыФормы, РеквизитыДоставки);
	Если ЗначениеЗаполнено(ПолучательОтправитель.Значение) Тогда
		
		ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы, РеквизитыДоставки);
		Если ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора.Количество() > 0 Тогда
			ПерваяСтруктураВСписке = ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора[0].Значение;
			РеквизитыДоставки.АдресДоставки = ПерваяСтруктураВСписке.АдресДоставки;
			РеквизитыДоставки.АдресДоставкиЗначенияПолей = ПерваяСтруктураВСписке.АдресДоставкиЗначенияПолей;
		КонецЕсли;
		
		
		ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы, РеквизитыДоставки);
		// Получим значения по статистике
		РеквизитыДляОтбора   = Новый Структура(ПолучательОтправитель.ИмяПоля, ПолучательОтправитель.Значение);
		ЗаполняемыеРеквизиты = Новый Структура("СпособДоставки");
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ИсточникСтатистики) Тогда
			СсылкаДляСтатистики = ПараметрыЗаполнения.ИсточникСтатистики.ПустаяСсылка();
		Иначе
			СсылкаДляСтатистики = РеквизитыДоставки.Ссылка;
		КонецЕсли;
		
		ЗаполнениеСвойствПоСтатистикеСервер.ПолучитьЗначенияСвойств(СсылкаДляСтатистики, ЗаполняемыеРеквизиты, РеквизитыДляОтбора);
		
		Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.СпособДоставки) Тогда
			РеквизитыДоставки.СпособДоставки = ЗаполняемыеРеквизиты.СпособДоставки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.СпособДоставки) Тогда
			
			ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, РеквизитыДоставки);
			
			Если (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
					Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
				И ЗначениеЗаполнено(РеквизитыДоставки.ПеревозчикПартнер) Тогда
				ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, РеквизитыДоставки);
				ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыДоставки);
	
	ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы, ДокОбъект.СпособДоставки, ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

// Перезаполняет реквизиты доставки при изменении реквизиты формы
// Параметры:
//		ЭлементыФормы - ВсеЭлементыФормы - все элементы формы, в которой производятся изменения,
//		ДокОбъект - ДанныеФормыСтруктура - объект, реквизиты которого используются при заполнении
//
Процедура ПриИзмененииПеревозчика(ЭлементыФормы, ДокОбъект)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	
	Если (ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
			Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи) Тогда
			
		ДопИнфоИзмененоПользователем = ДоставкаТоваровКлиентСервер.ДопИнфоИзмененоПользователем(ЭлементыФормы, ДокОбъект);
	    ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, ДокОбъект);
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, ДокОбъект, ДопИнфоИзмененоПользователем);
		
	КонецЕсли;
	
КонецПроцедуры
	
// Заполняет способ доставки в Коммерческом предложении в зависимости от партнера,
//		устанавливает нужную страницу доставки
// Параметры:
//		ЭлементыФормы - ВсеЭлементыФормы для управления видимостью.
//		ДокОбъект - документ-объект Коммерческое предложение, в котором заполняется способ доставки
//
Процедура КоммерческоеПредложениеПриИзмененииПартнера(ЭлементыФормы, ДокОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокОбъект.Партнер) Тогда
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	Иначе
		
		// Получим значения по статистике
		ЗаполняемыеРеквизиты = Новый Структура("СпособДоставки");
		РеквизитыДляОтбора   = Новый Структура("Партнер", ДокОбъект.Партнер);
		ЗаполнениеСвойствПоСтатистикеСервер.ПолучитьЗначенияСвойств(
			Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка(),
			ЗаполняемыеРеквизиты,
			РеквизитыДляОтбора);
		
		Если НЕ ЗначениеЗаполнено(ЗаполняемыеРеквизиты.СпособДоставки) Тогда
			ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		Иначе
			ДокОбъект.СпособДоставки = ЗаполняемыеРеквизиты.СпособДоставки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в структуру РеквизитыШапки реквизиты доставки в зависимости от способа доставки,
//		используется при вводе Реализации товаров и услуг на основании Заказов клиента
// Параметры:
//		РеквизитыШапки - структура, в которую добавляются реквизиты, связанные с доставкой
//		ВыборкаРеквизитыШапки - выборка из результатов запроса, в которой содержатся данные по доставке
//
Процедура ДополнитьРеквизитамиДоставкиДанныеЗаполнения(РеквизитыШапки,ВыборкаРеквизитыШапки) Экспорт
	
	РеквизитыШапки.Вставить("СпособДоставки",                        ВыборкаРеквизитыШапки.СпособДоставки);
	Если ВыборкаРеквизитыШапки.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда
		РеквизитыШапки.Вставить("АдресДоставки",                         ВыборкаРеквизитыШапки.АдресДоставки);
		РеквизитыШапки.Вставить("АдресДоставкиЗначенияПолей",            ВыборкаРеквизитыШапки.АдресДоставкиЗначенияПолей);
		Если ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
			Или ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
			РеквизитыШапки.Вставить("ЗонаДоставки",                          ВыборкаРеквизитыШапки.ЗонаДоставки);
			РеквизитыШапки.Вставить("ВремяДоставкиС",                        ВыборкаРеквизитыШапки.ВремяДоставкиС);
			РеквизитыШапки.Вставить("ВремяДоставкиПо",                       ВыборкаРеквизитыШапки.ВремяДоставкиПо);
			РеквизитыШапки.Вставить("ДополнительнаяИнформацияПоДоставке",    ВыборкаРеквизитыШапки.ДополнительнаяИнформацияПоДоставке);
		КонецЕсли;
		Если ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
			Или ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
			РеквизитыШапки.Вставить("ПеревозчикПартнер",                     ВыборкаРеквизитыШапки.ПеревозчикПартнер);
			Если ВыборкаРеквизитыШапки.ПеревозчикПартнер <> Справочники.Партнеры.ПустаяСсылка()
					И ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
				РеквизитыШапки.Вставить("АдресДоставкиПеревозчика",              ВыборкаРеквизитыШапки.АдресДоставкиПеревозчика);
				РеквизитыШапки.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", ВыборкаРеквизитыШапки.АдресДоставкиПеревозчикаЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// При изменении флага "По заказам" в накладной меняет видимость элементов управления доставкой, меняет способ доставки
//
// Параметры:
//  ЭлементыФормы		 - КоллекцияЭлементовФормы	 - все элементы формы
//  ДокОбъект			 - ДокументОбъект
//  НакладнаяПоЗаказам	 - Булево					 - Истина, если документ является накладной и он по заказам, иначе Ложь
//
Процедура ПриИзмененииФлагаПоЗаказам(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказам) Экспорт
	
	Если НакладнаяПоЗаказам Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками")
			Или ДокОбъект.СпособДоставки <> Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
			ЗаполнитьЗначенияСвойств(ДокОбъект, ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект));
		КонецЕсли;
		УстановитьВидимостьЭлементовДоставки(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказам);
	Иначе
		ПриЧтенииСозданииРаспоряженийНаСервере(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказам);
	КонецЕсли;
	
КонецПроцедуры

// Подбирает из Заданий на перевозку значения последних реквизитов доставки по получателю или партнеру.
// Параметры:
//	ПолучательОтправитель - СправочникСсылка.Партнеры, СправочникСсылка.Склады - необязательный, если указан Перевозчик,
//	Перевозчик - СправочникСсылка.Партнеры - необязательный, если указан ПолучательОтправитель.
//
// Возвращаемое значение:
//	ТаблицаЗначений - содержит три последних набора реквизитов доставки по Партнеру или Перевозчику.
//		Колонки:
//		АдресДоставки,
//		АдресДоставкиЗначенияПолей,
//		ЗонаДоставки,
//		ВремяС,
//		ВремяПо,
//		ДополнительнаяИнформация.
//
Функция ПоследниеРеквизитыДоставкиИзЗаданий(ПолучательОтправитель = Неопределено, Перевозчик = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.НомерСтроки,
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Дата,
	|	ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи,
	|	ЗаданиеНаПеревозкуРаспоряжения.ВремяС,
	|	ЗаданиеНаПеревозкуРаспоряжения.ВремяПо,
	|	ЗаданиеНаПеревозкуРаспоряжения.ДополнительнаяИнформация,
	|	ЗаданиеНаПеревозкуМаршрут.Адрес,
	|	ЗаданиеНаПеревозкуМаршрут.АдресЗначенияПолей
	|ПОМЕСТИТЬ ВТ_ЗаданиеНаПеревозкуСтроки
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ПО (ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи)
	|ГДЕ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	|	И (ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель = &ПолучательОтправитель
	|			Или &ПолучательОтправитель = НЕОПРЕДЕЛЕНО)
	|	И (ЗаданиеНаПеревозкуРаспоряжения.Перевозчик = &Перевозчик
	|			Или &Перевозчик = НЕОПРЕДЕЛЕНО
	|				И ЗаданиеНаПеревозкуРаспоряжения.Перевозчик = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 3
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес КАК Адрес,
	|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
	|ИЗ
	|	ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
	|ГДЕ
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.Дата) УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.Адрес,
	|	ЗаданиеНаПеревозкуМаршрут.Зона,
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка.Дата
	|ПОМЕСТИТЬ ВТ_МаршрутыСНужнымиАдресами
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ПО ВТ_ПоследниеАдреса.Адрес = ЗаданиеНаПеревозкуМаршрут.Адрес
	|ГДЕ
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.Адрес,
	|	МАКСИМУМ(ВТ_МаршрутыСНужнымиАдресами.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихЗонПоАдресам
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаршрутыСНужнымиАдресами КАК ВТ_МаршрутыСНужнымиАдресами
	|		ПО ВТ_ПоследниеАдреса.Адрес = ВТ_МаршрутыСНужнымиАдресами.Адрес
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеАдреса.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_МаршрутыСНужнымиАдресами.Зона) КАК Зона,
	|	ВТ_ДатыПоследнихЗонПоАдресам.Адрес
	|ПОМЕСТИТЬ ВТ_ПоследниеЗоныПоАдресам
	|ИЗ
	|	ВТ_МаршрутыСНужнымиАдресами КАК ВТ_МаршрутыСНужнымиАдресами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыПоследнихЗонПоАдресам КАК ВТ_ДатыПоследнихЗонПоАдресам
	|		ПО (ВТ_ДатыПоследнихЗонПоАдресам.Адрес = ВТ_МаршрутыСНужнымиАдресами.Адрес)
	|			И (ВТ_ДатыПоследнихЗонПоАдресам.Дата = ВТ_МаршрутыСНужнымиАдресами.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДатыПоследнихЗонПоАдресам.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.Адрес,
	|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи) КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_ПоследниеАдресаКлючиСвязи
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
	|		ПО (ВТ_ЗаданиеНаПеревозкуСтроки.Адрес = ВТ_ПоследниеАдреса.Адрес)
	|			И (ВТ_ЗаданиеНаПеревозкуСтроки.Дата = ВТ_ПоследниеАдреса.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеАдреса.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи,
	|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок
	|ИЗ
	|	ВТ_ПоследниеАдресаКлючиСвязи КАК ВТ_ПоследниеАдресаКлючиСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
	|		ПО (ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи = ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеАдресаКлючиСвязи.Адрес,
	|	ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес              КАК АдресДоставки,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ВТ_ПоследниеЗоныПоАдресам.Зона                 КАК ЗонаДоставки,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.ВремяС             КАК ВремяДоставкиС,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.ВремяПо            КАК ВремяДоставкиПо,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.ДополнительнаяИнформация КАК ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок КАК ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок
	|		ПО ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи = ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок.КлючСвязи
	|			И ВТ_ЗаданиеНаПеревозкуСтроки.НомерСтроки = ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок.НомерСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеЗоныПоАдресам КАК ВТ_ПоследниеЗоныПоАдресам
	|		ПО (ВТ_ПоследниеЗоныПоАдресам.Адрес = ВТ_ЗаданиеНаПеревозкуСтроки.Адрес)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Дата УБЫВ";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПолучательОтправитель", ПолучательОтправитель);
	Запрос.УстановитьПараметр("Перевозчик", Перевозчик);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;
КонецФункции

// Возвращает порядок доставки по получателю из задания на перевозку.
// Если получатель упоминается несколько раз - берется номер первого пункта,
// если получателя нет в задании, вместо пункта пишется ?
//
// Параметры:
//  ЗаданиеНаПеревозку	 - ДокументСсылка.ЗаданиеНаПеревозку 
//  Получатель			 - ОпределяемыйТип.ОтправительПолучательДоставки 
// 
// Возвращаемое значение:
//   Строка - порядок доставки в формате "%НомерПункта% из %КоличествоПунктов%" 
//
Функция ПорядокДоставкиВЗаданииНаПеревозку(ЗаданиеНаПеревозку, Получатель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ЗаданиеНаПеревозкуМаршрут.НомерСтроки) КАК НомерСтроки,
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НомерПункта
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ПО ЗаданиеНаПеревозкуМаршрут.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Ссылка
	|			И ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи
	|ГДЕ
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка = &ЗаданиеНаПеревозку
	|	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку
	|	И ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель = &Получатель
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозку.КоличествоПунктов,
	|	ЕСТЬNULL(НомерПункта.НомерСтроки, 0) КАК НомерПункта
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомерПункта КАК НомерПункта
	|		ПО НомерПункта.Ссылка = ЗаданиеНаПеревозку.Ссылка
	|ГДЕ
	|	ЗаданиеНаПеревозку.Ссылка = &ЗаданиеНаПеревозку";
	
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПорядокДоставки = НСтр("ru='%НомерПункта% из %КоличествоПунктов%';uk='%НомерПункта% з %КоличествоПунктов%'");	
		ПорядокДоставки = СтрЗаменить(ПорядокДоставки, "%НомерПункта%", ?(Выборка.НомерПункта = 0, "?", Формат(Выборка.НомерПункта,"ЧЦ=2; ЧВН=")));
		ПорядокДоставки = СтрЗаменить(ПорядокДоставки, "%КоличествоПунктов%", Формат(Выборка.КоличествоПунктов,"ЧЦ=2; ЧВН="));
	Иначе
		ПорядокДоставки = "";	
	КонецЕсли;
	
	Возврат ПорядокДоставки;
КонецФункции

// Проверяет, что для переданной складской операции предусмотрена доставка
//
// Параметры:
//  СкладскаяОперация	 - ПеречислениеСсылка.СкладскиеОперации 
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьДоставкаПоСкладскойОперации(СкладскаяОперация) Экспорт
	
	ТекстЗапроса = СкладыСервер.ТекстЗапросаСкладскаяОперацияТипДокумента() + " 
	|ВЫБРАТЬ
	|	СкладскаяОперацияТипДокумента.СкладскаяОперация
	|ИЗ
	|	СкладскаяОперацияТипДокумента КАК СкладскаяОперацияТипДокумента
	|
	|ГДЕ
	|	СкладскаяОперацияТипДокумента.СкладскаяОперация = &СкладскаяОперация
	|	И СкладскаяОперацияТипДокумента.Тип В (&ТипРаспоряжениеНаДоставку)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СкладскаяОперация", СкладскаяОперация); 
	Запрос.УстановитьПараметр("ТипРаспоряжениеНаДоставку", Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип.Типы());
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Возвращает значение коэффициента из константы, проверяет и выдает сообщение при незаполненности.
//	Возвращаемое значение:
//		Число
//
Функция КоэффициентПересчетаВТонны() Экспорт
	
	Возврат НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
КонецФункции

// Возвращает значение коэффициента из константы, проверяет и выдает сообщение при незаполненности.
// Возвращаемое значение:
//		Число
//
Функция КоэффициентПересчетаВКубическиеМетры() Экспорт
	
	Возврат НоменклатураСервер.КоэффициентПересчетаВКубическиеМетры(Константы.ЕдиницаИзмеренияОбъема.Получить());
	
КонецФункции

// Перезаполняет список распоряжений на доставку на форме.
// Параметры:
//	Форма - УправляемаяФорма,
//  ОбновляемыеРаспоряжения - ТаблицаЗначений - фильтр для частичного перезаполнения списка только по переданным в таблице распоряжениям.
//
Процедура ОбновитьСписокРаспоряженийНаДоставку(Форма, ОбновляемыеРаспоряжения = Неопределено) Экспорт
	
	РаспоряженияНаДоставку = Форма.РаспоряженияНаДоставку;
	ТоварыРаспоряженийКДоставке = Форма.ТоварыРаспоряженийКДоставке;
	ОтборПоТипуИсполнителей = Форма.ОтборПоТипуИсполнителей;
	Зона = Форма.Зона;
	Склад = Форма.Склад;
	ДатаРаспоряжений = Форма.ДатаРаспоряжений;
	ЗонаГруппаИлиПустая = (НЕ ЗначениеЗаполнено(Зона) ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Зона,"ЭтоГруппа"));
	
	ВыборочноеОбновление = (ОбновляемыеРаспоряжения <> Неопределено);
	
	ВесОбъемРаспоряженийПоДатам = Новый ТаблицаЗначений;
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Вес", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Объем", ОбщегоНазначения.ОписаниеТипаЧисло(18,6));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	КоллекцияРаспоряжений = РаспоряженияНаДоставку.ПолучитьЭлементы();
	ВесОбъем = Новый Структура;
	
	Если Не ВыборочноеОбновление Тогда
		ВесОбъем.Вставить("ИтогоВес", 0);
		ВесОбъем.Вставить("ИтогоОбъем",0);
		КоллекцияРаспоряжений.Очистить();
		ТоварыРаспоряженийКДоставке.Очистить();
	Иначе
		СтруктураПоиска = Новый Структура("Склад, Распоряжение");
		
		Для Каждого Стр Из ОбновляемыеРаспоряжения Цикл
			
			// При выборочном обновлении сначала нужно удалить строки обновляемых распоряжений,
			//	для этого воспользуемся списком товаров по распоряжениям
			ПредыдущийИДентификатор = Неопределено;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Стр);
			
			НайденныеСтроки = ТоварыРаспоряженийКДоставке.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТовары Из НайденныеСтроки Цикл
				Идентификатор = СтрокаТовары.ИдентификаторВДеревеРаспоряжений;
				Если ПредыдущийИдентификатор = Идентификатор
					Или Не ЗначениеЗаполнено(Идентификатор) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаРаспоряжение = РаспоряженияНаДоставку.НайтиПоИдентификатору(Идентификатор);
				Если СтрокаРаспоряжение <> Неопределено Тогда
					Если ЗонаГруппаИлиПустая Тогда
						
						ТекущаяВеткаРаспоряжений = СтрокаРаспоряжение.ПолучитьРодителя().ПолучитьЭлементы();
						// Если удаляем последний элемент в ветке, удалим родителя
						Если ТекущаяВеткаРаспоряжений.Количество() = 1 Тогда
							РаспоряженияНаДоставку.ПолучитьЭлементы().Удалить(СтрокаРаспоряжение.ПолучитьРодителя());
						Иначе
							ТекущаяВеткаРаспоряжений.Удалить(СтрокаРаспоряжение);
						КонецЕсли;
						
					Иначе
						КоллекцияРаспоряжений.Удалить(СтрокаРаспоряжение);
					КонецЕсли;
				КонецЕсли;
				ТоварыРаспоряженийКДоставке.Удалить(СтрокаТовары);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.ВидДоставки = Перечисления.ВидыДоставки.СоСклада Тогда
		ТекстЗапроса = ТекстЗапросаРаспоряженияНаДоставкуПолучателям(ВыборочноеОбновление);
	Иначе
		ТекстЗапроса = ТекстЗапросаРаспоряженияНаДоставкуОтОтправителей(ВыборочноеОбновление);
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	
	БезОтбораПоЗоне = (Зона = Справочники.ЗоныДоставки.ПустаяСсылка());
	СтруктураЗадание = Новый Структура("ЗаданиеНаПеревозку", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураЗадание, Форма);
	                           
	Запрос.УстановитьПараметр("Зона",                              Зона);
	Запрос.УстановитьПараметр("Склад",                             Склад);
	Запрос.УстановитьПараметр("БезОтбораПоЗоне",                   БезОтбораПоЗоне);
	Запрос.УстановитьПараметр("ОбновляемыеРаспоряжения",           ОбновляемыеРаспоряжения);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуПодбор",          СтруктураЗадание.ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуПустаяСсылка",    Документы.ЗаданиеНаПеревозку.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусЗаданияЗакрыто",              Перечисления.СтатусыЗаданийНаПеревозку.Закрыто);
	Запрос.УстановитьПараметр("ОтборПоТипуИсполнителей",           ОтборПоТипуИсполнителей);
	
	СпособыДоставкиНашимиСиламиКПолучателю = Новый Массив;
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.ДоКлиента);
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуСоСклада);
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте);
	Запрос.УстановитьПараметр("СпособыДоставкиНашимиСиламиКПолучателю", СпособыДоставкиНашимиСиламиКПолучателю);
	
	СпособыДоставкиПеревозчикомКПолучателю = Новый Массив;
	СпособыДоставкиПеревозчикомКПолучателю.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчика);
	СпособыДоставкиПеревозчикомКПолучателю.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	СпособыДоставкиПеревозчикомКПолучателю.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте);
	Запрос.УстановитьПараметр("СпособыДоставкиПеревозчикомКПолучателю", СпособыДоставкиПеревозчикомКПолучателю);
	
	СпособыДоставкиНашимиСиламиОтОтправителя = Новый Массив;
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуНаСклад);
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте);
	Запрос.УстановитьПараметр("СпособыДоставкиНашимиСиламиОтОтправителя", СпособыДоставкиНашимиСиламиОтОтправителя);
	
	СпособыДоставкиПеревозчикомОтОтправителя = Новый Массив;
	СпособыДоставкиПеревозчикомОтОтправителя.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
	СпособыДоставкиПеревозчикомОтОтправителя.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	СпособыДоставкиПеревозчикомОтОтправителя.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте);
	Запрос.УстановитьПараметр("СпособыДоставкиПеревозчикомОтОтправителя", СпособыДоставкиПеревозчикомОтОтправителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Зона") Цикл
		
		Если ВыборочноеОбновление Тогда
			
		ИначеЕсли ЗонаГруппаИлиПустая Тогда
			ТекущаяВетка = КоллекцияРаспоряжений.Добавить();
			ТекущаяВетка.Адрес = Строка(Выборка.Зона);
			ТекущаяВетка.Зона = Выборка.Зона;
			КоллекцияТекущаяВетка = ТекущаяВетка.ПолучитьЭлементы();
		Иначе
			КоллекцияТекущаяВетка = КоллекцияРаспоряжений;
		КонецЕсли;
		
		ВесПоЗоне = 0;
		ОбъемПоЗоне = 0;
		
		Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
			
			Если ВыборочноеОбновление Тогда
				СтруктураЗонаАдрес = Новый Структура("Зона, Адрес");
				ЗаполнитьЗначенияСвойств(СтруктураЗонаАдрес, Выборка);
				ПозицияДляВставки = ПолучитьПозициюДляВставки(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая, СтруктураЗонаАдрес);
				Если ЗонаГруппаИлиПустая Тогда
					ТекущаяВетка = КоллекцияРаспоряжений[ПозицияДляВставки.Зона];
					КоллекцияТекущаяВетка = ТекущаяВетка.ПолучитьЭлементы();
				Иначе
					КоллекцияТекущаяВетка = КоллекцияРаспоряжений;
				КонецЕсли;
				ПозицияДляВставки = ПозицияДляВставки.Распоряжение;
			КонецЕсли;
			
			Если Выборка.ВидРаспоряжения = Тип("ДокументСсылка.ПоручениеЭкспедитору") Тогда
				
				Если ЗначениеЗаполнено(ДатаРаспоряжений)
					И ЗначениеЗаполнено(Выборка.Дата)
					И НачалоДня(Выборка.Дата) > ДатаРаспоряжений Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыборочноеОбновление Тогда
					СтрокаРаспоряжение = КоллекцияТекущаяВетка.Вставить(ПозицияДляВставки);
					ПозицияДляВставки = ПозицияДляВставки + 1;
				Иначе
					СтрокаРаспоряжение = КоллекцияТекущаяВетка.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаРаспоряжение, Выборка);
				СтрокаРаспоряжение.ПолучательОтправительПредставление = Выборка.ПолучательОтправитель;
				СтрокаРаспоряжение.Время = ДоставкаТоваровКлиентСервер.ПредставлениеВремениДоставки(Выборка.ВремяС, Выборка.ВремяПо);
				
				СтрокаДляХраненияИдентификатора = ТоварыРаспоряженийКДоставке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДляХраненияИдентификатора, Выборка);
				СтрокаДляХраненияИдентификатора.ИдентификаторВДеревеРаспоряжений = СтрокаРаспоряжение.ПолучитьИдентификатор();
				
				Продолжить;
				
			КонецЕсли;
			
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				
				Номенклатура   = Неопределено;
				Характеристика = Неопределено;
				Назначение     = Неопределено;
				Серия          = Неопределено;
				
				ВесОбъемРаспоряженийПоДатам.Очистить();
				
				Пока Выборка.Следующий() Цикл
					
					Если Номенклатура      <> Выборка.Номенклатура
						Или Характеристика <> Выборка.Характеристика
						Или Назначение     <> Выборка.Назначение
						Или Серия          <> Выборка.Серия Тогда
						// перешли к другому товару
						
						КоличествоКРаспределению = Выборка.ВычетТоварыКДоставке;
						ОбъемКРаспределению      = Выборка.ВычетТоварыКДоставкеОбъем;
						ВесКРаспределению        = Выборка.ВычетТоварыКДоставкеВес;
						
						Номенклатура   = Выборка.Номенклатура;
						Характеристика = Выборка.Характеристика;
						Назначение     = Выборка.Назначение;
						Серия          = Выборка.Серия;
						
					КонецЕсли;
					
					ДобавляемоеКоличество = Макс(0, Выборка.НачальнаяПотребностьПоДатам - КоличествоКРаспределению);
					ДобавляемыйОбъем      = Макс(0, Выборка.НачальнаяПотребностьПоДатамОбъем - ОбъемКРаспределению);
					ДобавляемыйВес        = Макс(0, Выборка.НачальнаяПотребностьПоДатамВес - ВесКРаспределению);
					КоличествоКРаспределению = Макс(0, КоличествоКРаспределению - Выборка.НачальнаяПотребностьПоДатам);
					ОбъемКРаспределению      = Макс(0, ОбъемКРаспределению - Выборка.НачальнаяПотребностьПоДатамОбъем);
					ВесКРаспределению        = Макс(0, ВесКРаспределению - Выборка.НачальнаяПотребностьПоДатамВес);
				
					Если ДобавляемоеКоличество > 0 Тогда
						ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка);
						ТекущаяСтрокаВесОбъем.Вес    = ДобавляемыйВес;
						ТекущаяСтрокаВесОбъем.Объем  = ДобавляемыйОбъем;
						ТекущаяСтрокаВесОбъем.Количество = ДобавляемоеКоличество;
					КонецЕсли;
					
				КонецЦикла;
				
				ВесОбъемРаспоряженийПоДатам.Сортировать("Дата");
				
				ТекущаяДата = Неопределено;
				
				Для Каждого СтрокаВесОбъемДата Из ВесОбъемРаспоряженийПоДатам Цикл
					
					Если ЗначениеЗаполнено(ДатаРаспоряжений)
						И СтрокаВесОбъемДата.Дата > ДатаРаспоряжений Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаТовар = ТоварыРаспоряженийКДоставке.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТовар, Выборка);
					ЗаполнитьЗначенияСвойств(СтрокаТовар, СтрокаВесОбъемДата);
					
					Если ТекущаяДата <> СтрокаВесОбъемДата.Дата Тогда
						
						ТекущаяДата = СтрокаВесОбъемДата.Дата;
						
						Если ВыборочноеОбновление Тогда
							СтрокаРаспоряжение = КоллекцияТекущаяВетка.Вставить(ПозицияДляВставки);
							ПозицияДляВставки = ПозицияДляВставки + 1;
						Иначе
							СтрокаРаспоряжение = КоллекцияТекущаяВетка.Добавить();
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(СтрокаРаспоряжение, Выборка);
						СтрокаРаспоряжение.Дата = ТекущаяДата;
						СтрокаРаспоряжение.Вес = 0;
						СтрокаРаспоряжение.Объем = 0;
						
						СтрокаРаспоряжение.ПолучательОтправительПредставление = ДоставкаТоваровКлиентСервер.ПредставлениеПолучателяОтправителя(Выборка.ПолучательОтправитель, Выборка.Перевозчик);
						СтрокаРаспоряжение.Время = ДоставкаТоваровКлиентСервер.ПредставлениеВремениДоставки(Выборка.ВремяС, Выборка.ВремяПо);
						
						ИдентификаторВДеревеРаспоряжений = СтрокаРаспоряжение.ПолучитьИдентификатор();
						
					КонецЕсли;
					
					СтрокаТовар.ИдентификаторВДеревеРаспоряжений = ИдентификаторВДеревеРаспоряжений;
					
					СтрокаРаспоряжение.Вес = СтрокаРаспоряжение.Вес + СтрокаВесОбъемДата.Вес;
					СтрокаРаспоряжение.Объем = СтрокаРаспоряжение.Объем + СтрокаВесОбъемДата.Объем;
					
					ВесПоЗоне   = ВесПоЗоне   + СтрокаВесОбъемДата.Вес;
					ОбъемПоЗоне = ОбъемПоЗоне + СтрокаВесОбъемДата.Объем;
					
				КонецЦикла;
				
			КонецЦикла; // Склад
		КонецЦикла; // Распоряжение
		
		Если Не ВыборочноеОбновление Тогда
			ВесОбъем.ИтогоВес = ВесОбъем.ИтогоВес + ВесПоЗоне;
			ВесОбъем.ИтогоОбъем = ВесОбъем.ИтогоОбъем  + ОбъемПоЗоне;
		КонецЕсли;
		
		Если Не ЗонаГруппаИлиПустая Тогда
			
			Прервать;
			
		ИначеЕсли КоллекцияТекущаяВетка.Количество() = 0 Тогда
			
			КоллекцияРаспоряжений.Удалить(ТекущаяВетка);
			
		Иначе
			
			ТекущаяВетка.Вес   = ВесПоЗоне;
			ТекущаяВетка.Объем = ОбъемПоЗоне;
			ТекущаяВетка.ОформлениеСтроки = 5;
			ТекущаяВетка.Зона = Выборка.Зона;
			
		КонецЕсли; 
		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Форма, ВесОбъем);
	ЗаполнитьПризнакиОформленияРаспоряжений(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая);
	
КонецПроцедуры

// Заполняет признаки оформления в дереве распоряжений на доставку.
// Параметры:
//	РаспоряженияНаДоставку - ДанныеФормыДерево - распоряжения на доставку,
//  ЗонаГруппаИлиПустая - Булево - признак того, что в отборе по зоне доставки установлена группа или этот отбор не заполнен.
//
Процедура ЗаполнитьПризнакиОформленияРаспоряжений(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая) Экспорт
	
	ВерхниеСтрокиДерева = РаспоряженияНаДоставку.ПолучитьЭлементы();
	Если ЗонаГруппаИлиПустая Тогда
		Для каждого СтрокаЗонаДоставки из ВерхниеСтрокиДерева Цикл
			ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(СтрокаЗонаДоставки.ПолучитьЭлементы())
		КонецЦикла;
	Иначе
		ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(ВерхниеСтрокиДерева)
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет задание на перевозку в соответствии со связанными расходными ордерами на товары.
// Параметры:
//	ЗаданиеОбъект - ДокументОбъект.ЗаданиеНаПеревозку,
//	ТоварыКДоставке - ДанныеФормыКоллекция - коллекция с данными по доставляемым товарам.
//	Возвращаемое значение:
//		Булево - признак корректного перезаполнения.
//
Функция ПерезаполнитьЗаданиеНаПеревозкуПоРасходнымОрдерам(ЗаданиеОбъект, ТоварыКДоставке = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("ЕстьИзменения, ");
	
	Запрос = Новый Запрос(ТекстЗапросаЗаполненияЗаданияНаПеревозкуПоРасходнымОрдерам());
	Запрос.УстановитьПараметр("Ссылка", ЗаданиеОбъект.Ссылка);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуРаспоряжения", ЗаданиеОбъект.Распоряжения.Выгрузить());
	Запрос.УстановитьПараметр("ДатаВремяРейсаПланС", ЗаданиеОбъект.ДатаВремяРейсаПланС);
	СпособыДоставки = Новый Массив;
	СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	СпособыДоставки.Добавить(Перечисления.СпособыДоставки.ДоКлиента);
	СпособыДоставки.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками") Тогда
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчика);
	КонецЕсли;
	Запрос.УстановитьПараметр("СпособыДоставки", СпособыДоставки);
	Запрос.УстановитьПараметр("ДоставкаСиламиПеревозчикаПоАдресу", Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ЕстьИзменения = Ложь;
	
	// Изменяем
	Выборка = Результат[9].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРаспоряжений = ЗаданиеОбъект.Распоряжения[Выборка.НомерСтроки - 1];
		СтрокаМаршрута = ЗаданиеОбъект.Маршрут[Выборка.МаршрутНомерСтроки - 1];
		СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + (Выборка.Вес - СтрокаРаспоряжений.Вес);
		СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + (Выборка.Объем - СтрокаРаспоряжений.Объем);
		ЗаполнитьЗначенияСвойств(СтрокаРаспоряжений, Выборка);
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	// Удаляем строки распоряжений
	// Выборка упорядочена по убыванию номеров строк распоряжений
	Выборка = Результат[7].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРаспоряжений = ЗаданиеОбъект.Распоряжения[Выборка.НомерСтроки - 1];
		СтрокаМаршрута = ЗаданиеОбъект.Маршрут[Выборка.МаршрутНомерСтроки - 1];
		СтрокаМаршрута.Вес = СтрокаМаршрута.Вес - СтрокаРаспоряжений.Вес;
		СтрокаМаршрута.Объем = СтрокаМаршрута.Объем - СтрокаРаспоряжений.Объем;
		ЗаданиеОбъект.Распоряжения.Удалить(Выборка.НомерСтроки - 1);
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	// Удаляем пункты маршрута
	// Выборка упорядочена по убыванию номеров строк маршрута
	Выборка = Результат[8].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаданиеОбъект.Маршрут.Удалить(Выборка.МаршрутНомерСтроки - 1);
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	// Добавляем новые
	Выборка = Результат[10].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРаспоряжений = ЗаданиеОбъект.Распоряжения.Добавить();
		СтрокаМаршрута = ДобавитьИзменитьПунктПоРеквизитамДоставки(ЗаданиеОбъект.Маршрут, Выборка, ЗаданиеОбъект.ДатаВремяРейсаПланС);
		ЗаполнитьЗначенияСвойств(СтрокаРаспоряжений, Выборка);
		СтрокаРаспоряжений.КлючСвязи = СтрокаМаршрута.КлючСвязи;
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	ТаблицаТоварыКДоставке = Результат[11].Выгрузить();
	// Заполняем ТоварыКДоставке
	Если ТоварыКДоставке <> Неопределено Тогда
		
		ТоварыКДоставке.Загрузить(ТаблицаТоварыКДоставке);
		
	Иначе
		
		ЗаданиеОбъект.ДополнительныеСвойства.Вставить("ТоварыКДоставке", ТаблицаТоварыКДоставке);
		
	КонецЕсли;
	
	Для Каждого Стр Из ЗаданиеОбъект.Распоряжения Цикл
		Стр.ДоставляетсяПолностью = Ложь;
	КонецЦикла;
	ЗаполнитьПризнакДоставляетсяПолностью(ТаблицаТоварыКДоставке, ЗаданиеОбъект.Распоряжения);
	
	Возврат ЕстьИзменения;
	
КонецФункции

// Добавляет или изменяет пункт доставки в соответствии в реквизитами доставки распоряжения на доставку.
// Параметры:
//	КоллекцияМаршрут - ДанныеФормыКоллекция - коллекция, в которую добавляем пункт,
//	РеквизитыДоставки - Структура, ВыборкаИзРезультатаЗапроса, ДанныеФормыЭлементДерева - со свойствами
//		Адрес, Вес, Объем;
//	ДатаВремяРейсаПланС - Дата - дата планового начала рейса.
//
//	Возвращаемое значение:
//		ДанныеФормыЭлементДерева, ДанныеФормыЭлементКоллекции - строка-пункт доставки.
//
Функция ДобавитьИзменитьПунктПоРеквизитамДоставки(КоллекцияМаршрут, РеквизитыДоставки, ДатаВремяРейсаПланС) Экспорт
	
	СтруктураРеквизиты = Новый Структура("Адрес, АдресДоставки, Зона, ЗонаДоставки, ДополнительнаяИнформация, ДополнительнаяИнформацияПоДоставке, Вес, Объем, ВремяС, ВремяПо");
	ЗаполнитьЗначенияСвойств(СтруктураРеквизиты, РеквизитыДоставки);
	СтруктураРеквизиты.Адрес = ?(ЗначениеЗаполнено(СтруктураРеквизиты.АдресДоставки),СтруктураРеквизиты.АдресДоставки, СтруктураРеквизиты.Адрес);
	СтруктураРеквизиты.Зона = ?(ЗначениеЗаполнено(СтруктураРеквизиты.ЗонаДоставки),СтруктураРеквизиты.ЗонаДоставки, СтруктураРеквизиты.Зона);
	СтруктураРеквизиты.ДополнительнаяИнформация = ?(ЗначениеЗаполнено(СтруктураРеквизиты.ДополнительнаяИнформацияПоДоставке),СтруктураРеквизиты.ДополнительнаяИнформацияПоДоставке, СтруктураРеквизиты.ДополнительнаяИнформация);
	
	АдресСравнения = Врег(СокрЛП(СтруктураРеквизиты.Адрес));
	АдресСравнения = СтрЗаменить(АдресСравнения," ","");
	
	Для Каждого СтрокаМаршрута Из КоллекцияМаршрут Цикл
		
		АдресСравненияМаршрут = СтрЗаменить(Врег(СокрЛП(СтрокаМаршрута.Адрес))," ","");
					
		Если АдресСравнения = АдресСравненияМаршрут Тогда
			
			СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + СтруктураРеквизиты.Вес;
			СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + СтруктураРеквизиты.Объем;
			СтрокаМаршрута.ДополнительнаяИнформация = ДополнитьТекстРаспоряжениемИДопИнфо(СтрокаМаршрута.ДополнительнаяИнформация,
				СтруктураРеквизиты.ДополнительнаяИнформация,РеквизитыДоставки.Распоряжение);
				
			Возврат СтрокаМаршрута;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаМаршрута = КоллекцияМаршрут.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаМаршрута, СтруктураРеквизиты);
	СтрокаМаршрута.КлючСвязи = Новый УникальныйИдентификатор;
	
	СтрокаМаршрута.ДополнительнаяИнформация = ДополнитьТекстРаспоряжениемИДопИнфо("",
				СтруктураРеквизиты.ДополнительнаяИнформация,РеквизитыДоставки.Распоряжение);
	
	Если КоллекцияМаршрут.Количество() = 1 Тогда
		
		СтрокаМаршрута.ВремяС = ДатаВремяРейсаПланС;
		СтрокаМаршрута.ВремяПо = СтрокаМаршрута.ВремяС;
		
	Иначе
		
		СтрокаМаршрута.ВремяС = КоллекцияМаршрут[КоллекцияМаршрут.Индекс(СтрокаМаршрута) - 1].ВремяПо;
		СтрокаМаршрута.ВремяПо = СтрокаМаршрута.ВремяС;
	
	КонецЕсли;
	
	Если ТипЗнч(КоллекцияМаршрут) = Тип("ДанныеФормыКоллекция") Тогда
		СтрокаМаршрута.ВремяСБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаМаршрута.ВремяС);
		СтрокаМаршрута.ВремяПоБезДаты = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаМаршрута.ВремяПо);
	КонецЕсли;
	
	Возврат СтрокаМаршрута;
	
КонецФункции

Функция ДополнитьТекстРаспоряжениемИДопИнфо(Знач ДопИнфоИзменяемое, ДопИнфоДляДобавления, Распоряжение)
	
	Результат = ДопИнфоИзменяемое;
	
	Если Не ПустаяСтрока(ДопИнфоДляДобавления) Тогда		
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Номер, Дата");
		ТекстДопИнфо = НСтр("ru='%Распоряжение %Номер от %Дата: %ДопИнфо';uk='%Распоряжение %Номер від %Дата: %ДопИнфо'");
		ТекстДопИнфо = СтрЗаменить(ТекстДопИнфо,"%Распоряжение",Строка(ТипЗнч(Распоряжение)));
		ТекстДопИнфо = СтрЗаменить(ТекстДопИнфо,"%Номер",
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Реквизиты.Номер));
		ТекстДопИнфо = СтрЗаменить(ТекстДопИнфо, "%Дата", Формат(Реквизиты.Дата,"ДФ=dd.MM.yy"));
		ТекстДопИнфо = СтрЗаменить(ТекстДопИнфо, "%ДопИнфо", ДопИнфоДляДобавления);
		
		Если СтрНайти(ДопИнфоИзменяемое, ТекстДопИнфо) = 0 Тогда
			Результат = Результат + ?(ЗначениеЗаполнено(Результат), Символы.ПС, "") + ТекстДопИнфо;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает и возвращает максимальное время планируемого окончания доставки по пунктам
// Параметры:
//	Объект - ДокументОбъект.ЗаданиеНаПеревозку, ДанныеФормыСтруктура
//
Функция МаксимальноеВремяПо(Объект) Экспорт
	
	Если Объект.Маршрут.Количество() <> 0 Тогда
		ТаблицаМаршрута = Объект.Маршрут.Выгрузить();
		ТаблицаМаршрута.Сортировать("ВремяПо Убыв");
		
		Возврат Макс(Объект.ДатаВремяРейсаПланС, ТаблицаМаршрута[0].ВремяПо);
	Иначе
		Возврат Объект.ДатаВремяРейсаПланС;
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу значений с колонками, скопированными из переданной коллекции
// Параметры:
//	Коллекция - ДанныеФормыДерево, ДанныеФормыКоллекция, ТаблицаЗначений,
//	ИменаКолонок - Строка - имена копируемых колонок, перечисленные через запятую
// Возвращаемое значение:
//	ТаблицаЗначений.
//
Функция СкопироватьКолонкиКоллекции(Коллекция, ИменаКолонок) Экспорт
	
	Если ТипЗнч(Коллекция) = Тип("ДанныеФормыДерево") Тогда
		ЭлементыДерева = Коллекция.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() > 0 Тогда
			СтрокаДляКопированияТипов = ЭлементыДерева[0];
		Иначе
			КоллекцияДляКопирования = ДанныеФормыВЗначение(Коллекция, Тип("ДеревоЗначений")).Строки;
			СтрокаДляКопированияТипов = КоллекцияДляКопирования.Добавить();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ДанныеФормыКоллекция") Тогда
		Если Коллекция.Количество() > 0 Тогда
			СтрокаДляКопированияТипов = Коллекция[0];
		Иначе
			Возврат ДанныеФормыВЗначение(Коллекция, Тип("ТаблицаЗначений"));
		КонецЕсли;
	Иначе // ТаблицаЗначений
		Возврат Коллекция.СкопироватьКолонки();
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура(ИменаКолонок);
	ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаДляКопированияТипов);
	
	Таблица = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив(1);
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если КлючИЗначение.Ключ = "Распоряжение" Тогда
			Таблица.Колонки.Добавить(КлючИЗначение.Ключ, Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип);
		ИначеЕсли  КлючИЗначение.Ключ = "ПолучательОтправитель" Тогда
			Таблица.Колонки.Добавить(КлючИЗначение.Ключ, Метаданные.ОпределяемыеТипы.ОтправительПолучательДоставки.Тип);
		Иначе
			МассивТипов[0] = ТипЗнч(КлючИЗначение.Значение);
			Таблица.Колонки.Добавить(КлючИЗначение.Ключ, Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции

// Добавляет или замещает записи в регистре сведений ТоварыКДоставке по заданию на перевозку
// Параметры:
//	ТоварыРаспоряжений - ТаблицаЗначений, ДанныеФормыКоллекция - источник данных для заполнения;
//	ЗаданиеНаПеревозку - ДокументСсылка.ЗаданиеНаПеревозку;
//
Процедура ЗаписатьТоварыКДоставке(ТоварыРаспоряжений, ТЧРаспоряжения, ЗаданиеНаПеревозку) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад,
	|	ИСТИНА КАК ВсеТовары
	|ПОМЕСТИТЬ ПолностьюДоставляемыеРаспоряжения
	|ИЗ
	|	&ПолностьюДоставляемыеРаспоряжения КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.ВсеТовары,
	|	ТоварыКДоставке.ПолучательОтправитель
	|ПОМЕСТИТЬ ВТТоварыЗадания
	|ИЗ
	|	&ТоварыКДоставке КАК ТоварыКДоставке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТоварыЗадания.Распоряжение,
	|	ВТТоварыЗадания.Склад,
	|	ВТТоварыЗадания.ВсеТовары
	|ПОМЕСТИТЬ РаспоряженияЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК ВТТоварыЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия,
	|	СУММА(Т.Количество) КАК Количество,
	|	МАКСИМУМ(Т.ВсеТовары) КАК ВсеТовары
	|ПОМЕСТИТЬ ТоварыЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад
	|ПОМЕСТИТЬ ИзмененныеРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
	|		ТоварыКДоставке.Склад КАК Склад,
	|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
	|		ТоварыКДоставке.Характеристика КАК Характеристика,
	|		ТоварыКДоставке.Назначение КАК Назначение,
	|		ТоварыКДоставке.Серия КАК Серия,
	|		ТоварыКДоставке.Количество КАК Количество,
	|		1 КАК СчетИзмененныхСтрок
	|	ИЗ
	|		РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|	ГДЕ
	|		ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыЗадания.Распоряжение,
	|		ТоварыЗадания.Склад,
	|		ТоварыЗадания.Номенклатура,
	|		ТоварыЗадания.Характеристика,
	|		ТоварыЗадания.Назначение,
	|		ТоварыЗадания.Серия,
	|		-ТоварыЗадания.Количество,
	|		-1
	|	ИЗ
	|		ТоварыЗадания КАК ТоварыЗадания) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	Т.Серия,
	|	Т.Номенклатура,
	|	Т.Склад
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Т.Количество) <> 0
	|		ИЛИ СУММА(Т.СчетИзмененныхСтрок) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененныеРаспоряжения.Распоряжение,
	|	ИзмененныеРаспоряжения.Склад
	|ПОМЕСТИТЬ ИзмененныеРаспоряженияСвернутые
	|ИЗ
	|	ИзмененныеРаспоряжения КАК ИзмененныеРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ИзмененныеРаспоряженияСвернутые.Распоряжение,
	|	ИзмененныеРаспоряженияСвернутые.Склад,
	|	ТоварыЗадания.Номенклатура,
	|	ТоварыЗадания.Характеристика,
	|	ТоварыЗадания.Назначение,
	|	ТоварыЗадания.Серия,
	|	ТоварыЗадания.Количество,
	|	ЕСТЬNULL(ПолностьюДоставляемыеРаспоряжения.ВсеТовары, ТоварыЗадания.ВсеТовары) КАК ВсеТовары,
	|	ТоварыЗадания.ПолучательОтправитель,
	|	ВЫБОР
	|		КОГДА ТоварыЗадания.Распоряжение ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	ИзмененныеРаспоряженияСвернутые КАК ИзмененныеРаспоряженияСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	|		ПО ИзмененныеРаспоряженияСвернутые.Распоряжение = ТоварыЗадания.Распоряжение
	|			И ИзмененныеРаспоряженияСвернутые.Склад = ТоварыЗадания.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПолностьюДоставляемыеРаспоряжения КАК ПолностьюДоставляемыеРаспоряжения
	|		ПО ИзмененныеРаспоряженияСвернутые.Распоряжение = ПолностьюДоставляемыеРаспоряжения.Распоряжение
	|			И ИзмененныеРаспоряженияСвернутые.Склад = ПолностьюДоставляемыеРаспоряжения.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыЗадания.Распоряжение,
	|	ТоварыЗадания.Склад";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ПолностьюДоставляемыеРаспоряжения",
		ТЧРаспоряжения.Выгрузить(Новый Структура("ДоставляетсяПолностью", Истина), "Распоряжение,Склад"));
	Запрос.УстановитьПараметр("ТоварыКДоставке", ТоварыРаспоряжений);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			НаборЗаписей = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаданиеНаПеревозку.Установить(ЗаданиеНаПеревозку);
			НаборЗаписей.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
			НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
			Если Не Выборка.Удалить Тогда
				Если Выборка.ВсеТовары Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка,"ЗаданиеНаПеревозку,ПолучательОтправитель,Склад,Распоряжение,ВсеТовары");
				Иначе
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//Рассчитывает, полностью ли доставляется распоряжение по складу и заполняет соответствующий признак
// Параметры:
//	ТоварыРаспоряжений - ТаблицаЗначений - товары распоряжений на доставку;
//	ТЧРаспоряжения - ДанныеФормыКоллекция - табличная часть с распоряжениями для заполнения признака ДоставляетсяПолностью;
//	ЗаданиеНаПеревозку - ДокументСсылка.ЗаданиеНаПеревозку;
//
Процедура ЗаполнитьПризнакДоставляетсяПолностью(ТоварыРаспоряжений,
	ТЧРаспоряжения, СтрокиТЧКЗаполнению = Неопределено, ЗаданиеНаПеревозку = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.НомерСтроки,
	|	Т.Распоряжение,
	|	Т.Склад,
	|	Т.ДоставляетсяПолностью
	|ПОМЕСТИТЬ ТЧРаспоряжения
	|ИЗ
	|	&ТЧРаспоряжения КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.ВсеТовары,
	|	ТоварыКДоставке.ПолучательОтправитель
	|ПОМЕСТИТЬ ВТТоварыЗадания
	|ИЗ
	|	&ТоварыКДоставке КАК ТоварыКДоставке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТоварыЗадания.Распоряжение,
	|	ВТТоварыЗадания.Склад,
	|	ВТТоварыЗадания.ВсеТовары
	|ПОМЕСТИТЬ РаспоряженияЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК ВТТоварыЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение КАК Распоряжение,
	|	Т.ПолучательОтправитель КАК ПолучательОтправитель,
	|	Т.Склад КАК Склад,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Назначение КАК Назначение,
	|	Т.Серия КАК Серия,
	|	СУММА(Т.Количество) КАК Количество,
	|	МАКСИМУМ(Т.ВсеТовары) КАК ВсеТовары
	|ПОМЕСТИТЬ ТоварыЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Склад";
	
	ШаблонТекстаЗапросаПоРаспоряжению =
	"ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.Партнер КАК ПолучательОтправитель,
	|	ТЧ.Склад КАК Склад,
	|	ТЧ.Номенклатура,
	|	ТЧ.Характеристика,
	|	ТЧ.Назначение КАК Назначение,
	|	ТЧ.Серия,
	|	ТЧ.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыРаспоряжений
	|ИЗ
	|	Документ.ЗаказКлиента КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТЧ
	|		ПО Шапка.Ссылка = ТЧ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияЗадания КАК РаспоряженияЗадания
	|		ПО (РаспоряженияЗадания.Распоряжение = Шапка.Ссылка)
	|			И (РаспоряженияЗадания.Склад = ТЧ.Склад)
	|			И (НЕ РаспоряженияЗадания.ВсеТовары)";
	
	ТекстРаспоряженияНаДоставку = "";
	
	ЭтоПервый = Истина;
	ОписанияРаспоряженийНаДоставку = ДоставкаТоваровКлиентСервер.ОписанияРаспоряженийНаДоставку();
	Для Каждого Описание Из ОписанияРаспоряженийНаДоставку Цикл
		
		ТекстПоРаспоряжению = СтрЗаменить(ШаблонТекстаЗапросаПоРаспоряжению, "ЗаказКлиента", Описание.Имя);
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, ".Товары",                    "." + Описание.ИмяТЧ);
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "Партнер КАК ПолучательОтправитель",     Описание.ИмяПоляПолучательОтправитель + " КАК ПолучательОтправитель");
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ТЧ.Склад",                   Описание.ИмяПоляСклад);
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ТЧ.Назначение",              Описание.ИмяПоляНазначение);
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ТЧ.Серия",                   Описание.ИмяПоляСерия);
		
		Если ЭтоПервый Тогда
			ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			ЭтоПервый = Ложь;
		Иначе
			ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ПОМЕСТИТЬ ТоварыРаспоряжений","");
			ТекстРаспоряженияНаДоставку = ТекстРаспоряженияНаДоставку + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстРаспоряженияНаДоставку = ТекстРаспоряженияНаДоставку + ТекстПоРаспоряжению;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + РазделительЗапроса() + ТекстРаспоряженияНаДоставку + РазделительЗапроса();
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиПоРаспоряжению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыЗадания.Распоряжение КАК Распоряжение,
	|		ТоварыЗадания.ПолучательОтправитель КАК ПолучательОтправитель,
	|		ТоварыЗадания.Склад КАК Склад,
	|		ТоварыЗадания.Номенклатура КАК Номенклатура,
	|		ТоварыЗадания.Характеристика КАК Характеристика,
	|		ТоварыЗадания.Назначение КАК Назначение,
	|		ТоварыЗадания.Серия КАК Серия,
	|		-ТоварыЗадания.Количество КАК Количество
	|	ИЗ
	|		ТоварыЗадания КАК ТоварыЗадания
	|	ГДЕ
	|		НЕ ТоварыЗадания.ВсеТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.ПолучательОтправитель,
	|		Т.Склад,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		Т.Назначение,
	|		Т.Серия,
	|		Т.Количество
	|	ИЗ
	|		ТоварыРаспоряжений КАК Т) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	Т.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспоряженияЗадания.Распоряжение,
	|	РаспоряженияЗадания.Склад,
	|	ИСТИНА КАК ВсеТовары
	|ПОМЕСТИТЬ ПолностьюДоставляемыеРаспоряжения
	|ИЗ
	|	РаспоряженияЗадания КАК РаспоряженияЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоРаспоряжению КАК ОстаткиПоРаспоряжению
	|		ПО РаспоряженияЗадания.Распоряжение = ОстаткиПоРаспоряжению.Распоряжение
	|			И РаспоряженияЗадания.Склад = ОстаткиПоРаспоряжению.Склад
	|ГДЕ
	|	ОстаткиПоРаспоряжению.Распоряжение ЕСТЬ NULL " + РазделительЗапроса();
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ТЧРаспоряжения.НомерСтроки
	|ИЗ
	|	ПолностьюДоставляемыеРаспоряжения КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЧРаспоряжения КАК ТЧРаспоряжения
	|		ПО (ТЧРаспоряжения.Распоряжение = Т.Распоряжение)
	|			И (ТЧРаспоряжения.Склад = Т.Склад)
	|			И НЕ ТЧРаспоряжения.ДоставляетсяПолностью";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ТоварыКДоставке", ТоварыРаспоряжений);
	
	Если СтрокиТЧКЗаполнению = Неопределено Тогда
		Запрос.УстановитьПараметр("ТЧРаспоряжения",
			ТЧРаспоряжения.Выгрузить(,"НомерСтроки, Распоряжение, Склад, ДоставляетсяПолностью"));
	Иначе
		Запрос.УстановитьПараметр("ТЧРаспоряжения",
			ТЧРаспоряжения.Выгрузить(СтрокиТЧКЗаполнению,"НомерСтроки, Распоряжение, Склад, ДоставляетсяПолностью"));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЧРаспоряжения[Выборка.НомерСтроки - 1].ДоставляетсяПолностью = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив непроверяемых реквизитов распоряжения на доставку в зависимости от способа доставки
//
// Параметры:
//  ДокументОбъект					 - объект	 - распоряжение, в котором проверяется заполнение реквизитов
//  МассивНепроверяемыхРеквизитов	 - Массив	 - массив реквизитов, заполнение которых не обязательно
//  Отказ							 - Булево	 - 
//  НакладнаяПоЗаказам				 - Булево	 - Истина если ДокументОбъект является накладной и она по заказу, иначе Ложь
Процедура ПроверитьЗаполнениеРеквизитовДоставки(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, НакладнаяПоЗаказам = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие реквизитов доставки заказов и накладных
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	Поле = "СпособДоставки";
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками") Тогда
		
		Если НакладнаяПоЗаказам
			И ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
			// Проверим, что в заказах по накладной указан корректный способ доставки
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК Ссылка
			|ИЗ
			|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ) КАК ТоварыКОтгрузкеОбороты
			|ГДЕ
			|	ТоварыКОтгрузкеОбороты.Регистратор = &Ссылка
			|	И ТоварыКОтгрузкеОбороты.ДокументОтгрузки.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = НСтр("ru='Способ доставки в связанном документе %Ссылка% не соответствует указанному в накладной.';uk='Спосіб доставки у зв''язаному документі %Ссылка% не відповідає зазначеному в накладній.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
			КонецЦикла;
			
		Иначе
			// Проверим, что в накладных по заказу указан корректный способ доставки
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТоварыКОтгрузкеОбороты.Регистратор КАК Ссылка
			|ИЗ
			|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ДокументОтгрузки = &Ссылка) КАК ТоварыКОтгрузкеОбороты
			|ГДЕ
			|	ТоварыКОтгрузкеОбороты.Регистратор <> ТоварыКОтгрузкеОбороты.ДокументОтгрузки
			|	И ТоварыКОтгрузкеОбороты.КОформлениюРасход > 0
			|	И (&СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
			|				И ТоварыКОтгрузкеОбороты.Регистратор.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
			|			ИЛИ &СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
			|				И ТоварыКОтгрузкеОбороты.Регистратор.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика))";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			Запрос.УстановитьПараметр("СпособДоставки",ДокументОбъект.СпособДоставки);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = НСтр("ru='Способ доставки в связанном документе %Ссылка% не соответствует указанному в заказе.';uk='Спосіб доставки у зв''язаному документі %Ссылка% не відповідає зазначеному в замовленні.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументОбъект, "ОсобыеУсловияПеревозки")
		И Не ДокументОбъект.ОсобыеУсловияПеревозки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОсобыеУсловияПеревозкиОписание");
	КонецЕсли;
	
	// Доставка не требуется
	Если (НакладнаяПоЗаказам И Не ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика)
		  Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз
		  Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ПеревозчикПартнер");
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		
	// Доставка от нас
	
	ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		
	ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
		Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки
		
	// Доставка к нам
	
		Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя
		Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ПеревозчикПартнер");
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		
	ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада Тогда

		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		
	ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении реквизита "Особые условия перевозки"
//
// Параметры:
//  Форма - Управляемая форма
//
Процедура ОсобыеУсловияПеревозкиПриИзменении(ЭлементыФормы, ДокОбъект) Экспорт
	
	Если НЕ ДокОбъект.ОсобыеУсловияПеревозки Тогда
		ДокОбъект.ОсобыеУсловияПеревозкиОписание = "";
	КонецЕсли;
	
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

Процедура ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект)
	
	Если ЭлементыФормы.Найти("ОсобыеУсловияПеревозкиОписание") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОсобыеУсловияПеревозки = ДокОбъект.ОсобыеУсловияПеревозки;
	ЭлементыФормы.ОсобыеУсловияПеревозкиОписание.Доступность = ОсобыеУсловияПеревозки;
	Если ЭлементыФормы.Найти("ОсобыеУсловияПеревозкиОписание1") <> Неопределено Тогда
		ЭлементыФормы.ОсобыеУсловияПеревозкиОписание1.Доступность = ОсобыеУсловияПеревозки;
	КонецЕсли;
	Если ЭлементыФормы.Найти("ОсобыеУсловияПеревозкиОписание2") <> Неопределено Тогда
		ЭлементыФормы.ОсобыеУсловияПеревозкиОписание2.Доступность = ОсобыеУсловияПеревозки;
	КонецЕсли;
	Если ЭлементыФормы.Найти("ОсобыеУсловияПеревозкиОписаниеДоставкаПеревозчиком") <> Неопределено Тогда
		ЭлементыФормы.ОсобыеУсловияПеревозкиОписаниеДоставкаПеревозчиком.Доступность = ОсобыеУсловияПеревозки;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет контактную информацию телефонами контактного лица, перевозчика, отправителя или получателя
//
// Параметры:
//  Объект - ДанныеФормыСтруктура
//
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Объект) Экспорт
	
	ТипыКИ = Новый Массив;
	ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ИсточникиКИ = Новый Массив;
	КонтактноеЛицо = Неопределено;
	Объект.Свойство("КонтактноеЛицо", КонтактноеЛицо);
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ИсточникиКИ.Добавить(КонтактноеЛицо);
	КонецЕсли;
	
	СпособДоставки = Неопределено;
	Объект.Свойство("СпособДоставки",СпособДоставки);
	
	Если СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи
		Или СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
		ПеревозчикПартнер = Объект.ПеревозчикПартнер;
		ИсточникиКИ.Добавить(ПеревозчикПартнер);
	Иначе
		ПолучательОтправитель = ПолучательОтправитель(Объект);
		ИсточникиКИ.Добавить(ПолучательОтправитель.Значение);
	КонецЕсли;
	
	Для Каждого Источник Из ИсточникиКИ Цикл
		Если Не ЗначениеЗаполнено(Источник) Тогда
			Продолжить;
		КонецЕсли;
		ИсточникПараметр = Новый Массив;
		ИсточникПараметр.Добавить(Источник);
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ИсточникПараметр, ТипыКИ);
		КонтактнаяИнформацияЗаполнена = Ложь;
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			ТекстТелефоны = Строка(Источник) + ": ";
			Для Каждого Стр Из КонтактнаяИнформация Цикл
				Если ЗначениеЗаполнено(Стр.Представление) Тогда
					КонтактнаяИнформацияЗаполнена = Истина;
					ТекстТелефоны = ТекстТелефоны + Стр.Представление + ", ";
				КонецЕсли;
			КонецЦикла;
			ТекстТелефоны = Лев(ТекстТелефоны, СтрДлина(ТекстТелефоны)-2) + ".";
			Если КонтактнаяИнформацияЗаполнена
				И СтрНайти(Объект.ДополнительнаяИнформацияПоДоставке, ТекстТелефоны) = 0 Тогда
				Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформацияПоДоставке) Тогда
					Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + Символы.ПС;
				КонецЕсли;
				Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + ТекстТелефоны;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


// Обработчик обновления BAS УТ 3.2.2
Процедура ЗаполнитьСпособДоставкиПоУмолчанию(Параметры, МетаданныеДокумента) Экспорт
	
	ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();
    
    Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
            
			ЭлементБлокировки = Блокировка.Добавить("Документ." + МетаданныеДокумента.Имя);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
            
            Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры


#КонецОбласти

Функция ТекстЗапросаЗаполненияЗаданияНаПеревозкуПоРасходнымОрдерам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаданияНаПеревозкуРаспоряжения.Распоряжение КАК Распоряжение,
	|	ЗаданияНаПеревозкуРаспоряжения.Склад КАК Склад,
	|	ЗаданияНаПеревозкуРаспоряжения.НомерСтроки КАК НомерСтроки,
	|	ЗаданияНаПеревозкуРаспоряжения.Вес КАК Вес,
	|	ЗаданияНаПеревозкуРаспоряжения.Объем КАК Объем,
	|	ЗаданияНаПеревозкуРаспоряжения.ДоставляетсяПолностью КАК ДоставляетсяПолностью,
	|	ЗаданияНаПеревозкуРаспоряжения.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ЗаданияНаПеревозкуРаспоряжения
	|ИЗ
	|	&ЗаданиеНаПеревозкуРаспоряжения КАК ЗаданияНаПеревозкуРаспоряжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйОрдерНаТовары.Ссылка,
	|	РасходныйОрдерНаТовары.Склад
	|ПОМЕСТИТЬ ОрдераФильтр
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|	И РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрдеров.Номенклатура,
	|	ТоварыОрдеров.Характеристика,
	|	ТоварыОрдеров.Назначение,
	|	ТоварыОрдеров.Серия,
	|	ТоварыОрдеров.Распоряжение,
	|	СУММА(ТоварыОрдеров.Количество) КАК Количество,
	|	ОрдераФильтр.Склад
	|ПОМЕСТИТЬ ТоварыОрдеров
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыОрдеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрдераФильтр КАК ОрдераФильтр
	|		ПО ТоварыОрдеров.Ссылка = ОрдераФильтр.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрдеров.Распоряжение,
	|	ТоварыОрдеров.Назначение,
	|	ТоварыОрдеров.Характеристика,
	|	ТоварыОрдеров.Номенклатура,
	|	ТоварыОрдеров.Серия,
	|	ОрдераФильтр.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение,
	|	ОрдераФильтр.Склад
	|ПОМЕСТИТЬ РаспоряженияВОрдерах
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрдераФильтр КАК ОрдераФильтр
	|		ПО (ОрдераФильтр.Ссылка = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Назначение КАК Назначение,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.Серия КАК Серия,
	|	ТоварыКОтгрузке.Получатель КАК Получатель,
	|	ТоварыКОтгрузке.КОтгрузкеПриход КАК КОтгрузкеПриход,
	|	ТоварыОрдеров.Распоряжение КАК Распоряжение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыОрдеров.Количество, 0) > ТоварыКОтгрузке.КОтгрузкеПриход
	|			ТОГДА ТоварыКОтгрузке.КОтгрузкеПриход
	|		ИНАЧЕ ТоварыОрдеров.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыОрдеров.Количество, 0) > ТоварыКОтгрузке.КОтгрузкеПриход
	|			ТОГДА ТоварыКОтгрузке.КОтгрузкеПриход * &ТекстЗапросаВесУпаковки
	|		ИНАЧЕ ТоварыОрдеров.Количество * &ТекстЗапросаВесУпаковки
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыОрдеров.Количество, 0) > ТоварыКОтгрузке.КОтгрузкеПриход
	|			ТОГДА ТоварыКОтгрузке.КОтгрузкеПриход * &ТекстЗапросаОбъемУпаковки
	|		ИНАЧЕ ТоварыОрдеров.Количество * &ТекстЗапросаОбъемУпаковки
	|	КОНЕЦ КАК Объем
	|ПОМЕСТИТЬ ТоварыОрдеровИКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
	|			,
	|			,
	|			,
	|			(ДокументОтгрузки, Склад) В
	|				(ВЫБРАТЬ
	|					РаспоряженияВОрдерах.Распоряжение,
	|					РаспоряженияВОрдерах.Склад
	|				ИЗ
	|					РаспоряженияВОрдерах)) КАК ТоварыКОтгрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОрдеров КАК ТоварыОрдеров
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ТоварыОрдеров.Распоряжение
	|			И ТоварыКОтгрузке.Склад = ТоварыОрдеров.Склад
	|			И ТоварыКОтгрузке.Номенклатура = ТоварыОрдеров.Номенклатура
	|			И ТоварыКОтгрузке.Характеристика = ТоварыОрдеров.Характеристика
	|			И ТоварыКОтгрузке.Назначение = ТоварыОрдеров.Назначение
	|			И ТоварыКОтгрузке.Серия = ТоварыОрдеров.Серия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ТоварыКОтгрузке.Номенклатура)
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузкеПриход > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрдеровИКОтгрузке.Склад,
	|	ТоварыОрдеровИКОтгрузке.Распоряжение,
	|	ТоварыОрдеровИКОтгрузке.Получатель,
	|	СУММА(ТоварыОрдеровИКОтгрузке.Вес) КАК Вес,
	|	СУММА(ТоварыОрдеровИКОтгрузке.Объем) КАК Объем
	|ПОМЕСТИТЬ ВесОбъемПоРаспоряжениям
	|ИЗ
	|	ТоварыОрдеровИКОтгрузке КАК ТоварыОрдеровИКОтгрузке
	|ГДЕ
	|	ТоварыОрдеровИКОтгрузке.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрдеровИКОтгрузке.Склад,
	|	ТоварыОрдеровИКОтгрузке.Распоряжение,
	|	ТоварыОрдеровИКОтгрузке.Получатель" + РазделительЗапроса();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	
	ШаблонТекстаЗапросаПоРаспоряжению =
	"ВЫБРАТЬ
	|	РаспоряженияНаДоставку.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Ссылка) КАК ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки = &ДоставкаСиламиПеревозчикаПоАдресу
	|			ТОГДА РаспоряженияНаДоставку.АдресДоставкиПеревозчика
	|		ИНАЧЕ РаспоряженияНаДоставку.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	РаспоряженияНаДоставку.СпособДоставки КАК СпособДоставки,
	|	РаспоряженияНаДоставку.ЗонаДоставки КАК ЗонаДоставки,
	|	РаспоряженияНаДоставку.ПеревозчикПартнер КАК ПеревозчикПартнер,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки = &ДоставкаСиламиПеревозчикаПоАдресу
	|			ТОГДА РаспоряженияНаДоставку.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ РаспоряженияНаДоставку.АдресДоставкиЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	РаспоряженияНаДоставку.ВремяДоставкиС КАК ВремяДоставкиС,
	|	РаспоряженияНаДоставку.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	Документ.ЗаказКлиента КАК РаспоряженияНаДоставку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияВОрдерах КАК РаспоряженияВОрдерах
	|		ПО (РаспоряженияВОрдерах.Распоряжение = РаспоряженияНаДоставку.Ссылка)
	|ГДЕ
	|	РаспоряженияНаДоставку.СпособДоставки В(&СпособыДоставки)
	|	И РаспоряженияНаДоставку.Проведен";
	
	ЭтоПервый = Истина;
	
	Для Каждого ТипРаспоряжениеНаДоставку Из Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип.Типы() Цикл
		// Текст запроса собирается по документам, а не по регистру СостоянияИРеквизитыДоставки,
		// чтобы поддержать перезаполнение закрытых заданий,
		// т.к. данные регистра по распоряжениям очищаются после закрытия заданий на перевозку по этим распоряжениям
		МетаданныеРаспоряжения = Метаданные.НайтиПоТипу(ТипРаспоряжениеНаДоставку);
		ПолноеИмяДокумента = МетаданныеРаспоряжения.ПолноеИмя();
		ТекстЗапросаПоРаспоряжению = СтрЗаменить(ШаблонТекстаЗапросаПоРаспоряжению, "Документ.ЗаказКлиента", ПолноеИмяДокумента);
		
		Если ЭтоПервый Тогда
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "КАК ДополнительнаяИнформацияПоДоставке",
				"КАК ДополнительнаяИнформацияПоДоставке
				|ПОМЕСТИТЬ РаспоряженияНаДоставку");
			
			ЭтоПервый = Ложь;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("АдресДоставкиПеревозчика", МетаданныеРаспоряжения) Тогда
			// Не во всех распоряжениях полный состав реквизитов доставки
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "АдресДоставкиПеревозчика", "АдресДоставки");
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "АдресДоставкиПеревозчикаЗначенияПолей", "АдресДоставкиЗначенияПолей");
		КонецЕсли;
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ЗонаДоставки", МетаданныеРаспоряжения) Тогда
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РаспоряженияНаДоставку.ЗонаДоставки", "ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)");
		КонецЕсли;
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ВремяДоставкиС", МетаданныеРаспоряжения) Тогда
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РаспоряженияНаДоставку.ВремяДоставкиС", "ДАТАВРЕМЯ(1,1,1)");
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РаспоряженияНаДоставку.ВремяДоставкиПо", "ДАТАВРЕМЯ(1,1,1)");
		КонецЕсли;
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ПеревозчикПартнер", МетаданныеРаспоряжения) Тогда
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РаспоряженияНаДоставку.ПеревозчикПартнер", "ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)");
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоРаспоряжению;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспоряженияНаДоставку.Ссылка" + РазделительЗапроса() + 
	"ВЫБРАТЬ
	|	РаспоряженияУдалить.НомерСтроки КАК НомерСтроки,
	|	Маршрут.НомерСтроки КАК МаршрутНомерСтроки
	|ИЗ
	|	ЗаданияНаПеревозкуРаспоряжения КАК РаспоряженияУдалить
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО РаспоряженияУдалить.Распоряжение = ВесОбъемПоРаспоряжениям.Распоряжение
	|			И РаспоряженияУдалить.Склад = ВесОбъемПоРаспоряжениям.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК Маршрут
	|		ПО (Маршрут.Ссылка = &Ссылка)
	|			И (РаспоряженияУдалить.КлючСвязи = Маршрут.КлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СправочникСклады
	|		ПО (СправочникСклады.Ссылка = РаспоряженияУдалить.Склад)
	|			И (СправочникСклады.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (&ДатаВремяРейсаПланС >= СправочникСклады.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|ГДЕ
	|	ВесОбъемПоРаспоряжениям.Распоряжение ЕСТЬ NULL
	|	И НЕ РаспоряженияУдалить.Распоряжение ССЫЛКА Документ.ПоручениеЭкспедитору
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспоряженияУдалить.НомерСтроки,
	|	Маршрут.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаспоряженияУдалить.НомерСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиМаршрутаУдалить.НомерСтроки КАК МаршрутНомерСтроки
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Маршрут КАК СтрокиМаршрутаУдалить
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаданияНаПеревозкуРаспоряжения КАК ЗаданияНаПеревозкуРаспоряжения
	|		ПО (СтрокиМаршрутаУдалить.Ссылка = &Ссылка)
	|			И (ЗаданияНаПеревозкуРаспоряжения.КлючСвязи = СтрокиМаршрутаУдалить.КлючСвязи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО (ЗаданияНаПеревозкуРаспоряжения.Распоряжение = ВесОбъемПоРаспоряжениям.Распоряжение)
	|			И (ЗаданияНаПеревозкуРаспоряжения.Склад = ВесОбъемПоРаспоряжениям.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СправочникСклады
	|		ПО (СправочникСклады.Ссылка = ЗаданияНаПеревозкуРаспоряжения.Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиМаршрутаУдалить.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ВесОбъемПоРаспоряжениям.Распоряжение ЕСТЬ NULL 
	|					ИЛИ НЕ СправочникСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					ИЛИ &ДатаВремяРейсаПланС < СправочникСклады.ДатаНачалаОрдернойСхемыПриОтгрузке
	|					ИЛИ ЗаданияНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.ПоручениеЭкспедитору
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутНомерСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспоряженияИзменить.НомерСтроки КАК НомерСтроки,
	|	ВесОбъемПоРаспоряжениям.Вес КАК Вес,
	|	ВесОбъемПоРаспоряжениям.Объем КАК Объем,
	|	Маршрут.НомерСтроки КАК МаршрутНомерСтроки
	|ИЗ
	|	ЗаданияНаПеревозкуРаспоряжения КАК РаспоряженияИзменить
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО РаспоряженияИзменить.Распоряжение = ВесОбъемПоРаспоряжениям.Распоряжение
	|			И РаспоряженияИзменить.Склад = ВесОбъемПоРаспоряжениям.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК Маршрут
	|		ПО (Маршрут.Ссылка = &Ссылка)
	|			И (Маршрут.КлючСвязи = РаспоряженияИзменить.КлючСвязи)
	|ГДЕ
	|	(ВесОбъемПоРаспоряжениям.Вес <> РаспоряженияИзменить.Вес
	|			ИЛИ ВесОбъемПоРаспоряжениям.Объем <> РаспоряженияИзменить.Объем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВесОбъемПоРаспоряжениям.Вес КАК Вес,
	|	ВесОбъемПоРаспоряжениям.Объем КАК Объем,
	|	ВесОбъемПоРаспоряжениям.Склад КАК Склад,
	|	ВесОбъемПоРаспоряжениям.Распоряжение КАК Распоряжение,
	|	НовыеРаспоряжения.ВидРаспоряжения,
	|	НовыеРаспоряжения.Номер,
	|	НовыеРаспоряжения.АдресДоставки,
	|	НовыеРаспоряжения.СпособДоставки,
	|	НовыеРаспоряжения.ЗонаДоставки,
	|	ВесОбъемПоРаспоряжениям.Получатель КАК ПолучательОтправитель,
	|	НовыеРаспоряжения.ПеревозчикПартнер,
	|	НовыеРаспоряжения.АдресДоставкиЗначенияПолей,
	|	НовыеРаспоряжения.ВремяДоставкиС КАК ВремяС,
	|	НовыеРаспоряжения.ВремяДоставкиПо КАК ВремяПо,
	|	НовыеРаспоряжения.ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	РаспоряженияНаДоставку КАК НовыеРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО НовыеРаспоряжения.Ссылка = ВесОбъемПоРаспоряжениям.Распоряжение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаданияНаПеревозкуРаспоряжения КАК ЗаданияНаПеревозкуРаспоряжения
	|		ПО (ЗаданияНаПеревозкуРаспоряжения.Распоряжение = ВесОбъемПоРаспоряжениям.Распоряжение)
	|			И (ЗаданияНаПеревозкуРаспоряжения.Склад = ВесОбъемПоРаспоряжениям.Склад)
	|ГДЕ
	|	ЗаданияНаПеревозкуРаспоряжения.Распоряжение ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Получатель КАК ПолучательОтправитель,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ЛОЖЬ КАК ВсеТовары,
	|	ТоварыКДоставке.Количество
	|ИЗ
	|	ТоварыОрдеровИКОтгрузке КАК ТоварыКДоставке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО (ВесОбъемПоРаспоряжениям.Склад = ТоварыКДоставке.Склад)
	|			И (ВесОбъемПоРаспоряжениям.Распоряжение = ТоварыКДоставке.Распоряжение)
	|ГДЕ
	|	ТоварыКДоставке.Количество > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(КоллекцияСтрокДерева)
	
	ПредыдущийАдресИлиПеревозчик = Неопределено;
	Подсвечиваем = 0;
	Для каждого Строка из КоллекцияСтрокДерева Цикл
		Если (Строка.ПолеУпорядочения <> ПредыдущийАдресИлиПеревозчик)
			И (ПредыдущийАдресИлиПеревозчик <> Неопределено) Тогда
			Подсвечиваем = Макс(Подсвечиваем-1,-Подсвечиваем+1);
		КонецЕсли;
		Строка.ОформлениеСтроки = Подсвечиваем;
		ПредыдущийАдресИлиПеревозчик = Строка.ПолеУпорядочения;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучательОтправитель(ДокОбъект)
	Заполнение = Новый Структура("Партнер,СкладПолучатель,Пункт",0,0,0);
	ЗаполнитьЗначенияСвойств(Заполнение,ДокОбъект);
	Если Заполнение.СкладПолучатель <> 0 Тогда
		Возврат Новый Структура("ИмяПоля,Значение","СкладПолучатель",ДокОбъект.СкладПолучатель);
	ИначеЕсли Заполнение.Пункт <> 0 Тогда
		Возврат Новый Структура("ИмяПоля,Значение","Пункт",ДокОбъект.Пункт);
	ИначеЕсли Заполнение.Партнер <> 0 Тогда
		Возврат Новый Структура("ИмяПоля,Значение","Партнер",ДокОбъект.Партнер);
	Иначе
		ВызватьИсключение НСтр("ru='Получатель (отправитель) не определен.';uk='Одержувач (відправник) не визначений.'");
	КонецЕсли;
КонецФункции

Функция ИмяЭлементаАдрес(ЭлементыФормы)
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя") <> Неопределено Тогда
		Возврат "АдресДоставкиПолучателя";
	ИначеЕсли ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		Возврат "АдресПоставщика";
	ИначеЕсли ЭлементыФормы.Найти("АдресПункта") <> Неопределено Тогда
		Возврат "АдресПункта";
	Иначе
		ВызватьИсключение НСтр("ru='Элемент адреса не определен';uk='Елемент адреси не визначений'");
	КонецЕсли;
	
КонецФункции

// Заполняет реквизиты доставки по известным получателю и способу доставки
//
// Параметры:
//		ЭлементыФормы - все элементы формы для получения/заполнения списков выбора, управления закладками доставки.
//		ДокОбъект - документ-объект, реквизиты которого изменяются
//
Процедура ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, ДокОбъект, ДопИнфоИзмененоПользователем = Ложь)
	
	ПустыеРеквизиты = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект);
	ЗаполнитьЗначенияСвойств(ДокОбъект, ПустыеРеквизиты,
		"АдресДоставкиПеревозчика, АдресДоставкиПеревозчикаЗначенияПолей, ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо");
	
	Если Не ДопИнфоИзмененоПользователем Тогда
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
	КонецЕсли;
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект);
	
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
			Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
			Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада
			Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
			
		Если ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Количество() > 0
				И ДокОбъект.ПеревозчикПартнер = Справочники.Партнеры.ПустаяСсылка() Тогда
			ДокОбъект.ПеревозчикПартнер = ЭлементыФормы.ПеревозчикПартнер.СписокВыбора[0].Значение;
		КонецЕсли;
		
	Иначе
		
		ДокОбъект.ПеревозчикПартнер = Справочники.Партнеры.ПустаяСсылка();
		
	КонецЕсли;
	
	ИмяЭлементаАдрес = ИмяЭлементаАдрес(ЭлементыФормы);
	
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
		
		Если Не ДопИнфоИзмененоПользователем Тогда
			
			Если ЗначениеЗаполнено(ДокОбъект.АдресДоставки) Тогда
				НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора,
					"АдресДоставки", ДокОбъект.АдресДоставки);
				Если Не НайденныйЭлементСЗ = Неопределено Тогда
					ДокОбъект.ДополнительнаяИнформацияПоДоставке = НайденныйЭлементСЗ.Значение.ДополнительнаяИнформацияПоДоставке;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуСоСклада
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуНаСклад
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте Тогда
		
		Если ЗначениеЗаполнено(ДокОбъект.АдресДоставки) Тогда
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора,
				"АдресДоставки", ДокОбъект.АдресДоставки);
			Если Не НайденныйЭлементСЗ = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДокОбъект, НайденныйЭлементСЗ.Значение,
					"ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо")
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки Тогда
		
		Если ЭлементыФормы.АдресПоставщика.СписокВыбора.Количество() > 0 Тогда
			ПерваяСтруктураВСписке = ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора[0].Значение;
			ЗаполнитьЗначенияСвойств(ДокОбъект,ПерваяСтруктураВСписке,,"ДополнительнаяИнформацияПоДоставке");
			Если Не ДопИнфоИзмененоПользователем Тогда
				ДокОбъект.ДополнительнаяИнформацияПоДоставке = ПерваяСтруктураВСписке.ДополнительнаяИнформацияПоДоставке;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ДокОбъект.СпособДоставки)
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада Тогда
		
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
		ДокОбъект.ОсобыеУсловияПеревозки = Ложь;
		ДокОбъект.ОсобыеУсловияПеревозкиОписание = "";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, ДокОбъект, ДопИнфоИзмененоПользователем = Ложь)
	
	ПустыеРеквизиты = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект);
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, ПустыеРеквизиты,
		"АдресДоставкиПеревозчика, АдресДоставкиПеревозчикаЗначенияПолей, ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо");
	Если Не ДопИнфоИзмененоПользователем Тогда
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокОбъект.ПеревозчикПартнер)
			И ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора.Количество() > 0 Тогда
		ПерваяСтруктураВСписке = ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора[0].Значение;
		ЗаполнитьЗначенияСвойств(ДокОбъект,ПерваяСтруктураВСписке,
			"ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо");
		ДокОбъект.АдресДоставкиПеревозчика = ПерваяСтруктураВСписке.АдресДоставки;
		ДокОбъект.АдресДоставкиПеревозчикаЗначенияПолей = ПерваяСтруктураВСписке.АдресДоставкиЗначенияПолей;
		Если Не ДопИнфоИзмененоПользователем Тогда
			ДокОбъект.ДополнительнаяИнформацияПоДоставке = ПерваяСтруктураВСписке.ДополнительнаяИнформацияПоДоставке;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы, ДокОбъект = Неопределено, Склад = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭлементыФормы.Найти("ПеревозчикПартнер") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
	|	Т.Перевозчик КАК Перевозчик,
	|	МАКСИМУМ(Т.Распоряжение.Дата) КАК РаспоряжениеДата
	|ИЗ
	|	РегистрСведений.СостоянияИРеквизитыДоставки КАК Т
	|ГДЕ
	|	Т.Перевозчик <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	И (Т.ПолучательОтправитель = &ПолучательОтправитель
	|			ИЛИ &ПолучательОтправитель = НЕОПРЕДЕЛЕНО)
	|	И (Т.Склад = &Склад
	|			ИЛИ &Склад = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Перевозчик
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Т.Распоряжение.Дата) УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Склад", Склад);
	Если ДокОбъект <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПолучательОтправитель",ПолучательОтправитель(ДокОбъект).Значение);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			// Заполним список выбора перевозчиками по получателю и перевозчику
			МассивПеревозчиков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Перевозчик");
			ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.ЗагрузитьЗначения(МассивПеревозчиков);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Количество() < 5 Тогда
		// Если список не полный, попытаемся дополнить его, устранив ограничение по получателю
		Запрос.УстановитьПараметр("ПолучательОтправитель",Неопределено);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() > 0 Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Количество() < 5 Цикл
				Если Выборка.Следующий() Тогда
					Если ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.НайтиПоЗначению(Выборка.Перевозчик) = Неопределено Тогда
						ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Добавить(Выборка.Перевозчик);
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, ДокОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭлементыФормы.Найти("АдресДоставкиПеревозчика") <> Неопределено Тогда
		ИмяЭлементаАдрес = "АдресДоставкиПеревозчика";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПеревозчикПартнер = ДокОбъект.ПеревозчикПартнер;
	
	Если Не ЗначениеЗаполнено(ПеревозчикПартнер) Тогда
		ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект).Значение;
	ПоследниеРеквизитыДоставкиИзЗаданий = ПоследниеРеквизитыДоставкиИзЗаданий(ПолучательОтправитель,ПеревозчикПартнер);
	// Получим последние использованные реквизиты доставки перевозчика по получателю
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзЗаданий Цикл
		СтруктураВыбора = СтруктураВыбора();
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
		СписокВыбора.Добавить(СтруктураВыбора,Стр.АдресДоставки);
	КонецЦикла;
	
	Если СписокВыбора.Количество() < 3 Тогда
		ПоследниеРеквизитыДоставкиИзЗаданий = ПоследниеРеквизитыДоставкиИзЗаданий(,ПеревозчикПартнер);
		// Если список не полный, попытаемся дополнить его, устранив ограничение по получателю
		Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзЗаданий Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокВыбора.Количество() < 5 Тогда
		ПоследниеРеквизитыДоставкиИзРаспоряжений = ПоследниеРеквизитыДоставкиИзРаспоряжений(ДокОбъект.Ссылка, , ПеревозчикПартнер);
		Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзРаспоряжений Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПеревозчикПартнер);
	Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
		ИначеЕсли Не ЗначениеЗаполнено(НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей) Тогда
			НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей = Стр.АдресДоставкиЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьСписокЗначений(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора, СписокВыбора)
	
КонецПроцедуры

Процедура ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы, ДокОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект).Значение;
		
	Если Не ЗначениеЗаполнено(ПолучательОтправитель) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы);
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	ПоследниеРеквизитыДоставкиИзЗаданий = ПоследниеРеквизитыДоставкиИзЗаданий(ПолучательОтправитель);
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзЗаданий Цикл
		СтруктураВыбора = СтруктураВыбора();
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
		СписокВыбора.Добавить(СтруктураВыбора,Стр.АдресДоставки);
	КонецЦикла;
	
	ПоследниеРеквизитыДоставкиИзРаспоряжений = ПоследниеРеквизитыДоставкиИзРаспоряжений(ДокОбъект.Ссылка, ПолучательОтправитель);
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзРаспоряжений Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.АдресДоставки);
		Иначе
			ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
		КонецЕсли;
	КонецЦикла;
	
	Если (ТипЗнч(ПолучательОтправитель) <> Тип("СправочникСсылка.СтруктураПредприятия")
		И ТипЗнч(ПолучательОтправитель) <> Тип("Строка")) Тогда
		
		АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель);
		Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭлементыФормы.Найти("АдресДоставкиСамовывоз") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиСамовывоз.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя1") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя1.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя2") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя2.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресПоставщика.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПункта") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресПункта.СписокВыбора, СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураВыбора()
	Возврат Новый Структура("АдресДоставки,
							|АдресДоставкиЗначенияПолей,
							|ЗонаДоставки,
							|ВремяДоставкиС,
							|ВремяДоставкиПо,
							|ДополнительнаяИнформацияПоДоставке",
							"",
							"",
							Справочники.ЗоныДоставки.ПустаяСсылка(),
							Дата(1,1,1),
							Дата(1,1,1),
							"");
КонецФункции

Функция ПоследниеРеквизитыДоставкиИзРаспоряжений(ОбъектСсылка, ПолучательОтправитель = Неопределено, Перевозчик = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПоручениеЭкспедитору") Тогда
		Возврат ПоследниеРеквизитыПорученийЭкспедиторам(ПолучательОтправитель)
	КонецЕсли;
	
	РеквизитыИзЗаказаИРаспоряжений = ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказКлиента")
		Или ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		Или ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
		Или ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		Или ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	ВЫБОР КОГДА Док.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА Док.АдресДоставкиПеревозчика
	|		ИНАЧЕ Док.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	МАКСИМУМ(Док.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ГДЕ
	|	Док.Проведен
	|	И (Док.Партнер = &ПолучательОтправитель
	|		ИЛИ &ПолучательОтправитель = НЕОПРЕДЕЛЕНО)
	|	И (Док.ПеревозчикПартнер = &Перевозчик
	|			И Док.АдресДоставкиПеревозчика <> """"
	|		ИЛИ &Перевозчик = НЕОПРЕДЕЛЕНО
	|			И Док.АдресДоставки <> """")
	|	И Док.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Док.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА Док.АдресДоставкиПеревозчика
	|		ИНАЧЕ Док.АдресДоставки
	|	КОНЕЦ
	|";
	Если РеквизитыИзЗаказаИРаспоряжений Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ" + "
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ВЫБОР КОГДА Док.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
		|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
		|		ТОГДА Док.АдресДоставкиПеревозчика
		|		ИНАЧЕ Док.АдресДоставки
		|	КОНЕЦ КАК АдресДоставки,
		|	МАКСИМУМ(Док.Дата) КАК Дата
		|ИЗ
		|	Документ.ЗаказКлиента КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И (Док.Партнер = &ПолучательОтправитель
		|		ИЛИ &ПолучательОтправитель = НЕОПРЕДЕЛЕНО)
		|	И (Док.ПеревозчикПартнер = &Перевозчик
		|			И Док.АдресДоставкиПеревозчика <> """"
		|		ИЛИ &Перевозчик = НЕОПРЕДЕЛЕНО
		|			И Док.АдресДоставки <> """")
		|	И Док.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА Док.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
		|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
		|		ТОГДА Док.АдресДоставкиПеревозчика
		|		ИНАЧЕ Док.АдресДоставки
		|	КОНЕЦ
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	МАКСИМУМ(Док.Дата) УБЫВ
		|;";
	Если РеквизитыИзЗаказаИРаспоряжений Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(Реализация.Ссылка) ЕСТЬ NULL 
		|			ТОГДА МАКСИМУМ(Заказ.Ссылка)
		|		КОГДА МАКСИМУМ(Заказ.Дата) > МАКСИМУМ(Реализация.Дата)
		|			ТОГДА МАКСИМУМ(Заказ.Ссылка)
		|		ИНАЧЕ МАКСИМУМ(Реализация.Ссылка)
		|	КОНЕЦ КАК Ссылка,
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|ПОМЕСТИТЬ ВТ_СсылкиПоАдресам
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Реализация
		|		ПО ВТ_ПоследниеАдреса.Дата = Реализация.Дата
		|			И (ВТ_ПоследниеАдреса.АдресДоставки = Реализация.АдресДоставки
		|				ИЛИ ВТ_ПоследниеАдреса.АдресДоставки = Реализация.АдресДоставкиПеревозчика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК Заказ
		|		ПО ВТ_ПоследниеАдреса.Дата = Заказ.Дата
		|			И (ВТ_ПоследниеАдреса.АдресДоставки = Заказ.АдресДоставки
		|				ИЛИ ВТ_ПоследниеАдреса.АдресДоставки = Заказ.АдресДоставкиПеревозчика)
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|;";
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Док.Ссылка) КАК Ссылка,
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|ПОМЕСТИТЬ ВТ_СсылкиПоАдресам
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Док
		|		ПО ВТ_ПоследниеАдреса.Дата = Док.Дата
		|			И (ВТ_ПоследниеАдреса.АдресДоставки = Док.АдресДоставки
		|				ИЛИ ВТ_ПоследниеАдреса.АдресДоставки = Док.АдресДоставкиПеревозчика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|;";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + 
	"
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР КОГДА ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВТ_СсылкиПоАдресам.Ссылка.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	|	ВЫБОР КОГДА ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоКонечногоПункта)
	|			И &Перевозчик = НЕОПРЕДЕЛЕНО
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА ВТ_СсылкиПоАдресам.Ссылка.ЗонаДоставки
	|		ИНАЧЕ Значение(Справочник.ЗоныДоставки.ПустаяСсылка)
	|	КОНЕЦ КАК ЗонаДоставки,
	|	ВЫБОР КОГДА ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоКонечногоПункта)
	|			И &Перевозчик = НЕОПРЕДЕЛЕНО
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА ВТ_СсылкиПоАдресам.Ссылка.ВремяДоставкиС
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК ВремяДоставкиС,
	|	ВЫБОР КОГДА ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоКонечногоПункта)
	|			И &Перевозчик = НЕОПРЕДЕЛЕНО
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА ВТ_СсылкиПоАдресам.Ссылка.ВремяДоставкиПо
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК ВремяДоставкиПо
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СсылкиПоАдресам КАК ВТ_СсылкиПоАдресам
	|		ПО (ВТ_СсылкиПоАдресам.АдресДоставки = ВТ_ПоследниеАдреса.АдресДоставки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ПоследниеАдреса.Дата УБЫВ";
	
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", "ЗаявкаНаВозвратТоваровОтКлиента");
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", "ЗаказНаПеремещение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", "ПеремещениеТоваров");
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", "ЗаказПоставщику");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", "ПоступлениеТоваровУслуг");
	КонецЕсли;
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
		Или ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Док.Партнер", "Док.СкладПолучатель");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПолучательОтправитель",ПолучательОтправитель);
	Запрос.УстановитьПараметр("Перевозчик",Перевозчик);
	СпособыДоставкиДоМестаПередачи = Новый Массив;
	СпособыДоставкиДоМестаПередачи.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	СпособыДоставкиДоМестаПередачи.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	Запрос.УстановитьПараметр("СпособыДоставкиДоМестаПередачи",СпособыДоставкиДоМестаПередачи);
	
	СпособыДоставкиДоКонечногоПункта = Новый Массив;
	СпособыДоставкиДоКонечногоПункта.Добавить(Перечисления.СпособыДоставки.ДоКлиента);
	СпособыДоставкиДоКонечногоПункта.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
	СпособыДоставкиДоКонечногоПункта.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	СпособыДоставкиДоКонечногоПункта.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	Запрос.УстановитьПараметр("СпособыДоставкиДоКонечногоПункта",СпособыДоставкиДоКонечногоПункта);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПоследниеРеквизитыПорученийЭкспедиторам(ПолучательОтправитель)
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	Док.АдресДоставки,
	|	МАКСИМУМ(Док.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
	|ИЗ
	|	Документ.ПоручениеЭкспедитору КАК Док
	|ГДЕ
	|	Док.Проведен
	|	И Док.Пункт = &ПолучательОтправитель
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.АдресДоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Док.Дата) УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Док.Ссылка) КАК Ссылка,
	|	ВТ_ПоследниеАдреса.АдресДоставки
	|ПОМЕСТИТЬ ВТ_СсылкиПоАдресам
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоручениеЭкспедитору КАК Док
	|		ПО ВТ_ПоследниеАдреса.Дата = Док.Дата
	|			И ВТ_ПоследниеАдреса.АдресДоставки = Док.АдресДоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеАдреса.АдресДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.АдресДоставки КАК АдресДоставки,
	|	ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ВТ_СсылкиПоАдресам.Ссылка.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	|	ВТ_СсылкиПоАдресам.Ссылка.ЗонаДоставки КАК ЗонаДоставки,
	|	ВТ_СсылкиПоАдресам.Ссылка.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВТ_СсылкиПоАдресам.Ссылка.ВремяДоставкиПо КАК ВремяДоставкиПо
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СсылкиПоАдресам КАК ВТ_СсылкиПоАдресам
	|		ПО (ВТ_СсылкиПоАдресам.АдресДоставки = ВТ_ПоследниеАдреса.АдресДоставки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ПоследниеАдреса.Дата УБЫВ";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПолучательОтправитель",ПолучательОтправитель);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК АдресДоставки,
		|	КонтактнаяИнформация.Вид.Представление КАК Вид,
		|	КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей
		|ИЗ
		|	Справочник." + ПолучательОтправитель.Метаданные().Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &ПолучательОтправитель
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
		
	Запрос.УстановитьПараметр("ПолучательОтправитель", ПолучательОтправитель);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьСписокЗначений(СписокПриемник, СписокИсточник)
	
	СписокПриемник.Очистить();
	Для Каждого Элемент Из СписокИсточник Цикл
		СписокПриемник.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьПустыеСвойства(СтруктураПриемник, Источник);
	
	СтруктураЗаполнения = Новый Структура;
	Для Каждого Элемент Из СтруктураПриемник Цикл
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			СтруктураЗаполнения.Вставить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Источник);
	ЗаполнитьЗначенияСвойств(СтруктураПриемник, СтруктураЗаполнения);
	
КонецПроцедуры

Функция УстановитьВидимостьЭлементовДоставки(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказам)
	
	ВидимостьДоставки = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой")
		И (Не НакладнаяПоЗаказам
			Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	Если ЭлементыФормы.Найти("СтраницаДоставка") <> Неопределено Тогда
		
		ЭлементыФормы.СтраницаДоставка.Видимость = ВидимостьДоставки;
		
		Если НакладнаяПоЗаказам
			И ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
			ЭлементыФормы.СпособДоставки.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЕсли;
	Возврат ВидимостьДоставки;
	
КонецФункции

Функция ТекстЗапросаРаспоряженияНаДоставкуПолучателям(ВыборочноеОбновление)
	
	Если ВыборочноеОбновление Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеРаспоряжения.Распоряжение,
		|	ОбновляемыеРаспоряжения.Склад
		|ПОМЕСТИТЬ ОбновляемыеРаспоряжения
		|ИЗ
		|	&ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
		|	НЕОПРЕДЕЛЕНО КАК Склад
		|ПОМЕСТИТЬ ОбновляемыеРаспоряжения";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовПакета() +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение) КАК ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Дата,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	ВЫБОР КОГДА РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			ПРЕДСТАВЛЕНИЕ(РаспоряженияНаДоставку.Перевозчик)
	|		ИНАЧЕ
	|			РаспоряженияНаДоставку.Адрес
	|		КОНЕЦ КАК ПолеУпорядочения
	|ПОМЕСТИТЬ РаспоряженияНаДоставку
	|ИЗ
	|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения
	|		ПО (ОбновляемыеРаспоряжения.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|			И (ОбновляемыеРаспоряжения.Склад = РаспоряженияНаДоставку.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|		ПО (ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|			И (ТоварыКДоставке.Склад = РаспоряженияНаДоставку.Склад)
	|			И (ТоварыКДоставке.ВсеТовары)
	|ГДЕ
	|	(ТоварыКДоставке.Распоряжение ЕСТЬ NULL 
	|		ИЛИ ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПодбор
	|		ИЛИ НЕ ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен)
	|	И РаспоряженияНаДоставку.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка)
	|	И ВЫБОР
	|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба)
	|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиКПолучателю)
	|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
	|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомКПолучателю)
	|			ИНАЧЕ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиКПолучателю)
	|				ИЛИ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомКПолучателю)
	|		КОНЕЦ
	|	И (&БезОтбораПоЗоне
	|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
	|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
	|		ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ(&Склад))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение),
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Дата,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	ВЫБОР КОГДА РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			ПРЕДСТАВЛЕНИЕ(РаспоряженияНаДоставку.Перевозчик)
	|		ИНАЧЕ
	|			РаспоряженияНаДоставку.Адрес
	|		КОНЕЦ КАК ПолеУпорядочения
	|ИЗ
	|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияЗадания
	|		ПО (РаспоряженияЗадания.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|			И (РаспоряженияЗадания.Склад = РаспоряженияНаДоставку.Склад)
	|			И (РаспоряженияЗадания.Ссылка = &ЗаданиеНаПеревозкуПодбор)
	|			И (РаспоряженияНаДоставку.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка))
	|
	|ГДЕ (&БезОтбораПоЗоне
	|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
	|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
	|		ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ(&Склад))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	Т.Серия,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыКВычетуИзДоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Распоряжение КАК Распоряжение,
	|		Т.Склад КАК Склад,
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика,
	|		Т.Назначение КАК Назначение,
	|		Т.Серия КАК Серия,
	|		Т.Количество КАК Количество
	|	ИЗ
	|		РегистрСведений.ТоварыКДоставке КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО Т.Распоряжение = РаспоряженияНаДоставку.Распоряжение
	|				И Т.Склад = РаспоряженияНаДоставку.Склад
	|				И (НЕ Т.ВсеТовары)
	|	ГДЕ
	|		(Т.ЗаданиеНаПеревозку <> &ЗаданиеНаПеревозкуПодбор
	|					И Т.ЗаданиеНаПеревозку.Проведен
	|				ИЛИ Т.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.ДокументОтгрузки,
	|		Т.Склад,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		Т.Назначение,
	|		Т.Серия,
	|		Т.КОтгрузке
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО Т.ДокументОтгрузки = РаспоряженияНаДоставку.Распоряжение
	|				И Т.Склад = РаспоряженияНаДоставку.Склад
	|				И (Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|				И (Т.КОтгрузке > 0)
	|				И (Т.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары)
	|				И (Т.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка))) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад,
	|	Т.Серия,
	|	Т.Назначение,
	|	Т.Распоряжение,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	Т.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ТоварыКДоставкеПоДням.Период, ДЕНЬ) КАК Дата,
	|	ТоварыКДоставкеПоДням.Номенклатура КАК Номенклатура,
	|	ТоварыКДоставкеПоДням.Характеристика КАК Характеристика,
	|	ТоварыКДоставкеПоДням.Назначение КАК Назначение,
	|	ТоварыКДоставкеПоДням.Серия КАК Серия,
	|	ТоварыКДоставкеПоДням.КОтгрузкеПриход КАК НачальнаяПотребностьПоДатам,
	|	ТоварыКДоставкеПоДням.КОтгрузкеПриход * &ТекстЗапросаВесУпаковки КАК НачальнаяПотребностьПоДатамВес,
	|	ТоварыКДоставкеПоДням.КОтгрузкеПриход * &ТекстЗапросаОбъемУпаковки КАК НачальнаяПотребностьПоДатамОбъем,
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) КАК ВычетТоварыКДоставке,
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаВесУпаковки КАК ВычетТоварыКДоставкеВес,
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаОбъемУпаковки КАК ВычетТоварыКДоставкеОбъем,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	РаспоряженияНаДоставку.ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика))
	|			ТОГДА 0
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки В (
	|				ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента),
	|				ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Зона.Представление КАК ЗонаПредставление,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	РаспоряженияНаДоставку.ПолеУпорядочения
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , День, ) КАК ТоварыКДоставкеПоДням
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКВычетуИзДоставки КАК ТоварыКВычетуИзДоставки
	|		ПО (ТоварыКВычетуИзДоставки.Распоряжение = ТоварыКДоставкеПоДням.ДокументОтгрузки)
	|			И (ТоварыКВычетуИзДоставки.Склад = ТоварыКДоставкеПоДням.Склад)
	|			И (ТоварыКВычетуИзДоставки.Номенклатура = ТоварыКДоставкеПоДням.Номенклатура)
	|			И (ТоварыКВычетуИзДоставки.Характеристика = ТоварыКДоставкеПоДням.Характеристика)
	|			И (ТоварыКВычетуИзДоставки.Назначение = ТоварыКДоставкеПоДням.Назначение)
	|			И (ТоварыКВычетуИзДоставки.Серия = ТоварыКДоставкеПоДням.Серия)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ТоварыКДоставкеПоДням.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|		ПО ТоварыКДоставкеПоДням.ДокументОтгрузки = РаспоряженияНаДоставку.Распоряжение
	|			И ТоварыКДоставкеПоДням.Склад = РаспоряженияНаДоставку.Склад
	|ГДЕ
	|	ТоварыКДоставкеПоДням.КОтгрузкеПриход > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РаспоряженияНаДоставку.Дата, ДЕНЬ) КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Назначение,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	0 КАК НачальнаяПотребностьПоДатам,
	|	0 КАК НачальнаяПотребностьПоДатамВес,
	|	0 КАК НачальнаяПотребностьПоДатамОбъем,
	|	0 КАК ВычетТоварыКДоставке,
	|	0 КАК ВычетТоварыКДоставкеВес,
	|	0 КАК ВычетТоварыКДоставкеОбъем,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	РаспоряженияНаДоставку.ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	4 КАК Картинка,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Зона.Представление КАК ЗонаПредставление,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	РаспоряженияНаДоставку.ПолеУпорядочения
	|ИЗ
	|	РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|	ПО ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение
	|ГДЕ
	|	РаспоряженияНаДоставку.СпособДоставки В (
	|		ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуСоСклада),
	|		ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте))
	|	И ТоварыКДоставке.Распоряжение ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗонаПредставление,
	|	Зона,
	|	ПолеУпорядочения,
	|	ПолучательОтправитель,
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	Дата";
	
	Если Не ВыборочноеОбновление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения",
			"ЛЕВОЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения");
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРаспоряженияНаДоставкуОтОтправителей(ВыборочноеОбновление)
	
	Если ВыборочноеОбновление Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеРаспоряжения.Распоряжение,
		|	ОбновляемыеРаспоряжения.Склад
		|ПОМЕСТИТЬ ОбновляемыеРаспоряжения
		|ИЗ
		|	&ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
		|	НЕОПРЕДЕЛЕНО КАК Склад
		|ПОМЕСТИТЬ ОбновляемыеРаспоряжения";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовПакета() +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение) КАК ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Дата,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	ВЫБОР КОГДА РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада) ТОГДА
	|			ПРЕДСТАВЛЕНИЕ(РаспоряженияНаДоставку.Перевозчик)
	|		ИНАЧЕ
	|			РаспоряженияНаДоставку.Адрес
	|		КОНЕЦ КАК ПолеУпорядочения
	|ПОМЕСТИТЬ РаспоряженияНаДоставку
	|ИЗ
	|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения
	|		ПО (ОбновляемыеРаспоряжения.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|			И (ОбновляемыеРаспоряжения.Склад = РаспоряженияНаДоставку.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|		ПО (ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|			И (ТоварыКДоставке.Склад = РаспоряженияНаДоставку.Склад)
	|			И (ТоварыКДоставке.ВсеТовары)
	|ГДЕ
	|	(ТоварыКДоставке.Распоряжение ЕСТЬ NULL 
	|		ИЛИ ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПодбор
	|		ИЛИ НЕ ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен)
	|	И РаспоряженияНаДоставку.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка)
	|	И ВЫБОР
	|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба)
	|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиОтОтправителя)
	|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
	|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомОтОтправителя)
	|			ИНАЧЕ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиОтОтправителя)
	|				ИЛИ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомОтОтправителя)
	|		КОНЕЦ
	|	И (&БезОтбораПоЗоне
	|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
	|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
	|		ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ(&Склад))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение),
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Дата,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	ВЫБОР КОГДА РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада) ТОГДА
	|			ПРЕДСТАВЛЕНИЕ(РаспоряженияНаДоставку.Перевозчик)
	|		ИНАЧЕ
	|			РаспоряженияНаДоставку.Адрес
	|		КОНЕЦ КАК ПолеУпорядочения
	|ИЗ
	|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияЗадания
	|		ПО (РаспоряженияЗадания.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|			И (РаспоряженияЗадания.Склад = РаспоряженияНаДоставку.Склад)
	|			И (РаспоряженияЗадания.Ссылка = &ЗаданиеНаПеревозкуПодбор)
	|			И (РаспоряженияНаДоставку.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка))
	|
	|ГДЕ (&БезОтбораПоЗоне
	|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
	|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
	|		ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ(&Склад))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	ВЫБОР
	|		КОГДА СУММА(Т.КоличествоВДоставке) > СУММА(Т.КоличествоПринято)
	|			ТОГДА СУММА(Т.КоличествоВДоставке)
	|		ИНАЧЕ СУММА(Т.КоличествоПринято)
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ТоварыКВычетуИзДоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Распоряжение КАК Распоряжение,
	|		Т.Склад КАК Склад,
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика,
	|		Т.Назначение КАК Назначение,
	|		Т.Количество КАК КоличествоВДоставке,
	|		0 КАК КоличествоПринято
	|	ИЗ
	|		РегистрСведений.ТоварыКДоставке КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО Т.Распоряжение = РаспоряженияНаДоставку.Распоряжение
	|				И Т.Склад = РаспоряженияНаДоставку.Склад
	|				И (НЕ Т.ВсеТовары)
	|	ГДЕ
	|		(Т.ЗаданиеНаПеревозку <> &ЗаданиеНаПеревозкуПодбор
	|					И Т.ЗаданиеНаПеревозку.Проведен
	|				ИЛИ Т.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.ДокументПоступления,
	|		Т.Склад,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		Т.Назначение,
	|		0,
	|		Т.КПоступлениюРасход
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Обороты(, , , ) КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО Т.ДокументПоступления = РаспоряженияНаДоставку.Распоряжение
	|				И Т.Склад = РаспоряженияНаДоставку.Склад) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Распоряжение,
	|	Т.Номенклатура,
	|	Т.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ТоварыКДоставкеПоДням.Период, ДЕНЬ) КАК Дата,
	|	ТоварыКДоставкеПоДням.Номенклатура КАК Номенклатура,
	|	ТоварыКДоставкеПоДням.Характеристика КАК Характеристика,
	|	ТоварыКДоставкеПоДням.Назначение КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТоварыКДоставкеПоДням.КПоступлениюПриход КАК НачальнаяПотребностьПоДатам,
	|	ТоварыКДоставкеПоДням.КПоступлениюПриход * &ТекстЗапросаВесУпаковки КАК НачальнаяПотребностьПоДатамВес,
	|	ТоварыКДоставкеПоДням.КПоступлениюПриход * &ТекстЗапросаОбъемУпаковки КАК НачальнаяПотребностьПоДатамОбъем,
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) КАК ВычетТоварыКДоставке,
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаВесУпаковки КАК ВычетТоварыКДоставкеВес,
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаОбъемУпаковки КАК ВычетТоварыКДоставкеОбъем,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	РаспоряженияНаДоставку.ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА 0
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя),
	|													ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи),
	|													ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуНаСклад),
	|													ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте))
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Зона.Представление КАК ЗонаПредставление,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	РаспоряженияНаДоставку.ПолеУпорядочения
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , День, ) КАК ТоварыКДоставкеПоДням
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКВычетуИзДоставки КАК ТоварыКВычетуИзДоставки
	|		ПО (ТоварыКВычетуИзДоставки.Распоряжение = ТоварыКДоставкеПоДням.ДокументПоступления)
	|			И (ТоварыКВычетуИзДоставки.Склад = ТоварыКДоставкеПоДням.Склад)
	|			И (ТоварыКВычетуИзДоставки.Номенклатура = ТоварыКДоставкеПоДням.Номенклатура)
	|			И (ТоварыКВычетуИзДоставки.Характеристика = ТоварыКДоставкеПоДням.Характеристика)
	|			И (ТоварыКВычетуИзДоставки.Назначение = ТоварыКДоставкеПоДням.Назначение)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ТоварыКДоставкеПоДням.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|		ПО ТоварыКДоставкеПоДням.ДокументПоступления = РаспоряженияНаДоставку.Распоряжение
	|			И ТоварыКДоставкеПоДням.Склад = РаспоряженияНаДоставку.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗоныДоставки КАК Зоны
	|		ПО (Зоны.Ссылка = РаспоряженияНаДоставку.Зона)
	|ГДЕ
	|	ТоварыКДоставкеПоДням.КПоступлениюПриход > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТоварыКДоставкеПоДням.Период, ДЕНЬ),
	|	ТоварыКДоставкеПоДням.Номенклатура,
	|	ТоварыКДоставкеПоДням.Характеристика,
	|	ТоварыКДоставкеПоДням.Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ТоварыКДоставкеПоДням.Количество,
	|	ТоварыКДоставкеПоДням.Количество * &ТекстЗапросаВесУпаковки,
	|	ТоварыКДоставкеПоДням.Количество * &ТекстЗапросаОбъемУпаковки,
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0),
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаВесУпаковки,
	|	ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаОбъемУпаковки,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	РаспоряженияНаДоставку.ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада))
	|			ТОГДА 0
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи))
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Зона.Представление КАК ЗонаПредставление,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	РаспоряженияНаДоставку.ПолеУпорядочения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка,
	|		Т.ДатаПоступления КАК Период,
	|		Т.Склад КАК Склад,
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика,
	|		Т.Назначение КАК Назначение,
	|		СУММА(Т.Количество) КАК Количество
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО Т.Ссылка = РаспоряженияНаДоставку.Распоряжение
	|				И Т.Склад = РаспоряженияНаДоставку.Склад
	|				И (НЕ Т.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|					ИЛИ Т.ДатаПоступления < Т.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка,
	|		Т.ДатаПоступления,
	|		Т.Склад,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		Т.Назначение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Дата,
	|		Т.Склад,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		Т.Назначение,
	|		СУММА(Т.Количество)
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО Т.Ссылка = РаспоряженияНаДоставку.Распоряжение
	|				И Т.Склад = РаспоряженияНаДоставку.Склад
	|				И (НЕ Т.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|					ИЛИ Т.Ссылка.Дата < Т.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка,
	|		Т.Склад,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		Т.Назначение,
	|		Т.Ссылка.Дата) КАК ТоварыКДоставкеПоДням
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКВычетуИзДоставки КАК ТоварыКВычетуИзДоставки
	|		ПО (ТоварыКВычетуИзДоставки.Распоряжение = ТоварыКДоставкеПоДням.Ссылка)
	|			И (ТоварыКВычетуИзДоставки.Склад = ТоварыКДоставкеПоДням.Склад)
	|			И (ТоварыКВычетуИзДоставки.Номенклатура = ТоварыКДоставкеПоДням.Номенклатура)
	|			И (ТоварыКВычетуИзДоставки.Характеристика = ТоварыКДоставкеПоДням.Характеристика)
	|			И (ТоварыКВычетуИзДоставки.Назначение = ТоварыКДоставкеПоДням.Назначение)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ТоварыКДоставкеПоДням.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|		ПО ТоварыКДоставкеПоДням.Ссылка = РаспоряженияНаДоставку.Распоряжение
	|			И ТоварыКДоставкеПоДням.Склад = РаспоряженияНаДоставку.Склад
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РаспоряженияНаДоставку.Дата, ДЕНЬ) КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Назначение,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	0 КАК НачальнаяПотребностьПоДатам,
	|	0 КАК НачальнаяПотребностьПоДатамВес,
	|	0 КАК НачальнаяПотребностьПоДатамОбъем,
	|	0 КАК ВычетТоварыКДоставке,
	|	0 КАК ВычетТоварыКДоставкеВес,
	|	0 КАК ВычетТоварыКДоставкеОбъем,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	РаспоряженияНаДоставку.ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер,
	|	РаспоряженияНаДоставку.Адрес,
	|	РаспоряженияНаДоставку.АдресЗначенияПолей,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	4 КАК Картинка,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Зона.Представление КАК ЗонаПредставление,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	РаспоряженияНаДоставку.ВремяС,
	|	РаспоряженияНаДоставку.ВремяПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|	РаспоряженияНаДоставку.ПолеУпорядочения
	|ИЗ
	|	РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|	ПО ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение
	|ГДЕ
	|	РаспоряженияНаДоставку.СпособДоставки В (
	|		ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуНаСклад),
	|		ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте))
	|	И ТоварыКДоставке.Распоряжение ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗонаПредставление,
	|	РаспоряженияНаДоставку.Зона,
	|	ПолеУпорядочения,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	РаспоряженияНаДоставку.Распоряжение,
	|	РаспоряженияНаДоставку.Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Дата";
	
	Если Не ВыборочноеОбновление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения",
			"ЛЕВОЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения");
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьПозициюДляВставки(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая, СтрокаИсточник)
	
	Адрес = СтрокаИсточник.Адрес;
	КоллекцияРаспоряжений = РаспоряженияНаДоставку.ПолучитьЭлементы();
	Если ЗонаГруппаИлиПустая Тогда
		Для Каждого СтрокаЗона Из КоллекцияРаспоряжений Цикл
			Если СтрокаИсточник.Зона = СтрокаЗона.Зона Тогда
				Ветка = СтрокаЗона.ПолучитьЭлементы();
				Для Каждого СтрокаРаспоряжение Из Ветка Цикл
					Если Адрес < СтрокаРаспоряжение.Адрес Тогда
						Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(СтрокаЗона), Ветка.Индекс(СтрокаРаспоряжение));
					КонецЕсли;
				КонецЦикла;
				Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(СтрокаЗона), Макс(0,Ветка.Количество()));
			ИначеЕсли Строка(СтрокаИсточник.Зона) < Строка(СтрокаЗона.Зона) Тогда
				НоваяСтрока = КоллекцияРаспоряжений.Вставить(КоллекцияРаспоряжений.Индекс(СтрокаЗона));
				НоваяСтрока.Зона  = СтрокаИсточник.Зона;
				НоваяСтрока.Адрес = СтрокаИсточник.Зона;
				НоваяСтрока.ОформлениеСтроки = 5;
				Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(НоваяСтрока), 0);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока = КоллекцияРаспоряжений.Добавить();
		НоваяСтрока.Зона  = СтрокаИсточник.Зона;
		НоваяСтрока.Адрес = СтрокаИсточник.Зона;
		НоваяСтрока.ОформлениеСтроки = 5;
		Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Количество() - 1, 0);
	Иначе
		Для Каждого СтрокаРаспоряжение Из КоллекцияРаспоряжений Цикл
			Если Адрес < СтрокаРаспоряжение.Адрес Тогда
				Возврат Новый Структура("Зона, Распоряжение", 0, КоллекцияРаспоряжений.Индекс(СтрокаРаспоряжение));
			КонецЕсли;
		КонецЦикла;
		Возврат Новый Структура("Зона, Распоряжение", 0, КоллекцияРаспоряжений.Количество());
	КонецЕсли;
	
КонецФункции

Функция РазделительЗапроса() Экспорт
	
	Возврат
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

#КонецОбласти


&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	ВозможностьОткрытияОтчетов = Новый Структура("РегламентированныйОтчетНалоговаяНакладная,РегламентированныйОтчетПриложение2КНалоговойНакладной");
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИндКонф = "BAS";
	
	ИдКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	
	мПараметрыРаботыЗвит1С = Новый Структура;
	
	// Ошибки генерируемые в FREDO Звіт при проверке статусов налоговых документов (исходящих)
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов = Новый Соответствие;
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить(-3, НСтр("ru='<В запросе не заполнены обязательные параметры>';uk=""<У запиті не заповнені обов'язкові параметри>""") + " DOC_TYPE и DOC_MOVE>");
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить(-2, НСтр("ru='В ""FREDO Звіт"" обнаружено более одного документа соответствующего документу ';uk='В ""FREDO Звіт"" виявлено більше одного документа відповідного документу '")+ИндКонф);
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить(-1, НСтр("ru='Не выгружен в ""FREDO Звіт""';uk='Не вивантажений в ""FREDO Звіт""'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 0, НСтр("ru='Выгружен в ""FREDO Звіт""';uk='Вивантажений в ""FREDO Звіт""'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 1, НСтр("ru='Отправлен в ГНС';uk='Відправлений у ДПС'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 2, НСтр("ru='Доставлен в ГНС';uk='Доставлений в ДПС'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 3, НСтр("ru='Отклонен в ГНС';uk='Відхилено у ДПС'"));
	ПредставлениеСостоянийДляИсходящихНалоговыхДокументов.Вставить( 4, НСтр("ru='Зарегистрирован в ГНС';uk='Зареєстровано в ДПС'"));		
	мПараметрыРаботыЗвит1С.Вставить("ПредставлениеСостоянийДляИсходящихНалоговыхДокументов", ПредставлениеСостоянийДляИсходящихНалоговыхДокументов);
	                            
	СтатусРегистрацииДляИсходящихНалоговыхДокументов = Новый Соответствие;
	СтатусРегистрацииДляИсходящихНалоговыхДокументов.Вставить(-3, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ПустаяСсылка());
	СтатусРегистрацииДляИсходящихНалоговыхДокументов.Вставить(-2, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ПустаяСсылка());
	СтатусРегистрацииДляИсходящихНалоговыхДокументов.Вставить(-1, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.НеЗарегистрированВЕРНН);
	СтатусРегистрацииДляИсходящихНалоговыхДокументов.Вставить( 0, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.НеЗарегистрированВЕРНН);
	СтатусРегистрацииДляИсходящихНалоговыхДокументов.Вставить( 1, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.НаправленНаРегистрациюВЕРНН);
	СтатусРегистрацииДляИсходящихНалоговыхДокументов.Вставить( 2, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.НаправленНаРегистрациюВЕРНН);
	СтатусРегистрацииДляИсходящихНалоговыхДокументов.Вставить( 3, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ОтказаноВРегистрацииВЕРНН);
	СтатусРегистрацииДляИсходящихНалоговыхДокументов.Вставить( 4, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН);		
	мПараметрыРаботыЗвит1С.Вставить("СтатусРегистрацииДляИсходящихНалоговыхДокументов", СтатусРегистрацииДляИсходящихНалоговыхДокументов);
	
	
	// Ошибки генерируемые в FREDO Звіт при проверке статусов налоговых документов (входящих)
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов = Новый Соответствие;
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить(-3, НСтр("ru='<В запросе не заполнены обязательные параметры>';uk=""<У запиті не заповнені обов'язкові параметри>""") + " DOC_TYPE и DOC_MOVE>");
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить(-2, НСтр("ru='В ""FREDO Звіт"" обнаружено более одного вытяга соответствующего документу ';uk='В ""FREDO Звіт"" виявлено більше одного витяга відповідного документу '")+ИндКонф); // Несуществующее состояние для входящих 
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить(-1, НСтр("ru='Не сформирован запрос в ""FREDO Звіт""';uk='Не сформований запит в ""FREDO Звіт""'")); // -1 Еще не реализовано со стороны FREDO Звіт, пока используется +2
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 1, НСтр("ru='Запрос сформирован в ""FREDO Звіт""';uk='Запит сформовано в ""FREDO Звіт""'"));       //  0 Еще не реализовано со стороны FREDO Звіт, пока используется +2
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 0, НСтр("ru='Запрос отправлен в ГНС';uk='Запит надіслано до ДПС'"));
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 2, НСтр("ru='Не получен вытяг из ЕРНН';uk='Не отримано витяг з ЄРПН'"));                      // +2 Временно, до реализаци статусов -1 и 0
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 3, НСтр("ru='Не зарегистрирован в ГНС';uk='Не зареєстрований в ДПС'"));
	ПредставлениеСостоянийДляВходящихНалоговыхДокументов.Вставить( 4, НСтр("ru='Зарегистрирован в ГНС';uk='Зареєстровано в ДПС'"));
	мПараметрыРаботыЗвит1С.Вставить("ПредставлениеСостоянийДляВходящихНалоговыхДокументов", ПредставлениеСостоянийДляВходящихНалоговыхДокументов);
	
	
	СтатусРегистрацииДляВходящихНалоговыхДокументов = Новый Соответствие;
	СтатусРегистрацииДляВходящихНалоговыхДокументов.Вставить(-3, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ПустаяСсылка());                                     // Аналогично исходящим
	СтатусРегистрацииДляВходящихНалоговыхДокументов.Вставить(-2, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ПустаяСсылка()); // Несуществующее состояние для входящих 
	СтатусРегистрацииДляВходящихНалоговыхДокументов.Вставить(-1, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ПустаяСсылка()); // -1 Еще не реализовано со стороны FREDO Звіт, пока используется +2
	СтатусРегистрацииДляВходящихНалоговыхДокументов.Вставить( 1, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ПустаяСсылка());       //  0 Еще не реализовано со стороны FREDO Звіт, пока используется +2
	СтатусРегистрацииДляВходящихНалоговыхДокументов.Вставить( 0, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ПустаяСсылка());
	СтатусРегистрацииДляВходящихНалоговыхДокументов.Вставить( 2, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ПустаяСсылка());                      // +2 Временно, до реализаци статусов -1 и 0
	СтатусРегистрацииДляВходящихНалоговыхДокументов.Вставить( 3, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.НеЗарегистрированВЕРНН);
	СтатусРегистрацииДляВходящихНалоговыхДокументов.Вставить( 4, Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН);
	мПараметрыРаботыЗвит1С.Вставить("СтатусРегистрацииДляВходящихНалоговыхДокументов", СтатусРегистрацииДляВходящихНалоговыхДокументов);
	
	
	мПараметрыРаботыЗвит1С.Вставить("ОшибкаВзаимодействияСЗвит1ССтр", НСтр("ru='<Ошибка взаимодействия с ""FREDO Звіт"">';uk='<Помилка взаємодії з ""FREDO Звіт"">'"));
	
	АвтоЗаголовок = Ложь;
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		ЭтаФорма.Заголовок = НСтр("ru='Выгрузка исходящих налоговых документов в ""FREDO Звіт""';uk='Вивантаження вихідних податкових документів в ""FREDO Звіт""'");		
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru='Проверка регистрации входящих налоговых документов в ""FREDO Звіт""';uk='Перевірка реєстрації вхідних податкових документів в ""FREDO Звіт""'");		
	КонецЕсли;
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		
		КолонкаПометкаВыполнить_Текст       = НСтр("ru='Выгружать';uk='Вивантажувати'");
		КолонкаПометкаВыполнить_ПолныйТекст = НСтр("ru='Отметка, указывает на то что документ будет выгружен в ""FREDO Звіт""';uk='Позначка, що вказує на те, що документ буде вивантажений в ""FREDO Звіт""'");
		
		ВыполнитьТекст = НСтр("ru='Выгрузить в ""FREDO Звіт""';uk='Вивантажити в ""FREDO Звіт""'");
		
	Иначе
		                               
		КолонкаПометкаВыполнить_Текст       = НСтр("ru='Запрос';uk='Запит'");
		КолонкаПометкаВыполнить_ПолныйТекст = НСтр("ru='Отметка, указывает на то что для документа будет сформирован и отправлен запрос состояния регистрации в ЕРНН через ""FREDO Звіт""';uk='Позначка, що вказує на те, що для документа буде сформований та відправлений запит стану реєстрації в ЄРПН через ""FREDO Звіт""'");
		
		ВыполнитьТекст = НСтр("ru='Отправить запрос в ЕРНН';uk='Відправити запит до ЄРПН'");
		
	КонецЕсли;
	
	Элементы.ТаблицаДокументовПометка_Выполнить.Заголовок = КолонкаПометкаВыполнить_Текст;
	Элементы.ТаблицаДокументовПометка_Выполнить.Подсказка = КолонкаПометкаВыполнить_ПолныйТекст;
	
	Элементы.ТаблицаДокументовВыгрузитьВ1СЗвит.Заголовок = ВыполнитьТекст;
	
	ПропускатьЗарегистрированныеТекст = НСтр("ru='Пропускать налоговые документы, включенные в ЕРНН (по данным ';uk='Пропускати податкові документи, включені в ЄРПН (за даними '")+ ИндКонф + ")";
	Элементы.ПропускатьЗарегистрированныеПоДанным1С.Заголовок = ПропускатьЗарегистрированныеТекст;
	
	ЗафиксироватьСостояниеТекст = НСтр("ru='Синхронизировать состояние регистрации в ';uk='Синхронізувати стан реєстрації в '") + ИндКонф;
	Элементы.ТаблицаДокументовЗафиксироватьСостояниеРегистрацииВ1С.Заголовок = ЗафиксироватьСостояниеТекст;
	ОткрытьДокументТекст = НСтр("ru='Открыть документ в  ';uk='Відкрити документ в  '") + ИндКонф;
	Элементы.ТаблицаДокументовОткрытьВ1С_1.Заголовок = ОткрытьДокументТекст;
	
	НомерТекст = "Номер док. " + ИндКонф;
	Элементы.ТаблицаДокументовНомер.Заголовок = НомерТекст;
	ДатаТекст = "Дата док. " + ИндКонф;
	Элементы.ТаблицаДокументовДата.Заголовок = ДатаТекст;
	
	ОткрытьТекст = НСтр("ru='Открыть документ в ';uk='Відкрити документ в '")+ ИндКонф;
	Элементы.ТаблицаДокументовОткрытьВ1С.Заголовок = ОткрытьТекст; 
	
	СтатусТекст = НСтр("ru='Статус регистр. из док. ';uk='Статус реєстр. з док. '")+ ИндКонф;
	Элементы.ТаблицаДокументовСтатусРегистрацииВЕРНН.Заголовок = СтатусТекст;
	ДатаЕРННТекст = НСтр("ru='Дата регистр. из док. ';uk='Дата реєстр. з док. '")+ ИндКонф;
	Элементы.ТаблицаДокументовДатаВключенияВЕдиныйРеестрНалоговыхНакладных.Заголовок = ДатаЕРННТекст;
	СуммаНДСТекст = НСтр("ru='Сумма НДС из док. ';uk='Сума ПДВ з док. '")+ ИндКонф;
	Элементы.ТаблицаДокументовСуммаНДСДокумента.Заголовок = СуммаНДСТекст;
	
	Элементы.ТаблицаДокументовСтатусРегистрацииВЕРНН.Видимость      				 =  мЭтоИсходящиеНалоговыеДокументы;
	Элементы.ТаблицаДокументовДатаВключенияВЕдиныйРеестрНалоговыхНакладных.Видимость = НЕ мЭтоИсходящиеНалоговыеДокументы;

	Элементы.ТаблицаДокументовОткрытьВ1СЗвит.Видимость   = мЭтоИсходящиеНалоговыеДокументы;
	Элементы.ТаблицаДокументовОткрытьВ1СЗвит_1.Видимость = мЭтоИсходящиеНалоговыеДокументы;
	
	Элементы.ТаблицаДокументовКтоВыписалНалоговуюНакладную.Видимость 		=  мЭтоИсходящиеНалоговыеДокументы;
	Элементы.ТаблицаДокументовЗвит1С_КтоВыписалНалоговуюНакладную.Видимость = НЕ мЭтоИсходящиеНалоговыеДокументы;
	
	Элементы.ГруппаУточнениеПоказателей.Видимость = мЭтоИсходящиеНалоговыеДокументы;
	
	Если ИДКонфигурации = "БП" Тогда
		ВЫПОЛНИТЬ("УчетНДС.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора)");
	Иначе	
	    ВЫПОЛНИТЬ("НДСОбщегоНазначенияСервер.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора)");
	КонецЕсли;
	
	Элементы.СпецРежимНалогообложения.СписокВыбора.Вставить(0, Неопределено, НСтр("ru='любой';uk= 'будь-який'"));
	
	Элементы.ТаблицаДокументовТипПричиныНевыдачиПокупателю.Видимость = мЭтоИсходящиеНалоговыеДокументы;
	
	Суффикс = ?(мЭтоИсходящиеНалоговыеДокументы, "Исходящие", "Входящие");
	ДатаНачала                          	   = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_НачПериода", "");
	ДатаОкончания					   		   = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_КонПериода", "");	
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоМесяца(ТекущаяДата());
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если  (ДатаНачала > ДатаОкончания) Тогда
		ДатаОкончания = КонецМесяца(ДатаНачала);
	КонецЕсли;
	
	Период.ДатаНачала    = ?(ЗначениеЗаполнено(ДатаНачала),    ДатаНачала,    '0001-01-01');
	Период.ДатаОкончания = ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, '0001-01-01');
	
	Организация                                = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Организация", "");	
	
	Если Не ЗначениеЗаполнено(Организация) Тогда		
		Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_Организация", "");	
	КонецЕсли;
	СтараяОрганизация = Организация; 
	
	ЗаполнитьЕДРПОУОрганизации();
	
	ПропускатьЗарегистрированныеПоДанным1С     = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_ПропускатьЗарегистрированныеПоДанным1С", "");	
	Контрагент                                 = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_Контрагент", "");
	ОбособленноеПодразделение                  = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_ОбособленноеПодразделение", "");
	СпецРежимНалогообложения                   = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_СпецРежимНалогообложения", "");
	текРежимУточненияПоказателей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_РежимУточненияПоказателей", "");
	Если текРежимУточненияПоказателей = Неопределено Тогда
		текРасчетЦеныТочный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_РасчетЦеныТочный", "");
		Если текРасчетЦеныТочный = Истина Тогда
			РежимУточненияПоказателей = 2;
		КонецЕсли;
	Иначе
		РежимУточненияПоказателей = текРежимУточненияПоказателей;
	КонецЕсли;
	
	СписокСвойствДокументов1С = Новый Структура();
	СписокСвойствДокументов1С.Вставить("ВидДокумента");
	СписокСвойствДокументов1С.Вставить("Дата");
	СписокСвойствДокументов1С.Вставить("Номер");
	СписокСвойствДокументов1С.Вставить("ДатаВходящегоДокумента");
	// фактически полный номер с номером филиала и спец. режима
	СписокСвойствДокументов1С.Вставить("НомерВходящегоДокумента");
	СписокСвойствДокументов1С.Вставить("НомерПорядковый");
	СписокСвойствДокументов1С.Вставить("СпецРежимНалогообложения"); 
	СписокСвойствДокументов1С.Вставить("Филиал"); 
	СписокСвойствДокументов1С.Вставить("Контрагент");
	СписокСвойствДокументов1С.Вставить("Ответственный"); //
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		СписокСвойствДокументов1С.Вставить("КтоВыписалНалоговуюНакладную");
		СписокСвойствДокументов1С.Вставить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
		СписокСвойствДокументов1С.Вставить("СтатусРегистрацииВЕРНН");
		СписокСвойствДокументов1С.Вставить("ТипПричиныНевыдачиПокупателю");
	Иначе
		СписокСвойствДокументов1С.Вставить("ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных");
		СписокСвойствДокументов1С.Вставить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных");
	КонецЕсли;
	СписокСвойствДокументов1С.Вставить("СуммаНДСДокумента"); 
	СписокСвойствДокументов1С.Вставить("Контрагент_ИНН"); 
	СписокСвойствДокументов1С.Вставить("Организация_ЕДРПОУ"); 
	СписокСвойствДокументов1С.Вставить("ИДДокумента");
	СписокСвойствДокументов1С.Вставить("ДокументКорректен");
	СписокСвойствДокументов1С.Вставить("ДокументКорректен_ОписаниеОшибки");
	
	СписокСвойствДокументов1СЗвит = Новый Структура();
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_ДатаРегистрации");
	Если НЕ мЭтоИсходящиеНалоговыеДокументы Тогда
		СписокСвойствДокументов1СЗвит.Вставить("Звит1С_КтоВыписалНалоговуюНакладную");
	КонецЕсли;
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_СуммаНДС");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Состояние");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_ДокументКорректен");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_СтатусРегистрацииВЕРНН");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Контрагент_ИНН");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Организация_ЕДРПОУ");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_НомерПорядковый");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_СпецРежимНалогообложения");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Филиал");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Дата");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_ДокументЗарегистрирован");
	СписокСвойствДокументов1СЗвит.Вставить("СостояниеСтр");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_СовпадаютКлючевыеПоля");
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьЕДРПОУОрганизации()
	
	// получим информацию об организации из шапки обработки
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , СписокПоказателей);
	Сведения.Свойство("КодПоЕДРПОУ", Организация_ЕДРПОУ);

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мЭтоИсходящиеНалоговыеДокументы = Параметры.мЭтоИсходящиеНалоговыеДокументы;
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ТипЗнч(ЗавершениеРаботы) = Тип("Булево") Тогда
		Если ЗавершениеРаботы Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;

	Суффикс = ?(мЭтоИсходящиеНалоговыеДокументы, "Исходящие", "Входящие");
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_ПропускатьЗарегистрированныеПоДанным1С", ,ПропускатьЗарегистрированныеПоДанным1С);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_НачПериода",                             ,Период.ДатаНачала);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_КонПериода",	                           ,Период.ДатаОкончания);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Организация",                            ,Организация);	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_Контрагент",                       ,Контрагент);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_ОбособленноеПодразделение",        ,ОбособленноеПодразделение);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_"+Суффикс+"_Отбор_СпецРежимНалогообложения",         ,СпецРежимНалогообложения);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_РежимУточненияПоказателей", ,РежимУточненияПоказателей);
КонецПроцедуры

// Функция открывает налоговый документ в FREDO Звіт
// 
&НаКлиенте
Функция ОткрытьДокументВЗвит1С(ДокументСсылка) Экспорт
		
	глМенеджерЗвит1С.ОткрытьДокументВЗвит1С(ДокументСсылка);
	
КонецФункции


&НаКлиенте
Процедура ТаблицаДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФормуВыбораНалоговогоДокумента();

КонецПроцедуры


// Функция открывает форму выбора типа исходящего налогово документа
//
&НаКлиенте
Процедура ОткрытьФормуВыбораНалоговогоДокумента(ДляПодбора = Ложь) 
	
	Если Организация.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru='Укажите организацию';uk='Вкажіть організацію'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	
	КонецЕсли;
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		СписокТиповДокументов = Новый СписокЗначений;
		СписокТиповДокументов.Добавить("НалоговаяНакладная",             "Налоговая накладная");
		СписокТиповДокументов.Добавить("Приложение2КНалоговойНакладной", "Приложение 2 к налоговой накладной");
		
		ВыбранноеЗначение = Неопределено;
		СписокТиповДокументов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОткрытьФормуВыбораНалоговогоДокументаЗавершение", ЭтотОбъект, Новый Структура("ДляПодбора", ДляПодбора)), НСтр("ru='Тип документа';uk='Тип документа'"));
        Возврат;			
	Иначе
		ИмяДокумента = "РегистрацияВходящегоНалоговогоДокумента";
	КонецЕсли;
	      
	ОткрытьФормуВыбораНалоговогоДокументаФрагмент(ДляПодбора, ИмяДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНалоговогоДокументаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ДляПодбора = ДополнительныеПараметры.ДляПодбора;
    
    ВыбранноеЗначение = ВыбранныйЭлемент;
    Если ВыбранноеЗначение = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ИмяДокумента = ВыбранноеЗначение.Значение;			
    
    ОткрытьФормуВыбораНалоговогоДокументаФрагмент(ДляПодбора, ИмяДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНалоговогоДокументаФрагмент(Знач ДляПодбора, Знач ИмяДокумента)
    
    Перем Отбор, ПараметрыФормыВыбора, Форма;
    
    ПараметрыФормыВыбора = Новый Структура();
    
    Отбор = Новый Структура;
    
    Отбор.Вставить("Организация",			   Организация);
    
    Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
        Отбор.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Контрагент) Тогда
        Отбор.Вставить("Контрагент", Контрагент);
    КонецЕсли;
	
	Если СпецРежимНалогообложения <> Неопределено Тогда
        Отбор.Вставить("СпецРежимНалогообложения", СпецРежимНалогообложения);
    КонецЕсли;
    
    Если ПропускатьЗарегистрированныеПоДанным1С Тогда
        Отбор.Вставить("ВключенаВЕдиныйРеестрНалоговыхНакладных", Ложь);
        Отбор.Вставить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных", '0001-01-01');
    КонецЕсли;
    
    ПараметрыФормыВыбора.Вставить("Отбор", 			    Отбор);
    ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
    
    Форма = ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаВыбора", ПараметрыФормыВыбора, Элементы.ТаблицаДокументов);
    
    Если ДляПодбора Тогда
        Форма.ЗакрыватьПриВыборе = Ложь;
    КонецЕсли;
    
    Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;

КонецПроцедуры


&НаКлиенте
Процедура Подбор(Команда)
	
	ОткрытьФормуВыбораНалоговогоДокумента(Истина);

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаДокументовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивДокументов = ВыбранноеЗначение;
	Иначе
		МассивДокументов = Новый Массив(1);
		МассивДокументов[0] = ВыбранноеЗначение;
	КонецЕсли;
	
	ДобавленныеСтрокиТаблицыДокументов = Новый Массив;
	СтрокаТаблицыДокументов = Неопределено;
	Для каждого Документ Из МассивДокументов Цикл
		
		ДокументСоответсвуетРежиму = ((мЭтоИсходящиеНалоговыеДокументы) И (ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") ИЛИ 
														                     ТипЗнч(Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной")))
							     ИЛИ ((Не мЭтоИсходящиеНалоговыеДокументы) И ТипЗнч(Документ) = Тип("ДокументСсылка.РегистрацияВходящегоНалоговогоДокумента"));
								 
		Если Не ДокументСоответсвуетРежиму Тогда
			Сообщить(НСтр("ru='Выбор документов данного типа не поддерживается';uk='Вибір документів даного типу не підтримується'"), СтатусСообщения.Информация); 						 
			Прервать;	
		КонецЕсли;
		
		ДобавленныеСтрокиТаблицыДокументов.Добавить(ДобавитьСтрокуВТаблицуДокументов(Документ));
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыДокументов(МассивДокументов);
	
КонецПроцедуры


&НаКлиенте
Функция ДобавитьСтрокуВТаблицуДокументов(Документ)

	СтрокаТаблицыДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
	Если СтрокаТаблицыДокументов.Количество() = 0 Тогда
		СтрокаТаблицыДокументов = ТаблицаДокументов.Добавить();
		СтрокаТаблицыДокументов.Документ = Документ;
	Иначе
		СтрокаТаблицыДокументов	= СтрокаТаблицыДокументов[0];
	КонецЕсли;
	
	Элементы.ТаблицаДокументов.ТекущаяСтрока = СтрокаТаблицыДокументов.ПолучитьИдентификатор();		
	
	Возврат СтрокаТаблицыДокументов;
	
КонецФункции


// Фунция используется для добавления документов из вне
//
&НаКлиенте
Процедура ДобавитьНалоговыйДокумент(ДокументСсылка, ОрганизацияВДокументе, ФормаДокумента = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОрганизацияВДокументе) Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не указана организация';uk='У документі не зазначена організація'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Если НЕ ФормаДокумента = Неопределено Тогда
			ФормаДокумента.Активизировать();
		КонецЕсли;
		
		Возврат;		
		
	ИначеЕсли ОрганизацияВДокументе <> Организация Тогда
		
		Если ТаблицаДокументов.Количество() <> 0 Тогда
			ТекстВопроса = НСтр("ru='Организация в документе не соответсвует организации 
|указанной в обработке. Табличная часть будет очищена. 
|
|Продолжить?';uk='Організація в документі не відповідає організації 
|зазначеної в обробці. Таблична частина буде очищена. 
|
|Продовжити?'");
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьНалоговыйДокументЗавершение", ЭтотОбъект, Новый Структура("ФормаДокумента, ОрганизацияВДокументе, ДокументСсылка", ФормаДокумента, ОрганизацияВДокументе, ДокументСсылка)), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
			Возврат;			
			
		КонецЕсли;
		
		Организация = ОрганизацияВДокументе;
		ОбособленноеПодразделение = Неопределено;
		
		ЗаполнитьЕДРПОУОрганизации();
		
	КонецЕсли;
	
	ТаблицаДокументовОбработкаВыбора(Элементы.ТаблицаДокументов, ДокументСсылка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНалоговыйДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ФормаДокумента 			= ДополнительныеПараметры.ФормаДокумента;
    ОрганизацияВДокументе 	= ДополнительныеПараметры.ОрганизацияВДокументе;
	ДокументСсылка			= ДополнительныеПараметры.ДокументСсылка;
	
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Если ФормаДокумента <> Неопределено Тогда
            ФормаДокумента.Активизировать();
        КонецЕсли;
        Возврат;
    КонецЕсли; 
    
    СтараяОрганизация = Организация;
    ТаблицаДокументов.Очистить();

	Организация = ОрганизацияВДокументе;
	ОбособленноеПодразделение = Неопределено;
	
	ЗаполнитьЕДРПОУОрганизации();
	
	ТаблицаДокументовОбработкаВыбора(Элементы.ТаблицаДокументов, ДокументСсылка, Истина);

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока  = Элементы.ТаблицаДокументов.ТекущиеДанные;
	Документ 	   = ТекущаяСтрока.Документ;

	ВариантОткрытия = "BAS";
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		
		МенюВыбора = Новый СписокЗначений();
		МенюВыбора.Добавить("BAS",     НСтр("ru='Открыть документ в BAS';uk= 'Відкрити документ у BAS'"));
		МенюВыбора.Добавить("FREDOЗвит", НСтр("ru='Открыть документ в FREDO ДокМен';uk= 'Відкрити документ в FREDO ДокМен'"));
		
		РезультатВыбора = Неопределено;

		
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТаблицаДокументовВыборЗавершение", ЭтотОбъект, Новый Структура("Документ, ТекущаяСтрока", Документ, ТекущаяСтрока)), МенюВыбора, Элемент);
        Возврат;
		
	КонецЕсли;
	
	ТаблицаДокументовВыборДействиеОткрыть(ВариантОткрытия, Документ, ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Документ = ДополнительныеПараметры.Документ;
    ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
    
    
    РезультатВыбора = ВыбранныйЭлемент; 
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ВариантОткрытия = РезультатВыбора.Значение;
    
    
    ТаблицаДокументовВыборДействиеОткрыть(ВариантОткрытия, Документ, ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыборДействиеОткрыть(Знач ВариантОткрытия, Знач Документ, Знач ТекущаяСтрока)
	
	Если ВариантОткрытия = "BAS" Тогда
        ОткрытьФормуДокументаВ1С(Документ, ТекущаяСтрока);
    Иначе	
        ОткрытьФормуДокументаВ1СЗвит(Документ);
    КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьВ1С(Команда)
	
	ТекущаяСтрока = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Укажите документ, который необходимо открыть!';uk='Вкажіть документ, який необхідно відкрити!'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Документ = ТекущаяСтрока.Документ;
	
	ОткрытьФормуДокументаВ1С(Документ, ТекущаяСтрока);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьВ1СЗвит(Команда)
	
	ТекущаяСтрока = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Укажите документ, который необходимо открыть!';uk='Вкажіть документ, який необхідно відкрити!'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Документ = ТекущаяСтрока.Документ;
	
	ОткрытьФормуДокументаВ1СЗвит(Документ);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуДокументаВ1С(Документ, ТекущаяСтрока)

	ПараметрыВыбораДокумента = Новый Структура();
	ПараметрыВыбораДокумента.Вставить("Ключ", Документ);
	
	ВидДокумента = Сред(ТипЗнч(Документ), 15);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
		
		ОткрытьФорму("Документ.НалоговаяНакладная.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
		
		ОткрытьФорму("Документ.Приложение2КНалоговойНакладной.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.РегистрацияВходящегоНалоговогоДокумента") Тогда
		
		ОткрытьФорму("Документ.РегистрацияВходящегоНалоговогоДокумента.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаВ1СЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Документ = ДополнительныеПараметры.Документ;
	ПараметрыВыбораДокумента = ДополнительныеПараметры.ПараметрыВыбораДокумента;
	
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Документ);
	
	ЗаполнитьРеквизитыДокументов(МассивДокументов)
	
КонецПроцедуры

// Процедура выполняет заполнение реквизитов табличной части документов
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыДокументов(МассивДокументов)

	ТаблицаДокументовЗаполнитьРеквизитыДокументов1С(МассивДокументов);
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит(МассивДокументов);
	
	ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации(МассивДокументов);
		
КонецПроцедуры	


&НаКлиенте
Процедура ОткрытьФормуДокументаВ1СЗвит(Документ)

	глМенеджерЗвит1С.ОткрытьДокументВЗвит1С(Документ);

КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ТаблицаДокументов.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk= 'Таблична частина буде очищена. Продовжити?'");
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
        Возврат;
		
	КонецЕсли;
	
	ОрганизацияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если НЕ Ответ = КодВозвратаДиалога.ОК Тогда
        Организация = СтараяОрганизация;
        Возврат;
    КонецЕсли; 
    
    ТаблицаДокументов.Очистить();
    
    
    ОрганизацияПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагмент()
    
    СтараяОрганизация = Организация; 
    ОбособленноеПодразделение = Неопределено;
    
    ЗаполнитьЕДРПОУОрганизации();

КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Период.ДатаНачала) ИЛИ Не ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		ТекстСообщения = НСтр("ru='Не определен период выборки данных';uk='Не визначений період вибірки даних'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru='Не указана организация';uk='Не зазначена організація'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДатаНачалаИспользованияЗвит1С = РегламентированнаяОтчетностьВызовСервера.ПолучитьДатаНачалаИспользованияЗвит1С(Организация);
	
	Если Не ЗначениеЗаполнено(ДатаНачалаИспользованияЗвит1С) Тогда
		ТекстСообщения = НСтр("ru='Выгрузка в систему ""FREDO Звіт"" невозможна, ""FREDO Звіт"" не используется для организации';uk='Вивантаження в систему ""FREDO Звіт"" неможливе, ""FREDO Звіт"" не використовується для організації'")
		                     +" """+Строка(Организация)+"""."+Символы.ПС+НСтр("ru='Не указана дата начала использования ""FREDO"" в карточке организации';uk='Не зазначена дата початку використання ""FREDO"" у картці організації'");
		ПоказатьПредупреждение(,ТекстСообщения);	
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
        Возврат;
	КонецЕсли;

	ЗаполнитьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ        = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли; 
    ТаблицаДокументов.Очистить();
    
    ЗаполнитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
    
    ТаблицаДокументовЗаполнитьНаСервере();
    
    ТаблицаДокументовЗаполнитьРеквизитыДокументов1С();
    
    ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит();
    
    ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации();

КонецПроцедуры


&НаКлиенте
Процедура Обновить(Команда)
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1С();
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит();
	
	ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьВ1СЗвит(Команда)
	
	ТаблицаДокументовВыгрузитьДокументыИлиЗапросВ1СЗвит();	
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит();
	
	ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗафиксироватьСостояниеРегистрацииВ1С(Команда)
	
	ТаблицаДокументовЗафиксироватьСостояниеРегистрацииВ1С();
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1С();
	
	ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации();
	
КонецПроцедуры


&НаСервере
Процедура ТаблицаДокументовЗаполнитьНаСервере()

	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Приложение2КНалоговойНакладной.Ссылка,
		|	Приложение2КНалоговойНакладной.НалоговаяНакладная
		|ПОМЕСТИТЬ Приложение2ТребующиеРегистрации
		|ИЗ
		|	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|ГДЕ
		|	Приложение2КНалоговойНакладной.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И Приложение2КНалоговойНакладной.Организация = &Организация
		|	И Приложение2КНалоговойНакладной.Проведен
		|	И Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		НалоговаяНакладная.Дата КАК Дата,
		|		НалоговаяНакладная.Ссылка КАК Ссылка,
		|		НалоговаяНакладная.Контрагент КАК Контрагент,
		|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную,
		|		НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
		|		НалоговаяНакладная.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных  КАК ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
		|	ГДЕ
		|		((НалоговаяНакладная.Ссылка В
		|						(ВЫБРАТЬ
		|							Приложение2ТребующиеРегистрации.НалоговаяНакладная
		|						ИЗ
		|							Приложение2ТребующиеРегистрации КАК Приложение2ТребующиеРегистрации)
		|					И НЕ НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных)
		|				ИЛИ ( НалоговаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода
		|					И НалоговаяНакладная.Организация = &Организация
		|					И НалоговаяНакладная.Проведен
		|					И НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Приложение2КНалоговойНакладной.Дата,
		|		Приложение2КНалоговойНакладной.Ссылка,
		|		Приложение2КНалоговойНакладной.Контрагент,
		|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную,
		|		Приложение2КНалоговойНакладной.СпецРежимНалогообложения,
		|		Приложение2КНалоговойНакладной.НалоговаяНакладная.ОбособленноеПодразделение,
		|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных  КАК ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|	ГДЕ
		|		Приложение2КНалоговойНакладной.Ссылка В
		|				(ВЫБРАТЬ
		|					Приложение2ТребующиеРегистрации.Ссылка
		|				ИЗ
		|					Приложение2ТребующиеРегистрации КАК Приложение2ТребующиеРегистрации)) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.СпецРежимНалогообложения,
		|	ВложенныйЗапрос.ОбособленноеПодразделение,
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Дата,
		|	ВложенныйЗапрос.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗКП.Дата КАК Дата,
		|		ЗКП.Ссылка КАК Ссылка,
		|		ЗКП.Контрагент КАК Контрагент,
		|		ЗКП.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
		|		ЗКП.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|		ВЫБОР
		|			КОГДА ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК ЗКП
		|	ГДЕ
		|		ЗКП.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ЗКП.Организация = &Организация
		|		И ЗКП.Проведен
		|		И ЗКП.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.СпецРежимНалогообложения,
		|	ВложенныйЗапрос.ОбособленноеПодразделение,
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Дата,
		|	ВложенныйЗапрос.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	КонецЕсли;
	
	
	Если ИдКонфигурации = "ЕРП" или ИдКонфигурации = "BASУТ" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								  "НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных",
								  "ВЫБОР КОГДА НалоговаяНакладная.СтатусРегистрацииВЕРНН = ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ");
								  
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								  "Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных",
								  "ВЫБОР КОГДА Приложение2КНалоговойНакладной.СтатусРегистрацииВЕРНН = ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ");
	КонецЕсли;
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);

	ПостроительЗапроса.ЗаполнитьНастройки();
	
	ПостроительЗапроса.Параметры.Вставить("НачПериода",  НачалоДня(Период.ДатаНачала));
	ПостроительЗапроса.Параметры.Вставить("КонПериода",  КонецДня(Период.ДатаОкончания));
	ПостроительЗапроса.Параметры.Вставить("Организация", Организация);
	
	Отбор = ПостроительЗапроса.Отбор;
	
	Если ПропускатьЗарегистрированныеПоДанным1С Тогда
		ЭлементОтбора = Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Ложь;
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементОтбора = Отбор.Добавить("Контрагент");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Контрагент;
		ЭлементОтбора.ВидСравнения  = ?(Контрагент.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
		ЭлементОтбора = Отбор.Добавить("ОбособленноеПодразделение");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ОбособленноеПодразделение;
		ЭлементОтбора.ВидСравнения  = ?(ОбособленноеПодразделение.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если СпецРежимНалогообложения <> Неопределено Тогда
		ЭлементОтбора = Отбор.Добавить("СпецРежимНалогообложения");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = СпецРежимНалогообложения;
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	ПодобранныеДокументы = ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ = ПодобранныйДокумент.Документ;
	КонецЦикла; 

КонецПроцедуры


&НаСервере
Процедура ТаблицаДокументовЗаполнитьРеквизитыДокументов1С(МассивДокументов = Неопределено)

	Если НЕ ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого СтрокаДок Из ТаблицаДокументов Цикл
			МассивДокументов.Добавить(СтрокаДок.Документ);	
		КонецЦикла;
		
	КонецЕсли;
	
	РеквизитыДокументов1С = ПолучитьРеквизитыДокументов1С(ИдКонфигурации, МассивДокументов, мЭтоИсходящиеНалоговыеДокументы);
	
	// заполняем полученными данными все строки таблицы с указанными ссылками
	Для каждого Документ Из МассивДокументов Цикл
		
		РеквизитыДокумента1С = РеквизитыДокументов1С.Найти(Документ, "Документ");	
		
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			
			Если РеквизитыДокумента1С = Неопределено Тогда
				// фактически очищаем все свойства, т.к. данные получить по ссылке не удалось
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СписокСвойствДокументов1С);
			Иначе
				// заполняем найденными свойствами строку
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РеквизитыДокумента1С);
				Если СтрокаТаблицы.ТипПричиныНевыдачиПокупателю = "0" Тогда
					СтрокаТаблицы.ТипПричиныНевыдачиПокупателю = "";
				КонецЕсли;
			КонецЕсли;
				
			
			Если  мЭтоИсходящиеНалоговыеДокументы
				И (  НЕ РеквизитыДокумента1С.ВалютаДокумента = мВалютаРегламентированногоУчета И НЕ СтрокаТаблицы.СуммаНДСДокумента = 0
				   ИЛИ ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ"
				  )	
				
				Тогда
				
				НалоговыйДокументОбъект = РеквизитыДокумента1С.Документ;
				
				ИспользоватьДанныеЗЦ = Ложь;
				Если  РеквизитыДокумента1С.ВидДокумента = "ПН"
					И ИдКонфигурации = "БП"
					И ЗначениеЗаполнено(НалоговыйДокументОбъект.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
					НалоговыйДокументОбъект = НалоговыйДокументОбъект.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены;	
					ИспользоватьДанныеЗЦ = Истина;
				КонецЕсли;
				Попытка
					Если РеквизитыДокумента1С.ВидДокумента = "ПН" Тогда
						КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("НалоговаяНакладная");
					Иначе
						КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("Приложение2КНалоговойНакладной");
					КонецЕсли;
					
					МассивОбъектов = Новый Массив;
					МассивОбъектов.Добавить(НалоговыйДокументОбъект);
					ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
					
					Если РеквизитыДокумента1С.ВидДокумента = "ПН" Тогда
						Документы.НалоговаяНакладная.Печать(МассивОбъектов, Новый Структура("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы"), КоллекцияПечатныхФорм, Неопределено, ПараметрыВывода);
					Иначе	
						Документы.Приложение2КНалоговойНакладной.Печать(МассивОбъектов, Новый Структура("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы"), КоллекцияПечатныхФорм, Неопределено, ПараметрыВывода);
					КонецЕсли;
					
					СтруктураПараметров = КоллекцияПечатныхФорм[0].ТабличныйДокумент; 
					
					Если СтруктураПараметров = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИспользоватьДанныеЗЦ Тогда
						ДанныеШапки 	= СтруктураПараметров.НалоговыйДокументЗЦ;
					Иначе	
						ДанныеШапки 	= СтруктураПараметров.НалоговыйДокумент;
					КонецЕсли;
					
					Если РеквизитыДокумента1С.ВидДокумента = "ПН" Тогда
						Если ДанныеШапки.Свойство("R03G11") Тогда
							СтрокаТаблицы.СуммаНДСДокумента = ДанныеШапки.R03G11;
						КонецЕсли;
					Иначе	
						Если ДанныеШапки.Свойство("R001G03") Тогда
							СтрокаТаблицы.СуммаНДСДокумента = ДанныеШапки.R001G03;
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			// обработаем код ЕДРПОУ организации
			СтрокаТаблицы.Организация_ЕДРПОУ = СокрЛП(СтрокаТаблицы.Организация_ЕДРПОУ);
			
			// обработаем ИНН Контрагента
			СтрокаТаблицы.Контрагент_ИНН = СокрЛП(СтрокаТаблицы.Контрагент_ИНН);
			
			СтрокаТаблицы.ИДДокумента = РегламентированнаяОтчетностьКлиентСервер.ПолучитьУникальныйИдентификаторДокумента(Документ);
			
			// особые реквизиты, из запроса получить невозможно
			ОписаниеОшибки = "";
			Если мЭтоИсходящиеНалоговыеДокументы Тогда
				ОписаниеОшибки = ОпределитьПорядковыйНомерИсходящейНН(СтрокаТаблицы);
			Иначе	
				ОписаниеОшибки = РазобратьНомерВходящейНННаСоставляющие(СтрокаТаблицы);
			КонецЕсли;
			
			ПроверитьКорректностьДокумента(СтрокаТаблицы, ОписаниеОшибки);
			
		КонецЦикла;
			
	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ПроверитьКорректностьДокумента(ДанныеДокумента1С, ДокументКорректен_ОписаниеОшибки = "")
	
	ДокументКорректен = НЕ ЗначениеЗаполнено(ДокументКорректен_ОписаниеОшибки);
	
	Если НЕ (ДанныеДокумента1С.Организация_ЕДРПОУ = Организация_ЕДРПОУ) Тогда
		ДокументКорректен_ОписаниеОшибки = ДокументКорректен_ОписаниеОшибки + 
											  ?(ЗначениеЗаполнено(ДокументКорректен_ОписаниеОшибки), Символы.ПС, "") + 
											  НСтр("ru='Код ЕДРПОУ организации документа не совпадает с кодом для Организации из обработки';uk= 'Код ЄДРПОУ організації документа не збігається з кодом для Організації з обробки'");
		ДокументКорректен = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента1С.Контрагент_ИНН) 
		И мЭтоИсходящиеНалоговыеДокументы 
		И НЕ ЗначениеЗаполнено(ДанныеДокумента1С.ТипПричиныНевыдачиПокупателю) Тогда
		ДокументКорректен_ОписаниеОшибки = ДокументКорректен_ОписаниеОшибки + 
											 ?(ЗначениеЗаполнено(ДокументКорректен_ОписаниеОшибки), Символы.ПС, "") + 
											  НСтр("ru='Для контрагента не удалось определить ИНН';uk= 'Для контрагента не вдалося визначити ІПН'");
		ДокументКорректен = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеДокумента1С.ДатаВходящегоДокумента) Тогда
		ДокументКорректен_ОписаниеОшибки = ДокументКорректен_ОписаниеОшибки +
											 ?(ЗначениеЗаполнено(ДокументКорректен_ОписаниеОшибки), Символы.ПС, "") + 
											  НСтр("ru='Не указана дата входящего документа';uk= 'Не вказана дата вхідного документа'");
		ДокументКорректен = Ложь;
	КонецЕсли;

	ДанныеДокумента1С.ДокументКорректен = ДокументКорректен;
	
	Если НЕ ДокументКорректен Тогда
		ДанныеДокумента1С.ДокументКорректен_ОписаниеОшибки = ДокументКорректен_ОписаниеОшибки;
	Иначе
		ДанныеДокумента1С.ДокументКорректен_ОписаниеОшибки = "";
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьРеквизитыДокументов1С(ИдКонфигурации, МассивДокументов, ЭтоИсходящиеНалоговыеДокументы)
	
	Запрос = Новый Запрос();
	
	Если ЭтоИсходящиеНалоговыеДокументы Тогда
		
		Запрос.Текст = 
		   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		   |	Ссылка КАК Документ,
		   |	""ПН"" КАК ВидДокумента,
		   |	Документ.ВалютаДокумента КАК ВалютаДокумента,
		   |	Документ.Дата  КАК Дата,
		   |	Документ.Номер КАК Номер,
		   
		   |	Документ.Дата КАК ДатаВходящегоДокумента,
		   |	"""" КАК НомерВходящегоДокумента,
		   
		   |	Документ.Контрагент КАК Контрагент,
           |	Документ.Ответственный КАК Ответственный,
		   
		   |	ВЫБОР КОГДА (Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Значение(Документ.НалоговаяНакладная.ПустаяСсылка)) ТОГДА Документ.ТипПричиныНевыдачиПокупателю ИНАЧЕ Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены КОНЕЦ  КАК ТипПричиныНевыдачиПокупателю,
		   
		   |	Документ.КтоВыписалНалоговуюНакладную 					КАК КтоВыписалНалоговуюНакладную,
		   |	Документ.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
		   |	ВЫБОР КОГДА Документ.ВключенаВЕдиныйРеестрНалоговыхНакладных ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.НеЗарегистрированВЕРНН) КОНЕЦ КАК СтатусРегистрацииВЕРНН,
		   
		   |	"""" КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
		   |	"""" КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных,
		   
		   |	ВЫБОР КОГДА Документ.КратностьВзаиморасчетов = 0 ТОГДА Документ.СуммаНДСДокумента ИНАЧЕ Документ.СуммаНДСДокумента * Документ.КурсВзаиморасчетов / Документ.КратностьВзаиморасчетов КОНЕЦ КАК СуммаНДСДокумента,
		   
		   |	Контрагенты.ИННПлательщикаНДС КАК Контрагент_ИНН,
		   |	Документ.Организация.КодПоЕДРПОУ 		  КАК Организация_ЕДРПОУ,
		   
		   |	Документ.ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции КАК СоглашениеОРазделеПродукции,
		   |	Документ.СпецРежимНалогообложения 		  КАК СпецРежимНалогообложения,
		   |	Документ.ОбособленноеПодразделение.Префикс КАК Филиал
		   
		   
           |ИЗ
           |	Документ.НалоговаяНакладная КАК Документ
		   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		   |			Контрагент.Ссылка КАК Контрагент,
		   |			Контрагент.ИНН  КАК ИННПлательщикаНДС
		   |		ИЗ
		   |			Справочник.Контрагенты КАК Контрагент
		   |		
		   |	//#ЭтоЕРП	ОБЪЕДИНИТЬ ВСЕ
		   |		
		   |	//#ЭтоЕРП		ВЫБРАТЬ
		   |	//#ЭтоЕРП		УчетнаяПолитикаОрганизаций.Организация.Ссылка,
		   |	//#ЭтоЕРП		УчетнаяПолитикаОрганизаций.ИННПлательщикаНДС
		   |	//#ЭтоЕРП	ИЗ
		   |	//#ЭтоЕРП		РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		   |	) КАК Контрагенты
		   |		ПО Документ.Контрагент = Контрагенты.Контрагент
		   |ГДЕ
           |	Документ.Ссылка В(&Ссылки)
		   
           |ОБЪЕДИНИТЬ ВСЕ
		   |ВЫБРАТЬ
		   |	Ссылка КАК Документ,
		   |	""РК"" КАК ВидДокумента,
		   |	Документ.ВалютаДокумента КАК ВалютаДокумента,
		   |	Документ.Дата  КАК Дата,
		   |	Документ.Номер КАК Номер,
		   
		   |	Документ.Дата КАК ДатаВходящегоДокумента,
		   |	"""" КАК НомерВходящегоДокумента,
		   
		   |	Документ.Контрагент КАК Контрагент,
           |	Документ.Ответственный КАК Ответственный,
		   
		   |	Документ.ТипПричиныНевыдачиПокупателю КАК ТипПричиныНевыдачиПокупателю, 
		   
		   |	Документ.КтоВыписалНалоговуюНакладную 					КАК КтоВыписалНалоговуюНакладную,
		   |	Документ.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
		   |	ВЫБОР КОГДА Документ.ВключенаВЕдиныйРеестрНалоговыхНакладных ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.НеЗарегистрированВЕРНН) КОНЕЦ КАК СтатусРегистрацииВЕРНН,
		   
		   |	"""" КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
		   |	"""" КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных,
		   
		   |	ВЫБОР КОГДА Документ.КратностьВзаиморасчетов = 0 ТОГДА Документ.СуммаНДСДокумента ИНАЧЕ Документ.СуммаНДСДокумента * Документ.КурсВзаиморасчетов / Документ.КратностьВзаиморасчетов КОНЕЦ КАК СуммаНДСДокумента,
		   
		   |	Контрагенты.ИННПлательщикаНДС КАК Контрагент_ИНН,
		   |	Документ.Организация.КодПоЕДРПОУ 		  КАК ОрганизацияКодПоЕДРПОУ,
		   
		   |	Документ.ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции КАК СоглашениеОРазделеПродукции,
		   |	Документ.СпецРежимНалогообложения 		  КАК СпецРежимНалогообложения,
		   |	Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Филиал
		   
		   
           |ИЗ
           |	Документ.Приложение2КНалоговойНакладной КАК Документ
		   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		   |			Контрагент.Ссылка КАК Контрагент,
		   |			Контрагент.ИНН  КАК ИННПлательщикаНДС
		   |		ИЗ
		   |			Справочник.Контрагенты КАК Контрагент
		   |		
		   |	//#ЭтоЕРП	ОБЪЕДИНИТЬ ВСЕ
		   |		
		   |	//#ЭтоЕРП		ВЫБРАТЬ
		   |	//#ЭтоЕРП		УчетнаяПолитикаОрганизаций.Организация.Ссылка,
		   |	//#ЭтоЕРП		УчетнаяПолитикаОрганизаций.ИННПлательщикаНДС
		   |	//#ЭтоЕРП	ИЗ
		   |	//#ЭтоЕРП		РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		   |	) КАК Контрагенты
		   |		ПО Документ.Контрагент = Контрагенты.Контрагент
           |ГДЕ
           |	Документ.Ссылка В(&Ссылки)
		   |";
		   
	Иначе				   
		
		Запрос.Текст = 
	 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		   |	Документ.Ссылка КАК Документ,
		   |	ВЫБОР КОГДА Документ.ВидОперации = Значение(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная) ТОГДА ""ПН"" ИНАЧЕ ""РК"" КОНЕЦ КАК ВидДокумента,
		   
		   |	Документ.Дата  КАК Дата,
		   |	Документ.Номер КАК Номер,
		   
		   |	Документ.ДатаВходящегоДокумента  КАК ДатаВходящегоДокумента,
		   |	Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		   
		   |	Документ.Контрагент 	  КАК Контрагент,
           |	Документ.Ответственный КАК Ответственный,
		   
		   |	Документ.ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных,
		   |	Документ.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных КАК ДатаВключенияВЕдиныйРеестрНалоговыхНакладных,
		   
		   |	Документ.СуммаНДСДокумента КАК СуммаНДСДокумента,
		   
		   |	Документ.Контрагент.ИНН КАК Контрагент_ИНН,

		   |	Документ.Ссылка.Организация.КодПоЕДРПОУ 		  КАК Организация_ЕДРПОУ
		   
           |ИЗ
           |	Документ.РегистрацияВходящегоНалоговогоДокумента КАК Документ
		   |ГДЕ
           |	Документ.Ссылка В(&Ссылки)
		   |";
		   
	КонецЕсли;		
	   
	Если ИдКонфигурации = "ЕРП"  ИЛИ ИдКонфигурации = "BASУТ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ВалютаДокумента", "Документ.Валюта");			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБОР КОГДА (Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = Значение(Документ.НалоговаяНакладная.ПустаяСсылка)) ТОГДА Документ.ТипПричиныНевыдачиПокупателю ИНАЧЕ Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.ТипПричиныНевыдачиПокупателюПриПродажеНижеОбычнойЦены КОНЕЦ", "Документ.ТипПричиныНевыдачиПокупателю");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБОР КОГДА Документ.ВключенаВЕдиныйРеестрНалоговыхНакладных ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.НеЗарегистрированВЕРНН) КОНЕЦ", "Документ.СтатусРегистрацииВЕРНН");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБОР КОГДА Документ.КратностьВзаиморасчетов = 0 ТОГДА Документ.СуммаНДСДокумента ИНАЧЕ Документ.СуммаНДСДокумента * Документ.КурсВзаиморасчетов / Документ.КратностьВзаиморасчетов КОНЕЦ КАК СуммаНДСДокумента,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ДоговорКонтрагента.МногостороннееСоглашениеОРазделеПродукции", "Ложь");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагент.ИНН", "Контрагент.ИННПлательщикаНДС");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ЭтоЕРП", "");
		Если  РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина) = "ERP25" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.УчетнаяПолитикаОрганизаций", "РегистрСведений.НастройкиУчетаНДС");
		КонецЕсли;	
	КонецЕсли;   
				   
	Запрос.УстановитьПараметр("Ссылки", МассивДокументов);
    Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()


&НаСервереБезКонтекста
Функция ОпределитьПорядковыйНомерИсходящейНН(СтрокаТаблицы)
	
	ОшибкаРазбораНомера = ложь;
	ОписаниеОшибкиРазбораНомера = "";
	
	// подярковый номер это номер без слеша и номеров филиалов и спецрежима, фактически номер в реестре НН
	НомерПорядковый 			= "";
	// полный номер, может включать слеш и коды спец.режима и филиала
	НомерВходящегоДокумента		= "";
	
	НомерДокумента 			 = СтрокаТаблицы.Номер;
	СпецРежимНалогообложения = СтрокаТаблицы.СпецРежимНалогообложения;
	Если СтрокаТаблицы.СоглашениеОРазделеПродукции Тогда
		СпецРежимНалогообложения = 5;
	КонецЕсли;
	Филиал 					 = СтрокаТаблицы.Филиал;
	
	НомерПорядковый = СокрЛП(РегламентированнаяОтчетностьКлиентСервер.ПолучитьНомерНаПечать(НомерДокумента, Истина, Истина));
	НомерВходящегоДокумента	= НомерПорядковый;	
	
	КодСпецРежима = ?(ЗначениеЗаполнено(СпецРежимНалогообложения), "" + СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ЗначениеЗаполнено(Филиал) Тогда
		Если СтрокаТаблицы.Дата >= '2014-03-01' Тогда
			НомерФилиала = "/" + Прав("" + СокрЛП(Формат(Число(Филиал),"ЧЦ=4; ЧГ=0")),4);
		Иначе	
			НомерФилиала = Прав("0000" + СокрЛП(Филиал),4);
		КонецЕсли;
	Иначе
		НомерФилиала = "";
	КонецЕсли;	
	Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		НомерВходящегоДокумента	= НомерВходящегоДокумента + "/" + КодСпецРежима + НомерФилиала; 
	КонецЕсли;

	Попытка
		Проверка = Число(НомерПорядковый);
		Если ЗначениеЗаполнено(СпецРежимНалогообложения) Тогда
			Проверка = Число(СпецРежимНалогообложения);
		КонецЕсли;
		Если ЗначениеЗаполнено(Филиал)  Тогда
			Проверка = Число(Филиал);
		КонецЕсли;
	Исключение
		ОшибкаРазбораНомера = Истина;
	КонецПопытки;
	
	СтрокаТаблицы.НомерПорядковый 		  = НомерПорядковый;
	СтрокаТаблицы.НомерВходящегоДокумента = НомерВходящегоДокумента;
	
	Если ОшибкаРазбораНомера = Истина Тогда
		ОписаниеОшибкиРазбораНомера = НСтр("ru='Указан некорректный номер входящего документа';uk= 'Вказано некоректний номер вхідного документа'");
	КонецЕсли;
	
	Возврат ОписаниеОшибкиРазбораНомера;

КонецФункции


&НаСервереБезКонтекста
Функция РазобратьНомерВходящейНННаСоставляющие(СтрокаТаблицы)
	
	ОшибкаРазбораНомера = ложь;
	ОписаниеОшибкиРазбораНомера = "";
	
	НомерПорядковый 			= "";
	СпецРежимНалогообложения 	= 0;
	Филиал 						= "";
	
	ПолныйНомер = СтрокаТаблицы.НомерВходящегоДокумента;
 	
	ПозицияСпецСимвола = Найти(ПолныйНомер, "\");
	Если ПозицияСпецСимвола = 0 Тогда
		ПозицияСпецСимвола = Найти(ПолныйНомер, "/");
	КонецЕсли;
	
	Если ПозицияСпецСимвола > 0 Тогда
		НомерПорядковый = СокрЛП(Лев(ПолныйНомер, ПозицияСпецСимвола - 1));
		СпецРежимФилиал = СокрП(Сред(ПолныйНомер, ПозицияСпецСимвола + 1)); 
	Иначе
		НомерПорядковый = СокрЛП(ПолныйНомер);
		СпецРежимФилиал = "";
	КонецЕсли;
	
	Попытка
		Проверка = Число(НомерПорядковый);
	Исключение
		ОшибкаРазбораНомера = Истина;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СпецРежимФилиал) Тогда					
		
		// формат номеров налоговых с 03.2014, с двумя слэшами
		Если Найти(СпецРежимФилиал, "/") > 0 Тогда
			
			СпецРежим = СокрЛП(Сред(СпецРежимФилиал, 1, Найти(СпецРежимФилиал, "/")-1));
			Филиал    = СокрЛП(Сред(СпецРежимФилиал,    Найти(СпецРежимФилиал, "/")+1));
			
		Иначе
			// Номер должен быть в формате ПорядковыйНомер[/СпецРежим[НомерФилиала]] где
			//  СпецРежим - число или пробел
			//  НомерФилиала - строка приводимая к числу c длиной не более 4-х символов
			СпецРежимНалогообложения = СокрЛП(Лев(СпецРежимФилиал, 1)); 
			Филиал = СокрЛП(Сред(СпецРежимФилиал, 2));
		КонецЕсли;
		
		Если СпецРежимНалогообложения = " " ИЛИ СпецРежимНалогообложения = "" Тогда
			СпецРежимНалогообложения = 0;
		Иначе	
			Попытка
			    СпецРежимНалогообложения = Число(СпецРежимНалогообложения);
			Исключение
				СпецРежимНалогообложения = 0;
				ОшибкаРазбораНомера = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Попытка
		    Филиал = Число(Филиал);
		Исключение
			Филиал = "";
			ОшибкаРазбораНомера = Истина;
		КонецПопытки;
		
	Иначе
		
		СпецРежимНалогообложения = 0;
		Филиал    				 = "";
		
	КонецЕсли;

	СтрокаТаблицы.НомерПорядковый 			= НомерПорядковый;
	СтрокаТаблицы.СпецРежимНалогообложения 	= СпецРежимНалогообложения;
	СтрокаТаблицы.Филиал 					= Филиал;
	
	Если ОшибкаРазбораНомера = Истина Тогда
		ОписаниеОшибкиРазбораНомера = НСтр("ru='Указан некорректный номер входящего документа';uk= 'Вказано некоректний номер вхідного документа'");
	КонецЕсли;
	
	Возврат ОписаниеОшибкиРазбораНомера;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит(МассивДокументов = Неопределено)
	
	Если НЕ ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого СтрокаДок Из ТаблицаДокументов Цикл
			МассивДокументов.Добавить(СтрокаДок.Документ);	
		КонецЦикла;
		
	КонецЕсли;

	РезультатФомирования = ПроверитьСостояниеРегистрацииВ1СЗвит(МассивДокументов);
	
	ОписаниеОшибки			 = РезультатФомирования.ОписаниеОшибки;
	NNStatusResult           = РезультатФомирования.NNStatusResult;
	
	// если передали ошибку, то запрос фактически не выполнялся, для всех документов нужно прописать сообщение об ошибке и очистить реквизиты Звит-1С
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		Для каждого Документ Из МассивДокументов  Цикл
			
			СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				// фактически очищаем поля
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СписокСвойствДокументов1СЗвит);
				СтрокаТаблицы.СостояниеСтр = ОписаниеОшибки;
			КонецЦикла;
			
		КонецЦикла;
		
		// больше выполнять нечего по данной задаче
		Возврат;
	КонецЕсли;
	
	
	ТаблицаЗапроса.Сортировать("НомерСтрокиЗапроса"); 
	
	ТекНомерСтрокиЗапроса = 0;
	Для каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		Если СтрокаЗапроса.НомерСтрокиЗапроса = 0 Тогда
			
			// по данной строке запрос фактически не выполнялся.
			СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", СтрокаЗапроса.Документ));
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				// фактически очищаем поля
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СписокСвойствДокументов1СЗвит);
				СтрокаТаблицы.СостояниеСтр = СтрокаЗапроса.ОписаниеОшибки;
			КонецЦикла;
			
			// переходим к следующей строке таблицы запроса
			Продолжить;
			
		КонецЕсли;
		
		Пока СтрокаЗапроса.НомерСтрокиЗапроса >	ТекНомерСтрокиЗапроса Цикл
			NNStatusResult.Next("TAB1");
			ТекНомерСтрокиЗапроса = ТекНомерСтрокиЗапроса + 1;
		КонецЦикла;
		
		// теперь мы спозиционированы на строке результата запроса от звита по данному документу
		
		Звит1С_Состояние = NNStatusResult.GetValue("TAB1", "STATUS");		
		Если мЭтоИсходящиеНалоговыеДокументы Тогда		
			СостояниеСтр = мПараметрыРаботыЗвит1С.ПредставлениеСостоянийДляИсходящихНалоговыхДокументов[Звит1С_Состояние];
			Звит1С_СтатусРегистрацииВЕРНН = мПараметрыРаботыЗвит1С.СтатусРегистрацииДляИсходящихНалоговыхДокументов[Звит1С_Состояние];
		Иначе
			СостояниеСтр = мПараметрыРаботыЗвит1С.ПредставлениеСостоянийДляВходящихНалоговыхДокументов[Звит1С_Состояние];
			Звит1С_СтатусРегистрацииВЕРНН = мПараметрыРаботыЗвит1С.СтатусРегистрацииДляВходящихНалоговыхДокументов[Звит1С_Состояние];
		КонецЕсли;
		
		Если НЕ мЭтоИсходящиеНалоговыеДокументы Тогда
			Звит1С_КтоВыписалНалоговуюНакладную = NNStatusResult.GetValue ("TAB1", "OSOBFIO")				
		Иначе	
			Звит1С_КтоВыписалНалоговуюНакладную = "";	
		КонецЕсли;		
	
		Звит1С_ДокументКорректен 		= (Звит1С_Состояние > -2);
		Звит1С_ДокументЗарегистрирован	= (Звит1С_Состояние = 4);
		
		Звит1С_ДатаРегистрации  = NNStatusResult.GetValue("TAB1", "REGDATE");
		Если    НЕ ЗначениеЗаполнено(Звит1С_ДатаРегистрации) 
			ИЛИ НЕ Звит1С_ДокументКорректен Тогда
			Звит1С_ДатаРегистрации = '0001-01-01';
		КонецЕсли;
		
		Если Звит1С_ДокументКорректен  Тогда
			Звит1С_СуммаНДСДокумента = NNStatusResult.GetValue("TAB1", "VATSUM");		
		Иначе	
		    Звит1С_СуммаНДСДокумента = 0;
		КонецЕсли;
		
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", СтрокаЗапроса.Документ));
		
		Если СтрокиТаблицы.Количество() = 0 Тогда
			Продолжить;
		Иначе	
			// во всех строках таблицы данные должны быть одинаковыми - возьмем из первой строки по данной ссылке
			ДанныеДокументаЗвит1С = СтрокиТаблицы[0];
		КонецЕсли;
		
		// Дополнительно проверим ключевые поля исходящих документов
		Если мЭтоИсходящиеНалоговыеДокументы И (Звит1С_Состояние > -1) Тогда	// Документ выгружен	
			
			Звит1С_Контрагент_ИНН 		= NNStatusResult.GetValue("TAB1", "PATRNER_IPN");
			Звит1С_Организация_ЕДРПОУ 	= NNStatusResult.GetValue("TAB1", "FIRM_EDRPOU");
			Звит1С_НомерПорядковый		= NNStatusResult.GetValue("TAB1", "DOC_NUM");
			Звит1С_СпецРежимНалогообложения = NNStatusResult.GetValue("TAB1", "DOC_VD");
			Звит1С_Филиал 				= NNStatusResult.GetValue("TAB1", "DOC_DEPT");
			Звит1С_Дата 				= NNStatusResult.GetValue("TAB1", "DOC_DATE");			
			
			// приведем значения к строке
			Звит1С_Контрагент_ИНН 		= ?(ЗначениеЗаполнено(Звит1С_Контрагент_ИНН), 		Звит1С_Контрагент_ИНН, 		"");
			Звит1С_Организация_ЕДРПОУ 	= ?(ЗначениеЗаполнено(Звит1С_Организация_ЕДРПОУ), 	Звит1С_Организация_ЕДРПОУ, 	"");
			Звит1С_НомерПорядковый		= ?(ЗначениеЗаполнено(Звит1С_НомерПорядковый),		Звит1С_НомерПорядковый, 	"");
			
			Звит1С_СпецРежимНалогообложения = ?(ЗначениеЗаполнено(Звит1С_СпецРежимНалогообложения),Звит1С_СпецРежимНалогообложения, "");
			// В режиме отладки в числовые поля документа FREDO Звіт вместо пустых значений выгружаются нули
			Звит1С_СпецРежимНалогообложения = ?(Звит1С_СпецРежимНалогообложения = "0", "", Звит1С_СпецРежимНалогообложения);
			
			Звит1С_Филиал 				= ?(ЗначениеЗаполнено(Звит1С_Филиал), Звит1С_Филиал, "");
			Звит1С_Дата 				= ?(ЗначениеЗаполнено(Звит1С_Дата),	  Звит1С_Дата,   '0001-01-01');
			
		Иначе	
			
			Звит1С_Контрагент_ИНН 		= "";
			Звит1С_Организация_ЕДРПОУ 	= "";
			Звит1С_НомерПорядковый		= "";
			Звит1С_СпецРежимНалогообложения = "";
			Звит1С_Филиал 				= "";
			Звит1С_Дата 				= "";
			
		КонецЕсли;
		
		// пропишем полученные значения по всем строкам с данной ссылкой
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			
			СтрокаТаблицы.Звит1С_ДатаРегистрации 				= Звит1С_ДатаРегистрации;
			СтрокаТаблицы.Звит1С_КтоВыписалНалоговуюНакладную 	= Звит1С_КтоВыписалНалоговуюНакладную;
			СтрокаТаблицы.Звит1С_СуммаНДСДокумента				= Звит1С_СуммаНДСДокумента;
			СтрокаТаблицы.Звит1С_Состояние 						= Звит1С_Состояние;
			СтрокаТаблицы.Звит1С_ДокументКорректен 				= Звит1С_ДокументКорректен;
			СтрокаТаблицы.Звит1С_СтатусРегистрацииВЕРНН			= Звит1С_СтатусРегистрацииВЕРНН;
			СтрокаТаблицы.Звит1С_Контрагент_ИНН 				= Звит1С_Контрагент_ИНН;
			СтрокаТаблицы.Звит1С_Организация_ЕДРПОУ 			= Звит1С_Организация_ЕДРПОУ;
			СтрокаТаблицы.Звит1С_НомерПорядковый 				= Звит1С_НомерПорядковый;
			СтрокаТаблицы.Звит1С_СпецРежимНалогообложения 		= Звит1С_СпецРежимНалогообложения;
			СтрокаТаблицы.Звит1С_Филиал 						= Звит1С_Филиал;
			СтрокаТаблицы.Звит1С_Дата 							= Звит1С_Дата;
			СтрокаТаблицы.Звит1С_ДокументЗарегистрирован 		= Звит1С_ДокументЗарегистрирован;
			
			Если мЭтоИсходящиеНалоговыеДокументы И (СтрокаТаблицы.Звит1С_Состояние > -1) Тогда
			
				ТекстОшибки = "";
				Если СтрокаТаблицы.Звит1С_Контрагент_ИНН <> ДанныеДокументаЗвит1С.Контрагент_ИНН Тогда
					Если НЕ мЭтоИсходящиеНалоговыеДокументы 
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТипПричиныНевыдачиПокупателю) Тогда
						ТекстОшибки = ТекстОшибки + НСтр("ru='ИНН контрагента';uk='ІПН контрагента'")+", ";
					КонецЕсли;
				КонецЕсли;
				//Если СтрокаТаблицы.Звит1С_Организация_ЕДРПОУ <> ДанныеДокументаЗвит1С.Организация_ЕДРПОУ Тогда
				//	ТекстОшибки = ТекстОшибки + НСтр("ru='ЕДРПОУ организации';uk='ЄДРПОУ організації'")+", ";
				//КонецЕсли;
				Если СтрокаТаблицы.Звит1С_НомерПорядковый <> ДанныеДокументаЗвит1С.НомерПорядковый Тогда
					ТекстОшибки = ТекстОшибки + НСтр("ru='номер';uk='номер'")+", ";
				КонецЕсли;
				Если СтрокаТаблицы.Звит1С_СпецРежимНалогообложения <> ДанныеДокументаЗвит1С.СпецРежимНалогообложения Тогда
					Если НЕ (СтрокаТаблицы.Звит1С_СпецРежимНалогообложения = 5 И ДанныеДокументаЗвит1С.СпецРежимНалогообложения = 0) Тогда
						ТекстОшибки = ТекстОшибки + НСтр("ru='спец.режим';uk='спец.режим'")+", ";	
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					Звит_1С_Документ_Филиал = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Звит1С_Филиал),0, Число(СтрокаТаблицы.Звит1С_Филиал));
				Исключение
					Звит_1С_Документ_Филиал = "";
				КонецПопытки;
				Попытка
					_1С_Документ_Филиал = ?(НЕ ЗначениеЗаполнено(ДанныеДокументаЗвит1С.Филиал), 0, Число(ДанныеДокументаЗвит1С.Филиал));
				Исключение
					_1С_Документ_Филиал = "";
				КонецПопытки;
				Если Звит_1С_Документ_Филиал <> _1С_Документ_Филиал Тогда
					Если НЕ (СтрокаТаблицы.ТипПричиныНевыдачиПокупателю = "14") Тогда
						ТекстОшибки = ТекстОшибки + НСтр("ru='филиал';uk='філія'")+", ";
					КонецЕсли;
				КонецЕсли;
				
				Если НачалоДня(СтрокаТаблицы.Звит1С_Дата) <> НачалоДня(ДанныеДокументаЗвит1С.Дата) Тогда
					ТекстОшибки = ТекстОшибки + НСтр("ru='дата';uk='дата'")+", ";
				КонецЕсли;
				Если СтрокаТаблицы.Звит1С_СуммаНДСДокумента <> ДанныеДокументаЗвит1С.СуммаНДСДокумента Тогда
					Если    НЕ мЭтоИсходящиеНалоговыеДокументы 
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТипПричиныНевыдачиПокупателю) Тогда
						ТекстОшибки = ТекстОшибки + НСтр("ru='сумма НДС';uk='сума ПДВ'")+", ";
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибки = Лев(ТекстОшибки, СтрДлина(ТекстОшибки) - СтрДлина(", "));
				
				Если ПустаяСтрока(ТекстОшибки) Тогда
					СтрокаТаблицы.Звит1С_СовпадаютКлючевыеПоля = Истина;
				Иначе
					СтрокаТаблицы.Звит1С_СовпадаютКлючевыеПоля = Ложь;
					СостояниеСтр = СостояниеСтр + НСтр("ru='. Не совпадают ключевые поля: ';uk='. Не збігаються ключові поля: '") + ТекстОшибки;
				КонецЕсли;
				
			КонецЕсли;	
			
			СтрокаТаблицы.СостояниеСтр = СостояниеСтр;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьСостояниеРегистрацииВ1СЗвит(МассивДокументов)
	
	// будем в данной таблице хранить информацию - для какой ссылки какой номер в запросе к FREDO Звіт.
	// Значение 0 означает, что в запрос данная ссылка не попала, по какой причине - указано в поле ОписаниеОшибки
	ТаблицаЗапроса.Очистить();
	
	РезультатФомирования = Новый Структура();
	РезультатФомирования.Вставить("ОписаниеОшибки");
	РезультатФомирования.Вставить("NNStatusResult");
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат РезультатФомирования;
	КонецЕсли;
	
	ЕстьПодключениеКЗвит1С  = Неопределено;	
	NNStatusQuery			= Неопределено;
	
	// Для организации без ЕДРПОУ бесполезно подключаться к FREDO Звіту
	Если Не ЗначениеЗаполнено(Организация_ЕДРПОУ)  Тогда
		РезультатФомирования.ОписаниеОшибки = НСтр("ru='Для организации ';uk='Для організації '") + Организация + НСтр("ru=' не указан код ЕДРПОУ!';uk=' не вказано код ЄДРПОУ!'");
		Возврат РезультатФомирования;
	КонецЕсли;
	
	ЕстьПодключениеКЗвит1С = глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация);
	Если ЕстьПодключениеКЗвит1С Тогда				
		
		NNStatusQuery = глКомпонентаЗвит1С.CreateNNStatusQuery();	
																						  
	КонецЕсли;
	
	Если Не ЕстьПодключениеКЗвит1С 
		ИЛИ NNStatusQuery = Неопределено Тогда
		РезультатФомирования.ОписаниеОшибки = мПараметрыРаботыЗвит1С.ОшибкаВзаимодействияСЗвит1ССтр;
		Возврат РезультатФомирования;
	КонецЕсли;		

	НомерСтрокиЗапроса = 0;
	
	Для каждого Документ Из МассивДокументов Цикл
		
		СтрокаТаблицыЗапроса 			= ТаблицаЗапроса.Добавить();
		СтрокаТаблицыЗапроса.Документ   = Документ;
		
		ДанныеДокумента1С = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
		Если ДанныеДокумента1С.Количество() = 0 Тогда
			// по непонятной причине мы получили ссылку для обработки запроса, причем этой ссылки нет в таблице документов
			Продолжить;
		КонецЕсли;
		
		// для всех строк с одной ссылкой данные главной таблице обработки будут одинаковыми
		ДанныеДокумента1С = ДанныеДокумента1С[0];
		
		Если НЕ ДанныеДокумента1С.ДокументКорректен Тогда
			СтрокаТаблицыЗапроса.ОписаниеОшибки = ДанныеДокумента1С.ДокументКорректен_ОписаниеОшибки;
			Продолжить;	
		КонецЕсли;
		
		НомерСтрокиЗапроса   = НомерСтрокиЗапроса + 1;
		СтрокаТаблицыЗапроса.НомерСтрокиЗапроса = НомерСтрокиЗапроса;
		
		NNStatusQuery.NewRow("TAB1");
		NNStatusQuery.SetValue("TAB1", "DOC_TYPE",       ?(ДанныеДокумента1С.ВидДокумента = "ПН", 1, 2));  // 1 – НН, 2 – П2
		NNStatusQuery.SetValue("TAB1", "DOC_MOVE",       ?(мЭтоИсходящиеНалоговыеДокументы, 1, 2));  // 1 - Исходящие 2 - Входящие
		Если мЭтоИсходящиеНалоговыеДокументы Тогда
			NNStatusQuery.SetValue("TAB1", "DOC_ID",         ДанныеДокумента1С.ИДДокумента);
		Иначе
			NNStatusQuery.SetValue("TAB1", "PATRNER_IPN",    ДанныеДокумента1С.Контрагент_ИНН);
			NNStatusQuery.SetValue("TAB1", "FIRM_EDRPOU",    Организация_ЕДРПОУ);
			NNStatusQuery.SetValue("TAB1", "DOC_NUM",        ДанныеДокумента1С.НомерПорядковый);
			NNStatusQuery.SetValue("TAB1", "DOC_VD",         ?(ЗначениеЗаполнено(ДанныеДокумента1С.СпецРежимНалогообложения), ДанныеДокумента1С.СпецРежимНалогообложения, ""));
			NNStatusQuery.SetValue("TAB1", "DOC_DEPT",       ?(ЗначениеЗаполнено(ДанныеДокумента1С.Филиал),"",ДанныеДокумента1С.Филиал));
			NNStatusQuery.SetValue("TAB1", "DOC_DATE",       ДанныеДокумента1С.ДатаВходящегоДокумента);
		КонецЕсли;

	КонецЦикла;
	
	РезультатФомирования.NNStatusResult = глКомпонентаЗвит1С.ExecNNStatusQuery(NNStatusQuery);
	
	Возврат РезультатФомирования;
	
КонецФункции


&НаКлиенте
Процедура ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации(МассивДокументов = Неопределено)
	
	Если НЕ ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого СтрокаДок Из ТаблицаДокументов Цикл
			МассивДокументов.Добавить(СтрокаДок.Документ);	
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Документ Из МассивДокументов Цикл
		
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
		
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
	
			СтрокаТаблицы.Пометка_Выполнить = Ложь;
			СтрокаТаблицы.Пометка_Синхронизировать = Ложь;

			Если СтрокаТаблицы.ДокументКорректен 
			   И СтрокаТаблицы.Звит1С_ДокументКорректен Тогда
			   
			   	// Пометка_Выполнить
				Если мЭтоИсходящиеНалоговыеДокументы Тогда
					Если (СтрокаТаблицы.Звит1С_Состояние = -1)    // Не выгружен
					 ИЛИ (СтрокаТаблицы.Звит1С_Состояние = 0 И Не СтрокаТаблицы.Звит1С_СовпадаютКлючевыеПоля)   // Выгружен и ключевые поля не совпадают
					 ИЛИ (СтрокаТаблицы.Звит1С_Состояние = 3) Тогда   // Отклонен
						// Если исходящий документ не выгружен, выгруженн но суммы различаются или отклонен то перевыгрузим
						СтрокаТаблицы.Пометка_Выполнить = Истина;						
					КонецЕсли;
					
				Иначе 
					Если (СтрокаТаблицы.Звит1С_Состояние = -1)      // Запит не сформирован
					 ИЛИ (СтрокаТаблицы.Звит1С_Состояние = 2) Тогда // Вытяг не получен. Статус существует временно до реализации со стороны FREDO Звіт (вместо -1 и 0 возвращается статус 2)
						// Если запит по входящему документу не сформирован
						СтрокаТаблицы.Пометка_Выполнить = Истина;
					КонецЕсли;
				КонецЕсли;
				
				// Пометка_Синхронизировать
				Если мЭтоИсходящиеНалоговыеДокументы Тогда
					СтрокаТаблицы.Пометка_Синхронизировать = НЕ (ПривестиСтатусРегистрацииКФлажку(СтрокаТаблицы.СтатусРегистрацииВЕРНН) = ПривестиСтатусРегистрацииКФлажку(СтрокаТаблицы.Звит1С_СтатусРегистрацииВЕРНН));					
				Иначе
					СтрокаТаблицы.Пометка_Синхронизировать = НЕ (СтрокаТаблицы.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СтрокаТаблицы.Звит1С_ДатаРегистрации);
				КонецЕсли;
				
	 		КонецЕсли;
	
		КонецЦикла;
	
	КонецЦикла;	

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаДокументовВыгрузитьДокументыИлиЗапросВ1СЗвит()
	
	МассивСтрокДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Пометка_Выполнить, ДокументКорректен", Истина, Истина));
	
	// Выгрузка налоговых документов
	Если МассивСтрокДокументов.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Не выбраны корректные документы для выгрузки/формирования запроса!';uk='Не вибрані коректні документи для вивантаження/формування запиту!'");
		
		// Обращаем внимане на колонку "Пометка" 
		СтарыйЦвет = Элементы.ТаблицаДокументовПометка_Выполнить.ЦветФонаЗаголовка;	
		
		Элементы.ТаблицаДокументовПометка_Выполнить.ЦветФонаЗаголовка = Новый Цвет(255,0,0);
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Элементы.ТаблицаДокументовПометка_Выполнить.ЦветФонаЗаголовка = СтарыйЦвет;
		Возврат;
		
	КонецЕсли;

	БылиОшибки = Ложь;
	БылиФатальныеОшибки = Ложь;
	ДополнительныйТекстСообщения = "";
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда 
			
		Для каждого СтрокаТаблицыДокументов Из МассивСтрокДокументов Цикл
			
			ОбработкаПрерыванияПользователя();
			
			ДокументСсылка = СтрокаТаблицыДокументов.Документ;
			
			РезультатВыгрузки = ВыгрузитьДокументВЗвит1С(СтрокаТаблицыДокументов);
			
			Если Не РезультатВыгрузки.ВыгрузкаПрошлаУспешно Тогда
				БылиОшибки = Истина;			
				Если РезультатВыгрузки.ПроизошлаФатальнаяОшибка Тогда
					БылиФатальныеОшибки = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РезультатВыгрузки.Описание) Тогда
				
				Если РезультатВыгрузки.ВыгрузкаПрошлаУспешно Тогда
					СтатусСообщенияПриВыгрузке = СтатусСообщения.Информация;
				ИначеЕсли РезультатВыгрузки.ПроизошлаФатальнаяОшибка Тогда
					СтатусСообщенияПриВыгрузке = СтатусСообщения.ОченьВажное;
				Иначе
					СтатусСообщенияПриВыгрузке = СтатусСообщения.Важное;					
				КонецЕсли;
				
				Сообщить(Строка(ДокументСсылка)+" - "+РезультатВыгрузки.Описание, СтатусСообщенияПриВыгрузке);
				
			КонецЕсли;
			
			Если БылиФатальныеОшибки Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		РезультатФомирования = СформироватьИОтправитьЗапросСостоянияРегистрацииДокументовВЕРНН();
		
		ТаблицаРезультат             = РезультатФомирования.ТаблицаРезультат;
		РезультатВыполненияОперации  = РезультатФомирования.РезультатВыполненияОперации;
		ДополнительныйТекстСообщения = РезультатФомирования.ТекстОшибки;
		
		Если РезультатВыполненияОперации = Ложь Тогда
			БылиФатальныеОшибки = Истина;
			// Текст сообщения в переменной ДополнительныйТекстСообщения
		КонецЕсли;
		
	КонецЕсли;

	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		Если БылиФатальныеОшибки Тогда
			ТекстСообщения = НСтр("ru='Выгрузка прервана с ошибками!';uk='Вивантаження перервано з помилками!'");
		ИначеЕсли БылиОшибки Тогда
			ТекстСообщения = НСтр("ru='Выгрузка завершена с ошибками!';uk='Вивантаження завершено з помилками!'");
		Иначе
			ТекстСообщения = НСтр("ru='Выгрузка успешно завершена!';uk='Вивантаження успішно завершено!'");
		КонецЕсли;	
	Иначе	
		Если БылиФатальныеОшибки Тогда
			ТекстСообщения = НСтр("ru='Формирование и отправка запроса состояния прервано с ошибками!';uk='Формування та відправка запиту стану перервано з помилками!'");
		ИначеЕсли БылиОшибки Тогда
			ТекстСообщения = НСтр("ru='Формирование и отправка запроса состояния завершено с ошибками!';uk='Формування та відправка запиту стану завершено з помилками!'");
		Иначе
			ТекстСообщения = НСтр("ru='Формирование и отправка запроса состояния успешно завершено';uk='Формування та відправка запиту стану успішно завершено'");
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДополнительныйТекстСообщения) Тогда
		ТекстСообщения = ТекстСообщения+Символы.ПС+Символы.ПС+ДополнительныйТекстСообщения;
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстСообщения);		
	
КонецПроцедуры


&НаКлиенте
Функция СформироватьИОтправитьЗапросСостоянияРегистрацииДокументовВЕРНН()
		
	РезультатФомирования = Новый Структура("ОшибкаПодключенияКЗвит1С, ТаблицаРезультат, РезультатВыполненияОперации, ТекстОшибки", Ложь, Неопределено, Ложь, "");
	
	// Для организации без ЕДРПОУ бесполезно подключаться к FREDO Звіту
	Если Не ЗначениеЗаполнено(Организация_ЕДРПОУ)  Тогда
		РезультатФомирования.ТекстОшибки = НСтр("ru='Для организации ';uk='Для організації '") + Организация + НСтр("ru=' не указан код ЕДРПОУ!';uk=' не вказано код ЄДРПОУ!'");
		Возврат РезультатФомирования;
	КонецЕсли;
	
	ЕстьПодключениеКЗвит1С = глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация);
	Если ЕстьПодключениеКЗвит1С Тогда				
		NNRequest = глКомпонентаЗвит1С.CreateNNRequestEx(Организация_ЕДРПОУ);	
	КонецЕсли;
	
	Если Не ЕстьПодключениеКЗвит1С 
		ИЛИ NNRequest = Неопределено Тогда
		РезультатФомирования.ТекстОшибки = мПараметрыРаботыЗвит1С.ОшибкаВзаимодействияСЗвит1ССтр;
		РезультатФомирования.ОшибкаПодключенияКЗвит1С = Истина;
		Возврат РезультатФомирования;
	КонецЕсли;		

	Для каждого ДанныеДокумента1С Из ТаблицаДокументов Цикл
		
		Если    НЕ ДанныеДокумента1С.ДокументКорректен
			ИЛИ НЕ ДанныеДокумента1С.Пометка_Выполнить Тогда
			Продолжить;	
		КонецЕсли;

		NNRequest.NewRow("TAB1");
		// Заполняем реквизиты по полям соответсвующей схемы J1300101 
        NNRequest.SetValue("MAIN", "N2",  0);
        NNRequest.SetValue("MAIN", "N3",  1);
		NNRequest.SetValue("MAIN", "N4",  1);
		NNRequest.SetValue("TAB1", "TAB1_A21",   ДанныеДокумента1С.НомерПорядковый);
		Если ЗначениеЗаполнено(ДанныеДокумента1С.СпецРежимНалогообложения) Тогда
			NNRequest.SetValue("TAB1", "TAB1_A22", ДанныеДокумента1С.СпецРежимНалогообложения);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеДокумента1С.Филиал) Тогда
			NNRequest.SetValue("TAB1", "TAB1_A23",   ДанныеДокумента1С.Филиал);
		КонецЕсли;
		NNRequest.SetValue("TAB1", "TAB1_A3",    ДанныеДокумента1С.ДатаВходящегоДокумента);
		NNRequest.SetValue("TAB1", "TAB1_A4",    ДанныеДокумента1С.ВидДокумента);
		NNRequest.SetValue("TAB1", "TAB1_A5",    ДанныеДокумента1С.Контрагент_ИНН);

	КонецЦикла;	
	
	// 2. Исполнение запроса
	Состояние(НСтр("ru='Формирование и отправка запроса состояния регистрации в ЕРНН во ""FREDO Звіт""';uk='Формування та відправка запиту стану реєстрації в ЄРПН в "" FREDO Звіт ""'"));
	
	ОшибкаФормированияЗапроса = Ложь;
	ТекстОшибки = "";
	Попытка
		
		глКомпонентаЗвит1С.BringZvitToFront();		
		Результат = глКомпонентаЗвит1С.SendNNRequest(NNRequest);
		глКомпонентаЗвит1С.Bring1CToFront();
		
		Если Результат <> 0 Тогда
			ОшибкаФормированияЗапроса = Истина;
		КонецЕсли;
		
	Исключение
		
		ОшибкаФормированияЗапроса = Истина;
		
		// На случай исключения при работе метода SendNNRequest()
		ТекстОшибки = ОписаниеОшибки();
		Для каждого СтрокаТаблицыРезультатов Из ТаблицаДокументов Цикл
			
			Если СтрокаТаблицыРезультатов.ДокументКорректен И СтрокаТаблицыРезультатов.Пометка_Выполнить Тогда
				СтрокаТаблицыРезультатов.ДокументКорректен = Ложь;
				СтрокаТаблицыРезультатов.СостояниеСтр = мПараметрыРаботыЗвит1С.ОшибкаВзаимодействияСЗвит1ССтр;
			КонецЕсли;
			
		КонецЦикла;
		
		Если глМенеджерЗвит1С.глМенеджерЗвит1С.ФлагОтладки ИЛИ глМенеджерЗвит1С.глМенеджерЗвит1С.ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("FREDO Звіт. Помилка надсилання запиту ПН: "+ТекстОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
	РезультатФомирования.РезультатВыполненияОперации = Не ОшибкаФормированияЗапроса;
	РезультатФомирования.ТекстОшибки                 = ТекстОшибки;
	
	Возврат РезультатФомирования;
	
КонецФункции


&НаКлиенте
Процедура ТаблицаДокументовЗафиксироватьСостояниеРегистрацииВ1С()

	
	МассивСтрокДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Пометка_Синхронизировать", Истина));
	
	// Выгрузка налоговых документов
	Если МассивСтрокДокументов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Не выбраны документы для обновления статуса';uk='Не вибрані документи для оновлення статусу'");
		
		// Обращаем внимане на колонку "Пометка" 
		СтарыйЦвет = Элементы.ТаблицаДокументовПометка_Синхронизировать.ЦветФонаЗаголовка;	
		
		Элементы.ТаблицаДокументовПометка_Синхронизировать.ЦветФонаЗаголовка = Новый Цвет(255,0,0);
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Элементы.ТаблицаДокументовПометка_Синхронизировать.ЦветФонаЗаголовка = СтарыйЦвет;
		Возврат;
	КонецЕсли;
		
	БылиОшибки 			= Ложь;
	Для каждого СтрокаТаблицыДокументов Из МассивСтрокДокументов Цикл
		
		ОбработкаПрерыванияПользователя();		
		ДокументСсылка = СтрокаТаблицыДокументов.Документ;
		НомерСтроки = ТаблицаДокументов.Индекс(СтрокаТаблицыДокументов)+1;
		
		Если Не СтрокаТаблицыДокументов.ДокументКорректен 
		 ИЛИ Не СтрокаТаблицыДокументов.Звит1С_ДокументКорректен Тогда
			ТекстСообщения = НСтр("ru='Документ пропущен, состояние регистрации в ЕРНН не определено';uk='Документ пропущений, стан реєстрації в ЄРПН не визначено'");
			Сообщить(Строка(ДокументСсылка)+" - "+ТекстСообщения, СтатусСообщения.Информация);			
			БылиОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		Если  мЭтоИсходящиеНалоговыеДокументы Тогда
			СтрокаТаблицыДокументов.СтатусРегистрацииВЕРНН = ПривестиСтатусРегистрацииКФлажку(СтрокаТаблицыДокументов.Звит1С_СтатусРегистрацииВЕРНН);
		Иначе	
			
			Если СтрокаТаблицыДокументов.Звит1С_ДокументЗарегистрирован И Не ЗначениеЗаполнено(СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации) Тогда
				ТекстСообщения = НСтр("ru='Документ пропущен, дата регистрации в ЕРНН не определена';uk='Документ пропущений, дата реєстрації в ЄРПН не визначена'");
				Сообщить(Строка(ДокументСсылка)+" - "+ТекстСообщения, СтатусСообщения.Информация);
				БылиОшибки = Истина; // Ошибка в работе компоненты FREDO Звіт
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыДокументов.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
			ПараметрРегистрации = ?(мЭтоИсходящиеНалоговыеДокументы, СтрокаТаблицыДокументов.Звит1С_СтатусРегистрацииВЕРНН,  СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации);
		Иначе
			ПараметрРегистрации = ?(мЭтоИсходящиеНалоговыеДокументы, ПривестиСтатусРегистрацииКФлажку(СтрокаТаблицыДокументов.Звит1С_СтатусРегистрацииВЕРНН),  СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации);  	
		КонецЕсли;
		
		ИзменитьДокументНаСервере(ИдКонфигурации, ДокументСсылка, мЭтоИсходящиеНалоговыеДокументы, ПараметрРегистрации, БылиОшибки, СтрокаТаблицыДокументов.Звит1С_ДатаРегистрации);
		
	КонецЦикла;
	
	Если БылиОшибки Тогда
		ТекстСообщения = НСтр("ru='Синхронизация завершена с ошибками';uk='Синхронізацію завершено з помилками'");
	Иначе
		ТекстСообщения = НСтр("ru='Синхронизация успешно завершена';uk='Синхронізацію успішно завершено'");
	КонецЕсли;	
	ПоказатьПредупреждение(,ТекстСообщения);

КонецПроцедуры


&НаСервереБезКонтекста
Процедура ИзменитьДокументНаСервере(ИдКонфигурации, ДокументСсылка, ЭтоИсходящиеНалоговыеДокументы, ЗначениеРеквизита, ФлагОшибки, ДатаРегистрации)

	Попытка
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		Если ЭтоИсходящиеНалоговыеДокументы Тогда
			                              
			Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
			    ДокументОбъект.СтатусРегистрацииВЕРНН = ЗначениеРеквизита;
			Иначе	
				ДокументОбъект.ВключенаВЕдиныйРеестрНалоговыхНакладных = ЗначениеРеквизита;
			КонецЕсли;
			
			
			Попытка
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Приложение2КНалоговойНакладной") Тогда				
					Если ЗначениеРеквизита = Истина ИЛИ ЗначениеРеквизита = Перечисления.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН Тогда
						//определим период декларации в зависимости от даты регистрации
						ДатаНачалаПериода = ?(ДокументОбъект.ДатаПолученияПокупателемНеРавнаДатеДокумента И ЗначениеЗаполнено(ДокументОбъект.ДатаПолученияПокупателем),
											  ДокументОбъект.ДатаПолученияПокупателем, ДокументОбъект.Дата);
						// для документов, начиная с 15/02/23, продлили срок регистрации до 18 дней
						СрокРегистрации = 18; 
						Если ДатаНачалаПериода <= '20230115' Тогда
							СрокРегистрации = 15;
						КонецЕсли;
						ПериодДекларации = ?(ДатаРегистрации - ДатаНачалаПериода <= 86400*СрокРегистрации, ДатаНачалаПериода, ДатаРегистрации);
						ДокументОбъект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = ПериодДекларации;	
					Иначе	
						ДокументОбъект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = '00010101';	
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;	
			
		Иначе
			ДокументОбъект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = ЗначениеРеквизита;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		КонецЕсли;
		ТекстСообщения = НСтр("ru='Ошибка записи документа';uk='Помилка запису документа'");
		Сообщить(Строка(ДокументСсылка)+" - "+ТекстСообщения, СтатусСообщения.Важное);			
		Сообщить(ИнформацияОбОшибке.Описание , СтатусСообщения.БезСтатуса);			
		ФлагОшибки = Истина;
	
	КонецПопытки;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьНастройку_ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента(Организация, ТекРабочаяДата)
	//НастройкаПечати = НалоговыйУчетПовтИсп.НастройкаПечатиНалоговыхДокументов(Организация, ТекРабочаяДата);
	//Возврат НастройкаПечати.ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента; 
	ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь;
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(
								ТекущаяДата(), 
								Новый Структура("Организация", Организация)
								);
	Если НастройкиПечати.Количество() > 0 Тогда
		Возврат НастройкиПечати[0].ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
	КонецЕсли;	
	Возврат ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента;
КонецФункции

// Функция выгружает переданный налоговый документ в FREDO Звіт
//
&НаКлиенте
Функция ВыгрузитьДокументВЗвит1С(СтрокаТаблицыДокументов) 
	
	Документ = СтрокаТаблицыДокументов.Документ;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
		ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
		ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной";
	Иначе
		ТекстОшибки = НСтр("ru='Выгрузка документов данного типа не поддерживается';uk='Вивантаження документів даного типу не підтримується'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;	
	
	Если ВозможностьОткрытияОтчетов[ИмяОтчета] = Неопределено Тогда
		ВозможностьОткрытияОтчетов[ИмяОтчета]  = ПроверитьВозможностьОткрытияОтчетаНаСервере(ИмяОтчета); 
	КонецЕсли;
	
	Если НЕ ВозможностьОткрытияОтчетов[ИмяОтчета] = Истина Тогда
		ТекстОшибки = НСтр("ru='Не удалось открыть отчет ""';uk='Не вдалося відкрити звіт ""'")+ИмяОтчета+"""";
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;
	
	// получаем основную форму, а из нее действующую форму для данного периода
	ПараметрыОткрытияОсновнойФормыОтчета = Новый Структура;
	
	мДатаНачалаПериодаОтчета = НачалоМесяца(СтрокаТаблицыДокументов.Дата);
	мДатаКонцаПериодаОтчета  = КонецМесяца(СтрокаТаблицыДокументов.Дата);
	
	ПараметрыОткрытияОсновнойФормыОтчета.Вставить("Организация", Организация);
	ПараметрыОткрытияОсновнойФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", мДатаНачалаПериодаОтчета);
	ПараметрыОткрытияОсновнойФормыОтчета.Вставить("мДатаКонцаПериодаОтчета", мДатаКонцаПериодаОтчета);

	Попытка
		
		Если РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИмяОтчета) Тогда
			ОсновнаяФорма = ПолучитьФорму("ВнешнийОтчет." + ИмяОтчета + ".Форма.ОсновнаяФорма", ПараметрыОткрытияОсновнойФормыОтчета);
		Иначе			
			ОсновнаяФорма = ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма.ОсновнаяФорма", ПараметрыОткрытияОсновнойФормыОтчета);
		КонецЕсли;
		
	Исключение
		ОсновнаяФорма = ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма.ОсновнаяФорма", ПараметрыОткрытияОсновнойФормыОтчета);
	КонецПопытки;
	
	// имеем действующую форму
	ДатаВыбораФормыВыгрузки = СтрокаТаблицыДокументов.Дата;
	ТекРабочаяДата = ТекущаяДата();
	Если ТекРабочаяДата >= '2016-04-01' Тогда
	
		// начиная с 04.2016 выгрузка в ЕРНН должна осуществляется по форме НА ДАТУ РЕГИСТРАЦИИ??!!
		// проверим соответствующую настройку (возможно данное положение со временем будет отменено)
		ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = ПолучитьНастройку_ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента(Организация, ТекРабочаяДата);
		
		Если ВыгрузкаПечатьНН_ПоФормеНаДатуДокумента = Ложь Тогда
			ДатаВыбораФормыВыгрузки = ТекРабочаяДата;
		КонецЕсли;
		
	КонецЕсли;	
	//мВыбраннаяФорма = ОсновнаяФорма.ПолучитьФормуДляПериода(СтрокаТаблицыДокументов.Дата);
	мВыбраннаяФорма = ОсновнаяФорма.ПолучитьФормуДляПериода(ДатаВыбораФормыВыгрузки);
	
	Если мВыбраннаяФорма = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Выгрузка налоговых документов за период ';uk='Вивантаження податкових документів за період '") + Формат(СтрокаТаблицыДокументов.Дата, "ДФ=dd.MM.yyyy") + НСтр("ru=' не поддерживается';uk=' не підтримується'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, ложь);
	КонецЕсли;
	
	// открываем действующую форму и получаем из нее название схемы выгрузки
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мПериодичность",           ПериодичностьМесяц);
	ПараметрыФормы.Вставить("Организация",              Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          мВыбраннаяФорма);
	ПараметрыФормы.Вставить("мСохраненныйДок", 			Неопределено);
	ПараметрыФормы.Вставить("мНалоговыйДокумент",		Документ);
	
	Попытка
		
		Если РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИмяОтчета) Тогда
		    ТекФорма = ПолучитьФорму("ВнешнийОтчет." + ИмяОтчета + ".Форма." + мВыбраннаяФорма, ПараметрыФормы, , Организация);
		Иначе			
		    ТекФорма = ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма." + мВыбраннаяФорма, ПараметрыФормы, , Организация);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка открытия формы ';uk='Помилка відкриття форми '") + мВыбраннаяФорма + НСтр("ru=' отчета ';uk=' звіту '") + ИмяОтчета;
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецПопытки;
	
	ТекФорма.СтруктураРеквизитовФормы.Организация = Организация;
	Попытка
		ТекФорма.РежимУточненияПоказателей = РежимУточненияПоказателей;
	Исключение
		Попытка
			ТекФорма.РасчетЦеныТочный = РежимУточненияПоказателей = 2;
		Исключение
			
		КонецПопытки;
	КонецПопытки;
	
	// получаем структуру схем выгрузки
	ИмяСхемы = ПолучитьИмяСхемыИзХранилицаСхем(ТекФорма.СоздатьТаблицуВыгружаемыхОтчетныхФорм());
	
	СоответствиеОтчета = глМенеджерЗвит1С.ПолучитьСоответствиеОтчетов(ИмяСхемы);
	
	// Последний контроль, технический
	Если СоответствиеОтчета = Неопределено 
	 ИЛИ СоответствиеОтчета.ИмяОтчета      <> ИмяОтчета 
	 ИЛИ СоответствиеОтчета.ИмяФормыОтчета <> мВыбраннаяФорма Тогда
		ТекстОшибки = НСтр("ru='Ошибка открытия формы ';uk='Помилка відкриття форми '") + мВыбраннаяФорма + НСтр("ru=' отчета ';uk=' звіту '") + ИмяОтчета;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нет возможности выгрузить документ по схеме (%1)  с помощью отчета (%2), форма: (%3). Возможно необходимо обновить справочник регламентированных отчетов';uk='Немає можливості вивантажити документ за схемою (%1) за допомогою звіту (%2), форма: (%3). Можливо необхідно оновити довідник регламентованих звітів'"), ИмяСхемы,ИмяОтчета,мВыбраннаяФорма);					
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
			
	// Попробуем запустить FREDO Звіт или выведем причины отказа (не установлен, не используется в этой ИБ)
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация) Тогда
		ТекстОшибки = НСтр("ru='Не удалось запустить ""FREDO Звіт""';uk='Не вдалося запустити ""FREDO Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;			
	
	КодПоЕДРПОУ = СтрокаТаблицыДокументов.Организация_ЕДРПОУ;
	ИДДокумента = СтрокаТаблицыДокументов.ИДДокумента;

	ИмяСхемыЗвит1С = СоответствиеОтчета.ИмяСхемыЗвит1С;
	ТипПериода     = 0;
	НомерВПериоде  = Месяц(СтрокаТаблицыДокументов.Дата);
	Год            = Год(СтрокаТаблицыДокументов.Дата);

	Если глМенеджерЗвит1С.ФлагОтладки Тогда
		Сообщить("FREDO Звіт. Створення звіту в обліковій системі BAS (ЄДРПОУ """+КодПоЕДРПОУ+""", схема """+ИмяСхемыЗвит1С+""", тип періода """+ТипПериода+
												   """, номер в періоді """+НомерВПериоде+""", рік """+Год+""", внутрішній ІД """+ИДДокумента+""")");
	КонецЕсли;
	
	Попытка
		Результат = глКомпонентаЗвит1С.OpenCreateReport(КодПоЕДРПОУ, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, ИДДокумента);
		РезультатаСоздания = Результат.CreateResult;
	Исключение
		РезультатаСоздания = ИнформацияОбОшибке();		
	КонецПопытки;
	
	// Переберем все возможные варианты 
	Если РезультатаСоздания = 0 Тогда
		
		ОтчетЗвит1С = Результат;
	 	Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("FREDO Звіт. Створено новий звіт");
		КонецЕсли;
		
	ИначеЕсли РезультатаСоздания = 1 Тогда
		
		ОтчетЗвит1С = Результат;
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("FREDO Звіт. Відкрито існуючий звіт");
		КонецЕсли;
		
		ТекстОшибки = "";
		ДокументКорректен = ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, СтрокаТаблицыДокументов.Организация_ЕДРПОУ);
		Если Не ДокументКорректен Тогда
			
			ОтчетЗвит1С = Неопределено; // Освобождаем объект
			Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
			
		КонецЕсли; 
	ИначеЕсли РезультатаСоздания = 2 Тогда
		
		ТекстОшибки = НСтр("ru='Отчет уже отправлен в контролирующий орган (квитанция не получена)';uk='Звіт уже відправлено до контролюючого органу (квитанція не отримана)'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
 	ИначеЕсли РезультатаСоздания = 3 Тогда
		
		ТекстОшибки = НСтр("ru='Отчет уже принят контролирующим органом';uk='Звіт прийнято контролюючим органом'");		
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = 4 Тогда
		
		// Позволяем повторную выгрузку отклоненных отчетов
		ОтчетЗвит1С = Результат;
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("FREDO Звіт. Відкрито існуючий звіт (відхилений)");
		КонецЕсли;
		
		ТекстОшибки = "";
		ДокументКорректен = ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
		Если Не ДокументКорректен Тогда
			ОтчетЗвит1С = Неопределено; // Освобождаем объект
			Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
			
		КонецЕсли; 

	ИначеЕсли РезультатаСоздания = -1 Тогда
		
		ТекстОшибки = НСтр("ru='Общая ошибка ""FREDO Звіт""';uk='Загальна помилка ""FREDO Звіт""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
				
	ИначеЕсли РезультатаСоздания = -2 Тогда
		
		ТекстОшибки = НСтр("ru='Ошибка указания периода отчета';uk='Помилка зазначення періоду звіту'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -3 Тогда
		
		ТекстОшибки = НСтр("ru='ЕДРПОУ организации указанной в документе не совпадает с текущем ЕДРПОУ в ""FREDO Звіт""
|Переключите текущую организацию в ""FREDO Звіт"" и повторите выгрузку еще раз';uk='ЄДРПОУ організації зазначеної в документі, не збігається з поточному ЄДРПОУ в ""FREDO Звіт""
|Переключіть поточну організацію в ""FREDO Звіт"" і повторіть вивантаження ще раз'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
		
	ИначеЕсли РезультатаСоздания = -4 Тогда
		
		ТекстОшибки = НСтр("ru='Имя схемы "+ИмяСхемыЗвит1С+" задано не верно или схема отсутсвует';uk= 'Назва схеми "+ИмяСхемыЗвит1С+" задана не вірно або схема відсутня'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -5 Тогда
		
		// Заменен на статусы 2, 3, 4. Обработка данного варианта оставлена для совместимости
		ТекстОшибки = НСтр("ru='Документ уже подан в контролирующий орган';uk='Документ вже поданий до контролюючого органу'");		
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли ТипЗнч(РезультатаСоздания) = Тип("ИнформацияОбОшибке") Тогда
		
		// Исключение возникшее в 1С
		ИнформацияОбОшибке = РезультатаСоздания;
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина ;
		КонецЕсли;
		
		Возврат СформироватьРезультатВыгрузкиДокумента(ИнформацияОбОшибке.Описание, Истина);
		
	КонецЕсли;
	
	ОткрыватьОтчет = (глМенеджерЗвит1С.ФлагОтладки ИЛИ глМенеджерЗвит1С.ФлагОтладкиПакетноеТестирование); 
	
	
	ДопПараметры = Новый Структура("ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ОткрыватьОтчет", ОтчетЗвит1С, СоответствиеОтчета, ПараметрыФормы, ОткрыватьОтчет);
	
	ДопПараметры.Вставить("ТекФорма", 							  ТекФорма);
	ДопПараметры.Вставить("ДанныеДляСохраненияРасшифровкиОтчета", Новый Структура);
	
	глМенеджерЗвит1С.ЗаполнитьИСохранитьОтчетЗвит1С(Истина, ДопПараметры);
	
	// допишем в отчет служебные поля, их нет в XML, но они нужны для отправки налоговых документов контрагентам
	ДопПоказатели = Новый Структура;
	НомерСхемы = Сред(СоответствиеОтчета.ИмяСхемыЗвит1С,2);
	Если (НомерСхемы = "1201009") ИЛИ (НомерСхемы = "1201209") Тогда
		//оставим дозаполнение "на лету" только для 09 схем
		Попытка
			
			СписокКодовКонтрагнта = ПолучитьКодыКонтрагентаНаСервере(СтрокаТаблицыДокументов.Контрагент);
			
			ДопПоказатели.Вставить("EDR_POK", СписокКодовКонтрагнта.КодПоЕДРПОУ);
			КодФилиалаИЕДРПОУ = СписокКодовКонтрагнта.КодФилиала;
			Если ЗначениеЗаполнено(КодФилиалаИЕДРПОУ) Тогда
				
				ПозицияРазделителя = Найти(КодФилиалаИЕДРПОУ, "@");
				
				Если ПозицияРазделителя > 0 Тогда
					
					// Указан код по ЕДРПОУ
					КодФилиала	= СокрЛП(Лев(КодФилиалаИЕДРПОУ, ПозицияРазделителя - 1));
					КодЕДРПОУ	= СокрЛП(Сред(КодФилиалаИЕДРПОУ, ПозицияРазделителя + 1));
					Если ЗначениеЗаполнено(КодФилиала) Тогда
						ДопПоказатели.Вставить("DEPT_POK", КодФилиала);
					КонецЕсли;
					Если ЗначениеЗаполнено(КодЕДРПОУ) Тогда
						ДопПоказатели.Вставить("EDR_POK", КодЕДРПОУ);
					КонецЕсли;
					
				Иначе 
					
					 // просто код филиала
					 ДопПоказатели.Вставить("DEPT_POK", СокрЛП(КодФилиалаИЕДРПОУ));
					
				КонецЕсли;
			
			КонецЕсли;
			
		Исключение КонецПопытки;
	КонецЕсли; 
	
	Для каждого ДопПоказатель Из ДопПоказатели Цикл
		глМенеджерЗвит1С.ЗаписатьВОтчетЗвит1С(ОтчетЗвит1С, "", ДопПоказатель.Ключ, ДопПоказатель.Значение);
	КонецЦикла;
	Если ДопПоказатели.Количество() > 0 Тогда
		глКомпонентаЗвит1С.SaveReportEx(ОтчетЗвит1С, Число(ОткрыватьОтчет));	
	КонецЕсли;
	
	
	
	Если НЕ ДопПараметры.Свойство("ФлагУспешногоСохранения") Тогда
		ТекстОшибки = НСтр("ru='Ошибка передачи данных в FREDO Звіт';uk='Помилка передачі даних в FREDO Звіт'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
	
	Возврат СформироватьРезультатВыгрузкиДокумента(Неопределено, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодыКонтрагентаНаСервере(Контрагент)
	
	Возврат Новый Структура("КодПоЕДРПОУ, КодФилиала", Контрагент.КодПоЕДРПОУ, Контрагент.КодФилиала);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьОткрытияОтчетаНаСервере(ИмяОтчета)

	Возврат РегламентированнаяОтчетность.ПроверитьВозможностьОткрытияОтчета(ИмяОтчета);	

КонецФункции

// Функция формирует результат работы функции ВыгрузитьДокумент
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьРезультатВыгрузкиДокумента(Описание = Неопределено, Ошибка = Ложь, ЭтоФатальнаяОшибка = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ВыгрузкаПрошлаУспешно",    (Не Ошибка));
	ВозвращаемоеЗначение.Вставить("Описание",                 Описание);           // Текст ошибки или информация о выполненных действиях
	ВозвращаемоеЗначение.Вставить("ПроизошлаФатальнаяОшибка", ЭтоФатальнаяОшибка); // Прерывает пакетную выгрузку
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


// Функция проверяет неизменнойсть ключевых параметров перед повторной выгрузкуой отчета
//
&НаКлиенте
Функция ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
	
	ТекстОшибки = "";

	ДатаПериода = Дата(Год, НомерВПериоде, 1);

	Если ИмяСхемыЗвит1С <> ОтчетЗвит1С.CharCode Тогда
		ТекстОшибки = ТекстОшибки+Символы.ПС
		               + НСтр("ru='Схема: ожидается';uk='Схема: очікується'")+" """+ИмяСхемыЗвит1С+""" "
					   + НСтр("ru='обнаружено';uk='виявлено'")+" """+ОтчетЗвит1С.CharCode+"""";
	КонецЕсли;		
	Если ТипПериода <> ОтчетЗвит1С.PeriodType
	 ИЛИ ДатаПериода <> ОтчетЗвит1С.PeriodDate Тогда
		ТекстОшибки = ТекстОшибки+Символы.ПС 
		               + НСтр("ru='Период: ожидается';uk='Період: очікується'")+" """+глМенеджерЗвит1С.ОпределитьТипПериодаЗвит1С(ДатаПериода, ТипПериода)+""" "
					   + НСтр("ru='обнаружено';uk='виявлено'")+" """+глМенеджерЗвит1С.ОпределитьТипПериодаЗвит1С(ОтчетЗвит1С.PeriodDate, ОтчетЗвит1С.PeriodType)+"""";
	КонецЕсли;				
	Если СокрЛП(КодПоЕДРПОУ) <> СокрЛП(ОтчетЗвит1С.FIRM_EDRPOU) Тогда
		ТекстОшибки = ТекстОшибки+Символы.ПС
		               + НСтр("ru='Код ЕДРПОУ: ожидается';uk='Код ЄДРПОУ: очікується'")+" """+КодПоЕДРПОУ+""" "
					   + НСтр("ru='обнаружено';uk='виявлено'")+" """+ОтчетЗвит1С.FIRM_EDRPOU+"""";
	КонецЕсли;				
		
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru='Обнаружен отчет ""FREDO Звіт"" соответсвующий выгружаемому из BAS документу.
|Изменены ключевые параметры, выгрузка отменена.';uk='Виявлено звіт ""FREDO Звіт"" відповідний документу, що вивантажується з BAS.
|Змінені ключові параметри, вивантаження скасоване.'")+ТекстОшибки;
						  
	    Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяСхемыИзХранилицаСхем(АдресВХранилище)

	Таблица = ПолучитьИзВременногоХранилища(АдресВХранилище);	

	Возврат Таблица[0].ИмяСхемы;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиСтатусРегистрацииКФлажку(Статус)
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ()

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыДоверенностей[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Заполняет документ по основанию
// Параметры:
//	ДанныеЗаполнения - Структура или Ссылка на объект- основание
//
Процедура ЗаполнитьНаОсновании(ДанныеЗаполнения) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения.ДокументОснование);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
					ЗаполнитьПоЗаявкеНаВозвратТоваров(ДанныеЗаполнения.ДокументОснование);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкеНаВозвратТоваров(ДанныеЗаполнения);
КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьНаОсновании(ДанныеЗаполнения);
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если ЗначениеЗаполнено(ДатаОкончанияДействия) И ДатаОкончанияДействия < НачалоДня(Дата) Тогда
		ТекстОшибки = НСтр("ru='Дата окончания действия должна быть не меньше даты документа %Дата%';uk='Дата закінчення дії повинна бути не менше дати документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОкончанияДействия",
			,
			Отказ);
	КонецЕсли;
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
		Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
			Отказ = Истина;
		КонецЕсли;
		ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	Если ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ);
	КонецЕсли;
	Если Статус = Перечисления.СтатусыДоверенностей.Выдана
		И НЕ Статус = Ссылка.Статус Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус = Перечисления.СтатусыДоверенностей.НеВыдана;
	Если ЗначениеЗаполнено(ОбъектКопирования.СрокДействия) Тогда
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			ДатаОкончанияДействия = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ОсновнойКалендарьПредприятия, ТекущаяДата(), ОбъектКопирования.СрокДействия, Ложь);
		Иначе
			ДатаОкончанияДействия = ТекущаяДата() + ОбъектКопирования.СрокДействия * 86400;
		КонецЕсли;
	КонецЕсли;
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	Ответственный = Пользователи.ТекущийПользователь();
	Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	// Срок действия доверенности по умолчанию подставляется из последней доверенности, иначе 10 рабочих дней
	Если Не ЗначениеЗаполнено(СрокДействия) Тогда
		СрокДействияПоследнейДоверенности = Документы.ДоверенностьВыданная.ПолучитьСрокДействияПоследнейДоверенности();
		Если СрокДействияПоследнейДоверенности <> Неопределено Тогда
			СрокДействия = СрокДействияПоследнейДоверенности;
		Иначе
			СрокДействия = 10;
		КонецЕсли;
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			Попытка
				ДатаОкончанияДействия = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ОсновнойКалендарьПредприятия,  ТекущаяДата(), СрокДействия);
			Исключение
				ДатаОкончанияДействия = ТекущаяДата() + 10 * 24*60*60;
			КонецПопытки;
		Иначе
				ДатаОкончанияДействия = ТекущаяДата() + 10 * 24*60*60;
		КонецЕсли;
	КонецЕсли;
	ПолучитьПоследниеПаспортныеДанныеСтрокой();
	
КонецПроцедуры

#Область ЗаполнениеНаПолучениеТоваров

Процедура ЗаполнитьПоЗаказуПоставщику(Знач ДокументОснование)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ДокументОснование,
	|	ЗаказПоставщику.Ссылка.НомерПоДаннымПоставщика КАК НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.Ссылка.ДатаПоДаннымПоставщика КАК ДатаПоДаннымПоставщика,
	|	ЗаказПоставщику.Ссылка.Номер КАК НомерОснования,
	|	ЗаказПоставщику.Ссылка.Дата КАК ДатаОснования,
	|	ЗаказПоставщику.Партнер КАК Партнер,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Организация.Префикс КАК Префикс,
	|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПоставщику.Статус КАК СтатусДокумента,
	|	ЗаказПоставщику.Менеджер.ФизическоеЛицо КАК ФизЛицо,
	|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
	|				ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	ЗаказПоставщику.Товары.(
	|		НоменклатураПоставщика,
	|		Номенклатура,
	|		Характеристика,
	|		Упаковка,
	|		КоличествоУпаковок,
	|		Количество
	|	) КАК Товары
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура КАК Номенклатура,
	|	ЗаказТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	ЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика КАК Характеристика,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаказыПоставщикам.КОформлениюОстаток / ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование) КАК ЗаказыПоставщикам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаказТовары.Ссылка КАК Ссылка,
	|			ЗаказТовары.Номенклатура КАК Номенклатура,
	|			ЗаказТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|			ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЗаказТовары.Характеристика КАК Характеристика,
	|			ЗаказТовары.Упаковка КАК Упаковка,
	|			ЗаказТовары.КодСтроки КАК КодСтроки
	|		ИЗ
	|			Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
	|		ГДЕ
	|			ЗаказТовары.Ссылка = &ДокументОснование) КАК ЗаказТовары
	|		ПО ЗаказыПоставщикам.КодСтроки = ЗаказТовары.КодСтроки
	|ГДЕ
	|	ЗаказыПоставщикам.КОформлениюОстаток > 0
	|	И ЗаказыПоставщикам.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка  = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.КПоступлению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.ДокументОснование,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	Если ЗначениеЗаполнено(ВыборкаШапка.НомерПоДаннымПоставщика) И ЗначениеЗаполнено(ВыборкаШапка.ДатаПоДаннымПоставщика) Тогда
		НомерДокумента = ВыборкаШапка.НомерПоДаннымПоставщика;
		ДатаДокумента = ВыборкаШапка.ДатаПоДаннымПоставщика;
	Иначе
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаШапка.НомерОснования, Ложь, Истина);
		ДатаДокумента = ВыборкаШапка.ДатаОснования;
	КонецЕсли;
	ПоДокументу = НСтр("ru='Заказ №%Номер% от %Дата%';uk='Замовлення №%Номер% від %Дата%'");
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
	Товары.Загрузить(РезультатыЗапроса[1].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаВозвратТоваров(Знач ДокументОснование)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка КАК ДокументОснование,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Номер КАК НомерОснования,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Дата КАК ДатаОснования,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Партнер КАК Партнер,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Контрагент КАК Контрагент,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Организация КАК Организация,
	|	ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчет КАК БанковскийСчет,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Статус КАК СтатусДокумента,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Менеджер.ФизическоеЛицо КАК ФизЛицо,
	|	НЕ ЗаявкаНаВозвратТоваровОтКлиента.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозвратТоваровОтКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|				ИЛИ ЗаявкаНаВозвратТоваровОтКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатураПоставщика,
	|	ЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика КАК Характеристика,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаявкаНаВозврат.КОформлениюОстаток / ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(, ЗаявкаНаВозвратТоваровОтКлиента = &ДокументОснование) КАК ЗаявкаНаВозврат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаказТовары.Ссылка КАК Ссылка,
	|			ЗаказТовары.Номенклатура КАК Номенклатура,
	|			ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЗаказТовары.Характеристика КАК Характеристика,
	|			ЗаказТовары.Упаковка КАК Упаковка,
	|			ЗаказТовары.КодСтроки КАК КодСтроки
	|		ИЗ
	|			Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаказТовары
	|		ГДЕ
	|			ЗаказТовары.Ссылка = &ДокументОснование) КАК ЗаказТовары
	|		ПО ЗаявкаНаВозврат.КодСтроки = ЗаказТовары.КодСтроки
	|ГДЕ
	|	&ИспользоватьРасширенныеВозможностиЗаказаКлиента
	|	И ЗаявкаНаВозврат.КОформлениюОстаток > 0
	|	И ЗаявкаНаВозврат.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика,
	|	ЗаказТовары.Упаковка,
	|	ЗаказТовары.КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаказТовары
	|ГДЕ
	|	НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента
	|	И ЗаказТовары.Ссылка = &ДокументОснование
	|	И ЗаказТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка  = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.ДокументОснование,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		Истина);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаШапка.НомерОснования, Ложь, Истина);
	ДатаДокумента = ВыборкаШапка.ДатаОснования;
	ПоДокументу = НСтр("ru='Заявка на возврат товаров №%Номер% от %Дата%';uk='Заявка на повернення товарів №%Номер% від %Дата%'");
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
	Товары.Загрузить(РезультатыЗапроса[1].Выгрузить());
	
КонецПроцедуры



#КонецОбласти

#Область ЗаполнениеНаПолучениеДС











#КонецОбласти

#КонецОбласти

Процедура ПолучитьПоследниеПаспортныеДанныеСтрокой()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ПОМЕСТИТЬ Паспорт
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|	И ДокументыФизическихЛицСрезПоследних.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.Паспорт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ПОМЕСТИТЬ ДокументУдостоверяющийЛичность
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
	|	И ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыФизическихЛицСрезПоследних.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Паспорт.ВидДокументаФизЛица ЕСТЬ NULL 
	|			ТОГДА ДокументУдостоверяющийЛичность.ВидДокументаФизЛица
	|		ИНАЧЕ Паспорт.ВидДокументаФизЛица
	|	КОНЕЦ КАК ВидДокументаФизЛица
	|ПОМЕСТИТЬ ВыбранныйВидДокумента
	|ИЗ
	|	Паспорт КАК Паспорт
	|		ПОЛНОЕ СОЕДИНЕНИЕ ДокументУдостоверяющийЛичность КАК ДокументУдостоверяющийЛичность
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ИЗ
	|	ВыбранныйВидДокумента КАК ВыбранныйВидДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|		ПО ВыбранныйВидДокумента.ВидДокументаФизЛица = ДокументыФизическихЛицСрезПоследних.ВидДокумента
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо";
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
    
    Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                КАК Ссылка,
	|	ДанныеДокумента.Организация           КАК Организация,
	|	ДанныеДокумента.Статус                КАК Статус,
	|	ДанныеДокумента.Партнер               КАК Партнер,
	|	ДанныеДокумента.Контрагент            КАК Контрагент,
	|	ДанныеДокумента.Дата                  КАК Период,
	|	ДанныеДокумента.ОбъектРасчетов        КАК ОбъектРасчетов,
	|	ДанныеДокумента.Валюта                КАК Валюта,
	|	ДанныеДокумента.ВидОперации           КАК ВидОперации,
	|	ДанныеДокумента.ВидОперацииВозвратКорректировка КАК ВидОперацииВозвратКорректировка,
	|	ДанныеДокумента.Договор               КАК Договор,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.НеНДСОперации) ТОГДА
	|
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Корректировка) И ДанныеДокумента.Переоценка ТОГДА
	|					ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Переоценка)
	|
	|				КОГДА ДанныеДокумента.ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Возврат)
	|				  ИЛИ ДанныеДокумента.ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.КорректировкаВозврата) ТОГДА
	|					ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Возврат)
	|
	|               ИНАЧЕ
	|					ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Поставка)
	|
	|           КОНЕЦ
	|
	|		КОГДА ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Розница)
	|
	|		ИНАЧЕ 
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПоставки,
	|	ДанныеДокумента.СуммаВозвратнойТары КАК СуммаВозвратнойТары,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаОтгрузкиОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(ДанныеДокумента.ДатаОтгрузкиОплаты, ДЕНЬ)
	|		ИНАЧЕ 
	|			ДанныеДокумента.Дата
	|	КОНЕЦ КАК ДатаВозникновенияНО,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеДокумента.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных
	|		ИНАЧЕ 
	|			ДанныеДокумента.Дата
	|	КОНЕЦ КАК ДатаОтраженияВЕРНН,
	|	ДанныеДокумента.Переоценка            КАК Переоценка
	|
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
    
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
    
	Запрос.УстановитьПараметр("Период",                                   Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                                   Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Организация",                              Реквизиты.Организация);
	Запрос.УстановитьПараметр("Статус",                                   Реквизиты.Статус);
	Запрос.УстановитьПараметр("ВидОперации",                              Реквизиты.ВидОперации);
	Запрос.УстановитьПараметр("ВидОперацииВозвратКорректировка",          Реквизиты.ВидОперацииВозвратКорректировка);
	Запрос.УстановитьПараметр("Партнер",                                  Реквизиты.Партнер);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",                РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерамРозницаПлательщику", 
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(
			Новый Структура("Организация, Партнер, Контрагент, Договор, НаправлениеДеятельности",
				Реквизиты.Организация,
				Справочники.Партнеры.ПустаяСсылка(),
				Неопределено,
				Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),
				Справочники.НаправленияДеятельности.ПустаяСсылка()
			)
		)
	);
	Запрос.УстановитьПараметр("ОбъектРасчетов",                           Реквизиты.ОбъектРасчетов);
	Запрос.УстановитьПараметр("Договор",                                  Реквизиты.Договор);
	Запрос.УстановитьПараметр("ВидПоставки",                              Реквизиты.ВидПоставки);
	Запрос.УстановитьПараметр("ДатаВозникновенияНО",                      Реквизиты.ДатаВозникновенияНО);
	Запрос.УстановитьПараметр("ДатаОтраженияВЕРНН",                       Реквизиты.ДатаОтраженияВЕРНН);
	Запрос.УстановитьПараметр("Переоценка",                               Реквизиты.Переоценка);
	Запрос.УстановитьПараметр("ФормироватьФинансовыйРезультат",           ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",               Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("НаправлениеДеятельности",                  Реквизиты.НаправлениеДеятельности);

	УстановитьПараметрКоэффициентПересчетаВВалютуУпр(Запрос);
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
    
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
    ТекстЗапросаТаблицаНДСНоменклатурныйСоставДляНалоговыхНакладных(Запрос, ТекстыЗапроса, Регистры);
    ТекстЗапросаТаблицаНДСРеестрВыданныхНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры);
    ТекстЗапросаТаблицаНДСУсловныеПродажи(Запрос, ТекстыЗапроса, Регистры);
    ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Поместим результаты запроса в дополнительные свойства
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
    
КонецПроцедуры

Процедура УстановитьПараметрКоэффициентПересчетаВВалютуУпр(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр") Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентПересчетаВВалютуУпр = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
	                                   Запрос.Параметры.Валюта, 
	                                   Запрос.Параметры.ВалютаУправленческогоУчета, 
	                                   Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр", КоэффициентПересчетаВВалютуУпр);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаНДСНоменклатурныйСоставДляНалоговыхНакладных(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "НДСНоменклатурныйСоставДляНалоговыхНакладных";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ДатаВозникновенияНО КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|	&Валюта КАК Валюта,
	|
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаТоваров.ДокументПоставки) = ТИП(Документ.АктВыполненныхРабот)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.УслугиССдержанием)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.ТоварыУслуги)
	|	КОНЕЦ КАК СпособЗаполнения,
	|
	|	ТаблицаТоваров.СтавкаНДС      КАК СтавкаНДС,
	|	ТаблицаТоваров.НомерГТД       КАК НомерГТД,
	|	ТаблицаТоваров.Номенклатура   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка       КАК Упаковка,
	|	ТаблицаТоваров.Цена           КАК ЦенаНН,
	|
	|	ТаблицаТоваров.ОбъектРасчетов КАК ОбъектРасчетов,
	|   ТаблицаТоваров.ДокументПоставки КАК ДокументПоставки,
	|   ТаблицаТоваров.ДокументПоставкиДляВозвратов КАК ДокументПоставкиДляВозвратов,
	|
	|	ВЫБОР
	|		КОГДА &ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Возврат)
	|				ИЛИ &ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.КорректировкаВозврата)
	|				ИЛИ ((&ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Корректировка) И &Переоценка) И ТаблицаТоваров.Цена < 0)
	|			ТОГДА -ТаблицаТоваров.СуммаСНДС
	|		ИНАЧЕ ТаблицаТоваров.СуммаСНДС
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА &ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Возврат)
	|				ИЛИ &ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.КорректировкаВозврата)
	|			ТОГДА -ТаблицаТоваров.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТоваров.КоличествоУпаковок
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И (НЕ ТИПЗНАЧЕНИЯ(ТаблицаТоваров.ДокументПоставки) = ТИП(Документ.РеализацияУслугПрочихАктивов))
	|	И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|	И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаВозникновенияНО КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	&ВидПоставки КАК ВидПоставки, 
	|	&Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.ТоварыПрочее) КАК СпособЗаполнения,
	|
	|	ТаблицаТоваров.СтавкаНДС      КАК СтавкаНДС,
	|	Неопределено       КАК НомерГТД,
	|	Неопределено       КАК Номенклатура,
	|	Неопределено       КАК Характеристика,
	|	Неопределено       КАК Упаковка,
	|	Неопределено       КАК ЦенаНН,
	|
	|	ТаблицаТоваров.ОбъектРасчетов КАК ОбъектРасчетов,
	|   ТаблицаТоваров.ДокументПоставки КАК ДокументПоставки,
	|   ТаблицаТоваров.ДокументПоставкиДляВозвратов КАК ДокументПоставкиДляВозвратов,
	|
	|	ВЫБОР
	|		КОГДА &ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Возврат)
	|				ИЛИ &ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.КорректировкаВозврата)
	|				ИЛИ ((&ВидОперацииВозвратКорректировка = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Корректировка) И &Переоценка) И ТаблицаТоваров.Цена < 0)
	|			ТОГДА -ТаблицаТоваров.СуммаСНДС
	|		ИНАЧЕ ТаблицаТоваров.СуммаСНДС
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК КоличествоУпаковок
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ТаблицаТоваров.ДокументПоставки) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|	И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|	И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаВозникновенияНО КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерамРозницаПлательщику КАК АналитикаУчетаПоПартнерам,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|	&Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.ТоварыУслуги) КАК СпособЗаполнения,
	|
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА ТаблицаТоваров.Ссылка.Организация.НоменклатураЗаполненияИтоговыхНалоговыхПоРознице.НоменклатураГТД
	|		ИНАЧЕ ТаблицаТоваров.НомерГТД
	|	КОНЕЦ КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА ТаблицаТоваров.Ссылка.Организация.НоменклатураЗаполненияИтоговыхНалоговыхПоРознице
	|		ИНАЧЕ ТаблицаТоваров.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТоваров.Цена
	|	КОНЕЦ КАК ЦенаНН,
	|
	|	ТаблицаТоваров.СтавкаНДС КАК ОбъектРасчетов,
	|	ТаблицаТоваров.ДокументПоставки КАК ДокументПоставки,
	|	ТаблицаТоваров.ДокументПоставкиДляВозвратов КАК ДокументПоставкиДляВозвратов,
	|
	|	СУММА(ТаблицаТоваров.СуммаСНДС) КАК СуммаВзаиморасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТоваров.КоличествоУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И (НЕ ТИПЗНАЧЕНИЯ(ТаблицаТоваров.ДокументПоставки) = ТИП(Документ.РеализацияУслугПрочихАктивов))
	|	И (&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|		ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Упаковка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Характеристика
	|	КОНЕЦ,
	|	ТаблицаТоваров.ДокументПоставки,
	|	ТаблицаТоваров.ДокументПоставкиДляВозвратов,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА ТаблицаТоваров.Ссылка.Организация.НоменклатураЗаполненияИтоговыхНалоговыхПоРознице.НоменклатураГТД
	|		ИНАЧЕ ТаблицаТоваров.НомерГТД
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА ТаблицаТоваров.Ссылка.Организация.НоменклатураЗаполненияИтоговыхНалоговыхПоРознице
	|		ИНАЧЕ ТаблицаТоваров.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТоваров.Цена
	|	КОНЕЦ,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|";
		
    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСРеестрВыданныхНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "НДСРеестрВыданныхНалоговыхДокументов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ДатаОтраженияВЕРНН КАК Период,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства КАК СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоставкаДокумента.СуммаБезНДСРегл) КАК СуммаБезНДС,
	|	СУММА(ПоставкаДокумента.СуммаНДСРегл) КАК СуммаНДС,
	|	ЛОЖЬ КАК ПродажаНижеОбычнойЦены,
// Информация для заполнения отчета "Анализ налоговых обязательств"	
	|	&ВидПоставки КАК ВидПоставки,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	|			ТОГДА ПоставкаДокумента.СтавкаНДС
	|		ИНАЧЕ
	|			ПоставкаДокумента.ОбъектРасчетов
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	&Валюта КАК ВалютаВзаиморасчетов,
	|	СУММА(ПоставкаДокумента.СуммаСНДС) КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваПоставка)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваРозничнаяПродажа)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваУсловнаяПродажа)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ КАК ХозяйственнаяОперация
// ...
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК ПоставкаДокумента
	|ГДЕ
	|	ПоставкаДокумента.Ссылка = &Ссылка
	|	И ПоставкаДокумента.Ссылка.СтатусАвтокорректировки <> ЗНАЧЕНИЕ(Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ)
	|	И (НЕ ПоставкаДокумента.Ссылка.ДокументУменьшаетНО
	|		ИЛИ ПоставкаДокумента.Ссылка.СтатусРегистрацииВЕРНН = ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН)
	|		ИЛИ ПоставкаДокумента.Ссылка.ОтражатьВУчетеБезРегистрации)	
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.ОбъектРасчетов,
	|	ПоставкаДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаОтраженияВЕРНН,
	|	&АналитикаУчетаПоПартнерам,
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС,
	|	СУММА(ПоставкаДокумента.СуммаБезНДСРегл),
	|	СУММА(ПоставкаДокумента.СуммаНДСРегл),
	|	ЛОЖЬ,
// Информация для заполнения отчета "Анализ налоговых обязательств"	
	|	&ВидПоставки,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	|			ТОГДА ПоставкаДокумента.СтавкаНДС
	|		ИНАЧЕ
	|			ПоставкаДокумента.ОбъектРасчетов
	|	КОНЕЦ,
	|	&Валюта,
	|	СУММА(ПоставкаДокумента.СуммаСНДС),
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваПоставка)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваРозничнаяПродажа)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваУсловнаяПродажа)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ
// ...
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.ТоварыПоДаннымПользователя КАК ПоставкаДокумента
	|ГДЕ
	|	ПоставкаДокумента.Ссылка = &Ссылка
	|	И ПоставкаДокумента.Ссылка.СтатусАвтокорректировки = ЗНАЧЕНИЕ(Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ)
	|	И (НЕ ПоставкаДокумента.Ссылка.ДокументУменьшаетНО
	|		ИЛИ ПоставкаДокумента.Ссылка.СтатусРегистрацииВЕРНН = ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН)
	|		ИЛИ ПоставкаДокумента.Ссылка.ОтражатьВУчетеБезРегистрации)	
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС,
	|	ПоставкаДокумента.ОбъектРасчетов
	|
	|";
	
    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаНДСУсловныеПродажи(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "НДСУсловныеПродажи";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидУсловнойПродажи.ВосстановлениеНДС) КАК ВидУсловнойПродажи,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ПоставкаДокумента.Номенклатура
	|		ИНАЧЕ ПоставкаДокумента.ОбъектЗаполненияСодержанияУсловнаяПродажа
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ПоставкаДокумента.Характеристика
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК Характеристика,
	|	ПоставкаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ПоставкаДокумента.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ПоставкаДокумента.НалоговоеНазначениеПоФактуУсловнаяПродажа КАК НалоговоеНазначениеПоФакту,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА -ПоставкаДокумента.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	СУММА(-ПоставкаДокумента.СуммаБезНДС) КАК СтоимостьРегл,
	|	СУММА(-ПоставкаДокумента.СуммаНДСРеглПоРегиструУсловнаяПродажа) КАК НДСРегл,
	|	СУММА(-ПоставкаДокумента.СуммаНДС) КАК НДСРеглРучныеКорректировки
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.ТоварыПоДаннымПользователя КАК ПоставкаДокумента
	|ГДЕ
	|	ПоставкаДокумента.Ссылка = &Ссылка
	|	И (&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ПоставкаДокумента.Характеристика
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ,
	|	ПоставкаДокумента.СтавкаНДС,
	|	ПоставкаДокумента.НалоговоеНазначение,
	|	ПоставкаДокумента.НалоговоеНазначениеПоФактуУсловнаяПродажа,
	|	ВЫБОР
	|		КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ПоставкаДокумента.Номенклатура
	|		ИНАЧЕ ПоставкаДокумента.ОбъектЗаполненияСодержанияУсловнаяПродажа
	|	КОНЕЦ
	|
	|";
	
    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период               КАК Период,
	|	&Организация          КАК Организация,
	|	&ДатаОтраженияВЕРНН   КАК ДатаОтражения
	|
	|";
	
    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции



#КонецОбласти

#Область СозданиеНаОсновании

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать


// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Налоговая накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Приложение2КНалоговойНакладной";
	КомандаПечати.Представление = НСтр("ru='Приложение 2 к налоговой накладной';uk='Додаток 2 до податкової накладної'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;


КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// РегламентированнаяОтчетность
	ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Ложь;
	Если  ТипЗнч(ПараметрыПечати) = Тип("Структура")
		И ПараметрыПечати.Свойство("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы") Тогда
	
		ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина;
	
	КонецЕсли;
	// Конец РегламентированнаяОтчетность
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приложение2КНалоговойНакладной") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Приложение2КНалоговойНакладной", 
			"Приложение 2 к налоговой накладной", 
			СформироватьПечатнуюФормуПриложение2КНалоговойНакладной(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, "Приложение2КНалоговойНакладной"
																	// РегламентированнаяОтчетность
																	,ТолькоФормироватьСтруктуруПоказателейПечатнойФормы
																	)
																	// Конец РегламентированнаяОтчетность
		);
	КонецЕсли;
	
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуПриложение2КНалоговойНакладной(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, ИмяМакета, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Ложь) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приложение2КНалоговойНакладной.Ссылка,
	|	Приложение2КНалоговойНакладной.Дата,
	|	Приложение2КНалоговойНакладной.Номер,
	|	Приложение2КНалоговойНакладной.Валюта,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяНеЗарегистрированаВИБ
	|	    	ТОГДА Приложение2КНалоговойНакладной.СпецРежимНалогообложения
	|	    ИНАЧЕ
	|	    	Приложение2КНалоговойНакладной.НалоговаяНакладная.СпецРежимНалогообложения
	|	КОНЕЦ КАК СпецРежимНалогообложения,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяНеЗарегистрированаВИБ
	|	    	ТОГДА Приложение2КНалоговойНакладной.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов
	|	    ИНАЧЕ
	|	    	Приложение2КНалоговойНакладной.НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов
	|	КОНЕЦ КАК НаименованиеФилиала,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяНеЗарегистрированаВИБ
	|	    	ТОГДА Приложение2КНалоговойНакладной.ОбособленноеПодразделение.Префикс
	|	    ИНАЧЕ
	|	    	Приложение2КНалоговойНакладной.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	КОНЕЦ КАК Префикс,
	|  	Приложение2КНалоговойНакладной.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиалаНовый,
	|  	Приложение2КНалоговойНакладной.ОбособленноеПодразделение.Префикс КАК ПрефиксНовый,
	|	Приложение2КНалоговойНакладной.Организация,
	|	Приложение2КНалоговойНакладной.Контрагент,
	|	Приложение2КНалоговойНакладной.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА Приложение2КНалоговойНакладной.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Приложение2КНалоговойНакладной.Контрагент.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнойКонтрагент,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА Приложение2КНалоговойНакладной.Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.СпецРежимНалогообложения = 5
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоглашениеОРазделеПродукции,
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяНеЗарегистрированаВИБ
	|	    	ТОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяДата
	|	    ИНАЧЕ
	|	    	Приложение2КНалоговойНакладной.НалоговаяНакладная.Дата
	|	КОНЕЦ КАК ДатаНалоговойНакладной,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяНеЗарегистрированаВИБ
	|	    	ТОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяНомер
	|	    ИНАЧЕ
	|	    	Приложение2КНалоговойНакладной.НалоговаяНакладная.Номер
	|	КОНЕЦ КАК НомерНалоговойНакладной,
	|	Приложение2КНалоговойНакладной.ВидОперации,
	|	Приложение2КНалоговойНакладной.ВидОперацииВозвратКорректировка,
	|	Приложение2КНалоговойНакладной.Договор,
	|	ВЫБОР КОГДА Приложение2КНалоговойНакладной.СтатусРегистрацииВЕРНН = ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,
	|	Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную.Представление КАК КтоВыписалНалоговуюНакладную,
	|	Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладнуюСсылка,
	|	Приложение2КНалоговойНакладной.ТипПричиныНевыдачиПокупателю,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяНеЗарегистрированаВИБ
	|	    	ТОГДА ЛОЖЬ
	|	    ИНАЧЕ
	|	    	Приложение2КНалоговойНакладной.НалоговаяНакладная.УслугиНерезидентаДляНехозДеят
	|	КОНЕЦ КАК УслугиНерезидентаДляНехозДеят,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.НалоговаяНакладнаяНеЗарегистрированаВИБ
	|	    	ТОГДА ЛОЖЬ
	|	    ИНАЧЕ
	|	    	Приложение2КНалоговойНакладной.НалоговаяНакладная.ПоставкаДипПредставительству
	|	КОНЕЦ КАК ПоставкаДипПредставительству,
	|	Приложение2КНалоговойНакладной.ФормаРасчетов,
	|	Приложение2КНалоговойНакладной.ВидДоговора, 
	|	Приложение2КНалоговойНакладной.НомерДоговора,
	|	Приложение2КНалоговойНакладной.ДатаДоговора,
	|	Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	Приложение2КНалоговойНакладной.ЭлектронныйДокумент,
	|	Приложение2КНалоговойНакладной.РегистрируетсяВЕРННПокупателем,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладной.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЕСТЬNULL(Приложение2КНалоговойНакладной.Контрагент.КодФилиала, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ФилиалПокупателя,
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная.Сводная КАК Сводная,
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная.КодПризнакаСводной КАК КодПризнакаСводной,
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная.ВидОперации КАК ВидОперацииНалоговой,
	|	Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную.КодПоДРФО КАК ИННКтоВыписалНН,
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная.ЛьготаНДС КАК ЛьготаНДС,
	|	Приложение2КНалоговойНакладной.ДатаОплаты КАК ДатаОплаты,
	|	Приложение2КНалоговойНакладной.ДатаПолученияПокупателем
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
	|ГДЕ
	|	Приложение2КНалоговойНакладной.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ТекстДляПечатиВКолонкеЦена,
	|	ВложенныйЗапрос.ТекстДляПечатиВКолонкеКоличество,
	|	ВложенныйЗапрос.Причина,
	|	ВложенныйЗапрос.КодПричины КАК КодПричиныКорректировки,
	|	ВложенныйЗапрос.НомерГруппы КАК НомерГруппыКорректировки,
	|	ВложенныйЗапрос.Содержание,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.КодУКТВЭД,
	|	ВложенныйЗапрос.КодУКТВЭД.Вид КАК КодВид,
	|	ВложенныйЗапрос.КодУКТВЭД.КодСХДеятельности КАК КодСХ,
	|	ВложенныйЗапрос.НомерГТД,
	|	ВложенныйЗапрос.ДатаГТД,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КодЛьготы КАК КодЛьготы,
	|	ВложенныйЗапрос.НомерСтрокиНН КАК НомерСтрокиНН,
	|	ВложенныйЗапрос.КоличествоУпаковок КАК Количество,
	|	ВложенныйЗапрос.Цена КАК ЦенаБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.ДатаКорректировки,
	|	СУММА(ВложенныйЗапрос.ИзменениеКоличества) КАК ИзменениеКоличества,
	|	СУММА(ВложенныйЗапрос.ИзменениеЦены) КАК ИзменениеЦеныБезНДС,
	|	СУММА(ВложенныйЗапрос.ИзменениеСуммы) КАК ИзменениеСуммыБезНДС,
	|	СУММА(ВложенныйЗапрос.ИзменениеСуммыНДС) КАК ИзменениеСуммыНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		Приложение2КНалоговойНакладнойТовары.Ссылка КАК Ссылка,
	|		Приложение2КНалоговойНакладнойТовары.НомерСтроки КАК НомерСтроки,
	|		Приложение2КНалоговойНакладнойТовары.Номенклатура.НаименованиеПолное КАК Номенклатура,
	|		Приложение2КНалоговойНакладнойТовары.Номенклатура.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной КАК ТекстДляПечатиВКолонкеЦена,
	|		Приложение2КНалоговойНакладнойТовары.Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной КАК ТекстДляПечатиВКолонкеКоличество,
	|		ВЫБОР
	|			КОГДА (Приложение2КНалоговойНакладнойТовары.КодПричины = 0)
	|				ТОГДА  Приложение2КНалоговойНакладнойТовары.Причина 
	|			ИНАЧЕ """"	
	|		КОНЕЦ КАК Причина,
	|		Приложение2КНалоговойНакладнойТовары.КодПричины КАК КодПричины,
	|		Приложение2КНалоговойНакладнойТовары.НомерГруппы КАК НомерГруппы,
	|		Приложение2КНалоговойНакладнойТовары.Содержание КАК Содержание,
	|		Приложение2КНалоговойНакладнойТовары.Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА Приложение2КНалоговойНакладнойТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА Приложение2КНалоговойНакладнойТовары.ЕдиницаИзмерения
	|			КОГДА Приложение2КНалоговойНакладнойТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Приложение2КНалоговойНакладнойТовары.Номенклатура.ЕдиницаИзмерения
	|			КОГДА Приложение2КНалоговойНакладнойТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				ТОГДА Приложение2КНалоговойНакладнойТовары.Упаковка.ЕдиницаИзмерения
	|			ИНАЧЕ Приложение2КНалоговойНакладнойТовары.Упаковка
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		Приложение2КНалоговойНакладнойТовары.Номенклатура.КодЛьготы КАК КодЛьготы,
	|		Приложение2КНалоговойНакладнойТовары.НомерСтрокиНН КАК НомерСтрокиНН,
	|		ВЫБОР
	|			КОГДА Приложение2КНалоговойНакладнойТовары.ЭтоКорректировкаКоличества
	|				ТОГДА 0
	|			ИНАЧЕ Приложение2КНалоговойНакладнойТовары.КоличествоУпаковок
	|		КОНЕЦ КАК КоличествоУпаковок,
	//|		ВЫБОР
	//|			КОГДА Приложение2КНалоговойНакладнойТовары.ЭтоКорректировкаКоличества
	//|				ТОГДА Приложение2КНалоговойНакладнойТовары.ЦенаРегл
	//|			ИНАЧЕ 0
	//|		КОНЕЦ КАК Цена,
	|		Приложение2КНалоговойНакладнойТовары.ЦенаРегл КАК Цена,
	|		Приложение2КНалоговойНакладнойТовары.СуммаБезНДСРегл КАК СуммаБезНДС,
	|		Приложение2КНалоговойНакладнойТовары.СуммаНДСРегл КАК СуммаНДС,
	|		Приложение2КНалоговойНакладнойТовары.СтавкаНДС КАК СтавкаНДС,
	|		Приложение2КНалоговойНакладнойТовары.НомерГТД.НомерГТД.Код КАК НомерГТД,
	|		Приложение2КНалоговойНакладнойТовары.НомерГТД.НомерГТД.Дата КАК ДатаГТД,
	|		Приложение2КНалоговойНакладнойТовары.КодНоменклатурыПоКлассификатору КАК КодУКТВЭД,
	|		Приложение2КНалоговойНакладнойТовары.ДатаКорректировки КАК ДатаКорректировки,
	|		ВЫБОР
	|			КОГДА Приложение2КНалоговойНакладнойТовары.ЭтоКорректировкаКоличества
	|				ТОГДА Приложение2КНалоговойНакладнойТовары.КоличествоУпаковок
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ИзменениеКоличества,
	|		ВЫБОР
	|			КОГДА Приложение2КНалоговойНакладнойТовары.ЭтоКорректировкаКоличества
	|				ТОГДА 0
	|			ИНАЧЕ Приложение2КНалоговойНакладнойТовары.ЦенаРегл
	|		КОНЕЦ КАК ИзменениеЦены,
	|		Приложение2КНалоговойНакладнойТовары.СуммаБезНДСРегл КАК ИзменениеСуммы,
	|		Приложение2КНалоговойНакладнойТовары.СуммаНДСРегл КАК ИзменениеСуммыНДС
	|	ИЗ
	|		Документ.Приложение2КНалоговойНакладной.Товары КАК Приложение2КНалоговойНакладнойТовары
	|	ГДЕ
	|		Приложение2КНалоговойНакладнойТовары.Ссылка В (&МассивДокументов)		
	|		И НЕ Приложение2КНалоговойНакладнойТовары.Ссылка.СтатусАвтокорректировки = ЗНАЧЕНИЕ(Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Ссылка,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.НомерСтроки,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Номенклатура.НаименованиеПолное,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Номенклатура.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной КАК ТекстДляПечатиВКолонкеЦена,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной КАК ТекстДляПечатиВКолонкеКоличество,
	|		ВЫБОР
	|			КОГДА (Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.КодПричины = 0)
	|				ТОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Причина 
	|			ИНАЧЕ """"	
	|		КОНЕЦ КАК Причина,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.КодПричины КАК КодПричины,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.НомерГруппы КАК НомерГруппы,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Содержание,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Характеристика.НаименованиеПолное,
	|		ВЫБОР
	|			КОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ЕдиницаИзмерения
	|			КОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Номенклатура.ЕдиницаИзмерения
	|			КОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				ТОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Упаковка.ЕдиницаИзмерения
	|			ИНАЧЕ Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Упаковка
	|		КОНЕЦ,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Номенклатура.КодЛьготы КАК КодЛьготы,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.НомерСтрокиНН КАК НомерСтрокиНН,
	|		ВЫБОР
	|			КОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества
	|				ТОГДА 0
	|			ИНАЧЕ Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.КоличествоУпаковок
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества
	|				ТОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ЦенаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.СуммаБезНДСРегл,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.СуммаНДСРегл,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.СтавкаНДС,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.НомерГТД.НомерГТД.Код КАК НомерГТД,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.НомерГТД.НомерГТД.Дата КАК ДатаГТД,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.КодНоменклатурыПоКлассификатору КАК КодУКТВЭД,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ДатаКорректировки,
	|		ВЫБОР
	|			КОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества
	|				ТОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.КоличествоУпаковок
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ИзменениеКоличества,
	//|		ВЫБОР
	//|			КОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества
	//|				ТОГДА Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ЦенаРегл
	//|			ИНАЧЕ 0                                                                    
	//|		КОНЕЦ,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.ЦенаРегл,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.СуммаБезНДСРегл КАК ИзменениеСуммы,
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.СуммаНДСРегл КАК ИзменениеСуммыНДС
	|	ИЗ
	|		Документ.Приложение2КНалоговойНакладной.ТоварыПоДаннымПользователя КАК Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя
	|	ГДЕ
	|		Приложение2КНалоговойНакладнойТоварыПоДаннымПользователя.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ТекстДляПечатиВКолонкеЦена,
	|	ВложенныйЗапрос.ТекстДляПечатиВКолонкеКоличество,
	|	ВложенныйЗапрос.Причина,
	|	ВложенныйЗапрос.КодПричины,
	|	ВложенныйЗапрос.НомерГруппы,
	|	ВложенныйЗапрос.Содержание,
	|	ВложенныйЗапрос.ДатаГТД,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код,
	|	ВложенныйЗапрос.КодЛьготы,
	|	ВложенныйЗапрос.НомерСтрокиНН,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.КодУКТВЭД,
	|	ВложенныйЗапрос.НомерГТД,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.КоличествоУпаковок,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.ДатаКорректировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ИзменениеЦеныБезНДС),
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(ИзменениеКоличества),
	|	СУММА(ИзменениеСуммыБезНДС),
	|	СУММА(ИзменениеСуммыНДС)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати  = "ПАРАМЕТРЫ_ПЕЧАТИ_Приложение2КНалоговойНакладной_" + ИмяМакета;
	
	КодЯзыкаПечать = "ru";
	ПервыйДокумент = Истина;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	ДанныеПечати			= МассивРезультатов[0].Выбрать();
	ДревоПоДокументам		= МассивРезультатов[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыБезНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Пока ДанныеПечати.Следующий() цикл
		
		Если НДСОбщегоНазначенияСервер.ПечатнаяФорма2023Мес7(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыП2    = "2023Мес7";
			НомерПоХронологииФормыП2  = 9; //это не ошибка, процедура печати не изменилась
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2023(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыП2    = "2023";
			НомерПоХронологииФормыП2  = 9; //это не ошибка, процедура печати не изменилась
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2022(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыП2    = "2022";
			НомерПоХронологииФормыП2  = 8; //это не ошибка, процедура печати не изменилась
        ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2021Мес3(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыП2    = "2021Мес3";
			НомерПоХронологииФормыП2  = 8;
        ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2021(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыП2    = "2021";
			НомерПоХронологииФормыП2  = 7;
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2018(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыП2    = "2018";
			НомерПоХронологииФормыП2  = 6;
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2017(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыП2    = "2017";
			НомерПоХронологииФормыП2  = 5;
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФормаПоПриказу1307(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыП2    = "2016";
			НомерПоХронологииФормыП2  = 4;
		Иначе	
			Если       ДанныеПечати.Дата >= '2015-01-01' Тогда
				СуффиксПечатнойФормыП2    = "2015";
				НомерПоХронологииФормыП2  = 3;
			ИначеЕсли  ДанныеПечати.Дата >= '2014-12-01' Тогда
				СуффиксПечатнойФормыП2    = "2014Мес12";
				НомерПоХронологииФормыП2  = 2;
			ИначеЕсли  ДанныеПечати.Дата >= '2014-03-01' Тогда
				СуффиксПечатнойФормыП2    = "2014";
				НомерПоХронологииФормыП2  = 1;
			Иначе
				СуффиксПечатнойФормыП2    = "";
				НомерПоХронологииФормыП2  = 0;
			КонецЕсли;
		КонецЕсли;	
		
		СтрокаПолученияМакета = "Документ.Приложение2КНалоговойНакладной.ПФ_MXL_UK_Приложение2КНалоговойНакладной"+СуффиксПечатнойФормыП2;
		
		Если ИмяМакета = "Приложение2КНалоговойНакладнойАльбом" ИЛИ НомерПоХронологииФормыП2 >= 5 Тогда
			СтрокаПолученияМакета = СтрокаПолученияМакета + "Альбом";
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		МакетПромежуточный = УправлениеПечатью.МакетПечатнойФормы(СтрокаПолученияМакета, КодЯзыкаПечать);
		
		Макет = Новый ТабличныйДокумент;
		Макет.ВставитьОбласть(МакетПромежуточный.Область(), , , Ложь);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		ПервыйДокумент = Ложь;
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ %1 отражает операцию не являющуюся объектом налогообложения. Печать такого документа не требуется.';uk='Документ %1 відображає операцію, що не є об''єктом оподаткування. Друк такого документа не потрібний.'"),
				ДанныеПечати.Ссылка
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			Продолжить	
		КонецЕсли;
		

        //	Налоговые документы со ставкой 14% до принятия новой формы не печатаются, но могут быть выгружены для обработки ПреобразованиеНоменклатурногоСоставаДокументаП2
        ВсегдаВыводитьНН14 = Ложь;
        Если  ТипЗнч(ПараметрыВывода) = Тип("Структура")
        	И ПараметрыВывода.Свойство("ВсегдаВыводитьНН14") Тогда
        
        	ВсегдаВыводитьНН14 = Истина;
        
        КонецЕсли;
        
		Если (НЕ ВсегдаВыводитьНН14) И НДСОбщегоНазначенияПовтИсп.ДатаНачалаДействияФормыНДС14() > ДанныеПечати.Дата Тогда
			Если НДСИсходящийСервер.ВДокументеЕстьСтавкаНДС14(ДанныеПечати.Ссылка, Истина) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;



		ВРегВалюте = ДанныеПечати.Валюта = ВалютаРегламентированногоУчета;
		
		// Найдем в выборке товары по текущему документу
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоТоварам = ДревоПоДокументам.Строки.НайтиСтроки(ПараметрыОтбора);

		НайденСледующий = ВыборкаПоТоварам.Количество() > 0;
		
		Если НайденСледующий Тогда
			
			СтрокиПоТоварам = ВыборкаПоТоварам[0].Строки;
			
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В документе %1 отсутствуют товары. Печать не требуется';uk='У документі %1 відсутні товари. Друк не потрібний'"),
				ДанныеПечати.Ссылка
			);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			Продолжить;
		КонецЕсли;
		
		Если НомерПоХронологииФормыП2 >= 4 Тогда
			Если НомерПоХронологииФормыП2 = 9 Тогда
            	СтруктураПоказателей = СформироватьПечатнуюФорму2023(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
            ИначеЕсли НомерПоХронологииФормыП2 = 8 Тогда
            	СтруктураПоказателей = СформироватьПечатнуюФорму2021Мес3(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			ИначеЕсли НомерПоХронологииФормыП2 = 7 Тогда
				СтруктураПоказателей = СформироватьПечатнуюФорму2021(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			ИначеЕсли НомерПоХронологииФормыП2 = 6 Тогда
				СтруктураПоказателей = СформироватьПечатнуюФорму2018(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			ИначеЕсли НомерПоХронологииФормыП2 = 5 Тогда
				СтруктураПоказателей = СформироватьПечатнуюФорму2017(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			Иначе
				СтруктураПоказателей = СформироватьПечатнуюФорму2016(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			КонецЕсли;
			Если СтруктураПоказателей <> Неопределено Тогда
				Возврат СтруктураПоказателей;
			Иначе
				Продолжить;
			КонецЕсли; 
		КонецЕсли;	
		
		Если НомерПоХронологииФормыП2 = 0 Тогда
			Если НЕ ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина
			   И ДанныеПечати.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Истина
			   И ДанныеПечати.ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь Тогда
				
				Сообщить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ %1 должен быть зарегистрирована в Едином реестре!"
						"Нельзя выдавать покупателю печатный документ до регистрации в Едином реестре!';uk='Документ %1 має бути зареєстрован у Єдиному реєстрі податкових накладних!"
						"Не можна видавати покупцю другований документ до реєстрації у Єдиному реєстрі!'")
						, ДанныеПечати.Ссылка
					)
					, СтатусСообщения.ОченьВажное
				);			
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтруктураПоказателей = Новый Структура();
			СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G1D");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
			
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G42");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G9");
			Если НомерПоХронологииФормыП2 >= 2 Тогда
				СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G111");
			КонецЕсли;
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G10");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11");
			
			Если     ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
				// такие операции не предусматривают выписки налоговых накладных
				Возврат	СтруктураПоказателей;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НомерПоХронологииФормыП2 = 0 Тогда
			СимволДляПустыхПоказателей = "X";
			ПечататьКодУКТВЭДБезПробелов = Ложь;
			ПечататьДатыБезРазделителей = Ложь;
			ДополнитьНазваниеНомеромГТД = Ложь;
		КонецЕсли;
		ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной = Ложь;
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
		НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
		Если НастройкиПечати.Количество() > 0 тогда
			Если НомерПоХронологииФормыП2 = 0 Тогда
				СимволДляПустыхПоказателей = НастройкиПечати[0].СимволПустыхПоказателейВНалоговойНакладной; 
				ПечататьКодУКТВЭДБезПробелов = НастройкиПечати[0].ПечататьКодУКТВЭДБезПробелов; 
				ПечататьДатыБезРазделителей    	 = НЕ НастройкиПечати[0].ПечататьДатыВНалоговыхНакладныхСРазделителями; 
				ДополнитьНазваниеНомеромГТД    	 = НЕ НастройкиПечати[0].НеДополнятьНаименованиеНомеромГТДВНалоговыхДокументах; 
			КонецЕсли;
			ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной = НастройкиПечати[0].ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной; 
			ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
		КонецЕсли;
		
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
		Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Неопределено Тогда
			// в реквизите "Контрагент" ссылка на справочник "Организации"
			ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Ложь;
			НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Контрагент));
			Если НастройкиПечати.Количество() > 0 Тогда
				ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
			КонецЕсли;
		КонецЕсли;
		
		ДополнениеКНаименованиюОрганизации = "";
		ДополнениеКАдресуОрганизации = "";
		Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
		   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
		   
		   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
			
			ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + " - " ;
			ДополнениеКАдресуОрганизации       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ЮридическийАдрес,"  , Ложь) + " - " ;
		
		КонецЕсли;
		
		ДополнениеКНаименованиюКонтрагента = "";
		ДополнениеКАдресуКонтрагента = "";
		Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН
		   И ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) Тогда
			
		   	СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
			
			ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + " - " ;
			ДополнениеКАдресуКонтрагента       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ЮридическийАдрес,"  , Ложь) + " - " ;
		КонецЕсли;

		Если НомерПоХронологииФормыП2 >= 1 Тогда
			// кто выписал налоговую накладную нужно формировать в виде "И.О. Фамилия"
			//ПечКтоВыписалНалоговуюНакладную = "";
			//ФИОКтоВыписалНалоговуюНакладную = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ДанныеПечати.КтоВыписалНалоговуюНакладнуюСправочник));
			//Если ФИОКтоВыписалНалоговуюНакладную.Количество() > 0 Тогда
			//	ПечКтоВыписалНалоговуюНакладную =  ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Имя), 1))
			//									 + ". "
			//									 + ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Отчество), 1))
			//									 + ". "
			//									 + СокрЛП(ФИОКтоВыписалНалоговуюНакладную[0].Фамилия); 
			//Иначе
			//	ПечКтоВыписалНалоговуюНакладную = "" + Шапка.КтоВыписалНалоговуюНакладную;									 
			//КонецЕсли;
			ПечКтоВыписалНалоговуюНакладную = ДанныеПечати.КтоВыписалНалоговуюНакладную;
		КонецЕсли;

		Для Страница = 1 По 2 Цикл
			
			Если НомерПоХронологииФормыП2 >= 3 Тогда
				Если Страница = 2 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если НомерПоХронологииФормыП2 >= 3 Тогда
				
				// Выводим область оригинал/копия
				ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
				
				// П2 с отрицательной суммой, которые выдаются покупателю и которые выписанны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
				Если ДанныеПечати.РегистрируетсяВЕРННПокупателем = Истина Тогда
				    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
				КонецЕсли;
				
				ОбластьМакетаЗаголовок.Параметры.СоглашениеОРазделеПродукции = ?(ДанныеПечати.СоглашениеОРазделеПродукции = Истина, "Х", "");
				
				// оргинал
				Если  НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
					
					// накладная остается у поставщика
					ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
					ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
					ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
					
					// такие П2, даже с отрицательной суммой регистрирует продавец
					ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
			
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			ИначеЕсли НомерПоХронологииФормыП2 >= 1 Тогда
				
				Если  Страница = 2 Тогда
					Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
						ИЛИ ДанныеПечати.ЭлектронныйДокумент Тогда
						// печатаем в одном экземпляре
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
				ОбластьМакетаЗаголовок.Параметры.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = ДанныеПечати.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
				ОбластьМакетаЗаголовок.Параметры.ЭлектронныйДокумент                             = ДанныеПечати.ЭлектронныйДокумент;
				
				Если ДанныеПечати.ЭлектронныйДокумент = Ложь Тогда
					Если Страница = 2 Тогда
					    // копия - всегда остается у продавца
						ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца = "Х";
						
					Иначе
			
						// оргинал
						Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
							
							// НН, для которой тип причины невыдачи - продажа ниже обычных цен выдается покупателю, вторая пара накладных (собстенно на превышение) - нет
                            ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
						Иначе
							
							// накладная остается у поставщика
							ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
							ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
							ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
					
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
				
			Иначе
				
				Если Страница = 2
				   И ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
					// печатаем в одном экземпляре
					Продолжить;
				КонецЕсли;
				
				// Выводим область оригинал/копия
				Если Страница = 1 Тогда
					ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
					
					ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = ДанныеПечати.ВключенаВЕдиныйРеестрНалоговыхНакладных;
					
					Если ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  Тогда
						
						ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
						
					ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1  Тогда	
						
						// это ошибка, может быть из-за того, что по изначальной накладной стоял такой тип причины
						ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
						
					Иначе
						
						// накладная остается у поставщика
						ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца = "Х";
						ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
						ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
						
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
				ИначеЕсли Страница = 2 Тогда
					ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("ПерваяКопия");
					ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = ДанныеПечати.ВключенаВЕдиныйРеестрНалоговыхНакладных;
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			// Выводим заголовок накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			
			//Дата налоговой
			ТекДатаНалоговой = Формат(ДанныеПечати.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
			КонецЦикла; 
			
			// Номер налоговой
			ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.НомерНалоговойНакладной, Истина, Истина)), 7);
			Для Инд = 1 По 7 Цикл                                                                 
				ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
			КонецЦикла; 
			
			// филиал/спецрежим налоговой
			ТекНомерФилиал = "";
			КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
			Если НомерПоХронологииФормыП2 >= 1 Тогда
				НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
			Иначе
				НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("0000" + СокрЛП(ДанныеПечати.Префикс), 4), "");  //число, сведущими нулями, 4 символа 
			КонецЕсли;
			Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
				ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
			КонецЕсли;
			
			ТекНомерФилиалНалоговой  = ТекНомерФилиал;
			ТекНомерФилиалПриложения = ТекНомерФилиал;
			Если НомерПоХронологииФормыП2 >= 2 Тогда
				// если исходная налоговая накладная была с условным спец. режимом "7"
				// то в номере самого приложения 2 этот спец. режим не должен отображаться
				Если    Лев(ТекНомерФилиалПриложения, 1) = "7" Тогда
					ТекНомерФилиалПриложения = " " + Сред(ТекНомерФилиалПриложения,2);
				КонецЕсли;
			КонецЕсли;
			Если НомерПоХронологииФормыП2 >= 3 Тогда
				// или со спец. режимом 4, который в 2015 году не действует
				Если    Лев(ТекНомерФилиалПриложения, 1) = "4" Тогда
					ТекНомерФилиалПриложения = " " + Сред(ТекНомерФилиалПриложения,2);
				КонецЕсли;
			КонецЕсли;
			
			Для Инд = 1 По 5 Цикл                                                                 
				ОбластьМакета.Параметры["НомерФилиал_"+Инд]    			= Сред(ТекНомерФилиалПриложения, Инд, 1);
				ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
			КонецЦикла;		
			
			//Дата
			ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
			КонецЦикла; 
			
			// Номер
			ТекНомер = Прав("        " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 8);
			Для Инд = 1 По 8 Цикл                                                                 
				ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
			КонецЦикла; 
			
			Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
				// налоговые реквизиты не указыватюся
				СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
				Если НомерПоХронологииФормыП2 >= 3 Тогда
					ИННОрганизации					= ?(ДанныеПечати.УслугиНерезидентаДляНехозДеят = Истина, "200000000000", "500000000000");
				Иначе
					ИННОрганизации					= ?(ДанныеПечати.УслугиНерезидентаДляНехозДеят = Истина, "200000000000", "300000000000");
				КонецЕсли;
				Если НомерПоХронологииФормыП2 = 0 Тогда
					НомерСвидетельстваОрганизации	= "0";
				КонецЕсли;
				ОбластьМакета.Параметры.НазваниеОрганизации	= ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
				
				Если НомерПоХронологииФормыП2 >= 2 Тогда
					
					// вместо адреса - просто страна нерезидента
					АдресОрганизации = "";
					
					Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
						   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
					
						Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
							Окончание = "Организации";
						ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
							Окончание = "Контрагента";
						ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
							Окончание = "Партнера";
						КонецЕсли;
						
						ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

						ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
						
						НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							АдресОрганизации = СокрЛП(НайденныеСтроки[0].Страна);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(АдресОрганизации) Тогда
						Сообщить(НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Адрес в налоговой накладной заполнен не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Адреса в податковій накладній заповнена не буде!'"));
					КонецЕсли;
					
					// остальные данные (телефон) не заполняется
					ТекТелефоныОрганизации = "";
					
					ОбластьМакета.Параметры.АдресОрганизации    = АдресОрганизации;
					
				Иначе
				
					ОбластьМакета.Параметры.АдресОрганизации    = ДополнениеКАдресуКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ЮридическийАдрес,", Ложь);
					ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
					
				КонецЕсли;
				
			Иначе	
				СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
				ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
				Если НомерПоХронологииФормыП2 = 0 Тогда
					НомерСвидетельстваОрганизации 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "НомерСвидетельства,",Ложь);
				КонецЕсли;
				ОбластьМакета.Параметры.НазваниеОрганизации	= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
				Если НомерПоХронологииФормыП2 >= 1 Тогда
					Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиалаНовый) Тогда
						ОбластьМакета.Параметры.НазваниеОрганизации = ОбластьМакета.Параметры.НазваниеОрганизации + ДанныеПечати.НаименованиеФилиалаНовый;	
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
						ОбластьМакета.Параметры.НазваниеОрганизации = ОбластьМакета.Параметры.НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;	
					КонецЕсли;
				КонецЕсли;
				ОбластьМакета.Параметры.АдресОрганизации = ДополнениеКАдресуОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ЮридическийАдрес,", Ложь);
				ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
			КонецЕсли;
			
			// телефон
			ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныОрганизации);
			Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
				ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] =  Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
			КонецЦикла;
			
			ИННОрганизации = Прав("            " + ИННОрганизации, 12);
			Для Инд = 1 По 12 Цикл
				ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
			КонецЦикла; 
			
			Если НомерПоХронологииФормыП2 = 0 Тогда
				ОбластьМакета.Параметры["НомерСвидетельстваОрганизации"] = НомерСвидетельстваОрганизации;
			КонецЕсли;
			
			Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
				// в этом случае контрагентом выступает организация
				СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
				ОбластьМакета.Параметры.НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
				ОбластьМакета.Параметры.АдресКонтрагента    = ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,",   Ложь);
				ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
			Иначе
				СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
				НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
				АдресКонтрагента    = ДополнениеКАдресуКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ЮридическийАдрес,",  Ложь);
				ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
				Если НомерПоХронологииФормыП2 >= 2 Тогда
					
					Если ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
						
						// вместо адреса - просто страна нерезидента
						АдресКонтрагента = "";
						
						Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
						   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
							
							Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
								Окончание = "Организации";
							ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
								Окончание = "Контрагента";
							ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
								Окончание = "Партнера";
							КонецЕсли;
							
							ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

							ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
							
							НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								АдресКонтрагента = СокрЛП(НайденныеСтроки[0].Страна);
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(АдресКонтрагента) Тогда
							Сообщить(НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Адрес в налоговой накладной заполнен не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Адреса в податковій накладній заповнена не буде!'"));
						КонецЕсли;
						
						// остальные данные (телефон) не заполняется
						ТекТелефоныКонтрагента = "";
						
					ИначеЕсли (НЕ (ДанныеПечати.ПоставкаДипПредставительству = Истина И ДанныеПечати.ТипПричиныНевыдачиПокупателю <=2))
					   И (НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент)) Тогда
						
						НазваниеКонтрагента = "Неплатник";
						АдресКонтрагента = "";
						ТекТелефоныКонтрагента = "";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
				ОбластьМакета.Параметры.АдресКонтрагента    = АдресКонтрагента;
			КонецЕсли; 
			
			// телефон
			ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
			ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныКонтрагента);
			Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
				ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
			КонецЦикла;
			
			ИННКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		    Если НомерПоХронологииФормыП2 >= 2 Тогда
				
				Если НЕ (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента) Тогда
					
					Если (ДанныеПечати.ПоставкаДипПредставительству = Истина И ДанныеПечати.ТипПричиныНевыдачиПокупателю <=2) Тогда
						ИННКонтрагента = "400000000000";
					ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
						// поставка на экспорт
						ИННКонтрагента = "300000000000";
					ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент) Тогда
						Если НомерПоХронологииФормыП2 >= 3 Тогда
							ИННКонтрагента = "100000000000";
						Иначе
							ИННКонтрагента = "400000000000";
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли НомерПоХронологииФормыП2 >= 1 Тогда
				
				Если НЕ (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента) Тогда
					
					Если НЕ ЗначениеЗаполнено(ИННКонтрагента) ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
						ИННКонтрагента = "400000000000";
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если НЕ (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента) Тогда
					
					Если НЕ ЗначениеЗаполнено(ИННКонтрагента) ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
						ИННКонтрагента = "0";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);		
			Для Инд = 1 По 12 Цикл
				ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
			КонецЦикла; 
			
			Если НомерПоХронологииФормыП2 = 0 Тогда
				НомерСвидетельстваКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
				Если НЕ ЗначениеЗаполнено(НомерСвидетельстваКонтрагента)
					ИЛИ Найти("0123456789",Лев(СокрЛ(НомерСвидетельстваКонтрагента),1)) = 0 Тогда
					НомерСвидетельстваКонтрагента = "0";
				КонецЕсли; 
				Если  ДанныеПечати.Дата >= '2014-01-01'
					И СокрЛП(НомерСвидетельстваКонтрагента) = "0"
					И НЕ СокрЛП(ИННКонтрагента) = "0" Тогда
					НомерСвидетельстваКонтрагента = "";	
				КонецЕсли;
				
				ОбластьМакета.Параметры["НомерСвидетельстваКонтрагента"] = НомерСвидетельстваКонтрагента;
			КонецЕсли;
			
			ТекНомерДоговора = СокрЛП("" + ДанныеПечати.НомерДоговора);
			ОбластьМакета.Параметры.НомерДоговора = ТекНомерДоговора;
			
			ТекДатаДоговора = ДанныеПечати.ДатаДоговора;
			Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
				ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
				Для Инд = 1 По 8 Цикл
					ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
				КонецЦикла; 
			КонецЕсли;
			
			Если НомерПоХронологииФормыП2 < 2 Тогда
				//Дата оплаты
				ТекДатаОплаты = Формат(ДанныеПечати.ДатаОплаты, "ДФ=ddMMyyyy");
				Для Инд = 1 По 8 Цикл
					ОбластьМакета.Параметры["ДатаОплаты_"+Инд]    = Сред(ТекДатаОплаты, Инд, 1);
				КонецЦикла; 
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ПечататьТитульныйЛистДляПриложения2КНалоговойНакладной Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
			КонецЕсли;
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
				
				Если НомерПоХронологииФормыП2 >= 3 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H_1", ОбластьМакетаЗаголовок.Параметры.СоглашениеОРазделеПродукции);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H_2", ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG",	ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю);
				КонецЕсли;
				
				Если НомерПоХронологииФормыП2 >= 3 Тогда

				ИначеЕсли НомерПоХронологииФормыП2 >= 1 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HEL",		Формат(ОбластьМакетаЗаголовок.Параметры.ЭлектронныйДокумент, "БЛ=; БИ=Х"));
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	""+ОбластьМакетаЗаголовок.Параметры.ТипПричины1+ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HCOPY",	"");
				КонецЕсли;
				
				Если НомерПоХронологииФормыП2 = 2 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HCOPY",	ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца);					
				КонецЕсли;
				
				Если НомерПоХронологииФормыП2 >= 2 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
				КонецЕсли;
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	Лев(ТекНомерФилиалПриложения, 1));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	Сред(ТекНомерФилиалПриложения, 2));
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	ДанныеПечати.ДатаНалоговойНакладной);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G1D",	ДанныеПечати.ДатаДоговора);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G2S",	ТекНомерДоговора);
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	ОбластьМакета.Параметры.НазваниеОрганизации);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	ОбластьМакета.Параметры.НазваниеКонтрагента);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
				Если НомерПоХронологииФормыП2 = 0 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVSEL",НомерСвидетельстваОрганизации);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVBUY",НомерСвидетельстваКонтрагента);
				КонецЕсли;
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCSEL",	ОбластьМакета.Параметры.АдресОрганизации);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCBUY",	ОбластьМакета.Параметры.АдресКонтрагента);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELSEL",	ТекТелефоныОрганизации);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELBUY",	ТекТелефоныКонтрагента);
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G1S",	ОбластьМакета.Параметры.ВидДоговора);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G2D",	ДанныеПечати.ДатаДоговора);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G3S",	ТекНомерДоговора);
				
				Если НомерПоХронологииФормыП2 < 2 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H03G1S",	ОбластьМакета.Параметры.ФормаРасчетов);
					//СтруктураПоказателей.НалоговыйДокумент.Вставить("H04G1D",	ДанныеПечати.ДатаНалоговойНакладной);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H04G1D",	ДанныеПечати.ДатаОплаты);
				КонецЕсли;

				Если НомерПоХронологииФормыП2 >= 3 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G1D",	ДанныеПечати.Дата);
				КонецЕсли;
				
				Если НомерПоХронологииФормыП2 >= 1 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G2S",	ПечКтоВыписалНалоговуюНакладную);
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G2S",	ДанныеПечати.КтоВыписалНалоговуюНакладную);
				КонецЕсли;
				
			КонецЕсли;
			
			// Выводим шапку накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим табличную часть
			Если НомерПоХронологииФормыП2 = 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				Если ПечататьДатыБезРазделителей Тогда
					ОбластьМакета.Области.ДатаОтгрузкиОплаты.Формат = "ДФ=ddMMyyyy";	
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаСуммаПоСтавкам.Очистить();
			
			Для каждого СтрокаТовары Из СтрокиПоТоварам Цикл
				
				Если НомерПоХронологииФормыП2 >= 1 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				КонецЕсли;
				
				// Теперь заполним
				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры,"ЕдиницаИзмеренияКод") Тогда
					ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
				КонецЕсли; 
				
				Если НомерПоХронологииФормыП2 = 0 Тогда
					Если ПечататьКодУКТВЭДБезПробелов Тогда
						ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
					КонецЕсли;
				КонецЕсли;
				
				Отбор = Новый Структура("СтавкаНДС", СтрокаТовары.СтавкаНДС);
				НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Строка = НайденныеСтроки[0];
				Иначе
					Строка = ТаблицаСуммаПоСтавкам.Добавить();
					Строка.СтавкаНДС = СтрокаТовары.СтавкаНДС;
				КонецЕсли;
				
				Строка.ИзменениеСуммыНДС	= Строка.ИзменениеСуммыНДС + СтрокаТовары.ИзменениеСуммыНДС;  
				Строка.ИзменениеСуммыБезНДС	= Строка.ИзменениеСуммыБезНДС + СтрокаТовары.ИзменениеСуммыБезНДС;  
				
				Если НомерПоХронологииФормыП2 = 0 Тогда
					Если ЗначениеЗаполнено(СтрокаТовары.ТекстДляПечатиВКолонкеКоличество) Тогда
						ОбластьМакета.Параметры.Количество = СтрокаТовары.ТекстДляПечатиВКолонкеКоличество;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТовары.ТекстДляПечатиВКолонкеЦена) Тогда
						ОбластьМакета.Параметры.ЦенаБезНДС = СтрокаТовары.ТекстДляПечатиВКолонкеЦена;
					КонецЕсли;
				КонецЕсли;
				
				Если НомерПоХронологииФормыП2 >= 1 Тогда
					Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
						ОбластьМакета.Параметры.ИзменениеКоличества  = "";
						ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
					КонецЕсли;
					Если СтрокаТовары.ИзменениеЦеныБезНДС = 0 Тогда
						ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
						ОбластьМакета.Параметры.Количество  		 = "";
					КонецЕсли;
					
					ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
				КонецЕсли;
				
				// дата отгрузки/оплаты
				Если НЕ ЗначениеЗаполнено(СтрокаТовары.ДатаКорректировки) Тогда
					
					// укажем дату выписки накладной
					ОбластьМакета.Параметры.ДатаКорректировки = ДанныеПечати.Дата;
					
				КонецЕсли;
				
				// номенклатура 
				Если НомерПоХронологииФормыП2 >= 1 Тогда
					ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Номенклатура))
					+ ?(НЕ ЗначениеЗаполнено(СтрокаТовары.Характеристика), "", "(" + СтрокаТовары.Характеристика +")");
				Иначе
					ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Номенклатура))
					+ ?(НЕ ЗначениеЗаполнено(СтрокаТовары.Характеристика), "", "(" + СтрокаТовары.Характеристика +")")
					+ ?(ДополнитьНазваниеНомеромГТД И ЗначениеЗаполнено(СтрокаТовары.НомерГТД), ". ВМД №: " + СтрокаТовары.НомерГТД + ", дата ВМД: " + Формат(СтрокаТовары.ДатаГТД, ?(ПечататьДатыБезРазделителей,"ДФ=ddMMyyyy","ДФ=dd.MM.yyyy")), "");
					;
					
					// "обнулим" значения неиспользуемого типа корректировки 
					// колонки 5...8
					Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
						ОбластьМакета.Параметры.ИзменениеКоличества  = СимволДляПустыхПоказателей;
						ОбластьМакета.Параметры.ЦенаБезНДС  		 = СимволДляПустыхПоказателей;
					КонецЕсли;
					Если СтрокаТовары.ИзменениеЦеныБезНДС = 0 Тогда
						ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = СимволДляПустыхПоказателей;
						ОбластьМакета.Параметры.Количество  		 = СимволДляПустыхПоказателей;
					КонецЕсли;
					
					// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма изменения базы НДС
					// колонки 9...11
					ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 		= СимволДляПустыхПоказателей;
					ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0 		= СимволДляПустыхПоказателей;
					ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС	= СимволДляПустыхПоказателей;
				КонецЕсли;
				
				Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТовары.СтавкаНДС, ДанныеПечати.Дата);
				ОбластьМакета.Параметры[Колонка] = Формат(СтрокаТовары.ИзменениеСуммыБезНДС, "ЧЦ=15; ЧДЦ=2; ЧН=");
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
					
					СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
					СтрокаСтруктуры.G1D = ОбластьМакета.Параметры.ДатаКорректировки;
					СтрокаСтруктуры.G2S = ОбластьМакета.Параметры.Причина;
					СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
					
					СтрокаСтруктуры.G4 = ОбластьМакета.Параметры.КодУКТВЭД;
					
					СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
					
					Если НомерПоХронологииФормыП2 >=3 Тогда
						СтрокаСтруктуры.G42 = ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
					КонецЕсли;
					
					СтрокаСтруктуры.G5  = СтрокаТовары.ИзменениеКоличества;
					СтрокаСтруктуры.G6  = СтрокаТовары.ЦенаБезНДС;
					Если СтрокаСтруктуры.G5 = 0 Тогда
						СтрокаСтруктуры.G6  = 0;	
					КонецЕсли;
					
					СтрокаСтруктуры.G7  = СтрокаТовары.ИзменениеЦеныБезНДС;
					СтрокаСтруктуры.G8  = СтрокаТовары.Количество;
					Если СтрокаСтруктуры.G7 = 0 Тогда
						СтрокаСтруктуры.G8  = 0;	
					КонецЕсли;
					
					КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТовары.СтавкаНДС, ДанныеПечати.Дата);
					Если НомерПоХронологииФормыП2 >= 2 Тогда
						
						Если КолонкаДляСуммы = "20" Тогда
							СтрокаСтруктуры.G9  = СтрокаТовары.ИзменениеСуммыБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "0" Тогда
							СтрокаСтруктуры.G10  = СтрокаТовары.ИзменениеСуммыБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "7" Тогда
							СтрокаСтруктуры.G111  = СтрокаТовары.ИзменениеСуммыБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
							СтрокаСтруктуры.G11 = СтрокаТовары.ИзменениеСуммыБезНДС;	
						КонецЕсли;
						
					Иначе
						Если КолонкаДляСуммы = "20" Тогда
							СтрокаСтруктуры.G9  = СтрокаТовары.ИзменениеСуммыБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "0" Тогда
							СтрокаСтруктуры.G10  = СтрокаТовары.ИзменениеСуммыБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
							СтрокаСтруктуры.G11 = СтрокаТовары.ИзменениеСуммыБезНДС;	
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// итоговые строки
			ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
			
			Если НомерПоХронологииФормыП2 = 0 Тогда
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 		= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0 		= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС	= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.ИзменениеСуммыНДС			= СимволДляПустыхПоказателей;
			КонецЕсли;
			
			ТаблицаИтогов = ТаблицаСуммаПоСтавкам.Скопировать();
			ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС,ИзменениеСуммыНДС");
			Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
				
				Колонка = "ИзменениеСуммыБезНДС"+ ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата);
				ОбластьМакета.Параметры[Колонка] = Формат(СтрокаТаблицы.ИзменениеСуммыБезНДС, "ЧЦ=15; ЧДЦ=2; ЧН=");
				
			КонецЦикла;
			
			Если НомерПоХронологииФормыП2 >= 2 Тогда
				
				ТаблицаИтогов.Свернуть("СтавкаНДС", "ИзменениеСуммыНДС");
				Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
					КолонкаДляСуммы = ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата);
					Если КолонкаДляСуммы = "20" Тогда
						ОбластьМакета.Параметры["ИзменениеСуммыНДС" + КолонкаДляСуммы] = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
						Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
							СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9",	СтрокаТаблицы.ИзменениеСуммыНДС);
						КонецЕсли;
					ИначеЕсли КолонкаДляСуммы = "7" Тогда
						ОбластьМакета.Параметры["ИзменениеСуммыНДС" + КолонкаДляСуммы] = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
						Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
							СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111",	СтрокаТаблицы.ИзменениеСуммыНДС);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				ТаблицаИтогов.Свернуть("", "ИзменениеСуммыНДС");
				Для каждого СтрокаТаблицы Из ТаблицаИтогов Цикл
					ОбластьМакета.Параметры.ИзменениеСуммыНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
					ОбластьМакета.Параметры.ИзменениеСуммыНДС = Формат(СтрокаТаблицы.ИзменениеСуммыНДС, "ЧЦ=15; ЧДЦ=2; ЧН=");
					Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9",	СтрокаТаблицы.ИзменениеСуммыНДС);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подвал накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			
			Если НомерПоХронологииФормыП2 = 0 Тогда
				ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;
			КонецЕсли;
			
			Если НомерПоХронологииФормыП2 < 3 Тогда
				ОбластьМакета.Параметры.Дата  					= Формат(ДанныеПечати.Дата, "ДФ=dd.MM.yyyy" );
				ОбластьМакета.Параметры.ДатаНалоговойНакладной  = Формат(ДанныеПечати.ДатаНалоговойНакладной, "ДФ=dd.MM.yyyy" );
			КонецЕсли;
			
			Если НомерПоХронологииФормыП2 >= 3 Тогда

			ИначеЕсли НомерПоХронологииФормыП2 >= 2 Тогда
				
				ТекНомерФилиалПодвалПриложение = "";
				ТекНомерФилиалПодвалНалоговая = "";
				Если ЗначениеЗаполнено(НомерФилиала) Тогда
					ТекНомерФилиалПодвалПриложение = "/" + СокрЛ(НомерФилиала);
					ТекНомерФилиалПодвалНалоговая  = "/" + СокрЛ(НомерФилиала);
				КонецЕсли;
				
				КодСпецРежимаНалоговая  = КодСпецРежима;
				КодСпецРежимаПриложение = ?(КодСпецРежима = "7", " ", КодСпецРежима);
				
				Если ЗначениеЗаполнено(КодСпецРежимаПриложение + ТекНомерФилиалПодвалПриложение) Тогда
					ТекНомерФилиалПодвалПриложение = "/" + КодСпецРежимаПриложение + ТекНомерФилиалПодвалПриложение;
				КонецЕсли;
				Если ЗначениеЗаполнено(КодСпецРежимаНалоговая + ТекНомерФилиалПодвалНалоговая) Тогда
					ТекНомерФилиалПодвалНалоговая = "/" + КодСпецРежимаНалоговая + ТекНомерФилиалПодвалНалоговая;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Номер  					 = СокрЛП(ТекНомер 		    + ТекНомерФилиалПодвалПриложение);
				ОбластьМакета.Параметры.НомерНалоговойНакладной  = СокрЛП(ТекНомерНалоговой + ТекНомерФилиалПодвалНалоговая);
				
			ИначеЕсли НомерПоХронологииФормыП2 >= 1 Тогда
				ОбластьМакета.Параметры.Номер  					 = СокрЛП(ТекНомер 		    + ?(ЗначениеЗаполнено(КодСпецРежима + НомерФилиала), "/" + КодСпецРежима + ?(ЗначениеЗаполнено(НомерФилиала), "/" + СокрЛП(НомерФилиала), ""), ""));
				ОбластьМакета.Параметры.НомерНалоговойНакладной  = СокрЛП(ТекНомерНалоговой + ?(ЗначениеЗаполнено(КодСпецРежима + НомерФилиала), "/" + КодСпецРежима + ?(ЗначениеЗаполнено(НомерФилиала), "/" + СокрЛП(НомерФилиала), ""), ""));
			Иначе
				ОбластьМакета.Параметры.Номер  					 = СокрЛП(ТекНомер 		    + ?(ЗначениеЗаполнено(ТекНомерФилиал), "/" + ТекНомерФилиал, ""));
				ОбластьМакета.Параметры.НомерНалоговойНакладной  = СокрЛП(ТекНомерНалоговой + ?(ЗначениеЗаполнено(ТекНомерФилиал), "/" + ТекНомерФилиал, ""));
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если НомерПоХронологииФормыП2 < 3 Тогда
				Если Страница <> 2 Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли;
		
КонецФункции // ПечатьДокумента()

Функция СформироватьПечатнуюФорму2016(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G001");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// получим "печатную форму" исходной НН для определения номера корректируемой строки
	СтруктураПоискаНомераСтрокиННПолная      = Новый Структура("Номенклатура,ЦенаБезНДС,ЕдиницаИзмеренияКод");
	СтруктураПоискаНомераСтрокиННСокращенная = Новый Структура("Номенклатура,ЦенаБезНДС");
	Попытка
		
		КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("НалоговаяНакладная");
		Документы.НалоговаяНакладная.Печать(ДанныеПечати.НалоговаяНакладная, Новый Структура("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы"), КоллекцияПечатныхФорм, Неопределено, Неопределено);
		ПечатнаяФормаНН 	= КоллекцияПечатныхФорм[0].ТабличныйДокумент.НалоговыйДокумент.R;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G3S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("Номенклатура");
		Иначе	
			ПечатнаяФормаНН.Колонки.G3S.Имя = "Номенклатура";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G105_2S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
		Иначе	
			ПечатнаяФормаНН.Колонки.G105_2S.Имя = "ЕдиницаИзмеренияКод";
		КонецЕсли;
			
		Если ПечатнаяФормаНН.Колонки.Найти("G6") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
		Иначе	
			ПечатнаяФормаНН.Колонки.G6.Имя = "ЦенаБезНДС";
		КонецЕсли;
		
	Исключение 
		ПечатнаяФормаНН = Новый ТаблицаЗначений;
		ПечатнаяФормаНН.Колонки.Добавить("Номенклатура");
		ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
		ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
	КонецПопытки;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	// П2 с отрицательной суммой, которые выдаются покупателю и которые выписаны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
	Если ДанныеПечати.РегистрируетсяВЕРННПокупателем = Истина Тогда
	    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
	Иначе
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом = "Х";
	КонецЕсли;
		
	Если (    ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
		  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа) Тогда
		  
		  ОбластьМакетаЗаголовок.Параметры.Сводная = ?(ДанныеПечати.Сводная = Истина, "X", "");	
		  
	КонецЕсли;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
		
		// такие П2, даже с отрицательной суммой регистрирует продавец
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом   = "Х";
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	//Дата налоговой
	ТекДатаНалоговой = Формат(ДанныеПечати.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.НомерНалоговойНакладной, Истина, Истина)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаНалоговойНакладной) И ДанныеПечати.ДатаНалоговойНакладной < НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307() Тогда	
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
	Иначе	
	    ТекНомерФилиал = КодСпецРежима;
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			ТекНомерФилиал = "5";
		КонецЕсли;
	КонецЕсли;
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Неопределено Тогда
		// в реквизите "Контрагент" ссылка на справочник "Организации"
		// головной организацией в форме 2016 дополняем всегда
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина;
	КонецЕсли;
	
	ДополнениеКНаименованиюКонтрагента = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН И ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) Тогда
	   	СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
		ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Страна = СокрЛП(НайденныеСтроки[0].Страна);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
	 Тогда	  
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Страна = СокрЛП(НайденныеСтроки[0].Страна);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	
	// кто выписал налоговую накладную - формируем в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(ДанныеПечати.КтоВыписалНалоговуюНакладную,,,,Истина);
	
	// Выводим параметры 
	
	// Дата налоговой
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
	КонецЦикла; 
	
	// Номер налоговой
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
	КонецЦикла; 
	
	// филиал/спецрежим налоговой
	Для Инд = 1 По 5 Цикл                                                                 
		ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
	КонецЦикла;		
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыБезНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл
		
		Отбор = Новый Структура("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = СтрокаТовары.СтавкаНДС;
		КонецЕсли;
		
		Строка.ИзменениеСуммыНДС	= Строка.ИзменениеСуммыНДС + СтрокаТовары.ИзменениеСуммыНДС;  
		Строка.ИзменениеСуммыБезНДС	= Строка.ИзменениеСуммыБезНДС + СтрокаТовары.ИзменениеСуммыБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(СтрокаТовары.КодЛьготы) ИЛИ СтрокаТовары.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС, ИзменениеСуммыНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС20    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС7    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G111", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R007G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R006G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G11", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "ИзменениеСуммыНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ИтогНДС    = СтрокаТаблицы.ИзменениеСуммыНДС;
	КонецЦикла;
	
	ОбластьМакета.Параметры.ИзменениеСуммыНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС, ,"0,00");
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R001G03", ИтогНДС);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN0",   ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H03",      ОбластьМакетаЗаголовок.Параметры.Сводная);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",  ОбластьМакетаЗаголовок.Параметры.Освобожденная);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	ДанныеПечати.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
 		
	КонецЕсли;
	
	// строки 
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл	
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеКоличества  = "";
			ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
		Иначе
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
		КонецЕсли;
		Если СтрокаТовары.ИзменениеЦеныБезНДС = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
			ОбластьМакета.Параметры.Количество  		 = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(СтрокаТовары.Характеристика), "", "(" + СтрокаТовары.Характеристика +")")
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТовары.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТовары.ИзменениеСуммыБезНДС, ,"0,00");
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		// определим номер строки исходной НН
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НомерСтрокиНН) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаНомераСтрокиННПолная, ОбластьМакета.Параметры);
			СтруктураПоискаНомераСтрокиННПолная.ЦенаБезНДС = Окр(СтрокаТовары.ЦенаБезНДС,2);
			
			НайденныеСтроки = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаНомераСтрокиННПолная);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаНомераСтрокиННСокращенная, ОбластьМакета.Параметры);
				СтруктураПоискаНомераСтрокиННСокращенная.ЦенаБезНДС = Окр(СтрокаТовары.ЦенаБезНДС,2);
				
				НайденныеСтроки = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаНомераСтрокиННСокращенная);
			    Если НайденныеСтроки.Количество() > 0 Тогда
					ОбластьМакета.Параметры.НомерСтрокиНН = ПечатнаяФормаНН.Индекс(НайденныеСтроки[0]) + 1;
				КонецЕсли;
			Иначе	
				ОбластьМакета.Параметры.НомерСтрокиНН = ПечатнаяФормаНН.Индекс(НайденныеСтроки[0]) + 1;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОСумме = СтрокаТовары.ИзменениеСуммыБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G001		= ОбластьМакета.Параметры.НомерСтрокиНН;
			СтрокаСтруктуры.G2S 		= ОбластьМакета.Параметры.Причина;
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			
			СтрокаСтруктуры.G5  = СтрокаТовары.ИзменениеКоличества;
			СтрокаСтруктуры.G6  = СтрокаТовары.ЦенаБезНДС;
			Если СтрокаСтруктуры.G5 = 0 Тогда
				СтрокаСтруктуры.G6  = 0;	
			КонецЕсли;
			
			Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
				СтрокаСтруктуры.G7  = СтрокаТовары.ИзменениеЦеныБезНДС;
			Иначе
				СтрокаСтруктуры.G7  = 0;
			КонецЕсли;
			СтрокаСтруктуры.G8  = СтрокаТовары.Количество;
			Если СтрокаСтруктуры.G7 = 0 Тогда
				СтрокаСтруктуры.G8  = 0;	
			КонецЕсли;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2016()

Функция СформироватьПечатнуюФорму2017(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G001");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G011");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// получим "печатную форму" исходной НН для определения номера корректируемой строки
	СтруктураПоискаНомераСтрокиННПолная      = Новый Структура("Номенклатура,ЦенаБезНДС,ЕдиницаИзмеренияКод");
	СтруктураПоискаНомераСтрокиННСокращенная = Новый Структура("Номенклатура,ЦенаБезНДС");
	Попытка
		
		КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("НалоговаяНакладная");
		Документы.НалоговаяНакладная.Печать(ДанныеПечати.НалоговаяНакладная, Новый Структура("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы"), КоллекцияПечатныхФорм, Неопределено, Неопределено);
		ПечатнаяФормаНН 	= КоллекцияПечатныхФорм[0].ТабличныйДокумент.НалоговыйДокумент.R;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G3S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("Номенклатура");
		Иначе	
			ПечатнаяФормаНН.Колонки.G3S.Имя = "Номенклатура";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G105_2S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
		Иначе	
			ПечатнаяФормаНН.Колонки.G105_2S.Имя = "ЕдиницаИзмеренияКод";
		КонецЕсли;
			
		Если ПечатнаяФормаНН.Колонки.Найти("G6") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
		Иначе	
			ПечатнаяФормаНН.Колонки.G6.Имя = "ЦенаБезНДС";
		КонецЕсли;
		
	Исключение 
		ПечатнаяФормаНН = Новый ТаблицаЗначений;
		ПечатнаяФормаНН.Колонки.Добавить("Номенклатура");
		ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
		ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
	КонецПопытки;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	// П2 с отрицательной суммой, которые выдаются покупателю и которые выписаны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
	Если ДанныеПечати.РегистрируетсяВЕРННПокупателем = Истина Тогда
	    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
	Иначе
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом = "Х";
	КонецЕсли;
		
	Если (    ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
		  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
		  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
		  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа) Тогда
		  
		  ОбластьМакетаЗаголовок.Параметры.Сводная = ?(ДанныеПечати.Сводная = Истина, "X", "");	
		  
	КонецЕсли;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
		
		// такие П2, даже с отрицательной суммой регистрирует продавец
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом   = "Х";
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	//Дата налоговой
	ТекДатаНалоговой = Формат(ДанныеПечати.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.НомерНалоговойНакладной, Истина, Истина)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаНалоговойНакладной) И ДанныеПечати.ДатаНалоговойНакладной < НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307() Тогда	
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
	Иначе	
	    ТекНомерФилиал = КодСпецРежима;
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			ТекНомерФилиал = "5";
		КонецЕсли;
	КонецЕсли;
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	Если КодСпецРежима = "7" Тогда
		КодСпецРежима = "";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Неопределено Тогда
		// в реквизите "Контрагент" ссылка на справочник "Организации"
		// головной организацией в форме 2016 дополняем всегда
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина;
	КонецЕсли;
	
	ДополнениеКНаименованиюКонтрагента = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН И ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) Тогда
	   	СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
		ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Страна = СокрЛП(НайденныеСтроки[0].Страна);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
	 Тогда	  
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Страна = СокрЛП(НайденныеСтроки[0].Страна);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	
	// кто выписал налоговую накладную - формируем в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(ДанныеПечати.КтоВыписалНалоговуюНакладную,,,,Истина);
	
	// Выводим параметры 
	
	// Дата налоговой
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
	КонецЦикла; 
	
	// Номер налоговой
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
	КонецЦикла; 
	
	// филиал/спецрежим налоговой
	Для Инд = 1 По 5 Цикл                                                                 
		ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
	КонецЦикла;		
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыБезНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл
		
		Отбор = Новый Структура("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = СтрокаТовары.СтавкаНДС;
		КонецЕсли;
		
		Строка.ИзменениеСуммыНДС	= Строка.ИзменениеСуммыНДС + СтрокаТовары.ИзменениеСуммыНДС;  
		Строка.ИзменениеСуммыБезНДС	= Строка.ИзменениеСуммыБезНДС + СтрокаТовары.ИзменениеСуммыБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(СтрокаТовары.КодЛьготы) ИЛИ СтрокаТовары.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС, ИзменениеСуммыНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС20    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС7    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G111", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R007G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R006G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G11", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "ИзменениеСуммыНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ИтогНДС    = СтрокаТаблицы.ИзменениеСуммыНДС;
	КонецЦикла;
	
	ОбластьМакета.Параметры.ИзменениеСуммыНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС, ,"0,00");
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R001G03", ИтогНДС);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN0",   ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("H03",      ОбластьМакетаЗаголовок.Параметры.Сводная);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",  ОбластьМакетаЗаголовок.Параметры.Освобожденная);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	ДанныеПечати.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
 		
	КонецЕсли;
	
	// строки 
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл	
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеКоличества  = "";
			ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
		Иначе
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
		КонецЕсли;
		Если СтрокаТовары.ИзменениеЦеныБезНДС = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
			ОбластьМакета.Параметры.Количество  		 = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		Если НЕ КодСпецРежима = "2" Тогда
		    ОбластьМакета.Параметры.КодСХ = "";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(СтрокаТовары.Характеристика), "", "(" + СтрокаТовары.Характеристика +")")
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТовары.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТовары.ИзменениеСуммыБезНДС, ,"0,00");
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		// определим номер строки исходной НН
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НомерСтрокиНН) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаНомераСтрокиННПолная, ОбластьМакета.Параметры);
			СтруктураПоискаНомераСтрокиННПолная.ЦенаБезНДС = Окр(СтрокаТовары.ЦенаБезНДС,2);
			
			НайденныеСтроки = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаНомераСтрокиННПолная);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаНомераСтрокиННСокращенная, ОбластьМакета.Параметры);
				СтруктураПоискаНомераСтрокиННСокращенная.ЦенаБезНДС = Окр(СтрокаТовары.ЦенаБезНДС,2);
				
				НайденныеСтроки = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаНомераСтрокиННСокращенная);
			    Если НайденныеСтроки.Количество() > 0 Тогда
					ОбластьМакета.Параметры.НомерСтрокиНН = ПечатнаяФормаНН.Индекс(НайденныеСтроки[0]) + 1;
				КонецЕсли;
			Иначе	
				ОбластьМакета.Параметры.НомерСтрокиНН = ПечатнаяФормаНН.Индекс(НайденныеСтроки[0]) + 1;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОСумме = СтрокаТовары.ИзменениеСуммыБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G001		= ОбластьМакета.Параметры.НомерСтрокиНН;
			СтрокаСтруктуры.G2S 		= ОбластьМакета.Параметры.Причина;
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			
			СтрокаСтруктуры.G5  = СтрокаТовары.ИзменениеКоличества;
			СтрокаСтруктуры.G6  = СтрокаТовары.ЦенаБезНДС;
			Если СтрокаСтруктуры.G5 = 0 Тогда
				СтрокаСтруктуры.G6  = 0;	
			КонецЕсли;
			
			Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
				СтрокаСтруктуры.G7  = СтрокаТовары.ИзменениеЦеныБезНДС;
			Иначе
				СтрокаСтруктуры.G7  = 0;
			КонецЕсли;
			СтрокаСтруктуры.G8  = СтрокаТовары.Количество;
			Если СтрокаСтруктуры.G7 = 0 Тогда
				СтрокаСтруктуры.G8  = 0;	
			КонецЕсли;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2017()

Функция СформироватьПечатнуюФорму2018(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G001");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G21");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G22");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G011");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11_10");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	// П2 с отрицательной суммой, которые выдаются покупателю и которые выписаны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
	Если ДанныеПечати.РегистрируетсяВЕРННПокупателем = Истина Тогда
	    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
	Иначе
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом = "Х";
	КонецЕсли;
	
	КодПризнакаСводнойНаПечать = "";
	Если НЕ (ДанныеПечати.КодПризнакаСводной = 0)Тогда 
		КодПризнакаСводнойНаПечать = Строка(ДанныеПечати.КодПризнакаСводной);
	ИначеЕсли  (ДанныеПечати.Сводная = Истина) Тогда 
		Если (    ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации) Тогда 
			КодПризнакаСводнойНаПечать = "4"
			  
		ИначеЕсли ( ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
			КодПризнакаСводнойНаПечать = "1"
			  
		ИначеЕсли ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			КодПризнакаСводнойНаПечать = "3"
			  
		КонецЕсли;
	КонецЕсли; 
	ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной = КодПризнакаСводнойНаПечать;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
		
		// такие П2, даже с отрицательной суммой регистрирует продавец
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом   = "Х";
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	//Дата налоговой
	ТекДатаНалоговой = Формат(ДанныеПечати.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.НомерНалоговойНакладной, Истина, Истина)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаНалоговойНакладной) И ДанныеПечати.ДатаНалоговойНакладной < НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307() Тогда	
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
	Иначе	
	    ТекНомерФилиал = КодСпецРежима;
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			ТекНомерФилиал = "5";
		КонецЕсли;
	КонецЕсли;
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	Если КодСпецРежима = "7" Тогда
		КодСпецРежима = "";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	ФилиалПокупателяКодПоЕДРПОУ = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
			ФилиалПокупателяКодПоЕДРПОУ = Сред(ДанныеПечати.ФилиалПокупателя, ПозицияСобачки + 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
		ФилиалПокупателяКодПоЕДРПОУ = Прав("          " + СокрЛП(ФилиалПокупателяКодПоЕДРПОУ), 10);
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Неопределено Тогда
		// в реквизите "Контрагент" ссылка на справочник "Организации"
		// головной организацией в форме 2016 дополняем всегда
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина;
	КонецЕсли;
	
	ДополнениеКНаименованиюКонтрагента = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН И ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) Тогда
	   	СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
		ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Страна = СокрЛП(НайденныеСтроки[0].Страна);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		ЕДРПОУОрганизации = "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУОрганизации 		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);		
		Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда 
			ЕДРПОУОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"             ,Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	ЕДРПОУОрганизации = Прав("            " + СокрЛП(ЕДРПОУОрганизации), 10);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
	 Тогда	  
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУКонтрагента = "";
			
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		ЕДРПОУКонтрагента	= "";
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			Если ПустаяСтрока(ФилиалПокупателяКодПоЕДРПОУ) Тогда 
				ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь);
				Если НЕ ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоДРФО," ,Ложь);
				КонецЕсли;
			Иначе
				ЕДРПОУКонтрагента = ФилиалПокупателяКодПоЕДРПОУ;
			КонецЕсли;		
		Иначе
			ЕДРПОУКонтрагента = "";
		КонецЕсли;
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Страна = СокрЛП(НайденныеСтроки[0].Страна);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	ЕДРПОУКонтрагента	= Прав("            " + СокрЛП(ЕДРПОУКонтрагента), 10);
	
	// кто выписал налоговую накладную - формируем в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(ДанныеПечати.КтоВыписалНалоговуюНакладную,,,,Истина);
	
	// Выводим параметры 
	
	// Дата налоговой
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
	КонецЦикла; 
	
	// Номер налоговой
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
	КонецЦикла; 
	
	// филиал/спецрежим налоговой
	Для Инд = 1 По 5 Цикл                                                                 
		ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
	КонецЦикла;		
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ продавца
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_"+Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ покупателя
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУКонтрагента_"+Инд] = Сред(ЕДРПОУКонтрагента, Инд, 1);
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыБезНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл
		
		Отбор = Новый Структура("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = СтрокаТовары.СтавкаНДС;
		КонецЕсли;
		
		Строка.ИзменениеСуммыНДС	= Строка.ИзменениеСуммыНДС + СтрокаТовары.ИзменениеСуммыНДС;  
		Строка.ИзменениеСуммыБезНДС	= Строка.ИзменениеСуммыБезНДС + СтрокаТовары.ИзменениеСуммыБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(СтрокаТовары.КодЛьготы) ИЛИ СтрокаТовары.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС, ИзменениеСуммыНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС20    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС7    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G111", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R007G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R006G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G11", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "ИзменениеСуммыНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ИтогНДС    = СтрокаТаблицы.ИзменениеСуммыНДС;
	КонецЦикла;
	
	ОбластьМакета.Параметры.ИзменениеСуммыНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС, ,"0,00");
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R001G03", ИтогНДС);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	ПодвалННДата 			= "";
	ПодвалНННомер 			= "";
	ПодвалНННомерФилиала	= "";
	ПодвалННРегНомерЕРНН	= "";
	ПодвалП2Дата 			= "";
	ПодвалП2Номер 			= "";
	ПодвалП2НомерФилиала	= "";
	ПодвалП2РегНомерЕРНН	= "";
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN0",   ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1",    ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",  ОбластьМакетаЗаголовок.Параметры.Освобожденная);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	ДанныеПечати.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL",	ЕДРПОУОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY",	ЕДРПОУКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G1D",	ПодвалННДата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G2",	ПодвалНННомер);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G3",	Лев(ПодвалНННомерФилиала, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G4",	Сред(ПодвалНННомерФилиала, 2));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G5",	ПодвалННРегНомерЕРНН);			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G1D",	ПодвалП2Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G2",	ПодвалП2Номер);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G3",	Лев(ПодвалП2НомерФилиала, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G4",	Сред(ПодвалП2НомерФилиала, 2));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G5",	ПодвалП2РегНомерЕРНН);			
 		
	КонецЕсли;
	
	ДопТекст = "";
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		ДопТекст = " (перевищення бази оподаткування, визначеної відповідно до статей 188 і 189 Податкового кодексу України, над фактичною ціною постачання)";	
	КонецЕсли;
	
	ТекущийНомерСтрокиП2 = 0;
	// строки 
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл	
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ТекущийНомерСтрокиП2 = ТекущийНомерСтрокиП2 + 1;			
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтрокиП2;
		
		Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеКоличества  = "";
			ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
		Иначе
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
		КонецЕсли;
		Если СтрокаТовары.ИзменениеЦеныБезНДС = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
			ОбластьМакета.Параметры.Количество  		 = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		Если НЕ КодСпецРежима = "2" Тогда
		    ОбластьМакета.Параметры.КодСХ = "";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(СтрокаТовары.Характеристика), "", "(" + СтрокаТовары.Характеристика +")")
										 + ДопТекст;
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТовары.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТовары.ИзменениеСуммыБезНДС, ,"0,00");
		РасчИзменениеСуммыНДС6зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТовары.ИзменениеСуммыБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТовары.СтавкаНДС), Ложь), 6 );
		ФорматНДС6Зн = ?(Окр(РасчИзменениеСуммыНДС6зн,2) = РасчИзменениеСуммыНДС6зн, "ЧЦ=15; ЧДЦ=2; ЧН=' '", "ЧЦ=19; ЧДЦ=6; ЧН=' '");
		ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн = СокрЛ(Формат(РасчИзменениеСуммыНДС6зн, ФорматНДС6Зн));
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = СтрокаТовары.ИзменениеСуммыБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = "";
			ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
				ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.ИзменениеКоличества = "";
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G001		= ОбластьМакета.Параметры.НомерСтрокиНН;
			СтрокаСтруктуры.G21 		= ОбластьМакета.Параметры.КодПричиныКорректировки;
			СтрокаСтруктуры.G22 		= ОбластьМакета.Параметры.НомерГруппыКорректировки;
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			Если ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					Или ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда	
				
				СтрокаСтруктуры.G5 = 0;
				СтрокаСтруктуры.G6 = 0;
				СтрокаСтруктуры.G7 = 0;
				СтрокаСтруктуры.G8 = 0;
				
			Иначе

				СтрокаСтруктуры.G5  = СтрокаТовары.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТовары.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
					СтрокаСтруктуры.G7  = СтрокаТовары.ИзменениеЦеныБезНДС;
				Иначе
					СтрокаСтруктуры.G7  = 0;
				КонецЕсли;
				СтрокаСтруктуры.G8  = СтрокаТовары.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
			КонецЕсли;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
			СтрокаСтруктуры.G11_10  	= ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн;
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2018()

Функция СформироватьПечатнуюФорму2021(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G001");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G21");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G22");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G011");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11_10");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	// П2 с отрицательной суммой, которые выдаются покупателю и которые выписаны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
	Если ДанныеПечати.РегистрируетсяВЕРННПокупателем = Истина Тогда
	    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
	Иначе
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом = "Х";
	КонецЕсли;
	
	КодПризнакаСводнойНаПечать = "";
	Если НЕ (ДанныеПечати.КодПризнакаСводной = 0)Тогда 
		КодПризнакаСводнойНаПечать = Строка(ДанныеПечати.КодПризнакаСводной);
	ИначеЕсли  (ДанныеПечати.Сводная = Истина) Тогда 
		Если (    ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации) Тогда 
			КодПризнакаСводнойНаПечать = "4"
			  
		ИначеЕсли ( ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
			КодПризнакаСводнойНаПечать = "1"
			  
		ИначеЕсли ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			КодПризнакаСводнойНаПечать = "3"
			  
		КонецЕсли;
	КонецЕсли; 
	ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной = КодПризнакаСводнойНаПечать;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
		
		// такие П2, даже с отрицательной суммой регистрирует продавец
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом   = "Х";
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	//Дата налоговой
	ТекДатаНалоговой = Формат(ДанныеПечати.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.НомерНалоговойНакладной, Истина, Истина)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаНалоговойНакладной) И ДанныеПечати.ДатаНалоговойНакладной < НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307() Тогда	
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
	Иначе	
	    ТекНомерФилиал = КодСпецРежима;
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			ТекНомерФилиал = "5";
		КонецЕсли;
	КонецЕсли;
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	Если КодСпецРежима = "7" Тогда
		КодСпецРежима = "";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	ФилиалПокупателяКодПоЕДРПОУ = "";
	ДополнениеКНаименованиюКонтрагента = "";
	КодЕДРПОУГоловногоКонтрагента = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
			ФилиалПокупателяКодПоЕДРПОУ = Сред(ДанныеПечати.ФилиалПокупателя, ПозицияСобачки + 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
		Если ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) И ДанныеПечати.ГоловнойКонтрагент <> ДанныеПечати.Контрагент Тогда
			СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
			КодЕДРПОУГоловногоКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "КодПоЕДРПОУ,", Ложь);
			Если ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
				ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФилиалПокупателяКодПоЕДРПОУ) И ЗначениеЗаполнено(КодЕДРПОУГоловногоКонтрагента) Тогда
			ФилиалПокупателяКодПоЕДРПОУ = КодЕДРПОУГоловногоКонтрагента;
		КонецЕсли;
		ФилиалПокупателяКодПоЕДРПОУ = Прав("          " + СокрЛП(ФилиалПокупателяКодПоЕДРПОУ), 10);
	КонецЕсли;
	
	ПродавецЮрлицо = Истина;
	ПокупательЮрлицо = Истина;

	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Страна = СокрЛП(НайденныеСтроки[0].Страна);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		ЕДРПОУОрганизации = "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУОрганизации 		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);		
		Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда 
			ЕДРПОУОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"             ,Ложь);
			ПродавецЮрлицо = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	ЕДРПОУОрганизации = Прав("            " + СокрЛП(ЕДРПОУОрганизации), 10);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
	 Тогда	  
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУКонтрагента = "";
			
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		ЕДРПОУКонтрагента	= ЕДРПОУОрганизации;
		ПокупательЮрлицо = ПродавецЮрлицо;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			Если ПустаяСтрока(ФилиалПокупателяКодПоЕДРПОУ) Тогда 
				ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь);
				Если НЕ ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоДРФО," ,Ложь);
					ПокупательЮрлицо = Ложь;
				КонецЕсли;
			Иначе
				ЕДРПОУКонтрагента = ФилиалПокупателяКодПоЕДРПОУ;
			КонецЕсли;		
		Иначе
			ЕДРПОУКонтрагента = "";
		КонецЕсли;
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Страна = СокрЛП(НайденныеСтроки[0].Страна);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	ЕДРПОУКонтрагента	= Прав("            " + СокрЛП(ЕДРПОУКонтрагента), 10);
	
	ЧастиИмени = ФизическиеЛицаУТ.ФамилияИмяОтчество(ДанныеПечати.КтоВыписалНалоговуюНакладнуюСсылка, ДанныеПечати.Дата);
	ПечКтоВыписалНалоговуюНакладную = СокрЛП(ЧастиИмени.Имя) + " " + ВРег(СокрЛП(ЧастиИмени.Фамилия)); 
	
	// Выводим параметры 
	
	// Дата налоговой
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
	КонецЦикла; 
	
	// Номер налоговой
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
	КонецЦикла; 
	
	// филиал/спецрежим налоговой
	Для Инд = 1 По 5 Цикл                                                                 
		ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
	КонецЦикла;		
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ продавца
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_"+Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	//источник кода продавца
	ИсточникКодаПродавца = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУОрганизации, ПродавецЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаОрганизации = ИсточникКодаПродавца;
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ покупателя
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУКонтрагента_"+Инд] = Сред(ЕДРПОУКонтрагента, Инд, 1);
	КонецЦикла; 
	
	//источник кода покупателя
	ИсточникКодаПокупателя = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУКонтрагента, ПокупательЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаКонтрагента = ИсточникКодаПокупателя;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыБезНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл
		
		Отбор = Новый Структура("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = СтрокаТовары.СтавкаНДС;
		КонецЕсли;
		
		Строка.ИзменениеСуммыНДС	= Строка.ИзменениеСуммыНДС + СтрокаТовары.ИзменениеСуммыНДС;  
		Строка.ИзменениеСуммыБезНДС	= Строка.ИзменениеСуммыБезНДС + СтрокаТовары.ИзменениеСуммыБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(СтрокаТовары.КодЛьготы) ИЛИ СтрокаТовары.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС, ИзменениеСуммыНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС20    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС7    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G111", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R007G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R006G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G11", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "ИзменениеСуммыНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ИтогНДС    = СтрокаТаблицы.ИзменениеСуммыНДС;
	КонецЦикла;
	
	ОбластьМакета.Параметры.ИзменениеСуммыНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС, ,"0,00");
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R001G03", ИтогНДС);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	ПодвалННДата 			= "";
	ПодвалНННомер 			= "";
	ПодвалНННомерФилиала	= "";
	ПодвалННРегНомерЕРНН	= "";
	ПодвалП2Дата 			= "";
	ПодвалП2Номер 			= "";
	ПодвалП2НомерФилиала	= "";
	ПодвалП2РегНомерЕРНН	= "";
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN0",   ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1",    ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",  ОбластьМакетаЗаголовок.Параметры.Освобожденная);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	ДанныеПечати.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL",	ЕДРПОУОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY",	ЕДРПОУКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G1D",	ПодвалННДата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G2",	ПодвалНННомер);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G3",	Лев(ПодвалНННомерФилиала, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G4",	Сред(ПодвалНННомерФилиала, 2));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G5",	ПодвалННРегНомерЕРНН);			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G1D",	ПодвалП2Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G2",	ПодвалП2Номер);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G3",	Лев(ПодвалП2НомерФилиала, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G4",	Сред(ПодвалП2НомерФилиала, 2));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G5",	ПодвалП2РегНомерЕРНН);			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKS",		ИсточникКодаПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB",		ИсточникКодаПокупателя);
			
	КонецЕсли;
	
	ДопТекст = "";
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		ДопТекст = " (перевищення бази оподаткування, визначеної відповідно до статей 188 і 189 Податкового кодексу України, над фактичною ціною постачання)";	
	КонецЕсли;
	
	ТекущийНомерСтрокиП2 = 0;
	// строки 
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл	
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ТекущийНомерСтрокиП2 = ТекущийНомерСтрокиП2 + 1;			
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтрокиП2;
		
		Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеКоличества  = "";
			ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
		Иначе
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
		КонецЕсли;
		Если СтрокаТовары.ИзменениеЦеныБезНДС = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
			ОбластьМакета.Параметры.Количество  		 = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		Если НЕ КодСпецРежима = "2" Тогда
		    ОбластьМакета.Параметры.КодСХ = "";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(СтрокаТовары.Характеристика), "", "(" + СтрокаТовары.Характеристика +")")
										 + ДопТекст;
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТовары.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТовары.ИзменениеСуммыБезНДС, ,"0,00");
		РасчИзменениеСуммыНДС6зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТовары.ИзменениеСуммыБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТовары.СтавкаНДС), Ложь), 6 );
		ФорматНДС6Зн = ?(Окр(РасчИзменениеСуммыНДС6зн,2) = РасчИзменениеСуммыНДС6зн, "ЧЦ=15; ЧДЦ=2; ЧН=' '", "ЧЦ=19; ЧДЦ=6; ЧН=' '");
		ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн = СокрЛ(Формат(РасчИзменениеСуммыНДС6зн, ФорматНДС6Зн));
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = СтрокаТовары.ИзменениеСуммыБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = "";
			ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
				ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.ИзменениеКоличества = "";
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G001		= ОбластьМакета.Параметры.НомерСтрокиНН;
			СтрокаСтруктуры.G21 		= ОбластьМакета.Параметры.КодПричиныКорректировки;
			СтрокаСтруктуры.G22 		= ОбластьМакета.Параметры.НомерГруппыКорректировки;
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			Если ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					Или ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда	
				
				СтрокаСтруктуры.G5 = 0;
				СтрокаСтруктуры.G6 = 0;
				СтрокаСтруктуры.G7 = 0;
				СтрокаСтруктуры.G8 = 0;
				
			Иначе

				СтрокаСтруктуры.G5  = СтрокаТовары.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТовары.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
					СтрокаСтруктуры.G7  = СтрокаТовары.ИзменениеЦеныБезНДС;
				Иначе
					СтрокаСтруктуры.G7  = 0;
				КонецЕсли;
				СтрокаСтруктуры.G8  = СтрокаТовары.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
			КонецЕсли;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
			СтрокаСтруктуры.G11_10  	= ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн;
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2018()

Функция СформироватьПечатнуюФорму2021Мес3(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G001");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G21");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G22");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G011");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11_10");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	// П2 с отрицательной суммой, которые выдаются покупателю и которые выписаны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
	Если ДанныеПечати.РегистрируетсяВЕРННПокупателем = Истина Тогда
	    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
	Иначе
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом = "Х";
	КонецЕсли;
	
	КодПризнакаСводнойНаПечать = "";
	Если НЕ (ДанныеПечати.КодПризнакаСводной = 0)Тогда 
		КодПризнакаСводнойНаПечать = Строка(ДанныеПечати.КодПризнакаСводной);
	ИначеЕсли  (ДанныеПечати.Сводная = Истина) Тогда 
		Если (    ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации) Тогда 
			КодПризнакаСводнойНаПечать = "4"
			  
		ИначеЕсли ( ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
			КодПризнакаСводнойНаПечать = "1"
			  
		ИначеЕсли ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			КодПризнакаСводнойНаПечать = "3"
			  
		КонецЕсли;
	КонецЕсли; 
	ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной = КодПризнакаСводнойНаПечать;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
		
		// такие П2, даже с отрицательной суммой регистрирует продавец
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом   = "Х";
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	//Дата налоговой
	ТекДатаНалоговой = Формат(ДанныеПечати.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.НомерНалоговойНакладной, Истина, Истина)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаНалоговойНакладной) И ДанныеПечати.ДатаНалоговойНакладной < НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307() Тогда	
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
	Иначе	
	    ТекНомерФилиал = КодСпецРежима;
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			ТекНомерФилиал = "5";
		КонецЕсли;
	КонецЕсли;
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	Если КодСпецРежима = "7" Тогда
		КодСпецРежима = "";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	ФилиалПокупателяКодПоЕДРПОУ = "";
	ДополнениеКНаименованиюКонтрагента = "";
	КодЕДРПОУГоловногоКонтрагента = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
			ФилиалПокупателяКодПоЕДРПОУ = Сред(ДанныеПечати.ФилиалПокупателя, ПозицияСобачки + 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
		Если ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) И ДанныеПечати.ГоловнойКонтрагент <> ДанныеПечати.Контрагент Тогда
			СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
			КодЕДРПОУГоловногоКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "КодПоЕДРПОУ,", Ложь);
			Если ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
				ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФилиалПокупателяКодПоЕДРПОУ) И ЗначениеЗаполнено(КодЕДРПОУГоловногоКонтрагента) Тогда
			ФилиалПокупателяКодПоЕДРПОУ = КодЕДРПОУГоловногоКонтрагента;
		КонецЕсли;
		ФилиалПокупателяКодПоЕДРПОУ = Прав("          " + СокрЛП(ФилиалПокупателяКодПоЕДРПОУ), 10);
	КонецЕсли;
	
	ПродавецЮрлицо = Истина;
	ПокупательЮрлицо = Истина;

	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Страна = СокрЛП(НайденныеСтроки[0].Страна);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		ЕДРПОУОрганизации = "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУОрганизации 		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);		
		Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда 
			ЕДРПОУОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"             ,Ложь);
			ПродавецЮрлицо = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	ЕДРПОУОрганизации = Прав("            " + СокрЛП(ЕДРПОУОрганизации), 10);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
	 Тогда	  
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУКонтрагента = "";
			
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		ЕДРПОУКонтрагента	= ЕДРПОУОрганизации;
		ПокупательЮрлицо = ПродавецЮрлицо;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			Если ПустаяСтрока(ФилиалПокупателяКодПоЕДРПОУ) Тогда 
				ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь);
				Если НЕ ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоДРФО," ,Ложь);
					ПокупательЮрлицо = Ложь;
				КонецЕсли;
			Иначе
				ЕДРПОУКонтрагента = ФилиалПокупателяКодПоЕДРПОУ;
			КонецЕсли;		
		Иначе
			ЕДРПОУКонтрагента = "";
		КонецЕсли;
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Страна = СокрЛП(НайденныеСтроки[0].Страна);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	ЕДРПОУКонтрагента	= Прав("            " + СокрЛП(ЕДРПОУКонтрагента), 10);
	
	ЧастиИмени = ФизическиеЛицаУТ.ФамилияИмяОтчество(ДанныеПечати.КтоВыписалНалоговуюНакладнуюСсылка, ДанныеПечати.Дата);
	ПечКтоВыписалНалоговуюНакладную = СокрЛП(ЧастиИмени.Имя) + " " + ВРег(СокрЛП(ЧастиИмени.Фамилия)); 
	
	// Выводим параметры 
	
	// Дата налоговой
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
	КонецЦикла; 
	
	// Номер налоговой
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
	КонецЦикла; 
	
	// филиал/спецрежим налоговой
	Для Инд = 1 По 5 Цикл                                                                 
		ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
	КонецЦикла;		
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ продавца
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_"+Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	//источник кода продавца
	ИсточникКодаПродавца = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУОрганизации, ПродавецЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаОрганизации = ИсточникКодаПродавца;
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ покупателя
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУКонтрагента_"+Инд] = Сред(ЕДРПОУКонтрагента, Инд, 1);
	КонецЦикла; 
	
	//источник кода покупателя
	ИсточникКодаПокупателя = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУКонтрагента, ПокупательЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаКонтрагента = ИсточникКодаПокупателя;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыБезНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл
		
		Отбор = Новый Структура("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = СтрокаТовары.СтавкаНДС;
		КонецЕсли;
		
		Строка.ИзменениеСуммыНДС	= Строка.ИзменениеСуммыНДС + СтрокаТовары.ИзменениеСуммыНДС;  
		Строка.ИзменениеСуммыБезНДС	= Строка.ИзменениеСуммыБезНДС + СтрокаТовары.ИзменениеСуммыБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(СтрокаТовары.КодЛьготы) ИЛИ СтрокаТовары.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС, ИзменениеСуммыНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС20    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
            
        ИначеЕсли КолонкаДляСуммы = "14" Тогда
        	
        	ОбластьМакета.Параметры.ИзменениеСуммыБезНДС14 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
        	ОбластьМакета.Параметры.ИзменениеСуммыНДС14    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
        	
        	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
        		СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G14", СтрокаТаблицы.ИзменениеСуммыБезНДС);
        		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G14", СтрокаТаблицы.ИзменениеСуммыНДС);
        	КонецЕсли;
            
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС7    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G111", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R007G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R006G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G11", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "ИзменениеСуммыНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ИтогНДС    = СтрокаТаблицы.ИзменениеСуммыНДС;
	КонецЦикла;
	
	ОбластьМакета.Параметры.ИзменениеСуммыНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС, ,"0,00");
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R001G03", ИтогНДС);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	ПодвалННДата 			= "";
	ПодвалНННомер 			= "";
	ПодвалНННомерФилиала	= "";
	ПодвалННРегНомерЕРНН	= "";
	ПодвалП2Дата 			= "";
	ПодвалП2Номер 			= "";
	ПодвалП2НомерФилиала	= "";
	ПодвалП2РегНомерЕРНН	= "";
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN0",   ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1",    ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",  ОбластьМакетаЗаголовок.Параметры.Освобожденная);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	ДанныеПечати.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL",	ЕДРПОУОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY",	ЕДРПОУКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G1D",	ПодвалННДата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G2",	ПодвалНННомер);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G3",	Лев(ПодвалНННомерФилиала, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G4",	Сред(ПодвалНННомерФилиала, 2));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G5",	ПодвалННРегНомерЕРНН);			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G1D",	ПодвалП2Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G2",	ПодвалП2Номер);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G3",	Лев(ПодвалП2НомерФилиала, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G4",	Сред(ПодвалП2НомерФилиала, 2));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G5",	ПодвалП2РегНомерЕРНН);			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKS",		ИсточникКодаПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB",		ИсточникКодаПокупателя);
			
	КонецЕсли;
	
	ДопТекст = "";
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		ДопТекст = " (перевищення бази оподаткування, визначеної відповідно до статей 188 і 189 Податкового кодексу України, над фактичною ціною постачання)";	
	КонецЕсли;
	
	ТекущийНомерСтрокиП2 = 0;
	// строки 
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл	
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ТекущийНомерСтрокиП2 = ТекущийНомерСтрокиП2 + 1;			
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтрокиП2;
		
		Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеКоличества  = "";
			ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
		Иначе
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
		КонецЕсли;
		Если СтрокаТовары.ИзменениеЦеныБезНДС = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
			ОбластьМакета.Параметры.Количество  		 = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		Если НЕ КодСпецРежима = "2" Тогда
		    ОбластьМакета.Параметры.КодСХ = "";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(СтрокаТовары.Характеристика), "", "(" + СтрокаТовары.Характеристика +")")
										 + ДопТекст;
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТовары.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте);
		
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТовары.ИзменениеСуммыБезНДС, ,"0,00");
		РасчИзменениеСуммыНДС6зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТовары.ИзменениеСуммыБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТовары.СтавкаНДС), Ложь), 6 );
		ФорматНДС6Зн = ?(Окр(РасчИзменениеСуммыНДС6зн,2) = РасчИзменениеСуммыНДС6зн, "ЧЦ=15; ЧДЦ=2; ЧН=' '", "ЧЦ=19; ЧДЦ=6; ЧН=' '");
		ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн = СокрЛ(Формат(РасчИзменениеСуммыНДС6зн, ФорматНДС6Зн));
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = СтрокаТовары.ИзменениеСуммыБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = "";
			ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
				ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.ИзменениеКоличества = "";
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G001		= ОбластьМакета.Параметры.НомерСтрокиНН;
			СтрокаСтруктуры.G21 		= ОбластьМакета.Параметры.КодПричиныКорректировки;
			СтрокаСтруктуры.G22 		= ОбластьМакета.Параметры.НомерГруппыКорректировки;
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			Если ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					Или ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда	
				
				СтрокаСтруктуры.G5 = 0;
				СтрокаСтруктуры.G6 = 0;
				СтрокаСтруктуры.G7 = 0;
				СтрокаСтруктуры.G8 = 0;
				
			Иначе

				СтрокаСтруктуры.G5  = СтрокаТовары.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТовары.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
					СтрокаСтруктуры.G7  = СтрокаТовары.ИзменениеЦеныБезНДС;
				Иначе
					СтрокаСтруктуры.G7  = 0;
				КонецЕсли;
				СтрокаСтруктуры.G8  = СтрокаТовары.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
			КонецЕсли;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
			СтрокаСтруктуры.G11_10  	= ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн;
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2018()

Функция СформироватьПечатнуюФорму2023(ДанныеПечати, СтрокиПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G001");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G21");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G22");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11_10");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	// П2 с отрицательной суммой, которые выдаются покупателю и которые выписаны к НН с датой после 01.01.2015 - регистрирует в ЕРНН покупатель
	Если ДанныеПечати.РегистрируетсяВЕРННПокупателем = Истина Тогда
	    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "Х";
	Иначе
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом = "Х";
	КонецЕсли;
	
	КодПризнакаСводнойНаПечать = "";
	Если НЕ (ДанныеПечати.КодПризнакаСводной = 0)Тогда 
		КодПризнакаСводнойНаПечать = Строка(ДанныеПечати.КодПризнакаСводной);
	ИначеЕсли  (ДанныеПечати.Сводная = Истина) Тогда 
		Если (    ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации) Тогда 
			КодПризнакаСводнойНаПечать = "4"
			  
		ИначеЕсли ( ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
			КодПризнакаСводнойНаПечать = "1"
			  
		ИначеЕсли ДанныеПечати.ВидОперацииНалоговой = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			КодПризнакаСводнойНаПечать = "3"
			  
		КонецЕсли;
	КонецЕсли; 
	ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной = КодПризнакаСводнойНаПечать;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
		
		// такие П2, даже с отрицательной суммой регистрирует продавец
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем = "";
		ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом   = "Х";
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	//Дата налоговой
	ТекДатаНалоговой = Формат(ДанныеПечати.ДатаНалоговойНакладной, "ДФ=ddMMyyyy");
	
	// Номер налоговой
	ТекНомерНалоговой = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.НомерНалоговойНакладной, Истина, Истина)), 7);
		
	// филиал/спецрежим налоговой
	ТекНомерФилиал = "";
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаНалоговойНакладной) И ДанныеПечати.ДатаНалоговойНакладной < НДСОбщегоНазначенияПовтИсп.ДатаВступленияВСилуПриказа1307() Тогда	
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
		КонецЕсли;
	Иначе	
	    ТекНомерФилиал = КодСпецРежима;
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			ТекНомерФилиал = "5";
		КонецЕсли;
	КонецЕсли;
	ТекНомерФилиалНалоговой  = ТекНомерФилиал;
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	Если КодСпецРежима = "7" Тогда
		КодСпецРежима = "";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.ПрефиксНовый), Прав("    " + Формат(Число(ДанныеПечати.ПрефиксНовый),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	ФилиалПокупателяКодПоЕДРПОУ = "";
	ДополнениеКНаименованиюКонтрагента = "";
	КодЕДРПОУГоловногоКонтрагента = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
			ФилиалПокупателяКодПоЕДРПОУ = Сред(ДанныеПечати.ФилиалПокупателя, ПозицияСобачки + 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
		Если ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) И ДанныеПечати.ГоловнойКонтрагент <> ДанныеПечати.Контрагент Тогда
			СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
			КодЕДРПОУГоловногоКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "КодПоЕДРПОУ,", Ложь);
			Если ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
				ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФилиалПокупателяКодПоЕДРПОУ) И ЗначениеЗаполнено(КодЕДРПОУГоловногоКонтрагента) Тогда
			ФилиалПокупателяКодПоЕДРПОУ = КодЕДРПОУГоловногоКонтрагента;
		КонецЕсли;
		ФилиалПокупателяКодПоЕДРПОУ = Прав("          " + СокрЛП(ФилиалПокупателяКодПоЕДРПОУ), 10);
	КонецЕсли;
	
	ПродавецЮрлицо = Истина;
	ПокупательЮрлицо = Истина;

	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Страна = СокрЛП(НайденныеСтроки[0].Страна);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		ЕДРПОУОрганизации = "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУОрганизации 		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);		
		Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда 
			ЕДРПОУОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"             ,Ложь);
			ПродавецЮрлицо = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	ЕДРПОУОрганизации = Прав("            " + СокрЛП(ЕДРПОУОрганизации), 10);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
	 Тогда	  
		// в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУКонтрагента = "";
			
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		ЕДРПОУКонтрагента	= ЕДРПОУОрганизации;
		ПокупательЮрлицо = ПродавецЮрлицо;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			Если ПустаяСтрока(ФилиалПокупателяКодПоЕДРПОУ) Тогда 
				ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь);
				Если НЕ ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоДРФО," ,Ложь);
					ПокупательЮрлицо = Ложь;
				КонецЕсли;
			Иначе
				ЕДРПОУКонтрагента = ФилиалПокупателяКодПоЕДРПОУ;
			КонецЕсли;		
		Иначе
			ЕДРПОУКонтрагента = "";
		КонецЕсли;
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7
			ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 21
			ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 22 Тогда
			
			Если ДанныеПечати.ТипПричиныНевыдачиПокупателю = 21 Тогда
				// постачання нерезиденту на митній території України
				ИННКонтрагента = "500000000000";
			Иначе                  
				// поставка на экспорт
				ИННКонтрагента = "300000000000";
			КонецЕсли;
			
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Страна = СокрЛП(НайденныеСтроки[0].Страна);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	ЕДРПОУКонтрагента	= Прав("            " + СокрЛП(ЕДРПОУКонтрагента), 10);
	
	ЧастиИмени = ФизическиеЛицаУТ.ФамилияИмяОтчество(ДанныеПечати.КтоВыписалНалоговуюНакладнуюСсылка, ДанныеПечати.Дата);
	ПечКтоВыписалНалоговуюНакладную = СокрЛП(ЧастиИмени.Имя) + " " + ВРег(СокрЛП(ЧастиИмени.Фамилия)); 
	
	// Выводим параметры 
	
	// Дата налоговой
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ДатаНалоговой_"+Инд]    = Сред(ТекДатаНалоговой, Инд, 1);
	КонецЦикла; 
	
	// Номер налоговой
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["НомерНалоговой_"+Инд]    = Сред(ТекНомерНалоговой, Инд, 1);
	КонецЦикла; 
	
	// филиал/спецрежим налоговой
	Для Инд = 1 По 5 Цикл                                                                 
		ОбластьМакета.Параметры["НомерФилиалНалоговой_"+Инд]    = Сред(ТекНомерФилиалНалоговой, Инд, 1);
	КонецЦикла;		
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ продавца
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_"+Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	//источник кода продавца
	ИсточникКодаПродавца = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУОрганизации, ПродавецЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаОрганизации = ИсточникКодаПродавца;
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ покупателя
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУКонтрагента_"+Инд] = Сред(ЕДРПОУКонтрагента, Инд, 1);
	КонецЦикла; 
	
	//источник кода покупателя
	ИсточникКодаПокупателя = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУКонтрагента, ПокупательЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаКонтрагента = ИсточникКодаПокупателя;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("ИзменениеСуммыБезНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл
		
		Отбор = Новый Структура("СтавкаНДС", СтрокаТовары.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = СтрокаТовары.СтавкаНДС;
		КонецЕсли;
		
		Строка.ИзменениеСуммыНДС	= Строка.ИзменениеСуммыНДС + СтрокаТовары.ИзменениеСуммыНДС;  
		Строка.ИзменениеСуммыБезНДС	= Строка.ИзменениеСуммыБезНДС + СтрокаТовары.ИзменениеСуммыБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(СтрокаТовары.КодЛьготы) ИЛИ СтрокаТовары.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "ИзменениеСуммыБезНДС, ИзменениеСуммыНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте, ДанныеПечати.ТипПричиныНевыдачиПокупателю);
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС20    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G9", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
            
        ИначеЕсли КолонкаДляСуммы = "14" Тогда
        	
        	ОбластьМакета.Параметры.ИзменениеСуммыБезНДС14 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
        	ОбластьМакета.Параметры.ИзменениеСуммыНДС14    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
        	
        	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
        		СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G14", СтрокаТаблицы.ИзменениеСуммыБезНДС);
        		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G14", СтрокаТаблицы.ИзменениеСуммыНДС);
        	КонецЕсли;
            
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			ОбластьМакета.Параметры.ИзменениеСуммыНДС7    = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G111", СтрокаТаблицы.ИзменениеСуммыБезНДС);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G111", СтрокаТаблицы.ИзменениеСуммыНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R007G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R006G03", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДСБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.ИзменениеСуммыБезНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G11", СтрокаТаблицы.ИзменениеСуммыБезНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "ИзменениеСуммыНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ИтогНДС    = СтрокаТаблицы.ИзменениеСуммыНДС;
	КонецЦикла;
	
	ОбластьМакета.Параметры.ИзменениеСуммыНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС, ,"0,00");
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R001G03", ИтогНДС);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	ПодвалННДата 			= "";
	ПодвалНННомер 			= "";
	ПодвалНННомерФилиала	= "";
	ПодвалННРегНомерЕРНН	= "";
	ПодвалП2Дата 			= "";
	ПодвалП2Номер 			= "";
	ПодвалП2НомерФилиала	= "";
	ПодвалП2РегНомерЕРНН	= "";
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN0",   ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПродавцом);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",    ОбластьМакетаЗаголовок.Параметры.РегистрируетсяВЕРННПокупателем);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1",    ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",  ОбластьМакетаЗаголовок.Параметры.Освобожденная);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODFILL",	ДанныеПечати.ДатаНалоговойНакладной);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM",	Прав(ТекНомерНалоговой,7));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM1",	Лев(ТекНомерФилиалНалоговой, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HPODNUM2",	Сред(ТекНомерФилиалНалоговой, 2));
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL",	ЕДРПОУОрганизации);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY",	ЕДРПОУКонтрагента);
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G1D",	ПодвалННДата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G2",	ПодвалНННомер);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G3",	Лев(ПодвалНННомерФилиала, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G4",	Сред(ПодвалНННомерФилиала, 2));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0301G5",	ПодвалННРегНомерЕРНН);			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G1D",	ПодвалП2Дата);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G2",	ПодвалП2Номер);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G3",	Лев(ПодвалП2НомерФилиала, 1));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G4",	Сред(ПодвалП2НомерФилиала, 2));
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R0302G5",	ПодвалП2РегНомерЕРНН);			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKS",		ИсточникКодаПродавца);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB",		ИсточникКодаПокупателя);
			
	КонецЕсли;
	
	ДопТекст = "";
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		ДопТекст = " (перевищення бази оподаткування, визначеної відповідно до статей 188 і 189 Податкового кодексу України, над фактичною ціною постачання)";	
	КонецЕсли;
	
	ТекущийНомерСтрокиП2 = 0;
	// строки 
	Для Каждого СтрокаТовары Из СтрокиПоТоварам Цикл	
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		ТекущийНомерСтрокиП2 = ТекущийНомерСтрокиП2 + 1;			
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтрокиП2;
		
		Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеКоличества  = "";
			ОбластьМакета.Параметры.ЦенаБезНДС  		 = "";
		Иначе
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
		КонецЕсли;
		Если СтрокаТовары.ИзменениеЦеныБезНДС = 0 Тогда
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС  = "";
			ОбластьМакета.Параметры.Количество  		 = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли СтрокаТовары.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Содержание), СокрП("" + СтрокаТовары.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(СтрокаТовары.Характеристика), "", "(" + СтрокаТовары.Характеристика +")")
										 + ДопТекст;
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТовары.СтавкаНДС, ДанныеПечати.Дата), ВРегВалюте, ДанныеПечати.ТипПричиныНевыдачиПокупателю);
		
		ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТовары.ИзменениеСуммыБезНДС, ,"0,00");
		РасчИзменениеСуммыНДС6зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТовары.ИзменениеСуммыБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТовары.СтавкаНДС), Ложь), 6 );
		ФорматНДС6Зн = ?(Окр(РасчИзменениеСуммыНДС6зн,2) = РасчИзменениеСуммыНДС6зн, "ЧЦ=15; ЧДЦ=2; ЧН=' '", "ЧЦ=19; ЧДЦ=6; ЧН=' '");
		ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн = СокрЛ(Формат(РасчИзменениеСуммыНДС6зн, ФорматНДС6Зн));
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = СтрокаТовары.ИзменениеСуммыБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ИзменениеСуммыБезНДС = "";
			ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
				ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.ИзменениеКоличества = "";
			ОбластьМакета.Параметры.ИзменениеЦеныБезНДС = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G001		= ОбластьМакета.Параметры.НомерСтрокиНН;
			СтрокаСтруктуры.G21 		= ОбластьМакета.Параметры.КодПричиныКорректировки;
			СтрокаСтруктуры.G22 		= ОбластьМакета.Параметры.НомерГруппыКорректировки;
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			Если ДанныеПечати.Сводная = Истина И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					Или ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда	
				
				СтрокаСтруктуры.G5 = 0;
				СтрокаСтруктуры.G6 = 0;
				СтрокаСтруктуры.G7 = 0;
				СтрокаСтруктуры.G8 = 0;
				
			Иначе

				СтрокаСтруктуры.G5  = СтрокаТовары.ИзменениеКоличества;
				СтрокаСтруктуры.G6  = СтрокаТовары.ЦенаБезНДС;
				Если СтрокаСтруктуры.G5 = 0 Тогда
					СтрокаСтруктуры.G6  = 0;	
				КонецЕсли;
				
				Если СтрокаТовары.ИзменениеКоличества = 0 Тогда
					СтрокаСтруктуры.G7  = СтрокаТовары.ИзменениеЦеныБезНДС;
				Иначе
					СтрокаСтруктуры.G7  = 0;
				КонецЕсли;
				СтрокаСтруктуры.G8  = СтрокаТовары.Количество;
				Если СтрокаСтруктуры.G7 = 0 Тогда
					СтрокаСтруктуры.G8  = 0;	
				КонецЕсли;
			КонецЕсли;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G11_10  	= ОбластьМакета.Параметры.ИзменениеСуммыНДС6зн;
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2018()

// Функция по СтавкеНДС определяет суффикс имени параметра табличного документа:
// фактически колонкку таблицы налоговой накладной 20%, 0%... где должна отображаться соответствующая сумма
//
Функция ОпределитьКолонкуТаблицы(СтавкаНДС=Неопределено, Дата='00010101')
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат "0";
	ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат "БезНДС";
    ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС14 Тогда
    	Если НДСОбщегоНазначенияПовтИсп.ДатаНачалаДействияФормыНДС14() <= Дата Тогда
    		Возврат "14";	
    	Иначе	
    		Возврат "0";
    	КонецЕсли;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
		Если '2014-12-01' <= Дата  Тогда
			Возврат "7";	
		Иначе	
			Возврат "0";
		КонецЕсли;
	Иначе
		Возврат "20";	
	КонецЕсли;
	
КонецФункции

Функция ОпределитьКодСтавки(ИмяКолонки, ВРегВалюте, ТипПричиныНевыдачи = Неопределено)
	Если ИмяКолонки = "0" Тогда
		Если ТипПричиныНевыдачи <> Неопределено Тогда
			Если ТипПричиныНевыдачи = 7 Тогда
				Возврат "901";//"0Эксп";
			Иначе
				Возврат "902";//"0Укр";
			КонецЕсли;
		Иначе
			Если НЕ ВРегВалюте
				Тогда
				Возврат "901";//"0Эксп";
			Иначе       
				Возврат "902";//"0Укр";
			КонецЕсли;
		КонецЕсли;
	//Если ИмяКолонки = "0Эксп" Тогда
	//	Возврат "901";	
	//ИначеЕсли ИмяКолонки = "0Укр" Тогда
	//	Возврат "902";		
	ИначеЕсли ИмяКолонки = "БезНДС" Тогда
		Возврат "903";		
	ИначеЕсли ИмяКолонки = "7" Тогда
		Возврат "7";	
    ИначеЕсли ИмяКолонки = "14" Тогда
    	Возврат "14";
	Иначе
		Возврат "20";	
	КонецЕсли;	

КонецФункции // ОпределитьКодСтавки()

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(ВидОперации, СтатьяДекларацииНДСНалоговыеОбязательства, ТипПричиныНевыдачиПокупателю = Неопределено) Экспорт
	
	СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости;
	
	Если  ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
		
        СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировка_НеОбъект;
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	  И ТипПричиныНевыдачиПокупателю <> 7 Тогда
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировка_НООсвобожден;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораТипПричиныНевыдачиПокупателю(СписокВыбора, ПродажаНижеОбычнойЦены, Дата) Экспорт

	СписокВыбора.Очистить();

	Если НЕ ПродажаНижеОбычнойЦены Тогда	
	
		СписокВыбора.Добавить(0, " - Податкова накладна видається покупцю");
		
		// СписокВыбора.Добавить(1, "01-Виписана на суму перевищення звичайної ціни над фактичною");
		СписокВыбора.Добавить(1, "01-Складена на суму збільшення компенсації вартості поставлених товарів/послуг (для податкових накладних, особливості заповнення яких викладені в пункті 13 цього Порядку)");
		
	    СписокВыбора.Добавить(2, "02-Постачання неплатнику податку");
		
		СписокВыбора.Добавить(3, "03-Натуральна виплата в рахунок оплати праці фізичним особам");
		
		СписокВыбора.Добавить(4, "04-Постачання у межах балансу для невиробничого використання");
		
		СписокВыбора.Добавить(5, "05-Ліквідація основних фондів за самостійним рішенням платника податку");
		
		СписокВыбора.Добавить(6, "06-Переведення основних фондів до складу невиробничих");
		
		СписокВыбора.Добавить(7, "07-Експортні постачання");
		
		СписокВыбора.Добавить(8, "08-Постачання для операцій, які не є об'єктом оподаткування податком на додану вартість");
		
		СписокВыбора.Добавить(9, "09-Постачання для операцій, які звільнені від оподаткування податком на додану вартість");
		
		СписокВыбора.Добавить(10, "10-Визнання умовного постачання товарних залишків та/або основних фондів, що перебувають 
			|в обліку платника податку на день анулювання його реєстрації як платника податку на додану вартість,
			|щодо яких був нарахований податковий кредит у минулих або поточному податкових періодах
			|при анулюванні реєстрації платника податку на додану вартість");
		
		СписокВыбора.Добавить(11, "11-Виписана за щоденними підсумками операцій");
		
		// СписокВыбора.Добавить(12, "12-Виписана на вартість безоплатно поставлених товарів/послуг, обчислену виходячи з рівня звичайних цін"); 
		СписокВыбора.Добавить(12, "12-Складена на постачання неплатнику, в якій зазначається назва покупця (для податкових накладних, особливості заповнення яких викладені в пункті 10 цього Порядку)");
		
		
		СписокВыбора.Добавить(13, "13-Використання виробничих або невиробничих засобів, інших товарів/послуг не у господарській діяльності"); 
		
		СписокВыбора.Добавить(14, "14-Виписана покупцем (отримувачем) послуг від нерезидента");
		
		СписокВыбора.Добавить(21, "21-Складена на постачання послуг отримувачу (покупцю) нерезиденту, місце постачання яких розташоване на митній території України");

		СписокВыбора.Добавить(22, "22-Складена на операції з вивезення за межі митної території України товарів, до яких застосовано режим експортного забезпечення, що підлягають оподаткуванню податком на додану вартість за основною ставкою або ставкою 14%"); 
		
	Иначе
		
		Если Дата >= '2017-03-16' Тогда
			
			СписокВыбора.Добавить(15, "15-Складена на суму перевищення бази оподаткування, визначеної відповідно до статей 188 і 189 Податкового кодексу України, над фактичною ціною постачання");
		Иначе
			
			СписокВыбора.Добавить(15, "15-Складена на суму перевищення ціни придбання товарів/послуг над фактичною ціною їх постачання"); 
			
			СписокВыбора.Добавить(16, "16-Складена на суму перевищення балансової (залишкової) вартості необоротних активів над фактичною ціною їх постачання"); 
		
	    	СписокВыбора.Добавить(17, "17-складена на суму перевищення собівартості самостійно виготовлених товарів/послуг над фактичною ціною їх постачання"); 
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект) Экспорт
	
	ПоставкаНеплательщику = Ложь;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если НЕ Объект.Контрагент.ПлательщикНДС
   		    ИЛИ Найти("0123456789",Лев(СокрЛ(Объект.Контрагент.ИННПлательщикаНДС),1)) = 0 Тогда		
			ПоставкаНеплательщику = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		
		ОрганизацияПлательщикНДС = НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Объект.Контрагент, Объект.Дата);
		
		Если НЕ ОрганизацияПлательщикНДС Тогда		
			ПоставкаНеплательщику = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		
		Объект.ТипПричиныНевыдачиПокупателю = 14;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		Объект.ТипПричиныНевыдачиПокупателю = 15;	
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа Тогда
		
	    Объект.ТипПричиныНевыдачиПокупателю = 13;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации 
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации Тогда
		
	    Объект.ТипПричиныНевыдачиПокупателю = 11;
		
	Иначе

		ТипПричиныНевыдачиНерезиденту = Неопределено;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			
			ЕстьУслуги = Ложь;
			ЕстьТоварыПоНулевойСтавке = Ложь;
			ЕстьДругиеОперации = Ложь;
			
			ТЧ = ?(Объект.СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ,
				Объект.ТоварыПоДаннымПользователя, Объект.Товары);
				
			Для каждого СтрокаТЧ Из ТЧ Цикл
				
				Если СтрокаТЧ.КодНоменклатурыПоКлассификатору.Вид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
					ЕстьУслуги = Истина;
				Иначе
					Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						ЕстьТоварыПоНулевойСтавке = Истина;
					Иначе
						ЕстьДругиеОперации = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЕстьДругиеОперации Тогда
				Если ЕстьТоварыПоНулевойСтавке Тогда
					ТипПричиныНевыдачиНерезиденту = 7;
				ИначеЕсли ЕстьУслуги Тогда
					ТипПричиныНевыдачиНерезиденту = 21;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипПричиныНевыдачиНерезиденту <> Неопределено Тогда

			Объект.ТипПричиныНевыдачиПокупателю = ТипПричиныНевыдачиНерезиденту;
		
		ИначеЕсли ПоставкаНеплательщику Тогда
			
			Объект.ТипПричиныНевыдачиПокупателю = 2;
		
		Иначе	
			
			Объект.ТипПричиныНевыдачиПокупателю = 0;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Объект.ТипПричиныНевыдачиПокупателю > 0 Тогда
		Объект.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;
		Объект.СтатусВыдачиПокупателю = Перечисления.СтатусыВыдачиПокупателюНалоговыхДокументов.НеВыданПокупателю;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержаниеДляУсловнойПродажи(ОбъектЗаполненияСодержанияУсловнаяПродажа, Содержание) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектЗаполненияСодержанияУсловнаяПродажа) Тогда
		Если ТипЗнч(ОбъектЗаполненияСодержанияУсловнаяПродажа) = Тип("ДокументСсылка.РегистрацияВходящегоНалоговогоДокумента") Тогда
			Содержание = "Податкова накладна №" + ОбъектЗаполненияСодержанияУсловнаяПродажа.НомерВходящегоДокумента + " від " + Формат(ОбъектЗаполненияСодержанияУсловнаяПродажа.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
		ИначеЕсли ТипЗнч(ОбъектЗаполненияСодержанияУсловнаяПродажа) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
			Содержание = "Податкова накладна №" + ОбъектЗаполненияСодержанияУсловнаяПродажа.Номер + " від " + Формат(ОбъектЗаполненияСодержанияУсловнаяПродажа.Дата, "ДФ=dd.MM.yyyy");
		Иначе
			Содержание = Строка(ОбъектЗаполненияСодержанияУсловнаяПродажа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьДатуКурсаВалюты(Объект) Экспорт
	
	Дата = Неопределено;
	Если Объект.НалоговаяНакладнаяНеЗарегистрированаВИБ Тогда
		Дата = Объект.НалоговаяНакладнаяДата;
	Иначе
		Дата = Объект.НалоговаяНакладная.Дата;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = Объект.Дата;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата(); // Для нового документа
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

Процедура ЗаполнитьСуммыРеглВТабличныхЧастях(Объект, ИмяТЧ = Неопределено) Экспорт
	
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить(); 
	СтруктураКурсовВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, ПолучитьДатуКурсаВалюты(Объект)); 
	
	ТабличныеЧасти = Новый Массив;                                          
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		ТабличныеЧасти.Добавить(ИмяТЧ);
	Иначе
		ТабличныеЧасти.Добавить("Товары");
		ТабличныеЧасти.Добавить("ТоварыПоДаннымПользователя");
	КонецЕсли;
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ИмяСуммыБезНДС = "СуммаБезНДС";
			
		ПогрешностиОкругленияСуммыБезНДС = Новый Соответствие;
		ПогрешностиОкругленияНДС = Новый Соответствие;
		
		Для каждого СтрокаТаблицы ИЗ Объект[ТабличнаяЧасть] Цикл

			СтрокаТаблицы.СуммаБезНДСРегл = НДСИсходящийСервер.ОкруглитьСУчетомПогрешности(
				НДСОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаблицы[ИмяСуммыБезНДС],
					СтруктураКурсовВалюты.Валюта, ВалютаРегУчета,
					СтруктураКурсовВалюты.Курс, 1,
					СтруктураКурсовВалюты.Кратность, 1),
				2,, ПогрешностиОкругленияСуммыБезНДС, СтрокаТаблицы.СтавкаНДС);

			СтрокаТаблицы.СуммаНДСРегл = НДСИсходящийСервер.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаБезНДСРегл,
				Ложь,
				СтрокаТаблицы.СтавкаНДС,
				ПогрешностиОкругленияНДС);

			Если СтруктураКурсовВалюты.Валюта = ВалютаРегУчета Тогда
				СтрокаТаблицы.ЦенаРегл = СтрокаТаблицы.Цена;
			ИначеЕсли ИмяСуммыБезНДС = "СуммаПревышения" Тогда
				СтрокаТаблицы.ЦенаРегл = НДСОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаблицы.Цена,
					СтруктураКурсовВалюты.Валюта, ВалютаРегУчета,
					СтруктураКурсовВалюты.Курс, 1,
					СтруктураКурсовВалюты.Кратность, 1); 
			Иначе
				СтрокаТаблицы.ЦенаРегл = СтрокаТаблицы.СуммаБезНДСРегл / ?(СтрокаТаблицы.КоличествоУпаковок = 0, 1, СтрокаТаблицы.КоличествоУпаковок);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Процедура ЗаменитьСсылкиЕдиницИзмерения_ДанныеДляОбновления(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК Т
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Т.ЕдиницаИзмерения) = ТИП(Справочник.УдалитьЕдиницыИзмерения)
    |
    |ОБЪЕДИНИТЬ 
    |
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.ТоварыПоДаннымПользователя КАК Т
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Т.ЕдиницаИзмерения) = ТИП(Справочник.УдалитьЕдиницыИзмерения)
    |";
	
    ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

Процедура ЗаменитьСсылкиЕдиницИзмерения(Параметры) Экспорт

	ПолноеИмяДокумента = "Документ.Приложение2КНалоговойНакладной";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
	СоответствиеЕдиницыУпаковки = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Справочники.УпаковкиЕдиницыИзмерения.ЗаменитьСсылкиЕдиницИзмеренияВОбъекте(
                ДокументОбъект, 
                СоответствиеЕдиницыУпаковки, 
                "Товары"
            );
            
			Справочники.УпаковкиЕдиницыИзмерения.ЗаменитьСсылкиЕдиницИзмеренияВОбъекте(
                ДокументОбъект, 
                СоответствиеЕдиницыУпаковки, 
                "ТоварыПоДаннымПользователя"
            );
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();		
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры
 

// Обработчик обновления BAS УТ 3.2.4
// Заполняет "ОбъектРасчетов" в табличных частях документа
Процедура ПеренестиОбъектРасчетовИзШапкиВТабличныеЧасти_ДанныеДляОбновления(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка.Проведен
	|	И Т.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|	И НЕ Т.Ссылка.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.ТоварыПоДаннымПользователя КАК Т
	|ГДЕ
	|	Т.Ссылка.Проведен
	|	И Т.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|	И НЕ Т.Ссылка.ОбъектРасчетов = НЕОПРЕДЕЛЕНО";
	
    ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

Процедура ПеренестиОбъектРасчетовИзШапкиВТабличныеЧасти(Параметры) Экспорт

	ПолноеИмяДокумента = "Документ.Приложение2КНалоговойНакладной";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
    		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
    			Если ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) Тогда
    				Продолжить;
				КонецЕсли;
				
    			СтрокаТЧ.ОбъектРасчетов = ДокументОбъект.ОбъектРасчетов;
			КонецЦикла;
			
			Если ДокументОбъект.СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ Тогда
				Для Каждого СтрокаТЧ Из ДокументОбъект.ТоварыПоДаннымПользователя Цикл
	    			Если ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) Тогда
	    				Продолжить;
					КонецЕсли;
					
	    			СтрокаТЧ.ОбъектРасчетов = ДокументОбъект.ОбъектРасчетов;
				КонецЦикла;		
			КонецЕсли; 
    		            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
                        
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();		
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
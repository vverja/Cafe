
#Область ПрограммныйИнтерфейс

// Процедура формирует отчет-расшифровку, по описанию, подготовленному соотвествующей фукнцией клиентского модуля 
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ОписаниеОбработкиРасшифровки - ОписаниеОбработкиРасшифровкиКомпоновкиДанных - значение, сформированное соотвествующей клиентской функцией
//
Процедура ОбработатьРасшифровку(Форма, ИмяРеквизитаФормы, ОписаниеОбработкиРасшифровки) Экспорт
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы]);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, 
																	ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	КонецЕсли;
	
	// Получить таблицу для вывода отчета.
	ТаблицаРезультатаОтчета = Форма["Таблица" + ИмяРеквизитаФормы];
	ТаблицаРезультатаОтчета.Очистить();
	
	// Вывести отчет.
	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);
	
	Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

// Процедура формирует отчет, расположенный в форме настройками, которые сделал пользователь 
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ИмяОтчета - Строка - имя формируемого отчета в метаданных
//		ИмяВариантаНастроек - Строка - имя варианта отчета в настройках отчета
//
Процедура СформироватьОтчет(Форма, ИмяРеквизитаФормы, ИмяОтчета, ИмяВариантаНастроек) Экспорт
	Перем ДанныеРасшифровки;
	
	Если Не ПравоДоступа("Использование", Метаданные.Отчеты[ИмяОтчета]) Тогда
		Возврат;
	КонецЕсли;
	
	// При обновлении отчета применяются пользовательские настройки.
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);		
	
	Форма["АдресСхемы" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	ОтчетОбъект.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ПараметрМакетОформления = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если ПараметрМакетОформления.Значение = "Main" 
			Или ПараметрМакетОформления.Значение = "Основной" Тогда
			ПараметрМакетОформления.Значение = "ОформлениеОтчетовБежевый";
			ПараметрМакетОформления.Использование = Истина;
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ПараметрМакетОформления = ЭлементСтруктуры.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
				Если ПараметрМакетОформления.Значение = "Main" 
					Или ПараметрМакетОформления.Значение = "Основной" Тогда
					ПараметрМакетОформления.Значение = "ОформлениеОтчетовБежевый";
					ПараметрМакетОформления.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Форма.Элементы["Таблица" + ИмяРеквизитаФормы].РежимМасштабированияПросмотра = РежимМасштабированияПросмотра.Обычный;
	КонецЕсли;
	
	// Вывести отчет.
	ТаблицаРезультатаОтчета = Форма["Таблица" + ИмяРеквизитаФормы];
	ТаблицаРезультатаОтчета.Очистить();
	
	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);

	Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

// Процедура инициализирует отчет, расположенный в форме настройками по умолчанию и устанавливает контекстные отборы 
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ИмяОтчета - Строка - имя формируемого отчета в метаданных
//		ИмяВариантаНастроек - Строка - имя варианта отчета в настройках отчета
//      Отбор - Структура - ключ - имя отбора, значение - значение отбора
//      Параметры - Структура - ключ - имя параметра, значение - значение параметра
//
Процедура УстановитьСтандартныеНастройки(Форма, ИмяРеквизитаФормы, ИмяОтчета, ИмяВариантаНастроек, Отбор, Параметры = Неопределено) Экспорт
	Если Не ПравоДоступа("Использование", Метаданные.Отчеты[ИмяОтчета]) Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);		
	
	Форма["АдресСхемы" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	НастройкиКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВариантаНастроек].Настройки;
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
	Для Каждого Элемент из Отбор Цикл
		ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.Ключ);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Элемент.Значение;
		ЭлементОтбора.Использование = Истина;
	КонецЦикла;
	
	Если Параметры <> Неопределено Тогда
		Для каждого Элемент Из Параметры Цикл
			ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Ключ, Элемент.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

#Область ПостобработкаОтчетов

// Процедура изменяет настройки диаграмм и их элементов в части оформления 
// Параметры оформления (поддерживаемые) могут использовать независимо.
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ТабличныйДокумент - ТабличныйДокумент - результат вывода отчета
//		ПараметрыДиаграмм - Структура - Структура изменяемых параметров диаграмм
//			Поддерживаемые параметры:
//				МаксимумСерийКоличество - Число - больше 0, определяет количество выводимых серий диаграммы, "лишние" серии объединяются в сводную серию.
//					Значение 999 используется для снятия ограничения и вывода всех серий.
//				МаксимумСерийПроцент - Число - 0 - 100%, , определяет количество выводимых серий диаграммы, "лишние" серии объединяются в сводную серию. 
//					Значение 999 используется для снятия ограничения и вывода всех серий.
//				ТипДиаграммы - Строка - название типа диаграммы, как оно задано в конфигураторе
//				ВыделениеСерийДиаграмм - Число - "0" - не выделять, "1" - выделять первую серию, "2" - Выделять отслеживаемые аналитики
//				ГрадиентСерийДиаграмм - Булево - включает/отключает режима градиента цветом серий данных
//
Процедура ОформитьДиаграммыОтчета(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм = Неопределено) Экспорт
	Если ПараметрыДиаграмм = Неопределено Тогда
		ПараметрыДиаграмм = ПараметрыДиаграмм(КомпоновщикНастроек);
	КонецЕсли;
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		ОбъектРисунка = Рисунок.Объект;
		Если ТипЗнч(ОбъектРисунка) = Тип("Диаграмма") Тогда
			Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
			Рисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
			
			УстановитьОформлениеПоУмолчаниюДиаграммы(ОбъектРисунка, ПараметрыДиаграмм);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьПараметрыОформленияДиаграмм(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм);
КонецПроцедуры

// Возвращает структуру параметров диаграмм для переопределения
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
// Возвращаемое значение:
//		Структура - в ключе задается имя параметра, в значении - значение параметры
Функция ПараметрыДиаграмм(КомпоновщикНастроек) Экспорт
	ПараметрыДиаграмм = Новый Структура;
	
	ПараметрМаксимумСерий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "МаксимумСерийКоличество");
	Если ПараметрМаксимумСерий <> Неопределено И ПараметрМаксимумСерий.Использование Тогда
		ПараметрыДиаграмм.Вставить("МаксимумСерийКоличество", ПараметрМаксимумСерий.Значение);
	КонецЕсли;
	
	ПараметрТипДиаграммы = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ТипДиаграммы");
	Если ПараметрТипДиаграммы <> Неопределено И ПараметрТипДиаграммы.Использование Тогда
		ПараметрыДиаграмм.Вставить("ТипДиаграммы", ПараметрТипДиаграммы.Значение);
	КонецЕсли;
	
	ПараметрВыделениеСерийДиаграмм = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВыделениеСерийДиаграмм");
	Если ПараметрВыделениеСерийДиаграмм <> Неопределено И ПараметрВыделениеСерийДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ВыделениеСерийДиаграмм", ПараметрВыделениеСерийДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрГрадиентСерийДиаграмм = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ГрадиентСерийДиаграмм");
	Если ПараметрГрадиентСерийДиаграмм <> Неопределено И ПараметрГрадиентСерийДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ГрадиентСерийДиаграмм", ПараметрГрадиентСерийДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрОтображениеМаркеровТочекДиаграмм = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОтображениеМаркеровТочекДиаграмм");
	Если ПараметрОтображениеМаркеровТочекДиаграмм <> Неопределено И ПараметрОтображениеМаркеровТочекДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ОтображениеМаркеровТочекДиаграмм", ПараметрОтображениеМаркеровТочекДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрОтслеживаемыеАналитики = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОтслеживаемыеАналитики");
	Если ПараметрОтслеживаемыеАналитики <> Неопределено И ПараметрОтслеживаемыеАналитики.Использование Тогда
		ПараметрыДиаграмм.Вставить("ОтслеживаемыеАналитики", ПараметрОтслеживаемыеАналитики.Значение);
	КонецЕсли;
	
	Возврат ПараметрыДиаграмм;
КонецФункции

// Процедура удаляет строки с вспомогательными параметрами из секции параметров отчета 
//
// Параметры:
//		ТабличныйДокумент - ТабличныйДокумент - результат вывода отчета
//		НеиспользуемыеПараметрыОтчета - Массив - представления несипользуемых параметров отчета
//
Процедура СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ТабличныйДокумент, ПараметрыОтчета) Экспорт
	СкрываемыеПараметрыОтчета = Новый Массив;
	Для Каждого ПараметрОтчета Из ПараметрыОтчета Цикл
		ДобавитьПредставленияПараметраВМассив(СхемаКомпоновкиДанных, КомпоновщикНастроек, СкрываемыеПараметрыОтчета, ПараметрОтчета);
	КонецЦикла;
	
	Для Каждого СкрываемыйПараметрОтчета Из СкрываемыеПараметрыОтчета Цикл 
		ВосстановитьЗаголовокПараметров = Ложь;
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СкрываемыйПараметрОтчета);
		Если НайденнаяОбласть <> Неопределено 
			И НайденнаяОбласть.РежимИзмененияРазмераКолонки = РежимИзмененияРазмера.Обычный Тогда
			УдаляемаяОбласть = ТабличныйДокумент.Область(НайденнаяОбласть.Верх,, НайденнаяОбласть.Низ);
			
			Если СтрНайти(ТабличныйДокумент.Область(НайденнаяОбласть.Верх, НайденнаяОбласть.Лево - 1).Текст, 
					НСтр("ru='Параметры';uk='Параметри'") + ":") > 0 Тогда
				ВосстановитьЗаголовокПараметров = Истина;
				Строка = НайденнаяОбласть.Верх;
				Колонка = НайденнаяОбласть.Лево - 1;
			КонецЕсли;
			
			ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Если ВосстановитьЗаголовокПараметров
				И ПустаяСтрока(ТабличныйДокумент.Область(Строка, Колонка + 1, Строка, Колонка + 1).Текст) Тогда
				ВосстановитьЗаголовокПараметров = Ложь;
			КонецЕсли;
			
			Если ВосстановитьЗаголовокПараметров Тогда
				ТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст = НСтр("ru='Параметры';uk='Параметри'") + ":";
			КонецЕсли;
			
			Если ТабличныйДокумент.ФиксацияСверху <> 0 Тогда
				ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ФиксацияСверху - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура добавляет в массив вспомогательные параметры отчета,
// которые не отключаются автоматически по значениям функциональных опций
// Следует использовать совместно с методом ОтчетыУТПереопределяемый.НастроитьПараметрыОтборыПоФункциональнымОпциям
//
// Параметры:
//		ПараметрыОтчета - Массив - представления несипользуемых параметров отчета
//
Процедура ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ПараметрыОтчета) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ПараметрыОтчета.Добавить("ПоказыватьПродажи");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ПараметрыОтчета.Добавить("Валюта");
		ПараметрыОтчета.Добавить("ВалютаОтчета");
		ПараметрыОтчета.Добавить("ДанныеОтчета");
		ПараметрыОтчета.Добавить("ДанныеПоДенежнымСредствам");
		ПараметрыОтчета.Добавить("ДанныеПоРасчетам");
		ПараметрыОтчета.Добавить("ВыводитьСуммы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		ПараметрыОтчета.Добавить("ВидЦены");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
		ПараметрыОтчета.Добавить("ЕдиницыКоличества");
	КонецЕсли;
КонецПроцедуры

// Перебирает ячейки макета компоновки и подменяет их текст.
//
// Параметры:
//		ПараметрыЗамены - Структура - Ключ определяет текст, заданный в схеме компоновки (обрамленный знаками "%"), значение - текст замены
//		МакетКомпоновки - МакетКомпоновкиДанных - Макет компоновки, заголовки которого будут подменены
Процедура УстановитьЗаголовкиМакетаКомпоновки(ПараметрыЗамены, МакетКомпоновки) Экспорт
	
	Если Не ТипЗнч(ПараметрыЗамены) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекМакет Из МакетКомпоновки.Макеты Цикл
		Если ТипЗнч(ТекМакет.Макет) <> Тип("МакетОбластиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицыКомпоновки Из ТекМакет.Макет Цикл
			Для Каждого ЯчейкаТаблицыОбластиКомпоновки Из СтрокаТаблицыКомпоновки.Ячейки Цикл
				Для Каждого Элемент Из ЯчейкаТаблицыОбластиКомпоновки.Элементы Цикл
					Для каждого Поле Из ПараметрыЗамены Цикл
						СтрокаЗамены = "%" + Поле.Ключ + "%";
						Если СтрНайти(Элемент.Значение, СтрокаЗамены) > 0 Тогда
							Элемент.Значение = СтрЗаменить(Элемент.Значение, СтрокаЗамены, Поле.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура осуществляет поиск представлений параметров по их имени
// и помещает найденные представления в переданный массив
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема отчета
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		Параметры - Масиив - скрываемые из табличного документа отчета параметры
//		ИмяПараметра - Строка - имя скрываемого параметра отчета
//
Процедура ДобавитьПредставленияПараметраВМассив(СхемаКомпоновкиДанных, КомпоновщикНастроек, Параметры, ИмяПараметра)
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
	Если Не Параметр = Неопределено Тогда
		ЗаголовокПараметра = Параметр.Заголовок;
		
		ПользовательскоеПредставлениеПараметра = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ИмяПараметра).ПредставлениеПользовательскойНастройки;
		
		Параметры.Добавить(ЗаголовокПараметра);
		Параметры.Добавить(ПользовательскоеПредставлениеПараметра);
	КонецЕсли;
КонецПроцедуры

#Область СтандартныеСтроковыеПараметрыЗамены
	
// Возвращает структуру для подмены заголовков полей веса, объема, таблицы группировки количества по единицам
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
// Возвращаемое значение:
//		Структура - в ключе задается шаблон замены заголовка, в значении - значение замены
Функция СтруктураЗаголовковПолейЕдиницИзмерений(КомпоновщикНастроек) Экспорт
	
	СтруктураЗаголовков = Новый Структура;
	
	ЕдиницаВеса = Строка(Константы.ЕдиницаИзмеренияВеса.Получить());
	ЕдиницаОбъема = Строка(Константы.ЕдиницаИзмеренияОбъема.Получить());
	ПараметрЕдиницыКоличества = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ЕдиницыКоличества");
	Если ПараметрЕдиницыКоличества <> Неопределено И ПараметрЕдиницыКоличества.Значение = 0 Тогда
		ЗаголовокЕдИзм = НСтр("ru='Итого товаров в единицах хранения';uk='Разом товарів у одиницях зберігання'");
	Иначе
		ЗаголовокЕдИзм = НСтр("ru='Итого товаров в единицах для отчетов';uk='Разом товарів у одиницях для звітів'");
	КонецЕсли;
	
	СтруктураЗаголовков.Вставить("ЕдиницаВеса", ЕдиницаВеса);
	СтруктураЗаголовков.Вставить("ЕдиницаОбъема", ЕдиницаОбъема);
	СтруктураЗаголовков.Вставить("ЗаголовокГруппировкиЕдИзм", ЗаголовокЕдИзм);

	Возврат СтруктураЗаголовков;
	
КонецФункции

// Возвращает структуру для подмены шаблона %ВалютаОтчета%
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
// Возвращаемое значение:
//		Структура - в ключе задается шаблон замены заголовка, в значении - значение замены
Функция СтруктураЗаголовковВалют(КомпоновщикНастроек, Скобки = Истина) Экспорт
	СтруктураЗаголовковПолей = Новый Структура;
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДанныеОтчета");
	ДанныеОтчета = ПараметрДанныеОтчета.Значение;
	
	ВалютаУправленческогоУчета		= Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегламентированногоУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ИспользоватьНесколькоВалют Тогда
		Если ДанныеОтчета = 1 
			Или ДанныеОтчета = 2 Тогда
			СтруктураЗаголовковПолей.Вставить("ВалютаОтчета", ?(Скобки, "(", "") + ВалютаУправленческогоУчета + ?(Скобки, ")", ""));
		ИначеЕсли ДанныеОтчета = 3 Тогда
			СтруктураЗаголовковПолей.Вставить("ВалютаОтчета", ?(Скобки, "(", "") + ВалютаРегламентированногоУчета + ?(Скобки, ")", ""));
		КонецЕсли;
	Иначе
		СтруктураЗаголовковПолей.Вставить("ВалютаОтчета", "");
	КонецЕсли;
	
	Возврат СтруктураЗаголовковПолей;
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область НастройкиОтчетов

// Процедура включает родительские группировки в пользовательских настройках, если включена хоть одна дочерняя
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ПользовательскиеНастройкиМодифицированы - Булево - обязательный к установке признак модификации польз. настроек отчета
//
Процедура ИсправитьНастройкиГруппировок(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы) Экспорт
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	Настройки = КомпоновщикНастроек.Настройки;
	
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		Если (ТипЗнч(ПользовательскаяНастройка) = Тип("ГруппировкаКомпоновкиДанных") 
			Или ТипЗнч(ПользовательскаяНастройка) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			Или ТипЗнч(ПользовательскаяНастройка) = Тип("ТаблицаКомпоновкиДанных"))
			И ПользовательскаяНастройка.Использование Тогда
			ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройка, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура устанавливает все связанные параметры валюты отчета
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ПользовательскиеНастройкиМодифицированы - Булево - обязательный к установке признак модификации польз. настроек отчета
//
Процедура УстановитьПараметрыВалютыОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы) Экспорт
	ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДанныеОтчета");
	Если ПараметрДанныеОтчета <> Неопределено Тогда
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
		Если Не ЗначениеЗаполнено(ПараметрДанныеОтчета.Значение) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДанныеОтчета", 1);
			
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;
		
		ПараметрВалюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Валюта");
		Если ПараметрВалюта <> Неопределено Тогда
			Если ПараметрДанныеОтчета.Значение = 1
				ИЛИ ПараметрДанныеОтчета.Значение = 2 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Валюта", ВалютаУправленческогоУчета);
			ИначеЕсли ПараметрДанныеОтчета.Значение = 3 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Валюта", ВалютаРегламентированногоУчета);
			КонецЕсли;
				
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДанныеРасчета");
	Если ПараметрДанныеОтчета <> Неопределено Тогда
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
		ПараметрВалюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВалютаРасчета");
		Если ПараметрВалюта <> Неопределено Тогда
			Если ПараметрДанныеОтчета.Значение = 1
				ИЛИ ПараметрДанныеОтчета.Значение = 2 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВалютаРасчета", ВалютаУправленческогоУчета);
			ИначеЕсли ПараметрДанныеОтчета.Значение = 3 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВалютаРасчета", ВалютаРегламентированногоУчета);
			ИначеЕсли ПараметрДанныеОтчета.Значение = 0 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВалютаРасчета", Справочники.Валюты.ПустаяСсылка());
			КонецЕсли;
				
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает формулу расчета и формат динамического периода
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - СКД отчета
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ДополнятьПериод - Булево - признак использования дополнения периода
//
Процедура НастроитьДинамическийПериод(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДополнятьПериод = Ложь) Экспорт 
	
	ПараметрПериодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");
	
	Если ПараметрПериодичность <> Неопределено 
		И КомпоновкаДанныхКлиентСервер.ПолеИспользуется(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных("ДинамическийПериод")) Тогда
		
		ИскомоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДинамическийПериод");
		
		Если ИскомоеПоле <> Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(ПараметрПериодичность.Значение) Тогда
				ВызватьИсключение НСтр("ru='Некорректная настройка параметра ""Периодичность"".';uk='Некоректна настройка параметра ""Періодичність"".'") ;
			КонецЕсли;
			
			СтрокаДлительностьПериода = ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрПериодичность.Значение);
			ИскомоеПоле.Выражение = "Период" + СтрокаДлительностьПериода;
			
			ПараметрОформленияФормат = ИскомоеПоле.Оформление.Элементы.Найти("Формат");
			ПараметрОформленияФормат.Значение = ФорматнаяСтрокаПериодовКомпоновкиДанных(ПараметрПериодичность.Значение);
			ПараметрОформленияФормат.Использование = Истина;
			
			Если ДополнятьПериод Тогда
				
				ДополнениеПериода = ТипДополненияПериодаКомпоновкиДанных[СтрокаДлительностьПериода];
				ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
				
				Если ПараметрПериод <> Неопределено Тогда
					
					ПолеДинамическийПериод = Новый ПолеКомпоновкиДанных("ДинамическийПериод");
					Группировки = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(КомпоновщикНастроек);
					
					ЛитералыПоддерживаемыхПолейПериодов = "ПериодГод,ПериодПолугодие,ПериодКвартал,ПериодМесяц,ПериодДекада,ПериодНеделя,ПериодДень";
					ПоддерживаемыеПоляПериодов = СтрРазделить(ЛитералыПоддерживаемыхПолейПериодов, ",");
					
					Для Каждого Группировка Из Группировки Цикл
						
						Если Группировка.Значение.ПоляГруппировки.Элементы.Количество() = 1
							И Группировка.Значение.ПоляГруппировки.Элементы[0].Поле = ПолеДинамическийПериод Тогда
							
							ГруппировкаДинамическийПериод = Группировка.Значение.ПоляГруппировки.Элементы[0];
							ГруппировкаРодитель = Группировка.Значение.Родитель;
							
							НачалоПериодаДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
							КонецПериодаДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
								
							// Включим дополнение периода в зависимости от размещения группировки
							ГруппировкаДинамическийПериод.ТипДополнения = ДополнениеПериода;
							
							// Корневой элемент или группировка первого уровня
							Если ТипЗнч(ГруппировкаРодитель) = Тип("НастройкиКомпоновкиДанных")
									Или ТипЗнч(ГруппировкаРодитель) = Тип("ТаблицаКомпоновкиДанных") 
									Или ТипЗнч(ГруппировкаРодитель) = Тип("ДиаграммаКомпоновкиДанных") Тогда
							
								НачалоПериодаДополнения = ПараметрПериод.Значение.ДатаНачала;
								КонецПериодаДополнения = ПараметрПериод.Значение.ДатаОкончания;
								
							// Есть родительская группировка и в ней одно поле, что характерно для группировок по периодам
							ИначеЕсли ТипЗнч(ГруппировкаРодитель) = Тип("ГруппировкаКомпоновкиДанных")
									Или ТипЗнч(ГруппировкаРодитель) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
									Или ТипЗнч(ГруппировкаРодитель) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
							
								ЭлементыГруппировкиРодителя = ГруппировкаРодитель.ПоляГруппировки.Элементы;
								Если ЭлементыГруппировкиРодителя.Количество() = 1 Тогда
									
									ИндексПоддерживаемогоПериодаРодителя = ПоддерживаемыеПоляПериодов.Найти(Строка(ЭлементыГруппировкиРодителя[0].Поле));
									Если ИндексПоддерживаемогоПериодаРодителя <> Неопределено Тогда
										ПоддерживаемыйПериодРодитель = ПоддерживаемыеПоляПериодов[ИндексПоддерживаемогоПериодаРодителя];
										
										ТипДополненияПоРодительскойГруппировке = ТипДополненияПериодаКомпоновкиДанных[СтрЗаменить(ПоддерживаемыйПериодРодитель, "Период", "")];
										
										НачалоПериодаДополнения = ТипДополненияПоРодительскойГруппировке;
										КонецПериодаДополнения = ТипДополненияПоРодительскойГруппировке;
									
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
							ГруппировкаДинамическийПериод.НачалоПериода = НачалоПериодаДополнения;
							ГруппировкаДинамическийПериод.КонецПериода = КонецПериодаДополнения;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение параметра схемы компоновки данных
//
// Параметры:
//	СхемаКомпоновкиДанных	- СхемаКомпоновкиДанных
//	Параметр	- имя параметра КД для которого нужно вернуть значение параметра
//
// Возвращаемое значение:
//	ЗначениеПараметра (ПараметрСхемыКомпоновкиДанных, Неопределено)
//
Функция ПолучитьПараметрСКД(СхемаКомпоновкиДанных, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		ЗначениеПараметра = СхемаКомпоновкиДанных.Параметры.Найти(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Устанавливает параметр схемы компоновки данных
//
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных
//	Параметр - параметр, который требуется установить (Строка, ПараметрКомпоновкиДанных)
//	Значение - значение, которое требуется установить (Произвольный)
//	Использование - признак испольнования параметра КД (Булево, по умолчанию: Истина)
//
// Возвращаемое значение:
//	ЗначениеПараметра - установленный параметр настроек КД (Неопределено, ПараметрСхемыКомпоновкиДанных)
//
Функция УстановитьПараметрСКД(СхемаКомпоновкиДанных, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрСКД(СхемаКомпоновкиДанных, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		Если ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных") Тогда
			ЗначениеПараметра.Использование	= Использование;
		КонецЕсли;
		ЗначениеПараметра.Значение		= Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

#КонецОбласти

#Область МетодыИВыраженияСистемыКомпоновкиДанных

// Находит среди элементов полей СКД поле по полному имени
//
// Параметры:
//	Элементы - поля СКД
//	ПолноеИмя - полное имя поля СКД
//
// Возвращаемое значение:
//	Поле - поле СКД
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции

// Получает и возвращает запрос из переданного макета компоновки данных
//
// Параметры:
//  Макет - макет компоновки данных, из которого требуется получить запрос.
//  ИмяНабораДанных - имя набора данных из макета, для которого получается запрос.
//
// Возвращаемое значение:
//  Запрос, сформированный на основании макета компоновки
//
Функция ПолучитьЗапросИзМакетаКомпоновки(Макет, ИмяНабораДанных) Экспорт

	Запрос = Новый Запрос(Макет.НаборыДанных[ИмяНабораДанных].Запрос);

	Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;

	Возврат Запрос;

КонецФункции

// Функция возвращает запрос схемы компоновки данных с учетом настроек
//
// Параметры:
//	СхемаКомпоновки						- Схема компоновки, которая содержит запрос к данным
//	ПользовательскиеНастройкиКомпоновки - НастройкиКомпоновкиДанных, настройки (отбор), которые установил пользователь
//	СтруктураПараметров					- Структура, которая содержит значения параметров
//	СтруктураОтбора						- Структура, которая содержит дополнительный отбор (по периоду, организации и т.д.)
//	СтруктураВидовСравненияОтбора		- Структура, которая содержит вид сравнения применяемый в отборе
//
// Возвращаемое значение
//	Запрос
//
Функция ПолучитьЗапросСУчетомНастроек(СхемаКомпоновки, ПользовательскиеНастройкиКомпоновки = Неопределено, СтруктураПараметров = Неопределено, СтруктураОтбора = Неопределено, СтруктураВидовСравненияОтбора = Неопределено) Экспорт
	
	// Получим настройки по умолчанию и добавим в них пользовательские настройки
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	НастройкиКомпоновки = Компоновщик.ПолучитьНастройки();
	
	Если ПользовательскиеНастройкиКомпоновки <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновки.Отбор, ПользовательскиеНастройкиКомпоновки.Отбор);
	КонецЕсли; 
	
	// Добавим в настройки дополнительный отбор
	Если СтруктураОтбора <> Неопределено Тогда
		Для каждого ЭлементОтбора Из СтруктураОтбора Цикл
			Если НРег(ЭлементОтбора.Ключ) = "период" Тогда
				Если НастройкиКомпоновки.ДоступныеПоляОтбора.Элементы.Найти("Дата") <> Неопределено Тогда
					Если ЗначениеЗаполнено(ЭлементОтбора.Значение.ДатаНачала) Тогда
						КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновки.Отбор, "Дата", НачалоДня(ЭлементОтбора.Значение.ДатаНачала), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					КонецЕсли; 
					Если ЗначениеЗаполнено(ЭлементОтбора.Значение.ДатаОкончания) Тогда
						КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновки.Отбор, "Дата", КонецДня(ЭлементОтбора.Значение.ДатаОкончания), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					КонецЕсли; 
				КонецЕсли; 
				
				ПараметрПериод = НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("Период");
				Если ПараметрПериод <> Неопределено Тогда
					ПараметрПериод.Значение = ЭлементОтбора.Значение;
				КонецЕсли; 
			Иначе
				
				ВидСравненияОтбора = Неопределено;
				
				Если СтруктураВидовСравненияОтбора <> Неопределено Тогда
					СтруктураВидовСравненияОтбора.Свойство(ЭлементОтбора.Ключ, ВидСравненияОтбора);
				КонецЕсли;
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновки.Отбор, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияОтбора);
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	// Установим в настройке параметры
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого ТекущийПараметр Из СтруктураПараметров Цикл
			НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(ТекущийПараметр.Ключ,  ТекущийПараметр.Значение);
		КонецЦикла;
	КонецЕсли;	
	
	// Получим запрос из макета компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки);
	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных[0].Запрос);
	
	// Установим параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса ИЗ ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетКомпоновки.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;
	
	Возврат Запрос;

КонецФункции

// Получает и возвращает макет компоновки данных для схемы компоновки
//
// Параметры:
//  СхемаКомпоновки - схема компоновки данных, для которой получается макет компоновки
//  Настройки - настройки компоновки, применяемые к схеме
//
// Возвращаемое значение:
//  Макет компоновки данных
//
Функция ПолучитьМакетКомпоновки(СхемаКомпоновки, Настройки) Экспорт

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Возврат КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

КонецФункции

// Удаляет отбор из настроек и пользовательских настроек отчета
// Если переданы настройки компоновки данных, то только из них
//
// Параметры
//  НастройкиКомпоновкиДанных - КомпоновщикНастроек, НастройкиКомпоновкиДанных 
//  ИмяЭлемента  - Строка - имя элемента, который будет удален.
//
Процедура УдалитьЭлементОтбораИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Настройки.Отбор, ИмяЭлемента);
	Для Каждого ЭлементОтбора ИЗ ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		
		ЭлементПользовательскихНастроек = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено Тогда
			ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
		Иначе
			Для Каждого ЭлементПользНастроек Из ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементПользНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
					ЭлементыПользовательскихОтборов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ЭлементПользНастроек, ИмяЭлемента);
					Для Каждого ЭлементПользовательскогоОтбора ИЗ ЭлементыПользовательскихОтборов Цикл
						ЭлементПользНастроек.Элементы.Удалить(ЭлементПользовательскогоОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет параметр из пользовательских настроек отчета
//
// Параметры
//  НастройкиКомпоновкиДанных - КомпоновщикНастроек, НастройкиКомпоновкиДанных 
//  ИмяПараметра  - Строка - имя параметра, который будет удален.
//
Процедура УдалитьПараметрИзПользовательскихНастроекОтчета(НастройкиКомпоновкиДанных, ИмяПараметра) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЗначениеПоиска = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЭлементыПараметыДанных = Настройки.ПараметрыДанных;
	
	ЭлементПараметрыДанных = ЭлементыПараметыДанных.НайтиЗначениеПараметра(ЗначениеПоиска);
	Если ЭлементПараметрыДанных <> Неопределено Тогда
		ЭлементПараметрыДанных.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
КонецПроцедуры

// Удаляет выбранное поле из настроек и пользовательских настроек отчета
//
// Параметры
//  НастройкиКомпоновкиДанных - КомпоновщикНастроек, НастройкиКомпоновкиДанных 
//  ИмяЭлемента  - Строка - имя элемента, который будет удален.
//
Процедура УдалитьВыбранноеПолеИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЗначениеПоиска  = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	МассивЭлементов = Новый Массив;
	
	ВыбранныеПоля   = Настройки.Выбор;
	ИдентификаторПользовательскойНастройкиВыбранныхПолей = ВыбранныеПоля.ИдентификаторПользовательскойНастройки;
	
	НайтиВыбранноеПолеРекурсивно(ВыбранныеПоля.Элементы, МассивЭлементов, ЗначениеПоиска);
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		ИдентификаторПользовательскойНастройкиЭлемента = Настройки.Выбор.ПолучитьИдентификаторПоОбъекту(Элемент);;
		Если Элемент.Родитель <> Неопределено Тогда
			Элемент.Родитель.Элементы.Удалить(Элемент);
		Иначе
			ВыбранныеПоля.Элементы.Удалить(Элемент);
		КонецЕсли;
		
		ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройкиВыбранныхПолей);
		Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
			ЭлементПользовательскихНастроек = ПользовательскиеНастройкиВыбранныхПолей.ПолучитьОбъектПоИдентификатору(ИдентификаторПользовательскойНастройкиЭлемента);
			Если ЭлементПользовательскихНастроек <> Неопределено Тогда
				Если ЭлементПользовательскихНастроек.Родитель <> Неопределено Тогда
					ЭлементПользовательскихНастроек.Родитель.Элементы.Удалить(ЭлементПользовательскихНастроек);
				Иначе
					ПользовательскиеНастройкиВыбранныхПолей.Элементы.Удалить(ЭлементПользовательскихНастроек);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиВыбранноеПолеРекурсивно(КоллекцияЭлементов, МассивЭлементов, ЗначениеПоиска)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Поле = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(Элемент);
			КонецЕсли;
		Иначе
			НайтиВыбранноеПолеРекурсивно(Элемент.Элементы, МассивЭлементов, ЗначениеПоиска);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Удаляет группировку из настроек и пользовательских настроек отчета
//
// Параметры
//  НастройкиКомпоновкиДанных - КомпоновщикНастроек, НастройкиКомпоновкиДанных 
//  ИмяЭлемента  - Строка - имя элемента, который будет удален.
//
Процедура УдалитьГруппировкуИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЗначениеПоиска  = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	СоответствиеЭлементов = Новый Соответствие;
	
	СтруктураГруппировок   = Настройки.Структура;
	ИдентификаторПользовательскойНастройкиСтруктуры = СтруктураГруппировок.ИдентификаторПользовательскойНастройки;
	
	НайтиГруппировкуРекурсивно(СтруктураГруппировок, СоответствиеЭлементов, ЗначениеПоиска);
	Для Каждого Группировка Из СоответствиеЭлементов Цикл
		Если Группировка.Ключ.ПоляГруппировки.Элементы.Количество() = 1 Тогда
			Группировка.Ключ.Родитель.Структура.Удалить(Группировка.Ключ);
		Иначе
			Группировка.Ключ.ПоляГруппировки.Элементы.Удалить(Группировка.Значение);
		КонецЕсли;
		
		ИдентификаторПользовательскойНастройкиЭлемента = Группировка.Ключ.ИдентификаторПользовательскойНастройки;
		
		ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройкиЭлемента);
		Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
			ЭлементПользовательскихНастроек = ПользовательскиеНастройкиВыбранныхПолей.ПолучитьОбъектПоИдентификатору(ИдентификаторПользовательскойНастройкиЭлемента);
			Если ЭлементПользовательскихНастроек <> Неопределено Тогда
				Если ЭлементПользовательскихНастроек.Родитель <> Неопределено Тогда
					ЭлементПользовательскихНастроек.Родитель.Элементы.Удалить(ЭлементПользовательскихНастроек);
				Иначе
					ПользовательскиеНастройкиВыбранныхПолей.Элементы.Удалить(ЭлементПользовательскихНастроек);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НайтиГруппировкуРекурсивно(КоллекцияЭлементов, СоответствиеЭлементов, ЗначениеПоиска)
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Для Каждого ПолеГруппировки Из Элемент.ПоляГруппировки.Элементы Цикл 
				Если ПолеГруппировки.Поле = ЗначениеПоиска Тогда
					СоответствиеЭлементов.Вставить(Элемент, ПолеГруппировки)
				КонецЕсли;
			КонецЦикла;
			НайтиГруппировкуРекурсивно(Элемент.Структура, СоответствиеЭлементов, ЗначениеПоиска);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			НайтиГруппировкуРекурсивно(Элемент.Строки, СоответствиеЭлементов, ЗначениеПоиска);
			НайтиГруппировкуРекурсивно(Элемент.Колонки, СоответствиеЭлементов, ЗначениеПоиска);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			НайтиГруппировкуРекурсивно(Элемент.Серии, СоответствиеЭлементов, ЗначениеПоиска);
			НайтиГруппировкуРекурсивно(Элемент.Точки, СоответствиеЭлементов, ЗначениеПоиска);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Отключает использование выбранного поле в пользовательских настройках отчета
//
// Параметры
//  НастройкиКомпоновкиДанных - КомпоновщикНастроек, НастройкиКомпоновкиДанных 
//  ИмяЭлемента  - Строка - имя элемента, который будет отключен.
//
Процедура ОтключитьВыбранноеПолеВПользовательскихНастройках(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ВыбранныеПоля = Настройки.Выбор;
	ИдентификаторПользовательскойНастройкиВыбранныхПолей = ВыбранныеПоля.ИдентификаторПользовательскойНастройки;
	
	ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(
		ИдентификаторПользовательскойНастройкиВыбранныхПолей);
	
	Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
		
		ЗначениеПоиска  = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		МассивЭлементов = Новый Массив;
		
		НайтиВыбранноеПолеРекурсивно(ПользовательскиеНастройкиВыбранныхПолей.Элементы, МассивЭлементов, ЗначениеПоиска);
		Для Каждого Элемент Из МассивЭлементов Цикл
			Элемент.Использование = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСимвола(ИмяСимвола) Экспорт
	ВозвращаемыйСимвол = "";
	
	Если ИмяСимвола = "ВК" Тогда
		ВозвращаемыйСимвол = Символы.ВК;
	ИначеЕсли ИмяСимвола = "Втаб" Тогда
		ВозвращаемыйСимвол = Символы.ВТаб;
	ИначеЕсли ИмяСимвола = "НПП" Тогда
		ВозвращаемыйСимвол = Символы.НПП;
	ИначеЕсли ИмяСимвола = "ПС" Тогда
		ВозвращаемыйСимвол = Символы.ПС;
	ИначеЕсли ИмяСимвола = "ПФ" Тогда
		ВозвращаемыйСимвол = Символы.ПФ;
	ИначеЕсли ИмяСимвола = "Таб" Тогда
		ВозвращаемыйСимвол = Символы.Таб;
	КонецЕсли;
	
	Возврат ВозвращаемыйСимвол
КонецФункции

Функция СтрЗаменитьКомпоновка(Строка, ПодстрокаПоиска, ПодстрокаЗамены) Экспорт
	Возврат СтрЗаменить(Строка, ПодстрокаПоиска, ПодстрокаЗамены);
КонецФункции

// Формирует новый макет компоновки после замены параметров в выражениях итоговых полей
// Вызывается из отчетов АнализСебестоимостиТоваровРасширенный и ВедомостьПоДенежнымСредствам
//
// Параметры
//  МакетКомпоновкиДанных - исходный макет, сформированный в отчете 
//  СхемаКомпоновкиДанных - схема компоновки отчета, в которой есть параметр ИспользуютсяОборотныеАналитики 
//							и этот параметр указан в выражениях итоговых полей
//	НастройкиОтчета - настройки, на основании которых будет формировать новый макет компоновки
//	ДанныеРасшифровки - данные расшифровки отчета
//
Процедура ОптимизацияИспользованияОборотнойАналитики(МакетКомпоновкиДанных, СхемаКомпоновкиДанных, НастройкиОтчета, Знач ДанныеРасшифровки) Экспорт
	ИспользуетсяОборотнаяАналитика = Ложь;
	
	Для Каждого СвязьНаборовДанных Из МакетКомпоновкиДанных.СвязиНаборовДанных Цикл 
		Если СвязьНаборовДанных.НаборДанныхИсточник = "ОборотнаяАналитика" 
			Или СвязьНаборовДанных.НаборДанныхПриемник = "ОборотнаяАналитика" Тогда
			
			ИспользуетсяОборотнаяАналитика = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ИспользуетсяОборотнаяАналитика", ИспользуетсяОборотнаяАналитика);
	
	Для Каждого ПолеИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл 
		Если СтрНайти(ПолеИтога.Выражение, "&ИспользуетсяОборотнаяАналитика") <> 0 Тогда
			ИмяПоляИтогаОсновнойАналитики = ПолеИтога.ПутьКДанным;
			ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИмяПоляИтогаОсновнойАналитики, ".");
			ИмяПоляИтогаПоДокументам = "Док_" + ЧастиИмени[ЧастиИмени.Количество()-1];
			
			ВыражениеИтога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Сумма(%1)", 
					?(ИспользуетсяОборотнаяАналитика, ИмяПоляИтогаПоДокументам, ИмяПоляИтогаОсновнойАналитики));
			ПолеИтога.Выражение = СтрЗаменить(ПолеИтога.Выражение, "&ИспользуетсяОборотнаяАналитика", ВыражениеИтога);
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
КонецПроцедуры

#Область ФункцииВычисленияПоказателей

// Вычисляет порядковое место числа относительно других чисел массива после его сортировки
//
// Параметры:
//	ДанныеГрупповойОбработкиКомпоновкиДанных - ТаблицаЗначений - обрабатываемая таблица СКД, место определяется для значений первой колонки
//	ПорядокСортировки - НаправлениеСортировкиКомпоновкиДанных - определяет, сверху или снизу массива будет вычисляться порядковое место
//
// Возвращаемое значение:
//	Число - поле СКД
//
Функция МестоВПорядке(ДанныеГрупповойОбработкиКомпоновкиДанных, ПорядокСортировки) Экспорт
	МестоВПорядке = 0;
	
	Данные			= ДанныеГрупповойОбработкиКомпоновкиДанных.Данные;
	ИмяПоля			= ДанныеГрупповойОбработкиКомпоновкиДанных.Данные.Колонки[0].Имя;
	
	Если ДанныеГрупповойОбработкиКомпоновкиДанных.ТекущийЭлемент <> Неопределено Тогда
		ЗначениеПоля	= ДанныеГрупповойОбработкиКомпоновкиДанных.ТекущийЭлемент[0];
		
		Если ЗначениеПоля = 0 Тогда
			Возврат	"<>";
		КонецЕсли;
		
		КопияДанных = Данные.Скопировать();
		КопияДанных.Сортировать(ИмяПоля + " " + ПорядокСортировки);
		
		ИскомаяСтрока = КопияДанных.Найти(ЗначениеПоля, ИмяПоля);
		
		Если ИскомаяСтрока <> Неопределено Тогда
			МестоВПорядке = КопияДанных.Индекс(ИскомаяСтрока) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МестоВПорядке;
КонецФункции

// Вычисляет сумму неклассифицированного оборота для отчетов, использующих оборотные аналитики
// Вызывается при расчете сумм ресурсов
//
// Параметры:
//	ДанныеГрупповойОбработкиКомпоновкиДанных - ДанныеГрупповойОбработкиКомпоновкиДанных
//			Состав колонок обрабатываемых данных: 
//				ИмяОборотнойАналитики - колонка со значениями оборотной аналитики
//				ИмяРесурса - колонка ресурсы основного набора данных
//				Об_ИмяРесурса - колонка ресурса набора данных по документам. Имя образуется путем добавления префикса "Об_" к имени колонки ИмяРесурса
//				Док_ИмяРесурса - колонка ресурса набора данных по оборотным аналитикам. Имя образуется путем добавления префикса "Об_" к имени колонки ИмяРесурса
//	ИмяРесурса - Строка - имя обрабатываемого ресурса
//	ИмяОборотнойАналитики - Строка - имя обрабатываемой аналитики
//
// Возвращаемое значение:
//	Число - поле СКД
//
Функция КлассификацияОборота(ДанныеГрупповойОбработкиКомпоновкиДанных, ИмяРесурса, ИтогРесурса, ИмяОборотнойАналитики, ЗначениеАналитики) Экспорт
	Данные = ДанныеГрупповойОбработкиКомпоновкиДанных.Данные;
	ТекущаяСтрока = ДанныеГрупповойОбработкиКомпоновкиДанных.ТекущийЭлемент;
	ВременныеДанные = ДанныеГрупповойОбработкиКомпоновкиДанных.ВременныеДанныеОбработки;
	ЗначениеОборота = 0;
	
	Если Не ВременныеДанные.Свойство("ОборотНакопительный") Тогда
		ВременныеДанные.Вставить("ОборотНакопительный", 0);
	КонецЕсли;
	Если Не ВременныеДанные.Свойство("НеклассифицированныйОборот") Тогда
		ВременныеДанные.Вставить("НеклассифицированныйОборот", ?(ИтогРесурса = Null, 0, ИтогРесурса));
	КонецЕсли;
	Если Не ВременныеДанные.Свойство("ОбработанноеЗначениеАналитики") Тогда
		ВременныеДанные.Вставить("ОбработанноеЗначениеАналитики", Новый Соответствие);
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ОбновлятьВременныеДанные = 
			// Расчет на 1-ом уровне группировки
			(ЗначениеАналитики <> Null И ВременныеДанные.ОбработанноеЗначениеАналитики[ЗначениеАналитики] = Неопределено)
			// Расчет на 2-ом и более уровнях группировки
			ИЛИ (ЗначениеАналитики = Null И ВременныеДанные.ОбработанноеЗначениеАналитики.Количество() = 0);

		Если ТекущаяСтрока["Док_"+ ИмяРесурса] = Null Тогда
			ЗначениеОборота = 0;
		ИначеЕсли ТекущаяСтрока["Об_"+ ИмяРесурса] > ТекущаяСтрока["Док_"+ ИмяРесурса] Тогда
			ЗначениеОборота = ТекущаяСтрока["Док_"+ ИмяРесурса];
		Иначе
			ЗначениеОборота = ТекущаяСтрока["Об_"+ ИмяРесурса];
		КонецЕсли;
		
		ЗначениеОборота = ?(ЗначениеОборота = Null, 0, ЗначениеОборота);
		
		Если ОбновлятьВременныеДанные Тогда
			ВременныеДанные.Вставить("ОборотНакопительный", 
				ВременныеДанные.ОборотНакопительный + ЗначениеОборота);
				
			ВременныеДанные.Вставить("НеклассифицированныйОборот", 
				ВременныеДанные.НеклассифицированныйОборот - ЗначениеОборота);
		КонецЕсли;
		
		Если ЗначениеАналитики = Null Тогда
			ЗначениеОборота = ВременныеДанные.НеклассифицированныйОборот;
		КонецЕсли;
		
		ВременныеДанные.ОбработанноеЗначениеАналитики.Вставить(ЗначениеАналитики, ЗначениеАналитики);
	Иначе 
		Если Данные.Итог("Док_"+ ИмяРесурса) = Null Тогда
			ЗначениеОборота = 0;
		ИначеЕсли Данные.Итог("Об_"+ ИмяРесурса) > Данные.Итог("Док_"+ ИмяРесурса) Тогда
			ЗначениеОборота = Данные.Итог("Док_"+ ИмяРесурса);
		Иначе
			ЗначениеОборота = Данные.Итог("Об_"+ ИмяРесурса);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеОборота;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает полное имя поля по частям
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД
//
// Возвращаемое значение:
//	масЧастей - массив, содержащий части полного имени
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = СтрНайти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = СтрНайти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции // ИзПолногоИмениПоляПолучитьЧасти()

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//	Элементы - поля СКД
//	Имя - имя поля СКД
//
// Возвращаемое значение:
//	Поле - поле СКД
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиПолеСКДПоИмени()

Процедура ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройка, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы)
	ИдентификаторПользовательскойНастройки = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
	
	Если Не ПустаяСтрока(ИдентификаторПользовательскойНастройки) Тогда
		ОбъектНастройки = ОтчетыКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки);
	Иначе
		ОбъектНастройки = ПользовательскаяНастройка;
	КонецЕсли;
	РодительОбъектаНастройки = ОбъектНастройки.Родитель;
	
	Если ТипЗнч(РодительОбъектаНастройки) = Тип("ГруппировкаКомпоновкиДанных") 
		Или ТипЗнч(РодительОбъектаНастройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипЗнч(РодительОбъектаНастройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		ИдентификаторПользовательскойНастройкиРодителя = РодительОбъектаНастройки.ИдентификаторПользовательскойНастройки;
		
		Если Не ПустаяСтрока(ИдентификаторПользовательскойНастройкиРодителя) Тогда
			ПользовательскаяНастройкаРодитель = ОтчетыКлиентСервер.НайтиПользовательскуюНастройку(ПользовательскиеНастройки, ИдентификаторПользовательскойНастройкиРодителя);
			ПользовательскаяНастройкаРодитель.Использование = Истина;
			ПользовательскиеНастройкиМодифицированы = Истина;
			
			ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройкаРодитель, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		Иначе
			ИсправитьНастройкиРодительскойГруппировки(РодительОбъектаНастройки, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СтруктураСерийЦветов(СерииДиаграммы)
	СтруктураСерийЦветов = Новый Структура;
	СтруктураЦвета = Новый Структура("Красный, Зеленый, Синий", 0, 0, 0);

	Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
		СтруктураЦветаСерии = Новый Структура; 
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СтруктураЦветаСерии, СтруктураЦвета, Истина);
		
		ВидЦветаСерии = СерияДиаграммы.Цвет.Вид;
		Если ВидЦветаСерии = ВидЦвета.WebЦвет Тогда
			МониторингЦелевыхПоказателей.ПолучитьRGBWebЦвета(СерияДиаграммы.Цвет,
															СтруктураЦветаСерии.Красный,
															СтруктураЦветаСерии.Зеленый,
															СтруктураЦветаСерии.Синий);
		ИначеЕсли ВидЦветаСерии = ВидЦвета.Абсолютный Тогда 
			СтруктураЦветаСерии.Красный = СерияДиаграммы.Цвет.Красный;
			СтруктураЦветаСерии.Зеленый = СерияДиаграммы.Цвет.Зеленый;
			СтруктураЦветаСерии.Синий = СерияДиаграммы.Цвет.Синий;
		КонецЕсли;
		
		ОписаниеЦвета = "Цвет_"
						+ Строка(СтруктураЦветаСерии.Красный)
						+ "_"
						+ Строка(СтруктураЦветаСерии.Зеленый)
						+ "_"
						+ Строка(СтруктураЦветаСерии.Синий);
		Если Не СтруктураСерийЦветов.Свойство(ОписаниеЦвета) Тогда
			СтруктураСерийЦветов.Вставить(ОписаниеЦвета, Новый Структура);
			
			СтруктураСерийЦветов[ОписаниеЦвета].Вставить("Серии", Новый Массив);
			СтруктураСерийЦветов[ОписаниеЦвета].Серии.Добавить(СерияДиаграммы);
			
			СтруктураСерийЦветов[ОписаниеЦвета].Вставить("Цвет", СтруктураЦветаСерии);
		Иначе
			СтруктураСерийЦветов[ОписаниеЦвета].Серии.Добавить(СерияДиаграммы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураСерийЦветов;
КонецФункции

Процедура СформироватьГрадиентПоСериямЦветов(СтруктураСерийЦветов)
	Для Каждого СерияРазныхЦветов Из СтруктураСерийЦветов Цикл
		ОбрабатываемыеСерии = СерияРазныхЦветов.Значение.Серии;
		КоличествоСерий = ОбрабатываемыеСерии.Количество();
		
		Если КоличествоСерий = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветСерии = СерияРазныхЦветов.Значение.Цвет;
		
		Тон = 0; 
		Насыщенность = 0; 
		Светлота = 0;
		
		НомерСерии = 0;
		Для Каждого ОбрабатываемаяСерия Из ОбрабатываемыеСерии Цикл
			Если Тон + Насыщенность + Светлота = 0 Тогда
				МониторингЦелевыхПоказателей.ПолучитьHSVпоRGB(ЦветСерии.Красный, 
					ЦветСерии.Зеленый, 
					ЦветСерии.Синий, 
					Тон, Насыщенность, Светлота);
			КонецЕсли;
			
			// Установим коэффициент 0.8, чтобы градиент не уходил в белый цвет
			ШагГрадиентаСветлоты = 0.8 * (100 - Светлота) / (КоличествоСерий - 1);
			
			// Насыщенность ограничивать не требуется
			ШагГрадиентаНасыщенности = (100 - ?(Насыщенность = 0, 100, Насыщенность)) / (КоличествоСерий - 1);
			
			НовыйКрасный = 0; 
			НовыйЗеленый = 0;
			НовыйСиний = 0;
			
			МониторингЦелевыхПоказателей.ПолучитьRGBпоHSV(Тон, 
				Насыщенность + ШагГрадиентаНасыщенности * НомерСерии, 
				Светлота + ШагГрадиентаСветлоты * НомерСерии, 
				НовыйКрасный, НовыйЗеленый, НовыйСиний);
			
			НовыйЦветСерии = Новый Цвет(НовыйКрасный, НовыйЗеленый, НовыйСиний);
			
			ОбрабатываемаяСерия.Цвет = НовыйЦветСерии;
			
			НомерСерии = НомерСерии + 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Устанавливает для переданной диаграммы стандартное оформление
// 
// Параметры:
//	Диаграмма - Диаграмма - изменяемая диаграмма
//	ПараметрыДиаграммы - Структура - структура параметров, соответствующих свойствам диаграммы
//
Процедура УстановитьОформлениеПоУмолчаниюДиаграммы(Диаграмма, ПараметрыДиаграммы = Неопределено)
	// Оформление диаграммы
	ПараметрыДиаграммыПереданы = (ПараметрыДиаграммы <> Неопределено);
	
	Если ПараметрыДиаграммыПереданы Тогда
		ПараметрОтчет = Неопределено;
		ОтчетОбъектПередан = ПараметрыДиаграммы.Свойство("Отчет", ПараметрОтчет) 
			И ПараметрОтчет <> Неопределено;
		
		ПараметрРасширенноеОформлениеСерий = Ложь;
		ПараметрРасширенноеОформлениеСерий = ПараметрыДиаграммы.Свойство("РасширенноеОформлениеСерий", ПараметрРасширенноеОформлениеСерий)
			И ПараметрРасширенноеОформлениеСерий;
		
		ПараметрМаксимумСерий = 0;
		Если ПараметрыДиаграммы.Свойство("МаксимумСерийКоличество", ПараметрМаксимумСерий)
			И ПараметрМаксимумСерий > 0 И ПараметрМаксимумСерий <> 999 Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.Ограничено;
			Диаграмма.МаксимумСерийКоличество = ПараметрМаксимумСерий;
		ИначеЕсли ПараметрыДиаграммы.Свойство("МаксимумСерийПроцент", ПараметрМаксимумСерий)
			И ПараметрМаксимумСерий > 0 Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.Процент;
			Диаграмма.МаксимумСерийПроцент = ПараметрМаксимумСерий;
		ИначеЕсли ПараметрМаксимумСерий = 999 И ПараметрМаксимумСерий <> 999 Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.НеЗадано;
		КонецЕсли;
		
		ПараметрТипДиаграммы = Неопределено;
		Если ПараметрыДиаграммы.Свойство("ТипДиаграммы", ПараметрТипДиаграммы) Тогда
			Если ПараметрТипДиаграммы <> "Произвольный" Тогда
				Диаграмма.ТипДиаграммы = ТипДиаграммы[ПараметрТипДиаграммы];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Оформление области построения
	ОбластьПостроения = Диаграмма.ОбластьПостроения;
	ОбластьПостроения.ЦветШкалы = Метаданные.ЭлементыСтиля.ЦветШкалыДиаграммы.Значение;
	ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
	
	// Оформление области легенды
	ОбластьЛегенды = Диаграмма.ОбластьЛегенды;
	ОбластьЛегенды.Прокрутка = Истина;
	
	// Оформление серий и точек
	СерииДиаграммы = Диаграмма.Серии;
	ОтображениеМаркеровТочекДиаграмм = Ложь;
	Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
		Если ПараметрыДиаграммы.Свойство("ОтображениеМаркеровТочекДиаграмм", ОтображениеМаркеровТочекДиаграмм) Тогда
			УстановитьОформлениеПоУмолчаниюСерии(СерияДиаграммы, ОтображениеМаркеровТочекДиаграмм);
		Иначе
			УстановитьОформлениеПоУмолчаниюСерии(СерияДиаграммы);
		КонецЕсли;
		
		// Оформим серии диаграммы по расширенному алгоритму отчета
		Если ПараметрыДиаграммыПереданы И ОтчетОбъектПередан И ПараметрРасширенноеОформлениеСерий Тогда
			ПараметрОтчет.УстановитьРасширенноеОформлениеСерии(СерияДиаграммы);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыДиаграммы <> Неопределено Тогда
		ПараметрВыделениеСерийДиаграмм = Неопределено;
		ПараметрГрадиентСерийДиаграмм = Ложь;
		Если ПараметрыДиаграммы.Свойство("ВыделениеСерийДиаграмм", ПараметрВыделениеСерийДиаграмм)
			И ПараметрВыделениеСерийДиаграмм <> 0 
			И ПараметрыДиаграммы.Свойство("ГрадиентСерийДиаграмм", ПараметрГрадиентСерийДиаграмм) 
			И ПараметрГрадиентСерийДиаграмм Тогда
			СтруктураСерийЦветов = СтруктураСерийЦветов(СерииДиаграммы);
			СформироватьГрадиентПоСериямЦветов(СтруктураСерийЦветов);
		КонецЕсли;
	КонецЕсли;	

	УстановитьОформлениеПоУмолчаниюСводнойСерии(Диаграмма.СводнаяСерия);
КонецПроцедуры

Процедура УстановитьОформлениеПоУмолчаниюСерии(Серия, ОтображатьМаркерыТочек = Истина)
	// Устанавливаемые свойства серии
	Если Не ОтображатьМаркерыТочек Тогда
		Серия.Маркер = ТипМаркераДиаграммы.Нет;
	КонецЕсли;
КонецПроцедуры
 
Процедура УстановитьОформлениеПоУмолчаниюСводнойСерии(Серия)
	// Устанавливаемые свойства серии
	Серия.Маркер = ТипМаркераДиаграммы.Нет;
	Серия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 3);
	Серия.Цвет = Метаданные.ЭлементыСтиля.ЦветСводнойСерииДиаграммы.Значение;
КонецПроцедуры

Процедура УдалитьПараметрыОформленияДиаграмм(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм)
	
	// Параметры, обрабатываемые в коде
	Если ПараметрыДиаграмм <> Неопределено Тогда
		ДоступныеПараметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры;
		
		Для Каждого ПараметрДиаграмм Из ПараметрыДиаграмм Цикл
			ПараметрДиаграмм = ОтчетыКлиентСервер.ПолучитьДоступныйПараметр(ДоступныеПараметры, ПараметрДиаграмм.Ключ);
			
			Если ПараметрДиаграмм <> Неопределено Тогда
				НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(ПараметрДиаграмм.Заголовок);
				
				Если НайденнаяОбласть <> Неопределено Тогда
					УдаляемаяОбласть = ТабличныйДокумент.Область(НайденнаяОбласть.Верх,, НайденнаяОбласть.Низ);
					ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
					Если ТабличныйДокумент.ФиксацияСверху <> 0 Тогда
						ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ФиксацияСверху - 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Функция ФорматнаяСтрокаПериодовКомпоновкиДанных(Периодичность)
	ФорматнаяСтрока = "";
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yyyy ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yyyy ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yyyy ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='MMMM гггг ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='к ""квартал"" гггг ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='ММ.гггг ""г.""'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='yyyy ""г.""'";
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Вспомогательный метод обработчика ОбновитьИменаПараметровВНастройкахОтчетов
Процедура ДобавитьЭлементыОтбораВМассив(ЭлементыОтбора, ИскомыйПараметр, МассивИскомыхЭлементов)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементыГруппы = ЭлементОтбора.Элементы;
			ДобавитьЭлементыОтбораВМассив(ЭлементыГруппы, ИскомыйПараметр, МассивИскомыхЭлементов);
		Иначе
			Если ЭлементОтбора.ЛевоеЗначение = ИскомыйПараметр Или ЭлементОтбора.ПравоеЗначение = ИскомыйПараметр Тогда 
				МассивИскомыхЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти 
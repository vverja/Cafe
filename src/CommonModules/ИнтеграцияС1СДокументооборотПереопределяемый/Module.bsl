////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотПереопределяемый: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//Вызывается при создании форм документов Документооборота. Позволяет выполнить дополнительные действия.
//Параметры:
//	Форма - форма документа Документооборота
Процедура ДополнительнаяОбработкаФормыДокумента(Форма) Экспорт
	
	//Установим доступ к полю состояние по режиму работы
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Форма.ВнешнийОбъект) И Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить() Тогда
		Форма.Элементы.Состояние.ТолькоПросмотр = Истина;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

//Вызывается при создании форм бизнес-процессов Документооборота. Позволяет выполнить дополнительные действия.
//Параметры:
//	Форма - форма бизнес-процесса Документооборота
Процедура ДополнительнаяОбработкаФормыБизнесПроцесса(Форма) Экспорт
	
	
	
КонецПроцедуры

//Вызывается при создании формы задачи Документооборота. Позволяет выполнить дополнительные действия.
//Параметры:
//	Форма - форма задачи Документооборота
Процедура ДополнительнаяОбработкаФормыЗадачи(Форма) Экспорт
	
	
	
КонецПроцедуры

//Заполняет свойства объекта XDTO из реквизитов объекта потребителя.
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт 
	
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent") 
		и ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбъектXDTO.inn = СсылкаНаПотребитель.ИННПлательщикаНДС;
	ИначеЕсли ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
		и ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Организации") Тогда
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Рекомендуется использовать процедуру ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO.
//
Процедура СсылкаПоОбъектуXDTO(Ссылка, ОбъектXDTO, ТипОбъекта) Экспорт
	
КонецПроцедуры

// Вызывается при заполнении реквизита объекта ИС по значению реквизита объекта ДО. При установке
// в параметр Результат значения, отличного от Неопределено, стандартное заполнение не выполняется.
// 
// Параметры:
//   Результат - Произвольный - заполняемое значение реквизита объекта ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//   ТипРеквизита - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизита - Строка - имя заполняемого реквизита ИС.
//   ТипОбъекта - Тип - тип заполняемого объекта ИС.
//   ЭтоДополнительноеСвойство - Булево - истина, если переданный объект является доп. свойством.
//   Свойство - ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения - свойство-владелец.
//
Процедура ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(Результат, ОбъектXDTO, ТипРеквизита,
	ИмяРеквизита, ТипОбъекта, ЭтоДополнительноеСвойство = Ложь, Свойство = Неопределено) Экспорт
	
	Если ОбъектXDTO.Установлено("objectId")
		И ОбъектXDTO.objectId.type = "DMDocumentStatus" Тогда
		СостояниеДО = ОбъектXDTO.objectId.id;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипРеквизита = Тип("Булево")
		И ИмяРеквизита = "Согласован"
		И (
			ТипОбъекта = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту")
			Или ТипОбъекта = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту")
			Или ТипОбъекта = Тип("СправочникОбъект.ДоговорыКонтрагентов")
			Или ТипОбъекта = Тип("СправочникОбъект.СоглашенияСКлиентами")
			Или ТипОбъекта = Тип("СправочникОбъект.СоглашенияСПоставщиками")
			Или ТипОбъекта = Тип("ДокументОбъект.ЗаказКлиента")
			Или ТипОбъекта = Тип("ДокументОбъект.ЗаказПоставщику")
			Или ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента")
		) Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Истина;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Ложь;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыКоммерческихПредложенийКлиентам") Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыДоговоровКонтрагентов") Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыСоглашенийСКлиентами") Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыСоглашенийСПоставщиками") Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		КонецЕсли;
        
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаявокНаРасходованиеДенежныхСредств") Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("ПеречислениеСсылка.СтатусыЗаявокНаВозвратТоваровОтКлиентов") Тогда
		Если СостояниеДО = "Согласован" Тогда
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату;
		ИначеЕсли СостояниеДО = "НеСогласован" Тогда
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена;
		ИначеЕсли СостояниеДО = "НаСогласовании" Тогда
			Результат = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вызывается при создании объекта ИС по ссылке в реквизите объекта ДО. Может использоваться для
// дозаполнения реквизитов нового объекта ИС, например, если стандартный обработчик заполнения не
// заполняет обязательные реквизиты по умолчанию.
// 
// Параметры:
//   ОбъектИС - Произвольный - созданный, но еще не записанный объект ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому не найдено в текущей ИБ.
//
// Пример:
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Организации") Тогда
//		ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
//		Если ОбъектXDTO.objectId.type = "DMOrganization"
//			И ОбъектXDTO.objectId.id = "ИндивидуальныйПредприниматель" Тогда
//			ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO) Экспорт
	
	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Организации")
		Или ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		Если ОбъектXDTO.objectId.type = "DMOrganization"
			Или ОбъектXDTO.objectId.type = "DMCorrespondent" Тогда
			
			Если ОбъектXDTO.Установлено("legalPrivatePerson") Тогда
				Если ОбъектXDTO.legalPrivatePerson.objectId.id = "ИндивидуальныйПредприниматель" Тогда
					ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				ИначеЕсли ОбъектXDTO.legalPrivatePerson.objectId.id = "ЮрЛицоНеРезидент" Тогда
					ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
				ИначеЕсли ОбъектXDTO.legalPrivatePerson.objectId.id = "ФизическоеЛицо" Тогда
					ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
				КонецЕсли;
			КонецЕсли;
			
			ОбъектИС.ИНН = ОбъектXDTO.inn;
			ОбъектИС.КПП = ОбъектXDTO.kpp;
			ОбъектИС.КодПоОКПО = ОбъектXDTO.okpo;
			ОбъектИС.НаименованиеПолное = ОбъектXDTO.fullName;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Получает таблицу менеджеров печати форм объектов.
Процедура ЗаполнитьТаблицуМенеджеровПечатиОбъекта(ИмяМенеджера, ПечатныеФормы) Экспорт
	
	Исключения = ИсключенияКомандПечати();
	
	Попытка
		КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(ИмяМенеджера + ".Форма.ФормаСписка");
	
		Для Каждого Команда Из КомандыПечати Цикл
			Если Исключения.Найти(Команда.Идентификатор) = Неопределено 
			 И ЗначениеЗаполнено(Команда.МенеджерПечати) Тогда
				Строка = ПечатныеФормы.Добавить();
				Строка.МенеджерПечати = Команда.МенеджерПечати;
				Строка.ИмяКоманды = Команда.Идентификатор;
				Строка.ПредставлениеКоманды = Команда.Представление;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		// У менеджера объекта может не быть процедуры ДобавитьКомандыПечати.
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет коллекцию печатных форм объекта по имени менеджера печати и команде менеджера печати.
//
Процедура ЗаполнитьПечатныеФормы(ВнешнийОбъект, ИмяКоманды, КоллекцияПечатныхФорм) Экспорт
	
	Попытка
		НомерКоманды = Число(Сред(ИмяКоманды, СтрДлина("КомандаПечати") + 1));
	Исключение
		НомерКоманды = -1;
	КонецПопытки;
	
	Попытка
		МенеджерОбъекта = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
		КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
		
		Если НомерКоманды = -1 Тогда
			КомандаПечати = КомандыПечати.Найти(ИмяКоманды, "Идентификатор");
		Иначе
			КомандаПечати = КомандыПечати[НомерКоманды];
		КонецЕсли;
		ОписаниеКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаПечати);

		ОбъектыПечатиСписок = новый СписокЗначений;
		ОбъектыПечатиСписок.Добавить(ВнешнийОбъект);
		
		ОбъектыПечати = новый Массив;
		ОбъектыПечати.Добавить(ВнешнийОбъект);

		ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
		
		ПараметрыПечати = ОписаниеКоманды.ДополнительныеПараметры;
		ПараметрыВывода = Неопределено;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Если ОписаниеКоманды.ДополнительныеПараметры.Свойство("Ссылка") 
		   И ЗначениеЗаполнено(ОписаниеКоманды.ДополнительныеПараметры.Ссылка) Тогда
			Попытка
			    ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);
				ПараметрыПечати.Вставить("ОбъектыНазначения", ОбъектыПечати);
				
				ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ОписаниеКоманды.ДополнительныеПараметры.Ссылка,
						ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
			Исключение
				КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
			КонецПопытки;
		Иначе
			Попытка
				ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(
					ОписаниеКоманды.МенеджерПечати,
					ОписаниеКоманды.Идентификатор,
					ОбъектыПечати,
					ПараметрыПечати);
				КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
			Исключение
				КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
			КонецПопытки;
		КонецЕсли;
		
	Исключение
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает кнопки печати на форме объекта по доступным командам печати.
//
Процедура ЗаполнитьКомандыПечати(Форма, ВнешнийОбъект, МестоРазмещенияКоманд) Экспорт
	
	ИмяФормы = ВнешнийОбъект.Метаданные().ПолноеИмя() + ".Форма.ФормаСписка";
	
	Исключения = ИсключенияКомандПечати();
	
	Попытка
		
		КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(ИмяФормы);

		Если МестоРазмещенияКоманд = Неопределено Тогда
			МестоРазмещенияКоманд = Форма.КоманднаяПанель;
		КонецЕсли;
		
		Для НомерКоманды = 0 По КомандыПечати.Количество() - 1 Цикл
			ОписаниеКомандыПечати = КомандыПечати[НомерКоманды];
			Если Исключения.Найти(ОписаниеКомандыПечати.Идентификатор) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "КомандаПечати" + НомерКоманды;
			
			КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуПечати";
			КомандаФормы.Заголовок = ОписаниеКомандыПечати.Представление;
			КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
			КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
			
			Если ЗначениеЗаполнено(ОписаниеКомандыПечати.Картинка) Тогда
				КомандаФормы.Картинка = ОписаниеКомандыПечати.Картинка;
			КонецЕсли;
			
			НовыйЭлемент = Форма.Элементы.Добавить("ПодменюПечать" + ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
			НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		КонецЦикла;
		
	Исключение
		// У менеджера объекта может не быть процедуры ДобавитьКомандыПечати.
		
	КонецПопытки;
	
КонецПроцедуры

//Возвращает индекс картинки элемента справочника.
//
Функция ИндексКартинкиЭлемента() Экспорт
	
	Возврат 3;
	
КонецФункции

//Возвращает признак состояния "Согласован" по данным документооборота.
Функция ПолучитьСостояниеСогласованияВ1СДокументооборот(СсылкаНаОбъект) Экспорт
	
	Согласован = Ложь;
	
	Попытка
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Исключение
		Возврат Ложь; // Если нет соединения, вернем статус Ложь 
	КонецПопытки;
	
	Если Прокси = Неопределено Тогда
		Возврат Ложь; // Если пользователь не авторизован в ДО, вернем Ложь.
	КонецЕсли;
	
	ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	ExternalObject.id = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	ExternalObject.type = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	ExternalObject.name = Строка(СсылкаНаОбъект);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
	Запрос.externalObjects.Добавить(ExternalObject);
	
	Запрос.columnSet.Добавить("status");
	
	Результат = Прокси.execute(Запрос);
	
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
		Возврат Ложь; // Произошла ошибка во время выполнения запроса
	КонецЕсли;	
		
	Если Результат.documents.Количество() > 0 Тогда 
		Объект = Результат.documents[0];
	Иначе 
		Возврат Ложь; // Нужного документа не оказалось
	КонецЕсли;
	
	Если Объект.status.name = "Согласован" Тогда
		Согласован = Истина;
	Иначе 
		Согласован = Ложь;
	КонецЕсли;
		
	Возврат Согласован;
	
КонецФункции

//Заполняет правила заполнения при выгрузке по умолчанию.
Процедура УстановитьПравилаЗаполненияПриВыгрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник) Экспорт
	
	МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Источник);
	Если МетаданныеИсточника = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВариантыЗаполнения = новый Соответствие;
	ВариантыЗаполнения.Вставить("Организация", "organization");
	ВариантыЗаполнения.Вставить("Контрагент", "correspondent");
	ВариантыЗаполнения.Вставить("Комментарий", "comment");
	ВариантыЗаполнения.Вставить("ДатаНачала", "beginDate");
	ВариантыЗаполнения.Вставить("ДатаОкончания", "endDate");
	ВариантыЗаполнения.Вставить("СрокИсполнения", "performanceDate");
	ВариантыЗаполнения.Вставить("Сумма","sum");
	ВариантыЗаполнения.Вставить("СуммаДокумента","sum");
	ВариантыЗаполнения.Вставить("Валюта","currency");
	ВариантыЗаполнения.Вставить("ВалютаВзаиморасчетов","currency");
	ВариантыЗаполнения.Вставить("ВалютаРасчетов","currency");
	ВариантыЗаполнения.Вставить("ВалютаДокумента","currency");
	ВариантыЗаполнения.Вставить("Содержание", "summary");
	ВариантыЗаполнения.Вставить("РегистрационныйНомер", "regNumber");
	ВариантыЗаполнения.Вставить("ДатаРегистрации", "regDate");
	ВариантыЗаполнения.Вставить("ПодразделениеОрганизации", "subdivision");
	ВариантыЗаполнения.Вставить("Подразделение", "subdivision");
	ВариантыЗаполнения.Вставить("Утвердил", "signer");
	ВариантыЗаполнения.Вставить("Подготовил", "author");
	ВариантыЗаполнения.Вставить("Автор", "author");
	ВариантыЗаполнения.Вставить("КонтактноеЛицо", "contactPerson");
	ВариантыЗаполнения.Вставить("Ответственный", "responsible");
	ВариантыЗаполнения.Вставить("Наименование", "name");
	ВариантыЗаполнения.Вставить("ЮрФизЛицо", "legalPrivatePerson");
	ВариантыЗаполнения.Вставить("ИНН", "inn");
	ВариантыЗаполнения.Вставить("КодПоЕДРПОУ", "okpo");
	ВариантыЗаполнения.Вставить("ПолноеНаименование", "fullName");
	ВариантыЗаполнения.Вставить("НаименованиеПолное", "fullName");
	ВариантыЗаполнения.Вставить("ФизическоеЛицо", "privatePerson");
	ВариантыЗаполнения.Вставить("ФизЛицо", "privatePerson");
	ВариантыЗаполнения.Вставить("Ответственный", "author");
	ВариантыЗаполнения.Вставить("Проект", "project");
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Значение =  ВариантыЗаполнения.Получить(Реквизит.Имя);
		Если Значение <> Неопределено Тогда
			ПравилаЗаполнения.Вставить(Значение, Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Заполняет правила заполнения при загрузке по умолчанию.
Процедура УстановитьПравилаЗаполненияПриЗагрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник) Экспорт
	
	ВариантыЗаполнения = новый Соответствие;
	
	МетаданныеПриемника = Метаданные.НайтиПоПолномуИмени(Приемник);
	Если МетаданныеПриемника = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Найти(Источник, "Document") <> 0 Тогда
		ВариантыЗаполнения.Вставить("Организация", "organization");
		ВариантыЗаполнения.Вставить("Контрагент", "correspondent");
		ВариантыЗаполнения.Вставить("Комментарий", "comment");
		ВариантыЗаполнения.Вставить("ДатаНачала", "beginDate");
		ВариантыЗаполнения.Вставить("ДатаОкончания", "endDate");
		ВариантыЗаполнения.Вставить("СрокИсполнения", "performanceDate");
		ВариантыЗаполнения.Вставить("Сумма", "sum");
		ВариантыЗаполнения.Вставить("СуммаДокумента", "sum");
		ВариантыЗаполнения.Вставить("Валюта", "currency");
		ВариантыЗаполнения.Вставить("ВалютаВзаиморасчетов", "currency");
		ВариантыЗаполнения.Вставить("ВалютаРасчетов", "currency");
		ВариантыЗаполнения.Вставить("ВалютаДокумента", "currency");
		ВариантыЗаполнения.Вставить("Содержание", "summary");
		ВариантыЗаполнения.Вставить("РегистрационныйНомер", "regNumber");
		ВариантыЗаполнения.Вставить("ДатаРегистрации", "regDate");
		ВариантыЗаполнения.Вставить("ПодразделениеОрганизации", "subdivision");
		ВариантыЗаполнения.Вставить("Подразделение", "subdivision");
		ВариантыЗаполнения.Вставить("Утвердил", "signer");
		ВариантыЗаполнения.Вставить("Подготовил", "author");
		ВариантыЗаполнения.Вставить("Автор", "author");
		ВариантыЗаполнения.Вставить("КонтактноеЛицо", "contactPerson");
		ВариантыЗаполнения.Вставить("Ответственный", "responsible");
		ВариантыЗаполнения.Вставить("Наименование", "title");
		ВариантыЗаполнения.Вставить("Статус", "statusApproval");
		ВариантыЗаполнения.Вставить("Согласован", "statusApproval");
		
	ИначеЕсли Источник = "DMCorrespondent" Тогда
		ВариантыЗаполнения.Вставить("Наименование", "name");
		ВариантыЗаполнения.Вставить("Ответственный", "responsible");
		ВариантыЗаполнения.Вставить("ЮрФизЛицо", "legalPrivatePerson");
		ВариантыЗаполнения.Вставить("ИНН", "inn");
		ВариантыЗаполнения.Вставить("КодПоЕДРПОУ", "okpo");
		ВариантыЗаполнения.Вставить("ПолноеНаименование", "fullName");
		ВариантыЗаполнения.Вставить("НаименованиеПолное", "fullName");
		ВариантыЗаполнения.Вставить("ФизическоеЛицо", "privatePerson");
		ВариантыЗаполнения.Вставить("ФизЛицо", "privatePerson");
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеПриемника.Реквизиты Цикл
		Значение =  ВариантыЗаполнения.Получить(Реквизит.Имя);
		Если Значение <> Неопределено Тогда
			ПравилаЗаполнения.Вставить(Реквизит.Имя, Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Заполняет таблицу реквизитов объекта по типу объекта.
//
// Параметры:
//  ИмяОбъектаПотребителя  - Строка - имя типа объекта потребителя
//  Реквизиты  - ТаблицаЗначений - Таблица описания реквизитов
//
Процедура ПолучитьРеквизитыОбъектаПотребителя(ИмяОбъектаПотребителя, Реквизиты) Экспорт

	

КонецПроцедуры // ИнтеграцияС1СДокументооборотПереопределяемый.ПолучитьРеквизитыОбъектаПотребителя()
 
// Получает подходящий тип потребителя для объекта XDTO.
//
// Параметры: 
//   ТипОбъектаXDTO - Строка - тип объекта XDTO, соответствие которому следует выбрать
//   ТипыКандидаты - Массив - массив типов, из которых требуется выбрать подходящий
//
// Возвращаемое значение:
//   Тип - один из элементов массива ТипыКандидаты, подходящий для типа объекта XDTO
//
Функция ПодходящийТип(ТипОбъектаXDTO, ТипыКандидаты) Экспорт
	
	Если ТипОбъектаXDTO = "DMUser" и ТипыКандидаты.Найти(Тип("СправочникСсылка.Пользователи")) <> Неопределено Тогда
		Возврат Тип("СправочникСсылка.Пользователи");
	КонецЕсли;
	
	Возврат ТипыКандидаты[0];
	
КонецФункции

// Возвращает штрихкод документа для присвоения связанному документу ДО.
//
// Параметры
//   Документ - ДокументСсылка, на основании которого создается документ ДО
//
// Возвращаемое значение:
//   Строка - штрихкод для присвоения связанному документу ДО
//
Функция ШтрихкодДокумента(Документ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
		ШестнадцатиричноеЧисло = НРег(СтрЗаменить(Документ.УникальныйИдентификатор(), "-", ""));
		ДлинаСтроки = СтрДлина(ШестнадцатиричноеЧисло);
		Результат = 0;
		Для НомерСимвола = 1 По ДлинаСтроки Цикл
			Результат = Результат * 16 + Найти("0123456789abcdef", 
				Сред(ШестнадцатиричноеЧисло, НомерСимвола, 1)) - 1;
		КонецЦикла;
		Возврат Формат(Результат, "ЧГ=0");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает предельное количество объектов, выбираемых сервисом при получении списков.
//
// Параметры:
//   Тип - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//   Число - предельное количество элементов, выбираемых за раз
//
Функция ПредельноеКоличествоВыбираемыхОбъектов(Тип) Экспорт
	
	Возврат 30; // Если Тип = "DMCorrespondent" Тогда Возврат 50 ИначеЕсли <...>
	
КонецФункции

// Уточняет сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
// Параметры:
//   СокращенноеНаименование - Строка - неявно возвращаемое значение, краткое название конфигурации.
//
// Пример реализации:
//   СокращенноеНаименование = НСтр("ru='BAS ERP';uk='BAS ERP'");
//
Процедура ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		СокращенноеНаименование = НСтр("ru='BAS КУП';uk='BAS КУП'");
	ИначеЕсли ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		СокращенноеНаименование = НСтр("ru='BAS УТ';uk='BAS УТ'");
	Иначе
		СокращенноеНаименование = НСтр("ru='BAS ERP';uk='BAS ERP'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет доступность интеграции для текущего пользователя. Может переопределяться
// при отказе от использования поставляемой роли ИспользованиеИнтеграцииС1СДокументооборотом.
//
// Возвращаемое значение:
//   Булево - Истина, если использование интеграции разрешено.
//
Функция ПользователюРазрешеноИспользованиеИнтеграции() Экспорт
	
	Возврат РольДоступна(Метаданные.Роли.ИспользованиеИнтеграцииС1СДокументооборотом)
		или РольДоступна(Метаданные.Роли.ПолныеПрава);
	
КонецФункции

// Проверяет возможность запуска согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//
// Возвращаемое значение:
//   Булево - Истина, если запуск согласования разрешен, Ложь - запрещен, Неопределено - согласно ролям.
//
// Пример реализации:
//
// Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//  	Если ПредметСогласования.Состояние <> Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании Тогда
//  		ТекстПредупреждения = НСтр("ru='Создание процесса согласования разрешено только на основании
//  		|документов в состоянии ""На согласовании"".'");
//  		Возврат Ложь;
//  	КонецЕсли;
// КонецЕсли;
//
Функция ПользователюРазрешенЗапускСогласования(ПредметСогласования, ТекстПредупреждения) Экспорт
	
	
	
КонецФункции

// Проверяет возможность прерывания согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ПредметДО - Структура - описание связанного объекта ДО:
//      name - Строка - представление связанного объекта.
//      id - Строка - идентификатор связанного объекта.
//      type - Строка - имя типа XDTO.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//
// Возвращаемое значение:
//   Булево - Истина, если прерывание согласования разрешено, Ложь - запрещено, Неопределено - согласно ролям.
//
Функция ПользователюРазрешеноПрерываниеСогласования(ПредметСогласования, ПредметДО, ТекстПредупреждения) Экспорт
	
	

КонецФункции

// Вызывается при изменении состояния согласования в ДО. Предназначена для изменения согласуемого объекта.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//   Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте.
//   ВызовИзФормыОбъекта - Булево - Истина, если изменение состояния вызвано пользователем из формы объекта.
//
// Пример реализации:
//
//	Если ВызовИзФормыОбъекта Тогда
//		Возврат;
//	КонецЕсли;
//
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//	
//		Объект = ПредметСогласования.ПолучитьОбъект();
//		Если Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НеСогласован;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован;
//		Иначе
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Подготовлен;
//		КонецЕсли;
//		Объект.Записать(РежимЗаписиДокумента.Запись);
//	
//	КонецЕсли;
//
//
Процедура ПриИзмененииСостоянияСогласования(ПредметСогласования, Состояние, ВызовИзФормыОбъекта) Экспорт

КонецПроцедуры

// Получает пояснение к состоянию согласования, предназначенное для чтения пользователем.
//
// Параметры:
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - дата и время установки нового состояния.
//
// Возвращаемое значение:
//   Строка - пояснение к состоянию согласования.
//
Функция ПояснениеСостоянияСогласования(Установил, ДатаУстановки) Экспорт
	
	Если ЗначениеЗаполнено(ДатаУстановки) Тогда
		Результат = Формат(ДатаУстановки, "ДЛФ=DT");
		Если ЗначениеЗаполнено(Установил) Тогда
			Результат = Результат + " (" + СокрЛП(Установил) + ")";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Установил) Тогда
			Результат = Установил;
		Иначе
			Результат = "";
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Переопределяет список команд печати. Вызывается из УправлениеПечатьюПереопределяемый и предназначена
// для дополнения команд печати листом согласования.
//
// Параметры:
//   ИмяФормы - Строка - имя вызывающей формы в виде ""Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента"
//   КомандыПечати - ТаблицаЗначений - таблица команд к дополнению. Колонки см. в УправлениеПечатью.
//   СтандартнаяОбработка - Булево - Истина, если необходимо стандартное наполнение таблицы команд.
//
// Пример реализации:
//	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.8.1") Тогда
//		Если ИмяФормы = "Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента" Тогда
//			КомандаПечати = КомандыПечати.Добавить();
//			КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот";
//			КомандаПечати.Идентификатор = "ЛистСогласования";
//			КомандаПечати.Представление = НСтр("ru='Документооборот: лист согласования'");
//			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
//			КомандаПечати.Порядок = 2;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// Вызывается при определении таймаута веб-сервиса. При необходимости таймаут может быть вынесен в
// настройки администратора интеграции и переопределен в этой процедуре.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, время в секундах, по истечении которого вызов
//     веб-сервиса Документооборота считается неудачным.
//
Процедура ПриОпределенииТаймаутаСервиса(Таймаут) Экспорт
	
	
	
КонецПроцедуры

// Заполняет реквизиты формы по данным объекта интегрированной системы.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на объект-основание.
//   Форма - УправляемаяФорма - форма обработки ИнтеграцияС1СДокументооборот, соответствующая заполняемому
//    объекту Документооборота.
//
Процедура ЗаполнитьФормуИзПотребителя(ВнешнийОбъект, Форма) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при проверке существования правил интеграции для объекта ИС. При присвоении параметру
// Результат булевского значения стандартная проверка не выполняется.
//
// Параметры:
//   ОбъектИС - Произвольный - проверяемый объект ИС.
//   Результат - Булево - результат проверки.
//
Процедура ПриОпределенииНастроенаИнтеграцияДляОбъекта(ОбъектИС, Результат) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при построении списка интегрируемых объектов. В переданную таблицу следует добавить
// типы объектов, поддерживающих автоматическую настройку бесшовной интеграции с созданием правил
// интеграции и заполнением связанных данных.
//
// Параметры:
//   Объекты - ТаблицаЗначений - заполняемая таблица с колонками:
//     ИмяТипаОбъекта - Строка - полное имя типа, как задано в метаданных.
//     ОписаниеВыполняемыхДействий - Строка - необязательна, краткое описание действий, выполняемых
//        при автонастройке.
//
// Пример реализации:
//	Строка = Объекты.Добавить();
//	Строка.ИмяТипаОбъекта = "Справочник._ДемоДоговорыКонтрагентов";
//	Строка.ОписаниеВыполняемыхДействий =
//		НСтр("ru='Будут созданы правила интеграции и виды внутренних документов для всех видов договоров.'");
//
//
Процедура ПриОпределенииОбъектовПоддерживающихАвтонастройку(Объекты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при добавлении подсистемы в дерево интегрируемых объектов, с помощью которого настраивается
// интеграция. По умолчанию выводятся подсистемы первого уровня, включаемые в командный интерфейс, и
// подчиненные им.
//
// Параметры:
//   Подсистема - ОбъектМетаданных.Подсистема - добавляемая подсистема, содержащая интегрируемые объекты.
//   Отказ - Булево - при установке в Ложь подсистема будет пропущена вместе со всеми подчиненными.
//
Процедура ПриДобавленииПодсистемыВДеревоИнтегрируемыхОбъектов(Подсистема, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет типы объектов ИС, поддерживающие бесшовную интеграцию. По умолчанию заполняется всеми
// типами, входящими в состав типов параметров общих команд подсистемы ИнтеграцияС1СДокументооборотом.
//
// Параметры:
//   Типы - Массив - массив объектов типа Тип.
//
Процедура ПриОпределенииТиповОбъектовПоддерживающихИнтеграцию(Типы) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление объекта интегрируемой конфигурации. Используется, если стандартное
// представление из синонима и ключевых реквизитов через запятую оказывается недостаточно читабельным.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом - правило, для которого
//             определяется представление.
//   ПредставлениеОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             объекта. По умолчанию собирается из синонима объекта и значений ключевых реквизитов правила.
//
// Пример реализации:
//
//	Если Правило.ТипОбъектаПотребителя = "Документ.ПоступлениеТоваровУслуг" Тогда 
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаПотребителя", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовПриЗагрузке.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаПотребителя;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru='Поступление товаров'");
//			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru='Поступление услуг'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияОбъектаПотребителя(Правило, ПредставлениеОбъектаПотребителя) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИсключенияКомандПечати()
	
	Исключения = новый Массив;
	Исключения.Добавить("АктMicrosoftWord");
	Исключения.Добавить("АктОтчетДавальцуMicrosoftWord");
	Исключения.Добавить("СписокПеречисленийMSWord");
	Исключения.Добавить("СписокПеречисленийOOWriter");
	Исключения.Добавить("Т53MSWord");
	Исключения.Добавить("Т53OOWriter");
	Исключения.Добавить("АктВзаимозачетаMicrosoftWord");
	Исключения.Добавить("АктПереуступкиДолгаMicrosoftWord");
	Исключения.Добавить("КоммерческоеПредложениеMicrosoftWord");
	Исключения.Добавить("КоммерческоеПредложениеOpenOfficeOrgWriter");
	Исключения.Добавить("АнкетаMicrosoftWord");
	Исключения.Добавить("АнкетаOpenOfficeOrgWriter");
	Исключения.Добавить("ЭтикеткаСкладскиеЯчейки");
	Исключения.Добавить("ЭтикеткаСерииНоменклатуры");
	Исключения.Добавить("ЭтикеткаДоставки");
	Исключения.Добавить("ЦенникТовары");
	Исключения.Добавить("ЭтикеткаТовары");
	Исключения.Добавить("ПереоценкаВРознице");
	Исключения.Добавить("УстановкаЦенНоменклатуры");
	Исключения.Добавить("КодыТоваров");
	Исключения.Добавить("ИНВ3");
	Исключения.Добавить("ИНВ19");
	Исключения.Добавить("МаршрутныйЛист");
	Исключения.Добавить("ПриказОбУвольненииMSWord");
	Исключения.Добавить("ПриказОПереводеMSWord");
	Исключения.Добавить("ПриказОПриемеНаРаботуMSWord");
	Исключения.Добавить("ПриказОПредоставленииОтпускаMSWord");
	Исключения.Добавить("КомплектДокументов");
	Исключения.Добавить("КомплектДокументовСНастройкой");
	
	Возврат Исключения;
	
КонецФункции

#КонецОбласти
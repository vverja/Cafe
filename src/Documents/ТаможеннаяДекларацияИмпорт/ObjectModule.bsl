#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	НепроверяемыеРеквизиты = Новый Массив;
	// проверка реквизитов Объекта
	Если Не ОтнестиСтоимостьТаможеннойОчисткиНаРасходы Тогда
		НепроверяемыеРеквизиты.Добавить("СтатьяРасходовСбор");
	КонецЕсли;
	Если Не ПоставкаНаКомиссию Тогда
		НепроверяемыеРеквизиты.Добавить("ПоступлениеСоглашение");
		НепроверяемыеРеквизиты.Добавить("ВалютаВзаиморасчетовСКомитентом");
	КонецЕсли;
	
	ОрганизацияПлательщикНДС = НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Организация, Дата);	
	Если Не ОрганизацияПлательщикНДС ИЛИ Не ВключаетсяВУточняющийРасчет Тогда
		НепроверяемыеРеквизиты.Добавить("УточняемыйПериод");
	КонецЕсли;
	Если Не ОрганизацияПлательщикНДС Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.СтатьяДекларацииНДСНалоговыйКредит");
	КонецЕсли;
	// проверка табчасти Разделы
	Шаблон = НСтр("ru='""%СинонимПоля%"" в строке %НомерСтроки% списка ""%ИмяТабчасти%"" необходимо заполнить.';uk='""%СинонимПоля%"" у рядку %НомерСтроки% списку ""%ИмяТабчасти%"" необхідно заповнити.'");
	Для Каждого Раздел Из Разделы Цикл
		ПроверитьИСообщитьОшибку(Раздел.СтавкаПошлины<>0. И Раздел.СуммаПошлины=0.,
				Отказ, Шаблон, "СуммаПошлины", "Сумма пошлины", "Разделы", Раздел.НомерСтроки);
		ПроверитьИСообщитьОшибку(Раздел.СтавкаАкциза<>0. И Раздел.СуммаАкциза=0.,
				Отказ, Шаблон, "СуммаАкциза", "Сумма акциза", "Разделы", Раздел.НомерСтроки);
		ЗаполнитьНДС = Раздел.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС И 
		               Раздел.СтавкаНДС <> Перечисления.СтавкиНДС.НеНДС И
		               Раздел.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0;
		ПроверитьИСообщитьОшибку(ЗаполнитьНДС И Раздел.СуммаНДС=0.,
				Отказ, Шаблон, "СуммаНДС", "Сумма НДС", "Разделы", Раздел.НомерСтроки);
	КонецЦикла;
	
	// проверки и исключения, зависимые от статуса декларации
	Если Перечисления.СтатусыТаможенныхДеклараций.ТаможенноеОформление = Статус Тогда
		НепроверяемыеРеквизиты.Добавить("Товары");
		НепроверяемыеРеквизиты.Добавить("Товары.Склад");
		НепроверяемыеРеквизиты.Добавить("Товары.НомерРаздела");
		НепроверяемыеРеквизиты.Добавить("Товары.ТаможеннаяСтоимость");
	ИначеЕсли Перечисления.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни = Статус Тогда
		
		// проверка соответствия товаров и разделов
		КешРазделов = Новый Соответствие;
		Для Каждого Раздел Из Разделы Цикл
			Значение = Новый Структура("Раздел, ТаможеннаяСтоимость, СуммаПошлины, СуммаАкциза, СуммаНДС", Раздел, 0., 0., 0., 0.);
		КешРазделов.Вставить(Раздел.НомерРаздела, Значение);
		КонецЦикла;
		Для Каждого Товар Из Товары Цикл
			ЭлементКеша = КешРазделов[Товар.НомерРаздела];
			Если Неопределено <> ЭлементКеша Тогда
				ЭлементКеша.ТаможеннаяСтоимость = ЭлементКеша.ТаможеннаяСтоимость + Товар.ТаможеннаяСтоимость;
				ЭлементКеша.СуммаПошлины = ЭлементКеша.СуммаПошлины + Товар.СуммаПошлины;
				ЭлементКеша.СуммаАкциза = ЭлементКеша.СуммаАкциза + Товар.СуммаАкциза;
				ЭлементКеша.СуммаНДС = ЭлементКеша.СуммаНДС + Товар.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		Шаблон = НСтр("ru='""%СинонимПоля%"" в строке %НомерСтроки% списка ""%ИмяТабчасти%"" не соответствует итогу по товарам раздела.';uk='""%СинонимПоля%"" у рядку %НомерСтроки% списку ""%ИмяТабчасти%"" не відповідає підсумку по товарах розділу.'");
		Для Каждого ЭлементКеша Из КешРазделов Цикл
			Значение = ЭлементКеша.Значение;
			ПроверитьИСообщитьОшибку(Значение.Раздел.ТаможеннаяСтоимость<>Значение.ТаможеннаяСтоимость,
					Отказ, Шаблон, "ТаможеннаяСтоимость", "Таможенная стоимость", "Разделы", Значение.Раздел.НомерСтроки);
			ПроверитьИСообщитьОшибку(Значение.Раздел.СуммаПошлины<>Значение.СуммаПошлины,
					Отказ, Шаблон, "СуммаПошлины", "Сумма пошлины", "Разделы", Значение.Раздел.НомерСтроки);
			ПроверитьИСообщитьОшибку(Значение.Раздел.СуммаАкциза<>Значение.СуммаАкциза,
					Отказ, Шаблон, "СуммаАкциза", "Сумма акциза", "Разделы", Значение.Раздел.НомерСтроки);
			ПроверитьИСообщитьОшибку(Значение.Раздел.СуммаНДС<>Значение.СуммаНДС,
					Отказ, Шаблон, "СуммаНДС", "Сумма НДС", "Разделы", Значение.Раздел.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	// дополнительные проверки
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ТаможеннаяДекларацияИмпорт),
												Отказ,
												НепроверяемыеРеквизиты);
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,
		"СтатьяРасходовСбор, АналитикаРасходовСбор",
		НепроверяемыеРеквизиты,
		Отказ);
		
	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		НепроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	// корректировка НомерРаздела
	КешРазделов = Новый Соответствие;
	Для Каждого Раздел Из Разделы Цикл
		КешРазделов.Вставить(Раздел.НомерРаздела, 0);
	КонецЦикла;
	Для Каждого Товар Из Товары Цикл
		Если Неопределено=КешРазделов[Товар.НомерРаздела] Тогда
			Товар.НомерРаздела = 0;
		КонецЕсли;
	КонецЦикла;
	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно;
	Если Не ПоставкаНаКомиссию Тогда
		ВалютаВзаиморасчетовСКомитентом = Неопределено;
	КонецЕсли;
	
	ЗаполнитьНалоговыеНазначения();
	
	СуммаДокумента = Документы.ТаможеннаяДекларацияИмпорт.СуммаДокумента(ЭтотОбъект);
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(ЭтотОбъект);
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		Если (Статус = Перечисления.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни) Тогда
			ЗаполнитьСклад();
			
			МенеджерАналитики = РегистрыСведений.АналитикаУчетаНоменклатуры;
			МестаУчета = МенеджерАналитики.МестаУчета(ХозяйственнаяОперация, Неопределено, Подразделение, Неопределено);
			ИменаПолей = МенеджерАналитики.ИменаПолейКоллекцииПоУмолчанию();
			ИменаПолей.Произвольный = "Склад";
			МенеджерАналитики.ЗаполнитьВКоллекции(Товары, МестаУчета, ИменаПолей);
			
			ВременныеТаблицы = ВременныеТаблицы();
			ЗаполнитьВидыЗапасовДокумента(ВременныеТаблицы, Отказ);
			
			ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		КонецЕсли;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Для Каждого Товар Из Товары Цикл
			Товар.ВидЗапасов = Неопределено;
		КонецЦикла;
		ЗапасыСервер.ОчиститьАналитикуУчетаПартийВТабличнойЧасти(Товары);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПорядокРасчетов) Тогда
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	КонецЕсли;
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(
		ЭтотОбъект, НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ТаможеннаяДекларацияИмпорт));
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ТаможеннаяДекларацияИмпорт.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКОформлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	НДСВходящийСервер.ОтразитьНДСРеестрПолученныхНалоговыхДокументов(ДополнительныеСвойства, Движения, Отказ);
	НДСИсходящийСервер.ОтразитьНДСУсловныеПродажи(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииРасходовНаСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияКонтрагентДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Запрос = Новый Запрос();
	Реквизиты = Документы.ТаможеннаяДекларацияИмпорт.СтруктураЗаполнения();
	ТипДанных = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанных = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	Валюта КАК ВалютаПоступления,
		|	Дата КАК ДатаПоступления,
		|	ЦенаВключаетНДС КАК ЦенаВключаетНДС,
        |	Соглашение КАК ПоступлениеСоглашение, 
		|	Валюта КАК ВалютаВзаиморасчетовСКомитентом,
		|	Организация КАК Организация,
		|	Партнер КАК Поставщик,
		|	Проведен КАК Проведен,
		|	Контрагент КАК КонтрагентПоставщика,
		|	НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг
		|ГДЕ
		|	Ссылка = &Ссылка
		|";
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения, , Не Выборка.Проведен);
			Если Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
			   И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
				Ошибка = НСтр("ru='Ввод таможенной декларации на основании поступления с операцией %Операция% не требуется.';uk='Введення митної декларації на підставі надходження з операцією %Операция% не потрібне.'");
				ВызватьИсключение СтрЗаменить(Ошибка, "%Операция%", Выборка.ХозяйственнаяОперация);
			КонецЕсли;

			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Строки.Номенклатура,
			|	Строки.Характеристика,
			|	Строки.Склад,
			|	Строки.ВидЗапасов,
			|	СУММА(Строки.Количество) КАК Количество
			|
			|ПОМЕСТИТЬ Импорт
			|ИЗ
			|	Документ.ТаможеннаяДекларацияИмпорт КАК Импорт
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Строки
			|	ПО
			|		Строки.Ссылка = Импорт.Ссылка
			|ГДЕ
			|	Импорт.Проведен
			|	И Строки.ДокументПоступления = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	Строки.Номенклатура,
			|	Строки.Характеристика,
			|	Строки.Склад,
			|	Строки.ВидЗапасов
			|;
			|///////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Серия,
			|	Товары.СтавкаНДС,
            |	Товары.Номенклатура.СтавкаНДС КАК СтавкаНДСПоУмолчанию,
            |	Товары.Номенклатура.НоменклатураГТД.КодУКТВЭД КАК КодУКТВЭДПоУмолчанию,
			|	НЕОПРЕДЕЛЕНО КАК Упаковка,
			|	0 КАК Цена,
			|	Товары.Количество - ЕСТЬNULL(Импорт.Количество, 0) КАК КоличествоУпаковок,
			|	Товары.Количество - ЕСТЬNULL(Импорт.Количество, 0) КАК Количество,
			|	Товары.Сумма * (Товары.Количество - ЕСТЬNULL(Импорт.Количество, 0)) / Товары.Количество КАК Сумма,
			|	Товары.СуммаНДС * (Товары.Количество - ЕСТЬNULL(Импорт.Количество, 0)) / Товары.Количество КАК СуммаНДС,
			|	Товары.СуммаСНДС * (Товары.Количество - ЕСТЬNULL(Импорт.Количество, 0)) / Товары.Количество КАК СуммаСНДС,
			|	Товары.Склад,
			|	Товары.Ссылка КАК ДокументПоступления,
            |	Товары.НалоговоеНазначение КАК НалоговоеНазначение,
			|	Товары.ВидЗапасов
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.Номенклатура КАК НоменклатураСпр
			|	ПО
			|		НоменклатураСпр.Ссылка = Товары.Номенклатура
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		Импорт КАК Импорт
			|	ПО
			|		Импорт.Номенклатура = Товары.Номенклатура
			|		И Импорт.Характеристика = Товары.Характеристика
			|		И Импорт.Склад = Товары.Склад
			|		И Импорт.ВидЗапасов = Товары.ВидЗапасов
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|	И Товары.Количество > 0.
			|	И НоменклатураСпр.ТипНоменклатуры В
			|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|";
			
			ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
			Реквизиты.Товары = Запрос.Выполнить().Выгрузить();
			Реквизиты.ПоставкаНаКомиссию = (Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
			Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьПоДанным(ЭтотОбъект, Реквизиты);
		КонецЕсли;
	ИначеЕсли ТипДанных = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("ЗапросТовары") Тогда
			Запрос.Текст = ДанныеЗаполнения.ЗапросТовары;
			Для Каждого Свойство Из ДанныеЗаполнения Цикл
				Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
			КонецЦикла;
			Реквизиты.Товары = Запрос.Выполнить().Выгрузить();
		ИначеЕсли ДанныеЗаполнения.Свойство("Товары") Тогда
			Реквизиты.Товары = ДанныеЗаполнения.Товары;
		КонецЕсли;
		Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьПоДанным(ЭтотОбъект, Реквизиты);
	Иначе
		Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыЗаполненияЗначенийАвтоподстановкиВидыЗапасовНомераГтд

Функция ВременныеТаблицы()
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов
	|
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|");
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, "НомерСтроки, АналитикаУчетаНоменклатуры, ВидЗапасов"));
	Запрос.Выполнить();
	Возврат ВременныеТаблицы;
КонецФункции

Процедура ЗаполнитьВидыЗапасовДокумента(ВременныеТаблицы, Отказ)	
	// спросим возможные остатки товаров к оформлению по аналитикам документа
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Остатки.ВидЗапасов КАК ВидЗапасов,
		|	Остатки.ДокументПоступления КАК ДокументПоступления,
		|	Остатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКОформлению.Остатки(,
		|		Организация = &Организация И Поставщик = &Поставщик
		|		И ВЫБОР КОГДА &КонтролироватьОстатки ТОГДА
		|			ДокументПоступления В (&ДокументыПоступления)
		|		ИНАЧЕ
		|			ИСТИНА
		|		КОНЕЦ
		|		И АналитикаУчетаНоменклатуры В (
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ Т.АналитикаУчетаНоменклатуры
		|			ИЗ Товары КАК Т
		|			ГДЕ Т.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|		)
		|	) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0.
		|
		|УПОРЯДОЧИТЬ ПО
		|	АналитикаУчетаНоменклатуры, ВидЗапасов
		|");
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("ДокументыПоступления", Товары.ВыгрузитьКолонку("ДокументПоступления"));
	КонтролироватьОстатки = ПолучитьФункциональнуюОпцию("КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям");
	Запрос.УстановитьПараметр("КонтролироватьОстатки", КонтролироватьОстатки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	// зальем остатки в кеш
	Остатки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Остаток = Остатки[Выборка.АналитикаУчетаНоменклатуры];
		Если Неопределено = Остаток Тогда
			Остаток = Новый Массив;
			Остатки.Вставить(Выборка.АналитикаУчетаНоменклатуры, Остаток);
		КонецЕсли;
		Остаток.Добавить(Новый Структура("ВидЗапасов, Количество, ДокументПоступления", Выборка.ВидЗапасов, Выборка.Количество, Выборка.ДокументПоступления));
	КонецЦикла;
	ВидЗапасовПоУмолчанию =
		Справочники.ВидыЗапасов.ВидЗапасовДокумента(Организация, ХозяйственнаяОперация);
	// пройдемся по товарам и заберем остатки из кеша
	Для Каждого Товар Из Товары Цикл
		Если ЗначениеЗаполнено(Товар.ВидЗапасов) Тогда
			Продолжить;
		КонецЕсли;
		Остаток = Остатки[Товар.АналитикаУчетаНоменклатуры];
		Если Неопределено = Остаток Тогда
			// вид запасов не будет покрыт, заполним умолчание и получим нехватку остатков на контроле проведения
			Товар.ВидЗапасов = ВидЗапасовПоУмолчанию;
			Продолжить;
		КонецЕсли;
		// остатки в кеше были
		Количество = Товар.Количество;
		Указатель = 0;
		Пока Количество > 0. И Указатель < Остаток.Количество() Цикл
			ОстатокЗапаса = Остаток[Указатель];
			
			Если КонтролироватьОстатки И Товар.ДокументПоступления <> ОстатокЗапаса.ДокументПоступления Тогда
				Указатель = Указатель + 1;
				Продолжить;
			КонецЕсли;
			
			Если Количество <= ОстатокЗапаса.Количество Тогда
				Товар.ВидЗапасов = ОстатокЗапаса.ВидЗапасов;
				ОстатокЗапаса.Количество = ОстатокЗапаса.Количество - Количество;
				Количество = 0.;
			ИначеЕсли ОстатокЗапаса.Количество > 0. Тогда // из остатка покрывается только часть
				// создаем новую позицию на покрываемую остатком запаса часть
				НовыйТовар = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйТовар, Товар);
				НовыйТовар.ВидЗапасов = ОстатокЗапаса.ВидЗапасов;
				НовыйТовар.Количество = ОстатокЗапаса.Количество;
				НовыйТовар.КоличествоУпаковок = 
					Окр(НовыйТовар.Количество * Товар.КоличествоУпаковок / Товар.Количество, 3);
				НовыйТовар.ТаможеннаяСтоимость = 
					Окр(НовыйТовар.Количество * Товар.ТаможеннаяСтоимость / Товар.Количество, 2);
				НовыйТовар.СуммаПошлины = 
					Окр(НовыйТовар.Количество * Товар.СуммаПошлины / Товар.Количество, 2);
				НовыйТовар.СуммаАкциза = 
					Окр(НовыйТовар.Количество * Товар.СуммаАкциза / Товар.Количество, 2);
				НовыйТовар.СуммаНДС = 
					Окр(НовыйТовар.Количество * Товар.СуммаНДС / Товар.Количество, 2);
				// изменяем старую позицию
				Товар.Количество = Товар.Количество - НовыйТовар.Количество;
				Товар.КоличествоУпаковок = Товар.КоличествоУпаковок - НовыйТовар.КоличествоУпаковок;
				Товар.ТаможеннаяСтоимость = Товар.ТаможеннаяСтоимость - НовыйТовар.ТаможеннаяСтоимость;
				Товар.СуммаПошлины = Товар.СуммаПошлины - НовыйТовар.СуммаПошлины;
				Товар.СуммаАкциза = Товар.СуммаАкциза - НовыйТовар.СуммаАкциза;
				Товар.СуммаНДС = Товар.СуммаНДС - НовыйТовар.СуммаНДС;
				
				Количество = Товар.Количество;
				ОстатокЗапаса.Количество = 0;
			КонецЕсли;
			Указатель = Указатель + 1;
		КонецЦикла;
		// вид запасов остался не покрыт, заполним умолчание и получим нехватку остатков на контроле проведения
		Если Не ЗначениеЗаполнено(Товар.ВидЗапасов) Тогда
			Товар.ВидЗапасов = ВидЗапасовПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
	ЗапасыСервер.ЗаполнитьНоменклатуруГТДИмпорт(Ссылка, Разделы, Товары, НомерГТД, Отказ);
	
	РаспределитьСуммыИзШапки();
	
КонецПроцедуры

Процедура РаспределитьСуммыИзШапки()
	
	// Распределим таможенный сбор по товарам
	ВсегоТаможеннаяСтоимость = Товары.Итог("ТаможеннаяСтоимость");
	
	// Распределяется по всем товарам независимо от ставок пошлины, акциза и НДС (т.е. от раздела)
	ОшибкаОкругленияТаможенныйСбор = 0;
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
        СтрокаТаблицы.ТаможенныйСбор = 	НДСИсходящийСервер.ОкруглитьСУчетомПогрешности(
											ТаможенныйСбор * СтрокаТаблицы.ТаможеннаяСтоимость / ВсегоТаможеннаяСтоимость, 
											2, 
											ОшибкаОкругленияТаможенныйСбор
										);
    КонецЦикла;

КонецПроцедуры // РаспределитьСуммыИзШапки


#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	Массив = Новый Массив;
	// Приходы в регистр контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	// Расходы из регистра контролируем только при проведении
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.ТоварыОрганизацийКОформлению);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
КонецПроцедуры

Процедура ПроверитьИСообщитьОшибку(УсловиеОшибки, Отказ, Знач Шаблон, Знач ИмяПоля, Знач СинонимПоля, Знач ИмяТабчасти = Неопределено, Знач НомерСтроки = Неопределено)
	Если УсловиеОшибки Тогда
		Сообщение = СтрЗаменить(Шаблон, "%СинонимПоля%", СинонимПоля);
		Сообщение = СтрЗаменить(Сообщение, "%НомерСтроки%", НомерСтроки);
		Сообщение = СтрЗаменить(Сообщение, "%ИмяТабчасти%", ИмяТабчасти);
		Если ЗначениеЗаполнено(ИмяТабчасти) И НомерСтроки > 0 Тогда
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабчасти, НомерСтроки, ИмяПоля);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, , ИмяПоля, "Объект", Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура 	КАК Номенклатура,
	|	ТаблицаТоваров.НалоговоеНазначение	КАК НалоговоеНазначение,
	|	ТаблицаТоваров.НомерРаздела 	КАК НомерРаздела,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРазделов.НомерРаздела 	КАК НомерРаздела,
	|	ТаблицаРазделов.СтавкаНДС 		КАК СтавкаНДС
	|
	|ПОМЕСТИТЬ ТаблицаРазделовДокумента
	|ИЗ
	|	&ТаблицаРазделов КАК ТаблицаРазделов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура 	КАК Номенклатура,
	|	ТаблицаРазделов.СтавкаНДС 		КАК СтавкаНДС,
	|	&Поставщик 						КАК Поставщик,
	|	ТаблицаТоваров.НалоговоеНазначение	КАК НалоговоеНазначение,
	|	&Контрагент 					КАК Контрагент
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаРазделовДокумента КАК ТаблицаРазделов
	|	ПО
	|		ТаблицаТоваров.НомерРаздела = ТаблицаРазделов.НомерРаздела
	|	
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|	ИЛИ ТаблицаРазделов.СтавкаНДС <> ТаблицаТоваров.АналитикаУчетаПартий.СтавкаНДС
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров"		, 	Товары.Выгрузить(, 
													"НомерСтроки, Номенклатура, НалоговоеНазначение, НомерРаздела, АналитикаУчетаПартий"));
	Запрос.УстановитьПараметр("ТаблицаРазделов"		, 	Разделы.Выгрузить(, 
													"НомерРаздела, СтавкаНДС"));
	Запрос.УстановитьПараметр("Поставщик"			, Партнер);
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
	
	Запрос.Выполнить();
	
	ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

Процедура ЗаполнитьСклад()
	Для Каждого Строка Из Товары Цикл
		Строка.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Строка.Склад, Ложь, Истина);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьНалоговыеНазначения() Экспорт
	
	ИспользоватьРаздельныйУчетПоНалогообложению = ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению");
	ОрганизацияПлательщикНДС          = Справочники.Организации.ПлательщикНДС(Организация, Дата);
	ОрганизацияНалоговоеНазначениеНДС = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТаблицаТоваров.НомерРаздела 	КАК НомерРаздела
	|
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРазделов.НомерРаздела 	КАК НомерРаздела,
	|	ТаблицаРазделов.СтавкаНДС 		КАК СтавкаНДС
	|
	|ПОМЕСТИТЬ ТаблицаРазделовДокумента
	|ИЗ
	|	&ТаблицаРазделов КАК ТаблицаРазделов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТаблицаРазделов.СтавкаНДС 		КАК СтавкаНДС
	|
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаРазделовДокумента КАК ТаблицаРазделов
	|	ПО
	|		ТаблицаТоваров.НомерРаздела = ТаблицаРазделов.НомерРаздела
	|	
	|");
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  Товары.Выгрузить(,  "НомерСтроки, НалоговоеНазначение, НомерРаздела"));
	Запрос.УстановитьПараметр("ТаблицаРазделов", Разделы.Выгрузить(, "НомерРаздела, СтавкаНДС"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если НЕ ИспользоватьРаздельныйУчетПоНалогообложению Тогда
			НалоговоеНазначениеСтроки = ОрганизацияНалоговоеНазначениеНДС;	
		Иначе	
			Если НЕ ОрганизацияПлательщикНДС Тогда	
				НалоговоеНазначениеСтроки = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			Иначе
				Если Не ЗначениеЗаполнено(Выборка.НалоговоеНазначение) Тогда
					Если НДСОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС) = 0 Тогда 	
						НалоговоеНазначениеСтроки = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;	
					Иначе
						НалоговоеНазначениеСтроки = ОрганизацияНалоговоеНазначениеНДС;
					КонецЕсли; 			
				Иначе
					НалоговоеНазначениеСтроки = Выборка.НалоговоеНазначение;	
				КонецЕсли; 	
			КонецЕсли; 		
		КонецЕсли; 
		
		СтрокаТаблицы = Товары.Найти(Выборка.НомерСтроки, "НомерСтроки");
		СтрокаТаблицы.НалоговоеНазначение = НалоговоеНазначениеСтроки;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНалоговыеНазначения()

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	Справочники.УпаковкиЕдиницыИзмерения.ОтработатьЛогикуСвязиРеквизитов(ЭтотОбъект);
	
	Если ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("НужноОбновитьВариантыПереупаковки", Истина);
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ДополнительныеСвойства.Вставить("ПоменялсяКоэффициент", Ложь);
		ДополнительныеСвойства.Вставить("ПоменялсяРодитель", Ложь);
		ДополнительныеСвойства.Вставить("БывшийРодитель", Неопределено);
	Иначе
		
		ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
		
		РеквизитыДоЗаписи = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Ссылка,
			Неопределено,
			"Родитель, Числитель, Знаменатель, КоличествоУпаковок, ПометкаУдаления");
		
		ПоменялсяКоэффициент = РеквизитыДоЗаписи.Числитель <> Числитель
							Или РеквизитыДоЗаписи.Знаменатель <> Знаменатель
							Или РеквизитыДоЗаписи.КоличествоУпаковок <> КоличествоУпаковок;
		
		Если РеквизитыДоЗаписи.Родитель <> Родитель
			Или ПоменялсяКоэффициент
			Или ПометкаУдаления <> РеквизитыДоЗаписи.ПометкаУдаления Тогда
			
			ДополнительныеСвойства.Вставить("ПоменялсяКоэффициент", ПоменялсяКоэффициент);
			ДополнительныеСвойства.Вставить("ПоменялсяРодитель", РеквизитыДоЗаписи.Родитель <> Родитель);
			ДополнительныеСвойства.Вставить("НужноОбновитьВариантыПереупаковки", Истина);
			
			Если ДополнительныеСвойства.ПоменялсяРодитель Тогда
				ДополнительныеСвойства.Вставить("БывшийРодитель", РеквизитыДоЗаписи.Родитель);
			Иначе
				ДополнительныеСвойства.Вставить("БывшийРодитель", Неопределено);
			КонецЕсли;
			
		Иначе
			ДополнительныеСвойства.Вставить("НужноОбновитьВариантыПереупаковки", Ложь);
			ДополнительныеСвойства.Вставить("ПоменялсяКоэффициент", Ложь);
			ДополнительныеСвойства.Вставить("ПоменялсяРодитель", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Упаковка = &Упаковка";
	
	Запрос.УстановитьПараметр("Упаковка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Значение = Выборка.Штрихкод;
		НаборЗаписей.Отбор.Штрихкод.Использование = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//Корректировка регистра сведений "ВариантыПереупаковки"
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Родитель);
	СтарыеМаксимальныеУпаковки = Новый Массив;
	
	Если НЕ Родитель.Пустая() Тогда
		
		Если Не Запрос.Выполнить().Пустой()
			И Не ЕстьВариантыПереупаковки(Родитель) Тогда
			
			НаборЗаписей = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Упаковка.Установить(Ссылка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() <> 0 Тогда
				
				СтараяМаксимальнаяУпаковка = НаборЗаписей[0].МаксимальнаяУпаковкаВВетви;
				
				//Заменить Максимальную упаковку старую на новую
				НаборЗаписей = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.МаксимальнаяУпаковкаВВетви.Установить(СтараяМаксимальнаяУпаковка);
				НаборЗаписей.Прочитать();
				ТаблицаРегистра = НаборЗаписей.Выгрузить();
				
				НаборЗаписей = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.МаксимальнаяУпаковкаВВетви.Установить(Родитель);
				НаборЗаписей.Прочитать();
				ТаблицаРегистра.ЗаполнитьЗначения(Родитель,"МаксимальнаяУпаковкаВВетви");
				НаборЗаписей.Загрузить(ТаблицаРегистра);
				НаборЗаписей.Записать();
				
				//Добавить запись с пустым источником
				НаборЗаписей.Отбор.МаксимальнаяУпаковкаВВетви.Установить(Родитель);
				НаборЗаписей.Отбор.Источник.Установить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				НаборЗаписей.Отбор.Упаковка.Установить(Родитель);
				НаборЗаписей.Прочитать();
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Упаковка = Родитель;
				НоваяЗапись.МаксимальнаяУпаковкаВВетви = Родитель;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда 
		
		Если ДанныеЗаполнения.Свойство("ТипИзмеряемойВеличины",ТипИзмеряемойВеличины)
			И ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
			
			Если (Не ДанныеЗаполнения.Свойство("Владелец",Владелец)
				Или Не ЗначениеЗаполнено(Владелец)) Тогда
				
				ТекстИсключения = НСтр("ru='Упаковку нужно создавать из формы номенклатуры или набора упаковок.';uk='Упаковку потрібно створювати з форми номенклатури або набору упаковок.'");
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("Родитель",Родитель)
				И ЗначениеЗаполнено(Родитель) Тогда
				
				ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Составная;
				
			КонецЕсли;
			
			СкладскаяГруппа = ЗначениеНастроекПовтИсп.СкладскаяГруппаУпаковокПоУмолчанию(СкладскаяГруппа);
			ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			
			ЕдиницаДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
			
			ГлубинаЕдиницаИзмерения = ЕдиницаДлины;
			ШиринаЕдиницаИзмерения  = ЕдиницаДлины;
			ВысотаЕдиницаИзмерения  = ЕдиницаДлины;
			
			ОбъемЕдиницаИзмерения   = Константы.ЕдиницаИзмеренияОбъема.Получить();
			ВесЕдиницаИзмерения     = Константы.ЕдиницаИзмеренияВеса.Получить();
		Иначе
			Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
		КонецЕсли;
		
	Иначе
		Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмерения");
		МассивНепроверяемыхРеквизитов.Добавить("Родитель");
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураМногооборотнаяТара");
		МассивНепроверяемыхРеквизитов.Добавить("ХарактеристикаМногооборотнаяТара");
		МассивНепроверяемыхРеквизитов.Добавить("ТипУпаковки");
		
		Если ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
			Или Не ЗначениеЗаполнено(ТипИзмеряемойВеличины) Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Числитель");
			МассивНепроверяемыхРеквизитов.Добавить("Знаменатель");
			
		КонецЕсли;
		
	Иначе
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтруктураРеквизитов.Вставить("НаборУпаковок", "НаборУпаковок");
			СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
		Иначе // если владелец-тип справочник НаборыУпаковок.
			СтруктураРеквизитов.Вставить("НаборУпаковок", "Ссылка");
		КонецЕсли;
		
		ЗначенияРеквизитовВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Владелец, СтруктураРеквизитов);
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если ЗначенияРеквизитовВладельца.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
				
				ТекстСообщения = НСтр("ru='Для номенклатуры %Владелец% выбран набор упаковок ""%ТекущееЗначение%"", 
                    |поэтому все упаковки должны подчинятся набору упаковок, а не номенклатуре'
                    |;uk='Для номенклатури %Владелец% вибраний набір упаковок ""%ТекущееЗначение%"", 
                    |тому всі упаковки повинні бути підпорядковані набору упаковок, а не номенклатурі'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Владелец%", Строка(Владелец));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущееЗначение%", Строка(ЗначенияРеквизитовВладельца.НаборУпаковок));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Владелец", , Отказ);
				
			КонецЕсли;
			
			Если ЗначенияРеквизитовВладельца.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
				
				ТекстСообщения = НСтр("ru='Номенклатура %Владелец% не является товаром. Упаковки ведутся только для товаров.';uk='Номенклатура %Владелец% не є товаром. Упаковки ведуться тільки для товарів.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Владелец%", Строка(Владелец));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Владелец",, Отказ);
				
			КонецЕсли;
			
		Иначе // если владелец-тип справочник НаборыУпаковок.
			
			Если ЗначенияРеквизитовВладельца.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
				
				ТекстСообщения = НСтр("ru='Для номенклатуры %Владелец% выбран набор упаковок ""%ТекущееЗначение%"",
                    |поэтому все упаковки должны подчинятся номенклатуре, а не набору упаковок'
                    |;uk='Для номенклатури %Владелец% вибраний набір упаковок ""%ТекущееЗначение%"",
                    |тому всі упаковки повинні бути підпорядковані номенклатурі, а не набору упаковок'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Владелец%", Строка(Владелец));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущееЗначение%", Строка(ЗначенияРеквизитовВладельца.НаборУпаковок));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Владелец", , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначенияРеквизитовДоЗаписи = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Ссылка,
			Неопределено,
			"Родитель");
		
		Если Не ЭтоНовый()
			И ЗначенияРеквизитовДоЗаписи.Родитель <> Родитель
			И Не ДополнительныеСвойства.Свойство("РазрешенаСменаРодителя") Тогда
			
			ТекстСообщения = НСтр("ru='Родителя можно менять только из формы элемента.';uk='Батьківський елемент можна міняти тільки з форми елемента.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , ,Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			
			ЗначенияРеквизитовРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Родитель, "ТипИзмеряемойВеличины, 
				|ТипУпаковки");
			
			Если ЗначенияРеквизитовРодителя.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
				
				ТекстСообщения = НСтр("ru='Нельзя подчинять упаковки единицам измерения';uk='Не можна підпорядковувати упаковки одиницям вимірювання'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Если ЗначенияРеквизитовРодителя.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка Тогда
				ТекстСообщения = НСтр("ru='Разупаковки нельзя упаковывать.';uk='Розупаковки не можна упаковувати.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПоставляетсяВМногооборотнойТаре Тогда
			
			Если ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Составная
				И МинимальноеКоличествоУпаковокМногооборотнойТары > КоличествоУпаковок Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Минимальное количество упаковок многооборотной тары не может быть больше количества упаковок.';uk='Мінімальна кількість упаковок багатооборотної тари не може бути більше кількості упаковок.'"),
					,
					"Объект.МинимальноеКоличествоУпаковокМногооборотнойТары",
					,
					Отказ);
			
			ИначеЕсли ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная
				И МинимальноеКоличествоУпаковокМногооборотнойТары > Числитель Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Минимальное количество упаковок многооборотной тары не может быть больше количества единиц измерения 
                        |по классификатору.'
                        |;uk='Мінімальна кількість упаковок багатооборотної тари не може бути більше кількості одиниць вимірювання 
                        |за класифікатором.'"),
					,
					"Объект.МинимальноеКоличествоУпаковокМногооборотнойТары",
					,
					Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка
			И Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(ЗначенияРеквизитовВладельца.ЕдиницаИзмерения) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Товар измеряется в мерной единице измерения - такую единицу нельзя разупаковывать.';uk='Товар вимірюється в вимірної одиниці вимірювання - таку одиницю не можна розупаковувати.'"),
				,
				"Объект.ТипУпаковки",
				,
				Отказ);
			
		КонецЕсли;
		
		Если ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Родитель");
			МассивНепроверяемыхРеквизитов.Добавить("КоличествоУпаковок");
			МассивНепроверяемыхРеквизитов.Добавить("Знаменатель");
		ИначеЕсли ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Составная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Числитель");
			МассивНепроверяемыхРеквизитов.Добавить("Знаменатель");
		ИначеЕсли ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Родитель");
			МассивНепроверяемыхРеквизитов.Добавить("КоличествоУпаковок");
			МассивНепроверяемыхРеквизитов.Добавить("Числитель");
		КонецЕсли;
		
		Если Не ПоставляетсяВМногооборотнойТаре Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НоменклатураМногооборотнаяТара");
			МассивНепроверяемыхРеквизитов.Добавить("ХарактеристикаМногооборотнаяТара");
		ИначеЕсли Не Справочники.Номенклатура.ХарактеристикиИспользуются(НоменклатураМногооборотнаяТара) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ХарактеристикаМногооборотнаяТара");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
		Если ДополнительныеСвойства.НужноОбновитьВариантыПереупаковки Тогда
			ОбновитьВариантыПереупаковки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьВариантыПереупаковки(РодительСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВариантыПереупаковки.Упаковка,
	|	ВариантыПереупаковки.Источник,
	|	ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви,
	|	ВариантыПереупаковки.Количество
	|ИЗ
	|	РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|ГДЕ
	|	ВариантыПереупаковки.Упаковка = &Упаковка
	|	И ВариантыПереупаковки.Источник.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Упаковка",РодительСсылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОбновитьВариантыПереупаковки()
	
	ТаблицаВариантовПереупаковки = Справочники.УпаковкиЕдиницыИзмерения.СформироватьТаблицуВариантовПереупаковкиНаСервере(Владелец);
	
	ТЗМаксимальныеУпаковкиВВетви = ТаблицаВариантовПереупаковки.Скопировать(,"МаксимальнаяУпаковкаВВетви");
	ТЗМаксимальныеУпаковкиВВетви.Свернуть("МаксимальнаяУпаковкаВВетви");
	МаксимальныеУпаковкиВВетви = ТЗМаксимальныеУпаковкиВВетви.ВыгрузитьКолонку("МаксимальнаяУпаковкаВВетви");
	
	Для Каждого МаксимальнаяУпаковкаВВетви Из МаксимальныеУпаковкиВВетви Цикл
		Отбор = Новый Структура("МаксимальнаяУпаковкаВВетви", МаксимальнаяУпаковкаВВетви);
		ВариантыПереупаковки = ТаблицаВариантовПереупаковки.Скопировать(Отбор);
		
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.МаксимальнаяУпаковкаВВетви.Установить(МаксимальнаяУпаковкаВВетви);
		Набор.Прочитать();
		Набор.Загрузить(ВариантыПереупаковки);
		Набор.Записать();
	КонецЦикла;
	
	//Очистить записи в регистре по максимальным упаковкам в ветви более неиспользуемым
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви КАК МаксимальнаяУпаковкаВВетви
	|ИЗ
	|	РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|ГДЕ
	|	НЕ ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви В (&МаксимальнаяУпаковкаВВетви)
	|	И ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви.Владелец = &Владелец";
	Запрос.УстановитьПараметр("МаксимальнаяУпаковкаВВетви", МаксимальныеУпаковкиВВетви);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.МаксимальнаяУпаковкаВВетви.Установить(Выборка.МаксимальнаяУпаковкаВВетви);
		Набор.Очистить();
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#КонецЕсли
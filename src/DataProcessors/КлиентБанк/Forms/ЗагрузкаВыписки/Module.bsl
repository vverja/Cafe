
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьТаблицуСчетов();
	
	Если Параметры.Свойство("БанковскийСчет")
		И ЗначениеЗаполнено(Параметры.БанковскийСчет) Тогда
		
		СтрокиТаблицы = Объект.БанковскиеСчета.НайтиСтроки(Новый Структура("Ссылка", Параметры.БанковскийСчет));
		Если СтрокиТаблицы.Количество() Тогда
			СтрокиТаблицы[0].Пометка = Истина;
			Объект.СписокСчетов.Добавить(СтрокиТаблицы[0].Ссылка);
			ИндексСтрокиСчета = Объект.БанковскиеСчета.Индекс(СтрокиТаблицы[0]);
		КонецЕсли;
	КонецЕсли;
	
	ЗагруженныеДокументы.ТекстЗапроса = ТекстЗапросаЗагруженныеДокументы();
	ЗагруженныеДокументыБазовая.ТекстЗапроса = ТекстЗапросаЗагруженныеДокументыБазовая();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЖурналПлатежей") Тогда
		ИмяЖурнала = "ЗагруженныеДокументыБазовая";
		Элементы.СтраницыЖурналы.ТекущаяСтраница = Элементы.СтраницаЖурналБезналичныхПлатежейБазовая;
	Иначе
		ИмяЖурнала = "ЗагруженныеДокументы";
		Элементы.СтраницыЖурналы.ТекущаяСтраница = Элементы.СтраницаЖурналБезналичныхПлатежей;
	КонецЕсли;
	
	НесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	УстановитьОтборДинамическихСписков();
	
	УстановитьВидимость();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВозможностьВыбораФайлов = ПодключитьРасширениеРаботыСФайлами();
	
	ПрочитатьДанныеВыписок();
	
	Если Объект.СписокСчетов.Количество() = 1 Тогда
		БанковскийСчет = Объект.СписокСчетов[0].Значение;
		Элементы.БанковскиеСчета.ТекущаяСтрока = ИндексСтрокиСчета;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаБанковскихСчетов

&НаКлиенте
Процедура БанковскиеСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	
	Если Поле.Имя = "БанковскиеСчетаСсылка" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	ИначеЕсли Поле.Имя = "БанковскиеСчетаНастройкаОбмена" Тогда
		
		Если ТекущиеДанные.Загружается Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	
	
	ПодключитьОбработчикОжидания("ВывестиЗаголовокВыписки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПометкаПриИзменении(Элемент)
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Счет.Пометка Тогда
			Счет.Загружен = Ложь;
			Счет.Загружается = Ложь;
			Объект.СписокСчетов.Добавить(Счет.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПериодЗагрузкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	
	ТекущиеДанные.ДатаНачалаЗагрузки = ТекущиеДанные.ПериодЗагрузки.ДатаНачала;
	ТекущиеДанные.ДатаКонцаЗагрузки = ТекущиеДанные.ПериодЗагрузки.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаНастройкаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВозможностьВыбораФайлов Тогда
		ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
		ВыборФайлаОбменаСБанком(ТекущиеДанные, "Загрузка");
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаНастройкаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.НастройкаОбмена) Тогда
		ФинансыКлиент.ОткрытьФайлДляПросмотра(
			"Объект.БанковскиеСчета[" + Строка(Элементы.БанковскиеСчета.ТекущаяСтрока) + "].НастройкаОбмена",
			ТекущиеДанные.НастройкаОбмена, ТекущиеДанные.Кодировка, НСтр("ru='Файл выписки';uk='Файл виписки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаНастройкаОбменаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	
	ТекущиеДанные.АдресХранилищаФайла = "";
	ТекущиеДанные.Выписка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	
	ПодключитьОбработчикОжидания("ОбработатьЗавершениеЗагрузки", 1, Истина);
	
КонецПроцедуры



&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаЗагруженныеДокументы" Тогда
		Если Объект.СписокСчетов.Количество() = 1 Тогда
			Если БанковскийСчетОтбор <> Объект.СписокСчетов[0].Значение Тогда
				БанковскийСчетОтбор = Объект.СписокСчетов[0].Значение;
				УстановитьОтборДинамическихСписков();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЗагруженныхДокументов

&НаКлиенте
Процедура БанковскийСчетОтборПриИзменении(Элемент)
	
	БанковскийСчетОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетОтборПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоследняяВыпискаПриИзменении(Элемент)
	
	ТолькоПоследняяВыпискаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТолькоПоследняяВыпискаПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПлатежиСОшибкамиПриИзменении(Элемент)
	
	ТолькоПлатежиСОшибкамиПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТолькоПлатежиСОшибкамиПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагруженныеДокументыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТекущиеДанные = Элементы[ИмяЖурнала].ТекущиеДанные;
		
		ВыборКонтрагентаНаСервере(
			ТекущиеДанные.ИмяКонтрагента,
			ВыбранноеЗначение,
			ТекущиеДанные.ДанныеВыписки,
			ТекущиеДанные.БанковскийСчет,
			ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыборКонтрагентаНаСервере(ИмяКонтрагента, Контрагент, ДанныеВыписки, БанковскийСчет, ДокументСсылка)
	
	Если Не ПустаяСтрока(ДанныеВыписки) Тогда
		
		ДанныеДокумента = РазобратьДанныеВыпискиДокумента(ДанныеВыписки, БанковскийСчет);
		
		Если ДанныеДокумента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеДокумента.Вставить("Контрагент", Контрагент);
		
		ПодставитьКонтрагентаНаСервере(ИмяКонтрагента, Контрагент, ДанныеДокумента, БанковскийСчет)
		
	Иначе
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.Контрагент = Контрагент;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
		КонецЕсли;
		
		ДокументОбъект.Записать();
		
		Элементы[ИмяЖурнала].Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметитьСчета(Команда)
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Не Счет.Загружается Тогда
			Счет.Пометка = Истина;
			Объект.СписокСчетов.Добавить(Счет.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиСчетов(Команда)
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Не Счет.Загружается Тогда
			Счет.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСчетов(Команда)
	
	// Если есть счета, которые загружаются, обновить не даем
	ПроизводитсяЗагрузка = Ложь;
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Счет.Загружается Тогда
			ПроизводитсяЗагрузка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПроизводитсяЗагрузка Тогда
		ОбновитьСписокСчетовНаСервере();
		ПрочитатьДанныеВыписок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСчетовНаСервере()
	
	ЗаполнитьТаблицуСчетов();
	
	// Отмеченные счета сохраняют отметку
	МассивНайденныхСчетов = Новый Массив;
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		СчетСписка = Объект.СписокСчетов.НайтиПоЗначению(Счет.Ссылка);
		Если СчетСписка <> Неопределено Тогда
			Счет.Пометка = Истина;
			МассивНайденныхСчетов.Добавить(СчетСписка);
		КонецЕсли;
	КонецЦикла;
	
	МассивНеНайденныхСчетов = Новый Массив;
	Для каждого Счет из Объект.СписокСчетов Цикл
		Если МассивНайденныхСчетов.Найти(Счет) = Неопределено Тогда
			МассивНеНайденныхСчетов.Добавить(Счет);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Счет Из МассивНеНайденныхСчетов Цикл
		Объект.СписокСчетов.Удалить(Счет);
	КонецЦикла;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Команда)
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;

	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		ВозможностьВыбораФайлов = Ложь;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для импрта выписки из банковского счета используется XML файл.
                | Импорт из XML не поддержуется для Web клиента. Выберите другой клиент.'
                |;uk='Для імпорту виписки з банківського рахунку використовується XML файл.
                |Імпорт з XML не підтримується для Web клієнта. Виберіть інший клієнт.'"),
			,
			"Элементы.БанковскиеСчетаСсылка");
	КонецЕсли; 
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ВозможностьВыбораФайлов Тогда
			ВыборФайлаОбменаСБанком(ТекущиеДанные, "Загрузка");
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл", 0.1, Истина);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для выбора файла должна быть выделена строка с банковским счетом.
                |Если список банковских счетов пуст, убедитесь, что в карточке банковского счета включен обмен с банком.'
                |;uk='Для вибору файлу повинен бути виділений рядок з банківським рахунком.
                |Якщо список банківських рахунків порожній, переконайтеся, що у картці банківського рахунку включений обмін з банком.'"),
			,
			"Элементы.БанковскиеСчетаСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.НастройкаОбмена) Тогда
			ФинансыКлиент.ОткрытьФайлДляПросмотра(
				"Объект.БанковскиеСчета[" + Строка(Элементы.БанковскиеСчета.ТекущаяСтрока) + "].НастройкаОбмена",
				ТекущиеДанные.НастройкаОбмена, ТекущиеДанные.Кодировка, НСтр("ru='Файл выписки';uk='Файл виписки'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументы(Команда)
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		
		Если Не Счет.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = "";
		 
		Если ЗначениеЗаполнено(Счет.НастройкаОбмена) Тогда
			#Если НЕ ВебКлиент Тогда
			ПрочитатьДанныеВыписки(Счет);
			#Иначе
			Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Для импрта выписки из банковского счета %1 используется XML файл. Импорт из XML не поддержуется для Web клиента. Выберите другой клиент.';uk='Для імпорту виписки з банківського рахунку %1 використовується XML файл. Імпорт з XML не підтримується для Web клієнта. Виберіть інший клієнт.'"), Счет.Ссылка);
			КонецЕсли; 
			#КонецЕсли
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Для банковского счета %1 не выбран файл выписки в настройке обмена. Выберите файл.';uk='Для банківського рахунку %1 не вибрано файл виписки в настройці обміну. Виберіть файл.'"), Счет.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения
				,, Элементы.БанковскиеСчетаНастройкаОбмена.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ЗагрузитьНаСервере(); // Загрузка из файлов
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ОбработатьЗавершениеЗагрузки", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Счет.Пометка И Не Счет.Загружается И Не Счет.ПрямойОбмен И Счет.Выписка <> Неопределено Тогда
			Счет.АдресХранилищаФайла = ПоместитьВоВременноеХранилище(Счет.Выписка.СтрокиВыписки, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ЗагрузитьПлатежи(ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	ТекущиеДанные = Элементы[ИмяЖурнала].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БанковскийСчет = ТекущиеДанные.БанковскийСчет;
	Контрагент     = ТекущиеДанные.Контрагент;
	ИмяКонтрагента = ТекущиеДанные.ИмяКонтрагента;
	ДанныеВыписки  = ТекущиеДанные.ДанныеВыписки;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В документе %1 уже задан контрагент %2. Его можно изменить в форме документа.';uk='У документі %1 вже заданий контрагент %2. Його можна змінити у формі документа.'"),
				ТекущиеДанные.Ссылка,
				ТекущиеДанные.Контрагент);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ТекущиеДанные.Ссылка,
			,
			Элементы[ИмяЖурнала+"Контрагент"].Имя);
		
	ИначеЕсли ПустаяСтрока(ИмяКонтрагента) Тогда
		
		ТекстСообщения = НСтр("ru='Неизвестно наименование контрагента, автоматическое создание невозможно.';uk='Невідомо найменування контрагента, автоматичне створення неможливе.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ТекущиеДанные.Ссылка,
			,
			Элементы[ИмяЖурнала+"Контрагент"].Имя);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДанныеВыписки) Тогда
			ТекстСообщения = НСтр("ru='Не удалось создать контрагента автоматически.
            |Cоздайте контрагента вручную и подставьте в документ.'
            |;uk='Не вдалося створити контрагента автоматично.
            |Створіть контрагента вручну і підставте в документ.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ТекущиеДанные.Ссылка,
				,
				Элементы[ИмяЖурнала+"Контрагент"].Имя);
			Возврат;
		КонецЕсли;
		
		ДанныеДокумента = РазобратьДанныеВыпискиДокумента(ДанныеВыписки, БанковскийСчет);
		
		Если ДанныеДокумента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НайденныйКонтрагент = НайтиКонтрагента(ИмяКонтрагента, ДанныеДокумента);
		Если НайденныйКонтрагент <> Неопределено Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Найден существующий контрагент - %1.
                |
                |Подставить его в документы, или создать нового?'
                |;uk='Знайдений існуючий контрагент - %1.
                |
                |Підставити його в документи, або створити нового?'"),
				НайденныйКонтрагент);
				
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПоискКонтрагентаЗавершение",
				ЭтотОбъект,
				Новый Структура("НайденныйКонтрагент, ИмяКонтрагента, ДанныеДокумента, БанковскийСчет",
					НайденныйКонтрагент, ИмяКонтрагента, ДанныеДокумента, БанковскийСчет));
			
			ВариантыДействий = Новый СписокЗначений;
			ВариантыДействий.Добавить("Найденный", НСтр("ru='Подставить найденного';uk='Підставити знайденого'"));
			ВариантыДействий.Добавить("Новый", НСтр("ru='Создать нового';uk='Створити нового'"));
			ВариантыДействий.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, ВариантыДействий);
		Иначе
			
			СоздатьКонтрагентаНаСервере(ИмяКонтрагента, ДанныеДокумента, БанковскийСчет);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКонтрагентаЗавершение(РезультатВопроса, ПараметрыВопроса) Экспорт
	
	Если РезультатВопроса = "Найденный" Тогда
		
		ПодставитьКонтрагентаНаСервере(
			ПараметрыВопроса.ИмяКонтрагента,
			ПараметрыВопроса.НайденныйКонтрагент,
			ПараметрыВопроса.ДанныеДокумента,
			ПараметрыВопроса.БанковскийСчет);
		
	ИначеЕсли РезультатВопроса = "Новый" Тогда
		
		СоздатьКонтрагентаНаСервере(
			ПараметрыВопроса.ИмяКонтрагента,
			ПараметрыВопроса.ДанныеДокумента,
			ПараметрыВопроса.БанковскийСчет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагента(Команда)
	
	ТекущиеДанные = Элементы[ИмяЖурнала].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент    = ТекущиеДанные.Контрагент;
	ДанныеВыписки = ТекущиеДанные.ДанныеВыписки;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В документе %1 уже задан контрагент %2. Его можно изменить в форме документа.';uk='У документі %1 вже заданий контрагент %2. Його можна змінити у формі документа.'"),
				ТекущиеДанные.Ссылка,
				ТекущиеДанные.Контрагент);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ТекущиеДанные.Ссылка,
			,
			Элементы[ИмяЖурнала+"Контрагент"].Имя);
	Иначе
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", , Элементы[ИмяЖурнала]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Настройка ЭДО не указана
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскиеСчетаНастройкаОбмена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.ПрямойОбмен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.НастройкаОбмена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<ЭДО не настроен. Создать настройку>';uk='<ЕДО не налаштований. Створити настройку>'"));
	
	// Видимость предупреждения о возможности прямого обмена
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскиеСчетаЕстьВозможностьПрямогоОбмена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.ПрямойОбмен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.НастройкаОбмена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Настройка прямого обмена не редактируется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскиеСчетаНастройкаОбмена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.ПрямойОбмен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Период загрузки для прямого обмена не редактируется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскиеСчетаПериодЗагрузки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.ПрямойОбмен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Производится загрузка данных по счету
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскиеСчетаПериодЗагрузки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.Загружается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Загружается...';uk='Завантажується...'"));
	
	// Загружена выписка по счету
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскиеСчетаПериодЗагрузки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.Загружен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Загружен';uk='Завантажений'"));
	
	// Условное оформление динамического списка "ЗагруженныеДокументы"
	СписокУсловноеОформление = ЗагруженныеДокументы.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Не найден контрагент
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Не найден контрагент';uk='Не знайдений контрагент'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИмяКонтрагента");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Найден контрагент
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Найден контрагент';uk='Знайдений контрагент'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИмяКонтрагента");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Есть ошибки загрузки
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Есть ошибки загрузки';uk='Є помилки завантаження'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИмяКонтрагента");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Условное оформление динамического списка "ЗагруженныеДокументыБазовая"
	СписокУсловноеОформление = ЗагруженныеДокументыБазовая.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Не найден контрагент
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Не найден контрагент';uk='Не знайдений контрагент'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИмяКонтрагента");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Найден контрагент
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Найден контрагент';uk='Знайдений контрагент'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИмяКонтрагента");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Есть ошибки загрузки
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Есть ошибки загрузки';uk='Є помилки завантаження'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ИмяКонтрагента");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ЕстьВозможностьПрямогоОбмена = Ложь;
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Не Счет.ПрямойОбмен И Счет.ЕстьВозможностьПрямогоОбмена Тогда
			ЕстьВозможностьПрямогоОбмена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.БанковскиеСчетаЕстьВозможностьПрямогоОбмена.Видимость = ЕстьВозможностьПрямогоОбмена;
	
	Элементы.ЗагруженныеДокументыОрганизация.Видимость = НесколькоОрганизаций;
	Элементы.ЗагруженныеДокументыБазоваяОрганизация.Видимость = НесколькоОрганизаций;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ЗаполнитьТаблицуСчетовЗагрузки();
	ЗначениеВРеквизитФОрмы(Обработка, "Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаЗагруженныеДокументы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Проведен,
	|	
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер,
	|	
	|	ДанныеДокумента.БанковскийСчет,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.Тип = Тип(Документ.ПоступлениеБезналичныхДенежныхСредств) ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|				)
	|			ТОГДА
	|				ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ПоступлениеБезналичныхДенежныхСредств).БанковскийСчет.Владелец
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника)
	|			ТОГДА
	|				ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ПоступлениеБезналичныхДенежныхСредств).ПодотчетноеЛицо
	|			ИНАЧЕ
	|				ДанныеДокумента.Контрагент
	|			КОНЕЦ
	|		КОГДА ДанныеДокумента.Тип = Тип(Документ.СписаниеБезналичныхДенежныхСредств) ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|					)
	|				ТОГДА
	|					ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).БанковскийСчетПолучатель.Владелец
	|				КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|				ТОГДА
	|					ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).ПодотчетноеЛицо
	|				ИНАЧЕ
	|					ДанныеДокумента.Контрагент
	|			КОНЕЦ
	|	КОНЕЦ КАК Контрагент,
	|	ДанныеДокумента.Ссылка.ИмяКонтрагента КАК ИмяКонтрагента,
	|	
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	
	|	ДанныеДокумента.СуммаПоступления,
	|	ДанныеДокумента.СуммаСписания,
	|	
	|	ДанныеДокумента.Ссылка.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.Валюта,
	|	
	|	ДанныеДокумента.НазначениеПлатежа,
	|	ДанныеДокумента.Ссылка.ОшибкиЗагрузки КАК ОшибкиЗагрузки,
	|	
	|	ДанныеДокумента.Ссылка.ДанныеВыписки КАК ДанныеВыписки,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Тип = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ПоступлениеБезналичныхДенежныхСредств)
	|	КОНЕЦ КАК СсылкаПоступлениеБезналичныхДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Тип = ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств)
	|	КОНЕЦ КАК СсылкаСписаниеБезналичныхДенежныхСредств
	|	
	|ИЗ
	|	ЖурналДокументов.БезналичныеПлатежи КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПоследнийОбменСБанками КАК ПоследнийОбменСБанками
	|	ПО
	|		ПоследнийОбменСБанками.БанковскийСчет = ДанныеДокумента.БанковскийСчет
	|	
	|ГДЕ
	|	ДанныеДокумента.Тип В (
	|		ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|		ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|	)
	|	И (ДанныеДокумента.ДатаПроведенияБанком МЕЖДУ
	|		ПоследнийОбменСБанками.ДатаНачалаЗагрузки И ПоследнийОбменСБанками.ДатаКонцаЗагрузки
	|		ИЛИ НЕ &ОграничиватьПериодВыписки)
	|	И ДанныеДокумента.Ссылка.ДатаЗагрузки <> ДАТАВРЕМЯ(01,01,0001)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаЗагруженныеДокументыБазовая()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер,
	|	
	|	ДанныеДокумента.БанковскийСчетКасса КАК БанковскийСчет,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Операция КАК ХозяйственнаяОперация,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.Тип = Тип(Документ.ПоступлениеБезналичныхДенежныхСредств) ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.Операция В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|				)
	|			ТОГДА
	|				ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ПоступлениеБезналичныхДенежныхСредств).БанковскийСчет.Владелец
	|			КОГДА ДанныеДокумента.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника)
	|			ТОГДА
	|				ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ПоступлениеБезналичныхДенежныхСредств).ПодотчетноеЛицо
	|			ИНАЧЕ
	|				ДанныеДокумента.ПолучательПлательщик
	|			КОНЕЦ
	|		КОГДА ДанныеДокумента.Тип = Тип(Документ.СписаниеБезналичныхДенежныхСредств) ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.Операция В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|					)
	|				ТОГДА
	|					ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).БанковскийСчетПолучатель.Владелец
	|				КОГДА ДанныеДокумента.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|				ТОГДА
	|					ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).ПодотчетноеЛицо
	|				ИНАЧЕ
	|					ДанныеДокумента.ПолучательПлательщик
	|			КОНЕЦ
	|	КОНЕЦ КАК Контрагент,
	|	ДанныеДокумента.Ссылка.ИмяКонтрагента КАК ИмяКонтрагента,
	|	
	|	ДанныеДокумента.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	
	|	ДанныеДокумента.СуммаПоступления КАК СуммаПоступления,
	|	ДанныеДокумента.СуммаСписания КАК СуммаСписания,
	|	
	|	ДанныеДокумента.Ссылка.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	
	|	ДанныеДокумента.Ссылка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДанныеДокумента.Ссылка.ОшибкиЗагрузки КАК ОшибкиЗагрузки,
	|	
	|	ДанныеДокумента.Ссылка.ДанныеВыписки КАК ДанныеВыписки,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Тип = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ПоступлениеБезналичныхДенежныхСредств)
	|	КОНЕЦ КАК СсылкаПоступлениеБезналичныхДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Тип = ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств)
	|	КОНЕЦ КАК СсылкаСписаниеБезналичныхДенежныхСредств
	|	
	|ИЗ
	|	ЖурналДокументов.Платежи КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПоследнийОбменСБанками КАК ПоследнийОбменСБанками
	|	ПО
	|		ПоследнийОбменСБанками.БанковскийСчет = ДанныеДокумента.БанковскийСчетКасса
	|	
	|ГДЕ
	|	ДанныеДокумента.Тип В (
	|		ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|		ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|	)
	|	И (ДанныеДокумента.Ссылка.ДатаПроведенияБанком МЕЖДУ
	|		ПоследнийОбменСБанками.ДатаНачалаЗагрузки И ПоследнийОбменСБанками.ДатаКонцаЗагрузки
	|		ИЛИ НЕ &ОграничиватьПериодВыписки)
	|	И ДанныеДокумента.Ссылка.ДатаЗагрузки <> ДАТАВРЕМЯ(01,01,0001)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанныеВыписок()
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		#Если НЕ ВебКлиент Тогда
			ПрочитатьДанныеВыписки(Счет); 
		#Иначе
			Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
		#КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеВыписки(Счет)
	
	Счет.ДатаНачалаЗагрузки = '00010101';
	Счет.ДатаКонцаЗагрузки = '00010101';
	
	ТекстСообщения = "";
	СтрокиВыписки = ПрочитатьФайлВыписки(Счет.НастройкаОбмена, Счет.Кодировка, ТекстСообщения);
	
	Если СтрокиВыписки <> Неопределено Тогда
		
		ДанныеВыписки = РазобратьФайлВыписки(СтрокиВыписки, Ложь);
		
		Счет.Выписка = Новый Структура;
		Счет.Выписка.Вставить("ДанныеВыписки", ДанныеВыписки);
		Счет.Выписка.Вставить("СтрокиВыписки", СтрокиВыписки);
		Счет.Выписка.Вставить("ТекстСообщения", "");
		
		Если ДанныеВыписки <> Неопределено
			И ТипЗнч(ДанныеВыписки) = Тип("Структура")
			И ДанныеВыписки.Свойство("Заголовок") Тогда
			
			Счет.ДатаНачалаЗагрузки = ПолучитьДатуИзСтроки(ДанныеВыписки.Заголовок.ДатаНачала);
			Счет.ДатаКонцаЗагрузки =  ПолучитьДатуИзСтроки(ДанныеВыписки.Заголовок.ДатаКонца);
			 
			
		КонецЕсли;
		
	Иначе
		Счет.Выписка = Новый Структура;
		Счет.Выписка.Вставить("ДанныеВыписки", Неопределено);
		Счет.Выписка.Вставить("СтрокиВыписки", Неопределено);
		Счет.Выписка.Вставить("ТекстСообщения", ТекстСообщения);
	КонецЕсли;
	
	Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
	
КонецПроцедуры

&НаСервере
Функция РазобратьФайлВыписки(СтрокиВыписки,ЧитатьДокументы)
	Возврат Обработки.КлиентБанк.РазобратьФайлВыписки(СтрокиВыписки, ЧитатьДокументы);	
КонецФункции

&НаСервере
Функция ПолучитьДатуИзСтроки(СтрокаДата)
	Возврат Обработки.КлиентБанк.ПолучитьДатуИзСтроки(СтрокаДата);	
КонецФункции
 
 

&НаКлиенте
Процедура ВывестиЗаголовокВыписки()
	
	ТекстСообщения = "";
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПрямойОбмен Тогда
		ТекстСообщения = НСтр("ru='<Выбран прямой обмен. Данные будут запрошены при загрузке платежей.>';uk='<Обрано прямий обмін. Дані будуть запитані при завантаженні платежів.>'");
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.НастройкаОбмена) Тогда
		ТекстСообщения = НСтр("ru='<Не указан файл выписки.>';uk='<Не вказано файл виписки.>'");
		
	Иначе
		#Если НЕ ВебКлиент Тогда
		ПрочитатьДанныеВыписки(ТекущиеДанные); // файл перечитывается на случай, если он изменился
		
		Если ТипЗнч(ТекущиеДанные.Выписка) = Тип("Структура") Тогда
			Если ТекущиеДанные.Выписка.ДанныеВыписки <> Неопределено Тогда
				
				ТекстСообщения = ЗаголовокФайлаВыписки(ТекущиеДанные);
			Иначе
				ТекстСообщения = ТекущиеДанные.Выписка.ТекстСообщения;
			КонецЕсли;
		Иначе
			ТекущиеДанные.ДатаНачалаЗагрузки = '00010101';
			ТекущиеДанные.ДатаКонцаЗагрузки = '00010101';
			ТекстСообщения = НСтр("ru='<Не удалось прочитать файл выписки. Проверьте корректность файла.>';uk='<Не вдалося прочитати файл виписки. Перевірте коректність файлу.>'");
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	ЗаголовокВыписки.Очистить();
	ЗаголовокВыписки.ДобавитьСтроку(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеЗагрузки()
	
	ЕстьЗавершенныеЗагрузки = Ложь;
	ЕстьНевыполненныеЗадания = Ложь;
	
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		Если Счет.Загружается И ЗначениеЗаполнено(Счет.ИдентификаторЗагрузки) Тогда
			Если ЗаданиеВыполнено(Счет.ИдентификаторЗагрузки) Тогда
				Счет.Пометка = Ложь;
				Счет.Загружается = Ложь;
				Счет.СохранитьФайл = Истина;
			Иначе
				ЕстьНевыполненныеЗадания = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
	КонецЦикла;
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Счет.СохранитьФайл Тогда
			ЕстьЗавершенныеЗагрузки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗавершенныеЗагрузки Тогда
		ЗавершитьЗагрузку();
	КонецЕсли;
	
	Если ЕстьНевыполненныеЗадания Тогда
		ПодключитьОбработчикОжидания("ОбработатьЗавершениеЗагрузки", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗагрузку()
	
	ЗагруженныеСчета = Новый Массив;
	
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		Если Счет.СохранитьФайл Тогда
			ЗагруженныеСчета.Добавить(Счет);
			Счет.СохранитьФайл = Ложь;
			Счет.Загружен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Счета = "";
	Для каждого Счет из ЗагруженныеСчета Цикл
		Счета = Счета + Строка(Счет.Ссылка) + "
		|";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Счета) Тогда
		
		ПоказатьОповещениеПользователя(,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Данные по счетам
            |%1 успешно загружены'
            |;uk='Дані за рахунками
            |%1 успішно завантажено'"),
			Счета)
		);
		Оповестить("Загрузка_ОбменСБанками");
	КонецЕсли;
	
	ТаблицаОтчетОЗагрузке = Неопределено;
	ОбработатьЗавершениеЗагрузкиНаСервере(ТаблицаОтчетОЗагрузке);
	
	Если Объект.ОтчетОЗагрузке И ТаблицаОтчетОЗагрузке <> Неопределено Тогда
		ТаблицаОтчетОЗагрузке.ТолькоПросмотр = Истина;
		ТаблицаОтчетОЗагрузке.Показать(НСтр("ru='Отчет о загруженных платежах';uk='Звіт про завантажені платежі'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеЗагрузкиНаСервере(ТаблицаОтчетОЗагрузке)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ЗаписатьПериодПоследнейВыписки();
	Обработка.ЗаписатьОстаткиНаСчетахПоДаннымВыписки();
	
	Если Объект.ОтчетОЗагрузке Тогда
		ТаблицаОтчетОЗагрузке = Обработка.ПечатьОтчетаОЗагрузке();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
		Если Счет.Загружен Тогда
			Счет.АдресХранилищаДокументов = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Функция ЗаголовокФайлаВыписки(Счет)
	
	Если Счет = Неопределено Тогда
		Возврат "";
	КонецЕСли;
	
	ТекстЗаголовка = "";
	
	ДанныеЗаголовкаВыписки  = "";
	СписокСчетовВыписки     = "";
	РасчетныеСчетаВыписки   = "";
	
	Если ТипЗнч(Счет.Выписка.ДанныеВыписки) = Тип("Структура") Тогда
		
		ДанныеВыписки = Счет.Выписка.ДанныеВыписки;
		
		Если ДанныеВыписки.Свойство("СписокСчетов", СписокСчетовВыписки) Тогда
			
			Если СписокСчетовВыписки.Найти(СокрЛП(Счет.НомерСчета)) = Неопределено Тогда
				ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='<Файл не содержит данных по банковскому счету %1 с номером %2>';uk='<Файл не містить даних по банківському рахунку %1 з номером %2>'"),
					Строка(Счет.Ссылка),
					Счет.НомерСчета);
				Возврат ТекстЗаголовка;
			КонецЕСли;
		Иначе
			Возврат НСтр("ru='<Файл не содержит сведений о расчетных счетах>';uk='<Файл не містить відомостей про розрахункові рахунки>'");
		КонецЕсли;
		
		Если ДанныеВыписки.Свойство("Заголовок", ДанныеЗаголовкаВыписки) Тогда
			ТекстЗаголовка = "
			|" + НСтр("ru='Отправитель';uk='Відправник'") + "              " + ДанныеЗаголовкаВыписки.Отправитель + "
			|" + НСтр("ru='Дата создания';uk='Дата створення'") + "            " + ДанныеЗаголовкаВыписки.ДатаСоздания + " " + ДанныеЗаголовкаВыписки.ВремяСоздания + "
			|" + НСтр("ru='Начало периода';uk='Початок періоду'") + "           " + ДанныеЗаголовкаВыписки.ДатаНачала + "
			|" + НСтр("ru='Окончание периода';uk='Закінчення періоду'") + "        " + ДанныеЗаголовкаВыписки.ДатаКонца + "
			|";
		КонецЕсли;
		
		Если ДанныеВыписки.Свойство("РасчетныеСчета", РасчетныеСчетаВыписки) Тогда
			Для каждого РасчетныйСчет Из РасчетныеСчетаВыписки Цикл
				Если СокрЛП(РасчетныйСчет.РасчСчетОрг) = СокрЛП(Счет.НомерСчета) Тогда
				
					ТекстЗаголовка = ТекстЗаголовка + "
					|" + НСтр("ru='Расчетный счет';uk='Розрахунковий рахунок'") + "           " + РасчетныйСчет.РасчСчетОрг + "
					|" + НСтр("ru='Начальный остаток';uk='Початковий залишок'") + "        " + РасчетныйСчет.НачальныйОстаток + "
					|" + НСтр("ru='Поступило';uk='Надійшло'") + "                " + РасчетныйСчет.ВсегоПоступило + "
					|" + НСтр("ru='Списано';uk='Списано'") + "                  " + РасчетныйСчет.ВсегоСписано + "
					|" + НСтр("ru='Конечный остаток';uk='Кінцевий залишок'") + "         " + РасчетныйСчет.КонечныйОстаток + "%ПериодОстатков
					|";
					
					ПериодОстатков = "";
					Если Не ПустаяСтрока(РасчетныйСчет.ДатаНачала) И Не ПустаяСтрока(РасчетныйСчет.ДатаКонца) Тогда
						Если РасчетныйСчет.ДатаНачала = РасчетныйСчет.ДатаКонца Тогда
							ПериодОстатков = "
					|" + НСтр("ru='За день';uk='За день'") + "                  " + РасчетныйСчет.ДатаНачала;
						Иначе
							ПериодОстатков = "
					|" + НСтр("ru='За период';uk='За період'") + "                " + РасчетныйСчет.ДатаНачала + " - " + РасчетныйСчет.ДатаКонца;
						КонецЕсли;
					КонецЕсли;
					
					ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ПериодОстатков", ПериодОстатков);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

 

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	СписокСчетов.Добавить(Неопределено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗагруженныеДокументы,
		"БанковскийСчет",
		СписокСчетов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(БанковскийСчетОтбор));
	
	ОграничиватьПериодВыписки = (ТолькоПоследняяВыписка = 0);
	
	ЗагруженныеДокументы.Параметры.УстановитьЗначениеПараметра("ОграничиватьПериодВыписки", ОграничиватьПериодВыписки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗагруженныеДокументы,
		"ОшибкиЗагрузки",
		,
		ВидСравненияКомпоновкиДанных.Заполнено,
		,
		ТолькоПлатежиСОшибками = 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗагруженныеДокументы,
		"Проведен",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ТолькоПлатежиСОшибками = 2);
		
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗагруженныеДокументыБазовая,
		"БанковскийСчет",
		СписокСчетов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(БанковскийСчетОтбор));
	
	ЗагруженныеДокументыБазовая.Параметры.УстановитьЗначениеПараметра("ОграничиватьПериодВыписки", ОграничиватьПериодВыписки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗагруженныеДокументыБазовая,
		"ОшибкиЗагрузки",
		,
		ВидСравненияКомпоновкиДанных.Заполнено,
		,
		ТолькоПлатежиСОшибками = 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗагруженныеДокументыБазовая,
		"Проведен",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ТолькоПлатежиСОшибками = 2);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонтрагентаНаСервере(ИмяКонтрагента, ДанныеДокумента, БанковскийСчет)
	
	ДокументыВыписки = Объект.ДокументыКЗагрузке.Выгрузить();
	ДокументыВыписки.Добавить();
	ЗаполнитьЗначенияСвойств(ДокументыВыписки[0], ДанныеДокумента);
	
	СтрокаДокумента = ДокументыВыписки[0];
	СтрокаДокумента.ИмяКонтрагента = ИмяКонтрагента;
	
	НовыйКонтрагент = Обработки.КлиентБанк.СоздатьКонтрагента(ДокументыВыписки, СтрокаДокумента);
	НовыйСчет = Обработки.КлиентБанк.СоздатьБанковскийСчетКонтрагента(ДокументыВыписки, СтрокаДокумента, НовыйКонтрагент);
	
	Если Не ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ПодставитьКонтрагентаВДокументы(ИмяКонтрагента, НовыйКонтрагент, НовыйСчет, СтрокаДокумента.Партнер);
	
	Элементы[ИмяЖурнала].Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПодставитьКонтрагентаНаСервере(ИмяКонтрагента, НайденныйКонтрагент, ДанныеДокумента, БанковскийСчет)
	
	ДокументыВыписки = Объект.ДокументыКЗагрузке.Выгрузить();
	ДокументыВыписки.Добавить();
	ЗаполнитьЗначенияСвойств(ДокументыВыписки[0], ДанныеДокумента);
	
	СчетКонтрагента = НайтиСчетКонтрагента(НайденныйКонтрагент, ДокументыВыписки);
	
	Если СчетКонтрагента = Неопределено Тогда
		СчетКонтрагента = Обработки.КлиентБанк.СоздатьБанковскийСчетКонтрагента(ДокументыВыписки, ДокументыВыписки[0], НайденныйКонтрагент);
	КонецЕсли;
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(НайденныйКонтрагент);
	
	ПодставитьКонтрагентаВДокументы(ИмяКонтрагента, НайденныйКонтрагент, СчетКонтрагента, Партнер);
	
	Элементы[ИмяЖурнала].Обновить();
	
КонецПроцедуры

&НаСервере
Функция НайтиКонтрагента(ИмяКонтрагента, ДанныеДокумента)
	
	ДокументыВыписки = Объект.ДокументыКЗагрузке.Выгрузить();
	ДокументыВыписки.Добавить();
	ЗаполнитьЗначенияСвойств(ДокументыВыписки[0], ДанныеДокумента);
	
	СтрокаДокумента = ДокументыВыписки[0];
	СтрокаДокумента.ИмяКонтрагента = ИмяКонтрагента;
	
	ОКПОДляПоиска = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательОКПО, СтрокаДокумента.ПлательщикОКПО);
	СтрокаДокумента.ПроверятьОКПО = ЗначениеЗаполнено(ОКПОДляПоиска);
	 
	
	
	Обработки.КлиентБанк.ЗаполнитьКонтрагентов(ДокументыВыписки, ДокументыВыписки);
	
	Контрагент = ДокументыВыписки[0].Контрагент;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Контрагент;
	Иначе
		Возврат Неопределено;
	КонецЕСли;
	
КонецФункции

&НаСервере
Функция НайтиСчетКонтрагента(Контрагент, ДокументыВыписки)
	
	СтрокаДокумента = ДокументыВыписки[0];
	СтрокаДокумента.НомерСтроки = 0;
	СтрокаДокумента.Контрагент = Контрагент;
	
	Обработки.КлиентБанк.ЗаполнитьКонтрагентов(ДокументыВыписки, ДокументыВыписки);

	СчетКонтрагента = ДокументыВыписки[0].СчетКонтрагента;
	Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
		Возврат СчетКонтрагента;
	Иначе
		Возврат Неопределено;
	КонецЕСли;
	
КонецФункции

&НаСервере
Функция РазобратьДанныеВыпискиДокумента(ДанныеВыписки, БанковскийСчет)
	
	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	НомерСчета = РеквизитыСчета.НомерСчета;
	ДанныеВыпискиСтруктура = обработки.КлиентБанк.РазобратьФайлВыписки(ДанныеВыписки, Истина);
	 
	
	
	Если ДанныеВыпискиСтруктура = Неопределено
		И Не ДанныеВыпискиСтруктура.ДокументыВыписки.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДокумента = ДанныеВыпискиСтруктура.ДокументыВыписки[0];
	ДанныеДокумента.Вставить("Исходящий", (СокрЛП(ДанныеДокумента.ПлательщикСчет) = СокрЛП(НомерСчета)));
	 
	
	ДанныеДокумента.Вставить("БанковскийСчет", БанковскийСчет);
	ДанныеДокумента.Вставить("Валюта", РеквизитыСчета.Валюта);
	ДанныеДокумента.Вставить("НомерСтроки", 0);
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервере
Процедура ПодставитьКонтрагентаВДокументы(ИмяКонтрагента, КонтрагентСсылка, СчетСсылка, ПартнерСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.ИмяКонтрагента = &ИмяКонтрагента
	|	И ДанныеДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.ИмяКонтрагента = &ИмяКонтрагента
	|	И ДанныеДокумента.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Контрагент = КонтрагентСсылка;
		ДокументОбъект.БанковскийСчетКонтрагента = СчетСсылка;
		
		ДокументОбъект.Контрагент = КонтрагентСсылка;
		
		Для Каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.Партнер = ПартнерСсылка;
		КонецЦикла;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
		КонецЕсли;
		
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияНастройкиЭДО(НастройкаЭДО, Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#Область РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл()
	
	ТекстСообщения = НСтр("ru='Для выбора файла необходимо установить расширение работы с файлами.';uk='Для вибору файла необхідно встановити розширення роботи з файлами.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Результат;
	
	Если ВозможностьВыбораФайлов Тогда
		ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
		ВыборФайлаОбменаСБанком(ТекущиеДанные, "Загрузка");
	КонецЕсли;
	
КонецПроцедуры




&НаКлиенте
Процедура ПодключитьРасширениеЗагрузитьФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Результат;
	
	Если ВозможностьВыбораФайлов Тогда
		ЗагрузитьФайлНаКлиентеИнициализацияФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеИнициализацияФайла(Счет) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Счет", Счет);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, Счет.НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеПроверкаСуществования",
		ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		Файл = ДополнительныеПараметры.Файл;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Счет.НастройкаОбмена));
	
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеЗавершениеПомещения",
		ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеЗавершениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		
		ОписаниеФайла = ПомещенныеФайлы.Получить(0);
		АдресФайла    = ОписаниеФайла.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПрочитатьДанныеВыпискиИЗагрузитьНаСервере(ДополнительныеПараметры.Счет.ПолучитьИдентификатор(), АдресФайла);
		
		ПодключитьОбработчикОжидания("ОбработатьЗавершениеЗагрузки", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаОбменаСБанком(ТекущиеДанные, Режим) Экспорт
	
	Если ТекущиеДанные.ПрямойОбмен Тогда
		ИмяФайла = "";
	Иначе
		ИмяФайла = ТекущиеДанные.НастройкаОбмена;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                  = НСтр("ru='XML файл (*.xml)|*.xml';uk='XML файл (*.xml)|*.xml'");
	 
	
	ДиалогВыбораФайла.Заголовок               = СтрЗаменить(НСтр("ru='Выберите файл для %1 данных из клиента банка';uk='Виберіть файл для %1 даних з клієнта банку'"), "%1",
		?(Режим = "Выгрузка", НСтр("ru='выгрузки';uk='вивантаження'"), НСтр("ru='загрузки';uk='завантаження'")));
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение              = "xml";
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = ?(ПустаяСтрока(ИмяФайла),
			?(Режим = НСтр("ru='выгрузки';uk='вивантаження'"), "1C_to_CB.xml", "CB_to_1C.xml"), ИмяФайла);
			 
			
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборФайлаЗавершение",
		ЭтотОбъект,
		Новый Структура("Режим, ТекущиеДанные", Режим, ТекущиеДанные));
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ДополнительныеПараметры.ТекущиеДанные.НастройкаОбмена = ВыбранныеФайлы[0];
		ДополнительныеПараметры.ТекущиеДанные.АдресХранилищаФайла = "";
		ДополнительныеПараметры.ТекущиеДанные.ПрямойОбмен = Ложь;
		ДополнительныеПараметры.ТекущиеДанные.Пометка = Истина;
		ДополнительныеПараметры.ТекущиеДанные.Загружен = Ложь;
		
		Объект.СписокСчетов.Очистить();
		Для каждого Счет из Объект.БанковскиеСчета Цикл
			Если Счет.Пометка Тогда
				Счет.Загружен = Ложь;
				Объект.СписокСчетов.Добавить(Счет.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВывестиЗаголовокВыписки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрочитатьФайлВыписки(ИмяФайла, Кодировка, ТекстСообщения = "")
	
	
	ФайлВыписки = Новый Файл(ИмяФайла);
	
	Если Не ФайлВыписки.Существует() Тогда
		ТекстСообщения = НСтр("ru='<Не удалось прочитать файл выписки. Убедитесь в наличии файла.>';uk='<Не вдалося прочитати файл виписки. Переконайтеся в наявності файлу.>'");
		Возврат Неопределено;
		
	Иначе
	
		КодировкаФайла = ?(Кодировка = "DOS", "cp866", "windows-1251");
		
		Попытка
			ПотокЧтения = Новый ТекстовыйДокумент();
			ПотокЧтения.Прочитать(ИмяФайла, КодировкаФайла);		
			
		Исключение
			
			ТекстСообщения = НСтр("ru='<Не удалось прочитать файл выписки. Убедитесь в корректности файла.>';uk='<Не вдалося прочитати файл виписки. Переконайтеся в коректності файлу.>'");
			Возврат Неопределено;
		КонецПопытки;
		
		
		Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
			ТекстСообщения = НСтр("ru='<В файле нет данных>';uk='<У файлі немає даних>'");
			Возврат Неопределено;
		Иначе
			#Если НЕ ВебКлиент Тогда
			Импорт_ТекстДляРазбора =  ПотокЧтения.ПолучитьТекст();
			
			ФайлXML = Новый ЧтениеXML;
			Попытка
				ФайлXML.УстановитьСтроку(Импорт_ТекстДляРазбора);
				ФайлXML.Прочитать();
			Исключение
				ТекстСообщения = НСтр("ru='<Ошибка чтения файла XML>';uk='<Помилка читання файлу XML>'");
				Возврат Неопределено;
			КонецПопытки;
			
			ФайлXML = Новый ЧтениеXML;
			ФайлXML.УстановитьСтроку(Импорт_ТекстДляРазбора);
			
			Импорт_ПризнакОбмена = Ложь;
			НайденКонецФайла 	 = Ложь;
			
			Пока ФайлXML.Прочитать() Цикл
				ИмяТега = ВРег(СокрЛП(ФайлXML.Имя));

				Если ИмяТега="_1CCLIENTBANKEXCHANGE" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента  Тогда
			
					Если НЕ Импорт_ПризнакОбмена Тогда
						
						ТекстСообщения = НСтр("ru='<В файле импорта отсутствует признак обмена ""_1CCLIENTBANKEXCHANGE""!>';uk='<У файлі імпорту відсутня ознака обміну ""_1CCLIENTBANKEXCHANGE""!>'");
						
						Возврат Неопределено;
						
					КонецЕсли;
					
					НайденКонецФайла = Истина;
					
				ИначеЕсли ИмяТега="_1CCLIENTBANKEXCHANGE" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента  Тогда
			
					Импорт_ПризнакОбмена = Истина;

				КонецЕсли;
				
			КонецЦикла;
			
			Если Импорт_ПризнакОбмена И НайденКонецФайла Тогда
				
				Возврат Импорт_ТекстДляРазбора;
			Иначе
				
				ТекстСообщения = НСтр("ru='<Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!>';uk='<Файл завантаження не відповідає стандарту (не знайдена секція КонецФайла)!>'");
				
				Возврат Неопределено;
				
			КонецЕсли; 
			#Иначе
				//ТекстСообщения = НСтр("ru='<'Для импрта выписки из банковского счета используется XML файл. Импорт из XML не поддержуется для Web клиента. Выберите другой клиент.>'");
				ТекстСообщения = НСтр("ru='<Для импорта выписки из банковского счета используется XML файл. Импорт из XML не поддержуется для Web клиента. Выберите другой клиент.>';uk='<Для імпорту виписки з банківського рахунку використовується XML файл. Імпорт з XML не підтримується для Web клієнта. Виберіть інший клієнт.>'");
				
				Возврат Неопределено;
				
			#КонецЕсли
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеВыпискиИЗагрузитьНаСервере(ИдСчета, АдресФайла)
	
	Счет = Объект.БанковскиеСчета.НайтиПоИдентификатору(ИдСчета);
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТекстСообщения = "";
	СтрокиВыписки = ПрочитатьФайлВыписки(ИмяФайла, Счет.Кодировка, ТекстСообщения);
	
	Если СтрокиВыписки <> Неопределено Тогда
		
		ДанныеВыписки = Обработки.КлиентБанк.РазобратьФайлВыписки(СтрокиВыписки, Ложь);
		
	//	Счет.Выписка = Новый Структура;
	//	Счет.Выписка.Вставить("ДанныеВыписки", ДанныеВыписки);
	//	Счет.Выписка.Вставить("СтрокиВыписки", СтрокиВыписки);
	//	Счет.Выписка.Вставить("ТекстСообщения", "");
	//	
	//	Если ДанныеВыписки <> Неопределено
	//		И ТипЗнч(ДанныеВыписки) = Тип("Структура")
	//		И ДанныеВыписки.Свойство("Заголовок") Тогда
	//		
	//		Счет.ДатаНачалаЗагрузки = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(ДанныеВыписки.Заголовок.ДатаНачала);
	//		Счет.ДатаКонцаЗагрузки = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(ДанныеВыписки.Заголовок.ДатаКонца);
	//	КонецЕсли;
	//	
	Иначе
		Счет.Выписка = Новый Структура;
		Счет.Выписка.Вставить("ДанныеВыписки", Неопределено);
		Счет.Выписка.Вставить("СтрокиВыписки", Неопределено);
		Счет.Выписка.Вставить("ТекстСообщения", ТекстСообщения);
	КонецЕсли;
	//
	//Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
	//
	//Счет.АдресХранилищаФайла = ПоместитьВоВременноеХранилище(Счет.Выписка.СтрокиВыписки, ЭтаФорма.УникальныйИдентификатор);
	//Счет.Загружается = Истина;
	//
	//Обработка = РеквизитФормыВЗначение("Объект");
	//Обработка.ЗагрузитьПлатежиПоСчету(Счет, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
 
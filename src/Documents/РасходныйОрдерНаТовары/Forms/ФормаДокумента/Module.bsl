
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущийСтатус; //клиентский кеш статуса документа (нужен для возможности отката изменения пользователем статуса)

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "ОтгружаемыеТовары");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтгружаемыеТовары;
	КонецЕсли;
	
	Элементы.ПроверитьКоличество.Заголовок = ?(ИспользоватьУпаковочныеЛисты, НСтр("ru='Проверить и упаковать';uk='Перевірити і упакувати'"), НСтр("ru='Проверить';uk='Перевірити'"));
	Элементы.ДекорацияОтступ.Видимость     = ИспользоватьУпаковочныеЛисты;
	Элементы.ВсегоМест.Видимость           = ИспользоватьУпаковочныеЛисты;
	Элементы.ДекорацияМест.Видимость       = ИспользоватьУпаковочныеЛисты;
	
	УстановитьВидимостьПомещений();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	ТекущийСтатус = Объект.Статус;
	ПодключитьОбработчикОжидания("ОтобразитьИнформациюПоНеотгружаемымТоварамКлиент",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Элементы.ГруппаИнформацияИКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ОтгружаемыеТовары", Истина);
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ТоварыПоРаспоряжениям");
	УпаковочныеЛистыСервер.СформироватьНавигационнуюНадпись(ЭтаФорма,
		Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	УпаковочныеЛистыСервер.СинхронизироватьУпаковочныеЛистыСРасходнымОрдером(ТекущийОбъект.Ссылка, ИспользоватьАдресноеХранение);
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РасходныйОрдерНаТовары", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ТекущиеДанные = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПроверкаКоличестваТоваровВДокументе.Форма.Форма" Тогда
		
		ОбработатьПроверкуКоличестваТоваровНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаВыбора" Тогда
		
		ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
		
		НоменклатураПриИзмененииСервер(КэшированныеЗначения);
		
		Элементы.ОтгружаемыеТовары.ТекущийЭлемент = Элементы.ОтгружаемыеТоварыКоличествоУпаковок;
		Элементы.ОтгружаемыеТовары.ТекущийЭлемент = Элементы.ОтгружаемыеТоварыНоменклатура;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.УпаковочныйЛист.Форма.ФормаВыбора" Тогда
		
		ТекущиеДанные.УпаковочныйЛист = ВыбранноеЗначение;
		УпаковочныйЛистПриИзмененииСервер(КэшированныеЗначения);
		Элементы.ОтгружаемыеТовары.ЗакончитьРедактированиеСтроки(Ложь);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Объект.РежимПросмотраПоТоварам Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Объект.РежимПросмотраПоТоварам = Истина;
			РежимПросмотраПриИзмененииСервер();
			Отказ = Истина;
		КонецЕсли;
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПомещениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если ИспользоватьАдресноеХранение Тогда 
		
		Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору")
			И Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Подготовлено")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору")) Тогда
			
			Если Модифицированность
				ИЛИ Не Объект.Проведен Тогда
				НовыйСтатус   = Объект.Статус;
				Объект.Статус = ТекущийСтатус;
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("НовыйСтатус", НовыйСтатус);
				
				ТекстВопроса = НСтр("ru='Перед изменением статуса документ будет проведен. Продолжить?';uk='Перед зміною статусу документ буде проведено. Продовжити?'");
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриСменеСтатусаЗавершение", ЭтаФорма, ДополнительныеПараметры);
				
				ПоказатьВопрос(ОписаниеОповещения,
								ТекстВопроса,
								РежимДиалогаВопрос.ОКОтмена,
								,
								КодВозвратаДиалога.Отмена);
				Возврат;
			КонецЕсли;
			
			ИзменитьСтатусНаАдресномСкладе();
			
		ИначеЕсли ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Подготовлено")
			 И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору") Тогда
			 
			 ТекстСообщения = НСтр("ru='Из статуса ""%Подготовлено%"" ордер можно перевести только в статус ""%КОтбору%"".';uk='Із статусу ""%Подготовлено%"" ордер можна перевести тільки в статус ""%КОтбору%"".'");
			 
			 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Подготовлено%" , ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Подготовлено"));
			 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КОтбору%" , ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору"));
			 
			 
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			 Объект.Статус = ТекущийСтатус;
			 
		Иначе
			
			СтатусПриИзмененииСервер(Ложь, Неопределено);
			
		КонецЕсли;
	Иначе
		СтатусПриИзмененииСервер(Ложь, Неопределено);
	КонецЕсли;
	
	ТекущийСтатус = Объект.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	Если ПараметрыУказанияСерий.ОтгружаемыеТовары.ИспользоватьСерииНоменклатуры Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Подготовлено"));
	КонецЕсли;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КПроверке"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтгрузке"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Отгружен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ДатаОтгрузкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНавигацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриПереходеНаДругойУровеньСервер(НавигационнаяСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПриИзменении(Элемент)
	РежимПросмотраПриИзмененииСервер();
	УпаковочныеЛистыКлиент.ОбновитьКешированныеЗначенияДляТЧСУпаковочнымиЛистами(Элементы.ОтгружаемыеТовары, КэшированныеЗначения, ПараметрыУказанияСерий.ОтгружаемыеТовары);
КонецПроцедуры

&НаКлиенте
Процедура ТипОтгрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;	
	
	Если ТипОтгрузки = "ОтгрузкаПоЗаданиюНаПеревозку" Тогда
		Объект.ОтгрузкаПоЗаданиюНаПеревозку = Истина;
	Иначе
		Объект.ОтгрузкаПоЗаданиюНаПеревозку = Ложь;
		ПорядокДоставки = "";
		Объект.ПорядокДоставки = "";
		Объект.ЗаданиеНаПеревозку = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьЗаданияНаПеревозку(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНаПеревозкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Документ.РасходныйОрдерНаТовары.Форма.ФормаВыбораЗаданияНаПеревозку",
				Новый Структура("Ордер,СтатусОрдера", Объект.Ссылка, Объект.Статус),
				Элемент,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНаПеревозкуПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ЗаданиеНаПеревозку) Тогда
		Объект.ПорядокДоставки = ПорядокДоставкиВЗаданииНаПеревозку(Объект.ЗаданиеНаПеревозку, Объект.Получатель);
	Иначе
		Объект.ПорядокДоставки = "";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыПоРаспоряжениям

&НаКлиенте
Процедура ТоварыПоРаспоряжениямНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыПоРаспоряжениям.ТекущиеДанные;
	
	Действия = Новый Структура;
	Действия.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
						Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям));
	Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	Действия.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	Действия.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Действия.Вставить("ПересчитатьВесОбъем");
	Действия.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ТоварыПоРаспоряжениям"));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоРаспоряжениямСерияПриИзменении(Элемент)
		
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ТоварыПоРаспоряжениям.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ТоварыПоРаспоряжениям.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоРаспоряжениямСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ТоварыПоРаспоряжениям", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоРаспоряжениямРаспоряжениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	ТекущиеДанные = Элементы.ТоварыПоРаспоряжениям.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Перед выбором распоряжения нужно заполнить склад.';uk='Перед вибором розпорядження потрібно заповнити склад.'"),
														Объект.Ссылка,
														"Склад");
		Отказ = Истина;												
	КонецЕсли;
	
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТоварыПоРаспоряжениям", ТекущиеДанные.НомерСтроки, "Номенклатура");
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТоварыПоРаспоряжениям", ТекущиеДанные.НомерСтроки, "Номенклатура");
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Перед выбором распоряжения нужно заполнить номенклатуру.';uk='Перед вибором розпорядження потрібно заповнити номенклатуру.'"),
														Объект.Ссылка,
														Поле);
		Отказ = Истина;												
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика)
		И ТекущиеДанные.ХарактеристикиИспользуются Тогда
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТоварыПоРаспоряжениям", ТекущиеДанные.НомерСтроки, "Характеристика");
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Перед выбором распоряжения нужно заполнить характеристику номенклатуры.';uk='Перед вибором розпорядження потрібно заповнити характеристику номенклатури.'"),
														Объект.Ссылка,
														Поле);
		Отказ = Истина;												
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Серия)
		И ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТоварыПоРаспоряжениям", ТекущиеДанные.НомерСтроки, "Серия");
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Перед выбором распоряжения нужно заполнить серию номенклатуры.';uk='Перед вибором розпорядження потрібно заповнити серію номенклатури.'"),
														Объект.Ссылка,
														Поле);
		Отказ = Истина;												
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыВыбораРаспоряжения = Новый Структура;
	ПараметрыФормыВыбораРаспоряжения.Вставить("Регистратор", Объект.Ссылка);
	ПараметрыФормыВыбораРаспоряжения.Вставить("Получатель", Объект.Получатель);
	ПараметрыФормыВыбораРаспоряжения.Вставить("Склад", Объект.Склад);
	ПараметрыФормыВыбораРаспоряжения.Вставить("СкладскаяОперация", Объект.СкладскаяОперация);
	ПараметрыФормыВыбораРаспоряжения.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыФормыВыбораРаспоряжения.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыФормыВыбораРаспоряжения.Вставить("Серия", ТекущиеДанные.Серия);
	ПараметрыФормыВыбораРаспоряжения.Вставить("Назначение", ТекущиеДанные.Назначение);
	
	ОткрытьФорму("Документ.РасходныйОрдерНаТовары.Форма.ФормаВыбораРаспоряженияНаОтгрузку",
				  ПараметрыФормыВыбораРаспоряжения,
				  Элемент);
				  
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоРаспоряжениямКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыПоРаспоряжениям.ТекущиеДанные;
	
	Действия = Новый Структура;
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям));
			
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтгружаемыеТовары

&НаКлиенте
Процедура ОтгружаемыеТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УпаковочныеЛистыКлиент.ПередНачаломДобавленияВТЧСУпаковочнымиЛистами(Элементы.ОтгружаемыеТовары, Отказ, Копирование, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УпаковочныеЛистыКлиент.ПриНачалеРедактированияТЧСУпаковочнымиЛистами(ЭтаФорма, КэшированныеЗначения, НоваяСтрока);
	
	Если НоваяСтрока
		И Не Копирование Тогда
		ТекущиеДанные = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.УпаковочныйЛистРодитель) Тогда
			ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить");
		ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору")
			Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Подготовлено") Тогда
			ТекущиеДанные.Действие = ПредопределенноеЗначение("Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УпаковочныеЛистыКлиент.ПриОкончанииРедактированияТЧСУпаковочнымиЛистами(ЭтаФорма, НоваяСтрока, ОтменаРедактирования);
	ПодключитьОбработчикОжидания("ОтобразитьИнформациюПоНеотгружаемымТоварамКлиент",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыПередУдалением(Элемент, Отказ)
	УпаковочныеЛистыКлиент.ПередУдалениемСтрокТЧСУпаковочнымиЛистами(Элементы.ОтгружаемыеТовары, КэшированныеЗначения, ПараметрыУказанияСерий.ОтгружаемыеТовары);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыПослеУдаления(Элемент)
	ТоварыПослеУдаленияСервер(КэшированныеЗначения);
	ПодключитьОбработчикОжидания("ОтобразитьИнформациюПоНеотгружаемымТоварамКлиент",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииСервер(КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УпаковочныеЛистыКлиент.НачалоВыбораТоварногоМеста(ЭтаФорма, Элемент, СтандартнаяОбработка, Объект.РежимПросмотраПоТоварам);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыУпаковочныйЛистНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УпаковочныеЛистыКлиент.НачалоВыбораТоварногоМеста(ЭтаФорма, Элемент, СтандартнаяОбработка, Объект.РежимПросмотраПоТоварам);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если УпаковочныеЛистыКлиент.ПроверитьПодготовитьПереходВУпаковочныйЛистПриВыборе(Элементы.ОтгружаемыеТовары, Поле.Имя, "ОтгружаемыеТовары") Тогда
		ПриПереходеНаДругойУровеньСервер(Элементы.ОтгружаемыеТовары.ТекущиеДанные.УпаковочныйЛист);
	ИначеЕсли Поле = Элементы.ОтгружаемыеТоварыСтатусУказанияСерий Тогда
		ОткрытьПодборСерий("ОтгружаемыеТовары");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыУпаковочныйЛистПриИзменении(Элемент)
	УпаковочныйЛистПриИзмененииСервер(КэшированныеЗначения);
	Элементы.ОтгружаемыеТовары.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
	
	Действия = Новый Структура();
	Действия.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	Действия.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Действия.Вставить("ПересчитатьКоличествоУпаковок");
	Действия.Вставить("ПересчитатьВесОбъем");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыВесПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоВесу");
	
	ТекущаяСтрока = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыОбъемПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоОбъему");
	
	ТекущаяСтрока = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
	Действия = Новый Структура();
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтотОбъект, Действия);					
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛистРодитель) Тогда
		ПересчитатьКоличествоМест();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> ПредопределенноеЗначение("Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить") Тогда
		Если ТекущаяСтрока.ЭтоУпаковочныйЛист Тогда
			ТекстПредупреждения = НСтр("ru='Для строки упаковочного листа допустимо только действие %Отгрузить%. Для выбора другого действия сначала распакуйте товары.';uk='Для рядка пакувального листа допустима тільки дія %Отгрузить%. Для вибору іншої дії спочатку розпакуйте товари.'");	
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%Отгрузить%", ПредопределенноеЗначение("Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить"));
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛистРодитель) Тогда
			ТекстВопроса = НСтр("ru='При изменении действия со строкой на %Действие% товар будет исключен из упаковочного листа. Продолжить?';uk='При зміні дії з рядком на %Действие% товар буде виключено з пакувального листа. Продовжити?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Действие%", ВыбранноеЗначение);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтгружаемыеТоварыДействиеОбработкаВыбораЗавершение", ЭтаФорма, ДополнительныеПараметры);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Действие = ВыбранноеЗначение;
	Модифицированность = Истина;
	
	Если Не ТекущаяСтрока.ЭтоУпаковочныйЛист Тогда		
		Действия = Новый Структура;
		Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ОтгружаемыеТовары));
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыДействиеОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
	ТекущаяСтрока.Действие = ДополнительныеПараметры.ВыбранноеЗначение;
	Модифицированность = Истина;
	
	Если Объект.РежимПросмотраПоТоварам = 1 Тогда
		ТекущаяСтрока.УпаковочныйЛистРодитель = Неопределено;
		ТекущаяСтрока.УпаковочныйЛистКод = "";
		Действия = Новый Структура;
		Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ОтгружаемыеТовары));
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
	Иначе
		РаспаковатьСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыСерияПриИзменении(Элемент)
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ОтгружаемыеТовары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ОтгружаемыеТовары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ОтгружаемыеТовары, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ОтгружаемыеТовары", Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыУпаковочныйЛистРодительОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.ОтгружаемыеТовары.ТекущиеДанные.УпаковочныйЛистРодитель);
КонецПроцедуры

&НаКлиенте
Процедура ОтгружаемыеТоварыУпаковочныйЛистРодительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗаполнитьПоРаспоряжениям(Команда)

	Если Объект.ОтгружаемыеТовары.Количество() > 0 Тогда

		Ответ = Неопределено;


		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРаспоряжениюЗавершение", ЭтотОбъект), НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;

	КонецЕсли;

	ЗаполнитьПоРаспоряжению();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРаспоряжениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗаполнитьПоРаспоряжению();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРаспоряжению()
    
	Документы.РасходныйОрдерНаТовары.ЗаполнитьОтгружаемыеТоварыПоТоварамПоРаспоряжениям(Объект);
	
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ОтгружаемыеТовары", Истина);
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары, Ложь);	
	
	Если Не СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.ДатаОтгрузки)
		И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Документы.РасходныйОрдерНаТовары.РазбитьПоУпаковкамСправочно(Объект);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары);
	
	ОтобразитьИнформациюПоНеотгружаемымТоварам();
	
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ОтгружаемыеТовары", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСправочноПоУпаковкам(Команда)
	Если Объект.ОтгружаемыеТовары.Количество() = 0 Тогда

		Ответ = Неопределено;


		ПоказатьВопрос(Новый ОписаниеОповещения("РазбитьСправочноПоУпаковкамПослеВопроса", ЭтотОбъект), НСтр("ru='Табличная часть не заполнена. Заполнить по распоряжению?';uk='Таблична частина не заповнена. Заповнити за розпорядженням?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ТекстВопроса = НСтр("ru='При выполнении операции табличная часть будет перезаполнена,
        |при этом строки с нулевым количеством будут удалены. Продолжить?'
        |;uk='При виконанні операції таблична частина буде перезаповнена,
        |при цьому рядки з нульовим кількістю будуть вилучені. Продовжити?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("РазбитьСправочноПоУпаковкамЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСправочноПоУпаковкамПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьИРазбитьПоУпаковкамСервер();

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСправочноПоУпаковкамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;	
    КонецЕсли;
    
    РазбитьСправочноПоУпаковкамСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличество(Команда)
	СкладыКлиент.ОткрытьФормуПроверкиУпаковкиИсправленияКоличества(ЭтаФорма, "Проверка");
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьКоличество(Команда)
	СкладыКлиент.ОткрытьФормуПроверкиУпаковкиИсправленияКоличества(ЭтаФорма, "Исправление");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтобраннымТоварам(Команда)

	Если Объект.ОтгружаемыеТовары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОтобраннымТоварамЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;

	КонецЕсли;

    ЗаполнитьПоОтобраннымТоварамСервер(Ложь, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтобраннымТоварамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗаполнитьПоОтобраннымТоварамСервер(Ложь, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма,"ОтгружаемыеТовары");
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(Вес, ТекущаяСтрока) Экспорт
	
	Если Вес <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = Вес;
		
		Действия = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтотОбъект, Действия);					
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТоварыПоРаспоряжениям(Команда)
	
	ТаблицаФормы  = Элементы.ТоварыПоРаспоряжениям;
	ДанныеТаблицы = Объект.ТоварыПоРаспоряжениям;
	ТекущаяСтрока = Элементы.ТоварыПоРаспоряжениям.ТекущиеДанные;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы,, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуОтгружаемыеТовары(Команда)
	
	ТаблицаФормы  = Элементы.ОтгружаемыеТовары;
	ДанныеТаблицы = Объект.ОтгружаемыеТовары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	УпаковочныеЛистыКлиент.РазбитьСтрокуТЧСУпаковочнымиЛистами(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.ОтгружаемыеТовары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		Действия = Новый Структура;
		Действия.Вставить("ПересчитатьКоличествоЕдиниц");
		Действия.Вставить("ПересчитатьВесОбъем");
	
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFO(Команда)
	ОчиститьСообщения();
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаУровеньВверх(Команда)
	НаУровеньВверхСервер();
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	УпаковочныеЛистыКлиент.РаспаковатьУпаковочныйЛист(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Упаковать(Команда)
	
	Если Элементы.ОтгружаемыеТовары.ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru='Выберите строки для объединения.';uk='Виберіть рядки для об''єднання.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	НовыйУпаковочныйЛист = УпаковатьСервер();
	
	Если ЗначениеЗаполнено(НовыйУпаковочныйЛист) Тогда
		ТекстОповещения = НСтр("ru='Создание:';uk='Створення:'");
		ПоказатьОповещениеПользователя(ТекстОповещения,
			ПолучитьНавигационнуюСсылку(НовыйУпаковочныйЛист),
			НовыйУпаковочныйЛист,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры
	
// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	ОткрытьПодборСерий("ОтгружаемыеТовары");
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьОтгружаемымиТоварами(Команда)
	ОчиститьСообщения();
	
	Если Объект.ОтгружаемыеТовары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаполнитьОтгружаемымиТоварамиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;

	КонецЕсли;

    ПерезаполнитьОтгружаемымиТоварамиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВНовыйОрдер(Команда)
	ОчиститьСообщения();
	
	Если Элементы.ОтгружаемыеТовары.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выделите строки, которые нужно перенести в другой ордер.';uk='Виділіть рядки, які потрібно перенести в інший ордер.'"));
		Возврат;
	КонецЕсли;
	
	СтрокиДляПереноса = Новый Массив;
	Для Каждого СтрМас из Элементы.ОтгружаемыеТовары.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.ОтгружаемыеТовары.НайтиПоИдентификатору(СтрМас);
		СтрокиДляПереноса.Добавить(СтрокаТЧ.НомерСтроки);
		
		Если Не СкладыКлиентСервер.СтрокуРасходногоОрдераМожноПереноситьВДругойОрдер(СтрокаТЧ) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если Модифицированность Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("СтрокиДляПереноса", СтрокиДляПереноса);
	
	Если Объект.ОтгрузкаПоЗаданиюНаПеревозку Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиВНовыйОрдерЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.РасходныйОрдерНаТовары.Форма.ФормаВыбораЗаданияНаПеревозку",
					Новый Структура("Ордер", Объект.Ссылка),
					ЭтотОбъект,
					,
					,
					,
					ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ДополнительныеПараметры.Вставить("БезЗадания");
		ПеренестиВНовыйОрдерЗавершение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВСуществующийОрдер(Команда)
	ОчиститьСообщения();
	
	Если Элементы.ОтгружаемыеТовары.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выделите строки, которые нужно перенести в другой ордер.';uk='Виділіть рядки, які потрібно перенести в інший ордер.'"));
		Возврат;
	КонецЕсли;
	
	СтрокиДляПереноса = Новый Массив;
	Для Каждого СтрМас из Элементы.ОтгружаемыеТовары.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.ОтгружаемыеТовары.НайтиПоИдентификатору(СтрМас);
		СтрокиДляПереноса.Добавить(СтрокаТЧ.НомерСтроки);
		
		Если Не СкладыКлиентСервер.СтрокуРасходногоОрдераМожноПереноситьВДругойОрдер(СтрокаТЧ) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если Модифицированность Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("СтрокиДляПереноса", СтрокиДляПереноса);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиВСуществующийОрдерЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.РасходныйОрдерНаТовары.Форма.ФормаВыбораОрдераПриРазбиении",
				Новый Структура("Ордер", Объект.Ссылка),
				ЭтотОбъект,
				,
				,
				,
				ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																	"ОтгружаемыеТоварыНоменклатураЕдиницаИзмерения",
																	"Объект.ОтгружаемыеТовары.Упаковка");
	
	//

	СкладыСервер.УстановитьУсловноеОформлениеПоДействиюВСтроке(ЭтотОбъект);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыУпаковка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.Действие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.ТипИзмеряемойВеличины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыУпаковка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
																			"ОтгружаемыеТоварыХарактеристика",
																			"Объект.ОтгружаемыеТовары.ХарактеристикиИспользуются");
																			
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
																			"ТоварыПоРаспоряжениямХарактеристика",
																			"Объект.ТоварыПоРаспоряжениям.ХарактеристикиИспользуются");
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма,
																		"СерииВсегдаВТЧТовары",
																		"ОтгружаемыеТоварыСерия",
																		"Объект.ОтгружаемыеТовары.СтатусУказанияСерий",
																		"Объект.ОтгружаемыеТовары.ТипНоменклатуры");																		
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыСтатусУказанияСерий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.СтатусУказанияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма,
																		"СерииВсегдаВТЧТовары",
																		"ТоварыПоРаспоряжениямСерия",
																		"Объект.ТоварыПоРаспоряжениям.СтатусУказанияСерий",
																		"Объект.ТоварыПоРаспоряжениям.ТипНоменклатуры");																		
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыДопИнфоУпаковочныйЛист.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыУпаковочныйЛист.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.КоличествоЗаполненныхПодчиненныхПозиций");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.ЭтоУпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Получатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СкладскаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыВес.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыОбъем.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыЕдиницаИзмеренияВеса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.ВесУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтгружаемыеТоварыЕдиницаИзмеренияОбъема.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгружаемыеТовары.ОбъемУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//

	УпаковочныеЛистыСервер.УстановитьУсловноеОформлениеСУчетомУпаковочныхЛистов(ЭтаФорма, "ОтгружаемыеТовары");
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма,
		                                                            	"ОтгружаемыеТоварыНазначение",
																		"Объект.ОтгружаемыеТовары.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма,
		                                                            	"ТоварыПоРаспоряжениямНазначение",
																		"Объект.ТоварыПоРаспоряжениям.ТипНоменклатуры");
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданиеНаПеревозку.Имя);
	
	ГруппаИЛИ1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтгрузкаПоЗаданиюНаПеревозку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаИЛИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаданиеНаПеревозку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ГруппаИ1 = ГруппаИЛИ1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
	СписокСтатусов.Добавить(Перечисления.СтатусыРасходныхОрдеров.Отгружен);
	
	ОтборЭлемента = ГруппаИ1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
																		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад,Помещение",Объект.Склад,Объект.Помещение));
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании,,,Ложь);
	// Конец ВводНаОсновании
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
	
	НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку = ПолучитьФункциональнуюОпцию("НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку", Новый Структура("Склад", Объект.Склад));
	
	УстановитьЗависимыеОтАдресногоХранения();
	
	УпаковочныеЛистыСервер.ПриЧтенииСозданииФормыСУпаковочнымиЛистами(ЭтаФорма,
																Объект.ОтгружаемыеТовары,
																Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ТоварыПоРаспоряжениям", Ложь);
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ОтгружаемыеТовары", Ложь);
	
	Если Объект.ОтгрузкаПоЗаданиюНаПеревозку Тогда
		Элементы.ПорядокДоставки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ТипОтгрузки = "ОтгрузкаПоЗаданиюНаПеревозку";
	Иначе
		Элементы.ПорядокДоставки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ТипОтгрузки = "Самовывоз";
	КонецЕсли;

	Элементы.ГруппаИнформацияИКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	УстановитьДоступность();
	
	ЕстьДоставкаПоСкладскойОперации       = ДоставкаТоваров.ЕстьДоставкаПоСкладскойОперации(Объект.СкладскаяОперация);
	
	Элементы.ТипОтгрузки.Видимость        = ЕстьДоставкаПоСкладскойОперации Или Объект.ОтгрузкаПоЗаданиюНаПеревозку;
	Элементы.ЗаданиеНаПеревозку.Видимость = ЕстьДоставкаПоСкладскойОперации Или Объект.ОтгрузкаПоЗаданиюНаПеревозку;
	Элементы.ПорядокДоставки.Видимость    = ЕстьДоставкаПоСкладскойОперации Или Объект.ОтгрузкаПоЗаданиюНаПеревозку;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад,Помещение",Объект.Склад,Объект.Помещение));
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании,,,Ложь);
	// Конец ВводНаОсновании
	
	УстановитьЗависимыеОтАдресногоХранения();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
	
	НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку = ПолучитьФункциональнуюОпцию("НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку", Новый Структура("Склад", Объект.Склад));
	УстановитьВидимостьПомещений();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОтгрузкиПриИзмененииСервер()
	
	УстановитьЗависимыеОтАдресногоХранения();
	
	УстановитьВидимостьПомещений();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусНаАдресномСкладе()
	НовыйСтатус   = Объект.Статус;
	СтатусПриИзмененииСервер(Истина,НовыйСтатус);
	ПодключитьОбработчикОжидания("ОтобразитьИнформациюПоНеотгружаемымТоварамКлиент",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриСменеСтатусаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	Иначе
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.Статус = ДополнительныеПараметры.НовыйСтатус;
	
	ИзменитьСтатусНаАдресномСкладе();
	
	ТекущийСтатус = Объект.Статус;
	
КонецПроцедуры


&НаСервере
Процедура СтатусПриИзмененииСервер(ЗаполнятьПоотобраннымТоварам, НовыйСтатус)
	Если ЗаполнятьПоОтобраннымТоварам Тогда
		ЗаполнитьПоОтобраннымТоварамСервер(Истина, НовыйСтатус);
	Иначе
		Документы.РасходныйОрдерНаТовары.ЗаполнитьДействиеВСтроках(Объект);
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары);
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
		Объект.ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;
	// При изменении статуса меняется дата отгрузки, что влияет включение помещений и адресного хранения
	УстановитьЗависимыеОтАдресногоХранения();
	УстановитьВидимостьПомещений();
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ОтгружаемыеТовары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("ОтгружаемыеТовары",,ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ОбработатьПроверкуКоличестваТоваровНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Объект.ОтгружаемыеТовары.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ОтгружаемыеТовары");
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)

	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками  = Новый Структура;
	
	Действия = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	Действия.Штрихкоды                              = ДанныеШтрихкодов;
	Действия.СтруктураДействийСДобавленнымиСтроками = ДействияСДобавленнымиСтроками;
	Действия.СтруктураДействийСИзмененнымиСтроками  = ДействияСИзмененнымиСтроками;
	Действия.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий.ОтгружаемыеТовары;
	Действия.ИзменятьКоличество                     = Ложь;
	Действия.ТолькоТовары                           = Истина;
	Действия.ИмяТЧ                                  = "ОтгружаемыеТовары";
	
	ОбработатьШтрихкодыСервер(Действия,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(Действия,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(Действия) Тогда
		
		ТекущиеДанныеИдентификатор = Действия.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	УпаковочныеЛистыКлиент.ОбновитьКешированныеЗначенияДляТЧСУпаковочнымиЛистами(Элементы.ОтгружаемыеТовары, КэшированныеЗначения, ПараметрыУказанияСерий.ОтгружаемыеТовары);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьШтрихкодыСервер(Действия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,Действия,КэшированныеЗначения);
	ПересчитатьКоличествоМест();
	
	Если Действия.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.ОтгружаемыеТовары.ТекущаяСтрока = Действия.ТекущаяСтрока;
		Объект.РежимПросмотраПоТоварам = Истина;
		РежимПросмотраПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()
	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.ОтгружаемыеТовары);
КонецФункции

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.ОтгружаемыеТовары) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары);	
		УпаковочныеЛистыСервер.ПеренумероватьСтроки(ЭтотОбъект, Объект.ОтгружаемыеТовары);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий[ИмяТЧ],Текст, ТекущиеДанные) Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение",
														ЭтотОбъект,
														Новый Структура("ИмяТЧ,ПараметрыФормыУказанияСерий", ИмяТЧ,ПараметрыФормыУказанияСерий));

		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,
					ПараметрыФормыУказанияСерий,
					ЭтаФорма,
					,
					,
					,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
     
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ДополнительныеПараметры.ПараметрыФормыУказанияСерий,ДополнительныеПараметры.ИмяТЧ, КэшированныеЗначения);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ИмяТЧ, КэшированныеЗначения)
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	Действия.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	Действия.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	Действия.Вставить("ПересчитатьВесОбъем");
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий",
																				Объект.Склад, ПараметрыУказанияСерий[ИмяТЧ]));
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий[ИмяТЧ],ПараметрыФормыУказанияСерий,Действия,КэшированныеЗначения);
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		УпаковочныеЛистыСервер.ПеренумероватьСтроки(ЭтотОбъект, Объект.ОтгружаемыеТовары);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ], ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции


#КонецОбласти

#Область УпаковочныеЛисты

&НаСервере
Процедура РежимПросмотраПриИзмененииСервер()
	
	УпаковочныеЛистыСервер.РежимПросмотраПриИзменении(ЭтаФорма, Объект.ОтгружаемыеТовары, Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура ПриПереходеНаДругойУровеньСервер(НавигационнаяСсылка)
	УпаковочныеЛистыСервер.ПриПереходеНаДругойУровень(ЭтаФорма,
		Объект.ОтгружаемыеТовары, НавигационнаяСсылка, Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер(КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.ОтгружаемыеТовары.НайтиПоИдентификатору(Элементы.ОтгружаемыеТовары.ТекущаяСтрока);
	
	ДействияСТекущейСтрокой = Новый Структура;
	ДействияСТекущейСтрокой.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	ДействияСТекущейСтрокой.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	ДействияСТекущейСтрокой.Вставить("ПересчитатьКоличествоЕдиниц");
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));

	ДействияСТекущейСтрокой.Вставить("ПересчитатьВесОбъем");
	ДействияСТекущейСтрокой.Вставить("ПроверитьСериюРассчитатьСтатус",
						Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ОтгружаемыеТовары));

	ДействияСТекущейСтрокой.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ОтгружаемыеТовары"));

	УпаковочныеЛистыСервер.НоменклатураУпаковочныйЛистПриИзменении(ЭтаФорма, Объект.ОтгружаемыеТовары,
		"ОтгружаемыеТоварыНоменклатура", КэшированныеЗначения, ДействияСТекущейСтрокой);
	
КонецПроцедуры

&НаСервере
Функция УпаковатьСервер()
	
	Возврат УпаковочныеЛистыСервер.УпаковатьСервер(ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ТоварыПослеУдаленияСервер(КэшированныеЗначения)
	
	УпаковочныеЛистыСервер.ПослеУдаленияВТЧСУпаковочнымиЛистами(ЭтаФорма, Объект.ОтгружаемыеТовары, Объект.РежимПросмотраПоТоварам);
	
КонецПроцедуры

// Обработчик, вызываемый после закрытия вопроса пользователю о распаковке
//
&НаКлиенте
Процедура ПослеЗакрытияВопросаОРаспаковке(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РаспаковатьСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспаковатьСервер()
	
	УпаковочныеЛистыСервер.РаспаковатьУпаковочныйЛист(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТЧТовары(ИмяТЧ, Перенумеровать = Истина)
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
		Действия.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
		Действия.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	
		УпаковочныеЛистыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, Объект.ОтгружаемыеТовары, Действия, ,Перенумеровать);
	Иначе
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыПоРаспоряжениям, Действия);
	КонецЕсли;
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем");
		
		Для Каждого СтрокаТЧ Из Объект.ОтгружаемыеТовары Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОтобраннымТоварамСервер(ИзменениеСтатуса, НовыйСтатус)
	
	ПараметрыЗаполнения = СкладыСервер.ПараметрыЗаполненияОрдеровОтобраннымиТоварами();
	ПараметрыЗаполнения.РежимЗаполнения   = "Единичное";	
	Если ЗначениеЗаполнено(НовыйСтатус) Тогда
		ПараметрыЗаполнения.СтатусДокумента   = ОбщегоНазначения.ИмяЗначенияПеречисления(НовыйСтатус);
	КонецЕсли;
	ПараметрыЗаполнения.ИзменениеСтатуса  = ИзменениеСтатуса;	
	ПараметрыЗаполнения.ДокументОбъект    = Объект;	
	
	СкладыСервер.ЗаполнитьОрдераОтобраннымиТоварами(ПараметрыЗаполнения);	
	
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ОтгружаемыеТовары");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары);
    ОтобразитьИнформациюПоНеотгружаемымТоварам();
	
КонецПроцедуры

&НаСервере
Процедура РазбитьСправочноПоУпаковкамСервер()
	
	Документы.РасходныйОрдерНаТовары.РазбитьПоУпаковкамСправочно(Объект);
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ОтгружаемыеТовары");
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары);
	УпаковочныеЛистыСервер.ПеренумероватьСтроки(ЭтотОбъект, Объект.ОтгружаемыеТовары);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРазбитьПоУпаковкамСервер()

	Документы.РасходныйОрдерНаТовары.ЗаполнитьОтгружаемыеТоварыПоТоварамПоРаспоряжениям(Объект);
	Документы.РасходныйОрдерНаТовары.РазбитьПоУпаковкамСправочно(Объект);
	
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ОтгружаемыеТовары");
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ОтгружаемыеТовары);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(Форма, Действия)
	
	Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	Действия.Вставить("ПересчитатьВесОбъем");
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", Форма.Объект.Склад, Форма.ПараметрыУказанияСерий.ОтгружаемыеТовары));
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность()
	
	Элементы.ОтгружаемыеТоварыЗаполнитьПоРаспоряжению.Доступность =
		(Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору
		Или Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено);
		
	Элементы.ОтгружаемыеТоварыЗаполнитьПоОтобраннымТоварам.Доступность =
		(Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору
		Или Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке);
		
	Элементы.ОтгружаемыеТоварыЗаполнитьСерииПоFEFO.Доступность = ПараметрыУказанияСерий.ОтгружаемыеТовары.ПланированиеОтгрузки
		Или ПараметрыУказанияСерий.ОтгружаемыеТовары.ПланированиеОтбора
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров");
	Элементы.ИсправитьКоличество.Видимость =
		(Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
		Или Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен);
	
	Элементы.ПроверитьКоличество.Видимость =
		(Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке);
	
	Элементы.Контролер.Доступность =
		(Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке);
	
	УстановитьДоступностьЗаполненияПоОтобраннымТоварам();
	УстановитьДоступностьЗаданияНаПеревозку(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИнформациюПоНеотгружаемымТоварамКлиент()
	
	ОтобразитьИнформациюПоНеотгружаемымТоварам();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюПоНеотгружаемымТоварам()
	
	КоличествоНеОтгружать = Объект.ОтгружаемыеТовары.НайтиСтроки(
							Новый Структура("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать)).Количество();
	
	Если КоличествоНеОтгружать > 0 Тогда
		
		Элементы.СтраницыНадписьОставить.ТекущаяСтраница    = Элементы.СтраницаНадписьОставить;
		
		ТекстНадписи = НСтр("ru='В зоне отгрузки необходимо оставить %КоличествоПозиций% товаров.';uk='В зоні відвантаження необхідно залишити %КоличествоПозиций% товарів.'");
		
		КоличествоПозиций = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоНеОтгружать,
																								НСтр("ru='позицию,позиции,позиций';uk='позицію,позиції,позицій'"));
		
		ТекстНадписи = СтрЗаменить(ТекстНадписи,  "%КоличествоПозиций%", КоличествоПозиций);
		
		НадписьОставить = ТекстНадписи;
		
	Иначе
		
		Элементы.СтраницыНадписьОставить.ТекущаяСтраница    = Элементы.СтраницаНадписьПустая;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПомещений()
	
	Элементы.Помещение.Видимость = СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад,Объект.ДатаОтгрузки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗависимыеОтАдресногоХранения()
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.ДатаОтгрузки);
	Элементы.ЗонаОтгрузки.Видимость = ИспользоватьАдресноеХранение;
	
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтаФорма,
		Метаданные.Документы.ОрдерНаОтражениеПорчиТоваров.ПолноеИмя(), Не ИспользоватьАдресноеХранение);
	
	Если ИспользоватьАдресноеХранение Тогда
		Объект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Объект.Склад, Объект.Помещение, Объект.ЗонаОтгрузки);
	КонецЕсли;
	
	Элементы.ОтгружаемыеТоварыРазбитьСправочноПоУпаковкам.Доступность = Не ИспользоватьАдресноеХранение;
	УстановитьДоступностьЗаполненияПоОтобраннымТоварам();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЗаполненияПоОтобраннымТоварам()
	Элементы.ОтгружаемыеТоварыЗаполнитьПоОтобраннымТоварам.Доступность = ИспользоватьАдресноеХранение
			И Объект.Статус <> Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

Процедура УпаковочныйЛистПриИзмененииСервер(КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.ОтгружаемыеТовары.НайтиПоИдентификатору(Элементы.ОтгружаемыеТовары.ТекущаяСтрока);
	
	ДействияСТекущейСтрокой = Новый Структура;
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	ДействияСТекущейСтрокой.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	ДействияСТекущейСтрокой.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	ДействияСТекущейСтрокой.Вставить("ПересчитатьКоличествоЕдиниц");
	ДействияСТекущейСтрокой.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ОтгружаемыеТовары"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ДействияСТекущейСтрокой.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	ДействияСТекущейСтрокой.Вставить("ПересчитатьВесОбъем");
	
	ДействияСДобавляемымиСтроками = Новый Структура;
	ДействияСДобавляемымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ДействияСДобавляемымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	ДействияСДобавляемымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ДействияСДобавляемымиСтроками.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ДействияСДобавляемымиСтроками.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	ДействияСДобавляемымиСтроками.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	ДействияСДобавляемымиСтроками.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	ДействияСДобавляемымиСтроками.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	ДействияСДобавляемымиСтроками.Вставить("ПересчитатьВесОбъем");
	
	УпаковочныеЛистыСервер.НоменклатураУпаковочныйЛистПриИзменении(ЭтаФорма, Объект.ОтгружаемыеТовары,
		"ОтгружаемыеТоварыУпаковочныйЛист", КэшированныеЗначения, ДействияСТекущейСтрокой, ДействияСДобавляемымиСтроками);
	
КонецПроцедуры

&НаСервере
Процедура НаУровеньВверхСервер()
	
	НайденныеСтроки = УпаковочныеЛисты.НайтиСтроки(Новый Структура("УпаковочныйЛист",УпаковочныйЛистРодитель));
	ПриПереходеНаДругойУровеньСервер(НайденныеСтроки[0].УпаковочныйЛистРодитель);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКоличествоМест()
	
	УпаковочныеЛистыСервер.ПересчитатьКоличествоМест(ЭтаФорма, Объект.ОтгружаемыеТовары)
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьОтгружаемымиТоварамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
    	ПерезаполнитьОтгружаемымиТоварамиСервер();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьОтгружаемымиТоварамиСервер()
	
	Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(Объект, Истина);
	ЗаполнитьСлужебныеРеквизитыТЧТовары("ТоварыПоРаспоряжениям", Ложь);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВСуществующийОрдерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИзмененныйОрдер = ПеренестиВСуществующийОрдерСервер(Результат, ДополнительныеПараметры.СтрокиДляПереноса);
		
		Если ЗначениеЗаполнено(ИзмененныйОрдер) Тогда
			ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбИзмененииОбъекта(Объект.Ссылка);
			ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбИзмененииОбъекта(ИзмененныйОрдер);
			
			Оповестить("Запись_РасходныйОрдерНаТовары", Неопределено, Объект.Ссылка);
			Оповестить("Запись_РасходныйОрдерНаТовары", Неопределено, ИзмененныйОрдер);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеренестиВСуществующийОрдерСервер(ДругойОрдер, СтрокиДляПереноса)
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	ИсточникОбъект = РеквизитФормыВЗначение("Объект");
	
	ИзмененныйОрдер = Документы.РасходныйОрдерНаТовары.РазбитьОрдер(ИсточникОбъект, СтрокиДляПереноса, ДругойОрдер);
	
	Если ЗначениеЗаполнено(ИзмененныйОрдер) Тогда
		ЗначениеВРеквизитФормы(ИсточникОбъект,"Объект");
		Модифицированность = Ложь;
		ПриЧтенииСозданииНаСервере();
	Иначе
		Прочитать();
	КонецЕсли;
	
	Возврат ИзмененныйОрдер; 
	
КонецФункции

&НаКлиенте
Процедура ПеренестиВНовыйОрдерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат)
		Или ДополнительныеПараметры.Свойство("БезЗадания") Тогда
		НовыйОрдер = ПеренестиВНовыйОрдерСервер(Результат, ДополнительныеПараметры.СтрокиДляПереноса);
		Если ЗначениеЗаполнено(НовыйОрдер) Тогда
			ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбИзмененииОбъекта(Объект.Ссылка);
			ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбИзмененииОбъекта(НовыйОрдер, НСтр("ru='Добавление:';uk='Додавання:'"));
			
			Оповестить("Запись_РасходныйОрдерНаТовары", Неопределено, Объект.Ссылка);
			Оповестить("Запись_РасходныйОрдерНаТовары", Неопределено, НовыйОрдер);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеренестиВНовыйОрдерСервер(ЗаданиеНаПеревозку, СтрокиДляПереноса)
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	ИсточникОбъект = РеквизитФормыВЗначение("Объект");
	НовыйОрдер = Документы.РасходныйОрдерНаТовары.РазбитьОрдер(ИсточникОбъект, СтрокиДляПереноса,,ЗаданиеНаПеревозку);
	
	Если ЗначениеЗаполнено(НовыйОрдер) Тогда
		ЗначениеВРеквизитФормы(ИсточникОбъект,"Объект");
		Модифицированность = Ложь;
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Возврат НовыйОрдер; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПорядокДоставкиВЗаданииНаПеревозку(ЗаданиеНаПеревозку, Получатель)
	Возврат ДоставкаТоваров.ПорядокДоставкиВЗаданииНаПеревозку(ЗаданиеНаПеревозку, Получатель);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьДоступностьЗаданияНаПеревозку(Форма)
	Форма.Элементы.ЗаданиеНаПеревозку.Доступность = Форма.Объект.ОтгрузкаПоЗаданиюНаПеревозку;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

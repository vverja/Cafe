&НаКлиенте
Перем ТекущаяСтрокаРазделовОтчета;

&НаКлиенте
Перем ТекущиеДанныеОтчета;

&НаКлиенте
Перем СтраницаПечатнойФормыМодифицирована;

// ПриСозданииНаСервере()
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокПечатаемыхЛистов = Параметры.СписокПечатаемыхЛистов;
	ВидПечати              = Параметры.ВидПечати;
	
	Если СписокПечатаемыхЛистов.Количество() = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбраны листы для вывода на печать!';uk='Не обрані аркуші для виведення на друк!'");

		Сообщение.Сообщить();

		Отказ = Истина;
		
	КонецЕсли;
		
	Инициализация();
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура Инициализация()
			
	ЗаголовокФормы = Параметры.ЗаголовокФормы;
	
	Для Каждого Элемент Из СписокПечатаемыхЛистов Цикл
		Элемент.Значение[0] = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Элемент.Значение[0]), ЭтаФорма.УникальныйИдентификатор);
	КонецЦикла;
		
	Элемент = СписокПечатаемыхЛистов[0];
	
	ТаблДок = ПолучитьИзВременногоХранилища(Элемент.Значение[0]);
	
	ТабличныйДокумент.Вывести(ТаблДок);
		
	// Инициализируем начальные установки
	СохрКоличествоКопий     = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиКоличествоКопий");
	СохрРазобратьПоКопиям   = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиРазобратьПоКопиям");
	СохрОтображатьСетку     = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиОтображатьСетку");
	СохрОтображатьЗаголовки = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиОтображатьЗаголовки");
	
	КоличествоКопий     = СохрКоличествоКопий;
	РазобратьПоКопиям   = СохрРазобратьПоКопиям;
	ОтображатьСетку     = СохрОтображатьСетку;
	ОтображатьЗаголовки = СохрОтображатьЗаголовки;
	     
	Если РазобратьПоКопиям = Неопределено Тогда
		РазобратьПоКопиям = Истина;
	КонецЕсли;
	Если ОтображатьСетку = Неопределено Тогда
		ОтображатьСетку = Ложь;
	КонецЕсли;
	Если ОтображатьЗаголовки = Неопределено Тогда
		ОтображатьЗаголовки = Ложь;
	КонецЕсли;
	
	ДеревоЛистов = РеквизитФормыВЗначение("СписокЛистов");
	
	ДеревоЛистов.Строки.Очистить();
	
	Для Каждого Сч Из СписокПечатаемыхЛистов Цикл
		
		Стр1Уровня = ДеревоЛистов.Строки.Найти(Сч.Значение[1], "Идентификатор");
		
		Если Стр1Уровня = Неопределено Тогда
			
			Стр1Уровня = ДеревоЛистов.Строки.Добавить();
			Стр1Уровня.Пометка       = 1;
			Стр1Уровня.Наименование  = Сч.Значение[2];
			Стр1Уровня.Идентификатор = Сч.Значение[1];
			
		КонецЕсли;
		
		НовСтр = Стр1Уровня.Строки.Добавить();
		НовСтр.Пометка                   = 1;
		НовСтр.Наименование              = Сч.Представление;
		НовСтр.Идентификатор             = Сч.Значение[1];
		НовСтр.АдресВоВременномХранилище = Сч.Значение[0];
		
		ТекТабДок = ПолучитьИзВременногоХранилища(НовСтр.АдресВоВременномХранилище);
		КоличествоСтраниц = 0;
		НомПоследнейСтрокиСРазделителем = ТекТабДок.ВысотаТаблицы;
		Для НомСтроки = 1 По ТекТабДок.ВысотаТаблицы Цикл
			Если ТекТабДок.Область(НомСтроки, , НомСтроки, ).КонецСтраницы Тогда
				КоличествоСтраниц = КоличествоСтраниц + 1;
				НомПоследнейСтрокиСРазделителем = НомСтроки;
			КонецЕсли;
		КонецЦикла;
		Если НомПоследнейСтрокиСРазделителем < ТекТабДок.ВысотаТаблицы Тогда
			КоличествоСтраниц = КоличествоСтраниц + 1;
		КонецЕсли;
		
		НовСтр.КоличествоСтраниц = ?(КоличествоСтраниц > 0, КоличествоСтраниц, 1);
		
		Стр1Уровня.КоличествоСтраниц = Стр1Уровня.КоличествоСтраниц + НовСтр.КоличествоСтраниц;
		
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ДеревоЛистов, "СписокЛистов");
	
	Элементы.СписокЛистов.ТекущаяСтрока = СписокЛистов.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу() Экспорт
	
	ПакетТаблДок = Новый ПакетОтображаемыхДокументов;
		
	Для Каждого Эл Из СписокПечатаемыхЛистов Цикл
		
		ПакетТаблДок.Состав.Добавить(Эл.Значение[0]);

	КонецЦикла;
	
	ПакетТаблДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	
КонецПроцедуры

// ПриОткрытии()
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Заголовок = ЗаголовокФормы + НСтр("ru=' - предварительный просмотр';uk=' - попередній перегляд'");
	
	#Если ВебКлиент Тогда
		Элементы.Сохранить.Видимость              = Ложь;
		Элементы.ПараметрыПредПросмотра.Видимость = Ложь;
	#КонецЕсли
	 		
	ОтработатьИзмененияПараметровПечати();
	УстановитьОпцииТаблицы();
	
КонецПроцедуры // ПриОткрытии()

// Процедура формирует текст подсказки, отображаемой на командной панели ОсновныеДействияФормы.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура СформироватьТекстПодсказки()
	
	КоличествоТаблДок = КоличествоВыбранныхТабличныхДокументов();
	КоличествоЛистовВсего = 0;
	Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
		КоличествоЛистовВсего = КоличествоЛистовВсего + Стр1.КоличествоСтраниц;
	КонецЦикла;
	КоличествоЛистовТребуется = КоличествоТаблДок * КоличествоКопий;

	ТекстЛистовВсего = СтрЗаменить(ЧислоПрописью(КоличествоЛистовВсего, "НП=Истина, НД=Ложь", НСтр("ru='листа, листов, листов, м, , , , ,0';uk='аркуша, аркушів, аркушів, м, , , , ,0'")),
	                               ЧислоПрописью(КоличествоЛистовВсего, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
	                               "");

	ТекстЛистовТребуется = СтрЗаменить(ЧислоПрописью(КоличествоЛистовТребуется, "НП=Истина, НД=Ложь", НСтр("ru='лист, листа, листов, м, , , , ,0';uk='аркуш, аркуша, аркушів, м, , , , ,0'")),
	                                   ЧислоПрописью(КоличествоЛистовТребуется, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
	                                   "");

	ТекстСтатистики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выбрано %1 из %2 %3. Для печати требуется %4 %5 бумаги.';uk='Вибрано %1 з %2 %3. Для друку необхідно %4 %5 паперу.'"), КоличествоТаблДок, КоличествоЛистовВсего, ТекстЛистовВсего, КоличествоЛистовТребуется, ТекстЛистовТребуется);
	
КонецПроцедуры // СформироватьТекстПодсказки()
				
// Функция возвращает общее количество выбранных из списка печатаемых листов.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение: 
//	Число - общее количество выбранных из списка печатаемых листов.
//
&НаКлиенте
Функция КоличествоВыбранныхТабличныхДокументов()
	
	Кол = 0;
	Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
			Кол = Кол + ?(Стр2.Пометка, Стр2.КоличествоСтраниц, 0);
		КонецЦикла;
	КонецЦикла;
	Возврат Кол;
	
КонецФункции // КоличествоВыбранныхТабличныхДокументов()

// Процедура регулирует доступность флажка РазобратьПоКопиям и переформировывает текст подсказки,
// отображаемой на командной панели ОсновныеДействияФормы.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура ОтработатьИзмененияПараметровПечати()
	
	Если КоличествоКопий = 0 ИЛИ КоличествоКопий = Неопределено Тогда
		КоличествоКопий = 1;
	КонецЕсли;
	Если КоличествоКопий <> 1 Тогда
		Элементы.РазобратьПоКопиям.Доступность = Истина;
	Иначе
		Элементы.РазобратьПоКопиям.Доступность = Ложь;
	КонецЕсли;
	СформироватьТекстПодсказки();
	
КонецПроцедуры // ОтработатьИзмененияПараметровПечати()

// Процедура присваивает свойствам ОтображатьЗаголовки и ОтображатьСетку 
// поля табличного документа ИтоговаяТаблица значения, установленные пользователем.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура УстановитьОпцииТаблицы()
	
	Если Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		Элементы.ТабличныйДокумент.ОтображатьСетку     = Ложь;
	Иначе
		Элементы.ТабличныйДокумент.ОтображатьЗаголовки = ОтображатьЗаголовки;
		Элементы.ТабличныйДокумент.ОтображатьСетку     = ОтображатьСетку;
	КонецЕсли;
		    		
КонецПроцедуры // УстановитьОпцииТаблицы()

// СписокЛистовПриАктивизацииСтроки()
//
&НаКлиенте
Процедура СписокЛистовПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СохранениеМодификацийВПечатнойФорме();
	
	ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	ТекущиеДанныеОтчета = Элемент.ТекущиеДанные;
	
	Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		ВывестиВыбранныйЛистВТабличныйДокумент(Элемент.ТекущиеДанные.АдресВоВременномХранилище);
	Иначе
		ВывестиВыбранныйЛистВТабличныйДокумент(СписокПечатаемыхЛистов[0].Значение[0]);
	КонецЕсли;
			
КонецПроцедуры // СписокЛистовПриАктивизацииСтроки()

// КоличествоКопийПриИзменении()
//
&НаКлиенте
Процедура КоличествоКопийПриИзменении(Элемент)
	
	ОтработатьИзмененияПараметровПечати();
	
КонецПроцедуры // КоличествоКопийПриИзменении()

// ОтображатьСеткуПриИзменении()
//
&НаКлиенте
Процедура ОтображатьСеткуПриИзменении(Элемент)
	
	УстановитьОпцииТаблицы();
	
КонецПроцедуры // ОтображатьСеткуПриИзменении()

// ОтображатьЗаголовкиПриИзменении()
//
&НаКлиенте
Процедура ОтображатьЗаголовкиПриИзменении(Элемент)
	
	УстановитьОпцииТаблицы();
	
КонецПроцедуры // ОтображатьЗаголовкиПриИзменении()

// УстановитьИлиСнятьФлажки()
//
&НаКлиенте
Процедура УстановитьИлиСнятьФлажки(Пометка)
	
	Для Каждого Эл Из СписокЛистов.ПолучитьЭлементы() Цикл
		Эл.Пометка = Пометка;
		Для Каждого Стр Из Эл.ПолучитьЭлементы() Цикл
			Стр.Пометка = Пометка;
		КонецЦикла;
	КонецЦикла;
	СформироватьТекстПодсказки();	
	
КонецПроцедуры // УстановитьИлиСнятьФлажки()

// УстановитьФлажки()
//
&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьИлиСнятьФлажки(1);
	
КонецПроцедуры // УстановитьФлажки()

// СнятьФлажки()
//
&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьИлиСнятьФлажки(0);
	
КонецПроцедуры // СнятьФлажки()

// ПриЗакрытии()
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НЕ КоличествоКопий = СохрКоличествоКопий
	 ИЛИ НЕ	РазобратьПоКопиям = СохрРазобратьПоКопиям
	 ИЛИ НЕ ОтображатьСетку = СохрОтображатьСетку
	 ИЛИ НЕ ОтображатьЗаголовки = СохрОтображатьЗаголовки Тогда
	 
		СохранитьЗначениеНаСервере();
	 
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

// СохранитьЗначениеНаСервере()
//
&НаСервере
Процедура СохранитьЗначениеНаСервере()
		
	// сохраняем параметры отображения таблицы и параметры печати
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиКоличествоКопий",     КоличествоКопий);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиРазобратьПоКопиям",   РазобратьПоКопиям);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиОтображатьСетку",     ОтображатьСетку);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиОтображатьЗаголовки", ОтображатьЗаголовки);										  
	
КонецПроцедуры // СохранитьЗначениеНаСервере()

// РазвернутьВсе()
//
&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого Стр Из СписокЛистов.ПолучитьЭлементы() Цикл
		Элементы.СписокЛистов.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьВсе()

// СвернутьВсе()
//
&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого Стр Из СписокЛистов.ПолучитьЭлементы() Цикл
		Элементы.СписокЛистов.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
		Элементы.СписокЛистов.Свернуть(Стр.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры // СвернутьВсе()

// ПереместитьВниз()
//
&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Родитель = ?(Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя() = Неопределено, СписокЛистов, Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя());
	Если Родитель.ПолучитьЭлементы().Индекс(Элементы.СписокЛистов.ТекущиеДанные) <> Родитель.ПолучитьЭлементы().Количество() - 1 Тогда
		Родитель.ПолучитьЭлементы().Сдвинуть(Родитель.ПолучитьЭлементы().Индекс(Элементы.СписокЛистов.ТекущиеДанные), 1);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьВниз()

// ПереместитьВверх()
//
&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Родитель = ?(Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя() = Неопределено, СписокЛистов, Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя());
	Если Родитель.ПолучитьЭлементы().Индекс(Элементы.СписокЛистов.ТекущиеДанные) <> 0 Тогда
		Родитель.ПолучитьЭлементы().Сдвинуть(Родитель.ПолучитьЭлементы().Индекс(Элементы.СписокЛистов.ТекущиеДанные), -1);
	КонецЕсли;
		
КонецПроцедуры // ПереместитьВверх()

// СписокЛистовПометкаПриИзменении()
//
&НаКлиенте
Процедура СписокЛистовПометкаПриИзменении(Элемент)
	
	Если Элементы.СписокЛистов.ТекущиеДанные.Пометка = 2 Тогда
		Элементы.СписокЛистов.ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
	Если Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		
		Для Каждого Стр Из Элементы.СписокЛистов.ТекущиеДанные.ПолучитьЭлементы() Цикл
			Стр.Пометка = Элементы.СписокЛистов.ТекущиеДанные.Пометка;
		КонецЦикла;
		
	Иначе
		
		ПометкиОдинаковы = Истина;
		Для Каждого Стр Из Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			Если Стр.Пометка <> Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].Пометка Тогда
				ПометкиОдинаковы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя().Пометка = ?(ПометкиОдинаковы, Элементы.СписокЛистов.ТекущиеДанные.Пометка, 2);
		
	КонецЕсли;
	
	СформироватьТекстПодсказки();
	
КонецПроцедуры // СписокЛистовПометкаПриИзменении()

// АктивизироватьРодительскийОтчет()
//
&НаКлиенте
Процедура АктивизироватьРодительскийОтчет(Команда)
	
	Попытка
		ВладелецФормы.Активизировать();
	Исключение
		ПоказатьПредупреждение(,НСтр("ru='Не удалось активизировать родительский отчет! Вероятно, форма отчета закрыта.';uk='Не вдалося активізувати батьківський звіт! Ймовірно, форма звіту закрита.'"));
	КонецПопытки;
	
КонецПроцедуры // АктивизироватьРодительскийОтчет()

// Печатать()
//
&НаКлиенте
Процедура Печатать(Команда)
	
	СохранениеМодификацийВПечатнойФорме();
	
	ПакетТаблДок = Новый ПакетОтображаемыхДокументов;
	
	ПакетТаблДок.ТочностьПечати = ТочностьПечати.Точная;
	
	Если РазобратьПоКопиям Тогда
		Для Сч = 1 По КоличествоКопий Цикл
			Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
				Для Каждого Эл из Стр1.ПолучитьЭлементы() Цикл
					Если НЕ Эл.Пометка Тогда
						Продолжить;
					КонецЕсли;
					
					ПакетТаблДок.Состав.Добавить(Эл.АдресВоВременномХранилище);

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
			Для Каждого Эл из Стр1.ПолучитьЭлементы() Цикл
				Если НЕ Эл.Пометка Тогда
					Продолжить;
				КонецЕсли;
				Для Сч = 1 По КоличествоКопий Цикл
					
					ПакетТаблДок.Состав.Добавить(Эл.АдресВоВременномХранилище);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПакетТаблДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	
КонецПроцедуры // Печатать()

// СохранитьВФорматеMicrosoftExcel()
//
&НаКлиенте
Процедура СохранитьВФорматеMicrosoftExcel(Команда)
	
	ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.XLS);
	
КонецПроцедуры // СохранитьВФорматеMicrosoftExcel()

// СохранитьВВидеТабличныхДокументов()
//
&НаКлиенте
Процедура СохранитьВВидеТабличныхДокументов(Команда)
	
	ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.MXL);
	
КонецПроцедуры // СохранитьВВидеТабличныхДокументов()

// ВыгрузитьНаДиск()
//
&НаКлиенте
Процедура ВыгрузитьНаДиск(ВФормате)
	
	СохранениеМодификацийВПечатнойФорме();
	
	СоответствиеФорматаРасширению = Новый Соответствие;
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.MXL, "mxl");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.XLS, "xls");
	
	Если КоличествоВыбранныхТабличныхДокументов() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выберите листы в дереве печатаемых листов!';uk='Виберіть аркуші в дереві аркушів, що друкуються!'"));
		Возврат;
	КонецЕсли;
	
	ПутьДляВыгрузки = РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузки();
	Если ПутьДляВыгрузки = Неопределено ИЛИ ПустаяСтрока(ПутьДляВыгрузки) ИЛИ ПутьДляВыгрузки = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакОшибки = Ложь;
	Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
		Для Каждого Эл Из Стр1.ПолучитьЭлементы() Цикл
			Если Эл.Пометка Тогда
				
				ИмяФайла = ПутьДляВыгрузки + СформироватьИмяФайла(Стр1.Наименование + ". " + Эл.Наименование + "." + СоответствиеФорматаРасширению[ВФормате]);
				Попытка
					Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохранение %1';uk='Збереження %1'"), ИмяФайла), , , БиблиотекаКартинок.Записать);
					
					ТаблДок = ПолучитьИзВременногоХранилища(Эл.АдресВоВременномХранилище);
					ТаблДок.Область().ЦветФона = Новый Цвет();
					ТаблДок.Записать(ИмяФайла, ВФормате);
					
				Исключение
					ПризнакОшибки = Истина;
				Конецпопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Состояние();
				
	Если ПризнакОшибки Тогда
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Один или несколько файлов не удалось записать в указанный каталог!%1Возможно, недостаточно места на диске или диск защищен от записи.';uk='Один або декілька файлів не вдалося записати у вказаний каталог!%1Можливо, недостатньо місця на диску або диск захищений від запису.'"), Символы.ПС), , НСтр("ru='Ошибка записи на диск';uk='Помилка запису на диск'"));
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Файлы успешно записаны в указанный каталог.';uk='Файли успішно записані у вказаний каталог.'"));
	КонецЕсли;
		
КонецПроцедуры // ВыгрузитьНаДиск()

// СформироватьИмяФайла()
//
&НаКлиенте
Функция СформироватьИмяФайла(ИсходноеИмяФайла)
	
	ИмяФайла = СтрЗаменить(ИсходноеИмяФайла, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, """","_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
	Возврат СтрЗаменить(ИмяФайла, "|", "_");
	
КонецФункции // СформироватьИмяФайла()

// СписокЛистовПередУдалением()
//
&НаКлиенте
Процедура СписокЛистовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // СписокЛистовПередУдалением()

// СписокЛистовПередНачаломДобавления()
//
&НаКлиенте
Процедура СписокЛистовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // СписокЛистовПередНачаломДобавления()

&НаСервере
Процедура ВывестиВыбранныйЛистВТабличныйДокумент(АдресВоВременномХранилище)
	
	ТаблДок = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ТаблДок);
	
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ТаблДок);
	
	//ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.АвтоМасштаб        = ТаблДок.АвтоМасштаб;
	ТабличныйДокумент.ЧерноБелаяПечать   = Истина;
	ТабличныйДокумент.Область().ЦветФона = Новый Цвет();
	ТабличныйДокумент.Область().Защита   = Ложь;
	ТабличныйДокумент.ЧерноБелыйПросмотр = Истина;
	
КонецПроцедуры // ВывестиВыбранныйЛистВТабличныйДокумент()


&НаКлиенте
Процедура СохранениеМодификацийВПечатнойФорме()
	
	СтраницаПечатнойФормыМодифицирована = ?(СтраницаПечатнойФормыМодифицирована <> Неопределено, СтраницаПечатнойФормыМодифицирована, Ложь);
	
	Если СтраницаПечатнойФормыМодифицирована Тогда
		ПоместитьВоВременноеХранилище(ТабличныйДокумент, ТекущиеДанныеОтчета.АдресВоВременномХранилище);
		СтраницаПечатнойФормыМодифицирована = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	СтраницаПечатнойФормыМодифицирована = Истина;
	
КонецПроцедуры

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыНакладной = ПолучитьИзВременногоХранилища(Параметры.АдресТовары);
	ЗаполнитьРеквизитыПриСоздании(ТоварыНакладной);
	ЗаполнитьТаблицуТоваров(ТоварыНакладной);
	
	НастроитьЭлементыФормыПриСоздании();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Не ВыполняетсяЗакрытие И Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
		НСтр("ru='Данные были изменены. Перенести изменения в документ?';uk='Дані були змінені. Перенести зміни в документ?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ВыполняетсяЗакрытие = Истина;
		ПеренестиСтрокиВДокумент();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПоОрдеруПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.СборкаТоваров.ФормаПодбораТоваровИзЗаказа.Элемент.ПоОрдеру.ПриИзменении");
	
	РассчитатьПоказательКоличество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТаблицаТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаТовары.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "Сделка" Тогда
			
			Сделка = Элементы.ТаблицаТовары.ТекущиеДанные.Сделка;
			Если ЗначениеЗаполнено(Сделка) Тогда
				ПоказатьЗначение(Неопределено, Сделка);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаТовары.ТекущиеДанные;
	
	ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок / ТекущаяСтрока.УпаковкаКоэффициент;
	ТекущаяСтрока.РасхождениеНакладная = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокВНакладной;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиСтрокиВДокумент();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтроки(Команда)

	ОтметитьСтроки(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)

	ОтметитьСтроки(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТовары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоварыКоличествоУпаковокВЗаказе.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоОрдеру");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПолностьюОбеспечен);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоварыКоличествоУпаковокВОрдере.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоОрдеру");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПолностьюОбеспечен);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоварыКоличествоУпаковок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.СтрокаВыбрана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<удалить>';uk='<вилучити>'"));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПриСоздании(ТоварыНакладной)
	
	// Реквизиты.
	ИспользоватьОрдернуюСхемуПриОтгрузке     = Параметры.ОрдернаяСхемаПриОтгрузке Или Параметры.ОрдернаяСхемаПриПоступлении;
	ИспользоватьЗаказы                       = Параметры.НакладнаяПоЗаказам;
	
	ПоОрдеру = ИспользоватьОрдернуюСхемуПриОтгрузке
		 И (Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить()
			= Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера);
	
	ПоЗаказам = Параметры.НакладнаяПоЗаказам;
	
	Если ПоЗаказам Тогда
		Заказ = Параметры.Заказ;
	Иначе
		Заказ = Параметры.РеквизитыШапки.Ссылка;
	КонецЕсли;
	
	Если ИспользоватьЗаказы И ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		Заголовок = НСтр("ru='Подбор товаров по заказу/ордерам';uk='Підбір товарів по замовленнях/ордерах'");
	ИначеЕсли ИспользоватьЗаказы Тогда
		Заголовок = НСтр("ru='Подбор товаров по заказу';uk='Підбір товарів по замовленню'");
	Иначе
		Заголовок = НСтр("ru='Подбор товаров по ордерам';uk='Підбір товарів по ордерах'");
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.СформироватьЗаголовокФормыПодбора(Заголовок, Параметры.РеквизитыШапки.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваров(ТоварыНакладной)
	
	ДанныеОтбора = Новый Структура("РеквизитыШапки", Новый Структура(Новый ФиксированнаяСтруктура(Параметры.РеквизитыШапки)));
	МассивЗаказов = Новый Массив();
	
	МассивЗаказов.Добавить(Заказ);
	ДанныеОтбора.Вставить("МассивЗаказов",     МассивЗаказов);
	ДанныеОтбора.Вставить("ТоварыНакладной",   ТоварыНакладной);
	
	РезультатЗапроса = Документы.СборкаТоваров.РезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, "Подбор");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		РезультатЗапроса.ТаблицаСобраноРазобраноКомплектующие, РезультатЗапроса.ТаблицаСобраноРазобраноКомплект);
	
	ПоляКлюча = "ЗаказНаСборку, Номенклатура, Характеристика, Назначение, Серия";
	НакладныеСервер.ЗаполнитьПоказательКоличествоПоОрдерам(
		РезультатЗапроса.ТаблицаКомплектующие, РезультатЗапроса.ТаблицаСобраноРазобраноКомплект, ПоляКлюча);
	ЗагрузитьТаблицуРассчитатьУпаковки(РезультатЗапроса.ТаблицаКомплектующие);
	ОбойтиТаблицуУдалитьСтрокиБезОтклонений(ТаблицаТовары);
	РассчитатьПоказательКоличество();
	
	КлючКомплекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.РеквизитыШапки.Ссылка, "Номенклатура, Характеристика");
	// Если комплект есть, он всегда идет первой строкой.
	Если ТаблицаТовары.Количество() > 0
			И ТаблицаТовары[0].Номенклатура   = КлючКомплекта.Номенклатура
			И ТаблицаТовары[0].Характеристика = КлючКомплекта.Характеристика Тогда
		ТаблицаТовары[0].КартинкаКомплект = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуРассчитатьУпаковки(Таблица)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Упаковка =
			?(СтрокаТаблицы.УпаковкаЗаказа <> Неопределено, СтрокаТаблицы.УпаковкаЗаказа, СтрокаТаблицы.УпаковкаНакладной);
			
		НоваяСтрока.УпаковкаКоэффициент =
			?(ЗначениеЗаполнено(СтрокаТаблицы.УпаковкаЗаказаКоэффициент), СтрокаТаблицы.УпаковкаЗаказаКоэффициент,
			?(ЗначениеЗаполнено(СтрокаТаблицы.УпаковкаНакладнойКоэффициент), СтрокаТаблицы.УпаковкаНакладнойКоэффициент, 1));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиТаблицуУдалитьСтрокиБезОтклонений(Таблица)
	
	КоличествоСтрок = Таблица.Количество();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		
		СтрокаТаблицы = Таблица[КоличествоСтрок - Счетчик];
		РаспоряжениеНакладная = ТипЗнч(СтрокаТаблицы.ЗаказНаСборку) = Тип("ДокументСсылка.СборкаТоваров");
		НетОтклоненийЗаказ = РаспоряжениеНакладная Или СтрокаТаблицы.КоличествоВНакладной = СтрокаТаблицы.КоличествоВЗаказе;
		НетОтклоненийОрдер = Не ИспользоватьОрдернуюСхемуПриОтгрузке Или СтрокаТаблицы.КоличествоВНакладной = СтрокаТаблицы.КоличествоВОрдере;
		НетОтклонений = НетОтклоненийЗаказ И НетОтклоненийОрдер;
		
		Если НетОтклонений Тогда
			Таблица.Удалить(КоличествоСтрок - Счетчик);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.КоличествоУпаковокВОрдере = СтрокаТаблицы.КоличествоВОрдере / СтрокаТаблицы.УпаковкаКоэффициент;
		СтрокаТаблицы.КоличествоУпаковокСобирается = СтрокаТаблицы.Собирается / СтрокаТаблицы.УпаковкаКоэффициент;
		СтрокаТаблицы.КоличествоУпаковокВЗаказе = СтрокаТаблицы.КоличествоВЗаказе / СтрокаТаблицы.УпаковкаКоэффициент;
		СтрокаТаблицы.КоличествоУпаковокВНакладной = СтрокаТаблицы.КоличествоВНакладной / СтрокаТаблицы.УпаковкаКоэффициент;
		
		Если СписокЗаказов.НайтиПоЗначению(СтрокаТаблицы.ЗаказНаСборку) <> Неопределено
			Или СтрокаТаблицы.ЗаказНаСборку = Заказ Тогда
			
			СтрокаТаблицы.ЗаказИзНакладной = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказательКоличество()
	
	Для каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		СтрокаТоваров.КоличествоУпаковок = ?(ПоОрдеру, СтрокаТоваров.КоличествоУпаковокВОрдере, СтрокаТоваров.КоличествоУпаковокВЗаказе);
		СтрокаТоваров.Количество = ?(ПоОрдеру, СтрокаТоваров.КоличествоВОрдере, СтрокаТоваров.КоличествоВЗаказе);
		СтрокаТоваров.РасхождениеНакладная = СтрокаТоваров.КоличествоУпаковок - СтрокаТоваров.КоличествоУпаковокВНакладной;
		
		СтрокаТоваров.СтрокаВыбрана = СтрокаТоваров.РасхождениеНакладная <> 0
			И (СтрокаТоваров.ЗаказИзНакладной И ПоЗаказам Или Не ПоЗаказам);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	МенеджерНакладной = Документы.СборкаТоваров;
	// Элементы формы.
	Элементы.ПоОрдеру.Видимость = ИспользоватьЗаказы И ИспользоватьОрдернуюСхемуПриОтгрузке;
	
	// Элементы таблицы товаров.
	ПараметрыОбъекта = Новый Структура(МенеджерНакладной.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий());
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Параметры.РеквизитыШапки);
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ПараметрыОбъекта, МенеджерНакладной);
	Элементы.ТаблицаТоварыСерия.Видимость = ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры;
	
	Элементы.ТаблицаТоварыКоличествоУпаковокВОрдере.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.ТаблицаТоварыКоличествоУпаковокСобирается.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	
	Элементы.ТаблицаТоварыКоличествоУпаковокВЗаказе.Видимость = ИспользоватьЗаказы;
	Элементы.ТаблицаТоварыКодСтроки.Видимость                 = ИспользоватьЗаказы;

	ЕстьСобирающиесяТовары = ТаблицаТовары.Итог("Собирается") > 0;
	Элементы.ДекорацияИнфо.Видимость = ЕстьСобирающиесяТовары;
	Элементы.ДекорацияИнформацияЕстьСобирающиесяТовары.Видимость = ЕстьСобирающиесяТовары;
	
КонецПроцедуры

#Область Прочее

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	ВыгружаемыеТовары = ТаблицаТовары.Выгрузить(Новый Массив());
	ВыгружаемыеТовары.Колонки.Добавить("ОтвязатьОтЗаказа");
	Комплект = Новый Структура("Номенклатура, Характеристика, Серия, Назначение, Упаковка, Количество, КоличествоУпаковок");
	
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		Если СтрокаТаблицы.СтрокаВыбрана Тогда
			
			Если КлючКомплекта.Номенклатура = СтрокаТаблицы.Номенклатура
				И КлючКомплекта.Характеристика = СтрокаТаблицы.Характеристика Тогда // это комплект
				
				ЗаполнитьЗначенияСвойств(Комплект, СтрокаТаблицы);
				
			Иначе
				
				НоваяСтрока = ВыгружаемыеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ОтвязатьОтЗаказа = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("Товары, Комплект", ВыгружаемыеТовары, Комплект);
	АдресВХранилище = ПоместитьВоВременноеХранилище(Результат);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиСтрокиВДокумент()

	// Снятие модифицированности, т.к. перед закрытием признак проверяется.
	Модифицированность = Ложь;
	ТекстПредупреждения = ПроверитьВыборНесколькихЗаказов();
	
	Если ТекстПредупреждения <> "" Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьТоварыВХранилище();

	Закрыть();

	ОповеститьОВыборе(Новый Структура("ВыполняемаяОперация, АдресВХранилище",
						"ПодборТоваровИзЗаказа", АдресВХранилище));

КонецПроцедуры

&НаСервере
Функция ПроверитьВыборНесколькихЗаказов()
	
	ПервыйЗаказ = Неопределено;
	ВыбранаСтрокаБезЗаказа = Ложь;
	ШаблонБолееОдногоЗаказа = НСтр("ru='Нельзя выбрать товары больше, чем по одному заказу.';uk='Не можна вибрати товари більше, ніж по одному замовленню.'");
	ШаблонБезЗаказаИПоЗаказу = НСтр("ru='Нельзя выбрать товары по заказу и без указания заказа одновременно.';uk='Не можна вибрати товари по замовленню і без зазначення замовлення одночасно.'");
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.СтрокаВыбрана И СтрокаТовары.Количество <> 0 Тогда
			
			Если ПервыйЗаказ <> Неопределено И СтрокаТовары.ЗаказНаСборку <> ПервыйЗаказ Тогда
					Возврат ШаблонБолееОдногоЗаказа;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.ЗаказНаСборку) Тогда
				ПервыйЗаказ = СтрокаТовары.ЗаказНаСборку;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.ЗаказНаСборку) Тогда
				ВыбранаСтрокаБезЗаказа = Истина;
			КонецЕсли;
			
			Если ВыбранаСтрокаБезЗаказа И ПервыйЗаказ <> Неопределено Тогда
				Возврат ШаблонБезЗаказаИПоЗаказу;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ОтметитьСтроки(Значение)

	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		Если СтрокаТоваров.ЗаказИзНакладной И ПоЗаказам Или Не ПоЗаказам И СтрокаТоваров.СтрокаВыбрана <> Значение Тогда
		
			СтрокаТоваров.СтрокаВыбрана = Значение;
		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

ВыполняетсяЗакрытие = Ложь;
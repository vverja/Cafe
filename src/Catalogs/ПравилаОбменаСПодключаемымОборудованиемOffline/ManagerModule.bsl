#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает реквизиты объекта, которые необходимо блокировать от изменения
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Массив - блокируемые реквизиты объекта
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ТипПодключаемогоОборудования");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Коды товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КодыТоваров";
	КомандаПечати.Представление = НСтр("ru='Коды товаров';uk='Коди товарів'");

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КодыТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КодыТоваров",
			НСтр("ru='Коды товаров';uk='Коди товарів'"),
			СформироватьПечатнуюФормуКодыТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКодыТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КодыТоваров";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline.ПФ_MXL_КодыТоваров");
	ПервыйДокумент = Истина;
	
	Для Каждого ОбъектМассива Из МассивОбъектов Цикл
		
		Если ТипЗнч(ОбъектМассива) = Тип("Структура") Тогда
			Объект = ОбъектМассива.ПравилоОбмена;
		Иначе
			Объект = ОбъектМассива;
		КонецЕсли;
		
		ПодключаемоеОборудованиеOfflineВызовСервера.ОбновитьКодыТоваров(Объект);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru='Коды товаров';uk='Коди товарів'");
		ОбластьМакета.Параметры.ПравилоОбмена  = Объект;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьКод   = Макет.ПолучитьОбласть("ШапкаТаблицы|Код");
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ТабличныйДокумент.Вывести(ОбластьКод);
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		ОбластьКод   = Макет.ПолучитьОбласть("Строка|Код");
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
		
		Товары = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровДляПравила(Объект, Справочники.ВидыЦен.ПустаяСсылка());
		МаксимальныйКодВесовогоТовара = ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			ОбластьКод.Параметры.Код = (СтрокаТЧ.Код - (МаксимальныйКодВесовогоТовара));
			ТабличныйДокумент.Вывести(ОбластьКод);
			
			Если СтрокаТЧ.Используется Тогда
				ОбластьТовар.Параметры.Товар = СтрокаТЧ.Наименование;
			Иначе
				ОбластьТовар.Параметры.Товар = "";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи.
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = Пользователи.ТекущийПользователь();
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Объект);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновленияИБ


// Обработчик обновления BAS УТ 3.2.2
// Исправляет некорректное значение единицы измерения веса в настройках правил обмена с подключаемым оборудованием
Процедура ОбновитьНастройкиПравилОбменаСПодключаемымОборудованием() Экспорт
	
	УпаковкаПустаяСсылка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаОбмена.Ссылка					КАК ПравилоОбмена,
	|	ПравилаОбмена.НастройкиКомпоновкиДанных	КАК НастройкиКомпоновкиДанных,
	|	ПравилаОбмена.ЕдиницаИзмеренияВеса		КАК ЕдиницаИзмеренияВеса
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбмена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилоОбменаОбъект = Неопределено;
		
		НастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных.Получить();
		Для Каждого ЭлементОтбора из НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Упаковка")
				и ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
				
				ЭлементОтбора.ПравоеЗначение = УпаковкаПустаяСсылка;
				
				ПравилоОбменаОбъект = Выборка.ПравилоОбмена.ПолучитьОбъект(); 
				ПравилоОбменаОбъект.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗнч(Выборка.ЕдиницаИзмеренияВеса) = Тип("СправочникСсылка.УдалитьЕдиницыИзмерения") Тогда
			
			Если ПравилоОбменаОбъект = Неопределено Тогда
				ПравилоОбменаОбъект = Выборка.ПравилоОбмена.ПолучитьОбъект();
			КонецЕсли;
			
			ПравилоОбменаОбъект.ЕдиницаИзмеренияВеса = ПравилоОбменаОбъект.ЕдиницаИзмеренияВеса.УдалитьУпаковка;
		КонецЕсли;
		
		Если ПравилоОбменаОбъект <> Неопределено Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбменаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#КонецОбласти

#КонецЕсли

#Область ПрограммныйИнтерфейс

#Область ЗаказыПоставщикам

Функция ПроверитьВозможностьВводаНаОсновании(ПараметрКоманды) Экспорт
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрКоманды,"Статус,Проведен");
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ПараметрКоманды,
		СтруктураРеквизитов.Статус,
		НЕ СтруктураРеквизитов.Проведен,
		Истина);
	
КонецФункции

#КонецОбласти

#Область ДокументыНаОснованииЗаказа

Функция АктВыполненныхРаботПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	
	Если ПараметрКоманды.Количество() = 1
	 ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам") Тогда
		
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды[0]);
		
	Иначе
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ПродажиВызовСервера.СформироватьДанныеЗаполненияАктовВыполненныхРабот(ПараметрКоманды, РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

Функция ВнутреннееПотреблениеТоваровПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ТекстОшибки = "";
	Если ПараметрКоманды.Количество() = 1
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам") Тогда
		
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(ПараметрКоманды[0]);
		РеквизитыШапки = Документы.ВнутреннееПотреблениеТоваров.ДанныеЗаполненияНакладной(МассивЗаказов);
		ТекстОшибки = НакладныеСервер.ПроверитьВозможностьВводаВнутреннегоПотребленияНаОснованииЗаказа(ПараметрКоманды[0], РеквизитыШапки);
		
	Иначе
		
		МассивЗаказов = ПараметрКоманды;
		РеквизитыШапки = Документы.ВнутреннееПотреблениеТоваров.ДанныеЗаполненияНакладной(МассивЗаказов);
		
	КонецЕсли;
	
	Если ТекстОшибки <> "" Тогда
		РезультатыПроверки = Новый Структура("ЕстьОшибки, ТекстОшибки", Истина, ТекстОшибки);
	Иначе
		РезультатыПроверки = Документы.ВнутреннееПотреблениеТоваров.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
	ПараметрыОснования.Вставить("МассивЗаказов",  МассивЗаказов);
	
	Возврат Новый Структура("Основание, РезультатыПроверки", ПараметрыОснования, РезультатыПроверки);
	
КонецФункции

Функция ПоступлениеТоваровУслугПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("СкладПоступления",  Неопределено);
	
	Если ПараметрКоманды.Количество() = 1
	 ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
		
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды[0]);
		
	Иначе
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(ПараметрКоманды, РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

Функция СборкаТоваровПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ТекстОшибки = "";
	МассивЗаказов = Новый Массив();
	МассивЗаказов.Добавить(ПараметрКоманды[0]);
	РеквизитыШапки = Документы.СборкаТоваров.ДанныеЗаполненияНакладной(МассивЗаказов);
	ТекстОшибки = НакладныеСервер.ПроверитьВозможностьВводаСборкиНаОснованииЗаказа(ПараметрКоманды[0], РеквизитыШапки);
	
	Если ТекстОшибки <> "" Тогда
		РезультатыПроверки = Новый Структура("ЕстьОшибки, ТекстОшибки", Истина, ТекстОшибки);
	Иначе
		РезультатыПроверки = Документы.СборкаТоваров.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
	ПараметрыОснования.Вставить("МассивЗаказов",  МассивЗаказов);
	Возврат Новый Структура("Основание, РезультатыПроверки", ПараметрыОснования, РезультатыПроверки);
	
КонецФункции

#КонецОбласти 

#Область ЗаказНаПеремещение

Функция СоздатьЗаказНаПеремещениеНаОснованииЗаказаКлиентаПоГруппеСкладовПараметрыСоздания(ПараметрКоманды) Экспорт
	
	ПараметрыСозданияПоГруппеСкладов = Документы.ЗаказНаПеремещение.ПараметрыСозданияПоГруппеСкладовПоЗаказуКлиента(ПараметрКоманды);
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

Функция СоздатьЗаказНаПеремещениеНаОснованииПоступленияТоваровУслугПоГруппеСкладовПараметрыСоздания(ПараметрКоманды) Экспорт
	
	ПараметрыСозданияПоГруппеСкладов = Документы.ЗаказНаПеремещение.ПараметрыСозданияПоГруппеСкладовПоПоступлениюТоваровУслуг(ПараметрКоманды);
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

#КонецОбласти

#Область ПеремещениеТоваров

Функция СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды) Экспорт
	
	ПараметрыСозданияПоГруппеСкладов = Документы.ПеремещениеТоваров.ПараметрыСозданияПоГруппеСкладов(ПараметрКоманды);
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

#КонецОбласти

#Область РеализацияТоваровУслуг

Функция РеализацияТоваровУслугПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("СкладОтгрузки", 			Неопределено);
	ПараметрыОснования.Вставить("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	
	Если ПараметрКоманды.Количество() = 1
	 ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам") Тогда
		
		ПараметрыОснования.Вставить("ДокументОснование", ПараметрКоманды[0]);
		
	Иначе
		
		РеквизитыШапки = Новый Структура;
		Если НЕ ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(ПараметрКоманды, РеквизитыШапки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("РеквизитыШапки",      РеквизитыШапки);
		ПараметрыОснования.Вставить("ДокументОснование",   ПараметрКоманды);
		
	КонецЕсли;
	
	Возврат Новый Структура("Основание", ПараметрыОснования);
	
КонецФункции

#КонецОбласти

#Область СчетНаОплату

Функция СчетНаОплатуРеализацияАктПолучитьПараметрыОткрытияФормы(Основание) Экспорт
	
	ПараметрыОткрытияФормы = Неопределено;
	
	МассивЗаказов = СчетНаОплатуРеализацияАктПолучитьЗаказыРеализацииСервер(Основание);
	
	Если СчетНаОплатуРеализацияАктПроверитьПорядокРасчетов(Основание)
	 ИЛИ МассивЗаказов.Количество() = 0 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", "Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента");
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", Новый Структура("Основание", Основание));
		
	ИначеЕсли МассивЗаказов.Количество() = 1 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", "Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату");
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", Новый Структура("ДокументОснование", МассивЗаказов[0]));
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

Функция СчетНаОплатуРеализацияАктПроверитьПорядокРасчетов(Основание)
	
	ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПорядокРасчетов");
	
	Возврат ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	
КонецФункции 

Функция СчетНаОплатуРеализацияАктПолучитьЗаказыРеализацииСервер(Основание)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугТовары.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	Заказы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Основание
		|	И РеализацияТоваровУслугТовары.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
		|	И РеализацияТоваровУслугТовары.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|	И РеализацияТоваровУслугТовары.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Основание
		|	И РеализацияТоваровУслуг.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
		|	И РеализацияТоваровУслуг.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|	И РеализацияТоваровУслуг.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АктВыполненныхРаботУслуги.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Документ.АктВыполненныхРабот.Услуги КАК АктВыполненныхРаботУслуги
		|ГДЕ
		|	АктВыполненныхРаботУслуги.Ссылка = &Основание
		|	И АктВыполненныхРаботУслуги.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
		|	И АктВыполненныхРаботУслуги.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|	И АктВыполненныхРаботУслуги.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктВыполненныхРабот.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
		|ГДЕ
		|	АктВыполненныхРабот.Ссылка = &Основание
		|	И АктВыполненныхРабот.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
		|	И АктВыполненныхРабот.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|	И АктВыполненныхРабот.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Заказы КАК Заказы
		|");
		
	Запрос.УстановитьПараметр("Основание", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивЗаказов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	Возврат МассивЗаказов;
	
КонецФункции

Функция СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(Договор) Экспорт
	
	ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
	Возврат ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
КонецФункции


#КонецОбласти

Функция ПеремещениеТоваровПараметрыОткрытияФормы(ПараметрКоманды) Экспорт
	
	ТекстОшибки = "";
	Если ПараметрКоманды.Количество() = 1
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам") Тогда
		
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(ПараметрКоманды[0]);
		РеквизитыШапки = Документы.ПеремещениеТоваров.ДанныеЗаполненияНакладной(МассивЗаказов);
		ТекстОшибки = НакладныеСервер.ПроверитьВозможностьВводаПеремещенияНаОснованииЗаказа(ПараметрКоманды[0], РеквизитыШапки);
		
	Иначе
		
		МассивЗаказов = ПараметрКоманды;
		РеквизитыШапки = Документы.ПеремещениеТоваров.ДанныеЗаполненияНакладной(МассивЗаказов);
		
	КонецЕсли;
	
	Если ТекстОшибки <> "" Тогда
		РезультатыПроверки = Новый Структура("ЕстьОшибки, ТекстОшибки", Истина, ТекстОшибки);
	Иначе
		РезультатыПроверки = Документы.ПеремещениеТоваров.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
	ПараметрыОснования.Вставить("МассивЗаказов",  МассивЗаказов);
	Возврат Новый Структура("Основание, РезультатыПроверки", ПараметрыОснования, РезультатыПроверки);
	
КонецФункции


Функция ОписаниеКомандыСоздатьНаОсновании(ИмяКоманды, АдресКомандСоздатьНаОснованииВоВременномХранилище) Экспорт
	
	Возврат ВводНаОсновании.ОписаниеКомандыСоздатьНаОсновании(ИмяКоманды, АдресКомандСоздатьНаОснованииВоВременномХранилище);
	
КонецФункции

Функция ПроверитьСтатусПересчетаНаСервере(ПересчетСсылка) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("МожноОткрытьПомощник", Ложь);
	РезультатПроверки.Вставить("СообщениеПользователю", "");
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПересчетСсылка, "Статус");
	Если Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда 
		РезультатПроверки.МожноОткрытьПомощник = Истина;
	Иначе
		СообщениеПользователю = НСтр("ru='Документ ""%ПересчетТоваров%"" находится в статусе ""%ТекущийСтатус%"". Воспользоваться помощником оформления складских актов можно только в статусе ""%СтатусВыполнено%"".';uk='Документ ""%ПересчетТоваров%"" знаходиться в статусі ""%ТекущийСтатус%"". Скористатися помічником оформлення складських актів можна тільки в статусі ""%СтатусВыполнено%"".'");
		СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ПересчетТоваров%", ПересчетСсылка);
		СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ТекущийСтатус%", Статус);
		СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%СтатусВыполнено%", Перечисления.СтатусыПересчетовТоваров.Выполнено);
		РезультатПроверки.СообщениеПользователю	= СообщениеПользователю;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции



#КонецОбласти

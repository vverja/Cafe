
// ОткрытьСправочник()
//
&НаКлиенте
Процедура ОткрытьСправочник(Команда)
		
	ОткрытьФорму("Справочник.РегламентированныеОтчеты.Форма.ФормаСписка");
	
КонецПроцедуры // ОткрытьСправочник()


// ПриСозданииНаСервере()
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "BASУТ" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСервер");
			Модуль.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
			
		КонецЕсли;
	Иначе	
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
			
			Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнформационныйЦентрСервер");
			Модуль.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
			
		КонецЕсли;
	КонецЕсли;
	
	
	МассивНаименованийПравыхГраницПериода = Новый Структура;
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц1", "января");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц2", "февраля");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц3", "I-го квартала");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц4", "апреля");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц5", "мая");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц6", "I-го полугодия");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц7", "июля");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц8", "августа");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц9", "III-го квартала");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц10", "октября");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц11", "ноября");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц12", "года");
		
	ПараметрыОткрытия = Параметры.ПараметрыОткрытия;
		
	МетаданныеВерсия = Метаданные.Версия;
	
	роНеПоказыватьИнформациюДляПользователей = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ИнформацияДляПользователей", "роНеПоказыватьИнформациюДляПользователей");
	
	ВосстановитьПараметрыОтбора();

	ЗаполнитьИзСправочникаРегламентированныеОтчеты();
	ВосстановитьСписокВыбранныхВидовОтчетов();
	Элементы.ДеревоОтчетовРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	Элементы.ДеревоОтчетовКонтекстноеМенюРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	Элементы.ЖурналОтчетов.ВосстанавливатьТекущуюСтроку = Истина;
	Элементы.ЖурналВыгрузки.ВосстанавливатьТекущуюСтроку = Истина;
		
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда // первое открытие
		Периодичность = "По итогам";                                      
		ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	Если (ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям) ИЛИ (Организация.Количество() = 0 И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию))) Тогда
		Организация.Очистить();
		Организация.Добавить(ОргПоУмолчанию);
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.справочники.Найти("ПроизводственныеКалендари") = Неопределено Тогда
		Элементы.ФормаОткрытьКалендарь.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()


&НаКлиенте
Процедура ОткрытьКалендарь(Команда)
	
	СтандартнаяОбработка = Истина;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьКалендарь(ЭтаФорма, Организация, СтандартнаяОбработка);
	
	
КонецПроцедуры

// ОткрытьНастройки()
//
&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мОтображатьПустые", мОтображатьПустые);
	ПараметрыФормы.Вставить("мФильтроватьВидыОтчетовПоПериоду", мФильтроватьВидыОтчетовПоПериоду);

	ФормаНастроекОтчетности = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("УправлениеОтчетностьюФормаНастройки", ПараметрыФормы, ЭтаФорма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ФормаНастроекОтчетности.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастроекОтчетности.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроекОтчетности.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоОтчетовНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

// Обновляет дерево отчетов из справочника РегламентированныеОтчеты.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура ОбновитьДеревоОтчетовНаКлиенте(ОбновлятьИзИБ = Истина)
	Перем ТекущийОтчет;
	
	Если ОбновлятьИзИБ ИЛИ мФильтроватьВидыОтчетовПоПериоду Тогда 
		
		Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
			ТекущийОтчет = Элементы.ДеревоОтчетов.ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		СписокРаскрытых = СписокРаскрытыхВДеревеОтчетов();
		ОбновитьДеревоОтчетовНаСервере(ОбновлятьИзИБ);
		УстановитьРаскрытияВСпискеОтчетов(ДеревоОтчетов, СписокРаскрытых);
		
		Если НЕ Элементы.ДеревоОтчетов.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоОтчетов.ТекущаяСтрока = 0;
		КонецЕсли;
						
		Если ТекущийОтчет <> Неопределено Тогда
			УстановитьТекущуюСсылку(ТекущийОтчет);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборы();
	Элементы.ДеревоОтчетовРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	Элементы.ДеревоОтчетовКонтекстноеМенюРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	ОбновитьПодсказкиЭлементовУправленияПериодом();
	
КонецПроцедуры // ОбновитьДеревоОтчетовНаКлиенте()


// ОбновитьДеревоОтчетовНаСервере()
//
&НаСервере
Процедура ОбновитьДеревоОтчетовНаСервере(ОбновлятьИзИБ)
	
	СписокОтчетов = СписокВыбранныхСсылокВДеревеОтчетов();
	ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ);
	Если ОбновлятьИзИБ Тогда
		ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, СписокОтчетов, Истина);
	КонецЕсли;
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, СписокОтчетов, Истина);
			
КонецПроцедуры // ОбновитьДеревоОтчетовНаСервере()


// Восстанавливает значения отбора, сохраненные в момент последнего закрытия формы.
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура ВосстановитьПараметрыОтбора()
	
	Если ТипЗнч(ПараметрыОткрытия) <> Тип("Структура") Тогда
		
		Организация   = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_Организация");
		
		ОтборПериод   = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтборПериод");
		Периодичность = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПолеВыбораПериодичность");
		
		Если Периодичность = Неопределено Тогда
			Периодичность = "По итогам";
		КонецЕсли;
		
		ДатаНачалаПериодаОтчета = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета");
		ДатаКонцаПериодаОтчета  = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета");
		
		Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
			ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
		КонецЕсли;
		
		мДокументОтбор = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДокументОтбор");
		
		УстановитьПредставлениеДокументаОтбора();
		
		мОтбиратьПоДокументуОтбора = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мОтбиратьПоДокументуОтбора");
		
		Если мОтбиратьПоДокументуОтбора = Неопределено Тогда
			мОтбиратьПоДокументуОтбора = Ложь;
		КонецЕсли;
		
		УстановитьПометкуКнопкиОтбиратьПоОтчету();
		
		ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
		Если ТекСтраница <> Неопределено И Элементы.Журналы.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
			Элементы.Журналы.ТекущаяСтраница = Элементы[ТекСтраница];
		КонецЕсли;
		
		мСписокВыбранныхВидовОтчетов = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_СписокВидовОтчетов");
		
	КонецЕсли;
	
	сохрВыбранныеОтчеты = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ВыбранныеОтчеты");
	Если сохрВыбранныеОтчеты <> Неопределено Тогда
		ВыбранныеОтчеты.ЗагрузитьЗначения(сохрВыбранныеОтчеты);
	КонецЕсли;
		
	мИерархическийПросмотр = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мИерархическийПросмотр");
	Если мИерархическийПросмотр = Неопределено Тогда
		мИерархическийПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ДеревоОтчетовУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	
	ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
	Если ТекСтраница <> Неопределено И Элементы.Журналы.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
		Элементы.Журналы.ТекущаяСтраница = Элементы[ТекСтраница];
	КонецЕсли;
	
	мОтображатьПустые = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПоказыватьПустые");
	Если мОтображатьПустые = Неопределено Тогда
		мОтображатьПустые = Ложь;
	КонецЕсли;
	
	мФильтроватьВидыОтчетовПоПериоду = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ФильтроватьВидыОтчетовПоПериоду");
	Если мФильтроватьВидыОтчетовПоПериоду = Неопределено Тогда
		мФильтроватьВидыОтчетовПоПериоду = Истина;
	КонецЕсли;
	
	ГрупповойРежим = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ГрупповойРежим");
			
КонецПроцедуры // ВосстановитьПараметрыОтбора()


// Присваивает переменной ДокументОтборСтрока значение пользовательского представления документа
// РегламентированныйОтчет, по которому осуществляется отбор в журнале выгрузки.
// Представление ДокументОтборСтрока отображается в поле ввода ДокументОтборСтрока на форме.
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура УстановитьПредставлениеДокументаОтбора()
	
	Если НЕ ЗначениеЗаполнено(мДокументОтбор) Тогда
		ДокументОтборСтрока = "";
	Иначе
		ДокументОтборСтрока = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(мДокументОтбор);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПредставлениеДокументаОтбора()


// Регулирует доступности элементов управления, связанных со значением документа отбора.
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура УстановитьПометкуКнопкиОтбиратьПоОтчету()
	
	ОтборПоОтчету = мОтбиратьПоДокументуОтбора;
	Элементы.ДокументОтборСтрока.Доступность = мОтбиратьПоДокументуОтбора;
	Элементы.ОтборПоОтчету.Доступность = ЗначениеЗаполнено(мДокументОтбор);
	
КонецПроцедуры // УстановитьПометкуКнопкиОтбиратьПоОтчету()


// ПриЗакрытии()
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки();
			
КонецПроцедуры // ПриЗакрытии()


// СохранитьНастройки()
//
&НаСервере
Процедура СохранитьНастройки()
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_СписокВидовОтчетов", СписокВыбранныхСсылокВДеревеОтчетов());
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели", Элементы.Журналы.ТекущаяСтраница.Имя);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_Организация", Организация);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтборПериод", ОтборПериод);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПолеВыбораПериодичность", Периодичность);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДокументОтбор", мДокументОтбор);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПоказыватьПустые", мОтображатьПустые);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мИерархическийПросмотр", мИерархическийПросмотр);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мОтбиратьПоДокументуОтбора", мОтбиратьПоДокументуОтбора);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ФильтроватьВидыОтчетовПоПериоду", мФильтроватьВидыОтчетовПоПериоду);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ВыбранныеОтчеты", ВыбранныеОтчеты.ВыгрузитьЗначения());
	
КонецПроцедуры // СохранитьНастройки()


// Возвращает список ссылок СправочникСсылка.РегламентированныеОтчеты, соответствующих выбранным
// строкам в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// УзелДерева - текущая строка дерева значений. Используется только при рекурсивных вызовах.
// СписокВидов - текущий список ссылок. Используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	СписокЗначений - список ссылок, соответствующих выбранным строкам в табличном поле ДеревоОтчетов.
//
&НаСервере
Функция СписокВыбранныхСсылокВДеревеОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = мПолноеДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.Ссылка) = Неопределено И УзелДерева.Пометка = 1 Тогда
		СписокВидов.Добавить(УзелДерева.Ссылка);
	КонецЕсли;
		
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокВыбранныхСсылокВДеревеОтчетов(Стр, СписокВидов);
	КонецЦикла;
		
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СписокВыбранныхСсылокВДеревеОтчетов()


// Заполняет дерево отчетов.
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ = Истина)
	
	
	Если ОбновлятьИзИБ Тогда
		
		СписокСкрытыхРеглОтчетов = Новый СписокЗначений;
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							  | СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет КАК Ссылка
							  |ИЗ
							  |	РегистрСведений.СкрытыеРегламентированныеОтчеты КАК СкрытыеРегламентированныеОтчеты");
						  
		СписокСкрытыхРеглОтчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		Если мИерархическийПросмотр Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	0 КАК Пометка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 0
                                  | ИНАЧЕ ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 2
                                  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 1
								  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 3
								  | КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КАК ИндексКартинки,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать ТОГДА РегламентированныеОтчеты.Наименование + &Внешний
								  | ИНАЧЕ РегламентированныеОтчеты.Наименование КОНЕЦ КАК Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание

			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	(РегламентированныеОтчеты.Ссылка НЕ В (&СписокСкрытыхРеглОтчетов) ИЛИ РегламентированныеОтчеты.ЭтоГруппа = ИСТИНА)

			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Код ИЕРАРХИЯ");
			Запрос.УстановитьПараметр("СписокСкрытыхРеглОтчетов",         СписокСкрытыхРеглОтчетов);
			Запрос.УстановитьПараметр("Внешний",  НСтр("ru=' (внешний)';uk=' (зовнішній)'"));
			ЗначениеВДанныеФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), мПолноеДеревоОтчетов);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	0 КАК Пометка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 0
                                  | ИНАЧЕ ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 2
                                  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 1
								  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 3
								  | КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КАК ИндексКартинки,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать ТОГДА РегламентированныеОтчеты.Наименование + &Внешний
								  | ИНАЧЕ РегламентированныеОтчеты.Наименование КОНЕЦ КАК Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание

			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	РегламентированныеОтчеты.Ссылка НЕ В (&СписокСкрытыхРеглОтчетов) И РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ

			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Наименование ");
			Запрос.УстановитьПараметр("СписокСкрытыхРеглОтчетов",         СписокСкрытыхРеглОтчетов);
			Запрос.УстановитьПараметр("Внешний",  НСтр("ru=' (внешний)';uk=' (зовнішній)'"));
			РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			мПолноеДеревоОтчетов.ПолучитьЭлементы().Очистить();
			Для Каждого Стр Из РезультатЗапроса Цикл
				НовСтр = мПолноеДеревоОтчетов.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
			
	СформироватьОтфильтрованноеДеревоОтчетов();
	УдалитьПустыеГруппыВОтфильтрованномДереве();
	Если мИерархическийПросмотр Тогда
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
		
КонецПроцедуры


// СформироватьТаблицуПериодов()
//
&НаСервере
Функция СформироватьТаблицуПериодов(СтруктураПериодов)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("МесяцНач");
	ТаблицаПериодов.Колонки.Добавить("МесяцКон");
	Если ТипЗнч(СтруктураПериодов) = Тип("Структура") ИЛИ ТипЗнч(СтруктураПериодов) = Тип("Соответствие") Тогда
		Для Каждого Эл Из СтруктураПериодов Цикл
			Ключ = Эл.Ключ;
			Значение = Эл.Значение;
			Если Ключ = "Месяц" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = Пер;
					НовСтр.МесяцКон = Пер;
				КонецЦикла;
			ИначеЕсли Ключ = "МесяцНарастающимИтогом" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = Пер;
				КонецЦикла;
			ИначеЕсли Ключ = "Квартал" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 3*(Пер - 1) + 1;
					НовСтр.МесяцКон = 3*(Пер - 1) + 3;
				КонецЦикла;
			ИначеЕсли Ключ = "КварталНарастающимИтогом" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 3*(Пер - 1) + 3;
				КонецЦикла;
			ИначеЕсли Ключ = "Полугодие" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 6*(Пер - 1) + 6;
				КонецЦикла;
			ИначеЕсли Ключ = "Год" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 12;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаПериодов;
	
КонецФункции // СформироватьТаблицуПериодов()


// Формирует отфильтрованное дерево отчетов, то есть дерево в которое попадут только те виды отчетов,
// которые могут представляться за период, соответствующий выбранному пользователем.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева. Используется только при рекурсивных вызовах.
//
&НаСервере
Процедура СформироватьОтфильтрованноеДеревоОтчетов(Узел = Неопределено)
	
	УзелБылУдален = Ложь;
	Если Узел = Неопределено Тогда
		КопироватьДанныеФормы(мПолноеДеревоОтчетов, ДеревоОтчетов);
		Узел = ДеревоОтчетов;
	ИначеЕсли Узел.ПолучитьЭлементы().Количество() = 0 Тогда
		Периоды = Узел.Ссылка.Периоды;
		
		Если ОтборПериод И мФильтроватьВидыОтчетовПоПериоду И Периодичность <> "Произвольный" И ТипЗнч(Периоды) = Тип("ХранилищеЗначения") Тогда
		
			Периоды = Узел.Ссылка.Периоды.Получить();
			Если ТипЗнч(Периоды) = Тип("Соответствие") Тогда
				СтрПериоды = Новый Соответствие;
				Для Каждого ЗаписьПериода Из Периоды Цикл
					ЗаписьПериодаКлюч = ЗаписьПериода.Ключ;
					ЗаписьПериодаЗначение = ЗаписьПериода.Значение;
					СтрПериоды.Вставить(ЗаписьПериодаКлюч, СформироватьТаблицуПериодов(ЗаписьПериодаЗначение));
				КонецЦикла;
			ИначеЕсли ТипЗнч(Периоды) = Тип("Структура") Тогда
				СтрПериоды = Новый Соответствие;
				СтрПериоды.Вставить('00010101000000', СформироватьТаблицуПериодов(Периоды));
			КонецЕсли;
			
			ТаблицаПериодов = ПолучитьАктуальнуюТаблицуПериодов(Новый ХранилищеЗначения(СтрПериоды));
			
			Если ТаблицаПериодов <> Неопределено Тогда
				МесяцКон = Месяц(ДатаКонцаПериодаОтчета);
				Если ТаблицаПериодов.НайтиСтроки(Новый Структура("МесяцКон", МесяцКон)).Количество() = 0 Тогда
					СледуетУдалитьУзел = Истина;
				Иначе
					СледуетУдалитьУзел = Ложь;
				КонецЕсли;
			Иначе
				СледуетУдалитьУзел = Ложь;
			КонецЕсли;
			Если СледуетУдалитьУзел Тогда
				Если Узел.ПолучитьРодителя() = Неопределено Тогда
					ДеревоОтчетов.ПолучитьЭлементы().Удалить(Узел);
				Иначе
					Узел.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Узел);
				КонецЕсли;
				УзелБылУдален = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УзелБылУдален Тогда
		Кол = Узел.ПолучитьЭлементы().Количество();
		Для Сч = 1 По Кол Цикл
			ТекИнд = Кол - Сч;
			Стр = Узел.ПолучитьЭлементы().Получить(ТекИнд);
			СформироватьОтфильтрованноеДеревоОтчетов(Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СформироватьОтфильтрованноеДеревоОтчетов()


// ПолучитьАктуальнуюТаблицуПериодов()
//
&НаСервере
Функция ПолучитьАктуальнуюТаблицуПериодов(Периоды)
	
	Если ТипЗнч(Периоды) = Тип("ХранилищеЗначения") Тогда
		СтруктураПериодов = Периоды.Получить();
	Иначе
		СтруктураПериодов = Периоды;
	КонецЕсли;
		
	Если ТипЗнч(СтруктураПериодов) = Тип("Соответствие") Тогда
		ТаблицаПериодов = Неопределено;
		НачалоДействияТаблицыПериодов = '00010101000000';
		Для Каждого Элемент Из СтруктураПериодов Цикл
			Если Элемент.Ключ > ДатаКонцаПериодаОтчета ИЛИ Элемент.Ключ < НачалоДействияТаблицыПериодов Тогда
				Продолжить;
			Иначе
				ТаблицаПериодов = Элемент.Значение;
				НачалоДействияТаблицыПериодов = Элемент.Ключ;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаПериодов = СтруктураПериодов;
	КонецЕсли;
	Возврат ТаблицаПериодов;
	
КонецФункции // ПолучитьАктуальнуюТаблицуПериодов()


// Удаляет пустые группы отчетов в дереве видов отчетов.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева. Используется только при рекурсивных вызовах.
//
&НаСервере
Процедура УдалитьПустыеГруппыВОтфильтрованномДереве(Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		Узел = ДеревоОтчетов.ПолучитьЭлементы();
	КонецЕсли;
	
	КолСтрок = Узел.Количество();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч;
		Стр = Узел.Получить(ТекИнд);
		УдалитьПустыеГруппыВОтфильтрованномДереве(Стр.ПолучитьЭлементы());
		Если Стр.ЭтоГруппа = Истина И Стр.ПолучитьЭлементы().Количество() = 0 Тогда
			Узел.Удалить(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьПустыеГруппыВОтфильтрованномДереве()


// Восстанавливает сохраненные значения ссылок на отчеты, помеченные в дереве отчетов.
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура ВосстановитьСписокВыбранныхВидовОтчетов()
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, мСписокВыбранныхВидовОтчетов, Истина);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, мСписокВыбранныхВидовОтчетов, Истина);
	
КонецПроцедуры // ВосстановитьСписокВыбранныхВидовОтчетов()


// Устанавливает/снимает пометки в строках табличного поля ДеревоОтчетов, подчиненных заданной.
// Процедура вызывается рекурсивно.
// 
// Параметры:
//	Узел - ДеревоЗначений или СтрокаДереваЗначений, начиная с которой следует обрабатывать дерево.
//	Пометка - значение пометки, которое следует установить.
//	СписокВыбранных - СписокЗначений, содержащий ссылки вида СправочникСсылка.РегламентированныеОтчеты.
//						Если параметр задан, то пометка меняется только у тех строк, для которых свойство Ссылка
//						находится в указанном списке.
//
&НаКлиентеНаСервереБезКонтекста 
Процедура ИзменитьПометкуПодчиненных(Узел, Пометка = Неопределено, СписокВыбранных = Неопределено, ОбновлятьПометкуРодительских = Ложь, Дерево = Неопределено)
	
	Если Пометка = Неопределено Тогда
		Пометка = Узел.Пометка;
	КонецЕсли;
	
	Если Дерево = Неопределено Тогда
		Дерево = Узел;
	КонецЕсли;
	
	Если СписокВыбранных = Неопределено Тогда
		Для Каждого Стр1 Из Узел.ПолучитьЭлементы() Цикл
			Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
				Стр2.Пометка = Пометка;
			КонецЦикла;
			Стр1.Пометка = Пометка;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из Дерево.ПолучитьЭлементы() Цикл
			Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
				Стр2.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр2.Ссылка) <> Неопределено);
			КонецЦикла;
			Если Стр1.ЭтоГруппа <> Истина Тогда
				Стр1.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр1.Ссылка) <> Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр1 Из Дерево.ПолучитьЭлементы() Цикл
		Если Стр1.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		СуммаПометок = 0;
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
			 СуммаПометок = СуммаПометок + Число(Стр2.Пометка);
		КонецЦикла;
		Если СуммаПометок = Стр1.ПолучитьЭлементы().Количество() Тогда
			Стр1.Пометка = 1;
		ИначеЕсли СуммаПометок = 0 Тогда
			Стр1.Пометка = 0;
		Иначе
			Стр1.Пометка = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьПометкуПодчиненных()


// ПриОткрытии()
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ДействияПриОткрытии();
		
КонецПроцедуры // ПриОткрытии()


// ДействияПриОткрытии()
//
&НаКлиенте
Процедура ДействияПриОткрытии()
	
	УстановитьОтборы();
	УправлениеЭлементамиОтбораПоПериоду();
	УправлениеНадписямиМесяцев();
	ПоказатьПериод();
	ОбновитьПодсказкиЭлементовУправленияПериодом();
	
	РегламентированнаяОтчетностьКлиент.ПередОткрытиемОсновнойФормыРаботыСОтчетностью(УникальныйИдентификатор);
	
КонецПроцедуры // ДействияПриОткрытии()


// ОбработкаОповещения()
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Обновить дерево отчетов" И Параметр = "Обновить дерево отчетов" 
		ИЛИ ИмяСобытия = "Запись_РегламентированныйОтчет" 
		Тогда
		ОбновитьДеревоОтчетовНаКлиенте();
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если ТипЗнч(Параметр.Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			Элементы.ЖурналОтчетов.ТекущаяСтрока = Параметр.Ссылка;
			Если Элементы.ЖурналОтчетов.ТекущаяСтрока <> Параметр.Ссылка Тогда // позиционирование не произошло => мешает отбор
				ПоказатьПредупреждение(,НСтр("ru='Введенный отчет не отображен в журнале, так как не соответствует отбору!';uk='Введений звіт не відображений в журналі, тому що не відповідає 
|відбору!'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Функция ОписаниеРегОтчета(ДокументРегОтчет)
	
	ОписаниеРегОтч = Новый Структура;
	
	ОбъектРегОтч = ДокументРегОтчет.ПолучитьОбъект();
	
	ОписаниеРегОтч.Вставить("Организация",             ОбъектРегОтч.Организация);
	ОписаниеРегОтч.Вставить("ДатаНачалаПериодаОтчета", ОбъектРегОтч.ДатаНачала);
	ОписаниеРегОтч.Вставить("ДатаКонцаПериодаОтчета",  ОбъектРегОтч.ДатаОкончания);
	ОписаниеРегОтч.Вставить("ВыбраннаяФорма",          СокрЛП(ОбъектРегОтч.ВыбраннаяФорма));
	
	Возврат ОписаниеРегОтч;
	
КонецФункции


// СоздатьНовыйОтчет()
//
&НаКлиенте
Процедура СоздатьНовыйОтчет(Команда)
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено
	   И НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры // СоздатьНовыйОтчет()


// Открывает форму внутреннего или внешнего отчета, табличный или текстовый документ 
// по указанному в реквизите ИсточникОтчета элемента справочника имени внутреннего или 
// файла внешнего отчета, текстового или табличного документа.
//
// Параметры:
//  ИсточникОтчета - строка - имя файла, указанное в реквизите элемента.
//
&НаКлиенте
Процедура ОткрытьФормуОтчетаНаКлиенте(Отчет, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, ПериодичностьОтчета = Неопределено)
	
	Если ТипЗнч(Отчет) = Тип("Структура") Тогда
		РезультатОткрытияФормыНаСервере = ОткрытьФормуОтчетаНаСервере(Отчет, ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПериодичностьОтчета);
	Иначе
		РезультатОткрытияФормыНаСервере = ОткрытьФормуОтчетаНаСервере(Отчет.ПолучитьИдентификатор(), ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПериодичностьОтчета);
	КонецЕсли;
		
	Если РезультатОткрытияФормыНаСервере = "Недостаточно прав" Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Недостаточно прав!';uk='Недостатньо прав!'"));
				
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Отчет не найден" Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Отчет не найден!';uk='Звіт не знайдений!'"));
		
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Открыть внутренний отчет-документ" Тогда
		ОткрытьФорму("Документ." + Отчет.ИсточникОтчета + ".Форма.ОсновнаяФорма", , , Отчет.ИсточникОтчета);
		
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Не удалось открыть отчет" Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось открыть отчет!';uk='Не вдалося відкрити звіт!'");

		Сообщение.Сообщить();
				
	ИначеЕсли ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
		
		ВариантОткрытия = ?(РезультатОткрытияФормыНаСервере.ВнешнийОтчетИспользовать, "ВнешнийОтчет.", "Отчет.");
		ОткрытьФорму(ВариантОткрытия + Отчет.ИсточникОтчета + ".Форма.ОсновнаяФорма", РезультатОткрытияФормыНаСервере);
		РезультатОткрытияФормыНаСервере.Удалить("ВнешнийОтчетИспользовать");
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуОтчетаНаКлиенте()


// ОткрытьФормуОтчетаНаСервере()
//
&НаСервере
Функция ОткрытьФормуОтчетаНаСервере(Знач Отчет, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, ПериодичностьОтчета = Неопределено)
	
	Если НЕ ТипЗнч(Отчет) = Тип("Структура") Тогда
		Отчет = ДеревоОтчетов.НайтиПоИдентификатору(Отчет);
	КонецЕсли;
		
	Если ТипЗнч(Отчет) <> Тип("Строка") Тогда
		ИсточникОтчета = Отчет.ИсточникОтчета;
	КонецЕсли;
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	
	Если ПравоДоступаКОтчету = Ложь Тогда
		Возврат "Недостаточно прав";
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Возврат "Отчет не найден";
	КонецЕсли;
	
	Если Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
		Возврат "Открыть внутренний отчет-документ";
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ПараметрыТекФормы = Новый Структура;
	ПараметрыТекФормы.Вставить("Организация");
	ПараметрыТекФормы.Вставить("мДатаНачалаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мДатаКонцаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мПериодичность");
	
	Если ОрганизацияОтчета = Неопределено Тогда
		Если Организация.Количество() = 1 Тогда
			Попытка
				ПараметрыТекФормы.Организация = Организация.Получить(0).Значение;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			ПараметрыТекФормы.Организация = ОрганизацияОтчета;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ДатаНачалаПериодаОтчета <> Неопределено ИЛИ ДатаОкончанияПериодаОтчета <> Неопределено Тогда
		
		Попытка
			ПараметрыТекФормы.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаПериодаОтчета);
			ПараметрыТекФормы.мДатаКонцаПериодаОтчета = КонецДня(ДатаОкончанияПериодаОтчета);
		Исключение
		КонецПопытки;
		Если ПериодичностьОтчета <> Неопределено Тогда
			Попытка
				ПараметрыТекФормы.мПериодичность = ПериодичностьОтчета;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ОтборПериод И Периодичность = "По итогам" Тогда
		
		Периоды = Отчет.Ссылка.Периоды.Получить();
		МесяцКонцаПериодаОтчета = Месяц(ДатаКонцаПериодаОтчета);
		КоличествоВозможныхПериодичностей = 0;
		
		Если Периоды <> Неопределено Тогда
			ТаблицаПериодов = ПолучитьАктуальнуюТаблицуПериодов(Периоды);
			Если ТаблицаПериодов <> Неопределено Тогда
				Для Каждого Стр Из ТаблицаПериодов Цикл
					Для Каждого Эл Из Стр.Значение Цикл
						Если Лев(Стр.Ключ, 7) = "Квартал" Тогда
							МесяцКонцаПериода = 3*Эл;
						ИначеЕсли Стр.Ключ = "Полугодие" Тогда
							МесяцКонцаПериода = 6*Эл;
						ИначеЕсли Стр.Ключ = "Год" Тогда
							МесяцКонцаПериода = 12;
						Иначе
							МесяцКонцаПериода = Эл;
						КонецЕсли;
						Если МесяцКонцаПериодаОтчета = МесяцКонцаПериода Тогда
							КоличествоВозможныхПериодичностей = КоличествоВозможныхПериодичностей + 1;
							КлючПериодичности = Стр.Ключ;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоВозможныхПериодичностей = 0 Тогда
			
		ИначеЕсли КоличествоВозможныхПериодичностей = 1 Тогда
			
			Если КлючПериодичности = "Месяц" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
			ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
			ИначеЕсли КлючПериодичности = "Квартал" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			ИначеЕсли КлючПериодичности = "Полугодие" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			Иначе
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	РегламентированныйОтчет.Периодичность
			               |ИЗ
			               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
			               |ГДЕ
			               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
			Если Организация.Количество() > 0 Тогда
				Запрос.Текст = Запрос.Текст + "
				               |	И РегламентированныйОтчет.Организация В (&Организация)";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
						   |УПОРЯДОЧИТЬ ПО
						   |	РегламентированныйОтчет.МоментВремени УБЫВ";
			Запрос.УстановитьПараметр("ИсточникОтчета", Отчет.ИсточникОтчета);
			Запрос.УстановитьПараметр("Организация", Организация);
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
			Если ТаблицаРезультат.Количество() = 0 Тогда
				
				Если КлючПериодичности = "Месяц" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
				ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
				ИначеЕсли КлючПериодичности = "Квартал" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				ИначеЕсли КлючПериодичности = "Полугодие" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				Иначе
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
				КонецЕсли;
				
			Иначе
				
				ПериодичностьДляПодстановки = ТаблицаРезультат.Получить(0).Получить(0);
				Если ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц Тогда
					ДатаКонцаДляПодстановки = КонецМесяца(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаДляПодстановки);
				ИначеЕсли ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал Тогда
					ДатаКонцаДляПодстановки = КонецКвартала(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаДляПодстановки);
				ИначеЕсли ПериодичностьДляПодстановки = Перечисления.Периодичность.Год Тогда
					ДатаКонцаДляПодстановки = КонецГода(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаДляПодстановки);
				Иначе
					Если КлючПериодичности = "Месяц" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
					ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
					ИначеЕсли КлючПериодичности = "Квартал" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					ИначеЕсли КлючПериодичности = "Полугодие" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					Иначе
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
					КонецЕсли;
				КонецЕсли;
					  				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоВозможныхПериодичностей <> 0 Тогда
			Попытка
				ПараметрыТекФормы.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаДляПодстановки);
				ПараметрыТекФормы.мДатаКонцаПериодаОтчета = КонецДня(ДатаКонцаДляПодстановки);
			Исключение
			КонецПопытки;
			Если Периодичность <> "Произвольный" Тогда
				Попытка
					ПараметрыТекФормы.мПериодичность = ПериодичностьДляПодстановки;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТекФормы.Вставить("ВнешнийОтчетИспользовать", Отчет.Ссылка.ВнешнийОтчетИспользовать);
	
	Возврат ПараметрыТекФормы;
	
КонецФункции // ОткрытьФормуОтчетаНаСервере()


// СнятьПометкиУВсех()
//
&НаКлиенте
Процедура СнятьПометкиУВсех(Команда)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Ложь);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Ложь);
	УстановитьОтборы();
	
КонецПроцедуры // СнятьПометкиУВсех()

// Устанавливает отборы в табличных полях ЖурналОтчетов и ЖурналВыгрузки в соответствии
// со значениями, установленными в элементах формы, предназначенных для регулирования параметров отбора.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура УстановитьОтборы() Экспорт
	
	СписокВидовОтчетов = СписокВыбранныхВидовОтчетов();
	
	Если Элементы.Журналы.ТекущаяСтраница = Элементы.ГруппаЖурналОтчетов Тогда
		
		ОтборДинамическогоСписка = ЖурналОтчетов.КомпоновщикНастроек.Настройки.Отбор;
		
		ОтборДинамическогоСписка.Элементы.Очистить();
		
		ОтборИсточникОтчета = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОрганизация    = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаНачала     = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаОкончания  = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаОкончания2 = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ОтборИсточникОтчета.Использование = Истина;
		ОтборИсточникОтчета.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборИсточникОтчета.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсточникОтчета");
		ОтборИсточникОтчета.ПравоеЗначение = СписокВидовОтчетов;
		
		ОтборОрганизация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		
		ОтборДатаНачала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
		
		ОтборДатаОкончания.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
		
		ОтборДатаОкончания2.Использование = Ложь;
		ОтборДатаОкончания2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
		
		Если Организация.Количество() = 0 Тогда
			ОтборОрганизация.Использование = Ложь;
		Иначе
			ОтборОрганизация.Использование = Истина;
			ОтборОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборОрганизация.ПравоеЗначение = Организация;
		КонецЕсли;
		
		Если НЕ ОтборПериод Тогда
			ОтборДатаНачала.Использование = Ложь;
			ОтборДатаОкончания.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				ОтборДатаНачала.Использование = Истина;
				ОтборДатаОкончания.Использование = Истина;
				ОтборДатаНачала.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборДатаНачала.ПравоеЗначение = ДатаНачалаПериодаОтчета;
				ОтборДатаОкончания.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборДатаОкончания.ПравоеЗначение = КонецДня(ДатаКонцаПериодаОтчета);
			Иначе
				ОтборДатаНачала.Использование = Ложь;
				
	            ОтборДатаОкончания.Использование = Истина;
				ОтборДатаОкончания.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборДатаОкончания.ПравоеЗначение = НачалоДня(ДатаКонцаПериодаОтчета);
				
				ОтборДатаОкончания2.Использование = Истина;
				ОтборДатаОкончания2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборДатаОкончания2.ПравоеЗначение = КонецДня(ДатаКонцаПериодаОтчета);
			КонецЕсли;
		КонецЕсли;
		
		ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
	Иначе
		
		ОтборДинамическогоСписка = ЖурналВыгрузки.КомпоновщикНастроек.Настройки.Отбор;
		
		ОтборДинамическогоСписка.Элементы.Очистить();
		
		ОтборОрганизация = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборСсылка      = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПериодПо    = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПериодПо2   = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
		ОтборОрганизация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		
		ОтборСсылка.Использование = Истина;
		ОтборСсылка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборСсылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		
		ОтборПериодПо.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Основание.ДатаОкончания");
		
		ОтборПериодПо2.Использование = Ложь;
		ОтборПериодПо2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Основание.ДатаОкончания");
				
		Если Организация.Количество() = 0 Тогда
			ОтборОрганизация.Использование = Ложь;
		Иначе
			ОтборОрганизация.Использование = Истина;
			ОтборОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборОрганизация.ПравоеЗначение = Организация;
		КонецЕсли;
				
		Если НЕ (мОтбиратьПоДокументуОтбора И ЗначениеЗаполнено(мДокументОтбор)) Тогда
			ОтборСсылка.ПравоеЗначение = СформироватьСписокВыгрузок(СписокВидовОтчетов);
		Иначе
			ОтборСсылка.ПравоеЗначение = СформироватьСписокВыгрузок(мДокументОтбор);
		КонецЕсли;
		
		Если НЕ ОтборПериод Тогда
			ОтборПериодПо.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				ОтборПериодПо.Использование = Истина;
				ОтборПериодПо.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборПериодПо.ПравоеЗначение = ДатаКонцаПериодаОтчета;
			Иначе
				
				ОтборПериодПо.Использование = Истина;
				ОтборПериодПо.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборПериодПо.ПравоеЗначение = НачалоДня(ДатаНачалаПериодаОтчета);
				
				ОтборПериодПо2.Использование = Истина;
				ОтборПериодПо2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборПериодПо2.ПравоеЗначение = КонецДня(ДатаКонцаПериодаОтчета);
	
			КонецЕсли;
		КонецЕсли;
		
		ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборы()


// ПометитьВсе()
//
&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина);
	УстановитьОтборы();
	
КонецПроцедуры // ПометитьВсе()


// РазвернутьВсе()
//
&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого Стр Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОтчетов.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьВсе()


// СвернутьВсе()
//
&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого Стр Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОтчетов.Свернуть(Стр.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры // СвернутьВсе()


// Обновить()
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоОтчетовНаКлиенте();
	
КонецПроцедуры // Обновить()


// УстановитьИлиОтменитьИерархическийРежимПросмотра()
//
&НаКлиенте
Процедура УстановитьИлиОтменитьИерархическийРежимПросмотра(Команда)
	
	мИерархическийПросмотр = НЕ мИерархическийПросмотр;
	Элементы.ДеревоОтчетовУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	ОбновитьДеревоОтчетовНаКлиенте();
	
КонецПроцедуры // УстановитьИлиОтменитьИерархическийРежимПросмотра()


// Возвращает признаки раскрытия узлов в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// Параметры:
//	УзелДерева - начальный узел, с которого следует начать сканирование дерева.
//	СписокУзлов - служебная переменная. Используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	ТаблицаЗначений - соответствие узлов и признаков их раскрытия.
//
&НаКлиенте
Функция СписокРаскрытыхВДеревеОтчетов(УзелДерева = Неопределено, СписокУзлов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева  = ДеревоОтчетов;
		СписокУзлов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокУзлов.НайтиПоЗначению(УзелДерева.Ссылка) = Неопределено И УзелДерева.ПолучитьЭлементы().Количество() <> 0 Тогда
		
		СписокУзлов.Добавить(УзелДерева.Ссылка, Элементы.ДеревоОтчетов.Развернут(УзелДерева.ПолучитьИдентификатор()));
		
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокРаскрытыхВДеревеОтчетов(Стр, СписокУзлов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокУзлов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СписокРаскрытыхВДеревеОтчетов()


// Процедура устанавливает активной строку дерева ДеревоОтчетов, соответствующую
// указанной ссылке.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Ссылка - СправочникСсылка.РегламентированныеОтчеты, строку дерева, соответствующую которой,
//				следует сделать активной.
//	Узел - узел дерева ДеревоОтчетов, начиная с которого следует начать сканирование дерева для поиска
//				указанной ссылки.
//
&НаКлиенте
Процедура УстановитьТекущуюСсылку(Ссылка, Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		ПервыйПроход = Истина;
		Узел = ДеревоОтчетов;
	Иначе
		ПервыйПроход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйПроход И Узел.Ссылка = Ссылка Тогда
		Элементы.ДеревоОтчетов.ТекущаяСтрока = Узел.ПолучитьИдентификатор();
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		УстановитьТекущуюСсылку(Ссылка, Стр);
	КонецЦикла;
	
КонецПроцедуры // УстановитьТекущуюСсылку()


// Раскрывает или сворачивает узлы в строках дерева в табличном поле ДеревоОтчетов
// в соответствии с признаками перечисленными в таблице-параметре.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - исходный узел дерева.
//	СписокРаскрытых - таблица, задающая соответствие между ссылками (узлами) и признаками их раскрытия.
//
&НаКлиенте
Процедура УстановитьРаскрытияВСпискеОтчетов(Узел, СписокРаскрытых)
	
	Если Узел <> ДеревоОтчетов И Узел.ПолучитьЭлементы().Количество() <> 0 Тогда
		РезультатПоиска = СписокРаскрытых.НайтиПоЗначению(Узел.Ссылка);
		Если РезультатПоиска = Неопределено Тогда
			Элементы.ДеревоОтчетов.Развернуть(Узел.ПолучитьИдентификатор());
		Иначе
			Если РезультатПоиска.Представление Тогда
				Элементы.ДеревоОтчетов.Развернуть(Узел.ПолучитьИдентификатор());
			Иначе
				Элементы.ДеревоОтчетов.Свернуть(Узел.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		УстановитьРаскрытияВСпискеОтчетов(Стр, СписокРаскрытых)
	КонецЦикла;
	
КонецПроцедуры // УстановитьРаскрытияВСпискеОтчетов()


// Устанавливает подсказки у элементов управления периодом в зависимости от значений,
// установленных для этих элементов упрвления.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура ОбновитьПодсказкиЭлементовУправленияПериодом()
	
	КодЯзыкаДляФормат = ЛокализацияПовтИсп.ОпределитьКодЯзыкаДляФормат();
	Если НЕ ОтборПериод Тогда
		Подсказка = НСтр("ru='Отбор по периоду не установлен';uk='Відбір по періоду не встановлений'");
	Иначе
		Если Периодичность = "По итогам" Тогда
			НайденноеЗначение = "";
			Если МассивНаименованийПравыхГраницПериода.Свойство("Месяц" + Месяц(ДатаКонцаПериодаОтчета), НайденноеЗначение) Тогда
				Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчеты за период %1';uk= 'Звіти за період %1'"), ПредставлениеПериода(ДатаНачалаПериодаОтчета, КонецДня(ДатаКонцаПериодаОтчета), "Л="+КодЯзыкаДляФормат+";ФП = Истина"));
			КонецЕсли;
		Иначе
			Если ДатаНачалаПериодаОтчета <= ДатаКонцаПериодаОтчета Тогда
				Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчеты за период %1';uk= 'Звіти за період %1'"), ПредставлениеПериода(ДатаНачалаПериодаОтчета, КонецДня(ДатаКонцаПериодаОтчета), "Л="+КодЯзыкаДляФормат+";ФП = Истина"));
			Иначе
				Подсказка = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОтборПериод.Подсказка = Подсказка;
	Элементы.Периодичность.Подсказка = Подсказка;
	Элементы.Период.Подсказка = Подсказка;
	Элементы.Год.Подсказка = Подсказка;
	Элементы.ДатаКонцаПериодаОтчета.Подсказка = Подсказка;
	Элементы.ДатаНачалаПериодаОтчета.Подсказка = Подсказка;
		
КонецПроцедуры // ОбновитьПодсказкиЭлементовУправленияПериодом()


// ОткрытьФормуПодробнееОбОтчете()
//
&НаКлиенте
Процедура ОткрытьФормуПодробнееОбОтчете(Команда)
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выберите отчет!';uk='Виберіть звіт!'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		ПоказатьПредупреждение(,НСтр("ru='Функция недоступна для группы отчетов!';uk='Функція недоступна для групи звітів!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Элементы.ДеревоОтчетов.ТекущиеДанные.Ссылка);
	
	ФормаПодробнееОФормах = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ПодробнееОбОтчете", ПараметрыФормы, ЭтаФорма);
	ФормаПодробнееОФормах.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаПодробнееОФормах.Открыть();
	
КонецПроцедуры


// ДеревоОтчетовПриАктивизацииСтроки()
//
&НаКлиенте
Процедура ДеревоОтчетовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДеревоОтчетовСоздатьНовыйОтчет.Доступность = НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа;
		Элементы.ДеревоОтчетовКонтекстноеМенюСоздатьНовыйОтчет.Доступность = НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа;
		
	Иначе
		Элементы.ДеревоОтчетовСоздатьНовыйОтчет.Доступность = Ложь;
		Элементы.ДеревоОтчетовКонтекстноеМенюСоздатьНовыйОтчет.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДеревоОтчетовПриАктивизацииСтроки()


// ДеревоОтчетовПередНачаломДобавления()
//
&НаКлиенте
Процедура ДеревоОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры // ДеревоОтчетовПередНачаломДобавления()


// ДеревоОтчетовПередУдалением()
//
&НаКлиенте
Процедура ДеревоОтчетовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ДеревоОтчетовПередУдалением()


// ДеревоОтчетовПометкаПриИзменении()
//
&НаКлиенте
Процедура ДеревоОтчетовПометкаПриИзменении(Элемент)
	
	АналогичнаяСтрокаПолногоДерева = ПолучитьСтрокуДереваПоСсылке(мПолноеДеревоОтчетов, Элементы.ДеревоОтчетов.ТекущиеДанные.Ссылка);
	Если Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка = 2 Тогда
		Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	АналогичнаяСтрокаПолногоДерева.Пометка = Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка;
	ИзменитьПометкуПодчиненных(Элементы.ДеревоОтчетов.ТекущиеДанные, , , Истина, ДеревоОтчетов);
	ИзменитьПометкуПодчиненных(АналогичнаяСтрокаПолногоДерева, , , Истина, мПолноеДеревоОтчетов);
	УстановитьОтборы();
	
КонецПроцедуры // ДеревоОтчетовПометкаПриИзменении()


// Возвращает ссылку на строку дерева значений по заданному значению колонки Ссылка.
// Функция вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева видов отчетов, используется только при рекурсивных вызовах.
//	Ссылка - ДокументСсылка.РегламентированныйОтчет, значение колонки Ссылка искомой строки дерева значений.
//
// Возвращаемое значение - СтрокаДереваЗначений, искомая строка дерева значений.
//	
&НаКлиенте
Функция ПолучитьСтрокуДереваПоСсылке(Узел, Ссылка)
	
	Если ТипЗнч(Узел) = Тип("ДанныеФормыЭлементДерева") И Узел.Ссылка = Ссылка Тогда
		Возврат Узел;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		ИскомаяСтрока = ПолучитьСтрокуДереваПоСсылке(Стр, Ссылка);
		Если ИскомаяСтрока <> Неопределено Тогда
			Возврат ИскомаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтрокуДереваПоСсылке()


// ДеревоОтчетовВыбор()
//
&НаКлиенте
Процедура ДеревоОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Доки = ДокументыСУчетомКритериевОтбора(Элементы.ДеревоОтчетов.ТекущиеДанные.ИсточникОтчета);
		Если Доки <> 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИсточникОтчета", Элементы.ДеревоОтчетов.ТекущиеДанные.ИсточникОтчета);
			ПараметрыФормы.Вставить("Периодичность", Периодичность);
			ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
			ПараметрыФормы.Вставить("Организация", Организация);
			ПараметрыФормы.Вставить("ОтборПериод", ОтборПериод);
			ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
																						
			ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОтчета", ПараметрыФормы, ЭтаФорма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоОтчетовВыборЗавершение", ЭтотОбъект);
			ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбораОтчета.Открыть();
		Иначе
			ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДеревоОтчетовВыбор()

&НаКлиенте
Процедура ДеревоОтчетовВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Истина Тогда // создаем новый отчет
		ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);
	ИначеЕсли ЗначениеЗаполнено(РезультатВыбора) Тогда
		ПоказатьЗначение(,РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество документов РегламентированныйОтчет в ИБ с учетом установленных критериев отбора.
//
// Параметры:
//	Нет.
//
// Вовращаемое значение:
//	Число - количество документов в ИБ с учетом установленных пользователей на форме параметров отбора.
//	
&НаСервере
Функция ДокументыСУчетомКритериевОтбора(ИсточникОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2", НачалоГода(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2Кон", КонецДня(НачалоГода(ДатаНачалаПериодаОтчета)));
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	РегламентированныйОтчет.Ссылка
				   |ИЗ
				   |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
				   |ГДЕ
				   |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
	Если Организация.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
				   |	И РегламентированныйОтчет.Организация В (&Организация)";
	КонецЕсли;				   
	Если ОтборПериод Тогда
		Если Периодичность = "Произвольный" Тогда
			Запрос.Текст = Запрос.Текст + "
					   |	И РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала
					   |	И РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончанияКон";
		Иначе
			Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
		КонецЕсли;
	КонецЕсли;
			   
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции // ДокументыСУчетомКритериевОтбора()


// ОрганизацияНачалоВыбора()
//
&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
		
	ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтаФорма);
	ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбораОрганизаций.Открыть();
	
КонецПроцедуры // ОрганизацияНачалоВыбора()

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Организация.Очистить();
		
	УстановитьОтборы();
	
КонецПроцедуры

// ОрганизацияОткрытие()
//
&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Организация.Количество() = 1 Тогда
		ПоказатьЗначение(,Организация.Получить(0).Значение);
	КонецЕсли;
		
КонецПроцедуры // ОрганизацияОткрытие()


// ОрганизацияОбработкаВыбора()
//
&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Организация.Очистить();
	Организация.Добавить(ВыбранноеЗначение);
	
	УстановитьОтборы();
	
КонецПроцедуры // ОрганизацияОбработкаВыбора()


&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	УправлениеЭлементамиОтбораПоПериоду();
	УправлениеНадписямиМесяцев();
	
КонецПроцедуры // // ОтборПериодПриИзменении()


// Изменяет свойства элементов формы в зависимости от настроек отбора по периоду.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура УправлениеЭлементамиОтбораПоПериоду()
		
	Элементы.Периодичность.Доступность = ОтборПериод;
	Элементы.Год.Доступность = ОтборПериод;
	Элементы.Период.Доступность = ОтборПериод;
	Элементы.ДатаНачалаПериодаОтчета.Доступность = ОтборПериод;
	Элементы.ДатаКонцаПериодаОтчета.Доступность = ОтборПериод;
	Элементы.ВыбратьПроизвольныйПериод.Доступность = ОтборПериод;
	          	
	Если ОтборПериод И Периодичность = "Произвольный" Тогда
		Элементы.Год.Доступность = Ложь;
		Элементы.Период.Доступность = Ложь;
		Элементы.ДатаНачалаПериодаОтчета.Доступность = Истина;
		Элементы.ДатаКонцаПериодаОтчета.Доступность = Истина;
		Элементы.ВыбратьПроизвольныйПериод.Доступность = Истина;
	ИначеЕсли ОтборПериод Тогда
		Элементы.Год.Доступность = Истина;
		Элементы.Период.Доступность = Истина;
		Элементы.ДатаНачалаПериодаОтчета.Доступность = Ложь;
		Элементы.ДатаКонцаПериодаОтчета.Доступность = Ложь;
		Элементы.ВыбратьПроизвольныйПериод.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеЭлементамиОтбораПоПериоду()


// Регулирует цвет текста у надписей - названий месяцев/кварталов.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура УправлениеНадписямиМесяцев()
	
	Месяц = Месяц(ДатаКонцаПериодаОтчета);
	
	Если Месяц = 1 Тогда
		
		Период = "Январь";
				
	ИначеЕсли Месяц = 2 Тогда
		
		Период = "Февраль";
		
	ИначеЕсли Месяц = 3 Тогда
		
		Период = "Март (I квартал)";
		
	ИначеЕсли Месяц = 4 Тогда
		
		Период = "Апрель";
		
	ИначеЕсли Месяц = 5 Тогда
		
		Период = "Май";
		
	ИначеЕсли Месяц = 6 Тогда
		
		Период = "Июнь (II квартал)";
		
	ИначеЕсли Месяц = 7 Тогда
		
		Период = "Июль";
		
	ИначеЕсли Месяц = 8 Тогда
		
		Период = "Август";
		
	ИначеЕсли Месяц = 9 Тогда
		
		Период = "Сентябрь (III квартал)";
		
	ИначеЕсли Месяц = 10 Тогда
		
		Период = "Октябрь";
		
	ИначеЕсли Месяц = 11 Тогда
		
		Период = "Ноябрь";
		
	ИначеЕсли Месяц = 12 Тогда
		
		Период = "Декабрь (IV квартал)";
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеНадписямиМесяцев()


// ПериодичностьПриИзменении()
//
&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	УправлениеЭлементамиОтбораПоПериоду();
	УстановитьОтборы();
		
КонецПроцедуры // ПериодичностьПриИзменении()


// ГодПриИзменении()
//
&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	
	ДатаКонцаПериодаОтчета = Дата(Год, Месяц(ДатаКонцаПериодаОтчета), День(КонецМесяца(Дата(Год, Месяц(ДатаКонцаПериодаОтчета), 1))));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	
КонецПроцедуры // ГодПриИзменении()


// ПериодПриИзменении()
//
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
		
	УстановитьДатыНачалаИКонцаПериодаОтчета();
	УправлениеНадписямиМесяцев();
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	
КонецПроцедуры // ПериодПриИзменении()


// ДатаНачалаПериодаОтчетаПриИзменении()
//
&НаКлиенте
Процедура ДатаНачалаПериодаОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
		ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры // ДатаНачалаПериодаОтчетаПриИзменении()


// ДатаКонцаПериодаОтчетаПриИзменении()
//
&НаКлиенте
Процедура ДатаКонцаПериодаОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
		ДатаНачалаПериодаОтчета = ДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры // ДатаКонцаПериодаОтчетаПриИзменении()


&НаКлиенте
Процедура ВыбратьПроизвольныйПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = ДатаНачалаПериодаОтчета;
	Диалог.Период.ДатаОкончания = ДатаКонцаПериодаОтчета;
	
	ДополнительныеПараметры = Новый Структура("Диалог", Диалог);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПроизвольныйПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизвольныйПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если Период <> Неопределено Тогда
		
		ДатаНачалаПериодаОтчета = Диалог.Период.ДатаНачала;
		ДатаКонцаПериодаОтчета  = Диалог.Период.ДатаОкончания;
		
		УстановитьОтборы();
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит строковое представление периода в заголовок надписи НадписьПериодаСоставленияОтчета.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура ПоказатьПериод()

	Год = Год(ДатаКонцаПериодаОтчета);
	
КонецПроцедуры // ПоказатьПериод()


// Возвращает список полей ИсточникОтчета элементов справочника РегламентированныеОтчеты, 
// соответствующих отмеченным строкам в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// Параметры:
//	УзелДерева - текущая СтрокаДереваЗначений. При вызове извне функции значение должно быть не заполнено.
//	СписокВидов - служебная переменная, используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	СписокЗначений - список полей ИсточникОтчета для элементов, соответствующих отмеченным строкам
//						табличного поля ДеревоОтчетов.
//
&НаКлиенте
Функция СписокВыбранныхВидовОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено) Экспорт
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = ДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.ИсточникОтчета) = Неопределено И УзелДерева.Пометка = 1 И НЕ УзелДерева.ЭтоГруппа Тогда
		СписокВидов.Добавить(УзелДерева.ИсточникОтчета);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокВыбранныхВидовОтчетов(Стр, СписокВидов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СписокВыбранныхВидовОтчетов()


// Возвращает список ссылок ДокументСсылка.ВыгрузкаРегламентированныхОтчетов, соответствующих
// отмеченным в табличном поле ДеревоОтчетов отчетам. Список необходим для последующей установки
// отбора для элемента формы ЖурналВыгрузки.
//
// Параметры:
//	СписокВидовОтчетов - СписокЗначений, содержащий строковые идентификаторы видов регламентированных отчетов,
//							по которым следует отбирать документы ВыгрузкаРегламентированныхОтчетов.
//
// Возвращаемое значение:
//	СписокЗначений - список ссылок на документы ДокументСсылка.ВыгрузкаРегламентированныхОтчетов.
//
&НаСервере
Функция СформироватьСписокВыгрузок(СписокВидовОтчетов)
	
	Если ТипЗнч(СписокВидовОтчетов) = Тип("СписокЗначений") Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
								|	ВыгрузкаРегламентированныхОтчетовОсновная.Ссылка
								|ИЗ
								|	Документ.ВыгрузкаРегламентированныхОтчетов КАК ВыгрузкаРегламентированныхОтчетовОсновная
								|ГДЕ
								|	Основание В
								|			(ВЫБРАТЬ
								|				РегламентированныйОтчет.Ссылка
								|			ИЗ
								|				Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
								|			ГДЕ
								|				РегламентированныйОтчет.ИсточникОтчета В (&ИсточникОтчета))");
							  
		Запрос.УстановитьПараметр("ИсточникОтчета", СписокВидовОтчетов);
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
							  |	ВыгрузкаРегламентированныхОтчетов.Ссылка КАК Ссылка
							  |ИЗ
							  |	Документ.ВыгрузкаРегламентированныхОтчетов КАК ВыгрузкаРегламентированныхОтчетов
							  |ГДЕ
							  |	ВыгрузкаРегламентированныхОтчетов.Основание = &ИсточникОтчета");
							  
		Запрос.УстановитьПараметр("ИсточникОтчета", СписокВидовОтчетов);
		
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Результат;
	
КонецФункции // СформироватьСписокВыгрузок()


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
	ОтчетыДляПакетнойОбработки.ЗагрузитьЗначения(Элементы.ЖурналОтчетов.ВыделенныеСтроки);
				
	Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
		
		РегламентированнаяОтчетностьКлиент.НапечататьОтчеты(ОтчетыДляПакетнойОбработки, "ПоказатьБланк");
		
	КонецЕсли;
	
КонецПроцедуры // ПоказатьБланк()


// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	СтандартнаяОбработка = Истина;
	
	Если СтандартнаяОбработка Тогда
		
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		ОтчетыДляПакетнойОбработки.ЗагрузитьЗначения(Элементы.ЖурналОтчетов.ВыделенныеСтроки);
		
		Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
			
			Если ОтчетыДляПакетнойОбработки.Количество() = 1 Тогда
				ТекстВопроса = НСтр("ru='Напечатать выбранный отчет?';uk='Надрукувати вибраний звіт?'");
			Иначе
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выбрано %1 отчетов. 
|Напечатать выбранные отчеты?';uk='Вибрано %1 звітів. 
|Надрукувати вибрані звіти?'"), ОтчетыДляПакетнойОбработки.Количество());
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьСразуЗавершение", ЭтотОбъект, Новый Структура("ОтчетыДляПакетнойОбработки", ОтчетыДляПакетнойОбработки));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтчетыДляПакетнойОбработки = ДополнительныеПараметры.ОтчетыДляПакетнойОбработки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РегламентированнаяОтчетностьКлиент.НапечататьОтчеты(ОтчетыДляПакетнойОбработки, "ПечататьСразу");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		
        Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнформационныйЦентрКлиент");
        Модуль.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
		
    КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
 
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		
        Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнформационныйЦентрКлиент");
        Модуль.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
		
    КонецЕсли;
 
КонецПроцедуры


// ЖурналОтчетовПередНачаломДобавления()
//
&НаКлиенте
Процедура ЖурналОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ДобавлениеОтчетаВЖурналеОтчетов();
	КонецЕсли;
	
КонецПроцедуры // ЖурналОтчетовПередНачаломДобавления()


// Открывает форму с табличным полем списка справочника "Регламентированные отчеты" для выбора 
// вида отчета и создает новый отчет указанного пользователей вида.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура ДобавлениеОтчетаВЖурналеОтчетов()
	
	ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораВидаОтчета", , ЭтаФорма);
	
	Если НЕ мИерархическийПросмотр Тогда
		ФормаВыбораОтчета.Элементы.СправочникСписок.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеОтчетаВЖурналеОтчетовЗавершение", ЭтотОбъект);
	ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбораОтчета.Открыть();
	
КонецПроцедуры // ДобавлениеОтчетаВЖурналеОтчетов()

&НаКлиенте
Процедура ДобавлениеОтчетаВЖурналеОтчетовЗавершение(ВыбранныйВидОтчета, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйВидОтчета) Тогда
		ОткрытьФормуОтчетаНаКлиенте(ВыбранныйВидОтчета);
	КонецЕсли;

КонецПроцедуры


// ОбновитьЖурнал()
//
&НаКлиенте
Процедура ОбновитьЖурнал(Команда)
		
	УстановитьОтборы();
	
КонецПроцедуры // ОбновитьЖурнал()


// ПоказатьИсториюВыгрузки()
//
&НаКлиенте
Процедура ПоказатьИсториюВыгрузки(Команда)
	
	Если Элементы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
		
		мДокументОтбор = Элементы.ЖурналОтчетов.ТекущаяСтрока;
		мОтбиратьПоДокументуОтбора = Истина;
		УстановитьПредставлениеДокументаОтбора();
		УстановитьПометкуКнопкиОтбиратьПоОтчету();
		Элементы.Журналы.ТекущаяСтраница = Элементы.ГруппаЖурналВыгрузки;
		УстановитьОтборы();
		
	КонецЕсли;
	
КонецПроцедуры // ПоказатьИсториюВыгрузки()


// ОтборПоОтчетуПриИзменении()
//
&НаКлиенте
Процедура ОтборПоОтчетуПриИзменении(Элемент)
	
	мОтбиратьПоДокументуОтбора = НЕ мОтбиратьПоДокументуОтбора;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	УстановитьОтборы();
	
КонецПроцедуры // ОтборПоОтчетуПриИзменении()


// ДокументОтборСтрокаОчистка()
//
&НаКлиенте
Процедура ДокументОтборСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	мДокументОтбор = Неопределено;
	мОтбиратьПоДокументуОтбора = Ложь;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	УстановитьПредставлениеДокументаОтбора();
	УстановитьОтборы();
	
КонецПроцедуры // ДокументОтборСтрокаОчистка()


// ДокументОтборСтрокаОткрытие()
//
&НаКлиенте
Процедура ДокументОтборСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(мДокументОтбор) Тогда
		ПоказатьЗначение(,мДокументОтбор);
	КонецЕсли;
	
КонецПроцедуры // ДокументОтборСтрокаОткрытие()


&НаКлиенте
Процедура ДоступныеОбновления(Команда)
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ОткрытьФормуДоступныхОбновленийРО();
	
КонецПроцедуры


// ЖурналыПриСменеСтраницы()
//
&НаКлиенте
Процедура ЖурналыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	
КонецПроцедуры // ЖурналыПриСменеСтраницы()


&НаКлиенте
Процедура УстановитьДатыНачалаИКонцаПериодаОтчета()

	Если Период = "Январь" Тогда
		
		Месяц = 1;
				
	ИначеЕсли Период = "Февраль" Тогда
		
		Месяц = 2;
		
	ИначеЕсли Период = "Март (I квартал)" Тогда
		
		Месяц = 3;
		
	ИначеЕсли Период = "Апрель" Тогда
		
		Месяц = 4;
		
	ИначеЕсли Период = "Май" Тогда
		
		Месяц = 5;
		
	ИначеЕсли Период = "Июнь (II квартал)" Тогда
		
		Месяц = 6;
		
	ИначеЕсли Период = "Июль" Тогда
		
		Месяц = 7;
		
	ИначеЕсли Период = "Август" Тогда
		
		Месяц = 8;
		
	ИначеЕсли Период = "Сентябрь (III квартал)" Тогда
		
		Месяц = 9;
		
	ИначеЕсли Период = "Октябрь" Тогда
		
		Месяц = 10;
		
	ИначеЕсли Период = "Ноябрь" Тогда
		
		Месяц = 11;
		
	ИначеЕсли Период = "Декабрь (IV квартал)" Тогда
		
		Месяц = 12;
		
	Иначе	
		
		Месяц = 0;
		
	КонецЕсли;
	
	ДатаКонцаПериодаОтчета = КонецМесяца(Дата(Год, Месяц, 1));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

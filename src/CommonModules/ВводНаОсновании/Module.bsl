
#Область ПрограммныйИнтерфейс

// Размещает команды ввода на основании на форме.
//
// Параметры:
//   Форма                                 - УправляемаяФорма - форма, в которой необходимо разместить подменю Создать на основании.
//   МестоРазмещенияКомандПоУмолчанию      - ЭлементФормы     - группа, в которую необходимо разместить подменю Создать на основании,
//                                                              по умолчанию размещается в командную панель формы.
//   ОбъектыОснований                      - Массив          - список объектов метаданных, для которых необходимо сформировать
//                                                             объединенное подменю Создать на основании.
//   ИмяМетодаМенеджераСозданияНаОсновании - Строка          - метод менеджера объектов с описанием добавляемых команд
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКомандПоУмолчанию = Неопределено, ОбъектыОснований = Неопределено, ИмяМетодаМенеджераСозданияНаОсновании = "ДобавитьКомандыСозданияНаОсновании", Кэшировать = Истина) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	УдалитьКоманды(Форма, МестоРазмещенияКомандПоУмолчанию);
	
	Если ОбъектыОснований = Неопределено и Кэшировать Тогда
		КомандыСоздатьНаОсновании = ВводНаОснованииПовтИсп.КомандыСоздатьНаОснованииФормы(ИмяФормы, ОбъектыОснований, ИмяМетодаМенеджераСозданияНаОсновании).Скопировать();
	Иначе
		КомандыСоздатьНаОсновании = КомандыСоздатьНаОснованииФормы(Форма, ОбъектыОснований, ИмяМетодаМенеджераСозданияНаОсновании).Скопировать();
	КонецЕсли;
	
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		Для Каждого КомандаСоздатьНаОсновании Из КомандыСоздатьНаОсновании Цикл
			Если ПустаяСтрока(КомандаСоздатьНаОсновании.МестоРазмещения) Тогда
				КомандаСоздатьНаОсновании.МестоРазмещения = МестоРазмещенияКомандПоУмолчанию.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомандыСоздатьНаОсновании.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	
	ТаблицаКоманд = КомандыСоздатьНаОсновании.Скопировать(,"МестоРазмещения");
	ТаблицаКоманд.Свернуть("МестоРазмещения");
	МестаРазмещения = ТаблицаКоманд.ВыгрузитьКолонку("МестоРазмещения");
	
	Для Каждого МестоРазмещения Из МестаРазмещения Цикл
		НайденныеКоманды = КомандыСоздатьНаОсновании.НайтиСтроки(Новый Структура("МестоРазмещения,СкрытаФункциональнымиОпциями", МестоРазмещения, Ложь));
		
		ЭлементФормыДляРазмещения = Форма.Элементы.Найти(МестоРазмещения);
		Если ЭлементФормыДляРазмещения = Неопределено Тогда
			ЭлементФормыДляРазмещения = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
		
		Если НайденныеКоманды.Количество() > 0 Тогда
			ДобавитьКомандыСоздатьНаОсновании(Форма, НайденныеКоманды, ЭлементФормыДляРазмещения);
		КонецЕсли;
	КонецЦикла;
	
	АдресКомандСоздатьНаОснованииВоВременномХранилище = "АдресКомандСоздатьНаОснованииВоВременномХранилище";
	КомандаФормы = Форма.Команды.Найти(АдресКомандСоздатьНаОснованииВоВременномХранилище);
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(АдресКомандСоздатьНаОснованииВоВременномХранилище);
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(КомандыСоздатьНаОсновании, Форма.УникальныйИдентификатор);
	Иначе
		ОбщийСписокКомандСоздатьНаОснованииФормы = ПолучитьИзВременногоХранилища(КомандаФормы.Действие);
		Для Каждого КомандаСоздатьНаОсновании Из КомандыСоздатьНаОсновании Цикл
			ЗаполнитьЗначенияСвойств(ОбщийСписокКомандСоздатьНаОснованииФормы.Добавить(), КомандаСоздатьНаОсновании);
		КонецЦикла;
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(ОбщийСписокКомандСоздатьНаОснованииФормы, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Создает подменю "Создать на основании" на форме и добавляет в него команды ввода оснований.
// Если команда создать на основании одна, то вместо подменю добавляется кнопка с названием команды ввода на основании.
Процедура ДобавитьКомандыСоздатьНаОсновании(Форма, КомандыСоздатьНаОсновании, Знач МестоРазмещенияКоманд = Неопределено)
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	ЭтоТакси = ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	
	ОднаКомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Количество() = 1;
	Если МестоРазмещенияКоманд.Вид = ВидГруппыФормы.Подменю Тогда
		Если ОднаКомандаСоздатьНаОсновании Тогда
			МестоРазмещенияКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
		ИначеЕсли НЕ ЭтоТакси Тогда
			МестоРазмещенияКоманд.Отображение = ОтображениеКнопки.Текст;
		КонецЕсли;
	Иначе
		Если Не ОднаКомандаСоздатьНаОсновании Тогда
			ПодменюСоздатьНаОсновании = Форма.Элементы.Добавить(МестоРазмещенияКоманд.Имя + "ПодменюСоздатьНаОсновании", Тип("ГруппаФормы"), МестоРазмещенияКоманд);
			ПодменюСоздатьНаОсновании.Вид = ВидГруппыФормы.Подменю;
			ПодменюСоздатьНаОсновании.Заголовок = НСтр("ru='Создать на основании';uk='Створити на підставі'");
			ПодменюСоздатьНаОсновании.Картинка = БиблиотекаКартинок.ЗаполнитьПоШаблону;
			
			Если ЭтоТакси Тогда
				ПодменюСоздатьНаОсновании.Отображение = ОтображениеКнопки.Картинка;
			Иначе
				ПодменюСоздатьНаОсновании.Отображение = ОтображениеКнопки.Текст;
			КонецЕсли;
			
			МестоРазмещенияКоманд = ПодменюСоздатьНаОсновании;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ОписаниеКомандыСоздатьНаОсновании Из КомандыСоздатьНаОсновании Цикл
		НомерКоманды = ОписаниеКомандыСоздатьНаОсновании.Владелец().Индекс(ОписаниеКомандыСоздатьНаОсновании);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + "КомандаСоздатьНаОсновании" + НомерКоманды;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуСоздатьНаОсновании";
		КомандаФормы.Заголовок = ОписаниеКомандыСоздатьНаОсновании.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
		КомандаФормы.СочетаниеКлавиш = ОписаниеКомандыСоздатьНаОсновании.СочетаниеКлавиш;
		КомандаФормы.Подсказка = ОписаниеКомандыСоздатьНаОсновании.Представление;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыСоздатьНаОсновании.Картинка) Тогда
			КомандаФормы.Картинка = ОписаниеКомандыСоздатьНаОсновании.Картинка;
		ИначеЕсли ОднаКомандаСоздатьНаОсновании Тогда
			КомандаФормы.Картинка = БиблиотекаКартинок.ЗаполнитьПоШаблону;
			КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		ОписаниеКомандыСоздатьНаОсновании.ИмяКомандыНаФорме = ИмяКоманды;
		
		ИмяЭлементаФормы = ИмяКоманды + "_" + СтрЗаменить(ОписаниеКомандыСоздатьНаОсновании.Идентификатор,".", "_");
		
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлементаФормы, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список команд ввода на основании для указанной формы.
//
// Параметры:
//  Форма - УправляемаяФорма, Строка - форма или полное имя формы, для которой необходимо получить список команд ввода на основании.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в СоздатьКоллекциюКомандСоздатьНаОсновании().
Функция КомандыСоздатьНаОснованииФормы(Форма, СписокОбъектов = Неопределено, ИмяМетодаМенеджераСозданияНаОсновании) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	КомандыСоздатьНаОсновании = СоздатьКоллекциюКомандСоздатьНаОсновании();
	КомандыСоздатьНаОсновании.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	
	СтандартнаяОбработка = Истина;
	ВводНаОснованииПереопределяемый.ПередДобавлениемКомандСоздатьНаОсновании(ИмяФормы, КомандыСоздатьНаОсновании, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
		Если ОбъектМетаданных <> Неопределено Тогда
			ОбъектМетаданных = ОбъектМетаданных.Родитель();
		КонецЕсли;
		
		Если СписокОбъектов <> Неопределено Тогда
			ЗаполнитьКомандыСоздатьНаОснованииДляСпискаОбъектов(СписокОбъектов, КомандыСоздатьНаОсновании, ИмяМетодаМенеджераСозданияНаОсновании);
		ИначеЕсли ОбъектМетаданных = Неопределено Тогда
			Возврат КомандыСоздатьНаОсновании;
		Иначе
			КомандыДобавлены = ДобавитьКомандыИзМенеджераСоздатьНаОсновании(ОбъектМетаданных, КомандыСоздатьНаОсновании, ИмяМетодаМенеджераСозданияНаОсновании);
			Если ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
				ЗаполнитьКомандыСоздатьНаОснованииДляСпискаОбъектов(ОбъектМетаданных.РегистрируемыеДокументы, КомандыСоздатьНаОсновании, ИмяМетодаМенеджераСозданияНаОсновании);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КомандыСоздатьНаОсновании.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".", Истина, Истина);
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыСоздатьНаОсновании.Количество() + 1 По 0 Цикл
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании[-НомерСтроки];
		СписокФорм = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КомандаСоздатьНаОсновании.СписокФорм, ",", Истина, Истина);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыСоздатьНаОсновании.Удалить(КомандаСоздатьНаОсновании);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьКомандСоздатьНаОснованииПоФункциональнымОпциям(КомандыСоздатьНаОсновании, Форма);
	
	Возврат КомандыСоздатьНаОсновании;
	
КонецФункции

// Создает пустую таблицу для размещения в нее команд ввода на основании.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание команд ввода на основании:
//
//  * Идентификатор - Строка - Идентификатор команды ввода на основании, по которому менеджер ввода на основании определяет
//                             форму, которую необходимо открыть.
//
//  * Представление - Строка            - Представление команды в меню Создать на основании. 
//
//  * ТипыОбъектовПечати - Массив       - (необязательный) список типов объектов, для которых предназначена команда
//                                        создать на основании.
//
//  * Обработчик    - Строка            - (необязательный) Клиентский обработчик команды, в который необходимо передать
//                                        управление вместо стандартного обработчика команды создать на основании.
//
//  * Порядок       - Число             - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//                                        по отношению к другим командам. Сортировка команд меню Создать на основании осуществляется
//                                        сначала по полю Порядок, затем по представлению.
//                                        Значение по умолчанию: 50.
//
//  * Картинка      - Картинка          - (необязательный) Картинка, которая отображается возле команды в меню Создать на основании.
//
//  * СписокФорм    - Строка            - (необязательный) Имена форм через запятую, в которых должна отображаться
//                                        команда. Если параметр не указан, то команда создать на основании будет отображаться во
//                                        всех формах объекта, где встроена подсистема создать на основании.
//
//  * МестоРазмещения - Строка          - (необязательный) Имя командной панели формы, в которую необходимо разместить
//                                        команду Создать на основании. Параметр необходимо использовать только в случае, когда на
//                                        форме размещается более одного подменю "Создать на основании". В остальных случаях место
//                                        размещения необходимо задавать в модуле формы при вызове метода.
//                                        
//  * ФункциональныеОпции - Строка      - (необязательный) Имена функциональных опций через запятую, от которых зависит
//                                        доступность команды создать на основании.
//
//  * ПроверкаПроведенияПередСозданиемНаОсновании - Булево - (необязательный) Признак необходимости проверки проведенности
//                                        документов перед вводом на основании. Если параметр не указан, то проверка проведенности
//                                        не выполняется.
//
//  * ДополнительныеПараметры - Структура - (необязательный) - произвольные параметры для передачи в менеджер создания на основании.
//
//  * НеВыполнятьЗаписьВФорме - Булево  - (необязательный) Признак необходимости отключения механизма записи объекта
//                                        перед выполнением команды создать на основании. Используется в исключительных случаях. Если
//                                        параметр не указан, производится запись объекта в случае, если в форме
//                                        объекта установлен признак модифицированности.
//
Функция СоздатьКоллекциюКомандСоздатьНаОсновании() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	// описание
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//////////
	// Опции (необязательные параметры).
	
	// менеджер создать на основании
	Результат.Колонки.Добавить("ТипыОбъектовСозданияНаОсновании", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("ИмяМетодаМенеджераСозданияНаОсновании", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяСписка", Новый ОписаниеТипов("Строка"));
	
	// Альтернативный обработчик команды.
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	// представление
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Видимость", Новый ОписаниеТипов("Булево"));
	// Имена форм для размещения команд, разделитель - запятая.
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("МестоРазмещения", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗаголовокФормы", Новый ОписаниеТипов("Строка"));
	// Имена функциональных опций, влияющих на видимость команды, разделитель - запятая.
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	
	// проверка проведения
	Результат.Колонки.Добавить("ПроверкаПроведенияПередСозданиемНаОсновании", Новый ОписаниеТипов("Булево"));
	
	// указания режима использования команды: множественный или одиночный
	Результат.Колонки.Добавить("РежимИспользованияПараметра", Новый ОписаниеТипов("РежимИспользованияПараметраКоманды"));
	
	Результат.Колонки.Добавить("СочетаниеКлавиш", Новый ОписаниеТипов("СочетаниеКлавиш"));
	
	// дополнительные параметры
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// Специальный режим выполнения команды
	// по умолчанию выполняется запись модифицированного объекта перед выполнением команды.
	Результат.Колонки.Добавить("НеВыполнятьЗаписьВФорме", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

// Устанавливает свойство видимость для элемента формы
Процедура УстановитьВидимостьЭлементаФормыСервер(Форма, ПолноеИмяЭлемента, Видимость) Экспорт
	
	Для каждого ТекЭлемент Из Форма.Элементы Цикл
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекЭлемент.Имя, "_");
		МассивПодстрок.Удалить(0);
		
		ИмяЭлемента = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивПодстрок, "_");
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_", ".");
		
		Если ИмяЭлемента = ПолноеИмяЭлемента Тогда
			ТекЭлемент.Видимость = Видимость;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьКомандыСоздатьНаОснованииДляСпискаОбъектов(СписокОбъектов, КомандыСоздатьНаОсновании, ИмяМетодаМенеджераСозданияНаОсновании)
	Для Каждого ОбъектМетаданных Из СписокОбъектов Цикл
		Если ОбъектМетаданных.ОсновнаяФормаСписка = Неопределено Тогда
			Продолжить; // Не предусмотрены команды создать на основании в основной форме списка объекта.
		КонецЕсли;
		ИмяФормыСписка = ОбъектМетаданных.ОсновнаяФормаСписка.ПолноеИмя();
		КомандыСоздатьНаОснованииФормы = ВводНаОснованииПовтИсп.КомандыСоздатьНаОснованииФормы(ИмяФормыСписка,,ИмяМетодаМенеджераСозданияНаОсновании).Скопировать();
		Для Каждого ДобавляемаяКомандаСоздатьНаОсновании Из КомандыСоздатьНаОснованииФормы Цикл
			// Поиск аналогичной ранее добавленной команды создать на основании.
			СтруктураОтбора = "Идентификатор,Обработчик";
			
			Отбор = Новый Структура(СтруктураОтбора);
			ЗаполнитьЗначенияСвойств(Отбор, ДобавляемаяКомандаСоздатьНаОсновании);
			НайденныеКоманды = КомандыСоздатьНаОсновании.НайтиСтроки(Отбор);
			Если НайденныеКоманды.Количество() > 0 Тогда
				Для Каждого ИмеющаясяКомандаСоздатьНаОсновании Из НайденныеКоманды Цикл
					// Если уже есть такая команда, дополняем список типов объектов, для которых она предназначена.
					ТипОбъекта = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."));
					Если ИмеющаясяКомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Найти(ТипОбъекта) = Неопределено Тогда
						ИмеющаясяКомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(ТипОбъекта);
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Если ДобавляемаяКомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Количество() = 0 Тогда
				ДобавляемаяКомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка.")));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(КомандыСоздатьНаОсновании.Добавить(), ДобавляемаяКомандаСоздатьНаОсновании);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьКомандыИзМенеджераСоздатьНаОсновании(ОбъектМетаданных, КомандыСоздатьНаОсновании, ИмяМетодаМенеджераСозданияНаОсновании)
	
	ДобавляемыеКомандыСоздатьНаОсновании = СоздатьКоллекциюКомандСоздатьНаОсновании();
	
	Параметры = Новый Массив();
	Параметры.Добавить(ДобавляемыеКомандыСоздатьНаОсновании);
	
	МенеджерСозданияНаОсновании = ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) + "." + ОбъектМетаданных.Имя + "." +ИмяМетодаМенеджераСозданияНаОсновании;
	Попытка
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(МенеджерСозданияНаОсновании, Параметры);
	Исключение
		Если ДобавляемыеКомандыСоздатьНаОсновании.Количество() > 0 Тогда
			ВызватьИсключение;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	Для Каждого КомандаСоздатьНаОсновании Из ДобавляемыеКомандыСоздатьНаОсновании Цикл
		ЗаполнитьЗначенияСвойств(КомандыСоздатьНаОсновании.Добавить(), КомандаСоздатьНаОсновании);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура ОпределитьВидимостьКомандСоздатьНаОснованииПоФункциональнымОпциям(КомандыСоздатьНаОсновании, Форма)
	Для НомерКоманды = -КомандыСоздатьНаОсновании.Количество() + 1 По 0 Цикл
		ОписаниеКомандыСоздатьНаОсновании = КомандыСоздатьНаОсновании[-НомерКоманды];
		ФункциональныеОпцииКомандыСоздатьНаОсновании = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКомандыСоздатьНаОсновании.ФункциональныеОпции, ",", Истина);
		ВидимостьКоманды = ФункциональныеОпцииКомандыСоздатьНаОсновании.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыСоздатьНаОсновании Цикл
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
				ВидимостьКоманды = ВидимостьКоманды Или Форма.ПолучитьФункциональнуюОпциюФормы(ФункциональнаяОпция);
			Иначе
				ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			КонецЕсли;
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОписаниеКомандыСоздатьНаОсновании.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
	КонецЦикла;
КонецПроцедуры

Функция ПредставлениеОбъекта(ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	Представление = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
КонецФункции

// Возвращает описание команды по имени элемента формы.
// 
// Возвращаемое значение
//  Структура - строка таблицы из функции КомандыСоздатьНаОснованииФормы, преобразованная в структуру.
Функция ОписаниеКомандыСоздатьНаОсновании(ИмяКоманды, АдресКомандСоздатьНаОснованииВоВременномХранилище) Экспорт
	
	КомандыСоздатьНаОсновании = ПолучитьИзВременногоХранилища(АдресКомандСоздатьНаОснованииВоВременномХранилище);
	Для Каждого КомандаСоздатьНаОсновании Из КомандыСоздатьНаОсновании.НайтиСтроки(Новый Структура("ИмяКомандыНаФорме", ИмяКоманды)) Цикл
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаСоздатьНаОсновании);
	КонецЦикла;
	
КонецФункции

Функция ДоступноПравоПроведения(СписокДокументов) Экспорт
	ТипыДокументов = Новый Массив;
	Для Каждого Документ Из СписокДокументов Цикл
		ТипДокумента = ТипЗнч(Документ);
		Если ТипыДокументов.Найти(ТипДокумента) <> Неопределено Тогда
			Продолжить;
		Иначе
			ТипыДокументов.Добавить(ТипДокумента);
		КонецЕсли;
		Если ПравоДоступа("Проведение", Метаданные.НайтиПоТипу(ТипДокумента)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаОбработки();
		
	ИначеЕсли Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаОтчеты();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаРегистрыРасчета();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаЖурналыДокументов();
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаПоследовательности();
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат ОбщегоНазначения.ИмяТипаРегламентныеЗадания();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
		И ОбъектМетаданных.Родитель().Перерасчеты.Найти(ОбъектМетаданных.Имя) = ОбъектМетаданных Тогда
		Возврат ОбщегоНазначения.ИмяТипаПерерасчеты();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Процедура УдалитьКоманды(Форма, МестоРазмещенияКомандПоУмолчанию)
	
	МассивКоманд = Новый Массив();
	Для каждого Команда Из Форма.Команды Цикл
		Если Команда.Действие = "Подключаемый_ВыполнитьКомандуСоздатьНаОсновании" Тогда
			МассивКоманд.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для каждого Команда Из МассивКоманд Цикл
		Форма.Команды.Удалить(Команда);
	КонецЦикла; 
	
	МассивЭлементовДляУдаления = Новый Массив();
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		Для каждого Элемент Из МестоРазмещенияКомандПоУмолчанию.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(Элемент);
		КонецЦикла; 
	КонецЕсли;
	
	Для каждого Элемент Из МассивЭлементовДляУдаления Цикл
		Попытка
			Форма.Элементы.Удалить(Элемент);
		Исключение
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти


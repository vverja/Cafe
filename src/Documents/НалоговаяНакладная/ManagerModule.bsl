#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                КАК Ссылка,
	|	ДанныеДокумента.Организация           КАК Организация,
	|	ДанныеДокумента.Статус                КАК Статус,
	|	ДанныеДокумента.Партнер               КАК Партнер,
	|	ДанныеДокумента.Контрагент            КАК Контрагент,
	|	ДанныеДокумента.Дата                  КАК Период,
	|	ДанныеДокумента.ОбъектРасчетов        КАК ОбъектРасчетов,
	|	ДанныеДокумента.Валюта                КАК Валюта,
	|	ДанныеДокумента.ВидОперации           КАК ВидОперации,
	|	ДанныеДокумента.Договор               КАК Договор,
	|	ВЫБОР
	|
	|		КОГДА ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.НеНДСОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Поставка)
	|
	|		КОГДА ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|		  ИЛИ ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Розница)
	|
	|		ИНАЧЕ 
	|			НЕОПРЕДЕЛЕНО
	|
	|	КОНЕЦ КАК ВидПоставки,
	|	ДанныеДокумента.СуммаВозвратнойТары КАК СуммаВозвратнойТары,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаОтгрузкиОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(ДанныеДокумента.ДатаОтгрузкиОплаты, ДЕНЬ)
	|		ИНАЧЕ 
	|			ДанныеДокумента.Дата
	|	КОНЕЦ КАК ДатаВозникновенияНО
	|
	|ИЗ
	|	Документ.НалоговаяНакладная КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
    
    Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
    
	Запрос.УстановитьПараметр("Период",                                   Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                                   Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Организация",                              Реквизиты.Организация);
	Запрос.УстановитьПараметр("Статус",                                   Реквизиты.Статус);
	Запрос.УстановитьПараметр("ВидОперации",                              Реквизиты.ВидОперации);
	Запрос.УстановитьПараметр("Партнер",                                  Реквизиты.Партнер);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",                РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерамРозницаПлательщику", 
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(
			Новый Структура("Организация, Партнер, Контрагент, Договор, НаправлениеДеятельности",
				Реквизиты.Организация,
				Справочники.Партнеры.ПустаяСсылка(),
				Неопределено,
				Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),
				Справочники.НаправленияДеятельности.ПустаяСсылка()
			)
		)
	);
	Запрос.УстановитьПараметр("ОбъектРасчетов",                           Реквизиты.ОбъектРасчетов);
	Запрос.УстановитьПараметр("Договор",                                  Реквизиты.Договор);
	Запрос.УстановитьПараметр("ВидПоставки",                              Реквизиты.ВидПоставки);
	Запрос.УстановитьПараметр("ДатаВозникновенияНО",                      Реквизиты.ДатаВозникновенияНО);
	Запрос.УстановитьПараметр("ФормироватьФинансовыйРезультат",           ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
    
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
    
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
    
	ТекстыЗапроса = Новый СписокЗначений;
    ТекстЗапросаТаблицаНДСНоменклатурныйСоставДляНалоговыхНакладных(Запрос, ТекстыЗапроса, Регистры);
    ТекстЗапросаТаблицаНДСРеестрВыданныхНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры);
    ТекстЗапросаТаблицаНДСУсловныеПродажи(Запрос, ТекстыЗапроса, Регистры);
    
	////////////////////////////////////////////////////////////////////////////
	// Поместим результаты запроса в дополнительные свойства
                                                                                                                                 
    ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);    

КонецПроцедуры

Функция ТекстЗапросаТаблицаНДСНоменклатурныйСоставДляНалоговыхНакладных(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "НДСНоменклатурныйСоставДляНалоговыхНакладных";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ДатаВозникновенияНО КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|	&Валюта КАК Валюта,
	|
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаТоваров.ДокументПоставки) = ТИП(Документ.АктВыполненныхРабот)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.УслугиССдержанием)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.ТоварыУслуги)
	|	КОНЕЦ КАК СпособЗаполнения,
	|
	|	ТаблицаТоваров.СтавкаНДС      КАК СтавкаНДС,
	|	ТаблицаТоваров.НомерГТД       КАК НомерГТД,
	|	ТаблицаТоваров.Номенклатура   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка       КАК Упаковка,
	|	ТаблицаТоваров.Цена           КАК ЦенаНН,
	|
	|	ТаблицаТоваров.ОбъектРасчетов КАК ОбъектРасчетов,
	|   ТаблицаТоваров.ДокументПоставки КАК ДокументПоставки,
	|   НЕОПРЕДЕЛЕНО КАК ДокументПоставкиДляВозвратов,
	|
	|	ТаблицаТоваров.СуммаСНДС КАК СуммаВзаиморасчетов,
	|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И (ТаблицаТоваров.ДокументПоставки = Неопределено ИЛИ НЕ ТИПЗНАЧЕНИЯ(ТаблицаТоваров.ДокументПоставки) = ТИП(Документ.РеализацияУслугПрочихАктивов))
	|	И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|	И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаВозникновенияНО КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|	&Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.ТоварыПрочее) КАК СпособЗаполнения,
	|
	|	ТаблицаТоваров.СтавкаНДС      КАК СтавкаНДС,
	|	Неопределено       КАК НомерГТД,
	|	Неопределено       КАК Номенклатура,
	|	Неопределено       КАК Характеристика,
	|	Неопределено       КАК Упаковка,
	|	Неопределено       КАК ЦенаНН,
	|
	|	ТаблицаТоваров.ОбъектРасчетов КАК ОбъектРасчетов,
	|   ТаблицаТоваров.ДокументПоставки КАК ДокументПоставки,
	|   НЕОПРЕДЕЛЕНО КАК ДокументПоставкиДляВозвратов,
	|
	|	ТаблицаТоваров.СуммаСНДС КАК СуммаВзаиморасчетов,
	|	0 КАК КоличествоУпаковок
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ТаблицаТоваров.ДокументПоставки) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|	И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|	И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаВозникновенияНО КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерамРозницаПлательщику КАК АналитикаУчетаПоПартнерам,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|	&Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.ТоварыУслуги) КАК СпособЗаполнения,
	|
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА ТаблицаТоваров.Ссылка.Организация.НоменклатураЗаполненияИтоговыхНалоговыхПоРознице.НоменклатураГТД
	|		ИНАЧЕ ТаблицаТоваров.НомерГТД
	|	КОНЕЦ КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА ТаблицаТоваров.Ссылка.Организация.НоменклатураЗаполненияИтоговыхНалоговыхПоРознице
	|		ИНАЧЕ ТаблицаТоваров.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТоваров.Цена
	|	КОНЕЦ КАК ЦенаНН,
	|
	|	ТаблицаТоваров.СтавкаНДС КАК ОбъектРасчетов,
	|	ТаблицаТоваров.ДокументПоставки КАК ДокументПоставки,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПоставкиДляВозвратов,
	|
	|	СУММА(ТаблицаТоваров.СуммаСНДС) КАК СуммаВзаиморасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТоваров.КоличествоУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И (ТаблицаТоваров.ДокументПоставки = Неопределено ИЛИ НЕ ТИПЗНАЧЕНИЯ(ТаблицаТоваров.ДокументПоставки) = ТИП(Документ.РеализацияУслугПрочихАктивов))
	|	И (&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|		ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Упаковка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Характеристика
	|	КОНЕЦ,
	|	ТаблицаТоваров.ДокументПоставки,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА ТаблицаТоваров.Ссылка.Организация.НоменклатураЗаполненияИтоговыхНалоговыхПоРознице.НоменклатураГТД
	|		ИНАЧЕ ТаблицаТоваров.НомерГТД
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА ТаблицаТоваров.Ссылка.Организация.НоменклатураЗаполненияИтоговыхНалоговыхПоРознице
	|		ИНАЧЕ ТаблицаТоваров.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.Организация.ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТоваров.Цена
	|	КОНЕЦ,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|";
		
    
    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСРеестрВыданныхНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "НДСРеестрВыданныхНалоговыхДокументов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства КАК СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоставкаДокумента.СуммаБезНДСРегл) КАК СуммаБезНДС,
	|	СУММА(ПоставкаДокумента.СуммаНДСРегл) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПродажаНижеОбычнойЦены,
// Информация для заполнения отчета "Анализ налоговых обязательств"	
	|	&ВидПоставки КАК ВидПоставки,
	|	ВЫБОР 
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|		  ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации) ТОГДА
	|			ПоставкаДокумента.СтавкаНДС
	|		ИНАЧЕ
	|			ПоставкаДокумента.ОбъектРасчетов
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	&Валюта КАК ВалютаВзаиморасчетов,
	|	СУММА(ПоставкаДокумента.СуммаСНДС) КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваПоставка)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваРозничнаяПродажа)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваУсловнаяПродажа)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ КАК ХозяйственнаяОперация
// ...
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК ПоставкаДокумента
	|ГДЕ
	|	ПоставкаДокумента.Ссылка = &Ссылка
	|	И НЕ ПоставкаДокумента.Ссылка.СтатусАвтокорректировки = ЗНАЧЕНИЕ(Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС,
	|	ПоставкаДокумента.ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства КАК СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоставкаДокумента.СуммаБезНДСРегл) КАК СуммаБезНДС,
	|	СУММА(ПоставкаДокумента.СуммаНДСРегл) КАК СуммаНДС,
	|	ЛОЖЬ КАК ПродажаНижеОбычнойЦены,
// Информация для заполнения отчета "Анализ налоговых обязательств"	
	|	&ВидПоставки КАК ВидПоставки,
	|	ВЫБОР 
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|		  ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации) ТОГДА
	|			ПоставкаДокумента.СтавкаНДС
	|		ИНАЧЕ
	|			ПоставкаДокумента.ОбъектРасчетов
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	&Валюта КАК ВалютаВзаиморасчетов,
	|	СУММА(ПоставкаДокумента.СуммаСНДС) КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваПоставка)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваРозничнаяПродажа)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС)
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваУсловнаяПродажа)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ
// ...
	|ИЗ
	|	Документ.НалоговаяНакладная.ТоварыПоДаннымПользователя КАК ПоставкаДокумента
	|ГДЕ
	|	ПоставкаДокумента.Ссылка = &Ссылка
	|	И ПоставкаДокумента.Ссылка.СтатусАвтокорректировки = ЗНАЧЕНИЕ(Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ)
	|	И НЕ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС,
	|	ПоставкаДокумента.ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства КАК СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоставкаДокумента.СуммаБезНДСРегл) КАК СуммаБезНДС,
	|	СУММА(ПоставкаДокумента.СуммаНДСРегл) КАК СуммаНДС,
	|	ИСТИНА КАК ПродажаНижеОбычнойЦены,
// Информация для заполнения отчета "Анализ налоговых обязательств"	
	|	&ВидПоставки КАК ВидПоставки,
	|	ВЫБОР 
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
	|		  ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации) ТОГДА
	|			ПоставкаДокумента.СтавкаНДС
	|		ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	&Валюта КАК ВалютаВзаиморасчетов,
	|	СУММА(ПоставкаДокумента.СуммаБезНДСРегл + ПоставкаДокумента.СуммаНДСРегл) КАК СуммаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НалоговыеОбязательстваУсловнаяПродажа)
// ...
	|ИЗ
	|	Документ.НалоговаяНакладная.ТоварыПоДаннымПользователя КАК ПоставкаДокумента
	|ГДЕ
	|	ПоставкаДокумента.Ссылка = &Ссылка
	|	И ПоставкаДокумента.Ссылка.СтатусАвтокорректировки = ЗНАЧЕНИЕ(Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ)
	|	И &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоставкаДокумента.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	ПоставкаДокумента.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|";
	
    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаНДСУсловныеПродажи(Запрос, ТекстыЗапроса, Регистры)
    
	ИмяРегистра = "НДСУсловныеПродажи";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
    КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидУсловнойПродажи.СводнаяУсловнаяПродажа)
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидУсловнойПродажи.УсловнаяПродажаНеоборотныхАктивов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидУсловнойПродажи.УсловнаяПродажа)
	|	КОНЕЦ КАК ВидУсловнойПродажи,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|			ТОГДА ПоставкаДокумента.ОбъектЗаполненияСодержанияУсловнаяПродажа
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов)
	|			ТОГДА ПоставкаДокумента.ОбъектЗаполненияСодержанияУсловнаяПродажа
	|		КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ПоставкаДокумента.Номенклатура
	|		ИНАЧЕ ПоставкаДокумента.ОбъектЗаполненияСодержанияУсловнаяПродажа
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ПоставкаДокумента.Характеристика
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Характеристика,
	|	ПоставкаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ПоставкаДокумента.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ПоставкаДокумента.НалоговоеНазначениеПоФактуУсловнаяПродажа КАК НалоговоеНазначениеПоФакту,
	|	СУММА(ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|				ТОГДА 0
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов)
	|				ТОГДА 0
	|			КОГДА (НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|				ТОГДА ПоставкаДокумента.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ПоставкаДокумента.СуммаБезНДС) КАК СтоимостьРегл,
	|	СУММА(ПоставкаДокумента.СуммаНДСРеглПоРегиструУсловнаяПродажа) КАК НДСРегл,
	|	СУММА(ПоставкаДокумента.СуммаНДС) КАК НДСРеглРучныеКорректировки
	|ИЗ
	|	Документ.НалоговаяНакладная.ТоварыПоДаннымПользователя КАК ПоставкаДокумента
	|ГДЕ
	|	ПоставкаДокумента.Ссылка = &Ссылка
	|	И (&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа)
	|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ПоставкаДокумента.Характеристика
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ПоставкаДокумента.СтавкаНДС,
	|	ПоставкаДокумента.НалоговоеНазначение,
	|	ПоставкаДокумента.НалоговоеНазначениеПоФактуУсловнаяПродажа,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа)
	|			ТОГДА ПоставкаДокумента.ОбъектЗаполненияСодержанияУсловнаяПродажа
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов)
	|			ТОГДА ПоставкаДокумента.ОбъектЗаполненияСодержанияУсловнаяПродажа
	|		КОГДА НЕ ПоставкаДокумента.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ПоставкаДокумента.Номенклатура
	|		ИНАЧЕ ПоставкаДокумента.ОбъектЗаполненияСодержанияУсловнаяПродажа
	|	КОНЕЦ
	|
	|";
	
    ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции



#КонецОбласти

#Область СозданиеНаОсновании

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.НалоговаяНакладная) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.НалоговаяНакладная.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.НалоговаяНакладная);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Налоговая накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НалоговаяНакладная";
	КомандаПечати.Представление = НСтр("ru='Налоговая накладная';uk='Податкова накладна'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

 	

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// РегламентированнаяОтчетность
	ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Ложь;
	Если  ТипЗнч(ПараметрыПечати) = Тип("Структура")
		И ПараметрыПечати.Свойство("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы") Тогда
	
		ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина;
	
	КонецЕсли;
	// Конец РегламентированнаяОтчетность
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НалоговаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НалоговаяНакладная", 
			"Налоговая накладная", 
			СформироватьПечатнуюФормуНалоговаяНакладная(
				МассивОбъектов, 
				ОбъектыПечати, 
				ПараметрыВывода, 
				"НалоговаяНакладная"
				// РегламентированнаяОтчетность
				,ТолькоФормироватьСтруктуруПоказателейПечатнойФормы
				// Конец РегламентированнаяОтчетность
			)
		);
	КонецЕсли;
	
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуНалоговаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, ИмяМакета, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НалоговаяНакладная.Ссылка,
	|	НалоговаяНакладная.Номер,
	|	НалоговаяНакладная.Дата,
	|	НалоговаяНакладная.Валюта,
	|	ВЫБОР КОГДА НалоговаяНакладная.СтатусРегистрацииВЕРНН = ЗНАЧЕНИЕ(Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,
	|	НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,
	|	НалоговаяНакладная.ЭлектронныйДокумент,
	|	НалоговаяНакладная.ТипПричиныНевыдачиПокупателю,
	|	НалоговаяНакладная.СпецРежимНалогообложения,
	|	НалоговаяНакладная.ДатаДоговора КАК ДатаДоговора,
	|	НалоговаяНакладная.НомерДоговора КАК НомерДоговора,
	|	НалоговаяНакладная.Контрагент,
	|	НалоговаяНакладная.Организация,
	|	НалоговаяНакладная.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА НалоговаяНакладная.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЕСТЬNULL(НалоговаяНакладная.Контрагент.ГоловнойКонтрагент, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НалоговаяНакладная.Контрагент.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнойКонтрагент,
	|	ВЫБОР
	|		КОГДА НалоговаяНакладная.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЕСТЬNULL(НалоговаяНакладная.Контрагент.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН,
	|	ВЫБОР
	|		КОГДА НалоговаяНакладная.СпецРежимНалогообложения = 5
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоглашениеОРазделеПродукции,
	|	НалоговаяНакладная.ЛьготаНДС,
	|	НалоговаяНакладная.ВидДоговора,
	|	НалоговаяНакладная.ФормаРасчетов,
	|	НалоговаяНакладная.ВидОперации,
	|	НалоговаяНакладная.ОбособленноеПодразделение.НаименованиеДляНалоговыхДокументов КАК НаименованиеФилиала,
	|	НалоговаяНакладная.ОбособленноеПодразделение.Префикс КАК Префикс,
	|	НалоговаяНакладная.УслугиНерезидентаДляНехозДеят КАК УслугиНерезидентаДляНехозДеят,
	|	НалоговаяНакладная.ПодтверждаетсяГТД,
	|	НалоговаяНакладная.ПоставкаДипПредставительству,
	|	НалоговаяНакладная.КтоВыписалНалоговуюНакладную.Представление КАК КтоВыписалНалоговуюНакладную,
	|	НалоговаяНакладная.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладнуюСсылка,
	|	ВЫБОР
	|		КОГДА НалоговаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПродажаНижеОбычнойЦены,
	|	НалоговаяНакладная.СуммаВозвратнойТары КАК СуммаВозвратнойТары,
	|	ВЫБОР
	|		КОГДА НалоговаяНакладная.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЕСТЬNULL(НалоговаяНакладная.Контрагент.КодФилиала, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ФилиалПокупателя,
	|	НалоговаяНакладная.КодПризнакаСводной КАК КодПризнакаСводной,
	|	НалоговаяНакладная.Сводная КАК Сводная,
	|	НалоговаяНакладная.КтоВыписалНалоговуюНакладную.КодПоДРФО КАК ИННКтоВыписалНН,
	|	НалоговаяНакладная.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.НалоговаяНакладная КАК НалоговаяНакладная
	|ГДЕ
	|	НалоговаяНакладная.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	ВложенныйЗапрос.ТекстДляПечатиВКолонкеКоличество КАК ТекстДляПечатиВКолонкеКоличество,
	|	ВложенныйЗапрос.ТекстДляПечатиВКолонкеЦена КАК ТекстДляПечатиВКолонкеЦена,
	|	ВложенныйЗапрос.КодУКТВЭД КАК КодУКТВЭД,
	|	ВложенныйЗапрос.КодУКТВЭД.Вид КАК КодВид,
	|	ВложенныйЗапрос.КодУКТВЭД.КодСХДеятельности КАК КодСХ,
	|	ВложенныйЗапрос.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапрос.ДатаГТД КАК ДатаГТД,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК Количество,
	|	ВложенныйЗапрос.Цена КАК ЦенаБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаБезНДС) КАК СуммаБезНДС,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены,
	|	ВложенныйЗапрос.КодЛьготы КАК КодЛьготы,
	|	ВложенныйЗапрос.ДатаОтгрузкиОплаты КАК ДатаОтгрузкиОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		НалоговаяНакладнаяТовары.Ссылка КАК Ссылка,
	|		НалоговаяНакладнаяТовары.НомерСтроки КАК НомерСтроки,
	|		НалоговаяНакладнаяТовары.Номенклатура.НаименованиеПолное КАК Номенклатура,
	|		НалоговаяНакладнаяТовары.Содержание КАК Содержание,
	|		НалоговаяНакладнаяТовары.Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной КАК ТекстДляПечатиВКолонкеКоличество,
	|		НалоговаяНакладнаяТовары.Номенклатура.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной КАК ТекстДляПечатиВКолонкеЦена,
	|		НалоговаяНакладнаяТовары.Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА НалоговаяНакладнаяТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА НалоговаяНакладнаяТовары.ЕдиницаИзмерения
	|			КОГДА НалоговаяНакладнаяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА НалоговаяНакладнаяТовары.Номенклатура.ЕдиницаИзмерения
	|			КОГДА НалоговаяНакладнаяТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				ТОГДА НалоговаяНакладнаяТовары.Упаковка.ЕдиницаИзмерения
	|			ИНАЧЕ НалоговаяНакладнаяТовары.Упаковка
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		НалоговаяНакладнаяТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|		НалоговаяНакладнаяТовары.ЦенаРегл КАК Цена,
	|		НалоговаяНакладнаяТовары.СуммаБезНДСРегл КАК СуммаБезНДС,
	|		НалоговаяНакладнаяТовары.СтавкаНДС КАК СтавкаНДС,
	|		НалоговаяНакладнаяТовары.СуммаНДСРегл КАК СуммаНДС,
	|		НалоговаяНакладнаяТовары.НомерГТД.НомерГТД.Код КАК НомерГТД,
	|		НалоговаяНакладнаяТовары.НомерГТД.НомерГТД.Дата КАК ДатаГТД,
	|		НалоговаяНакладнаяТовары.КодНоменклатурыПоКлассификатору КАК КодУКТВЭД,
    |		"""" КАК ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены, 
	|		НалоговаяНакладнаяТовары.Номенклатура.КодЛьготы КАК КодЛьготы,
	|		НалоговаяНакладнаяТовары.Ссылка.ДатаОтгрузкиОплаты КАК ДатаОтгрузкиОплаты
	|	ИЗ
	|		Документ.НалоговаяНакладная.Товары КАК НалоговаяНакладнаяТовары
	|	ГДЕ
	|		НалоговаяНакладнаяТовары.Ссылка В(&МассивДокументов)
	|		И НЕ НалоговаяНакладнаяТовары.Ссылка.СтатусАвтокорректировки = ЗНАЧЕНИЕ(Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|   ВЫБРАТЬ
	|		НалоговаяНакладнаяТоварыПользователя.Ссылка КАК Ссылка,
	|		НалоговаяНакладнаяТоварыПользователя.НомерСтроки КАК НомерСтроки,
	|		НалоговаяНакладнаяТоварыПользователя.Номенклатура.НаименованиеПолное КАК Номенклатура,
	|		НалоговаяНакладнаяТоварыПользователя.Содержание КАК Содержание,
	|		НалоговаяНакладнаяТоварыПользователя.Номенклатура.ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной КАК ТекстДляПечатиВКолонкеКоличество,
	|		НалоговаяНакладнаяТоварыПользователя.Номенклатура.ТекстДляПечатиВКолонкеЦенаНалоговойНакладной КАК ТекстДляПечатиВКолонкеЦена,
	|		НалоговаяНакладнаяТоварыПользователя.Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА НалоговаяНакладнаяТоварыПользователя.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА НалоговаяНакладнаяТоварыПользователя.ЕдиницаИзмерения
	|			КОГДА НалоговаяНакладнаяТоварыПользователя.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА НалоговаяНакладнаяТоварыПользователя.Номенклатура.ЕдиницаИзмерения
	|			КОГДА НалоговаяНакладнаяТоварыПользователя.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				ТОГДА НалоговаяНакладнаяТоварыПользователя.Упаковка.ЕдиницаИзмерения
	|			ИНАЧЕ НалоговаяНакладнаяТоварыПользователя.Упаковка
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		НалоговаяНакладнаяТоварыПользователя.КоличествоУпаковок КАК КоличествоУпаковок,
	|		ВЫБОР
	|			КОГДА НалоговаяНакладнаяТоварыПользователя.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены) ТОГДА
	|				ВЫБОР
	|					КОГДА НалоговаяНакладнаяТоварыПользователя.КоличествоУпаковок = 0 ТОГДА
	|						НалоговаяНакладнаяТоварыПользователя.СуммаПревышения
	|					ИНАЧЕ
	|						НалоговаяНакладнаяТоварыПользователя.СуммаПревышения / НалоговаяНакладнаяТоварыПользователя.КоличествоУпаковок
	|				КОНЕЦ	
	|			ИНАЧЕ
	|				НалоговаяНакладнаяТоварыПользователя.ЦенаРегл
	|		КОНЕЦ КАК Цена,	
	|		ВЫБОР
	|			КОГДА НалоговаяНакладнаяТоварыПользователя.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены) ТОГДА
	|				НалоговаяНакладнаяТоварыПользователя.СуммаПревышения
	|			ИНАЧЕ
	|				НалоговаяНакладнаяТоварыПользователя.СуммаБезНДСРегл
	|		КОНЕЦ КАК СуммаБезНДС,	
	|		НалоговаяНакладнаяТоварыПользователя.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА НалоговаяНакладнаяТоварыПользователя.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены) ТОГДА
	|				НалоговаяНакладнаяТоварыПользователя.СуммаНДСПревышения
	|			ИНАЧЕ
	|				НалоговаяНакладнаяТоварыПользователя.СуммаНДСРегл
	|		КОНЕЦ КАК СуммаНДС,	
	|		НалоговаяНакладнаяТоварыПользователя.НомерГТД.НомерГТД.Код КАК НомерГТД,
	|		НалоговаяНакладнаяТоварыПользователя.НомерГТД.НомерГТД.Дата КАК ДатаГТД,
	|		НалоговаяНакладнаяТоварыПользователя.КодНоменклатурыПоКлассификатору КАК КодУКТВЭД,
	|		НалоговаяНакладнаяТоварыПользователя.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены,
	|		НалоговаяНакладнаяТоварыПользователя.Номенклатура.КодЛьготы КАК КодЛьготы,
	|		ВЫБОР
	|			КОГДА НалоговаяНакладнаяТоварыПользователя.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены) ТОГДА
	|               ВЫБОР
	|           		КОГДА НалоговаяНакладнаяТоварыПользователя.ДатаОтгрузкиОплаты <> ДАТАВРЕМЯ (1, 1, 1) ТОГДА
	|              		 	НалоговаяНакладнаяТоварыПользователя.ДатаОтгрузкиОплаты
	|              		КОГДА НалоговаяНакладнаяТоварыПользователя.ОсновнаяНалоговаяПриПродажеНижеОбычнойЦены <> ЗНАЧЕНИЕ(Документ.НалоговаяНакладная.ПустаяСсылка) ТОГДА
	|               		НалоговаяНакладнаяТоварыПользователя.ОсновнаяНалоговаяПриПродажеНижеОбычнойЦены.Дата
	|					ИНАЧЕ
	|           			НалоговаяНакладнаяТоварыПользователя.ДатаОтгрузкиОплаты
    |				КОНЕЦ
	|			ИНАЧЕ
	|				НалоговаяНакладнаяТоварыПользователя.Ссылка.ДатаОтгрузкиОплаты
	|		КОНЕЦ  КАК ДатаОтгрузкиОплаты
	|	ИЗ
	|		Документ.НалоговаяНакладная.ТоварыПоДаннымПользователя КАК НалоговаяНакладнаяТоварыПользователя
	|	ГДЕ
	|		НалоговаяНакладнаяТоварыПользователя.Ссылка В(&МассивДокументов)
	|   ) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаОтгрузкиОплаты,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Содержание,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.КодУКТВЭД,
	|	ВложенныйЗапрос.НомерГТД,
	|	ВложенныйЗапрос.ДатаГТД,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код,
	|	ВложенныйЗапрос.ТекстДляПечатиВКолонкеКоличество,
	|	ВложенныйЗапрос.ТекстДляПечатиВКолонкеЦена,
	|	ВложенныйЗапрос.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.КодЛьготы,
	|	ВложенныйЗапрос.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати  = "ПАРАМЕТРЫ_ПЕЧАТИ_НалоговаяНакладная_" + ИмяМакета;
	
	КодЯзыкаПечать = "ru";
	ПервыйДокумент = Истина;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	ДанныеПечати			= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам		= МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Пока ДанныеПечати.Следующий() цикл
		

		Если НДСОбщегоНазначенияСервер.ПечатнаяФорма2023Мес7(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда		
			СуффиксПечатнойФормыНН    = "2023Мес7";
			НомерПоХронологииФормыНН  = 9; //это не ошибка, процедура печати не изменилась
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2023(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыНН    = "2023";
			НомерПоХронологииФормыНН  = 9; //это не ошибка, процедура печати не изменилась
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2022(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыНН    = "2022";
			НомерПоХронологииФормыНН  = 8; //это не ошибка, процедура печати не изменилась
        ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2021Мес3(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыНН    = "2021Мес3";
			НомерПоХронологииФормыНН  = 8;
        ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2021(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда    
			СуффиксПечатнойФормыНН    = "2021";
			НомерПоХронологииФормыНН  = 7;
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2018(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыНН    = "2018";
			НомерПоХронологииФормыНН  = 6;
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФорма2017(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыНН    = "2017";
			НомерПоХронологииФормыНН  = 5;
		ИначеЕсли НДСОбщегоНазначенияСервер.ПечатнаяФормаПоПриказу1307(ДанныеПечати.Дата, ДанныеПечати.Организация) Тогда
			СуффиксПечатнойФормыНН    = "2016";
			НомерПоХронологииФормыНН  = 4;
		Иначе
			Если       ДанныеПечати.Дата >= '2015-01-01' Тогда
				СуффиксПечатнойФормыНН    = "2015";
				НомерПоХронологииФормыНН  = 3;
			ИначеЕсли  ДанныеПечати.Дата >= '2014-12-01' Тогда
				СуффиксПечатнойФормыНН    = "2014Мес12";
				НомерПоХронологииФормыНН  = 2;
			ИначеЕсли  ДанныеПечати.Дата >= '2014-03-01' Тогда
				СуффиксПечатнойФормыНН    = "2014";
				НомерПоХронологииФормыНН  = 1;
			Иначе
				СуффиксПечатнойФормыНН    = "";
				НомерПоХронологииФормыНН  = 0;
			КонецЕсли;
		КонецЕсли; 
		
		СтрокаПолученияМакета = "Документ.НалоговаяНакладная.ПФ_MXL_UK_НалоговаяНакладная"+СуффиксПечатнойФормыНН;
		
		Если ИмяМакета = "НалоговаяНакладнаяАльбом" ИЛИ НомерПоХронологииФормыНН >= 5 Тогда
			СтрокаПолученияМакета = СтрокаПолученияМакета + "Альбом";
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		МакетПромежуточный = УправлениеПечатью.МакетПечатнойФормы(СтрокаПолученияМакета, КодЯзыкаПечать);
		
		Макет = Новый ТабличныйДокумент;
		Макет.ВставитьОбласть(МакетПромежуточный.Область(), , , Ложь);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		ПервыйДокумент = Ложь;
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ %1 отражает операцию не являющуюся объектом налогообложения. Печать такого документа не требуется.';uk='Документ %1 відображає операцію, що не є об''єктом оподаткування. Друк такого документа не потрібний.'"),
				ДанныеПечати.Ссылка
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			Продолжить	
		КонецЕсли;
		

        //	Налоговые документы со ставкой 14% до принятия новой формы не печатаются, но могут быть выгружены для обработки ПреобразованиеНоменклатурногоСоставаДокументаП2
        ВсегдаВыводитьНН14 = Ложь;
        Если  ТипЗнч(ПараметрыВывода) = Тип("Структура")
        	И ПараметрыВывода.Свойство("ВсегдаВыводитьНН14") Тогда
        
        	ВсегдаВыводитьНН14 = Истина;
        
        КонецЕсли;
        
		Если (НЕ ВсегдаВыводитьНН14) И НДСОбщегоНазначенияПовтИсп.ДатаНачалаДействияФормыНДС14() > ДанныеПечати.Дата Тогда
			Если НДСИсходящийСервер.ВДокументеЕстьСтавкаНДС14(ДанныеПечати.Ссылка, Истина) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		Если НайденСледующий Тогда
			ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
			ВыборкаПоТоварам.Сбросить();
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В документе %1 отсутствуют товары. Печать накладной не требуется';uk='У документі %1 відсутні товари. Друк накладної не потрібний'"),
				ДанныеПечати.Ссылка
				);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			Продолжить;
		КонецЕсли;
		
		Если НомерПоХронологииФормыНН >= 4 Тогда
            Если НомерПоХронологииФормыНН = 9 Тогда
            	СтруктураПоказателей = СформироватьПечатнуюФорму2023(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
            ИначеЕсли НомерПоХронологииФормыНН = 8 Тогда
            	СтруктураПоказателей = СформироватьПечатнуюФорму2021Мес3(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			ИначеЕсли НомерПоХронологииФормыНН = 7 Тогда
				СтруктураПоказателей = СформироватьПечатнуюФорму2021(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			ИначеЕсли НомерПоХронологииФормыНН = 6 Тогда
				СтруктураПоказателей = СформироватьПечатнуюФорму2018(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			ИначеЕсли НомерПоХронологииФормыНН = 5 Тогда
				СтруктураПоказателей = СформироватьПечатнуюФорму2017(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			Иначе
				СтруктураПоказателей = СформироватьПечатнуюФорму2016(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы);
			КонецЕсли;
			Если СтруктураПоказателей <> Неопределено Тогда
				Возврат СтруктураПоказателей;
			Иначе
				Продолжить;
			КонецЕсли; 
		КонецЕсли;	
			
		ВРегВалюте = ДанныеПечати.Валюта = ВалютаРегламентированногоУчета;
		
		Если НомерПоХронологииФормыНН = 0 Тогда
			Если НЕ ТолькоФормироватьСтруктуруПоказателейПечатнойФормы 	= Истина
			  	И ДанныеПечати.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных 	= Истина
				И ДанныеПечати.ВключенаВЕдиныйРеестрНалоговыхНакладных 		= Ложь Тогда
				
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ %1 должен быть зарегистрирован в Едином реестре!
                                                                                       |Нельзя выдавать покупателю печатный документ до регистрации в Едином реестре!'
                                                                                       |;uk='Документ %1 повинен бути зареєстрований в Єдиному реєстрі!
                                                                                       |Не можна видавати покупцеві друкований документ до реєстрації в Єдиному реєстрі!'")
				, ДанныеПечати.Ссылка)
				, СтатусСообщения.ОченьВажное);			
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтруктураПоказателей = Новый Структура();
			СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2D");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
			Если НомерПоХронологииФормыНН >= 3 Тогда
				СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G42");
			КонецЕсли;
			Если НомерПоХронологииФормыНН = 0 Тогда
				СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5_");
			КонецЕсли;
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
			Если НомерПоХронологииФормыНН = 0 Тогда
				СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5S");
			КонецЕсли;
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G7");
			Если НомерПоХронологииФормыНН >= 2 Тогда
				СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G109");
			КонецЕсли;
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G8");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G9");
			СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G10");
			
			Если НомерПоХронологииФормыНН = 0 Тогда
				СтруктураПоказателей.Вставить("НалоговыйДокументЗЦ", 	Новый Структура());	// данные табличной части по накладной по "обычным ценам"
				СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R",  Новый ТаблицаЗначений());  // данные табличной части
				СтруктураПоказателей.НалоговыйДокументЗЦ.R = СтруктураПоказателей.НалоговыйДокумент.R.Скопировать();
			КонецЕсли;
			
			Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
				// такие операции не предусматривают выписки налоговых накладных
				Возврат	СтруктураПоказателей;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НомерПоХронологииФормыНН = 0 Тогда
			СимволДляПустыхПоказателей = "X";
			ПечататьКодУКТВЭДБезПробелов = Ложь;
			ПечататьДатыБезРазделителей = Ложь;
			ДополнитьНазваниеНомеромГТД = Ложь;
		КонецЕсли;
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
		НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
		Если НастройкиПечати.Количество() > 0 Тогда
			Если НомерПоХронологииФормыНН = 0 Тогда
				СимволДляПустыхПоказателей    	 = НастройкиПечати[0].СимволПустыхПоказателейВНалоговойНакладной; 
				ПечататьКодУКТВЭДБезПробелов     = НастройкиПечати[0].ПечататьКодУКТВЭДБезПробелов; 
				ПечататьДатыБезРазделителей    	 = НЕ НастройкиПечати[0].ПечататьДатыВНалоговыхНакладныхСРазделителями; 
				ДополнитьНазваниеНомеромГТД    	 = НЕ НастройкиПечати[0].НеДополнятьНаименованиеНомеромГТДВНалоговыхДокументах; 
			КонецЕсли;
			ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
		КонецЕсли;
		
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
		Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Неопределено Тогда
			// в реквизите "Контрагент" ссылка на справочник "Организации"
			ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Ложь;
			НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Контрагент));
			Если НастройкиПечати.Количество() > 0 Тогда
				ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
			КонецЕсли;
		КонецЕсли;
		
		ДополнениеКНаименованиюОрганизации = "";
		ДополнениеКАдресуОрганизации = "";
		Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
		   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
		   
		   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
			
			ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + " - " ;
			ДополнениеКАдресуОрганизации       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ЮридическийАдрес,"  , Ложь) + " - " ;
		
		КонецЕсли;
		
		ДополнениеКНаименованиюКонтрагента = "";
		ДополнениеКАдресуКонтрагента = "";
		Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН
		   И ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) Тогда
			
		   	СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
			
			ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + " - " ;
			ДополнениеКАдресуКонтрагента       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ЮридическийАдрес,"  , Ложь) + " - " ;
		КонецЕсли;

		Если НомерПоХронологииФормыНН >= 1 Тогда
			// кто выписал налоговую накладную нужно формировать в виде "И.О. Фамилия"
			//ПечКтоВыписалНалоговуюНакладную = "";
			//ФИОКтоВыписалНалоговуюНакладную = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ДанныеПечати.КтоВыписалНалоговуюНакладнуюСправочник));
			//Если ФИОКтоВыписалНалоговуюНакладную.Количество() > 0 Тогда
			//	ПечКтоВыписалНалоговуюНакладную =  ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Имя), 1))
			//									 + ". "
			//									 + ВРег(Лев(СокрЛ(ФИОКтоВыписалНалоговуюНакладную[0].Отчество), 1))
			//									 + ". "
			//									 + СокрЛП(ФИОКтоВыписалНалоговуюНакладную[0].Фамилия); 
			//Иначе
			//	ПечКтоВыписалНалоговуюНакладную = "" + Шапка.КтоВыписалНалоговуюНакладную;									 
			//КонецЕсли;
			ПечКтоВыписалНалоговуюНакладную = ДанныеПечати.КтоВыписалНалоговуюНакладную;
		КонецЕсли;

		// Для печати второго экземпляра накладной понадобится исходная таблица, которая в процессе печати первого экземпляра будет свернута
		
		Для Страница = 1 По 2 Цикл
			
			Если НомерПоХронологииФормыНН >= 3 Тогда
				Если Страница = 2 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если НомерПоХронологииФормыНН >= 3 Тогда
				
				ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
				
				ОбластьМакетаЗаголовок.Параметры.СоглашениеОРазделеПродукции = ?(ДанныеПечати.СоглашениеОРазделеПродукции = Истина, "Х", "");
		
				Если  НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
					
					// накладная остается у поставщика
					ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
					ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
					ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);

				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);

			ИначеЕсли НомерПоХронологииФормыНН >= 1 Тогда
				
				Если  Страница = 2 Тогда
					Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
						ИЛИ ДанныеПечати.ЭлектронныйДокумент Тогда
						// печатаем в одном экземпляре
						Продолжить;
					КонецЕсли;
					
					ВыборкаПоТоварам.Сбросить();
					
				КонецЕсли;
				
				ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
				ОбластьМакетаЗаголовок.Параметры.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = ДанныеПечати.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных;
				ОбластьМакетаЗаголовок.Параметры.ЭлектронныйДокумент 							 = ДанныеПечати.ЭлектронныйДокумент И НЕ ДанныеПечати.ПодтверждаетсяГТД;
				
				Если ДанныеПечати.ЭлектронныйДокумент = Ложь ИЛИ ДанныеПечати.ПодтверждаетсяГТД = Истина Тогда
					Если Страница = 2 Тогда
					    // копия - всегда остается у продавца
						ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца = "Х";
						
					Иначе
						
						// оригинал
						Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
                            ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
				
						Иначе
							
							// накладная остается у поставщика
							ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
							ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
							ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
					
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
				
			Иначе
				
				Если Страница = 2
				   И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента
					ИЛИ (ДанныеПечати.ЭлектронныйДокумент И НЕ ДанныеПечати.ПодтверждаетсяГТД)) Тогда
					// печатаем в одном экземпляре
					Продолжить;
				КонецЕсли;
				
				// Выводим область оригинал/копия
				Если Страница = 1 Тогда
					
					ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
					ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = ДанныеПечати.ВключенаВЕдиныйРеестрНалоговыхНакладных;
					
					Если ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  Тогда
						
						ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю = "Х";
						
					
					Иначе
						
						// накладная остается у поставщика
						ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца = "Х";
						ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
						ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);
						
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
					
				ИначеЕсли Страница = 2 Тогда
					ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("ПерваяКопия");
					ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных = ДанныеПечати.ВключенаВЕдиныйРеестрНалоговыхНакладных;
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
					ВыборкаПоТоварам.Сбросить();
				КонецЕсли;
				
			КонецЕсли;
			
			// Выводим отступ
			ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим заголовок накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			
			//Дата
			ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
			Для Инд = 1 По 8 Цикл
				ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
			КонецЦикла; 
			
			// Номер
			ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
			Для Инд = 1 По 7 Цикл                                                                 
				ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
			КонецЦикла; 
			
			// филиал/спецрежим
			ТекНомерФилиал = "";
			КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
			Если НомерПоХронологииФормыНН >= 1 Тогда
				НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("    " + Формат(Число(ДанныеПечати.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
			Иначе
				НомерФилиала  = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("0000" + СокрЛП(ДанныеПечати.Префикс), 4), "");  //число, сведущими нулями, 4 символа 
			КонецЕсли;
			Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
				ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
			КонецЕсли;
			Для Инд = 1 По 5 Цикл                                                                 
				ОбластьМакета.Параметры["НомерФилиал_"+Инд]    = Сред(ТекНомерФилиал, Инд, 1);
			КонецЦикла; 
			
			Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
				// налоговые реквизиты не указыватюся
				СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
				Если НомерПоХронологииФормыНН >= 3 Тогда
					ИННОрганизации					= ?(ДанныеПечати.УслугиНерезидентаДляНехозДеят = Истина, "200000000000", "500000000000");
				Иначе
					ИННОрганизации					= ?(ДанныеПечати.УслугиНерезидентаДляНехозДеят = Истина, "200000000000", "300000000000");
				КонецЕсли;
				Если НомерПоХронологииФормыНН = 0 Тогда
					НомерСвидетельстваОрганизации	= "0";
				КонецЕсли;
				ОбластьМакета.Параметры.НазваниеОрганизации	= ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
				Если НомерПоХронологииФормыНН >= 2 Тогда
					
					// вместо адреса - просто страна нерезидента
					АдресОрганизации = "";
					
					Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
						   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
					
						Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
							Окончание = "Организации";
						ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
							Окончание = "Контрагента";
						ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
							Окончание = "Партнера";
						КонецЕсли;
						
						ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

						ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
						
						НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							АдресОрганизации = СокрЛП(НайденныеСтроки[0].Страна);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(АдресОрганизации) Тогда
						Сообщить(НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Адрес в налоговой накладной заполнен не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Адреса в податковій накладній заповнена не буде!'"));
					КонецЕсли;
					
					// остальные данные (телефон) не заполняется
					ТекТелефоныОрганизации = "";
					
					ОбластьМакета.Параметры.АдресОрганизации    = АдресОрганизации;
					
				Иначе
					ОбластьМакета.Параметры.АдресОрганизации    = ДополнениеКАдресуКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ЮридическийАдрес,", Ложь);
					
					ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
					
				КонецЕсли;
			Иначе	
				СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
				ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
				Если НомерПоХронологииФормыНН = 0 Тогда
					НомерСвидетельстваОрганизации 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "НомерСвидетельства,",Ложь);
				КонецЕсли;
				ОбластьМакета.Параметры.НазваниеОрганизации	= ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
				Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
					ОбластьМакета.Параметры.НазваниеОрганизации = ОбластьМакета.Параметры.НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;	
				КонецЕсли;
				ОбластьМакета.Параметры.АдресОрганизации = ДополнениеКАдресуОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ЮридическийАдрес,", Ложь);
				
				ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "Телефоны,",          Ложь);
				
			КонецЕсли;
			
			// телефон
			ТекТелефоныОрганизации = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныОрганизации);
			Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
				ОбластьМакета.Параметры["ТелефоныОрганизации_"+НомерСимвола] = Сред(ТекТелефоныОрганизации, НомерСимвола, 1);
			КонецЦикла;
			
			ИННОрганизации = Прав("            " + ИННОрганизации, 12);
			Для Инд = 1 По 12 Цикл
				ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
			КонецЦикла;
			Если НомерПоХронологииФормыНН = 0 Тогда
				НомерСвидетельстваОрганизации = Прав("            " + НомерСвидетельстваОрганизации, 10);
				Для Инд = 1 По 10 Цикл
					ОбластьМакета.Параметры["НомерСвидетельстваОрганизации_"+Инд] = Сред(НомерСвидетельстваОрганизации, Инд, 1);
				КонецЦикла;
			КонецЕсли;
			
			Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
			 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента 
			 ИЛИ (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены И
			      НЕ ЗначениеЗаполнено(ДанныеПечати.Контрагент))Тогда
				// в этом случае контрагентом выступает организация
				СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
				ОбластьМакета.Параметры.НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
				ОбластьМакета.Параметры.АдресКонтрагента    = ДополнениеКАдресуОрганизации 		 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,",   Ложь);
				ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
			Иначе
				СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
				НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
				АдресКонтрагента    = ДополнениеКАдресуКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ЮридическийАдрес,",  Ложь);
				ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "Телефоны," ,Ложь);
				Если НомерПоХронологииФормыНН >= 2 Тогда
					
					Если ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
						
						// вместо адреса - просто страна нерезидента
						АдресКонтрагента = "";
						
						Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
						   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
						
							Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
								Окончание = "Организации";
							ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
								Окончание = "Контрагента";
							ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
								Окончание = "Партнера";
							КонецЕсли;
							
							ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

							ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
							
							НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								АдресКонтрагента = СокрЛП(НайденныеСтроки[0].Страна);
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(АдресКонтрагента) Тогда
							Сообщить(НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Адрес в налоговой накладной заполнен не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Адреса в податковій накладній заповнена не буде!'"));
						КонецЕсли;
						
						// остальные данные (телефон) не заполняется
						ТекТелефоныКонтрагента = "";
						
					ИначеЕсли (НЕ (ДанныеПечати.ПоставкаДипПредставительству = Истина И ДанныеПечати.ТипПричиныНевыдачиПокупателю <=2))
					   И (НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент)) Тогда
						
						НазваниеКонтрагента = "Неплатник";
						АдресКонтрагента = "";
						ТекТелефоныКонтрагента = "";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
				ОбластьМакета.Параметры.АдресКонтрагента    = АдресКонтрагента;
			КонецЕсли; 
			
			// телефон
			ТекТелефоныКонтрагента = ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
			ДлинаСтрокиТелефонов = СтрДлина(ТекТелефоныКонтрагента);
			Для НомерСимвола = 1 По ДлинаСтрокиТелефонов ЦИкл
				ОбластьМакета.Параметры["ТелефоныКонтрагента_"+НомерСимвола] = Сред(ТекТелефоныКонтрагента, НомерСимвола, 1);
			КонецЦикла;
			
			
			ИННКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		    Если НомерПоХронологииФормыНН >= 2 Тогда
				
				Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 				ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
			 		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов Тогда
					ИННКонтрагента = "400000000000";
				ИначеЕсли НЕ (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента)
					И НЕ (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены И НЕ ЗначениеЗаполнено(ДанныеПечати.Контрагент)) Тогда
					
					Если (ДанныеПечати.ПоставкаДипПредставительству = Истина И ДанныеПечати.ТипПричиныНевыдачиПокупателю <=2) Тогда
						ИННКонтрагента = "400000000000";
					ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
						// поставка на экспорт
						ИННКонтрагента = "300000000000";
					ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент) Тогда
						Если НомерПоХронологииФормыНН >= 3 Тогда
							ИННКонтрагента = "100000000000";
						Иначе
							ИННКонтрагента = "400000000000";
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли НомерПоХронологииФормыНН >= 1 Тогда
				
				Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
				    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов Тогда
					ИННКонтрагента = "400000000000";
				ИначеЕсли НЕ (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента) Тогда
					
					Если НЕ ЗначениеЗаполнено(ИННКонтрагента) ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
						ИННКонтрагента = "400000000000";
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 				ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов Тогда
					ИННКонтрагента = "0";
				ИначеЕсли НЕ (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента) Тогда
					
					Если НЕ ЗначениеЗаполнено(ИННКонтрагента) ИЛИ Найти("0123456789",Лев(СокрЛ(ИННКонтрагента),1)) = 0 Тогда
						ИННКонтрагента = "0";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
			Для Инд = 1 По 12 Цикл
				ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
			КонецЦикла; 
			
			Если НомерПоХронологииФормыНН = 0 Тогда
				НомерСвидетельстваКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "НомерСвидетельства,",Ложь);
				Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
					ИЛИ НЕ ЗначениеЗаполнено(НомерСвидетельстваКонтрагента)
					ИЛИ Найти("0123456789",Лев(СокрЛ(НомерСвидетельстваКонтрагента),1)) = 0 Тогда
					НомерСвидетельстваКонтрагента = "0";
				КонецЕсли; 
				НомерСвидетельстваКонтрагента = Прав("            " + НомерСвидетельстваКонтрагента, 10);
				Если  ДанныеПечати.Дата >= '2014-01-01'
					И СокрЛП(НомерСвидетельстваКонтрагента) = "0"
					И НЕ СокрЛП(ИННКонтрагента) = "0" Тогда
					НомерСвидетельстваКонтрагента = "";	
				КонецЕсли;
				Для Инд = 1 По 10 Цикл
					ОбластьМакета.Параметры["НомерСвидетельстваКонтрагента_"+Инд] = Сред(НомерСвидетельстваКонтрагента, Инд, 1);
				КонецЦикла;
			КонецЕсли;
			
			ТекНомерДоговора = СокрЛП("" + ДанныеПечати.НомерДоговора);
			ОбластьМакета.Параметры.НомерДоговора = ТекНомерДоговора;
			
			ТекДатаДоговора = ДанныеПечати.ДатаДоговора;
			Если ЗначениеЗаполнено(ТекДатаДоговора) Тогда
				ТекДатаДоговора = Формат(ТекДатаДоговора,"ДФ=ddMMyyyy");
				Для Инд = 1 По 8 Цикл
					ОбластьМакета.Параметры["ДатаДоговора_"+Инд]    = Сред(ТекДатаДоговора, Инд, 1);
				КонецЦикла; 
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина  И Страница = 1 Тогда
				
				Если НомерПоХронологииФормыНН >= 3 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H_1", ОбластьМакетаЗаголовок.Параметры.СоглашениеОРазделеПродукции);
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG",	ОбластьМакетаЗаголовок.Параметры.ВыдаетсяПокупателю);
				КонецЕсли;
				
				Если НомерПоХронологииФормыНН >= 3 Тогда
					
				ИначеЕсли НомерПоХронологииФормыНН >= 1 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HEL",		Формат(ОбластьМакетаЗаголовок.Параметры.ЭлектронныйДокумент, "БЛ=; БИ=Х"));
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HERPN",	Формат(ОбластьМакетаЗаголовок.Параметры.ВключенаВЕдиныйРеестрНалоговыхНакладных, "БЛ=; БИ=Х"));
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	""+ОбластьМакетаЗаголовок.Параметры.ТипПричины1+ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HCOPY",	"");
				КонецЕсли;
				
				Если НомерПоХронологииФормыНН = 2 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HCOPY",	ОбластьМакетаЗаголовок.Параметры.ОстаетсяУПродавца);					
				КонецЕсли;
				
				Если НомерПоХронологииФормыНН >= 2 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
				КонецЕсли;
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	Лев(ТекНомерФилиал, 1));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	Сред(ТекНомерФилиал, 2));
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	ОбластьМакета.Параметры.НазваниеОрганизации);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	ОбластьМакета.Параметры.НазваниеКонтрагента);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
				Если НомерПоХронологииФормыНН = 0 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVSEL",НомерСвидетельстваОрганизации);
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HNSPDVBUY",НомерСвидетельстваКонтрагента);
				КонецЕсли;
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCSEL",	ОбластьМакета.Параметры.АдресОрганизации);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HLOCBUY",	ОбластьМакета.Параметры.АдресКонтрагента);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELSEL",	ТекТелефоныОрганизации);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HTELBUY",	ТекТелефоныКонтрагента);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G1S",	ОбластьМакета.Параметры.ВидДоговора);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G2D",	ДанныеПечати.ДатаДоговора);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H01G3S",	ТекНомерДоговора);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("H02G1S",	ОбластьМакета.Параметры.ФормаРасчетов);
				Если НомерПоХронологииФормыНН >= 1 Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G1S",	ПечКтоВыписалНалоговуюНакладную);
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("H10G1S",	ДанныеПечати.КтоВыписалНалоговуюНакладную);
				КонецЕсли;
				Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ДанныеПечати.ЛьготаНДС);	
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	"");	
				КонецЕсли;
				
				Если НомерПоХронологииФормыНН = 0 Тогда
					Если ДанныеПечати.ПродажаНижеОбычнойЦены Тогда
						
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HORIG",		СтруктураПоказателей.НалоговыйДокумент.HORIG);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HORIG1",		СтруктураПоказателей.НалоговыйДокумент.HORIG1);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HERPN",		СтруктураПоказателей.НалоговыйДокумент.HERPN);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HTYPR",		1);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HCOPY",		СтруктураПоказателей.НалоговыйДокумент.HCOPY);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HFILL",		СтруктураПоказателей.НалоговыйДокумент.HFILL);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNUM",		СтруктураПоказателей.НалоговыйДокумент.HNUM);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNUM1",		СтруктураПоказателей.НалоговыйДокумент.HNUM1);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNUM2",		СтруктураПоказателей.НалоговыйДокумент.HNUM2);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNAMESEL",	СтруктураПоказателей.НалоговыйДокумент.HNAMESEL);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNAMEBUY",	СтруктураПоказателей.НалоговыйДокумент.HNAMEBUY);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HKSEL",		СтруктураПоказателей.НалоговыйДокумент.HKSEL);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HKBUY",		СтруктураПоказателей.НалоговыйДокумент.HKBUY);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNSPDVSEL",	СтруктураПоказателей.НалоговыйДокумент.HNSPDVSEL);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HNSPDVBUY",	СтруктураПоказателей.НалоговыйДокумент.HNSPDVBUY);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HLOCSEL",	СтруктураПоказателей.НалоговыйДокумент.HLOCSEL);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HLOCBUY",	СтруктураПоказателей.НалоговыйДокумент.HLOCBUY);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HTELSEL",	СтруктураПоказателей.НалоговыйДокумент.HTELSEL);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("HTELBUY",	СтруктураПоказателей.НалоговыйДокумент.HTELBUY);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H01G1S",		СтруктураПоказателей.НалоговыйДокумент.H01G1S);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H01G2D",		СтруктураПоказателей.НалоговыйДокумент.H01G2D);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H01G3S",		СтруктураПоказателей.НалоговыйДокумент.H01G3S);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H02G1S",		СтруктураПоказателей.НалоговыйДокумент.H02G1S);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("H10G1S",		СтруктураПоказателей.НалоговыйДокумент.H10G1S);
						СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R003G10S",	СтруктураПоказателей.НалоговыйДокумент.R003G10S);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// Выводим шапку накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если НомерПоХронологииФормыНН = 0 Тогда
				// Выводим табличную часть
				ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
				Если ПечататьДатыБезРазделителей Тогда
					ОбластьМакета.Области.ДатаОтгрузкиОплаты.Формат = "ДФ=ddMMyyyy";	
				КонецЕсли;
			КонецЕсли;
			
			ЭтоПерваяСтрока = Истина;
			ТаблицаСуммаПоСтавкам.Очистить();
			
			// Выведем на печать все строки таблицы в раздел I
			Пока ВыборкаПоТоварам.Следующий() Цикл
				
				Если НомерПоХронологииФормыНН >= 1 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
				КонецЕсли;
				
				Если ЭтоПерваяСтрока Тогда	
					// в первой строке раздела укажем номер раздела
					ОбластьМакета.Параметры.НомерРаздела = "I";
					ЭтоПерваяСтрока = Ложь;
				Иначе
					ОбластьМакета.Параметры.НомерРаздела = "";
				КонецЕсли;
				
				Если ВыборкаПоТоварам.СуммаБезНДС =0 Тогда	
					Продолжить;
				КонецЕсли;	
                Если ВыборкаПоТоварам.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда	
					Продолжить;
				КонецЕсли;	

				ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры,"ЕдиницаИзмеренияКод") Тогда
					ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
				КонецЕсли; 
				
				Отбор = Новый Структура("СтавкаНДС", ВыборкаПоТоварам.СтавкаНДС);
				НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Строка = НайденныеСтроки[0];
				Иначе
					Строка = ТаблицаСуммаПоСтавкам.Добавить();
					Строка.СтавкаНДС = ВыборкаПоТоварам.СтавкаНДС;
				КонецЕсли;
				
				Строка.СуммаНДС	= Строка.СуммаНДС + ВыборкаПоТоварам.СуммаНДС;  
				Строка.Сумма	= Строка.Сумма + ВыборкаПоТоварам.СуммаБезНДС;  
				
				Если НомерПоХронологииФормыНН >= 1 Тогда
					ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
					
					
				Иначе
					Если ПечататьКодУКТВЭДБезПробелов Тогда
						ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДляПечатиВКолонкеКоличество) Тогда
						ОбластьМакета.Параметры.Количество = ВыборкаПоТоварам.ТекстДляПечатиВКолонкеКоличество;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДляПечатиВКолонкеЦена) Тогда
						ОбластьМакета.Параметры.ЦенаБезНДС = ВыборкаПоТоварам.ТекстДляПечатиВКолонкеЦена;
					КонецЕсли;
				КонецЕсли;
				
				// дата отгрузки/оплаты
				Если НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.ДатаОтгрузкиОплаты) Тогда
					// укажем дату выписки накладной
					ОбластьМакета.Параметры.ДатаОтгрузкиОплаты = ДанныеПечати.Дата;
				КонецЕсли;
				
				Если НЕ (ЗначениеЗаполнено(ВыборкаПоТоварам.Номенклатура) ИЛИ ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание))  И Страница = 1 Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено наименование (содержание) номенклатуры - проверьте заполнение документа!';uk='В одному з рядків не заповнено найменування (зміст) номенклатури - перевірте заповнення документа!'"), СтатусСообщения.Важное);
				КонецЕсли;
				
				Если НомерПоХронологииФормыНН >= 1 Тогда
					ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Номенклатура)) 
													 + ?(НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.Характеристика), "", "(" + ВыборкаПоТоварам.Характеристика +")")
													 + ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены), " "+ ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены, "")
													 ;
					ОбластьМакета.Параметры.СуммаБезНДС = Неопределено;
				Иначе
					ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Номенклатура)) 
													 + ?(НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.Характеристика), "", "(" + ВыборкаПоТоварам.Характеристика +")")
													 + ?(ДополнитьНазваниеНомеромГТД И ЗначениеЗаполнено(ВыборкаПоТоварам.НомерГТД), ". ВМД №: " + ВыборкаПоТоварам.НомерГТД + ", дата ВМД: " + Формат(ВыборкаПоТоварам.ДатаГТД, ?(ПечататьДатыБезРазделителей,"ДФ=ddMMyyyy","ДФ=dd.MM.yyyy")), "")
													 +" "+ ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены
													 ;
					ОбластьМакета.Параметры.Сумма20 	= СимволДляПустыхПоказателей;
					ОбластьМакета.Параметры.Сумма0Укр 	= СимволДляПустыхПоказателей;
					ОбластьМакета.Параметры.Сумма0Эксп	= СимволДляПустыхПоказателей;
					ОбластьМакета.Параметры.СуммаБезНДС = СимволДляПустыхПоказателей;
				КонецЕсли;
				
				// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
				Колонка = "Сумма" + ОпределитьКолонкуТаблицы(ВРегВалюте, ВыборкаПоТоварам.СтавкаНДС, ДанныеПечати.Дата);
				ОбластьМакета.Параметры[Колонка] = НДСОбщегоНазначенияСервер.ФорматСумм(ВыборкаПоТоварам.СуммаБезНДС, ,"0,00");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
					
					Если ДанныеПечати.ПродажаНижеОбычнойЦены И НомерПоХронологииФормыНН = 0 Тогда
						СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокументЗЦ.R.Добавить();
					Иначе
						СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
					КонецЕсли;
					
					СтрокаСтруктуры.G2D = ОбластьМакета.Параметры.ДатаОтгрузкиОплаты;
					СтрокаСтруктуры.G3S = ОбластьМакета.Параметры.Номенклатура;
					
					СтрокаСтруктуры.G4 = ОбластьМакета.Параметры.КодУКТВЭД;
					
					СтрокаСтруктуры.G4S = ОбластьМакета.Параметры.ЕдиницаИзмерения;
					
					Если НомерПоХронологииФормыНН >=3 Тогда
						СтрокаСтруктуры.G42 = ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
					КонецЕсли;
					
					Если НомерПоХронологииФормыНН >= 1 Тогда
						СтрокаСтруктуры.G5  = ОбластьМакета.Параметры.Количество;
					Иначе
						СтрокаСтруктуры.G5_ = ОбластьМакета.Параметры.Количество;
						СтрокаСтруктуры.G5  = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДляПечатиВКолонкеКоличество),0,ОбластьМакета.Параметры.Количество);
						СтрокаСтруктуры.G5S = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДляПечатиВКолонкеКоличество),ВыборкаПоТоварам.ТекстДляПечатиВКолонкеКоличество,"");
					КонецЕсли;
					СтрокаСтруктуры.G6  = ОбластьМакета.Параметры.ЦенаБезНДС;
					
					КолонкаДляСуммы = ОпределитьКолонкуТаблицы(ВРегВалюте, ВыборкаПоТоварам.СтавкаНДС, ДанныеПечати.Дата);
					Если НомерПоХронологииФормыНН >= 2 Тогда
						Если КолонкаДляСуммы = "20" Тогда
							СтрокаСтруктуры.G7  = ВыборкаПоТоварам.СуммаБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "7" Тогда
							СтрокаСтруктуры.G109  = ВыборкаПоТоварам.СуммаБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "0Укр" Тогда
							СтрокаСтруктуры.G8  = ВыборкаПоТоварам.СуммаБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "0Эксп" Тогда
							СтрокаСтруктуры.G9  = ВыборкаПоТоварам.СуммаБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
							СтрокаСтруктуры.G10 = ВыборкаПоТоварам.СуммаБезНДС;	
						КонецЕсли;
					Иначе
						Если КолонкаДляСуммы = "20" Тогда
							СтрокаСтруктуры.G7  = ВыборкаПоТоварам.СуммаБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "0Укр" Тогда
							СтрокаСтруктуры.G8  = ВыборкаПоТоварам.СуммаБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "0Эксп" Тогда
							СтрокаСтруктуры.G9  = ВыборкаПоТоварам.СуммаБезНДС;	
						ИначеЕсли КолонкаДляСуммы = "БезНДС" Тогда
							СтрокаСтруктуры.G10 = ВыборкаПоТоварам.СуммаБезНДС;	
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			
			// Выводим итог по I разделу и раздел II
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогРазделI");
			Если НомерПоХронологииФормыНН >= 1 Тогда
				ОбластьМакета.Параметры.СуммаБезНДС = Неопределено;
			Иначе
				ОбластьМакета.Параметры.Сумма20 	= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.Сумма0Укр 	= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.Сумма0Эксп	= СимволДляПустыхПоказателей;
				ОбластьМакета.Параметры.СуммаБезНДС	= СимволДляПустыхПоказателей;
			КонецЕсли;
			
			Сумма1разд = 0;
			
			Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
				СуффиксКолонки = ОпределитьКолонкуТаблицы(ВРегВалюте, СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата);
				
				Сумма = СтрокаТаблицы.Сумма; 
				
				Колонка = "Сумма"; 
				Сумма1разд = Сумма1разд + Сумма;
				
				ОбластьМакета.Параметры[Колонка + СуффиксКолонки] = НДСОбщегоНазначенияСервер.ФорматСумм(Сумма, ,"0,00");
				
			КонецЦикла;	
			
			// колонка 11 по товарам (раздел I)
			ОбластьМакета.Параметры.Сумма1разд = НДСОбщегоНазначенияСервер.ФорматСумм(Сумма1разд, ,"0,00");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим раздел II (тара)
			ОбластьМакета = Макет.ПолучитьОбласть("ВозврТара");
			
			СуммаВозвратнойТары = ДанныеПечати.СуммаВозвратнойТары;
			
			Если НомерПоХронологииФормыНН >= 1 Тогда
				ОбластьМакета.Параметры.ВозвТара = НДСОбщегоНазначенияСервер.ФорматСумм(СуммаВозвратнойТары);
			Иначе
				ОбластьМакета.Параметры.ВозвТара = НДСОбщегоНазначенияСервер.ФорматСумм(СуммаВозвратнойТары, ,СимволДляПустыхПоказателей);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11", СуммаВозвратнойТары);
			КонецЕсли;
			
			// Выводим разделы III - IV (итоги)
			ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
			
			ИтогНДС = 0;
			
			Если НомерПоХронологииФормыНН >= 3 Тогда
				ОбластьМакета.Параметры["ИтогНДСБезНДС"] = "";
			ИначеЕсли НомерПоХронологииФормыНН >= 2 Тогда
				// в макете жестко прописан крестик, но п. 13 говорит иногда делать в этом поле пометку...
				ОбластьМакета.Параметры["ИтогНДСБезНДС"] = "Х";
			КонецЕсли;
			Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
				
				СуффиксКолонки = ОпределитьКолонкуТаблицы(ВРегВалюте, СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата);
				
				// Итоги
				Если НомерПоХронологииФормыНН >= 2 Тогда

					Если СуффиксКолонки = "20" ИЛИ СуффиксКолонки = "7" Тогда
						ОбластьМакета.Параметры["ИтогНДС" 		  + СуффиксКолонки] = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
					ИначеЕсли СуффиксКолонки = "БезНДС" Тогда
						// п.13 Порядка заполнения налоговой накладной устанавливает особые правила заполнения этой ячейки:
						ОбластьМакета.Параметры["ИтогНДС" 	  + СуффиксКолонки] = "Без ПДВ";
					КонецЕсли;
				
					ОбластьМакета.Параметры["ИтогСуммаСНДС"   + СуффиксКолонки] = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС, ,"0,00");
					
					Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
						
						Если НомерПоХронологииФормыНН < 3 Тогда
							СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S", "Х");
						КонецЕсли;
						Если СуффиксКолонки = "20" Тогда
							СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7",	СтрокаТаблицы.СуммаНДС);
						ИначеЕсли СуффиксКолонки = "7" Тогда               
							СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109",	СтрокаТаблицы.СуммаНДС);
						ИначеЕсли СуффиксКолонки = "БезНДС" Тогда           
							СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	"Без ПДВ");
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ОбластьМакета.Параметры["ИтогНДС" 		  + СуффиксКолонки] = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
					Если СуффиксКолонки = "БезНДС" Тогда
						// п.10 Порядка заполнения налоговой накладной устанавливает особые правила заполнения этой ячейки:
						ОбластьМакета.Параметры["ИтогНДС" 	  + СуффиксКолонки] = "Без ПДВ";
					ИначеЕсли СуффиксКолонки = "0Укр"
						ИЛИ СуффиксКолонки = "0Эксп" Тогда
						// п.11 Порядка заполнения налоговой накладной устанавливает особые правила заполнения этой ячейки:
                        Если НЕ ДанныеПечати.СпецРежимНалогообложения = 7 Тогда
							ОбластьМакета.Параметры["ИтогНДС0Укр"]  = "0";
						КонецЕсли;
						ОбластьМакета.Параметры["ИтогНДС0Эксп"] = "0";
					КонецЕсли;
				
					ОбластьМакета.Параметры["ИтогСуммаСНДС"   + СуффиксКолонки] = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС, ,"0,00");
					
					Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина И Страница = 1 Тогда
						
						Если ДанныеПечати.ПродажаНижеОбычнойЦены И НомерПоХронологииФормыНН = 0 Тогда
							
							Если СуффиксКолонки = "20" Тогда
								СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R03G7",	СтрокаТаблицы.СуммаНДС);
							ИначеЕсли СуффиксКолонки = "0Укр" Тогда
								СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R03G8",	СтрокаТаблицы.СуммаНДС);
							ИначеЕсли СуффиксКолонки = "0Эксп" Тогда
								СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R03G9",	СтрокаТаблицы.СуммаНДС);
							ИначеЕсли СуффиксКолонки = "БезНДС" Тогда
								СтруктураПоказателей.НалоговыйДокументЗЦ.Вставить("R03G10",	"Без ПДВ");
							КонецЕсли;
							
						Иначе
							
							Если СуффиксКолонки = "20" Тогда
								СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7",	СтрокаТаблицы.СуммаНДС);
							ИначеЕсли СуффиксКолонки = "0Укр" Тогда
								СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G8",	СтрокаТаблицы.СуммаНДС);
							ИначеЕсли СуффиксКолонки = "0Эксп" Тогда
								СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G9",	СтрокаТаблицы.СуммаНДС);
							ИначеЕсли СуффиксКолонки = "БезНДС" Тогда
								СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	"Без ПДВ");
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Итоги в 11 колонке
			Всего = СуммаВозвратнойТары;
			ТаблицаСуммаПоСтавкамКопия = ТаблицаСуммаПоСтавкам.Скопировать();
			ТаблицаСуммаПоСтавкамКопия.Свернуть("","Сумма, СуммаНДС");
			Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкамКопия Цикл
				//в таблице не более одной строки
				ИтогНДС 		= СтрокаТаблицы.СуммаНДС;
				Всего 			= Всего + СтрокаТаблицы.Сумма + ИтогНДС;
			КонецЦикла;
			ОбластьМакета.Параметры.ИтогНДС			= НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС, ,"0,00");
			ОбластьМакета.Параметры.Всего 			= НДСОбщегоНазначенияСервер.ФорматСумм(Всего, ,"0,00");
			
			ТабличныйДокумент.Вывести(ОбластьМакета);	
			
			// Выводим подвал накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			
			Если НомерПоХронологииФормыНН >= 1 Тогда
				ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;
			Иначе
				ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ДанныеПечати.КтоВыписалНалоговуюНакладную;
			КонецЕсли;
			
			Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
				ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации Тогда
				ОбластьМакета.Параметры.ЛьготаНДС = ДанныеПечати.ЛьготаНДС;	
			КонецЕсли;
			
			Если НомерПоХронологииФормыНН >= 2 Тогда
				Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
						ОбластьМакета.Параметры.ЛьготаНДС = ДанныеПечати.ЛьготаНДС;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если НомерПоХронологииФормыНН < 3 Тогда
				Если Страница <> 2 Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Если  ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		Возврат СтруктураПоказателей;
		
	Иначе	
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФормуНалоговаяНакладная()

Функция СформироватьПечатнуюФорму2016(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	Если (    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
		  
		  ОбластьМакетаЗаголовок.Параметры.Сводная = ?(ДанныеПечати.Сводная = Истина, "X", "");	
		  
	КонецЕсли;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);

	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
	// Выводим отступ
	ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("    " + Формат(Число(ДанныеПечати.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Неопределено Тогда
		// в реквизите "Контрагент" ссылка на справочник "Организации"
		// головной организацией в форме 2016 дополняем всегда
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина;
	КонецЕсли;
	
	ДополнениеКНаименованиюКонтрагента = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН И ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) Тогда
	   	СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
		ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Адрес = НайденныеСтроки[0];
				
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
					РезультатыЧтения = Новый Структура;
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Иначе
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
				КонецЕсли;
				
				Страна = XDTOКонтактная.Состав.Страна;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда 
	 // в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Адрес = НайденныеСтроки[0];
					
					Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
						РезультатыЧтения = Новый Структура;
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
					Иначе
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
					КонецЕсли;
					
					Страна = XDTOКонтактная.Состав.Страна;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	
	// кто выписал налоговую накладную - формируем в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(ДанныеПечати.КтоВыписалНалоговуюНакладную,,,,Истина);
	
	// Выводим параметры 
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Отбор = Новый Структура("СтавкаНДС", ВыборкаПоТоварам.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = ВыборкаПоТоварам.СтавкаНДС;
		КонецЕсли;
		
		Строка.СуммаНДС	= Строка.СуммаНДС + ВыборкаПоТоварам.СуммаНДС;  
		Строка.Сумма	= Строка.Сумма + ВыборкаПоТоварам.СуммаБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(ВыборкаПоТоварам.КодЛьготы) ИЛИ ВыборкаПоТоварам.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата));
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.Сумма20   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.Сумма7   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G109", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.Сумма0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G8", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.Сумма0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.СуммаБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВсегоСумма = 0; ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ВсегоСумма = СтрокаТаблицы.Сумма;
		ИтогНДС    = СтрокаТаблицы.СуммаНДС;
	КонецЦикла;
	
	СуммаВозвратнойТары = ДанныеПечати.СуммаВозвратнойТары;
	
	ОбластьМакета.Параметры.Всего    = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС + ВсегоСумма, ,"0,00");
	ОбластьМакета.Параметры.ИтогНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС, ,"0,00");
	ОбластьМакета.Параметры.ВозвТара = НДСОбщегоНазначенияСервер.ФорматСумм(СуммаВозвратнойТары, ,"0,00");
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R04G11", ИтогНДС + ВсегоСумма);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G11", ИтогНДС);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11", СуммаВозвратнойТары);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("H03",		ОбластьМакетаЗаголовок.Параметры.Сводная);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	ОбластьМакетаЗаголовок.Параметры.Освобожденная);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
 		
	КонецЕсли;
	
	
	// строки 
	ВыборкаПоТоварам.Сбросить();
	ТекущийНомерСтроки = 0;
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Если НЕ (ЗначениеЗаполнено(ВыборкаПоТоварам.Номенклатура) ИЛИ ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание)) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено наименование (содержание) номенклатуры - проверьте заполнение документа!';uk='В одному з рядків не заповнено найменування (зміст) номенклатури - перевірте заповнення документа!'"), СтатусСообщения.Важное);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
		
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтроки;
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.Характеристика), "", "(" + ВыборкаПоТоварам.Характеристика +")")
										 + ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены), " "+ ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены, "")
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, ВыборкаПоТоварам.СтавкаНДС, ДанныеПечати.Дата));
		
		ОбластьМакета.Параметры.Сумма     = НДСОбщегоНазначенияСервер.ФорматСумм(ВыборкаПоТоварам.СуммаБезНДС, ,"0,00");
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = ВыборкаПоТоварам.СуммаБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.Сумма = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина 
				И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			СтрокаСтруктуры.G5 			= ОбластьМакета.Параметры.Количество;
			СтрокаСтруктуры.G6 			= ОбластьМакета.Параметры.ЦенаБезНДС;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2016()

Функция СформироватьПечатнуюФорму2017(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G011");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	Если (    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
		  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа) Тогда
		  
		  ОбластьМакетаЗаголовок.Параметры.Сводная = ?(ДанныеПечати.Сводная = Истина, "X", "");	
		  
	КонецЕсли;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);

	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
	// Выводим отступ
	ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("    " + Формат(Число(ДанныеПечати.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Неопределено Тогда
		// в реквизите "Контрагент" ссылка на справочник "Организации"
		// головной организацией в форме 2016 дополняем всегда
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина;
	КонецЕсли;
	
	ДополнениеКНаименованиюКонтрагента = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН И ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) Тогда
	   	СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
		ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Адрес = НайденныеСтроки[0];
				
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
					РезультатыЧтения = Новый Структура;
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Иначе
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
				КонецЕсли;
				
				Страна = XDTOКонтактная.Состав.Страна;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда 
	 // в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Адрес = НайденныеСтроки[0];
					
					Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
						РезультатыЧтения = Новый Структура;
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
					Иначе
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
					КонецЕсли;
					
					Страна = XDTOКонтактная.Состав.Страна;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	
	// кто выписал налоговую накладную - формируем в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(ДанныеПечати.КтоВыписалНалоговуюНакладную,,,,Истина);
	
	// Выводим параметры 
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Отбор = Новый Структура("СтавкаНДС", ВыборкаПоТоварам.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = ВыборкаПоТоварам.СтавкаНДС;
		КонецЕсли;
		
		Строка.СуммаНДС	= Строка.СуммаНДС + ВыборкаПоТоварам.СуммаНДС;  
		Строка.Сумма	= Строка.Сумма + ВыборкаПоТоварам.СуммаБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(ВыборкаПоТоварам.КодЛьготы) ИЛИ ВыборкаПоТоварам.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата));
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.Сумма20   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.Сумма7   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G109", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.Сумма0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G8", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.Сумма0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.СуммаБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВсегоСумма = 0; ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ВсегоСумма = СтрокаТаблицы.Сумма;
		ИтогНДС    = СтрокаТаблицы.СуммаНДС;
	КонецЦикла;
	
	СуммаВозвратнойТары = ДанныеПечати.СуммаВозвратнойТары;
	
	ОбластьМакета.Параметры.Всего    = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС + ВсегоСумма);
	ОбластьМакета.Параметры.ИтогНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС);
	ОбластьМакета.Параметры.ВозвТара = НДСОбщегоНазначенияСервер.ФорматСумм(СуммаВозвратнойТары);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R04G11", ИтогНДС + ВсегоСумма);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G11", ИтогНДС);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11", СуммаВозвратнойТары);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("H03",		ОбластьМакетаЗаголовок.Параметры.Сводная);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	ОбластьМакетаЗаголовок.Параметры.Освобожденная);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
 		
	КонецЕсли;
	
	
	// строки 
	ВыборкаПоТоварам.Сбросить();
	ТекущийНомерСтроки = 0;
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Если НЕ (ЗначениеЗаполнено(ВыборкаПоТоварам.Номенклатура) ИЛИ ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание)) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено наименование (содержание) номенклатуры - проверьте заполнение документа!';uk='В одному з рядків не заповнено найменування (зміст) номенклатури - перевірте заповнення документа!'"), СтатусСообщения.Важное);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
		
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтроки;
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		Если НЕ КодСпецРежима = "2" Тогда
		    ОбластьМакета.Параметры.КодСХ = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.Характеристика), "", "(" + ВыборкаПоТоварам.Характеристика +")")
										 + ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены), " "+ ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены, "")
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, ВыборкаПоТоварам.СтавкаНДС, ДанныеПечати.Дата));
		
		ОбластьМакета.Параметры.Сумма     = НДСОбщегоНазначенияСервер.ФорматСумм(ВыборкаПоТоварам.СуммаБезНДС, ,"0,00");
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = ВыборкаПоТоварам.СуммаБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.Сумма = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина 
				И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			СтрокаСтруктуры.G5 			= ОбластьМакета.Параметры.Количество;
			СтрокаСтруктуры.G6 			= ОбластьМакета.Параметры.ЦенаБезНДС;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2017()

Функция СформироватьПечатнуюФорму2018(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G011");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11_10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("ROWNUM");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	КодПризнакаСводнойНаПечать = "";
	Если НЕ (ДанныеПечати.КодПризнакаСводной = 0)Тогда 
		КодПризнакаСводнойНаПечать = Строка(ДанныеПечати.КодПризнакаСводной);
	ИначеЕсли  (ДанныеПечати.Сводная = Истина) Тогда 
		Если ( ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "1";
			  
		ИначеЕсли (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "4";
			  
		ИначеЕсли (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "3";
	    КонецЕсли;
	КонецЕсли;
	ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной = КодПризнакаСводнойНаПечать;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);

	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
	// Выводим отступ
	ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("    " + Формат(Число(ДанныеПечати.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	ФилиалПокупателяКодПоЕДРПОУ = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
			ФилиалПокупателяКодПоЕДРПОУ = Сред(ДанныеПечати.ФилиалПокупателя, ПозицияСобачки + 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
		ФилиалПокупателяКодПоЕДРПОУ = Прав("          " + СокрЛП(ФилиалПокупателяКодПоЕДРПОУ), 10);
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Неопределено Тогда
		// в реквизите "Контрагент" ссылка на справочник "Организации"
		// головной организацией в форме 2016 дополняем всегда
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина;
	КонецЕсли;
	
	ДополнениеКНаименованиюКонтрагента = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН И ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) Тогда
	   	СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
		ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Адрес = НайденныеСтроки[0];
				
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
					РезультатыЧтения = Новый Структура;
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Иначе
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
				КонецЕсли;
				
				Страна = XDTOКонтактная.Состав.Страна;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		ЕДРПОУОрганизации					= "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		ЕДРПОУОрганизации					= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);
		Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда 
			ЕДРПОУОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"             ,Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	ЕДРПОУОрганизации	= Прав("            " + СокрЛП(ЕДРПОУОрганизации), 10);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда 
	 // в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУКонтрагента = "";
		
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		ЕДРПОУКонтрагента = ЕДРПОУОрганизации;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			Если ПустаяСтрока(ФилиалПокупателяКодПоЕДРПОУ) Тогда 
				ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь);
				Если НЕ ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоДРФО," ,Ложь);
				КонецЕсли;
			Иначе
				ЕДРПОУКонтрагента = ФилиалПокупателяКодПоЕДРПОУ;
			КонецЕсли;
		Иначе
			ЕДРПОУКонтрагента = "";
		КонецЕсли;
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Адрес = НайденныеСтроки[0];
					
					Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
						РезультатыЧтения = Новый Структура;
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
					Иначе
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
					КонецЕсли;
					
					Страна = XDTOКонтактная.Состав.Страна;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	ЕДРПОУКонтрагента	= Прав("            " + СокрЛП(ЕДРПОУКонтрагента), 10);
	
	// кто выписал налоговую накладную - формируем в виде "И.О. Фамилия"
	ПечКтоВыписалНалоговуюНакладную = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(ДанныеПечати.КтоВыписалНалоговуюНакладную,,,,Истина);
	
	// Выводим параметры 
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
		
	// ЕДРПОУ продавца
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_"+Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ покупателя
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУКонтрагента_"+Инд] = Сред(ЕДРПОУКонтрагента, Инд, 1);
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Отбор = Новый Структура("СтавкаНДС", ВыборкаПоТоварам.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = ВыборкаПоТоварам.СтавкаНДС;
		КонецЕсли;
		
		Строка.СуммаНДС	= Строка.СуммаНДС + ВыборкаПоТоварам.СуммаНДС;  
		Строка.Сумма	= Строка.Сумма + ВыборкаПоТоварам.СуммаБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(ВыборкаПоТоварам.КодЛьготы) ИЛИ ВыборкаПоТоварам.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата));
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.Сумма20   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7", СтрокаТаблицы.СуммаНДС);
            КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.Сумма7   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G109", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.Сумма0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G8", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.Сумма0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.СуммаБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВсегоСумма = 0; ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ВсегоСумма = СтрокаТаблицы.Сумма;
		ИтогНДС    = СтрокаТаблицы.СуммаНДС;
	КонецЦикла;
	
	СуммаВозвратнойТары = ДанныеПечати.СуммаВозвратнойТары;
	
	ОбластьМакета.Параметры.Всего    = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС + ВсегоСумма);
	ОбластьМакета.Параметры.ИтогНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС);
	ОбластьМакета.Параметры.ВозвТара = НДСОбщегоНазначенияСервер.ФорматСумм(СуммаВозвратнойТары);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R04G11", ИтогНДС + ВсегоСумма);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G11", ИтогНДС);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11", СуммаВозвратнойТары);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1", ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной);			
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	ОбластьМакетаЗаголовок.Параметры.Освобожденная);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL",	ЕДРПОУОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY",	ЕДРПОУКонтрагента);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
 		
	КонецЕсли;
	
	
	// строки 
	ВыборкаПоТоварам.Сбросить();
	ТекущийНомерСтроки = 0;
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Если НЕ (ЗначениеЗаполнено(ВыборкаПоТоварам.Номенклатура) ИЛИ ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание)) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено наименование (содержание) номенклатуры - проверьте заполнение документа!';uk='В одному з рядків не заповнено найменування (зміст) номенклатури - перевірте заповнення документа!'"), СтатусСообщения.Важное);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
		
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтроки;
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		Если НЕ КодСпецРежима = "2" Тогда
		    ОбластьМакета.Параметры.КодСХ = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.Характеристика), "", "(" + ВыборкаПоТоварам.Характеристика +")")
										 + ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены), " "+ ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены, "")
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, ВыборкаПоТоварам.СтавкаНДС, ДанныеПечати.Дата));
		ОбластьМакета.Параметры.Сумма     = НДСОбщегоНазначенияСервер.ФорматСумм(ВыборкаПоТоварам.СуммаБезНДС, ,"0,00");
		//РасчСуммаНДС6Зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ВыборкаПоТоварам.СуммаБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС), Ложь), 6 );
		РасчСуммаНДС6Зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ВыборкаПоТоварам.СуммаБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС), Ложь), 6 );
		ФорматНДС6Зн = ?(Окр(РасчСуммаНДС6Зн,2) = РасчСуммаНДС6Зн, "ЧЦ=15; ЧДЦ=2; ЧН=' '", "ЧЦ=19; ЧДЦ=6; ЧН=' '");
		ОбластьМакета.Параметры.СуммаНДС6зн     = СокрЛ(Формат(РасчСуммаНДС6Зн, ФорматНДС6Зн));
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = ВыборкаПоТоварам.СуммаБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.Сумма = "";
			ОбластьМакета.Параметры.СуммаНДС6зн = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина 
				И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			СтрокаСтруктуры.G5 			= ОбластьМакета.Параметры.Количество;
			СтрокаСтруктуры.G6 			= ОбластьМакета.Параметры.ЦенаБезНДС;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
			СтрокаСтруктуры.G11_10  	= ОбластьМакета.Параметры.СуммаНДС6зн;
			СтрокаСтруктуры.ROWNUM		= ОбластьМакета.Параметры.НомерСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2018()

Функция СформироватьПечатнуюФорму2021(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G011");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11_10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("ROWNUM");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	КодПризнакаСводнойНаПечать = "";
	Если НЕ (ДанныеПечати.КодПризнакаСводной = 0)Тогда 
		КодПризнакаСводнойНаПечать = Строка(ДанныеПечати.КодПризнакаСводной);
	ИначеЕсли  (ДанныеПечати.Сводная = Истина) Тогда 
		Если ( ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "1";
			  
		ИначеЕсли (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "4";
			  
		ИначеЕсли (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "3";
	    КонецЕсли;
	КонецЕсли;
	ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной = КодПризнакаСводнойНаПечать;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);

	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
	// Выводим отступ
	ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("    " + Формат(Число(ДанныеПечати.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	ФилиалПокупателяКодПоЕДРПОУ = "";
	ДополнениеКНаименованиюКонтрагента = "";
	КодЕДРПОУГоловногоКонтрагента = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
			ФилиалПокупателяКодПоЕДРПОУ = Сред(ДанныеПечати.ФилиалПокупателя, ПозицияСобачки + 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
		Если ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) И ДанныеПечати.ГоловнойКонтрагент <> ДанныеПечати.Контрагент Тогда
			СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
			КодЕДРПОУГоловногоКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "КодПоЕДРПОУ,", Ложь);
			Если ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
				ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФилиалПокупателяКодПоЕДРПОУ) И ЗначениеЗаполнено(КодЕДРПОУГоловногоКонтрагента) Тогда
			ФилиалПокупателяКодПоЕДРПОУ = КодЕДРПОУГоловногоКонтрагента;
		КонецЕсли;
		ФилиалПокупателяКодПоЕДРПОУ = Прав("          " + СокрЛП(ФилиалПокупателяКодПоЕДРПОУ), 10);
	КонецЕсли;
	
	ПродавецЮрлицо = Истина;
	ПокупательЮрлицо = Истина;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Адрес = НайденныеСтроки[0];
				
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
					РезультатыЧтения = Новый Структура;
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Иначе
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
				КонецЕсли;
				
				Страна = XDTOКонтактная.Состав.Страна;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		ЕДРПОУОрганизации					= "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		ЕДРПОУОрганизации					= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);
		Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда 
			ЕДРПОУОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"             ,Ложь);
			ПродавецЮрлицо = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	ЕДРПОУОрганизации	= Прав("            " + СокрЛП(ЕДРПОУОрганизации), 10);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда 
	 // в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУКонтрагента = "";
		
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		ЕДРПОУКонтрагента = ЕДРПОУОрганизации;
		ПокупательЮрлицо = ПродавецЮрлицо;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			Если ПустаяСтрока(ФилиалПокупателяКодПоЕДРПОУ) Тогда 
				ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь);
				Если НЕ ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоДРФО," ,Ложь);
					ПокупательЮрлицо = Ложь;
				КонецЕсли;
			Иначе
				ЕДРПОУКонтрагента = ФилиалПокупателяКодПоЕДРПОУ;
			КонецЕсли;
		Иначе
			ЕДРПОУКонтрагента = "";
		КонецЕсли;
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Адрес = НайденныеСтроки[0];
					
					Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
						РезультатыЧтения = Новый Структура;
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
					Иначе
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
					КонецЕсли;
					
					Страна = XDTOКонтактная.Состав.Страна;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	ЕДРПОУКонтрагента	= Прав("            " + СокрЛП(ЕДРПОУКонтрагента), 10);
	
	ЧастиИмени = ФизическиеЛицаУТ.ФамилияИмяОтчество(ДанныеПечати.КтоВыписалНалоговуюНакладнуюСсылка, ДанныеПечати.Дата);
	ПечКтоВыписалНалоговуюНакладную = СокрЛП(ЧастиИмени.Имя) + " " + ВРег(СокрЛП(ЧастиИмени.Фамилия)); 
	// Выводим параметры 
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
		
	// ЕДРПОУ продавца
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_"+Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	//источник кода продавца
	ИсточникКодаПродавца = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУОрганизации, ПродавецЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаОрганизации = ИсточникКодаПродавца;
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ покупателя
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУКонтрагента_"+Инд] = Сред(ЕДРПОУКонтрагента, Инд, 1);
	КонецЦикла; 
	
	//источник кода покупателя
	ИсточникКодаПокупателя = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУКонтрагента, ПокупательЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаКонтрагента = ИсточникКодаПокупателя;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Отбор = Новый Структура("СтавкаНДС", ВыборкаПоТоварам.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = ВыборкаПоТоварам.СтавкаНДС;
		КонецЕсли;
		
		Строка.СуммаНДС	= Строка.СуммаНДС + ВыборкаПоТоварам.СуммаНДС;  
		Строка.Сумма	= Строка.Сумма + ВыборкаПоТоварам.СуммаБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(ВыборкаПоТоварам.КодЛьготы) ИЛИ ВыборкаПоТоварам.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата));
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.Сумма20   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.Сумма7   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G109", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.Сумма0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G8", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.Сумма0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.СуммаБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВсегоСумма = 0; ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ВсегоСумма = СтрокаТаблицы.Сумма;
		ИтогНДС    = СтрокаТаблицы.СуммаНДС;
	КонецЦикла;
	
	СуммаВозвратнойТары = ДанныеПечати.СуммаВозвратнойТары;
	
	ОбластьМакета.Параметры.Всего    = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС + ВсегоСумма);
	ОбластьМакета.Параметры.ИтогНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС);
	ОбластьМакета.Параметры.ВозвТара = НДСОбщегоНазначенияСервер.ФорматСумм(СуммаВозвратнойТары);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R04G11", ИтогНДС + ВсегоСумма);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G11", ИтогНДС);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11", СуммаВозвратнойТары);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1", ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной);			
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	ОбластьМакетаЗаголовок.Параметры.Освобожденная);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL",	ЕДРПОУОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY",	ЕДРПОУКонтрагента);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKS",		ИсточникКодаПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB",		ИсточникКодаПокупателя);
		
	КонецЕсли;
	
	
	// строки 
	ВыборкаПоТоварам.Сбросить();
	ТекущийНомерСтроки = 0;
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Если НЕ (ЗначениеЗаполнено(ВыборкаПоТоварам.Номенклатура) ИЛИ ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание)) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено наименование (содержание) номенклатуры - проверьте заполнение документа!';uk='В одному з рядків не заповнено найменування (зміст) номенклатури - перевірте заповнення документа!'"), СтатусСообщения.Важное);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
		
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтроки;
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		Если НЕ КодСпецРежима = "2" Тогда
		    ОбластьМакета.Параметры.КодСХ = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.Характеристика), "", "(" + ВыборкаПоТоварам.Характеристика +")")
										 + ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены), " "+ ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены, "")
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, ВыборкаПоТоварам.СтавкаНДС, ДанныеПечати.Дата));
		ОбластьМакета.Параметры.Сумма     = НДСОбщегоНазначенияСервер.ФорматСумм(ВыборкаПоТоварам.СуммаБезНДС, ,"0,00");
		//РасчСуммаНДС6Зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ВыборкаПоТоварам.СуммаБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС), Ложь), 6 );
		РасчСуммаНДС6Зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ВыборкаПоТоварам.СуммаБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС), Ложь), 6 );
		ФорматНДС6Зн = ?(Окр(РасчСуммаНДС6Зн,2) = РасчСуммаНДС6Зн, "ЧЦ=15; ЧДЦ=2; ЧН=' '", "ЧЦ=19; ЧДЦ=6; ЧН=' '");
		ОбластьМакета.Параметры.СуммаНДС6зн     = СокрЛ(Формат(РасчСуммаНДС6Зн, ФорматНДС6Зн));
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = ВыборкаПоТоварам.СуммаБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.Сумма = "";
			ОбластьМакета.Параметры.СуммаНДС6зн = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина 
				И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			СтрокаСтруктуры.G5 			= ОбластьМакета.Параметры.Количество;
			СтрокаСтруктуры.G6 			= ОбластьМакета.Параметры.ЦенаБезНДС;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
			СтрокаСтруктуры.G11_10  	= ОбластьМакета.Параметры.СуммаНДС6зн;
			СтрокаСтруктуры.ROWNUM		= ОбластьМакета.Параметры.НомерСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2018()

Функция СформироватьПечатнуюФорму2021Мес3(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G011");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11_10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("ROWNUM");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	КодПризнакаСводнойНаПечать = "";
	Если НЕ (ДанныеПечати.КодПризнакаСводной = 0)Тогда 
		КодПризнакаСводнойНаПечать = Строка(ДанныеПечати.КодПризнакаСводной);
	ИначеЕсли  (ДанныеПечати.Сводная = Истина) Тогда 
		Если ( ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "1";
			  
		ИначеЕсли (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "4";
			  
		ИначеЕсли (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "3";
	    КонецЕсли;
	КонецЕсли;
	ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной = КодПризнакаСводнойНаПечать;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);

	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
	// Выводим отступ
	ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("    " + Формат(Число(ДанныеПечати.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	ФилиалПокупателяКодПоЕДРПОУ = "";
	ДополнениеКНаименованиюКонтрагента = "";
	КодЕДРПОУГоловногоКонтрагента = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
			ФилиалПокупателяКодПоЕДРПОУ = Сред(ДанныеПечати.ФилиалПокупателя, ПозицияСобачки + 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
		Если ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) И ДанныеПечати.ГоловнойКонтрагент <> ДанныеПечати.Контрагент Тогда
			СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
			КодЕДРПОУГоловногоКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "КодПоЕДРПОУ,", Ложь);
			Если ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
				ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФилиалПокупателяКодПоЕДРПОУ) И ЗначениеЗаполнено(КодЕДРПОУГоловногоКонтрагента) Тогда
			ФилиалПокупателяКодПоЕДРПОУ = КодЕДРПОУГоловногоКонтрагента;
		КонецЕсли;
		ФилиалПокупателяКодПоЕДРПОУ = Прав("          " + СокрЛП(ФилиалПокупателяКодПоЕДРПОУ), 10);
	КонецЕсли;
	
	ПродавецЮрлицо = Истина;
	ПокупательЮрлицо = Истина;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Адрес = НайденныеСтроки[0];
				
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
					РезультатыЧтения = Новый Структура;
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Иначе
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
				КонецЕсли;
				
				Страна = XDTOКонтактная.Состав.Страна;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		ЕДРПОУОрганизации					= "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		ЕДРПОУОрганизации					= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);
		Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда 
			ЕДРПОУОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"             ,Ложь);
			ПродавецЮрлицо = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	ЕДРПОУОрганизации	= Прав("            " + СокрЛП(ЕДРПОУОрганизации), 10);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда 
	 // в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУКонтрагента = "";
		
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		ЕДРПОУКонтрагента = ЕДРПОУОрганизации;
		ПокупательЮрлицо = ПродавецЮрлицо;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			Если ПустаяСтрока(ФилиалПокупателяКодПоЕДРПОУ) Тогда 
				ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь);
				Если НЕ ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоДРФО," ,Ложь);
					ПокупательЮрлицо = Ложь;
				КонецЕсли;
			Иначе
				ЕДРПОУКонтрагента = ФилиалПокупателяКодПоЕДРПОУ;
			КонецЕсли;
		Иначе
			ЕДРПОУКонтрагента = "";
		КонецЕсли;
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7 Тогда
			
			// поставка на экспорт
			ИННКонтрагента = "300000000000";
			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Адрес = НайденныеСтроки[0];
					
					Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
						РезультатыЧтения = Новый Структура;
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
					Иначе
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
					КонецЕсли;
					
					Страна = XDTOКонтактная.Состав.Страна;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	ЕДРПОУКонтрагента	= Прав("            " + СокрЛП(ЕДРПОУКонтрагента), 10);
	
	ЧастиИмени = ФизическиеЛицаУТ.ФамилияИмяОтчество(ДанныеПечати.КтоВыписалНалоговуюНакладнуюСсылка, ДанныеПечати.Дата);
	ПечКтоВыписалНалоговуюНакладную = СокрЛП(ЧастиИмени.Имя) + " " + ВРег(СокрЛП(ЧастиИмени.Фамилия)); 
	// Выводим параметры 
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
		
	// ЕДРПОУ продавца
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_"+Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	//источник кода продавца
	ИсточникКодаПродавца = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУОрганизации, ПродавецЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаОрганизации = ИсточникКодаПродавца;
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ покупателя
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУКонтрагента_"+Инд] = Сред(ЕДРПОУКонтрагента, Инд, 1);
	КонецЦикла; 
	
	//источник кода покупателя
	ИсточникКодаПокупателя = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУКонтрагента, ПокупательЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаКонтрагента = ИсточникКодаПокупателя;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Отбор = Новый Структура("СтавкаНДС", ВыборкаПоТоварам.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = ВыборкаПоТоварам.СтавкаНДС;
		КонецЕсли;
		
		Строка.СуммаНДС	= Строка.СуммаНДС + ВыборкаПоТоварам.СуммаНДС;  
		Строка.Сумма	= Строка.Сумма + ВыборкаПоТоварам.СуммаБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(ВыборкаПоТоварам.КодЛьготы) ИЛИ ВыборкаПоТоварам.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата));
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.Сумма20   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7", СтрокаТаблицы.СуммаНДС);
            КонецЕсли;
            
        ИначеЕсли КолонкаДляСуммы = "14" Тогда
        	
        	ОбластьМакета.Параметры.Сумма14   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
        	ОбластьМакета.Параметры.ИтогНДС14 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
        	
        	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
        		СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G14", СтрокаТаблицы.Сумма);
        		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G14", СтрокаТаблицы.СуммаНДС);
        	КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.Сумма7   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G109", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.Сумма0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G8", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.Сумма0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.СуммаБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВсегоСумма = 0; ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ВсегоСумма = СтрокаТаблицы.Сумма;
		ИтогНДС    = СтрокаТаблицы.СуммаНДС;
	КонецЦикла;
	
	СуммаВозвратнойТары = ДанныеПечати.СуммаВозвратнойТары;
	
	ОбластьМакета.Параметры.Всего    = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС + ВсегоСумма);
	ОбластьМакета.Параметры.ИтогНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС);
	ОбластьМакета.Параметры.ВозвТара = НДСОбщегоНазначенияСервер.ФорматСумм(СуммаВозвратнойТары);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R04G11", ИтогНДС + ВсегоСумма);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G11", ИтогНДС);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11", СуммаВозвратнойТары);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1", ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной);			
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	ОбластьМакетаЗаголовок.Параметры.Освобожденная);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL",	ЕДРПОУОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY",	ЕДРПОУКонтрагента);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKS",		ИсточникКодаПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB",		ИсточникКодаПокупателя);
		
	КонецЕсли;
	
	
	// строки 
	ВыборкаПоТоварам.Сбросить();
	ТекущийНомерСтроки = 0;
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Если НЕ (ЗначениеЗаполнено(ВыборкаПоТоварам.Номенклатура) ИЛИ ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание)) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено наименование (содержание) номенклатуры - проверьте заполнение документа!';uk='В одному з рядків не заповнено найменування (зміст) номенклатури - перевірте заповнення документа!'"), СтатусСообщения.Важное);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
		
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтроки;
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		Если НЕ КодСпецРежима = "2" Тогда
		    ОбластьМакета.Параметры.КодСХ = "";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.Характеристика), "", "(" + ВыборкаПоТоварам.Характеристика +")")
										 + ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены), " "+ ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены, "")
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, ВыборкаПоТоварам.СтавкаНДС, ДанныеПечати.Дата));
		ОбластьМакета.Параметры.Сумма     = НДСОбщегоНазначенияСервер.ФорматСумм(ВыборкаПоТоварам.СуммаБезНДС, ,"0,00");
		//РасчСуммаНДС6Зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ВыборкаПоТоварам.СуммаБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС), Ложь), 6 );
		РасчСуммаНДС6Зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ВыборкаПоТоварам.СуммаБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС), Ложь), 6 );
		ФорматНДС6Зн = ?(Окр(РасчСуммаНДС6Зн,2) = РасчСуммаНДС6Зн, "ЧЦ=15; ЧДЦ=2; ЧН=' '", "ЧЦ=19; ЧДЦ=6; ЧН=' '");
		ОбластьМакета.Параметры.СуммаНДС6зн     = СокрЛ(Формат(РасчСуммаНДС6Зн, ФорматНДС6Зн));
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = ВыборкаПоТоварам.СуммаБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.Сумма = "";
			ОбластьМакета.Параметры.СуммаНДС6зн = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина 
				И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.КодСХ = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			СтрокаСтруктуры.G5 			= ОбластьМакета.Параметры.Количество;
			СтрокаСтруктуры.G6 			= ОбластьМакета.Параметры.ЦенаБезНДС;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
			СтрокаСтруктуры.G11_10  	= ОбластьМакета.Параметры.СуммаНДС6зн;
			СтрокаСтруктуры.ROWNUM		= ОбластьМакета.Параметры.НомерСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2018()

Функция СформироватьПечатнуюФорму2023(ДанныеПечати, ВыборкаПоТоварам, Макет, ТабличныйДокумент, ТолькоФормироватьСтруктуруПоказателейПечатнойФормы)
	
	ВРегВалюте = (ДанныеПечати.Валюта = Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей = Новый Структура();
		СтруктураПоказателей.Вставить("НалоговыйДокумент",   	Новый Структура());	// данные налоговой накладной
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R",   	Новый ТаблицаЗначений());  // данные табличной части
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G2D");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G3S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G32");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G33");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G4S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G105_2S");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G5");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G6");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G008");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G009");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G010");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("G11_10");
		СтруктураПоказателей.НалоговыйДокумент.R.Колонки.Добавить("ROWNUM");
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
			// такие операции не предусматривают выписки налоговых накладных
			Возврат	СтруктураПоказателей;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим область "Оригинал"
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Оригинал");
	
	КодПризнакаСводнойНаПечать = "";
	Если НЕ (ДанныеПечати.КодПризнакаСводной = 0)Тогда 
		КодПризнакаСводнойНаПечать = Строка(ДанныеПечати.КодПризнакаСводной);
	ИначеЕсли  (ДанныеПечати.Сводная = Истина) Тогда 
		Если ( ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "1";
			  
		ИначеЕсли (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
			  ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "4";
			  
		ИначеЕсли (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены) Тогда
			  
			  КодПризнакаСводнойНаПечать =  "3";
	    КонецЕсли;
	КонецЕсли;
	ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной = КодПризнакаСводнойНаПечать;
	
	Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	
		ОбластьМакетаЗаголовок.Параметры.Освобожденная = "Без ПДВ";
	
	КонецЕсли;
	
	
	Если НЕ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0 Тогда
		
		// накладная остается у поставщика
		ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца = "Х";
		ОбластьМакетаЗаголовок.Параметры.ТипПричины1 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),1,1);
		ОбластьМакетаЗаголовок.Параметры.ТипПричины2 = Сред(Формат(ДанныеПечати.ТипПричиныНевыдачиПокупателю, "ЧЦ=2;ЧВН="),2,1);

	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
	// Выводим отступ
	ОбластьМакета = Макет.ПолучитьОбласть("Пробел");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	// определим параметры 
	
	// Дата
	ТекДата = Формат(ДанныеПечати.Дата, "ДФ=ddMMyyyy");
	
	// Номер
	ТекНомер = Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер, Истина, Истина)), 7);
	
	// филиал/спецрежим
	КодСпецРежима = ?(ЗначениеЗаполнено(ДанныеПечати.СпецРежимНалогообложения), "" + ДанныеПечати.СпецРежимНалогообложения, " "); //или пробел или одна цифра
	Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
		КодСпецРежима = "5";
	КонецЕсли;
	
	ФилиалПродавца   = ?(ЗначениеЗаполнено(ДанныеПечати.Префикс), Прав("    " + Формат(Число(ДанныеПечати.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
	ФилиалПокупателя = "";
	ФилиалПокупателяКодПоЕДРПОУ = "";
	ДополнениеКНаименованиюКонтрагента = "";
	КодЕДРПОУГоловногоКонтрагента = "";
	Если ЗначениеЗаполнено(ДанныеПечати.ФилиалПокупателя) Тогда
		ПозицияСобачки = Найти(ДанныеПечати.ФилиалПокупателя, "@");
		Если ПозицияСобачки > 0 Тогда
			ФилиалПокупателя = Сред(ДанныеПечати.ФилиалПокупателя, 1, ПозицияСобачки - 1);
			ФилиалПокупателяКодПоЕДРПОУ = Сред(ДанныеПечати.ФилиалПокупателя, ПозицияСобачки + 1);
		Иначе
			ФилиалПокупателя = ДанныеПечати.ФилиалПокупателя;
		КонецЕсли;
		ФилиалПокупателя = Прав("    " + СокрЛП(ФилиалПокупателя), 4);
		Если ЗначениеЗаполнено(ДанныеПечати.ГоловнойКонтрагент) И ДанныеПечати.ГоловнойКонтрагент <> ДанныеПечати.Контрагент Тогда
			СведенияОГоловномКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнойКонтрагент, ДанныеПечати.Дата);
			КодЕДРПОУГоловногоКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "КодПоЕДРПОУ,", Ложь);
			Если ДанныеПечати.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Истина Тогда
				ДополнениеКНаименованиюКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловномКонтрагенте, "ПолноеНаименование,", Ложь) + ", " ;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФилиалПокупателяКодПоЕДРПОУ) И ЗначениеЗаполнено(КодЕДРПОУГоловногоКонтрагента) Тогда
			ФилиалПокупателяКодПоЕДРПОУ = КодЕДРПОУГоловногоКонтрагента;
		КонецЕсли;
		ФилиалПокупателяКодПоЕДРПОУ = Прав("          " + СокрЛП(ФилиалПокупателяКодПоЕДРПОУ), 10);
	КонецЕсли;
	
	ПродавецЮрлицо = Истина;
	ПокупательЮрлицо = Истина;
	
	ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = Ложь;
	
	НастройкиПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СрезПоследних(ДанныеПечати.Дата, Новый Структура("Организация", ДанныеПечати.Организация));
	Если НастройкиПечати.Количество() > 0 Тогда
		ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН = НастройкиПечати[0].ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН;
	КонецЕсли;
	
	// дополнения к наименованию организации и контрагента
	ДополнениеКНаименованиюОрганизации = "";
	Если ДополнятьНаименованиеАдресДаннымиГоловнойОрганизацииВНН
	   И ЗначениеЗаполнено(ДанныеПечати.ГоловнаяОрганизация) Тогда
	   	СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ГоловнаяОрганизация, ДанныеПечати.Дата);
		ДополнениеКНаименованиюОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГоловнойОрганизации, "ПолноеНаименование,", Ложь) + ", " ;
	КонецЕсли;
	
	
	////////////////////////////////////////////
	// Продавец
	
	// ИНН, Наименование
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		// налоговые реквизиты не указываются
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ИННОрганизации					= "500000000000";
		НазваниеОрганизации	            = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		// к наименованию организации добавляется страна нерезидента
		Страна = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
			Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Окончание = "Организации";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Окончание = "Контрагента";
			ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				Окончание = "Партнера";
			КонецЕсли;
			
			ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

			ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Адрес = НайденныеСтроки[0];
				
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
					РезультатыЧтения = Новый Структура;
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Иначе
					XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
				КонецЕсли;
				
				Страна = XDTOКонтактная.Состав.Страна;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Страна) Тогда
			Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
		Иначе
			НазваниеОрганизации = НазваниеОрганизации + ", " + Страна;
		КонецЕсли;
		
		// данные по филиалам меняются местами
		ФилиалПокупателя = ФилиалПродавца;
		ФилиалПродавца	 = "";
		ЕДРПОУОрганизации					= "";
			
	Иначе	
		СведенияОПродавце   		    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ИННОрганизации					= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		НазваниеОрганизации	            = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,", Ложь);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеОрганизации = НазваниеОрганизации + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		ЕДРПОУОрганизации					= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);
		Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда 
			ЕДРПОУОрганизации	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"             ,Ложь);
			ПродавецЮрлицо = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ИННОрганизации 				  = Прав("            " + ИННОрганизации, 12);
	ЕДРПОУОрганизации	= Прав("            " + СокрЛП(ЕДРПОУОрганизации), 10);
	
	////////////////////////////////////////////
	// покупатель
	
	// Название, ИНН
	Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС
	 ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда 
	 // в этом случае контрагентом выступает организация
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюОрганизации + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,", Ложь);
		
		Если ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
			ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Иначе	
			Если ДанныеПечати.Сводная = Истина Тогда
			    ИННКонтрагента 	 = "600000000000";
			Иначе	
				ИННКонтрагента 	 = "400000000000";	
			КонецЕсли;
			ФилиалПокупателя = "";			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.НаименованиеФилиала) Тогда
			НазваниеКонтрагента = НазваниеКонтрагента + ДанныеПечати.НаименованиеФилиала;
		КонецЕсли;
		
		ЕДРПОУКонтрагента = "";
		
	ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		НазваниеКонтрагента = НазваниеОрганизации;
		ИННКонтрагента 		= ИННОрганизации;	
		ФилиалПокупателя 	= ФилиалПродавца;
		ЕДРПОУКонтрагента = ЕДРПОУОрганизации;
		ПокупательЮрлицо = ПродавецЮрлицо;
		
	Иначе
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		НазваниеКонтрагента = ДополнениеКНаименованиюКонтрагента + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,",Ложь);
		
		ИННКонтрагента 				  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ИНН," ,Ложь);
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 0  ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			Если ПустаяСтрока(ФилиалПокупателяКодПоЕДРПОУ) Тогда 
				ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь);
				Если НЕ ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
					ЕДРПОУКонтрагента	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоДРФО," ,Ложь);
					ПокупательЮрлицо = Ложь;
				КонецЕсли;
			Иначе
				ЕДРПОУКонтрагента = ФилиалПокупателяКодПоЕДРПОУ;
			КонецЕсли;
		Иначе
			ЕДРПОУКонтрагента = "";
		КонецЕсли;
		
		Если  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 1 Тогда
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		ИначеЕсли  ДанныеПечати.ТипПричиныНевыдачиПокупателю = 12 Тогда
			
			ИННКонтрагента = "200000000000";
			
		ИначеЕсли ДанныеПечати.ТипПричиныНевыдачиПокупателю = 7
			ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 21
			ИЛИ ДанныеПечати.ТипПричиныНевыдачиПокупателю = 22 Тогда
			
			Если ДанныеПечати.ТипПричиныНевыдачиПокупателю = 21 Тогда
				// постачання нерезиденту на митній території України
				ИННКонтрагента = "500000000000";
			Иначе                  
				// поставка на экспорт
				ИННКонтрагента = "300000000000";
			КонецЕсли;

			// к наименованию контрагента добавляется страна нерезидента
			Страна = "";
			
			Если ЗначениеЗаполнено(ДанныеПечати.Контрагент) 
			   И (ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
			
				Если ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Окончание = "Организации";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					Окончание = "Контрагента";
				ИначеЕсли ТипЗнч(ДанныеПечати.Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
					Окончание = "Партнера";
				КонецЕсли;
				
				ВидАдреса = Справочники.ВидыКонтактнойИнформации["Юр" + "Адрес" + Окончание].Ссылка;

				ТабЗн = ДанныеПечати.Контрагент.КонтактнаяИнформация.Выгрузить();
				
				НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Адрес = НайденныеСтроки[0];
					
					Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.ЗначенияПолей) Тогда
						РезультатыЧтения = Новый Структура;
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Адрес.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
					Иначе
						XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(Адрес.ЗначенияПолей, Адрес.Представление, );
					КонецЕсли;
					
					Страна = XDTOКонтактная.Состав.Страна;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Страна) Тогда
				Сообщить("" + ДанныеПечати.Контрагент + ": " + НСтр("ru='Не указана страна регистрации контрагента-нерезидента (в контактной информации)! Страна регистрации в налоговой накладной заполнена не будет!';uk='Не вказана країна реєстрації контрагента-нерезидента (у контактній інформації)! Країна реєстрації в податковій накладній заповнена не буде!'"));
			Иначе
				НазваниеКонтрагента = НазваниеКонтрагента + ", " + Страна;
			КонецЕсли;
			
		ИначеЕсли НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(ДанныеПечати.Контрагент, ДанныеПечати.Дата) Тогда 
			
			ИННКонтрагента = "100000000000";
			НазваниеКонтрагента = "Неплатник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагента = Прав("            " + ИННКонтрагента, 12);
	ЕДРПОУКонтрагента	= Прав("            " + СокрЛП(ЕДРПОУКонтрагента), 10);
	
	ЧастиИмени = ФизическиеЛицаУТ.ФамилияИмяОтчество(ДанныеПечати.КтоВыписалНалоговуюНакладнуюСсылка, ДанныеПечати.Дата);
	ПечКтоВыписалНалоговуюНакладную = СокрЛП(ЧастиИмени.Имя) + " " + ВРег(СокрЛП(ЧастиИмени.Фамилия)); 
	// Выводим параметры 
	
	// Дата
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["Дата_"+Инд]    = Сред(ТекДата, Инд, 1);
	КонецЦикла; 
	
	// Номер
	Для Инд = 1 По 7 Цикл                                                                 
		ОбластьМакета.Параметры["Номер_"+Инд]    = Сред(ТекНомер, Инд, 1);
	КонецЦикла; 
	
	// код спец. режима
	ОбластьМакета.Параметры.СпецРежим = КодСпецРежима;
	
	// наименование продавца
	ОбластьМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	// ИНН продавца
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННОрганизации_"+Инд] = Сред(ИННОрганизации, Инд, 1);
	КонецЦикла; 
	
	// филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПродавца_"+Инд]    = Сред(ФилиалПродавца, Инд, 1);
	КонецЦикла; 
		
	// ЕДРПОУ продавца
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_"+Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	//источник кода продавца
	ИсточникКодаПродавца = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУОрганизации, ПродавецЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаОрганизации = ИсточникКодаПродавца;
	
	// название покупателя
	ОбластьМакета.Параметры.НазваниеКонтрагента = НазваниеКонтрагента;
	
	// ИНН покупателя
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ИННКонтрагента_"+Инд]    = Сред(ИННКонтрагента, Инд, 1);
	КонецЦикла; 
	
	// Филиал
	Для Инд = 1 По 4 Цикл                                                                 
		ОбластьМакета.Параметры["ФилиалПокупателя_"+Инд]    = Сред(ФилиалПокупателя, Инд, 1);
	КонецЦикла; 
	
	// ЕДРПОУ покупателя
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ЕДРПОУКонтрагента_"+Инд] = Сред(ЕДРПОУКонтрагента, Инд, 1);
	КонецЦикла; 
	
	//источник кода покупателя
	ИсточникКодаПокупателя = НДСОбщегоНазначенияСервер.КодИсточникаНалоговогоНомера(ЕДРПОУКонтрагента, ПокупательЮрлицо);
	ОбластьМакета.Параметры.ИсточникКодаКонтрагента = ИсточникКодаПокупателя;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку накладной вместе с итогами
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммаПоСтавкам.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ПечЛьготаНДС = "";
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Отбор = Новый Структура("СтавкаНДС", ВыборкаПоТоварам.СтавкаНДС);
		НайденныеСтроки = ТаблицаСуммаПоСтавкам.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ТаблицаСуммаПоСтавкам.Добавить();
			Строка.СтавкаНДС = ВыборкаПоТоварам.СтавкаНДС;
		КонецЕсли;
		
		Строка.СуммаНДС	= Строка.СуммаНДС + ВыборкаПоТоварам.СуммаНДС;  
		Строка.Сумма	= Строка.Сумма + ВыборкаПоТоварам.СуммаБезНДС;  
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			// выводим информацию по льготе из шапки документа только если хотя бы для одного товара не заполнен код льготы или указан "временный" код 99999999
			Если Не ЗначениеЗаполнено(ПечЛьготаНДС) И (Не ЗначениеЗаполнено(ВыборкаПоТоварам.КодЛьготы) ИЛИ ВыборкаПоТоварам.КодЛьготы = "99999999") Тогда
				ПечЛьготаНДС = ДанныеПечати.ЛьготаНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл           
		КолонкаДляСуммы = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, СтрокаТаблицы.СтавкаНДС, ДанныеПечати.Дата, ДанныеПечати.ТипПричиныНевыдачиПокупателю));
		Если  ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			// данные не заполняются
		ИначеЕсли КолонкаДляСуммы = "20" Тогда
			
			ОбластьМакета.Параметры.Сумма20   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС20 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7", СтрокаТаблицы.СуммаНДС);
            КонецЕсли;
            
        ИначеЕсли КолонкаДляСуммы = "14" Тогда
        	
        	ОбластьМакета.Параметры.Сумма14   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
        	ОбластьМакета.Параметры.ИтогНДС14 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
        	
        	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
        		СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G14", СтрокаТаблицы.Сумма);
        		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G14", СтрокаТаблицы.СуммаНДС);
        	КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "7" Тогда
			
			ОбластьМакета.Параметры.Сумма7   = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			ОбластьМакета.Параметры.ИтогНДС7 = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.СуммаНДС, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G109", СтрокаТаблицы.Сумма);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109", СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "902" Тогда
			
			ОбластьМакета.Параметры.Сумма0Укр = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G8", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "901" Тогда
			
			ОбластьМакета.Параметры.Сумма0Эксп = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		ИначеЕсли КолонкаДляСуммы = "903" Тогда
			
			ОбластьМакета.Параметры.СуммаБезНДС = НДСОбщегоНазначенияСервер.ФорматСумм(СтрокаТаблицы.Сумма, ,"0,00");
			
			Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.Сумма);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВсегоСумма = 0; ИтогНДС   = 0;
	ТаблицаСуммаПоСтавкам.Свернуть("", "Сумма, СуммаНДС");
	Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
		ВсегоСумма = СтрокаТаблицы.Сумма;
		ИтогНДС    = СтрокаТаблицы.СуммаНДС;
	КонецЦикла;
	
	СуммаВозвратнойТары = ДанныеПечати.СуммаВозвратнойТары;
	
	ОбластьМакета.Параметры.Всего    = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС + ВсегоСумма);
	ОбластьМакета.Параметры.ИтогНДС  = НДСОбщегоНазначенияСервер.ФорматСумм(ИтогНДС);
	ОбластьМакета.Параметры.ВозвТара = НДСОбщегоНазначенияСервер.ФорматСумм(СуммаВозвратнойТары);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R04G11", ИтогНДС + ВсегоСумма);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G11", ИтогНДС);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11", СуммаВозвратнойТары);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ИННКтоВыписалНН = СокрЛП(ДанныеПечати.ИННКтоВыписалНН);
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1", ОбластьМакетаЗаголовок.Параметры.КодПризнакаСводной);			
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	ОбластьМакетаЗаголовок.Параметры.Освобожденная);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	ОбластьМакетаЗаголовок.Параметры.ВсеЭкзОстаютсяУПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ОбластьМакетаЗаголовок.Параметры.ТипПричины1 + ОбластьМакетаЗаголовок.Параметры.ТипПричины2);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL",	ДанныеПечати.Дата);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM",		Прав(ТекНомер,7));
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1",	КодСпецРежима);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2",	ФилиалПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY",	ФилиалПокупателя);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL",	НазваниеОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY",	НазваниеКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL",	ИННОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY",	ИННКонтрагента);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS",		ПечКтоВыписалНалоговуюНакладную);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS",	ИННКтоВыписалНН);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL",	ЕДРПОУОрганизации);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY",	ЕДРПОУКонтрагента);
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	ПечЛьготаНДС);	
		
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKS",		ИсточникКодаПродавца);
		СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB",		ИсточникКодаПокупателя);
		
	КонецЕсли;
	
	
	// строки 
	ВыборкаПоТоварам.Сбросить();
	ТекущийНомерСтроки = 0;
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Если НЕ (ЗначениеЗаполнено(ВыборкаПоТоварам.Номенклатура) ИЛИ ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание)) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено наименование (содержание) номенклатуры - проверьте заполнение документа!';uk='В одному з рядків не заповнено найменування (зміст) номенклатури - перевірте заповнення документа!'"), СтатусСообщения.Важное);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("РазделI");
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
		
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки = ТекущийНомерСтроки;
		
		ОбластьМакета.Параметры.КодУКТВЭД = СтрЗаменить(ОбластьМакета.Параметры.КодУКТВЭД, " ", "");
		
		Если ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
			ОбластьМакета.Параметры.КодДКПП   = ОбластьМакета.Параметры.КодУКТВЭД;	
			ОбластьМакета.Параметры.КодУКТВЭД = "";
		ИначеЕсли ВыборкаПоТоварам.КодВид = Перечисления.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного Тогда
			ОбластьМакета.Параметры.Импортированный = "X";
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Параметры, "ЕдиницаИзмеренияКод") Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Номенклатура = ?(ЗначениеЗаполнено(ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Содержание), СокрП("" + ВыборкаПоТоварам.Номенклатура)) 
										 + ?(НЕ ЗначениеЗаполнено(ВыборкаПоТоварам.Характеристика), "", "(" + ВыборкаПоТоварам.Характеристика +")")
										 + ?(ЗначениеЗаполнено(ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены), " "+ ВыборкаПоТоварам.ТекстДополненияКНаименованиюПриПродажеНижеОбычнойЦены, "")
										 ;
										 
		// Определим в какую колонку (в зависимости от ставки НДС) попадает сумма без НДС
		ОбластьМакета.Параметры.КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(ВРегВалюте, ВыборкаПоТоварам.СтавкаНДС, ДанныеПечати.Дата, ДанныеПечати.ТипПричиныНевыдачиПокупателю));
		ОбластьМакета.Параметры.Сумма     = НДСОбщегоНазначенияСервер.ФорматСумм(ВыборкаПоТоварам.СуммаБезНДС, ,"0,00");
		//РасчСуммаНДС6Зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ВыборкаПоТоварам.СуммаБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС), Ложь), 6 );
		РасчСуммаНДС6Зн = Окр(ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ВыборкаПоТоварам.СуммаБезНДС, ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС), Ложь), 6 );
		ФорматНДС6Зн = ?(Окр(РасчСуммаНДС6Зн,2) = РасчСуммаНДС6Зн, "ЧЦ=15; ЧДЦ=2; ЧН=' '", "ЧЦ=19; ЧДЦ=6; ЧН=' '");
		ОбластьМакета.Параметры.СуммаНДС6зн     = СокрЛ(Формат(РасчСуммаНДС6Зн, ФорматНДС6Зн));
		
		Если    ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
		    ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
			ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КодЛьготы) Тогда
				ОбластьМакета.Параметры.КодЛьготы = "99999999";
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.КодЛьготы = "";	
			
		КонецЕсли;
		
		ДанныеОСумме = ВыборкаПоТоварам.СуммаБезНДС;
		
		Если ДанныеПечати.СоглашениеОРазделеПродукции = Истина Тогда
			
			ОбластьМакета.Параметры.Номенклатура = "розподіл сум податкового кредиту за багатосторонньою угодою про розподіл продукції";
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.Сумма = "";
			ОбластьМакета.Параметры.СуммаНДС6зн = "";
			
			ДанныеОСумме = 0;
			
		ИначеЕсли ДанныеПечати.Сводная = Истина 
				И (ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
					ИЛИ ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов) Тогда
				
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.Количество = "";
			ОбластьМакета.Параметры.ЦенаБезНДС = "";
			ОбластьМакета.Параметры.КодСтавки = "";
			ОбластьМакета.Параметры.КодЛьготы = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "грн";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		ИначеЕсли ДанныеПечати.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			
			// п 16. 9) не заполняются данные по номенклатуре:
			ОбластьМакета.Параметры.КодУКТВЭД = "";
			ОбластьМакета.Параметры.КодДКПП = "";
			ОбластьМакета.Параметры.Импортированный = "";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
			
			СтрокаСтруктуры = СтруктураПоказателей.НалоговыйДокумент.R.Добавить();
			
			СтрокаСтруктуры.G3S 		= ОбластьМакета.Параметры.Номенклатура;
			СтрокаСтруктуры.G4  		= ОбластьМакета.Параметры.КодУКТВЭД;
			СтрокаСтруктуры.G32  		= ОбластьМакета.Параметры.Импортированный;
			СтрокаСтруктуры.G33  		= ОбластьМакета.Параметры.КодДКПП;
			
			СтрокаСтруктуры.G4S     	= ОбластьМакета.Параметры.ЕдиницаИзмерения;
			СтрокаСтруктуры.G105_2S 	= ОбластьМакета.Параметры.ЕдиницаИзмеренияКод;
			
			СтрокаСтруктуры.G5 			= ОбластьМакета.Параметры.Количество;
			СтрокаСтруктуры.G6 			= ОбластьМакета.Параметры.ЦенаБезНДС;
			
			СтрокаСтруктуры.G008  		= ОбластьМакета.Параметры.КодСтавки;
			СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
			СтрокаСтруктуры.G010  		= ДанныеОСумме;
			СтрокаСтруктуры.G11_10  	= ОбластьМакета.Параметры.СуммаНДС6зн;
			СтрокаСтруктуры.ROWNUM		= ОбластьМакета.Параметры.НомерСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.КтоВыписалНалоговуюНакладную = ПечКтоВыписалНалоговуюНакладную;	
	
	// ДРФО того, кто выписал НН
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ИННКтоВыписалНН_"+Инд] = Сред(ИННКтоВыписалНН, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ЛьготаНДС = ПечЛьготаНДС;	
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
	Если ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина Тогда
		Возврат СтруктураПоказателей;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // СформироватьПечатнуюФорму2018()

// Функция по СтавкеНДС определяет суффикс имени параметра табличного документа:
// фактически колонку таблицы налоговой накладной 20%, 0%... где должна отображаться соответствующая сумма
//
Функция ОпределитьКолонкуТаблицы(ВРегВалюте, СтавкаНДС=Неопределено, Дата='00010101', ТипПричиныНевыдачи = Неопределено)	
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		Возврат "20"
    ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС14 Тогда
    	Если НДСОбщегоНазначенияПовтИсп.ДатаНачалаДействияФормыНДС14() <= Дата Тогда
    		Возврат "14";	
    	Иначе	
    		Возврат "0Укр";	
    	КонецЕсли;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
		Если '2014-12-01' <= Дата  Тогда
			Возврат "7";	
		Иначе	
			Возврат "0Укр";	
		КонецЕсли;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Если ТипПричиныНевыдачи <> Неопределено Тогда
			Если ТипПричиныНевыдачи = 7 Тогда
				Возврат "0Эксп";
			Иначе
				Возврат "0Укр";
			КонецЕсли;
		Иначе
			Если НЕ ВРегВалюте Тогда
				Возврат "0Эксп";
			Иначе
				Возврат "0Укр";
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат "БезНДС";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ОпределитьКолонкуТаблицы

Функция ОпределитьКодСтавки(ИмяКолонки)

	Если ИмяКолонки = "0Эксп" Тогда
		Возврат "901";	
	ИначеЕсли ИмяКолонки = "0Укр" Тогда
		Возврат "902";		
	ИначеЕсли ИмяКолонки = "БезНДС" Тогда
		Возврат "903";		
	ИначеЕсли ИмяКолонки = "7" Тогда
		Возврат "7";	
    ИначеЕсли ИмяКолонки = "14" Тогда
    	Возврат "14";
	Иначе
		Возврат "20";	
	КонецЕсли;	

КонецФункции // ОпределитьКодСтавки()

#КонецОбласти

#Область Прочее

// Обновляет значение реквизита ЛьготаНДС при изменении номенклатуры или вида операции
Функция ОбновитьЗначениеЛьготыНДС(ВидОперации, ЛьготаНДС, СтрокаНоменклатура = Неопределено, Товары = Неопределено, ЛьготаНДСОписание = Неопределено) Экспорт
	
	Если Не (    ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		     ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации
			 ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		     ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации) Тогда
		Возврат ЛьготаНДС;
	КонецЕсли; 
	
	Если СтрокаНоменклатура = Неопределено Тогда
		
		Если Товары = Неопределено Тогда
			Возврат ЛьготаНДС;
		Иначе
			
			Для каждого Элемент Из Товары Цикл
		
				ОбновитьЗначениеЛьготыНДС(ВидОперации, ЛьготаНДС, Элемент);
		
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ЛьготаНДС = СокрЛП(ЛьготаНДС);

		ЛьготаТовара = СокрЛП(СтрокаНоменклатура.ЛьготаНДС);
		Если СтрДлина(ЛьготаТовара) = 0 Тогда
			Возврат ЛьготаНДС;
		КонецЕсли; 
		
		Если Найти(ЛьготаНДС, ЛьготаТовара) = 0 Тогда
			
			Если СтрДлина(ЛьготаНДС) = 0 Тогда
			    ЛьготаНДС = ЛьготаТовара;
			Иначе	
			    ЛьготаНДС = ЛьготаНДС + ", " + ЛьготаТовара;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЛьготаНДС) Тогда
		ЛьготаНДСОписание = "Постачання за " + ЛьготаНДС + " Кодексу";
	Иначе
		ЛьготаНДСОписание = "";	
	КонецЕсли;
	
	Возврат ЛьготаНДС;
	
КонецФункции

Процедура ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект, СтатьяДекларацииНДСНалоговыеОбязательства, СтавкаНДС) Экспорт
	
	ВидОперации = Объект.ВидОперации;
	Контрагент = Объект.Контрагент;
	ДоговорКонтрагента = Объект.Договор;
	ТипПричиныНевыдачиПокупателю = Объект.ТипПричиныНевыдачиПокупателю;
	Дата = Объект.Дата;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если  ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа Тогда
		
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов Тогда
		
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20ПоставкаОФ;		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНерезидентУслуги;	
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20;
        
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС14 Тогда
		
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20;
        
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
		
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20;
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		
		// 0%
		Если ЗначениеЗаполнено(ДоговорКонтрагента) 
			   И ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			
			// договор - внешнеэкономический
			СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Экспорт;	
			
		ИначеЕсли ЗначениеЗаполнено(Контрагент) 
					И Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			// хоть документ и в гривне, но считаем это поставкой на экспорт
			СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Экспорт;
			
		Иначе
			
			// на терриории Украины
			СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Другие;
			
		КонецЕсли;
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		
		// освобожденные операции (п.5 Закона)
		Если ТипПричиныНевыдачиПокупателю = 7 И Дата >= '2020-01-01' Тогда
			СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОблагЭкспорт;
		Иначе
			СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден;
		КонецЕсли;
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда
		
		// операция не является объектом налогообложения (п.3 Закона)
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог;
		
	Иначе
		
		//в строке ТЧ не указаны ставка НДС
		СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораТипПричиныНевыдачиПокупателю(СписокВыбора, ПродажаНижеОбычнойЦены, Дата) Экспорт
	
	СписокВыбора.Очистить();

	Если НЕ ПродажаНижеОбычнойЦены Тогда
		
		СписокВыбора.Добавить(0, " - Податкова накладна видається покупцю");
		
		СписокВыбора.Добавить(1, "01-Складена на суму збільшення компенсації вартості поставлених товарів/послуг (для податкових накладних, особливості заповнення яких викладені в пункті 13 цього Порядку)");
    	СписокВыбора.Добавить(2, "02-Постачання неплатнику податку");
		
		СписокВыбора.Добавить(3, "03-Натуральна виплата в рахунок оплати праці фізичним особам");
		
		СписокВыбора.Добавить(4, "04-Постачання у межах балансу для невиробничого використання");
		
		СписокВыбора.Добавить(5, "05-Ліквідація основних фондів за самостійним рішенням платника податку");
		
		СписокВыбора.Добавить(6, "06-Переведення основних фондів до складу невиробничих");
		
		СписокВыбора.Добавить(7, "07-Експортні постачання");
		
		СписокВыбора.Добавить(8, "08-Постачання для операцій, які не є об'єктом оподаткування податком на додану вартість");
		
		СписокВыбора.Добавить(9, "09-Постачання для операцій, які звільнені від оподаткування податком на додану вартість");
		
		СписокВыбора.Добавить(10, "10-Визнання умовного постачання товарних залишків та/або основних фондів, що перебувають 
			|в обліку платника податку на день анулювання його реєстрації як платника податку на додану вартість,
			|щодо яких був нарахований податковий кредит у минулих або поточному податкових періодах
			|при анулюванні реєстрації платника податку на додану вартість");
		
		СписокВыбора.Добавить(11, "11-Виписана за щоденними підсумками операцій");
		
		СписокВыбора.Добавить(12, "12-Складена на постачання неплатнику, в якій зазначається назва покупця (для податкових накладних, особливості заповнення яких викладені в пункті 10 цього Порядку)");
		
		СписокВыбора.Добавить(13, "13-Використання виробничих або невиробничих засобів, інших товарів/послуг не у господарській діяльності");
	
		СписокВыбора.Добавить(14, "14-Виписана покупцем (отримувачем) послуг від нерезидента");
		
		СписокВыбора.Добавить(21, "21-Складена на постачання послуг отримувачу (покупцю) нерезиденту, місце постачання яких розташоване на митній території України");

		СписокВыбора.Добавить(22, "22-Складена на операції з вивезення за межі митної території України товарів, до яких застосовано режим експортного забезпечення, що підлягають оподаткуванню податком на додану вартість за основною ставкою або ставкою 14%"); 
		
	Иначе
	
		// СписокВыбора.Добавить(1, "01-Виписана на суму перевищення звичайної ціни над фактичною");
		
		
		Если Дата >= '2017-03-16' Тогда
			
			СписокВыбора.Добавить(15, "15-Складена на суму перевищення бази оподаткування, визначеної відповідно до статей 188 і 189 Податкового кодексу України, над фактичною ціною постачання");
			
		ИначеЕсли Дата >= '2015-01-01' Тогда
			
			СписокВыбора.Добавить(15, "15-Складена на суму перевищення ціни придбання товарів/послуг над фактичною ціною їх постачання"); 
	
			СписокВыбора.Добавить(16, "16-Складена на суму перевищення балансової (залишкової) вартості необоротних активів над фактичною ціною їх постачання"); 
			
            // СписокВыбора.Добавить(17, "17-Складена на суму перевищення собівартості самостійно виготовлених товарів/послуг над фактичною ціною їх постачання"); 
			СписокВыбора.Добавить(17, "17-складена на суму перевищення звичайної ціни самостійно виготовлених товарів/послуг над фактичною ціною їх постачання"); 

 			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект) Экспорт
	
	ПоставкаНеплательщику = Ложь;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если НЕ Объект.Контрагент.ПлательщикНДС
   		 ИЛИ Найти("0123456789", Лев(СокрЛ(Объект.Контрагент.ИННПлательщикаНДС),1)) = 0 Тогда		
			ПоставкаНеплательщику = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		
		ОрганизацияПлательщикНДС = НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Объект.Контрагент, Объект.Дата);
		
		Если НЕ ОрганизацияПлательщикНДС Тогда		
			ПоставкаНеплательщику = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		
		Объект.ТипПричиныНевыдачиПокупателю = 14;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		//Если Объект.ТоварыПоДаннымПользователя.Итог("СуммаСНДС") = 0 Тогда
		//	Объект.ТипПричиныНевыдачиПокупателю = 12;
		//Иначе
			//Если Объект.Дата >= '2015-01-01' Тогда
			Объект.ТипПричиныНевыдачиПокупателю = 15;
			//Иначе
//				Объект.ТипПричиныНевыдачиПокупателю = 1;
//			КонецЕсли;
		//КонецЕсли;

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов Тогда
		
	    Объект.ТипПричиныНевыдачиПокупателю = 13;
	
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС Тогда
		
	    Объект.ТипПричиныНевыдачиПокупателю = 5;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации 
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации Тогда
		
	    Объект.ТипПричиныНевыдачиПокупателю = 11;
		
	Иначе

		ТипПричиныНевыдачиНерезиденту = Неопределено;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			
			ЕстьУслуги = Ложь;
			ЕстьТоварыПоНулевойСтавке = Ложь;
			ЕстьДругиеОперации = Ложь;
			
			ТЧ = ?(Объект.СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ,
				Объект.ТоварыПоДаннымПользователя, Объект.Товары);
				
			Для каждого СтрокаТЧ Из ТЧ Цикл
				
				Если СтрокаТЧ.КодНоменклатурыПоКлассификатору.Вид = Перечисления.ВидыКодовДляНалоговойНакладной.КодУслуги Тогда
					ЕстьУслуги = Истина;
				Иначе
					Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						ЕстьТоварыПоНулевойСтавке = Истина;
					Иначе
						ЕстьДругиеОперации = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЕстьДругиеОперации Тогда
				Если ЕстьТоварыПоНулевойСтавке Тогда
					ТипПричиныНевыдачиНерезиденту = 7;
				ИначеЕсли ЕстьУслуги Тогда
					ТипПричиныНевыдачиНерезиденту = 21;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипПричиныНевыдачиНерезиденту <> Неопределено Тогда

			Объект.ТипПричиныНевыдачиПокупателю = ТипПричиныНевыдачиНерезиденту;
		
		ИначеЕсли ПоставкаНеплательщику Тогда
			
			Объект.ТипПричиныНевыдачиПокупателю = 2;
		
		Иначе	
			
			Объект.ТипПричиныНевыдачиПокупателю = 0;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Объект.ТипПричиныНевыдачиПокупателю > 0 Тогда
		Если Объект.Дата < '2015-01-01' Тогда
			Объект.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных = Ложь;	
		КонецЕсли;
		Объект.СтатусВыдачиПокупателю = Перечисления.СтатусыВыдачиПокупателюНалоговыхДокументов.НеВыданПокупателю;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержаниеДляУсловнойПродажи(ОбъектЗаполненияСодержанияУсловнаяПродажа, Содержание) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектЗаполненияСодержанияУсловнаяПродажа) Тогда
		Если ТипЗнч(ОбъектЗаполненияСодержанияУсловнаяПродажа) = Тип("ДокументСсылка.РегистрацияВходящегоНалоговогоДокумента") Тогда
			Содержание = "Податкова накладна №" + ОбъектЗаполненияСодержанияУсловнаяПродажа.НомерВходящегоДокумента + " від " + Формат(ОбъектЗаполненияСодержанияУсловнаяПродажа.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
		ИначеЕсли ТипЗнч(ОбъектЗаполненияСодержанияУсловнаяПродажа) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
			Содержание = "Податкова накладна №" + ОбъектЗаполненияСодержанияУсловнаяПродажа.Номер + " від " + Формат(ОбъектЗаполненияСодержанияУсловнаяПродажа.Дата, "ДФ=dd.MM.yyyy");
		Иначе
			Содержание = Строка(ОбъектЗаполненияСодержанияУсловнаяПродажа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Функция МассивВидовОперацийНеИспользуетсяВозвратнаяТара() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента"));
	
	Возврат Результат;

КонецФункции // МассивВидовОперацийНеИспользуетсяВозвратнаяТара()

Процедура ЗаполнитьСуммыРеглВТабличныхЧастях(Объект, ИмяТЧ = Неопределено) Экспорт
	
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить(); 
	СтруктураКурсовВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата); 
	
	ТабличныеЧасти = Новый Массив;                                          
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		ТабличныеЧасти.Добавить(ИмяТЧ);
	Иначе
		ТабличныеЧасти.Добавить("Товары");
		ТабличныеЧасти.Добавить("ТоварыПоДаннымПользователя");
	КонецЕсли;
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть = "ТоварыПоДаннымПользователя" И Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
			ИмяСуммыБезНДС = "СуммаПревышения";
		Иначе
			ИмяСуммыБезНДС = "СуммаБезНДС";
		КонецЕсли;
			
		ПогрешностиОкругленияСуммыБезНДС = Новый Соответствие;
		ПогрешностиОкругленияНДС = Новый Соответствие;
		
		Для каждого СтрокаТаблицы ИЗ Объект[ТабличнаяЧасть] Цикл
			
			СтрокаТаблицы.СуммаБезНДСРегл = НДСИсходящийСервер.ОкруглитьСУчетомПогрешности(
				НДСОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаблицы[ИмяСуммыБезНДС],
					СтруктураКурсовВалюты.Валюта, ВалютаРегУчета,
					СтруктураКурсовВалюты.Курс, 1,
					СтруктураКурсовВалюты.Кратность, 1),
				2,, ПогрешностиОкругленияСуммыБезНДС, СтрокаТаблицы.СтавкаНДС);
				
			СтрокаТаблицы.СуммаНДСРегл = НДСИсходящийСервер.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаБезНДСРегл,
				Ложь,
				СтрокаТаблицы.СтавкаНДС,
				ПогрешностиОкругленияНДС);

			Если СтруктураКурсовВалюты.Валюта = ВалютаРегУчета Тогда
				СтрокаТаблицы.ЦенаРегл = СтрокаТаблицы.Цена;
			ИначеЕсли ИмяСуммыБезНДС = "СуммаПревышения" Тогда
				СтрокаТаблицы.ЦенаРегл = НДСОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаблицы.Цена,
					СтруктураКурсовВалюты.Валюта, ВалютаРегУчета,
					СтруктураКурсовВалюты.Курс, 1,
					СтруктураКурсовВалюты.Кратность, 1); 
			Иначе
				СтрокаТаблицы.ЦенаРегл = СтрокаТаблицы.СуммаБезНДСРегл / ?(СтрокаТаблицы.КоличествоУпаковок = 0, 1, СтрокаТаблицы.КоличествоУпаковок);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Процедура ЗаменитьСсылкиЕдиницИзмерения_ДанныеДляОбновления(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК Т
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Т.ЕдиницаИзмерения) = ТИП(Справочник.УдалитьЕдиницыИзмерения)
    |
    |ОБЪЕДИНИТЬ 
    |
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НалоговаяНакладная.ТоварыПоДаннымПользователя КАК Т
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Т.ЕдиницаИзмерения) = ТИП(Справочник.УдалитьЕдиницыИзмерения)
    |";
	
    ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

Процедура ЗаменитьСсылкиЕдиницИзмерения(Параметры) Экспорт

	ПолноеИмяДокумента = "Документ.НалоговаяНакладная";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
	СоответствиеЕдиницыУпаковки = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Справочники.УпаковкиЕдиницыИзмерения.ЗаменитьСсылкиЕдиницИзмеренияВОбъекте(
                ДокументОбъект, 
                СоответствиеЕдиницыУпаковки, 
                "Товары"
            );
            
			Справочники.УпаковкиЕдиницыИзмерения.ЗаменитьСсылкиЕдиницИзмеренияВОбъекте(
                ДокументОбъект, 
                СоответствиеЕдиницыУпаковки, 
                "ТоварыПоДаннымПользователя"
            );
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();		
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры


// Обработчик обновления BAS УТ 3.2.4
// Заполняет "ОбъектРасчетов" в табличных частях документа
Процедура ПеренестиОбъектРасчетовИзШапкиВТабличныеЧасти_ДанныеДляОбновления(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка.Проведен
	|	И Т.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|	И НЕ Т.Ссылка.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка
	|ИЗ
	|	Документ.НалоговаяНакладная.ТоварыПоДаннымПользователя КАК Т
	|ГДЕ
	|	Т.Ссылка.Проведен
	|	И Т.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|	И НЕ Т.Ссылка.ОбъектРасчетов = НЕОПРЕДЕЛЕНО";
	
    ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );
	
КонецПроцедуры

Процедура ПеренестиОбъектРасчетовИзШапкиВТабличныеЧасти(Параметры) Экспорт

	ПолноеИмяДокумента = "Документ.НалоговаяНакладная";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
    		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
    			Если ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) Тогда
    				Продолжить;
				КонецЕсли;
				
    			СтрокаТЧ.ОбъектРасчетов = ДокументОбъект.ОбъектРасчетов;
			КонецЦикла;
			
			Если ДокументОбъект.СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ Тогда
				Для Каждого СтрокаТЧ Из ДокументОбъект.ТоварыПоДаннымПользователя Цикл
	    			Если ЗначениеЗаполнено(СтрокаТЧ.ОбъектРасчетов) Тогда
	    				Продолжить;
					КонецЕсли;
					
	    			СтрокаТЧ.ОбъектРасчетов = ДокументОбъект.ОбъектРасчетов;
				КонецЦикла;		
			КонецЕсли; 
    		            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
                        
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();		
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры

Процедура ЗаменитьСтатьюДекларацииНДС22_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК Т
	|ГДЕ
	|	Т.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	И Т.Ссылка.Дата >= ДАТАВРЕМЯ(2020, 1, 1)
	|	И Т.Ссылка.ТипПричиныНевыдачиПокупателю = 7
	|	И Т.СтатьяДекларацииНДСНалоговыеОбязательства = ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.НДС_НООсвобожден)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка
	|ИЗ
	|	Документ.НалоговаяНакладная.ТоварыПоДаннымПользователя КАК Т
	|ГДЕ
	|	Т.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	И Т.Ссылка.Дата >= ДАТАВРЕМЯ(2020, 1, 1)
	|	И Т.Ссылка.ТипПричиныНевыдачиПокупателю = 7
	|	И Т.СтатьяДекларацииНДСНалоговыеОбязательства = ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.НДС_НООсвобожден)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, 	РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаменитьСтатьюДекларацииНДС22(Параметры) Экспорт

	ПолноеИмяДокумента = "Документ.НалоговаяНакладная";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
    		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
				
				Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
					И СтрокаТЧ.СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден Тогда
					СтрокаТЧ.СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОблагЭкспорт;
				КонецЕсли;
				
			КонецЦикла;
			
    		Для Каждого СтрокаТЧ Из ДокументОбъект.ТоварыПоДаннымПользователя Цикл
				
				Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
					И СтрокаТЧ.СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден Тогда
					СтрокаТЧ.СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОблагЭкспорт;
				КонецЕсли;
				
			КонецЦикла;
   		            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			Если ДокументОбъект.Проведен Тогда
				
				НаборЗаписей = РегистрыНакопления.НДСРеестрВыданныхНалоговыхДокументов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
				
				ДопСвойства = Новый Структура;
				ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументОбъект.Ссылка, ДопСвойства);
				ИнициализироватьДанныеДокумента(ДокументОбъект.Ссылка, ДопСвойства, "НДСРеестрВыданныхНалоговыхДокументов");
				
				НаборЗаписей.Загрузить(ДопСвойства.ТаблицыДляДвижений["ТаблицаНДСРеестрВыданныхНалоговыхДокументов"]);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				
			КонецЕсли;
                        
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();		
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяДокумента
    );
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
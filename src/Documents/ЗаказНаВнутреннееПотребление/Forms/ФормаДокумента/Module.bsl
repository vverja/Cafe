&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	// Установка списка доступных статусов
	Перечисления.СтатусыВнутреннихЗаказов.ЗаполнитьСписокВыбора(Элементы.Статус.СписокВыбора, 
		ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки") 
		ИЛИ Объект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Товары);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Товары);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда

		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда

		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда

		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		Отказ = Истина;
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Товары",
			"Номенклатура,Характеристика,Количество,,ДатаОтгрузки",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	НастроитьПанельНавигации();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Товары);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Товары);

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОПроведенииДокумента(ПараметрыЗаписи);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Настройки.Удалить("Объект.НеОтгружатьЧастями");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Элемент.ТекущийЭлемент = Элементы.ТоварыВариантОбеспечения И Не ТолькоПросмотр Тогда

		СтандартнаяОбработка = Ложь;
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда 
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
				
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму(
						"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
						ПараметрыФормы,
						ЭтаФорма,
						,
						,
						,
						Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				КонецЕсли;
				
		Иначе

			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();

			Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
				Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки) Тогда

				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
						ЭтаФорма, УникальныйИдентификатор);
				Иначе
					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru='Товары';uk='Товари'"));
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				КонецЕсли;

			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);
	ПарамСтатьи.Вставить("Подразделение", Объект.Подразделение);
	ПарамСтатьи.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПарамСтатьи);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКатегорияЭксплуатацииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакиКатегорииЭксплуатации");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатьяРасходовПриИзменении(Элемент)
	
	ТоварыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
		
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь)); 
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Товары.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Команда.ЗагрузитьДанныеИзТСД");
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходов(Команда)
	
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВыделенныхСтрок(Команда)
	
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
    
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Команда.ПодобратьТовары");
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Склад"" не заполнено';uk='Поле ""Склад"" не заповнено'"), Объект.Ссылка, "Объект.Склад",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.Склад);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru='Подбор товаров';uk='Підбір товарів'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                    ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Назначение",                                Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                             Объект.Подразделение);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",                Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество,,ДатаОтгрузки");
	
КонецПроцедуры

#Область Обеспечение

&НаКлиенте
Процедура ЗаполнитьОбеспечение(Команда)

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();

	Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.Товары, Элементы.Товары.ВыделенныеСтроки, ПараметрыПроверки) Тогда

		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка));
		ПараметрыФормы.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(Команда)
	
	МассивВыделенныхСтрок = Элементы.Товары.ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() > 0 Тогда
		ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуОтгрузкиЗавершение", ЭтотОбъект, Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок));
		
		РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru='Введите дату отгрузки';uk='Введіть дату відвантаження'"), ЧастиДаты.Дата, Оповещение);
		
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе не выбраны строки для заполнения. Дата отгрузки не будет заполнена.';uk='В документі не обрані рядки для заповнення. Дата відвантаження не буде заповнена.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаОтгрузки = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Команда.СостояниеОбеспечения");
	
	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(ЭтаФорма) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Команда.СоздатьКорректировкуНазначенияРезервирование");
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Истина);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru='Для резервирования под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';uk='Для резервування під призначення необхідно попередньо провести документ. Виконати проведення документа і продовжити?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Команда.СоздатьКорректировкуНазначенияСнятиеРезерва");
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Ложь);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru='Для снятия резерва под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';uk='Для зняття резерву під призначення необхідно попередньо провести документ. Виконати проведення документа і продовжити?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВводНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТМЦ(Команда)
	ЗаполнитьТМЦНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТМЦНаСервере()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПартииТМЦВЭксплуатации.Ссылка
		|ПОМЕСТИТЬ Партии
		|ИЗ
		|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦВЭксплуатации
		|ГДЕ
		|	НЕ ПартииТМЦВЭксплуатации.ПометкаУдаления
		|	И ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(ПартииТМЦВЭксплуатации.ДатаЗавершенияЭксплуатации, МЕСЯЦ) = &Период
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТМЦВЭксплуатацииОбороты.Номенклатура,
		|	ТМЦВЭксплуатацииОбороты.Характеристика,
		|	ТМЦВЭксплуатацииОбороты.ФизическоеЛицо,
		|	ТМЦВЭксплуатацииОбороты.Партия.КатегорияЭксплуатации КАК КатегорияЭксплуатации,
		|	ТМЦВЭксплуатацииОбороты.КоличествоОборот КАК Количество,
		|	ТМЦВЭксплуатацииОбороты.КоличествоОборот КАК КоличествоУпаковок
		|ИЗ
		|	РегистрНакопления.ТМЦВЭксплуатации.Обороты(
		|			,
		|			&Период,
		|			,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение
		|				И Партия В
		|					(ВЫБРАТЬ
		|						Партии.Ссылка
		|					ИЗ
		|						Партии КАК Партии)) КАК ТМЦВЭксплуатацииОбороты
		|ГДЕ
		|	ТМЦВЭксплуатацииОбороты.КоличествоОборот > 0");
	Запрос.УстановитьПараметр("Период", КонецМесяца(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Объект.Товары.Очистить();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Команда.ПровестиИЗакрыть");
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("Товары"));

	// Условное оформление обеспечения.
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление,"ДатаОтгрузки", "ДатаОтгрузки", "", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление,"Склад", "Склад", "", "СкладОбязателен");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ТоварыДатаОтгрузки", "ДатаОтгрузки", "Товары", "ДатаОтгрузкиОбязательна");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаВнутреннееПотребление));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	УстановитьВидимость(Истина);
	НастроитьПанельНавигации();
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
		СтрокаТаблицы.АналитикаРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьАналитикуРасходовПоУмолчанию(
			СтрокаТаблицы.СтатьяРасходов,
			Объект);
	Иначе
		ДоходыИРасходыСервер.ОчиститьАналитикуПрочихРасходов(
			СтрокаТаблицы.СтатьяРасходов,
			СтрокаТаблицы.АналитикаРасходов);	
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);
	ПарамСтатьи.Вставить("Подразделение", Объект.Подразделение);
	ПарамСтатьи.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействий.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПарамСтатьи);
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, ДатаОтгрузки, КоличествоУпаковок, ВариантОбеспечения, Серия");
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
			
			СтруктураДействий.Вставить("ЗаполнитьВариантОбеспеченияПоДатеОтгрузки",
				ОбеспечениеКлиентСервер.СтруктураЗаполненияВариантаОбеспечения(Объект, ТекущаяСтрока.ДатаОтгрузки));
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
				Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
		КонецЕсли;
			
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если Объект.НеОтгружатьЧастями И ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		Объект.ДатаОтгрузки = Макс(ВыбранноеЗначение.МаксимальнаяДатаОтгрузки, Объект.ДатаОтгрузки, НачалоДня(ТекущаяДатаСеанса()));
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	ИначеЕсли Объект.НеОтгружатьЧастями Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул")));
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);
	ПарамСтатьи.Вставить("Подразделение", Объект.Подразделение);
	ПарамСтатьи.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПарамСтатьи);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;

	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаВнутреннееПотребление));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад",Объект.Склад));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
    
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		Если ПараметрыФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ВыборСерии", Истина);
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст, ТекущиеДанные) Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = Неопределено;

		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость(ОчищатьСтатьи = Ложь)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	Перем МассивВсехЭлементов;
	Перем МассивЭлементовОперации;
	
	Документы.ЗаказНаВнутреннееПотребление.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Документы.ЗаказНаВнутреннееПотребление.ЗаполнитьИменаЭлементовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехЭлементов,
		МассивЭлементовОперации);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивВсехЭлементов,
		"Видимость",
		Ложь);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементовОперации,
		"Видимость",
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.ТоварыСоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.ТоварыСоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВТабличнойЧасти(ВыделенныеСтроки)
	
	Если Объект.Товары.Количество() > 0 Тогда
	
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить("НаНаправленияДеятельности");
		МассивВариантов.Добавить("НаРасходыБудущихПериодов");
		МассивВариантов.Добавить("НаПрочиеАктивы");
		
		СтруктураПараметры = Новый Структура("ВариантыРаспределенияРасходов, ХозяйственнаяОперация",
			МассивВариантов,
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
		
		Структура = Неопределено;

		
		ОткрытьФорму(
			"ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаВыбораСтатьиИАналитики", 
			СтруктураПараметры,
			ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСтатьиРасходовВТабличнойЧастиЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    Структура = Результат;
    
    Если ЗначениеЗаполнено(Структура) Тогда
        
        Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
            
            Для каждого Строка из ВыделенныеСтроки Цикл
                
                СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Строка);
                
                Если СтрокаТаблицы <> Неопределено Тогда
                    
                    СтрокаТаблицы.СтатьяРасходов = Структура.СтатьяРасходов;
                    СтрокаТаблицы.АналитикаРасходов = Структура.АналитикаРасходов;
                    
                КонецЕсли;
                
            КонецЦикла;
            
        Иначе
            
            Для каждого СтрокаТаблицы из Объект.Товары Цикл
                
                СтрокаТаблицы.СтатьяРасходов = Структура.СтатьяРасходов;
                СтрокаТаблицы.АналитикаРасходов = Структура.АналитикаРасходов;
                
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОПроведенииДокумента(ПараметрыЗаписи)

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимЗаписи",      ПараметрыЗаписи.РежимЗаписи);
	ПараметрыОповещения.Вставить("ЕстьРаспоряжение", Истина);

	Оповестить("Запись_ЗаказНаВнутреннееПотребление", ПараметрыОповещения, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);
	ПарамСтатьи.Вставить("Подразделение", Объект.Подразделение);
	ПарамСтатьи.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПарамСтатьи);	
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействийИзмененныеСтроки.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика,,ДатаОтгрузки",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийИзмененныеСтроки);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПанельНавигации()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьМатериалыВЭксплуатации",
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации);
	
	ОбщегоНазначенияУТ.НастроитьФормуПоПараметрам(ЭтаФорма, СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
    
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");	
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаВнутреннееПотребление));
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад",Объект.Склад));
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	Элементы.ГруппаОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	УстановитьВидимость(Ложь);
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьОбеспечения();
	НастроитьПанельНавигации();
	Элементы.ЗаполнитьОбеспечение.Доступность = Не ТолькоПросмотр;
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).МетаданныеДокумента();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
    
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", Объект.Организация);
	ПарамСтатьи.Вставить("Подразделение", Объект.Подразделение);
	ПарамСтатьи.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействий.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПарамСтатьи);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
	
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

&НаСервере
Функция ПараметрыВыбораОбеспечения()

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ПараметрыЗаполнения = Новый Структура("МенеджерРегистра", РегистрыНакопления.ЗаказыНаВнутреннееПотребление);

	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		Элементы.Товары.ТекущаяСтрока,
		Объект,
		Объект.Товары,
		ПутиКДанным,
		ПараметрыЗаполнения);
        
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
        
    Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
	
	Если Не ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(); // получен, в том числе, параметр "АдресТаблицыПодобраноРанее".
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru='Товары';uk='Товари'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	ПараметрыФормы.Вставить("Склад",                             Объект.Склад);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Ложь);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);
	 
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	

	Возврат ПараметрыФормы
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспечения(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
	ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопроса");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
		ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
		ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
		
		ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
			ЭтаФорма,
			ЗначенияРеквизитов,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопроса");
		
	Иначе
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры);
	
КонецПРоцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	РеквизитыЗаказа = Новый Структура("ЖелаемаяДатаОтгрузки, Ссылка, НеОтгружатьЧастями, Статус, Дата, Партнер, Менеджер");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.Товары, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("ИмяМенеджераРегистра",
		"ЗаказыНаВнутреннееПотребление");

	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.Товары.ТекущаяСтрока);
	КонецЦикла;
	ТекстОповещения = Документы.ЗаказНаВнутреннееПотребление.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокаТовары", ВыбранноеЗначение, ПараметрыУказанияСерий);

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ПереченьВариантов)

	//Описание особенностей формы - дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ПараметрыЗаполнения = Новый Структура("МенеджерРегистра", РегистрыНакопления.ЗаказыНаВнутреннееПотребление);

	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.Товары.ВыделенныеСтроки,
		Объект,
		Объект.Товары,
		ПутиКДанным,
		ПереченьВариантов,
		ПараметрыЗаполнения);

	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура("Ошибки", ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
			Таблица, "Товары", НСтр("ru='Товары';uk='Товари'")));
	КонецЕсли;

	//Перенос результатов в документ.
	ТекстОповещения = Документы.ЗаказНаВнутреннееПотребление.ЗаполнитьВариантОбеспечения(Объект, ЭтаФорма, "СтрокиТовары", Таблица,
			ПараметрыУказанияСерий);

	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение)

	Если ВыбранноеЗначение.ОтгружатьЧастями Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	ТекстОповещения    = Документы.ЗаказНаВнутреннееПотребление.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "Заказ", ТаблицаОбеспечения, ПараметрыУказанияСерий);

	Возврат ТекстОповещения;

КонецФункции

#КонецОбласти

#Область ДатыОтгрузки

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()

	Элементы.ТоварыДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	Элементы.ЗаполнитьДатуОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок)

	ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", ДатаОтгрузки, МассивВыделенныхСтрок);

КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииСервер()

	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = ОбеспечениеСервер.МаксимальноеЗначениеВКоллекции(Объект.Товары, "ДатаОтгрузки", '00010101');
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;

	УстановитьВидимостьЭлементовФормыДатОтгрузки();

КонецПроцедуры

#КонецОбласти

#Область ОтменаСтрок

&НаКлиенте
Процедура ОтменитьНеотработанные(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Команда.ОтменитьНеотработанные");
	
	РезультатОтмены = ОтменитьНеотработанныеСервер();
	
	Если РезультатОтмены.Ошибки.Количество() > 0 Тогда
		ОчиститьСообщения();
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(РезультатОтмены.Ошибки, "Товары", НСтр("ru='Товары';uk='Товари'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru='Отмена неотработанных строк';uk='Скасування невідпрацьованих рядків'"), , РезультатОтмены.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтменитьНеотработанныеСервер()
	
	СтруктураТаблицКОбработке = Документы.ЗаказНаВнутреннееПотребление.ПолучитьТаблицыДляОтменыНеотработанныхСтрок(Объект.Ссылка, Объект.Товары);
	
	Отбор = СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки.Скопировать(, "Ссылка, КодСтроки");
	
	// Фактически отработанное количество товара по накладным.
	ОформитьПоНакладным = РегистрыНакопления.ЗаказыНаВнутреннееПотребление.ТаблицаОформлено(Отбор);
	
	Корректировка = ОбеспечениеСервер.СтруктураКорректировкиОбеспечения(); // получить описание регистра накопления "ТоварыКОтгрузке"
	
	// Фактически отработанное количество товара по ордерам.
	ОформитьПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки, Корректировка.ТоварыКОтгрузке);
	
	РезультатОтмены = ОбеспечениеСервер.ОтменитьНеотработанныеСтроки(Объект, СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки,
		СтруктураТаблицКОбработке.ТаблицаПредварительноОтмененныеСтроки, ОформитьПоНакладным, ОформитьПоОрдерам, Модифицированность);
	
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	Возврат РезультатОтмены;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказНаВнутреннееПотребление.ФормаДокумента.Команда.ОтменитьВыделенныеСтроки");
	
	ОтменитьВыделенныеСтрокиСервер();
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ПоказатьОповещениеПользователя(НСтр("ru='Отмена выделенных строк';uk='Скасування виділених рядків'"), , НСтр("ru='Выделенные строки отменены';uk='Виділені рядки скасовані'"));
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиСервер()
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	КэшированныеЗначения = Неопределено;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Строка = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		Строка.Отменено = Истина;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если Объект.Проведен И Не Модифицированность Тогда
		
		// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать
		ОбъектыОснований = Новый Массив();
		ОбъектыОснований.Добавить(Объект.Ссылка);
		
		ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
		
		Если ДополнительныеПараметры.Резервирование Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ДополнительныеПараметры.ОписаниеКоманды);
		Иначе
			ВводНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ДополнительныеПараметры.ОписаниеКоманды);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

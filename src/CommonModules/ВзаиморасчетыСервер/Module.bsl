
#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииВыбораДокументаРасчетов

Процедура ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора, Текст, СтруктураОтбора, ЭтоУИП = Ложь) Экспорт
	
	ВыборОснованияПлатежа = Истина;
	
	Запрос = Новый Запрос;
	Если СтруктураОтбора.Свойство("ХозяйственнаяОперация")
		И СтруктураОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		
		ПараметрыОтбора = ПараметрыОтбораПриВыбореДокументаРасчетовСПоставщиками();
		ПараметрыОтбора.ВводПоСтроке = Истина;
		
		Запрос.Текст = ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками(ПараметрыОтбора);
		Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", Неопределено);
	Иначе
		
		ПараметрыОтбора = ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами();
		ПараметрыОтбора.ВводПоСтроке = Истина;
		ПараметрыОтбора.ЭтоУИП       = ЭтоУИП;
		
		Запрос.Текст = ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(ВыборОснованияПлатежа, ПараметрыОтбора);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Контрагент", СтруктураОтбора.Контрагент);
	Запрос.УстановитьПараметр("ВыборОснованияПлатежа", ВыборОснованияПлатежа);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеВыбора = Новый Структура("ОснованиеПлатежа, Заказ, Партнер, Контрагент, СтатьяДвиженияДенежныхСредств", 
			Выборка.Ссылка, Выборка.ОбъектРасчетов, Выборка.Партнер, Выборка.Контрагент, Выборка.СтатьяДвиженияДенежныхСредств);
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления",
				ЗначениеВыбора,
				(Выборка.СостояниеДокумента = 1)),
			Строка(Выборка.Ссылка));
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает текст запроса по документам расчетов с клиентами.
Функция ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(ВыборОснованияПлатежа, ПараметрыОтбора) Экспорт
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерПоДаннымКлиента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ЗаказКлиента"), ПараметрыОтбора);
		
	КонецЕсли;
	
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или (Не ДанныеДокумента.РеализацияПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.РеализацияТоваровУслуг"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВыкупВозвратнойТарыКлиентом) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или (Не ДанныеДокумента.АктПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.АктВыполненныхРабот"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионера) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|ГДЕ
		|	ИСТИНА
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомиссионера"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионераОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|ГДЕ
		|	ИСТИНА
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомиссионераОСписании"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|ГДЕ
		|	Не ДанныеДокумента.УдержатьВознаграждение
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомитенту"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента	
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.ОрганизацияПолучатель
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ = &Контрагент
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ // документы на сумму вознаграждения
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Комиссионер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
			
		|	ДанныеДокумента.СуммаВознаграждения,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	(НЕ ДанныеДокумента.УдержатьВознаграждение)
		|	И ДанныеДокумента.СпособРасчетаВознаграждения <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается)
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке 
				Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Комиссионер В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ = &Контрагент
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ДанныеДокумента
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ = &Контрагент
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
				
	КонецЕсли;

	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Договор,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("СправочникСсылка.ДоговорыКонтрагентов"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ВыборОснованияПлатежа И ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуКлиенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств,
		|		ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.ДокументОснование.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|			= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|			ДанныеДокумента.ДокументОснование.Соглашение.СтатьяДвиженияДенежныхСредств
		|		ИНАЧЕ
		|			ДанныеДокумента.ДокументОснование.Договор.СтатьяДвиженияДенежныхСредств
		|		КОНЕЦ
		|		) КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.СчетНаОплатуКлиенту КАК ДанныеДокумента
		|ГДЕ
		|	ИСТИНА
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СчетНаОплатуКлиенту"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияУслугПрочихАктивов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|	
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства)
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|";
		
		ПараметрыОтбораВозврат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтбора);
		ПараметрыОтбораВозврат.Вставить("ЭтоУИП", Ложь);
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ВозвратТоваровОтКлиента"), ПараметрыОтбора);
		
	КонецЕсли;
	

	
	Если Лев(ТекстЗапроса, 10) = "ОБЪЕДИНИТЬ" Тогда
		ТекстЗапроса = Сред(ТекстЗапроса, 15);
	КонецЕсли;
	
	Если ТекстЗапроса = "" Тогда
		
		Возврат "";
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументов.Ссылка                        КАК Ссылка,
		|	ТаблицаДокументов.Дата                          КАК Дата,
		|	ТаблицаДокументов.Номер                         КАК Номер,
		|	ТаблицаДокументов.НомерПоДаннымКонтрагента      КАК НомерПоДаннымКонтрагента,
		|	ТаблицаДокументов.ДатаПоДаннымКонтрагента       КАК ДатаПоДаннымКонтрагента,
		|	ТаблицаДокументов.Организация                   КАК Организация,
		|	ТаблицаДокументов.Партнер                       КАК Партнер,
		|	ТаблицаДокументов.Контрагент                    КАК Контрагент,
		|	ТаблицаДокументов.Договор                       КАК Договор,
		|	ТаблицаДокументов.Сумма                         КАК Сумма,
		|	ТаблицаДокументов.Валюта                        КАК Валюта,
		|	ТаблицаДокументов.Тип                           КАК Тип,
		|	ТаблицаДокументов.ЭтоРасчетыСКлиентами          КАК ЭтоРасчетыСКлиентами,
		|	ТаблицаДокументов.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	ТаблицаДокументов.СостояниеДокумента            КАК СостояниеДокумента,
		|	ТаблицаДокументов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	( " + ТекстЗапроса + " ) КАК ТаблицаДокументов";
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
КонецФункции

// Функция возвращает текст запроса по документам расчетов с поставщиками.
Функция ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками(ПараметрыОтбора) Экспорт
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерПоДаннымПоставщика КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаПоДаннымПоставщика КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ЗаказПоставщику"), ПараметрыОтбора);
		
	КонецЕсли;
	
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровУслуг) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или (Не ДанныеДокумента.ПоступлениеПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПоступлениеТоваровУслуг"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеУслугПрочихАктивов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионера) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	%СтатьяДвиженияДенежныхСредств%
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|ГДЕ
		|	Не ДанныеДокумента.УдержатьВознаграждение
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		Если ПравоДоступа("Чтение", Метаданные.Справочники.СоглашенияСКлиентами) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СтатьяДвиженияДенежныхСредств%", "
				|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
				|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
				|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
				|	ИНАЧЕ
				|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
				|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СтатьяДвиженияДенежныхСредств%", "
				|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомиссионера"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомитенту"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитентуОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
		|		= ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.Соглашение.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомитентуОСписании"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Комиссионер КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Комиссионер В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ = &Контрагент
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ // документы на сумму комиссионного вознаграждения
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ (НЕ ДанныеДокумента.УдержатьВознаграждение)
		|	И ДанныеДокумента.СпособРасчетаВознаграждения<>ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается)
		|	И ДанныеДокумента.СуммаВознаграждения<>0
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ = &Контрагент
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Комиссионер КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ДанныеДокумента
		|
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Комиссионер В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ = &Контрагент
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ // документы на сумму комиссионного вознаграждения
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ДанныеДокумента
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ = &Контрагент
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ТаможеннаяДекларацияИмпорт) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.Договор.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента,
		|	&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства)
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ВозвратТоваровПоставщику"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Договор,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("СправочникСсылка.ДоговорыКонтрагентов"), ПараметрыОтбора);
		
		
	КонецЕсли;
	
	Если Лев(ТекстЗапроса, 10) = "ОБЪЕДИНИТЬ" Тогда
		ТекстЗапроса = Сред(ТекстЗапроса, 15);
	КонецЕсли;
	
	Если ТекстЗапроса = "" Тогда
		
		Возврат "";
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументов.Ссылка                        КАК Ссылка,
		|	ТаблицаДокументов.Дата                          КАК Дата,
		|	ТаблицаДокументов.Номер                         КАК Номер,
		|	ТаблицаДокументов.НомерПоДаннымКонтрагента      КАК НомерПоДаннымКонтрагента,
		|	ТаблицаДокументов.ДатаПоДаннымКонтрагента       КАК ДатаПоДаннымКонтрагента,
		|	ТаблицаДокументов.Организация                   КАК Организация,
		|	ТаблицаДокументов.Партнер                       КАК Партнер,
		|	ТаблицаДокументов.Контрагент                    КАК Контрагент,
		|	ТаблицаДокументов.Договор                       КАК Договор,
		|	ТаблицаДокументов.Сумма                         КАК Сумма,
		|	ТаблицаДокументов.Валюта                        КАК Валюта,
		|	ТаблицаДокументов.Тип                           КАК Тип,
		|	ТаблицаДокументов.ЭтоРасчетыСКлиентами          КАК ЭтоРасчетыСКлиентами,
		|	ТаблицаДокументов.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	ТаблицаДокументов.СостояниеДокумента            КАК СостояниеДокумента,
		|	ТаблицаДокументов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	""""                                            КАК ИдентификаторПлатежа
		|ИЗ
		|	( " + ТекстЗапроса + " ) КАК ТаблицаДокументов";
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияДокументов

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу клиента.
//
// Параметры:
//	ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Объект расчетов
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор объекта расчетов
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//	Партнер - СправочникСсылка.Партнеры - Партнер документа-основания
//	ОснованиеПлатежа - ДокументСсылка - Документ-основание
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(ЗаказКлиента, Договор, ВалютаДокумента, РасшифровкаПлатежа, Партнер, ОснованиеПлатежа, СуммаКОплате = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		ЭтоЗаказ = ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента")
			ИЛИ ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(ЗаказКлиента) = Тип("Массив");
			
		Если ТипЗнч(ЗаказКлиента) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "ПорядокРасчетов");
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
			И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСКлиентами.Период					КАК Период,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.ЗаказКлиента			   	КАК ЗаказКлиента,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	Аналитика.Партнер							КАК Партнер,
			|	РасчетыСКлиентами.Валюта					КАК Валюта,
			|	СУММА(РасчетыСКлиентами.КОплате)			КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|ГДЕ
			|	РасчетыСКлиентами.Активность
			|	И РасчетыСКлиентами.Регистратор В (&ЗаказКлиента)
			|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РасчетыСКлиентами.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКлиентами.Период,
			|	РасчетыСКлиентами.ЗаказКлиента,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.Валюта,
			|	Аналитика.Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата КАК Период,
			|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
			|	ДанныеДоговора.Ссылка КАК ЗаказКлиента,
			|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ДанныеДоговора.Партнер КАК Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
			|	0 КАК СуммаПоГрафику
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|			И ДанныеДоговора.Ссылка = Аналитика.Договор
			|ГДЕ
			|	ДанныеДоговора.Ссылка В (&ЗаказКлиента)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.ЗаказКлиента	   КАК ОснованиеПлатежа,
			|	ТаблицаКОплате.ЗаказКлиента	   КАК Заказ,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер		   КАК Партнер,
			|	ТаблицаКОплате.Валюта		   КАК ВалютаВзаиморасчетов,
			|
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0 И СУММА(ТаблицаКОплате.СуммаПоГрафику) <= 
			|				МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ЗаказКлиента, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ЗаказКлиента,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСКлиентамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ЗаказКлиента = РасчетыСКлиентамиОстатки.ЗаказКлиента
			|			И ТаблицаКОплате.Валюта = РасчетыСКлиентамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ЗаказКлиента,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта
			|
			|ИТОГИ ПО
			|	ТаблицаКОплате.ЗаказКлиента
			|";
			
		ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
			И ЭтоЗаказ
			И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Заказ.Ссылка КАК ОснованиеПлатежа,
			|	ВЫБОР 
			|		КОГДА &ПоДоговорам ТОГДА
			|			&Договор
			|		ИНАЧЕ
			|			Заказ.Ссылка 
			|	КОНЕЦ КАК Заказ,
			|	Аналитика.Партнер КАК Партнер,
			|	Заказ.Соглашение КАК Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Заказ.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(Заказ.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ Заказ.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплатыЗаказа.ДатаПлатежа КАК Период,
			|	Заказ.Валюта КАК ВалютаВзаиморасчетов,
			|	Заказ.ФормаОплаты КАК ФормаОплаты,
			|	ЭтапыОплатыЗаказа.НомерСтроки КАК НомерСтроки,
			|	ЭтапыОплатыЗаказа.СуммаПлатежа + ЭтапыОплатыЗаказа.СуммаЗалогаЗаТару КАК СуммаПоГрафику,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0) КАК СуммаОплаты
			|ИЗ
			|	Документ.ЗаказКлиента КАК Заказ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплатыЗаказа
			|		ПО Заказ.Ссылка = ЭтапыОплатыЗаказа.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО Заказ.Партнер = Аналитика.Партнер
			|			И Заказ.Контрагент = Аналитика.Контрагент
			|			И Заказ.Организация = Аналитика.Организация
			|			И Заказ.Договор = Аналитика.Договор
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказКлиента В (&ЗаказКлиента)) КАК РасчетыСКлиентамиОбороты
			|		ПО Заказ.Ссылка = РасчетыСКлиентамиОбороты.ЗаказКлиента
			|ГДЕ
			|	Заказ.Ссылка В(&ЗаказКлиента)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
			|	ВЫБОР 
			|		КОГДА &ПоДоговорам ТОГДА
			|			&Договор
			|		ИНАЧЕ
			|			ЗаявкаНаВозвратТоваровОтКлиента.Ссылка 
			|	КОНЕЦ КАК Заказ,
			|	Аналитика.Партнер,
			|	ЗаявкаНаВозвратТоваровОтКлиента.Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ЗаявкаНаВозвратТоваровОтКлиента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ЗаявкаНаВозвратТоваровОтКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ЗаявкаНаВозвратТоваровОтКлиента.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.ДатаПлатежа,
			|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта,
			|	ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.СуммаПлатежа + ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.СуммаЗалогаЗаТару,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0)
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Партнер = Аналитика.Партнер
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Контрагент = Аналитика.Контрагент
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Организация = Аналитика.Организация
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Договор = Аналитика.Договор
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказКлиента В (&ЗаказКлиента)) КАК РасчетыСКлиентамиОбороты
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = РасчетыСКлиентамиОбороты.ЗаказКлиента
			|ГДЕ
			|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&ЗаказКлиента)
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|ИТОГИ ПО
			|	ОснованиеПлатежа";
		Иначе
				
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСКлиентами.ЗаказКлиента КАК ОснованиеПлатежа,
			|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
			|	Аналитика.Партнер КАК Партнер,
			|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	РасчетыСКлиентами.Период КАК Период,
			|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
			|	РасчетыСКлиентами.ФормаОплаты КАК ФормаОплаты,
			|	РасчетыСКлиентами.КОплате КАК СуммаПоГрафику,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0)
			|		+ ЕСТЬNULL(РасчетыСКлиентамиОбороты.ОплачиваетсяОборот, 0) КАК СуммаОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрНакопления.РасчетыСКлиентами.Обороты(,,Период) КАК РасчетыСКлиентамиОбороты
			|	ПО
			|		РасчетыСКлиентами.ЗаказКлиента = РасчетыСКлиентамиОбороты.ЗаказКлиента
			|		И РасчетыСКлиентами.Валюта = РасчетыСКлиентамиОбороты.Валюта
			|		И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|	ПО
			|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|		
			|ГДЕ
			|	РасчетыСКлиентами.Активность
			|	И РасчетыСКлиентами.ЗаказКлиента В (&ЗаказКлиента)
			|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РасчетыСКлиентами.КОплате > 0
			|	
			|УПОРЯДОЧИТЬ ПО
			|	РасчетыСКлиентами.Период,
			|	РасчетыСКлиентами.НомерСтроки
			|
			|ИТОГИ ПО
			|	РасчетыСКлиентами.ЗаказКлиента
			|";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		Запрос.УстановитьПараметр("ПоДоговорам", ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		
		УчтеноСуммаОплаты = 0;
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
		
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.ОснованиеПлатежа = ОснованиеПлатежа;
					Если Не ЗначениеЗаполнено(НоваяСтрока.ОснованиеПлатежа) Тогда
						НоваяСтрока.ОснованиеПлатежа = Выборка.ОснованиеПлатежа;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
					
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты + УчтеноСуммаОплаты);
					
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказКлиента) <> Тип("Массив") Тогда
				НоваяСтрока.ОснованиеПлатежа = ЗаказКлиента;
				НоваяСтрока.Заказ = ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, Договор, ЗаказКлиента);;
				НоваяСтрока.Партнер = Партнер;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
				Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
				КонецЕсли;
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("ОснованиеПлатежа, Заказ, СтатьяДвиженияДенежныхСредств, Партнер, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по счету на оплату.
//
// Параметры:
//	СчетНаОплату - ДокументСсылка.СчетНаОплатуКлиенту - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоСчетуНаОплату(СчетНаОплату, ЗаказКлиента, ВалютаДокумента, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение табличной части "Расшифровка платежа"
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка КАК ОснованиеПлатежа,
	|	
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.Договор
	|	ИНАЧЕ
	|		СчетНаОплатуКлиенту.ДокументОснование
	|	КОНЕЦ КАК Заказ,
	|	
	|	СчетНаОплатуКлиенту.ДокументОснование.Партнер КАК Партнер,
	|	СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Соглашение,
	|	
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЕСТЬNULL(СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|			ВЫРАЗИТЬ(СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ
	|			СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств
	|		КОНЕЦ
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ЕСТЬNULL(
	|		СчетНаОплатуКлиенту.ДокументОснование.ВалютаВзаиморасчетов, 
	|		СчетНаОплатуКлиенту.ДокументОснование.Валюта
	|	) КАК ВалютаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Справочник.ДоговорыКонтрагентов
	|	 ИЛИ СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента >
	|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток, 0) ТОГДА
	|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента > ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РасчетыСКлиентами.СчетНаОплату,
	|			СУММА(
	|				ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|					РасчетыСКлиентами.Сумма
	|				ИНАЧЕ
	|					0
	|				КОНЕЦ
	|			) КАК СуммаОплаты
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ГДЕ
	|			РасчетыСКлиентами.Активность
	|			И РасчетыСКлиентами.СчетНаОплату = &СчетНаОплату
	|			
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСКлиентами.СчетНаОплату
	|		) КАК РасчетыСКлиентами
	|	ПО
	|		СчетНаОплатуКлиенту.Ссылка = РасчетыСКлиентами.СчетНаОплату
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|			ЗаказКлиента = &ЗаказКлиента
	|		) КАК РасчетыСКлиентамиОстатки
	|	ПО
	|		Истина
	|		
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &СчетНаОплату
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
		КонецЕсли;
		
		Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
		НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СчетНаОплату = СчетНаОплату;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату товаров от клиента.
//
// Параметры:
//	ОбъектыРасчетов - ДокументСсылка, Массив - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	СуммаДокумента - Число - Сумма документа - основания
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(ОбъектыРасчетов, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
		|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
		|	(-РасчетыСКлиентами.КОплатеОстаток) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
		|		ЗаказКлиента В (&ОбъектыРасчетов)
		|	) КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.СуммаОстаток < 0
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Документ.ВозвратТоваровОтКлиента ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ
		|");
		
		Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.Сумма = СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу поставщику.
//
// Параметры:
//	ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	СуммаКОплате - Число - Сумма к оплате поставщику
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//	ЖелательнаяДатаПлатежа - Дата - Дата платежа по графику
//  Организация - СправочникСсылка.Организации - Организация, осуществляющая закупку
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(ЗаказПоставщику, Договор, ВалютаДокумента, Знач СуммаКОплате, РасшифровкаПлатежа, ЖелательнаяДатаПлатежа = Неопределено, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Если ТипЗнч(ЗаказПоставщику) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ПорядокРасчетов");
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			И ТипЗнч(ЗаказПоставщику) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.Период					   КАК Период,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.ЗаказПоставщику		   КАК ЗаказПоставщику,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	Аналитика.Партнер							   КАК Партнер,
			|	РасчетыСПоставщиками.Валюта					   КАК Валюта,
			|	СУММА(РасчетыСПоставщиками.КОплате)			   КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|		И (&Организация = Аналитика.Организация
			|			ИЛИ &Организация = Неопределено)
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.Регистратор В (&ЗаказПоставщику)
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.Период,
			|	РасчетыСПоставщиками.ЗаказПоставщику,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.Валюта,
			|	Аналитика.Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата КАК Период,
			|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
			|	ДанныеДоговора.Ссылка КАК ЗаказПоставщику,
			|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ДанныеДоговора.Партнер КАК Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
			|	0 КАК СуммаПоГрафику
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|			И ДанныеДоговора.Ссылка = Аналитика.Договор
			|ГДЕ
			|	ДанныеДоговора.Ссылка В (&ЗаказПоставщику)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.ЗаказПоставщику КАК Заказ,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер		   КАК Партнер,
			|	ТаблицаКОплате.Валюта		   КАК ВалютаВзаиморасчетов,
			|
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0 И СУММА(ТаблицаКОплате.СуммаПоГрафику) <=
			|				МАКСИМУМ(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ЗаказПоставщику,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСПоставщикамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ЗаказПоставщику = РасчетыСПоставщикамиОстатки.ЗаказПоставщику
			|			И ТаблицаКОплате.Валюта = РасчетыСПоставщикамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ЗаказПоставщику,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта
			|
			|ИТОГИ ПО
			|	ТаблицаКОплате.ЗаказПоставщику
			|";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Аналитика.Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками) КАК Соглашение,
			|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|				ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|			ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств
			|		КОНЕЦ
			|	ИНАЧЕ
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|				ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|			ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.Договор.СтатьяДвиженияДенежныхСредств
			|		КОНЕЦ
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	РасчетыСПоставщиками.Период КАК Период,
			|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
			|	РасчетыСПоставщиками.ФормаОплаты КАК ФормаОплаты,
			|	СУММА(РасчетыСПоставщиками.КОплате) КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ЭтапыОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|			И (&Организация = Аналитика.Организация
			|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.ЗаказПоставщику В(&ЗаказПоставщику)
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.ЗаказПоставщику,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	Аналитика.Партнер,
			|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками),
			|	РасчетыСПоставщиками.Период,
			|	РасчетыСПоставщиками.Валюта,
			|	РасчетыСПоставщиками.ФормаОплаты,
			|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|				ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|			ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств
			|		КОНЕЦ
			|	ИНАЧЕ
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|				ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|			ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.Договор.СтатьяДвиженияДенежныхСредств
			|		КОНЕЦ
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапыОплаты.Заказ КАК Заказ,
			|	ЭтапыОплаты.Партнер,
			|	ЭтапыОплаты.Соглашение,
			|	ЭтапыОплаты.СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплаты.Период,
			|	ЭтапыОплаты.ВалютаВзаиморасчетов,
			|	ЭтапыОплаты.ФормаОплаты,
			|	ЭтапыОплаты.СуммаПоГрафику,
			|	СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0) -
			|		ЕСТЬNULL(РасчетыСПоставщикамиОбороты.ОплачиваетсяОборот, 0)) КАК СуммаОплаты
			|ИЗ
			|	ЭтапыОплаты КАК ЭтапыОплаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Обороты(, , Период, ) КАК РасчетыСПоставщикамиОбороты
			|		ПО (РасчетыСПоставщикамиОбороты.ЗаказПоставщику = ЭтапыОплаты.Заказ)
			|			И (РасчетыСПоставщикамиОбороты.Валюта = ЭтапыОплаты.ВалютаВзаиморасчетов)
			|			И (РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = ЭтапыОплаты.АналитикаУчетаПоПартнерам)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыОплаты.Заказ,
			|	ЭтапыОплаты.Партнер,
			|	ЭтапыОплаты.Соглашение,
			|	ЭтапыОплаты.СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплаты.Период,
			|	ЭтапыОплаты.ВалютаВзаиморасчетов,
			|	ЭтапыОплаты.ФормаОплаты,
			|	ЭтапыОплаты.СуммаПоГрафику
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтапыОплаты.Период
			|ИТОГИ ПО
			|	Заказ";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		УчтеноСуммаОплаты = 0;
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
			
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты
				 ИЛИ СуммаКОплате <> 0 Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты + УчтеноСуммаОплаты);
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
					
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если ЗначениеЗаполнено(ЖелательнаяДатаПлатежа) Тогда
						ЖелательнаяДатаПлатежа = Мин(ЖелательнаяДатаПлатежа, Выборка.Период);
					Иначе
						ЖелательнаяДатаПлатежа = Выборка.Период;
					КонецЕсли;
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказПоставщику) <> Тип("Массив") Тогда
				
				Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					
					НоваяСтрока.Заказ	= Договор;
					РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Партнер, СтатьяДвиженияДенежныхСредств");
					НоваяСтрока.Партнер = РеквизитыДоговора.Партнер;
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДвиженияДенежныхСредств;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
				Иначе
					
					НоваяСтрока.Заказ	= ЗаказПоставщику;
					НоваяСтрока.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "Партнер");
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("Заказ, Партнер, СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату поставщику.
//
// Параметры:
//	ОбъектыРасчетов - ДокументСсылка, Массив - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	СуммаДокумента - Число - Сумма документа - основания
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуПоставщику(ОбъектыРасчетов, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.ЗаказПоставщику КАК ОснованиеПлатежа,
		|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
		|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщиками.КОплатеОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
		|		ЗаказПоставщику В (&ОбъектыРасчетов)
		|	) КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.СуммаОстаток > 0
		|");
		
		Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по договору.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоДоговоруСПоставщиком(Договор, ВалютаДокумента, РасшифровкаПлатежа, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику      КАК Заказ,
		|	Аналитика.Партнер                                КАК Партнер,
		|	РасчетыСПоставщикамиОстатки.Валюта               КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток
		|		- РасчетыСПоставщикамиОстатки.КОплатеОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,ЗаказПоставщику = &Договор) КАК РасчетыСПоставщикамиОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|		И (&Организация = Аналитика.Организация
		|			ИЛИ &Организация = Неопределено)
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток - РасчетыСПоставщикамиОстатки.КОплатеОстаток > 0
		|");
		
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("Организация", Организация );
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
			Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
			КонецЕсли;
			
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
			
			НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			
		КонецЕсли;
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Заказ = Договор;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
			Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает результат запроса по остаткам расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, выбранный в документе
//	ТипЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - Тип задолженности
//	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов
//	Дата - Дата документа
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//	Задолженность - ДанныеФормыКоллекция - Табличная часть документа
//
Процедура ЗаполнитьЗадолженностьПоОстаткам(Организация, Контрагент, ТипЗадолженности, ТипРасчетов, Дата, Валюта, Задолженность) Экспорт
	
	ТекстРасчетыСКлиентами = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК Заказ,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента.Дата КАК Дата,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента.Номер КАК Номер,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстатки.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами) КАК Соглашение,
	|	РасчетыСКлиентамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСКлиентамиОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ";
	
	ТекстРасчетыСПоставщками = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Дата КАК Дата,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Номер КАК Номер,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками) КАК Соглашение,
	|	РасчетыСПоставщикамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСПоставщикамиОстатки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ";
	
	ТекстЗапроса = "";
	
	Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
		
		ТекстЗапроса = ТекстРасчетыСКлиентами + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстРасчетыСПоставщками;
		
	ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
		ТекстЗапроса = ТекстРасчетыСКлиентами;
	Иначе //РасчетыСПоставщиком
		ТекстЗапроса = ТекстРасчетыСПоставщками;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МоментВремени = КонецДня(Дата);
	Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Задолженность.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Валюта)
		 И Валюта <> Выборка.ВалютаВзаиморасчетов Тогда
		 
			Коэффициенты = СоответствиеВалютаКурс.Получить(Выборка.ВалютаВзаиморасчетов);
			Если Коэффициенты = Неопределено Тогда
				Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Валюта, Выборка.ВалютаВзаиморасчетов, МоментВремени);
				СоответствиеВалютаКурс.Вставить(Выборка.ВалютаВзаиморасчетов, Коэффициенты);
			КонецЕсли;
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, Выборка.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			
		Иначе
			Сумма = Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			НоваяСтрока = Задолженность.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить колонку "Идентификатор строки" в табличной части документа.
//
// Параметры:
//	ТабличнаяЧасть - табличная часть документа
//
Процедура ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Уникальность = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСтроки)
			Или Неопределено <> Уникальность.Получить(СтрокаТаблицы.ИдентификаторСтроки)
		Тогда
			// Идентификатор в строке не заполнен ИЛИ идентификатор встречался ранее
			СтрокаТаблицы.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		Уникальность.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы.ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения даты платежа в документе.
//
// Параметры:
//	ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьДатуПлатежа(ДокументОбъект, Отказ) Экспорт
	
	// Дата оплаты должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ДокументОбъект.ДатаПлатежа)
	 И ДокументОбъект.ДатаПлатежа < НачалоДня(ДокументОбъект.Дата) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата платежа должна быть не меньше даты документа %1';uk='Дата платежу повинна бути не менше дати документа %1'"),
			Формат(ДокументОбъект.Дата, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументОбъект,
			"ДатаПлатежа",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения порядка оплаты.
//
// Параметры:
//	СправочникОбъект - Проверяемый объект
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьПорядокОплаты(СправочникОбъект, Отказ) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если СправочникОбъект.Валюта <> ВалютаРегламентированногоУчета
	 И СправочникОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах Тогда
		
		ТекстОшибки = НСтр("ru='Для соглашения в валюте необходимо указать порядок оплаты с расчетами в валюте';uk='Для оферти у валюті необхідно зазначити порядок оплати з розрахунками у валюті'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			СправочникОбъект,
			"ПорядокОплаты",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает суммы расшифровки платежа в выбранную валюту.
//
Процедура ПересчитатьСуммыВВалютуРасшифровкаПлатежа(Объект, СуммаВсего) Экспорт
	
	СуммаДокумента = СуммаВсего;
	ИтогСумма = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
	// Пересчитаем суммы в табличной части документа.
	Если ИтогСумма <> 0 Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			
			Сумма = Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1);
			ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
			СуммаДокумента = СуммаДокумента - Сумма;
			СтрокаТаблицы.Сумма = Сумма;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
				Если СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта Тогда
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоРасчетамСКонтрагентами

// Процедура устанавливает значение Неопределено для незаполненного реквизита "Заказ" табличной части.
//
// Параметры:
//	ТабличнаяЧасть - Табличная часть документа
//
Процедура ОчиститьПустойЗаказВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) И СтрокаТаблицы.Заказ <> Неопределено Тогда
			СтрокаТаблицы.Заказ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в табличной части "Расшифровка платежка"
// в документах движения денежных средств.
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта, указанная в документе
//	Дата - Дата документа
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта, Дата, ТабличнаяЧасть) Экспорт
	
	ОчиститьПустойЗаказВТабличнойЧасти(ТабличнаяЧасть);
	
	// Если табличная часть пустая или в табличной части заполнена сумма взаиморасчетов,
	// то выполнение процедуры не требуется.
	Если (ТабличнаяЧасть.Количество() = 0
	 ИЛИ ТабличнаяЧасть.Найти(0, "СуммаВзаиморасчетов") = Неопределено)
	 И ТабличнаяЧасть.Найти(Справочники.Валюты.ПустаяСсылка(), "ВалютаВзаиморасчетов") = Неопределено
	Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ИсходнаяТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СуммаВзаиморасчетов = 0
	|	ИЛИ ТаблицаДокумента.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СчетНаОплату.ДокументОснование КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ТаблицаДокументовОснований
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|ГДЕ
	|	Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|
	|ПОМЕСТИТЬ ТаблицаДокументовРасчетов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Неопределено КАК Партнер
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	Неопределено КАК Партнер
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.*,
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.Ссылка
	|	ИНАЧЕ
	|		Таблица.Заказ
	|	КОНЕЦ КАК Заказ,
	|		
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.Партнер
	|
	|	КОГДА Таблица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		ЕСТЬNULL(Таблица.Заказ.Партнер, Неопределено)
	|
	|	ИНАЧЕ
	|		Таблица.Партнер
	|	КОНЕЦ КАК Партнер,
	|	
	|	ВЫБОР КОГДА Таблица.ВалютаВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		Таблица.ВалютаВзаиморасчетов
	|	ИНАЧЕ
	|		ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|			ТаблицаДокументовРасчетов.ВалютаВзаиморасчетов
	|
	|		КОГДА НЕ Таблица.Заказ.ВалютаВзаиморасчетов ЕСТЬ NULL ТОГДА
	|			Таблица.Заказ.ВалютаВзаиморасчетов
	|
	|		КОГДА НЕ Таблица.Заказ.Валюта ЕСТЬ NULL ТОГДА
	|			Таблица.Заказ.Валюта
	|
	|		ИНАЧЕ
	|			&Валюта
	|		КОНЕЦ
	|	КОНЕЦ КАК ВалютаВзаиморасчетов
	|	
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	| 		ТаблицаДокументовРасчетов КАК ТаблицаДокументовРасчетов
	|	ПО
	|  		Таблица.СчетНаОплату.ДокументОснование = ТаблицаДокументовРасчетов.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаДокумента.Заказ КАК Заказ,
	|	ТаблицаДокумента.Партнер КАК Партнер,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СуммаВзаиморасчетов = 0 ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|		)
	|	ИНАЧЕ
	|		ТаблицаДокумента.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|	
	|	// Определим курс валюты документа.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютДокумента
	|	ПО
	|		Истина
	|		
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|	ПО
	|		ТаблицаДокумента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	ТаблицаДокумента = ТабличнаяЧасть.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("Партнер") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	// Получим таблицу документа с рассчитанной суммой взаиморасчетов.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
// 
Процедура ЗаполнитьСуммуВзаиморасчетов(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	(&СуммаДокумента *
	|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|	) / (
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|	) КАК СуммаВзаиморасчетов
	|	
	|ИЗ	
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
	|		Валюта = &ВалютаДокумента
	|	) КАК КурсыВалютДокумента
	|	
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
	|			Валюта = &ВалютаВзаиморасчетов
	|	) КАК КурсыВалют По Истина
	|");
	
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("СуммаДокумента", ДокументОбъект.СуммаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
			ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
// ДокументОбъект - ДокументОбъект - Текущий документ
// 
Процедура ЗаполнитьСуммуВзаиморасчетовВПоступлении(ДокументОбъект, ИмяТЧ = "Товары") Экспорт
	
	Если ДокументОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество()=0 Тогда
		
		ДокументОбъект.СуммаВзаиморасчетов = ДокументОбъект[ИмяТЧ].Итог("СуммаВзаиморасчетов");
		
	Иначе
		
		СуммаДокумента = ДокументОбъект[ИмяТЧ].Итог("Сумма");
		Если Не ДокументОбъект.ЦенаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТЧ].Итог("СуммаНДС");
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	(&СуммаДокумента *
		|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
		|	ЕСТЬNULL(КурсыВалют.Кратность, 1)
		|	) / (
		|	ЕСТЬNULL(КурсыВалют.Курс, 1) * 
		|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
		|	) КАК СуммаВзаиморасчетов
		|	
		|ИЗ	
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
		|		Валюта = &ВалютаДокумента
		|	) КАК КурсыВалютДокумента
		|	
		|	// Определим курс валюты взаиморасчетов.
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
		|			Валюта = &ВалютаВзаиморасчетов
		|	) КАК КурсыВалют По Истина
		|");
		
		Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
		Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
		Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
				ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму НДС взаиморасчетов в табличной части документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
// 
Процедура ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(Документ, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
	
	ВалютаДокумента = Документ.Валюта;
	ВалютаЗаказа    = Документ.ВалютаВзаиморасчетов;
	
	Если ВалютаДокумента = ВалютаЗаказа Тогда
		
		Для Индекс = 0 По ТабличнаяЧасть.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов)
			 ИЛИ ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов <> ТабличнаяЧасть[Индекс].СуммаНДС Тогда
				ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов = ТабличнаяЧасть[Индекс].СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Строка.СтавкаНДС);
			
			Строка.СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Строка.СуммаВзаиморасчетов, ТекПроцентНДС);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму расшифровки платежа в соответствии с суммой документа.
//
Процедура ЗаполнитьСуммуРасшифровкиПлатежаПоСуммеДокумента(Знач СуммаДокумента, РасшифровкаПлатежа) Экспорт
	
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("Сумма");
	Если СуммаДокумента <> СуммаРасшифровкиПлатежа Тогда
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Сумма = СуммаДокумента;
		Иначе
			
			Разница = СуммаДокумента - СуммаРасшифровкиПлатежа;
			МассивУдаляемыхСтрок = Новый Массив;
			
			// Корректируются суммы в строках с пустым заказом.
			Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
					СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
					Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
				КонецЕсли;
				
				Если СтрокаТаблицы.Сумма = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
				КонецЕсли;
				
				Если Разница = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Уменьшаются суммы в строках с указанным заказом.
			Если Разница < 0 Тогда
				
				Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
						СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
						СтрокаТаблицы.СуммаВзаиморасчетов = 0;
						Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
					КонецЕсли;
					
					Если СтрокаТаблицы.Сумма = 0 Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
					КонецЕсли;
					
					Если Разница = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Остаток нераспределенной суммы будет отнесен на новую строку.
			Если Разница <> 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.Сумма = Разница;
			КонецЕсли;
			
			// Строки с нулевой суммой будут удалены.
			Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
				РасшифровкаПлатежа.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоРасчетамСПоставщикамиИКлиентами

// Процедура формирования движений по регистру "Расчеты с клиентами".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСКлиентами;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с клиентами по документами".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСКлиентамиПоДокументам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСКлиентамиПоДокументам;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с поставщиками".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСПоставщиками;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с поставщиками по документами".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСПоставщикамиПоДокументам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСПоставщикамиПоДокументам;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Суммы документов в валюте регл.".
//
Процедура ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСуммыДокументовВВалютеРегл;
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.СуммыДокументовВВалютеРегл;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДатПлатежа

// В менеджер временных таблиц помещает таблицу "ТаблицаОстатковКлиентов",
// содержащую в себе даты платежа. Строится по регистру "Расчеты с клиентами по документам".
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Текущий менеджер временных таблиц для помещения таблиц.
//		ДатаОстатков - Дата - Дата остатков.
//
Процедура РассчитатьДатыПлатежаКлиента(МенеджерВременныхТаблиц, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам)
		И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентами)
	Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                            КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|		ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ                                           КАК ДолгОстаток,
		|	ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|		ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ                                           КАК ДолгОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ИСТИНА                                          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                            КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ВЫБОР КОГДА Расчеты.КОплатеОстаток < 0
		|			ТОГДА Расчеты.СуммаОстаток
		|			ИНАЧЕ ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|					ТОГДА Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток
		|					ИНАЧЕ Расчеты.КОплатеОстаток
		|			КОНЕЦ
		|	КОНЕЦ                                           КАК ДолгОстаток,
		|	ВЫБОР КОГДА Расчеты.КОплатеОстаток < 0
		|			ТОГДА Расчеты.СуммаОстаток
		|			ИНАЧЕ ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|					ТОГДА Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток
		|					ИНАЧЕ Расчеты.КОплатеОстаток
		|			КОНЕЦ
		|	КОНЕЦ                                           КАК ДолгОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ЛОЖЬ                                            КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток <= 0
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		|");
        
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаОстатков;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
        
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
        Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
 		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                               КАК ЗаказКлиента,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День)) КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.ДолгОстаток <> 0
		|ГДЕ
		|	Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|	И ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                               КАК ЗаказКлиента,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День))  КАК ДатаПлатежа,
		|	МИНИМУМ(Расчеты.Период)                            КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.ДолгОстаток <> 0
		|ГДЕ
		|	(Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.КОплате < 0))
		|	И Расчеты.Активность
		|	И Расчеты.Период > &ДатаОстатков
		|	И Расчеты.Период > ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|	И НЕ ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА Периоды.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ, ДЕНЬ)                                  КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Расчеты.КОплате, 0) < 0
		|			ТОГДА 0 - Расчеты.КОплате
		|			ИНАЧЕ ЕСТЬNULL(Расчеты.КОплате, 0)
		|	КОНЕЦ)                                        КАК Долг,
		|	Периоды.ПросроченнаяЗадолженность             КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		|ИЗ
		|	ТаблицаПериодовКлиентов КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказКлиента             = Расчеты.ЗаказКлиента
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И Расчеты.Период = Периоды.Период
		|		И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.КОплате < 0))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА Периоды.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ, ДЕНЬ),
		|	Периоды.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                                КАК ЗаказКлиента,
		|	Остатки.Валюта                                      КАК Валюта,
		|	ВЫБОР КОГДА Остатки.ДолгОстаток > ЕСТЬNULL(Отгрузки.Долг, 0)
		|			ТОГДА Остатки.ДолгОстаток - ЕСТЬNULL(Отгрузки.Долг, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                               КАК НовыйДолгОстаток,
		|	ВЫБОР КОГДА ЕСТЬNULL(Отгрузки.Долг, 0) = 0
		|		ТОГДА Остатки.ДолгОстатокНаКонецПериода
		|		ИНАЧЕ ВЫБОР КОГДА Остатки.ДолгОстаток > Отгрузки.Долг
		|			ТОГДА Отгрузки.Долг
		|			ИНАЧЕ Остатки.ДолгОстаток
		|		КОНЕЦ
		|	КОНЕЦ                                               КАК ДолгОстатокНаКонецПериода,
		|	Отгрузки.Период                                     КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа,
		|	Остатки.ПросроченнаяЗадолженность                   КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ НовыеОстаткиКлиентов
		|ИЗ
		|	ТаблицаОстатковКлиентов КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.ПросроченнаяЗадолженность = Отгрузки.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                 КАК ЗаказКлиента,
		|	Остатки.Валюта                       КАК Валюта,
		|	Остатки.Период                       КАК Период,
		|	Остатки.ДатаПлатежа                  КАК ДатаПлатежа,
		|	Остатки.НовыйДолгОстаток             КАК ДолгОстаток,
		|	Остатки.ДолгОстатокНаКонецПериода    КАК ДолгОстатокНаКонецПериода,
		|	Остатки.ПросроченнаяЗадолженность    КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	НовыеОстаткиКлиентов КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовКлиентов
		|";
		
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		МаксимальноеКоличествоИтераций = 1000;
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
			Счетчик = Счетчик + 1;
			Если Счетчик >= МаксимальноеКоличествоИтераций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Расчеты.РасчетныйДокумент                 КАК РасчетныйДокумент,
		|	Расчеты.Валюта                            КАК Валюта,
		|	ТаблицаОстатков.ДатаПлатежа               КАК ДатаПлатежа,
		|	ТаблицаОстатков.ДолгОстатокНаКонецПериода КАК Долг
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентовПоДокументам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница, ) КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|ГДЕ
		|	Расчеты.ДолгОстаток > 0
		|;
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		|;
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента              КАК ЗаказКлиента,
		|	Расчеты.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Расчеты.Валюта                    КАК Валюта,
		|	Расчеты.ДатаПлатежа               КАК ДатаПлатежа,
		|	Расчеты.Долг                      КАК КОплате,
		|	Расчеты.Долг                      КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	ТаблицаОстатковКлиентовПоДокументам КАК Расчеты
		|";
		Запрос.Выполнить();
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	Неопределено                                                     КАК ЗаказКлиента,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу "ТаблицаОстатковПоставщиков",
// содержащую в себе даты платежа. Строится по регистру "Расчеты с поставщиками по документам".
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Текущий менеджер временных таблиц для помещения таблиц.
//		ДатаОстатков - Дата - Дата остатков.
//
Процедура РассчитатьДатыПлатежаПоставщика(МенеджерВременныхТаблиц, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам)
		И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
	Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                  КАК ЗаказПоставщику,
		|	Расчеты.Валюта                           КАК Валюта,
		|	-Расчеты.КОплатеОстаток                  КАК КОплатеОстаток,
		|	-Расчеты.КОплатеОстаток                  КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период,
		|	ИСТИНА                                   КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                         КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	(Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) КАК КОплатеОстаток,
		|	(Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ЛОЖЬ                                            КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток >= 0 И Расчеты.СуммаОстаток <> 0
		|	И Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток > 0
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПоступленийПоставщиков
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков
		|");
        
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаОстатков;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
        
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
        Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПоступленийПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                            КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День)) КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|	И ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                            КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День))  КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период > &ДатаОстатков
		|	И Расчеты.Период > ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|	И НЕ ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	ВЫБОР КОГДА Периоды.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ                                         КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Расчеты.КОплате, 0) < 0
		|			ТОГДА 0 - Расчеты.КОплате
		|			ИНАЧЕ ЕСТЬNULL(Расчеты.КОплате, 0)
		|	КОНЕЦ)                                        КАК КОплате,
		|	Периоды.ПросроченнаяЗадолженность             КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПоступленийПоставщиков
		|ИЗ
		|	ТаблицаПериодовПоставщиков КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказПоставщику          = Расчеты.ЗаказПоставщику
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И Расчеты.Период = Периоды.Период
		|		И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	ВЫБОР КОГДА Периоды.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ,
		|	Периоды.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                                КАК ЗаказПоставщику,
		|	Остатки.Валюта                                         КАК Валюта,
		|	ВЫБОР КОГДА Остатки.КОплатеОстаток > ЕСТЬNULL(Поступления.КОплате, 0)
		|			ТОГДА Остатки.КОплатеОстаток - ЕСТЬNULL(Поступления.КОплате, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                  КАК НовыйКОплатеОстаток,
		|	ВЫБОР КОГДА ЕСТЬNULL(Поступления.КОплате, 0) = 0
		|		ТОГДА Остатки.КОплатеОстатокНаКонецПериода
		|		ИНАЧЕ ВЫБОР КОГДА Остатки.КОплатеОстатокНаКонецПериода > Поступления.КОплате
		|			ТОГДА Поступления.КОплате
		|			ИНАЧЕ Остатки.КОплатеОстатокНаКонецПериода
		|		КОНЕЦ
		|	КОНЕЦ                                                  КАК КОплатеОстатокНаКонецПериода,
		|	Поступления.Период                                     КАК Период,
		|	ЕСТЬNULL(Поступления.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа,
		|	Остатки.ПросроченнаяЗадолженность                      КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ НовыеОстаткиПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиков КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоступленийПоставщиков КАК Поступления
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Поступления.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказПоставщику = Поступления.ЗаказПоставщику
		|		И Остатки.Валюта  = Поступления.Валюта
		|		И Остатки.ПросроченнаяЗадолженность = Поступления.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику              КАК ЗаказПоставщику,
		|	Остатки.Валюта                       КАК Валюта,
		|	Остатки.Период                       КАК Период,
		|	Остатки.ДатаПлатежа                  КАК ДатаПлатежа,
		|	Остатки.НовыйКОплатеОстаток          КАК КОплатеОстаток,
		|	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода,
		|	Остатки.ПросроченнаяЗадолженность    КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	НовыеОстаткиПоставщиков КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказПоставщику,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовПоставщиков
		|";
		
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		МаксимальноеКоличествоИтераций = 1000;
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
			Счетчик = Счетчик + 1;
			Если Счетчик >= МаксимальноеКоличествоИтераций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам            КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                      КАК ЗаказПоставщику,
		|	Расчеты.РасчетныйДокумент                    КАК РасчетныйДокумент,
		|	Расчеты.Валюта                               КАК Валюта,
		|	ТаблицаОстатков.ДатаПлатежа                  КАК ДатаПлатежа,
		|	ТаблицаОстатков.КОплатеОстатокНаКонецПериода КАК КОплате
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиковПоДокументам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница, ) КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|ГДЕ
		|	Расчеты.ДолгОстаток < 0
		|;
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков
		|;
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
		|	Расчеты.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Расчеты.Валюта                    КАК Валюта,
		|	Расчеты.ДатаПлатежа               КАК ДатаПлатежа,
		|	Расчеты.КОплате                   КАК КОплате,
		|	Расчеты.КОплате                   КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиковПоДокументам КАК Расчеты
		|";
		Запрос.Выполнить();
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	Неопределено                                                     КАК ЗаказПоставщику,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу содержащую в себе даты платежа.
// Строится по регистру "Расчеты с клиентами".
// Параметры:
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Менеджер временных таблиц, в который будет помещен результат расчета.
//	ДатаОстатков - Дата - Период на который выполняется расчет дат платежа.
//	ИмяРесурсаКонтроля - Строка - Имя ресурса регистра, который является контрольным при расчете.
Процедура РассчитатьОперативныеДатыПлатежаКлиента(ВременныеТаблицы, ДатаОстатков, ИмяРесурсаКонтроля) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                     КАК ЗаказКлиента,
		|	Расчеты.Валюта                           КАК Валюта,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%Остаток,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОстатков, ) КАК Расчеты
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Расчеты.Валюта                                КАК Валюта,
		|	МАКСИМУМ(Расчеты.ДатаПлатежа)                 КАК ДатаПлатежа,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, День)) КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов%ИмяРесурса% КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|		И ТаблицаОстатков.%ИмяРесурса%Остаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И Расчеты.%ИмяРесурса% <> 0
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	Периоды.ДатаПлатежа                           КАК ДатаПлатежа,
		|	СУММА(ЕСТЬNULL(Расчеты.%ИмяРесурса%, 0))      КАК %ИмяРесурса%
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов%ИмяРесурса%
		|ИЗ
		|	ТаблицаПериодовКлиентов%ИмяРесурса% КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказКлиента             = Расчеты.ЗаказКлиента
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Периоды.ДатаПлатежа              = Расчеты.ДатаПлатежа
		|		И Расчеты.Активность
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|		И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	Периоды.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Остатки.Валюта                            КАК Валюта,
		|	ВЫБОР КОГДА Остатки.%ИмяРесурса%Остаток > ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|			ТОГДА Остатки.%ИмяРесурса%Остаток - ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК Новый%ИмяРесурса%Остаток,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	Отгрузки.Период                           КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		|ПОМЕСТИТЬ НовыеОстаткиКлиентов%ИмяРесурса%
		|ИЗ
		|	ТаблицаОстатковКлиентов%ИмяРесурса% КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов%ИмяРесурса% КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.%ИмяРесурса%Остаток <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Остатки.Валюта                            КАК Валюта,
		|	Остатки.Период                            КАК Период,
		|	Остатки.ДатаПлатежа                       КАК ДатаПлатежа,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%Остаток,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|ИЗ
		|	НовыеОстаткиКлиентов%ИмяРесурса% КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовКлиентов%ИмяРесурса%
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		
		Результат = Запрос.Выполнить();
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу содержащую в себе даты платежа.
// Строится по регистру "Расчеты с поставщиками".
// Параметры:
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Менеджер временных таблиц, в который будет помещен результат расчета.
//	ДатаОстатков - Дата - Период на который выполняется расчет дат платежа.
//	ИмяРесурсаКонтроля - Строка - Имя ресурса регистра, который является контрольным при расчете.
Процедура РассчитатьОперативныеДатыПлатежаПоставщика(ВременныеТаблицы, ДатаОстатков, ИмяРесурсаКонтроля) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                  КАК ЗаказПоставщику,
		|	Расчеты.Валюта                           КАК Валюта,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%Остаток,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатков, ) КАК Расчеты
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                КАК Валюта,
		|	МАКСИМУМ(Расчеты.ДатаПлатежа)                 КАК ДатаПлатежа,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, День)) КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков%ИмяРесурса% КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|		И ТаблицаОстатков.%ИмяРесурса%Остаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И Расчеты.%ИмяРесурса% <> 0
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику,
		|	Расчеты.Валюта,
		|	Расчеты.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	Периоды.ДатаПлатежа                           КАК ДатаПлатежа,
		|	СУММА(ЕСТЬNULL(Расчеты.%ИмяРесурса%, 0))      КАК %ИмяРесурса%
		|ПОМЕСТИТЬ ТаблицаОтгрузокПоставщиков%ИмяРесурса%
		|ИЗ
		|	ТаблицаПериодовПоставщиков%ИмяРесурса% КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказПоставщику          = Расчеты.ЗаказПоставщику
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|		И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	Периоды.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                   КАК ЗаказПоставщику,
		|	Остатки.Валюта                            КАК Валюта,
		|	ВЫБОР КОГДА Остатки.%ИмяРесурса%Остаток > ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|			ТОГДА Остатки.%ИмяРесурса%Остаток - ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК Новый%ИмяРесурса%Остаток,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	Отгрузки.Период                           КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		|ПОМЕСТИТЬ НовыеОстаткиПоставщиков%ИмяРесурса%
		|ИЗ
		|	ТаблицаОстатковПоставщиков%ИмяРесурса% КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокПоставщиков%ИмяРесурса% КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказПоставщику = Отгрузки.ЗаказПоставщику
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.%ИмяРесурса%Остаток <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                   КАК ЗаказПоставщику,
		|	Остатки.Валюта                            КАК Валюта,
		|	Остатки.Период                            КАК Период,
		|	Остатки.ДатаПлатежа                       КАК ДатаПлатежа,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%Остаток,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|ИЗ
		|	НовыеОстаткиПоставщиков%ИмяРесурса% КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказПоставщику,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		
		Результат = Запрос.Выполнить();
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПорядокРасчетов

Функция ПорядокРасчетовПоДокументу(Объект) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Возврат ПорядокРасчетовПоУмолчанию(Объект);
	Иначе
		Возврат Объект.ПорядокРасчетов;
	КонецЕсли;
	
КонецФункции

// Возвращает порядок расчетов по соглашению/договору, указанным в объекте.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - Документ, по которому надо получить порядок расчетов.
//
// Возвращаемое значение:
//	Перечисление.ПорядокРасчетов - Порядок расчетов по умолчанию.
//
Функция ПорядокРасчетовПоУмолчанию(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Истина И ЗначениеЗаполнено(Объект.Договор) Тогда
			ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокРасчетов");
		ИначеЕсли РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			ПорядокРасчетовПоДокументу = РеквизитыСоглашения.ПорядокРасчетов;
		Иначе
			ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) Тогда
		ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокРасчетов");
	Иначе
		ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	КонецЕсли;
	
	Возврат ПорядокРасчетовПоДокументу;
	
КонецФункции

// Заполняет в форме документа порядок расчетов по умолчанию,
// изменяет порядок расчетов документа, если его нет в доступных.
// 
// Параметры:
//	Форма - УправляемаяФорма - Форма. Должна иметь экспортную процедуру УстановитьСвойстваЭлементовПоПорядкуРасчетов().
//	ПоЗаказу - Булево - Признак, что документ введен по заказу.
//	ОбновитьОбъект - Булево - Разрешить изменение порядка расчетов по документу.
//	ОбновитьФорму - Булево - Установить свойства элементов по порядку расчетов вне зависимости изменился ли порядок расчетов.
//	Элемент - ПолеФормы - Элемент порядка расчетов на форме.
//
Процедура ЗаполнитьПорядокРасчетовВФорме(Форма, ПоЗаказу = Ложь, ОбновитьОбъект = Истина, ОбновитьФорму = Ложь, Элемент = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	ПорядокРасчетовСтарый = Форма.ПорядокРасчетов;
	
	Если ПоЗаказу И ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Форма.ПорядокРасчетов = Объект.ПорядокРасчетов;
	Иначе
		
		СтруктураОбъекта = Новый Структура("Соглашение, Договор");
		ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
		
		Форма.ПорядокРасчетов = ПорядокРасчетовПоУмолчанию(СтруктураОбъекта);
		
		Если ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ЗаданГрафикИсполнения");
			УстановитьПривилегированныйРежим(Ложь);
			ЗаполнитьЗначенияСвойств(Форма, Новый Структура("ГрафикИсполненияВДоговоре", ГрафикИсполненияВДоговоре));
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеПорядкиРасчетов = ДоступныеПорядкиРасчетовПоДокументу(
		Объект.ПорядокРасчетов,
		Форма.ПорядокРасчетов,
		ПоЗаказу);
	
	Если Элемент = Неопределено Тогда
		Форма.ДоступныеПорядкиРасчетов = ДоступныеПорядкиРасчетов;
	Иначе
		Элемент.СписокВыбора.ЗагрузитьЗначения(ДоступныеПорядкиРасчетов.ВыгрузитьЗначения());
		Элемент.ТолькоПросмотр = (ДоступныеПорядкиРасчетов.Количество() = 1);
	КонецЕсли;
	
	Если ОбновитьОбъект
		И Объект.ПорядокРасчетов <> Форма.ПорядокРасчетов
		И (ДоступныеПорядкиРасчетов.НайтиПоЗначению(Объект.ПорядокРасчетов) = Неопределено
			Или (ЗначениеЗаполнено(ПорядокРасчетовСтарый) И ПорядокРасчетовСтарый = Объект.ПорядокРасчетов)) Тогда
		
		Объект.ПорядокРасчетов = Форма.ПорядокРасчетов;
		ОбновитьФорму = Истина;
		
	КонецЕсли;
	
	Если ОбновитьФорму Тогда
		Форма.УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
КонецПроцедуры

// Определяет какие порядки расчетов можно использовать в выбранном документе.
//
// Параметры:
//	ЗначениеВДокументе - Перечисление.ПорядокРасчетов - Порядок расчетов, выбранный в документе.
//	ЗначениеПоУмолчанию - Перечисление.ПорядокРасчетов - Порядок расчетов, определяемый по соглашению/договору документа.
//	ПоЗаказу - Булево - Документ введен по заказу.
//
// Возвращаемое значение:
//	СписокЗначений - Список доступных порядков расчетаю
//
Функция ДоступныеПорядкиРасчетовПоДокументу(ЗначениеВДокументе, ЗначениеПоУмолчанию, ПоЗаказу = Ложь) Экспорт
	
	ПорядкиРасчетов = Новый СписокЗначений;
	
	Если ПоЗаказу Тогда
		ПорядкиРасчетов.Добавить(ЗначениеВДокументе);
	Иначе
	
		Если ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
				Или ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		КонецЕсли;
		
		ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		
	КонецЕсли;
	
	Возврат ПорядкиРасчетов;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедуры

// Функция определяет вид договора контрагента для обмена
//	с конфигурацией "Бухгалтерия предприятия".
//
Функция ВидДоговораКонтрагента(ДокументРасчетов, Соглашение, ХозяйственнаяОперация) Экспорт
	
	ВидДоговора = "";
	
	Если ЗначениеЗаполнено(ДокументРасчетов) Тогда
		
		Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПоставщиком";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПокупателем";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионера")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДоговора = "СКомиссионером";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитенту")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			ВидДоговора = "СКомитентом";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СКомитентом";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СКомиссионером";
				
			Иначе
				ВидДоговора = "СКомитентом";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СПоставщиком";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СПокупателем";
				
			Иначе
				ВидДоговора = "СПоставщиком";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(Соглашение) Тогда
		
		Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			ВидДоговора = "СПоставщиком";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДоговора;
	
КонецФункции

// Функция определяет признак расчетов в условных единицах для обмена
//	с конфигурацией "Бухгалтерия предприятия".
//
Функция РасчетыВУсловныхЕдиницах(Соглашение) Экспорт
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &Ссылка
		|	И ДанныеСправочника.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах)
		|");
		Запрос.УстановитьПараметр("Ссылка", Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РасчетыВУсловныхЕдиницах = Выборка.РасчетыВУсловныхЕдиницах;
		Иначе
			РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &Ссылка
		|	И ДанныеСправочника.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах)
		|");
		Запрос.УстановитьПараметр("Ссылка", Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РасчетыВУсловныхЕдиницах = Выборка.РасчетыВУсловныхЕдиницах;
		Иначе
			РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат РасчетыВУсловныхЕдиницах;
	
КонецФункции

// Заменяет документы расчетов при вызове отчетов по взаимрасчетов из реализации
// Если реализация по заказу клиента - документом расчетов является заказ клиента
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета
//
Процедура ЗаменитьДокументыРасчетовСКлиентами(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказКлиента") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрЗаказКлиента = Параметры.Отбор.ЗаказКлиента;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.РеализацияПоЗаказам И НЕ ТаблицаТовары.ЗаказКлиента ЕСТЬ NULL
		|		И Не ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.РеализацияПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.АктПоЗаказам И НЕ ТаблицаУслуги.ЗаказКлиента ЕСТЬ NULL
		|		И Не ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаУслуги.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.АктПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПродажаПоЗаказам
		|		И Не ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.КорректировкаРеализации КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|			И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ПараметрЗаказКлиента);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказКлиента) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказКлиента Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.АктВыполненныхРабот")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаказКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.АктВыполненныхРабот")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказКлиента);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказКлиента = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет документы расчетов при вызове отчетов по взаимрасчетов из поступления
// Если поступление по заказу поставщику - документом расчетов является заказ поставщику
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета
//
Процедура ЗаменитьДокументыРасчетовСПоставщиками(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказПоставщику") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрЗаказПоставщику = Параметры.Отбор.ЗаказПоставщику;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПоступлениеПоЗаказам И НЕ ТаблицаТовары.ЗаказПоставщику ЕСТЬ NULL
		|		И Не ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказПоставщику
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.ПоступлениеПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ПараметрЗаказПоставщику);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказПоставщику) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказПоставщику Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказПоставщику")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказПоставщику);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказПоставщику = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

//Возвращает список платежных документов, подтвержденных выпиской по расчетному счету
//
// Параметры:
// НачалоПериода - Дата - Начало периода, за котрый необходимо найти выписки
// КонецПериода - Дата - Окончание периода, за котовый необходимо найти выписки
// Организация - СправочникСсылка.Организации - Организация для отбора
// РасчетныйДокумент - ДокументСсылка - Расчетный документ для отбора
//
// Возвращаемое значение:
// ТаблицаЗначений - содержит список платежных докумнтов и дату выписки
//
Функция ВыпискиПоРасчетномуСчету(НачалоПериода, КонецПериода, Организация, РасчетныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Документ,
	|	ДанныеДокумента.ДатаПроведенияБанком КАК ДатаПолученияВыписки
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ДатаПроведенияБанком Между &НачалоПериода И &КонецПериода
	|	И (ДанныеДокумента.Ссылка = &РасчетныйДокумент
	|		ИЛИ &РасчетныйДокумент = НЕОПРЕДЕЛЕНО
	|			И ДанныеДокумента.Организация В (&Организации))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Документ,
	|	ДанныеДокумента.ДатаПроведенияБанком КАК ДатаПолученияВыписки
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ДатаПроведенияБанком Между &НачалоПериода И &КонецПериода
	|	И (ДанныеДокумента.Ссылка = &РасчетныйДокумент
	|		ИЛИ &РасчетныйДокумент = НЕОПРЕДЕЛЕНО
	|			И ДанныеДокумента.Организация В (&Организации))
	|";
	
	Организации = Новый Массив;
	Организации.Добавить(Организация);
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		// Оплата могла быть перечислена в голову и передана в организацию
		Организации.Добавить(ГоловнаяОрганизация);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",		КонецПериода);
	Запрос.УстановитьПараметр("Организации",		Организации);
	Запрос.УстановитьПараметр("РасчетныйДокумент",	РасчетныйДокумент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Документ");
	
	Возврат Результат;

КонецФункции

Функция ПроверкаИСообщениеВариантовКлассификацииЗадолженности(Количество, Форма) Экспорт
	Если Форма = Неопределено Тогда
		ПрефиксСообщения = НСтр("ru='Не удалось заполнить поле ""Вариант классификации задолженности"".';uk='Не вдалося заповнити поле ""Варіант класифікації заборгованості"".'");
	Иначе
		ПрефиксСообщения = "";
	КонецЕсли;
	
	СтатусВозврата = Ложь;
	Если Количество > 1 Тогда
		СообщениеОбОшибке = ПрефиксСообщения + НСтр("ru='В информационной базе введено несколько вариантов классификации задолженности.';uk='В інформаційній базі введено декілька варіантів класифікації заборгованості.'") + 
		Символы.ПС + Символы.ПС +
		НСтр("ru='Включите функциональную опцию ""CRM и продажи - Несколько вариантов классификации задолженности"".';uk='Увімкніть функціональну опцію ""CRM і продажі - Кілька варіантів класифікації заборгованості"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		СтатусВозврата = Истина;
	ИначеЕсли Количество <> 1 Тогда
		СообщениеОбОшибке = ПрефиксСообщения + НСтр("ru='Возможно, в информационной базе не введено ни одного варианта классификации задолженности.';uk='Можливо, в інформаційній базі не введено жодного варіанту класифікації заборгованості.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		СтатусВозврата = Истина;
	КонецЕсли;

	Возврат СтатусВозврата;
КонецФункции 

// Формирует структуру отборов по партнеру и организации для контекстно вызываемых отчетов 
//   по расчетам с клиентом.
//
// Параметры:
//  МассивДокументов  - Массив - массив документов, которыми параметризуется отчет.
//  ИмяОтчета         - Строка - имя вызываемого отчета.
//  ИмяКоманды        - Строка - имя команды, при помощи которой вызывается отчет.вызываемого отчета.
//
// Возвращаемое значение:
//   Структура   - сформированная структура отбора
//
Функция СтруктураОтборовОтчетовРасчетыСКлиентами(МассивДокументов, ИмяОтчета, ИмяКоманды, Типы = Неопределено) Экспорт
	
	СтруктураОтборов = Новый Структура;
	
	ШаблонЗапросаПоДокументам = "
	|ВЫБРАТЬ 
	|	Документ.Партнер,
	|	Документ.Организация %ТекстПоместить%
	|ИЗ
	|	Документ.%ИмяТаблицы% КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)";
	
	ТекстОбъединить = "
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ЭтоПервыйЗапросОбъединения = Истина;
	
	ТекстЗапроса = "";
	
	Коллекция = ?(ЗначениеЗаполнено(Типы), Типы, Метаданные.Отчеты[ИмяОтчета].Команды[ИмяКоманды].ТипПараметраКоманды.Типы());
	
	Для Каждого ТипПараметраКоманды Из Коллекция Цикл
		
		ОбъектМетаданныхДокумента = Метаданные.НайтиПоТипу(ТипПараметраКоманды);
		Если ПравоДоступа("Чтение", ОбъектМетаданныхДокумента) Тогда
			ИмяТаблицы = ОбъектМетаданныхДокумента.Имя;
			
			ТекстЗапросаПоДокументу = СтрЗаменить(ШаблонЗапросаПоДокументам, "%ИмяТаблицы%", ИмяТаблицы);
			ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, 
			                                      "%ТекстПоместить%",
			                                      ?(ЭтоПервыйЗапросОбъединения,Символы.ПС + "ПОМЕСТИТЬ ДокументыПартнерыОрганизации", ""));
			
			ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервыйЗапросОбъединения, "", ТекстОбъединить) + ТекстЗапросаПоДокументу;
			
			ЭтоПервыйЗапросОбъединения = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПартнерыОрганизации.Партнер
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПартнерыОрганизации КАК ДокументыПартнерыОрганизации
	|		ПО Партнеры.Ссылка = ДокументыПартнерыОрганизации.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПартнерыОрганизации.Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПартнерыОрганизации КАК ДокументыПартнерыОрганизации
	|		ПО Организации.Ссылка = ДокументыПартнерыОрганизации.Организация";
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураОтборов.Вставить("Партнер", Результат[0].Выгрузить().ВыгрузитьКолонку("Партнер"));
	СтруктураОтборов.Вставить("Организация", Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Возврат СтруктураОтборов;
	
КонецФункции

// Устанавливает видимость группы финансового учета по порядку расчетов документа.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой было находится элемент группы финансового учета.
//	ЭтоЗаказ - Булево - Истина - Документ является заказом.
//	ПоЗаказу - Булево - Истина - Документ введен на основании заказа/заказов.
//
Процедура УстановитьВидимостьГруппыФинансовогоУчета(Форма, ЭтоЗаказ = Ложь, ПоЗаказу = Ложь) Экспорт
	
	ВидимостьЭлемента = Ложь;
	ПорядокРасчетов = Форма.Объект.ПорядокРасчетов;
	
	Если ЭтоЗаказ Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	ИначеЕсли ПоЗаказу Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
	Иначе
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	КонецЕсли;
	
	Форма.Элементы.ГруппаФинансовогоУчета.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

// Устанавливает видимость команд зачета оплаты по порядку расчетов документа.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой находится команда зачета оплаты.
//	ЭтоЗаказ - Булево - Истина - Документ является заказом.
//	ПоЗаказу - Булево - Истина - Документ введен на основании заказа/заказов.
//	ЭтоДоговор - Булево - Истина - Документ является графиком исполения договора
//
Процедура УстановитьВидимостьЗачетаОплаты(Форма, ЭтоЗаказ = Ложь, ПоЗаказу = Ложь, ЭтоДоговор = Ложь) Экспорт
	
	ВидимостьЭлемента = Истина;
	ПорядокРасчетов = Форма.Объект.ПорядокРасчетов;
	
	Если ЭтоЗаказ Тогда
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным);
	ИначеЕсли ПоЗаказу Тогда
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоЗаказамНакладным)
	ИначеЕсли ЭтоДоговор Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы, 
		"ЗачетОплатыФорма, ЗачетОплаты",
		"Видимость",
		ВидимостьЭлемента);
	
КонецПроцедуры

// Устанавливает видимость даты платежа по порядку расчетов документа.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой находится дата платежа.
//
Процедура УстановитьВидимостьДатыПлатежа(Форма) Экспорт
	
	Форма.Элементы.ДатаПлатежа.Видимость = Форма.Элементы.ДатаПлатежа.Видимость
		И Не (Форма.ГрафикИсполненияВДоговоре И Форма.Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
КонецПроцедуры

// Формирование таблицы взаимозачета кредиторской задолженности.
//
// Параметры:
//	ДебиторскаяЗадолженность - ТаблицаЗначений, МассивСтрок - таблица дебиторской задолженности 
//	КредиторскаяЗадолженность - ТаблицаЗначений, МассивСтрок - таблица кредиторской задолженности
//	ТаблицаДвижений - ТаблицаЗначений - таблица движений по регистру, если задана то будет дополнена движениями инчае будет возвращена в этой переменной 
//
Процедура ПровестиВзаимозачет(ДебиторскаяЗадолженность, КредиторскаяЗадолженность, ТаблицаДвижений = Неопределено) Экспорт
	
	ОбщиеПоля   = "Период,ХозяйственнаяОперация,Организация,Подразделение,Валюта";
	ПоляДебета  = "Партнер,Контрагент,Договор,ОбъектРасчетов,ТипСуммы,ВалютаВзаиморасчетов,ИсточникГФУРасчетов";
	ПоляКредита = "КорПартнер,КорКонтрагент,КорДоговор,КорОбъектРасчетов,КорТипСуммы,КорВалютаВзаиморасчетов,КорИсточникГФУРасчетов";
	ПоляСумм    = "Сумма,СуммаРегл,СуммаВВалюте,СуммаВВалютеВзаиморасчетов,КорСуммаВВалютеВзаиморасчетов";
	
	Если ТаблицаДвижений = Неопределено Тогда
		ТаблицаДвижений = РегистрыНакопления.ДвиженияКонтрагентКонтрагент.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Иначе
		ОбщиеПоля = "Регистратор," + ОбщиеПоля;
	КонецЕсли;
	
	НомерСтроки = 0;
	ПоследнийИндекс = КредиторскаяЗадолженность.Количество()-1;
	НашеПредприятие = Справочники.Партнеры.НашеПредприятие;
	Для Каждого Дебет Из ДебиторскаяЗадолженность Цикл
		Индекс = -1;
		Для Каждого Кредит Из КредиторскаяЗадолженность Цикл
			
			Индекс = Индекс + 1;
			Если Кредит.СуммаРегл = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПоследнийПлатеж = Индекс = ПоследнийИндекс;
			
			Сумма        = СписатьСумму(Дебет.Сумма, Кредит.Сумма, ПоследнийПлатеж);
			СуммаРегл    = СписатьСумму(Дебет.СуммаРегл, Кредит.СуммаРегл, ПоследнийПлатеж);
			СуммаВВалюте = СписатьСумму(Дебет.СуммаВВалюте, Кредит.СуммаВВалюте, ПоследнийПлатеж);
			
			СуммаВзаиморасчетов = Окр(СуммаРегл/?(Дебет.КурсВалютыВзаиморасчетов=0,1,Дебет.КурсВалютыВзаиморасчетов),2);
			КорСуммаВзаиморасчетов = Окр(СуммаРегл/?(Кредит.КурсВалютыВзаиморасчетов=0,1,Кредит.КурсВалютыВзаиморасчетов),2);
			
			СуммаВВалютеВзаиморасчетов = СписатьСумму(Дебет.СуммаВВалютеВзаиморасчетов, СуммаВзаиморасчетов, ПоследнийПлатеж);
			КорСуммаВВалютеВзаиморасчетов = СписатьСумму(Кредит.КорСуммаВВалютеВзаиморасчетов, КорСуммаВзаиморасчетов, ПоследнийПлатеж);
			
			Если СуммаРегл <> 0 Тогда
				НомерСтроки = НомерСтроки + 1;
				НовоеДвижение = ТаблицаДвижений.Добавить();
				НовоеДвижение.НомерСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Дебет, ОбщиеПоля+","+ПоляДебета, ПоляСумм);
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Кредит, ПоляКредита, ПоляСумм);
				УстановитьПустойОбъектРасчета(НовоеДвижение);
				
				НовоеДвижение.Сумма        = Сумма;
				НовоеДвижение.СуммаРегл    = СуммаРегл;
				НовоеДвижение.СуммаВВалюте = СуммаВВалюте;
				НовоеДвижение.СуммаВВалютеВзаиморасчетов    = СуммаВВалютеВзаиморасчетов;
				НовоеДвижение.КорСуммаВВалютеВзаиморасчетов = КорСуммаВВалютеВзаиморасчетов;
				
				Если Дебет.Организация <> Кредит.Организация Тогда
				
					НовоеДвижение.КорПартнер = НашеПредприятие;
					НовоеДвижение.КорКонтрагент = Кредит.Организация;
					
					НомерСтроки = НомерСтроки + 1;
					НовоеДвижениеКор = ТаблицаДвижений.Добавить();
					НовоеДвижениеКор.НомерСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, Дебет, ПоляДебета, ПоляСумм);
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, Кредит, ОбщиеПоля+","+ПоляКредита, ПоляСумм);
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, НовоеДвижение, ПоляСумм);
					УстановитьПустойОбъектРасчета(НовоеДвижениеКор);
					НовоеДвижениеКор.Партнер = НашеПредприятие;
					НовоеДвижениеКор.Контрагент = Дебет.Организация;
					
				КонецЕсли;
				
			КонецЕсли;
			Если Дебет.СуммаРегл <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;// по кредиторской задолженности
	КонецЦикла;// по дебиторской задолженности
	
КонецПроцедуры

// Определяется возможная сумма списания с текущего остатка - весь остаток или только часть остатка равная сумме списания.
// При этом уменьшается текущий остаток на сумму списания и сама сумма списания.
//
// Параметры:
//  СуммаОстатка - Число - Текущий остаток с которого необходимо списать сумму
//  СуммаКСписанию - Число - Сумма которую необходимо списать
//  ПоследняяЧасть - Булево - если истина, то списать весь остаток
//
// Возвращаемое значение:
//  Число - сумма которую необходимо списать или весь остаток целиком в случае если он меньше заданной суммы или ПоследняяЧасть = Истина
//
Функция СписатьСумму(СуммаОстатка, СуммаКСписанию, ПоследняяЧасть = Ложь) Экспорт
	
	СуммаСписания = 0;
	КСписанию = Макс(СуммаКСписанию, -СуммаКСписанию);
	Знак = ?(КСписанию = 0, 1, СуммаКСписанию/КСписанию);
	
	Если СуммаОстатка >= КСписанию И НЕ ПоследняяЧасть Тогда
		СуммаСписания = КСписанию;
		СуммаОстатка = СуммаОстатка - СуммаСписания;
		КСписанию = 0;
	Иначе
		СуммаСписания = СуммаОстатка;
		КСписанию = КСписанию - СуммаСписания;
		СуммаОстатка = 0;
	КонецЕсли;
	
	СуммаКСписанию = Знак * КСписанию;
	
	Возврат СуммаСписания;
	
КонецФункции

// Определяется возможная сумма списания с текущего остатка одного показателя, 
// пропорционально уже списанной по другому показателю.
// При этом уменьшается текущий остаток.
//
// Параметры:
//	СуммаОстатка - Число - Текущий остаток с которого необходимо списать сумму.
//	СуммаСписано - Число - Сумма которая уже была списана с другого показателя.
//	СуммаВсего - Число - Сумма по другому показателю до списания.
//
// Возвращаемое значение:
//	Число - сумма которую необходимо списать
//
Функция СписатьСуммуПропорционально(СуммаОстатка, СуммаСписано, СуммаВсего) Экспорт
	
	СуммаКСписанию = 0;
	Если СуммаВсего > 0 Тогда
		СуммаКСписанию = Окр(СуммаСписано * СуммаОстатка / СуммаВсего, 2);
	КонецЕсли;
	
	Возврат СписатьСумму(СуммаОстатка, СуммаКСписанию);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииДляВыбораДокументаРасчетов

// Возвращает параметры, используемые при выборе документа расчетов с клиентами.
// Используется в общей форме "ВыборДокументаРасчетов" и в обработке получения данных выбора основания платежа.
// 
// Возвращаемое значение: 
// Структура с ключами
//	ВводПоСтроке - Булево - Признак получения данных выбора.
//	ЭтоУИП - Булево - Поиск документа расчетов осуществляется по УИП.
//	ОтборПоОрганизацииИКонтрагенту - Булево - Есть отбор по организации и конрагенту.
//	ИсключитьРедактируемыйДокумент - Булево - Не включать документ из которого вызывается подбор в данные выбора.
//	ЗапретитьДоговорыПоДокументам - Булево - Запретить договоры с порядком расчетов "по заказам/накладным".
//
Функция ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВводПоСтроке",                   Ложь);
	ПараметрыОтбора.Вставить("ЭтоУИП",                         Ложь);
	ПараметрыОтбора.Вставить("ОтборПоОрганизацииИКонтрагенту", Ложь);
	ПараметрыОтбора.Вставить("ИсключитьРедактируемыйДокумент", Ложь);
	ПараметрыОтбора.Вставить("ЗапретитьДоговорыПоДокументам",  Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Дополняет текст запроса отборами в функции ПолучитьТекстЗапросаДокументыРасчетовСКлиентами()
// 
// Параметры:
//	ТекстЗапроса - Строка - Изменяемый текст запроса.
//	ТипОбъекта - Тип - Тип документа для которого формируется запрос.
//	ПараметрыОтбора - Структура - см. ф-цию ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами()
//
Процедура ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(ТекстЗапроса, ТипОбъекта, ПараметрыОтбора)
	
	Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Организация В (&Организация)";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ВводПоСтроке 
		Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
		
		Если ТипОбъекта = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.ОрганизацияПолучатель
			|	КОНЕЦ = &Контрагент";
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Контрагент = &Контрагент";
			
		КонецЕсли;
		
	КонецЕсли;
	Если ПараметрыОтбора.ВводПоСтроке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ИсключитьРедактируемыйДокумент
		И (ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Ссылка <> &ИсключаемыйДокумент";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ЗапретитьДоговорыПоДокументам
		И ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|";
	
КонецПроцедуры

// Возвращает параметры, используемые при выборе документа расчетов с поставщиками.
// Используется в общей форме "ВыборДокументаРасчетов" и в обработке получения данных выбора основания платежа.
// 
// Возвращаемое значение: 
// Структура с ключами
//	ВводПоСтроке - Булево - Признак получения данных выбора.
//	ОтборПоОрганизацииИКонтрагенту - Булево - Есть отбор по организации и конрагенту.
//	ИсключитьХозяйственнуюОперацию - Булево - Органичить документы к выбору по хозяйственной операции.
//	ИсключитьРедактируемыйДокумент - Булево - Не включать документ из которого вызывается подбор в данные выбора.
//	ЗапретитьДоговорыПоДокументам - Булево - Запретить договоры с порядком расчетов "по заказам/накладным".
//
Функция ПараметрыОтбораПриВыбореДокументаРасчетовСПоставщиками() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВводПоСтроке",                   Ложь);
	ПараметрыОтбора.Вставить("ОтборПоОрганизацииИКонтрагенту", Ложь);
	ПараметрыОтбора.Вставить("ИсключитьХозяйственнуюОперацию", Ложь);
	ПараметрыОтбора.Вставить("ИсключитьРедактируемыйДокумент", Ложь);
	ПараметрыОтбора.Вставить("ЗапретитьДоговорыПоДокументам",  Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Дополняет текст запроса отборами в функции ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками()
// 
// Параметры:
//	ТекстЗапроса - Строка - Изменяемый текст запроса.
//	ТипОбъекта - Тип - Тип документа для которого формируется запрос.
//	ПараметрыОтбора - Структура - см. ф-цию ПараметрыОтбораПриВыбореДокументаРасчетовСПоставщиками()
//
Процедура ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(ТекстЗапроса, ТипОбъекта, ПараметрыОтбора)
	
	Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
		
		Если ТипОбъекта = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.ОрганизацияПолучатель В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ = &Контрагент";
			
		Иначе
		
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ВводПоСтроке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ИсключитьРедактируемыйДокумент
		И ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Ссылка <> &ИсключаемыйДокумент";
		
	КонецЕсли;
	
	
	Если ПараметрыОтбора.ИсключитьХозяйственнуюОперацию
		И ТипОбъекта = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ЗапретитьДоговорыПоДокументам
		И ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Функция формирует массив организаций, доступных для подбора остатков расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, указанная в документе
//	ЕстьРасчетыСПоставщиками - Булево - Признак наличия расчетов с партнерами
//	ЕстьРасчетыСКлиентами - Булево - Признак наличия расчетов с поставщиками
//
// Возвращаемое значение:
//	Массив - Массив доступных организаций
//
Функция ДоступныеОрганизацийДляПодбораОстатков(Организация, ЕстьРасчетыСПоставщиками, ЕстьРасчетыСКлиентами)
	
	ДоступныеОрганизации = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
		|	И (&ЕстьРасчетыСКлиентами ИЛИ &ЕстьРасчетыСПоставщиками)
		|	И Организации.ОбособленноеПодразделение
		|");
		Запрос.УстановитьПараметр("ЕстьРасчетыСПоставщиками", ЕстьРасчетыСПоставщиками);
		Запрос.УстановитьПараметр("ЕстьРасчетыСКлиентами", ЕстьРасчетыСКлиентами);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСПоставщиками()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	               |	ВЫБОР
	               |		КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Выбран,
	               |	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	               |	&ВалютаДокумента КАК ВалютаДокумента,
	               |	РасчетыСПоставщиками.ЗаказПоставщику.Дата КАК Дата,
	               |	РасчетыСПоставщиками.ЗаказПоставщику.Номер КАК Номер,
	               |	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
	               |	"""" КАК ИдентификаторПлатежа,
	               |	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
	               |	АналитикаПоПартнерам.Организация КАК Организация,
	               |	АналитикаПоПартнерам.Партнер КАК Партнер,
	               |	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	               |	АналитикаПоПартнерам.Договор КАК Договор,
	               |	ВЫБОР
	               |		КОГДА АналитикаПоПартнерам.Договор.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	               |			ТОГДА АналитикаПоПартнерам.Договор.СтатьяДвиженияДенежныхСредств
	               |		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) <> ТИП(Справочник.ДоговорыКонтрагентов)
	               |				И ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	               |			ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
	               |		ИНАЧЕ &СтатьяДвиженияДенежныхСредств
	               |	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПоставщиками.СуммаОстаток > 0
	               |			ТОГДА РасчетыСПоставщиками.СуммаОстаток
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ДолгПартнера,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток > 0
	               |				И НЕ &ТолькоБезусловнаяЗадолженность
	               |			ТОГДА РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КОплате,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПоставщиками.СуммаОстаток < 0
	               |			ТОГДА -РасчетыСПоставщиками.СуммаОстаток
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК НашДолг
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам)
	               |				И (Валюта = &ВалютаДокумента
	               |					ИЛИ АналитикаУчетаПоПартнерам.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация))) КАК РасчетыСПоставщиками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ПО РасчетыСПоставщиками.ЗаказПоставщику = ТаблицаПлатежей.Заказ
	               |			И РасчетыСПоставщиками.Валюта = ТаблицаПлатежей.Валюта
	               |ГДЕ
	               |	(&ДебиторскаяЗадолженность
	               |				И РасчетыСПоставщиками.СуммаОстаток > 0
	               |			ИЛИ НЕ &ДебиторскаяЗадолженность
	               |				И РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток > 0
	               |				И НЕ &ТолькоБезусловнаяЗадолженность
	               |			ИЛИ НЕ &ДебиторскаяЗадолженность
	               |				И РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.СуммаОстаток > 0)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	РасчетыСКлиентами.ЗаказКлиента.Дата КАК Дата,
	|	РасчетыСКлиентами.ЗаказКлиента.Номер КАК Номер,
	|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
	|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор,
	|	
	|	ВЫБОР КОГДА АналитикаПоПартнерам.Договор.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|		АналитикаПоПартнерам.Договор.СтатьяДвиженияДенежныхСредств
	|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) <> ТИП(Справочник.ДоговорыКонтрагентов)
	|		И ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|			ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
	|	ИНАЧЕ
	|		&СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток > 0 ТОГДА
	|		РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
	|		И Не &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И (Валюта = &ВалютаДокумента ИЛИ АналитикаУчетаПоПартнерам.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация))
 	|	) КАК РасчетыСКлиентами
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|	ПО 
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСКлиентами.ЗаказКлиента = ТаблицаПлатежей.Заказ
	|		И РасчетыСКлиентами.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток < 0)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
	|	И Не &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток > 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет таблицу остатков расчетов с партнером.
//
// Параметры:
//	Реквизиты - Структура - Структура должна содержать значения: 
//				Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация
//	АдресПлатежейВХранилище - Строка - Адрес во временном хранилище, в которое помещена табличная часть документа 
//	ТаблицаОстатковРасчетов - ТаблицаЗначений - Таблица с остатками расчетов
//	УчитыватьФилиалы - Булево - Признак включения остатков по филиалам организации
//
Процедура ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов, УчитыватьФилиалы = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаДокумента", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	
	Если Не ЗначениеЗаполнено(Реквизиты.Партнер) Тогда
		Запрос.УстановитьПараметр("Партнер", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПартнерПрочиеОтношения", Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	
	Если Реквизиты.Свойство("ТипРасчетов") Тогда
		
		ЕстьРасчетыСПоставщиками = (Реквизиты.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
		ЕстьРасчетыСКлиентами    = (Реквизиты.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
		
	Иначе
	
		МассивРасчетыСПоставщиками = Новый Массив;
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.АвансовыйОтчет);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика);
		
		ЕстьРасчетыСПоставщиками = МассивРасчетыСПоставщиками.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено;
		
		МассивРасчетыСКлиентами = Новый Массив;
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		
		ЕстьРасчетыСКлиентами = МассивРасчетыСКлиентами.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено;
		
		Если Не ЕстьРасчетыСКлиентами И Не ЕстьРасчетыСПоставщиками Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Подбор по остаткам расчетов с партнерами не поддерживается для операции %1';uk='Підбір за залишками розрахунків з партнерами не підтримується для операції %1'"),
				Реквизиты.ХозяйственнаяОперация);
			ВызватьИсключение Текст;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчитыватьФилиалы Тогда
		ДоступныеОрганизации = ДоступныеОрганизацийДляПодбораОстатков(Реквизиты.Организация, ЕстьРасчетыСПоставщиками, ЕстьРасчетыСКлиентами);
	Иначе
		ДоступныеОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Реквизиты.Организация);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств =
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	МассивДебиторскаяЗадолженность = Новый Массив;
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", МассивДебиторскаяЗадолженность.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено);
	
	МассивТолькоБезусловнаяЗадолженность = Новый Массив;
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Запрос.УстановитьПараметр("ТолькоБезусловнаяЗадолженность", МассивТолькоБезусловнаяЗадолженность.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Заказ КАК Заказ,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	РасшифровкаПлатежа.Сумма КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	&Партнер <> Неопределено
	|	И АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Партнер = &Партнер
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	&Партнер = Неопределено
	|	И АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|	И (&ПартнерПрочиеОтношения И АналитикаПоПартнерам.Партнер.ПрочиеОтношения
	|		ИЛИ Не &ПартнерПрочиеОтношения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|//ТекстЗапросаРасчетыСКлиентами
	|
	|//ТекстОбъединитьВсе
	|
	|//ТекстЗапросаРасчетыСПоставщиками
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Дата,
	|	Номер
	|";
	Если ЕстьРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаРасчетыСКлиентами",
			ТекстЗапросаПоОстаткамРасчетовСКлиентами());
	КонецЕсли;
	Если ЕстьРасчетыСПоставщиками Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаРасчетыСПоставщиками",
			ТекстЗапросаПоОстаткамРасчетовСПоставщиками());
	КонецЕсли;
	Если ЕстьРасчетыСКлиентами И ЕстьРасчетыСПоставщиками Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстОбъединитьВсе", "ОБЪЕДИНИТЬ ВСЕ");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	
	Если ЗначениеЗаполнено(АдресПлатежейВХранилище) Тогда
		РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	Иначе
		Если ТаблицаОстатковРасчетов = Неопределено Тогда
			РасшифровкаПлатежа = Новый ТаблицаЗначений;
			РасшифровкаПлатежа.Колонки.Добавить("Заказ", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			РасшифровкаПлатежа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		Иначе
			РасшифровкаПлатежа = ТаблицаОстатковРасчетов.Выгрузить(,).СкопироватьКолонки();
		КонецЕсли;
	КонецЕсли;
	РасшифровкаПлатежа.Свернуть("Заказ, ВалютаВзаиморасчетов", "Сумма");
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	Если ТаблицаОстатковРасчетов = Неопределено Тогда
		ТаблицаОстатковРасчетов = Запрос.Выполнить().Выгрузить();
	Иначе
		ТаблицаОстатковРасчетов.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СуммаКРаспределению = Реквизиты.СуммаДокумента;
	Иначе
		СуммаКРаспределению = 0;
	КонецЕсли;
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если Не СтрокаТаблицы.Выбран Тогда
			
			Если СтрокаТаблицы.КОплате <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.КОплате;
				
			ИначеЕсли СтрокаТаблицы.НашДолг <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.НашДолг;
				
			ИначеЕсли СтрокаТаблицы.ДолгПартнера <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.ДолгПартнера;
				
			КонецЕсли;
			
			Если Реквизиты.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
				
				Коэффициенты = СоответствиеВалютаКурс.Получить(СтрокаТаблицы.ВалютаВзаиморасчетов);
				Если Коэффициенты = Неопределено Тогда
					Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, СтрокаТаблицы.ВалютаВзаиморасчетов, ?(Реквизиты.Дата <> '00010101', Реквизиты.Дата, ТекущаяДата()));
					СоответствиеВалютаКурс.Вставить(СтрокаТаблицы.ВалютаВзаиморасчетов, Коэффициенты);
				КонецЕсли;
					
				СтрокаТаблицы.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, СтрокаТаблицы.Сумма / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаКРаспределению > 0 Тогда
			
			СтрокаТаблицы.Выбран = Истина;
			Если СтрокаТаблицы.Сумма > СуммаКРаспределению Тогда
				СтрокаТаблицы.Сумма = СуммаКРаспределению;
			КонецЕсли;
			СуммаКРаспределению = СуммаКРаспределению - СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует массив допустимых хозяйственных операций договора с контрагентом.
//
// Параметры:
//	ОперацияДокумента - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
// Возвращаемое значение:
//	Массив - Массив хозяйственных операций
//
Функция ХозяйственнаяОперацияДоговора(ОперацияДокумента) Экспорт
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если ОперацияДокумента = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		
	ИначеЕсли ОперацияДокумента = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

Процедура УстановитьПустойОбъектРасчета(Запись)
	
	Если НЕ ЗначениеЗаполнено(Запись.ОбъектРасчетов) Тогда
		Запись.ОбъектРасчетов = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.КорОбъектРасчетов) Тогда
		Запись.КорОбъектРасчетов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления BAS УТ 3.2.2
// Заполняет реквизит "Организация" в табличной части "РасшифровкаПлатежа"
Процедура ЗаполнитьВладельцаОбъектаРасчетаТЧ(Параметры) Экспорт
	
	Запрос = Новый Запрос(Параметры.ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ДополнительныеИсточникиДанных = Параметры.ДополнительныеИсточникиДанных;
    
    Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь, 
        Параметры.ПолноеИмяОбъекта, 
        Запрос.МенеджерВременныхТаблиц, 
        ДопПараметры
    );
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		Регистратор = ВыборкаПоДокументу.Регистратор;
		НачатьТранзакцию();
		
		Попытка
			
			ОбъектДокумента = Регистратор.ПолучитьОбъект();
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(Параметры.ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
			Блокировка.Заблокировать();
			
			// Заполнить табличную часть
			ВыборкаТабЧасть = ВыборкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТабЧасть.Следующий() Цикл
				ТабЧасть = ОбъектДокумента[ВыборкаТабЧасть.ИмяТабличнойЧасти];
				Выборка = ВыборкаТабЧасть.Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТабЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
					НоваяСтрока.Организация = Выборка.Организация;
				КонецЦикла;// по строкам табличной части
			КонецЦикла;// по табличным частям документа
			
			Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
				Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьФорматированноеНазначениеПлатежаПриОбновлении(ОбъектДокумента);
			ИначеЕсли ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
				Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьФорматированноеНазначениеПлатежаПриОбновлении(ОбъектДокумента);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ТекстСообщения = НСтр("ru='Не удалось обработать %Документ% по причине: %Причина%';uk='Не вдалося обробити %Документ% з причини: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				Регистратор,
				ТекстСообщения
            );
			ОтменитьТранзакцию();
			
		КонецПопытки;
	
	КонецЦикла;// по документам
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        Параметры.ПолноеИмяОбъекта
    );
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


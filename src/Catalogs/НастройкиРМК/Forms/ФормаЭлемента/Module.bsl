#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКассККМ") Тогда
		КассаККМ = Справочники.КассыККМ.КассаККМФискальныйРегистраторПоУмолчанию();
		Если Не ЗначениеЗаполнено(КассаККМ) Тогда
			ВызватьИсключение НСтр("ru='В информационной базе не создано кассы ККМ с типом: Фискальный регистратор.
            |Для работы с настройкой РМК в системе должен быть зарегистрирован как минимум один фискальный регистратор.'
            |;uk='В інформаційній базі не створено каси ККМ з типом: Фіскальний реєстратор.
            |Для роботи з настройкою РМК в системі повинен бути зареєстрований як мінімум один фіскальний реєстратор.'");
		КонецЕсли;
		
		ИспользоватьБезПодключенияОборудования = Истина;
		Элементы.ПодключаемоеОборудование.Доступность = НЕ ИспользоватьБезПодключенияОборудования;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
		Объект.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКассККМ") Тогда
		
		ТекущийОбъект.КассыККМ.Очистить();
		НоваяСтрока = ТекущийОбъект.КассыККМ.Добавить();
		НоваяСтрока.КассаККМ                               = КассаККМ;
		НоваяСтрока.ИспользоватьБезПодключенияОборудования = ИспользоватьБезПодключенияОборудования;
		НоваяСтрока.АвтоматическаяИнкассация               = АвтоматическаяИнкассация;
		НоваяСтрока.ПодключаемоеОборудование               = ПодключаемоеОборудование;
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСписокИдентификационныеДанныеПользователей(Команда)
	
	ОткрытьФорму("РегистрСведений.ИдентификационныеДанныеПользователей.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьАвторизациюПриИзменении(Элемент)
	
	Элементы.ИдентификационныеДанныеПользователей.Доступность = Объект.ИспользоватьАвторизацию;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочееМестоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
		Объект.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассирМожетБытьПродавцомПриИзменении(Элемент)
	
	Если Не Объект.МенеджерТорговогоЗалаМожетБытьПродавцом И Не Объект.КассирМожетБытьПродавцом Тогда
		Объект.МенеджерТорговогоЗалаМожетБытьПродавцом = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерТорговогоЗалаМожетБытьПродавцомПриИзменении(Элемент)
	
	Если Не Объект.МенеджерТорговогоЗалаМожетБытьПродавцом И Не Объект.КассирМожетБытьПродавцом Тогда
		Объект.КассирМожетБытьПродавцом = Истина;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиКассыККМ

&НаКлиенте
Процедура КассыККМКассаККМПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.КассыККМ.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КассыККМПодключаемоеОборудование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КассыККМ.ИспользоватьБезПодключенияОборудования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Используется без подключения';uk='Використовується без підключення'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭквайринговыеТерминалыПодключаемоеОборудование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Используется без подключения';uk='Використовується без підключення'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБезПодключенияОборудованияПриИзменении(Элемент)
	
	Элементы.ПодключаемоеОборудование.Доступность = НЕ ИспользоватьБезПодключенияОборудования;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(ПодключаемоеОборудование)
		И Не ИспользоватьБезПодключенияОборудования
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКассККМ") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не заполнено поле ""Подключаемое оборудование""';uk='Не заповнене поле ""Обладнання для підключення""'"),,"ПодключаемоеОборудование",,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКассыККМ()
	
	Если Не ИспользоватьНесколькоКассККМ 
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		КассаККМ                               = Объект.КассыККМ[0].КассаККМ;
		ПодключаемоеОборудование               = Объект.КассыККМ[0].ПодключаемоеОборудование;
		ИспользоватьБезПодключенияОборудования = Объект.КассыККМ[0].ИспользоватьБезПодключенияОборудования;
		АвтоматическаяИнкассация               = Объект.КассыККМ[0].АвтоматическаяИнкассация;
		Элементы.ПодключаемоеОборудование.Доступность = НЕ ИспользоватьБезПодключенияОборудования;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	
	ИспользоватьНесколькоКассККМ           = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКассККМ");
	ИспользоватьПодключаемоеОборудование   = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ИспользоватьОплатуПлатежнымиКартами    = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
	Элементы.ГруппаКассыККМ.Видимость                         =    ИспользоватьНесколькоКассККМ;
	Элементы.АвтоматическаяИнкассация.Видимость               = Не ИспользоватьНесколькоКассККМ;
	Элементы.ИспользоватьБезПодключенияОборудования.Видимость = Не ИспользоватьНесколькоКассККМ И ИспользоватьПодключаемоеОборудование;
	Элементы.ПодключаемоеОборудование.Видимость               = Не ИспользоватьНесколькоКассККМ И ИспользоватьПодключаемоеОборудование;
	Элементы.ГруппаЭквайринговыеТерминалы.Видимость           = ИспользоватьОплатуПлатежнымиКартами;
	
	Элементы.ИдентификационныеДанныеПользователей.Доступность = Объект.ИспользоватьАвторизацию;
	
	ЗаполнитьДанныеКассыККМ();
	
КонецПроцедуры


#КонецОбласти

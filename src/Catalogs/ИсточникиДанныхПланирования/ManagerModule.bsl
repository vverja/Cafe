
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаПоиска = Неопределено;
	ВыборГруппИЭлементов = Неопределено;
	
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	
	Если СтрокаПоиска = Неопределено Тогда
		
		СтрокаПоиска = "";
		
	КонецЕсли;
	
	Параметры.Свойство("ВыборГруппИЭлементов", ВыборГруппИЭлементов);
	
	Если ВыборГруппИЭлементов = Неопределено Тогда
		
		ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникиДанныхПланирования.Ссылка КАК Значение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ИсточникиДанныхПланирования.Ссылка) КАК Представление,
	|	ИсточникиДанныхПланирования.ПометкаУдаления КАК ПометкаУдаления,
	|	ИсточникиДанныхПланирования.ОграничениеВыборкиПоПериоду КАК ОграничениеВыборкиПоПериоду
	|ИЗ
	|	Справочник.ИсточникиДанныхПланирования КАК ИсточникиДанныхПланирования
	|ГДЕ
	|	(ИсточникиДанныхПланирования.ЭтоГруппа
	|				И &Группы
	|			ИЛИ НЕ ИсточникиДанныхПланирования.ЭтоГруппа
	|				И &Элементы)
	|	И ИсточникиДанныхПланирования.Наименование ПОДОБНО &СтрокаПоиска");
	
	Запрос.УстановитьПараметр("Группы", ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы 
		ИЛИ ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	Запрос.УстановитьПараметр("Элементы", ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы 
		ИЛИ ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураВыбора = Новый Структура("Значение", Новый Структура("Значение, ОграничениеВыборкиПоПериоду", 
				Выборка.Значение, Выборка.ОграничениеВыборкиПоПериоду));
			
			Если Выборка.ПометкаУдаления Тогда
				
				СтруктураВыбора.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
				
			КонецЕсли;
			
			ДанныеВыбора.Добавить(СтруктураВыбора, Выборка.Представление);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция ВыбратьДанные(ПараметрыИсточникаДанных, ПользовательскиеНастройки, ДополнительныеПараметры, КомпоновщикНастроекКомпоновкиДанных = Неопределено) Экспорт
	
	// Схема компоновки данных
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыИсточникаДанных.ИсточникДанныхПланирования, 
		"ИмяШаблонаСКД, СхемаКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных, ОграничениеВыборкиПоПериоду");
	Если ЗначениеЗаполнено(Реквизиты.ИмяШаблонаСКД) Тогда
		СхемаКомпоновкиДанных = СхемаКомпоновкиПоИмениШаблона(Реквизиты.ИмяШаблонаСКД);
		Если СхемаКомпоновкиДанных = Неопределено Тогда
			СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
		КонецЕсли; 
	Иначе
		СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
	КонецЕсли;
	
	ПодстановкаОсновногоСпособаОбеспечения(СхемаКомпоновкиДанных);
	ОграничениеВыборкиПоПериоду = Реквизиты.ОграничениеВыборкиПоПериоду;
	
	Если ПараметрыИсточникаДанных.Свойство("ИзменитьРезультатНа") 
		И ЗначениеЗаполнено(ПараметрыИсточникаДанных.ИзменитьРезультатНа) Тогда
		
		Коэффициент = (100 + ПараметрыИсточникаДанных.ИзменитьРезультатНа) / 100;
		
		// Добавление предопределенных параметров и установка значений.
		НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		НовыйПараметр.Имя = "Коэффициент";
		НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("Число");
		НовыйПараметр.Значение = Коэффициент;
		НовыйПараметр.ОграничениеИспользования = Ложь;
		НовыйПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Для каждого ПолеИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл
			Если НЕ (ПолеИтога.ПутьКДанным = "Цена" ИЛИ ПолеИтога.ПутьКДанным = "Количество") Тогда
				Продолжить;
			КонецЕсли;
			ПолеИтога.Выражение = ПолеИтога.Выражение+" * &Коэффициент";
			
		КонецЦикла;
		
	КонецЕсли; 
	
	// Загрузка настроек
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	НастройкиКомпоновкиДанных = Реквизиты.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если НастройкиКомпоновкиДанных <> Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	Иначе
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	КомпоновщикНастроекКомпоновкиДанных.Восстановить();
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
	КонецЕсли;
		
	// Установка параметров данных
	ПараметрИспользуетсяСмещениеПериода = СхемаКомпоновкиДанных.Параметры.Найти("ИспользуетсяСмещениеПериода");
	
	Если ОграничениеВыборкиПоПериоду <> 3 И ПараметрИспользуетсяСмещениеПериода <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИспользуетсяСмещениеПериода", Ложь);
		
	КонецЕсли;
	
	ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
	
	Если (ОграничениеВыборкиПоПериоду = 2 ИЛИ ОграничениеВыборкиПоПериоду = 3) 
		И ПараметрНачалоПериода <> Неопределено 
		И ДополнительныеПараметры.Свойство("Период") <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", ДополнительныеПараметры.Период.ДатаНачала);
		
	КонецЕсли;
	
	ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
	
	Если (ОграничениеВыборкиПоПериоду = 2 ИЛИ ОграничениеВыборкиПоПериоду = 3) 
		И ПараметрКонецПериода <> Неопределено 
		И ДополнительныеПараметры.Свойство("Период") <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", ДополнительныеПараметры.Период.ДатаОкончания);
		
	КонецЕсли;
	
	ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("Период");
	
	Если ОграничениеВыборкиПоПериоду = 1 
		И ПараметрПериод <> Неопределено 
		И ДополнительныеПараметры.Свойство("Дата") <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ДополнительныеПараметры.Дата.Дата);
		
	КонецЕсли;
	
	Если ОграничениеВыборкиПоПериоду = 3 
		И ДополнительныеПараметры.Свойство("ПараметрыДанных") <> Неопределено
		И ДополнительныеПараметры.ПараметрыДанных.Свойство("НачалоПериода") <> Неопределено
		И СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериодаСмещения") <> Неопределено Тогда
	
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИспользуетсяСмещениеПериода", Истина);
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериодаСмещения", ДополнительныеПараметры.ПараметрыДанных.НачалоПериода);
	
	КонецЕсли;
	
	Если ОграничениеВыборкиПоПериоду = 3 
		И ДополнительныеПараметры.Свойство("ПараметрыДанных") <> Неопределено
		И ДополнительныеПараметры.ПараметрыДанных.Свойство("ОкончаниеПериода") <> Неопределено
		И СхемаКомпоновкиДанных.Параметры.Найти("КонецПериодаСмещения") <> Неопределено Тогда
	
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИспользуетсяСмещениеПериода", Истина);
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериодаСмещения", КонецДня(ДополнительныеПараметры.ПараметрыДанных.ОкончаниеПериода));
	
	КонецЕсли;
	
	// Установка отбора по сегментам номенклатуры
	Если КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКомпоновкиДанных.Настройки, "ИспользуетсяОтборПоСегментуНоменклатуры") <> Неопределено Тогда
		
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроекКомпоновкиДанных);
		
	КонецЕсли;
	
	// Добавление параметров из дополнительных параметров и установка значений.
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ПараметрыДанных") <> Неопределено Тогда
		
		Для каждого Параметр из ДополнительныеПараметры.ПараметрыДанных Цикл
			Если Параметр.Ключ = "Коэффициент" Тогда  // Системный параметр пропускаем
				Продолжить;
			КонецЕсли;
			Если Параметр.Ключ = "НачалоПериода" ИЛИ Параметр.Ключ = "КонецПериода" Тогда  // Параметры устанавливаются настройками источника
				Продолжить;
			КонецЕсли;
			НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Найти(Параметр.Ключ);
			
			ПараметрНастроек = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы.Найти(Параметр.Ключ);
			Если НовыйПараметр <> Неопределено И (ПараметрНастроек = Неопределено ИЛИ НЕ ПараметрНастроек.Использование) Тогда
				
				КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Отключение вывода общих итогов
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Установка текстов запросов коэффициентов единиц измерений / упаковок
	Если Реквизиты.ИмяШаблонаСКД = "Обработка.ИсточникиДанныхПланирования.ЦеныНоменклатурыПредопределенный" Тогда 
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЦеныНоменклатуры.Запрос;
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаКоэффициентУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЦеныНоменклатурыСрезПоследних.Упаковка", "ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		СхемаКомпоновкиДанных.НаборыДанных.ЦеныНоменклатуры.Запрос = ТекстЗапроса;
	ИначеЕсли Реквизиты.ИмяШаблонаСКД = "Обработка.ИсточникиДанныхПланирования.МинимальнаяЦенаПоставщикаПредопределенный" Тогда 
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЦеныНоменклатуры.Запрос;
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаКоэффициентУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", "ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
		СхемаКомпоновкиДанных.НаборыДанных.ЦеныНоменклатуры.Запрос = ТекстЗапроса;
	ИначеЕсли Реквизиты.ИмяШаблонаСКД = "Обработка.ИсточникиДанныхПланирования.ЦеныНоменклатурыПоставщиковПредопределенный" Тогда 
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЦеныНоменклатуры.Запрос;
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"&ТекстЗапросаКоэффициентУпаковки", 
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", "ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
		СхемаКомпоновкиДанных.НаборыДанных.ЦеныНоменклатуры.Запрос = ТекстЗапроса;
	КонецЕсли;

	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	// Таблица значений, в которую будет получен результат
	Результат = Новый ТаблицаЗначений;
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(Результат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ПараметрыИсточникаДанных.Исключать И Результат.Колонки.Найти("Количество") <> Неопределено Тогда
		
		Если Результат.Колонки.Количество.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный Тогда
			
			КЧ = Новый КвалификаторыЧисла(Результат.Колонки.Количество.ТипЗначения.КвалификаторыЧисла.Разрядность,
				Результат.Колонки.Количество.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			Результат.Колонки.Количество.Имя = "СтароеКоличество";
			
			Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", КЧ));
			
			Для каждого СтрокаРезультата из Результат Цикл
				
				СтрокаРезультата.Количество = -СтрокаРезультата.СтароеКоличество;
				
			КонецЦикла;
			
			Результат.Колонки.Удалить(Результат.Колонки.СтароеКоличество);
			
		Иначе
			Для каждого СтрокаРезультата из Результат Цикл
				
				СтрокаРезультата.Количество = -СтрокаРезультата.Количество;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрИзменитьНаСезонныйКоэффициент = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКомпоновкиДанных,
		"ИзменитьНаСезонныйКоэффициент");
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСезонныеКоэффициенты")
		И ПараметрИзменитьНаСезонныйКоэффициент <> Неопределено
		И ПараметрИзменитьНаСезонныйКоэффициент.Использование
		И ПараметрИзменитьНаСезонныйКоэффициент.Значение = Истина
		И (ОграничениеВыборкиПоПериоду = 2 ИЛИ ОграничениеВыборкиПоПериоду = 3) Тогда
		
		СмещениеПериода = 0;
		Если ОграничениеВыборкиПоПериоду = 2 Тогда
		
			ДатаНачала    = ДополнительныеПараметры.Период.ДатаНачала;
			ДатаОкончания = ДополнительныеПараметры.Период.ДатаОкончания;
		
		ИначеЕсли ОграничениеВыборкиПоПериоду = 3 Тогда
			
			ПараметрСмещениеПериода = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКомпоновкиДанных, "СмещениеПериода");
			Если ПараметрСмещениеПериода.Значение <> 0 Тогда
				
				СмещениеПериода = ПараметрСмещениеПериода.Значение;
				
				ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
					НачалоДня(ДополнительныеПараметры.ПараметрыДанных.НачалоПериода), 
					ДополнительныеПараметры.ПараметрыДанных.Периодичность, 
					СмещениеПериода)+1;
				ДатаОкончания = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
					КонецДня(ДополнительныеПараметры.ПараметрыДанных.ОкончаниеПериода)+1, 
					ДополнительныеПараметры.ПараметрыДанных.Периодичность,
					СмещениеПериода);
				
			Иначе
				
				ДатаНачала    = ДополнительныеПараметры.ПараметрыДанных.НачалоПериода;
				ДатаОкончания    = ДополнительныеПараметры.ПараметрыДанных.ОкончаниеПериода;
				
			КонецЕсли; 
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("ДатаНачала",         ДатаНачала);
		Параметры.Вставить("ДатаОкончания",      ДатаОкончания);
		Параметры.Вставить("ДатаНачалаСдвиг",    ДополнительныеПараметры.ПараметрыДанных.НачалоПериода);
		Параметры.Вставить("ДатаОкончанияСдвиг", КонецДня(ДополнительныеПараметры.ПараметрыДанных.ОкончаниеПериода));
		Параметры.Вставить("Периодичность",      ДополнительныеПараметры.ПараметрыДанных.Периодичность);
		Параметры.Вставить("ИспользуетсяСмещениеПериода", ОграничениеВыборкиПоПериоду = 3);
		Параметры.Вставить("СмещениеПериода",    СмещениеПериода);
		Параметры.Вставить("Склад",              ДополнительныеПараметры.ПараметрыДанных.Склад);
		Параметры.Вставить("Партнер",            ДополнительныеПараметры.ПараметрыДанных.Партнер);
		Параметры.Вставить("ИмяПоля",            "Количество");
		Если ДополнительныеПараметры.ПараметрыДанных.Свойство("ТочностьОкругления") Тогда
			Параметры.Вставить("ТочностьОкругления", ДополнительныеПараметры.ПараметрыДанных.ТочностьОкругления);
		Иначе
			Параметры.Вставить("ТочностьОкругления", 0);
		КонецЕсли; 
		
		РегистрыСведений.СезонныеКоэффициенты.ИзменитьНаСезонныйКоэффициент(Результат, Параметры);
		
	КонецЕсли;
	
	ПослеВыборкиДанных(Результат, ПараметрыИсточникаДанных, ПользовательскиеНастройки, ДополнительныеПараметры, КомпоновщикНастроекКомпоновкиДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	ШаблоныУТ = Обработки.ИсточникиДанныхПланирования.ШаблоныСхемыКомпоновкиДанных();
	
	Для каждого ЭлементМассива Из ШаблоныУТ Цикл
		Шаблоны.Добавить(ЭлементМассива);
	КонецЦикла;
	
	
		
	Возврат Шаблоны;
	
КонецФункции

Функция ТекущаяВерсияШаблоновСКД() Экспорт 

	Возврат 1;

КонецФункции

Функция СхемаКомпоновкиПоИмениШаблона(ИмяШаблонаСКД) Экспорт 
	
	МассивИмен = СтрРазделить(ИмяШаблонаСКД, ".", Ложь);
	Если МассивИмен.Количество() = 3 Тогда
		ИмяМакета = МассивИмен[2];
		МассивИмен.Удалить(2);
		ПолноеИмяИсточникаШаблонов = СтрСоединить(МассивИмен, ".");
		УстановитьПривилегированныйРежим(Истина);
		Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяИсточникаШаблонов).ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодстановкаОсновногоСпособаОбеспечения(СхемаКомпоновкиДанных)
	
	Подстановки = Новый Структура();
	
	ИмяПараметра   = "ЗаказыКлиентовПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "Заказы.Склад,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыНаВнутреннееПотреблениеПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "Заказы.Ссылка.Склад,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыНаПеремещениеОтгрузкаПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "Заказы.Ссылка.СкладОтправитель,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыНаПеремещениеПоступлениеПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "Заказы.Ссылка.СкладПолучатель,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыНаСборкуОтгрузкаПодстановкаОсновногоСпособаОбеспеченияШапка";
	ПоляСоединения = "Заказы.Склад,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыНаСборкуОтгрузкаПодстановкаОсновногоСпособаОбеспеченияТЧ";
	ПоляСоединения = "Заказы.Ссылка.Склад,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыНаСборкуПоступлениеПодстановкаОсновногоСпособаОбеспеченияШапка";
	ПоляСоединения = "Заказы.Склад,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыНаСборкуПоступлениеПодстановкаОсновногоСпособаОбеспеченияТЧ";
	ПоляСоединения = "Заказы.Ссылка.Склад,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыПоставщикамПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "Заказы.Склад,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗакупкиПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "КлючиАналитикиУчетаНоменклатуры.Склад,КлючиАналитикиУчетаНоменклатуры.Номенклатура,КлючиАналитикиУчетаНоменклатуры.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыЗакупокПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "ПланыЗакупокОбороты.Склад,ПланыЗакупокОбороты.Номенклатура,ПланыЗакупокОбороты.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыПродажКомплектующиеПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "ПланыПродажОбороты.Склад,ПланыПродажОбороты.Номенклатура,ПланыПродажОбороты.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыПродажПоКатегориямПодстановкаОсновногоСпособаОбеспеченияПланПродаж";
	ПоляСоединения = "ПланыПродажПоКатегориямОбороты.Склад,СпрНоменклатура.Ссылка,ХарактеристикиНоменклатуры.Ссылка";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыПродажПоКатегориямПодстановкаОсновногоСпособаОбеспеченияФорматы";
	ПоляСоединения = "ИсторияИзмененияФорматовМагазиновСрезПоследних.Склад,СпрНоменклатура.Ссылка,ХарактеристикиНоменклатуры.Ссылка";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыПродажПодстановкаОсновногоСпособаОбеспеченияПланПродаж";
	ПоляСоединения = "ПланыПродажОбороты.Склад,ПланыПродажОбороты.Номенклатура,ПланыПродажОбороты.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыПродажПодстановкаОсновногоСпособаОбеспеченияФорматы";
	ПоляСоединения = "ИсторияИзмененияФорматовМагазиновСрезПоследних.Склад,ПланыПродажОбороты.Номенклатура,ПланыПродажОбороты.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыСборкиКомплектующиеПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "ПланыПотребленияКомплектующихОбороты.Склад,ПланыПотребленияКомплектующихОбороты.Номенклатура,ПланыПотребленияКомплектующихОбороты.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыСборкиРазборкиКомплектыПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "ПланыСборкиРазборкиОбороты.Склад,ПланыСборкиРазборкиОбороты.Номенклатура,ПланыСборкиРазборкиОбороты.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПродажиПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "КлючиАналитикиУчетаНоменклатуры.Склад,КлючиАналитикиУчетаНоменклатуры.Номенклатура,КлючиАналитикиУчетаНоменклатуры.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "СборкаРазборкаПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "КлючиАналитикиУчетаНоменклатуры.Склад,КлючиАналитикиУчетаНоменклатуры.Номенклатура,КлючиАналитикиУчетаНоменклатуры.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "СвободныеОстаткиПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "Набор.Склад,Набор.Номенклатура,Набор.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ТоварныеОграниченияПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "ТоварныеОграничения.Склад,ТоварныеОграничения.Номенклатура,ТоварныеОграничения.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ЗаказыМатериаловВПроизводствоПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "Заказы.Ссылка.Склад,Заказы.Номенклатура,Заказы.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ПланыПроизводстваМатериалыПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "ПланыПотребленияМатериаловОбороты.Склад,ПланыПотребленияМатериаловОбороты.Номенклатура,ПланыПотребленияМатериаловОбороты.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	ИмяПараметра   = "ОбеспечениеЗаказовПроизводстваПодстановкаОсновногоСпособаОбеспечения";
	ПоляСоединения = "ОбеспечениеЗаказовОбороты.Склад,ОбеспечениеЗаказовОбороты.Номенклатура,ОбеспечениеЗаказовОбороты.Характеристика";
	Подстановки.Вставить(ИмяПараметра, ПоляСоединения);
	
	Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) <> Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Подстановка Из Подстановки Цикл
			
			Если СтрНайти(НаборДанных.Запрос, Подстановка.Ключ) > 0 Тогда
				
				НаборДанных.Запрос = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
					НаборДанных.Запрос,
					Подстановка.Ключ,
					Подстановка.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре вызываются обработчики результат полученного из компановки
Процедура ПослеВыборкиДанных(ТаблицаРезультата, ПараметрыИсточникаДанных, ПользовательскиеНастройки, ДополнительныеПараметры, КомпоновщикНастроекКомпоновкиДанных)
	
	Обработки.ИсточникиДанныхПланирования.ПослеВыборкиДанных(ТаблицаРезультата, ПараметрыИсточникаДанных, ПользовательскиеНастройки, ДополнительныеПараметры, КомпоновщикНастроекКомпоновкиДанных);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсточникиДанныхПланирования.Ссылка,
	|	ИсточникиДанныхПланирования.ИмяШаблонаСКД
	|ИЗ
	|	Справочник.ИсточникиДанныхПланирования КАК ИсточникиДанныхПланирования";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.ИмяШаблонаСКД) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения("");
			
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбновитьИсточникиДанныхПоДвижениюТоваров_ДанныеДляОбновления(Параметры) Экспорт
    
	ИменаШаблонов = Новый Массив;
	ИменаШаблонов.Добавить("Обработка.ИсточникиДанныхПланирования.ЗаказыКлиентовПредопределенный");
	ИменаШаблонов.Добавить("Обработка.ИсточникиДанныхПланирования.ЗаказыНаВнутреннееПотреблениеПредопределенный");
	ИменаШаблонов.Добавить("Обработка.ИсточникиДанныхПланирования.ЗаказыНаПеремещениеОтгрузкаПредопределенный");
	ИменаШаблонов.Добавить("Обработка.ИсточникиДанныхПланирования.ЗаказыНаПеремещениеПоступлениеПредопределенный");
	ИменаШаблонов.Добавить("Обработка.ИсточникиДанныхПланирования.ЗаказыНаСборкуОтгрузкаПредопределенный");
	ИменаШаблонов.Добавить("Обработка.ИсточникиДанныхПланирования.ЗаказыНаСборкуПоступлениеПредопределенный");
	ИменаШаблонов.Добавить("Обработка.ИсточникиДанныхПланирования.ЗаказыПоставщикамПредопределенный");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхПланирования.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхПланирования КАК ИсточникиДанныхПланирования
	|ГДЕ
	|	ИсточникиДанныхПланирования.ИмяШаблонаСКД <> """"
	|	И ИсточникиДанныхПланирования.ИмяШаблонаСКД В(&ИменаШаблонов)
    |";
    
    Запрос.УстановитьПараметр("ИменаШаблонов", ИменаШаблонов);
    
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );	

КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
// Процедура обновляет СКД источника данных после изменения макета
Процедура ОбновитьИсточникиДанныхПоДвижениюТоваров(Параметры) Экспорт 

    ПолноеИмяОбъекта = "Справочник.ИсточникиДанныхПланирования";
    
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяОбъекта
    );
    
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
        Попытка	
            
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если СправочникОбъект = Неопределено Тогда 
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
            ИмяШаблонаСКД = СправочникОбъект.ИмяШаблонаСКД;
            
            Если ПустаяСтрока(ИмяШаблонаСКД) Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
    			Продолжить;
    		КонецЕсли;
    		
    		Шаблон = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяШаблонаСКД, ".");
            Если Шаблон.Количество() <> 3 Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
    			Продолжить;
            КонецЕсли;
            
    		ИмяМакета = СтрЗаменить(Шаблон[2], "Предопределенный", "");
    		Шаблон.Удалить(2);
    		ПолноеИмяИсточникаШаблонов = СтрСоединить(Шаблон, ".");
    		СхемаКомпоновкиДанных = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяИсточникаШаблонов).ПолучитьМакет(ИмяМакета);
    		
    		СправочникОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
    		
    		СправочникОбъект.ИмяШаблонаСКД = СтрЗаменить(СправочникОбъект.ИмяШаблонаСКД, "Предопределенный", "");
    		
    		НастройкиКомпоновкиДанных = СправочникОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
    		Если НастройкиКомпоновкиДанных <> Неопределено 
    			И ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
    		
    			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
    			Попытка
    				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    			Исключение
    			КонецПопытки;
    			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
    			НастройкиПоУмолчанию = КомпоновщикНастроек.ПолучитьНастройки();
    			Если ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиПоУмолчанию) <> ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиКомпоновкиДанных) Тогда
    				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
    				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
    				
    				Если ОбщегоНазначения.ЗначениеВСтрокуXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиПоУмолчанию) Тогда
    					СправочникОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
    				Иначе
    					СправочникОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
    				КонецЕсли;
    			КонецЕсли;
    		КонецЕсли; 
    		
    		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
										
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяОбъекта
    );
	
КонецПроцедуры



#КонецОбласти

#КонецОбласти

#КонецЕсли
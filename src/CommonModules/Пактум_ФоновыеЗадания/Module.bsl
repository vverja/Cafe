// Код частично предоставлен разработчиками сервиса Пактум.Контрагент
// Сервисное обслуживание сервиса Пактум.Контрагент осуществляется 
// линией консультаций разработчиков:
// • e-mail pactum.contragent@gmail.com
// • тел. + 380 (67) 430-04-50.


// Получает данные контрагента по ЕДРПОУ
//
// Параметры:
//  ПараметрыФормирования - Структура - параметры формирования фонового задания.
//  АдресХранилища        - Строка - адрес хранилища, в который будут помещены результаты выполнения фонового задания.
//
Процедура ДанныеКонтрагентаПоЕДРПОУФоновоеЗадание(ПараметрыФормирования, АдресХранилища) Экспорт
    
    РезультатФормирования = РеквизитыКонтрагентаПоЕДРПОУ(ПараметрыФормирования.КодПоЕДРПОУ, ПараметрыФормирования.Токен);
	
	ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
	
КонецПроцедуры

// Возвращаются реквизиты контрагента по данным государственных реестров (наименование, контактная информация, коды и т.д.).
//
// Параметры:
//  КодПоЕДРПОУ  - Строка - код по ЕГРПОУ контрагента , реквизиты которого надо получить.
//  Токен - Строка - токен авторизации в сервисе Пактум.Контрагент
//
// Возвращаемое значение:
//   Структура   - реквизиты контрагента. 
//                 Содержание структуры - см. функцию НовыеРеквизитыКонтрагента.
//
Функция РеквизитыКонтрагентаПоЕДРПОУ(Знач КодПоЕДРПОУ, Знач Токен) Экспорт
	
	РеквизитыКонтрагента = НовыеРеквизитыКонтрагента();
	РеквизитыКонтрагента.КодПоЕДРПОУ = КодПоЕДРПОУ;
	
	ОписаниеОшибки = "";
    
    КонтрагентJSON = ПолучитьКонтрагентJSON(КодПоЕДРПОУ, Токен, 0, ОписаниеОшибки);
    
    Если КонтрагентJSON = Неопределено Тогда
        РеквизитыКонтрагента.ОписаниеОшибки = ОписаниеОшибки;
        Возврат РеквизитыКонтрагента;
    КонецЕсли; 
    
    ОбработатьПредупреждениеСервиса(КонтрагентJSON, РеквизитыКонтрагента);
    
    
    ЗаполнитьНаименования(КонтрагентJSON, РеквизитыКонтрагента);
    ЗаполнитьРеквизитыНДС(КонтрагентJSON, РеквизитыКонтрагента);
    ЗаполнитьКонтактнуюИнформацию(КонтрагентJSON, РеквизитыКонтрагента);
    ЗаполнитьРуководителя(КонтрагентJSON, РеквизитыКонтрагента);
    ЗаполнитьДополнительнуюИнформацию(КонтрагентJSON, РеквизитыКонтрагента);
	
	Возврат РеквизитыКонтрагента;
	
КонецФункции

Функция ПолучитьКонтрагентJSON(Знач КодПоЕДРПОУ, Знач Токен, КоличествоЦиклов, ОписаниеОшибки)
    
    НастройкиПодключения=Пактум_Сервер.ПолучитьНастройкиПодключения();
    
    КоличествоПопыток   = НастройкиПодключения.КоличествоПопыток;
    ПаузаМеждуПопытками = НастройкиПодключения.ПаузаМеждуПопытками;
    
	Если КоличествоЦиклов > КоличествоПопыток Тогда
		КоличествоЦиклов = 0;
    КонецЕсли;
    
	//Индикатор1 = Индикатор1 + 1;
	WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Option(2,"utf-8");                                       
	WinHttp.Open("Get","https://pactumsys.com/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/contractors/"+КодПоЕДРПОУ+"?source=bas;skipRegisters=2",0); 
	
	WinHttp.SetRequestHeader("Accept-Language", "ru");
	WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	WinHttp.setRequestHeader("Content-Language", "ru");
	WinHttp.setRequestHeader("Content-Charset", "utf-8");
	WinHttp.setRequestHeader("Authorization", "Bearer "+Токен);
	WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
	ПараметрыПОСТ = "";
	Если НастройкиПодключения.фИспользоватьПрокси Тогда
		WinHttp.SetProxy(2, СокрЛП(НастройкиПодключения.АдресПрокси)+":"+СокрЛП(НастройкиПодключения.ПортПрокси));
		Если НастройкиПодключения.фИспользоватьЛогинПарольПрокси Тогда
   			WinHttp.SetCredentials(СокрЛП(НастройкиПодключения.ЛогинПрокси), СокрЛП(НастройкиПодключения.ПарольПрокси), 1);
		КонецЕсли;
	КонецЕсли;
	
	фВсеОК=Истина;
	Попытка
		WinHttp.Send(ПараметрыПОСТ);
	Исключение
		фВсеОК=Ложь;
	КонецПопытки;
	
	ТекстОтвета="";
	Если фВсеОК Тогда
		Попытка
			ТекстОтвета = WinHttp.ResponseText();
		Исключение
			фВсеОК=Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку( ТекстОтвета);
	КонтрагентJSON = ПрочитатьJSON (ЧтениеJSON);
	
	Если КонтрагентJSON.Свойство("Status") Тогда	//Все ОК
		пСтатус1=""; пСтатус2=""; пСтатус3="";
		Для Каждого ст Из КонтрагентJSON.RegisterStates Цикл
			Если ст.RegisterId = 1 Тогда	//ЕДР
				пСтатус1 = ст.Status;
			ИначеЕсли ст.RegisterId = 2 Тогда	//ЕН
				пСтатус2 = ст.Status;
			ИначеЕсли ст.RegisterId = 3 Тогда	//НДС
				пСтатус3 = ст.Status;
			КонецЕсли;
		КонецЦикла;
		//Если Контрагент.Status ="Done" и (Контрагент.RegisterStates.Количество() >= 3) тогда
        Если пСтатус1="Done" И пСтатус2="Done" И пСтатус3="Done" Тогда
            Возврат КонтрагентJSON;
		ИначеЕсли КоличествоЦиклов < КоличествоПопыток Тогда
			Sleep(ПаузаМеждуПопытками);
			КоличествоЦиклов = КоличествоЦиклов + 1;
			Возврат ПолучитьКонтрагентJSON(КодПоЕДРПОУ, Токен, КоличествоЦиклов, ОписаниеОшибки);
		Иначе
			СтатусЕДР=пСтатус1;	//ЕДР должен ответить...
			Если СтатусЕДР = "Done" Тогда
				Возврат КонтрагентJSON;
            Иначе
                ОписаниеОшибки = ПолучитьТекстОшибкиЕДР();
                Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
    Иначе
        ОписаниеОшибки = КонтрагентJSON.Message;
        Возврат Неопределено;
	КонецЕсли;

КонецФункции 

Процедура ОбработатьПредупреждениеСервиса(КонтрагентJSON, СтруктураРеквизитов)
    
    ОшибкаЕДР = Ложь;
    ОшибкаЕН  = Ложь;
    ОшибкаНДС = Ложь;
    ТекстОшибки="";
    Для Каждого ст Из КонтрагентJSON.RegisterStates Цикл
        Если ст.Status ="Done" Тогда
            Продолжить;
        КонецЕсли;
        Если ст.RegisterId = 1 Тогда		//ЕДР
            ОшибкаЕДР = Истина;
        ИначеЕсли ст.RegisterId = 2 Тогда	//ЕН
            ОшибкаЕН = Истина;
        ИначеЕсли ст.RegisterId = 3 Тогда	//НДС
            ОшибкаНДС = Истина;
        КонецЕсли;
    КонецЦикла;
    
    ТекстОшибки = ПолучитьТекстОшибкиРеестров(ОшибкаЕДР, ОшибкаЕН, ОшибкаНДС);
    
	СтруктураРеквизитов.ОписаниеПредупреждения = ТекстОшибки;
	
КонецПроцедуры

Процедура ЗаполнитьНаименования(КонтрагентJSON, Реквизиты)

    Реквизиты.Наименование       = КонтрагентJSON.Name;
    Реквизиты.НаименованиеПолное = КонтрагентJSON.FullName;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыНДС(КонтрагентJSON, Реквизиты)
    
    Реквизиты.ИННПлательщикаНДС = СокрЛП(КонтрагентJSON.IndividualTaxNumber);
    Если ЗначениеЗаполнено(КонтрагентJSON.VatCertificate) Тогда
        Реквизиты.НомерСвидетельстваПлательщикаНДС = КонтрагентJSON.VatCertificate;
    КонецЕсли;
    
    Налогообложение = ПолучитьНалогообложение(КонтрагентJSON);
    
    Если Налогообложение.Свойство("СистемаНалогообложенияТекст") Тогда
        Если Найти(Налогообложение.СистемаНалогообложенияТекст, "НДС") > 0 И ЗначениеЗаполнено(Реквизиты.ИННПлательщикаНДС) Тогда
            Реквизиты.ПлательщикНДС = Истина;
        Иначе
            Реквизиты.ПлательщикНДС = Ложь;
        КонецЕсли;
        Если НЕ Реквизиты.ПлательщикНДС Тогда
            Реквизиты.ИННПлательщикаНДС                 = "";    
            Реквизиты.НомерСвидетельстваПлательщикаНДС  = "";	
        КонецЕсли; 
    Иначе
        Реквизиты.ПлательщикНДС = ЗначениеЗаполнено(Реквизиты.ИННПлательщикаНДС);    
    КонецЕсли;    

КонецПроцедуры

Функция ПолучитьНалогообложение(КонтрагентJSON)
    
    Налогообложение = Новый Структура;
	Налогообложение.Вставить("ОчиститьИНН", Ложь);
	ДатаСтарт = КонтрагентJSON.CompanyStartDate;
	Если ДатаСтарт=Неопределено Тогда
		ДатаСтарт=Дата(1, 1, 1, 0, 0, 0);
	Иначе
		ДатаСтарт=Дата(Число(Сред(ДатаСтарт,7,4)),Число(Сред(ДатаСтарт,4,2)),Число(Сред(ДатаСтарт,1,2)));
	КонецЕсли;
	ДатаРегистрацииНДС = КонтрагентJSON.VatRegistrationDate;
	Если Не ДатаРегистрацииНДС=Неопределено Тогда
		ДатаРегистрацииНДС=Дата(Число(Сред(ДатаРегистрацииНДС,7,4)),Число(Сред(ДатаРегистрацииНДС,4,2)),Число(Сред(ДатаРегистрацииНДС,1,2)));
		//ДатаРегистрацииНДС_Реал = ДатаРегистрацииНДС;
		Если ДатаРегистрацииНДС>ТекущаяДата() Тогда
			//ДатаРегистрацииНДС=ДатаСтарт;
			Налогообложение.Вставить("ОчиститьИНН", Истина);
		КонецЕсли;
	Иначе
		ДатаРегистрацииНДС=ДатаСтарт;
		//ДатаРегистрацииНДС_Реал = ДатаРегистрацииНДС;
	КонецЕсли;
	ДатаАннуляцииНДС = КонтрагентJSON.VATCancellationDate;
	Если Не ДатаАннуляцииНДС=Неопределено Тогда
		ДатаАннуляцииНДС=Дата(Число(Сред(ДатаАннуляцииНДС,7,4)),Число(Сред(ДатаАннуляцииНДС,4,2)),Число(Сред(ДатаАннуляцииНДС,1,2)));
	Иначе
		//ДатаАннуляцииНДС=ДатаСтарт;
		ДатаАннуляцииНДС=Дата(1, 1, 1, 0, 0, 0);
	КонецЕсли;
	ДатаЕдиныйНалог = КонтрагентJSON.SingleTaxStartDate;
	Если Не ДатаЕдиныйНалог=Неопределено Тогда
		ДатаЕдиныйНалог=Дата(Число(Сред(ДатаЕдиныйНалог,7,4)),Число(Сред(ДатаЕдиныйНалог,4,2)),Число(Сред(ДатаЕдиныйНалог,1,2)));
		Если ДатаЕдиныйНалог>ТекущаяДата() Тогда
			ДатаЕдиныйНалог=ДатаСтарт;
		КонецЕсли;
	Иначе
		ДатаЕдиныйНалог=ДатаСтарт;
	КонецЕсли;
	
	Если КонтрагентJSON.TaxSystem = "Єдиний податок" тогда
		Если КонтрагентJSON.IndividualTaxNumber = неопределено тогда
			Если ДатаЕдиныйНалог<=ТекущаяДата() Тогда
				Налогообложение.Вставить("ПериодНалогообложения", НачалоМесяца(ДатаЕдиныйНалог));
				Налогообложение.Вставить("СистемаНалогообложенияТекст", "ЕдиныйНалог");
			КонецЕсли;
		ИначеЕсли ДатаРегистрацииНДС>ТекущаяДата() Тогда
			Налогообложение.Вставить("ПериодНалогообложения", НачалоМесяца(ДатаСтарт));
			Налогообложение.Вставить("СистемаНалогообложенияТекст", "ЕдиныйНалог");
		Иначе
			Если ДатаЕдиныйНалог<=ТекущаяДата() Тогда
				Если ДатаРегистрацииНДС<=ДатаАннуляцииНДС И ДатаРегистрацииНДС<=ТекущаяДата() И ДатаАннуляцииНДС<=ТекущаяДата() Тогда
					Налогообложение.Вставить("ПериодНалогообложения", Макс(НачалоМесяца(ДатаАннуляцииНДС), НачалоМесяца(ДатаЕдиныйНалог)));
					Налогообложение.Вставить("СистемаНалогообложенияТекст", "ЕдиныйНалог");
				Иначе
					Налогообложение.Вставить("ПериодНалогообложения", Макс(НачалоМесяца(ДатаРегистрацииНДС), НачалоМесяца(ДатаЕдиныйНалог)));
					Налогообложение.Вставить("СистемаНалогообложенияТекст", "ЕдиныйНалогИНДС");
				КонецЕсли;
			Иначе
				Если ДатаРегистрацииНДС<=ДатаАннуляцииНДС И ДатаРегистрацииНДС<=ТекущаяДата() И ДатаАннуляцииНДС<=ТекущаяДата() Тогда
					Налогообложение.Вставить("ПериодНалогообложения", НачалоМесяца(ДатаАннуляцииНДС));
					Налогообложение.Вставить("СистемаНалогообложенияТекст", "НалогНаПрибыль");
				Иначе
					Налогообложение.Вставить("ПериодНалогообложения", Макс(НачалоМесяца(ДатаРегистрацииНДС), НачалоМесяца(ДатаСтарт)));
					Налогообложение.Вставить("СистемаНалогообложенияТекст", "ЕдиныйНалогИНДС");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КонтрагентJSON.TaxSystem = "Податок на прибуток" тогда
		Если КонтрагентJSON.IndividualTaxNumber = неопределено тогда
			Если ДатаСтарт<=ТекущаяДата() Тогда
				Налогообложение.Вставить("ПериодНалогообложения", НачалоМесяца(ДатаСтарт));
				Налогообложение.Вставить("СистемаНалогообложенияТекст", "НалогНаПрибыль");
			КонецЕсли;
		ИначеЕсли ДатаРегистрацииНДС>ТекущаяДата() Тогда
			Налогообложение.Вставить("ПериодНалогообложения", НачалоМесяца(ДатаСтарт));
			Налогообложение.Вставить("СистемаНалогообложенияТекст", "НалогНаПрибыль");
		Иначе		
			Если ДатаРегистрацииНДС<=ДатаАннуляцииНДС И ДатаРегистрацииНДС<=ТекущаяДата() И ДатаАннуляцииНДС<=ТекущаяДата() Тогда
				Налогообложение.Вставить("ПериодНалогообложения", НачалоМесяца(ДатаАннуляцииНДС));
				Налогообложение.Вставить("СистемаНалогообложенияТекст", "НалогНаПрибыль");
			Иначе
				Налогообложение.Вставить("ПериодНалогообложения", Макс(НачалоМесяца(ДатаРегистрацииНДС), НачалоМесяца(ДатаСтарт)));
				Налогообложение.Вставить("СистемаНалогообложенияТекст", "НалогНаПрибыльИНДС");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КонтрагентJSON.TaxSystem = "Неплатник" Тогда
		Если ДатаСтарт<=ТекущаяДата() Тогда
			Налогообложение.Вставить("ПериодНалогообложения", НачалоМесяца(ДатаСтарт));
			Налогообложение.Вставить("СистемаНалогообложенияТекст", "НеПлательщик");
		КонецЕсли;
    КонецЕсли;
    
    Возврат Налогообложение;
    
КонецФункции

Процедура ЗаполнитьКонтактнуюИнформацию(КонтрагентJSON, Реквизиты)
    
    СтруктураКИ = НоваяКонтактнаяИнформация();
    СтруктураКИ.Представление = КонтрагентJSON.Address;
    СтруктураКИ.КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(СтруктураКИ.Представление, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Реквизиты.ЮридическийАдрес = СтруктураКИ;
    
    Телефоны = КонтрагентJSON.Phone;
    // берем только первый телефон
    Поз = СтрНайти(Телефоны, " Телефон 2:");
    Если Поз > 0 Тогда
        Телефон = Сред(Телефоны, 1, Поз - 1);
    Иначе    
        Телефон = Телефоны;
    КонецЕсли; 
    // убираем "Телефон 1: "
    Телефон = СтрЗаменить(Телефон, "Телефон 1: ", "");
    Если Лев(Телефон, 4) = "+380" Тогда
        // если в начале есть +380 - удаляем
        Телефон = Сред(Телефон, 5);    
    ИначеЕсли Лев(Телефон, 1) = "0" Тогда   
        // если в начале есть 0 - удаляем
        Телефон = Сред(Телефон, 2);    
    КонецЕсли; 
    КодСтраны = "+380";
    КодГорода = "";
    // если теперь длина телефона больше 7 - первые 2 цифры считаем кодом города
    Если СтрДлина(Телефон) > 7 Тогда
        КодГорода = Сред(Телефон, 1, 2);
        НомерТелефона = Сред(Телефон, 3);
    Иначе    
        НомерТелефона = Телефон;
    КонецЕсли; 
    
	// Номер телефона
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		ПространствоИменКИ = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
		КИ.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "НомерТелефона"));
        
        КИ.Состав.КодСтраны = КодСтраны;
		КИ.Состав.КодГорода = КодГорода;
		КИ.Состав.Номер     = НомерТелефона;
        
        КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
            КИ,
			Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон)
        );
        
        КИ.Комментарий = КонтрагентJSON.Phone;
        
		СтруктураКИ = НоваяКонтактнаяИнформация();
		СтруктураКИ.КонтактнаяИнформация = СериализацияОбъектаXDTO(КИ);
		СтруктураКИ.Представление        = КИ.Представление;
		
		Реквизиты.Телефон = СтруктураКИ;
		
	КонецЕсли;
    
    СтруктураКИ = НоваяКонтактнаяИнформация();
    СтруктураКИ.Представление = КонтрагентJSON.Email;
    
	Реквизиты.АдресЭП = СтруктураКИ;
    
КонецПроцедуры

Процедура ЗаполнитьРуководителя(КонтрагентJSON, Реквизиты)
    
	// Руководитель
	СтруктураКИ = НовоеКонтактноеЛицо();
	СтруктураКИ.Фамилия    = ТРег(КонтрагентJSON.DirectorLastName);
	СтруктураКИ.Имя        = ТРег(КонтрагентJSON.DirectorFirstName);
	СтруктураКИ.Отчество   = ТРег(КонтрагентJSON.DirectorMiddleName);
	СтруктураКИ.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru='%1 %2 %3';uk='%1 %2 %3'"),
		СтруктураКИ.Фамилия,
		СтруктураКИ.Имя,
		СтруктураКИ.Отчество)
    );
	
	Реквизиты.Руководитель = СтруктураКИ;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительнуюИнформацию(КонтрагентJSON, Реквизиты)
    
    ДополнительнаяИнформация = "Завантажено через сервіс Пактум.Контрагент " + ТекущаяДата() + Символы.ПС;
    
    Если ЗначениеЗаполнено(КонтрагентJSON.Phone) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Телефони:"
                                   + Символы.ПС
                                   + КонтрагентJSON.Phone;
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(КонтрагентJSON.CompanyStatus) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Статус:"
                                   + Символы.ПС
                                   + КонтрагентJSON.CompanyStatus;
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(КонтрагентJSON.OPFG) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Організаційно-правова форма:"
                                   + Символы.ПС
                                   + КонтрагентJSON.OPFG;
    КонецЕсли; 
    
    
    Если ЗначениеЗаполнено(КонтрагентJSON.MainKVED) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Основний вид діяльності:"
                                   + Символы.ПС
                                   + КонтрагентJSON.MainKVED;
    КонецЕсли; 
                               
    Если ЗначениеЗаполнено(КонтрагентJSON.FoundersList) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Власники:"
                                   + Символы.ПС
                                   + КонтрагентJSON.FoundersList;
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(Реквизиты.Руководитель) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Керівник:"
                                   + Символы.ПС
                                   + Реквизиты.Руководитель.Представление;
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(КонтрагентJSON.DirectorInformation) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Уповноважені особи:"
                                   + Символы.ПС
                                   + КонтрагентJSON.DirectorInformation;
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(КонтрагентJSON.StatutoryCapital) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Розмір статутного капіталу:"
                                   + Символы.ПС
                                   + КонтрагентJSON.StatutoryCapital;
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(КонтрагентJSON.CompanyStartDate) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Дата реєстрації:"
                                   + Символы.ПС
                                   + КонтрагентJSON.CompanyStartDate;
    КонецЕсли; 

    Если ЗначениеЗаполнено(КонтрагентJSON.VatRegistrationDate) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Дата реєстрації ПДВ:"
                                   + Символы.ПС
                                   + КонтрагентJSON.VatRegistrationDate;
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(КонтрагентJSON.TaxDebt) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Податковий борг:"
                                   + Символы.ПС
                                   + КонтрагентJSON.TaxDebt;
    КонецЕсли; 
    
    Если ЗначениеЗаполнено(КонтрагентJSON.FullNameEng) Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация 
                                   + Символы.ПС 
                                   + "Повне найменування англійською мовою:"
                                   + Символы.ПС
                                   + КонтрагентJSON.FullNameEng;
    КонецЕсли; 
    
	Реквизиты.ДополнительнаяИнформация = ДополнительнаяИнформация;
    
КонецПроцедуры

Функция НовыеРеквизитыКонтрагента()

	РеквизитыОрганизации = Новый Структура;
	
	РеквизитыОрганизации.Вставить("КодПоЕДРПОУ");                 // Строка, 0
	РеквизитыОрганизации.Вставить("ИННПлательщикаНДС");           // Строка, 0
    РеквизитыОрганизации.Вставить("НомерСвидетельстваПлательщикаНДС"); // Строка, 0
    РеквизитыОрганизации.Вставить("ПлательщикНДС"); // Булево
	РеквизитыОрганизации.Вставить("Наименование");                // Строка, 0
	РеквизитыОрганизации.Вставить("НаименованиеПолное");          // Строка, 0
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыОрганизации.Вставить("ЮридическийАдрес");            // Структура из НоваяКонтактнаяИнформация().
	РеквизитыОрганизации.Вставить("Телефон");                     // Структура из НоваяКонтактнаяИнформация().
    РеквизитыОрганизации.Вставить("АдресЭП");                     // Структура из НоваяКонтактнаяИнформация().
	РеквизитыОрганизации.Вставить("Руководитель");                // Структура из НовоеКонтактноеЛицо().
    РеквизитыОрганизации.Вставить("ДополнительнаяИнформация");    // Строка, 0
	
	// Служебные реквизиты
	РеквизитыОрганизации.Вставить("ОписаниеОшибки");              // Строка, 0
    РеквизитыОрганизации.Вставить("ОписаниеПредупреждения");      // Строка, 0
	
	Возврат РеквизитыОрганизации;

КонецФункции 

Функция НоваяКонтактнаяИнформация()

	Результат = Новый Структура;
    
	Результат.Вставить("КонтактнаяИнформация"); // Строка, 0 - XML 
	Результат.Вставить("Представление");        // Строка, 0
	Результат.Вставить("Комментарий");          // Строка, 0
    
	Возврат Результат;

КонецФункции

Функция НовоеКонтактноеЛицо()

	Результат = Новый Структура;
	Результат.Вставить("Должность");     // Строка, 0
	Результат.Вставить("Фамилия");       // Строка, 0
	Результат.Вставить("Имя");           // Строка, 0
	Результат.Вставить("Отчество");      // Строка, 0
	Результат.Вставить("Представление"); // Строка, 0
	Результат.Вставить("ДатаЗаписи");    // Дата
	Возврат Результат;

КонецФункции

Процедура Sleep(сек)
	нач=ТекущаяДата();
	Пока ТекущаяДата() - нач < сек Цикл
	КонецЦикла;    
КонецПроцедуры

Функция ПолучитьТекстОшибкиЕДР()    
    Возврат	НСтр("ru='К сожалению, на данный момент Единый государственный реестр работает нестабильно. 
            |Карточка запрашиваемого контрагента не заполнена. Запустите повторно заполнение карточки через несколько минут. 
            |При повторном заполнении карточки сегодня до 23:59 Ваш баланс не уменьшится.'
            |;uk='На жаль, на даний момент Єдиний державний реєстр працює нестабільно.
            | Картка контрагента не заповнена. Запустіть повторно заповнення картки через кілька хвилин.
            | При повторному заповненні картки сьогодні до 23:59 Ваш баланс не зменшиться.'");
        
КонецФункции        

Функция ПолучитьТекстОшибкиРеестров(ОшибкаЕДР, ОшибкаЕН, ОшибкаНДС)    

    Если НЕ ОшибкаЕДР И НЕ ОшибкаЕН И НЕ ОшибкаНДС Тогда
        Возврат "";
    КонецЕсли; 
    
    ТекстОшибки = "";
    Если ОшибкаЕДР Тогда
        Возврат ПолучитьТекстОшибкиЕДР();
    Иначе
        ЗаголовокОшибки = "";
        Если ОшибкаЕН И ОшибкаНДС Тогда
            ЗаголовокОшибки = НСтр("ru='К сожалению, на данный момент реестры НДС и единого налога работают нестабильно.';uk='На жаль, на даний момент реєстри ПДВ і єдиного податку працюють нестабільно.'");
        ИначеЕсли ОшибкаЕН Тогда    
            ЗаголовокОшибки = НСтр("ru='К сожалению, на данный момент реестр единого налога работает нестабильно.';uk='На жаль, на даний момент реєстр єдиного податку працює нестабільно.'");
        ИначеЕсли ОшибкаНДС Тогда     
        	ЗаголовокОшибки = НСтр("ru='К сожалению, на данный момент реестр НДС работает нестабильно.';uk='На жаль, на даний момент реєстр ПДВ працює нестабільно.'");
        КонецЕсли; 
        ТекстОшибки = ЗаголовокОшибки + Символы.ПС + 
		        НСтр("ru='Карточка контрагента сформирована без заполнения данных по налогообложению. 
				|Запустите повторно заполнение карточки через несколько минут. При повторном заполнении карточки сегодня до 23:59 Ваш баланс не уменьшится.'
				|;uk='Картка контрагента сформована без заповнення даних з оподаткування.
    			| Запустіть повторно заповнення картки через кілька хвилин. При повторному заповненні картки сьогодні до 23:59 Ваш баланс не зменшиться.'");
    КонецЕсли; 
    
КонецФункции

Функция СериализацияОбъектаXDTO(ОбъектXDTO)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	Если ОбъектXDTO <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
	КонецЕсли;
	
	Возврат СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	
КонецФункции

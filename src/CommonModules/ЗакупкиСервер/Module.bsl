////////////////////////////////////////////////////////////////////////////////
// Модуль "ЗакупкиСервер", содержит процедуры и функции для 
// получения значений реквизитов для подстановки в документы закупки
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИнициализацииПравилЗакупок

// Возвращает структуру условий закупок по торговому соглашению.
//
// Параметры:
// Соглашение - Ссылка на соглашение,по которому необходимо получить стандартные условия закупок
//
// Возвращаемое значение:
// Структура.
// Структура, включающая условия продаж
//
Функция ПолучитьУсловияЗакупок(Знач Соглашение,
	                           Знач УчитыватьГруппыСкладов=Ложь,
	                           Знач ИсключитьГруппыСкладовДоступныеВЗаказах=Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашениеСПоставщиком.Ссылка             КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер            КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент         КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация        КАК Организация,
	|	СоглашениеСПоставщиком.ВидЦеныПоставщика  КАК ВидЦеныПоставщика,
	|	СоглашениеСПоставщиком.Валюта             КАК Валюта,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС    КАК ЦенаВключаетНДС,
	|	СоглашениеСПоставщиком.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ПорядокОплаты                КАК ПорядокОплаты,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                             КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	СоглашениеСПоставщиком.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
	|	СоглашениеСПоставщиком.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
	|	СоглашениеСПоставщиком.НаправлениеДеятельности                     КАК НаправлениеДеятельности
	|
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	СоглашениеСПоставщиком.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение",             Соглашение);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", УчитыватьГруппыСкладов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтруктураРеквизитов = ПолучитьСтруктуруУсловийЗакупок();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
		СтруктураРеквизитов.Вставить("ИспользуютсяДоговорыКонтрагентов", Ложь);
	КонецЕсли;
		
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Возвращает дату последнего этапа по графику.
//
// Параметры:
// ДатаДокумента - Дата - дата, от которой необходимо получить последнюю дату по графику
// ГрафикОплаты  - СправочникСсылка.ГрафикиОплаты -ссылка на график оплаты
//
// Возвращаемое значение:
// Число.
// Последняя дата по графику с учетом календаря
//
Функция ПолучитьПоследнююДатуПоГрафику(Знач ДатаДокумента, Знач СоглашениеСПоставщиком) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг) КАК Сдвиг,
	|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &СоглашениеСПоставщиком
	|	И ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаОплаты.Ссылка,
	|	ЭтапыГрафикаОплаты.Ссылка.Календарь");
	
	Запрос.УстановитьПараметр("СоглашениеСПоставщиком",  СоглашениеСПоставщиком);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Календарь = Выборка.Календарь;
	Если ЗначениеЗаполнено(Календарь) Тогда
		ДатаПлатежа = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаДокумента, Выборка.Сдвиг);
	Иначе
		ДатаПлатежа = Выборка.ДатаПлатежа;
	КонецЕсли;
		
	Возврат ДатаПлатежа;
	
КонецФункции

// Возвращает структуру условий закупок по партнеру.
//
// Параметры:
// Партнер           - Ссылка на партнера, для которого необходимо получить условия закупок
// ПараметрыОтбора   - Структура - содержит параметры отбора соглашения
//
// Возвращаемое значение:
// Структура.
// Структура, включающая условия закупок
//
Функция ПолучитьУсловияЗакупокПоУмолчанию(Знач Партнер, Знач ПараметрыОтбора = Неопределено) Экспорт
	
	ВсеПараметрыОтбора = Новый Структура();
	ВсеПараметрыОтбора.Вставить("ТолькоДействующее",                       Истина);
	ВсеПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Ложь);
	ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
	ВсеПараметрыОтбора.Вставить("ХозяйственныеОперации",                   Неопределено);
	ВсеПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	Если ПараметрыОтбора <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	СоглашениеСПоставщиком.Ссылка                       КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер                      КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент                   КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация                  КАК Организация,
	|	СоглашениеСПоставщиком.ВидЦеныПоставщика            КАК ВидЦеныПоставщика,
	|	СоглашениеСПоставщиком.Валюта                       КАК Валюта,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	СоглашениеСПоставщиком.НалогообложениеНДС           КАК НалогообложениеНДС,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ПорядокОплаты                КАК ПорядокОплаты,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                  КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	СоглашениеСПоставщиком.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
	|	СоглашениеСПоставщиком.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
	|	СоглашениеСПоставщиком.НаправлениеДеятельности                     КАК НаправлениеДеятельности
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.ПометкаУдаления И
	|		(НЕ &ОтборХозяйственныеОперации ИЛИ СоглашениеСПоставщиком.ХозяйственнаяОперация В (&ХозяйственныеОперации)) И
	|" + ?(ВсеПараметрыОтбора.ТолькоДействующее," СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует) И","") + "
	|	СоглашениеСПоставщиком.Партнер = &Партнер;
	|
	|////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СоглашениеСПоставщиком.Ссылка                       КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер                      КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент                   КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация                  КАК Организация,
	|	СоглашениеСПоставщиком.Валюта                       КАК Валюта,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	СоглашениеСПоставщиком.НалогообложениеНДС           КАК НалогообложениеНДС,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.ВидЦеныПоставщика            КАК ВидЦеныПоставщика,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ПорядокОплаты                КАК ПорядокОплаты,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                  КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	СоглашениеСПоставщиком.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
	|	СоглашениеСПоставщиком.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
	|	СоглашениеСПоставщиком.НаправлениеДеятельности                     КАК НаправлениеДеятельности
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.ПометкаУдаления И
	|	(НЕ &ОтборХозяйственныеОперации ИЛИ СоглашениеСПоставщиком.ХозяйственнаяОперация В (&ХозяйственныеОперации)) И
	|	СоглашениеСПоставщиком.Ссылка = &ВыбранноеСоглашение И
	|" + ?(ВсеПараметрыОтбора.ТолькоДействующее," СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует) И","") + "
	|	СоглашениеСПоставщиком.Партнер = &Партнер
	|";
	
	Запрос.УстановитьПараметр("Партнер",                    Партнер);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",         Справочники.Склады.ВариантыВыбораГруппыСкладов(ВсеПараметрыОтбора.ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов",     ВсеПараметрыОтбора.УчитыватьГруппыСкладов);
	Запрос.УстановитьПараметр("ОтборХозяйственныеОперации", ВсеПараметрыОтбора.ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственныеОперации",      ВсеПараметрыОтбора.ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ВыбранноеСоглашение",        ВсеПараметрыОтбора.ВыбранноеСоглашение);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	
	// Если в выборке одно соглашение - возвращаем его
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
	ИначеЕсли Выборка.Количество() > 1 Тогда
		Если НЕ РезультатЗапроса[1].Пустой() Тогда
			Выборка = РезультатЗапроса[1].Выбрать();
			Выборка.Следующий();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолучитьСтруктуруУсловийЗакупок();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПроверкиКорректностиЗаполненияДокументов

// Проверяет корректность заполнения документа закупки в соответствии с массивом проверок
// Вызывается из процедуры документа "ОбработкаПроведения"
//
// Параметры:
// ДокументЗакупки  - ДокументОбъект, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьЗаполненияДокументаЗакупки(ДокументЗакупки, Отказ) Экспорт
	
	// Если документ уже заполнен некорректно - не будем выполнять запросы	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим доступность ролей
	ОтклонениеОтУсловийЗакупок = ПраваПользователяПовтИсп.ОтклонениеОтУсловийЗакупок();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенЗакупки  = Константы.ВидМаксимальноДопустимыхЦенЗакупки.Получить();
	ПроверятьДиапазонЦен                = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенЗакупки);
	ЕстьОшибкиСоглашениеНеУказано       = Ложь;
	ИспользоватьРучныеСкидки            = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьНоменклатуруПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков");
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	
	
	
	ВсеСтрокиОтменены = Ложь;
	ВозвратМногооборотнойТары          = Ложь;
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	
	МассивПроверок = Новый Массив();
	ИмяТаблицы     = ДокументЗакупки.Метаданные().ПолноеИмя();
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ДокументЗакупки, "Товары", "Отменено");
		
		НужноСогласовать = ?(ВсеСтрокиОтменены, Ложь, Не ДокументЗакупки.Согласован И Не ОтклонениеОтУсловийЗакупок);
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьВыданная"
		ИЛИ ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика"
		ИЛИ ИмяТаблицы = "Документ.ВозвратТоваровПоставщику" 
		ИЛИ ИмяТаблицы = "Документ.ВыпускПродукции" 
		ИЛИ ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки"
		ИЛИ ИмяТаблицы = "Документ.ПередачаТоваровМеждуОрганизациями"
		Или ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда
		НужноСогласовать = Ложь;
	Иначе
		НужноСогласовать = Не ДокументЗакупки.Согласован И Не ОтклонениеОтУсловийЗакупок;
	КонецЕсли;
	
	// СОГЛАШЕНИЕ С ПОСТАВЩИКОМ
	
	Если ИмяТаблицы = "Справочник.СоглашенияСПоставщиками" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		ВозвратМногооборотнойТары = ДокументЗакупки.ВозвращатьМногооборотнуюТару;
		
		Если ПроверятьДиапазонЦен И НужноСогласовать И
			ДокументЗакупки.Статус <> Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			ИЛИ ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// ЗАКАЗ ПОСТАВЩИКУ
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		СоглашениеУказано = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦенСУчетомОтмененных");
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументЗакупки.ТребуетсяЗалогЗаТару;
		
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
		Если НужноСогласовать И
			ДокументЗакупки.Статус <> Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если СоглашениеУказано Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
				
			Иначе
				
				ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками;
				
			КонецЕсли;
			
			Если ИспользоватьРучныеСкидки
			   И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			   И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
				МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
			Если ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
	            И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт 
				И ДокументЗакупки.СуммаДокумента <> 0
				И ДокументЗакупки.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			ИЛИ ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		Иначе
			МассивПроверок.Добавить("КорректностьЗаполненияАналитикиУслуг");
		КонецЕсли;
		
	//АКТ ПОСЛЕ ПРИЕМКИ
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда

		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТоварыБезСкладаВШапке");
		
	// ПОСТУПЛЕНИЕ ТОВАРОВ И УСЛУГ
		
	ИначеЕсли ИмяТаблицы = "Документ.ПоступлениеТоваровУслуг" Тогда
		
		СоглашениеУказано     = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками
		                                И Не СоглашениеУказано
		                                И Не ДокументЗакупки.ПоступлениеПоЗаказам
		                                И НужноСогласовать;

		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		
		Если Не ДокументЗакупки.ПоступлениеПоЗаказам И СоглашениеУказано И НужноСогласовать Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументЗакупки.ТребуетсяЗалогЗаТару;
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию 
			ИЛИ ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		Иначе
			МассивПроверок.Добавить("КорректностьЗаполненияАналитикиУслуг");
		КонецЕсли;
		
		Если НужноСогласовать Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если СоглашениеУказано Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
			КонецЕсли;
			
			Если СоглашениеУказано И ИспользоватьРучныеСкидки 
			   И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			   И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
				МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			КонецЕсли;
				
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ИмяТаблицы = "Документ.ПередачаТоваровМеждуОрганизациями" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика" Тогда
		
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьВыданная" Тогда
		
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
		
	// КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ
		
	ИначеЕсли ИмяТаблицы = "Документ.КорректировкаПоступления" Тогда
		
		ЕстьОшибкиСоглашениеНеУказано = Ложь;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
		МассивПроверок.Добавить("КорректностьЗаполненияАналитикиУслуг");
		
	// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ
		
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровПоставщику" Тогда
		
		Если ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
			ВозвратМногооборотнойТары = ДокументЗакупки.ВозвратПринятойМногооборотнойТары;
			ТребуетсяЗалогЗаТару = ДокументЗакупки.ПредусмотренЗалогЗаТару;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();

	ПараметрыЗапроса.Вставить("Дата",                      ДокументЗакупки.Дата);
	ПараметрыЗапроса.Вставить("Ссылка",                    ДокументЗакупки.Ссылка);
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару",      ТребуетсяЗалогЗаТару);
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл
		
		Если ТекЭлемент = "ВременнаяТаблицаДокументЗакупки" Тогда
			
			СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияНоменклатурыПоставщика" Тогда
			
			СформироватьЗапросКорректностьЗаполненияНоменклатурыПоставщика(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияАналитикиУслуг" Тогда
			
			СформироватьЗапросКорректностьЗаполненияАналитикиУслуг(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеУслуг" Тогда
			
			СформироватьЗапросНаличиеУслугВДокументеЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСкладаВТабличнойЧастиТоварыБезСкладаВШапке" Тогда
		
			СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТоварыБезСкладаВШапке(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦенСУчетомОтмененных" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦенСУчетомОтмененных(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦен" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеОрганизацииРаспоряжений" Тогда
			
			СформироватьЗапросСоответствиеОрганизацииРаспоряжений(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	НевозможноПровестиБезСогласования = Ложь;
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахШапкаДокументаЗакупки(Выборка, ДокументЗакупки, НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияНоменклатурыПоставщика" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПоставщика(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахТоварыДокументаЗакупки(Выборка,ДокументЗакупки, НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументЗакупки, Отказ, ИспользоватьРучныеСкидки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияАналитикиУслуг" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияАналитикиУслуг(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУслуг" Тогда
			
			СообщитьОбОшибкахНаличиеУслугВДокументеЗакупки(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСклада" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияСклада(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары"
			Или МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВТабличнойЧастиТоварыБезСкладаВШапке" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументЗакупки, НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Выборка, ДокументЗакупки, НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦен"
			ИЛИ МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦенСУчетомОтмененных" Тогда
			
			СообщитьОбОшибкахКонтрольЗаполненияЦен(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеОрганизацииРаспоряжений" Тогда
			
			СообщитьОбОшибкахСоответствиеОрганизацииРаспоряжений(Выборка, ДокументЗакупки, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СообщитьОбОшибкахСоглашениеНеУказано(ЕстьОшибкиСоглашениеНеУказано, ДокументЗакупки, Отказ);
	
	Если НевозможноПровестиБезСогласования Тогда
		ТекстОшибки = НСтр("ru='Недостаточно прав на отклонение от условий закупок.';uk='Недостатньо прав на відхилення від умов купівель.'");
		
		Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда 
			ТекстОшибки = ТекстОшибки + НСтр("ru='Документ необходимо провести в статусе ""Не согласован"".';uk='Документ необхідно провести у статус ""Не погоджено"".'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения этапов графика оплаты в документе закупки
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументЗакупки                  - ДокументОбъект, для которого необходимо осуществить проверки
// СуммаОплатыПоДокументу           - Число - сумма документа, в котором необходимо осуществить проверку
// СуммаЗалогаПоДокументу           - Число - сумма залога по документу, в котором необходимо осуществить проверку
// УчитыватьВариантОплаты           - Булево - признак необходимости проверки корректности вариантов оплаты
// Отказ                            - Булево - Флаг отказа от записи документа
// ПривязыватьСообщенияКГиперссылке - Булево - флаг, указывающий на необходимость привязки сообщений к гиперссылке
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплаты(Знач ДокументЗакупки,
	                                               СуммаОплатыПоДокументу,
	                                               СуммаЗалогаПоДокументу = 0,
	                                               УчитыватьВариантОплаты,
	                                               Отказ,
	                                               ПривязыватьСообщенияКГиперссылке = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокументЗакупки.Дата) Тогда
		ДатаДокумента = НачалоДня(ДокументЗакупки.Дата);
	КонецЕсли;
	
	СуммаОплатыВсего = Окр(СуммаОплатыПоДокументу, 2);
	СуммаЗалогаВсего = Окр(СуммаЗалогаПоДокументу, 2);
	
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках");
	
	Если ДокументЗакупки.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаОплатыВсего > 0 Тогда
			
			Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
				ТекстОшибки = НСтр("ru='Не заполнены условия оплаты';uk='Не заповнені умови оплати'");
			Иначе
				ТекстОшибки = НСтр("ru='Необходимо заполнить этапы графика оплаты';uk='Необхідно заповнити етапи графіка оплати'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты"),
				,
				Отказ);
				
		КонецЕсли;
		
	Иначе
		
		ИтогПроцентПлатежа = 0;
		ИтогПроцентЗалогаЗаТару = 0;
		ИтогСуммаПлатежа = 0;
		ИтогСуммаЗалогаЗаТару = 0;
		Для ТекИндекс = 0 По ДокументЗакупки.ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			ДанныеЭтапа = Новый Структура("НомерСтроки, ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, ПроцентЗалогаЗаТару, СуммаПлатежа, СуммаЗалогаЗаТару",
				0, Неопределено, '00010101', 0, 0, 0, 0);
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс]);
			ИтогПроцентПлатежа = ИтогПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			ИтогПроцентЗалогаЗаТару = ИтогПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
			ИтогСуммаПлатежа = ИтогСуммаПлатежа + ДанныеЭтапа.СуммаПлатежа;
			ИтогСуммаЗалогаЗаТару = ИтогСуммаЗалогаЗаТару + ДанныеЭтапа.СуммаЗалогаЗаТару;
			
			АдресОшибки = НСтр("ru='в строке %НомерСтроки% списка ""Этапы графика оплаты""';uk='у рядку %НомерСтроки% списку ""Етапи графіка оплати""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДанныеЭтапа.НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОплаты) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вариант оплаты""';uk='Не заповнена колонка ""Варіант оплати""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОплаты")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) Тогда
				
				Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
					ТекстОшибки = НСтр("ru='Не заполнена ""Дата платежа""';uk='Не заповнена ""Дата платежу""'");
				Иначе
					ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата платежа""';uk='Не заповнена колонка ""Дата платежу""'");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа""';uk='Не заповнена колонка ""Відсоток платежу""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ПроцентПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаПлатежа) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа) И 
				СуммаОплатыВсего - СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма платежа""';uk='Не заповнена колонка ""Сума платежу""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаЗалогаЗаТару) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) И 
				СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма залога за тару""';uk='Не заповнена колонка ""Сума застави за тару""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаЗалогаЗаТару")),
					,
					Отказ);
				
			КонецЕсли;
			
			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
				ЗначениеЗаполнено(ДокументЗакупки.Дата) И
				ДанныеЭтапа.ДатаПлатежа < ДатаДокумента Тогда
				
				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%';uk='Дата платежу повинна бути не менше дати документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(ДокументЗакупки.Дата, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
			Если УчитыватьВариантОплаты Тогда
				
				// Дата платежа по авансовому этапу должна быть не больше даты поступления в шапке
				Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
					ЗначениеЗаполнено(ДокументЗакупки.ЖелаемаяДатаПоступления) И
					(ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Или
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления) И
					ДанныеЭтапа.ДатаПлатежа > ДокументЗакупки.ЖелаемаяДатаПоступления Тогда
					
					ТекстОшибки = НСтр("ru='Дата платежа по авансовому этапу должна быть не больше желаемой даты поступления %ДатаПоступления%';uk='Дата платежу по авансовому етапу повинна бути не більше бажаної дати надходження %ДатаПоступления%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПоступления%", Формат(ДокументЗакупки.ЖелаемаяДатаПоступления, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				// Дата платежа по кредитному этапу должна быть не меньше даты поступления в шапке
				ИначеЕсли ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
					ЗначениеЗаполнено(ДокументЗакупки.ЖелаемаяДатаПоступления) И
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления И
					ДанныеЭтапа.ДатаПлатежа < ДокументЗакупки.ЖелаемаяДатаПоступления Тогда
					
					ТекстОшибки = НСтр("ru='Дата платежа по кредитному этапу должна быть не меньше желаемой даты поступления %ДатаПоступления%';uk='Дата платежу по кредитному етапу повинна бути не менше бажаної дати надходження %ДатаПоступления%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПоступления%", Формат(ДокументЗакупки.ЖелаемаяДатаПоступления, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ДокументЗакупки.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогПроцентПлатежа <> 100 И СуммаОплатыВсего - СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';uk='Відсоток платежів за всіма етапами ""%ПроцентПоЭтапам%%"" повинен дорівнювати ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентПлатежа);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
				
			Если ИтогПроцентЗалогаЗаТару <> 100 И СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Процент залога за тару по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';uk='Відсоток застави за тару за всіма етапами ""%ПроцентПоЭтапам%%"" повинен дорівнювати ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентЗалогаЗаТару);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].ПроцентЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций
		
		Если ДокументЗакупки.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогСуммаПлатежа + СуммаЗалогаВсего <> СуммаОплатыВсего Тогда
				
				ТекстОшибки = НСтр("ru='Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы документа ""%СуммаВсего% %Валюта%""';uk='Сума платежів за всіма етапами ""%СуммаПоЭтапам% %Валюта%"" не повинна відрізнятися від суми документа ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаПлатежа + СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыПоДокументу);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        ДокументЗакупки.Валюта);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].СуммаПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если ИтогСуммаЗалогаЗаТару <> СуммаЗалогаВсего И СуммаЗалогаВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru='Сумма залога за тару по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы залога по документу ""%СуммаВсего% %Валюта%""';uk='Сума застави за тару за всіма етапами ""%СуммаПоЭтапам% %Валюта%"" не повинна відрізнятися від суми застави за документом ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаЗалогаЗаТару);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыПоДокументу);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        ДокументЗакупки.Валюта);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].СуммаЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоЭтапов = ДокументЗакупки.ЭтапыГрафикаОплаты.Количество();
		
		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл
			
			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;
			
			Если УчитыватьВариантОплаты Тогда
				
				ПредыдущееЗначениеВариантаОплаты = ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
				
				// В табличной части Этапы не должно быть строк со значением АвансДоПодтверждения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоПоступления
				// КредитПослеПоступления
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления ИЛИ
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоПоступления
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеПоступления
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления) Тогда
					
					ТекстОшибки = НСтр("ru='Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
                    |не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%'
                    |;uk='Варіант оплати ""%ТекущееЗначениеВариантаОплаты%"" в рядку %ИндексТекущегоЭтапа%
                    |не може йти після варіанти оплати ""%ПредыдущееЗначениеВариантаОплаты%"" в рядку %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию
			Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И
				ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
				ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда
				
				Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
					ТекстОшибки = НСтр("ru='Дата платежа по кредиту не должна быть меньше, чем дата платежа по предоплате';uk='Дата платежу по кредиту не повинна бути менше, ніж дата платежу по передплаті'");
				Иначе
					ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
                    |списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'
                    |;uk='Дата платежу в рядку %ИндексТекущегоЭтапа%
                    |списку ""Етапи оплати"" має бути не менше, ніж у рядку %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения документа закупки в соответствии с массивом проверок
// путем выполнения пакета запросов.
//
// Параметры:
//		ДокументЗакупки - ДокументСсылка, для которого необходимо осуществить проверки
//		ЕстьОтклоненияОтЦеновыхУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования ценовых условий
//		ЕстьОтклоненияОтФинансовыхУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования финансовых условий
//		ЕстьОтклоненияОтЛогистическихУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования логистических условий
//
Процедура ПроверитьНеобходимостьСогласованияУсловийЗакупки(Знач ДокументЗакупки,
	                                                       ЕстьОтклоненияОтЦеновыхУсловий,
	                                                       ЕстьОтклоненияОтФинансовыхУсловий,
	                                                       ЕстьОтклоненияОтЛогистическихУсловий) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументЗакупки.Соглашение) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипДокумента   = ТипЗнч(ДокументЗакупки);
	ИмяТаблицы     = ДокументЗакупки.Метаданные().ПолноеИмя();
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенЗакупки = Константы.ВидМаксимальноДопустимыхЦенЗакупки.Получить();
	ПроверятьДиапазонЦен = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенЗакупки);
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	
	// Проверим является ли документ приемом на комиссию
	ДокументПриемаНаКомиссию = ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию И
	                           ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт;
							   
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	
	МассивПроверок  = Новый Массив();
	
	Если НЕ ЗначениеЗаполнено(ДокументЗакупки.Соглашение) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
	МассивПроверок.Добавить("ВременнаяТаблицаТовары");
	МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
	МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
	
	МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
	МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
	
	Если ИспользоватьРучныеСкидки И ДокументПриемаНаКомиссию Тогда
		МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
	КонецЕсли;
	
	Если ПроверятьДиапазонЦен Тогда
		МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
	КонецЕсли;
	
	Если ДокументПриемаНаКомиссию И ДокументЗакупки.СуммаДокумента <> 0 Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
		
	КонецЕсли;
	
	// Сформируем запрос проверки
	
	ТекстЗапроса = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата", ДокументЗакупки.Дата);
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ДокументЗакупки.ВернутьМногооборотнуюТару);
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл
		
		Если ТекЭлемент = "ВременнаяТаблицаДокументЗакупки" Тогда
			
			СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим результаты проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		// Если имеются отклонения от всех проверяемых условий, дальнейшая проверка не требуется
		Если ЕстьОтклоненияОтЦеновыхУсловий И 
			ЕстьОтклоненияОтФинансовыхУсловий И 
			ЕстьОтклоненияОтЛогистическихУсловий Тогда
			Прервать;
		КонецЕсли;
		
		ТекЭлемент = МассивПроверок[ТекИндекс];
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий И ЕстьОтклоненияОтЛогистическихУсловий И ЕстьОтклоненияОтФинансовыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияВалюта ИЛИ // Валюта не должна отличаться от значения в соглашении
					Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда // Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда // Склад не должен отличаться от значения в соглашении
					ЕстьОтклоненияОтЛогистическихУсловий = Истина;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияФормаОплаты Тогда // ФормаОплаты не должна отличаться от значения в соглашении
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена ИЛИ // Цена не должна превышать максимально допустимую
					Выборка.ЕстьОшибкиЗаполненияСтавкаНДС Тогда // Ставка НДС не должна отличаться от ставки, в соглашении
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			МаксДатаАванса = Дата(1,1,1);
			ОдинДень       = 86400;
			СуммаПроцентовПлатежа = 0;
			СуммаПроцентовПлатежаШаблона = 0;
			
			Пока Выборка.Следующий() Цикл
				
				Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
					Прервать;
				КонецЕсли;
				
				Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты ИЛИ // В документе не заполнено соглашение или сумма документа равна 0
					Выборка.ЭтапШаблонаОтсутствует Тогда // График оплаты в соглашении не заполнен или не соответствует по количеству графику документа
					
					Прервать; // Не проверять далее. Если график заполнен, будет выявлена ошибка при проверке по запросу "КорректностьКоличестваЭтаповГрафикаОплаты"
				КонецЕсли;
				
				Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда // Вариант оплаты не должен отличаться от значения в графике оплаты
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				КонецЕсли;
				
				Календарь = Выборка.Календарь;
				
				Если ЗначениеЗаполнено(Календарь) Тогда
					
					Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
						Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаПоступления) Тогда
							ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.ЖелаемаяДатаПоступления, Выборка.Сдвиг );
						ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
							ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, МаксДатаАванса, Выборка.Сдвиг);
						Иначе
							ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
						КонецЕсли;
					Иначе
						ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаПоступления) Тогда
						ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
					ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
						ДатаПлатежаШаблона = МаксДатаАванса + Выборка.Сдвиг * ОдинДень;
					Иначе
						ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Или
					Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
					
					МаксДатаАванса = ДатаПлатежаШаблона;
					
				КонецЕсли;
				
				Если ДатаПлатежаШаблона > Выборка.ДатаПлатежа Тогда // Дата платежа должна быть не меньше, чем в графике оплаты
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				КонецЕсли;
				
				СуммаПроцентовПлатежаШаблона = СуммаПроцентовПлатежаШаблона + Выборка.ПроцентПлатежаШаблона;
				СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + Выборка.ПроцентПлатежа;
				
				Если Выборка.ЕстьОшибкиЗаполненияПроцентаПлатежа И СуммаПроцентовПлатежа > СуммаПроцентовПлатежаШаблона Тогда // Проценты до следующего платежа по графику не должны превышать проценты по графику соглашения
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			Если Выборка.Следующий() Тогда
				Если Выборка.КоличествоЭтаповШаблона <> 0 И Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения товаров документа возврата в соответствии 
// с реализованными товарами с учетом корректировок.
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументЗакупки  - ДокументОбъект, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
// ТаблицаПроверяемыеТовары - ТаблицаЗначений - Проверяются товары в таблице, если она передана
//
Процедура ПроверитьКорректностьВозвращаемыхТоваров(Знач ДокументЗакупки, Отказ, ТаблицаПроверяемыеТовары = Неопределено) Экспорт
	
	Если ТаблицаПроверяемыеТовары = Неопределено Тогда
		ТаблицаПроверяемыеТовары = ДокументЗакупки.Товары.Выгрузить();
	КонецЕсли;
	
	Если ТаблицаПроверяемыеТовары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Если ТипЗнч(ДокументЗакупки) = Тип("ДокументОбъект.АктОРасхожденияхПослеОтгрузки") Тогда
			ЗапросТекст = "
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
				|	ТаблицаТовары.Характеристика			КАК Характеристика,
				|	ТаблицаТовары.Серия						КАК Серия,
				|	ВЫРАЗИТЬ(ТаблицаТовары.Назначение КАК Справочник.Назначения) КАК Назначение,
				|	ТаблицаТовары.КоличествоУпаковок-ТаблицаТовары.КоличествоУпаковокПоДокументу КАК КоличествоУпаковок,
				|	ТаблицаТовары.Количество-ТаблицаТовары.КоличествоПоДокументу КАК Количество,
				|	ВЫРАЗИТЬ(ТаблицаТовары.ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг) КАК ДокументПоступления
				|ПОМЕСТИТЬ ВТТаблицаТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
				|	И НЕ ТаблицаТовары.ДокументПоступления = НЕОПРЕДЕЛЕНО
				|	И (ТаблицаТовары.Количество-ТаблицаТовары.КоличествоПоДокументу) > 0
				|	И ТаблицаТовары.Действие В (ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного),
				|		ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного))
				|;";
		ИначеЕсли ТипЗнч(ДокументЗакупки) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
			ЗапросТекст = "
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
				|	ТаблицаТовары.Характеристика			КАК Характеристика,
				|	ТаблицаТовары.Серия						КАК Серия,
				|	ВЫРАЗИТЬ(ТаблицаТовары.Назначение КАК Справочник.Назначения) КАК Назначение,
				|	ТаблицаТовары.КоличествоУпаковокПоАкту-ТаблицаТовары.КоличествоУпаковокОснование КАК КоличествоУпаковок,
				|	(ТаблицаТовары.КоличествоУпаковокПоАкту-ТаблицаТовары.КоличествоУпаковокОснование) * ТаблицаТовары.КоэффициентУпаковки КАК Количество,
				|	ВЫРАЗИТЬ(ТаблицаТовары.ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг) КАК ДокументПоступления
				|ПОМЕСТИТЬ ВТТаблицаТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
				|	И НЕ ТаблицаТовары.ДокументПоступления = НЕОПРЕДЕЛЕНО
				|	И ТаблицаТовары.КоличествоУпаковокПоАкту-ТаблицаТовары.КоличествоУпаковокОснование > 0
				|;";
		Иначе
			ЗапросТекст = "ВЫБРАТЬ
				|	ТаблицаТовары.Номенклатура			КАК Номенклатура,
				|	ТаблицаТовары.Характеристика		КАК Характеристика,
				|
				|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий = 14 Тогда
				|		ТаблицаТовары.Серия
				|	ИНАЧЕ
				|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|	КОНЕЦ 								КАК Серия,
				|
				|	ВЫРАЗИТЬ(ТаблицаТовары.Назначение КАК Справочник.Назначения) КАК Назначение,
				|	ТаблицаТовары.КоличествоУпаковок	КАК КоличествоУпаковок,
				|	ТаблицаТовары.Количество			КАК Количество,
				|	ТаблицаТовары.ДокументПоступления	КАК ДокументПоступления
				|ПОМЕСТИТЬ ВТТаблицаТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
				|	И НЕ ТаблицаТовары.ДокументПоступления = НЕОПРЕДЕЛЕНО
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Серия
				|;";
		КонецЕсли;
		Запрос.Текст = ЗапросТекст + "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура)	КАК Номенклатура,
		|	ТаблицаТовары.Характеристика			КАК Характеристика,
		|	ТаблицаТовары.Назначение                КАК Назначение,
		|	ТаблицаТовары.Серия						КАК Серия,
		|	ТаблицаТовары.ДокументПоступления		КАК ДокументПоступления,
		|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаТовары.Количество) 		КАК Количество
		|ПОМЕСТИТЬ ПроверяемыеТовары
		|ИЗ
		|	ВТТаблицаТовары КАК ТаблицаТовары
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ТаблицаТовары.Назначение,
		|	Серия,
		|	ДокументПоступления
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КорректировкаПоступления.Дата) КАК Дата,
		|	ПроверяемыеТовары.ДокументПоступления КАК СсылкаПоступления
		|ПОМЕСТИТЬ ДанныеКорректировки
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|		ПО (КорректировкаПоступления.ДокументОснование = ПроверяемыеТовары.ДокументПоступления)
		|ГДЕ
		|	КорректировкаПоступления.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроверяемыеТовары.ДокументПоступления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СсылкаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КорректировкаПоступления.Ссылка) КАК Ссылка,
		|	МАКСИМУМ(КорректировкаПоступления.Ссылка.Дата) КАК Дата,
		|	КорректировкаПоступления.Ссылка.ДокументОснование КАК СсылкаПоступления
		|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	(КорректировкаПоступления.Ссылка.ДокументОснование, КорректировкаПоступления.Ссылка.Дата) В
		|			(ВЫБРАТЬ
		|				ДанныеКорректировки.СсылкаПоступления КАК СсылкаПоступления,
		|				ДанныеКорректировки.Дата КАК Дата
		|			ИЗ
		|				ДанныеКорректировки)
		|	И КорректировкаПоступления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПоступления.Ссылка.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	СсылкаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА ПроверяемыеТовары.ДокументПоступления
		|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
		|	КОНЕЦ КАК Ссылка
		|ПОМЕСТИТЬ СсылкиНаПоступления
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|		ПО ПроверяемыеТовары.ДокументПоступления = ДанныеПоследнейКорректировки.СсылкаПоступления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаПоступленияТовары.Характеристика КАК Характеристика,
		|	КорректировкаПоступленияТовары.Серия КАК Серия,
		|	КорректировкаПоступленияТовары.Назначение КАК Назначение,
		|	СУММА(КорректировкаПоступленияТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(КорректировкаПоступленияТовары.Количество) КАК Количество,
		|	СРЕДНЕЕ(КорректировкаПоступленияТовары.Цена) КАК Цена,
		|	КорректировкаПоступленияТовары.Ссылка.ДокументОснование КАК ДокументПоступления
		|ПОМЕСТИТЬ ДанныеПоступления
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
		|
		|ГДЕ
		|	КорректировкаПоступленияТовары.Ссылка.Проведен
		|	И (Номенклатура,Характеристика,Назначение,Серия) В 
		|	(ВЫБРАТЬ 
		|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|		ПроверяемыеТовары.Характеристика КАК Характеристика,
		|		ПроверяемыеТовары.Назначение КАК Назначение,
		|		ПроверяемыеТовары.Серия КАК Серия
		|	ИЗ
		|		ПроверяемыеТовары КАК ПроверяемыеТовары	
		|	) И  (Ссылка) В 
		|	(ВЫБРАТЬ 
		|		СсылкиНаПоступления.Ссылка КАК Ссылка
		|	ИЗ
		|		СсылкиНаПоступления КАК СсылкиНаПоступления
		|	) 
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПоступленияТовары.Номенклатура,
		|	КорректировкаПоступленияТовары.Характеристика,
		|	КорректировкаПоступленияТовары.Серия,
		|	КорректировкаПоступленияТовары.Назначение,		
		|	КорректировкаПоступленияТовары.Ссылка.ДокументОснование
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	ПоступлениеТоваровУслугТовары.Серия,
		|	ПоступлениеТоваровУслугТовары.Назначение,
		|	СУММА(ПоступлениеТоваровУслугТовары.КоличествоУпаковок),
		|	СУММА(ПоступлениеТоваровУслугТовары.Количество),
		|	СРЕДНЕЕ(ПоступлениеТоваровУслугТовары.Цена),
		|	ПоступлениеТоваровУслугТовары.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
		|	И (Номенклатура,Характеристика,Назначение,Серия) В 
		|	(ВЫБРАТЬ 
		|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|		ПроверяемыеТовары.Характеристика КАК Характеристика,
		|		ПроверяемыеТовары.Назначение КАК Назначение,
		|		ПроверяемыеТовары.Серия КАК Серия
		|	ИЗ
		|		ПроверяемыеТовары КАК ПроверяемыеТовары
		|	) И  (Ссылка) В 
		|	(ВЫБРАТЬ 
		|		СсылкиНаПоступления.Ссылка КАК Ссылка
		|	ИЗ
		|		СсылкиНаПоступления КАК СсылкиНаПоступления
		|	) 
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	ПоступлениеТоваровУслугТовары.Серия,
		|	ПоступлениеТоваровУслугТовары.Назначение,
		|	ПоступлениеТоваровУслугТовары.Ссылка
		|
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
		|	ТаблицаПроверяемыеТовары.Назначение КАК Назначение,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления
		|
		|ПОМЕСТИТЬ ДанныеДокументовВозврата
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПроверяемыеТовары
		|	ПО
		|		(ТаблицаПроверяемыеТовары.ДокументПоступления = ПроверяемыеТовары.ДокументПоступления)
		|		И ПроверяемыеТовары.Номенклатура = ТаблицаПроверяемыеТовары.Номенклатура
		|		И ПроверяемыеТовары.Характеристика = ТаблицаПроверяемыеТовары.Характеристика
		|		И ПроверяемыеТовары.Серия = ТаблицаПроверяемыеТовары.Серия
		|		И ПроверяемыеТовары.Назначение = ТаблицаПроверяемыеТовары.Назначение
		|
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ЭтотВозвратСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия,
		|	ТаблицаПроверяемыеТовары.Назначение,
		|	ТаблицаПроверяемыеТовары.ДокументПоступления
		|
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ДанныеПоступления.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) КАК Количество,
		|	ПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ПроверяемыеТовары.Серия КАК Серия,
		|	ПроверяемыеТовары.Назначение КАК Назначение,
		|	ПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления,
		|	ПроверяемыеТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПроверяемыеТовары.ДокументПоступления.Номер КАК НомерПоступления
		|ИЗ
		|	ДанныеПоступления КАК ДанныеПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
		|		ПО ДанныеПоступления.ДокументПоступления = ДанныеДокументовВозврата.ДокументПоступления
		|			И ДанныеПоступления.Номенклатура = ДанныеДокументовВозврата.Номенклатура
		|			И ДанныеПоступления.Характеристика = ДанныеДокументовВозврата.Характеристика
		|			И ДанныеПоступления.Серия = ДанныеДокументовВозврата.Серия
		|			И ДанныеПоступления.Назначение = ДанныеДокументовВозврата.Назначение
		|		ПОЛНОЕ СОЕДИНЕНИЕ ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ПО ДанныеПоступления.ДокументПоступления = ПроверяемыеТовары.ДокументПоступления
		|			И ДанныеПоступления.Номенклатура = ПроверяемыеТовары.Номенклатура
		|			И ДанныеПоступления.Характеристика = ПроверяемыеТовары.Характеристика
		|			И ДанныеПоступления.Серия = ПроверяемыеТовары.Серия
		|			И ДанныеПоступления.Назначение = ПроверяемыеТовары.Назначение
		|		
		|ГДЕ
		|	ЕСТЬNULL(ДанныеПоступления.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) < 0
		|	И (ПроверяемыеТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	ИЛИ (ПроверяемыеТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|		И НЕ ПроверяемыеТовары.ДокументПоступления.ВернутьМногооборотнуюТару))";
		
		Запрос.УстановитьПараметр("ТаблицаПроверяемыеТовары", ТаблицаПроверяемыеТовары);
		Запрос.УстановитьПараметр("ЭтотВозвратСсылка", ДокументЗакупки.Ссылка);
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			Отказ = Истина;
			СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Результат);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Формирует отчет "Отклонения от условий закупок" путем выполнения пакета запросов. 
// 
// Параметры:
// ДокументЗакупки  - ДокументОбъект -Документ, для которого необходимо осуществить проверки
// ТаблицаОтчета  - ТабличныйДокумент - Табличный документ отчета
//
Процедура СформироватьОтчетОтклоненияОтУсловийЗакупок(Знач ДокументЗакупки, ТаблицаОтчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенЗакупки  = Константы.ВидМаксимальноДопустимыхЦенЗакупки.Получить();
	ПроверятьДиапазонЦен                = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенЗакупки);
	ЕстьОшибкиСоглашениеНеУказано       = Ложь;
	ИспользоватьРучныеСкидки            = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьНоменклатуруПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков");
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	
	ВозвратМногооборотнойТары          = Ложь;
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	
	МассивПроверок = Новый Массив();
	ИмяТаблицы     = ДокументЗакупки.Метаданные().ПолноеИмя();
	
	// ЗАКАЗ ПОСТАВЩИКУ
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		СоглашениеУказано = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументЗакупки.ТребуетсяЗалогЗаТару;
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
		Если СоглашениеУказано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
			
		Иначе
			
			ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками;
			
		КонецЕсли;
			
		Если ИспользоватьРучныеСкидки И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			И ДокументЗакупки.СуммаДокумента <> 0
			И ДокументЗакупки.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
			МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
			
		КонецЕсли;
		
	// ПОСТУПЛЕНИЕ ТОВАРОВ И УСЛУГ
		
	ИначеЕсли ИмяТаблицы = "Документ.ПоступлениеТоваровУслуг" Тогда
		
		СоглашениеУказано     = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		ЕстьОшибкиСоглашениеНеУказано = ИспользоватьСоглашенияСПоставщиками
		                                И Не СоглашениеУказано
		                                И Не ДокументЗакупки.ПоступлениеПоЗаказам;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		
		Если Не ДокументЗакупки.ПоступлениеПоЗаказам И СоглашениеУказано Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументЗакупки.ТребуетсяЗалогЗаТару;
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		Если СоглашениеУказано Тогда
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
		КонецЕсли;
		
		Если СоглашениеУказано И ИспользоватьРучныеСкидки И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
			
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();

	ПараметрыЗапроса.Вставить("Дата",                      ДокументЗакупки.Дата);
	ПараметрыЗапроса.Вставить("Ссылка",                    ДокументЗакупки.Ссылка);
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару",      ТребуетсяЗалогЗаТару);
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл
		
		Если ТекЭлемент = "ВременнаяТаблицаДокументЗакупки" Тогда
			
			СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	МассивОтклоненийШапки         = Новый Массив;
	ДеревоОтклоненийТовары        = Отчеты.ОтклоненияОтУсловийЗакупок.ИнициализироватьДеревоОтклонений();
	ДеревоОтклоненийЭтапыОплаты   = Отчеты.ОтклоненияОтУсловийЗакупок.ИнициализироватьДеревоОтклонений();
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахШапкаДокументаЗакупки(Выборка, ДокументЗакупки, Ложь, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахТоварыДокументаЗакупки(Выборка, ДокументЗакупки, Ложь, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументЗакупки, Ложь, ИспользоватьРучныеСкидки, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументЗакупки, Ложь, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументЗакупки, Ложь, ДеревоОтклоненийЭтапыОплаты);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Выборка, ДокументЗакупки, Ложь, МассивОтклоненийШапки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОтклонения = МассивОтклоненийШапки.Количество() > 0 
		ИЛИ ДеревоОтклоненийТовары.Строки.Количество() > 0 
		ИЛИ ДеревоОтклоненийЭтапыОплаты.Строки.Количество() > 0;
	
	Отчеты.ОтклоненияОтУсловийЗакупок.ВывестиЗаголовокОтчета(ТаблицаОтчета, ЕстьОтклонения, ЕстьОшибкиСоглашениеНеУказано);
	
	Если МассивОтклоненийШапки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийЗакупок.ВывестиОтклоненияВОбластьШапки(МассивОтклоненийШапки, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийТовары.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийЗакупок.ВывестиОтклоненияТоварыДокументаЗакупки(ДокументЗакупки, ДеревоОтклоненийТовары, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийЭтапыОплаты.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийЗакупок.ВывестиОтклоненияЭтапыОплатыДокументаЗакупки(ДокументЗакупки, ДеревоОтклоненийЭтапыОплаты, ТаблицаОтчета);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРасчетаЦенВДокументахЗакупок

// Заполняет реквизит "Цена" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"Дата" - Дата - Дата документа
// 				"Валюта" - СправочникСсылка.Валюты - Валюта документа
// 				"Соглашение" - СправочникСсылка.СоглашенияСПоставщиками - Соглашение документа
// 			Необязательные поля:
// 				"ВидЦеныПоставщика" - СправочникСсылка.ВидыЦенПоставщиков - Вид цены поставщика
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по умолчанию: "Цена". Дополнительные поля: "ВидЦеныПоставщика, СтавкаНДС"
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		КэшированныеЗначения - Структура - Структура кэшированных значений
// 		
//
Функция ЗаполнитьЦены(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ЦеныЗаполнены = Ложь;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Параметры заполнения не указаны';uk='Параметри не зазначені'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	// Получение структуры параметров по умолчанию
	Параметры = Новый Структура(
		"ВидЦеныПоставщика, ПоляЗаполнения, КолонкиПоЗначению, ДругиеИменаКолонок",
		Справочники.ВидыЦенПоставщиков.ПустаяСсылка(), "Цена", Новый Структура, Новый Структура);
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не Параметры.Свойство("Соглашение") И Не Параметры.Свойство("ВидЦеныПоставщика") Тогда
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Соглашение"" или ""ВидЦеныПоставщика""';uk='У параметрах заповнення повинні бути вказані ""Соглашение"" або ""ВидЦеныПоставщика""'");
		Возврат ЦеныЗаполнены;
	ИначеЕсли Не Параметры.Свойство("Дата") Или Не Параметры.Свойство("Валюта") Тогда
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Валюта"" и ""Дата""';uk='У параметрах заповнення повинні бути вказані ""Валюта"" і ""Дата""'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	ВидЦеныПоставщика = Справочники.ВидыЦенПоставщиков.ПустаяСсылка();
	Если Параметры.Свойство("Соглашение") И Не ПараметрыЗаполнения.Свойство("ВидЦеныПоставщика") Тогда
		ВидЦеныПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Соглашение, "ВидЦеныПоставщика");
	Иначе
		ВидЦеныПоставщика = Параметры.ВидЦеныПоставщика;
	КонецЕсли;
	
	Если Параметры.Свойство("Соглашение") Тогда
		Соглашение = Параметры.Соглашение;
	Иначе
		Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		ТабличнаяЧасть,
		ВыделенныеСтроки,
		"НомерСтроки, Номенклатура, Характеристика, Упаковка",
		Параметры.КолонкиПоЗначению,
		Параметры.ДругиеИменаКолонок);
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Валюта", Параметры.Валюта);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика", ВидЦеныПоставщика);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("ЭтоВыкупТары", ?(Параметры.Свойство("ЭтоВыкупТары"), Параметры.ЭтоВыкупТары, Ложь));
	
	Запрос.Текст = ПолучитьТекстЗапросаВременнойТаблицыТоваров("втТаблицаТовары")
	             + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦены", "втТаблицаТовары")
	             + "ВЫБРАТЬ
	               |	втТаблицаЦены.НомерСтроки КАК НомерСтроки,
	               |	втТаблицаЦены.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	               |	втТаблицаЦены.СтавкаНДС КАК СтавкаНДС,
	               |	втТаблицаЦены.Цена
	               |ИЗ
	               |	втТаблицаЦены КАК втТаблицаЦены";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
		Если СтруктураДействий <> Неопределено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает цену по отбору
//
// Параметры:
//		ПараметрыОтбора - Структура - Структура с обязательными полями
//			"Дата" - Дата - Дата получения цены
// 			"Номенклатура" - СправочникСсылка.Номенклатура
// 			"Характеристика" - СправочникСсылка.ХарактеристикиНоменклатуры
// 			"Упаковка" - СправочникСсылка.УпаковкиЕдиницыИзмерения
// 			"ВидЦены" - СправочникСсылка.ВидыЦен
// 			"Валюта" - СправочникСсылка.Валюты
//
// Возвращаемое значение:
// 		Число - Цена
//
Функция ПолучитьЦенуПоОтбору(ПараметрыОтбора) Экспорт
	
	Запрос = Новый Запрос;
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ЭтоВыкупТары", ?(ПараметрыОтбора.Свойство("ЭтоВыкупТары"), ПараметрыОтбора.ЭтоВыкупТары, Ложь));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|;" + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦен", "втТаблицаТовары") + "
	|ВЫБРАТЬ
	|	втТаблицаЦен.Цена КАК Цена
	|ИЗ
	|	втТаблицаЦен КАК втТаблицаЦен
	|";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСоСкидкамиВДокументахЗакупки

 // Осуществляет заполнение условий цен и цен в тч Товары по виду цен по выделенным строкам
//
// Параметры:
// 		Объект - ДокументОбъект, для которого необходимо отменить ручные скидки
// 		ИмяТабличнойЧасти  - Строка - имя табличной части объекта, в которой необходимо отменить ручные скидки
// 		ОчищатьСуммыВзаиморасчетов - Булево - Истина, если в табличной части присутствует сумма взаиморасчетов
//
Процедура ОтменитьРучныеСкидки(Объект, ИмяТабличнойЧасти, ОчищатьСуммыВзаиморасчетов = Ложь) Экспорт
	
	СкидкиИзменены = Ложь;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если СтрокаТЧ.СуммаРучнойСкидки <> 0 Или СтрокаТЧ.ПроцентРучнойСкидки <> 0 Тогда
			
			СтрокаТЧ.СуммаРучнойСкидки = 0;
			СтрокаТЧ.ПроцентРучнойСкидки = 0;
			Ценообразование.ПересчитатьСуммыВСтроке(СтрокаТЧ, Ложь, Ложь, Истина, Объект.ЦенаВключаетНДС);
			СкидкиИзменены = Истина;
			Если ОчищатьСуммыВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкидкиИзменены Тогда
		Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТабличнойЧасти], Объект.ЦенаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНоменклатуройПоставщикаВДокументахЗакупки

// Помещает таблицу товаров во временное хранилище
// 
// Параметры:
// Товары  - ДанныеФормыКоллекция - таблица товаров, которую необходимо поместить во временное хранилище
//
// Возвращаемое значение:
// Строка
// Адрес таблицы товаров во временном хранилище
//
Функция ПоместитьТоварыВоВременноеХранилище(Товары) Экспорт
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			МассивСтрок.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		АдресТоваровВоВременномХранилище = Неопределено;
	Иначе
		НоменклатураПоставщика = Товары.Выгрузить(МассивСтрок, "НомерСтроки,НоменклатураПоставщика");
		АдресТоваровВоВременномХранилище = ПоместитьВоВременноеХранилище(НоменклатураПоставщика);
	КонецЕсли;
	
	Возврат АдресТоваровВоВременномХранилище;
	
КонецФункции

// Проверяет корректность заполнения этапов графика оплаты в документе закупки
//
// Параметры:
// ЭтапыГрафикаОплаты               - Табличная часть документа
// СуммаОплатыПоДокументу           - Число - сумма документа, в котором необходимо осуществить проверку
// СуммаЗалогаПоДокументу           - Число - сумма залога по документу, в котором необходимо осуществить проверку
// УчитыватьВариантОплаты           - Булево - признак необходимости проверки корректности вариантов оплаты
// Отказ                            - Булево - Флаг отказа от записи документа
// УпрощенныйРежимДиалога           - Булево - флаг, указывающий на использование простого диалога ввода этапов оплаты
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплатыПоТаблицеЗначений(Знач ЭтапыГрафикаОплаты,
	                                               СуммаОплатыПоДокументу,
	                                               СуммаЗалогаПоДокументу,
	                                               УчитыватьВариантОплаты,
	                                               Отказ,
	                                               УпрощенныйРежимДиалога = Ложь,
	                                               СтруктураПараметров) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Дата) Тогда
		ДатаДокумента = НачалоДня(СтруктураПараметров.Дата);
	КонецЕсли;
	
	СуммаОплатыВсего = Окр(СуммаОплатыПоДокументу, 2);
	СуммаЗалогаВсего = Окр(СуммаЗалогаПоДокументу, 2);
	
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаОплатыВсего <> 0 Или СуммаЗалогаВсего <> 0 Тогда
			
			Если УпрощенныйРежимДиалога Тогда
				ТекстОшибки = НСтр("ru='Необходимо заполнить хотя бы один из этапов';uk='Необхідно заповнити хоча б один з етапів'");
				ПолеОшибки  = "ПроцентПлатежаКредит";
			Иначе
				ТекстОшибки = НСтр("ru='Необходимо заполнить этапы графика оплаты';uk='Необхідно заповнити етапи графіка оплати'");
				ПолеОшибки  = "ЭтапыГрафикаОплаты";
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
			
		КонецЕсли;
		
	Иначе
		
		ИтогПроцентПлатежа = 0;
		ИтогПроцентЗалогаЗаТару = 0;
		ИтогСуммаПлатежа = 0;
		ИтогСуммаЗалогаЗаТару = 0;
		Для ТекИндекс = 0 По ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			ДанныеЭтапа = Новый Структура("НомерСтроки, ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, ПроцентЗалогаЗаТару, СуммаПлатежа, СуммаЗалогаЗаТару",
				0, Неопределено, '00010101', 0, 0, 0, 0);
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ЭтапыГрафикаОплаты[ТекИндекс]);
			ИтогПроцентПлатежа = ИтогПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			ИтогПроцентЗалогаЗаТару = ИтогПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
			ИтогСуммаПлатежа = ИтогСуммаПлатежа + ДанныеЭтапа.СуммаПлатежа;
			ИтогСуммаЗалогаЗаТару = ИтогСуммаЗалогаЗаТару + ДанныеЭтапа.СуммаЗалогаЗаТару;
			
			АдресОшибки = НСтр("ru='в строке %НомерСтроки% списка ""Этапы графика оплаты""';uk='у рядку %НомерСтроки% списку ""Етапи графіка оплати""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДанныеЭтапа.НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ДанныеЭтапа.ВариантОплаты) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вариант оплаты""';uk='Не заповнена колонка ""Варіант оплати""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ВариантОплаты"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
						ТекстОшибки = НСтр("ru='Не заполнена ""Дата платежа"" по кредиту';uk='Не заповнена ""Дата платежу"" за кредитом'");
						ПолеОшибки  = "ДатаКредит";
					Иначе
						ТекстОшибки = НСтр("ru='Не заполнена ""Дата платежа"" по предоплате';uk='Не заповнена ""Дата платежу"" за передплатою'");
						ПолеОшибки  = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата платежа""';uk='Не заповнена колонка ""Дата платежу""'");
					ПолеОшибки  = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа)
				И Не ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа""';uk='Не заповнена колонка ""Відсоток платежу""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаПлатежа) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентПлатежа) И 
				СуммаОплатыВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма платежа""';uk='Не заповнена колонка ""Сума платежу""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаПлатежа"),
					,
					Отказ);
				
				КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ДанныеЭтапа.СуммаЗалогаЗаТару) И
				ЗначениеЗаполнено(ДанныеЭтапа.ПроцентЗалогаЗаТару) И 
				СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма залога за тару""';uk='Не заповнена колонка ""Сума застави за тару""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "СуммаЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
				ЗначениеЗаполнено(СтруктураПараметров.Дата) И
				ДанныеЭтапа.ДатаПлатежа < ДатаДокумента Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					Если ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
						ПолеОшибки = "ДатаКредит";
					Иначе
						ПолеОшибки = "ДатаПредоплата";
					КонецЕсли;
				Иначе
					ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
				
				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%';uk='Дата платежу повинна бути не менше дати документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(СтруктураПараметров.Дата, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если УчитыватьВариантОплаты Тогда
				
				// Дата платежа по авансовому этапу должна быть не больше даты поступления в шапке
				Если ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаПоступления) И
					(ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Или
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления) И
					ДанныеЭтапа.ДатаПлатежа > СтруктураПараметров.ЖелаемаяДатаПоступления Тогда
					
					ТекстОшибки = НСтр("ru='Дата платежа по авансовому этапу должна быть не больше желаемой даты поступления %ДатаПоступления%';uk='Дата платежу по авансовому етапу повинна бути не більше бажаної дати надходження %ДатаПоступления%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПоступления%", Формат(СтруктураПараметров.ЖелаемаяДатаПоступления, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(УпрощенныйРежимДиалога, "ДатаПредоплата", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				// Дата платежа по кредитному этапу должна быть не меньше даты поступления в шапке
				ИначеЕсли ЗначениеЗаполнено(ДанныеЭтапа.ДатаПлатежа) И
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаПоступления) И
					ДанныеЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления И
					ДанныеЭтапа.ДатаПлатежа < СтруктураПараметров.ЖелаемаяДатаПоступления Тогда
					
					ТекстОшибки = НСтр("ru='Дата платежа по кредитному этапу должна быть не меньше желаемой даты поступления %ДатаПоступления%';uk='Дата платежу по кредитному етапу повинна бути не менше бажаної дати надходження %ДатаПоступления%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПоступления%", Формат(СтруктураПараметров.ЖелаемаяДатаПоступления, "ДЛФ=DD")); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(УпрощенныйРежимДиалога, "ДатаКредит", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДанныеЭтапа.НомерСтроки, "ДатаПлатежа")),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ИтогПроцентПлатежа <> 100 И СуммаОплатыВсего <> 0 Тогда
				
				ТекстОшибки = НСтр("ru='Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';uk='Відсоток платежів за всіма етапами ""%ПроцентПоЭтапам%%"" повинен дорівнювати ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентПлатежа);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(УпрощенныйРежимДиалога, "ПроцентПлатежаКредит", "ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ);
				
			КонецЕсли;
				
			Если ИтогПроцентЗалогаЗаТару <> 100 И СуммаЗалогаВсего > 0 Тогда
				
				ТекстОшибки = НСтр("ru='Процент залога за тару по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться ""100%""';uk='Відсоток застави за тару за всіма етапами ""%ПроцентПоЭтапам%%"" повинен дорівнювати ""100%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ИтогПроцентЗалогаЗаТару);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(УпрощенныйРежимДиалога, "ПроцентЗалогаЗаТаруКредит", "ЭтапыГрафикаОплаты[0].ПроцентЗалогаЗаТару"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если СуммаОплатыВсего <> 0 И ИтогСуммаПлатежа <> СуммаОплатыВсего Тогда
				
				ТекстОшибки = НСтр("ru='Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы документа ""%СуммаВсего% %Валюта%""';uk='Сума платежів за всіма етапами ""%СуммаПоЭтапам% %Валюта%"" не повинна відрізнятися від суми документа ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаПлатежа);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаОплатыВсего - СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);
				
				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
						ПолеОшибки = "СуммаПлатежаПредоплата";
					Иначе
						ПолеОшибки = "СуммаПлатежаКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаПлатежа";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
			Если СуммаЗалогаВсего <> 0 И ИтогСуммаЗалогаЗаТару <> СуммаЗалогаВсего Тогда
				
				ТекстОшибки = НСтр("ru='Сумма залога за тару по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы залога по документу ""%СуммаВсего% %Валюта%""';uk='Сума застави за тару за всіма етапами ""%СуммаПоЭтапам% %Валюта%"" не повинна відрізнятися від суми застави за документом ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", ИтогСуммаЗалогаЗаТару);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаЗалогаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);
				
				Если УпрощенныйРежимДиалога Тогда
					Если ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
						ПолеОшибки = "СуммаЗалогаЗаТаруПредоплата";
					Иначе
						ПолеОшибки = "СуммаЗалогаЗаТаруКредит";
					КонецЕсли;
				Иначе
					ПолеОшибки = "ЭтапыГрафикаОплаты[0].СуммаЗалогаЗаТару";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоЭтапов = ЭтапыГрафикаОплаты.Количество();
		
		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл
			
			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;
			
			Если УчитыватьВариантОплаты Тогда
				
				ПредыдущееЗначениеВариантаОплаты = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
				
				// В табличной части Этапы не должно быть строк со значением АвансДоПодтверждения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоПоступления
				// КредитПослеПоступления
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления ИЛИ
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоПоступления
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеПоступления
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления) Тогда
					
					ТекстОшибки = НСтр("ru='Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
                    |не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%'
                    |;uk='Варіант оплати ""%ТекущееЗначениеВариантаОплаты%"" в рядку %ИндексТекущегоЭтапа%
                    |не може йти після варіанти оплати ""%ПредыдущееЗначениеВариантаОплаты%"" в рядку %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты"),
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию
			Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И
				ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
				ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда
				
				Если УпрощенныйРежимДиалога Тогда
					ТекстОшибки = НСтр("ru='Дата платежа по кредиту не должна быть меньше, чем дата платежа по предоплате';uk='Дата платежу по кредиту не повинна бути менше, ніж дата платежу по передплаті'");
					ПолеОшибки  = "ДатаПредоплата";
				Иначе
					ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
                    |списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'
                    |;uk='Дата платежу в рядку %ИндексТекущегоЭтапа%
                    |списку ""Етапи оплати"" має бути не менше, ніж у рядку %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);
					ПолеОшибки  = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПолученияЗначенийРеквизитовПоУмолчанию

// Возвращает структуру по ответственному лицу указанного склада
// В случае если склад является группой, возвращает значения,
// 		использовавшиеся в последнем документе указанного менеджера с указанным складом
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Стуктура - Структура с полями: "Ответственный" и "ОтветственныйДолжность"
//
Функция ПолучитьОтветственногоПоСкладу(Склад, Менеджер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Справочники.Склады.ЭтоГруппа(Склад) Тогда
		СтруктураОтветственного = ЗначениеНастроекПовтИсп.ПолучитьОтветственногоПоСкладу(Склад);
		Если СтруктураОтветственного <> Неопределено Тогда
			Возврат СтруктураОтветственного;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТоваровУслуг.Принял КАК Ответственный,
	|	ПоступлениеТоваровУслуг.ПринялДолжность КАК ОтветственныйДолжность
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Склад = &Склад
	|	И ПоступлениеТоваровУслуг.Менеджер = &Менеджер
	|	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
	|	И (ПоступлениеТоваровУслуг.Принял <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ИЛИ ПоступлениеТоваровУслуг.ПринялДолжность <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслуг.МоментВремени УБЫВ");
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Ответственный, ОтветственныйДолжность", Выборка.Ответственный, Выборка.ОтветственныйДолжность);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет поиск действующего договора с контрагентом по заданным реквизитам.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
//
// Параметры:
// 		Партнер - СправочникСсылка.Партнеры - Деловой партнер предприятия, у которого осуществляются закупки;
//		Контрагент - СправочникСсылка.Контрагенты - Контрагент, с которым заключен договор;
//		Организация - СправочникСсылка.Организации - Организация предприятия, от имени которой заключен договор;
//		ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных операций (тип договора);
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору;
//		Соглашение - СправочникСсылка.СоглашенияСПоставщиками - Если не задан порядок, он будет получен из соглашения с поставщиком.
//		Налогообложение - ПеречислениеСсылка.ТипНалогообложенияНДС - Определяет, должна ли организация являться налоговым агентом по договору.
//
// Возвращаемое значение:
// 		СправочникСсылка.ДоговорыКонтрагентов.
//
Функция ПолучитьДоговорПоУмолчанию(
	Объект,
	ХозяйственныеОперации,
	ВалютаВзаиморасчетов = Неопределено,
	НаправлениеДеятельности = Неопределено
	) Экспорт
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Объект.Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ПО СоглашенияСПоставщиками.Ссылка = &Соглашение
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственныеОперации)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственныеОперации))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ((НЕ &ОтборСоглашение)
	|			ИЛИ
	|				ВЫБОР КОГДА &ОтборСоглашение ТОГДА
	|					СоглашенияСПоставщиками.ПорядокОплаты = ДоговорыКонтрагентов.ПорядокОплаты
	|					И СоглашенияСПоставщиками.ИспользуютсяДоговорыКонтрагентов
	|			КОНЕЦ)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности);
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ПО СоглашенияСПоставщиками.Ссылка = &Соглашение
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственныеОперации)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственныеОперации))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ((НЕ &ОтборСоглашение)
	|			ИЛИ
	|				ВЫБОР КОГДА &ОтборСоглашение ТОГДА
	|					СоглашенияСПоставщиками.ПорядокОплаты = ДоговорыКонтрагентов.ПорядокОплаты
	|					И СоглашенияСПоставщиками.ИспользуютсяДоговорыКонтрагентов
	|			КОНЕЦ)
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности)
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор",				Объект.Договор);
	Запрос.УстановитьПараметр("СписокПартнеров",			СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент",					Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация",				Объект.Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственныеОперации",	ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственныеОперации",		ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов",	ЗначениеЗаполнено(ВалютаВзаиморасчетов));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",		ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборСоглашение",			ЗначениеЗаполнено(Объект.Соглашение));
	Запрос.УстановитьПараметр("Соглашение",					Объект.Соглашение);
	Запрос.УстановитьПараметр("ОтборНаправлениеДеятельности", НаправлениеДеятельности <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"));
	Запрос.УстановитьПараметр("НаправлениеДеятельности",	НаправлениеДеятельности);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Устанавливает видимость реквизита договора в зависимости от данных по соглашению
//
// Параметры:
// 		Соглашение - СправочникСсылка.СоглашенияСПоставщиками
// 		ДоступностьЭлемента - Булево
// 		Договор - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура УстановитьДоступностьДоговора(Объект, ДоступностьЭлемента, ВидимостьЭлемента, Договор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользуютсяДоговорыКонтрагентов     = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	
	ЗаполненыВлияющиеПоля = 
		ЗначениеЗаполнено(Объект.Партнер)
		И (ЗначениеЗаполнено(Объект.Контрагент) Или ИспользоватьПартнеровКакКонтрагентов)
		И ЗначениеЗаполнено(Объект.Организация);
		
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Соглашение")
		И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ИспользуютсяДоговорыКонтрагентов =
				ИспользуютсяДоговорыКонтрагентов
				И ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьЭлемента = ЗаполненыВлияющиеПоля И ИспользуютсяДоговорыКонтрагентов;
	
	ВидимостьЭлемента = ИспользуютсяДоговорыКонтрагентов;
	
	Если НЕ ДоступностьЭлемента И ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры





// Устанавливает режим выбора групп и элементов у склада на форме
//
Процедура УстановитьРежимВыбораГруппЭлементовСклада(Склад) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки") Тогда
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	Иначе
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
	
КонецПроцедуры


// Обновляет информацию о количестве документов поступлений в табличной части документа возврата
//
// Параметры:
//		СписокПоступлений - Список значений, содержащий список документов поступлений
//		ПоступлениеВШапке - Ссылка на документ поступления в шапке документа
//		НадписьЗаголовок - Надпись, содержащая информацию о количестве документов поступлений
//		ЭлементыФормы - Элементы формы документа возврата
//		КолонкаВТабличнойЧасти - Колонка табличной части, содержащая документы поступления
//		ТабличнаяЧасть - Табличная часть документа возврата
//		ИмяПоступленияВТабличнойЧасти - Название колонки с документами поступлений в табличной части
//		
Процедура ОбновитьИнформациюПоПоступлениямВФорме(СписокПоступлений,
	                                             ПоступлениеВШапке,
	                                             НадписьЗаголовок,
	                                             ЭлементыФормы,
	                                             КолонкаВТабличнойЧасти,
	                                             Знач ТабличнаяЧасть,
	                                             Знач ИмяПоступленияВТабличнойЧасти) Экспорт
	
	СписокПоступлений.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяПоступленияВТабличнойЧасти]) И СписокПоступлений.НайтиПоЗначению(ТекСтрока[ИмяПоступленияВТабличнойЧасти]) = Неопределено Тогда
			СписокПоступлений.Добавить(ТекСтрока[ИмяПоступленияВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПоступлений.Количество() = 1 Тогда
		ПоступлениеВШапке = СписокПоступлений[0].Значение;
	Иначе
		ПоступлениеВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() > 1 Тогда
		НадписьЗаголовок = СтрЗаменить(
			НСтр("ru='Всего документов: %КоличествоПоступлений%';uk='Всього документів: %КоличествоПоступлений%'"), "%КоличествоПоступлений%",
			СписокПоступлений.Количество());
	КонецЕсли;
	
	Если СписокПоступлений.Количество() < 1 Тогда
		ПоступлениеВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыПоступления.ТекущаяСтраница = ЭлементыФормы.СтраницаПоступление;
	Иначе
		ЭлементыФормы.СтраницыПоступления.ТекущаяСтраница = ЭлементыФормы.СтраницаПоступления;
	КонецЕсли;
	
КонецПроцедуры

// Определяет хозяйственную операцию возврата по хозяйственной операции поступления
//
// Параметры:
// ХозяйственнаяОперацияПоступление - ПеречислениеСсылка.ХозяйственныеОперации
//
// Возвращаемое значение:
// ПеречислениеСсылка.ХозяйственныеОперации
// Хозяйственная операция возврата
//
Функция ПолучитьХозяйственнуюОперациюВозвратаПоПоступлению(Знач ХозяйственнаяОперацияПоступление) Экспорт
	
	Если ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
	 Или Не ЗначениеЗаполнено(ХозяйственнаяОперацияПоступление) Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
	ИначеЕсли ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту;
	КонецЕсли;
	
КонецФункции

// Заполняет номенклатуру поставщика при изменении поставщика в документе
//
Процедура ЗаполнитьНоменклатуруПоставщикаВТаблице(Таблица, Партнер) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.НомерСтроки    КАК НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Упаковка       КАК Упаковка
		|ПОМЕСТИТЬ
		|	ТабличнаяЧасть
		|ИЗ
		|	&ТабличнаяЧасть КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|ВЫБРАТЬ
		|	МАКСИМУМ(НоменклатураПоставщиков.Ссылка)   КАК НоменклатураПоставщика,
		|	КОЛИЧЕСТВО(*)                              КАК КоличествоНоменклатурыПоставщика,
		|	НоменклатураПоставщиков.Номенклатура       КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика     КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка           КАК Упаковка
		|ПОМЕСТИТЬ
		|	НоменклатураПоставщика
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И Не НоменклатураПоставщиков.ПометкаУдаления
		|	И (Номенклатура,Характеристика,Упаковка) В (
		|		ВЫБРАТЬ
		|			Товары.Номенклатура,
		|			Товары.Характеристика,
		|			Товары.Упаковка
		|		ИЗ
		|			ТабличнаяЧасть КАК Товары
		|		)
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Характеристика,
		|	НоменклатураПоставщиков.Упаковка
		|;
		|ВЫБРАТЬ
		|	МАКСИМУМ(НоменклатураПоставщиков.Ссылка)   КАК НоменклатураПоставщика,
		|	НоменклатураПоставщиков.Номенклатура       КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика     КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка           КАК Упаковка
		|ПОМЕСТИТЬ
		|	НоменклатураПоставщикаБезУпаковок
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И Не НоменклатураПоставщиков.ПометкаУдаления
		|	И (Номенклатура,Характеристика,Упаковка) В (
		|		ВЫБРАТЬ
		|			Товары.Номенклатура,
		|			Товары.Характеристика,
		|			ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИЗ
		|			ТабличнаяЧасть КАК Товары
		|		)
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Характеристика,
		|	НоменклатураПоставщиков.Упаковка
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(*) = 1
		|;
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			НоменклатураПоставщикаСУпаковками.КоличествоНоменклатурыПоставщика = 1
		|		ТОГДА
		|			НоменклатураПоставщикаСУпаковками.НоменклатураПоставщика
		|		КОГДА
		|			НоменклатураПоставщикаСУпаковками.НоменклатураПоставщика ЕСТЬ NULL
		|		ТОГДА
		|			НоменклатураПоставщикаБезУпаковок.НоменклатураПоставщика
		|	КОНЕЦ КАК НоменклатураПоставщика
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	НоменклатураПоставщика КАК НоменклатураПоставщикаСУпаковками
		|ПО
		|	ТабличнаяЧасть.Номенклатура = НоменклатураПоставщикаСУпаковками.Номенклатура
		|	И ТабличнаяЧасть.Характеристика = НоменклатураПоставщикаСУпаковками.Характеристика
		|	И ТабличнаяЧасть.Упаковка = НоменклатураПоставщикаСУпаковками.Упаковка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	НоменклатураПоставщикаБезУпаковок КАК НоменклатураПоставщикаБезУпаковок
		|ПО
		|	ТабличнаяЧасть.Номенклатура = НоменклатураПоставщикаБезУпаковок.Номенклатура
		|	И ТабличнаяЧасть.Характеристика = НоменклатураПоставщикаБезУпаковок.Характеристика
		|ГДЕ
		|	НоменклатураПоставщикаСУпаковками.НоменклатураПоставщика ЕСТЬ НЕ NULL
		|	ИЛИ НоменклатураПоставщикаБезУпаковок.НоменклатураПоставщика ЕСТЬ НЕ NULL
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|");
		
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Таблица.Выгрузить(,"НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Партнер", Партнер);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[3].Пустой() Тогда
	
		Выборка = РезультатЗапроса[3].Выбрать();
		
		Для Каждого ТекСтрока Из Таблица Цикл
			
			Если Выборка.НайтиСледующий(ТекСтрока.НомерСтроки, "НомерСтроки") Тогда
				ТекСтрока.НоменклатураПоставщика = Выборка.НоменклатураПоставщика;
				Выборка.Сбросить();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет номенклатуру, характеристику, упаковку в номенклатуре поставщика с пустой номенклатурой
//
Процедура СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
		Возврат;
	КонецЕсли;
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Упаковка               КАК Упаковка
			|ПОМЕСТИТЬ
			|	Товары
			|ИЗ
			|	&Товары КАК Товары
			|ГДЕ
			|	Товары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка)
			|	И Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|;
			|ВЫБРАТЬ
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Упаковка               КАК Упаковка
			|ПОМЕСТИТЬ
			|	СгруппированныеТовары
			|ИЗ
			|	Товары КАК Товары
			|ГДЕ
			|	Товары.НоменклатураПоставщика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|СГРУППИРОВАТЬ ПО
			|	Товары.НоменклатураПоставщика,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Упаковка
			|;
			|ВЫБРАТЬ
			|	СгруппированныеТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	СгруппированныеТовары.Номенклатура           КАК Номенклатура,
			|	СгруппированныеТовары.Характеристика         КАК Характеристика,
			|	КОЛИЧЕСТВО(*)                                КАК КоличествоУпаковок,
			|	МАКСИМУМ(СгруппированныеТовары.Упаковка)     КАК Упаковка
			|ИЗ
			|	СгруппированныеТовары КАК СгруппированныеТовары
			|СГРУППИРОВАТЬ ПО
			|	СгруппированныеТовары.НоменклатураПоставщика,
			|	СгруппированныеТовары.Номенклатура,
			|	СгруппированныеТовары.Характеристика
			|");
			
		Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"НомерСтроки,НоменклатураПоставщика,Номенклатура,Характеристика,Упаковка"));
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если Не РезультатЗапроса[2].Пустой() Тогда
			
			Выборка = РезультатЗапроса[2].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Попытка
					
					ЗаблокироватьДанныеДляРедактирования(Выборка.НоменклатураПоставщика);
					
					НоменклатураПоставщикаОбъект = Выборка.НоменклатураПоставщика.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(НоменклатураПоставщикаОбъект, Выборка);
					Если Выборка.КоличествоУпаковок > 1 Тогда
						НоменклатураПоставщикаОбъект.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецЕсли;
					НоменклатураПоставщикаОбъект.Записать();
					
				Исключение
					
					ТекстОшибки = НСтр("ru='Не удалось заблокировать %Элемент%. %ОписаниеОшибки%';uk='Не вдалося заблокувати %Элемент%. %ОписаниеОшибки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.НоменклатураПоставщика);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					Отказ = Истина;
					ВызватьИсключение ТекстОшибки;
						
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для передачи в функцию ЗаполнитьТоварыПоФактическойПриемке()
//
Функция ПараметрыЗаполненияПоФактическойПриемке() Экспорт
	
	ПараметрыЗаполнения = Новый Структура("ДокументПоступления,
	                                      |ДатаПоступления,
	                                      |СтруктураДействийСИзмененнымиСтроками,
                                          |СтруктураДействийСДобавленнымиСтроками");
	ПараметрыЗаполнения.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Склад", Неопределено);
	ПараметрыЗаполнения.Вставить("МассивРаспоряжений", Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнениеВАктеОРасхождениях", Ложь);
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет количество в ТЧ Товары по фактически принятым товарам.
//
// Параметры:
//	Товары                                 - Таблица - таблица товаров документа,
//	ПараметрыЗаполнения                    - Структура - см. функцию ПараметрыЗаполненияПоФактическойПриемке(),
//		ДокументПоступления                    - Ссылка - ссылка на документ поступления,
//		ДатаПоступления                        - Дата - дата поступления товаров,
//		СтруктураДействийСИзмененнымиСтроками  - Структура - действия, которые нужно произвести над измененными строками,
//		СтруктураДействийСДобавленнымиСтроками - Структура - действия, которые нужно произвести над добавленными строками,
//		Склад                                  - СправочникСсылка.Склады, Массив - склады поступления,
//		Соглашение                             - СправочникСсылка.СоглашенияСПоставщиками - соглашение поступления,
//		МассивРаспоряжений                     - Массив - распоряжения на поступление
//		ЗаполнениеВАктеОРасхождениях           - Булево - признак того, что выполняется заполнение в "Акт о расхождениях после приемки"
//	ЕстьПринятыеТовары                     - Булево - флаг, по которому можно определить что товары отгружены,
//  ДополнительныеПараметрыПоиска          - Структура - возможность задать дополнительные поля поиска.
//
// Возвращаемое значение:
//	Булево - Флаг, по которому можно определить что в результате перезаполнения ТЧ документа изменилась.
//
Функция ЗаполнитьТоварыПоФактическойПриемке(Товары, ПараметрыЗаполнения, ЕстьПринятыеТовары, ДополнительныеПараметрыПоиска = Неопределено) Экспорт
	
	ДокументПоступления                    = ПараметрыЗаполнения.ДокументПоступления;
	ДатаПоступления                        = ПараметрыЗаполнения.ДатаПоступления;
	СтруктураДействийСИзмененнымиСтроками  = ПараметрыЗаполнения.СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействийСДобавленнымиСтроками = ПараметрыЗаполнения.СтруктураДействийСДобавленнымиСтроками;
	Склад                                  = ПараметрыЗаполнения.Склад;
	Соглашение                             = ПараметрыЗаполнения.Соглашение;
	МассивРаспоряжений                     = ПараметрыЗаполнения.МассивРаспоряжений;
	ЗаполнениеВАктеОРасхождениях           = ПараметрыЗаполнения.ЗаполнениеВАктеОРасхождениях;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьИзменения = Ложь;
	ЕстьПринятыеТовары = Ложь;
	
	ТипПоступления = ТипЗнч(ДокументПоступления);
	ВозможнаПорча = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") И ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ВариантПриемкиТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ВариантПриемкиТоваров");
	Иначе
		ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	КонецЕсли;
	
	Если МассивРаспоряжений <> Неопределено Тогда
		Запрос = Новый Запрос(ТекстЗапросаПроверкаПринимающихсяТоваровПоРаспоряжениям(ТипПоступления));
		Запрос.УстановитьПараметр("МассивРаспоряжений",  МассивРаспоряжений);
		Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
		Запрос.УстановитьПараметр("Соглашение",          Соглашение);
		Запрос.УстановитьПараметр("Склад",               Склад);
		
		Результат = Запрос.ВыполнитьПакет();
		Выборка = Результат[3].Выбрать();
	Иначе
		Запрос = Новый Запрос(ТекстЗапросаПроверкаПринимающихсяТоваровПоНакладной());
		Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
		Запрос.УстановитьПараметр("Соглашение",          Соглашение);
		Запрос.УстановитьПараметр("Склад",               Склад);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		ЕстьПринятыеТовары = (Выборка.Количество > 0);
	КонецЕсли;
	
	//---
	
	УдаляемыеСтроки = Новый Соответствие;
	МассивПерепоставленныхСтрок = Новый Массив();
	
	ВыгружаемыеКолонки = "Номенклатура, Характеристика, Серия, Упаковка, Количество";
	
	Если Склад = Неопределено Тогда
		ДобавлятьКолонкуСклад = Ложь;
		ВыгружаемыеКолонки = ВыгружаемыеКолонки + ", Склад";
	Иначе
		ДобавлятьКолонкуСклад = Истина;
	КонецЕсли;
	
	Если МассивРаспоряжений <> Неопределено
		И ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
		ДобавлятьКолонкуЗаказПоставщику = Ложь;
		ВыгружаемыеКолонки = ВыгружаемыеКолонки + ", ЗаказПоставщику";
	Иначе
		ДобавлятьКолонкуЗаказПоставщику = Истина;
	КонецЕсли;
	
	ТаблицаТоваров = Товары.Выгрузить(, ВыгружаемыеКолонки);
	
	Если ДобавлятьКолонкуСклад Тогда
		ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
			ТекСтрока.Склад = Склад;
		КонецЦикла;
	КонецЕсли;
	
	Если ДобавлятьКолонкуЗаказПоставщику Тогда
		ТаблицаТоваров.Колонки.Добавить("ЗаказПоставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	
	//---
	
	Если МассивРаспоряжений <> Неопределено Тогда
		Запрос = Новый Запрос(ТекстЗапросаПоРаспоряжениям(ТипПоступления));
		Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Иначе
		Запрос = Новый Запрос(ТекстЗапросаПоНакладнойИлиСоглашению());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",       ?(ЗначениеЗаполнено(ДатаПоступления), ДатаПоступления, ТекущаяДата()));
	Запрос.УстановитьПараметр("Ссылка",     ДокументПоступления);
	Запрос.УстановитьПараметр("Товары",     ТаблицаТоваров);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("Склад",      Склад);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Или Не ЕстьПринятыеТовары Тогда
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	Если МассивРаспоряжений <> Неопределено Тогда
		ТаблицаОстатков = РезультатЗапроса[2].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура, Характеристика");
		
		ВыборкаУслуг             = РезультатЗапроса[4].Выбрать();
		ВыборкаУпаковок          = РезультатЗапроса[5].Выбрать();
		ВыборкаНеордерныхСкладов = РезультатЗапроса[6].Выбрать();
	Иначе
		ТаблицаОстатков = РезультатЗапроса[0].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура, Характеристика");
		
		ВыборкаУслуг             = РезультатЗапроса[2].Выбрать();
		ВыборкаУпаковок          = РезультатЗапроса[3].Выбрать();
		ВыборкаНеордерныхСкладов = РезультатЗапроса[4].Выбрать();
	КонецЕсли;
	
	РаспределяемыеПоСериямСтроки = Новый Массив;
	
	ИсходныеСтрокиКДозаполнениюСОстатками = Новый Массив;
	ПоляДляДозаполнения = "Строка,Номенклатура,Характеристика,Склад,Количество,КоэффициентУпаковки,СтрокаОбработана";
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Если ДополнительныеПараметрыПоиска <> Неопределено Тогда
			ЕстьНесоответствие = Ложь;
			Для Каждого ДополнительныйПараметрПоиска Из ДополнительныеПараметрыПоиска Цикл
				Если ТекСтрока[ДополнительныйПараметрПоиска.Ключ] <> ДополнительныйПараметрПоиска.Значение Тогда
					ЕстьНесоответствие = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьНесоответствие Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВозможнаПорча И (Не ЗаполнениеВАктеОРасхождениях) И ТекСтрока.Порча Тогда
			ТекНоменклатура   = ТекСтрока.НоменклатураОприходование;
			ТекХарактеристика = ТекСтрока.ХарактеристикаОприходование;
		Иначе
			ТекНоменклатура   = ТекСтрока.Номенклатура;
			ТекХарактеристика = ТекСтрока.Характеристика;
		КонецЕсли;
		
		ВыборкаУслуг.Сбросить();
		Если ВыборкаУслуг.НайтиСледующий(ТекНоменклатура, "Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
			
		Если Склад = Неопределено Или ТипЗнч(Склад) = Тип("Массив") Тогда
			СкладПоиска = ТекСтрока.Склад;
		Иначе
			СкладПоиска = Склад;
		КонецЕсли;
		
		ВыборкаНеордерныхСкладов.Сбросить();
		Если ВыборкаНеордерныхСкладов.НайтиСледующий(СкладПоиска, "Склад") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия, Склад", ТекНоменклатура, ТекХарактеристика,ТекСтрока.Серия,СкладПоиска);
		
		Если МассивРаспоряжений <> Неопределено
			И ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
			СтруктураПоиска.Вставить("Распоряжение", ТекСтрока.ЗаказПоставщику);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			Если ВыборкаУпаковок.НайтиСледующий(ТекСтрока.Упаковка, "Упаковка") Тогда
				КоэффициентУпаковки = ВыборкаУпаковок.Коэффициент;
			Иначе
				КоэффициентУпаковки = 1;
			КонецЕсли;
			ВыборкаУпаковок.Сбросить();
		Иначе
			КоэффициентУпаковки = 1;
		КонецЕсли;
		
		ИсходноеКоличество = ТекСтрока.Количество;
		ТекущееКоличество = ТекСтрока.Количество;
		
		ИсходнаяСтрокаОбработана = Ложь;
		
		СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицыОстатков.Количество() > 0
			И СтрокиТаблицыОстатков[0].Количество > 0 Тогда
			
			СтрокаОстатков = СтрокиТаблицыОстатков[0];
			ЕстьПринятыеТовары = Истина;
			
			Если ТекущееКоличество > 0 Тогда
				
				ДобавляемоеКоличество = Мин(ТекущееКоличество, СтрокаОстатков.Количество);
				
				ТекущееКоличество = ТекущееКоличество - ДобавляемоеКоличество;
				СтрокаОстатков.Количество = СтрокаОстатков.Количество - ДобавляемоеКоличество;
				СтрокаОстатков.НоменклатураДобавлена = (СтрокаОстатков.Количество = 0);
				
				ДобавляемоеКоличествоУпаковок = ДобавляемоеКоличество / КоэффициентУпаковки;
				
				ТекСтрока.Серия = СтрокаОстатков.Серия;
				ТекСтрока.Количество = ДобавляемоеКоличество;
				ТекСтрока.КоличествоУпаковок = ДобавляемоеКоличествоУпаковок;
				ИсходнаяСтрокаОбработана = Истина;
				
				Если СтрокаОстатков.Количество = 0 Тогда
					ТаблицаОстатков.Удалить(СтрокаОстатков)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущееКоличество > 0
			И ТекСтрока.СтатусУказанияСерий > 0 Тогда
				
			СтрокаКДозаполнению = Новый Структура(ПоляДляДозаполнения);
			ЗаполнитьЗначенияСвойств(СтрокаКДозаполнению, СтруктураПоиска);
			СтрокаКДозаполнению.Строка = ТекСтрока;
			СтрокаКДозаполнению.Количество = ТекущееКоличество;
			СтрокаКДозаполнению.КоэффициентУпаковки = КоэффициентУпаковки;
			СтрокаКДозаполнению.СтрокаОбработана = ИсходнаяСтрокаОбработана;
			ИсходныеСтрокиКДозаполнениюСОстатками.Добавить(СтрокаКДозаполнению);
			
		ИначеЕсли ТекСтрока.Количество = 0
			Или Не ИсходнаяСтрокаОбработана Тогда
			
			УдаляемыеСтроки.Вставить(ТекСтрока);
			
		КонецЕсли;
		
		Если ТекСтрока.Количество <> ИсходноеКоличество Тогда
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			
		КонецЕсли;
		
		ЕстьИзменения = ЕстьИзменения 
			Или ТекСтрока.Количество <> ИсходноеКоличество;
			
	КонецЦикла;
	
	// Поиск в остатках к оформлению поступлений без учета серий
	СтруктураПоиска = Новый Структура("НоменклатураДобавлена, Номенклатура, Характеристика, Склад");
	СтруктураПоиска.НоменклатураДобавлена = Ложь;
	Для Каждого СтрокаКДозаполнению Из ИсходныеСтрокиКДозаполнениюСОстатками Цикл
		
		ТекСтрока                = СтрокаКДозаполнению.Строка;
		ТекущееКоличество        = СтрокаКДозаполнению.Количество;
		ИсходнаяСтрокаОбработана = СтрокаКДозаполнению.СтрокаОбработана;
		ИсходноеКоличество       = ТекСтрока.Количество;
		ИсходнаяСерия            = ТекСтрока.Серия;
		
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаКДозаполнению);
		Если МассивРаспоряжений <> Неопределено
			И ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
			СтруктураПоиска.Вставить("Распоряжение", ТекСтрока.ЗаказПоставщику);
		КонецЕсли;
		
		СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаОстатков Из СтрокиТаблицыОстатков Цикл
			
			Если СтрокаОстатков.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПринятыеТовары = Истина;
			
			Если ТекущееКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ДобавляемоеКоличество = Мин(ТекущееКоличество, СтрокаОстатков.Количество);
			
			ТекущееКоличество = ТекущееКоличество - ДобавляемоеКоличество;
			СтрокаОстатков.Количество = СтрокаОстатков.Количество - ДобавляемоеКоличество;
			СтрокаОстатков.НоменклатураДобавлена = (СтрокаОстатков.Количество = 0);
			
			ДобавляемоеКоличествоУпаковок = ДобавляемоеКоличество / КоэффициентУпаковки;
			
			Если Не ИсходнаяСтрокаОбработана Тогда
				
				ТекСтрока.Серия = СтрокаОстатков.Серия;
				ТекСтрока.Количество = ДобавляемоеКоличество;
				ТекСтрока.КоличествоУпаковок = ДобавляемоеКоличествоУпаковок;
				ИсходнаяСтрокаОбработана = Истина;
				
			Иначе
				
				РаспределяемыеПоСериямСтроки.Добавить(Новый Структура("Строка,Серия,Количество,КоличествоУпаковок",
								ТекСтрока, СтрокаОстатков.Серия, ДобавляемоеКоличество, ДобавляемоеКоличествоУпаковок));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекСтрока.Количество = 0
			Или Не ИсходнаяСтрокаОбработана Тогда
			УдаляемыеСтроки.Вставить(ТекСтрока);
		ИначеЕсли ТекСтрока.Количество <> ИсходноеКоличество Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействийСИзмененнымиСтроками, Неопределено);
		КонецЕсли;
		
		ЕстьИзменения = ЕстьИзменения 
			Или ТекСтрока.Количество <> ИсходноеКоличество
			Или ИсходнаяСерия <> ТекСтрока.Серия;
		
	КонецЦикла;
	
	Для Каждого СтрокаССерией Из РаспределяемыеПоСериямСтроки Цикл
		НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаССерией.Строка)+1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаССерией.Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаССерией); // Серия, Количество, КоличествоУпаковок
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСДобавленнымиСтроками, Неопределено);
	КонецЦикла;
	
	НераспределенныеСтроки = ТаблицаОстатков.НайтиСтроки(Новый Структура("НоменклатураДобавлена", Ложь));
	ЕстьИзменения = ЕстьИзменения
		Или РаспределяемыеПоСериямСтроки.Количество() > 0
		Или УдаляемыеСтроки.Количество() > 0
		Или НераспределенныеСтроки.Количество() > 0;
	
	Для Каждого ТекЭлемент Из УдаляемыеСтроки Цикл
		Товары.Удалить(ТекЭлемент.Ключ);
	КонецЦикла;
	
	ИсключаемыеСвойства = Новый Структура("КодСтроки, ДокументРеализации, ЦенаЗаказа", 0, Неопределено, 0);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия");
	Если Склад = Неопределено Или ТипЗнч(Склад) = Тип("Массив") Тогда
		СтруктураПоиска.Вставить("Склад");
	КонецЕсли;
	Если МассивРаспоряжений <> Неопределено
		И ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
		СтруктураПоиска.Вставить("ЗаказПоставщику");
	КонецЕсли;
	
	Для Каждого СтрокаКДобавлению Из НераспределенныеСтроки Цикл
		
		Если Не СтруктураПоиска.Свойство("Склад")
			И Склад <> СтрокаКДобавлению.Склад Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКДобавлению);
		Если СтруктураПоиска.Свойство("ЗаказПоставщику") Тогда
			СтруктураПоиска.ЗаказПоставщику = СтрокаКДобавлению.Распоряжение;
		КонецЕсли;
		
		СтрокиТоваров = Товары.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТоваров.Количество() = 0 Тогда
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКДобавлению);
			
			
			НоваяСтрока.КоличествоУпаковок = СтрокаКДобавлению.Количество;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСДобавленнымиСтроками, Неопределено);
		Иначе
			СтрокаТоваров = СтрокиТоваров[0];
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Упаковка) Тогда
				Если ВыборкаУпаковок.НайтиСледующий(СтрокаТоваров.Упаковка, "Упаковка") Тогда
					КоэффициентУпаковки = ВыборкаУпаковок.Коэффициент;
				Иначе
					КоэффициентУпаковки = 1;
				КонецЕсли;
				ВыборкаУпаковок.Сбросить();
			Иначе
				КоэффициентУпаковки = 1;
			КонецЕсли;
			
			Если МассивРаспоряжений <> Неопределено И ЗначениеЗаполнено(СтрокаТоваров.КодСтроки) Тогда
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсключаемыеСвойства);
				НоваяСтрока.Количество = СтрокаКДобавлению.Количество;
				НоваяСтрока.КоличествоУпаковок = СтрокаКДобавлению.Количество / КоэффициентУпаковки;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСДобавленнымиСтроками, Неопределено);
			Иначе
				СтрокаТоваров.Количество = СтрокаТоваров.Количество + СтрокаКДобавлению.Количество;
				СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок + СтрокаКДобавлению.Количество / КоэффициентУпаковки;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат ЕстьИзменения;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруУсловийЗакупок()
	
	Возврат Новый Структура("
		|Соглашение,
		|Партнер,
		|Контрагент,
		|Организация,
		|Валюта,
		|ЦенаВключаетНДС,
		|НалогообложениеНДС,
		|Склад,
		|ФормаОплаты,
		|ПорядокОплаты,
		|ГруппаФинансовогоУчета,
		|СтатьяДвиженияДенежныхСредств,
		|СрокПоставки,
		|ХозяйственнаяОперация,
		|ВидЦеныПоставщика,
		|РегистрироватьЦеныПоставщика,
		|ГруппаФинансовогоУчета,
		|СпособРасчетаВознаграждения,
		|ПроцентВознаграждения,
		|УдержатьВознаграждение,
		|ИспользуютсяДоговорыКонтрагентов,
		|ПорядокРасчетов,
		|ВозвращатьМногооборотнуюТару,
		|СрокВозвратаМногооборотнойТары,
		|РассчитыватьДатуВозвратаТарыПоКалендарю,
		|КалендарьВозвратаТары,
		|ТребуетсяЗалогЗаТару,
		|НаправлениеДеятельности
		|");
		
КонецФункции

Функция ТекстЗапросаПроверкаПринимающихсяТоваровПоРаспоряжениям(ТипПоступления)
	
	ТекстЗапросаПоРаспоряжениям = "";
	
	Если ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Склад КАК Склад,
		|	СУММА(ТоварыПоступления.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Соглашение = НЕОПРЕДЕЛЕНО
		|					ИЛИ &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|				ТОГДА ТоварыПоступления.ЗаказПоставщику В (&МассивРаспоряжений)
		|			ИНАЧЕ ТоварыПоступления.Ссылка.Соглашение = &Соглашение
		|		КОНЕЦ
		|	И ТоварыПоступления.Ссылка <> &ДокументПоступления
		|	И ТоварыПоступления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПоступления.Номенклатура,
		|	ТоварыПоступления.Характеристика,
		|	ТоварыПоступления.Серия,
		|	ТоварыПоступления.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.НоменклатураОприходование
		|		ИНАЧЕ Поступление.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.ХарактеристикаОприходование
		|		ИНАЧЕ Поступление.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	Поступление.Серия КАК Серия,
		|	Поступление.Ссылка.Склад КАК Склад,
		|	СУММА(Поступление.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК Поступление
		|ГДЕ
		|	Поступление.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента В(&МассивРаспоряжений)
		|	И Поступление.Ссылка <> &ДокументПоступления
		|	И Поступление.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.НоменклатураОприходование
		|		ИНАЧЕ Поступление.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.ХарактеристикаОприходование
		|		ИНАЧЕ Поступление.Характеристика
		|	КОНЕЦ,
		|	Поступление.Серия,
		|	Поступление.Ссылка.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	ТекстЗапросаПоРаспоряжениям = ТекстЗапросаПоРаспоряжениям + 
	"ВЫБРАТЬ
	|	ТоварыКОформлениюОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлениюОбороты.Характеристика КАК Характеристика,
	|	ТоварыКОформлениюОбороты.Серия КАК Серия,
	|	ТоварыКОформлениюОбороты.Склад КАК Склад,
	|	ТоварыКОформлениюОбороты.КОформлениюПриход КАК Количество
	|ПОМЕСТИТЬ втТоварыКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления.Обороты(
	|			,
	|			,
	|			,
	|			ВЫБОР
	|					КОГДА &Соглашение = НЕОПРЕДЕЛЕНО
	|							ИЛИ &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|							ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
	|						ТОГДА ДокументПоступления В (&МассивРаспоряжений)
	|					ИНАЧЕ ДокументПоступления = &Соглашение
	|				КОНЕЦ
	|				И Склад В (&Склад)) КАК ТоварыКОформлениюОбороты
	|ГДЕ
	|	ТоварыКОформлениюОбороты.КОформлениюПриход > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	втТоварыКОформлению.Характеристика КАК Характеристика,
	|	втТоварыКОформлению.Характеристика КАК Серия,
	|	втТоварыКОформлению.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА втТоварыКОформлению.Количество > ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0)
	|			ТОГДА втТоварыКОформлению.Количество - ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ втНеоформленныеТовары
	|ИЗ
	|	втТоварыКОформлению КАК втТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПоступления КАК втТоварыПоступления
	|		ПО втТоварыКОформлению.Номенклатура = втТоварыПоступления.Номенклатура
	|			И втТоварыКОформлению.Характеристика = втТоварыПоступления.Характеристика
	|			И втТоварыКОформлению.Серия = втТоварыПоступления.Серия
	|			И втТоварыКОформлению.Склад = втТоварыПоступления.Склад
	|ГДЕ
	|	втТоварыКОформлению.Количество - ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(НеоформленныеТовары.Количество), 0) КАК Количество
	|ИЗ
	|	втНеоформленныеТовары КАК НеоформленныеТовары";
	
	Возврат ТекстЗапросаПоРаспоряжениям;
	
КонецФункции

Функция ТекстЗапросаПроверкаПринимающихсяТоваровПоНакладной()
	
	ТекстЗапросаПоНакладной = 
	"ВЫБРАТЬ
	|	ТоварыКОформлениюПоступленияОбороты.КОформлениюПриход КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления.Обороты(
	|			,
	|			,
	|			,
	|			ВЫБОР
	|				КОГДА &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|						ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
	|					ТОГДА ДокументПоступления = &ДокументПоступления
	|				ИНАЧЕ ДокументПоступления = &Соглашение
	|			КОНЕЦ
	|			И Склад В (&Склад)) КАК ТоварыКОформлениюПоступленияОбороты";
		
	Возврат ТекстЗапросаПоНакладной;
	
КонецФункции

Функция ТекстЗапросаПоРаспоряжениям(ТипПоступления)
	
	ТекстЗапросаПоРаспоряжениям = "";
	
	Если ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|				ТОГДА ТоварыПоступления.ЗаказПоставщику
		|			ИНАЧЕ ТоварыПоступления.Ссылка.Соглашение
		|		КОНЕЦ КАК Распоряжение,
		|	ТоварыПоступления.Номенклатура КАК Номенклатура,
		|	ТоварыПоступления.Характеристика КАК Характеристика,
		|	ТоварыПоступления.Серия КАК Серия,
		|	ТоварыПоступления.Склад КАК Склад,
		|	СУММА(ТоварыПоступления.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТоварыПоступления
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|				ТОГДА ТоварыПоступления.ЗаказПоставщику В (&МассивРаспоряжений)
		|			ИНАЧЕ ТоварыПоступления.Ссылка.Соглашение = &Соглашение
		|		КОНЕЦ
		|	И ТоварыПоступления.Ссылка <> &Ссылка
		|	И ТоварыПоступления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|				ТОГДА ТоварыПоступления.ЗаказПоставщику
		|			ИНАЧЕ ТоварыПоступления.Ссылка.Соглашение
		|		КОНЕЦ,
		|	ТоварыПоступления.Номенклатура,
		|	ТоварыПоступления.Характеристика,
		|	ТоварыПоступления.Серия,
		|	ТоварыПоступления.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ТекстЗапросаПоРаспоряжениям = 
		"ВЫБРАТЬ
		|	Поступление.Ссылка КАК Распоряжение,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.НоменклатураОприходование
		|		ИНАЧЕ Поступление.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.ХарактеристикаОприходование
		|		ИНАЧЕ Поступление.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	Поступление.Серия КАК Серия,
		|	Поступление.Ссылка.Склад КАК Склад,
		|	СУММА(Поступление.Количество) КАК КоличествоПоступления
		|ПОМЕСТИТЬ втТоварыПоступления
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК Поступление
		|ГДЕ
		|	Поступление.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента В(&МассивРаспоряжений)
		|	И Поступление.Ссылка <> &Ссылка
		|	И Поступление.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Поступление.Ссылка,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.НоменклатураОприходование
		|		ИНАЧЕ Поступление.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Поступление.Порча
		|			ТОГДА Поступление.ХарактеристикаОприходование
		|		ИНАЧЕ Поступление.Характеристика
		|	КОНЕЦ,
		|	Поступление.Серия,
		|	Поступление.Ссылка.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	ТекстЗапросаПоРаспоряжениям = ТекстЗапросаПоРаспоряжениям +
	"ВЫБРАТЬ
	|	ТоварыКОформлениюПоступленияОбороты.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлениюПоступленияОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлениюПоступленияОбороты.Характеристика КАК Характеристика,
	|	ТоварыКОформлениюПоступленияОбороты.Серия КАК Серия,
	|	ТоварыКОформлениюПоступленияОбороты.Склад КАК Склад,
	|	ТоварыКОформлениюПоступленияОбороты.КОформлениюПриход КАК Количество
	|ПОМЕСТИТЬ втТоварыКОформлениюПоступления
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления.Обороты(
	|			,
	|			,
	|			,
	|			ВЫБОР
	|				КОГДА &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|						ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
	|					ТОГДА ДокументПоступления В (&МассивРаспоряжений)
	|				ИНАЧЕ ДокументПоступления = &Соглашение
	|			КОНЕЦ
	|			И Склад В (&Склад)) КАК ТоварыКОформлениюПоступленияОбороты
	|ГДЕ
	|	ТоварыКОформлениюПоступленияОбороты.КОформлениюПриход > 0
	|
	|;
	|
	|ВЫБРАТЬ
	|	втТоварыКОформлениюПоступления.ДокументПоступления КАК Распоряжение,
	|	втТоварыКОформлениюПоступления.Номенклатура КАК Номенклатура,
	|	втТоварыКОформлениюПоступления.Характеристика КАК Характеристика,
	|	втТоварыКОформлениюПоступления.Серия КАК Серия,
	|	втТоварыКОформлениюПоступления.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА втТоварыКОформлениюПоступления.Количество > ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0)
	|			ТОГДА втТоварыКОформлениюПоступления.Количество - ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ЛОЖЬ КАК НоменклатураДобавлена
	|ИЗ
	|	втТоварыКОформлениюПоступления КАК втТоварыКОформлениюПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПоступления КАК втТоварыПоступления
	|			ПО втТоварыКОформлениюПоступления.ДокументПоступления = втТоварыПоступления.Распоряжение
	|			И втТоварыКОформлениюПоступления.Номенклатура = втТоварыПоступления.Номенклатура
	|			И втТоварыКОформлениюПоступления.Характеристика = втТоварыПоступления.Характеристика
	|			И втТоварыКОформлениюПоступления.Серия = втТоварыПоступления.Серия
	|			И втТоварыКОформлениюПоступления.Склад = втТоварыПоступления.Склад
	|ГДЕ
	|	втТоварыКОформлениюПоступления.Количество  - ЕСТЬNULL(втТоварыПоступления.КоличествоПоступления, 0) > 0
	|	И втТоварыКОформлениюПоступления.Склад В(&Склад)
	|
	|;
	|
	|ВЫБРАТЬ
	|	Товары.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Склад КАК Склад,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Упаковка КАК Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Склад КАК Склад
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	ИЛИ &Дата < Склад.ДатаНачалаОрдернойСхемыПриПоступлении";
	
	ТекстЗапросаПоРаспоряжениям = СтрЗаменить(ТекстЗапросаПоРаспоряжениям, 
		"&ТекстЗапросаКоэффициентУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Товары.Упаковка", "Товары.Номенклатура"));
	
	Возврат ТекстЗапросаПоРаспоряжениям;
	
КонецФункции

Функция ТекстЗапросаПоНакладнойИлиСоглашению()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаОстатков.Номенклатура,
		|	ТаблицаОстатков.Характеристика,
		|	ТаблицаОстатков.Серия,
		|	ТаблицаОстатков.Склад,
		|	СУММА(ТаблицаОстатков.Количество) КАК Количество,
		|	ЛОЖЬ КАК НоменклатураДобавлена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКОформлениюПоступленияОстатки.Номенклатура КАК Номенклатура,
		|		ТоварыКОформлениюПоступленияОстатки.Характеристика КАК Характеристика,
		|		ТоварыКОформлениюПоступленияОстатки.Серия КАК  Серия,
		|		ТоварыКОформлениюПоступленияОстатки.Склад КАК Склад,
		|		ТоварыКОформлениюПоступленияОстатки.КОформлениюОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыКОформлениюПоступления.Остатки(
		|				,
		|				ВЫБОР
		|					КОГДА &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|							ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|						ТОГДА ДокументПоступления = &Ссылка
		|					ИНАЧЕ ДокументПоступления = &Соглашение
		|				КОНЕЦ) КАК ТоварыКОформлениюПоступленияОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКОформлениюПоступления.Номенклатура,
		|		ТоварыКОформлениюПоступления.Характеристика,
		|		ТоварыКОформлениюПоступления.Серия,
		|		ТоварыКОформлениюПоступления.Склад,
		|		ТоварыКОформлениюПоступления.КОформлению
		|	ИЗ
		|		РегистрНакопления.ТоварыКОформлениюПоступления КАК ТоварыКОформлениюПоступления
		|	ГДЕ
		|		ТоварыКОформлениюПоступления.Регистратор = &Ссылка) КАК ТаблицаОстатков
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатков.Номенклатура,
		|	ТаблицаОстатков.Характеристика,
		|	ТаблицаОстатков.Серия,
		|	ТаблицаОстатков.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаОстатков.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Склад КАК Склад,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	НЕ ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Упаковка КАК Упаковка,
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель /
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель КАК Коэффициент
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Склад КАК Склад
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	(НЕ ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
		|			ИЛИ &Дата < ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении)";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СкорректироватьСписокВыбораХозяйственнойОперацииПоступления(Форма) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьУправленческуюОрганизацию") Тогда
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьИмпортныеЗакупки") Тогда
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыФормированияВременныхТаблиц

// Формирует запрос к шапке документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументЗакупки  - ДокументОбъект, который необходимо проверить
//
Процедура СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса,
	                                                              ПараметрыЗапроса,
	                                                              Знач ДокументЗакупки)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументЗакупки.Партнер                                 КАК Партнер,
		|	ДокументЗакупки.Контрагент                              КАК Контрагент,
		|	ДокументЗакупки.Валюта                                  КАК Валюта,
		|	ДокументЗакупки.ВалютаВзаиморасчетов                    КАК ВалютаВзаиморасчетов,
		|	ДокументЗакупки.ЦенаВключаетНДС                         КАК ЦенаВключаетНДС,
		|	ДокументЗакупки.ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
		|	ДокументЗакупки.Соглашение                              КАК Соглашение,
		|	ДокументЗакупки.Дата                                    КАК Дата,
		|	ДокументЗакупки.ЖелаемаяДатаПоступления                 КАК ЖелаемаяДатаПоступления,
		|	ДокументЗакупки.Организация                             КАК Организация,
		|	ДокументЗакупки.Склад                                   КАК Склад,
		|	ДокументЗакупки.ФормаОплаты                             КАК ФормаОплаты,
		|	ДокументЗакупки.СуммаДокумента                          КАК СуммаДокумента,
		|	ДокументЗакупки.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ДокументЗакупки.КалендарьВозвратаТары                   КАК КалендарьВозвратаТары,
		|	ДокументЗакупки.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаДокументЗакупки
		|ИЗ
		|	&ДокументЗакупки КАК ДокументЗакупки
		|;
		|";
	
	// Сформируем необходимые колонки таблицы шапки документа закупки
	
	ТипВалюта   = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ТипДата     = Новый ОписаниеТипов("Дата");
	ТипБулево   = Новый ОписаниеТипов("Булево");
	ТипЧисло    = Новый ОписаниеТипов("Число");
	
	ТаблицаДокумента = Новый ТаблицаЗначений();
	
	ТаблицаДокумента.Колонки.Добавить("Партнер",                              Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаДокумента.Колонки.Добавить("Контрагент",                           Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДокумента.Колонки.Добавить("Валюта",                               ТипВалюта);
	ТаблицаДокумента.Колонки.Добавить("ВалютаВзаиморасчетов",                 ТипВалюта);
	ТаблицаДокумента.Колонки.Добавить("ЦенаВключаетНДС",                      ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("Дата",                                 ТипДата);
	ТаблицаДокумента.Колонки.Добавить("ЖелаемаяДатаПоступления",              ТипДата);
	ТаблицаДокумента.Колонки.Добавить("Организация",                          Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДокумента.Колонки.Добавить("Склад",                                Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДокумента.Колонки.Добавить("ФормаОплаты",                          Новый ОписаниеТипов("ПеречислениеСсылка.ФормыОплаты"));
	ТаблицаДокумента.Колонки.Добавить("СуммаДокумента",                       Новый ОписаниеТипов("Число"));
	ТаблицаДокумента.Колонки.Добавить("Соглашение",                           Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	ТаблицаДокумента.Колонки.Добавить("ХозяйственнаяОперация",                Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ТаблицаДокумента.Колонки.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю", ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("КалендарьВозвратаТары",                Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	ТаблицаДокумента.Колонки.Добавить("СрокВозвратаМногооборотнойТары",       ТипЧисло);
	
	// Добавим строку и заполним значениями из шапки документа
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументЗакупки);
	
	ПараметрыЗапроса.Вставить("ДокументЗакупки", ТаблицаДокумента);

КонецПроцедуры

// Формирует запрос к тч Товары документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса           -Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса       - Структура - структура, содержащая параметры запроса
// ДокументЗакупки        - ДокументОбъект, который необходимо проверить
// ИмяТаблицы             - Строка - имя таблицы, к которой будет сформирован запрос
//
Процедура СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса,
	                                                               ПараметрыЗапроса,
	                                                               ДокументЗакупки,
	                                                               ИмяТаблицы)
	
	ПредставлениеТабличнойЧасти = НСтр("ru='Товары';uk='Товари'");
	ИмяТабличнойЧасти = "Товары";
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.ВидЦеныПоставщика      КАК ВидЦеныПоставщика,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.СтатьяРасходов         КАК СтатьяРасходов,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.ПроцентРучнойСкидки    КАК ПроцентРучнойСкидки,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Отменено               КАК Отменено,
			|	Товары.ДатаПоступления        КАК ДатаПоступления,
			|	Товары.Цена - Товары.Цена * Товары.ПроцентРучнойСкидки / 100 КАК ЦенаСоСкидкой
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика,
			|Цена,
			|Сумма,
			|ВидЦеныПоставщика,
			|Упаковка,
			|СтатьяРасходов,
			|СтавкаНДС,
			|ПроцентРучнойСкидки,
			|Склад,
			|Отменено,
			|ДатаПоступления";
		
	ИначеЕсли ИмяТаблицы = "Документ.ПоступлениеТоваровУслуг" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.ВидЦеныПоставщика      КАК ВидЦеныПоставщика,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.СтатьяРасходов         КАК СтатьяРасходов,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.ПроцентРучнойСкидки    КАК ПроцентРучнойСкидки,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Цена - Товары.Цена * Товары.ПроцентРучнойСкидки / 100 КАК ЦенаСоСкидкой
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика,
			|Цена,
			|Сумма,
			|ВидЦеныПоставщика,
			|Упаковка,
			|СтатьяРасходов,
			|СтавкаНДС,
			|ПроцентРучнойСкидки,
			|Склад";
			
	ИначеЕсли ИмяТаблицы = "Документ.ПередачаТоваровМеждуОрганизациями" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.Номенклатура           КАК Номенклатура
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
		|Номенклатура";
			
			
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Склад                  КАК Склад
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика,
			|Склад";
			
		
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьВыданная" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика";
			
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика";
		
	ИначеЕсли ИмяТаблицы = "Документ.КорректировкаПоступления" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.СтатьяРасходов         КАК СтатьяРасходов,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.Склад                  КАК Склад
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика,
			|Цена,
			|Сумма,
			|Упаковка,
			|СтатьяРасходов,
			|СтавкаНДС,
			|Склад";
		
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровПоставщику" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	&ПредставлениеТабличнойЧасти  КАК ПредставлениеТабличнойЧасти,
			|	&ИмяТабличнойЧасти            КАК ИмяТабличнойЧасти,
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.Сумма                  КАК Сумма
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма";
			
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Товары", ДокументЗакупки[ИмяТабличнойЧасти].Выгрузить(,ИменаКолонок));
	ПараметрыЗапроса.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ПараметрыЗапроса.Вставить("ПредставлениеТабличнойЧасти", ПредставлениеТабличнойЧасти);
	
КонецПроцедуры

// Формирует запрос к курсам валют на дату документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс      КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаКурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|";

КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты документа и помещает во временную таблицу
//
// Параметры:
//		ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
//		ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
//		ДокументЗакупки  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
//		ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
//		ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ПоСсылке = Ложь, ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|" + ИмяТаблицы + ".ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументЗакупки
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ПараметрыЗапроса.Вставить("ДокументЗакупки", ДокументЗакупки);
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
	
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты.Выгрузить(, "НомерСтроки,ДатаПлатежа,ВариантОплаты,ПроцентПлатежа"));
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос по элементам справочника "Склады" и помещает во временную таблицу
// К корректным складам относятся:
// 		- Склад, равный складу соглашения из временной таблицы по документу
// 		- Склады, входящие в иерархию склада соглашения из временной таблицы по документу
//
Процедура СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ СкладыКорректныеПоСоглашению
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокумента
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	ВременнаяТаблицаДокумента.Соглашение.Склад ЕСТЬ НЕ NULL
	|	И ВременнаяТаблицаДокумента.Соглашение.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И Склады.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаДокумента.Соглашение.Склад
	|			ИЗ
	|				ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокумента)
	|;
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиКорректностиЗаполненияДокументов

// Формирует текст запроса для проверки тч Товары на наличие дублей номенклатуры поставщика
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияНоменклатурыПоставщика(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВложенныйЗапросПоДублям.НомерСтроки)         КАК НомерСтроки,
		|	ВложенныйЗапросПоДублям.НоменклатураПоставщика        КАК НоменклатураПоставщика
		|ИЗ (
		|	ВЫБРАТЬ
		|		МАКСИМУМ(ДокументТовары.НомерСтроки)              КАК НомерСтроки,
		|		ДокументТовары.НоменклатураПоставщика             КАК НоменклатураПоставщика,
		|		ДокументТовары.Номенклатура                       КАК Номенклатура,
		|		ДокументТовары.Характеристика                     КАК Характеристика
		|	ИЗ
		|		ВременнаяТаблицаТовары КАК ДокументТовары
		|	ГДЕ
		|		ДокументТовары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка)
		|		И ДокументТовары.НоменклатураПоставщика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	СГРУППИРОВАТЬ ПО
		|		ДокументТовары.НоменклатураПоставщика,
		|		ДокументТовары.Номенклатура,
		|		ДокументТовары.Характеристика
		|) КАК ВложенныйЗапросПоДублям
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапросПоДублям.НоменклатураПоставщика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(*) > 1
		|;
		|";
		
КонецПроцедуры

// Формирует текст запроса для проверки наличия услуг в документе закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеУслугВДокументеЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности аналитик услуг для услуг в документе закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияАналитикиУслуг(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И ДокументТовары.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности склада
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОшибкиЗаполненияСклад
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаДокументЗакупки.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности реквизита "Склад" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа товар;
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТоварыБезСкладаВШапке(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
		|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности реквизита "Склад" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа товар;
// 		- в шапке документа заполнен реквизит "Склад".
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
		|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументЗакупки.Склад.ЭтоГруппа
		|	И ВременнаяТаблицаДокументЗакупки.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует проверки для контроля завершения поступления по заказу
// и для контроля завершения расчетов по заказу
//
// Параметры:
// КонтролируемыйЗаказ - ДокументСсылка.ЗаказПоставщику - контролируемый документ.
// Отказ - Булево - параметр Отказ.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(КонтролируемыйЗаказ, Отказ) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|			ЗаказПоставщику = &Ссылка
		|			И ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			И ЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|	) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	&КонтролироватьПоступление
		|	И &ИспользоватьСтатусы
		|	И (ЗаказыПоставщикамОстатки.ЗаказаноОстаток > 0 
		|		ИЛИ ЗаказыПоставщикамОстатки.КОформлениюОстаток > 0);
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Валюта КАК Валюта,
		|	-1*(РасчетыСПоставщикамиОстатки.КОплатеОстаток) КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|			ЗаказПоставщику = &Ссылка
		|			И ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			И ЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И ЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И &ИспользоватьСтатусы
		|	И РасчетыСПоставщикамиОстатки.КОплатеОстаток < 0
		|");
		
	КонтролироватьПоступление = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
	КонтролироватьРасчеты     = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
	ИспользоватьСтатусы       = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	
	Запрос.УстановитьПараметр("Ссылка",                    КонтролируемыйЗаказ);
	Запрос.УстановитьПараметр("КонтролироватьПоступление", КонтролироватьПоступление);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты",     КонтролироватьРасчеты);
	Запрос.УстановитьПараметр("ИспользоватьСтатусы",       ИспользоватьСтатусы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоступление = Результат[0].Выбрать();
	ВыборкаРасчеты  = Результат[1].Выбрать();
	
	Если ВыборкаПоступление.Следующий() Тогда 
		Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ТекстОшибки = НСтр("ru='Документ ""%Заказ%"" поступил не полностью.
            |Закрытие заказа возможно только с полностью поступившими/отмененными строками'
            |;uk='Документ ""%Заказ%"" надійшов не повністю.
            |Закриття замовлення можливе тільки з повністю надійшовшими/скасованими рядками'");
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заказ%", КонтролируемыйЗаказ);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			КонтролируемыйЗаказ,
			,
			,
			Отказ);
	КонецЕсли;
	
	Если ВыборкаРасчеты.Следующий() Тогда 
		Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ТекстОшибки = НСтр("ru='Расчеты по документу ""%Заказ%"" не завершены.
            |Для закрытия заказа требуется оплата %СуммаКОплате% %Валюта%.
            |Закрытие заказа возможно только с полностью оплаченными/отмененными строками'
            |;uk='Розрахунки за документом ""%Заказ%"" не завершені.
            |Для закриття замовлення вимагається оплата %СуммаКОплате% %Валюта%.
            |Закриття замовлення можливе тільки з повністю сплаченими/скасованими рядками'");
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заказ%",        КонтролируемыйЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаКОплате%", Строка(ВыборкаРасчеты.КОплатеОстаток));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",       Строка(ВыборкаРасчеты.Валюта));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			КонтролируемыйЗаказ,
			,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Формирует тескт запроса для контроля завершения поступления по заказу
// и для контроля завершения расчетов по заказу
//
//	Возвращаемое значение:
//		Строка
//
Функция ТекстЗапросаКонтрольЗаказаПослеПроведения() Экспорт
	
	Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрольЗакрытия.ЗаказПоставщику КАК ЗаказПоставщику
		|ПОМЕСТИТЬ
		|	ВтОстаткиПоЗаказам
		|ИЗ (ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|			ЗаказПоставщику В (&МассивДокументов)
		|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			И ЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|	) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	&КонтролироватьПоступление
		|	И &ИспользоватьСтатусы
		|	И (ЗаказыПоставщикамОстатки.ЗаказаноОстаток > 0 
		|		ИЛИ ЗаказыПоставщикамОстатки.КОформлениюОстаток > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|			ЗаказПоставщику В (&МассивДокументов)
		|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			И ЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И ЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И &ИспользоватьСтатусы
		|	И РасчетыСПоставщикамиОстатки.КОплатеОстаток < 0) КАК КонтрольЗакрытия
		|;"
	
КонецФункции

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиСоответствияДокументовУсловиямЗакупки

// Формирует текст запроса для проверки шапки документа закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Партнер ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.Партнер <> СоглашениеСПоставщиком.Партнер
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПартнер,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Контрагент ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И
		|			ДокументЗакупки.Контрагент <> СоглашениеСПоставщиком.Контрагент
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКонтрагент,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Организация ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И
		|			ДокументЗакупки.Организация <> СоглашениеСПоставщиком.Организация
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОрганизация,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ФормаОплаты ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) И
		|			ДокументЗакупки.ФормаОплаты <> СоглашениеСПоставщиком.ФормаОплаты
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормаОплаты,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Валюта ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.Валюта <> СоглашениеСПоставщиком.Валюта
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалюта,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару <> &ВозвратМногооборотнойТары
		|		ТОГДА 
		|			ИСТИНА
		|		ИНАЧЕ 
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару,
		|" + ?(ИмяТаблицы <> "Документ.ПоступлениеТоваровУслуг","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ВЫБОР
		|		КОГДА ДокументЗакупки.СрокВозвратаМногооборотнойТары <> СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|","
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Валюта ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.ВалютаВзаиморасчетов <> СоглашениеСПоставщиком.Валюта
		|			И ДокументЗакупки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И ДокументЗакупки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ИСТИНА КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|") + "
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ЦенаВключаетНДС ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.ЦенаВключаетНДС <> СоглашениеСПоставщиком.ЦенаВключаетНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСПоставщиком.ХозяйственнаяОперация ЕСТЬ NULL
		|			И НЕ ДокументЗакупки.ХозяйственнаяОперация ЕСТЬ NULL
		|			И ДокументЗакупки.ХозяйственнаяОперация <> СоглашениеСПоставщиком.ХозяйственнаяОперация
		|			И ДокументЗакупки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			ДокументЗакупки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
		|			И СоглашениеСПоставщиком.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|			И НЕ СоглашениеСПоставщиком.ХозяйственнаяОперация ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|	ЕСТЬNULL(СоглашениеСПоставщиком.Склад.ЭтоГруппа, ЛОЖЬ) КАК СкладСоглашениеЕстьГруппа,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Склад ЕСТЬ НЕ NULL
		|			И СоглашениеСПоставщиком.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И СкладыКорректныеПоСоглашению.Склад ЕСТЬ NULL
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСклад,
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСПоставщиками","
		|	ИСТИНА КАК ЭтоСоглашение,
		|","
		|	ЛОЖЬ КАК ЭтоСоглашение,
		|") + "
		|	&ВозвратМногооборотнойТары                      КАК ВозвратМногооборотнойТары,
		|	ДокументЗакупки.Партнер                         КАК Партнер,
		|	ДокументЗакупки.Контрагент                      КАК Контрагент,
		|	ДокументЗакупки.Организация                     КАК Организация,
		|	ДокументЗакупки.ФормаОплаты                     КАК ФормаОплаты,
		|	ДокументЗакупки.Соглашение                      КАК Соглашение,
		|	ДокументЗакупки.Валюта                          КАК Валюта,
		|	ДокументЗакупки.Склад                           КАК Склад,
		|	ДокументЗакупки.ЦенаВключаетНДС                 КАК ЦенаВключаетНДС,
		|	СоглашениеСПоставщиком.Партнер                  КАК ПартнерСоглашение,
		|	СоглашениеСПоставщиком.Контрагент               КАК КонтрагентСоглашение,
		|	СоглашениеСПоставщиком.Организация              КАК ОрганизацияСоглашение,
		|	СоглашениеСПоставщиком.ФормаОплаты              КАК ФормаОплатыСоглашение,
		|	СоглашениеСПоставщиком.Валюта                   КАК ВалютаСоглашение,
		|	СоглашениеСПоставщиком.ДатаНачалаДействия       КАК ДатаНачалаДействияСоглашение,
		|	СоглашениеСПоставщиком.ДатаОкончанияДействия    КАК ДатаОкончанияДействияСоглашение,
		|	СоглашениеСПоставщиком.Склад                    КАК СкладСоглашение,
		|	СоглашениеСПоставщиком.ЦенаВключаетНДС          КАК ЦенаВключаетНДССоглашение,
		|	СоглашениеСПоставщиком.ХозяйственнаяОперация    КАК ХозяйственнаяОперацияСоглашение,
		|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	СоглашениеСПоставщиком.КалендарьВозвратаТары    КАК КалендарьВозвратаТары
		|ИЗ
		|	ВременнаяТаблицаДокументЗакупки                 КАК ДокументЗакупки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
		|ПО 
		|	ДокументЗакупки.Соглашение = СоглашениеСПоставщиком.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	СкладыКорректныеПоСоглашению КАК СкладыКорректныеПоСоглашению
		|ПО 
		|	ДокументЗакупки.Склад = СкладыКорректныеПоСоглашению.Склад
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки тч Товары документа закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                   КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                  КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика                КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                    КАК ВалютаЦены,
		|	ВложенныйЗапрос.ЕстьОшибкиЗаполненияСтавкаНДС КАК ЕстьОшибкиЗаполненияСтавкаНДС,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена     КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			ВложенныйЗапрос.КонтролироватьЦеныЗакупки
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки            КАК НомерСтроки,
		|	ВременнаяТаблицаДокументЗакупки.Валюта        КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
		|	ВременнаяТаблицаТовары.Цена                   КАК Цена,
		|	ВременнаяТаблицаТовары.СтавкаНДС              КАК СтавкаНДС,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСтавкаНДС,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиковСрезПоследних.Цена ЕСТЬ НЕ NULL
		|			И СоглашениеШапка.КонтролироватьЦеныЗакупки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК КонтролироватьЦеныЗакупки,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиковСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			0
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(
		|			ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки1
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ЦеныНоменклатурыПоставщиковСрезПоследних.Цена/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|			* ВЫБОР
		|				КОГДА ВременнаяТаблицаДокументЗакупки.Валюта <> ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА
		|								(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
		|								/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК МаксимальноДопустимаяЦена
		|ИЗ
		| ВременнаяТаблицаТовары
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеШапка
		|ПО
		|	ВременнаяТаблицаДокументЗакупки.Соглашение = СоглашениеШапка.Ссылка
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦеныПоставщика В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументЗакупки.Соглашение.ВидЦеныПоставщика
		|				ИЗ
		|					ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки) И
		|				(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаТовары.Номенклатура,
		|					ВременнаяТаблицаТовары.Характеристика
		|				ИЗ
		|					ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)
		|) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
		|ПО
		|	ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура
		|	И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыПоставщиковСрезПоследних.Характеристика
		|	И ВременнаяТаблицаТовары.ВидЦеныПоставщика = ЦеныНоменклатурыПоставщиковСрезПоследних.ВидЦеныПоставщика
		|	И СоглашениеШапка.КонтролироватьЦеныЗакупки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютыЦены
		|ПО 
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
		|				Валюта В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументЗакупки.Валюта
		|				ИЗ
		|					ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки)
		|) КАК КурсыВалюты
		|	По Истина
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
		"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
		
КонецПроцедуры

// Формирует текст запроса для проверки вхождения цен документа закупки в допустимый диапазон
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументЗакупки  - ДокументОбъект, который необходимо проверить
//
Процедура СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса)
		
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                 КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика              КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                  КАК ВалютаЦены,
		|	ВложенныйЗапрос.Цена                        КАК Цена,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена   КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МаксимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                       КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаДокументЗакупки.Валюта      КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.ЦенаСоСкидкой        КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МаксимальнаяЦенаОтсутствует,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументЗакупки.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.Курс, 0) > 0
		|						ТОГДА
		|							(КурсыВалютыМаксимальнойЦены.Курс * КурсыВалютыЦены.Кратность)
		|							/ (КурсыВалютыЦены.Курс * КурсыВалютыМаксимальнойЦены.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КАК МаксимальноДопустимаяЦена
		|
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|		ПО
		|			ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
		|		ПО
		|			ВременнаяТаблицаДокументЗакупки.Валюта = КурсыВалютыЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|// СОЕДИНЕНИЯ С МАКСИМАЛЬНО ДОПУСТИМЫМИ ЦЕНАМИ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦены В (
		|					ВЫБРАТЬ
		|						Константы.ВидМаксимальноДопустимыхЦенЗакупки КАК ВидЦены
		|					ИЗ
		|						Константы КАК Константы
		|					)
		|				И (Номенклатура,Характеристика) В (
		|					ВЫБРАТЬ
		|						Товары.Номенклатура,
		|						Товары.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Товары
		|					)
		|			) КАК МаксимальныеЦеныНоменклатурыСрезПоследних
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = МаксимальныеЦеныНоменклатурыСрезПоследних.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМаксимальнойЦены
		|		ПО
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМаксимальнойЦены.Валюта
		|
		|ГДЕ
		|	ВременнаяТаблицаТовары.Цена > 0
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Упаковка",
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
КонецПроцедуры

// Формирует текст запроса для проверки допустимости ручных скидок и наценок
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки               КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.ПроцентРучнойСкидки < 0
		|			И -ВременнаяТаблицаТовары.ПроцентРучнойСкидки > СоглашениеСПоставщиком.ПроцентРучнойНаценки
		|			И СоглашениеСПоставщиком.Ссылка.КонтролироватьЦеныЗакупки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияРучнойНаценки,
		|	СоглашениеСПоставщиком.ПроцентРучнойСкидки       КАК МаксимальнаяСуммаРучнойСкидки,
		|	СоглашениеСПоставщиком.ПроцентРучнойНаценки      КАК МаксимальнаяСуммаРучнойНаценки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
		|ПО
		|	ВременнаяТаблицаДокументЗакупки.Соглашение = СоглашениеСПоставщиком.Ссылка
		|ГДЕ
		|	ВременнаяТаблицаТовары.ПроцентРучнойСкидки <> 0
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов графика оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаДокументЗакупки.СуммаДокумента = 0
		|			ИЛИ ВременнаяТаблицаДокументЗакупки.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
		|	ВЫБОР
		|		КОГДА
		|			ЭтапыШаблона.НомерСтроки ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                               КАК ЭтапШаблонаОтсутствует,
		|	ЭтапыДокумента.НомерСтроки          КАК НомерСтроки,
		|	ЭтапыДокумента.ВариантОплаты        КАК ВариантОплаты,
		|	ЭтапыДокумента.ДатаПлатежа          КАК ДатаПлатежа,
		|	ЭтапыДокумента.ПроцентПлатежа       КАК ПроцентПлатежа,
		|	ЭтапыШаблона.НомерСтроки            КАК НомерСтрокиШаблона,
		|	ЭтапыШаблона.ВариантОплаты          КАК ВариантОплатыШаблона,
		|	ЭтапыШаблона.ПроцентПлатежа         КАК ПроцентПлатежаШаблона,
		|	ЭтапыШаблона.Сдвиг                  КАК Сдвиг,
		|	ЭтапыШаблона.Ссылка.Календарь       КАК Календарь,
		|	ВременнаяТаблицаДокументЗакупки.Дата                 КАК Дата,
		|	ВременнаяТаблицаДокументЗакупки.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
		|	ВЫБОР
		|		КОГДА
		|			ЭтапыШаблона.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаДокументЗакупки.ЖелаемаяДатаПоступления = ДАТАВРЕМЯ(1,1,1)
		|				ТОГДА
		|					НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументЗакупки.Дата,День,ЭтапыШаблона.Сдвиг),День)
		|				ИНАЧЕ
		|					НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументЗакупки.ЖелаемаяДатаПоступления,День,ЭтапыШаблона.Сдвиг),День)
		|			КОНЕЦ
		|		ИНАЧЕ
		|			НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументЗакупки.Дата,День,ЭтапыШаблона.Сдвиг),День)
		|	КОНЕЦ КАК ДатаПлатежаШаблона,
		|	ВЫБОР
		|		КОГДА
		|			ЭтапыДокумента.ВариантОплаты <> ЭтапыШаблона.ВариантОплаты
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты,
		|	ВЫБОР
		|		КОГДА
		|			ЭтапыДокумента.ПроцентПлатежа > ЭтапыШаблона.ПроцентПлатежа
		|			И ЭтапыШаблона.ПроцентПлатежа ЕСТЬ НЕ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПроцентаПлатежа
		|ИЗ
		|	ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК ЭтапыШаблона
		|
		|ПО
		|	ВременнаяТаблицаДокументЗакупки.Соглашение = ЭтапыШаблона.Ссылка
		|	И ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки корректности количества авансовых этапов оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповШаблона)
	|				И МАКСИМУМ(ВложенныйЗапрос.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
	|	СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) КАК КоличествоЭтаповДокумента,
	|	СУММА(ВложенныйЗапрос.КоличествоЭтаповШаблона) КАК КоличествоЭтаповШаблона
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыДокумента.НомерСтроки) КАК КоличествоЭтаповДокумента,
	|		NULL КАК КоличествоЭтаповШаблона,
	|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
	|	ИЗ
	|		ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки),
	|		NULL
	|	ИЗ
	|		Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК ГрафикиОплатыЭтапы
	|	ГДЕ
	|		ГрафикиОплатыЭтапы.Ссылка В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаДокументЗакупки.Соглашение КАК Соглашение
	|				ИЗ
	|					ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаДокументЗакупки.СуммаДокумента = 0
	|					ИЛИ ВременнаяТаблицаДокументЗакупки.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	ИЗ
	|		ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки) КАК ВложенныйЗапрос
	|;";
		
КонецПроцедуры


// Формирует текст запроса для проверки заполнения цен в документе, позволяя нулевые цены в отмененных строках
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗаполненияЦенСУчетомОтмененных(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Сумма = 0
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|					ИЛИ ВременнаяТаблицаТовары.Отменено ТОГДА
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСумм,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|					ИЛИ ВременнаяТаблицаТовары.Отменено ТОГДА
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры

// Формирует текст запроса для проверки заполнения цен в документе
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Сумма = 0
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСумм,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры

// Формирует текст запроса для проверки организации распоряжений
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросСоответствиеОрганизацииРаспоряжений(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти,
		|	ВременнаяТаблицаТовары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументЗакупки.Организация <> ВременнаяТаблицаТовары.Распоряжение.Организация
		|;
		|";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПроверкиКорректностиДокументов

// Выводит сообщения об ошибках в шапке документа закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений условий продаж по шапке документа
//
Процедура СообщитьОбОшибкахШапкаДокументаЗакупки(Выборка,
	                                             ДокументЗакупки,
	                                             Отказ,
	                                             МассивОтклонений = Неопределено)
	
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЕстьОшибкиЗаполненияПартнер Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Партнер не должен отличаться от значения в соглашении ""%ПартнерСоглашение%""';uk='Партнер не повинен відрізнятися від значення в оферті ""%ПартнерСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Партнер",
					,
					Отказ);
			Иначе
				
				ТекстОшибки = НСтр("ru='""%ПартнерДокумент%"" отличается от партнера в соглашении ""%ПартнерСоглашение%""';uk='""%ПартнерДокумент%"" відрізняється від партнера в оферті ""%ПартнерСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерДокумент%", ДокументЗакупки.Партнер);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);
				
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Партнер';uk='Партнер'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКонтрагент Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Контрагент не должен отличаться от значения в соглашении ""%КонтрагентСоглашение%""';uk='Контрагент не повинен відрізнятися від значення в оферті ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Контрагент",
					,
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%Контрагент%"" отличается от контрагента в соглашении ""%КонтрагентСоглашение%""';uk='""%Контрагент%"" відрізняється від контрагента в оферті ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", ДокументЗакупки.Контрагент);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Контрагент';uk='Контрагент'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияОрганизация Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Организация не должна отличаться от значения в соглашении ""%ОрганизацияСоглашение%""';uk='Організація не повинна відрізнятися від значення в оферті ""%ОрганизацияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Организация",
					,
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru='""%Организация%"" отличается от организации в соглашении ""%ОрганизацияСоглашение%""';uk='""%Организация%"" відрізняється від організації в оферті ""%ОрганизацияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", ДокументЗакупки.Организация);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Организация';uk='Організація'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияФормаОплаты Тогда
			Если НЕ ВыводитьВОтчет Тогда 
				ТекстОшибки = НСтр("ru='Форма оплаты не должна отличаться от значения в соглашении ""%ФормаОплатыСоглашение%""';uk='Форма оплати не повинна відрізнятися від значення в оферті ""%ФормаОплатыСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыСоглашение%", Выборка.ФормаОплатыСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ФормаОплаты",
					,
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru='""%ФормаОплаты%"" отличается от формы оплаты в соглашении ""%ФормаОплатыГрафик%""';uk='""%ФормаОплаты%"" відрізняється від форми оплати в оферті ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ДокументЗакупки.ФормаОплаты),ДокументЗакупки.ФормаОплаты, НСтр("ru='Любая';uk='Будь-яка'")));
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Форма оплаты';uk='Форма оплати'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалюта Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Валюта не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""';uk='Валюта не повинна відрізнятися від значення в оферті ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Валюта",
					,
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%Валюта%"" отличается от валюты в соглашении ""%ВалютаСоглашение%""';uk='""%Валюта%"" відрізняється від валюти в оферті ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументЗакупки.Валюта);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Валюта';uk='Валюта'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Валюта взаиморасчетов не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""';uk='Валюта взаєморозрахунків не повинна відрізнятися від значення в оферті ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ВалютаВзаиморасчетов",
					,
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru='""%Валюта%"" отличается от валюты взаиморасчетов в соглашении ""%ВалютаСоглашение%""';uk='""%Валюта%"" відрізняється від валюти взаєморозрахунків в оферті ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументЗакупки.ВалютаВзаиморасчетов);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Валюта взаиморасчетов';uk='Валюта взаєморозрахунків'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		
		Если Выборка.ЕстьОшибкиЗаполненияХозяйственнаяОперация Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Операция не должна отличаться от значения в соглашении ""%Операция%""';uk='Операція не повинна відрізнятися від значення в оферті ""%Операция%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", Выборка.ХозяйственнаяОперацияСоглашение); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ХозяйственнаяОперация",
					,
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru='""%Операция%"" отличается от операции в соглашении ""%ОперацияСоглашения%""';uk='""%Операция%"" відрізняється від операції в оферті ""%ОперацияСоглашения%""'");
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", ДокументЗакупки.ХозяйственнаяОперация); 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОперацияСоглашения%", Выборка.ХозяйственнаяОперацияСоглашение); 
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Хозяйственная операция';uk='Господарська операція'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли; 
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда
			
			ТекстОшибки = НСтр("ru='Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении ""%ЦенаВключаетНДС%""';uk='Ознака ""Ціна включає ПДВ"" не повинна відрізнятися від значення в оферті ""%ЦенаВключаетНДС%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаВключаетНДС%", ?(Выборка.ЦенаВключаетНДССоглашение, НСтр("ru='Цена включает НДС';uk='Ціна включає ПДВ'"), НСтр("ru='Цена не включает НДС';uk='Ціна не включає ПДВ'"))); 
			
			Если НЕ ВыводитьВОтчет Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"ЦенаВключаетНДС",
					,
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Цена включает НДС';uk='Ціна включає ПДВ'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.СкладСоглашениеЕстьГруппа Тогда
					ТекстОшибки = НСтр("ru='Склад должен входить в группу складов ""%СкладСоглашение%""';uk='Склад повинен входити в групу складів ""%СкладСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Склад не должен отличаться от значения в соглашении ""%СкладСоглашение%""';uk='Склад не повинен відрізнятися від значення в оферті ""%СкладСоглашение%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"Склад",
					,
					Отказ);
			Иначе 
				Если Выборка.СкладСоглашениеЕстьГруппа Тогда
					ТекстОшибки = НСтр("ru='""%Склад%"" должен входить в группу складов соглашения ""%СкладСоглашение%""';uk='""%Склад%"" повинен входити в групу складів оферти ""%СкладСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='""%Склад%"" отличается от склада в соглашении ""%СкладСоглашение%""';uk='""%Склад%"" відрізняється від складу в оферті ""%СкладСоглашение%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", ДокументЗакупки.Склад);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Склад';uk='Склад'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Признак возврата многообортной тары не должен отличаться от значения в типовом соглашении';uk='Ознака повернення многообортной тари не повинна відрізнятися від значення в типовій оферті'");
			Иначе
				ТекстОшибки = НСтр("ru='Признак возврата многообортной тары не должен отличаться от значения в соглашении';uk='Ознака повернення многообортной тари не повинна відрізнятися від значення в оферті'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					?(Выборка.ЭтоСоглашение,"ВозвращатьМногооборотнуюТару","ВернутьМногооборотнуюТару"),
					,
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Возврат тары';uk='Повернення тари'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru='Срок возврата многообортной тары не должен отличаться от значения в соглашении (%СрокВозврата%)';uk='Строк повернення багатообортной тари не повинен відрізнятися від значення в оферті (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					"СрокВозвратаМногооборотнойТары",
					,
					Отказ);
			Иначе 
					
				ТекстОшибки = НСтр("ru='(%СрокВозвратаТиповое%) отличается от срока в соглашении (%СрокВозврата%)';uk='(%СрокВозвратаТиповое%) відрізняється від строку в оферті (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозвратаТиповое%", ДокументЗакупки.СрокВозвратаМногооборотнойТары);
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Срок возврата тары';uk='Строк повернення тари'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиДатаВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
				ДокументЗакупки,
				Выборка.СрокВозвратаМногооборотнойТары,
				Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю,
				Выборка.КалендарьВозвратаТары);
			
			Если ДатаВозвратаМногооборотнойТары <> ДокументЗакупки.ДатаВозвратаМногооборотнойТары Тогда
				ТекстОшибки = НСтр("ru='Дата возврата многообортной тары не должна отличаться от срока возврата в соглашении';uk='Дата повернення многообортної тари не повинна відрізнятися від строку повернення в оферті'");
				
				Если НЕ ВыводитьВОтчет Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстОшибки,
							ДокументЗакупки,
							"ДатаВозвратаМногооборотнойТары",
							,
							Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Дата возврата тары';uk='Дата повернення тари'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево- Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий закупок
//
Процедура СообщитьОбОшибкахТоварыДокументаЗакупки(Выборка,
	                                              ДокументЗакупки,
	                                              Отказ,
	                                              ДеревоОтклонений = Неопределено)
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""';uk=' у рядку %НомерСтроки% списку ""Товари""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше цены по соглашению ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна на номенклатуру ""%Номенклатура%"" з характеристикою ""%Характеристика%"" не повинна бути вище ціни за офертою ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Характеристика%",            Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" не должна быть выше цены по соглашению ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна на номенклатуру ""%Номенклатура%"" не повинна бути вище ціни за офертою ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "Цена"),
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия дублей в тч Товары документа закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПоставщика(Выборка,
	                                                                    ДокументЗакупки,
	                                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='В строке не может быть выбрана ""%НоменклатураПоставщика%"", т.к. в предыдущих строках она соответствует другой номенклатуре';uk='У рядку не може бути обрана ""%НоменклатураПоставщика%"", тому що в попередніх рядках вона відповідає інший номенклатурі'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НоменклатураПоставщика%", Выборка.НоменклатураПоставщика);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НоменклатураПоставщика"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках вхождения цен документа закупки в допустимый диапазон
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий закупок
//
Процедура СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка,
	                                                       ДокументЗакупки,
	                                                       Отказ,
	                                                       ИспользоватьСкидкиНаценки,
	                                                       ДеревоОтклонений = Неопределено)
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""';uk=' у рядку %НомерСтроки% списку ""Товари""'");
		АдресОшибки = СтрЗаменить(АдресОшибки,"%НомерСтроки%",НомерСтроки);
		
		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна з урахуванням знижки (націнки) на номенклатуру ""%Номенклатура%"" з характеристикою ""%Характеристика%"" не повинна бути вище максимально допустимої ціни ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна на номенклатуру ""%Номенклатура%"" з характеристикою ""%Характеристика%"" не повинна бути вище максимально допустимої ціни ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Характеристика%",            Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			Иначе
				
				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна з урахуванням знижки (націнки) на номенклатуру ""%Номенклатура%"" не повинна бути вище максимально допустимої ціни ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""';uk='Ціна на номенклатуру ""%Номенклатура%"" не повинна бути вище максимально допустимої ціни ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "Цена"),
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполненности аналитик услуг для услуг в документе закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияАналитикиУслуг(Выборка, ДокументЗакупки, Отказ)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
	
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = НСтр("ru='Необходимо заполнить статью расходов для услуги ""%Номенклатура%"" в строке %НомерСтроки% списка ""Товары""';uk='Необхідно заповнити статтю витрат для послуги ""%Номенклатура%"" в рядку %НомерСтроки% списку ""Товари""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"СтатьяРасходов"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеУслугВДокументеЗакупки(Выборка, ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Нельзя указывать номенклатуру ""%Номенклатура%"" с типом ""Услуга"" (строка %НомерСтроки% списка ""Товары"")';uk='Не можна вказувати номенклатуру ""%Номенклатура%"" з типом ""Послуга"" (рядок %НомерСтроки% списку ""Товари"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках отсутствия соглашения в документе закупки
//
// Параметры:
// ЕстьОшибкиСоглашениеНеУказано - Булево - признак наличия ошибки незаполненности соглашения 
// ДокументЗакупки               - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ                         - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахСоглашениеНеУказано(ЕстьОшибкиСоглашениеНеУказано, ДокументЗакупки, Отказ)
	
	Если ЕстьОшибкиСоглашениеНеУказано Тогда
	
		ТекстОшибки = НСтр("ru='Соглашение не указано. Документ не может быть проведен без согласования';uk='Оферта не зазначена. Документ не може бути проведений без погодження'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			"Соглашение",
			,
			Отказ);
			
	КонецЕсли;
		
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий закупок
//
Процедура СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Знач Выборка,
	                                                       Знач ДокументЗакупки,
	                                                       Отказ,
	                                                       ДеревоОтклонений = Неопределено)
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
			НомерСтроки = Выборка.НомерСтроки;
			ТекстОшибки = НСтр("ru='Ручная наценка превышает максимально допустимую наценку ""%МаксимальнаяСуммаРучнойНаценки% %"" в строке %НомерСтроки% списка ""Товары""';uk='Ручна націнка перевищує максимально припустиму націнку ""%МаксимальнаяСуммаРучнойНаценки% %"" в рядку %НомерСтроки% списку ""Товари""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойНаценки%", Выборка.МаксимальнаяСуммаРучнойНаценки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                    НомерСтроки);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойСкидки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ДокументЗакупки,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в документе закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСклада(Знач Выборка,
	                                                    Знач ДокументЗакупки,
	                                                    Отказ)
	
	Если Выборка.Следующий() Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Склад"" не заполнено';uk='Поле ""Склад"" не заповнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			"Склад",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в табличной части "Товары" документа закупки
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Знач Выборка,
	                                                    Знач ДокументЗакупки,
	                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не заполнена колонка ""Склад"" в строке %1 списка ""%2""';uk='Не заповнена колонка ""Склад"" в рядку %1 списку ""%2""'"),
			Выборка.НомерСтроки,
			Выборка.ПредставлениеТабличнойЧасти);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки,"Склад"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументЗакупки  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий закупок
//
Процедура СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Знач Выборка, Знач ДокументЗакупки, Отказ, ДеревоОтклонений = Неопределено)
	
	МаксДатаАванса = Дата(1,1,1);
	ОдинДень       = 86400;
	СуммаПроцентовПлатежа = 0;
	СуммаПроцентовПлатежаШаблона = 0;
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			Возврат;
		КонецЕсли;
		
		Если Выборка.ЭтапШаблонаОтсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы оплаты""';uk=' у рядку %НомерСтроки% списку ""Етапи оплати""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда
			
			ТекстОшибки = НСтр("ru='Вариант оплаты отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""';uk='Варіант оплати відрізняється від значення у графіку оплати ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", Выборка.ВариантОплатыШаблона); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВариантОплаты", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Календарь = Выборка.Календарь;
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			
			Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаПоступления) Тогда
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.ЖелаемаяДатаПоступления, Выборка.Сдвиг );
				ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, МаксДатаАванса, Выборка.Сдвиг);
				Иначе
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
				КонецЕсли;
			Иначе
				ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаПоступления) Тогда
				ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
			ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
				ДатаПлатежаШаблона = МаксДатаАванса + Выборка.Сдвиг * ОдинДень;
			Иначе
				ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Или
			Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
			
			МаксДатаАванса = ДатаПлатежаШаблона;
			
		КонецЕсли;
		
		Если ДатаПлатежаШаблона > Выборка.ДатаПлатежа Тогда
			
			ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше, чем в графике оплаты ""%ДатаПлатежаШаблона%""';uk='Дата платежу повинна бути не менше, ніж у графіку оплати ""%ДатаПлатежаШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПлатежаШаблона%", Формат(ДатаПлатежаШаблона, "ДЛФ=DD")); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ДатаПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		СуммаПроцентовПлатежаШаблона = СуммаПроцентовПлатежаШаблона + Выборка.ПроцентПлатежаШаблона;
		СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + Выборка.ПроцентПлатежа;
		
		Если Выборка.ЕстьОшибкиЗаполненияПроцентаПлатежа И СуммаПроцентовПлатежа > СуммаПроцентовПлатежаШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны превышать проценты по графику соглашения (""%ПроцентПлатежаШаблона%%"")';uk='Відсотки до наступного платежу за графіком (""%ПроцентПлатежа%%"") не повинні перевищувати відсотки за графіком угоди (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентовПлатежа); 
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовПлатежаШаблона); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					"НадписьЭтапыОплаты",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках корректности количества этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументЗакупки  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений
//
Процедура СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Знач Выборка, Знач ДокументЗакупки, Отказ, МассивОтклонений = Неопределено)
	
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	Выборка.Следующий();
	
	Если Выборка.КоличествоЭтаповШаблона <> 0 И Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			
		ТекстОшибки = НСтр("ru='Количество этапов оплаты в документе (%КоличествоЭтаповДокумента%) должно совпадать с количеством этапов в графике (%КоличествоЭтаповГрафика%)';uk='Кількість етапів оплати в документі (%КоличествоЭтаповДокумента%) має збігатися з кількістю етапів у графіку (%КоличествоЭтаповГрафика%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповДокумента%", Выборка.КоличествоЭтаповДокумента);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповГрафика%",   Выборка.КоличествоЭтаповШаблона);
		
		Если ВыводитьВОтчет Тогда
			Отчеты.ОтклоненияОтУсловийЗакупок.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru='Этапы оплаты';uk='Етапи оплати'"), ТекстОшибки, МассивОтклонений);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"НадписьЭтапыОплаты",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения возвращаемых товаров
//
// Параметры:
// ТаблицаОшибок          - Выгрузка результата запроса
Процедура СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Знач ТаблицаОшибок)
	
	Для каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		СообщениеОбОшибке = НСтр("ru='Возврат по номенклатуре %Номенклатура% \ %Характеристика% превышает количество закупленных товаров по документу поступления %НомерРеализации% на %Количество% %ЕдиницаИзмерения%';uk='Повернення по номенклатурі %Номенклатура% \ %Характеристика% перевищує кількість закуплених товарів за документом надходження %НомерРеализации% на %Количество% %ЕдиницаИзмерения%'");
		Если СтрокаОшибки.Количество < 0 Тогда
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Номенклатура%",         СтрокаОшибки.Номенклатура);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Характеристика%",       СтрокаОшибки.Характеристика);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Количество%",          -СтрокаОшибки.Количество);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%ЕдиницаИзмерения%",     СтрокаОшибки.ЕдиницаИзмерения);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерРеализации%",      СтрокаОшибки.НомерПоступления);
			Если НЕ ЗначениеЗаполнено(СтрокаОшибки.Характеристика) Тогда
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, " \ ",      "");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры


// Выводит сообщения об ошибках заполнения цен в табличной части "Товары" документа закупки
//
Процедура СообщитьОбОшибкахКонтрольЗаполненияЦен(Знач Выборка,
	                                             Знач ДокументЗакупки,
	                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьОшибкиЗаполненияЦен Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Цена"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнена колонка ""Ціна"" у рядку %НомерСтроки% списку ""Товари""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Цена"),
				,
				Отказ);
			
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияСумм Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнена колонка ""Сума"" в рядку %НомерСтроки% списку ""Товари""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Сумма"),
				,
				Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Выводит сообщение, если организация распоряжения отличается от организации документа
//
Процедура СообщитьОбОшибкахСоответствиеОрганизацииРаспоряжений(Знач Выборка, Знач ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Организация распоряжения указанного в строке %1 списка ""%2"" должна совпадать с организацией документа';uk='Організація розпорядження зазначеного в рядку %1 списку ""%2"" повинна збігатися з організацією документа'"),
			Выборка.НомерСтроки,
			Выборка.ПредставлениеТабличнойЧасти);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "Распоряжение"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса временной таблицы товаров
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваров(ИмяТаблицы)
	
	Возврат "
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 		ВидЦенКакПараметр - Булево - Истина, если в запросе "ВидЦен" должен использоваться как параметр; Ложь - если как поле временной таблицы товаров
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦен(ИмяТаблицы, ИмяВременнойТаблицыТоваров)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	&ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			ВЫРАЗИТЬ (&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВозвращатьМногооборотнуюТару И НЕ &ЭтоВыкупТары
	|			И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|		КОГДА
	|			ВЫРАЗИТЬ (&Соглашение КАК Справочник.СоглашенияСПоставщиками).НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		ТОГДА
	|			ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
	|		КОГДА
	|			ВЫРАЗИТЬ (&Соглашение КАК Справочник.СоглашенияСПоставщиками).НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ТОГДА
	|			&ТекстЗапросаКоэффициентУпаковки1
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ЦеныНоменклатурыПоставщиковСрезПоследних.Цена/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	| " + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|				ВидЦеныПоставщика = &ВидЦеныПоставщика И
	|				(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.Характеристика
	|				ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
	|ПО
	|	ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура
	|	И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыПоставщиковСрезПоследних.Характеристика
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|ПО 
	|	ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
		"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
		
	Возврат ТекстЗапроса
	
КонецФункции


//Вызывает исключение, если партнер не является поставщиком
//
// Параметры:
//	Партнер       - СправочникСсылка.Партнеры-Проверяемый партнер
//
Процедура ПроверитьВозможностьВводаНаОснованииПартнераПоставщикаКонкурента(Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Партнер, "Поставщик,Конкурент");
	
	Если Не РеквизитыПартнера.Поставщик И Не РеквизитыПартнера.Конкурент Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКонкурентнуюРазведку") Тогда
			ТекстОшибки = НСтр("ru='Партнер не является поставщиком или конкурентом. Ввод на основании доступен только для поставщика или конкурента.';uk='Партнер не є постачальником або конкурентом. Введення на підставі доступне тільки для постачальника або конкурента.'");
		Иначе
			ТекстОшибки = НСтр("ru='Партнер не является поставщиком. Ввод на основании доступен только для поставщика.';uk='Партнер не є постачальником. Введення на підставі доступне тільки для постачальника.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное для реквизитов связанных с отнесением расходов в табличной части "Товары".
//
// Параметры:
//	Форма - УправляемаяФорма - форма, для которой настраивается условное оформление
//
Процедура УстановитьУсловноеОформлениеПоРасходам(Форма) Экспорт
	
	// оформление статей и аналитики расходов

	// отключение видимости полей, необходимых для услуг и работ, для определенных операций

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСписатьНаРасходы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихУслуги();

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// только просмотр, если товар

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСписатьНаРасходы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// только просмотр, если работа под назначение

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСписатьНаРасходы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// только просмотр, если услуга

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСписатьНаРасходы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// поясняющая надпись, если товар

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для работ/услуг без назначения>';uk='<для робіт/послуг без призначення>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// поясняющая надпись, если работа под назначение

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСтатьяРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для работ/услуг без назначения>';uk='<для робіт/послуг без призначення>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// поясняющая надпись, если работа и на расходы не списываем

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<при списании на расходы>';uk='<при списанні на витрати>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// отметка незаполненного статьи расходов, если списываем на расходы

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыСтатьяРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// текст аналитики расходов, если статья не выбрана
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыАналитикаРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.АналитикаРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<выберите статью расходов>';uk='<виберіть статтю витрат>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Аналитика расходов "Только просмотр", если не заполнена статья расходов
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

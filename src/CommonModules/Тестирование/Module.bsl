///////////////////////////////////////////////////////////
// Тестирование - Модуль тестирования конфигурации       //
//                                                       //
///////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Метод выполняет помещение во временные таблицы данных по указанным регистрам и указанный месяц
// Создается временная таблица ЭталонИмяОбъектаМетаданных, 
// где ИмяОбъектаМетаданных - это имя регистра. 
// Пример: ЭталонСебестоимостьТоваров.
// Параметры:
//		КонтрольныеРегистры - Массив - Список регистров по которым сохраняются данные.
//		Месяц - Дата - Начало месяца, за который необходимо считать данные.
//		МассивРегистраторов - Массив - Список документов по которым сохраняются движения.
//										Если используется данный параметр, то Месяц не используется.
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - Содержит временные таблицы с выборками по указанным регистрам.
Функция СохранитьЭталонныеДанные(КонтрольныеРегистры, Месяц = Неопределено, МассивРегистраторов = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	СохранитьЭталонныеДанные = Истина;
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	ПараметрыЗапроса = ПараметрыЗапроса(Месяц, МассивРегистраторов);
	
	Для каждого КонтрольныйРегистр Из КонтрольныеРегистры Цикл
		ТекстЗапроса = ТекстЗапроса + СформироватьЗапрос(КонтрольныйРегистр, СохранитьЭталонныеДанные, ПараметрыЗапроса.ОтборПоРегистраторам);
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос(ТекстЗапроса);
	ЗапросДанных.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросДанных.УстановитьПараметр("МассивРегистраторов", ПараметрыЗапроса.МассивРегистраторов);
	ЗапросДанных.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	ЗапросДанных.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Тестирование. Начато сохранение эталонных данных';uk='Тестування. Розпочато збереження еталонних даних'"));
	ЗапросДанных.ВыполнитьПакет();
	ЗаписьЖурналаРегистрации(НСтр("ru='Тестирование. Завершено сохранение эталонных данных';uk='Тестування. Завершено збереження еталонних даних'"));
	
	Возврат ВременныеТаблицы;
КонецФункции

// Метод выполняет сравнение данных из временных таблиц с данными из контрольных регистров,
// возвращает поля по которым расходятся данные с детализацией до исходных и результирующих
// данных.
// Параметры:
//		ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит эталонные данные.
//		КонтрольныеРегистры - Массив - Список регистров по которым сравниваются данные.
//		Месяц - Дата - Начало месяца, за который сравниваются данные.
//		МассивРегистраторов - Массив - Список документов по которым сохраняются движения.
//										Если используется данный параметр, то Месяц не используется.
Функция СравнитьСЭталоннымиДанными(ВременныеТаблицы, КонтрольныеРегистры, Месяц = Неопределено, МассивРегистраторов = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	СохранитьЭталонныеДанные = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(Месяц, МассивРегистраторов);
	
	ЗапросДанных = Новый Запрос();
	ЗапросДанных.МенеджерВременныхТаблиц = ВременныеТаблицы;
	ЗапросДанных.УстановитьПараметр("МассивРегистраторов", ПараметрыЗапроса.МассивРегистраторов);
	ЗапросДанных.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	ЗапросДанных.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	
	Расхождения = Новый Соответствие();
	КоличествоРасхождений = 0;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Тестирование. Начато сравнение c эталонными данными';uk='Тестування. Розпочато порівняння c еталонними даними'"));
	
	Для каждого КонтрольныйРегистр Из КонтрольныеРегистры Цикл
		ЗаписьЖурналаРегистрации("Выгрузили " + КонтрольныйРегистр);
		ЗапросДанных.Текст = СформироватьЗапрос(КонтрольныйРегистр, СохранитьЭталонныеДанные, ПараметрыЗапроса.ОтборПоРегистраторам);
		Результат = ЗапросДанных.ВыполнитьПакет();
		Позиция = 2;
		Граница = Результат.Количество();
		Пока Позиция < Граница Цикл
			Если Не Результат[Позиция].Пустой() Тогда
				Таблица = Результат[Позиция].Выгрузить();
				КоличествоРасхождений = КоличествоРасхождений + (Таблица.Количество()-1) / 2;
				ИмяРегистра = Таблица[0].ИмяРегистра;
				Записи = ОбщегоНазначения.ЗначениеВСтрокуXML(Таблица);
				Расхождения.Вставить(ИмяРегистра, Записи);
				Таблица.Очистить();
			КонецЕсли;
			Позиция = Позиция + 3;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Тестирование. Завершено сравнение c эталонными данными';uk='Тестування. Завершено порівняння c еталонними даними'"));
	
	Если ЗначениеЗаполнено(КоличествоРасхождений) Тогда
		Расхождения.Вставить("КоличествоРасхождений", КоличествоРасхождений);
	КонецЕсли;
	
	Возврат Расхождения;
КонецФункции

// Метод формирует текст запроса по всем полям для указанного объекта метаданных.
// Параметры:
//		ПутьКМетаданным - Строка - Путь к объекту, по которому сохраняются данные.
//									  Пример "РегистрНакопления.СебестоимостьТоваров".
//		СохранитьВоВременнуюТаблицу - Булево - Результат запроса будет сохранен во временную таблицу вида
//										"ЭталонИмяОбъектаМетаданных"
//		ОтборПоРегистраторам - Булево - Необязательный параметр, при установке в истина в запросе будет накладываться
//										условие на выборку данных, где регистатор в массиве регистраторов. Отбора
//										по периоду не будет.
Функция СформироватьЗапрос(ПутьКМетаданным, СохранитьВоВременнуюТаблицу = Ложь, ОтборПоРегистраторам = Ложь) Экспорт
	
	СтрокиКонтроля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКМетаданным, ".", Ложь);
	ИмяКоллекцииМетаданных = СтрокиКонтроля[0];
	ИмяРегистра = СтрокиКонтроля[1];
	
	СписокИсключений = СписокИсключений();
	МассивЧисловыхПолей = Новый Массив();
	
	Если ИмяКоллекцииМетаданных = "РегистрНакопления" Тогда
		КоллекцияМетаданных = Метаданные.РегистрыНакопления[ИмяРегистра];
	ИначеЕсли ИмяКоллекцииМетаданных = "РегистрСведений" Тогда
		КоллекцияМетаданных = Метаданные.РегистрыСведений[ИмяРегистра];
	КонецЕсли;
	
	МассивИзмерений = МассивПолейМетаданныхИзКоллекции(КоллекцияМетаданных.Измерения, СписокИсключений, МассивЧисловыхПолей);
	МассивИзмерений.Добавить("Регистратор");
	МассивРеквизитов = МассивПолейМетаданныхИзКоллекции(КоллекцияМетаданных.Реквизиты, СписокИсключений, МассивЧисловыхПолей);
	МассивРесурсов = МассивПолейМетаданныхИзКоллекции(КоллекцияМетаданных.Ресурсы, СписокИсключений, МассивЧисловыхПолей);
	
	МассивИзмеренияРеквизиты = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИзмеренияРеквизиты, МассивИзмерений, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИзмеренияРеквизиты, МассивРеквизитов, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИзмеренияРеквизиты, МассивРесурсов, Истина);
	
	Если СохранитьВоВременнуюТаблицу Тогда
		ШаблонТекстЗапроса = "
		|ВЫБРАТЬ
		|	// ТекстИзмеренияРеквизиты //
		|	// ТекстСуммы //
		|	ИСТИНА
		|ПОМЕСТИТЬ ЭталонИмяОбъектаМетаданных
		|ИЗ
		|	ОбъектМетаданных КАК ДД
		|ГДЕ
		|	// ТекстУсловиеОтбора //
		|	ИСТИНА
		|;
		|///////////////////////////////////
		|";
		
		ТекстИзмеренияРеквизиты = ДобавитьПоляВЗапрос(МассивИзмеренияРеквизиты);
		ПолныйТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "// ТекстИзмеренияРеквизиты //", ТекстИзмеренияРеквизиты + ",");
		
		Если МассивЧисловыхПолей.Количество() > 0 Тогда
			ТекстСуммы = ДобавитьПоляВЗапрос(МассивЧисловыхПолей) + ",";
		Иначе
			ТекстСуммы = "";
		КонецЕсли;
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстСуммы //", ТекстСуммы);
		
		Если ВКоллекцииЕстьПериод(КоллекцияМетаданных) И Не ОтборПоРегистраторам Тогда
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстУсловиеОтбора //", "ДД.Период МЕЖДУ &НачалоПериода И &КонецПериода И");
		Иначе
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстУсловиеОтбора //", "ДД.Регистратор В (&МассивРегистраторов) И");
		КонецЕсли;
		
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ИмяОбъектаМетаданных", ИмяРегистра);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ОбъектМетаданных", ПутьКМетаданным);
	Иначе
		ШаблонТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	// ТекстИзмеренияРеквизиты //
		|	ДД.ОбщееПоле
		|ПОМЕСТИТЬ ПоляРасхожденийИмяОбъектаМетаданных
		|ИЗ
		|	(ВЫБРАТЬ
		|		// ТекстИзмеренияРеквизиты //
		|		// ТекстСуммыДо //
		|		Неопределено КАК ОбщееПоле,
		|		1 КАК ЗначениеПроверки
		|	ИЗ
		|		ЭталонИмяОбъектаМетаданных КАК ДД
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		// ТекстИзмеренияРеквизиты //
		|		// ТекстСуммыПосле //
		|		Неопределено КАК ОбщееПоле,
		|		- 1 КАК ЗначениеПроверки
		|	ИЗ
		|		ОбъектМетаданных КАК ДД
		|	ГДЕ
		|		// ТекстУсловиеОтбора // 
		|		ИСТИНА
		|	) КАК ДД
		|СГРУППИРОВАТЬ ПО
		|	// ТекстСгруппироватьИндексировать // 
		|	ДД.ОбщееПоле
		|ИМЕЮЩИЕ 
		|	// ТекстПоляКонтроля //
		|	Истина И СУММА(ДД.ЗначениеПроверки) <> 0
		|;
		|/////////////////////////////////////////
		|ВЫБРАТЬ
		|	""ЗаписиДоРасчета""      КАК ТипЗаписи,
		|	// ТекстИзмеренияРеквизиты //
		|	// ТекстСуммыРасхожденияДо //
		|	""ИмяОбъектаМетаданных"" КАК ИмяРегистра
		|
		|ПОМЕСТИТЬ ДетальныеЗаписиИмяОбъектаМетаданных
		|ИЗ
		|	ПоляРасхожденийИмяОбъектаМетаданных КАК ДД
		|
		|	// ТекстВнутреннееСоединениеСЭталоном //
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ЗаписиПослеРасчета""   КАК ТипЗаписи,
		|	// ТекстИзмеренияРеквизиты //
		|	// ТекстСуммыРасхожденияПосле //
		|	""ИмяОбъектаМетаданных"" КАК ИмяРегистра
		|ИЗ ПоляРасхожденийИмяОбъектаМетаданных КАК ДД
		|
		|	// ТекстВнутреннееСоединениеСРезультатом //
		|;
		|/////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДД.ТипЗаписи,
		|	// ТекстИзмеренияРеквизиты //
		|	// ТекстСуммаСумм //
		|	ДД.ИмяРегистра
		|ИЗ ДетальныеЗаписиИмяОбъектаМетаданных КАК ДД
		|СГРУППИРОВАТЬ ПО
		|	ДД.ТипЗаписи,
		|	// ТекстСгруппироватьИндексировать //
		|	ДД.ИмяРегистра
		|;
		|/////////////////////////////////////////
		|";
		
		ТекстИзмеренияРеквизиты = ДобавитьПоляВЗапрос(МассивИзмеренияРеквизиты);
		ПолныйТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "// ТекстИзмеренияРеквизиты //", ТекстИзмеренияРеквизиты + ",");
		
		Если МассивЧисловыхПолей.Количество() > 0 Тогда
			ТекстСуммыДо = ДобавитьПоляВЗапрос(МассивЧисловыхПолей, "-") + ",";
			ТекстСуммыПосле = ДобавитьПоляВЗапрос(МассивЧисловыхПолей) + ",";
			ТекстСуммыРасхожденияДо = ДобавитьПоляВЗапрос(МассивЧисловыхПолей,,,,"Таблица") + ",";
			ТекстСуммыРасхожденияПосле = ДобавитьПоляВЗапрос(МассивЧисловыхПолей,,,,"Таблица") + ",";
			ТекстСуммаСумм = ДобавитьПоляВЗапрос(МассивЧисловыхПолей, "СУММА(", ")") + ",";
		Иначе
			ТекстСуммыДо = "";
			ТекстСуммыПосле = "";
			ТекстСуммыРасхожденияДо = "";
			ТекстСуммыРасхожденияПосле = "";
			ТекстСуммаСумм = "";
		КонецЕсли;
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстСуммыДо //", ТекстСуммыДо);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстСуммыПосле //", ТекстСуммыПосле);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстСуммыРасхожденияДо //", ТекстСуммыРасхожденияДо);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстСуммыРасхожденияПосле //", ТекстСуммыРасхожденияПосле);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстСуммаСумм //", ТекстСуммаСумм);
		
		Если ВКоллекцииЕстьПериод(КоллекцияМетаданных) И Не ОтборПоРегистраторам Тогда
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстУсловиеОтбора //", "ДД.Период МЕЖДУ &НачалоПериода И &КонецПериода И");
		Иначе
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстУсловиеОтбора //", "ДД.Регистратор В (&МассивРегистраторов) И");
		КонецЕсли;
		
		ТекстПоляКонтроля = ДобавитьПоляВЗапрос(МассивЧисловыхПолей, "СУММА(", ") <> 0 ", "ИЛИ ");
		Если ЗначениеЗаполнено(ТекстПоляКонтроля) Тогда
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстПоляКонтроля //", ТекстПоляКонтроля + " И ");
		Иначе
			ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстПоляКонтроля //", "");
		КонецЕсли;
		
		ТекстСгруппироватьИндексировать = ДобавитьПоляВЗапрос(МассивИзмеренияРеквизиты, "", " ");
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстСгруппироватьИндексировать //", ТекстСгруппироватьИндексировать + ",");
	
		ВнутреннееСоединениеСЭталоном = ТекстВнутреннегоСоединения(МассивИзмеренияРеквизиты, "ЭталонИмяОбъектаМетаданных");
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстВнутреннееСоединениеСЭталоном //", ВнутреннееСоединениеСЭталоном);
		
		ВнутреннееСоединениеСРезультатом = ТекстВнутреннегоСоединения(МассивИзмеренияРеквизиты, "ОбъектМетаданных");
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "// ТекстВнутреннееСоединениеСРезультатом //", ВнутреннееСоединениеСРезультатом);
		
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ИмяОбъектаМетаданных", ИмяРегистра);
		ПолныйТекстЗапроса = СтрЗаменить(ПолныйТекстЗапроса, "ОбъектМетаданных", ПутьКМетаданным);
	КонецЕсли;
	Возврат ПолныйТекстЗапроса;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыЗапроса(Месяц, МассивРегистраторов)
	
	ПараметрыЗапроса = Новый Структура("НачалоПериода, КонецПериода, МассивРегистраторов, ОтборПоРегистраторам");
	Если Не ЗначениеЗаполнено(МассивРегистраторов) Тогда // переинициализируем параметр, чтобы запрос не падал
		ПараметрыЗапроса.МассивРегистраторов = Новый Массив();
		ПараметрыЗапроса.ОтборПоРегистраторам = Ложь;
	Иначе
		ПараметрыЗапроса.ОтборПоРегистраторам = Истина;
		ПараметрыЗапроса.МассивРегистраторов = МассивРегистраторов;
	КонецЕсли;
	Если ЗначениеЗаполнено(Месяц) Тогда
		ПараметрыЗапроса.НачалоПериода = НачалоМесяца(Месяц);
		ПараметрыЗапроса.КонецПериода = КонецМесяца(Месяц);
	Иначе
		ПараметрыЗапроса.НачалоПериода = Дата("00010101000000");
		ПараметрыЗапроса.КонецПериода = Дата("39991212235959");
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
КонецФункции

// Возвращает массив, содержащий поля коллекции.
// Если при разборе коллекции найдено числовое поле и задан параметр СписокПолейСумм,
// то такое поле заносим только в данный список.
Функция МассивПолейМетаданныхИзКоллекции(ПоляКоллекции, ИсключаемыеПоля, СписокПолейСумм = Неопределено)
	МассивПолей = Новый Массив();
	Для Каждого Поле Из ПоляКоллекции Цикл
		Если ИсключаемыеПоля[Поле.Имя] = Неопределено Тогда
			Если СписокПолейСумм <> Неопределено И Поле.Тип = Новый ОписаниеТипов("Число",,,Поле.Тип.КвалификаторыЧисла) Тогда
				СписокПолейСумм.Добавить(Поле.Имя);
			Иначе
				Если Поле.Тип <> Новый ОписаниеТипов("Строка") Тогда
					МассивПолей.Добавить(Поле.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивПолей;
КонецФункции

// Возвращает массив полей, которые необходимо исключать при формировании
// текста запроса.
Функция СписокИсключений()
	СписокИсключений = Новый Соответствие();
	СписокИсключений.Вставить("ИдентификаторСтроки", Истина);
	СписокИсключений.Вставить("НомерСтроки", Истина);
	СписокИсключений.Вставить("Комментарий", Истина);
	
	Возврат СписокИсключений;
КонецФункции

// Формирует текст внутреннего соединения для указанных полей и источника.
Функция ТекстВнутреннегоСоединения(МассивПолей, ИмяИсточника)
	Шаблон = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяИсточникаДанных КАК Таблица
	|ПО ";
	ТекстВнутреннегоСоединения = СтрЗаменить(Шаблон, "ИмяИсточникаДанных", ИмяИсточника);
	
	ПерваяЗапись = Истина;
	Для Каждого Поле Из МассивПолей Цикл
		Шаблон = "ДД.ИмяПоля = Таблица.ИмяПоля";
		ТекстПО = СтрЗаменить(Шаблон, "ИмяПоля", Поле);
		Если Не ПерваяЗапись Тогда
			ТекстПО = " И " + ТекстПО;
		КонецЕсли;
		ТекстВнутреннегоСоединения = ТекстВнутреннегоСоединения + "
		| " + ТекстПО;
		ПерваяЗапись = Ложь;
	КонецЦикла;
	Возврат ТекстВнутреннегоСоединения;
КонецФункции

Функция ДобавитьПоляВЗапрос(МассивПолей, ВыражениеДо = "", ВыражениеПосле = "", ВыражениеСоединения = ",", ИмяПоля = "ДД")
	ТекстПолей = "";
	Счетчик = 1;
	Граница = МассивПолей.Количество();
	Для Каждого Поле Из МассивПолей  Цикл
		ТекстПолей = ТекстПолей  + "
		|" + ВыражениеДо + ИмяПоля + "." + Поле + ВыражениеПосле;
		Если ВыражениеПосле = "" ИЛИ ВыражениеПосле = ")" Тогда
			ТекстПолей = ТекстПолей + " КАК "+ Поле;
		КонецЕсли;
		Если Счетчик < Граница Тогда
			ТекстПолей = ТекстПолей + ВыражениеСоединения;
		КОнецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Возврат ТекстПолей;
КонецФункции

// проверят коллекцию на наличие поля "Период"
Функция ВКоллекцииЕстьПериод(Коллекция)
	ЕстьПериод = Ложь;
	Для Каждого Элемент Из Коллекция.СтандартныеРеквизиты Цикл
		Если Элемент.Имя = "Период" Тогда
			ЕстьПериод = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьПериод;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ПрограммныйИнтерфейс

//Создает список доступных для создания планов обмена
Процедура СписокПлановОбмена(ПланыОбменаПодсистемы) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена["ОбменУправлениеТорговлейДокументооборот21"]);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена["ОбменУправлениеТорговлейРозница"]);
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена["ОбменУправлениеТорговлей31Бухгалтерия20"]);
		
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена["Полный"]);
        ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена["СОтборами"]);
	Иначе

	КонецЕсли; 
	
КонецПроцедуры

// Возвращает признак доступности плана обмена, для базовой или проф версии
// Возвращаемое значение:
//  Булево - признак доступности
//
Функция ЭтоСозданиеУзлаОбмена(ПланОбмена) Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат ДоступностьПланаОбменаВБазовойВерсии(ПланОбмена.Метаданные().Имя);
	КонецЕсли;

	Возврат Истина;
	
КонецФункции
 

//Возвращает признак доступности плана обмена, для базовой или проф версии
Функция ПроверкаВозможностиСозданияУзлаОбмена(ПланОбмена) Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат ДоступностьПланаОбменаВБазовойВерсии(ПланОбмена.Имя);
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Блокирует изменение настроек узла плана обмена
//
Процедура УстановитьДоступностьНастроекУзлаИнформационнойБазы(Форма) Экспорт
	
	Если ОбменДаннымиПовтИспУТУП.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
	
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаПояснениеБлокировки",
			"Видимость",
			Истина);

		Для Каждого ЭлементФормы Из Форма.Элементы Цикл
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы,
					ЭлементФормы.Имя,
					"Доступность",
					Ложь);
					
			КонецЕсли;
				
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Возврат "BASУправлениеТорговлей";
	Иначе
	 	Возврат "BASERP";
	КонецЕсли; 
	 
КонецФункции

Процедура РегистрацияИзмененияДляНачальнойВыгрузки(Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		ТипПланОбменаСсылкаОбменУправлениеТорговлейРозница = "ПланОбменаСсылка.ОбменУправлениеТорговлейРозница";
		ТипПланОбменаСсылкаОбменУправлениеТорговлей31Бухгалтерия20 = "ПланОбменаСсылка.ОбменУправлениеТорговлей31Бухгалтерия20";
		Если ТипЗнч(Получатель) = Тип(ТипПланОбменаСсылкаОбменУправлениеТорговлейРозница) Тогда
			СтандартнаяОбработка = Ложь;
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
																						|ДатаНачалаВыгрузкиДокументов, 
																						|Организации");
																						
			Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям, ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
			
			ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям( Получатель, 
																						ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, 
																						Организации, 
																						Отбор);
																						
		ИначеЕсли ТипЗнч(Получатель) = Тип(ТипПланОбменаСсылкаОбменУправлениеТорговлей31Бухгалтерия20) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
																						|ДатаНачалаВыгрузкиДокументов, 
																						|Организации, 
																						|ВыгружатьУправленческуюОрганизацию,
																						|ПравилаОтправкиСправочников,
																						|ПравилаОтправкиДокументов,
																						|ВыгружатьЦеныНоменклатуры");
			
			Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям, ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
			
			Если ЗначенияРеквизитов.ПравилаОтправкиСправочников <> "НеСинхронизировать"
				ИЛИ ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
				
				Отбор = Новый Массив();
				ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
				СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;

				Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл 
				
					Если (ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена.Метаданные) 
						И ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация"
						ИЛИ (ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости"
						И ЭлементСоставаПланаОбмена.Метаданные.Имя = "Организации"))
						ИЛИ (ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные)
						И ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация") 
						ИЛИ (ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные)
						И ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация"
						И ЗначенияРеквизитов.ВыгружатьЦеныНоменклатуры) Тогда
						
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Отбор.Количество() = 0 Тогда
					Отбор = Неопределено;
				КонецЕсли;
				
				ОбменДаннымиСобытияУТУП.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям( Получатель, 
																								 ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, 
																								 Организации, 
																								 Отбор);
			
			КонецЕсли;
			
			
		КонецЕсли;
	Иначе

	КонецЕсли; 
	 
	
	
	
КонецПроцедуры

// Возвращает признак наличия действующих обменов, использующих формирование договоров по заказам.
// 
// Возвращаемое значение:
//  Булево - признак наличия узлов
//
Функция ЕстьОбменыСФормированиемДоговоровПоЗаказам() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Обмены.Ссылка
			|ИЗ
			|	ПланОбмена.ОбменУправлениеТорговлей31Бухгалтерия20 КАК Обмены
			|ГДЕ
			|	Обмены.ПометкаУдаления = ЛОЖЬ
			|	И Обмены.ПравилаСозданияДоговоровКонтрагентов = ""ПоЗаказам""
			|
			|");
		
		Возврат Не Запрос.Выполнить().Пустой();
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	 
	
КонецФункции

// Информирует пользователя о запрете создания или изменения объекта в этой 
// информационной базе
Процедура КонтрольСозданияДокументовВРаспределеннойИБ(Объект, Отказ) Экспорт
	Возврат;
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность редактирования реквизитов
// с помощью экспортной функции ПолучитьБлокируемыеРеквизитыОбъекта.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Запрет редактирования реквизитов объектов";
//                            В качестве значения - пустую строку.
//
// Пример: 
//   Объекты.Вставить(Метаданные.Документы.ЗаказПокупателя.ПолноеИмя(), "");
//
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	//Заглушка
КонецПроцедуры

// Возвращает значение ссылки управленческой организации 
// для настройки отбора, при настройке через внешнее соединение
//
// Возвращаемое значение:
//  Строка - идентификатор ссылки управленческой организации
//
Функция СсылкаУправленческойОрганизации() Экспорт
	Возврат ЗначениеВСтрокуВнутр(Справочники.Организации.УправленческаяОрганизация);
КонецФункции

// Объединяет массивы, возвращая результат объединения
// Возвращаемое значение:
//  Массив - объединенный массив значений
Функция ОбъединитьМассивы(Массив1, Массив2) Экспорт
	
	ОбъединенныйМассив = Новый Массив;
	
	Для Каждого ЭлементМассива Из Массив1 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив2 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат ОбъединенныйМассив;
	
КонецФункции
 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Возвращает признак доступности плана обмена в базовой версии
Функция ДоступностьПланаОбменаВБазовойВерсии(ИмяПланаОбмена,СообщатьПользователю = Истина)
	
	КоличествоУзловПланаОбмена = 1;
	СписокДоступныхПлановОбмена = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
	
	Если СписокДоступныхПлановОбмена.Найти(ИмяПланаОбмена) <> Неопределено
		И ОбменДаннымиСобытия.ВсеУзлыПланаОбмена(ИмяПланаОбмена).Количество() < КоличествоУзловПланаОбмена Тогда
		Возврат Истина;
	Иначе
		Если СообщатьПользователю Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Используются ограничения базовой версии. Выбранный план обмена создать невозможно.';uk='Використовуються обмеження базової версії. Вибраний план обміну створити неможливо.'");
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2) Экспорт
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции



 

#Область ОбработчикиОбновленияИнформационнойБазы

#КонецОбласти

#КонецОбласти



 
#Область ОбщиеПроцедурыИФункцииДляПлановОбменаРИБ

Функция РегистрыДляСозданияЗаданийКРасчетуСебестоимости() Экспорт
	
	ТипыРегистров = Новый Массив();
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииПроизводственныхЗатрат"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииПрочихРасходов"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииРасходовНаСебестоимостьТоваров"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииТоваровОрганизаций"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПартииТоваровПереданныеНаКомиссию"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.МатериалыИРаботыВПроизводстве"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ПрочиеРасходы"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.СебестоимостьТоваров"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыКОформлениюОтчетовКомитенту"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыОрганизаций"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыОрганизацийКПередаче"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.ТоварыПереданныеНаКомиссию"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Функция РегистрыДляСозданияЗаданийКРасчетуВзаиморасчетовСКлиентами() Экспорт
	
	ТипыРегистров = Новый Массив();
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентами"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоДокументам"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Функция РегистрыДляСозданияЗаданийКРасчетуВзаиморасчетовСПоставщиками() Экспорт
	
	ТипыРегистров = Новый Массив();
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками"));
	ТипыРегистров.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоДокументам"));
	
	Возврат ТипыРегистров;
	
КонецФункции

Процедура СоздатьЗаданияКРасчетуОффлайновыхРегистров(ПолученныеДанные, ИмяРегистраДляСозданияЗаписи) Экспорт
	
	ДокументЗадания = ПолученныеДанные.Отбор.Регистратор.Значение;
	
	//Задания для расчета полученных данных
	ТаблицаНабора = Новый ТаблицаЗначений();
	ТаблицаНабора.Колонки.Добавить("Период");
	
	Если ПолученныеДанные.Количество() > 0 Тогда
		
		ТаблицаНабора = ПолученныеДанные.Выгрузить();
		ТаблицаНабора.Свернуть("Период");
		
		Для Каждого СтрокаТаблицы Из ТаблицаНабора Цикл
			СтрокаТаблицы.Период = НачалоМесяца(СтрокаТаблицы.Период);
			РегистрыСведений[ИмяРегистраДляСозданияЗаписи].СоздатьЗаписьРегистра(СтрокаТаблицы.Период, ДокументЗадания);
		КонецЦикла;
		
	КонецЕсли;
	
	//Задания для перерасчета имеющихся в базе данных
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВыбираемыйРегистр.Период, МЕСЯЦ) КАК ПериодЗадания
		|ИЗ
		|	РегистрНакопления.%ИмяРегистра% КАК ВыбираемыйРегистр
		|ГДЕ
		|	ВыбираемыйРегистр.Регистратор = &Регистратор");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра%", ПолученныеДанные.Метаданные().Имя);
	Запрос.УстановитьПараметр("Регистратор", ДокументЗадания);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТаблицаНабора.Найти(Выборка.ПериодЗадания, "Период") = Неопределено Тогда
			РегистрыСведений[ИмяРегистраДляСозданияЗаписи].СоздатьЗаписьРегистра(Выборка.ПериодЗадания, ДокументЗадания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииДляПланаОбменаРибСОтборами

// Формирует текст запроса и параметры запроса по узлам обмена
// Для контроля прохождения фильтра ПРО
Процедура ЗаполнитьПараметрыЗапроса(Объект, ТекстЗапроса, ПараметрыЗапроса) Экспорт
	
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект);
	ТекстЗапроса     = СформироватьТекстЗапросаПравилРегистрации();
	
КонецПроцедуры

// Определяет параметры запроса ПРО для выгружаемых объектов

// Возвращаемое значение:
//  ПараметрыЗапроса - Структура параметров запроса
//    Отказ                 - Отказ от выполнения регистрации
//    Подразделения         - Массив подразделений объекта
//    Организации           - Массив организаций объекта
//    ВидыЦен               - Массив видов цен объекта
//    ФильтрПоПодразделению - Булево Определяет применение к объекту фильтра по подразделению
//    ФильтрПоОрганизации   - Булево Определяет применение к объекту фильтра по организации
//    ФильтрПоВидуЦен       - Булево Определяет применение к объекту фильтра по виду цен
//
Функция ОпределитьПараметрыЗапросаОбъекта(ЭлементДанных, ТипЗначенияОбъекта = Неопределено, ФормироватьИерархию = Истина) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Отказ", Ложь);
	
	ПараметрыЗапроса.Вставить("Подразделения", Новый Массив);
	ПараметрыЗапроса.Вставить("Организации",   Новый Массив);
	ПараметрыЗапроса.Вставить("ВидыЦен",       Новый Массив);
	
	ПараметрыЗапроса.Вставить("ФильтрПоПодразделению", Ложь);
	ПараметрыЗапроса.Вставить("ФильтрПоОрганизации",   Ложь);
	ПараметрыЗапроса.Вставить("ФильтрПоВидуЦен",       Ложь);
	
	Если Не ЗначениеЗаполнено(ТипЗначенияОбъекта) Тогда
		ТипЗначенияОбъекта = ТипЗнч(ЭлементДанных);
	КонецЕсли;
	
	Если ТипЗначенияОбъекта = Тип("ДокументОбъект.Встреча")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗапланированноеВзаимодействие")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ТелефонныйЗвонок")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее")
		Или ТипЗначенияОбъекта = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		
		ЗначенияФильтра_ДокументовВзаимодействия(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВзаимозачетЗадолженности") Тогда
		
		ЗначенияФильтра_ВзаимозачетЗадолженности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СверкаВзаиморасчетов") Тогда
		
		ЗначенияФильтра_СверкаВзаиморасчетов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеЗадолженности") Тогда
		
		ЗначенияФильтра_СписаниеЗадолженности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		
		ЗначенияФильтра_АвансовыйОтчет(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		ЗначенияФильтра_ВозвратТоваровПоставщику(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыкупВозвратнойТарыУПоставщика") Тогда
		
		ЗначенияФильтра_ВыкупВозвратнойТарыУПоставщика(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ДоверенностьВыданная") Тогда
		
		ЗначенияФильтра_ДоверенностьВыданная(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ЗначенияФильтра_ЗаказПоставщику(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланЗакупок") Тогда
		
		ЗначенияФильтра_ПланЗакупок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		ЗначенияФильтра_ПоступлениеТоваровУслуг(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоступлениеУслугПрочихАктивов") Тогда
		
		ЗначенияФильтра_ПоступлениеУслугПрочихАктивов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика") Тогда
		
		ЗначенияФильтра_РегистрацияЦенНоменклатурыПоставщика(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СоглашениеСПоставщиком") Тогда
		
		ЗначенияФильтра_СоглашениеСПоставщиком(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ТаможеннаяДекларацияИмпорт") Тогда
		
		ЗначенияФильтра_ТаможеннаяДекларацияИмпорт(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_ВозвратТоваровМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_ОтчетПоКомиссииМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_ПередачаТоваровМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		
		ЗначенияФильтра_ОтчетКомиссионера(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомиссионераОСписании") Тогда
		
		ЗначенияФильтра_ОтчетКомиссионераОСписании(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		
		ЗначенияФильтра_ОтчетКомитенту(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		
		ЗначенияФильтра_ОтчетКомитентуОСписании(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ЗначенияФильтра_АктВыполненныхРабот(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
		
		ЗначенияФильтра_ВозвратПодарочныхСертификатов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		
		ЗначенияФильтра_ВозвратТоваровОтКлиента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыкупВозвратнойТарыКлиентом") Тогда
		
		ЗначенияФильтра_ВыкупВозвратнойТарыКлиентом(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		ЗначенияФильтра_ЗаказКлиента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ЗначенияФильтра_ЗаявкаНаВозвратТоваровОтКлиента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		
		ЗначенияФильтра_ОтчетОРозничныхПродажах(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ЗначенияФильтра_ПеремещениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланПродаж") Тогда
		
		ЗначенияФильтра_ПланПродажИВнутреннегоПотребления(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланПродажПоКатегориям") Тогда
		
		ЗначенияФильтра_ПланПродажПоКатегориям(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РеализацияПодарочныхСертификатов") Тогда
		
		ЗначенияФильтра_РеализацияПодарочныхСертификатов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ЗначенияФильтра_РеализацияТоваровИУслуг(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов") Тогда
		
		ЗначенияФильтра_РеализацияУслугПрочихАктивов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		
		ЗначенияФильтра_СчетНаОплатуКлиенту(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ТранспортнаяНакладная") Тогда
		
		ЗначенияФильтра_ТранспортнаяНакладная(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.АннулированиеПодарочныхСертификатов") Тогда
		
		ЗначенияФильтра_АннулированиеПодарочныхСертификатов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВводОстатков") Тогда
		
		ЗначенияФильтра_ВводОстатков(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") Тогда
		
		ЗначенияФильтра_ЗаданиеТорговомуПредставителю(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
		ЗначенияФильтра_КоммерческоеПредложениеКлиенту(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаНазначенияТоваров") Тогда
		
		ЗначенияФильтра_КорректировкаНазначенияТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.НачисленияКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_НачисленияКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ДвижениеПрочихАктивовПассивов") Тогда
		
		ЗначенияФильтра_ДвижениеПрочихАктивовПассивов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПереоценкаВалютныхСредств") Тогда
		
		ЗначенияФильтра_ПереоценкаВалютныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПрочиеДоходыРасходы") Тогда
		
		ЗначенияФильтра_ПрочиеДоходыРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РаспределениеДоходовИРасходовПоНаправлениямДеятельности") Тогда
		
		ЗначенияФильтра_РаспределениеДоходовИРасходовПоНаправлениямДеятельности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РаспределениеРасходовБудущихПериодов") Тогда
		
		ЗначенияФильтра_РаспределениеРасходовБудущихПериодов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасчетСебестоимостиТоваров") Тогда
		
		ЗначенияФильтра_РасчетСебестоимостиТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		
		ЗначенияФильтра_УстановкаЦенНоменклатуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
		
		ЗначенияФильтра_ВнутреннееПотреблениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаданиеНаПеревозку") Тогда
		
		ЗначенияФильтра_ЗаданиеНаПеревозку(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
		
		ЗначенияФильтра_ЗаказНаВнутреннееПотребление(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
		
		ЗначенияФильтра_ЗаказНаПеремещение(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаказНаСборку") Тогда
		
		ЗначенияФильтра_ЗаказНаСборку(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ИзменениеАссортимента") Тогда
		
		ЗначенияФильтра_ИзменениеАссортимента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаОбособленногоУчетаЗапасов") Тогда
		
		ЗначенияФильтра_КорректировкаОбособленногоУчетаЗапасов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОприходованиеИзлишковТоваров") Тогда
		
		ЗначенияФильтра_ОприходованиеИзлишковТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаОтражениеИзлишковТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаОтражениеИзлишковТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаОтражениеНедостачТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаОтражениеНедостачТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаОтражениеПорчиТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаОтражениеПорчиТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОрдерНаПеремещениеТоваров") Тогда
		
		ЗначенияФильтра_ОрдерНаПеремещениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПересортицаТоваров") Тогда
		
		ЗначенияФильтра_ПересортицаТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПересчетТоваров") Тогда
		
		ЗначенияФильтра_ПересчетТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПланСборкиРазборки") Тогда
		
		ЗначенияФильтра_ПланСборкиРазборки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию)
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПорчаТоваров") Тогда
		
		ЗначенияФильтра_ПорчаТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда
		
		ЗначенияФильтра_ПриходныйОрдерНаТовары(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПрочееОприходованиеТоваров") Тогда
		
		ЗначенияФильтра_ПрочееОприходованиеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		
		ЗначенияФильтра_РасходныйОрдерНаТовары(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СборкаТоваров") Тогда
		
		ЗначенияФильтра_СборкаТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеНедостачТоваров") Тогда
		
		ЗначенияФильтра_СписаниеНедостачТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УстановкаБлокировокЯчеек") Тогда
		
		ЗначенияФильтра_УстановкаБлокировокЯчеек(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ИнвентаризационнаяОпись") Тогда
		
		ЗначенияФильтра_ИнвентаризационнаяОпись(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.УстановкаКвотАссортимента") Тогда
		
		ЗначенияФильтра_УстановкаКвотАссортимента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВнесениеДенежныхСредствВКассуККМ") Тогда
		
		ЗначенияФильтра_ВнесениеДенежныхСредствВКассуККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыемкаДенежныхСредствИзКассыККМ") Тогда
		
		ЗначенияФильтра_ВыемкаДенежныхСредствИзКассыККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		ЗначенияФильтра_ЗаявкаНаРасходованиеДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЛистКассовойКниги") Тогда
		
		ЗначенияФильтра_ЛистКассовойКниги(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КассоваяСмена") Тогда
		
		ЗначенияФильтра_КассоваяСмена(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЛимитыРасходаДенежныхСредств") Тогда
		
		ЗначенияФильтра_ЛимитыРасходаДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
		
		ЗначенияФильтра_ОперацияПоПлатежнойКарте(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетБанкаПоОперациямЭквайринга") Тогда
		
		ЗначенияФильтра_ОтчетБанкаПоОперациямЭквайринга(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОжидаемоеПоступлениеДенежныхСредств") Тогда
		
		ЗначенияФильтра_ОжидаемоеПоступлениеДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		ЗначенияФильтра_ПоступлениеБезналичныхДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
		ЗначенияФильтра_ПриходныйКассовыйОрдер(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
		
		ЗначенияФильтра_РаспоряжениеНаПеремещениеДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		ЗначенияФильтра_РасходныйКассовыйОрдер(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ЗначенияФильтра_СписаниеБезналичныхДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЧекККМ") Тогда
		
		ЗначенияФильтра_ЧекККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
		
		ЗначенияФильтра_ЧекККМВозврат(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтражениеРасхожденийПриИнкассацииДенежныхСредств") Тогда
		
		ЗначенияФильтра_ОтражениеРасхожденийПриИнкассацииДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств") Тогда
		
		ЗначенияФильтра_ИнвентаризацияНаличныхДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ВыгрузкаРегламентированныхОтчетов") Тогда
		
		ЗначенияФильтра_ВыгрузкаРегламентированныхОтчетов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЗаявкаНаПокупкуПродажуВалюты") Тогда
		
		ЗначенияФильтра_ЗаявкаНаПокупкуПродажуВалюты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.КорректировкаНалоговогоНазначенияЗапасов") Тогда
		
		ЗначенияФильтра_КорректировкаНалоговогоНазначенияЗапасов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.НалоговаяНакладная") Тогда
		
		ЗначенияФильтра_НалоговаяНакладная(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ОтчетОРозничнойВыручке") Тогда
		
		ЗначенияФильтра_ОтчетОРозничнойВыручке(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПокупкаПродажаВалюты") Тогда
		
		ЗначенияФильтра_ПокупкаПродажаВалюты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.Приложение2КНалоговойНакладной") Тогда
		
		ЗначенияФильтра_Приложение2КНалоговойНакладной(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РегистрацияВходящегоНалоговогоДокумента") Тогда
		
		ЗначенияФильтра_РегистрацияВходящегоНалоговогоДокумента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
		
		ЗначенияФильтра_РегламентированныйОтчет(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ЧекККМ") Тогда
		
		ЗначенияФильтра_ЧекККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТМЦВЭксплуатации") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТМЦВЭксплуатации(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ВыручкаИСебестоимостьПродаж") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ВыручкаИСебестоимостьПродаж(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвижениеТоваров") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвижениеТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияДенежныеСредстваДоходыРасходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваДоходыРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияДенежныеСредстваКонтрагент") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваКонтрагент(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.УДАЛИТЬДвиженияДенежныеСредстваПрочиеАктивыПассивы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваПрочиеАктивыПассивы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияДенежныхСредств") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.Закупки") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Закупки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияДоходыРасходыПрочиеАктивыПассивы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияДоходыРасходыПрочиеАктивыПассивы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияКонтрагентДоходыРасходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияКонтрагентДоходыРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияКонтрагентКонтрагент") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияКонтрагентКонтрагент(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияНоменклатураДоходыРасходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияНоменклатураДоходыРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияНоменклатураНоменклатура") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияНоменклатураНоменклатура(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДвиженияСерийТоваров") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДвиженияСерийТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваБезналичные") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваБезналичные(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваВКассахККМ") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваВКассахККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваКВыплате") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваКВыплате(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваНаличные") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваНаличные(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ДенежныеСредстваУПодотчетныхЛиц") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваУПодотчетныхЛиц(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыКлиентов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Заказы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыНаВнутреннееПотребление") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Заказы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыНаПеремещение") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЗаказыНаПеремещение(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыНаСборку") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЗаказыНаСборку(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаказыПоставщикам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Заказы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЗаявкиНаВозвратТоваровОтКлиентов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЗаявкиНаВозвратТоваровОтКлиентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ЛимитыРасходаДенежныхСредств") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ЛимитыРасходаДенежныхСредств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыОплатКлиентов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыОплатКлиентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию)
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыОплатПоставщикам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыОплатПоставщикам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию)
	
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ОбеспечениеЗаказов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Заказы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ОбеспечениеЗаказовРаботами") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_Заказы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииЗатратНаВыпуск") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииЗатратНаВыпуск(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииПроизводственныхЗатрат") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииПроизводственныхЗатрат(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииПрочихРасходов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииПрочихРасходов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииРасходовНаСебестоимостьТоваров") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииРасходовНаСебестоимостьТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииТоваровОрганизаций") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииТоваровОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПартииТоваровПереданныеНаКомиссию") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПартииТоваровПереданныеНаКомиссию(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПереданнаяВозвратнаяТара") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПереданнаяВозвратнаяТара(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыЗакупок") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыЗакупок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыПотребленияКомплектующих") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыПотребленияКомплектующих(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыПродаж") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыПродаж(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыПродажПоКатегориям") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыПродажПоКатегориям(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПланыСборкиРазборки") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПланыСборкиРазборки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПринятаяВозвратнаяТара") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПринятаяВозвратнаяТара(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПрочиеАктивыПассивы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПрочиеАктивыПассивы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПрочиеДоходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПрочиеДоходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ПрочиеРасходы") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ПрочиеРасходы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыПоДоговорамКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыПоДоговорамКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыПоЭквайрингу") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыПоЭквайрингу(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСКлиентами") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыСКлиентами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСКлиентамиПоДокументам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыСКлиентамиПоДокументам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСПоставщиками") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыСПоставщиками(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РасчетыСПоставщикамиПоДокументам") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РасчетыСПоставщикамиПоДокументам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.СвободныеОстатки") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_СвободныеОстатки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.СебестоимостьТоваров") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_СебестоимостьТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыВЯчейках") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыВЯчейках(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОтбору") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОтбору(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОтгрузке") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОтгрузке(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОформлениюИзлишковНедостач") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюИзлишковНедостач(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОформлениюОтчетовКомитенту") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюОтчетовКомитенту(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКОформлениюПоступления") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюПоступления(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыКПоступлению") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыКПоступлению(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыНаСкладах") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыНаСкладах(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыОрганизаций") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыОрганизацийКОформлению") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизацийКОформлению(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыОрганизацийКПередаче") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизацийКПередаче(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ТоварыПереданныеНаКомиссию") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ТоварыПереданныеНаКомиссию(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.ФинансовыеРезультаты") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_ФинансовыеРезультаты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.КнигаДоходовРасходовПоЕдиномуНалогу") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_КнигаДоходовРасходовПоЕдиномуНалогу(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.КорректировкиНДСПартий") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_КорректировкиНДСПартий(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСНоменклатурныйСоставДляНалоговыхНакладных") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСНоменклатурныйСоставДляНалоговыхНакладных(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСРасчетНалоговогоКредита") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСРасчетНалоговогоКредита(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСРасчетНалоговыхОбязательств") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСРасчетНалоговыхОбязательств(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСРеестрВыданныхНалоговыхДокументов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСРеестрВыданныхНалоговыхДокументов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДСРеестрПолученныхНалоговыхДокументов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДСРеестрПолученныхНалоговыхДокументов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрНакопленияЗапись.РозничныеПродажиПодакцизныхТоваров") Тогда
		
		ЗначенияФильтра_РегистрыНакопления_РозничныеПродажиПодакцизныхТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.Ассортимент") Тогда
		
		ЗначенияФильтра_РегистрыСведений_Ассортимент(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.БлокировкиСкладскихЯчеек") Тогда
		
		ЗначенияФильтра_РегистрыСведений_БлокировкиСкладскихЯчеек(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДоступныеОстаткиПланируемыхПоступлений") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДоступныеОстаткиПланируемыхПоступлений(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ГрафикНачисленийКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ГрафикНачисленийКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ГрафикОплатКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ГрафикОплатКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ГрафикТраншейКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ГрафикТраншейКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДатыПередачиТоваровНаКомиссию") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДатыПередачиТоваровНаКомиссию(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДатыПоступленияТоваровОрганизаций") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДатыПоступленияТоваровОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДействиеСкидокНаценок") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДействиеСкидокНаценок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ДокументыПоВыпущеннойПродукции") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ДокументыПоВыпущеннойПродукции(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ИсточникиПервичногоИнтереса") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ИсточникиПервичногоИнтереса(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.КонтактыВзаимодействий") Тогда
		
		ЗначенияФильтра_РегистрыСведений_КонтактыВзаимодействий(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.КвотыАссортимента") Тогда
		
		ЗначенияФильтра_РегистрыСведений_КвотыАссортимента(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.КодыТоваровПодключаемогоОборудованияOffline") Тогда
		
		ЗначенияФильтра_РегистрыСведений_КодыТоваровПодключаемогоОборудованияOffline(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаКонтроляОбеспечения") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаКонтроляОбеспечения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаПередачиТоваровМеждуОрганизациями") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаПередачиТоваровМеждуОрганизациями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаРаспределенияПоНаправлениямДеятельности") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаРаспределенияПоНаправлениямДеятельности(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкиАдресныхСкладов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкиАдресныхСкладов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ВариантыОбеспеченияРаботами") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ВариантыОбеспеченияРаботами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ВариантыОбеспеченияТоварами") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ВариантыОбеспеченияТоварами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПравилаРазмещенияТоваровВЯчейках") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПравилаРазмещенияТоваровВЯчейках(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ИсторияИзмененияФорматовМагазинов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ИсторияИзмененияФорматовМагазинов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПрогнозыРасходаУпаковок") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПрогнозыРасходаУпаковок(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РазмещениеНоменклатурыПоСкладскимЯчейкам") Тогда
		
		ЗначенияФильтра_РегистрыСведений_РазмещениеНоменклатурыПоСкладскимЯчейкам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияЗаказовКлиентов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СостоянияЗаказовКлиентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияЗаказовПоставщикам") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СостоянияЗаказовПоставщикам(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.УчетнаяПолитикаОрганизаций") Тогда
		
		ЗначенияФильтра_РегистрыСведений_УчетнаяПолитикаОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РегламентныеЗаданияЗакрытияМесяца") Тогда
		
		ЗначенияФильтра_РегистрыСведений_РегламентныеЗаданияЗакрытияМесяца(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СостоянияПересчетовЯчеек") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СостоянияПересчетовЯчеек(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ПроцентныеСтавкиКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ПроцентныеСтавкиКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СтатистикаСделокСКлиентами") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СтатистикаСделокСКлиентами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.СтоимостьТоваров") Тогда
		
		ЗначенияФильтра_РегистрыСведений_СтоимостьТоваров(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ТоварныеОграничения") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ТоварныеОграничения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ЦеныНоменклатуры") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ЦеныНоменклатурыПоставщиков") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатурыПоставщиков(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.ШтрихкодыНоменклатуры") Тогда
		
		ЗначенияФильтра_РегистрыСведений_ШтрихкодыНоменклатуры(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаНумерацииНалоговыхДокументов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаНумерацииНалоговыхДокументов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.НастройкаПечатиНалоговыхДокументов") Тогда
		
		ЗначенияФильтра_РегистрыСведений_НастройкаПечатиНалоговыхДокументов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.Нумерация") Тогда
		
		ЗначенияФильтра_РегистрыСведений_Нумерация(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийЗапись.РасшифровкиРегламентированныхОтчетовЗвит1С") Тогда
		
		ЗначенияФильтра_РегистрыСведений_РасшифровкиРегламентированныхОтчетовЗвит1С(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ПретензииКлиентов") Тогда
		
		ЗначенияФильтра_Справочники_ПретензииКлиентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Проекты") Тогда
		
		ЗначенияФильтра_Справочники_Проекты(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СделкиСКлиентами") Тогда
		
		ЗначенияФильтра_Справочники_СделкиСКлиентами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДоговорыКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_Справочники_ДоговорыКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		
		ЗначенияФильтра_Справочники_ДоговорыКонтрагентов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СоглашенияСПоставщиками") Тогда
		
		ЗначенияФильтра_Справочники_СоглашенияСПоставщиками(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СоглашенияСКлиентами") Тогда
		
		ЗначенияФильтра_Справочники_СоглашенияСКлиентами(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ВариантыГрафиковКредитовИДепозитов") Тогда
		
		ЗначенияФильтра_Справочники_ВариантыГрафиковКредитовИДепозитов(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ВидыЦен") Тогда
		
		ЗначенияФильтра_Справочники_ВидыЦен(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Пользователи") Тогда
		
		ЗначенияФильтра_Справочники_Пользователи(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.УсловияОбслуживанияПартнеровТорговымиПредставителями") Тогда
		
		ЗначенияФильтра_Справочники_УсловияОбслуживанияПартнеровТорговымиПредставителями(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ОбластиХранения") Тогда
		
		ЗначенияФильтра_Справочники_ОбластиХранения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ПодключаемоеОборудование") Тогда
		
		ЗначенияФильтра_Справочники_ПодключаемоеОборудование(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДрайверыОборудования") Тогда
		
		ЗначенияФильтра_Справочники_ДрайверыОборудования(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.РабочиеУчастки") Тогда
		
		ЗначенияФильтра_Справочники_РабочиеУчастки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СкладскиеПомещения") Тогда
		
		ЗначенияФильтра_Справочники_СкладскиеПомещения(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СкладскиеЯчейки") Тогда
		
		ЗначенияФильтра_Справочники_СкладскиеЯчейки(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СпособыОбеспеченияПотребностей") Тогда
		
		ЗначенияФильтра_Справочники_СпособыОбеспеченияПотребностей(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.БанковскиеСчетаОрганизаций") Тогда
		
		ЗначенияФильтра_Справочники_БанковскиеСчетаОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Кассы") Тогда
		
		ЗначенияФильтра_Справочники_Кассы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.КассыККМ") Тогда
		
		ЗначенияФильтра_Справочники_КассыККМ(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Организации") Тогда
		
		ЗначенияФильтра_Справочники_Организации(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ОтветственныеЛицаОрганизаций") Тогда
		
		ЗначенияФильтра_Справочники_ОтветственныеЛицаОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		
		ЗначенияФильтра_Справочники_СтруктураПредприятия(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ЭквайринговыеТерминалы") Тогда
		
		ЗначенияФильтра_Справочники_ЭквайринговыеТерминалы(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ОбособленныеПодразделенияОрганизаций") Тогда
		
		ЗначенияФильтра_Справочники_ОбособленныеПодразделенияОрганизаций(ЭлементДанных, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

//Очищает пустые значения в массиве объектов
//
Процедура ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов) Экспорт
	
	МаксимальныйИндекс = МассивОбъектов.ВГраница();
	
	Если МаксимальныйИндекс > 0 Тогда
		
		Пока МаксимальныйИндекс >= 0 Цикл
			
			ЭлементМассива = МассивОбъектов[МаксимальныйИндекс];
			
			Если Не ЗначениеЗаполнено(ЭлементМассива) Тогда
				МассивОбъектов.Удалить(МаксимальныйИндекс);
			КонецЕсли; 
			
			МаксимальныйИндекс = МаксимальныйИндекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того, что объект не проходит установленный фильтр
//
// Возращаемое значение:
//  Булево - Отказ от действий с объектом
//
Функция КонтрольПрохожденияФильтра(ЭлементДанных, УзелПланаОбмена = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	ТипЗначенияОбъекта = ТипЗнч(ЭлементДанных);
	
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ЭлементДанных, ТипЗначенияОбъекта, Ложь);
	
	Если ПараметрыЗапроса.Отказ Тогда
		Возврат Истина;
	Иначе
		Отказ = НеСоответствиеНастроекУзлаИОбъекта(ПараметрыЗапроса, УзелПланаОбмена);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Если ТипЗначенияОбъекта = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
				
				Отказ = КонтрольОбъектаРасчетовВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника Тогда
				//По платежному документу
				ЗначенияФильтра_СписаниеБезналичныхДенежныхСредств(ЭлементДанных.СписаниеБезналичныхДенежныхСредств, ПараметрыЗапроса, Ложь);
				Отказ = НеСоответствиеНастроекУзлаИОбъекта(ПараметрыЗапроса, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
				
				Отказ = КонтрольПодразделенияВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам Тогда
				//Проверка договора кредитов и депозитов
				
				Отказ = КонтрольДоговораКредитаИДепозитаВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
				
				Отказ = КонтрольОбъектаРасчетовВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
				//Проверка по расходно-кассовому ордеру
				ЗначенияФильтра_РасходныйКассовыйОрдер(ЭлементДанных.РасходныйКассовыйОрдер, ПараметрыЗапроса, Ложь);
				Отказ = НеСоответствиеНастроекУзлаИОбъекта(ПараметрыЗапроса, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
				//По счету банка
				Отказ = КонтрольБанковскогоСчета(ЭлементДанных, УзелПланаОбмена, Ложь);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
				
				Отказ = КонтрольПодразделенияВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
				
				Отказ = КонтрольДоговораКредитаИДепозитаВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
				
				Отказ = КонтрольОбъектаРасчетовВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
				
				Отказ = КонтрольПодразделенияВШапке(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
				
				Отказ = КонтрольКассыПолучателя(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
				
				Отказ = КонтрольПодразделенияВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
				
				Отказ = КонтрольДоговораКредитаИДепозитаВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
				
				Отказ = КонтрольБанковскогоСчета(ЭлементДанных, УзелПланаОбмена, Ложь);
	
			КонецЕсли;
			
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		
			Если ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику 
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
				//Проверка объекта расчетов
				
				Отказ = КонтрольОбъектаРасчетовВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
				//Проверка договора кредитов и депозитов
				
				Отказ = КонтрольДоговораКредитаИДепозитаВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
				//Проверка банковского счета получателя
				
				Отказ = КонтрольБанковскогоСчета(ЭлементДанных, УзелПланаОбмена, Истина);
			//Проверить при разработке РИБа
			//ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
				//Или ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
				//Проверка подразделения в шапке
				
				//Отказ = КонтрольПодразделенияВШапке(ЭлементДанных, УзелПланаОбмена);
				
			ИначеЕсли ЭлементДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
				//Проверка подразделения в таб. части
				
				Отказ = КонтрольПодразделенияВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Возвращает иерархию элементов структуры предприятия
// 
// Возращаемое значение:
//  Массив - Список родителей элемента справочника СтруктураПредприятия
//
Функция СформироватьИерархиюЭлементов(СсылкаНаОбъект, ФормироватьИерархию) Экспорт
	
	ИерархияОбъектов = Новый Массив;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		Если ФормироватьИерархию Тогда
			
			ИерархияОбъектов.Добавить(СсылкаНаОбъект);
			ТекущийРодитель = СсылкаНаОбъект.Родитель;
			
			Пока ТекущийРодитель <> Справочники[СсылкаНаОбъект.Метаданные().Имя].ПустаяСсылка() Цикл
				ИерархияОбъектов.Добавить(ТекущийРодитель);
				ТекущийРодитель = ТекущийРодитель.Родитель;
			КонецЦикла;
			
		Иначе
			ИерархияОбъектов.Добавить(СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИерархияОбъектов;
	
КонецФункции

// Возвращает массив с организациями для использования в запросе ПРО
//
// Возращаемое значение:
//  Массив - Список организаций
//
Функция СформироватьМассивОрганизаций(ЗначениеМассива) Экспорт
	
	Если ТипЗнч(ЗначениеМассива) = Тип("Массив") Тогда 
		МассивОрганизаций = ЗначениеМассива;
	Иначе
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(ЗначениеМассива);
	КонецЕсли;
	
	Возврат МассивОрганизаций;
	
КонецФункции

// Возвращает текст запроса ПРО для использования его в обработчиках правил регистрации
//
// Возращаемое значение:
//  Строка - Текст запроса ПРО
//
Функция СформироватьТекстЗапросаПравилРегистрации() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.СОтборами КАК ПланОбменаОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СОтборами.Подразделения КАК ПланОбменаТаблицаПодразделения
		|		ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаТаблицаПодразделения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СОтборами.Организации КАК ПланОбменаТаблицаОрганизации
		|		ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаТаблицаОрганизации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СОтборами.ВидыЦен КАК ПланОбменаТаблицаВидыЦен
		|		ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаТаблицаВидыЦен.Ссылка
		|ГДЕ
		|	НЕ ПланОбменаОсновнаяТаблица.Ссылка = &СОтборамиЭтотУзел
		|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
		|	И (НЕ &СвойствоОбъекта_ФильтрПоОрганизации
		|			ИЛИ (ПланОбменаТаблицаОрганизации.Организация В (&СвойствоОбъекта_Организации)
		|				ИЛИ НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоОрганизациям))
		|	И (НЕ &СвойствоОбъекта_ФильтрПоПодразделению
		|			ИЛИ ПланОбменаТаблицаПодразделения.Подразделение В (&СвойствоОбъекта_Подразделения))
		|	И (НЕ &СвойствоОбъекта_ФильтрПоВидуЦен
		|			ИЛИ (ПланОбменаТаблицаВидыЦен.ВидЦены В (&СвойствоОбъекта_ВидыЦен)
		|				ИЛИ НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоВидамЦен))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает признак того, что объект не проходит установленный фильтр

//
// Возращаемое значение:
//  Булево - Отказ от действий с объектом
//
Функция ОбъектНеПроходитФильтр(ЭлементДанных, УзелПланаОбмена = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТипЗначенияОбъекта = ТипЗнч(ЭлементДанных);
	
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(ЭлементДанных, ТипЗначенияОбъекта, Ложь);
	
	Если ПараметрыЗапроса.Отказ Тогда
		Возврат Истина;
	Иначе
		Отказ = НастройкиУзлаНеСоответствуютОбъекту(ПараметрыЗапроса, УзелПланаОбмена);
	КонецЕсли;
	
	
	Возврат Отказ;
	
КонецФункции

Функция НастройкиУзлаНеСоответствуютОбъекту(ПараметрыЗапроса, УзелПланаОбмена = Неопределено)
	
	Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
		Если НеВсеОбъектыМассиваДоступны(ПараметрыЗапроса.Подразделения, МассивДоступныхПодразделений(УзелПланаОбмена)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоОрганизации Тогда
		МассивОрганизацийУзла = МассивДоступныхОрганизаций(УзелПланаОбмена);
		Если УзелПланаОбмена.ИспользоватьОтборПоОрганизациям
			И НеВсеОбъектыМассиваДоступны(ПараметрыЗапроса.Организации, МассивОрганизацийУзла) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоВидуЦен Тогда
		МассивВидовЦенУзла = МассивДоступныхВидовЦен(УзелПланаОбмена);
		Если УзелПланаОбмена.ИспользоватьОтборПоВидамЦен
			И НеВсеОбъектыМассиваДоступны(ПараметрыЗапроса.ВидыЦен, МассивВидовЦенУзла) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ФункцииПланаОбменаРИБСОтборами

#Область ПроцедурыИФункцииОпределенияУсловийВыгрузкиДокументовПланаОбменаРибСОтборами

#Область Документы

#Область ДокументыВзаимодействия

Процедура ЗначенияФильтра_ДокументовВзаимодействия(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
//		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "ТекущееПодразделение"), ФормироватьИерархию);
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ДокументыВзаиморасчетов

Процедура ЗначенияФильтра_ВзаимозачетЗадолженности(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	Если Объект.РасчетыМеждуОрганизациямиДебитор Тогда
		МассивОрганизаций.Добавить(Объект.КонтрагентДебитор);
	КонецЕсли;
	
	Если Объект.РасчетыМеждуОрганизациямиКредитор Тогда
		МассивОрганизаций.Добавить(Объект.КонтрагентКредитор);
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(МассивОрганизаций);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_СверкаВзаиморасчетов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеЗадолженности(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти

#Область ДокументыЗакупки

Процедура ЗначенияФильтра_АвансовыйОтчет(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры


Процедура ЗначенияФильтра_ВозвратТоваровПоставщику(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ВыкупВозвратнойТарыУПоставщика(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ДоверенностьВыданная(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказПоставщику(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры



Процедура ЗначенияФильтра_ПланЗакупок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ПодразделениеОбъекта = Объект.Подразделение;
	Иначе
		ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение");
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПоступлениеТоваровУслуг(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ПоступлениеУслугПрочихАктивов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОбъектов = Объект.Расходы.Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Если ФормироватьИерархию Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка КАК Подразделение
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Ссылка В(&МассивСсылок)
			|ИТОГИ ПО
			|	Подразделение ТОЛЬКО ИЕРАРХИЯ");
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	КонецЕсли;
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрацияЦенНоменклатурыПоставщика(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.Соглашение);
	
КонецПроцедуры

Процедура ЗначенияФильтра_СоглашениеСПоставщиком(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.Соглашение);
	
КонецПроцедуры



Процедура ЗначенияФильтра_ТаможеннаяДекларацияИмпорт(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка В (&МассивСкладов)");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("МассивСкладов", Объект.Товары.ВыгрузитьКолонку("Склад"));
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ДокументыИнтеркампани

Процедура ЗначенияФильтра_ВозвратТоваровМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение"), ФормироватьИерархию);
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
	
	ПараметрыЗапроса.Организации = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетПоКомиссииМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.Комиссионер);
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПередачаТоваровМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение"), ФормироватьИерархию);
		
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
	
	ПараметрыЗапроса.Организации = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ДокументыКомиссии

Процедура ЗначенияФильтра_ОтчетКомиссионера(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетКомиссионераОСписании(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетКомитенту(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетКомитентуОСписании(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти 

#Область ДокументыПродажи

Процедура ЗначенияФильтра_АктВыполненныхРабот(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ВозвратПодарочныхСертификатов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.КассоваяСмена);
КонецПроцедуры

Процедура ЗначенияФильтра_ВозвратТоваровОтКлиента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ВыкупВозвратнойТарыКлиентом(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказКлиента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры


Процедура ЗначенияФильтра_ЗаявкаНаВозвратТоваровОтКлиента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры


Процедура ЗначенияФильтра_ОтчетОРозничныхПродажах(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ПеремещениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В (&МассивСкладов)");
		
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(Объект.СкладОтправитель);
	МассивСкладов.Добавить(Объект.СкладПолучатель);

	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПланПродажИВнутреннегоПотребления(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	Иначе
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПлана, "ЗаполнятьСклад") Тогда
			
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка В (&МассивСкладов)");
				
			Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
			Запрос.УстановитьПараметр("МассивСкладов", Объект.Товары.ВыгрузитьКолонку("Склад"));
	
			МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
			ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
			ПараметрыЗапроса.Подразделения         = МассивОбъектов;
			ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_ПланПродажПоКатегориям(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.ВидПлана) Тогда
		ФлагиФильтра = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПлана, "ЗаполнятьСклад, ЗаполнятьПодразделение");
		Если ФлагиФильтра.ЗаполнятьСклад Тогда
			ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
		ИначеЕсли ФлагиФильтра.ЗаполнятьПодразделение Тогда
			ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РеализацияПодарочныхСертификатов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
КонецПроцедуры

Процедура ЗначенияФильтра_РеализацияТоваровИУслуг(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Организация",                     Объект.Организация);
	СтруктураОбъекта.Вставить("ТабЧастьТовары",                  Объект.Товары);
	СтруктураОбъекта.Вставить("ПодразделениеОбъекта",            Объект.Подразделение);
	СтруктураОбъекта.Вставить("НаименованиеКолонкиСклад",        "Склад");
	СтруктураОбъекта.Вставить("НаименованиеКолонкиНоменклатура", "Номенклатура");
	
	ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РеализацияУслугПрочихАктивов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
КонецПроцедуры

Процедура ЗначенияФильтра_СчетНаОплатуКлиенту(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.ДокументОснование);
КонецПроцедуры



Процедура ЗначенияФильтра_ТранспортнаяНакладная(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
		
		ПараметрыЗапросаДокументаОснования = ОпределитьПараметрыЗапросаОбъекта(СтрокаТаблицы.ДокументОснование.ПолучитьОбъект(),,ФормироватьИерархию);
		ПараметрыЗапроса = ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаДокументаОснования);
		
		Если ПараметрыЗапроса.Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ДокументыПрочее

Процедура ЗначенияФильтра_АннулированиеПодарочныхСертификатов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_ВводОстатков(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковКассыККМ.КассаККМ
			|ПОМЕСТИТЬ ТабличнаяЧастьКассыККМ
			|ИЗ
			|	&ТабличнаяЧастьКассыККМ КАК ВводОстатковКассыККМ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КассыККМ.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьКассыККМ КАК ТабличнаяЧастьКассыККМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
			|		ПО ТабличнаяЧастьКассыККМ.КассаККМ = КассыККМ.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьКассыККМ", Объект.КассыККМ.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВКассах Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковКассы.Касса
			|ПОМЕСТИТЬ ТабличнаяЧастьКассы
			|ИЗ
			|	&ТабличнаяЧастьКассы КАК ВводОстатковКассы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Кассы.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьКассы КАК ТабличнаяЧастьКассы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
			|		ПО ТабличнаяЧастьКассы.Касса = Кассы.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьКассы", Объект.Кассы.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ВводОстатковБанковскиеСчета.БанковскийСчет
			|ПОМЕСТИТЬ ТабличнаяЧастьБанковскиеСчета
			|ИЗ
			|	&ТабличнаяЧастьБанковскиеСчета КАК ВводОстатковБанковскиеСчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БанковскиеСчета.Подразделение КАК Подразделение
			|ИЗ
			|	ТабличнаяЧастьБанковскиеСчета КАК ТабличнаяЧастьБанковскиеСчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
			|		ПО ТабличнаяЧастьБанковскиеСчета.БанковскийСчет = БанковскиеСчета.Ссылка");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТабличнаяЧастьБанковскиеСчета", Объект.БанковскиеСчета.Выгрузить());
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств Тогда
		
		МассивОбъектов = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
		
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
		МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель); 

	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
		
		МассивОбъектов = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение"), ФормироватьИерархию);
		
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.СторноОтчетовПоЭквайрингу Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ТаблицаЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал
			|ПОМЕСТИТЬ ТаблицаЭквайринговыеТерминалы
			|ИЗ
			|	&ТаблицаЭквайринговыеТерминалы КАК ТаблицаЭквайринговыеТерминалы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БанковскиеСчета.Подразделение КАК Подразделение,
			|	БанковскиеСчета.Владелец КАК Организация
			|ИЗ
			|	ТаблицаЭквайринговыеТерминалы КАК ТаблицаЭквайринговыеТерминалы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
			|			ПО ЭквайринговыеТерминалы.БанковскийСчет = БанковскиеСчета.Ссылка
			|		ПО ТаблицаЭквайринговыеТерминалы.ЭквайринговыйТерминал = ЭквайринговыеТерминалы.Ссылка");
			
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("ТаблицаЭквайринговыеТерминалы", Объект.РасчетыПоЭквайрингу.Выгрузить());
		Результат = Запрос.Выполнить().Выгрузить();
		
		МассивОбъектов    = Результат.ВыгрузитьКолонку("Подразделение");
		МассивОрганизаций = Результат.ВыгрузитьКолонку("Организация");
		
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПодарочныеСертификаты Тогда
		ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
		
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		Иначе
			ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		КонецЕсли;
		МассивОбъектов = ПараметрыЗапроса.Подразделения;
		МассивОрганизаций = ПараметрыЗапроса.Организации;
	Иначе
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Ложь;
		ПараметрыЗапроса.ФильтрПоОрганизации   = Ложь;
		ПараметрыЗапроса.ФильтрПоВидуЦен       = Ложь;
		ПараметрыЗапроса.Отказ                 = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = МассивОрганизаций;

КонецПроцедуры

Процедура ЗначенияФильтра_ЗаданиеТорговомуПредставителю(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_КоммерческоеПредложениеКлиенту(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаНазначенияТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	КорректировкаНазначенияТоваровТовары.Склад
		|ПОМЕСТИТЬ ТабличнаяЧастьТовары
		|ИЗ
		|	&КорректировкаНазначенияТоваровТовары КАК КорректировкаНазначенияТоваровТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	ТабличнаяЧастьТовары КАК ТабличнаяЧастьТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ТабличнаяЧастьТовары.Склад = Склады.Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("КорректировкаНазначенияТоваровТовары", Объект.Товары.ВыгрузитьКолонку("Склад"));

	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);

	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);

	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;

КонецПроцедуры


Процедура ЗначенияФильтра_НачисленияКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_ДвижениеПрочихАктивовПассивов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры


Процедура ЗначенияФильтра_ПереоценкаВалютныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры


Процедура ЗначенияФильтра_ПрочиеДоходыРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_РаспределениеДоходовИРасходовПоНаправлениямДеятельности(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры


Процедура ЗначенияФильтра_РаспределениеРасходовБудущихПериодов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РасчетСебестоимостиТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = Истина;
КонецПроцедуры

Процедура ЗначенияФильтра_УстановкаЦенНоменклатуры(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = ПланыОбмена["СОтборами"].ЭтотУзел().ИспользоватьОтборПоВидамЦен;
КонецПроцедуры

Процедура ЗначенияФильтра_ВыгрузкаРегламентированныхОтчетов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаявкаНаПокупкуПродажуВалюты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаНалоговогоНазначенияЗапасов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_НалоговаяНакладная(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетОРозничнойВыручке(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ПокупкаПродажаВалюты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Приложение2КНалоговойНакладной(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрацияВходящегоНалоговогоДокумента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегламентированныйОтчет(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры


#КонецОбласти

#Область ДокументыСклад

Процедура ЗначенияФильтра_ВнутреннееПотреблениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаданиеНаПеревозку(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказНаВнутреннееПотребление(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказНаПеремещение(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В (&МассивСкладов)");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(Объект.СкладОтправитель);
	МассивСкладов.Добавить(Объект.СкладПолучатель);
	
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	МассивОрганизаций = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		МассивОрганизаций.Добавить(Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
	КонецЕсли;
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаказНаСборку(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ИзменениеАссортимента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.ОбъектПланирования);
КонецПроцедуры

Процедура ЗначенияФильтра_КорректировкаОбособленногоУчетаЗапасов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ОприходованиеИзлишковТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаОтражениеИзлишковТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаОтражениеНедостачТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаОтражениеПорчиТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ОрдерНаПеремещениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ПересортицаТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ПересчетТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ПланСборкиРазборки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ПорчаТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ПриходныйОрдерНаТовары(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ПрочееОприходованиеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РасходныйОрдерНаТовары(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_СборкаТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеНедостачТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_УстановкаБлокировокЯчеек(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_ИнвентаризационнаяОпись(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_УстановкаКвотАссортимента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.ОбъектПланирования);
КонецПроцедуры

#КонецОбласти

#Область ДокументыФинансы

Процедура ЗначенияФильтра_ВнесениеДенежныхСредствВКассуККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
КонецПроцедуры

Процедура ЗначенияФильтра_ВыемкаДенежныхСредствИзКассыККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
КонецПроцедуры

Процедура ЗначенияФильтра_ЗаявкаНаРасходованиеДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_ЛистКассовойКниги(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_КассоваяСмена(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
КонецПроцедуры

Процедура ЗначенияФильтра_ЛимитыРасходаДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям") Тогда
		
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям") Тогда
		
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям") Тогда
		
		ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОперацияПоПлатежнойКарте(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЕСТЬNULL(БанковскиеСчета.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|		ПО ЭквайринговыеТерминалы.БанковскийСчет = БанковскиеСчета.Ссылка
		|ГДЕ
		|	ЭквайринговыеТерминалы.Ссылка = &Ссылка");

	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЭквайринговыйТерминал);

	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);

	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);

	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ОтчетБанкаПоОперациямЭквайринга(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчет");
КонецПроцедуры

Процедура ЗначенияФильтра_ОжидаемоеПоступлениеДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет)
		Или ЗначениеЗаполнено(Объект.Касса) Тогда
		
		Если ПроверитьНаличиеСвязаннойСсылки(Объект.БанковскийСчет, ПараметрыЗапроса) Тогда
			ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчет");
			Возврат;
		ИначеЕсли ПроверитьНаличиеСвязаннойСсылки(Объект.Касса, ПараметрыЗапроса) Тогда
			ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Касса");
			Возврат;
		КонецЕсли;
		
	Иначе
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ПоступлениеБезналичныхДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчет");
КонецПроцедуры

Процедура ЗначенияФильтра_ПриходныйКассовыйОрдер(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Касса");
КонецПроцедуры

Процедура ЗначенияФильтра_РаспоряжениеНаПеремещениеДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БанковскиеСчетаОрганизаций.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	(БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчетПолучатель
		|			ИЛИ БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчет)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Кассы.Подразделение
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	(Кассы.Ссылка = &Касса
		|			ИЛИ Кассы.Ссылка = &КассаПолучатель)");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	Запрос.УстановитьПараметр("БанковскийСчет",           Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("БанковскийСчетПолучатель", Объект.БанковскийСчетПолучатель);
	Запрос.УстановитьПараметр("Касса",                    Объект.Касса);
	Запрос.УстановитьПараметр("КассаПолучатель",          Объект.КассаПолучатель);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РасходныйКассовыйОрдер(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Касса");
КонецПроцедуры

Процедура ЗначенияФильтра_СписаниеБезналичныхДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "БанковскийСчет");
КонецПроцедуры

Процедура ЗначенияФильтра_ЧекККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
КонецПроцедуры

Процедура ЗначенияФильтра_ЧекККМВозврат(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "КассаККМ");
КонецПроцедуры

Процедура ЗначенияФильтра_ОтражениеРасхожденийПриИнкассацииДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ОбщегоНазначения.СсылкаСуществует(Объект.РасходныйКассовыйОрдер) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Кассы.Подразделение КАК Подразделение
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
			|		ПО РасходныйКассовыйОрдер.Касса = Кассы.Ссылка
			|ГДЕ
			|	РасходныйКассовыйОрдер.Ссылка = &Ссылка");
			
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		
		Запрос.УстановитьПараметр("Ссылка", Объект.РасходныйКассовыйОрдер);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_ИнвентаризацияНаличныхДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ИнвентаризацияНаличныхДенежныхСредств.Касса
		|ПОМЕСТИТЬ ТабличнаяЧастьКассы
		|ИЗ
		|	&ТабличнаяЧастьКассы КАК ИнвентаризацияНаличныхДенежныхСредств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Кассы.Подразделение КАК Подразделение
		|ИЗ
		|	ТабличнаяЧастьКассы КАК ТабличнаяЧастьКассы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
		|		ПО ТабличнаяЧастьКассы.Касса = Кассы.Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ТабличнаяЧастьКассы", Объект.Кассы);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область РегистрыНакопления

#Область РегистрыЗаказов

Процедура ЗначенияФильтра_РегистрыНакопления_Заказы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

#КонецОбласти

#Область РегистрыПрочие



Процедура ЗначенияФильтра_РегистрыНакопления_ПартииЗатратНаВыпуск(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииПроизводственныхЗатрат(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииПрочихРасходов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииРасходовНаСебестоимостьТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.ПодразделениеРасходов, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииТоваровОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	//Если запись регистра не первичная и это периферийный узел то не регистрируем изменения
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено И Не Объект.Первичное Тогда
		ПараметрыЗапроса.Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПартииТоваровПереданныеНаКомиссию(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры
Процедура ЗначенияФильтра_РегистрыНакопления_ПрочиеДоходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПрочиеРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_СебестоимостьТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СкладАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "Склад");
	
	Если ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.Склад = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");

		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(
			СкладАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.ОрганизацияОтгрузки);
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОрганизаций);
	
	ПараметрыЗапроса.Организации         = МассивОрганизаций;
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизацийКОформлению(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыОрганизацийКПередаче(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СкладАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "Склад");
	
	Если ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.Склад = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(
			СкладАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;

	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.ОрганизацияВладелец);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;

КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыПереданныеНаКомиссию(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЗаявкиНаВозвратТоваровОтКлиентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Склад = Склады.Ссылка
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = &Ссылка");

	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаявкаНаВозвратТоваровОтКлиента);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаявкаНаВозвратТоваровОтКлиента, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПрочиеАктивыПассивы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти

#Область РегистрыСклад

Процедура ЗначенияФильтра_РегистрыНакопления_ДвижениеТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияСерийТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	МассивПодразделений = Новый Массив;
	Если ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		МассивПодразделений = СформироватьИерархиюЭлементов(Объект.Отправитель, ФормироватьИерархию);
	КонецЕсли;
	Если ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодразделений,СформироватьИерархиюЭлементов(Объект.Получатель, ФормироватьИерархию),Истина);
	КонецЕсли;
	Если ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.Склады") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодразделений,СформироватьИерархиюЭлементов(Объект.Отправитель.Подразделение, ФормироватьИерархию),Истина);
	КонецЕсли;
	Если ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.Склады") Тогда	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодразделений,СформироватьИерархиюЭлементов(Объект.Получатель.Подразделение, ФормироватьИерархию),Истина);
	КонецЕсли;
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивПодразделений);
	
	ПараметрыЗапроса.Подразделения = МассивПодразделений;
	ПараметрыЗапроса.ФильтрПоПодразделению = (МассивПодразделений.Количество() > 0);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЗаказыНаПеремещение(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО (ЗаказНаПеремещение.СкладОтправитель = Склады.Ссылка
		|				ИЛИ ЗаказНаПеремещение.СкладПолучатель = Склады.Ссылка)
		|ГДЕ
		|	ЗаказНаПеремещение.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаказНаПеремещение);

	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");

	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	ПараметрыЗапроса.Подразделения = МассивОбъектов;

	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказНаПеремещение, "Организация"));
	МассивОрганизаций.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказНаПеремещение, "ОрганизацияПолучатель"));

	ПараметрыЗапроса.Организации = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЗаказыНаСборку(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументРаспоряжение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ДокументРаспоряжение.Склад = Склады.Ссылка
		|ГДЕ
		|	ДокументРаспоряжение.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаказНаСборку);

	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");

	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПереданнаяВозвратнаяТара(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО РеализацияТоваровУслугТовары.Склад = Склады.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПередачи);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументПередачи, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.ДокументПередачи);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыЗакупок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыПотребленияКомплектующих(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыПродаж(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыПродажПоКатегориям(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ПланПродажПоКатегориям,,ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыСборкиРазборки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПринятаяВозвратнаяТара(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ПоступлениеТоваровУслугТовары.Склад = Склады.Ссылка
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		|	И ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура
		|	И ПоступлениеТоваровУслугТовары.Характеристика = &Характеристика");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка",         Объект.ДокументПоступления);
	Запрос.УстановитьПараметр("Номенклатура",   Объект.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Объект.Характеристика);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументПоступления, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_СвободныеОстатки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыВЯчейках(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СкладскиеЯчейки.Владелец = Склады.Ссылка
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &Ссылка");
		
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ячейка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОтбору(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.%ВидДокумента% КАК ДокументРаспоряжение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ДокументРаспоряжение.Склад = Склады.Ссылка
		|ГДЕ
		|	ДокументРаспоряжение.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Распоряжение);
	
	Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидДокумента%", "ОрдерНаПеремещениеТоваров");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидДокумента%", "РасходныйОрдерНаТовары");
	КонецЕсли;
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОтгрузке(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюИзлишковНедостач(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюОтчетовКомитенту(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СкладАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "Склад");
	
	Если ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.Склад = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");

		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
			СкладАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидЗапасов, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры


Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКОформлениюПоступления(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыКПоступлению(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТоварыНаСкладах(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

#КонецОбласти 

#Область РегистрыФинансы

Процедура ЗначенияФильтра_РегистрыНакопления_ВыручкаИСебестоимостьПродаж(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));

	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыФильтровДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваДоходыРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыФильтровДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваКонтрагент(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыФильтровДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДенежныеСредстваПрочиеАктивыПассивы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ПараметрыФильтровДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ПараметрыФильтровДвиженияДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.ДенежныеСредства) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		МассивОбъектов = Новый Массив();
		
	ИначеЕсли ТипЗнч(Объект.ДенежныеСредства) = Тип("СправочникСсылка.ЭквайринговыеТерминалы") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	БанковскиеСчетаОрганизаций.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
			|		ПО ЭквайринговыеТерминалы.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
			|ГДЕ
			|	ЭквайринговыеТерминалы.Ссылка = &Ссылка");
			
		Запрос.УстановитьПараметр("Ссылка", Объект.ДенежныеСредства);
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
	Иначе
		
		ПодразделениеОбъекта = Объект.Подразделение;
		МассивОбъектов = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
		
	КонецЕсли;
	
	ПараметрыЗапроса.Организации           = СформироватьМассивОрганизаций(Объект.Организация);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияДоходыРасходыПрочиеАктивыПассивы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияКонтрагентДоходыРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияКонтрагентКонтрагент(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияНоменклатураДоходыРасходы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_Закупки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Склад, ФормироватьИерархию);
		ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
		
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
		
	ИначеЕсли ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.Склады") Тогда
		ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	Иначе
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДвиженияНоменклатураНоменклатура(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.СтруктураПредприятия")
		Или ТипЗнч(Объект.КорСклад) = Тип("СправочникСсылка.СтруктураПредприятия")
		Или ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.Склады")
		Или ТипЗнч(Объект.КорСклад) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВыбранноеПодразделение.%ЗначениеРеквизита% КАК Подразделение
			|ИЗ
			|	Справочник.%ВидСправочника% КАК ВыбранноеПодразделение
			|ГДЕ
			|	ВыбранноеПодразделение.Ссылка = &Склад
			|	ИЛИ ВыбранноеПодразделение.Ссылка = &КорСклад");
			
		Если ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(Объект.КорСклад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ЗначениеРеквизита%", "Ссылка");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидСправочника%",    "СтруктураПредприятия");
			
		ИначеЕсли ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.Склады")
			Или ТипЗнч(Объект.КорСклад) = Тип("СправочникСсылка.Склады") Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ЗначениеРеквизита%", "Подразделение");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидСправочника%",    "Склады");
			
		КонецЕсли;
		
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		
		Запрос.УстановитьПараметр("Склад",    Объект.Склад);
		Запрос.УстановитьПараметр("КорСклад", Объект.КорСклад);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения = МассивОбъектов;
	
	Иначе
		
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваБезналичные(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Подразделение"), ФормироватьИерархию);
		
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваНаличные(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Касса");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваВКассахККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "Подразделение"), ФормироватьИерархию);
		
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваКВыплате(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.ЗаявкаНаРасходованиеДенежныхСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	Пользователи.ТекущееПодразделение КАК Подразделение
			|	Пользователи.Подразделение КАК Подразделение
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ЗаявкаНаРасходованиеДенежныхСредств.КтоЗаявил = Пользователи.Ссылка
			|ГДЕ
			|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = &Ссылка");
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Кассы.Подразделение КАК Подразделение
			|ИЗ
			|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК РаспоряжениеНаПеремещениеДенежныхСредств
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
			|		ПО (РаспоряжениеНаПеремещениеДенежныхСредств.Касса = Кассы.Ссылка)
			|ГДЕ
			|	РаспоряжениеНаПеремещениеДенежныхСредств.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БанковскиеСчетаОрганизаций.Подразделение
			|ИЗ
			|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК РаспоряжениеНаПеремещениеДенежныхСредств
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
			|		ПО (РаспоряжениеНаПеремещениеДенежныхСредств.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка)
			|ГДЕ
			|	РаспоряжениеНаПеремещениеДенежныхСредств.Ссылка = &Ссылка");
		
	КонецЕсли;

	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);

	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаявкаНаРасходованиеДенежныхСредств, "Организация"));
		
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры
 

Процедура ЗначенияФильтра_РегистрыНакопления_ДенежныеСредстваУПодотчетныхЛиц(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ЛимитыРасходаДенежныхСредств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям") Тогда
		
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям") Тогда
		
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям") Тогда
		
		ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыОплатКлиентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.План, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.План.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ПланыОплатПоставщикам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.План, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.План.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыПоДоговорамКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "Подразделение"), ФормироватьИерархию);
		
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыПоЭквайрингу(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	БанковскиеСчета.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|		ПО ЭквайринговыеТерминалы.БанковскийСчет = БанковскиеСчета.Ссылка
		|ГДЕ
		|	ЭквайринговыеТерминалы.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ЭквайринговыйТерминал);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыСКлиентами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ЗаказКлиента, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ЗаказКлиента.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыСКлиентамиПоДокументам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ЗаказКлиента, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ЗаказКлиента.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыСПоставщиками(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ЗаказПоставщику, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ЗаказПоставщику.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РасчетыСПоставщикамиПоДокументам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.ЗаказПоставщику, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(Объект.ЗаказПоставщику.ПолучитьОбъект(),,ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ФинансовыеРезультаты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_ТМЦВЭксплуатации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	Иначе
		ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗначенияФильтра_РегистрыНакопления_КнигаДоходовРасходовПоЕдиномуНалогу(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_КорректировкиНДСПартий(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСНоменклатурныйСоставДляНалоговыхНакладных(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСРасчетНалоговогоКредита(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСРасчетНалоговыхОбязательств(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСРеестрВыданныхНалоговыхДокументов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДСРеестрПолученныхНалоговыхДокументов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаПоПартнерам, "Организация"));
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыНакопления_РозничныеПродажиПодакцизныхТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
	
КонецПроцедуры


#КонецОбласти 

#КонецОбласти

#Область РегистрыСведений

#Область АналитикиУчета

Процедура ЗначенияФильтра_РегистрыСведений_ДатыПередачиТоваровНаКомиссию(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
	ОбъектОтбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.АналитикаУчетаНоменклатуры, "Склад");
	
	Если ТипЗнч(ОбъектОтбора) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(ОбъектОтбора, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(ОбъектОтбора) = Тип("СправочникСсылка.Склады") Тогда
		
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОтбора, "Подразделение"), ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СтоимостьТоваров(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, "ВидЗапасов");
КонецПроцедуры

#КонецОбласти 

#Область КредитыИЗаймы

Процедура ЗначенияФильтра_РегистрыСведений_ГрафикНачисленийКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ЗначениеФильтраИзВариантаГрафика(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ГрафикОплатКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ЗначениеФильтраИзВариантаГрафика(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ГрафикТраншейКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ЗначениеФильтраИзВариантаГрафика(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПроцентныеСтавкиКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект.Договор, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначениеФильтраИзВариантаГрафика(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКредитовИДепозитов.Подразделение КАК Подразделение,
		|	ДоговорыКредитовИДепозитов.Организация КАК Организация
		|ИЗ
		|	Справочник.ВариантыГрафиковКредитовИДепозитов КАК ВариантыГрафиковКредитовИДепозитов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|		ПО ВариантыГрафиковКредитовИДепозитов.Владелец = ДоговорыКредитовИДепозитов.Ссылка
		|ГДЕ
		|	ВариантыГрафиковКредитовИДепозитов.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ВариантГрафика);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивОбъектов = ТаблицаЗапроса.ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	МассивОрганизаций = ТаблицаЗапроса.ВыгрузитьКолонку("Организация");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОрганизаций);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры
	
#КонецОбласти

#Область Настройки

Процедура ЗначенияФильтра_РегистрыСведений_ДатыПоступленияТоваровОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыЗапасов.Организация КАК Организация,
		|	ВидыЗапасов.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка");
	
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЗапасов);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивОбъектов = ТаблицаЗапроса.ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	МассивОрганизаций = ТаблицаЗапроса.ВыгрузитьКолонку("Организация");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОрганизаций);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = МассивОрганизаций;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	ПараметрыЗапроса.ФильтрПоОрганизации   = МассивОрганизаций.Количество() > 0;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаПередачиТоваровМеждуОрганизациями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.ОрганизацияВладелец);
	МассивОрганизаций.Добавить(Объект.ОрганизацияПродавец);
	
	ПараметрыЗапроса.Организации         = МассивОрганизаций;
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаРаспределенияПоНаправлениямДеятельности(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_РегламентныеЗаданияЗакрытияМесяца(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти

#Область НоменклатураИЦены

Процедура ЗначенияФильтра_РегистрыСведений_ДействиеСкидокНаценок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ТипЗнч(Объект.Источник) = Тип("СправочникСсылка.Склады") Тогда
		
		МассивОбъектов = СформироватьИерархиюЭлементов(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Источник, "Подразделение"), ФормироватьИерархию);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
		
	ИначеЕсли ТипЗнч(Объект.Источник) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		
		ЗначенияФильтра_Справочники_СоглашенияСКлиентами(Объект.Источник, ПараметрыЗапроса, ФормироватьИерархию);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатуры(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.ВидЦены);
	
	ПараметрыЗапроса.ВидыЦен         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоВидуЦен = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ЦеныНоменклатурыПоставщиков(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СоглашенияСПоставщиками.Склад = Склады.Ссылка
		|ГДЕ
		|	СоглашенияСПоставщиками.Ссылка = &Ссылка");

	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Соглашение);

	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ШтрихкодыНоменклатуры(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если Лев(Объект.ШтрихКод, 1) = "2" Тогда
		
		МассивСтруктурШтучныхШтрихКодов = ЗначениеНастроекПовтИсп.ДиапазоныШтучныхШтрихкодов();
		МассивСтруктурВесовыхШтрихКодов = ЗначениеНастроекПовтИсп.ДиапазоныВесовыхШтрихкодов();
		
		ЭтоВесовойШтрихКод = Ложь;
		ЭтоШтучныйШтрихКод = Ложь;
		
		Для Каждого СтрокаТЧ Из МассивСтруктурШтучныхШтрихКодов Цикл
			Если СтрокаТЧ.Диапазон = Лев(Объект.ШтрихКод, 2) Тогда
				ЭтоШтучныйШтрихКод = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из МассивСтруктурВесовыхШтрихКодов Цикл
			Если СтрокаТЧ.Диапазон = Лев(Объект.ШтрихКод, 2) Тогда
				ЭтоВесовойШтрихКод = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоШтучныйШтрихКод
			И Не Константы.ВыгружатьВнутренниеШтрихкодыШтучныхТоваров.Получить() Тогда
			ПараметрыЗапроса.Отказ = Истина;
		КонецЕсли;
		
		Если ЭтоВесовойШтрихКод
			И Не Константы.ИспользоватьФасовкуВесовогоТовара.Получить() Тогда
			ПараметрыЗапроса.Отказ = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее


Процедура ЗначенияФильтра_РегистрыСведений_ДокументыПоВыпущеннойПродукции(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры


Процедура ЗначенияФильтра_РегистрыСведений_ИсточникиПервичногоИнтереса(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
//		|	Пользователи.ТекущееПодразделение КАК Подразделение
		|	Пользователи.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО СделкиСКлиентами.Ответственный = Пользователи.Ссылка
		|ГДЕ
		|	СделкиСКлиентами.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Сделка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_КонтактыВзаимодействий(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Взаимодействие, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.Взаимодействие);
	КонецЕсли;
КонецПроцедуры


Процедура ЗначенияФильтра_РегистрыСведений_ВариантыОбеспеченияРаботами(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	РеквизитыОтбора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СпособОбеспеченияПотребностей, "Подразделение, Организация");
		
	Если ЗначениеЗаполнено(РеквизитыОтбора.Подразделение) Тогда
		ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(РеквизитыОтбора.Подразделение, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОтбора.Организация) Тогда
		ПараметрыЗапроса.Организации         = СФормироватьМассивОрганизаций(РеквизитыОтбора.Организация);
		ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗначенияФильтра_РегистрыСведений_СтатистикаСделокСКлиентами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения =  СформироватьИерархиюЭлементов(
//		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "ТекущееПодразделение"), ФормироватьИерархию);
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаНумерацииНалоговыхДокументов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаПечатиНалоговыхДокументов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_Нумерация(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_РасшифровкиРегламентированныхОтчетовЗвит1С(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры


#КонецОбласти

#Область Складские

Процедура ЗначенияФильтра_РегистрыСведений_Ассортимент(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних КАК ИсторияИзмененияФорматовМагазиновСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ИсторияИзмененияФорматовМагазиновСрезПоследних.Склад = Склады.Ссылка
		|ГДЕ
		|	ИсторияИзмененияФорматовМагазиновСрезПоследних.ФорматМагазина = &ФорматМагазина");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ФорматМагазина", Объект.ОбъектПланирования);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_БлокировкиСкладскихЯчеек(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СкладскиеЯчейки.Владелец = Склады.Ссылка
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ячейка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ДоступныеОстаткиПланируемыхПоступлений(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
	
КонецПроцедуры
	
Процедура ЗначенияФильтра_РегистрыСведений_КвотыАссортимента(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних КАК ИсторияИзмененияФорматовМагазиновСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ИсторияИзмененияФорматовМагазиновСрезПоследних.Склад = Склады.Ссылка
		|ГДЕ
		|	ИсторияИзмененияФорматовМагазиновСрезПоследних.ФорматМагазина = &ФорматМагазина");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("ФорматМагазина", Объект.ОбъектПланирования);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_КодыТоваровПодключаемогоОборудованияOffline(Объект, ПараметрыЗапроса, ФормироватьИерархию)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ПравилаОбменаСПодключаемымОборудованиемOffline.Склад = Склады.Ссылка
		|ГДЕ
		|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ПравилоОбмена);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкаКонтроляОбеспечения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_НастройкиАдресныхСкладов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ВариантыОбеспеченияТоварами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПравилаРазмещенияТоваровВЯчейках(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_ПрогнозыРасходаУпаковок(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_РазмещениеНоменклатурыПоСкладскимЯчейкам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияЗаказовКлиентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Заказ, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.Заказ);
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияЗаказовПоставщикам(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	Если ПроверитьНаличиеСвязаннойСсылки(Объект.Заказ, ПараметрыЗапроса) Тогда
		ПараметрыЗапроса.Отказ = КонтрольПрохожденияФильтра(Объект.Заказ);
	КонецЕсли;
КонецПроцедуры

Процедура ЗначенияФильтра_РегистрыСведений_СостоянияПересчетовЯчеек(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СкладскиеЯчейки.Владелец = Склады.Ссылка
		|ГДЕ
		|	СкладскиеЯчейки.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ячейка);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры
	
Процедура ЗначенияФильтра_РегистрыСведений_ТоварныеОграничения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры

#КонецОбласти 

#Область СтруктураПредприятия

Процедура ЗначенияФильтра_РегистрыСведений_ИсторияИзмененияФорматовМагазинов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, "Склад");
КонецПроцедуры



Процедура ЗначенияФильтра_РегистрыСведений_УчетнаяПолитикаОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область Справочники

#Область Взаимодействия

Процедура ЗначенияФильтра_Справочники_ПретензииКлиентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзОтветственного(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Проекты(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзОтветственного(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СделкиСКлиентами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИзОтветственного(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ОтборПоПодразделениюИзОтветственного(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
//	ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "ТекущееПодразделение");
	ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ответственный, "Подразделение");
	
	Если ЗначениеЗаполнено(ПодразделениеОбъекта) Тогда
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	КонецЕсли;
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	
КонецПроцедуры

#КонецОбласти 

#Область ДоговорыИСоглашения

Процедура ЗначенияФильтра_Справочники_ДоговорыКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ДоговорыКонтрагентов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры
Процедура ЗначенияФильтра_Справочники_СоглашенияСПоставщиками(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение");
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СоглашенияСКлиентами(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение");
	Иначе
		ПодразделениеОбъекта = Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

Процедура ЗначенияФильтра_Справочники_ВариантыГрафиковКредитовИДепозитов(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Подразделение"), ФормироватьИерархию);
		
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Организация"));
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ВидыЦен(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивВидовЦен = Новый Массив;
	МассивВидовЦен.Добавить(Объект.Ссылка);
	
	ПараметрыЗапроса.Вставить("ВидыЦен", МассивВидовЦен);
	ПараметрыЗапроса.Вставить("ФильтрПоВидуЦен",       Истина);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Пользователи(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(Объект.ТекущееПодразделение, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.ТекущееПодразделение);
	
КонецПроцедуры


Процедура ЗначенияФильтра_Справочники_УсловияОбслуживанияПартнеровТорговымиПредставителями(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПодразделениеОбъекта = Справочники.СтруктураПредприятия.ПустаяСсылка();
	ОрганизацияОбъекта   = Справочники.Организации.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение,
			|	СоглашенияСКлиентами.Организация КАК Организация
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО СоглашенияСКлиентами.Склад = Склады.Ссылка
			|ГДЕ
			|	СоглашенияСКлиентами.Ссылка = &Ссылка");
			
		Запрос.УстановитьПараметр("Ссылка", Объект.Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ПодразделениеОбъекта = Выборка.Подразделение;
			ОрганизацияОбъекта   = Выборка.Организация;
		КонецЕсли;
		
	Иначе
		ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ТорговыйПредставитель, "ТекущееПодразделение");
	КонецЕсли;
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(ОрганизацияОбъекта);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(ОрганизацияОбъекта);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ОбособленныеПодразделенияОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Владелец);
		
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Владелец);
	
КонецПроцедуры

#КонецОбласти 

#Область СкладскиеСправочники

Процедура ЗначенияФильтра_Справочники_ОбластиХранения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ПодключаемоеОборудование(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Склады.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ПравилаОбменаСПодключаемымОборудованиемOffline.Склад = Склады.Ссылка
		|ГДЕ
		|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &Ссылка");
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	Запрос.УстановитьПараметр("Ссылка", Объект.ПравилоОбмена);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения         = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ДрайверыОборудования(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Если Не Объект.ЭтоНовый() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|				ПО ПравилаОбменаСПодключаемымОборудованиемOffline.Склад = Склады.Ссылка
			|			ПО ПодключаемоеОборудование.ПравилоОбмена = ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка
			|		ПО ДрайверыОборудования.Ссылка = ПодключаемоеОборудование.ДрайверОборудования
			|ГДЕ
			|	ДрайверыОборудования.Ссылка = &Ссылка");
			
		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
		
	Иначе
		ПараметрыЗапроса.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗначенияФильтра_Справочники_РабочиеУчастки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СкладскиеПомещения(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СкладскиеЯчейки(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию);
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_СпособыОбеспеченияПотребностей(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИПустомуЗначениюИзВладельца(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПодразделениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Подразделение");
	
	ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(ПодразделениеОбъекта, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(ПодразделениеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураПредприятия

Процедура ЗначенияФильтра_Справочники_БанковскиеСчетаОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Владелец);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = ЗначениеЗаполнено(Объект.Владелец);
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Кассы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Владелец);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_КассыККМ(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Владелец);
		
	ПараметрыЗапроса.ФильтрПоПодразделению = ЗначениеЗаполнено(Объект.Подразделение);
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_Организации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Вставить("Организации", СформироватьМассивОрганизаций(Объект.Ссылка));
		
	ПараметрыЗапроса.Вставить("ФильтрПоПодразделению", Ложь);
	ПараметрыЗапроса.Вставить("ФильтрПоОрганизации",   Истина);
	ПараметрыЗапроса.Вставить("ФильтрПоВидуЦен",       Ложь);

КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ОтветственныеЛицаОрганизаций(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Владелец);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;

КонецПроцедуры


Процедура ЗначенияФильтра_Справочники_СтруктураПредприятия(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(Объект.Ссылка, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ЗначенияФильтра_Справочники_ЭквайринговыеТерминалы(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	МассивОбъектов = СформироватьИерархиюЭлементов(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Подразделение"), ФормироватьИерархию);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.ФильтрПоПодразделению = МассивОбъектов.Количество() > 0;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецОбласти

Функция НеСоответствиеНастроекУзлаИОбъекта(ПараметрыЗапроса, УзелПланаОбмена = Неопределено)
	
	Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
		Если НеВсеОбъектыМассиваДоступны(ПараметрыЗапроса.Подразделения, МассивДоступныхПодразделений(УзелПланаОбмена)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоОрганизации Тогда
		МассивОрганизацийУзла = МассивДоступныхОрганизаций(УзелПланаОбмена);
		Если УзелПланаОбмена.ИспользоватьОтборПоОрганизациям
			И НеВсеОбъектыМассиваДоступны(ПараметрыЗапроса.Организации, МассивОрганизацийУзла) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ФильтрПоВидуЦен Тогда
		МассивВидовЦенУзла = МассивДоступныхВидовЦен(УзелПланаОбмена);
		Если УзелПланаОбмена.ИспользоватьОтборПоВидамЦен
			И НеВсеОбъектыМассиваДоступны(ПараметрыЗапроса.ВидыЦен, МассивВидовЦенУзла) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьНаличиеСвязаннойСсылки(Объект, ПараметрыФильтра)
	
	Если ЗначениеЗаполнено(Объект)
		И ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		
		Возврат Истина;
		
	Иначе
		
		ПараметрыФильтра.Вставить("ФильтрПоПодразделению", Ложь);
		ПараметрыФильтра.Вставить("ФильтрПоОрганизации",   Ложь);
		ПараметрыФильтра.Вставить("ФильтрПоВидуЦен",       Ложь);
		ПараметрыФильтра.Вставить("Отказ",                 Истина);
		
		Возврат Ложь;
		
	КонецЕсли;
		
КонецФункции

Функция НеВсеОбъектыМассиваДоступны(МассивОбъекта, МассивДоступных)
	
	Если МассивОбъекта.Количество() > 0 Тогда
		Результат = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивОбъекта, МассивДоступных);
		Возврат Результат.Количество() <> 0;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция МассивДоступныхПодразделений(УзелПланаОбмена)
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		УзелПланаОбмена = ПланыОбмена["СОтборами"].ЭтотУзел();
	КонецЕсли;
	
	МассивПодразделенийУзла = УзелПланаОбмена.Подразделения.ВыгрузитьКолонку("Подразделение");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&МассивОбъектов)");
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивПодразделенийУзла);
	
	МассивДопустимыхЗначений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Возврат МассивДопустимыхЗначений;
	
КонецФункции

Функция МассивДоступныхОрганизаций(УзелПланаОбмена)
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		УзелПланаОбмена = ПланыОбмена["СОтборами"].ЭтотУзел();      
	КонецЕсли;
	
	Возврат УзелПланаОбмена.Организации.ВыгрузитьКолонку("Организация");
	
КонецФункции

Функция МассивДоступныхВидовЦен(УзелПланаОбмена)
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		УзелПланаОбмена = ПланыОбмена["СОтборами"].ЭтотУзел();
	КонецЕсли;
		
	Возврат УзелПланаОбмена.ВидыЦен.ВыгрузитьКолонку("ВидЦены");
	
КонецФункции

Функция ДобавитьИтогиКЗапросу(ТекстЗапроса, ФормироватьИерархию)
	
	Если ФормироватьИерархию Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ИТОГИ ПО
			|	Подразделение ТОЛЬКО ИЕРАРХИЯ";
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтборПоОрганизацииОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюОбъекта(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения         = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюОбъектаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(Объект.Подразделение, ФормироватьИерархию);
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИзРеквизита(Объект, ПараметрыЗапроса, ФормироватьИерархию, ИмяРеквизита)
	
	ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект[ИмяРеквизита], "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИзРеквизитаИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию, ИмяРеквизита)
	
	ПараметрыЗапроса.Подразделения =  СформироватьИерархиюЭлементов(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект[ИмяРеквизита], "Подразделение"), ФормироватьИерархию);
	ПараметрыЗапроса.Организации = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюАналитикиУчетаНоменклатурыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	СкладАналитикиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.АналитикаУчетаНоменклатуры, "Склад");
	
	Если ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|		ПО АналитикаУчетаНоменклатуры.Склад = Склады.Ссылка
			|ГДЕ
			|	АналитикаУчетаНоменклатуры.КлючАналитики = &КлючАналитики");

		Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
		Запрос.УстановитьПараметр("КлючАналитики", Объект.АналитикаУчетаНоменклатуры);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
		
		ПараметрыЗапроса.Подразделения         = МассивОбъектов;
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		
	ИначеЕсли ТипЗнч(СкладАналитикиУчетаНоменклатуры) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ПараметрыЗапроса.Подразделения = СформироватьИерархиюЭлементов(
			СкладАналитикиУчетаНоменклатуры, ФормироватьИерархию);
		ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	КонецЕсли;

	ПараметрыЗапроса.Организации         = СформироватьМассивОрганизаций(Объект.Организация);
	ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИзСкладаТабЧастиТоварыИОрганизации(СтруктураОбъекта, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабЧастьДокумента.%НаименованиеКолонкиСклада% КАК Склад,
		|	ТабЧастьДокумента.%НаименованиеКолонкиНоменклатуры% КАК Номенклатура
		|ПОМЕСТИТЬ ТабличнаяЧастьТовары
		|ИЗ
		|	&ТабличнаяЧастьТовары КАК ТабЧастьДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СправочникНоменклатура.Ссылка) КАК Товары
		|ПОМЕСТИТЬ КоличествоТоваров
		|ИЗ
		|	ТабличнаяЧастьТовары КАК ДокументТабЧасти
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ДокументТабЧасти.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	(СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА КоличествоТоваров.Товары > 0
		|			ТОГДА Склады.Подразделение
		|		ИНАЧЕ &ПодразделениеДокумента
		|	КОНЕЦ КАК Подразделение
		|ПОМЕСТИТЬ ТаблицаПодразделений
		|ИЗ
		|	КоличествоТоваров КАК КоличествоТоваров,
		|	ТабличнаяЧастьТовары КАК ТабличнаяЧастьТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ТабличнаяЧастьТовары.Склад = Склады.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение
		|ИЗ
		|	ТаблицаПодразделений КАК ТаблицаПодразделений");
	
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	Запрос.УстановитьПараметр("ТабличнаяЧастьТовары",   СтруктураОбъекта.ТабЧастьТовары);
	Запрос.УстановитьПараметр("ПодразделениеДокумента", СтруктураОбъекта.ПодразделениеОбъекта);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НаименованиеКолонкиСклада%",       СтруктураОбъекта.НаименованиеКолонкиСклад);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НаименованиеКолонкиНоменклатуры%", СтруктураОбъекта.НаименованиеКолонкиНоменклатура);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(СтруктураОбъекта.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Процедура ОтборПоПодразделениюИзСкладаИлиПодразделениюТабЧастиТоварыИОрганизации(Объект, ПараметрыЗапроса, ФормироватьИерархию)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабЧастьДокумента.Склад КАК Склад,
		|	ТабЧастьДокумента.Подразделение КАК ПодразделениеТабЧасти,
		|	ТабЧастьДокумента.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТабличнаяЧастьТовары
		|ИЗ
		|	&ТабличнаяЧастьТовары КАК ТабЧастьДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА Склады.Подразделение
		|		ИНАЧЕ ТабЧастьТовары.ПодразделениеТабЧасти
		|	КОНЕЦ КАК Подразделение
		|ПОМЕСТИТЬ ТаблицаПодразделений
		|ИЗ
		|	ТабличнаяЧастьТовары КАК ТабЧастьТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ТабЧастьТовары.Склад = Склады.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТабЧастьТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение
		|ИЗ
		|	ТаблицаПодразделений КАК ТаблицаПодразделений");
	
		
	Запрос.Текст = ДобавитьИтогиКЗапросу(Запрос.Текст, ФормироватьИерархию);
	
	Запрос.УстановитьПараметр("ТабличнаяЧастьТовары", Объект.Товары);
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	ОчиститьПустыеСсылкиИзМассиваОбъектов(МассивОбъектов);
	
	ПараметрыЗапроса.Подразделения = МассивОбъектов;
	ПараметрыЗапроса.Организации   = СформироватьМассивОрганизаций(Объект.Организация);
	
	ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
	ПараметрыЗапроса.ФильтрПоОрганизации   = Истина;
	
КонецПроцедуры

Функция КонтрольДоговораКредитаИДепозитаВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена)
	
	Отказ = Ложь;
	
	ТабличнаяЧастьРасшифровкаПлатежа = ЭлементДанных.РасшифровкаПлатежа;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабЧасть.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита
		|ПОМЕСТИТЬ ТабличнаяЧастьРасшифровкаПлатежа
		|ИЗ
		|	&ТабличнаяЧастьРасшифровкаПлатежа КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	
		|	ДоговорыКредитовИДепозитов.Подразделение КАК Подразделение,
		|	ДоговорыКредитовИДепозитов.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ДоговорыКредитовИДепозитов.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаДоговора,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаПодразделения,
		|	ВЫБОР
		|		КОГДА Организации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаОрганизаций
		|ПОМЕСТИТЬ ТаблицаДоговоровПодразделенийОрганизаций
		|ИЗ
		|	ТабличнаяЧастьРасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|			ПО ДоговорыКредитовИДепозитов.Подразделение = СтруктураПредприятия.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|			ПО ДоговорыКредитовИДепозитов.Организация = Организации.Ссылка
		|		ПО ТабличнаяЧастьРасшифровкаПлатежа.ДоговорКредитаДепозита = ДоговорыКредитовИДепозитов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДоговоровПодразделенийОрганизаций.Подразделение КАК Подразделение,
		|	ТаблицаДоговоровПодразделенийОрганизаций.Организация КАК Организация
		|ИЗ
		|	ТаблицаДоговоровПодразделенийОрганизаций КАК ТаблицаДоговоровПодразделенийОрганизаций
		|ГДЕ
		|	ТаблицаДоговоровПодразделенийОрганизаций.ЕстьБитаяСсылкаДоговора = ЛОЖЬ
		|	И ТаблицаДоговоровПодразделенийОрганизаций.ЕстьБитаяСсылкаПодразделения = ЛОЖЬ
		|	И ТаблицаДоговоровПодразделенийОрганизаций.ЕстьБитаяСсылкаОрганизаций = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ТабличнаяЧастьРасшифровкаПлатежа", ЭлементДанных.РасшифровкаПлатежа);
	Запрос.УстановитьПараметр("МассивДоступныхПодразделений",     МассивДоступныхПодразделений(УзелПланаОбмена));
	Запрос.УстановитьПараметр("МассивДоступныхОрганизаций",       МассивДоступныхОрганизаций(УзелПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция КонтрольОбъектаРасчетовВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена)
	
	Отказ = Ложь;
	
	ОбъектыРасчетов = ЭлементДанных.РасшифровкаПлатежа.Выгрузить();
	ОбъектыРасчетов.Свернуть("Заказ");
	
	Для Каждого ОбъектРасчетов Из ОбъектыРасчетов Цикл
		
		СсылкаНаОбъектРасчетов = ОбъектРасчетов.Заказ;
		
		Если ЗначениеЗаполнено(СсылкаНаОбъектРасчетов) Тогда
			
			Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъектРасчетов) Тогда
				
				ПараметрыЗапроса = ОпределитьПараметрыЗапросаОбъекта(СсылкаНаОбъектРасчетов.ПолучитьОбъект(),,Ложь);
				
				Если Не ПараметрыЗапроса.Отказ Тогда
					Отказ = НеСоответствиеНастроекУзлаИОбъекта(ПараметрыЗапроса, УзелПланаОбмена);
				КонецЕсли;
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Функция КонтрольБанковскогоСчета(ЭлементДанных, УзелПланаОбмена, Получатель = Истина)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка,
		|	БанковскиеСчетаОрганизаций.Подразделение КАК Подразделение,
		|	БанковскиеСчетаОрганизаций.Владелец КАК Организация,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаОрганизаций.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаСчета,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаПодразделения,
		|	ВЫБОР
		|		КОГДА Организации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаОрганизаций
		|ПОМЕСТИТЬ ТаблицаСчетовПодразделенийОрганизаций
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО БанковскиеСчетаОрганизаций.Подразделение = СтруктураПредприятия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО БанковскиеСчетаОрганизаций.Владелец = Организации.Ссылка
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.Ссылка = &Ссылка
		|	И БанковскиеСчетаОрганизаций.Подразделение В(&МассивДоступныхПодразделений)
		|	И БанковскиеСчетаОрганизаций.Владелец В(&МассивДоступныхОрганизаций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка,
		|	БанковскиеСчетаОрганизаций.Организация,
		|	БанковскиеСчетаОрганизаций.Подразделение
		|ИЗ
		|	ТаблицаСчетовПодразделенийОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.ЕстьБитаяСсылкаСчета = ЛОЖЬ
		|	И БанковскиеСчетаОрганизаций.ЕстьБитаяСсылкаПодразделения = ЛОЖЬ
		|	И БанковскиеСчетаОрганизаций.ЕстьБитаяСсылкаОрганизаций = ЛОЖЬ");
		
	Если Получатель Тогда
		Запрос.УстановитьПараметр("Ссылка", ЭлементДанных.БанковскийСчетПолучатель);
	Иначе
		Запрос.УстановитьПараметр("Ссылка", ЭлементДанных.БанковскийСчет);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивДоступныхПодразделений", МассивДоступныхПодразделений(УзелПланаОбмена));
	Запрос.УстановитьПараметр("МассивДоступныхОрганизаций",   МассивДоступныхОрганизаций(УзелПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция КонтрольКассыПолучателя(ЭлементДанных, УзелПланаОбмена)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Кассы.Ссылка,
		|	Кассы.Подразделение КАК Подразделение,
		|	Кассы.Владелец КАК Организация,
		|	ВЫБОР
		|		КОГДА Кассы.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаКассы,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаПодразделения,
		|	ВЫБОР
		|		КОГДА Организации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылкаОрганизаций
		|ПОМЕСТИТЬ ТаблицаКассПодразделенийОрганизаций
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО Кассы.Подразделение = СтруктураПредприятия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Кассы.Владелец = Организации.Ссылка
		|ГДЕ
		|	Кассы.Ссылка = &Ссылка
		|	И Кассы.Подразделение В(&МассивДоступныхПодразделений)
		|	И Кассы.Владелец В(&МассивДоступныхОрганизаций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКассПодразделенийОрганизаций.Ссылка,
		|	ТаблицаКассПодразделенийОрганизаций.Подразделение,
		|	ТаблицаКассПодразделенийОрганизаций.Организация
		|ИЗ
		|	ТаблицаКассПодразделенийОрганизаций КАК ТаблицаКассПодразделенийОрганизаций
		|ГДЕ
		|	ТаблицаКассПодразделенийОрганизаций.ЕстьБитаяСсылкаКассы = ЛОЖЬ
		|	И ТаблицаКассПодразделенийОрганизаций.ЕстьБитаяСсылкаПодразделения = ЛОЖЬ
		|	И ТаблицаКассПодразделенийОрганизаций.ЕстьБитаяСсылкаОрганизаций = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("Ссылка", ЭлементДанных.КассаПолучатель);
	Запрос.УстановитьПараметр("МассивДоступныхПодразделений", МассивДоступныхПодразделений(УзелПланаОбмена));
	Запрос.УстановитьПараметр("МассивДоступныхОрганизаций",   МассивДоступныхОрганизаций(УзелПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция КонтрольПодразделенияВТабличнойЧасти(ЭлементДанных, УзелПланаОбмена)
	
	Отказ = Ложь;
	
	ТабличнаяЧастьРасшифровкаПлатежа = ЭлементДанных.РасшифровкаПлатежа;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабЧасть.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ТабличнаяЧастьРасшифровкаПлатежа
		|ИЗ
		|	&ТабличнаяЧастьРасшифровкаПлатежа КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧастьРасшифровкаПлатежа.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Подразделения.Ссылка ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБитаяСсылка
		|ПОМЕСТИТЬ ТаблицаПодразделений
		|ИЗ
		|	ТабличнаяЧастьРасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
		|		ПО ТабличнаяЧастьРасшифровкаПлатежа.Подразделение = Подразделения.Ссылка
		|ГДЕ
		|	ТабличнаяЧастьРасшифровкаПлатежа.Подразделение В(&МассивДоступныхПодразделений)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение
		|ИЗ
		|	ТаблицаПодразделений КАК ТаблицаПодразделений
		|ГДЕ
		|	ТаблицаПодразделений.ЕстьБитаяСсылка = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ТабличнаяЧастьРасшифровкаПлатежа", ТабличнаяЧастьРасшифровкаПлатежа);
	Запрос.УстановитьПараметр("МассивДоступныхПодразделений",     МассивДоступныхПодразделений(УзелПланаОбмена));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция КонтрольПодразделенияВШапке(ЭлементДанных, УзелПланаОбмена)
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(ЭлементДанных.Подразделение)
		И ОбщегоНазначения.СсылкаСуществует(ЭлементДанных.Подразделение) Тогда
		
		МассивДоступныхЗначений = МассивДоступныхПодразделений(УзелПланаОбмена);
		Если МассивДоступныхЗначений.Найти(ЭлементДанных.Подразделение) = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ОбъединитьУсловияОтбора(ПараметрыЗапроса, ПараметрыЗапросаДокументаОснования)
	
	Если Не ПараметрыЗапросаДокументаОснования.Отказ Тогда
		
		Если ПараметрыЗапросаДокументаОснования.ФильтрПоПодразделению Тогда
			ПараметрыЗапроса.ФильтрПоПодразделению = Истина;
		КонецЕсли;
		
		Если ПараметрыЗапросаДокументаОснования.ФильтрПоОрганизации Тогда
			ПараметрыЗапроса.ФильтрПоОрганизации = Истина;
		КонецЕсли;
		
		Если ПараметрыЗапросаДокументаОснования.ФильтрПоВидуЦен Тогда
			ПараметрыЗапроса.ФильтрПоВидуЦен = Истина;
		КонецЕсли;
		
		Если ПараметрыЗапроса.ФильтрПоПодразделению Тогда
			ПараметрыЗапроса.Подразделения = ОбъединитьМассивы(ПараметрыЗапроса.Подразделения, ПараметрыЗапросаДокументаОснования.Подразделения);
		КонецЕсли;
		
		Если ПараметрыЗапроса.ФильтрПоОрганизации Тогда
			ПараметрыЗапроса.Организации = ОбъединитьМассивы(ПараметрыЗапроса.Организации, ПараметрыЗапросаДокументаОснования.Организации);
		КонецЕсли;
		
		Если ПараметрыЗапроса.ФильтрПоВидуЦен Тогда
			ПараметрыЗапроса.ВидыЦен = ОбъединитьМассивы(ПараметрыЗапроса.ВидыЦен, ПараметрыЗапросаДокументаОснования.ВидыЦен);
		КонецЕсли;
	Иначе
		ПараметрыЗапроса = ПараметрыЗапросаДокументаОснования;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти


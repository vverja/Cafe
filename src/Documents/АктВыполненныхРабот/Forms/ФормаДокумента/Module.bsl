&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИспользоватьРучныеСкидкиВПродажах               = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах       = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ОтклонениеОтУсловийПродаж                       = ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж();
	ПродажаНеОблагаетсяНДС                          = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ИспользоватьПартнеровКакКонтрагентов            = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                      ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ИспользоватьКорректировкиРеализаций      		= ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций");
	
	ПараметрыВыбораРеквизитов = ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(Метаданные.Документы.АктВыполненныхРабот);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ПерерасчетПроизведен = НЕ НДСИсходящийСервер.НуженАвторасчетНДС(Объект.Услуги);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	НДСИсходящийСервер.УстановитьДоступностьВалюты(Элементы, Объект.Организация, "Валюта");
	
	ПродажиСервер.УстановитьОтметкуНезаполненногоДоговора(Элементы, "Договор");
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	Если ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиПодобратьУслугиИзЗаказа", "Заголовок", НСтр("ru='Подобрать услуги из заказов';uk='Підібрати послуги з замовлень'"));
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиЗаполнитьПоЗаказу", "Заголовок", НСтр("ru='Заполнить по заказам';uk='Заповнити по замовленнях'"));
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ПравоНаЧтениеВидаЦены = ПравоДоступа("Просмотр", Метаданные.Документы.АктВыполненныхРабот.ТабличныеЧасти.Услуги.Реквизиты.ВидЦены);
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Элементы.НалогообложениеНДСПоУмолчанию);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		
		Отказ = Истина;
		СамообслуживаниеКлиент.ПечатьАктВыполненныхРабот(Объект.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	Если Объект.АктПоЗаказам Тогда
		
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("УслугиСкопировать");
		МассивЭлементов.Добавить("УслугиКонтекстноеМенюСкопировать");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Ложь);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		ТребуетсяОткрытиеПечатнойФормы = Истина;
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры
 
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОбновитьОграничениеЗадолженности();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Услуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Услуги");
	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	// Если документ проводится, рассчитаем скидки
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			
			Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
				
				Отказ = Истина;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
				ДополнительныеПараметры.Вставить("ЭтотОбъект", ЭтотОбъект);
				СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки(
					Новый ОписаниеОповещения(
						"ПредложитьПользователюРассчитатьСкидкиЗавершение", 
						ЭтотОбъект,
						ДополнительныеПараметры)
				);
				
			Иначе
				Объект.СкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ПередЗаписьюФрагмент();
		
		ВыполнитьАвторасчетНДСКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюФрагмент()
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПлатежа)
		И (Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
			Или Не Объект.АктПоЗаказам) Тогда
		
		Объект.ДатаПлатежа = Объект.Дата;
		
		НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПользователюРассчитатьСкидкиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		Отказ = Ложь;
		ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ);
		РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	Иначе
		Возврат;
	КонецЕсли;
	
	ПередЗаписьюФрагмент();
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка) 
		Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ИзмененаОплатаСервер();
	КонецЕсли;
	
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия, Параметр", ИмяСобытия, Параметр)), Параметр.КартаЛояльности);
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	УстановитьВидимостьПоляПартнер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
    Параметр = ДополнительныеПараметры.Параметр;
    
    
    ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Знач Параметр)
    
    Если ИмяСобытия = "ПолученыСообщения"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПолученыСообщения(Параметр.Сообщения);
    КонецЕсли;
    
    Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
        И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
        Если Объект.Согласован Тогда
            Объект.Согласован = Ложь;
        КонецЕсли;
        ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
    КонецЕсли;
    
    Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
        
        УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
        
    КонецЕсли;
    
    Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
        ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
        
        УстановитьВидимостьЗапретаОтгрузкиПартнеру();
    КонецЕсли;
    
    Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
    КонецЕсли;
    
    Если ИмяСобытия = "РедактироватьНабор"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        
        МассивТиповНоменклатуры = Новый Массив;
        МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
        МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
        МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
        
        ПараметрыНабора = Новый Структура;
        ПараметрыНабора.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
        ПараметрыНабора.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыНабора.Вставить("СверхЗаказа", Истина);
        ПараметрыНабора.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
        
        АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыНабора);
        
        ПараметрыОткрытия = Новый Структура;
        ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
        ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
        ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
        ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
        ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
        ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
        ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
        ПараметрыОткрытия.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
        ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
        
        ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.АктВыполненныхРабот.Форма.ФормаПодбораУслугИзЗаказа" Тогда
		
		ПолучитьУслугиИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.АктПоЗаказам Тогда
		Оповестить("Запись_АктВыполненныхРабот", ПараметрыЗаписи, Объект.Ссылка);
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры


&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата,
		,
		,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"),
		Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
	Если НЕ Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		Объект.Валюта = Объект.ВалютаВзаиморасчетов;
		ПриИзмененииВалюты();
	КонецЕсли;
	
		
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);	
	
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
	Если НЕ Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		Объект.Валюта = Объект.ВалютаВзаиморасчетов;
		ПриИзмененииВалюты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ПриИзмененииДоговораСервер();
	Иначе
		СуммаДолга = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПоУмолчаниюПриИзменении(Элемент)
	
	НалогообложениеНДСПоУмолчаниюПриИзмененииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПоУмолчаниюПриИзмененииСервер()

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Услуги, СтруктураДействий, Неопределено);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаАвторасчетНДС");
	МассивЭлементов.Добавить("ПересчитатьНДС");
	
	Объект.АвторасчетНДС = НДСИсходящийСервер.ПолучитьФлагИОбработатьДоступностьАвторасчетаНДС(НалогообложениеНДСПоУмолчанию, Элементы, МассивЭлементов);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ПриИзмененииВалюты();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Перем ЦеныРассчитаны;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	УстановитьНалогообложениеНДСПоУмолчанию();
	
	Если Не Объект.АктПоЗаказам Тогда
		Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
		ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект, Оповещение, "Услуги");
		Возврат;
	КонецЕсли; 
	
	ПересчитатьЦены = Ложь;
	ПриИзмененииДатыСервер(ПересчитатьЦены, ЦеныРассчитаны);
	
	Если ПересчитатьЦены Тогда
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Перем ЦеныРассчитаны;
	
	ПриИзмененииДатыСервер(РезультатВопроса, ЦеныРассчитаны);
	
	Если РезультатВопроса Тогда
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);

	Если НЕ Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		Объект.Валюта = Объект.ВалютаВзаиморасчетов;
		ПриИзмененииВалюты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	Если НЕ Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация") Тогда
		Объект.Валюта = Объект.ВалютаВзаиморасчетов;
		ПриИзмененииВалюты();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетовПриИзмененииНаСервере(
			ЦенообразованиеКлиент.НеобходимПересчетСуммыВзаиморасчетов(Объект, ВалютаВзаиморасчетовДокумента, "Услуги"));
		ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АктВыполненныхРаботПоЗаказамПриИзменении(Элемент)
	
	ЗаказКлиента = Неопределено;
	
	Если Объект.АктПоЗаказам Тогда
		
		Если ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		
			Если Объект.Услуги.Количество() = 0 Тогда
				ТекстВопроса = НСтр("ru='Список Услуги будет перезаполнен остатками неоказанных услуг по заказам. Продолжить?';uk='Список Послуги буде перезаповнений залишками ненаданих послуг по замовленнях. Продовжити?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Услуги будут привязаны к строкам заказов. Строки, которые невозможно привязать к строкам заказа, будут удалены. Продолжить?';uk='Рядки в списку Послуги будуть прив''язані до рядків замовлень. Рядки, які неможливо прив''язати до рядків замовлення, будуть вилучені. Продовжити?'");
			КонецЕсли;
			
		Иначе
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Валюта",                Объект.Валюта);
			ПараметрыОтбора.Вставить("Контрагент",            Объект.Контрагент);
			ПараметрыОтбора.Вставить("Договор",               Объект.Договор);
			ПараметрыОтбора.Вставить("Организация",           Объект.Организация);
			ПараметрыОтбора.Вставить("Партнер",               Объект.Партнер);
			ПараметрыОтбора.Вставить("Соглашение",            Объект.Соглашение);
			ПараметрыОтбора.Вставить("ЦенаВключаетНДС",       Объект.ЦенаВключаетНДС);
			ПараметрыОтбора.Вставить("Сделка",                Объект.Сделка);
			ПараметрыОтбора.Вставить("ПорядокРасчетов",       Объект.ПорядокРасчетов);
			ПараметрыОтбора.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
			
			ОткрытьФорму(
				"Документ.АктВыполненныхРабот.Форма.ФормаВыбораРаспоряжения",
				Новый Структура("Отбор,Регистратор", ПараметрыОтбора, Объект.Ссылка),,,,, Новый ОписаниеОповещения("АктВыполненныхРаботПоЗаказамПриИзмененииПослеВыбора", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
            Возврат;
			
		КонецЕсли;
	Иначе
		
		Если Объект.Услуги.Количество() > 0 Тогда
			
			Если ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
				ТекстВопроса = НСтр("ru='Строки в списке Услуги перестанут быть связанными со строками заказов. Продолжить?';uk='Рядки в списку Послуги перестануть бути зв''язаними з рядками замовлень. Продовжити?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Услуги перестанут быть связанными со строками заказа. Продолжить?';uk='Рядки в списку Послуги перестануть бути зв''язаними з рядками замовлення. Продовжити?'");
			КонецЕсли;
			
		Иначе
			
			ПриИзмененииАктовВыполненныхРаботПоНесколькимЗаказам();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	АктВыполненныхРаботПоЗаказамПриИзмененииФрагмент(ЗаказКлиента, ТекстВопроса);
КонецПроцедуры

&НаКлиенте
Процедура АктВыполненныхРаботПоЗаказамПриИзмененииПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаказКлиента = Результат;
    
    Если ЗаказКлиента = Неопределено Тогда
        Объект.АктПоЗаказам = Ложь;
        Возврат;
    КонецЕсли;
    
    Если Объект.Услуги.Количество() = 0 Тогда
        ТекстВопроса = СтрЗаменить(НСтр("ru='Список Услуги будет перезаполнен остатками неоформленных услуг по документу %ЗаказКлиента%. Продолжить?';uk='Список Послуги буде перезаповнений залишками неоформлених послуг за документом %ЗаказКлиента%. Продовжити?'"), "%ЗаказКлиента%", ЗаказКлиента);
    Иначе
        ТекстВопроса = СтрЗаменить(НСтр("ru='Строки в списке Услуги будут привязаны к строкам документа %ЗаказКлиента%. Строки, которые невозможно привязать к строкам заказа, будут удалены.  Продолжить?';uk='Рядки в списку Послуги будуть прив''язані до рядків документа %ЗаказКлиента%. Рядки, які неможливо прив''язати до рядків замовлення, будуть вилучені. Продовжити?'"), "%ЗаказКлиента%", ЗаказКлиента);
    КонецЕсли;
    
    
    АктВыполненныхРаботПоЗаказамПриИзмененииФрагмент(ЗаказКлиента, ТекстВопроса);

КонецПроцедуры

&НаКлиенте
Процедура АктВыполненныхРаботПоЗаказамПриИзмененииФрагмент(Знач ЗаказКлиента, Знач ТекстВопроса)
    
    Перем ОтветНаВопрос;
    
    ОтветНаВопрос = Неопределено;
    
    
    ПоказатьВопрос(Новый ОписаниеОповещения("АктВыполненныхРаботПоЗаказамПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ЗаказКлиента", ЗаказКлиента)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура АктВыполненныхРаботПоЗаказамПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ЗаказКлиента = ДополнительныеПараметры.ЗаказКлиента;
    
    
    ОтветНаВопрос = РезультатВопроса;
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Объект.АктПоЗаказам = Не Объект.АктПоЗаказам;
        Возврат;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
        Объект.ЗаказКлиента = ЗаказКлиента;
    КонецЕсли;
    
    ПриИзмененииАктовВыполненныхРаботПоНесколькимЗаказам();
    УстановитьДоступностьКомандБуфераОбменаНаКлиенте();

КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		ПриИзмененииКонтрагентаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(Знач Оповещение, КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("СчитанаКартаЛояльностиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru='Нет доступа к партнеру-владельцу карты лояльности.';uk='Немає доступу до партнера-власника карти лояльності.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?';uk='Карта лояльності належить партнеру ""%1"". Змінити партнера у документі?'"), ДанныеКартыЛояльности.Партнер),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииКонтрагента = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
				И ЗначениеЗаполнено(Объект.Контрагент) И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент Тогда
				ВопросОбИзмененииКонтрагента = Истина;
			КонецЕсли;
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииКонтрагента Или ВопросОбИзмененииСоглашения Тогда
				
				Если ВопросОбИзмененииКонтрагента И ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности заданы контрагент ""%1"" и соглашение ""%2"". Применить карту лояльности и подставить в документ контрагента ""%1"" и соглашение ""%2""?';uk='Для карти лояльності задані контрагент ""%1"" та оферта ""%2"". Застосувати карту лояльності і підставити в документ контрагента ""%1"" та оферту ""%2""?'");
				ИначеЕсли ВопросОбИзмененииКонтрагента Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности задан контрагент ""%1"". Применить карту лояльности и подставить в документ контрагента ""%1""?';uk='Для карти лояльності заданий контрагент ""%1"". Застосувати карту лояльності і підставити в документ контрагента ""%1""?'");
				ИначеЕсли ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности задано соглашение ""%2"". Применить карту лояльности и подставить в документ соглашение ""%2""?';uk='Для карти лояльності задана оферта ""%2"". Застосувати карту лояльності і підставити в документ оферту ""%2""?'");
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Контрагент, ДанныеКартыЛояльности.Соглашение),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = ДополнительныеПараметры.КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДополнительныеПараметры.ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(Неопределено, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("Дата, Валюта, ВалютаВзаиморасчетов, СуммаДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеПоСуммеПродажи, Объект);
	Если Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Услуги, Объект.ЦенаВключаетНДС));
	ИначеЕсли Объект.Услуги.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество() = 0 Тогда
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", Объект.Услуги.Итог("СуммаВзаиморасчетов"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Договор));
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Договор);
	
КонецПроцедуры


&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ДоступноИзменение = Не Объект.АктПоЗаказам Или ОтклонениеОтУсловийПродаж;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",                          ТолькоПросмотр Или Не ДоступноИзменение);
	ПараметрыФормы.Вставить("СуммаОплатыПоДокументу",                  СуммаВсего);
	ПараметрыФормы.Вставить("Соглашение",                              Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                                  Объект.Валюта);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",                 УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ДатаПлатежа",                             Объект.ДатаПлатежа);
	ПараметрыФормы.Вставить("ФормаОплаты",                             Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Касса",                                   Объект.Касса);
	ПараметрыФормы.Вставить("БанковскийСчет",                          Объект.БанковскийСчетОрганизации);
	ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыВыбораРеквизитов",               ПараметрыВыбораРеквизитов);
	ПараметрыФормы.Вставить("РасширенныйРежимНеИспользуется",          Истина);
	ПараметрыФормы.Вставить("ПорядокРасчетов",                         Объект.ПорядокРасчетов);
	ПараметрыФормы.Вставить("ДоступныеПорядкиРасчетов",                ДоступныеПорядкиРасчетов);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",                 Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("ГрафикИсполненияВДоговоре",               ГрафикИсполненияВДоговоре);
	
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(ПараметрыОплаты, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		Модифицированность = Истина;
		Объект.Согласован                = Ложь;
		Объект.ДатаПлатежа               = ПараметрыОплаты.ДатаПлатежа;
		Объект.Касса                     = ПараметрыОплаты.Касса;
		Объект.БанковскийСчетОрганизации = ПараметрыОплаты.БанковскийСчет;
		
		Если Объект.ФормаОплаты <> ПараметрыОплаты.ФормаОплаты Тогда
			Объект.ФормаОплаты = ПараметрыОплаты.ФормаОплаты;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		КонецЕсли;
		
		Если Объект.ПорядокРасчетов <> ПараметрыОплаты.ПорядокРасчетов Тогда
			Объект.ПорядокРасчетов = ПараметрыОплаты.ПорядокРасчетов;
			УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		КонецЕсли;
		
		НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура АвторасчетНДСПриИзменении(Элемент)
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВалюты()
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "Услуги") Тогда
		
		ПриИзмененииВалютыСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	Если ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		УслугиПослеУдаленияСервер();
	Иначе
		ОбновитьИнформациюПоЗаказам();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.АктПоЗаказам Тогда
		Отказ = Истина;
		ПодборУслугИзЗаказа();
	КонецЕсли;
	
	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Услуги", Отказ, Истина);
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.УслугиПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.УслугиСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не Объект.АктПоЗаказам Тогда
			
			Если НЕ Объект.СкидкиРассчитаны Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("УслугиВыборЗавершение", ЭтотОбъект, 
					Новый Структура("ВыбраннаяСтрока, Поле", ВыбраннаяСтрока, Поле)), 
					НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?';uk='Знижки (націнки) не розраховані, розрахувати?'"), РежимДиалогаВопрос.ДаНет);
                Возврат;
			КонецЕсли;
			
			УслугиВыборФрагмент();

			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.УслугиЦена Тогда
		
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		Если ПравоНаЧтениеВидаЦены Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""';uk='Для редагування ціни виберіть вид ціни ""<довільна>""'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Услуги", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Услуги.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) И ТекущаяСтрока.КодСтроки = 0 Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",        УникальныйИдентификатор);
			ПараметрОповещения.Вставить("СверхЗаказа",          Истина);
			
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.УслугиНоменклатураНабора Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Услуги.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле.Имя = "УслугиЗаказКлиента" Тогда
		Если ЗначениеЗаполнено(Элементы.Услуги.ТекущиеДанные.ЗаказКлиента) Тогда
			ПоказатьЗначение(Неопределено, Элементы.Услуги.ТекущиеДанные.ЗаказКлиента);
		ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
			ПоказатьЗначение(Неопределено, Объект.ЗаказКлиента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
    Поле = ДополнительныеПараметры.Поле;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    УслугиВыборФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура УслугиВыборФрагмент()
    
    Перем ТекущиеДанные;
    
    Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыКлиентовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокЗаказов,
			НСтр("ru='Заказы клиентов (%КоличествоДокументов%)';uk='Замовлення клієнтів (%КоличествоДокументов%)'")
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Элементы.Услуги.ТекущиеДанные.Содержание",
		НСтр("ru='Содержание услуги';uk='Зміст послуги'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродажУслуги", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Услуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
		
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродажУслуги", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Услуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь,"Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки","Количество");
	
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки", "Количество");
	
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки, ИмяКоличества", Ложь, Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, Ложь, "Количество");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Услуги", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Услуги", ТекущаяСтрока, НоваяСтрока, Копирование);
	
	Если Копирование Тогда
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.ЗаказКлиента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Услуги", НСтр("ru='Услуги';uk='Послуги'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт
	
	ЗаполнитьЦеныПоСоглашению(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Услуги", НСтр("ru='Услуги';uk='Послуги'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Соглашение"" не заполнено';uk='Поле ""Оферта"" не заповнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Валюта"" не заполнено';uk='Поле ""Валюта"" не заповнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.АктВыполненныхРабот.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru='Подбор услуг в %Документ%';uk='Підбір послуг у %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт выполненных работ';uk='Акт виконаних робіт'"));
	КонецЕсли;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
    ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах", Истина);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект), 
			НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?';uk='Знижки (націнки) не розраховані, розрахувати?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    
    ОткрытьИнформациюОСкидкахФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент()
    
    Перем ТекущиеДанные;
    
    Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Скидки (наценки)';uk='Знижки (націнки)'"),
			,
			НСтр("ru='Скидки (наценки) рассчитаны';uk='Знижки (націнки) розраховані'"),
			БиблиотекаКартинок.Информация32);
			
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Услуги", НСтр("ru='Услуги';uk='Послуги'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,,АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
		РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Услуги", НСтр("ru='Услуги';uk='Послуги'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект,
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Услуги.ВыделенныеСтроки,АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
		РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Услуги", НСтр("ru='Услуги';uk='Послуги'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Если Не Объект.АктПоЗаказам Тогда
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		РассчитатьСкидкиНаценкиПоЗаказуНаСервере();
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Скидки (наценки)';uk='Знижки (націнки)'"),
		,
		НСтр("ru='Скидки (наценки) рассчитаны';uk='Знижки (націнки) розраховані'"),
		БиблиотекаКартинок.Информация32);
		
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ)
	
	Если Не Объект.АктПоЗаказам Тогда
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		РассчитатьСкидкиНаценкиПоЗаказуНаСервере();
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Скидки (наценки)';uk='Знижки (націнки)'"),
		,
		НСтр("ru='Скидки (наценки) рассчитаны';uk='Знижки (націнки) розраховані'"),
		БиблиотекаКартинок.Информация32);
		
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУслугиИзЗаказа(Команда)
	
	ПодборУслугИзЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект), НСтр("ru='Таблица ""Услуги"" будет перезаполнена. Продолжить?';uk='Таблиця ""Послуги"" буде перезаповнена. Продовжити?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоЗаказуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗаполнитьПоЗаказуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуФрагмент()
    
    ЗаполнитьПоЗаказуСервер();

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Услуги;
	ДанныеТаблицы = Объект.Услуги;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
		"Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки");
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТаблицаФормы.ТекущиеДанные);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Услуги.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Услуги.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Услуги.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Услуги.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", НалогообложениеНДСПоУмолчанию);
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(МассивТиповНоменклатуры));
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Услуги.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Услуги.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) ИЛИ ТекущаяСтрока.КодСтроки <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСКлиентами("КарточкаРасчетовСКлиентамиПоДокументамКонтекст", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(Команда)
	
	Если ВыполнитьАвторасчетНДСКлиент() Тогда
	
		РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиАкта(Элемент)
	
	ОткрытьРеквизитыПечатиАкта();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Функция ВыполнитьАвторасчетНДСКлиент()
	
	Если (НЕ ПерерасчетПроизведен) И Объект.АвторасчетНДС Тогда
		
		ВыполнитьАвторасчетНДССервер();
		ПерерасчетПроизведен = Истина;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВыполнитьАвторасчетНДССервер()
	
	// соответствие для хранения погрешностей округлений
	ПогрешностиОкругления = Новый Соответствие();
	// пересчет сумм НДС с учетом ошибок округления
	НДСИсходящийСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, Объект.Ссылка, Объект.ЦенаВключаетНДС, ПогрешностиОкругления, "Услуги", Строка(Объект.Валюта));
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Объект.Услуги, 0, "СуммаВзаиморасчетов");
	
	
КонецПроцедуры

&НаСервере
Функция АдресОбъектаВоВременномХранилище()
	
	СтруктураОбъекта = Новый Структура;
	
	Для каждого Реквизит Из Метаданные.Документы.АктВыполненныхРабот.Реквизиты Цикл
		
		СтруктураОбъекта.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураОбъекта, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиАкта()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("МестоСоставленияДокумента",      Объект.МестоСоставленияДокумента);
	СтруктураПараметров.Вставить("ПредставительОрганизации",       Объект.ПредставительОрганизации);
	СтруктураПараметров.Вставить("ПредставительОрганизацииДолжность",Объект.ПредставительОрганизацииДолжность);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("ПредставительКонтрагента",       Объект.ПредставительКонтрагента);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                 Ложь);
	СтруктураПараметров.Вставить("Менеджер",                       Объект.Менеджер);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "АктВыполненныхРабот");
	СтруктураПараметров.Вставить("АдресОбъектаВоВременномХранилище", АдресОбъектаВоВременномХранилище());
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Объект.БанковскийСчетОрганизации);
 	
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ГруппаАвтоперевозчик");
	МассивРеквизитов.Добавить("БанковскийСчетГрузоотправителя");
	МассивРеквизитов.Добавить("БанковскийСчетГрузополучателя");
	МассивРеквизитов.Добавить("Грузоотправитель");
	МассивРеквизитов.Добавить("Грузополучатель");
	МассивРеквизитов.Добавить("АдресДоставки");
	МассивРеквизитов.Добавить("ГруппаДоверенность");
	СтруктураПараметров.Вставить("НеПоказыватьРеквизиты", МассивРеквизитов);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Ценообразование.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма, 
														"УслугиСтавкаНДС", 
														"УслугиСуммаНДС", 
														"УслугиСуммаСНДС");

	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "УслугиСуммаСНДС");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиЦена.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравоОтклоненияОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "УслугиХарактеристика",
																		     "Объект.Услуги.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиКодСтроки.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиСуммаВзаиморасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Валюта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютаВзаиморасчетов");

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма, 
									                     "УслугиВидЦены", 
                                                         "Объект.Услуги.ВидЦены");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиЗаказКлиента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиЗаказКлиента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиЗаказКлиента.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.АктПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Услуги");
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	НДСИсходящийСервер.УстановитьУсловноеОформлениеПоАвтоРасчетуНДС(
		ЭтаФорма, 
		"" // ИмяПоляСуммаНДС
	);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииДатыСервер(ПересчитатьЦены, ЦеныРассчитаны)
	
	Если ПересчитатьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер(Истина);
	КонецЕсли;
	ОбновитьОграничениеЗадолженности();
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	УстановитьНалогообложениеНДСПоУмолчанию();
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.АктПоЗаказам);
	ОбновитьОграничениеЗадолженности();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Услуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Услуги");
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);	
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	НДСИсходящийСервер.УстановитьДоступностьВалюты(Элементы, Объект.Организация, "Валюта");
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Услуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Услуги");
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	НДСИсходящийСервер.УстановитьДоступностьВалюты(Элементы, Объект.Организация, "Валюта");
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.АктПоЗаказам);
	ОбновитьОграничениеЗадолженности();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,ТекущаяДата());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Услуги,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина,
		"Количество");
	
	// Пересчет скидок (наценок)
	Если Объект.АктПоЗаказам Тогда
		РассчитатьСкидкиНаценкиПоЗаказуНаСервере();
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
		
	Если Не Объект.АктПоЗаказам И НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Объект.ВалютаВзаиморасчетов = Объект.Валюта;
		ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ЗначениеЗаполнено(Объект.Контрагент)
	 И Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.АктПоЗаказам);
	ОбновитьОграничениеЗадолженности();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
		
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчетОрганизации, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);	
	
	УстановитьНалогообложениеНДСПоУмолчанию();
	НДСИсходящийСервер.УстановитьДоступностьВалюты(Элементы, Объект.Организация, "Валюта");
	
КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииНаСервере(ОчиститьСуммыВзаиморасчетов)
	
	ЗаполнитьДоговорПоУмолчанию();
	Если ОчиститьСуммыВзаиморасчетов Тогда
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Объект.Услуги, 0, "СуммаВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииАктовВыполненныхРаботПоНесколькимЗаказам()
	
	Если Объект.АктПоЗаказам Тогда
		
		Если Объект.Услуги.Количество() = 0 Тогда
			ЗаполнитьПоЗаказуСервер();
		Иначе
			ПривязатьСтрокиАктовВыполненныхРаботКЗаказамКлиентов(Не ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам);
		КонецЕсли;
		
	Иначе
		
		ОтвязатьСтрокиОтЗаказовКлиентов();
		Объект.ЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
		СписокЗаказов.Очистить();
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.АктПоЗаказам, , Истина);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьИнформациюПоЗаказам();
	УстановитьДоступностьКомандБуфераОбмена();
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Услуги, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(, Объект.ЦенаВключаетНДС, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНалогообложениеНДСПоУмолчанию(ПриОткрытииФормы = Ложь)
	
	НалогообложениеНДСПоУмолчаниюИзменено = Ложь;
	ДоступностьНалогообложенияНДСПоУмолчанию = Истина;
	ЗаполнитьСтавкиНДС = Ложь;
	
	НовоеНалогообложениеНДСПоУмолчанию       = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(Объект.Организация, Объект.Контрагент, Объект.Соглашение, Объект.Дата, Истина, Неопределено);
	ДоступностьНалогообложенияНДСПоУмолчанию = НДСОбщегоНазначенияСервер.ДоступностьНалогообложенияНДС(Объект.Организация, Объект.Дата);
	Если НалогообложениеНДСПоУмолчанию <> НовоеНалогообложениеНДСПоУмолчанию Тогда
		ЗаполнитьСтавкиНДС = НДСОбщегоНазначенияСервер.НужноОбработатьНовоеНалогообложениеНДС(НалогообложениеНДСПоУмолчанию, НовоеНалогообложениеНДСПоУмолчанию);
		НалогообложениеНДСПоУмолчанию = НовоеНалогообложениеНДСПоУмолчанию;
		НалогообложениеНДСПоУмолчаниюИзменено = Истина;
	КонецЕсли;
	
	Если НалогообложениеНДСПоУмолчаниюИзменено И ЗаполнитьСтавкиНДС И НЕ ПриОткрытииФормы Тогда
		НалогообложениеНДСПоУмолчаниюПриИзмененииСервер();
	Иначе
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("ГруппаАвторасчетНДС");
		
		НовыйАвторасчетНДС = НДСИсходящийСервер.ПолучитьФлагИОбработатьДоступностьАвторасчетаНДС(НалогообложениеНДСПоУмолчанию, Элементы, МассивЭлементов);
		
		Если Объект.АвторасчетНДС = ИСТИНА И НовыйАвторасчетНДС = ЛОЖЬ Тогда
			Объект.АвторасчетНДС = НовыйАвторасчетНДС;
		КонецЕсли;
	КонецЕсли; 
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДСПоУмолчанию", "Доступность", ДоступностьНалогообложенияНДСПоУмолчанию);
	
КонецПроцедуры // УстановитьНалогообложениеНДСПоУмолчанию

#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Услуги.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Услуги.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Услуги, МассивСтрок, Истина);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Услуги,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, Организация, РасчитыватьНаборы, ПоляЗаполнения, КолонкиПоЗначению",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			Объект.Организация,
			Истина,
			"Цена, СтавкаНДС, ВидЦены",
			Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка())
		),
		СтруктураДействий);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Услуги.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Услуги.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Услуги, МассивСтрок, Истина);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки","Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Услуги,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, РасчитыватьНаборы, ПоляЗаполнения, КолонкиПоЗначению",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			Истина,
			"Цена, ВидЦены",
			Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка())
		),
		СтруктураДействий);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		
		ПараметрыСкидки = Новый Структура();
		ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
		ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
		ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
		ПараметрыСкидки.Вставить("РассчитыватьСуммуВзаиморасчетов", Истина);
		ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
		ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Услуги", СуммаСкидкиНаценки, ПараметрыСкидки);
		
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Услуги", Истина, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиПоЗаказуНаСервере()
	
	Объект.СкидкиНаценки.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсВалютыВзаиморасчетов.Курс * КурсВалюты.Кратность / (КурсВалюты.Курс * КурсВалютыВзаиморасчетов.Кратность) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ВалютаЗаказаВВалютуДокумента
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсВалюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаВзаиморасчетов) КАК КурсВалютыВзаиморасчетов
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(Услуги.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Услуги.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Услуги.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(Услуги.КлючСвязи КАК ЧИСЛО) КАК КлючСвязи,
	|	ВЫРАЗИТЬ(Услуги.Количество КАК ЧИСЛО) КАК Количество
	|ПОМЕСТИТЬ УслугиДокумента
	|ИЗ
	|	&ТаблицаУслуг КАК Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.Ссылка КАК ЗаказКлиента,
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыЗаказа.КлючСвязи КАК КлючСвязи,
	|	УслугиАктовВыполненныхРабот.Количество / ТоварыЗаказа.Количество КАК Коэффициент,
	|	ТоварыЗаказа.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказа.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки * (УслугиАктовВыполненныхРабот.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК СуммаАвтоматическойСкидки,
	|	ТоварыЗаказа.СуммаРучнойСкидки * (УслугиАктовВыполненныхРабот.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК СуммаРучнойСкидки
	|ИЗ
	|	УслугиДокумента КАК УслугиАктовВыполненныхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
	|		ПО УслугиАктовВыполненныхРабот.КодСтроки = ТоварыЗаказа.КодСтроки
	|			И УслугиАктовВыполненныхРабот.Номенклатура = ТоварыЗаказа.Номенклатура
	|			И УслугиАктовВыполненныхРабот.Характеристика = ТоварыЗаказа.Характеристика
	|			И УслугиАктовВыполненныхРабот.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыЗаказа.Ссылка,
	|	ТоварыЗаказа.КодСтроки,
	|	ТоварыЗаказа.КлючСвязи,
	|	УслугиАктовВыполненныхРабот.Количество / ТоварыЗаказа.Количество,
	|	ТоварыЗаказа.ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказа.ПроцентРучнойСкидки,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки * (УслугиАктовВыполненныхРабот.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	ТоварыЗаказа.СуммаРучнойСкидки * (УслугиАктовВыполненныхРабот.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета
	|ИЗ
	|	УслугиДокумента КАК УслугиАктовВыполненныхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаказа
	|		ПО УслугиАктовВыполненныхРабот.КодСтроки = ТоварыЗаказа.КодСтроки
	|			И УслугиАктовВыполненныхРабот.Номенклатура = ТоварыЗаказа.Номенклатура
	|			И УслугиАктовВыполненныхРабот.Характеристика = ТоварыЗаказа.Характеристика
	|			И УслугиАктовВыполненныхРабот.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК Сумма
	|ИЗ
	|	Документ.ЗаказКлиента.СкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(СкидкиНаценки.Ссылка, СкидкиНаценки.КлючСвязи) В
	|			(ВЫБРАТЬ
	|				УслугиДокумента.ЗаказКлиента,
	|				УслугиДокумента.КлючСвязи
	|			ИЗ
	|				УслугиДокумента КАК УслугиДокумента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка,
	|	СкидкиНаценки.Сумма * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.СкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(СкидкиНаценки.Ссылка, СкидкиНаценки.КлючСвязи) В
	|			(ВЫБРАТЬ
	|				УслугиДокумента.ЗаказКлиента,
	|				УслугиДокумента.КлючСвязи
	|			ИЗ
	|				УслугиДокумента КАК УслугиДокумента)");
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Объект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ТаблицаУслуг", Объект.Услуги.Выгрузить(, "ЗаказКлиента, Номенклатура, Характеристика, КодСтроки, Количество, КлючСвязи"));
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = ПакетЗапросов[3].Выгрузить();
	
	ВыборкаУслуги = ПакетЗапросов[2].Выбрать();
	Пока ВыборкаУслуги.Следующий() Цикл
		
		НайденныеСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("ЗаказКлиента, КодСтроки", ВыборкаУслуги.ЗаказКлиента, ВыборкаУслуги.КодСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = НайденныеСтроки[0];
		
		СписокПолей = "ПроцентАвтоматическойСкидки, ПроцентРучнойСкидки";
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаУслуги, СписокПолей);
		
		СтрокаТаблицы.СуммаАвтоматическойСкидки = Окр(ВыборкаУслуги.СуммаАвтоматическойСкидки, 2);
		СтрокаТаблицы.СуммаРучнойСкидки = Окр(ВыборкаУслуги.СуммаРучнойСкидки , 2);
		
		// Пересчет сумм
		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
		
		СуммаКРаспределению = СтрокаТаблицы.СуммаАвтоматическойСкидки;
		Если СтрокаТаблицы.КлючСвязи <> 0 Тогда
			
			НайденныеСтроки = СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("ЗаказКлиента, КлючСвязи", СтрокаТаблицы.ЗаказКлиента, СтрокаТаблицы.КлючСвязи));
			Если НайденныеСтроки <> 0 Тогда
				Для Каждого СтрокаСкидкиЗаказа Из НайденныеСтроки Цикл
					
					СтрокаСкидки = Объект.СкидкиНаценки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
					СтрокаСкидки.Сумма = ВыборкаУслуги.Коэффициент * СтрокаСкидки.Сумма;
					
					СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
				КонецЦикла;
				Если СуммаКРаспределению <> 0 Тогда
					СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СкидкиРассчитаны = Истина;
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Услуги", Истина, Истина, Истина);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокиТЧСкидкиНаценки(СтрокаТЧУслуги)
	
	Если ЗначениеЗаполнено(СтрокаТЧУслуги.КлючСвязи) Тогда
		
		Для Каждого СтрокаКУдалению Из Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧУслуги.КлючСвязи)) Цикл
			
			Объект.СкидкиНаценки.Удалить(СтрокаКУдалению);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Услуги.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслугИзЗаказа()
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(СтрокаТЧ.ЗаказКлиента) Тогда
			МассивКодовСтрок.Добавить(Новый Структура("КодСтроки,ЗаказКлиента", СтрокаТЧ.КодСтроки, СтрокаТЧ.ЗаказКлиента));
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура(
		"ЗаказКлиента,
		|ВалютаДокумента,
		|Документ,
		|МассивКодовСтрок,
		|Партнер,
		|Контрагент,
		|Договор,
		|Организация,
		|Соглашение,
		|Сделка,
		|ВалютаВзаиморасчетов,
		|ЦенаВключаетНДС,
		|ПорядокРасчетов,
		|Дата,
		|НаправлениеДеятельности",
		Объект.ЗаказКлиента,
		Объект.Валюта,
		Объект.Ссылка,
		МассивКодовСтрок,
		Объект.Партнер,
		Объект.Контрагент,
		Объект.Договор,
		Объект.Организация,
		Объект.Соглашение,
		Объект.Сделка,
		Объект.ВалютаВзаиморасчетов,
		Объект.ЦенаВключаетНДС,
		Объект.ПорядокРасчетов,
		Объект.Дата,
		Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Документ.АктВыполненныхРабот.Форма.ФормаПодбораУслугИзЗаказа",
		ПараметрыПодбора,
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаУслуг = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначенияУслуг();
	
	Для каждого СтрокаУслуги Из ТаблицаУслуг Цикл
		
		ТекущаяСтрока = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаУслуги, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, ВидЦены, Цена, Количество, ПроцентРучнойСкидки");
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
		ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Услуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Услуги");
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не (Объект.АктПоЗаказам);

	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействийСДобавленнымиСтроками, Объект);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействийСИзмененнымиСтроками, Объект);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ИмяКолонкиКоличество                   = "Количество";
	СтруктураДействий.НеИспользоватьУпаковки                 = Истина;
	СтруктураДействий.ИмяТЧ                                  = "Услуги";
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.ТолькоУслуги                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Услуги.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Услуги.ВыделенныеСтроки, Объект.Услуги);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаУслуг = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	Для каждого СтрокаУслуги Из ТаблицаУслуг Цикл
		
		ТекущаяСтрока = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаУслуги);
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
		ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначенияУслуг();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Услуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("УслугиВставитьСтроки");
	МассивЭлементов.Добавить("УслугиКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов,
		"Доступность",
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки") И НЕ Объект.АктПоЗаказам);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("УслугиВставитьСтроки");
	МассивЭлементов.Добавить("УслугиКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ Объект.АктПоЗаказам);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Количество");
	
	Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентАвтоматическойСкидки");
		Колонки.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Услуги", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Услуги", ДополнительныйПараметр);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры) Экспорт
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Услуги");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Услуги", ПараметрыДанных);
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	ИспользоватьСоглашенияСКлиентами                    = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	
	УстановитьНалогообложениеНДСПоУмолчанию(Истина);	
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(, Объект.ЦенаВключаетНДС, Истина);
	Иначе
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.АктПоЗаказам, Ложь);
	
	ИспользоватьНаправленияДеятельности               = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
		
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьИнформациюПоЗаказам();
	ОбновитьСостояниеСервер();
	ОбновитьОграничениеЗадолженности();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Услуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Услуги");
	
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(Форма)
	
	СуммаВсего = Форма.Объект.Услуги.Итог("Сумма");
	Форма.СуммаАвтоСкидки   = Форма.Объект.Услуги.Итог("СуммаАвтоматическойСкидки");
	Форма.СуммаРучнойСкидки = Форма.Объект.Услуги.Итог("СуммаРучнойСкидки");
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	
	Если СуммаВсего > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
		
	Иначе
		
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
		
	КонецЕсли;
	
	Форма.СуммаВсего = Форма.Объект.Услуги.Итог("СуммаСНДС");
	
	Если Форма.НалогообложениеНДСПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
			
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
		И ИспользоватьНаправленияДеятельности Тогда
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Перечисления.ХозяйственныеОперации.РеализацияКлиенту, 
															Объект.ВалютаВзаиморасчетов, 
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Перечисления.ХозяйственныеОперации.РеализацияКлиенту, 
															Объект.ВалютаВзаиморасчетов);
	КонецЕсли;		
		
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.АктПоЗаказам);
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоЗаказуСервер()
	
	Объект.Услуги.Очистить();
	
	Если ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		МассивЗаказов = Неопределено;
	Иначе
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(Объект.ЗаказКлиента);
	КонецЕсли;
	
	Документы.АктВыполненныхРабот.ЗаполнитьПоОстаткамЗаказов(
		Объект,
		Объект.Услуги,
		Объект.СкидкиНаценки,
		МассивЗаказов,
		Ложь);
	
	ОбновитьИнформациюПоЗаказам();
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Услуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Услуги");
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(
		СписокЗаказов,
		Объект.ЗаказКлиента,
		НадписьЗаголовокЗаказыКлиентов,
		Элементы,
		Элементы.УслугиГруппаЗаказКлиента,
		Объект.Услуги,
		"ЗаказКлиента",
		ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	
	Если Не Объект.АктПоЗаказам Тогда
		МассивЭлементов.Добавить("Дата");
	КонецЕсли;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Договор");
	
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("НалогообложениеНДСПоУмолчанию");
	МассивЭлементов.Добавить("АвторасчетНДС");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	МассивЭлементов.Добавить("АктВыполненныхРаботПоЗаказу");
	МассивЭлементов.Добавить("АктВыполненныхРаботПоЗаказам");
	
	МассивЭлементов.Добавить("Услуги;ПередНачаломДобавления,ПередУдалением,ПередНачаломИзменения");
	
	МассивЭлементов.Добавить("УслугиДобавить");
	МассивЭлементов.Добавить("УслугиСкопировать");
	МассивЭлементов.Добавить("УслугиКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("УслугиКонтекстноеМенюСкопировать");
	
	МассивЭлементов.Добавить("УслугиНоменклатура");
	МассивЭлементов.Добавить("УслугиСодержание");
	МассивЭлементов.Добавить("УслугиКодСтроки");
	МассивЭлементов.Добавить("УслугиХарактеристика");
	МассивЭлементов.Добавить("УслугиВидЦены");
	МассивЭлементов.Добавить("УслугиПроцентРучнойСкидки");
	МассивЭлементов.Добавить("УслугиСуммаРучнойСкидки");
	МассивЭлементов.Добавить("УслугиСтавкаНДС");
	
	МассивЭлементов.Добавить("УслугиПоискПоШтрихкоду");
	МассивЭлементов.Добавить("УслугиЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("УслугиРазбитьСтроку");
	МассивЭлементов.Добавить("УслугиКонтекстноеМенюРазбитьСтроку");
	МассивЭлементов.Добавить("УслугиОткрытьПодбор");
	МассивЭлементов.Добавить("УслугиЗагрузитьИзВнешнегоФайла");
	
	МассивЭлементов.Добавить("УслугиНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("УслугиЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("УслугиЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	
	МассивЭлементов.Добавить("УслугиОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("УслугиНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("УслугиНазначитьРучнуюСкидкуВыделенныхСтрок");
	
	МассивЭлементов.Добавить("УслугиПодобратьУслугиИзЗаказа");
	МассивЭлементов.Добавить("УслугиЗаполнитьПоЗаказу");
	МассивЭлементов.Добавить("УслугиРассчитатьСкидкиНаценки");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("СчитатьКартуЛояльностиКлиент");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиПодобратьУслугиИзЗаказа",                 "Доступность", Объект.АктПоЗаказам);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиЗаполнитьПоЗаказу",                       "Доступность", Объект.АктПоЗаказам);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиОткрытьИнформациюОСкидках",                "Доступность", Не Объект.АктПоЗаказам);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюУслугиОткрытьИнформациюОСкидках", "Доступность", Не Объект.АктПоЗаказам);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("УслугиСкопировать");
	МассивЭлементов.Добавить("УслугиКонтекстноеМенюСкопировать");
	
	МассивЭлементов.Добавить("УслугиПоискПоШтрихкоду");
	МассивЭлементов.Добавить("УслугиЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("УслугиРазбитьСтроку");
	МассивЭлементов.Добавить("УслугиКонтекстноеМенюРазбитьСтроку");
	МассивЭлементов.Добавить("УслугиОткрытьПодбор");
	МассивЭлементов.Добавить("УслугиЗагрузитьИзВнешнегоФайла");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("СчитатьКартуЛояльностиКлиент");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	МассивЭлементов.Добавить("УслугиОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("УслугиНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("УслугиНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("УслугиНазначитьАвтоматическиеСкидки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ Объект.АктПоЗаказам);
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	
	
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	МассивЭлементов.Добавить("АктВыполненныхРаботПоЗаказу");
	МассивЭлементов.Добавить("АктВыполненныхРаботПоЗаказам");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	МассивЭлементов.Добавить("УслугиНоменклатура");
	МассивЭлементов.Добавить("УслугиСодержание");
	МассивЭлементов.Добавить("УслугиКодСтроки");
	МассивЭлементов.Добавить("УслугиХарактеристика");
	МассивЭлементов.Добавить("УслугиВидЦены");
	
	МассивЭлементов.Добавить("УслугиПроцентРучнойСкидки");
	МассивЭлементов.Добавить("УслугиСуммаРучнойСкидки");
	МассивЭлементов.Добавить("УслугиСтавкаНДС");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Объект.АктПоЗаказам И Не ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж());
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("УслугиЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("УслугиЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	МассивЭлементов.Добавить("УслугиОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("УслугиНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("УслугиНазначитьРучнуюСкидкуВыделенныхСтрок");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ (Объект.АктПоЗаказам И Не ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж()));

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьУслугиИзХранилища(АдресУслугВХранилище)
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	
	СтруктураПоискаУслуг = Новый Структура("КодСтроки,ЗаказКлиента");
	СтруктураПоискаСкидки  = Новый Структура("КлючСвязи");
	Для Каждого СтрокаУслуг Из СтруктураТаблиц.Товары Цикл
		
		// Обработка ТЧ услуги.
		СтруктураПоискаУслуг.КодСтроки = СтрокаУслуг.КодСтроки;
		СтруктураПоискаУслуг.ЗаказКлиента = СтрокаУслуг.ЗаказКлиента;
		МассивСтрокТЧУслуги = Объект.Услуги.НайтиСтроки(СтруктураПоискаУслуг);
		
		Если МассивСтрокТЧУслуги.Количество() = 0 Тогда
			
			СтрокаТЧУслуги = Объект.Услуги.Добавить();
			
		ИначеЕсли МассивСтрокТЧУслуги.Количество() = 1 Тогда
			
			СтрокаТЧУслуги = МассивСтрокТЧУслуги[0];
			
			// Удаление подчиненных строк из ТЧ скидки.
			УдалитьСтрокиТЧСкидкиНаценки(СтрокаТЧУслуги);
			
		ИначеЕсли МассивСтрокТЧУслуги.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧУслуги Цикл
				
				// Удаление подчиненных строк из ТЧ скидки.
				УдалитьСтрокиТЧСкидкиНаценки(СтрокаКУдалению);
				
				Объект.Услуги.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
			СтрокаТЧУслуги = Объект.Услуги.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧУслуги, СтрокаУслуг);
		
		// Обработка ТЧ скидки.
		Если ЗначениеЗаполнено(СтрокаТЧУслуги.КлючСвязи) Тогда
			СтруктураПоискаСкидки.КлючСвязи = СтрокаТЧУслуги.КлючСвязи;
			Для Каждого СтрокаСкидки Из СтруктураТаблиц.СкидкиНаценки.НайтиСтроки(СтруктураПоискаСкидки) Цикл
				
				ЗаполнитьЗначенияСвойств(Объект.СкидкиНаценки.Добавить(), СтрокаСкидки);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Взвод флага необходимости расчета скидок.
	Объект.СкидкиРассчитаны = Ложь;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Услуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Услуги");
	
	ОбновитьИнформациюПоЗаказам();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Если Объект.АктПоЗаказам И СписокЗаказов.Количество()<=1
			И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
		Если ТипЗнч(Объект.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			Документы.ЗаказКлиента.РассчитатьСостояние(
				Объект.ЗаказКлиента,
				Объект.Договор,
				ЭтаФорма);
			
		ИначеЕсли ТипЗнч(Объект.ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			
			Документы.ЗаявкаНаВозвратТоваровОтКлиента.РассчитатьСостояние(
				Объект.ЗаказКлиента,
				Объект.Договор,
				ЭтаФорма);
			
		КонецЕсли;
	Иначе
		
		Документы.АктВыполненныхРабот.РассчитатьСостояние(
			Объект.Ссылка,
			Объект.Договор,
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Расчеты по договору';uk='Розрахунки за договором'");
	ИначеЕсли Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
	 И Объект.АктПоЗаказам
	 И ТипЗнч(Объект.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	 	Расчеты = НСтр("ru='Оплачено по заказу';uk='Сплачено за замовленням'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	ИначеЕсли Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
	 И Объект.АктПоЗаказам
	 И ТипЗнч(Объект.ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
	 	Расчеты = НСтр("ru='Оплачено по заявке на возврат';uk='Сплачено за заявкою на повернення'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	Иначе
		Расчеты = НСтр("ru='Оплачено';uk='Оплачено'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	КонецЕсли;
	
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
КонецПроцедуры

&НаСервере
Функция ПривязатьСтрокиАктовВыполненныхРаботКЗаказамКлиентов(ОтобратьПоЗаказу)
	
	Если (Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов")) Или
		(Не ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам")
		И Не ЗначениеЗаполнено(Объект.ЗаказКлиента)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Услуги
	|ИЗ
	|	&Услуги КАК Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.ЗаказКлиента.Сделка КАК Сделка,
	|	ТаблицаЗаказы.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
	|	СУММА(ТаблицаЗаказы.КОформлению) КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыКлиентов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(,
	|				ВЫБОР
	|						КОГДА &ОтобратьПоЗаказу
	|							ТОГДА ЗаказКлиента = &ЗаказКлиента
	|						ИНАЧЕ ЗаказКлиента.Партнер = &Партнер
	|								И ЗаказКлиента.Контрагент = &Контрагент
	|								И ЗаказКлиента.Договор = &Договор
	|								И ЗаказКлиента.Организация = &Организация
	|								И ЗаказКлиента.ХозяйственнаяОперация В
	|									(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя),
	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
	|								И ЗаказКлиента.Соглашение = &Соглашение
	|								И ЗаказКлиента.Сделка = &Сделка
	|								И ЗаказКлиента.Валюта = &ВалютаВзаиморасчетов
	|								И ЗаказКлиента.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|								И ЗаказКлиента.ПорядокРасчетов = &ПорядокРасчетов
	|								И ЗаказКлиента.НаправлениеДеятельности = &НаправлениеДеятельности
	|					КОНЕЦ
	|				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Услуги.Номенклатура КАК Номенклатура,
	|						Услуги.Характеристика КАК Характеристика
	|					ИЗ
	|						Услуги КАК Услуги)
	|	) КАК ЗаказыОстатки
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыДвижения.ЗаказКлиента,
	|		ЗаказыДвижения.Номенклатура,
	|		ЗаказыДвижения.Характеристика,
	|		ЗаказыДвижения.КодСтроки,
	|		ВЫБОР
	|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗаказыДвижения.КОформлению
	|			ИНАЧЕ ЗаказыДвижения.КОформлению
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов КАК ЗаказыДвижения
	|	ГДЕ
	|		ЗаказыДвижения.Регистратор = &Регистратор
	|		И ВЫБОР
	|				КОГДА &ОтобратьПоЗаказу
	|					ТОГДА ЗаказыДвижения.ЗаказКлиента = &ЗаказКлиента
	|				ИНАЧЕ ЗаказыДвижения.ЗаказКлиента.Партнер = &Партнер
	|						И ЗаказыДвижения.ЗаказКлиента.Контрагент = &Контрагент
	|						И ЗаказыДвижения.ЗаказКлиента.Договор = &Договор
	|						И ЗаказыДвижения.ЗаказКлиента.Организация = &Организация
	|						И ЗаказыДвижения.ЗаказКлиента.ХозяйственнаяОперация В
	|							(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя),
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
	|						И ЗаказыДвижения.ЗаказКлиента.Соглашение = &Соглашение
	|						И ЗаказыДвижения.ЗаказКлиента.Сделка = &Сделка
	|						И ЗаказыДвижения.ЗаказКлиента.Валюта = &ВалютаВзаиморасчетов
	|						И ЗаказыДвижения.ЗаказКлиента.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|						И ЗаказыДвижения.ЗаказКлиента.ПорядокРасчетов = &ПорядокРасчетов
	|						И ЗаказыДвижения.ЗаказКлиента.НаправлениеДеятельности = &НаправлениеДеятельности
	|		КОНЕЦ
	|		И ЗаказыДвижения.Активность
	|		И ЗаказыДвижения.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
	|		И (Номенклатура, Характеристика) В
	|			(ВЫБРАТЬ
	|				Услуги.Номенклатура КАК Номенклатура,
	|				Услуги.Характеристика КАК Характеристика
	|			ИЗ
	|				Услуги КАК Услуги)
	|		) КАК ТаблицаЗаказы
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.ЗаказКлиента,
	|	ТаблицаЗаказы.Номенклатура,
	|	ТаблицаЗаказы.Характеристика,
	|	ТаблицаЗаказы.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.КОформлению) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДублей,
	|	ЗаказыКлиентов.Номенклатура КАК Номенклатура,
	|	ЗаказыКлиентов.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДублиУслуг
	|ИЗ
	|	ЗаказыКлиентов КАК ЗаказыКлиентов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентов.Номенклатура,
	|	ЗаказыКлиентов.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.ЗаказКлиента            КАК ЗаказКлиента,
	|	ЗаказыКлиентов.Номенклатура            КАК Номенклатура,
	|	ЗаказыКлиентов.Характеристика          КАК Характеристика,
	|	ЗаказыКлиентов.КодСтроки               КАК КодСтроки,
	|	ЗаказыКлиентов.КОформлениюОстаток      КАК КОформлениюОстаток,
	|	ЗаказКлиентаТовары.ВидЦены             КАК ВидЦены,
	|	ЗаказКлиентаТовары.Цена                КАК Цена,
	|	ЗаказКлиентаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказКлиентаТовары.СтавкаНДС           КАК СтавкаНДС,
	|	0 КАК Распределено,
	|	ДублиУслуг.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ЗаказыКлиентов КАК ЗаказыКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДублиУслуг КАК ДублиУслуг
	|		ПО ЗаказыКлиентов.Номенклатура = ДублиУслуг.Номенклатура
	|			И ЗаказыКлиентов.Характеристика = ДублиУслуг.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО (ЗаказКлиентаТовары.Ссылка = ЗаказыКлиентов.ЗаказКлиента)
	|			И (ЗаказКлиентаТовары.КодСтроки = ЗаказыКлиентов.КодСтроки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	ЗаказКлиентаТовары.ДатаОтгрузки,
	|	ЗаказКлиентаТовары.Ссылка,
	|	ЗаказКлиентаТовары.НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаказКлиента",          Объект.ЗаказКлиента);
	Запрос.УстановитьПараметр("Партнер",               Объект.Партнер);
	Запрос.УстановитьПараметр("Контрагент",            Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор",               Объект.Договор);
	Запрос.УстановитьПараметр("Организация",           Объект.Организация);
	Запрос.УстановитьПараметр("Сделка",                Объект.Сделка);
	Запрос.УстановитьПараметр("Соглашение",            Объект.Соглашение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",  Объект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",       Объект.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ПорядокРасчетов",       Объект.ПорядокРасчетов);
	Запрос.УстановитьПараметр("Регистратор",           Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",      ОтобратьПоЗаказу);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	
	Запрос.УстановитьПараметр("Услуги",  Объект.Услуги.Выгрузить(,"КодСтроки,Номенклатура,Характеристика,ЗаказКлиента"));
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	ТаблицаНераспределенныхУслуг = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("Характеристика");
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("ЗаказКлиента");
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("Количество");
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("ВидЦены");
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("Цена");
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("ПроцентРучнойСкидки");
	ТаблицаНераспределенныхУслуг.Колонки.Добавить("СтавкаНДС");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",        Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",      Выборка.Характеристика);
		СтруктураПоиска.Вставить("ВидЦены",             Выборка.ВидЦены);
		СтруктураПоиска.Вставить("Цена",                Выборка.Цена);
		СтруктураПоиска.Вставить("ПроцентРучнойСкидки", Выборка.ПроцентРучнойСкидки);
		СтруктураПоиска.Вставить("СтавкаНДС",           Выборка.СтавкаНДС);
		СтруктураПоиска.Вставить("КодСтроки",           0);
		
		НайденныеСтроки = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличество = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной
		Если Выборка.КоличествоДублей < 2 Тогда
		
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
				ТекСтрока.КодСтроки        = Выборка.КодСтроки;
				ТекСтрока.ЗаказКлиента     = Выборка.ЗаказКлиента;
				НераспределенноеКоличество = НераспределенноеКоличество - ТекСтрока.Количество;
				
				Если НераспределенноеКоличество <= 0 Тогда
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают
			
			НайденаПодходящаяСтрока = Ложь;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ТекСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказКлиента");
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхУслуг.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли услуг, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхУслуг.Количество() > 0 Тогда
	
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("КодСтроки", 0);
		СтруктураПоиска.Вставить("ЗаказКлиента", Неопределено);
		
		СтрокиУслуги = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаУслуги Из СтрокиУслуги Цикл
			
			// Найдем нужные строки в таблице нераспределенных услуг
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура",        СтрокаУслуги.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика",      СтрокаУслуги.Характеристика);
			СтруктураПоиска.Вставить("ВидЦены",             СтрокаУслуги.ВидЦены);
			СтруктураПоиска.Вставить("Цена",                СтрокаУслуги.Цена);
			СтруктураПоиска.Вставить("ПроцентРучнойСкидки", СтрокаУслуги.ПроцентРучнойСкидки);
			СтруктураПоиска.Вставить("СтавкаНДС",           СтрокаУслуги.СтавкаНДС);
			
			НайденныеСтроки = ТаблицаНераспределенныхУслуг.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТекСтрока.Номенклатура = СтрокаУслуги.Номенклатура И
					ТекСтрока.Характеристика = СтрокаУслуги.Характеристика И
					ТекСтрока.ВидЦены = СтрокаУслуги.ВидЦены И
					ТекСтрока.Цена = СтрокаУслуги.Цена И
					ТекСтрока.ПроцентРучнойСкидки = СтрокаУслуги.ПроцентРучнойСкидки И
					ТекСтрока.СтавкаНДС = СтрокаУслуги.СтавкаНДС И
					
					ТекСтрока.Количество > 0 Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаУслуги, ТекСтрока, "КодСтроки,ЗаказКлиента");
					
					// Уменьшим нераспределенное количество в таблице
					ТекСтрока.Количество = ТекСтрока.Количество - СтрокаУслуги.Количество;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим строки выполнения работ, которые не удалось привязать к заказам
	МассивУдаляемыхСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.КодСтроки)
			Или Не ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
			
			МассивУдаляемыхСтрок.Добавить(ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивУдаляемыхСтрок Цикл
		Объект.Услуги.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОтвязатьСтрокиОтЗаказовКлиентов()
	
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		
		ТекСтрока.КодСтроки = 0;
		ТекСтрока.ЗаказКлиента = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УслугиПослеУдаленияСервер()
	
	ОбновитьИнформациюПоЗаказам();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовОплаты()
	
	ВидимостьЭлемента = (Не Объект.АктПоЗаказам) ИЛИ Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	Элементы.НадписьЭтапыОплаты.Видимость = ВидимостьЭлемента;
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма, Ложь, Объект.АктПоЗаказам);
	ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма, Ложь, Объект.АктПоЗаказам);
	
	УстановитьВидимостьПоляПартнер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов() Экспорт
	
	УстановитьВидимостьРеквизитовОплаты();
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Услуги", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции


&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДокументПродажи.Соглашение) Тогда
		ВалютаДокумента = Объект.Валюта;
		ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
		РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер()
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	УслугиИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий,Объект);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначенияУслуг();
	
	Для Каждого СтрокаУслуга Из УслугиИзХранилища Цикл
		СтрокаТЧУслуги = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧУслуги, СтрокаУслуга);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧУслуги, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиАктовВыполненныхРабот(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДСПоУмолчанию" Тогда
		НалогообложениеНДСПоУмолчаниюПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "АвторасчетНДС" Тогда
		АвторасчетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВалютаВзаиморасчетов" Тогда
		ВалютаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "АктВыполненныхРаботПоЗаказу" Тогда
		АктВыполненныхРаботПоЗаказамПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "АктВыполненныхРаботПоЗаказам" Тогда
		АктВыполненныхРаботПоЗаказамПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиНоменклатура" Тогда
		УслугиНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиХарактеристика" Тогда
		УслугиХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиКоличество" Тогда
		УслугиКоличествоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиВидЦены" Тогда
		УслугиВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиЦена" Тогда
		УслугиЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиПроцентРучнойСкидки" Тогда
		УслугиПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиСуммаРучнойСкидки" Тогда
		УслугиСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиСумма" Тогда
		УслугиСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "УслугиСтавкаНДС" Тогда
		УслугиСтавкаНДСПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "ПоискПоШтрихкоду" Тогда
		ПоискПоШтрихкодуВыполнить(Команда);
	ИначеЕсли Команда.Имя = "РазбитьСтроку" Тогда
		РазбитьСтроку(Команда);
	ИначеЕсли Команда.Имя = "ОткрытьПодбор" Тогда
		ОткрытьПодбор(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьИзВнешнегоФайла" Тогда
		ЗагрузитьИзВнешнегоФайла(Команда);
	ИначеЕсли Команда.Имя = "НазначитьАвтоматическиеСкидки" Тогда
		НазначитьАвтоматическиеСкидки(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныПоСоглашению" Тогда
		ЗаполнитьЦеныПоСоглашению(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен" Тогда
		ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда);
	ИначеЕсли Команда.Имя = "ОтменитьРучныеСкидки" Тогда
		ОтменитьРучныеСкидки(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидку" Тогда
		НазначитьРучнуюСкидку(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидкуВыделенныхСтрок" Тогда
		НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда);
	ИначеЕсли Команда.Имя = "ПодобратьУслугиИзЗаказа" Тогда
		ПодобратьУслугиИзЗаказа(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьПоЗаказу" Тогда
		ЗаполнитьПоЗаказу(Команда);
	ИначеЕсли Команда.Имя = "РассчитатьСкидкиНаценки" Тогда
		РассчитатьСкидкиНаценки(Команда);
	ИначеЕсли Команда.Имя = "СчитатьКартуЛояльности" Тогда
		СчитатьКартуЛояльности(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Услуги" Тогда
		УслугиПередУдалением(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "Услуги" Тогда
		УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкиПередИзменениемСтатуса()
	
	
	РеквизитМожноИзменить = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
			"РезультатВопросаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено
		Или СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		РеквизитМожноИзменить = Истина;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РеквизитМожноИзменить = Истина;
	
	Возврат РеквизитМожноИзменить;
	
КонецФункции

&НаКлиенте
Процедура РезультатВопросаЗавершение(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = "ВвестиКорректировку" Тогда
		ОткрытьФорму("Документ.КорректировкаРеализации.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		ОбщегоНазначенияУТКлиент.ВернутьПредыдущееЗначениеРеквизита(ЭтаФорма, Элемент);
		Возврат;
	Иначе
		ОбщегоНазначенияУТКлиент.СохранитьЗначениеРеквизита(ЭтаФорма, Элемент);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[Элемент.Имя], Элемент.ТекущиеДанные);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьПоляПартнер()
	
	ВидимостьКЛ = Элементы.СчитатьКартуЛояльностиКлиент.Видимость;
	Если ВидимостьКЛ Тогда
		ВидимостьКЛ = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	КонецЕсли;
	
	Элементы.ПартнерБезКЛ.Видимость = НЕ ВидимостьКЛ;
	Элементы.Партнер.Видимость      = ВидимостьКЛ;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ЭДО

&НаКлиенте
Процедура ВыгрузкаПервичныхДокументовВЗвит1С(Команда)
	
	Если НЕ КонтрагентИспользуетЭДО(Объект.Контрагент)  Тогда
		ПоказатьПредупреждение(, НСтр("ru='В карточке контрагента не установлен признак ""Использовать FREDO ДокМен""!';uk= 'В картці контрагента не встановлена ознака ""Використовувати FREDO ДокМен""!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С(Истина) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные еще не записаны."
					 "Выполнение действия ""%1"" возможно только после записи данных."
					 "Данные будут записаны.';uk='Дані ще не записані."
				 	 "Виконання дії ""%1"" можливо тільки після запису даних."
					 "Дані будуть записані.'"),
					 НСтр("ru='выгрузки';uk= 'вивантаження'"));
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
	Иначе
		ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыВыгрузкиПервичныхДокументовВЭДО(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	глМенеджерЗвит1С.ВыгрузитьПервичныйДокумент(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентИспользуетЭДО(Контрагент)  
	Возврат Контрагент.ИспользоватьЭДО1СЗвит;
КонецФункции

#КонецОбласти

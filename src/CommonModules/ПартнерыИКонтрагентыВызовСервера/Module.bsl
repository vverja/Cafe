
#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

Процедура ОбновитьЗначениеРеквизитаУПеретаскиваемыхПартнеров(Значение, МассивПартнеров, КоличествоЗаписанных) Экспорт

	КоличествоЗаписанных = 0;
	МассивГруппДоступныхДляИзменения =
		УправлениеДоступом.ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа(Тип("СправочникСсылка.Партнеры"), Истина);
	
	ИмяРеквизита = "";
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.БизнесРегионы") Тогда
		ИмяРеквизита = "БизнесРегион";
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ГруппыДоступаПартнеров") Тогда
		ИмяРеквизита = "ГруппаДоступа";
		Если МассивГруппДоступныхДляИзменения.Найти(Значение) = Неопределено Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяРеквизита = "ОсновнойМенеджер";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Партнеры.Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В(&МассивПартнеров)
	|	И Партнеры.ГруппаДоступа В (&МассивГруппДоступныхДляИзменения)
	|	И Партнеры.%ИмяРеквизита% <> &Значение";
	
	Запрос.УстановитьПараметр("МассивПартнеров",МассивПартнеров);
	Запрос.УстановитьПараметр("Значение",Значение);
	Запрос.УстановитьПараметр("МассивГруппДоступныхДляИзменения", МассивГруппДоступныхДляИзменения);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРеквизита%", ИмяРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ПартнерОбъект =  Выборка.Ссылка.ПолучитьОбъект();
		ПартнерОбъект[ИмяРеквизита] = Значение;
		ПартнерОбъект.Записать();
		КоличествоЗаписанных = КоличествоЗаписанных + 1;
	
	КонецЦикла;

КонецПроцедуры

// Получает основного менеджера бизнес-региона
//
// Параметры
//  БизнесРегион  - СправочникСсылка.БизнесРегионы - бизнес-регион, для которого получается основной менеджер
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи   - основной менеджер бизнес-региона
//
Функция ОсновнойМенеджерБизнесРегиона(БизнесРегион) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесРегион,"ОсновнойМенеджер");

КонецФункции

// Получает партнера - объекта авторизации внешнего пользователя
//
// Возвращаемое значение:
//  СправочникСсылка.Партнеры - партнер,если объект авторизации партнер, неопределено в обратном случае
//
Функция ПолучитьАвторизовавшегосяПартнера() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
	Если НЕ ЗначениеЗаполнено(ВнешнийПользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ВнешнийПользователь.ОбъектАвторизации) = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат ВнешнийПользователь.ОбъектАвторизации;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Формирует представление справочника Партнеры в зависимости от настроек раздельного или совместного использования партнеров и контрагентов.
//
// Возвращаемое значение:
//   Строка   - сформированное представление справочника Партнеры.
//
Функция ПредставлениеСправочникаПартнеры() Экспорт
	
	Возврат ?(ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"), НСтр("ru='Контрагенты';uk='Контрагенти'"), НСтр("ru='Партнеры';uk='Партнери'"));
	
КонецФункции

// Получает структуру данных о авторизовавшемся внешнем пользователе
//
// Возвращаемое значение:
//  Структура - содержит информацию о авторизовавшемся внешнем пользвателе
//
Функция ДанныеАвторизовавшегосяВнешнегоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
	Если НЕ ЗначениеЗаполнено(ВнешнийПользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АвторизованПартнер = Истина;
	Партнер            = Справочники.Партнеры.ПустаяСсылка();
	КонтактноеЛицо     = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	
	ОбъектАвторизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешнийПользователь, "ОбъектАвторизации");
	
	Если ТипЗнч(ОбъектАвторизации) = Тип("СправочникСсылка.Партнеры") Тогда
		Партнер        = ОбъектАвторизации;
	ИначеЕсли ТипЗнч(ОбъектАвторизации) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		АвторизованПартнер = Ложь;
		КонтактноеЛицо = ОбъектАвторизации;
		Партнер        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектАвторизации, "Владелец");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураКВозврату = Новый Структура;
	СтруктураКВозврату.Вставить("АвторизованПартнер", АвторизованПартнер);
	СтруктураКВозврату.Вставить("Партнер", Партнер);
	СтруктураКВозврату.Вставить("КонтактноеЛицо", КонтактноеЛицо);
	
	Возврат СтруктураКВозврату;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает подчиненному контрагенту его головного контрагенту
//
// Параметры
//  Контрагент  - СправочникСсылка.Контрагенты - контрагент, которому задается головной
//  ГоловнойКонтрагент  - СправочникСсылка.Контрагенты - устанавливаемое значение головного контрагента
//  ОписаниеОшибки  - Строка - параметр, в который записываются возникшие ошибки
//
Процедура ИзменитьГоловногоКонтрагента(Контрагент, ГоловнойКонтрагент, ОписаниеОшибки) Экспорт
	
	ИННПлательщикаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент, "ИННПлательщикаНДС");
	
	Если ЗначениеЗаполнено(ИННПлательщикаНДС) Тогда	
		
		КодФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КодФилиала");
		
		ВыборкаКонтрагент = ПартнерыИКонтрагенты.ИННПлательщикаНДСКодФилиалаУжеИспользуетсяВИнформационнойБазе(ИННПлательщикаНДС, КодФилиала, Контрагент);
		Если ВыборкаКонтрагент <> Неопределено Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось изменить головного контрагента для %1.
                |Данные ИНН плательщика НДС и код филиала уже указаны для контрагента с кодом %2, ответственный - %3.
                |Попробуйте указать правильный код филиала, и лишь затем выбрать головного контрагента.'
                |;uk='Не вдалося змінити головного контрагента для %1.
                |Дані ІПН платника ПДВ та код філії вже вказані для контрагента з кодом %2, відповідальний - %3.
                |Спробуйте ввести правильний код філії, і лише потім вибрати головного контрагента.'"),
				Контрагент,
				ВыборкаКонтрагент.Код,
				ВыборкаКонтрагент.ОсновнойМенеджер);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
	Попытка
		КонтрагентОбъект.Заблокировать();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось изменить головного контрагента для %1.
                |Возможно, контрагент в настоящий момент редактируется.'
                |;uk='Не вдалося змінити головного контрагента для %1.
                |Можливо, контрагент зараз редагується.'"),
			Контрагент);
		Возврат;
	КонецПопытки;
	
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	КонтрагентОбъект.ИННПлательщикаНДС = ИННПлательщикаНДС;
	КонтрагентОбъект.Записать();
	
	КонтрагентОбъект.Разблокировать();
	
КонецПроцедуры

Функция ЗначенияПолейКонтактнойИнформации(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено) Экспорт
	
	// Создаем новый экземпляр по представлению
	Результат = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	// Добавляем в него комментарий, если есть
	Если Комментарий <> Неопределено Тогда
		Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


Функция ИмяФормыСозданияКонтрагента() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Возврат "Справочник.Партнеры.Форма.ПомощникНового";
	Иначе
		Возврат "Справочник.Контрагенты.Форма.ФормаЭлемента";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

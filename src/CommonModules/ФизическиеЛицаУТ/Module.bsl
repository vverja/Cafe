////////////////////////////////////////////////////////////////////////////////
// Расширение подсистемы "Физические лица" для УТ и ERP.
//
// Вместо функций модуля БСП ФизическиеЛицаКлиентСервер, предназначенных для
// получения различной информации о ФИО физического лица,
// следует использовать одноименные функции этого модуля.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФИОФизическихЛиц

// Формирует структуру, содержащую информацию о фамилии, имени и отчестве физического лица.
// Строка формируется в зависимости от типа переданного параметра:
//	- либо по истории ФИО элемента справочника ФизическиеЛица,
// 	- либо разбором строки, содержащей полную ФИО.
//
// Параметры:
//  ФизическоеЛицо - Строка или СправочникСсылка.ФизическиеЛица - источник информации о ФИО
//  Дата - Дата - дата для получения истории ФИО, имеет смысл если в первом параметре передана ссылка
//
// Возвращаемое значение:
//	Структура - со свойствами
//		Фамилия  - Строка
//		Имя      - Строка
//		Отчество - Строка
//
Функция ФамилияИмяОтчество(ФизическоеЛицо, Дата = Неопределено) Экспорт
	
	ФИОФизическогоЛица = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		// Будет возвращена структура с пустыми свойствами
		
	ИначеЕсли ТипЗнч(ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		// Получим срез регистра сведений ФИОФизическихЛиц на нужную дату
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаСрезПоследних = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(
			?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()),
			Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТаблицаСрезПоследних.Количество() > 0 Тогда
			// Если в регистре есть данные, то заполним возвращаемую структуру
			ЗаполнитьЗначенияСвойств(ФИОФизическогоЛица, ТаблицаСрезПоследних[0]);
		КонецЕсли;
		
	Иначе
		
		// Результат получаем разбирая строку, содержащую полную ФИО
		ЗаполнитьЗначенияСвойств(
			ФИОФизическогоЛица,
			ФизическиеЛицаКлиентСервер.ЧастиИмени(СокрЛП(ФизическоеЛицо)));
		
	КонецЕсли;
	
	Возврат ФИОФизическогоЛица;
	
КонецФункции

// Формирует строку, содержащую фамилию и инициалы физического лица.
// Строка формируется в зависимости от типа переданного параметра:
//	- либо по истории ФИО элемента справочника ФизическиеЛица,
// 	- либо разбором строки, содержащей полную ФИО.
//
// Параметры:
//  ФизическоеЛицо - Строка или СправочникСсылка.ФизическиеЛица - источник информации о ФИО
//  Дата - Дата - дата для получения истории ФИО, имеет смысл если в первом параметре передана ссылка
//
// Возвращаемое значение:
//  Строка - Фамилия И. О. 
//
Функция ФамилияИнициалыФизЛица(ФизическоеЛицо, Дата = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ФамилияИнициалы = "";
		
	ИначеЕсли ТипЗнч(ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		// Получаем фамилию, имя, отчество на указанную дату
		ФИОФизическогоЛица = ФамилияИмяОтчество(ФизическоеЛицо, Дата);
		
		// Результат получаем из отдельных частей - фамилии, имени, отчества
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОФизическогоЛица);
		
	Иначе	
		
		// Результат получаем разбирая строку, содержащую полную ФИО
		ФИОФизическогоЛица = ФизическиеЛицаКлиентСервер.ЧастиИмени(СокрЛП(ФизическоеЛицо));		
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОФизическогоЛица);
		
	КонецЕсли;
	
	Возврат ФамилияИнициалы;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСведенияОФизическихЛицах

// Получает подразделение указанного физического лица.
//
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - источник информации о подразделении
//
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия - Подразделение пользователя
//
Функция ПодразделениеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Пользователи.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

// Получает данные документа физического лица.
// Если документ не найден или документов больше одного, то возвращается пустая структура.
//
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - источник информации о документе
//  ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц - вид документа физического лица
//  Дата - Дата - дата для получения истории документов физического лица
//
// Возвращаемое значение:
//  Структура - данные документа физического лица,
//		поля соответствуют ресурсам регистра ДокументыФизическихЛиц
//
Функция ПолучитьДокументФизическогоЛицаПоУмолчанию(ФизическоеЛицо, ВидДокумента = Неопределено, Дата = Неопределено) Экспорт
	
	ДокументФизическогоЛица = Новый Структура(
		"ВидДокумента, Серия, Номер, ДатаВыдачи, СрокДействия, КемВыдан, 
		|ЯвляетсяДокументомУдостоверяющимЛичность, Представление",
		Неопределено, "", "", "", Дата(1,1,1), Дата(1,1,1), "", "",
		Ложь, "");
		
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДокументыФизическихЛиц.ВидДокумента,
		|	ДокументыФизическихЛиц.Серия,
		|	ДокументыФизическихЛиц.Номер,
		|	ДокументыФизическихЛиц.ДатаВыдачи,
		|	ДокументыФизическихЛиц.СрокДействия,
		|	ДокументыФизическихЛиц.КемВыдан,
		|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность,
		|	ДокументыФизическихЛиц.Представление
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			&Дата,
		|			Физлицо = &ФизическоеЛицо
		|				И (ВидДокумента = &ВидДокумента
		|					ИЛИ &ВидДокумента = НЕОПРЕДЕЛЕНО)) КАК ДокументыФизическихЛиц";
		
		Запрос.УстановитьПараметр("Дата", 		    ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ВидДокумента",   ?(ЗначениеЗаполнено(ВидДокумента), ВидДокумента, Неопределено));
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			// Если в базе есть только один документ, то вернем его данные.
			// Если документов больше чем один, то  ничего не возвращаем т.к. непонятно, данные какого документа нужны.
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДокументФизическогоЛица, Выборка); 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументФизическогоЛица;

КонецФункции

#КонецОбласти

#Область Прочее

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.КодПоДРФО) Тогда	
		ВыборкаФизЛицо = КодПоДРФОУжеНазначенДругомуФизЛицу(Форма.Объект.КодПоДРФО, Форма.Объект.Ссылка);
		Если ВыборкаФизЛицо <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный код по ДРФО (ИНН) уже указан для физического лица %1.';uk='Даний код за ДРФО (ІПН) вже вказаний для фізичної особи, %1.'"),
				ВыборкаФизЛицо.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.КодПоДРФО",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &Наименование
	|	И ФизическиеЛица.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Наименование", Форма.Объект.Наименование);
	Запрос.УстановитьПараметр("Ссылка", 	  Форма.Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru='Физическое лицо с таким ФИО уже существует в информационной базе.
            |Необходимо либо указать другую уточняющую информацию, либо воспользоваться уже имеющимся элементом справочника.'
            |;uk='Фізична особа з таким ПІБ вже існує в інформаційній базі.
            |Необхідно або вказати іншу уточнюючу інформацію, або скористатися вже існуючим елементом довідника.'"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.Наименование",
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

//Определяет, есть ли в базе физическое лицо с таким же КодПоДРФО
// Параметры
//  КодПоДРФО  - Строка - проверяемый КодПоДРФО
//  ИсключаяСсылку  - СправочникСсылка.ФизическиеЛица - физическое лицо, исключаемое из проверки
//
// Возвращаемое значение:
//   ВыборкаИзРезультатовЗапроса, Неопределено   - выборка с данными найденного физического лица
//  с таким же КодПоДРФО, Неопределено если искомый КодПоДРФО никому не назначен.
//
Функция КодПоДРФОУжеНазначенДругомуФизЛицу(КодПоДРФО, ИсключаяСсылку = Неопределено)	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ФизическиеЛица.Наименование) КАК Представление
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.КодПоДРФО = &КодПоДРФО
	|	И ФизическиеЛица.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("КодПоДРФО",	КодПоДРФО);
	Запрос.УстановитьПараметр("Ссылка", ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИБ


// Обработчик обновления BAS УТ 3.2.2
// Заполняет регистр сведений ФИОФизическихЛиц по данным справочника ФизическиеЛица -
// формируются записи для тех физических лиц, для которых еще нет записей истории ФИО.
Функция ЗаполнитьФИОФизическихЛиц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.ДатаРождения
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|		ПО ФизическиеЛица.Ссылка = ФИОФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	ФИОФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Для всех физических лиц без информации о ФИО создадим один общий набор записей
	НаборЗаписей = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписьФИО = НаборЗаписей.Добавить();
		
		ЗаписьФИО.ФизическоеЛицо = Выборка.Ссылка;
		ЗаписьФИО.Период = 
			?(ЗначениеЗаполнено(Выборка.ДатаРождения) И Выборка.ДатаРождения < ТекущаяДатаСеанса(),
				Выборка.ДатаРождения,
				Дата(1900, 1, 1));
		
		ЗаполнитьЗначенияСвойств(ЗаписьФИО, ФамилияИмяОтчество(Выборка.Наименование));
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		// Допишем новые записи регистра к уже существующим записям
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#КонецОбласти

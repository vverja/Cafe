#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


//Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриОтгрузке");
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриПоступлении");
	Результат.Добавить("ИспользоватьСкладскиеПомещения");
	Результат.Добавить("НастройкаАдресногоХранения");
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач");
	Результат.Добавить("ТипСклада");
	Результат.Добавить("Родитель");
	Результат.Добавить("ВыборГруппы");
	Результат.Добавить("РозничныйВидЦены");
	Результат.Добавить("ИспользоватьСтатусыРасходныхОрдеров");
	Результат.Добавить("ИспользоватьСтатусыПриходныхОрдеров");
	Результат.Добавить("ДатаНачалаОрдернойСхемыПриОтгрузке");
	Результат.Добавить("ДатаНачалаОрдернойСхемыПриПоступлении");
	Результат.Добавить("ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач");
	Результат.Добавить("ДатаНачалаИспользованияСкладскихПомещений");
	Результат.Добавить("ДатаНачалаАдресногоХраненияОстатков");
	
	Возврат Результат;

КонецФункции

//Возвращает розничный склад, если найден один розничный склад, иначе - пустую ссылку
//
//	Возвращаемое значение:
//		СправочникСслыка.Склады - розничный склад
//
Функция РозничныйСкладПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	(НЕ Склады.ПометкаУдаления)
	|	И Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий()
	Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Склад;

КонецФункции 

//Возвращает розничный склад, если найден один розничный склад, иначе - пустую ссылку
//
//	Параметры:
//		УчитыватьГруппыСкладов - Булево - если ИСТИНА, но может быть возвращена группа складов, которую разрешено выбирать в документах,
//						иначе - возвращается только конкретный склад, если он один в справочнике
//		ИсключитьГруппыДоступныеВЗаказах - Булево - если УчитыватьГруппыСкладов = ИСТИНА, то этот параметр позволяет исключить из анализа
//						группы складов, которые можно выбирать только в заказах
//	Возвращаемое значение:
//		СправочникСслыка.Склады - розничный склад
//
Функция СкладПоУмолчанию(УчитыватьГруппыСкладов = Ложь, ИсключитьГруппыДоступныеВЗаказах = Ложь) Экспорт
	
	Если УчитыватьГруппыСкладов Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И Таблица.ВыборГруппы В (&ВыборГруппыСкладов)
		|");
		
		Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВариантыВыбораГруппыСкладов(ИсключитьГруппыДоступныеВЗаказах));
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	(НЕ Таблица.ПометкаУдаления)
		|	И (НЕ Таблица.ЭтоГруппа)
		|");
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

// Проверяет, что на складе отключен контроль свободных остатков
//
//	Возвращаемое значение:
//		Булево
//  
Функция КонтрольОстатковНаСкладеОтключен(Склад) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.НастройкаКонтроляОбеспечения КАК Настройка
	|ГДЕ
	|	Настройка.Склад = &Склад
	|	И Настройка.Контролировать");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция возвращает учетный вид цен склада
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого определяется учетный вид цены.
//	Возвращаемое значение:
//		СправочникСсылка.ВидыЦен
//
Функция УчетныйВидЦены(Склад) Экспорт
	Перем ВидЦены;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") И ЗначениеЗаполнено(Склад) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.УчетныйВидЦены
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад";
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидЦены = Выборка.УчетныйВидЦены;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦены);
	
КонецФункции

// Функция возвращает источник информации о ценах для печати склада
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого определяется учетный вид цены.
//	Возвращаемое значение:
//		ПеречислениеСсылка.ИсточникиИнформацииОЦенахДляПечати
//
Функция ИсточникИнформацииОЦенахДляПечати(Склад) Экспорт
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.ИсточникИнформацииОЦенахДляПечати
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Склад";
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИсточникИнформацииОЦенахДляПечати;
	Иначе
		Возврат Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПустаяСсылка();
	КонецЕсли;
КонецФункции

// Проверяет в привелигированном режиме, является ли элемент справочника группой складов
//	
//	Параметры:
//		Склад - СправочникСсылка.Склады - элемента справочника, для которого производится проверка
//	Возвращаемое значение:
// 		Булево 
//
Функция ЭтоГруппа(Склад) Экспорт
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ЭтоГруппа");
	
КонецФункции 

// Проверяет в привелигированном режиме, является ли элемент справочника группой складов, и при этом
// склады могут указываться в табличных частях документов продажи	
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - элемента справочника, для которого производится проверка
//	Возвращаемое значение:
// 		Булево 
//
Функция ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад) Экспорт
	
	Если ЗначениеЗаполнено(Склад) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи") Тогда
		Возврат Справочники.Склады.ЭтоГруппа(Склад);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

// Проверяет в привелигированном режиме, является ли элемент справочника группой складов, и при этом
// склады могут указываться в табличных частях документов закупки	
//
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, признак которого нужно получить
//
// Возвращаемое значение:
// Булево
//
Функция ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Склад) Экспорт
	
	Если ЗначениеЗаполнено(Склад) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки") Тогда
		Возврат Справочники.Склады.ЭтоГруппа(Склад);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

// Возврашает массив возможных (согласно настройкам ФО) вариатов выбора группы складов
//
// Параметры:
// 		ИсключитьГруппыДоступныеВЗаказах - Булево - указывает на необходимость в массив не включать значение РазрешитьВЗаказах
//
// Возвращаемое значение:
// 		Массив - содержит значения перечисления ВыборГруппыСкладов, по которым необходимо отобрать склады
//
Функция ВариантыВыбораГруппыСкладов(ИсключитьГруппыДоступныеВЗаказах) Экспорт
	
	ВыборГруппыСкладов = Новый Массив();
	ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных);
	Если Не ИсключитьГруппыДоступныеВЗаказах Тогда
		ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах);
	КонецЕсли;
	
	Возврат ВыборГруппыСкладов;
	
КонецФункции

//Возвращает массив ссылок на группы складов, в иерархию которых входит указанный склад
//	
//	Параметры:
//		Склад - СправочникСслыка.Склады - склад, для которого нужно получить массив групп
//	Возвращаемое значение:
//		Масссив - массив ссылок на группы, в иерархию которых входит склад
//
Функция ИерархияГрупп(Склад) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	МассивГрупп = Новый Массив;
	
	Группа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Родитель");
	
	Пока ЗначениеЗаполнено(Группа) Цикл
		МассивГрупп.Добавить(Группа);
		Группа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Группа, "Родитель");
	КонецЦикла;

	Возврат МассивГрупп; 
	
КонецФункции

// Возвращает текст запроса по документам, зависящим от использования ордерной схемы при поступлении
//
Функция ТекстЗапросаПоДокументамЗависящимОтОрдернойСхемыПриПоступлении() Экспорт
	Описания = Новый Массив;
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ВозвратТоваровОтКлиента";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЗаказПоставщику";
	Описание.ИмяПоляДата = "ТЧ.ДатаПоступления";
	Описание.ИмяПоляСклад = "ТЧ.Склад";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЗаявкаНаВозвратТоваровОтКлиента";
	Описание.ИмяПоляДата = "ТЧ.ДатаПоступления";
	Описание.ИмяТЧ = "ВозвращаемыеТовары";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "КорректировкаПоступления";
	Описание.ИмяПоляСклад = "ТЧ.Склад";
	Описание.ИмяТЧ = "Расхождения";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПеремещениеТоваров";
	Описание.ИмяПоляСклад = "Шапка.СкладПолучатель";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПоступлениеТоваровУслуг";
	Описание.ИмяПоляСклад = "ТЧ.Склад";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПрочееОприходованиеТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "СборкаТоваров";
	Описания.Добавить(Описание);
	
	Возврат ТекстЗапросаРасчетаРекомендуемойДатыНачалаНовойСхемыУчетаНаСкладе(Описания);
КонецФункции

// Возвращает текст запроса по документам, зависящим от использования ордерной схемы при отгрузке
//
Функция ТекстЗапросаПоДокументамЗависящимОтОрдернойСхемыПриОтгрузке() Экспорт
	Описания = Новый Массив;
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ВнутреннееПотреблениеТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ВозвратТоваровПоставщику";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПеремещениеТоваров";
	Описание.ИмяПоляСклад = "Шапка.СкладОтправитель";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЗаказНаПеремещение";
	Описание.ИмяПоляСклад = "Шапка.СкладОтправитель";
	Описание.ИмяПоляДата = "ТЧ.НачалоОтгрузки";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "РеализацияТоваровУслуг";
	Описание.ИмяПоляСклад = "ТЧ.Склад";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "СборкаТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЗаявкаНаВозвратТоваровОтКлиента";
	Описание.ИмяПоляДата = "ТЧ.ДатаОтгрузки";
	Описание.ИмяТЧ = "ЗаменяющиеТовары";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЗаказНаСборку";
	Описание.ИмяПоляДата = "Шапка.НачалоСборкиРазборки";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЗаказНаВнутреннееПотребление";
	Описание.ИмяПоляДата = "ТЧ.ДатаОтгрузки";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЗаказКлиента";
	Описание.ИмяПоляДата = "ТЧ.ДатаОтгрузки";
	Описания.Добавить(Описание);
	
	
	
	Возврат ТекстЗапросаРасчетаРекомендуемойДатыНачалаНовойСхемыУчетаНаСкладе(Описания);
КонецФункции

// Возвращает текст запроса по документам, зависящим от использования ордерной схемы при отражении излишков, недостач
//
Функция ТекстЗапросаПоДокументамЗависящимОтОрдернойСхемыПриОтраженииИзлишковНедостач() Экспорт
	Описания = Новый Массив;
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "КорректировкаПоступления";
	Описание.ИмяПоляСклад = "ТЧ.Склад";
	Описание.ИмяТЧ = "Расхождения";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "КорректировкаРеализации";
	Описание.ИмяПоляСклад = "ТЧ.Склад";
	Описание.ИмяТЧ = "Расхождения";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОприходованиеИзлишковТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПересортицаТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПересчетТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПорчаТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "СписаниеНедостачТоваров";
	Описания.Добавить(Описание);
	
	Возврат ТекстЗапросаРасчетаРекомендуемойДатыНачалаНовойСхемыУчетаНаСкладе(Описания);
КонецФункции

// Возвращает текст запроса по документам, зависящим от использования складских помещений
//
Функция ТекстЗапросаПоДокументамЗависящимОтИспользованияСкладскихПомещений() Экспорт
	Описания = Новый Массив;
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОрдерНаОтражениеИзлишковТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОрдерНаОтражениеНедостачТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОрдерНаОтражениеПорчиТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "КорректировкаПоОрдеруНаТовары";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОтчетОРозничныхПродажах";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПересчетТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПриходныйОрдерНаТовары";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "РасходныйОрдерНаТовары";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "УстановкаБлокировокЯчеек";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЧекККМ";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ЧекККМВозврат";
	Описания.Добавить(Описание);
	
	Возврат ТекстЗапросаРасчетаРекомендуемойДатыНачалаНовойСхемыУчетаНаСкладе(Описания);
КонецФункции

// Возвращает текст запроса по документам, зависящим от использования адресного хранения остатков
//	Параметр - ОтбиратьПоПомещению: булево. Признак необходимости фильтровать документы по складскому помещению
Функция ТекстЗапросаПоДокументамЗависящимОтИспользованияАдресногоХранения(ОтбиратьПоПомещению = Ложь) Экспорт
	
	Описания = Новый Массив;
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОрдерНаОтражениеИзлишковТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОрдерНаОтражениеНедостачТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОрдерНаОтражениеПорчиТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ОрдерНаПеремещениеТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "КорректировкаПоОрдеруНаТовары";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПересчетТоваров";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "ПриходныйОрдерНаТовары";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеОбъекта();
	Описание.Имя = "РасходныйОрдерНаТовары";
	Описание.ИмяПоляДата = "Шапка.ДатаОтгрузки";
	Описания.Добавить(Описание);
	
	Возврат ТекстЗапросаРасчетаРекомендуемойДатыНачалаНовойСхемыУчетаНаСкладе(Описания,ОтбиратьПоПомещению);
	
КонецФункции

// Включение ведения статусов расходных ордеров для всех складов
//
Процедура ВключитьИспользованиеСтатусовРасходныхОрдеров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|	И НЕ Склады.ИспользоватьСтатусыРасходныхОрдеров";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СкладОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СкладОбъект.ИспользоватьСтатусыРасходныхОрдеров = Истина;
		СкладОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СкладыВызовСервера.СкладыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		
		Параметры.Вставить("Ключ", СкладыВызовСервера.ПолучитьСкладПоУмолчанию());
		ВыбраннаяФорма = "ФормаЭлемента";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ВключитьИспользованиеСтатусовПересчетовТоваров() Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И НЕ Склады.ИспользоватьСтатусыПересчетовТоваров";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СкладОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СкладОбъект.ИспользоватьСтатусыПересчетовТоваров = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СкладОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляЗаполненияНалоговойИнспеции(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.НалоговаяИнспекция = ЗНАЧЕНИЕ(Справочник.НалоговыеИнспекции.ПустаяСсылка)
	|	И Склады.ТерриторияПоКОАТУУ.НалоговаяИнспекция <> ЗНАЧЕНИЕ(Справочник.НалоговыеИнспекции.ПустаяСсылка)";
	
	ДанныеКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеКОбработке);
	
КонецПроцедуры

Процедура ЗаполнитьНалоговуюИнспекцию(Параметры) Экспорт
	
	ПолноеИмяСправочника = "Справочник.Склады";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяСправочника
    );
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяСправочника);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если СправочникОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
			
			СправочникОбъект.НалоговаяИнспекция = СправочникОбъект.ТерриторияПоКОАТУУ.НалоговаяИнспекция;
   		            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();		
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяСправочника
    );
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

Процедура ЗаполнитьПомещениеВСправочниках(Параметры,АдресХранилища) Экспорт
	
	Склад = Параметры.Склад;
	Помещение = Параметры.Помещение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Помещение = Помещение;
		СправочникОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеУчастки.Ссылка
	|ИЗ
	|	Справочник.РабочиеУчастки КАК РабочиеУчастки
	|ГДЕ
	|	РабочиеУчастки.Владелец = &Склад
	|	И РабочиеУчастки.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Помещение = Помещение;
		СправочникОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбластиХранения.Ссылка
	|ИЗ
	|	Справочник.ОбластиХранения КАК ОбластиХранения
	|ГДЕ
	|	ОбластиХранения.Владелец = &Склад
	|	И ОбластиХранения.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Помещение = Помещение;
		СправочникОбъект.Записать();
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры,
	|	ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок,
	|	ПравилаРазмещенияТоваровВЯчейках.Склад,
	|	&Помещение,
	|	ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения,
	|	ПравилаРазмещенияТоваровВЯчейках.Приоритет
	|ИЗ
	|	РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|ГДЕ
	|	ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад
	|	И ПравилаРазмещенияТоваровВЯчейках.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		НаборПравила = РегистрыСведений.ПравилаРазмещенияТоваровВЯчейках.СоздатьНаборЗаписей();
		НаборПравила.Отбор.Склад.Установить(Склад);
		НаборПравила.Отбор.Помещение.Установить(Помещение);
		НаборПравила.Загрузить(Результат.Выгрузить());
		
		НачатьТранзакцию();
		НаборПравила.Записать();
		НаборПравила.Очистить();
		НаборПравила.Отбор.Склад.Установить(Склад);
		НаборПравила.Отбор.Помещение.Установить(Справочники.СкладскиеПомещения.ПустаяСсылка());
		НаборПравила.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазмещениеНоменклатурыПоСкладскимЯчейкам.Номенклатура,
	|	РазмещениеНоменклатурыПоСкладскимЯчейкам.Склад,
	|	&Помещение,
	|	РазмещениеНоменклатурыПоСкладскимЯчейкам.Ячейка,
	|	РазмещениеНоменклатурыПоСкладскимЯчейкам.ОсновнаяЯчейка
	|ИЗ
	|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеНоменклатурыПоСкладскимЯчейкам
	|ГДЕ
	|	РазмещениеНоменклатурыПоСкладскимЯчейкам.Склад = &Склад
	|	И РазмещениеНоменклатурыПоСкладскимЯчейкам.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		НаборРазмещение = РегистрыСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам.СоздатьНаборЗаписей();
		НаборРазмещение.Отбор.Склад.Установить(Склад);
		НаборРазмещение.Отбор.Помещение.Установить(Помещение);
		НаборРазмещение.Загрузить(Результат.Выгрузить());
		
		НачатьТранзакцию();
		НаборРазмещение.Записать();
		НаборРазмещение.Очистить();
		НаборРазмещение.Отбор.Склад.Установить(Склад);
		НаборРазмещение.Отбор.Помещение.Установить(Справочники.СкладскиеПомещения.ПустаяСсылка());
		НаборРазмещение.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Помещение,
	|	НастройкиАдресныхСкладов.*
	|ИЗ
	|	РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
	|ГДЕ
	|	НастройкиАдресныхСкладов.Склад = &Склад
	|	И НастройкиАдресныхСкладов.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		НаборРазмещение = РегистрыСведений.НастройкиАдресныхСкладов.СоздатьНаборЗаписей();
		НаборРазмещение.Отбор.Склад.Установить(Склад);
		НаборРазмещение.Отбор.Помещение.Установить(Помещение);
		НаборРазмещение.Загрузить(Результат.Выгрузить());
		
		НачатьТранзакцию();
		НаборРазмещение.Записать();
		НаборРазмещение.Очистить();
		НаборРазмещение.Отбор.Склад.Установить(Склад);
		НаборРазмещение.Отбор.Помещение.Установить(Справочники.СкладскиеПомещения.ПустаяСсылка());
		НаборРазмещение.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Функция ИменаОбъектовСПустымПомещением(Склад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""СкладскиеЯчейки"" КАК НазваниеОбъекта
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""РабочиеУчастки""
	|ИЗ
	|	Справочник.РабочиеУчастки КАК РабочиеУчастки
	|ГДЕ
	|	РабочиеУчастки.Владелец = &Склад
	|	И РабочиеУчастки.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""ОбластиХранения""
	|ИЗ
	|	Справочник.ОбластиХранения КАК ОбластиХранения
	|ГДЕ
	|	ОбластиХранения.Владелец = &Склад
	|	И ОбластиХранения.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""ПравилаРазмещенияТоваровВЯчейках""
	|ИЗ
	|	РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|ГДЕ
	|	ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад
	|	И ПравилаРазмещенияТоваровВЯчейках.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""РазмещениеНоменклатурыПоСкладскимЯчейкам""
	|ИЗ
	|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеНоменклатурыПоСкладскимЯчейкам
	|ГДЕ
	|	РазмещениеНоменклатурыПоСкладскимЯчейкам.Склад = &Склад
	|	И РазмещениеНоменклатурыПоСкладскимЯчейкам.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НазваниеОбъекта");
	
КонецФункции

Функция ТекстЗапросаРасчетаРекомендуемойДатыНачалаНовойСхемыУчетаНаСкладе(Описания,ОтбиратьПоПомещению = Ложь)
	
	ЭтоПервыйВМассиве = Истина;
	ТекстЗапроса = "";
	
	Для Каждого Описание из Описания Цикл
		ПрисоединитьТЧ = СтрНайти(Описание.ИмяПоляСклад,"ТЧ.") > 0 Или СтрНайти(Описание.ИмяПоляДата,"ТЧ.");
		Текст ="
				|ВЫБРАТЬ
				|	МАКСИМУМ(" + Описание.ИмяПоляДата + ") КАК Дата
				|ИЗ
				|	Документ." + Описание.Имя + " КАК Шапка " +
			?(ПрисоединитьТЧ,"ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + Описание.Имя + "."+ Описание.ИмяТЧ + " КАК ТЧ
				|ПО (Шапка.Ссылка = ТЧ.Ссылка)","") + "
				|ГДЕ Шапка.Проведен
				|И " + Описание.ИмяПоляСклад +" = &Склад";
		Если ОтбиратьПоПомещению Тогда
			Если Описание.Имя = "ОрдерНаПеремещениеТоваров" Тогда
				Текст = Текст + "
				|И Шапка.ПомещениеОтправитель = &Помещение
				|	ИЛИ Шапка.ПомещениеПолучатель = &Помещение";
			Иначе
				Текст = Текст + "
				|И " + ?(Найти(Описание.ИмяПоляСклад,"ТЧ.") > 0,"ТЧ.","Шапка.") + "Помещение = &Помещение";
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЭтоПервыйВМассиве Тогда
			ТекстЗапроса = Текст + "
				|ОБЪЕДИНИТЬ ВСЕ" + ТекстЗапроса;
		Иначе
			ТекстЗапроса = Текст;
			ЭтоПервыйВМассиве = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО Дата УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОписаниеОбъекта()
	
	Описание = Новый Структура;
	Описание.Вставить("Имя");
	Описание.Вставить("ИмяТЧ",             "Товары");
	Описание.Вставить("ИмяПоляСклад",      "Шапка.Склад");
	Описание.Вставить("ИмяПоляДата",       "Шапка.Дата");
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем СтараяНоменклатура; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем СтараяХарактеристика; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем ИзмененаЦена; // Используется в механизмах обработчиков событий табличной части Товары

&НаКлиенте
Перем СтрокаДобавлена;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	ФлагОткрытияФормы = Истина;
	КодФормы = "УстановкаЦенНоменклатуры";
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НомерВПределахДня = УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата) - НачалоДня(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата)) + 1;
	Иначе
		НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата), Объект.Ссылка);
		Объект.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата), НомерВПределахДня);
	КонецЕсли;
	
	Элементы.НомерВПределахДня.Видимость = НомерВПределахДня <> 1;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ИспользоватьЦеновыеГруппы              = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьНесколькоВидовЦен          = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтаФорма);
	
	ОтображатьВлияющиеЦены = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УстановкаЦенНоменклатуры","УстановкаЦенНоменклатурыОтображатьВлияющиеЦены");
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ЗаполнитьДокумент();
	Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
		АдресХранилищаДанныхДляРасчетаВычисляемыхЦенНаКлиенте = ПоместитьВоВременноеХранилище(
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте,
		УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьРассчитыватьАвтоматически(Истина);
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Истина);
	УстановитьАвтоматическиДобавлятьХарактеристики(Истина);
	ЗафиксироватьКолонкуНоменклатура(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьДоступностьЭлементовПоСтатусуСервер();
	КонецЕсли;
	
	УстановитьСостояние();
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.Основание.Видимость = Ложь;
	КонецЕсли;
	
	Если ВыбранныеЦены.Количество() = 1 Тогда
		Элементы.ВидыЦенКомандаДалее.Видимость = Ложь;
		Элементы.ВидыЦенКомандаНазад.Видимость = Ложь;
		Элементы.ГруппаВидыЦен.Видимость       = Ложь;
	КонецЕсли;
	
	ИмяДополнительнойКолонки = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	УстановитьДоступностьКомандБуфераОбмена();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");

	Если ПроверитьЗаполнениеПараметровПриОткрытии Тогда
		Если УстановкаЦенКлиент.ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(ЭтаФорма) Тогда
			Если ЗначениеЗаполнено(АдресХранилищаДанныхДляРасчетаВычисляемыхЦенНаКлиенте) Тогда
				ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхДляРасчетаВычисляемыхЦенНаКлиенте);
				УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗагрузитьИзExcel"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		РезультатЗагрузки = ЗагрузитьИзExcelНаСервере(Параметр);
		Если Не РезультатЗагрузки.Выполнено Тогда
			ПоказатьПредупреждение(,РезультатЗагрузки.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ФлагОткрытияФормы = Истина Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			НомерВПределахДня = УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата) - НачалоДня(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата)) + 1;
		Иначе
			НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата), Объект.Ссылка);
			Объект.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата), НомерВПределахДня);
		КонецЕсли;
		
		УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтаФорма);
		
		ЗаполнитьДокумент();
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВыбранныеЦеныИзменены И ДеревоЦен.ПолучитьЭлементы().Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Состав цен изменился. Необходимо перейти к установке цен.';uk='Склад цін змінився. Необхідно перейти до встановлення цін.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись
	     Или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УстановкаЦенСервер.ПроверитьКорректностьЗаполненияДокумента(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		УстановкаЦенСервер.ПоместитьВидыЦенВТабличнуюЧасть(ЭтаФорма, ТекущийОбъект.ВидыЦен, Истина);
		
		Данные = Новый Структура;
		Данные.Вставить("Форма", ЭтаФорма);
		Данные.Вставить("Документы", Новый Массив);
		Данные.Вставить("СохранятьБазовые", Ложь);
		Данные.Документы.Добавить(ТекущийОбъект);
		УстановкаЦенСервер.ПоместитьЦеныВТабличнуюЧасть(Данные);
		
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьСостояние();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() = 0 Тогда
	
		ТекстОшибки = НСтр("ru='Не введено ни одной строки в список ""Товары"".';uk='Не введено жодного рядка в список ""Товари"".'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"ДеревоЦен",
			,
			Отказ);
		
	Иначе
		
		Если Объект.Проведен Тогда
			УстановкаЦенСервер.ПроверитьКорректностьЗаполненияДокумента(ЭтаФорма, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Настройки.Получить("ОтображениеТаблицыЦен") <> Неопределено Тогда
		ОтображениеТаблицыЦен = Строка(Элементы.ДеревоЦен.Отображение);
		Настройки["ОтображениеТаблицыЦен"] = ОтображениеТаблицыЦен;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("УстановкаЦенНоменклатуры","УстановкаЦенНоменклатурыОтображатьВлияющиеЦены", ОтображатьВлияющиеЦены);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтображениеТаблицыЦен = Настройки.Получить("ОтображениеТаблицыЦен");
	
	Если ЗначениеЗаполнено(ОтображениеТаблицыЦен) Тогда
		Если ОтображениеТаблицыЦен = "Дерево" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.Дерево;
		ИначеЕсли ОтображениеТаблицыЦен = "ИерархическийСписок" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли ОтображениеТаблицыЦен = "Список" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.Список;
		КонецЕсли;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УстановитьРассчитыватьАвтоматически(Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ДеревоЦенРассчитыватьАвтоматически", "Видимость", Ложь);
		
	#Иначе
		
		РассчитыватьАвтоматически = Настройки.Получить("РассчитыватьАвтоматически");
		УстановитьРассчитыватьАвтоматически(РассчитыватьАвтоматически);
		
	#КонецЕсли
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = Настройки.Получить("ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре");
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
	
	ЗафиксироватьКолонкуНоменклатура = Настройки.Получить("ЗафиксироватьКолонкуНоменклатура");
	ЗафиксироватьКолонкуНоменклатура(ЗафиксироватьКолонкуНоменклатура);
	
	ОтображатьВлияющиеЦены = Настройки.Получить("ОтображатьВлияющиеЦены");
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Пометка = ОтображатьВлияющиеЦены;
	
	АвтоматическиДобавлятьХарактеристики = Настройки.Получить("АвтоматическиДобавлятьХарактеристики");
	УстановитьАвтоматическиДобавлятьХарактеристики(АвтоматическиДобавлятьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата), Объект.Ссылка);
	Объект.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
	Элементы.НомерВПределахДня.Видимость = НомерВПределахДня <> 1;
	
	ОбновитьСтарыеЦеныНоменклатурыНаСервере();
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НужноПересчитывать = Ложь;
	
	// Чтобы узнать необходимость пересчета - проверим, что у выбранных цен
	// есть влияющие цены с валютой, отличной от валюты выбранной цены.
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		
		Если ТекСтрока.Выбрана И
			ТекСтрока.СпособЗаданияЦены <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную") Тогда
			
			Для Каждого ВлияющаяЦена Из ТекСтрока.ВлияющиеЦены Цикл
				
				НайденнаяСтрока = Неопределено;
				Для Каждого ВыбраннаяЦена Из ВыбранныеЦены Цикл
					Если ВыбраннаяЦена.Ссылка = ВлияющаяЦена.Значение Тогда
						НайденнаяСтрока = ВыбраннаяЦена;
					КонецЕсли;
				КонецЦикла;
					
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.Валюта <> НайденнаяСтрока.Валюта Тогда
					НужноПересчитывать = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НужноПересчитывать Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НужноПересчитывать Тогда
		Возврат;
	КонецЕсли;
	
	ОтветНаВопрос = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект), 
		НСтр("ru='В документе выбраны виды цены с валютой, отличной от влияющих видов цен. Пересчитать цены?';uk='У документі вибрані види ціни з валютою, відмінною від впливаючих видів цін. Перерахувати ціни?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПереформироватьТаблицуЦен(Истина);
    Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
        УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НомерВПределахДняПриИзменении(Элемент)
	
	Объект.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
	ОбновитьСтарыеЦеныНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаУстановкаЦен Тогда
		
		ПриПереходеКУстановкеЦен();
		ВыбранныеЦеныИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеЦены

&НаКлиенте
Процедура ВыбранныеЦеныВыбранаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	Если ТекущиеДанные.ЗапрещенныйВидЦены Тогда
		ТекущиеДанные.Выбрана = Ложь;
		ПодключитьОбработчикОжидания("СообщитьОНевозможностиВыбора", 0.2, Истина);
		Возврат;
	КонецЕсли;
	
	УстановкаЦенКлиентСервер.ПроставитьФлагиВлияетЗависитНаКлиенте(ЭтаФорма);
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЦеныСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЦеныСсылкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Поле = Элементы.ВыбранныеЦеныВлияющиеЦены Тогда
			Если ТекущиеДанные.ВлияющиеЦены.Количество() > 0 Тогда
				ПоказатьЗначение(Неопределено, ТекущиеДанные.ВлияющиеЦены);
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ВыбранныеЦеныЗависимыеЦены Тогда
			Если ТекущиеДанные.ЗависимыеЦены.Количество() > 0 Тогда
				ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗависимыеЦены);
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ВыбранныеЦеныПараметры Тогда
			
			РедактироватьНастройки(Команды["РедактироватьНастройки"]);
			
		Иначе
			ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЦен

&НаКлиенте
Процедура ДеревоЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Не Копирование Тогда
		ДобавитьНоменклатуру(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		Или Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоЦенХарактеристика" Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоЦенНоменклатура" Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");

	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		
		Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			ТекущееЗначение   = ТекущиеДанные[ИмяТекущейКолонки];
			
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДеревоЦенУпаковкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТекущейКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенУпаковкаПриИзмененииНаСервере(Идентификатор, ИмяТекущейКолонки)
	УстановкаЦенСервер.ДеревоЦенУпаковкаПриИзменении(ЭтаФорма, Идентификатор, ИмяТекущейКолонки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПривязываютсяДинамически

&НаКлиенте
Процедура Подключаемый_ДеревоЦенЦенаПриИзменении(Элемент)
	
	ИзмененаЦена = Истина;
	ДеревоЦенЦенаПриИзмененииКлиент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоЦенУпаковкаПриИзменении(Элемент)

	ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	// Новая строка добавлена программно.
	// При отмене редактирования ее требуется удалить.
	Если СтрокаДобавлена И ОтменаРедактирования Тогда
		ДеревоЦен.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		СтрокаДобавлена = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Номенклатура <> СтараяНоменклатура Тогда
		
		ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			Если ЭлементНоменклатура.Номенклатура = ТекущиеДанные.Номенклатура Тогда
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементНоменклатура.ПолучитьИдентификатор() Тогда
					Если Не ОтменаРедактирования Тогда
						Отказ = Истина;
						ОчиститьСообщения();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru='Такая номенклатура уже введена.';uk='Така номенклатура вже введена.'"),
							Объект.Ссылка,
							"ДеревоЦен");
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДеревоЦенНоменклатураПриИзмененииСервер(
			Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор(),
			Не ИзмененаЦена);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Если Не ОтменаРедактирования Тогда
			Отказ = Истина;
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Номенклатура не выбрана.';uk='Номенклатура не обрана.'"),
				Объект.Ссылка,
				"ДеревоЦен");
		Иначе
			ТекущиеДанные.Номенклатура = СтараяНоменклатура;
			ТекущиеДанные.Характеристика = СтараяХарактеристика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Характеристика <> СтараяХарактеристика Тогда
		
		ЭлементыХарактеристики = ДеревоЦен.НайтиПоИдентификатору(Элементы.ДеревоЦен.ТекущаяСтрока);
		
		Если ЭлементыХарактеристики.ПолучитьРодителя() = Неопределено Тогда
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьЭлементы();
		Иначе
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьРодителя().ПолучитьЭлементы();
		КонецЕсли;
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			Если ЭлементХарактеристика.Характеристика = ТекущиеДанные.Характеристика Тогда
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементХарактеристика.ПолучитьИдентификатор() Тогда
					Если Не ОтменаРедактирования Тогда
						Отказ = Истина;
						ОчиститьСообщения();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru='Такая номенклатура уже введена.';uk='Така номенклатура вже введена.'"),
							Объект.Ссылка,
							"ДеревоЦен");
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДеревоЦенХарактеристикаПриИзмененииСервер(
			Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор(),
			Не ИзмененаЦена);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДобавлена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	СтараяНоменклатура = ТекущиеДанные.Номенклатура;
	СтараяХарактеристика = ТекущиеДанные.Характеристика;
	ИзмененаЦена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.УстановкаЦенНоменклатурыПрисоединенныеФайлы") Тогда
		
		УстановкаЦенКлиент.ЗагрузитьИзExcel(ЭтаФорма, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьЦеныНаПроцентНаКлиенте(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Истина);
	
	ПараметрыРасчета = Неопределено;

	
	ОткрытьФорму(
		"Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПроцентаИзменения",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ИзменитьЦеныНаПроцентНаКлиентеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцентНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыРасчета = Результат;
    Если ПараметрыРасчета <> Неопределено Тогда
        
        ОчиститьСообщения();
        
        ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ИзменитьЦеныНаПроцентНаСервере(ПараметрыРасчета);
        Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
            УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоЦеновойГруппе(Команда)
	
	ВыбранноеЗначение = Неопределено;

	
	ОткрытьФорму(
		"Справочник.ЦеновыеГруппы.ФормаВыбора",
		Новый Структура("МножественныйВыбор", Истина),
		ЭтаФорма,,,, Новый ОписаниеОповещения("ДобавитьТоварыПоЦеновойГруппеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоЦеновойГруппеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = Результат;
    Если ВыбранноеЗначение <> Неопределено Тогда
        ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьНоменклатуруЦеновойГруппыНаСервере(ВыбранноеЗначение);
        Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
            УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ВариантыРасчетаЦеныНабора = Новый Массив;
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка"));
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям"));
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам"));
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ВариантыРасчетаЦеныНабора", ВариантыРасчетаЦеныНабора);
	
	АдресВоВременномХранилище = Неопределено;
	
	ОткрытьФорму(
		"Обработка.ПодборТоваровПоОтбору.Форма.Форма",
		ПараметрыФормы, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ДобавитьТоварыПоОтборуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтборуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресВоВременномХранилище = Результат;
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварыБезИзмененныхЦен(Команда)
	
	УдалитьТоварыБезИзмененныхЦенНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТоварыБезИзмененныхЦенНаСервере()
	УстановкаЦенСервер.УдалитьТоварыБезИзмененныхЦен(ЭтаФорма, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДействующиеЦены(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Истина, Ложь);
	Если ПараметрыОткрытия.РучныеВидыЦен.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбраны виды цен, назначаемые вручную.';uk='Не вибрані види цін, які призначаються вручну.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Неопределено;
	
	ОткрытьФорму(
		"Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ЗагрузитьДействующиеЦеныЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДействующиеЦеныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыРасчета = Результат;
	Если ПараметрыРасчета <> Неопределено Тогда
		
		ОчиститьСообщения();
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныНаСервере(ПараметрыРасчета);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьРучныеЦены(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Истина);
	Если ПараметрыОткрытия.РучныеВидыЦен.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбраны виды цен, назначаемые вручную.';uk='Не вибрані види цін, які призначаються вручну.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Неопределено;

	
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета", ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("ОкруглитьРучныеЦеныЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьРучныеЦеныЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыРасчета = Результат;
    Если ПараметрыРасчета <> Неопределено Тогда
        
        ОчиститьСообщения();
        
        ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныНаСервере(ПараметрыРасчета);
        Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
            УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРедактированиюСпискаВидовЦен(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаВидыЦен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУстановкеЦен(Команда)
	
	ОчиститьСообщения();
	
	Если УстановкаЦенКлиентСервер.НеВыбраныЗависимыеЦены(ЭтаФорма) Тогда
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПерейтиКУстановкеЦенЗавершение", ЭтотОбъект), НСтр("ru='Найдены зависимые от выбранных виды цен. Выбрать все зависимые цены?';uk='Знайдені залежні від обраних види цін. Вибрати всі залежні ціни?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ПерейтиКУстановкеЦенФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУстановкеЦенЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        УстановкаЦенКлиентСервер.ВыбратьВсеЗависимыеЦены(ЭтаФорма);
        УстановкаЦенКлиентСервер.ВыбратьВсеВлияющиеЦены(ЭтаФорма);
    КонецЕсли;
    
    
    ПерейтиКУстановкеЦенФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУстановкеЦенФрагмент()
    
    Если Не УстановкаЦенКлиент.ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(ЭтаФорма) Тогда
        Возврат;
    КонецЕсли;
    
    Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУстановкаЦен;
    ПриПереходеКУстановкеЦен();

КонецПроцедуры

&НаКлиенте
Процедура ПереключательРассчитыватьАвтоматически(Команда)
	
	УстановитьРассчитыватьАвтоматическиНаКлиенте(Не РассчитыватьАвтоматически);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Команда)
	
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуреНаКлиенте(Не ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательАвтоматическиДобавлятьХарактеристики(Команда)
	
	УстановитьАвтоматическиДобавлятьХарактеристикиНаКлиенте(Не АвтоматическиДобавлятьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗафиксироватьКолонкуНоменклатура(Команда)
	
	ЗафиксироватьКолонкуНоменклатураНаКлиенте(Не ЗафиксироватьКолонкуНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтображатьВлияющиеЦены(Команда)
	
	ОтображатьВлияющиеЦены = Не ОтображатьВлияющиеЦены;
	
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Пометка = ОтображатьВлияющиеЦены;
	
	ПереформироватьТаблицуЦен = Ложь;
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		Если Не ВидЦены.Выбрана И ВидЦены.Влияет Тогда
			ПереформироватьТаблицуЦен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереформироватьТаблицуЦен Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПереформироватьТаблицуЦен(Ложь);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Не УстановкаЦенКлиент.ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Неопределено;

	
	ОткрытьФорму(
		"Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета",
		ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Ложь),
		ЭтаФорма,,,, Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыРасчета = Результат;
    Если ПараметрыРасчета <> Неопределено Тогда
        
        ОчиститьСообщения();
        РассчитатьЦеныНаСервере(ПараметрыРасчета);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если Не СтрокаТаблицы.Выбрана И Не СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
			СтрокаТаблицы.Выбрана = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если СтрокаТаблицы.Выбрана И Не СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
			СтрокаТаблицы.Выбрана = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеЦеныИзменены = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеЗависимые(Команда)
	
	УстановкаЦенКлиентСервер.ВыбратьВсеЗависимыеЦены(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВлияющие(Команда)
	
	УстановкаЦенКлиентСервер.ВыбратьВсеВлияющиеЦены(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристику(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Для того, чтобы выбрать характеристику Вам необходимо предварительно выбрать номенклатуру.';uk='Для того, щоб вибрати характеристику Вам необхідно попередньо вибрати номенклатуру.'"));
		Возврат;
	КонецЕсли;
	
	ВладелецХарактеристики = Неопределено;
	
	ВариантыРасчетаЦеныНабора = Новый Массив;
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка"));
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям"));
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам"));
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущиеДанные.Характеристика);
	ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
	ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущиеДанные.Номенклатура);
	ПараметрыФормыВыбора.Вставить("ВариантыРасчетаЦеныНабора", ВариантыРасчетаЦеныНабора);
	
	ТекущийЭлемент = Элементы.ДеревоЦенХарактеристика;
	
	Характеристика = Неопределено;

	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора,,,,, Новый ОписаниеОповещения("ДобавитьХарактеристикуЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристикуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    Характеристика = Результат;
    Если Характеристика = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ЭлементыХарактеристики = ДеревоЦен.НайтиПоИдентификатору(Элементы.ДеревоЦен.ТекущаяСтрока);
    Если ЭлементыХарактеристики.ПолучитьРодителя() = Неопределено Тогда
        ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьЭлементы();
    Иначе
        ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьРодителя().ПолучитьЭлементы();
    КонецЕсли;
    Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
        Если ЭлементХарактеристика.Характеристика = Характеристика Тогда
            Элементы.ДеревоЦен.ТекущаяСтрока = ЭлементХарактеристика.ПолучитьИдентификатор();;
            ПоказатьПредупреждение(Неопределено, НСтр("ru='Такая характеристика уже введена.';uk='Така характеристика уже введена.'"));
            Возврат;
        КонецЕсли;
    КонецЦикла;
    
    ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
    Если ТекущийРодитель = Неопределено Тогда
        ТекущийРодитель = ТекущиеДанные;
    КонецЕсли;
    НоваяСтрока = ТекущийРодитель.ПолучитьЭлементы().Добавить();
    Элементы.ДеревоЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
    
    Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийРодитель, , "Характеристика");
    Иначе
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийРодитель, "Номенклатура, ХарактеристикиИспользуются, ЦеноваяГруппа, ЕдиницаИзмерения");
    КонецЕсли;
    НоваяСтрока.Характеристика = Характеристика;
    
    УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(НоваяСтрока);
    ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ТекущийЭлемент = Элементы.ДеревоЦенНоменклатура;
	
	НоваяСтрока = ДеревоЦен.ПолучитьЭлементы().Добавить();
	Элементы.ДеревоЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(НоваяСтрока);
	Элементы.ДеревоЦен.ИзменитьСтроку();
	
	СтрокаДобавлена = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(Неопределено, НСтр("ru='Выгрузка в Excel недоступна в Web-клиенте.';uk='Вивантаження в Excel недоступне в Web-клієнті.'"));
#Иначе
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды",Команда.Имя);
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьВExcelЗавершениеПодключенияРасширения", ЭтотОбъект, ДополнительныеПараметры);
	ТекстСообщения = НСтр("ru='Для выгрузки в Excel необходимо установить расширение работы с файлами.';uk='Для вивантаження в Excel необхідно встановити розширення роботи з файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcelЗавершениеПодключенияРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Модифицированность Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВыгрузитьВExcelПослеВопроса", ЭтотОбъект, ДополнительныеПараметры), 
			НСтр("ru='Перед выгрузкой документ необходимо записать. Выполнить запись документа и продолжить?';uk='Перед вивантаженням документ необхідно записати. Виконати запис документа і продовжити?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВExcelФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcelПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат;
    КонецЕсли;
    
	ВыгрузитьВExcelФрагмент(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcelФрагмент(ДополнительныеПараметры)
    
    МассивДокументов = Новый Массив;
    МассивДокументов.Добавить(Объект.Ссылка);
    
    ПараметрыФормы = Новый Структура("МассивДокументов, УникальныйИдентификатор", МассивДокументов, УникальныйИдентификатор);
    ПараметрыПечати = Неопределено;
    
    ОткрытьФорму(
    "Документ.УстановкаЦенНоменклатуры.Форма.ФормаНастройкиПечатнойФормыУстановкиЦенНоменклатуры",
	ПараметрыФормы,,,,, Новый ОписаниеОповещения("ВыгрузитьВExcelЗавершение", ЭтотОбъект, ДополнительныеПараметры), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 	

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcelЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КодЯзыка = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	ЭтоПечатьНаАльтернативномЯзыке = (СтрНайти(ДополнительныеПараметры.ИмяКоманды,"АльтернативныйЯзык")>0); //  для обычной печати Ложь
	Если ЭтоПечатьНаАльтернативномЯзыке Тогда 
		КодЯзыка = ?(КодЯзыка = "uk", "ru", "uk");
	КонецЕсли;
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм",	КодЯзыка);	
	
    ПараметрыПечати = Результат;
    Если ПараметрыПечати <> Неопределено Тогда
        ПараметрыПечати.ВыводитьШапку = Ложь;
        УстановкаЦенКлиент.ВыгрузитьВExcel(ЭтаФорма, ПараметрыПечати, ПараметрыВывода);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(Неопределено, НСтр("ru='Загрузка из Excel недоступна в Web-клиенте.';uk='Завантаження Excel недоступне у Web-клієнті.'"));
#Иначе
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзExcelЗавершениеПодключенияРасширения", ЭтотОбъект);
	ТекстСообщения = НСтр("ru='Для загрузки из Excel необходимо установить расширение работы с файлами.';uk='Для завантаження Excel необхідно встановити розширення роботи з файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcelЗавершениеПодключенияРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, Элементы.ДеревоЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.УстановкаЦенНоменклатуры.ФормаДокумента.Команда.ПодобратьТовары");
	
	ВариантыРасчетаЦеныНабора = Новый Массив;
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка"));
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям"));
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Истина);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("Заголовок",                               НСтр("ru='Подбор товаров';uk='Підбір товарів'"));
	ПараметрыФормы.Вставить("Дата",                                    УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата));
	ПараметрыФормы.Вставить("НеРазбиватьНаборыПоКомплектующим",        Истина);
	ПараметрыФормы.Вставить("ОтборПоВариантуРасчетаЦенНаборов", ВариантыРасчетаЦеныНабора);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДинамикеЦен(Команда)
	
	СписокНоменклатуры  = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	Для Каждого ИдентификаторСтрокиДереваЦен Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
		СтрокаТЧ = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтрокиДереваЦен);
		СписокНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
		Если СтрокаТЧ.ХарактеристикиИспользуются Тогда
			Если СтрокаТЧ.ПолучитьРодителя() = Неопределено Тогда
				Для Каждого СтрокаХарактеристика Из СтрокаТЧ.ПолучитьЭлементы() Цикл
					Если СписокХарактеристик.НайтиПоЗначению(СтрокаХарактеристика.Характеристика) = Неопределено Тогда
						СписокХарактеристик.Добавить(СтрокаХарактеристика.Характеристика);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если СписокХарактеристик.НайтиПоЗначению(СтрокаТЧ.Характеристика) = Неопределено Тогда
					СписокХарактеристик.Добавить(СтрокаТЧ.Характеристика);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СписокХарактеристик.НайтиПоЗначению(
					ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")) = Неопределено Тогда
				СписокХарактеристик.Добавить(ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокВидовЦен = Новый СписокЗначений;
	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
		СписокВидовЦен.Добавить(СтрокаВидЦены.Ссылка, СтрокаВидЦены.Наименование);
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", СписокНоменклатуры);
	Отбор.Вставить("Характеристика", СписокХарактеристик);
	Отбор.Вставить("ВидЦены", СписокВидовЦен);
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии",
	        Отбор,
	        НСтр("ru='Динамика изменения цен по номенклатуре (Диаграмма)';uk='Динаміка зміни цін по номенклатурі (Діаграма)'"),
	        НСтр("ru='Динамика изменения цен по номенклатуре (Диаграмма)';uk='Динаміка зміни цін по номенклатурі (Діаграма)'"),
	        Истина);
	
	ОткрытьФорму("Отчет.ДинамикаИзмененияЦенНоменклатуры.Форма",
	        ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройки(Команда)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Редактировать настройки невозможно. Не выбран вид цены';uk='Редагувати настройки неможливо. Не вибрано вид ціни'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Выбрана Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Редактировать настройки схемы компоновки можно только для выбранных видов цен';uk='Редагувати настройки схеми компонування можна тільки для вибраних видів цін'"));
		Возврат;
	КонецЕсли;
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru='Настройка параметров для вида цены ""%1""';uk='Настройка параметрів для виду ціни ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", ТекущиеДанные.Наименование);
	
	АдресНастроекСхемыКомпоновкиДанных = УстановкаЦенВызовСервера.АдресНастроекКомпоновкиДанныхДляВидаЦены(
		ТекущиеДанные.Ссылка,
		АдресХранилищаНастройкиКомпоновкиДанных,
		УникальныйИдентификатор);
	
	АдресХранилищаНастройкиКомпоновщика = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|УникальныйИдентификатор,
			|Заголовок",
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			ТекущиеДанные.АдресСхемыКомпоновкиДанных,
			?(АдресНастроекСхемыКомпоновкиДанных <> Неопределено,
			       АдресНастроекСхемыКомпоновкиДанных,
			       ТекущиеДанные.АдресНастроекСхемыКомпоновкиДанных
			),
			УникальныйИдентификатор,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных),,,,, Новый ОписаниеОповещения("РедактироватьНастройкиЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    АдресХранилищаНастройкиКомпоновщика = Результат;
    
    Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
        
        ВыбранныеЦеныИзменены = Истина;
        СтруктураДанных = УстановкаЦенВызовСервера.УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(
        ТекущиеДанные.Ссылка,
        АдресХранилищаНастройкиКомпоновщика,
        АдресХранилищаНастройкиКомпоновкиДанных,
        АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
        ТекущиеДанные.Параметры = СтруктураДанных.ОписаниеПараметров;
        Модифицированность = Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Редактировать настройки невозможно. Не выбран вид цены';uk='Редагувати настройки неможливо. Не вибрано вид ціни'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Выбрана Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Редактировать настройки схемы компоновки можно только для выбранных видов цен.';uk='Редагувати настройки схеми компонування можна тільки для вибраних видів цін.'"));
		Возврат;
	КонецЕсли;
	
	АдресХранилищаНастройкиКомпоновщика = УстановкаЦенВызовСервера.НастройкиСхемыКомпоновкиДанныхПоУмолчанию(
		ТекущиеДанные.Ссылка, ТекущиеДанные.АдресСхемыКомпоновкиДанных, УникальныйИдентификатор);
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		
		ВыбранныеЦеныИзменены = Истина;
		СтруктураДанных = УстановкаЦенВызовСервера.УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(
			ТекущиеДанные.Ссылка,
			АдресХранилищаНастройкиКомпоновщика,
			АдресХранилищаНастройкиКомпоновкиДанных,
			АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
		ТекущиеДанные.Параметры = СтруктураДанных.ОписаниеПараметров;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоОтборуВидовЦен(Команда)
	
	МассивДанныхДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьТоварыПоОтборамСКД();
	Для Каждого ДанныеДляРасчетаВычисляемыхЦенНаКлиенте Из МассивДанныхДляРасчетаВычисляемыхЦенНаКлиенте Цикл
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованиюНоменклатуры(Команда)
	
	СортироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованиюНоменклатурыСУчетомИерархииВидов(Команда)
	СортироватьНаСервере("ПоНаименованиюНоменклатурыИерархияВидовНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованиюНоменклатурыСУчетомИерархииГрупп(Команда)
	СортироватьНаСервере("ПоНаименованиюНоменклатурыИерархияГрупп");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = ПолучитьКоличествоСтрокДереваЦен();
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтаФорма);
	
	Если ВидыЦен.Количество() > 1 Тогда
		ПараметрыОткрытияФормы = Новый Структура("ВидыЦен", ВидыЦен);
		ЗаполняемыйВидЦены = Неопределено;

		ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораВидаЦен", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ВставитьСтрокиЗавершение", ЭтотОбъект, Новый Структура("ВидыЦен, КоличествоТоваровДоВставки", ВидыЦен, КоличествоТоваровДоВставки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
	Иначе
		ЗаполняемыйВидЦены = ВидыЦен.Получить(0);
	КонецЕсли;
	
	ВставитьСтрокиФрагмент(ЗаполняемыйВидЦены, КоличествоТоваровДоВставки);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВидыЦен = ДополнительныеПараметры.ВидыЦен;
    КоличествоТоваровДоВставки = ДополнительныеПараметры.КоличествоТоваровДоВставки;
    
    
    ЗаполняемыйВидЦены = Результат;
    
    ВставитьСтрокиФрагмент(ЗаполняемыйВидЦены, КоличествоТоваровДоВставки);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиФрагмент(ЗаполняемыйВидЦены, Знач КоличествоТоваровДоВставки)
    
    ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПолучитьСтрокиИзБуфераОбмена(ЗаполняемыйВидЦены);
    
    Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
        УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
    КонецЕсли;
    
    КоличествоВставленных = ПолучитьКоличествоСтрокДереваЦен() - КоличествоТоваровДоВставки;
    КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.ДеревоЦен.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.ДеревоЦен.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#Область ШтрихкодыИТорговоеОборудование

// МеханизмВнешнегоОборудования
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ВозвращаемыеДанные = ДобавитьНоменклатуруПоШтрихкодамВДеревоЦен(МассивШтрихкодов);
	Если ВозвращаемыеДанные.ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
		УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ВозвращаемыеДанные.ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	КонецЕсли;
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("НеизвестныеШтрихкоды", ВозвращаемыеДанные.НеизвестныеШтрихкоды);
	
	Если ПравоРегистрацииШтрихкодовНоменклатурыДоступно
		И СтруктураПараметровДействия.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			СтруктураПараметровДействия,
			ЭтаФорма,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьШтрихкоды()
// Конец МеханизмВнешнегоОборудования

#КонецОбласти

#Область Прочее

&НаСервере
Функция ДобавитьНоменклатуруПоШтрихкодамВДеревоЦен(ДанныеШтрихкодов)
	
	ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	
	ТаблицаШтрихкоды = Новый ТаблицаЗначений;
	ТаблицаШтрихкоды.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Для Каждого ЭлементМассива Из ДанныеШтрихкодов Цикл
		НоваяСтрока = ТаблицаШтрихкоды.Добавить();
		НоваяСтрока.Штрихкод = ЭлементМассива.Штрихкод;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаШтрихкоды.Штрихкод КАК Строка(200)) КАК Штрихкод
	|ПОМЕСТИТЬ ТаблицаШтрихкоды
	|ИЗ
	|	&ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
	|ИНДЕКСИРОВАТЬ ПО Штрихкод
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаШтрихкоды.Штрихкод            КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ШтрихкодыНоменклатуры.Штрихкод = ТаблицаШтрихкоды.Штрихкод
	|";
	
	Запрос.УстановитьПараметр("ТаблицаШтрихкоды", ТаблицаШтрихкоды);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	ТаблицаНоменклатура = УстановкаЦенСервер.СоздатьТаблицуНоменклатуры();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			НоваяСтрока = ТаблицаНоменклатура.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.Характеристика = Выборка.Характеристика;
			
		Иначе
			НеизвестныеШтрихкоды.Добавить(Новый Структура("Штрихкод, Количество", Выборка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = УстановкаЦенСервер.ДобавитьТоварыПоОтбору(ЭтаФорма,,ТаблицаНоменклатура);
	
	Возврат Новый Структура(
		"НеизвестныеШтрихкоды, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте",
		НеизвестныеШтрихкоды, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	
КонецФункции

&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = УстановкаЦенСервер.ДобавитьТоварыПоОтбору(ЭтаФорма,, ТаблицаТоваров);
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Изменяет доступность элементов в соответствии с признаком согласованности документа
//
&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Ответственный");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("НомерВПределахДня");
	МассивЭлементов.Добавить("ВыбранныеЦены");
	
	МассивЭлементов.Добавить("ДеревоЦен;ПередНачаломДобавления,ПередУдалением");
	
	МассивЭлементов.Добавить("ДеревоЦенПодобратьТовары");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоЦеновойГруппе");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоОтбору");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьНоменклатуру");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьХарактеристику");
	МассивЭлементов.Добавить("ДеревоЦенЗагрузитьСтарыеЦены");
	МассивЭлементов.Добавить("ДеревоЦенРассчитать");
	МассивЭлементов.Добавить("ДеревоЦенОкруглитьРучныеЦены");
	МассивЭлементов.Добавить("ДеревоЦенИзменитьЦеныНаПроцент");
	МассивЭлементов.Добавить("КонтекстноеМенюДеревоЦенДобавитьХарактеристику");
	
	МассивЭлементов.Добавить("ВыбранныеЦеныИсключитьВсеВидыЦен");
	МассивЭлементов.Добавить("ВыбранныеЦеныВыбратьВсеВидыЦен");
	МассивЭлементов.Добавить("ВыбранныеЦеныВыбратьВсеВлияющие");
	МассивЭлементов.Добавить("ВыбранныеЦеныВыбратьВсеЗависимые");
	МассивЭлементов.Добавить("ВыбранныеЦеныРедактироватьНастройки");
	МассивЭлементов.Добавить("ВыбранныеЦеныВосстановитьНастройкиПоУмолчанию");
	
	МассивЭлементов.Добавить("ДеревоЦенСортироватьПоНаименованиюНоменклатурыСУчетомИерархииГрупп");
	МассивЭлементов.Добавить("ДеревоЦенСортироватьПоНаименованиюНоменклатурыСУчетомИерархииВидов");
	МассивЭлементов.Добавить("ДеревоЦенСортироватьПоНаименованиюНоменклатуры");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоОтборуВидовЦен");
	
	МассивЭлементов.Добавить("ДеревоЦенВыгрузитьВExcel");
	МассивЭлементов.Добавить("ДеревоЦенЗагрузитьИзExcel");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ДеревоЦенУдалитьТоварыБезИзмененныхЦен");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьРассчитыватьАвтоматически(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ДеревоЦенПереключательРассчитыватьАвтоматически.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	Элементы.ДеревоЦенПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьАвтоматическиДобавлятьХарактеристики(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	АвтоматическиДобавлятьХарактеристики = НовоеЗначение;
	Элементы.ДеревоЦенПереключательАвтоматическиДобавлятьХарактеристики.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак фиксации колонок "Номенклатура" и "Характеристика" слева
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура ЗафиксироватьКолонкуНоменклатура(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице   = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	
	Элементы.ДеревоЦенПереключательЗафиксироватьКолонкуНоменклатура.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Выполняет необходимые действия при переходе к странице установки цен
//
&НаКлиенте
Процедура ПриПереходеКУстановкеЦен()
	
	Если НЕ УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма).Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для перехода к установке цен, необходимо выбрать один или несколько видов цен';uk='Для переходу до встановлення цін, необхідно вибрати один або кілька видів цін'"),,"ВыбранныеЦены");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен;
		
	Иначе
		
		Если ВыбранныеЦеныИзменены Тогда
			
			ВыбранныеЦеныИзменены = Ложь;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриПереходеКУстановкеЦенЗавершение", ЭтотОбъект);
			Если ДеревоЦен.ПолучитьЭлементы().Количество() > 0 Тогда
				ПоказатьВопрос(
					ОписаниеОповещения,
					НСтр("ru='Состав цен или параметры расчета изменились. Пересчитать цены?';uk='Склад цін або параметри розрахунку змінилися. Перерахувати ціни?'"),
					РежимДиалогаВопрос.ДаНет);
			Иначе
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереходеКУстановкеЦенЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПересчитатьЦены = ?(ДеревоЦен.ПолучитьЭлементы().Количество() > 0, РезультатВопроса = КодВозвратаДиалога.Да, Истина);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПереформироватьТаблицуЦен(ПересчитатьЦены);
	Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
		УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтаФорма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенНоменклатура".
//
&НаСервере
Функция ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		Характеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Если Характеристики.Количество() > 0 Тогда
			Если Характеристики[0].Номенклатура <> ТекущаяСтрока.Номенклатура Тогда
				ТекущаяСтрока.ПолучитьЭлементы().Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма);
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИмяКолонки         = ВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонки]) И РассчитатьЦены Тогда
			ТекущаяСтрока[ИмяКолонки] = 0;
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонкиУпаковка]) Тогда
			ТекущаяСтрока[ИмяКолонкиУпаковка] = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура";
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента,
			|													Номенклатура = &Номенклатура
			|													И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|													И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
			Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтаФорма));
			Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаНоменклатура = МассивРезультатов[0].Выбрать();
		
		Если ВыборкаНоменклатура.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНоменклатура);
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ВыборкаУпаковки = МассивРезультатов[1].Выбрать();
			Пока ВыборкаУпаковки.Следующий() Цикл
				ТекущаяСтрока["Упаковка" + УстановкаЦенСервер.ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
		КонецЕсли;
		
		Если АвтоматическиДобавлятьХарактеристики И ИспользоватьХарактеристикиНоменклатуры Тогда
			УстановкаЦенСервер.ЗаполнитьХарактеристикиНоменклатуры(ЭтаФорма, ТекущаяСтрока, Не РассчитатьЦены И ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		ТекущаяСтрока.ЦеноваяГруппа    = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = УстановкаЦенСервер.СоздатьТаблицуТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановкаЦенСервер.ЗагрузитьСтарыеЦеныНоменклатуры(ЭтаФорма, ТаблицаЗначений, КэшДанных);
	
	Если РассчитатьЦены Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = УстановкаЦенСервер.РассчитатьЦеныПоИдентификаторуСтроки(ЭтаФорма, ИдентификаторСтроки, Истина,,КэшДанных);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенХарактеристика".
//
&НаСервере
Функция ДеревоЦенХарактеристикаПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	Возврат УстановкаЦенСервер.ДеревоЦенХарактеристикаПриИзменении(ЭтаФорма, ИдентификаторСтроки, РассчитатьЦены);
	
КонецФункции

// Добавляет товары из ценовой группы в таблицу цен
//
// Параметры:
// ЦеновыеГруппы - Массив
//
&НаСервере
Функция ДобавитьНоменклатуруЦеновойГруппыНаСервере(ЦеновыеГруппы)
	
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА СправочникНоменклатура.Ссылка
		|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА СправочникНоменклатура.ВладелецХарактеристик
		|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА СправочникНоменклатура.ВидНоменклатуры
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	СправочникНоменклатура.ЦеноваяГруппа В(&ЦеновыеГруппы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СправочникНоменклатура.ЦеноваяГруппа
		|ИТОГИ ПО
		|	Номенклатура";
			
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.ЦеноваяГруппа В(&ЦеновыеГруппы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СправочникНоменклатура.ЦеноваяГруппа
		|ИТОГИ ПО
		|	Номенклатура";
		
	КонецЕсли;
		
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, Номенклатура.ЦеноваяГруппа В (&ЦеновыеГруппы) И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ЦеновыеГруппы", ЦеновыеГруппы);
	Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтаФорма));
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = РезультатЗапроса[1].Выгрузить();
		Упаковки.Индексы.Добавить("Номенклатура, Характеристика");
	КонецЕсли;
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаНоменклатура.Номенклатура, ПустаяХарактеристика);
		НайденнаяСтрока = УстановкаЦенСервер.НайтиСтрокуДереваЦен(ЭтаФорма, ПараметрыОтбора, КэшДанных);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементНоменклатура = НайденнаяСтрока;
		Иначе
			
			ЭлементНоменклатура = ДеревоЦен.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = ЭлементНоменклатура.Характеристика;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика", ЭлементНоменклатура.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				
				НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
					ЭлементНоменклатура["Упаковка" + УстановкаЦенСервер.ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьХарактеристикиНоменклатуры И АвтоматическиДобавлятьХарактеристики Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаХарактеристики.Номенклатура, ВыборкаХарактеристики.Характеристика);
					НайденнаяСтрока = УстановкаЦенСервер.НайтиСтрокуДереваЦен(ЭтаФорма, ПараметрыОтбора, КэшДанных);
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ЭлементХарактеристика = НайденнаяСтрока;
					Иначе
						
						ЭлементХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
						НоваяСтрокаТЗ.Номенклатура    = ЭлементХарактеристика.Номенклатура;
						НоваяСтрокаТЗ.Характеристика  = ЭлементХарактеристика.Характеристика;
						НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
						
						Если ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементХарактеристика.Номенклатура, ЭлементХарактеристика.Характеристика);
							
							НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
							Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
								ЭлементХарактеристика["Упаковка" + УстановкаЦенСервер.ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановкаЦенСервер.ОбновитьСтарыеЦеныНоменклатуры(ЭтаФорма, КэшДанных);
	
	// Автоматический расчет цен
	ЗагружатьЦеныИзИБ = Истина;
	Если РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			УстановкаЦенСервер.ЗагрузитьЗначенияБазовыхЦен(ЭтаФорма, КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,,,,,КэшДанных);
			УстановкаЦенСервер.ВычислитьЦеныПоДаннымИБ(ЭтаФорма, КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,,,КэшДанных);
		КонецЕсли;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = УстановкаЦенСервер.ПодготовитьДанныеДляРасчетаВычисляемыхЦен(
				ЭтаФорма, КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,,,,КэшДанных);
		Иначе
			УстановкаЦенСервер.РассчитатьВычисляемыеЦены(
				ЭтаФорма, КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,,,,КэшДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим последнюю добавленную строку текущей
	Если КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Количество() > 0 Тогда
		Элементы.ДеревоЦен.ТекущаяСтрока = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров[
			КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Количество()-1].СтрокаДереваЦен.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьРассчитыватьАвтоматическиНаКлиенте(НовоеЗначение)
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ДеревоЦенПереключательРассчитыватьАвтоматически.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак фиксации колонки "Номенклатура"
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура ЗафиксироватьКолонкуНоменклатураНаКлиенте(НовоеЗначение)
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице   = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	
	Элементы.ДеревоЦенПереключательЗафиксироватьКолонкуНоменклатура.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуреНаКлиенте(НовоеЗначение)
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	Элементы.ДеревоЦенПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьАвтоматическиДобавлятьХарактеристикиНаКлиенте(НовоеЗначение)
	
	АвтоматическиДобавлятьХарактеристики = НовоеЗначение;
	Элементы.ДеревоЦенПереключательАвтоматическиДобавлятьХарактеристики.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для расчета цен
//
// Параметры:
// ЗагрузкаСтарыхЦен - Булево - Указывает на необходимость загрузки старых значений ручных цен
// ОкруглениеРучныхЦен - Булево - Указывает на необходимость округления ручных цен
//
// Возвращаемое значение:
// Структура
// Ключи структуры:
// ЗагрузкаСтарыхЦен - Булево
// ОкруглениеРучныхЦен - Булево
// ВидыЦен - Массив
//
&НаКлиенте
Функция ПараметрыОткрытияФормыВыбораПараметровРасчета(ЗагрузкаСтарыхЦен = Ложь, ОкруглениеРучныхЦен = Ложь)
	
	РучныеВидыЦен = Новый Массив();
	
	Для Каждого СтрокаВидыЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидыЦены.Выбрана
			И ((СтрокаВидыЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную")) = (ЗагрузкаСтарыхЦен Или ОкруглениеРучныхЦен)) Тогда
			РучныеВидыЦен.Добавить(СтрокаВидыЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ТолькоВыделенные = Элементы.ДеревоЦен.ВыделенныеСтроки.Количество() > 1;
	
	Возврат Новый Структура(
		"ЗагрузкаСтарыхЦен, ОкруглениеРучныхЦен, РучныеВидыЦен, ДатаДокумента, ТолькоВыделенные, ВсеВидыЦен",
		ЗагрузкаСтарыхЦен,
		ОкруглениеРучныхЦен,
		РучныеВидыЦен,
		УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата),
		ТолькоВыделенные, УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтаФорма));
	
КонецФункции

&НаСервере
Функция ДатаДляЗапросаЦенНоменклатуры()
	
	Возврат УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата) - 1;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДокумент()
	
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	Если Объект.ВидыЦен.Количество() > 0 ИЛИ Объект.Товары.Количество() > 0 ИЛИ НЕ ИспользоватьНесколькоВидовЦен ИЛИ ВыбранныеЦены.Количество() = 1 Тогда
		
		Если УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма).Количество() > 0 Тогда
			УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтаФорма);
			УстановкаЦенСервер.ЗагрузитьТабличнуюЧастьТовары(ЭтаФорма, КэшДанных);
			УстановкаЦенСервер.ЗагрузитьБазовыеЦены(ЭтаФорма, КэшДанных);
			Если УстановкаЦенСервер.ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(ЭтаФорма, Ложь) Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
			Иначе
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен;
			КонецЕсли;
		Иначе
			
			Если НЕ ИспользоватьНесколькоВидовЦен Тогда
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					ТекСтрока.Выбрана = Истина;
				КонецЦикла;
			КонецЕсли;

			Если ВыбранныеЦены.Количество() = 1 Тогда
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					ТекСтрока.Выбрана = Истина;
				КонецЦикла;
			КонецЕсли;
			
			// Документ вводится на основании Поступления товаров и услуг.
			// Необходимо выбрать цены, расчитываемые по документу поступления и переформировать таблицу цен.
			Если ЗначениеЗаполнено(Объект.ДокументОснование)
				И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					Если ТекСтрока.УстанавливатьЦенуПриВводеНаОсновании Тогда
						ТекСтрока.Выбрана = Истина;
						НоваяСтрока = Объект.ВидыЦен.Добавить();
						НоваяСтрока.ВидЦены = ТекСтрока.Ссылка;
					КонецЕсли;
				КонецЦикла;
				
				УстановкаЦенКлиентСервер.ВыбратьВсеЗависимыеЦены(ЭтаФорма);
				УстановкаЦенКлиентСервер.ВыбратьВсеВлияющиеЦены(ЭтаФорма);
				ВыбранныеЦеныИзменены = Ложь;
				
				ВидыЗагружаемыхСтарыхЦен = Новый Массив();
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					Если ТекСтрока.Выбрана И (ТекСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную) Тогда
						ВидыЗагружаемыхСтарыхЦен.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЦикла;
				
				УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтаФорма);
				УстановкаЦенСервер.ЗагрузитьТабличнуюЧастьТовары(ЭтаФорма, КэшДанных);
				
				УстановкаЦенСервер.ПоместитьВидыЦенВТабличнуюЧасть(ЭтаФорма, Объект.ВидыЦен);
				
				Данные = Новый Структура;
				Данные.Вставить("Форма", ЭтаФорма);
				Данные.Вставить("Документы", Новый Массив);
				Данные.Вставить("СохранятьБазовые", Ложь);
				Данные.Документы.Добавить(Объект);
				УстановкаЦенСервер.ПоместитьЦеныВТабличнуюЧасть(Данные);
				
				УстановкаЦенСервер.ОбновитьСтарыеЦеныНоменклатуры(ЭтаФорма, КэшДанных);
				
				ТаблицаНоменклатуры = УстановкаЦенСервер.СоздатьТаблицуНоменклатурыПоДеревуЦен(ЭтаФорма);
				УстановкаЦенСервер.ЗагрузитьЗначенияБазовыхЦен(ЭтаФорма, ТаблицаНоменклатуры, ВидыЗагружаемыхСтарыхЦен,, 0, Истина, КэшДанных);
				
				Если УстановкаЦенСервер.ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(ЭтаФорма, Ложь) Тогда
					
					УстановкаЦенСервер.ВычислитьЦеныПоДаннымИБ(ЭтаФорма, ТаблицаНоменклатуры,,,КэшДанных);
					
					Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
						ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = УстановкаЦенСервер.ПодготовитьДанныеДляРасчетаВычисляемыхЦен(ЭтаФорма, ТаблицаНоменклатуры,,,,КэшДанных);
					Иначе
						УстановкаЦенСервер.РассчитатьВычисляемыеЦены(ЭтаФорма, ТаблицаНоменклатуры,,,,КэшДанных);
					КонецЕсли;
					
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
				
				Иначе
					ПроверитьЗаполнениеПараметровПриОткрытии = Истина;
				КонецЕсли;
				
			Иначе
				
				УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтаФорма);
				УстановкаЦенСервер.ЗагрузитьТабличнуюЧастьТовары(ЭтаФорма, КэшДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояние()
	
	Если Объект.Проведен И Объект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован Тогда
		Состояние = Перечисления.СостоянияУстановокЦенНоменклатуры.Действует;
	ИначеЕсли Объект.Проведен И Объект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован Тогда
		Состояние = Перечисления.СостоянияУстановокЦенНоменклатуры.ОжидаетсяСогласование;
	Иначе
		Состояние = Перечисления.СостоянияУстановокЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Просрочен = Объект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован И НачалоДня(Объект.Дата) < НачалоДня(ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыбора()
	ОчиститьСообщения();
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет прав на установку цен по данному виду цены';uk='Немає прав на встановлення цін за даним видом ціни'"), Объект.Ссылка, "ВыбранныеЦены[" + ВыбранныеЦены.Индекс(ТекущиеДанные) + "].Ссылка");
КонецПроцедуры

&НаСервере
Функция ДобавитьТоварыПоОтборамСКД()
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);

	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
	
		// Копирование схемы компоновки данных
		Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
		СхемаКомпоновкиДанных = Схема.Получить();
	
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(СтрокаВидЦены.Ссылка);
		Если НайденнаяСтрока <> Неопределено Тогда
			НастройкиКомпоновкиДанных = НайденнаяСтрока.НастройкиКомпоновкиДанных;
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных) Тогда
				НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
			Иначе
				НастройкиКомпоновкиДанных = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Ценообразование.ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(
			СхемаКомпоновкиДанных,
			УстановкаЦенВызовСервера.ПолучитьОбязательныеПоляСхемыКомпоновкиДанных(),
			СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""';uk='Вид ціни ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка)) Тогда
			
			// Подготовка компоновщика макета компоновки данных, загрузка настроек
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
			
			// Заполнение структуры отчета и выбранных полей.
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			
			ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаДетальныеЗаписи.Использование = Истина;
			
			КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
			УстановкаЦенСервер.ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
				УстановкаЦенСервер.ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
			КонецЕсли;
			
			РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
			ТекстЗапроса = РабочийНаборДанных.Запрос;
			
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки1", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", 
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
			
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки2", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ТоварыДокумента.Упаковка", 
					"ТоварыДокумента.Номенклатура"));
					
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки3", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ТоварыДокументаВводНаОсновании.Упаковка", 
					"ТоварыДокументаВводНаОсновании.Номенклатура"));
				
			РабочийНаборДанных.Запрос = ТекстЗапроса;
			
			// Компоновка макета и исполнение запроса.
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
			
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Основание");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Объект.ДокументОснование;
			КонецЕсли;
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДатаДокумента");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ДатаДляЗапросаЦенНоменклатуры();
			КонецЕсли;
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = СтрокаВидЦены.Ссылка;
			КонецЕсли;
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЭтоВводНаОсновании");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ЗначениеЗаполнено(Объект.ДокументОснование);
			КонецЕсли;
		
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

			ДанныеОтчета = Новый ТаблицаЗначений();
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			Если ДанныеОтчета.Колонки.Найти("Характеристика") = Неопределено Тогда
				ДанныеОтчета.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			КонецЕсли;
			
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Добавить(
				УстановкаЦенСервер.ДобавитьТоварыПоОтбору(ЭтаФорма, Неопределено, ДанныеОтчета));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&НаСервере
Процедура СортироватьНаСервере(Режим = "ПоНаименованиюНоменклатуры")
	
	УстановитьПривилегированныйРежим(Истина);
	
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	
	Данные = Новый Структура;
	Данные.Вставить("Форма", ЭтаФорма);
	Данные.Вставить("Документы", Новый Массив);
	Данные.Вставить("СохранятьБазовые", Ложь);
	Данные.Документы.Добавить(Объект);
	УстановкаЦенСервер.ПоместитьЦеныВТабличнуюЧасть(Данные);
	
	Таблица = Объект.Товары.Выгрузить();
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(Таблица, "Индекс");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Индекс КАК Индекс,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Индекс
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|");
	
	Если Режим = "ПоНаименованиюНоменклатурыИерархияВидовНоменклатуры" Тогда
		Запрос.Текст = Запрос.Текст +
		"УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаТовары.Номенклатура.Наименование,
		|	ВременнаяТаблицаТовары.Характеристика.Наименование
		|ИТОГИ ПО
		|	Номенклатура.ВидНоменклатуры ИЕРАРХИЯ,
		|	Характеристика";
	ИначеЕсли Режим = "ПоНаименованиюНоменклатурыИерархияГрупп" Тогда
		Запрос.Текст = Запрос.Текст +
		"УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаТовары.Номенклатура.Наименование,
		|	ВременнаяТаблицаТовары.Характеристика.Наименование
		|ИТОГИ ПО
		|	Номенклатура ИЕРАРХИЯ,
		|	Характеристика";
	Иначе
		Запрос.Текст = Запрос.Текст +
		"УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаТовары.Номенклатура.Наименование,
		|	ВременнаяТаблицаТовары.Характеристика.Наименование";
	КонецЕсли;
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТоваров, "Индекс");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата",   ДатаДляЗапросаЦенНоменклатуры());
	
	Индекс = 1;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЧ ИЗ РезультатЗапроса Цикл
		Если Не СтрокаТЧ.Индекс = Null Тогда
			СтрокаДерева = УстановкаЦенСервер.НайтиСтрокуДереваЦен(ЭтаФорма, СтрокаТЧ, КэшДанных);
			СтрокаДерева.РеквизитСортировки = Индекс;
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен");
	ДеревоЦенЗначение.Строки.Сортировать("РеквизитСортировки Возр", Истина);
	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоличествоСтрокДереваЦен()
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	Количество = ЭлементыНоменклатура.Количество();
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		КоличествоХарактеристик = ЭлементыХарактеристики.Количество();
		Количество = Количество + КоличествоХарактеристик;
		
	КонецЦикла;

	Возврат Количество

КонецФункции // ()

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НомерВПределахДня" Тогда
		НомерВПределахДняПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВыбранныеЦеныВыбрана" Тогда
		ВыбранныеЦеныВыбранаПриИзменении(Элемент);
	Иначе
		Если СтрНайти(Элемент.Имя, "ДеревоЦенВидЦены") > 0
			ИЛИ СтрНайти(Элемент.Имя, "ДеревоЦенПроцентИзмененияВидЦены") > 0 Тогда
			Подключаемый_ДеревоЦенЦенаПриИзменении(Элемент);
		ИначеЕсли СтрНайти(Элемент.Имя, "ДеревоЦенУпаковкаВидЦены") > 0 Тогда
			Подключаемый_ДеревоЦенУпаковкаПриИзменении(Элемент);
		Иначе
			ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "ПодобратьТовары" Тогда
		ПодобратьТовары(Команда);
	ИначеЕсли Команда.Имя = "ДобавитьТоварыПоЦеновойГруппе" Тогда
		ДобавитьТоварыПоЦеновойГруппе(Команда);
	ИначеЕсли Команда.Имя = "ДобавитьТоварыПоОтбору" Тогда
		ДобавитьТоварыПоОтбору(Команда);
	ИначеЕсли Команда.Имя = "ДобавитьНоменклатуру" Тогда
		ДобавитьНоменклатуру(Команда);
	ИначеЕсли Команда.Имя = "ДобавитьХарактеристику" Тогда
		ДобавитьХарактеристику(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьДействующиеЦены" Тогда
		ЗагрузитьДействующиеЦены(Команда);
	ИначеЕсли Команда.Имя = "Рассчитать" Тогда
		Рассчитать(Команда);
	ИначеЕсли Команда.Имя = "ОкруглитьРучныеЦены" Тогда
		ОкруглитьРучныеЦены(Команда);
	ИначеЕсли Команда.Имя = "ИзменитьЦеныНаПроцент" Тогда
		ИзменитьЦеныНаПроцентНаКлиенте(Команда);
	ИначеЕсли Команда.Имя = "ИсключитьВсеВидыЦен" Тогда
		ИсключитьВсеВидыЦен(Команда);
	ИначеЕсли Команда.Имя = "ВыбратьВсеВидыЦен" Тогда
		ВыбратьВсеВидыЦен(Команда);
	ИначеЕсли Команда.Имя = "ВыбратьВсеВлияющие" Тогда
		ВыбратьВсеВлияющие(Команда);
	ИначеЕсли Команда.Имя = "ВыбратьВсеЗависимые" Тогда
		ВыбратьВсеЗависимые(Команда);
	ИначеЕсли Команда.Имя = "РедактироватьНастройки" Тогда
		РедактироватьНастройки(Команда);
	ИначеЕсли Команда.Имя = "ВосстановитьНастройкиПоУмолчанию" Тогда
		ВосстановитьНастройкиПоУмолчанию(Команда);
	ИначеЕсли Команда.Имя = "СортироватьПоНаименованиюНоменклатурыСУчетомИерархииГрупп" Тогда
		СортироватьПоНаименованиюНоменклатурыСУчетомИерархииГрупп(Команда);
	ИначеЕсли Команда.Имя = "СортироватьПоНаименованиюНоменклатурыСУчетомИерархииВидов" Тогда
		СортироватьПоНаименованиюНоменклатурыСУчетомИерархииВидов(Команда);
	ИначеЕсли Команда.Имя = "СортироватьПоНаименованиюНоменклатуры" Тогда
		СортироватьПоНаименованиюНоменклатуры(Команда);
	ИначеЕсли Команда.Имя = "ДобавитьТоварыПоОтборуВидовЦен" Тогда
		ЗаполнитьТоварыПоОтборуВидовЦен(Команда);
	ИначеЕсли Команда.Имя = "ВыгрузитьВExcel" Тогда
		ВыгрузитьВExcel(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьИзExcel" Тогда
		ЗагрузитьИзExcel(Команда);
	ИначеЕсли Команда.Имя = "ПоискПоШтрихкоду" Тогда
		ПоискПоШтрихкодуВыполнить(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьДанныеИзТСД" Тогда
		ЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "УдалитьТоварыБезИзмененныхЦен" Тогда
		УдалитьТоварыБезИзмененныхЦен(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "ДеревоЦен" Тогда
		ДеревоЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопируемыеТовары = Новый ТаблицаЗначений;
	КопируемыеТовары.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КопируемыеТовары.Колонки.Добавить("Характеристика",         Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КопируемыеТовары.Колонки.Добавить("Упаковка",               Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для Каждого ТекСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
		
		ТекЭлементНоменклатура = ДеревоЦен.НайтиПоИдентификатору(ТекСтрока);
		
		ПоместитьСтрокуВТабличнуюЧасть(КопируемыеТовары, ТекЭлементНоменклатура);
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(, КопируемыеТовары);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиИзБуфераОбмена(ЗаполняемыйВидЦен)
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = УстановкаЦенСервер.ДобавитьТоварыПоОтбору(ЭтаФорма,,ТаблицаТоваров, ЗаполняемыйВидЦен);
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьСтрокуВТабличнуюЧасть(ПомещаемыеТовары, СтрокаЦен) Экспорт
	
	НоваяСтрока                = ПомещаемыеТовары.Добавить();
	НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
	НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ИмяКолонки = "Упаковка" + ИмяКолонки;
		Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
			НоваяСтрока.Упаковка = СтрокаЦен[ИмяКолонки];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ИндексКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦен.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ИндексКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Основание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументОснование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыбранныеЦеныСпособЗаданияЦены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументОснование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыбранныеЦены.УстанавливатьЦенуПриВводеНаОсновании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заполнять по документу основанию';uk='Заповнювати за документом підставою'"));

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
	                                                                         "ДеревоЦенХарактеристика",
	                                                                         "ДеревоЦен.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыбранныеЦены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыбранныеЦены.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

КонецПроцедуры

&НаСервере
Функция ПереформироватьТаблицуЦен(ПересчитатьЦены)
	Возврат УстановкаЦенСервер.ПереформироватьТаблицуЦен(ЭтаФорма, ПересчитатьЦены);
КонецФункции

&НаКлиенте
Функция ДеревоЦенЦенаПриИзмененииКлиент(Элемент)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	КонецЕсли;
	
	ИзмененПроцент = Ложь;
	ПроцентИзменения = 0;
	ИмяТекущейКолонки  = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
	Если СтрНайти(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = Окр(
			ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] * ((ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] / 100) + 1),
			15,
			2);
		ИзмененПроцент = Истина;
		ПроцентИзменения = ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки];
	КонецЕсли;
	
	ИмяКолонкиУпаковка = СтрЗаменить(СтрЗаменить(Элемент.Имя, "ПроцентИзмененияВидЦены", "ВидЦены"), "ДеревоЦенВидЦены", "УпаковкаВидЦены");
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные["ИзмененаВручную"       + ИмяТекущейКолонки] = Истина;
	ТекущиеДанные["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
	
	Если ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
			100 * (ТекущиеДанные[ИмяТекущейКолонки] - ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки]) / ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки], 5, 2);
	Иначе
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
	КонецЕсли;
	
	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		МассивСтруктурУпаковокНоменклатуры = Новый Массив;
		СоответствиеКоэффициентовУпаковокНоменклатуры = Неопределено;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТекущееЗначениеУпаковки = ТекущиеДанные[ИмяКолонкиУпаковка];
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) Тогда
				Структура = УстановкаЦенКлиентСервер.ПолучитьСтруктуруУпаковокНоменклатуры();
				Структура.Номенклатура = ТекущиеДанные.Номенклатура;
				Структура.Упаковка = ТекущееЗначениеУпаковки;
				МассивСтруктурУпаковокНоменклатуры.Добавить(Структура);
			КонецЕсли;
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) 
					И УстановкаЦенКлиентСервер.НайтиСтруктуруУпаковкиНоменклатурыВМассиве(МассивСтруктурУпаковокНоменклатуры, 
																							ЭлементХарактеристика.Номенклатура, 
																							ЗначениеКолонкиУпаковка) = Неопределено Тогда
					Структура = УстановкаЦенКлиентСервер.ПолучитьСтруктуруУпаковокНоменклатуры();
					Структура.Номенклатура = ЭлементХарактеристика.Номенклатура;
					Структура.Упаковка = ЗначениеКолонкиУпаковка;
					МассивСтруктурУпаковокНоменклатуры.Добавить(Структура);
				КонецЕсли;
				
			КонецЦикла;
		
			Если МассивСтруктурУпаковокНоменклатуры.Количество() > 0 Тогда
				СоответствиеКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатуры(МассивСтруктурУпаковокНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;
		
		// Определим коэффициент упаковки текущей цены
		КоэффициентУпаковкиЦеныИсточника = 1;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) И СоответствиеКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
				РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(СоответствиеКоэффициентовУпаковокНоменклатуры, 
					ТекущиеДанные.Номенклатура, 
					ТекущееЗначениеУпаковки);
				Если РезультатПоиска <> Неопределено Тогда
					КоэффициентУпаковкиЦеныИсточника = РезультатПоиска;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущееЗначение = ТекущиеДанные[ИмяТекущейКолонки];
		ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ТекущееЗначениеУпаковки = ЗначениеКолонкиУпаковка
					И ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					
					Если ИзмененПроцент Тогда
						
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = ПроцентИзменения;
						ЭлементХарактеристика[ИмяТекущейКолонки] = Окр(
							ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки] * ((ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] / 100) + 1), 15, 2);
						
					Иначе
						ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
						Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
								100 * (ЭлементХарактеристика[ИмяТекущейКолонки]
								     - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки]) / ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки], 5, 2);
						Иначе
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
						КонецЕсли;
					КонецЕсли;
					
					ЭлементХарактеристика["ИзмененаВручную"       + ИмяТекущейКолонки] = Истина;
					ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
					
				Иначе
					
					// Определим коэффициент упаковки влияющей цены
					КоэффициентУпаковкиЦеныНазначения = 1;
					Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И СоответствиеКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
						РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(СоответствиеКоэффициентовУпаковокНоменклатуры, 
							ТекущиеДанные.Номенклатура,
							ЗначениеКолонкиУпаковка);
						Если РезультатПоиска <> Неопределено Тогда
							КоэффициентУпаковкиЦеныНазначения = РезультатПоиска;
						КонецЕсли;
					КонецЕсли;
					
					Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
						НоваяЦена = ТекущееЗначение;
					Иначе
						НоваяЦена = ТекущееЗначение / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
					КонецЕсли;
					
					Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
						
						Если ИзмененПроцент Тогда
							
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = ПроцентИзменения;
							ЭлементХарактеристика[ИмяТекущейКолонки] = Окр(
								ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки] * ((ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] / 100) + 1), 15, 2);
						
						Иначе
							
							ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
							
							Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
								ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
									100 * (ЭлементХарактеристика[ИмяТекущейКолонки]
									       - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки]) / ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки],
									5,
									2);
							Иначе
								ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
							КонецЕсли;
							
						КонецЕсли;
						
						ЭлементХарактеристика["ИзмененаВручную"       + ИмяТекущейКолонки] = Истина;
						ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НоваяЦена = ТекущееЗначение;
				
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
					
					ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
					ЭлементХарактеристика["ИзмененаВручную"       + ИмяТекущейКолонки] = Истина;
					ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
					
					Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
							100 * (ЭлементХарактеристика[ИмяТекущейКолонки]
							       - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки])/ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки],
							5,
							2);
					Иначе
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныПоИдентификаторуСтрокиНаСервере(ТекущиеДанные.ПолучитьИдентификатор(),ИмяТекущейКолонки);
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтарыеЦеныНоменклатурыНаСервере()
	УстановкаЦенСервер.ОбновитьСтарыеЦеныНоменклатуры(ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоэффициентыУпаковокНоменклатуры(МассивСтруктурУпаковокНоменклатуры)
	
	Возврат УстановкаЦенСервер.ПолучитьСоответствиеКоэффициентовПоМассивуСтруктурУпаковокНоменклатуры(МассивСтруктурУпаковокНоменклатуры);
		
КонецФункции

&НаСервере
Функция ИзменитьЦеныНаПроцентНаСервере(ПараметрыРасчета)
	Возврат УстановкаЦенСервер.ИзменитьЦеныНаПроцент(ЭтаФорма, ПараметрыРасчета);
КонецФункции

&НаСервере
Функция ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище)
	Возврат УстановкаЦенСервер.ДобавитьТоварыПоОтбору(ЭтаФорма, АдресВоВременномХранилище); 
КонецФункции

&НаСервере
Функция РассчитатьЦеныНаСервере(ПараметрыРасчета)
	Возврат УстановкаЦенСервер.РассчитатьЦены(ЭтаФорма, ПараметрыРасчета);
КонецФункции

&НаСервере
Функция РассчитатьЦеныПоИдентификаторуСтрокиНаСервере(ИдентификаторСтроки, ИзмененноеПоле)
	Возврат УстановкаЦенСервер.РассчитатьЦеныПоИдентификаторуСтроки(ЭтаФорма, ИдентификаторСтроки,,ИзмененноеПоле);
КонецФункции

&НаСервере
Функция ЗагрузитьИзExcelНаСервере(Параметр)
	
	Возврат УстановкаЦенСервер.ЗагрузитьИзExcel(ЭтаФорма, Параметр.ВидыЦен, Параметр.Товары);
	
КонецФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

ДобавитьХарактеристику = Ложь;
СтрокаДобавлена = Ложь;

#КонецОбласти

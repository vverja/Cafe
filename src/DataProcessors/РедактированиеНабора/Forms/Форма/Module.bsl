&НаКлиенте
Перем КэшированныеЗначения; //текущая номенклатура для передачи в обработчики ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	ИспользоватьСоглашенияСКлиентами         = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	ИмяТЧ                    = Параметры.ИмяТЧ;
	ЗапретРедактированияЦены          = Параметры.ЗапретРедактированияЦены;
	ЗапретРедактированияСоставаНабора = Параметры.ЗапретРедактированияСоставаНабора;
	СкрыватьКомандуОстаткиНаСкладах   = Параметры.СкрыватьКомандуОстаткиНаСкладах;
	
	СкрыватьВидыЦен = Параметры.СкрыватьВидыЦен;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомплектующиеВидЦены", "Видимость", Не СкрыватьВидыЦен);
	
	Заголовок = Строка(Объект.НоменклатураНабора) + ": " + "(" + НСтр("ru='Редактирование набора';uk='Редагування набору'") + ")";
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(Объект.Склад, Объект.Дата);
	
	Комплектующие = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
	Объект.Комплектующие.Загрузить(Комплектующие);
	
	// Если вид цены задается не в табличной части а в шапке документа.
	НайденныеСтроки = Объект.Комплектующие.НайтиСтроки(Новый Структура("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка()));
	Если НайденныеСтроки.Количество() = Объект.Комплектующие.Количество() И ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Для Каждого СтрокаТЧ Из Объект.Комплектующие Цикл
			СтрокаТЧ.ВидЦены = Объект.ВидЦены;
		КонецЦикла;
	КонецЕсли;
	
	НеиспользуемыеРеквизиты = Новый Массив;
	
	КомплектующиеТЧ = Объект.Комплектующие.Выгрузить();
	Для Каждого Колонка Из КомплектующиеТЧ.Колонки Цикл
		Если Комплектующие.Колонки.Найти(Колонка.Имя) = Неопределено
			И НеиспользуемыеРеквизиты.Найти(Колонка.Имя) = Неопределено Тогда
			НеиспользуемыеРеквизиты.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	НеиспользуемыеРеквизиты.Добавить("КомплектующиеНомерСтроки");
	
	Для Каждого ИмяНеиспользуемогоРеквизита Из НеиспользуемыеРеквизиты Цикл
		Если Элементы.Найти("Комплектующие" + ИмяНеиспользуемогоРеквизита) <> Неопределено Тогда
			Элементы["Комплектующие" + ИмяНеиспользуемогоРеквизита].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ИспользоватьРучныеСкидкиВПродажах = Истина;
	ИспользоватьАвтоматическиеСкидкиВПродажах = Истина;
	
	Если НеиспользуемыеРеквизиты.Найти("ПроцентРучнойСкидки") <> Неопределено Тогда
		Элементы.ТоварыНазначитьРучнуюСкидку.Видимость = Ложь;
		Элементы.ТоварыОтменитьРучныеСкидки.Видимость  = Ложь;
		ИспользоватьРучныеСкидкиВПродажах = Ложь;
	КонецЕсли;
	
	Если НеиспользуемыеРеквизиты.Найти("ПроцентАвтоматическойСкидки") <> Неопределено Тогда
		ИспользоватьАвтоматическиеСкидкиВПродажах = Ложь;
	КонецЕсли;
	
	Если НеиспользуемыеРеквизиты.Найти("ПроцентАвтоматическойСкидки") <> Неопределено
		И НеиспользуемыеРеквизиты.Найти("ПроцентРучнойСкидки") <> Неопределено Тогда
		Элементы.СуммаСкидки.Видимость = Ложь;
	КонецЕсли;
	
	Если НеиспользуемыеРеквизиты.Найти("Отменено") <> Неопределено Тогда
		Элементы.ТоварыОтменитьВыделенныеСтроки.Видимость             = Ложь;
		Элементы.СуммаОтменено.Видимость                              = Ложь;
	КонецЕсли;
	
	ИспользоватьПричиныОтменыЗаказовКлиентов = (ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов") И НеиспользуемыеРеквизиты.Найти("ПричинаОтмены") = Неопределено);
	
	Элементы.КомплектующиеГруппаОтмена.Видимость                        = ИспользоватьПричиныОтменыЗаказовКлиентов И НеиспользуемыеРеквизиты.Найти("Отменено") = Неопределено;
	Элементы.КомплектующиеОтмененоПричиныОтменыНеИспользуются.Видимость = Не ИспользоватьПричиныОтменыЗаказовКлиентов И НеиспользуемыеРеквизиты.Найти("Отменено") = Неопределено;
	
	ПараметрыВариантаКомплектацииНоменклатуры = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(
		Объект.НоменклатураНабора,
		Объект.ХарактеристикаНабора);
		
	Если Не ЗначениеЗаполнено(ПараметрыВариантаКомплектацииНоменклатуры) Тогда
		ВызватьИсключение НСтр("ru='Состав набора не определен';uk='Склад набору не визначен'");
	КонецЕсли;
	
	ВариантКомплектацииНоменклатуры = ПараметрыВариантаКомплектацииНоменклатуры.ВариантКомплектацииНоменклатуры;
	ВариантРасчетаЦеныНабора = ПараметрыВариантаКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора;
	
	Элементы.ДекорацияЦенаРасчитываетсяПоКомплектущим.Видимость = (ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих) И Не ЗапретРедактированияСоставаНабора;
	Элементы.ДекорацияЦенаЗадаетсяЗаНабор.Видимость = (ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
	                                               ИЛИ ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) И Не ЗапретРедактированияЦены ;
	
	Элементы.ГруппаРассчитываетсяПоКомплектующим.Видимость =    (ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих) ИЛИ ЗапретРедактированияЦены;
	Элементы.ГруппаЦенаЗадаетсяЗаКомплект.Видимость        = НЕ (ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих) И Не ЗапретРедактированияЦены;
	
	Элементы.ДекорацияЦенаОтступ.Видимость = Элементы.ГруппаЦенаЗадаетсяЗаКомплект.Видимость;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОтборПоТипуНоменклатуры) И Параметры.ОтборПоТипуНоменклатуры.Количество() > 0 Тогда
		
		ОтборПоТипуНоменклатуры.ЗагрузитьЗначения(Параметры.ОтборПоТипуНоменклатуры);
		Если ОтборПоТипуНоменклатуры.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор) <> Неопределено Тогда
			ОтборПоТипуНоменклатуры.Удалить(ОтборПоТипуНоменклатуры.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор));
		КонецЕсли;
		
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ОтборПоТипуНоменклатуры));
		
		Элементы.КомплектующиеНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
	Иначе
		
		ТипыНоменклатуры = Новый Массив;
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		Иначе
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		КонецЕсли;
		ОтборПоТипуНоменклатуры.ЗагрузитьЗначения(ТипыНоменклатуры);
		
	КонецЕсли;
	
	Для каждого СтрокаТовара Из Объект.Комплектующие Цикл
		
		Если СтрокаТовара.Номенклатура = ПараметрыВариантаКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента
			И СтрокаТовара.Характеристика = ПараметрыВариантаКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента Тогда
			СтрокаТовара.ОсновнаяКомплектующая = Истина;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТовара.Характеристика);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовара, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ОбновитьДубликатыЗависимыхРеквизитов();

	// Рассчитать количество комплектов.
	АнализКомплекта(Истина);
	
	Если Параметры.ПересчитатьСуммы
		И ВариантРасчетаЦеныНабора <> Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
		Если ИспользоватьВидЦены = 1 Тогда
			ВидЦеныКомплектаПриИзмененииНаСервере();
		Иначе
			ПроизвольнаяЦенаЗаКомплектПриИзмененииНаСервере();
		КонецЕсли;
	Иначе
		
		Для Каждого СтрокаТЧ Из Объект.Комплектующие Цикл
			Если СтрокаТЧ.Сумма > 0 И СтрокаТЧ.СуммаСНДС = 0 Тогда
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
				
				КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		Элементы.ТоварыЗаполнитьЦеныПоСоглашению.Видимость = Ложь;
		Элементы.ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен.Видимость = Ложь;
		Элементы.ТоварыНазначитьРучнуюСкидку.Видимость = Ложь;
		Элементы.ТоварыОтменитьРучныеСкидки.Видимость = Ложь;
		Элементы.ТоварыОтменитьВыделенныеСтроки.Видимость = Ложь;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("Комплектующие.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("Комплектующие.ДатаОтгрузки");
	
	Для ТекИндекс = 0 По Объект.Комплектующие.Количество()-1 Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Комплектующие""';uk=' у рядку %НомерСтроки% списку ""Комплектуючі""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Объект.Комплектующие[ТекИндекс].НомерСтроки);
		
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов")
			И Объект.Комплектующие[ТекИндекс].Отменено
			И Элементы.КомплектующиеПричинаОтмены.Видимость
			И Не ЗначениеЗаполнено(Объект.Комплектующие[ТекИндекс].ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены';uk='Необхідно вказати причину скасування'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Комплектующие", Объект.Комплектующие[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
				"Объект",
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомплектующиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элементы.Комплектующие.ТекущиеДанные.НомерСтрокиДокумента = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПодключитьОбработчикОжидания("АнализКомплектаКлиент", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВидЦеныПриИзменении(Элемент)
	
	Элементы.ПроизвольнаяЦенаЗаКомплект.Доступность = (ИспользоватьВидЦены = 0);
	Элементы.ВидЦеныКомплекта.Доступность           = (ИспользоватьВидЦены = 1);
	
	Если ИспользоватьВидЦены = 1 Тогда
		ВидЦеныКомплектаПриИзмененииНаСервере();
	Иначе
		ПроизвольнаяЦенаЗаКомплектПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныКомплектаПриИзменении(Элемент)
	
	ВидЦеныКомплектаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяЦенаЗаКомплектПриИзменении(Элемент)
	
	ПроизвольнаяЦенаЗаКомплектПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКомплектующие

&НаКлиенте
Процедура КомплектующиеКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	АнализКомплекта();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	ТекущаяСтрока.НоменклатураНабора = Объект.НоменклатураНабора;
	ТекущаяСтрока.ХарактеристикаНабора = Объект.ХарактеристикаНабора;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		КонецЕсли;
	Иначе
		Если КонтролироватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	АнализКомплекта();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		КонецЕсли;
	Иначе
		Если КонтролироватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	АнализКомплекта();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		КонецЕсли;
	Иначе
		Если КонтролироватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	АнализКомплекта();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	АнализКомплекта();
	
КонецПроцедуры

&НаСервере
Процедура КоличествоПриИзмененииНаСервере()
	
	КоличествоНаборов = 0;
	
	Выборка = РезультатАнализаНабора();
	Если Выборка.Следующий() Тогда
		
		КоличествоНаборов = Выборка.КоэффициентОсновнаяКомплектующая;
		
	КонецЕсли;
	
	Если Объект.КоличествоНаборов > КоличествоНаборов Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец КАК НоменклатураНабора,
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика КАК ХарактеристикаНабора,
		|	ВЫБОР
		|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Номенклатура = ВариантыКомплектацииНоменклатурыТовары.Ссылка.НоменклатураОсновногоКомпонента
		|				И ВариантыКомплектацииНоменклатурыТовары.Характеристика = ВариантыКомплектацииНоменклатурыТовары.Ссылка.ХарактеристикаОсновногоКомпонента
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОсновнаяКомплектующая,
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
		|	ВариантыКомплектацииНоменклатурыТовары.Упаковка КАК Упаковка,
		|	ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВариантыКомплектацииНоменклатурыТовары.Количество КАК Количество
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|ГДЕ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантыКомплектацииНоменклатуры");
		
		Запрос.УстановитьПараметр("ВариантыКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ДоступныеТипыНоменклатуры = ОтборПоТипуНоменклатуры.ВыгрузитьЗначения();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура",   Выборка.Номенклатура);
			Отбор.Вставить("Характеристика", Выборка.Характеристика);
			Отбор.Вставить("Упаковка",       Выборка.Упаковка);
			Отбор.Вставить("Отменено",       Ложь);
			НайденныеСтроки = Объект.Комплектующие.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ТекущиеДанные = НайденныеСтроки[0];
				ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.КоличествоУпаковок + Выборка.КоличествоУпаковок * (Объект.КоличествоНаборов - КоличествоНаборов);
				
				СтруктураДействий = Новый Структура;
				КэшированныеЗначения = Неопределено;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
				
			Иначе
				
				Если ДоступныеТипыНоменклатуры.Количество() > 0 И ДоступныеТипыНоменклатуры.Найти(Выборка.ТипНоменклатуры) = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Товары с типом %1 не могут быть добавлены в состав данного набора.';uk='Товари з типом %1 не можуть бути додані до складу даного набору.'"), Выборка.ТипНоменклатуры));
					Продолжить;
				КонецЕсли;
				
				ТекущаяСтрока = Объект.Комплектующие.Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
				
				ТекущаяСтрока.КоличествоУпаковок = Выборка.КоличествоУпаковок * (Объект.КоличествоНаборов - КоличествоНаборов);
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				Если ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
					Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
						Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
							СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
						Иначе
							СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
						КонецЕсли;
					Иначе
						Если КонтролироватьАссортимент Тогда
							СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
						Иначе
							СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));

				КэшированныеЗначения = Неопределено;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если Объект.КоличествоНаборов < КоличествоНаборов Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец КАК НоменклатураНабора,
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика КАК ХарактеристикаНабора,
		|	ВЫБОР
		|		КОГДА ВариантыКомплектацииНоменклатурыТовары.Номенклатура = ВариантыКомплектацииНоменклатурыТовары.Ссылка.НоменклатураОсновногоКомпонента
		|				И ВариантыКомплектацииНоменклатурыТовары.Характеристика = ВариантыКомплектацииНоменклатурыТовары.Ссылка.ХарактеристикаОсновногоКомпонента
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОсновнаяКомплектующая,
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
		|	ВариантыКомплектацииНоменклатурыТовары.Упаковка КАК Упаковка,
		|	ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВариантыКомплектацииНоменклатурыТовары.Количество КАК Количество
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|ГДЕ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантыКомплектацииНоменклатуры");
		
		Запрос.УстановитьПараметр("ВариантыКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура",   Выборка.Номенклатура);
			Отбор.Вставить("Характеристика", Выборка.Характеристика);
			Отбор.Вставить("Упаковка",       Выборка.Упаковка);
			Отбор.Вставить("Отменено",       Ложь);
			НайденныеСтроки = Объект.Комплектующие.НайтиСтроки(Отбор);
			
			ОсталосьУдалить = Выборка.КоличествоУпаковок * (КоличествоНаборов - Объект.КоличествоНаборов);
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				
				ТекущиеДанные = СтрокаТЧ;
				Если ОсталосьУдалить < ТекущиеДанные.КоличествоУпаковок Тогда
					ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.КоличествоУпаковок - ОсталосьУдалить;
					ОсталосьУдалить = 0;
				Иначе
					ОсталосьУдалить = ОсталосьУдалить - ТекущиеДанные.КоличествоУпаковок;
					ТекущиеДанные.КоличествоУпаковок = 0
				КонецЕсли;
				
				Если ТекущиеДанные.КоличествоУпаковок > 0 Тогда
					СтруктураДействий = Новый Структура;
					КэшированныеЗначения = Неопределено;
					ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
				Иначе
					Объект.Комплектующие.Удалить(ТекущиеДанные);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	АнализКомплекта();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	КоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураЗаполненияЦены = Новый Структура;
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	КонецЕсли;
	Если ИспользоватьРучныеСкидкиВПродажах Тогда
		СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	КонецЕсли;
	СтруктураЗаполненияЦены.Вставить("ИмяКоличества", "КоличествоУпаковок");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КомплектующиеОтмененоПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Комплектующие.НайтиПоИдентификатору(Элементы.Комплектующие.ТекущаяСтрока);
	
	ДляВсехСтрок = Ложь;
	Если (ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		ИЛИ ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		ДляВсехСтрок = Истина;
	КонецЕсли;
	
	СтрокиДляОбработки = Новый Массив;
	Если ДляВсехСтрок Тогда
		Для Каждого СтрокаТЧ Из Объект.Комплектующие Цикл
			СтрокиДляОбработки.Добавить(СтрокаТЧ);
			СтрокаТЧ.Отменено = ТекущиеДанные.Отменено;
			Если Не СтрокаТЧ.Отменено Тогда
				СтрокаТЧ.ПричинаОтмены = ТекущиеДанные.ПричинаОтмены;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокиДляОбработки.Добавить(ТекущиеДанные);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СтрокиДляОбработки Цикл
		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = Неопределено;
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектующиеОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Комплектующие.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
	КомплектующиеОтмененоПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)
	
	ЗаполнитьЦеныПоСоглашениюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ПродажиКлиент.ВыбратьВидЦен(
		Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Объект.ЦенаВключаетНДС,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенНаСервере(ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Комплектующие", НСтр("ru='Комплектующие';uk='Комплектуючі'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Комплектующие.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Комплектующие", НСтр("ru='Комплектующие';uk='Комплектуючі'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Комплектующие, НСтр("ru='Комплектующие';uk='Комплектуючі'"), Элементы.Комплектующие.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;

	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОтменитьВыделенныеСтрокиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
	КонецЕсли;
	
	ОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПричинаОтмены = Результат;
    Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
        Возврат;
    КонецЕсли;
    
    ОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиФрагмент(Знач ПричинаОтмены)
    
    Перем ВыделенныеСтроки, СтруктураДействий;
    
    СтруктураДействий = Новый Структура();
    СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
    
    ВыделенныеСтроки = ДополнитьДоПолногоНабора();
    
    ПродажиКлиент.ОтменитьВыделенныеСтроки(
    Объект.Комплектующие,
    ВыделенныеСтроки,
    ПричинаОтмены,
    СтруктураДействий);
    РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
    
    ПродажиКлиент.ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены);
    
    АнализКомплекта();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОтвязатьОтНабора = Ложь;
	
	Отбор = Новый Структура("Отменено", Ложь);
	ОтборОтменено = Новый Структура("Отменено", Истина);
	Если Объект.КоличествоНаборов = 0 И Объект.Комплектующие.НайтиСтроки(Отбор).Количество() > 0 Тогда
		
		Если ВариантРасчетаЦеныНабора = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих") Тогда
			
			ТекстВопроса = НСтр("ru='Основная комплектующая набора не найдена. Отвязать все комплектующие от набора?';uk='Основну комплектуючу набору не знайдено. Відв''язати всі комплектуючі від набору?'");
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("ОтвязатьОтНабора", НСтр("ru='Отвязать';uk='Відв''язати'"));
			СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
			
			ВозвращаемоеЗначение = Неопределено;

			
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершитьРедактированиеЗавершение", ЭтотОбъект, Новый Структура("ОтборОтменено", ОтборОтменено)), ТекстВопроса, СписокКнопок,,"ОтвязатьОтНабора");
            Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Объект.КоличествоНаборов = 0 И Объект.Комплектующие.Количество() = Объект.Комплектующие.НайтиСтроки(ОтборОтменено).Количество() Тогда
		//Все строки будет перенесены в отмененном виде
	КонецЕсли;
	
	ЗавершитьРедактированиеФрагмент(ОтвязатьОтНабора);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтборОтменено = ДополнительныеПараметры.ОтборОтменено;
    
    
    ВозвращаемоеЗначение = РезультатВопроса;
    Если ВозвращаемоеЗначение = "ОтвязатьОтНабора" Тогда
        ОтвязатьОтНабора = Истина;
    Иначе
        Возврат;
    КонецЕсли;
    
    
    ЗавершитьРедактированиеФрагмент(ОтвязатьОтНабора);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеФрагмент(Знач ОтвязатьОтНабора)
    
    Перем ПараметрЗакрытия;
    
    ПараметрЗакрытия = Новый Структура;
    ПараметрЗакрытия.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище(ОтвязатьОтНабора));
    ПараметрЗакрытия.Вставить("ФормаВладелец", ЭтаФорма.ВладелецФормы.УникальныйИдентификатор);
    ПараметрЗакрытия.Вставить("ИмяТЧ", ИмяТЧ);
    
    Оповестить(
    "Закрытие_РедактированиеКомплекта",
    ПараметрЗакрытия,
    ЭтаФорма);
    
    Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РедактированиеНабора.Форма.Команда.ОткрытьПодбор");
	
	ПараметрЗаголовок = НСтр("ru='Подбор товаров набора';uk='Підбір товарів набору'");
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Ложь);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Ложь);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Ложь);
	
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Не ВариантРасчетаЦеныНабора = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих"));
		ПараметрыФормы.Вставить("Валюта",          Объект.Валюта);
		Если ИспользоватьСоглашенияСКлиентами И Объект.Соглашение <> Неопределено Тогда
			ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
		Иначе
			ПараметрыФормы.Вставить("Соглашение", ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка"));
		КонецЕсли;
		ПараметрыФормы.Вставить("Дата",            Объект.Дата);
		ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Иначе
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Склад",                           Объект.Склад);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", СкрыватьКомандуОстаткиНаСкладах);
	
	ПараметрыФормы.Вставить("Документ ",               ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка"));
	ПараметрыФормы.Вставить("Заголовок",               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Комплектующие",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДубликатыЗависимыхРеквизитов()
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Комплектующие, ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Функция РезультатАнализаНабора(ТолькоАктивные = Истина)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Количество КАК Количество
	|ПОМЕСТИТЬ СоставНабора
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ВЫБОР КОГДА ВариантыКомплектацииНоменклатурыТовары.Ссылка.НоменклатураОсновногоКомпонента = ВариантыКомплектацииНоменклатурыТовары.Номенклатура
	|		И ВариантыКомплектацииНоменклатурыТовары.Ссылка.ХарактеристикаОсновногоКомпонента = ВариантыКомплектацииНоменклатурыТовары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПоУмолчанию,
	|	0 КАК Количество
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантыКомплектацииНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА ВариантыКомплектацииНоменклатурыТовары.Ссылка.НоменклатураОсновногоКомпонента = ВариантыКомплектацииНоменклатурыТовары.Номенклатура
	|		И ВариантыКомплектацииНоменклатурыТовары.Ссылка.ХарактеристикаОсновногоКомпонента = ВариантыКомплектацииНоменклатурыТовары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Ложь,
	|	0,
	|	Таблица.Количество
	|ИЗ
	|	СоставНабора КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0
	|				ТОГДА Ложь
	|			ИНАЧЕ Истина
	|		КОНЕЦ) КАК ЕстьДополнительныеТовары,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0 И Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1, 0) КАК КоэффициентОсновнаяКомплектующая,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) КАК КоэффициентМаксимум,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК КоэффициентМинимум
	|ИЗ
	|	Результат КАК Результат
	|");
	
	Запрос.УстановитьПараметр("ВариантыКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
	
	Если ТолькоАктивные Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Отменено", Ложь);
		Комплектующие = Объект.Комплектующие.Выгрузить(Отбор);
	Иначе
		Комплектующие = Объект.Комплектующие.Выгрузить();
	КонецЕсли;
	Комплектующие.Свернуть("Номенклатура, Характеристика", "Количество");
	Запрос.УстановитьПараметр("Таблица", Комплектующие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервере
Процедура АнализКомплекта(ИзменениеЦен = Ложь)
	
	ПравоПодборМногооборотнойТары = ПравоДоступа("Просмотр", Метаданные.Обработки.ПодборМногооборотнойТары);
	
	ЦенаРассчитываетсяИзЦенКомплектующих = (ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих);
	
	Элементы.Комплектующие.ИзменятьСоставСтрок                    = ЦенаРассчитываетсяИзЦенКомплектующих И Не ЗапретРедактированияСоставаНабора;
	Элементы.КомплектующиеНоменклатура.ТолькоПросмотр             = Не ЦенаРассчитываетсяИзЦенКомплектующих ИЛИ ЗапретРедактированияСоставаНабора;
	Элементы.КомплектующиеХарактеристика.ТолькоПросмотр           = Не ЦенаРассчитываетсяИзЦенКомплектующих ИЛИ ЗапретРедактированияСоставаНабора;
	Элементы.ГруппаКорзинаУпаковкаЕдиницаИзмерения.ТолькоПросмотр = Не ЦенаРассчитываетсяИзЦенКомплектующих ИЛИ ЗапретРедактированияСоставаНабора;
	Элементы.КомплектующиеКоличествоУпаковок.ТолькоПросмотр       = Не ЦенаРассчитываетсяИзЦенКомплектующих ИЛИ ЗапретРедактированияСоставаНабора;
	Элементы.КомплектующиеВидЦены.ТолькоПросмотр                  = Не ЦенаРассчитываетсяИзЦенКомплектующих ИЛИ ЗапретРедактированияСоставаНабора;
	Элементы.КомплектующиеЦена.ТолькоПросмотр                     = Не ЦенаРассчитываетсяИзЦенКомплектующих ИЛИ ЗапретРедактированияСоставаНабора;
	Элементы.КомплектующиеСумма.ТолькоПросмотр                    = Не ЦенаРассчитываетсяИзЦенКомплектующих ИЛИ ЗапретРедактированияСоставаНабора;
	Элементы.КомплектующиеСтавкаНДС.ТолькоПросмотр                = Не ЦенаРассчитываетсяИзЦенКомплектующих ИЛИ ЗапретРедактированияСоставаНабора;
	
	Элементы.ГруппаТоварыЦены.Видимость                          = ЦенаРассчитываетсяИзЦенКомплектующих И НЕ ЗапретРедактированияЦены;
	Элементы.КомплектующиеОткрытьПодбор.Видимость                = ЦенаРассчитываетсяИзЦенКомплектующих И Не ЗапретРедактированияСоставаНабора;
	Элементы.КомплектующиеДополнитьМногооборотнойТарой.Видимость = ЦенаРассчитываетсяИзЦенКомплектующих 
	                                                               И Не ЗапретРедактированияСоставаНабора
	                                                               И ПравоПодборМногооборотнойТары;
	
	СтандартныйНабор = Ложь;
	Выборка = РезультатАнализаНабора();
	Если Выборка.Следующий() Тогда
		
		СтандартныйНабор = (Выборка.КоэффициентМинимум = Выборка.КоэффициентМаксимум) И Не Выборка.ЕстьДополнительныеТовары;
		
		Объект.КоличествоНаборов = Выборка.КоэффициентОсновнаяКомплектующая;
		
		Если НЕ СтандартныйНабор Тогда
			Элементы.ГруппаНаборИзменен.ТекущаяСтраница = Элементы.ГруппаНаборИзменен.ПодчиненныеЭлементы.СтраницаОтображается;
		Иначе
			Элементы.ГруппаНаборИзменен.ТекущаяСтраница = Элементы.ГруппаНаборИзменен.ПодчиненныеЭлементы.СтраницаНеОтображается;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменениеЦен ИЛИ ЦенаРассчитываетсяИзЦенКомплектующих Тогда
		
		Если ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		 ИЛИ ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам Тогда
			
			КоличествоОтмененныхСтрок = 0;
			
			ЦенаЗаКомплект = 0;
			ВидЦеныКомплекта = Неопределено;
			ИспользоватьВидЦены = 1;
			Для каждого СтрокаТовара Из Объект.Комплектующие Цикл
				
				Если СтрокаТовара.Отменено Тогда
					КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
				КонецЕсли;
				
				Если ВидЦеныКомплекта = Неопределено Тогда
					ВидЦеныКомплекта = СтрокаТовара.ВидЦены;
					Если Не ЗначениеЗаполнено(ВидЦеныКомплекта) Тогда
						ИспользоватьВидЦены = 0;
					КонецЕсли;
				КонецЕсли;
				Если ИспользоватьВидЦены = 1 И ВидЦеныКомплекта <> СтрокаТовара.ВидЦены Тогда
					ИспользоватьВидЦены = 0;
				КонецЕсли;
				
				ЦенаЗаКомплект = ЦенаЗаКомплект + СтрокаТовара.Сумма + СтрокаТовара.СуммаРучнойСкидки + СтрокаТовара.СуммаАвтоматическойСкидки;
				
			КонецЦикла;
			
			Если КоличествоОтмененныхСтрок = Объект.Комплектующие.Количество() Тогда
				АнализОтмененногоНабора = РезультатАнализаНабора(Ложь);
				Если АнализОтмененногоНабора.Следующий() И АнализОтмененногоНабора.КоэффициентОсновнаяКомплектующая <> 0 Тогда
					Объект.Цена = ЦенаЗаКомплект / АнализОтмененногоНабора.КоэффициентОсновнаяКомплектующая;
				Иначе
					Объект.Цена = 0;
				КонецЕсли;
			Иначе
				Если Объект.КоличествоНаборов <> 0 Тогда
					Объект.Цена = ЦенаЗаКомплект / Объект.КоличествоНаборов;
				Иначе
					Объект.Цена = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользоватьВидЦены = 1 Тогда
				Объект.ВидЦены = ВидЦеныКомплекта;
			КонецЕсли;
			
			Элементы.ПроизвольнаяЦенаЗаКомплект.Доступность = (ИспользоватьВидЦены = 0);
			Элементы.ВидЦеныКомплекта.Доступность           = (ИспользоватьВидЦены = 1);
			
		ИначеЕсли ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
			
			КоличествоОтмененныхСтрок = 0;
			
			ЦенаЗаКомплект = 0;
			ЦенаЗаКомплектСОтмененнымиСтроками = 0;
			Для каждого СтрокаТовара Из Объект.Комплектующие Цикл
				
				Если СтрокаТовара.Отменено Тогда
					КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
				КонецЕсли;
				
				ЦенаЗаКомплектСОтмененнымиСтроками = ЦенаЗаКомплектСОтмененнымиСтроками + СтрокаТовара.Сумма + СтрокаТовара.СуммаРучнойСкидки + СтрокаТовара.СуммаАвтоматическойСкидки;
				
				Если СтрокаТовара.Отменено Тогда
					Продолжить;
				КонецЕсли;
				
				ЦенаЗаКомплект = ЦенаЗаКомплект + СтрокаТовара.Сумма + СтрокаТовара.СуммаРучнойСкидки + СтрокаТовара.СуммаАвтоматическойСкидки;
				
			КонецЦикла;
			
			Если КоличествоОтмененныхСтрок = Объект.Комплектующие.Количество() Тогда
				АнализОтмененногоНабора = РезультатАнализаНабора(Ложь);
				Если АнализОтмененногоНабора.Следующий() И АнализОтмененногоНабора.КоэффициентОсновнаяКомплектующая <> 0 Тогда
					Объект.Цена = ЦенаЗаКомплектСОтмененнымиСтроками / АнализОтмененногоНабора.КоэффициентОсновнаяКомплектующая;
				Иначе
					Объект.Цена = ЦенаЗаКомплектСОтмененнымиСтроками;
				КонецЕсли;
			Иначе
				Если Объект.КоличествоНаборов <> 0 Тогда
					Объект.Цена = ЦенаЗаКомплект / Объект.КоличествоНаборов;
				Иначе
					Объект.Цена = ЦенаЗаКомплект;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ИспользоватьВидЦены = 1 Тогда
			ВидЦеныКомплектаПриИзмененииНаСервере();
		Иначе
			ПроизвольнаяЦенаЗаКомплектПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Комплектующие,ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказа(Форма)
	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Комплектующие;

	Форма.СуммаЗаказано     = КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаНДСЗаказано  = КоллекцияТовары.Итог("СуммаНДС") - КоллекцияТовары.Итог("СуммаНДСОтменено");
	Форма.СуммаАвтоСкидки   = КоллекцияТовары.Итог("СуммаАвтоматическойСкидки") - КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиОтменено");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидки") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтменено");
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаОтменено     = КоллекцияТовары.Итог("СуммаСНДСОтменено");
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтменено") = КоллекцияТовары.Итог("СуммаСНДС") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = КоллекцияТовары.Итог("Сумма") - КоллекцияТовары.Итог("СуммаОтменено");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	// Выбор странцицы отображения НДС
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда	
		
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
		
	Иначе
		
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЦеныКомплектующих(ВидЦены, Цена)
	
	Комплектующие = Объект.Комплектующие.Выгрузить();
	ИспользоватьОтбор = Ложь;
	Отбор = Новый Структура;
	Если Комплектующие.Колонки.Найти("Отменено") <> Неопределено Тогда
		ИспользоватьОтбор = Истина;
		Отбор.Вставить("Отменено", Ложь);
	КонецЕсли;
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Или Объект.Соглашение = Неопределено Тогда
		ПараметрыЗаполнения = Новый Структура( // Параметры заполнения
					"Дата, Валюта, ВидЦены, ПоляЗаполнения",
					Объект.Дата,
					Объект.Валюта,
					Объект.ВидЦены,
					"Цена");
	Иначе
		ПараметрыЗаполнения = Новый Структура( // Параметры заполнения
					"Дата, Валюта, Соглашение, ПоляЗаполнения",
					Объект.Дата,
					Объект.Валюта,
					Объект.Соглашение,
					"Цена");
	КонецЕсли;
	
	Если ИспользоватьОтбор Тогда
		КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(
			Объект.Комплектующие.Выгрузить(Отбор),
			ПараметрыЗаполнения);
	Иначе
		КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(
			Объект.Комплектующие.Выгрузить(),
			ПараметрыЗаполнения);
	КонецЕсли;
	
	ОбщаяСтоимость = 0;
	СуммаКРаспределению = Цена * Объект.КоличествоНаборов;
	
	СлужебнаяТЧ = Новый ТаблицаЗначений;
	СлужебнаяТЧ.Колонки.Добавить("СтрокаТЧ");
	СлужебнаяТЧ.Колонки.Добавить("Количество");
	СлужебнаяТЧ.Колонки.Добавить("Стоимость");
	Для Каждого ТекущаяСтрока Из Объект.Комплектующие Цикл
		
		Если ТекущаяСтрока.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		Стоимость = КоэффициентыПропорциональностиРасчетаЦенНаборов.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки").Цена;
		Количество = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "КоличествоУпаковок"), ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
		
		НоваяСтрока = СлужебнаяТЧ.Добавить();
		НоваяСтрока.СтрокаТЧ = ТекущаяСтрока;
		НоваяСтрока.Стоимость = Стоимость;
		НоваяСтрока.Количество = Количество;
		
		ОбщаяСтоимость = ОбщаяСтоимость + Стоимость;
		
	КонецЦикла;
	СлужебнаяТЧ.Сортировать("Количество УБЫВ");
	
	НомерСтроки = 0;
	КоличествоСтрок = СлужебнаяТЧ.Количество();
	Для Каждого СтрокаСлужебнойТЧ Из СлужебнаяТЧ Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ТекущаяСтрока = СтрокаСлужебнойТЧ.СтрокаТЧ;
		Стоимость = СтрокаСлужебнойТЧ.Стоимость;
		Количество = СтрокаСлужебнойТЧ.Количество;
		
		ТекущаяСтрока.ВидЦены = ВидЦены;
		Если Количество <> 0 И ОбщаяСтоимость <> 0 Тогда
			ТекущаяСтрока.Цена = Окр(((Стоимость / ОбщаяСтоимость) * СуммаКРаспределению) / Количество, 2);
		Иначе
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
		
		ОбщаяСтоимость = ОбщаяСтоимость - Стоимость;
		СуммаКРаспределению = СуммаКРаспределению - ТекущаяСтрока.Цена * Количество;
		
		Погрешность = 0;
		Если НомерСтроки = КоличествоСтрок Тогда
			Погрешность = СуммаКРаспределению;
		КонецЕсли;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроизвольнаяЦенаЗаКомплектПриИзмененииНаСервере()
	
	РассчитатьЦеныКомплектующих(Справочники.ВидыЦен.ПустаяСсылка(), Объект.Цена);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенНаСервере(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Комплектующие.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Комплектующие.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Комплектующие,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			"Цена, ВидЦены"
		),
		СтруктураДействий);
		
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Комплектующие", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Комплектующие", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбновитьДубликатыЗависимыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "КомплектующиеНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Комплектующие.Упаковка");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Комплектующие.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "КомплектующиеХарактеристика",
																		     "Объект.Комплектующие.ХарактеристикиИспользуются");

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма, 
									                     "КомплектующиеВидЦены", 
                                                         "Объект.Комплектующие.ВидЦены");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеВидЦены.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеПроцентАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСуммаАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеПроцентРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСуммаРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСумма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСуммаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСуммаСНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеНоменклатураКод.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеНоменклатураАртикул.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеНоменклатураТипНоменклатуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Комплектующие.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеПричинаОтмены.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Комплектующие.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Комплектующие.ПричинаОтмены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеПроцентАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСуммаАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеПроцентРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеСуммаРучнойСкидки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Комплектующие.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КомплектующиеПричинаОтмены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Комплектующие.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Ценообразование.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма, 
														   "КомплектующиеСтавкаНДС", 
														   "КомплектующиеСуммаНДС", 
														   "КомплектующиеСуммаСНДС");
	
	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "КомплектующиеСуммаСНДС");
	
КонецПроцедуры

&НаСервере
Функция АдресВоВременномХранилище(ОтвязатьОтНабора)
	
	Данные = Новый Структура;
	Данные.Вставить("НоменклатураНабора",   Объект.НоменклатураНабора);
	Данные.Вставить("ХарактеристикаНабора", Объект.ХарактеристикаНабора);
	Данные.Вставить("ДокументРеализации",   Объект.ДокументРеализации);
	Данные.Вставить("Комплектующие",        Объект.Комплектующие.Выгрузить());
	Данные.Вставить("ИмяТЧ",                ИмяТЧ);
	Данные.Вставить("ОтвязатьОтНабора",     ОтвязатьОтНабора);
	
	Возврат ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаКлиенте
Процедура АнализКомплектаКлиент()
	
	АнализКомплекта();
	
КонецПроцедуры

&НаСервере
Функция ДополнитьДоПолногоНабора()
	
	ТабличнаяЧасть = Объект.Комплектующие;
	ВыделенныеСтроки = Элементы.Комплектующие.ВыделенныеСтроки;
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(ТабличнаяЧасть, МассивСтрок);
	
	Результат = Новый Массив;
	Для Каждого СтрокаТЧ Из МассивСтрок Цикл
		Результат.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Комплектующие", Истина, Истина);
	ОбновитьДубликатыЗависимыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ВидЦеныКомплектаПриИзмененииНаСервере()
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("Номенклатура", Объект.НоменклатураНабора);
	ПараметрыНоменклатуры.Вставить("Характеристика", Объект.ХарактеристикаНабора);
	ПараметрыНоменклатуры.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ПараметрыНоменклатуры.Вставить("Валюта", Объект.Валюта);
	ПараметрыНоменклатуры.Вставить("Дата", Объект.Дата);
	ПараметрыНоменклатуры.Вставить("ВидЦены", Объект.ВидЦены);
	Цена = ПродажиСервер.ПолучитьЦенуПоОтбору(ПараметрыНоменклатуры);
	
	РассчитатьЦеныКомплектующих(Объект.ВидЦены, Цена);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныПоСоглашениюНаСервере()
	
	Если Не ИспользоватьСоглашенияСКлиентами Или Объект.Соглашение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Комплектующие.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Комплектующие.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Комплектующие,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			"Цена, ВидЦены"
		),
		СтруктураДействий);

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Комплектующие.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, 
			"Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СуммаРучнойСкидки");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			Если КонтролироватьАссортимент Тогда
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		КонецЕсли;
	Иначе
		Если КонтролироватьАссортимент Тогда
			СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	КонецЕсли;
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Комплектующие",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
		
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	АнализКомплекта();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "Поступления");
	
	РаспоряженияНаПоступление.ТекстЗапроса = ТекстЗапросаРаспоряженияНаПоступление();
	
	ЗаполнитьСкладПоУмолчанию();
	
	ФильтрЗаданий = "Невыполненные";
	ФильтрОрдеров = "КПриемке";
	ФильтрРаспоряжений = "";
	
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Неопределено);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления", Неопределено);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("МассивГруппСкладов", Новый Массив);
	
	УстановитьПараметрыИменованияРаспоряженийНаПоступление();

	ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Неопределено);
	ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("Распоряжение", Неопределено);
	
	ПулНоменклатурыРазмещение.Параметры.УстановитьЗначениеПараметра("ЗонаПриемки", Неопределено);
	
	УстановитьЗаголовкиКолонокВесОбъем();
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Склад", Склад) Тогда
			
			МассивГруппСкладов = ЗначениеНастроекПовтИсп.ИерархияГрупп(Склад);
			МассивГруппСкладов.Добавить(Склад);
			МассивГруппСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
			РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("МассивГруппСкладов", МассивГруппСкладов);
			РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
			
			ФильтрРаспоряжений = "КПриемке";
			
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора.Свойство("ЗонаПриемки", ЗонаПриемки) Тогда
			ПулНоменклатурыРазмещение.Параметры.УстановитьЗначениеПараметра("ЗонаПриемки", ЗонаПриемки);
		КонецЕсли;
		
	КонецЕсли;
	
	СкладПомещениеПриИзмененииСервер();
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПоступлениеОрдераВРаботеСоздатьНаОсновании);
	// Конец ВводНаОсновании
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление());

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ИзменениеСписка_ОрдераВРаботе" 
		Или ИмяСобытия = "ИзменениеСписка_ЗаданияВРаботе"
		Или ИмяСобытия = "Запись_СоглашенияСПоставщиками" 
		Или ИмяСобытия = "Запись_ЗаказПоставщику"
		Или ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
		Или ИмяСобытия = "Запись_ПеремещениеТоваров"
		Или ИмяСобытия = "Запись_ПоступлениеТоваровУслуг"
		Или ИмяСобытия = "Запись_СборкаТоваров"	Тогда
		ОбработкаОповещенияСервер(ИмяСобытия,РаспоряжениеНаПоступление());
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Номенклатура"
		Или ИмяСобытия = "Запись_УпаковкиНоменклатуры"
		Или ИмяСобытия = "Запись_ПравилаРазмещенияТоваровВЯчейках" Тогда
		Элементы.ПулНоменклатурыРазмещение.Обновить();
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПолучатьСкладИзНастроек =
		Склад = Настройки.Получить("Склад")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если ПолучатьСкладИзНастроек Тогда
		Если СтруктураБыстрогоОтбора = Неопределено Тогда
			Склад 		= Настройки.Получить("Склад");
			Помещение 	= Настройки.Получить("Помещение");
			ЗонаПриемки = Настройки.Получить("ЗонаПриемки");
		Иначе
			
			Если Не СтруктураБыстрогоОтбора.Свойство("Склад") Тогда
				Склад = Настройки.Получить("Склад");
			КонецЕсли;
			
			Если Не СтруктураБыстрогоОтбора.Свойство("Помещение") Тогда
				Помещение = Настройки.Получить("Помещение");
			КонецЕсли;
			
			Если Не СтруктураБыстрогоОтбора.Свойство("ЗонаПриемки") Тогда
				ЗонаПриемки = Настройки.Получить("ЗонаПриемки");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Эти настройки мы уже загрузили
	Настройки.Удалить("Склад");
	Настройки.Удалить("Помещение");
	Настройки.Удалить("ЗонаПриемки");
		
	СкладПомещениеПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗонаПриемкиПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.УправлениеПоступлением.Форма.Элемент.Склад.ПриИзменении");
	
	СкладПомещениеПриИзмененииСервер();
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление());
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрРаспоряженийПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление());
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОрдеровПриИзменении(Элемент)
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление());
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗаданийПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаПоступление Тогда
		ГруппаСтраницыПриСменеСтраницыСервер();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспоряженияНаПоступление

&НаКлиенте
Процедура РаспоряженияНаПоступлениеПриАктивизацииСтроки(Элемент)
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление());
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаПоступлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Распоряжение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПулНомекнлатурыРазмещение

&НаКлиенте
Процедура ПулНоменклатурыРазмещениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПулНоменклатурыРазмещение.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если Поле = Элементы.ПулНоменклатурыРазмещение.ПодчиненныеЭлементы.ГруппаКолонокПулНоменклатурыРазмещениеТовар.ПодчиненныеЭлементы.ПулНоменклатурыРазмещениеНоменклатура Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.Номенклатура);
		ИначеЕсли Поле = Элементы.ПулНоменклатурыРазмещение.ПодчиненныеЭлементы.ПулНоменклатурыРазмещениеУпаковка Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.Упаковка);
		ИначеЕсли Поле = Элементы.ПулНоменклатурыРазмещение.ПодчиненныеЭлементы.ПулНоменклатурыРазмещениеСкладскаяГруппаНоменклатуры Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.СкладскаяГруппаНоменклатуры);
		ИначеЕсли Поле = Элементы.ПулНоменклатурыРазмещение.ПодчиненныеЭлементы.ПулНоменклатурыРазмещениеСкладскаяГруппаУпаковок Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.СкладскаяГруппаУпаковок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПулНомекнлатурыПоступление

&НаКлиенте
Процедура ПулНоменклатурыПоступлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПулНоменклатурыПоступление.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаданияВРаботе

&НаКлиенте
Процедура ЗаданияВРаботеПриИзменении(Элемент)
	Оповестить("ИзменениеСписка_ЗаданияВРаботе", Новый Структура);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОрдераВРаботе

&НаКлиенте
Процедура ОрдераВРаботеПриИзменении(Элемент)
	Оповестить("ИзменениеСписка_ОрдераВРаботе", Новый Структура);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.ОрдераВРаботе);
	
КонецПроцедуры
// Конец ВводНаОсновании

&НаКлиенте
Процедура СоздатьЗадания(Команда)
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		ТекстСообщения = НСтр("ru='Перед выполнением операции необходимо выбрать склад.';uk='Перед виконанням операції необхідно вибрати склад.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Помещение",Помещение);
		Структура.Вставить("Склад",Склад);
		
		ФормаПараметры = Новый Структура("Заголовок, Операция, ПараметрОбъект", "УправлениеПоступлением", "ФормированиеЗаданий",Структура);
		Ответ = Неопределено;

		ОткрытьФорму("Документ.ОтборРазмещениеТоваров.Форма.ФормаНастроек",ФормаПараметры,ЭтаФорма,,,, Новый ОписаниеОповещения("СоздатьЗаданияЗавершение", ЭтотОбъект, Новый Структура("Структура", Структура)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.УправлениеПоступлением.Форма.Оповещение.СоздатьЗаданияЗавершение");
	
    Структура = ДополнительныеПараметры.Структура;
    
    
    Ответ = Результат;
    
    ВыделенныеСтроки = Новый Массив;
    
    Если ПоВсейНоменклатуре <> 0 Тогда
        
        Для Каждого СтрМас из Элементы.ПулНоменклатурыРазмещение.ВыделенныеСтроки Цикл
            ДанныеСтроки = Элементы.ПулНоменклатурыРазмещение.ДанныеСтроки(СтрМас);
            
            СтрТабл = Новый Структура;
            СтрТабл.Вставить("Номенклатура",ДанныеСтроки.Номенклатура);
            СтрТабл.Вставить("Характеристика",ДанныеСтроки.Характеристика);
            СтрТабл.Вставить("Серия",ДанныеСтроки.Серия);
            СтрТабл.Вставить("Назначение",ДанныеСтроки.Назначение);
            
            ВыделенныеСтроки.Добавить(СтрТабл);
            
        КонецЦикла;
    КонецЕсли;
    
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        СоздатьЗаданияСервер(ВыделенныеСтроки);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВзятьЗаданияВРаботу(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВзятьЗаданияВРаботуЗавершение", ЭтотОбъект);
	
	СкладыКлиент.ВзятьЗаданияВРаботу(ЭтаФорма, Элементы.ЗаданияВРаботе , "УправлениеПоступлением", Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьЗаданияВРаботуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьОтборыВОсновныхСписках();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадания(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗаданияЗавершение", ЭтотОбъект);
	
	СкладыКлиент.ОтметитьВыполненениеЗаданийБезОшибок(ЭтаФорма, Элементы.ЗаданияВРаботе, "ОтборРазмещение", Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаданияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьОтборыВОсновныхСписках();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдер(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.УправлениеПоступлением.Форма.Команда.СоздатьОрдер");
	
	ОчиститьСообщения();
	ТекущиеДанные = Элементы.РаспоряженияНаПоступление.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда

		Основание = Новый Структура;
		Основание.Вставить("Распоряжение",ТекущиеДанные.Распоряжение);
		Основание.Вставить("Склад", Склад);
		Основание.Вставить("Помещение", Помещение);
		Основание.Вставить("ЗонаПриемки", ЗонаПриемки);
		Основание.Вставить("ДатаПоступления", ДатаПоступления);
		ОткрытьФорму("Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента",
					Новый Структура("Основание",Основание));
				
	Иначе
			
		ТекстПредупреждения = НСтр("ru='Выберите распоряжение на поступление товаров.';uk='Виберіть розпорядження на надходження товарів.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		
  	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиПоступление(Команда)
	ОбновитьСпискиСервер("Поступление",РаспоряжениеНаПоступление());
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиРазмещение(Команда)
	ОбновитьСпискиСервер("Размещение",РаспоряжениеНаПоступление());
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоСостояниюПриемки(Команда)
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии",
			Новый Структура("Склад", Склад),
			"СостояниеПриемкиКонтекст",
			"СостояниеПриемкиКонтекст",
			Истина);

	ОткрытьФорму("Отчет.ТоварыКПоступлению.Форма",
			ПараметрыФормы,
			ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПараметрыФормы = Новый Структура("ВариантЗаполнения, СкладПриемки, ДатаПриемки", "ПоРаспоряжениямНаПриемку", Склад, ДатаПоступления);
	ОткрытьФорму("Обработка.ВыгрузкаБазыТоваровВТСД.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетокПоВыделеннымСтрокамНоменклатуры(Команда)
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
			
	МассивТовары = Новый Массив;
	
	Для каждого ИдентификаторСтрокиПула Из Элементы.ПулНоменклатурыРазмещение.ВыделенныеСтроки Цикл
		
		СтрокаПула = Элементы.ПулНоменклатурыРазмещение.ДанныеСтроки(ИдентификаторСтрокиПула);
		
		СтрокаТовар = Новый Структура;
		СтрокаТовар.Вставить("Номенклатура", СтрокаПула.Номенклатура);
		СтрокаТовар.Вставить("Характеристика", СтрокаПула.Характеристика);
		СтрокаТовар.Вставить("Количество", СтрокаПула.Разместить);
		СтрокаТовар.Вставить("Упаковка", СтрокаПула.Упаковка);
		
		МассивТовары.Добавить(СтрокаТовар);
	
	КонецЦикла; 
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Новый ФиксированныйМассив(МассивТовары));
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезультат);
		
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары",
			Новый Структура("АдресВХранилище, НазначениеШаблона", АдресХранилища, Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетокПоРаспоряжению(Команда)
	
	Если Элементы.РаспоряженияНаПоступление.ТекущиеДанные = Неопределено Тогда 
		ВызватьИсключение НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'");
	КонецЕсли; 
	
	АдресХранилища = ДанныеДляПечатиЭтикетокПоРаспоряжению(Элементы.РаспоряженияНаПоступление.ТекущиеДанные.Распоряжение);
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары",
		Новый Структура("АдресВХранилище, НазначениеШаблона", АдресХранилища, Неопределено));
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Список = Неопределено;
	
	Если Найти(Команда.Имя, "ПодменюПечать") Тогда
		Список = Элементы.ОрдераВРаботе;
	ИначеЕсли Найти(Команда.Имя, "ПеремещенияВРаботе") Тогда
		Список = Элементы.ЗаданияВРаботе;
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Список);
	 
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПулНоменклатурыРазмещениеСкладскаяГруппаНоменклатуры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПулНоменклатурыРазмещениеСкладскаяГруппаУпаковок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПулНоменклатурыРазмещение.ОшибкаВОбластиХранения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПулНоменклатурыРазмещениеУпаковка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПулНоменклатурыРазмещение.ОшибкаВУпаковке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПулНоменклатурыПоступлениеПерепоставка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПулНоменклатурыПоступление.Перепоставка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПулНоменклатурыРазмещениеНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПулНоменклатурыРазмещение.ОшибкаВНоменклатуре");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПулНоменклатурыПоступлениеНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПулНоменклатурыПоступление.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "РаспоряженияНаПоступление", "РаспоряженияНаПоступлениеРаспоряжениеДата");
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ОрдераВРаботе", "ОрдераВРаботеДата");

КонецПроцедуры

#Область ЗаполнениеИИнициализация

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	СтруктураЗаполнения = Новый Структура("Склад");
	ОбщегоНазначенияУТ.ОбработкаЗаполнения(СтруктураЗаполнения, Неопределено, Неопределено);
	Склад = СтруктураЗаполнения.Склад;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыСервер()
	
	ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Склад, Помещение, ЗонаПриемки);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОтборРазмещениеТоваров.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.ЗаданияВРаботе.ТекущаяСтрока = Ссылка;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаРазмещение;
		ПоказатьЗначение(Неопределено, Ссылка);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура СоздатьЗаданияСервер(ВыделенныеСтроки)
	
	ТаблицаВыделеннойНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Назначение",Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	Если ПоВсейНоменклатуре <> 0 Тогда
		Для Каждого СтрМас из ВыделенныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(ТаблицаВыделеннойНоменклатуры.Добавить(), СтрМас);
			
		КонецЦикла;
	КонецЕсли;
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.Серия КАК Серия
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	&ТаблицаВыделеннойНоменклатуры КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|	ТоварыВЯчейкахОстатки.Серия,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток - 0.5 КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток
	|	КОНЕЦ КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			(&ПоВсейНоменклатуре
	|				ИЛИ (Номенклатура, Характеристика, Серия, Назначение) В
	|					(ВЫБРАТЬ
	|						Таблица.Номенклатура КАК Номенклатура,
	|						Таблица.Характеристика КАК Характеристика,
	|						Таблица.Серия КАК Серия,
	|				        Таблица.Назначение КАК Назначение
	|					ИЗ
	|						ТаблицаНоменклатурыДляЗапроса КАК Таблица))
	|				И Ячейка = &ЗоныПриемки) КАК ТоварыВЯчейкахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетСерий
	|		ПО ТоварыВЯчейкахОстатки.Номенклатура.ВидНоменклатуры = ПолитикиУчетСерий.Ссылка
	|			И (ПолитикиУчетСерий.Склад = &Склад)
	|ГДЕ
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыДляЗапроса";

	Запрос.УстановитьПараметр("ЗоныПриемки", ЗонаПриемки);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТаблицаВыделеннойНоменклатуры", ТаблицаВыделеннойНоменклатуры);
	Запрос.УстановитьПараметр("ПоВсейНоменклатуре", ПоВсейНоменклатуре = 0);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[1].Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Количество = 0 Тогда
		ТекстСообщения = НСтр("ru='Задания на размещение не сформированы: все товары или уже размещены, или по ним уже есть задания на размещение.';uk='Завдання на розміщення не сформовані: всі товари або вже розміщені, або по них вже є завдання на розміщення.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОшибкаПроверки = Ложь;
	
	Если НастройкаФормированияПоРабочимУчасткам = "ПоОдномуРабочемуУчастку" Тогда
 		СтруктураВозврата = СкладыСервер.РазместитьТоварВЯчейках(Менеджер, Склад, Помещение, РабочийУчасток, ЗонаПриемки, ОшибкаПроверки);
	Иначе
		СтруктураВозврата = СкладыСервер.РазместитьТоварВЯчейках(Менеджер, Склад, Помещение, Справочники.РабочиеУчастки.ПустаяСсылка(), ЗонаПриемки, ОшибкаПроверки);
	конецЕсли;
	
	Если ОшибкаПроверки Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураВозврата.ТаблицаРезультатов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Задания на размещение не сформированы: не удалось разместить номенклатуру согласно правилам размещения.';uk='Завдання на розміщення не сформовані: не вдалося розмістити номенклатуру згідно з правилами розміщення.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;	
	КонецЕсли;
	     
	Если НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда
		
		ЗапросУчастки = Новый Запрос;
		ЗапросУчастки.Текст = "ВЫБРАТЬ
		|	РабочиеУчастки.Ссылка КАК РабочийУчасток,
		|	РабочиеУчастки.ОграничиватьПоВесу,
		|	РабочиеУчастки.ОграничениеПоВесу,
		|	РабочиеУчастки.ОграничиватьПоОбъему,
		|	РабочиеУчастки.ОграничениеПоОбъему
		|ИЗ
		|	Справочник.РабочиеУчастки КАК РабочиеУчастки
		|ГДЕ
		|	РабочиеУчастки.Владелец = &Склад
		|	И РабочиеУчастки.Помещение = &Помещение";
		
		ЗапросУчастки.УстановитьПараметр("Склад",Склад);
		ЗапросУчастки.УстановитьПараметр("Помещение",Помещение);
		
		ТаблицаРабочихУчастков = ЗапросУчастки.Выполнить().Выгрузить();
		
		НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
		НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
		НоваяСтрока.ОграничиватьПоОбъему = Ложь;
		НоваяСтрока.ОграничиватьПоВесу = Ложь;
		
	Иначе	
		ТаблицаРабочихУчастков = Новый ТаблицаЗначений;
		ТаблицаРабочихУчастков.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
		НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
		Если НастройкаФормированияПоРабочимУчасткам = "БезРазбиенияПоРабочимУчасткам" Тогда
			НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
		Иначе
			НоваяСтрока.РабочийУчасток = РабочийУчасток;
		КонецЕсли;                       
		
	КонецЕсли;
	
	НевозможныйНабор = 9999999999;
	
	Для Каждого СтрокаРабочийУчасток Из ТаблицаРабочихУчастков Цикл
		
		Если НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда						
			МаксимальныйОбъем = ?(СтрокаРабочийУчасток.ОграничиватьПоОбъему, СтрокаРабочийУчасток.ОграничениеПоОбъему, НевозможныйНабор);
			МаксимальныйВес = ?(СтрокаРабочийУчасток.ОграничиватьПоВесу, СтрокаРабочийУчасток.ОграничениеПоВесу, НевозможныйНабор);						
		Иначе
			МаксимальныйОбъем = ?(ОграничиватьПоОбъему, ОграничениеПоОбъему, НевозможныйНабор);
			МаксимальныйВес = ?(ОграничиватьПоВесу, ОграничениеПоВесу, НевозможныйНабор);						
		КонецЕсли;
			
		Если НастройкаФормированияПоРабочимУчасткам <> "БезРазбиенияПоРабочимУчасткам" Тогда			
			ТаблицаРезультата = СтруктураВозврата.ТаблицаРезультатов.НайтиСтроки(Новый Структура("РабочийУчасток",СтрокаРабочийУчасток.РабочийУчасток));
			
			Если ТаблицаРезультата.Количество() = 0
				И ТаблицаРабочихУчастков.Количество() = 1 Тогда
				ТекстСообщения = НСтр("ru='Нет товаров для размещения по рабочему участку %РабочийУчасток%';uk='Немає товарів для розміщення за робочою ділянкою %РабочийУчасток%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения," %РабочийУчасток%", СтрокаРабочийУчасток.РабочийУчасток);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Иначе			
			ТаблицаРезультата = СтруктураВозврата.ТаблицаРезультатов;		
		КонецЕсли;
		
		//Разбиение по весу и объему. Соглашения:
		//	- в одну ячейку идет один человек (т.е. строка результата размещения не разбивается)
		//  - если вес (объем) одной строки больше, чем ограничения - создается отдельный документ,
		//		вес (объем) которого будет больше, чем максимальный
		//	- разбиение по весу (объему) не оптимально, т.к. более приоритетно сохранения порядка обхода
		//			(лучше пусть будет больше заданий, но каждое можно быстрее обойти)
		
		ОбъемДокумента    = 0;
		ВесДокумента	  = 0;
		ТекущийДокумент = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
		
		КоличествоОбработано = 0;
		
		Для Каждого СтрТабл Из ТаблицаРезультата Цикл
			
			Если СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйОбъем
				Или СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйВес Тогда
				
				ДокументОбъект = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
				
				НоваяСтрока = ДокументОбъект.ТоварыРазмещение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
				
				ЗаписатьДокумент(ДокументОбъект,СтрТабл.ОбъемУпаковки,СтрТабл.ВесУпаковки);
				КоличествоОбработано = КоличествоОбработано + 1;
			Иначе
				
				Если (ОбъемДокумента + СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйОбъем
					Или (ВесДокумента + СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйВес Тогда
					
					ЗаписатьДокумент(ТекущийДокумент,ОбъемДокумента,ВесДокумента);
					
					ОбъемДокумента    = 0;
					ВесДокумента	  = 0;
					ТекущийДокумент = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
					
				КонецЕсли;
				
				НоваяСтрока = ТекущийДокумент.ТоварыРазмещение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
				
				ОбъемДокумента    = ОбъемДокумента + СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок;
				ВесДокумента	  = ВесДокумента + СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок;
				КоличествоОбработано = КоличествоОбработано + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущийДокумент.ТоварыРазмещение.Количество() > 0 Тогда
			
			ЗаписатьДокумент(ТекущийДокумент,ОбъемДокумента,ВесДокумента);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Менеджер.Закрыть();
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаСервере
Функция НовоеЗаданиеНаРазмещение(РабочийУчасток)
	
	ДокументОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокументОбъект.Дата 				= ТекущаяДатаСеанса();
	ДокументОбъект.Статус 				= Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	ДокументОбъект.Склад 				= Склад;
	ДокументОбъект.Помещение 			= Помещение;
	ДокументОбъект.ЗонаПриемки		 	= ЗонаПриемки;
	ДокументОбъект.Ответственный 		= Пользователи.ТекущийПользователь();
	
	ДокументОбъект.РабочийУчасток 		= РабочийУчасток;
	
	ДокументОбъект.Исполнитель          = ?(НазначитьИсполнителя, Исполнитель, Справочники.Пользователи.ПустаяСсылка());
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДокумент(ДокументОбъект, Объем, Вес)
	Попытка
		ПараметрыУказаниСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ОтборРазмещениеТоваров);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект,ПараметрыУказаниСерий.Размещение);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	
	СтруктураУстанавливаемыхПараметров = Новый Структура;
	Если ЗначениеЗаполнено(Склад) Тогда
		СтруктураУстанавливаемыхПараметров.Вставить("Склад",Склад);
		СтруктураУстанавливаемыхПараметров.Вставить("Помещение",Помещение);
		
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение);
		
		Если ИспользоватьАдресноеХранение Тогда
			ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Склад, Помещение, ЗонаПриемки);
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			Элементы.ЗонаПриемки.Видимость = Истина;
		Иначе
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.ЗонаПриемки.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		СтруктураУстанавливаемыхПараметров.Вставить("Склад",Неопределено);
		СтруктураУстанавливаемыхПараметров.Вставить("Помещение",Неопределено);
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ЗонаПриемки.Видимость = Ложь;
	КонецЕсли;
	
	РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
	
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураУстанавливаемыхПараметров);
	Элементы.ОрдераВРаботеСтатус.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПриходныхОрдеров", Новый Структура("Склад", Склад));
	
	Элементы.СоздатьВозвратНепринятыхТоваров.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Новый Структура("Склад", Склад));
	
	УстановитьОтборыВОсновныхСписках();
	
	ЗаполнитьСписокВыбораФильтраОрдеров();
	
	УстановитьВидимостьПомещений();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокВесОбъем()
	ЕдиницаИзмеренияОбъема 	= Строка(Константы.ЕдиницаИзмеренияОбъема.Получить());
	ЕдиницаИзмеренияВеса 	= Строка(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	ЗаголовокЭлемента = НСтр("ru='Объем, %ЕдиницаИзмерения%';uk='Об''єм, %ЕдиницаИзмерения%'");
	ЗаголовокЭлемента = СтрЗаменить(ЗаголовокЭлемента, "%ЕдиницаИзмерения%", ЕдиницаИзмеренияОбъема); 
	Элементы.ЗаданияВРаботе.ПодчиненныеЭлементы.ПеремещенияВРаботеОбъемРазмещение.Заголовок = ЗаголовокЭлемента;
	
	ЗаголовокЭлемента = НСтр("ru='Вес (брутто), %ЕдиницаИзмерения%';uk='Вага (брутто), %ЕдиницаИзмерения%'");
	ЗаголовокЭлемента = СтрЗаменить(ЗаголовокЭлемента, "%ЕдиницаИзмерения%", ЕдиницаИзмеренияВеса); 
	Элементы.ЗаданияВРаботе.ПодчиненныеЭлементы.ПеремещенияВРаботеВесРазмещение.Заголовок   = ЗаголовокЭлемента;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВОсновныхСписках()
	ПулНоменклатурыРазмещение.Параметры.УстановитьЗначениеПараметра("ЗонаПриемки", ЗонаПриемки);
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено);
	СписокСтатусов.Добавить(Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияВРаботе, "Статус", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,ФильтрЗаданий <> "");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияВРаботе, "Проведен", Истина,,,ФильтрЗаданий <> "");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияВРаботе, "Склад", Склад, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияВРаботе, "Помещение", Помещение, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
    
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияВРаботе, "ЗонаПриемки", ЗонаПриемки,
		ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ЗонаПриемки));
    
	ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	Если ЗначениеЗаполнено(ДатаПоступления) Тогда
		ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления", КонецДня(ДатаПоступления)); 
	Иначе
		ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления", ДатаПоступления); 
	КонецЕсли;	
	
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Склад); 
	Если ЗначениеЗаполнено(ДатаПоступления) Тогда
		РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления",  КонецДня(ДатаПоступления)); 
	Иначе
		РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления", ДатаПоступления); 
	КонецЕсли;	
	МассивГруппСкладов = ЗначениеНастроекПовтИсп.ИерархияГрупп(Склад);
	МассивГруппСкладов.Добавить(Склад);
	МассивГруппСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("МассивГруппСкладов", МассивГруппСкладов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РаспоряженияНаПоступление, "Перепоставка", Ложь, ВидСравненияКомпоновкиДанных.Равно,,ФильтрРаспоряжений <> "");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПулНоменклатурыПоступление, "Перепоставка", 0, ВидСравненияКомпоновкиДанных.Равно,,ФильтрРаспоряжений <> "");
	
	Элементы.ПулНоменклатурыРазмещение.Обновить();
	Элементы.ПулНоменклатурыПоступление.Обновить();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВЗависимыхСписках(РаспоряженияНаПоступление)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияВРаботе, "ЗонаПриемки",ЗонаПриемки,
														ВидСравненияКомпоновкиДанных.ВСписке,,ЗначениеЗаполнено(ЗонаПриемки));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Ссылка.ЗонаПриемки",ЗонаПриемки,
														ВидСравненияКомпоновкиДанных.ВСписке,,ЗначениеЗаполнено(ЗонаПриемки));
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Тип", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Склад", Склад, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "ПомещениеПолучатель", Помещение, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Помещение));
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	СписокСтатусов.Добавить(Перечисления.СтатусыПриходныхОрдеров.ВРаботе);
	СписокСтатусов.Добавить(Перечисления.СтатусыПриходныхОрдеров.ТребуетсяОбработка);
	СписокСтатусов.Добавить(Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке);
	
	Если ФильтрОрдеров = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Статус",СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Ссылка",Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Проведен",Истина, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ФильтрОрдеров = "КПриемке" Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Статус",СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Ссылка",Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Проведен",Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли ФильтрОрдеров = "ПоТекущемуРаспоряжению" Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Статус",СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Проведен",Истина, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходныйОрдерНаТовары.Ссылка
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение";
		
		Запрос.УстановитьПараметр("Распоряжение", РаспоряженияНаПоступление);	
		ПриходныеОрдера = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Ссылка", ПриходныеОрдера, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);									
	КонецЕсли;
		
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаПоступление Тогда
		ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("Распоряжение", РаспоряженияНаПоступление); 
	ИначеЕсли  Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаРазмещение Тогда
		Элементы.ПулНоменклатурыРазмещение.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияСервер(ИмяСобытия,РаспоряжениеНаПоступление)
	Если ИмяСобытия = "ИзменениеСписка_ОрдераВРаботе" Тогда
		Элементы.РаспоряженияНаПоступление.Обновить();
		УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление);
		Элементы.ПулНоменклатурыРазмещение.Обновить();
	ИначеЕсли ИмяСобытия = "ИзменениеСписка_ЗаданияВРаботе" Тогда
		Элементы.ПулНоменклатурыРазмещение.Обновить();
	Иначе //запись других документов
		Элементы.РаспоряженияНаПоступление.Обновить();
		Элементы.ПулНоменклатурыПоступление.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиСервер(НаборСписков,РаспоряжениеНаПоступление)
	Если НаборСписков = "Поступление" Тогда
		Элементы.РаспоряженияНаПоступление.Обновить();
		Элементы.ОрдераВРаботе.Обновить();
		УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление);
	Иначе
		Элементы.ПулНоменклатурыРазмещение.Обновить();
		Элементы.ЗаданияВРаботе.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РаспоряжениеНаПоступление()
	
	Если Элементы.РаспоряженияНаПоступление.ТекущиеДанные <> Неопределено Тогда
		Возврат Элементы.РаспоряженияНаПоступление.ТекущиеДанные.Распоряжение;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Документ.ПоступлениеТоваровУслуг.ПустаяСсылка");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораФильтраОрдеров()
	
	// Добавим или удалим из списка выбора поля ФильтрОрдеров элемент "КПриемке"
	// в зависимости от использования статусов ордеров на выбранном складе
	
	СписокВыбора  = Элементы.ФильтрОрдеров.СписокВыбора;
	ЭлементСписка = СписокВыбора.НайтиПоЗначению("КПриемке");
	
	Если СкладыСервер.ИспользоватьСтатусыОрдеров(Склад, Истина, Ложь) Тогда
		Если ЭлементСписка = Неопределено Тогда
			ЭлементСписка = СписокВыбора.Вставить(1, "КПриемке");
		КонецЕсли;
		ЭлементСписка.Представление = НСтр("ru='К приемке';uk='До приймання'");
	Иначе
		Если ЭлементСписка <> Неопределено Тогда
			Если ФильтрОрдеров = "КПриемке" Тогда
				ФильтрОрдеров = СписокВыбора[0].Значение; // новый отбор установится позднее, при вызове УстановитьОтборыВЗависимыхСписках
			КонецЕсли;
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПомещений()
	
	ИспользоватьСкладскиеПомещения = СкладыСервер.ИспользоватьСкладскиеПомещения(Склад,ТекущаяДатаСеанса());
	Элементы.Помещение.Видимость                = ИспользоватьСкладскиеПомещения;
	Элементы.Помещение1.Видимость               = ИспользоватьСкладскиеПомещения;
	Элементы.ОрдераВРаботеПомещение.Видимость   = ИспользоватьСкладскиеПомещения;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаРаспоряженияНаПоступление()
	
	// Аналогичный запрос используется для расчета показателя текущих дел
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеРаспоряжения.Отправитель,
	|	ВсеРаспоряжения.Распоряжение,
	|	ВсеРаспоряжения.Распоряжение КАК Ссылка,
	|	ВсеРаспоряжения.Номер,
	|	ВсеРаспоряжения.Дата,
	|	ВсеРаспоряжения.ТипДокумента,
	|	ВсеРаспоряжения.Перепоставка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВсеРаспоряжения.Отправитель КАК Отправитель,
	|		ВсеРаспоряжения.Распоряжение КАК Распоряжение,
	|		ВсеРаспоряжения.Номер КАК Номер,
	|		ВсеРаспоряжения.Дата КАК Дата,
	|		ВсеРаспоряжения.ТипДокумента КАК ТипДокумента,
	|		МИНИМУМ(ВсеРаспоряжения.Перепоставка) КАК Перепоставка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СоглашенияСПоставщиками.Партнер КАК Отправитель,
	|			ВЫРАЗИТЬ(СоглашенияСПоставщиками.Номер КАК СТРОКА(11)) КАК Номер,
	|			СоглашенияСПоставщиками.Дата КАК Дата,
	|			СоглашенияСПоставщиками.Ссылка КАК Распоряжение,
	|			СоглашенияСПоставщиками.Наименование КАК ТипДокумента,
	|			ЛОЖЬ КАК Перепоставка
	|		ИЗ
	|			Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ГДЕ
	|			СоглашенияСПоставщиками.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных)
	|			И СоглашенияСПоставщиками.Склад В(&МассивГруппСкладов)
	|			И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|			И НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫБОР ТИПЗНАЧЕНИЯ(ТоварыКПоступлению.ДокументПоступления)
	|				КОГДА ТИП(Документ.ПрочееОприходованиеТоваров)
	|					ТОГДА ТоварыКПоступлению.ДокументПоступления.Подразделение
	|				КОГДА ТИП(Документ.ПеремещениеТоваров)
	|					ТОГДА ТоварыКПоступлению.ДокументПоступления.СкладОтправитель
	|				КОГДА ТИП(Документ.ЗаказНаПеремещение)
	|					ТОГДА ТоварыКПоступлению.ДокументПоступления.СкладОтправитель
	|				КОГДА ТИП(Документ.СборкаТоваров)
	|					ТОГДА ТоварыКПоступлению.ДокументПоступления.Склад
	|				КОГДА ТИП(Документ.ЗаказНаСборку)
	|					ТОГДА ТоварыКПоступлению.ДокументПоступления.Склад
	|				ИНАЧЕ ТоварыКПоступлению.ДокументПоступления.Партнер
	|			КОНЕЦ,
	|			ВЫРАЗИТЬ(ТоварыКПоступлению.ДокументПоступления.Номер КАК СТРОКА(11)),
	|			ТоварыКПоступлению.ДокументПоступления.Дата,
	|			ТоварыКПоступлению.ДокументПоступления,
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ТоварыКПоступлению.ДокументПоступления) = ТИП(Справочник.СоглашенияСПоставщиками)
	|					ТОГДА ТоварыКПоступлению.ДокументПоступления.Наименование
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				 	ТОГДА &ИмяПоступлениеТоваровУслуг
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				 	ТОГДА &ИмяВозвратТоваровОтКлиента
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
	|				 	ТОГДА &ИмяЗаказПоставщику
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|				 	ТОГДА &ИмяЗаявкаНаВозвратТоваровОтКлиента
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
	|				 	ТОГДА &ИмяПеремещениеТоваров
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.ЗаказНаСборку
	|				 	ТОГДА &ИмяЗаказНаСборку
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.ЗаказНаПеремещение
	|				 	ТОГДА &ИмяЗаказНаПеремещение
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.СборкаТоваров
	|				 	ТОГДА &ИмяСборкаТоваров
	|				КОГДА ТоварыКПоступлению.ДокументПоступления ССЫЛКА Документ.ПрочееОприходованиеТоваров
	|				 	ТОГДА &ИмяПрочееОприходованиеТоваров
	|			КОНЕЦ,
	|			ТоварыКПоступлению.Перепоставка
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТоварыКПоступлениюОстаткиНаДату.ДокументПоступления КАК ДокументПоступления,
	|				МИНИМУМ(ВЫБОР
	|						КОГДА ТоварыКПоступлениюОстаткиНаДату.КПоступлениюОстаток - ТоварыКПоступлениюОстаткиНаДату.ПринимаетсяОстаток < 0
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ) КАК Перепоставка
	|			ИЗ
	|				РегистрНакопления.ТоварыКПоступлению.Остатки(&ДатаПоступления, Склад = &Склад) КАК ТоварыКПоступлениюОстаткиНаДату
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад) КАК ТоварыКПоступлениюОстаткиТекущие
	|					ПО ТоварыКПоступлениюОстаткиНаДату.ДокументПоступления = ТоварыКПоступлениюОстаткиТекущие.ДокументПоступления
	|						И ТоварыКПоступлениюОстаткиНаДату.Номенклатура = ТоварыКПоступлениюОстаткиТекущие.Номенклатура
	|						И ТоварыКПоступлениюОстаткиНаДату.Характеристика = ТоварыКПоступлениюОстаткиТекущие.Характеристика
	|						И ТоварыКПоступлениюОстаткиНаДату.Склад = ТоварыКПоступлениюОстаткиТекущие.Склад
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТоварыКПоступлениюОстаткиНаДату.ДокументПоступления) КАК ТоварыКПоступлению) КАК ВсеРаспоряжения
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВсеРаспоряжения.Отправитель,
	|		ВсеРаспоряжения.Распоряжение,
	|		ВсеРаспоряжения.Номер,
	|		ВсеРаспоряжения.Дата,
	|		ВсеРаспоряжения.ТипДокумента) КАК ВсеРаспоряжения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыИменованияРаспоряженийНаПоступление()

	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяПоступлениеТоваровУслуг", 
		Метаданные.Документы.ПоступлениеТоваровУслуг.Синоним);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяВозвратТоваровОтКлиента", 
		Метаданные.Документы.ВозвратТоваровОтКлиента.Синоним);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяЗаказПоставщику", 
		Метаданные.Документы.ЗаказПоставщику.Синоним);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяЗаявкаНаВозвратТоваровОтКлиента", 
		Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.Синоним);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяПеремещениеТоваров", 
		Метаданные.Документы.ПеремещениеТоваров.Синоним);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяЗаказНаСборку", 
		Метаданные.Документы.ЗаказНаСборку.Синоним);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяЗаказНаПеремещение", 
		Метаданные.Документы.ЗаказНаПеремещение.Синоним);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяСборкаТоваров", 
		Метаданные.Документы.СборкаТоваров.Синоним);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ИмяПрочееОприходованиеТоваров", 
		Метаданные.Документы.ПрочееОприходованиеТоваров.Синоним);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратНепринятыхТоваров(Команда)
	
	Основание = Новый Структура;
	Основание.Вставить("Склад", Склад);
	Основание.Вставить("Помещение", Помещение);
	Основание.Вставить("ЗонаПриемки", ЗонаПриемки);
	Основание.Вставить("СкладскаяОперация", ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваров"));
	ОткрытьФорму("Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента",
				Новый Структура("Основание",Основание));
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляПечатиЭтикетокПоРаспоряжению(Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКПоступлениюОстаткиНаДату.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлениюОстаткиНаДату.Характеристика КАК Характеристика,
	|	ТоварыКПоступлениюОстаткиНаДату.Назначение,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлениюОстаткиНаДату.КПоступлениюОстаток - ТоварыКПоступлениюОстаткиНаДату.ПринимаетсяОстаток > 0
	|			ТОГДА ТоварыКПоступлениюОстаткиНаДату.КПоступлениюОстаток - ТоварыКПоступлениюОстаткиНаДату.ПринимаетсяОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлениюОстаткиТекущие.КПоступлениюОстаток - ТоварыКПоступлениюОстаткиТекущие.ПринимаетсяОстаток < 0
	|			ТОГДА -(ТоварыКПоступлениюОстаткиТекущие.КПоступлениюОстаток - ТоварыКПоступлениюОстаткиТекущие.ПринимаетсяОстаток)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перепоставка,
	|	ТоварыКПоступлениюОстаткиНаДату.ПринимаетсяОстаток КАК Принимается
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			&ДатаПоступления,
	|			ДокументПоступления = &Распоряжение
	|				И Склад = &Склад) КАК ТоварыКПоступлениюОстаткиНаДату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(
	|				,
	|				ДокументПоступления = &Распоряжение
	|					И Склад = &Склад) КАК ТоварыКПоступлениюОстаткиТекущие
	|		ПО ТоварыКПоступлениюОстаткиНаДату.ДокументПоступления = ТоварыКПоступлениюОстаткиТекущие.ДокументПоступления
	|			И ТоварыКПоступлениюОстаткиНаДату.Номенклатура = ТоварыКПоступлениюОстаткиТекущие.Номенклатура
	|			И ТоварыКПоступлениюОстаткиНаДату.Характеристика = ТоварыКПоступлениюОстаткиТекущие.Характеристика
	|			И ТоварыКПоступлениюОстаткиНаДату.Склад = ТоварыКПоступлениюОстаткиТекущие.Склад
	|			И ТоварыКПоступлениюОстаткиНаДату.Назначение = ТоварыКПоступлениюОстаткиТекущие.Назначение";
		
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаПоступления", ДатаПоступления);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
		
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);

	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#Область Производительность

&НаКлиенте
Процедура ОрдераВРаботеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.УправлениеПоступлением.Форма.Элемент.ОрдераВРаботе.Выбор");
	
КонецПроцедуры

#КонецОбласти

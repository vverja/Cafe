#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область Доставка

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	Шапка.СпособДоставки    КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Т.Склад                 КАК Склад,
	|	ИСТИНА                  КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Ссылка КАК Ссылка,
	|		Т.Склад КАК Склад
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|		И Т.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Шапка
	|		ПО (Шапка.Ссылка = Т.Ссылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса получения товаров к доставке по распоряжению
//
Функция ТекстЗапросаТоварыКДоставке() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	Т.Назначение,
	|	СУММА(Т.Количество) КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка В(&Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям") Тогда
		КомандаСоздания = Документы.АктОРасхожденияхПослеПриемки.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
		Если КомандаСоздания <> Неопределено Тогда
			КомандаСоздания.Представление = НСтр("ru='Акт о расхождениях после поступления';uk='Акт про розбіжності після надходження'");
		КонецЕсли;
	КонецЕсли;
	
	Документы.ВозвратТоваровПоставщику.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ВыкупВозвратнойТарыУПоставщика.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
    
	Документы.ЗаказНаПеремещение.ДобавитьКомандуСоздатьНаОснованииПоступленияТоваровУслугПоГруппеСкладов(КомандыСоздатьНаОсновании);
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	
	Документы.ПеремещениеТоваров.ДобавитьКомандуСоздатьНаОснованииПоГруппеСкладов(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.РеализацияТоваровУслуг.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	КомандаСоздатьНаОсновании = Документы.РегистрацияЦенНоменклатурыПоставщика.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если КомандаСоздатьНаОсновании <> Неопределено Тогда
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Регистрация цен поставщика';uk='Реєстрація цін постачальника'");
	КонецЕсли; 
	
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ТаможеннаяДекларацияИмпорт.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.УстановкаЦенНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	Документы.ВнутреннееПотреблениеТоваров.ДобавитьКомандуСоздатьНаОснованииПередачаВЭксплуатацию(КомандыСоздатьНаОсновании);
	
	Документы.ВнутреннееПотреблениеТоваров.ДобавитьКомандуСоздатьНаОснованииСписаниеНаРасходыАктивы(КомандыСоздатьНаОсновании);
	
	Обработки.СправочноеРазмещениеНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	
	Документы.УпаковочныйЛист.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваровУслуг) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПоступлениеТоваровУслуг.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПоступлениеТоваровУслуг);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваровУслуг) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.ПоступлениеТоваровУслугСоздатьНаОснованииЗаказа";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНаОснованииЗаказа";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Поступление товаров и услуг';uk='Надходження товарів і послуг'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийЗакупок(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовПоПринятойВозвратнойТаре(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	// ФормаСпискаДокументов
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 2;
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовПоПринятойВозвратнойТаре(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 3;
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийЗакупок(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 2;
		КомандаОтчет.МестоРазмещения = "ПодменюОтчеты";
	КонецЕсли;
	
	
	
КонецПроцедуры

#Область Состояние

// Осуществляет вычисление текущего состояния по поступлению без заказа
//
// Параметры:
//	ЗаказПоставщику         - ДокументСсылка.ПоступлениеТоваровУслуг - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ПоступлениеТоваровУслуг, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ПоступлениеТоваровУслуг) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументПоступлениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументПоступлениеТоваровУслуг.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) И
			|		ДокументПоступлениеТоваровУслуг.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт) И
			|		ДокументПоступлениеТоваровУслуг.Проведен И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументПоступлениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументПоступлениеТоваровУслуг.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) И
			|		ДокументПоступлениеТоваровУслуг.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт) И
			|		ДокументПоступлениеТоваровУслуг.Проведен И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) * 100 / РасчетыСПоставщикамиОстатки.КОплатеРасход КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОплаты,
			|// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументПоступлениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументПоступлениеТоваровУслуг.Проведен И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
			|		И ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) < 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (-ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПросроченнойОплаты,
			|// СУММА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументПоступлениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументПоступлениеТоваровУслуг.Проведен И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
			|	ТОГДА
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПоступления,
			|// ПРОЦЕНТ ПОСТУПЛЕНИЯ //////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументПоступлениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументПоступлениеТоваровУслуг.Проведен И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) * 100 / ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентПоступления,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументПоступлениеТоваровУслуг.Проведен И
			|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0 ИЛИ
			|		ДокументПоступлениеТоваровУслуг.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументПоступлениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументПоступлениеТоваровУслуг.Проведен И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0) > 0
			|	ТОГДА
			|		ВЫБОР
			|			КОГДА
			|				ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) > 0
			|			ТОГДА
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0)) КАК ЧИСЛО(15, 0))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеРасход, 0)) КАК ЧИСЛО(15, 0))
			|		КОНЕЦ
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументПоступлениеТоваровУслуг.Проведен И
			|		ДокументПоступлениеТоваровУслуг.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|	ТОГДА
			|		-РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ДокументПоступлениеТоваровУслуг
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,,ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстаткиНаДатуАктуальности
			|ПО
			|	Истина
			|ГДЕ
			|	ДокументПоступлениеТоваровУслуг.Ссылка = &ПоступлениеТоваровУслуг
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоступлениеТоваровУслуг, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ПоступлениеТоваровУслуг", ПоступлениеТоваровУслуг);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ПоступлениеТоваровУслуг));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ДанныеОтбора     - Структура - поля, по которым будут отобраны остатки заказов
//	СкладПоступления - СправочникСсылка.Склады - склад, по которому будут отобраны остатки заказов
//	МассивЗаказов      Массив - заказы, по которым будут отобраны остатки
//
// Вовращаемое значение:
//	Результат запроса - результат запроса по непоставленной части заказов
//
Функция ПолучитьРезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора,
	                                              СкладПоступления = Неопределено,
	                                              МассивЗаказов = Неопределено)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивЗаказов",             МассивЗаказов);
	Запрос.УстановитьПараметр("Партнер",                   ДанныеОтбора.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                ДанныеОтбора.Контрагент);
	Запрос.УстановитьПараметр("Договор",                   ДанныеОтбора.Договор);
	Запрос.УстановитьПараметр("Организация",               ДанныеОтбора.Организация);
	Если ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Или
		ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Иначе
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДанныеОтбора.ХозяйственнаяОперация);
	КонецЕсли;
	Запрос.УстановитьПараметр("Соглашение",                ДанныеОтбора.Соглашение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",      ДанныеОтбора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",           ДанныеОтбора.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ПорядокРасчетов",           ДанныеОтбора.ПорядокРасчетов);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ДанныеОтбора.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("Регистратор",               ДанныеОтбора.Ссылка);
	Запрос.УстановитьПараметр("СкладПоступления",          СкладПоступления);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",          МассивЗаказов <> Неопределено);
	Если ДанныеОтбора.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
		 И ДанныеОтбора.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("БезОтбораПоНаправлениямДеятельности", Истина);
	Иначе		
		Запрос.УстановитьПараметр("БезОтбораПоНаправлениямДеятельности", Ложь);
	КонецЕсли;
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ДанныеОтбора.НаправлениеДеятельности);

	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.ЗаказПоставщику        КАК ЗаказПоставщику,
	|	ТаблицаЗаказы.Номенклатура           КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика         КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки              КАК КодСтроки,
	|	ТаблицаЗаказы.Склад                  КАК Склад,
	|	СУММА(ТаблицаЗаказы.КОформлению)     КАК Количество
	|
	|ПОМЕСТИТЬ ТаблицаОстатки
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПоставщику        КАК ЗаказПоставщику,
	|		ЗаказыОстатки.Номенклатура           КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика         КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки              КАК КодСтроки,
	|		ЗаказыОстатки.Склад                  КАК Склад,
	|		ЗаказыОстатки.КОформлениюОстаток     КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(,
	|				ВЫБОР КОГДА &ОтобратьПоЗаказу ТОГДА
	|					ЗаказПоставщику В (&МассивЗаказов)
	|				ИНАЧЕ
	|					ЗаказПоставщику.Партнер = &Партнер
	|					И ЗаказПоставщику.Контрагент = &Контрагент
	|					И ЗаказПоставщику.Договор = &Договор
	|					И ЗаказПоставщику.Организация = &Организация
	|					И ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|					И ЗаказПоставщику.Соглашение = &Соглашение
	|					И (ЗаказПоставщику.Валюта = &ВалютаВзаиморасчетов ИЛИ
	|						&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|					И ЗаказПоставщику.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|					И ЗаказПоставщику.ПорядокРасчетов = &ПорядокРасчетов
	|					И ЗаказПоставщику.ВернутьМногооборотнуюТару = &ВернутьМногооборотнуюТару
	|					И (&БезОтбораПоНаправлениямДеятельности 
	|						ИЛИ (ЗаказПоставщику.НаправлениеДеятельности = &НаправлениеДеятельности 
	|							 ИЛИ ЗаказПоставщику.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)))
	|				КОНЕЦ
	|				И
	|				ВЫБОР
	|					КОГДА
	|						ВЫРАЗИТЬ(&СкладПоступления КАК Справочник.Склады).ЭтоГруппа
	|					ТОГДА
	|						Склад В ИЕРАРХИИ (&СкладПоступления) ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					ИНАЧЕ
	|						Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &СкладПоступления)
	|				КОНЕЦ
	|			) КАК ЗаказыОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыДвижения.ЗаказПоставщику,
	|		ЗаказыДвижения.Номенклатура,
	|		ЗаказыДвижения.Характеристика,
	|		ЗаказыДвижения.КодСтроки,
	|		ЗаказыДвижения.Склад,
	|		ВЫБОР КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				-ЗаказыДвижения.КОформлению
	|			ИНАЧЕ
	|				ЗаказыДвижения.КОформлению
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыДвижения
	|	ГДЕ
	|		ЗаказыДвижения.Регистратор = &Регистратор
	|		И ВЫБОР КОГДА &ОтобратьПоЗаказу ТОГДА
	|			ЗаказыДвижения.ЗаказПоставщику В (&МассивЗаказов)
	|		ИНАЧЕ
	|			ЗаказыДвижения.ЗаказПоставщику.Партнер = &Партнер
	|			И ЗаказыДвижения.ЗаказПоставщику.Контрагент = &Контрагент
	|			И ЗаказыДвижения.ЗаказПоставщику.Договор = &Договор
	|			И ЗаказыДвижения.ЗаказПоставщику.Организация = &Организация
	|			И ЗаказыДвижения.ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|			И ЗаказыДвижения.ЗаказПоставщику.Соглашение = &Соглашение
	|			И (ЗаказыДвижения.ЗаказПоставщику.Валюта = &ВалютаВзаиморасчетов ИЛИ
	|				&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|			И ЗаказыДвижения.ЗаказПоставщику.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|			И ЗаказыДвижения.ЗаказПоставщику.ПорядокРасчетов = &ПорядокРасчетов
	|			И ЗаказыДвижения.ЗаказПоставщику.ВернутьМногооборотнуюТару = &ВернутьМногооборотнуюТару
	|			И (&БезОтбораПоНаправлениямДеятельности 
	|				ИЛИ (ЗаказПоставщику.НаправлениеДеятельности = &НаправлениеДеятельности 
	|						ИЛИ ЗаказПоставщику.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)))
	|		КОНЕЦ
	|		И ЗаказыДвижения.Активность
	|				И ВЫБОР
	|					КОГДА
	|						ВЫРАЗИТЬ(&СкладПоступления КАК Справочник.Склады).ЭтоГруппа
	|					ТОГДА
	|						ЗаказыДвижения.Склад В ИЕРАРХИИ (&СкладПоступления) ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					ИНАЧЕ
	|						ЗаказыДвижения.Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &СкладПоступления)
	|				КОНЕЦ
	|	) КАК ТаблицаЗаказы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЗаказы.ЗаказПоставщику,
	|		ТаблицаЗаказы.Номенклатура,
	|		ТаблицаЗаказы.Характеристика,
	|		ТаблицаЗаказы.КодСтроки,
	|		ТаблицаЗаказы.Склад
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ТаблицаЗаказы.КОформлению) > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказПоставщику           КАК ЗаказПоставщику,
	|	ТаблицаОстатки.Номенклатура              КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика            КАК Характеристика,
	|	ТаблицаОстатки.КодСтроки                 КАК КодСтроки,
	|	ТаблицаОстатки.Количество                КАК Количество,
	|	ТаблицаОстатки.Склад                     КАК Склад,
	|	ЗаказТовары.Ссылка.Сделка                КАК Сделка,
	|	ЗаказТовары.СтатьяРасходов               КАК СтатьяРасходов,
	|	ЗаказТовары.АналитикаРасходов            КАК АналитикаРасходов,
	|	ЗаказТовары.Подразделение                КАК Подразделение,
	|	ЗаказТовары.СписатьНаРасходы             КАК СписатьНаРасходы,
	|	ЗаказТовары.ДатаПоступления              КАК ДатаПоступления,
	|	ЗаказТовары.Упаковка                     КАК Упаковка,
	|	ЗаказТовары.ВидЦеныПоставщика            КАК ВидЦеныПоставщика,
	|	ЗаказТовары.Количество                   КАК КоличествоПоЗаказу,
	|	ЗаказТовары.Цена                         КАК Цена,
	|	ЗаказТовары.СтавкаНДС                    КАК СтавкаНДС,
	|	ЗаказТовары.Сумма                        КАК Сумма,
	|	ЗаказТовары.СуммаНДС                     КАК СуммаНДС,
	|	ЗаказТовары.СуммаСНДС                    КАК СуммаСНДС,
	|	ЗаказТовары.ПроцентРучнойСкидки          КАК ПроцентРучнойСкидки,
	|	ЗаказТовары.СуммаРучнойСкидки            КАК СуммаРучнойСкидки,
	|	ЗаказТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказТовары.НоменклатураПоставщика       КАК НоменклатураПоставщика,
	|	ЗаказТовары.Назначение                   КАК Назначение,
	|	ВЫБОР КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|	КОНЕЦ                                    КАК Коэффициент
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
	|		ПО  ТаблицаОстатки.Номенклатура     = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ТаблицаОстатки.КодСтроки      = ЗаказТовары.КодСтроки
	|			И ТаблицаОстатки.ЗаказПоставщику = ЗаказТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОстатки.ЗаказПоставщику,
	|	ЗаказТовары.НомерСтроки
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЗаказТовары.Упаковка",
			"ЗаказТовары.Номенклатура"));
		
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();

КонецФункции

// Заполняет таблицу товаров по данным отбора или массиву заказов
//
// Параметры:
//	ДанныеОтбора            - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//	Товары                  - ДанныеФормыКоллекция - таблица товаров, в которую будут помещены остатки заказов
//	МассивЗаказов           - Массив - заказы, по которым будут отобраны остатки
//
Процедура ЗаполнитьПоОстаткамЗаказов(ДанныеОтбора,
	                                 Товары,
	                                 СкладПоступления,
	                                 МассивЗаказов = Неопределено) Экспорт
	
	// Данные по остаткам товаров заказа.
	ВыборкаТовары = ПолучитьРезультатЗапросаПоОстаткамЗаказов(
		ДанныеОтбора,
		СкладПоступления,
		МассивЗаказов
	).Выбрать();
	
	МассивЗаказовПоставщику = Новый Массив();
	
	Пока ВыборкаТовары.Следующий() Цикл
		Если МассивЗаказовПоставщику.Найти(ВыборкаТовары.ЗаказПоставщику) = Неопределено Тогда
			МассивЗаказовПоставщику.Добавить(ВыборкаТовары.ЗаказПоставщику);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказовПоставщику", МассивЗаказовПоставщику);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДанныеОтбора.Валюта);
	
	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Ссылка                    КАК ЗаказПоставщику,
	|	ТаблицаЗаказов.Валюта                    КАК Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьВВалютуДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В (&МассивЗаказовПоставщику)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Валюта                    КАК Валюта
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В (&МассивЗаказовПоставщику)
	|	И ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	РеквизитыЗаказов = РезультатЗапроса[0].Выбрать();
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
		НоваяСтрока.Курс = КурсыВалюты.Курс;
		НоваяСтрока.Кратность = КурсыВалюты.Кратность;
		
	КонецЦикла;
	
	Если ТаблицаКурсовВалют.Количество() > 0 Тогда
		СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОтбора.Валюта, ТекущаяДата());
	КонецЕсли;
	
	ВыборкаТовары.Сбросить();
	Пока ВыборкаТовары.Следующий() Цикл
		
		НеобходимПересчетСумм = (ВыборкаТовары.Количество<>ВыборкаТовары.КоличествоПоЗаказу);
		
		СтрокаТаб = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаТовары);
		
		СтрокаТаб.Количество = ВыборкаТовары.Количество;
		СтрокаТаб.КоличествоУпаковок = ВыборкаТовары.Количество / ВыборкаТовары.Коэффициент;
		
		РеквизитыЗаказов.Сбросить();
		ЗаказНайден = РеквизитыЗаказов.НайтиСледующий(СтрокаТаб.ЗаказПоставщику, "ЗаказПоставщику");
		
		Если ЗаказНайден Тогда
			
			Если РеквизитыЗаказов.ПересчитатьВВалютуДокумента Тогда
				
				ПараметрыОтбора = Новый Структура("Валюта,Дата", РеквизитыЗаказов.Валюта, РеквизитыЗаказов.Дата);
				КурсВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
				
				Если КурсВалюты.Количество() = 1 Тогда
					
					СтрокаТаб.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
							СтрокаТаб.Цена,
							РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
							КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
							КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
					НеобходимПересчетСумм = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимПересчетСумм Тогда
			
			Ценообразование.ПересчитатьСуммыВСтроке(СтрокаТаб, Ложь, Ложь, Истина, РеквизитыЗаказов.ЦенаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,ХозяйственнаяОперация,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//		Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//
//	Возвращаемое значение
//		Тип Структура
//			Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ПоступлениеТоваровУслуг";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ЗакупкаУПоставщикаПоРеглУчету = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	
	Если ЗакупкаУПоставщикаПоРеглУчету Тогда
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости    = Истина;
	Иначе
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = 
						(ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры И Не СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.Склад, Объект.Дата, Истина))
						Или ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости    = Ложь;
	КонецЕсли;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика);
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Склад");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Соглашение");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("ПоступлениеПоЗаказам");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_ЗаказПоставщику");
    
	ПараметрыУказанияСерий.ОперацияДокумента = Объект.ХозяйственнаяОперация;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				КОГДА НЕ &ТолькоСерииДляСебестоимости
	|					ТОГДА ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|								ТОГДА ВЫБОР
	|										КОГДА НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении
	|											ТОГДА ВЫБОР
	|													КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|															И ТоварыДляЗапроса.Количество > 0
	|														ТОГДА 10
	|													ИНАЧЕ 9
	|												КОНЕЦ
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|								ТОГДА ВЫБОР
	|										КОГДА НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|												ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении
	|											ТОГДА ВЫБОР
	|													КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|															И ТоварыДляЗапроса.Количество > 0
	|														ТОГДА 8
	|													ИНАЧЕ 7
	|												КОНЕЦ
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|									И (НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|										ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении)
	|									И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
	|								ТОГДА ВЫБОР
	|										КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|											ТОГДА ВЫБОР
	|													КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|															И ТоварыДляЗапроса.Количество > 0
	|														ТОГДА 4
	|													ИНАЧЕ 3
	|												КОНЕЦ
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|														И ТоварыДляЗапроса.Количество > 0
	|													ТОГДА 2
	|												ИНАЧЕ 1
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|				И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|				И ТоварыДляЗапроса.Склад = СерииДляЗапроса.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|			ПО (ПолитикиУчетаСерий.Склад = ТоварыДляЗапроса.Склад)
	|				И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

// Возвращает текст запроса для получениях доступных назначений
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Возврат Справочники.Назначения.ТекстЗапросаНазначенийРасширенный();
	
КонецФункции

#Область Прочее

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ПодотчетноеЛицо");
	МассивВсехРеквизитов.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивВсехРеквизитов.Добавить("ДатаПлатежа");
	МассивВсехРеквизитов.Добавить("ФормаОплаты");
	МассивВсехРеквизитов.Добавить("ГруппаФинансовогоУчета");
	МассивВсехРеквизитов.Добавить("Товары.ПроцентРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("Товары.АналитикаРасходов");
	МассивВсехРеквизитов.Добавить("Товары.НомерГТД");
	
	ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
	 Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда
		МассивРеквизитовОперации.Добавить("ДатаПлатежа");
		МассивРеквизитовОперации.Добавить("ФормаОплаты");
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		МассивРеквизитовОперации.Добавить("Товары.НомерГТД");
		
		Если ИспользоватьРучныеСкидкиВЗакупках Тогда
			МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
			МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		МассивРеквизитовОперации.Добавить("ПодотчетноеЛицо");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		МассивРеквизитовОперации.Добавить("Товары.НомерГТД");
		
		Если ИспользоватьРучныеСкидкиВЗакупках Тогда
			МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
			МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		МассивРеквизитовОперации.Добавить("Товары.НомерГТД");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		
		МассивРеквизитовОперации.Добавить("ДатаПлатежа");
		МассивРеквизитовОперации.Добавить("ФормаОплаты");
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		
		Если ИспользоватьРучныеСкидкиВЗакупках Тогда
			МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
			МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		КонецЕсли;
	
	
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
		// Нет ни одного реквизита зависящего от операции
	
	КонецЕсли;
	
КонецПроцедуры

// Функция получает список складов со справочным хранением остатков по массиву документов
//
// Параметры:
//	МассивДокументов - массив ссылок документов "Поступление товаров и услуг"
//
// Вовращаемое значение:
//	Список значений - список складов со справочным хранением остатков
//
Функция ПолучитьСписокСкладовСоСправочнымХранением(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ПоступлениеТоваровУслугТовары.Склад КАК Склад
	                      |ИЗ
	                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	                      |ГДЕ
	                      |	ПоступлениеТоваровУслугТовары.Склад.ИспользоватьАдресноеХранениеСправочно
	                      |	И (НЕ ПоступлениеТоваровУслугТовары.Склад.ИспользоватьАдресноеХранение
	                      |			ИЛИ ПоступлениеТоваровУслугТовары.Ссылка.Дата < ПоступлениеТоваровУслугТовары.Склад.ДатаНачалаАдресногоХраненияОстатков)
	                      |	И ПоступлениеТоваровУслугТовары.Ссылка В(&МассивДокументов)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПоступлениеТоваровУслугТовары.Склад.Наименование");
	СписокСкладов = Неопределено;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	
	СписокСкладов = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокСкладов.Добавить(Выборка.Склад);
	КонецЦикла;
	
	Возврат СписокСкладов;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
//Параметры:
//	ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//		поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа
//
// Возвращаемое значение:
//	ДокументСсылка.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Если Не ЗначениеЗаполнено(ЗначенияПолейДляОпределенияРаспоряжения.Соглашение) Тогда
		Если ЗначенияПолейДляОпределенияРаспоряжения.ПоступлениеПоЗаказам Тогда
			Возврат ЗначенияПолейДляОпределенияРаспоряжения.Товары_ЗаказПоставщику;
		Иначе
			Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
		КонецЕсли;
	Иначе
		ВариантПриемкиТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияПолейДляОпределенияРаспоряжения.Соглашение, "ВариантПриемкиТоваров");
		
		Если ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда 
			Если ЗначенияПолейДляОпределенияРаспоряжения.ПоступлениеПоЗаказам Тогда
				Возврат ЗначенияПолейДляОпределенияРаспоряжения.Товары_ЗаказПоставщику;
			Иначе
				Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
			КонецЕсли;
		Иначе
			Возврат ЗначенияПолейДляОпределенияРаспоряжения.Соглашение;
		КонецЕсли;
		
	КонецЕсли;
КонецФункции

#КонецОбласти


// Осуществляет инициализацию структуры состояния выполнения документа
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИницициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСПоставщиками", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление", 2);
	СтруктураСостояние.Вставить("ЭтоНакладная", Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиПоступления", Истина);
	СтруктураСостояние.Вставить("ИмяПоляНакладнаяПоЗаказам", "ПоступлениеПоЗаказам");
	
	Возврат СтруктураСостояние
	
КонецФункции

Функция МетаданныеДокумента() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюПоступления(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПринятаяВозвратнаяТара(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизацийКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДенежныеСредстваУПодотчетныхЛиц(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаПартииПроизводственныхЗатрат(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияДенежныеСредстваКонтрагент(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСРасчетНалоговогоКредита(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Партнер КАК Поставщик,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Соглашение.Валюта КАК ВалютаСоглашения,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.Соглашение.ЦенаВключаетНДС КАК ЦенаВключаетНДССоглашения,
	|	ДанныеДокумента.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ПоступлениеПоЗаказам КАК ПоступлениеПоЗаказу,
	|	ДанныеДокумента.Соглашение.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Поставка) КАК ВидПоставки,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	ДанныеДокумента.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговорам,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоНакладным,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|				И ДанныеДокумента.ПоступлениеПоЗаказам
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоЗаказам,
	|	ДанныеДокумента.Менеджер КАК Менеджер,
	|	ДанныеДокумента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                                                         Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                                                         Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",                                           Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",                                 Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",                                     Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаПлатежа",                                                    Реквизиты.ДатаПлатежа);
	Запрос.УстановитьПараметр("ФормаОплаты",                                                    Реквизиты.ФормаОплаты);
	Запрос.УстановитьПараметр("Организация",                                                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                                                ?(Реквизиты.ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("ПодотчетноеЛицо",                                                Реквизиты.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Партнер",                                                        Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ЗаказПоставщику",                                                Реквизиты.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Подразделение",                                                  Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ПоступлениеПоЗаказу",                                            Реквизиты.ПоступлениеПоЗаказу);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",                                          Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств",                                  Реквизиты.СтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",                    ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов",                          ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")); 
	Запрос.УстановитьПараметр("РегистрироватьЦеныПоставщика",                                   Реквизиты.РегистрироватьЦеныПоставщика);
	Запрос.УстановитьПараметр("ВалютаСоглашения",                                               Реквизиты.ВалютаСоглашения);
	Запрос.УстановитьПараметр("Соглашение",                                                     Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("ЦенаВключаетНДСДокумента",                                       Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДССоглашения",                                      Реквизиты.ЦенаВключаетНДССоглашения);
	Запрос.УстановитьПараметр("Договор",                                                        Реквизиты.Договор);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",                                             Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным",                                             Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("РасчетыПоЗаказам",                                             	Реквизиты.РасчетыПоЗаказам);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару",                                      Реквизиты.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару",                                           Реквизиты.ТребуетсяЗалогЗаТару);
	Запрос.УстановитьПараметр("Контрагент",                                                     Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Менеджер",                                                       Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета",                                         Реквизиты.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("ПоступлениеПоНесколькимЗаказам",                                 ?(Не ЗначениеЗаполнено(Реквизиты.ЗаказПоставщику), Истина, Ложь));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",                ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ИспользоватьПартионныйУчет",                                     ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет"));
	Запрос.УстановитьПараметр("КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям",ПолучитьФункциональнуюОпцию("КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям"));
	Запрос.УстановитьПараметр("КонтролироватьВыдачуПодОтчетВРазрезеЦелей",                      ПолучитьФункциональнуюОпцию("КонтролироватьВыдачуПодОтчетВРазрезеЦелей"));
	Запрос.УстановитьПараметр("МногооборотнаяТара",                                             Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",                                        Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре",                                      Реквизиты.ГрафикИсполненияВДоговоре);
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС",                                       НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ВидПоставки",                                                    Реквизиты.ВидПоставки);
	Запрос.УстановитьПараметр("МоментОпределенияБазыНДС",                                       НДСВходящийСервер.ОпределитьМоментОпределенияБазыНДС(Реквизиты.ВидПоставки, Реквизиты.ХозяйственнаяОперация, Реквизиты.Организация, Реквизиты.Договор));
	
	Если Справочники.СоглашенияСПоставщиками.СоглашениеИспользуетсяПриПриемке(Реквизиты.ВариантПриемкиТоваров)
	   И ЕстьОрдерныеСкладыВТЧТовары(ДокументСсылка) Тогда
		
		Запрос.УстановитьПараметр("Распоряжение",                    Справочники.СоглашенияСПоставщиками.ПолучитьСоздатьДокументРегистрации(Реквизиты.Соглашение));
		Запрос.УстановитьПараметр("ДокументПоступления",             Реквизиты.Соглашение);
		Запрос.УстановитьПараметр("СоглашениеЯвляетсяРаспоряжением", Истина);
		
	Иначе
		
		Запрос.УстановитьПараметр("СоглашениеЯвляетсяРаспоряжением", Ложь);
		Запрос.УстановитьПараметр("ДокументПоступления",             ДокументСсылка);
		Запрос.УстановитьПараметр("Распоряжение",                    Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьВидыЗапасов(Реквизиты)
	
	СоответствиеВидовЗапасов = Новый ТаблицаЗначений;
	СоответствиеВидовЗапасов.Колонки.Добавить("ВидЗапасов", Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов")); 
	СоответствиеВидовЗапасов.Колонки.Добавить("НовыйВидЗапасов", Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов")); 
	
	Если Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда

		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК Организация,
		|	ТаблицаТовары.ВидЗапасов КАК ВидЗапасов,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|	КОНЕЦ КАК ТипЗапасов,
		|	Неопределено КАК Комитент,
		|	Неопределено КАК Соглашение,
		|	Неопределено КАК Валюта,
		|	Неопределено КАК НалоговоеНазначение,
		|	Неопределено КАК НалоговоеНазначениеОрганизации,
		|	Неопределено КАК Поставщик,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|		ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
		|	ИНАЧЕ
		|		ТаблицаТовары.ВидЗапасов.ГруппаФинансовогоУчета
		|	КОНЕЦ КАК ГруппаФинансовогоУчета,
		|
		|	Неопределено КАК Подразделение,
		|	Неопределено КАК Менеджер,
		|	Неопределено КАК Сделка,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.НеВедется) КАК ВариантОбособленногоУчетаТоваров,
		|	Ложь КАК ОбособленныйУчетТоваровПоСделке,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|");
		Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
				Выборка.Организация,
				Выборка.ХозяйственнаяОперация,
				Выборка);
			НоваяСтрока = СоответствиеВидовЗапасов.Добавить();
			НоваяСтрока.ВидЗапасов = Выборка.ВидЗапасов;
			НоваяСтрока.НовыйВидЗапасов = НовыйВидЗапасов;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеВидовЗапасов;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПартнеровИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПоАналитикам = Новый Запрос;
	
	ЗапросПоАналитикам.Текст = " 	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	&Договор 	 КАК Договор,
	|	&Контрагент  КАК Контрагент,
	|	&Партнер 	 КАК Партнер,
	|	ВЫБОР 
	|		КОГДА &РасчетыПоЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности 	
	|		ИНАЧЕ
	|			&НаправлениеДеятельности
	|	КОНЕЦ  		 КАК НаправлениеДеятельности 
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер = Аналитика.Партнер
	|		И &Договор = Аналитика.Договор
	|		И ВЫБОР 
	|			КОГДА &РасчетыПоЗаказам 
	|				ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности 	
	|			ИНАЧЕ
	|				&НаправлениеДеятельности
	|		  КОНЕЦ = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ОрганизацияУпр КАК Организация,
	|	&Договор 	 	КАК Договор,
	|	&Контрагент  	КАК Контрагент,
	|	&Партнер 	 	КАК Партнер,
	|	ВЫБОР 
	|		КОГДА &РасчетыПоЗаказам 
	|			ТОГДА ТаблицаРасшифровкаПлатежа.Заказ.НаправлениеДеятельности 	
	|		ИНАЧЕ
	|			&НаправлениеДеятельности
	|	КОНЕЦ			КАК НаправлениеДеятельности 
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&ОрганизацияУпр = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер = Аналитика.Партнер
	|		И &Договор = Аналитика.Договор
	|		И ВЫБОР 
	|			КОГДА &РасчетыПоЗаказам 
	|				ТОГДА ТаблицаРасшифровкаПлатежа.Заказ.НаправлениеДеятельности 	
	|			ИНАЧЕ
	|				&НаправлениеДеятельности
	|		КОНЕЦ = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL
	|";
	
	ЗапросПоАналитикам.УстановитьПараметр("Ссылка",                	 Запрос.Параметры.Ссылка);
	ЗапросПоАналитикам.УстановитьПараметр("Организация",           	 Запрос.Параметры.Организация); 
	ЗапросПоАналитикам.УстановитьПараметр("ОрганизацияУпр",          Справочники.Организации.УправленческаяОрганизация);
	ЗапросПоАналитикам.УстановитьПараметр("Контрагент",            	 Запрос.Параметры.Контрагент);
	ЗапросПоАналитикам.УстановитьПараметр("Партнер",       			 Запрос.Параметры.Партнер);
	ЗапросПоАналитикам.УстановитьПараметр("Договор",       			 Запрос.Параметры.Договор);
	ЗапросПоАналитикам.УстановитьПараметр("НаправлениеДеятельности", Запрос.Параметры.НаправлениеДеятельности);
	ЗапросПоАналитикам.УстановитьПараметр("РасчетыПоЗаказам", 		 Запрос.Параметры.РасчетыПоЗаказам);
	
	Выборка = ЗапросПоАналитикам.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПартнеровИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.ЗаказПоставщику          КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			ТаблицаТовары.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Склад,
	|	ТаблицаТовары.Количество               КАК Заказано,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ПоступлениеПоЗаказу
	|	И ТаблицаТовары.КодСтроки <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.ЗаказПоставщику          КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			ТаблицаТовары.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Склад,
	|	0                                      КАК Заказано,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки = 0
	|	И &ПоступлениеПоЗаказу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.ЗаказПоставщику          КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			ТаблицаТовары.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Склад,
	|	0                                      КАК Заказано,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки = 0
	|	И &ПоступлениеПоЗаказу
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюПоступления(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюПоступления";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ВЫБОР
	// Документов поступления будет 1. Соглашение - если в нем есть признак. 2. Поступление, 3 Заказ поставщику
	|		КОГДА &СоглашениеЯвляетсяРаспоряжением Или НЕ &ПоступлениеПоЗаказу ТОГДА
	|			&ДокументПоступления
	|		ИНАЧЕ
	|			ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ                                  КАК ДокументПоступления,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОформлению,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТаблицаТоварыКПоступлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ВЫБОР
	// Документов поступления будет 1. Соглашение - если в нем есть признак. 2. Поступление, 3 Заказ поставщику
	|		КОГДА &СоглашениеЯвляетсяРаспоряжением Или НЕ &ПоступлениеПоЗаказу ТОГДА
	|			&ДокументПоступления
	|		ИНАЧЕ
	|			ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ                                  КАК ДокументПоступления,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И (НЕ &ПоступлениеПоЗаказу
	|			ИЛИ (&ПоступлениеПоЗаказу И ТаблицаТовары.КодСтроки = 0))
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаСерииТоваров", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТаблицаСерииТоваров КАК ТаблицаТовары
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	// На неордерном складе
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВРезервеПодЗаказ
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И НЕ ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// На ордерном складе для старых назначений установка резерва под заказ (т.к. в приходном ордере нет старых 
	// назначений, приходный ордер этогосделать не мог)
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	0,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	// На неордерном складе
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА &СоглашениеЯвляетсяРаспоряжением
	|			ТОГДА &Распоряжение
	|		ИНАЧЕ ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ КАК Распоряжение,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА -ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПланируемоеПоступление,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА -ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказ
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоЗаказу
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// На ордерном складе при поступлении по заказу по старым назначениям
	|ВЫБРАТЬ
	|	&Период,
	|	ВЫБОР
	|		КОГДА &СоглашениеЯвляетсяРаспоряжением
	|			ТОГДА &Распоряжение
	|		ИНАЧЕ ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	0,
	|	-ТаблицаТовары.Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоЗаказу
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// На ордерном складе сторно приходного ордера при поступлении по заказу по старым назначениям
	|ВЫБРАТЬ
	|	&Период,
	|	ВЫБОР
	|		КОГДА &СоглашениеЯвляетсяРаспоряжением
	|			ТОГДА &Распоряжение
	|		ИНАЧЕ ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТаблицаТовары.Количество,
	|	0
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоЗаказу
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// На ордерном складе при поступлении по соглашению (но без заказа) сторно приходного ордера по старым назначениям и поступлением без назначения
	|ВЫБРАТЬ
	|	&Период,
	|	&Распоряжение,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТаблицаТовары.Количество,
	|	0
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ &ПоступлениеПоЗаказу
	|	И &СоглашениеЯвляетсяРаспоряжением
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	// На ордерном складе при поступлении по соглашению (но без заказа) сторно приходного ордера по новым назначениям
	|ВЫБРАТЬ
	|	&Период,
	|	&Распоряжение,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	0,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ &ПоступлениеПоЗаказу
	|	И &СоглашениеЯвляетсяРаспоряжением
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	ТаблицаСерии.Склад КАК Получатель,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка) КАК ПомещениеПолучателя,
	|	&Партнер КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаОтПоставщика) КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА (НЕ ТаблицаСерии.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ &Период < ТаблицаСерии.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Количество,
	|	ТаблицаСерии.Склад,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка),
	|	&Партнер,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаОтПоставщика),
	|	&Ссылка,
	|	&Период,
	|	&Ссылка,
	|	ВЫБОР
	|		КОГДА (НЕ ТаблицаСерии.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ &Период < ТаблицаСерии.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
	|	&Период 								КАК Период,
	|	ТаблицаТовары.Номенклатура 				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика 			КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ(&ПоступлениеПоЗаказу
	|					И ТаблицаТовары.КодСтроки <> 0)
	|			ТОГДА -ТаблицаТовары.Количество
	|	КОНЕЦ 									КАК КЗаказу,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|				ИЛИ НЕ(ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|						И &Период >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ 									КАК НаличиеПодЗаказ,
	|	ТаблицаТовары.Склад 					КАК Склад,
	|	ТаблицаТовары.Назначение 				КАК Назначение
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (НЕ(&ПоступлениеПоЗаказу
	|					И ТаблицаТовары.КодСтроки <> 0)
	|			ИЛИ НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ИЛИ НЕ(ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|					И &Период >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказовРаботами";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК КОбеспечению,
	|	ТаблицаТовары.Подразделение            КАК Подразделение,
	|	ТаблицаТовары.Назначение               КАК Назначение
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ (&ПоступлениеПоЗаказу И ТаблицаТовары.КодСтроки <> 0)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПринятаяВозвратнаяТара(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПринятаяВозвратнаяТара";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК Количество,
	|	ТаблицаТовары.СуммаСНДС                КАК Сумма,
	|	&Партнер                               КАК Партнер,
	|	&Ссылка                                КАК ДокументПоступления,
	|	&ТребуетсяЗалогЗаТару                  КАК ПредусмотренЗалог
	|ИЗ
	|	втТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И &ВернутьМногооборотнуюТару
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                      КАК ДатаПоступления,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.ВидЗапасов     КАК ВидЗапасов,
	|	ТаблицаТовары.НомерГТД       КАК НомерГТД
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваров
	|	ПО
	|		ТаблицаТовары.ВидЗапасов = ПоступленияТоваров.ВидЗапасов 
	|		И ТаблицаТовары.Номенклатура = ПоступленияТоваров.Номенклатура
	|		И ТаблицаТовары.Характеристика = ПоступленияТоваров.Характеристика 
	|		И ТаблицаТовары.Серия = ПоступленияТоваров.Серия
	|		И ТаблицаТовары.НомерГТД = ПоступленияТоваров.НомерГТД 
	|
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|	И ТаблицаТовары.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		)
	|	И (ПоступленияТоваров.ДатаПоступления ЕСТЬ NULL
	|		ИЛИ ПоступленияТоваров.ДатаПоступления < &Период)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.ВидЗапасов,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.НомерГТД
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтСоответствиеВидовЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСоответствиеВидовЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ОрганизацияОтгрузки,
	|	ИСТИНА КАК Первичное
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация),
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВтСоответствиеВидовЗапасов.НовыйВидЗапасов,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК ОрганизацияОтгрузки,
	|	ЛОЖЬ КАК Первичное
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСоответствиеВидовЗапасов КАК ВтСоответствиеВидовЗапасов
	|	ПО
	|		ТаблицаТовары.ВидЗапасов = ВтСоответствиеВидовЗапасов.ВидЗапасов
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКОформлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТоварыОрганизацийКОформлению", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТоварыОрганизацийКОформлению(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	&Организация                             КАК Организация,
	|	&Партнер							     КАК Поставщик,
	|	ТаблицаТовары.Склад                      КАК Склад,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика,
	|	ТаблицаТовары.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР 
	|		КОГДА НЕ &КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		КОГДА ВтТоварыОрганизацийКОформлению.ДокументПоступленияЗаполнен ЕСТЬ NULL ТОГДА
	|			&Ссылка
	|		КОГДА НЕ ВтТоварыОрганизацийКОформлению.ДокументПоступленияЗаполнен ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			&Ссылка
	|	КОНЕЦ КАК ДокументПоступления,
	|	ТаблицаТовары.Количество                 КАК Количество,
	|	ВЫБОР 
	|		КОГДА НЕ &КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		КОГДА ВтТоварыОрганизацийКОформлению.ДокументПоступленияЗаполнен ЕСТЬ NULL ТОГДА
	|			ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
	|				ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|		КОГДА НЕ ВтТоварыОрганизацийКОформлению.ДокументПоступленияЗаполнен ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|			ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
	|				ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|			КОНЕЦ
	|	КОНЕЦ КАК Сумма,
	|	ИСТИНА                                   КАК Первичное
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыОрганизацийКОформлению КАК ВтТоварыОрганизацийКОформлению
	|			ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту) ИЛИ
	|	   &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтСоответствиеВидовЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСоответствиеВидовЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	ТаблицаТовары.НалоговоеНазначение КАК НалоговоеНазначение,
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|	СУММА(
	|		ВЫБОР КОГДА ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)
	|		ТОГДА
	|			ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл
	|		ИНАЧЕ
	|			ТаблицаТовары.СуммаБезНДСРегл
	|		КОНЕЦ
	|	) КАК СтоимостьРегл,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СтоимостьРеглБезНДС,
	|	СУММА(ТаблицаТовары.СуммаНДСРегл) КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ТаблицаТовары.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		)
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|		)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.НалоговоеНазначение,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки)     КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|   	ВтСоответствиеВидовЗапасов.НовыйВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	ТаблицаТовары.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК Организация
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСоответствиеВидовЗапасов КАК ВтСоответствиеВидовЗапасов
	|	ПО
	|		ТаблицаТовары.ВидЗапасов = ВтСоответствиеВидовЗапасов.ВидЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ТаблицаТовары.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		)
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	(ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА ВтСоответствиеВидовЗапасов.НовыйВидЗапасов ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ),
	|	ТаблицаТовары.НалоговоеНазначение,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВтСоответствиеВидовЗапасов.НовыйВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	ТаблицаТовары.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	-СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Стоимость,
	|	-СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|	-СУММА(
	|		ВЫБОР КОГДА ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)
	|		ТОГДА
	|			ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл
	|		ИНАЧЕ
	|			ТаблицаТовары.СуммаБезНДСРегл
	|		КОНЕЦ
	|	) КАК СтоимостьРегл,
	|	-СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СтоимостьРеглБезНДС,
	|	-СУММА(ТаблицаТовары.СуммаНДСРегл) КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	-СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК Организация
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСоответствиеВидовЗапасов КАК ВтСоответствиеВидовЗапасов
	|	ПО
	|		ТаблицаТовары.ВидЗапасов = ВтСоответствиеВидовЗапасов.ВидЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ТаблицаТовары.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.НалоговоеНазначение,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВтСоответствиеВидовЗапасов.НовыйВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	ТаблицаТовары.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|	СУММА(
	|		ВЫБОР КОГДА ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)	
	|		ТОГДА
	|			ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл
	|		ИНАЧЕ
	|			ТаблицаТовары.СуммаБезНДСРегл
	|		КОНЕЦ
	|	) КАК СтоимостьРегл,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СтоимостьРеглБезНДС,
	|	СУММА(ТаблицаТовары.СуммаНДСРегл) КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ТаблицаТовары.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Не ТаблицаТовары.СписатьНаРасходы
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.НалоговоеНазначение,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Подразделение КАК Подразделение,
	|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Сумма,
	|
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		ТаблицаТовары.СтатьяРасходов = СтатьиРасходов.Ссылка
	|	
	|ГДЕ
	|	(ТаблицаТовары.СписатьНаРасходы ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И СтатьиРасходов.ВариантРаспределенияРасходов <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатьяРасходов.ВариантРаспределенияРасходов В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
	|	ТОГДА 
	|		ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|	ИНАЧЕ
	|		ТаблицаТовары.НалоговоеНазначение
	|	КОНЕЦ,
	|	ТаблицаТовары.Подразделение
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(ВЫБОР КОГДА ТаблицаТовары.СтатьяРасходов.ВариантРаспределенияРасходов <>
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТаблицаТовары.СуммаСНДСУпр
	|	КОНЕЦ) КАК Стоимость,
	|	СУММА(ВЫБОР КОГДА ТаблицаТовары.СтатьяРасходов.ВариантРаспределенияРасходов <>
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТаблицаТовары.СуммаБезНДСУпр
	|	КОНЕЦ) КАК СтоимостьБезНДС,
	|
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СтоимостьРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	СУММА(ТаблицаТовары.СуммаНДСРегл) КАК НДСРегл,
	|
	|	ТаблицаТовары.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначение 
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	(ТаблицаТовары.СписатьНаРасходы ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И ((&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет) И
	|		ТаблицаТовары.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|		 )
	|		)
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.СтатьяРасходов, ТаблицаТовары.АналитикаРасходов, ТаблицаТовары.АналитикаУчетаПартий, ТаблицаТовары.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваУПодотчетныхЛиц(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваУПодотчетныхЛиц";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	&ПодотчетноеЛицо                       КАК ПодотчетноеЛицо,
	|	&Валюта                                КАК Валюта,
	
	|	ВЫБОР КОГДА &КонтролироватьВыдачуПодОтчетВРазрезеЦелей ТОГДА
	|		&СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК ЦельВыдачи,
	
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	СУММА(ТаблицаТовары.СуммаСНДС)         КАК Сумма,
	|	ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС)
	|		* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО (15,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС)
	|		* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО (15,2)) КАК СуммаУпр,
	|	СУММА(ТаблицаТовары.СуммаСНДС)         КАК КОтчету
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		ТаблицаТовары.ЗаказПоставщику
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗакупкаПоЗаказу,
	|
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ФормаОплаты,
	|	
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК Сумма,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА СУММА(ТаблицаТовары.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА СУММА(ТаблицаТовары.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	СУММА(0) КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК КПоступлению,
	|	0 КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|				КОГДА &РасчетыПоЗаказам 
	|					ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности
	|				ИНАЧЕ
	|					&НаправлениеДеятельности
	|		  КОНЕЦ 	  = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|		)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки <> 0
	|	И &ПоступлениеПоЗаказу
	|	И Не &РасчетыПоНакладным
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ЗаказПоставщику,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		ТаблицаТовары.ЗаказПоставщику
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗакупкаПоЗаказу,
	|
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ФормаОплаты,
	|	
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК Сумма,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА СУММА(ТаблицаТовары.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА СУММА(ТаблицаТовары.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	СУММА(0) КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК КПоступлению,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|				КОГДА &РасчетыПоЗаказам 
	|					ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности
	|				ИНАЧЕ
	|					&НаправлениеДеятельности
	|		  КОНЕЦ 	  = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|		)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки <> 0
	|	И &ПоступлениеПоЗаказу
	|	И Не &РасчетыПоНакладным
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И &ТребуетсяЗалогЗаТару
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ЗаказПоставщику,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	Неопределено КАК ЗакупкаПоЗаказу,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ФормаОплаты,
	|	
	|	СУММА(0) КАК Сумма,
	|	СУММА(0) КАК СуммаРегл,
	|	СУММА(0) КАК СуммаУпр,
	|	СУММА(0) КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК КПоступлению,
	|	0 КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|				КОГДА &РасчетыПоЗаказам 
	|					ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности
	|				ИНАЧЕ
	|					&НаправлениеДеятельности
	|		  КОНЕЦ 	  = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|		)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки = 0
	|	И &ПоступлениеПоЗаказу
	|	И Не &РасчетыПоНакладным
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ &ТребуетсяЗалогЗаТару
	|		ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ЗаказПоставщику,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	Неопределено КАК ЗакупкаПоЗаказу,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ФормаОплаты,
	|	
	|	СУММА(0) КАК Сумма,
	|	СУММА(0) КАК СуммаРегл,
	|	СУММА(0) КАК СуммаУпр,
	|	СУММА(0) КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК КПоступлению,
	|	0 КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|				КОГДА &РасчетыПоЗаказам 
	|					ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности
	|				ИНАЧЕ
	|					&НаправлениеДеятельности
	|		  КОНЕЦ 	  = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|		)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки = 0
	|	И (&ПоступлениеПоЗаказу ИЛИ &ГрафикИсполненияВДоговоре)
	|	И Не &РасчетыПоНакладным
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ &ТребуетсяЗалогЗаТару
	|		ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ЗаказПоставщику,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаТовары.ЗаказПоставщику
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		ТаблицаТовары.ЗаказПоставщику
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗакупкаПоЗаказу,
	|
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ФормаОплаты,
	|
	|	СУММА(0) КАК Сумма,
	|	СУММА(0) КАК СуммаРегл,
	|	СУММА(0) КАК СуммаУпр,
	|	СУММА(0) КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК КПоступлению,
	|	0 КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|				КОГДА &РасчетыПоЗаказам 
	|					ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности
	|				ИНАЧЕ
	|					&НаправлениеДеятельности
	|		  КОНЕЦ 	  = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт)
	|	)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки <> 0
	|	И &ПоступлениеПоЗаказу
	|	И Не &РасчетыПоНакладным
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ЗаказПоставщику,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ВЫБОР КОГДА &ПоступлениеПоЗаказу И Не &РасчетыПоНакладным ТОГДА
	|			ТаблицаТовары.ЗаказПоставщику
	|		ИНАЧЕ
	|			&Ссылка
	|		КОНЕЦ
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	Неопределено КАК ЗакупкаПоЗаказу,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ФормаОплаты КАК ФормаОплаты,
	|
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК Сумма,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА СУММА(ТаблицаТовары.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА СУММА(ТаблицаТовары.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	СУММА(0) КАК КОплате,
	|	СУММА(0) КАК КПоступлению,
	|	0 КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|				КОГДА &РасчетыПоЗаказам 
	|					ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности
	|				ИНАЧЕ
	|					&НаправлениеДеятельности
	|		  КОНЕЦ 	  = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|		)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И (ТаблицаТовары.КодСтроки = 0
	|		Или &РасчетыПоНакладным)
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ЗаказПоставщику,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ВЫБОР КОГДА &ПоступлениеПоЗаказу И Не &РасчетыПоНакладным ТОГДА
	|			ТаблицаТовары.ЗаказПоставщику
	|		ИНАЧЕ
	|			&Ссылка
	|		КОНЕЦ
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	Неопределено КАК ЗакупкаПоЗаказу,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ФормаОплаты КАК ФормаОплаты,
	|
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК Сумма,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА СУММА(ТаблицаТовары.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА СУММА(ТаблицаТовары.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ТаблицаТовары.СуммаСНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	СУММА(0) КАК КОплате,
	|	СУММА(0) КАК КПоступлению,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|				КОГДА &РасчетыПоЗаказам 
	|					ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности
	|				ИНАЧЕ
	|					&НаправлениеДеятельности
	|		  КОНЕЦ 	  = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|		)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И (ТаблицаТовары.КодСтроки = 0
	|		Или &РасчетыПоНакладным)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И &ТребуетсяЗалогЗаТару
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ЗаказПоставщику,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&ДатаПлатежа, День) КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ВЫБОР КОГДА &ПоступлениеПоЗаказу И Не &РасчетыПоНакладным ТОГДА
	|			ТаблицаТовары.ЗаказПоставщику
	|		ИНАЧЕ
	|			&Ссылка
	|		КОНЕЦ
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	Неопределено КАК ЗакупкаПоЗаказу,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ФормаОплаты КАК ФормаОплаты,
	|
	|	СУММА(0) КАК Сумма,
	|	СУММА(0) КАК СуммаРегл,
	|	СУММА(0) КАК СуммаУпр,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК КОплате,
	|	СУММА(0) КАК КПоступлению,
	|	0 КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|				КОГДА &РасчетыПоЗаказам 
	|					ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности
	|				ИНАЧЕ
	|					&НаправлениеДеятельности
	|		  КОНЕЦ 	  = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|		)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И (ТаблицаТовары.КодСтроки = 0
	|		Или &РасчетыПоНакладным)
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ &ТребуетсяЗалогЗаТару
	|		ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|	И НЕ &ГрафикИсполненияВДоговоре
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ЗаказПоставщику,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Период КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасшифровкаПлатежа.Заказ КАК ЗаказПоставщику,
	|	Неопределено КАК ЗакупкаПоЗаказу,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Неопределено КАК ФормаОплаты,
	|	
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
	|	ВЫБОР КОГДА ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР КОГДА НЕ &ГрафикИсполненияВДоговоре ТОГДА
	|		ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	0 КАК КПоступлению,
	|	0 КАК ЗалогЗаТару,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ВЫБОР 
	|			КОГДА &РасчетыПоЗаказам 
	|				ТОГДА ТаблицаРасшифровкаПлатежа.Заказ.НаправлениеДеятельности 	
	|			ИНАЧЕ
	|				&НаправлениеДеятельности
	|		КОНЕЦ = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЕстьОрдерныеСкладыВТЧТовары(ДокументСсылка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Поступление
	|		ПО (Поступление.Ссылка = ПоступлениеТовары.Ссылка)
	|ГДЕ
	|	ПоступлениеТовары.Ссылка = &ДокументСсылка
	|	И ПоступлениеТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И Поступление.Дата >= ПоступлениеТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Функция ТекстЗапросаТаблицаПартииТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииТоваровОрганизаций";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка КАК ДокументПоступления,
	|	ТаблицаТовары.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаТовары.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СтоимостьРегл,
	|	СУММА(ТаблицаТовары.СуммаНДСРегл) КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ИСТИНА КАК Первичное,
	|	НЕОПРЕДЕЛЕНО КАК ДокументИсточник
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &ИспользоватьПартионныйУчет
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ВидЗапасов, ТаблицаТовары.АналитикаУчетаНоменклатуры, ТаблицаТовары.АналитикаУчетаПартий,
	|	ТаблицаТовары.Номенклатура, ТаблицаТовары.Характеристика
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";  
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ПересчитатьТаблицуТоваровВВалютуРегл(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|
	|	ВЫБОР 
	|	КОГДА (ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) = ДанныеРегистра.СуммаБезНДС ТОГДА
	|		ДанныеРегистра.СуммаБезНДСРегл
	|	КОГДА ТаблицаТовары.ЭтоТараКВозврату ТОГДА
	|		ТаблицаДокументаРегл.СуммаБезНДС
	|	ИНАЧЕ
	|		0.
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.СуммаНДС = ДанныеРегистра.СуммаНДС ТОГДА
	|		ДанныеРегистра.СуммаНДСРегл
	|	КОГДА ТаблицаТовары.ЭтоТараКВозврату ТОГДА
	|		ТаблицаДокументаРегл.СуммаНДС
	|	ИНАЧЕ
	|		0.
	|	КОНЕЦ КАК СуммаНДСРегл,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ЭтоТараКВозврату ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	КОНЕЦ КАК ТипРасчетов
	|
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаТоваровПредварительная КАК ТаблицаДокументаРегл
	|	ПО
	|		ТаблицаТовары.ИдентификаторСтроки = ТаблицаДокументаРегл.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = &Ссылка
	|		И ДанныеРегистра.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|
	|ГДЕ
	|	&Валюта <> &ВалютаРегламентированногоУчета
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокументаРегл.СуммаБезНДС КАК СуммаБезНДСРегл,
	|	ТаблицаДокументаРегл.СуммаНДС КАК СуммаНДСРегл,
	|	НЕОПРЕДЕЛЕНО КАК ТипРасчетов
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаТоваровПредварительная КАК ТаблицаДокументаРегл
	|	ПО
	|		ТаблицаТовары.ИдентификаторСтроки = ТаблицаДокументаРегл.ИдентификаторСтроки
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Валюта <> &ВалютаРегламентированногоУчета
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|		)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МатериалыИРаботыВПроизводстве";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Подразделение,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ИСТИНА КАК Первичное
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Не ТаблицаТовары.СписатьНаРасходы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПартииПроизводственныхЗатрат(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПроизводственныхЗатрат";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаТовары.ВидЗапасов КАК ВидЗапасов,
	|	&Ссылка КАК ДокументПоступления,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СтоимостьРегл,
	|	СУММА(ТаблицаТовары.СуммаНДСРегл) КАК НДСРегл
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Не ТаблицаТовары.СписатьНаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры, 
	|	ТаблицаТовары.АналитикаУчетаПартий,
	|	ТаблицаТовары.ВидЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияДенежныеСредстваКонтрагент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияДенежныеСредстваКонтрагент";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	Значение(Перечисление.ХозяйственныеОперации.ОплатаПоставщикуПодотчетнымЛицом) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ДенежныеСредства,
	|	Значение(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУПодотчетногоЛица) КАК ТипДенежныхСредств,
	|	&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.Валюта КАК ВалютаПлатежа,
	|
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
	|	
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаОплаты,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаОплатыРегл,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаОплатыВВалютеПлатежа,
	|
	|	0 КАК СуммаПостоплаты,
	|	0 КАК СуммаПостоплатыРегл,	
	|	0 КАК СуммаПостоплатыВВалютеПлатежа,
	|		
	|	0 КАК СуммаПредоплаты,
	|	0 КАК СуммаПредоплатыРегл,
	|	0 КАК СуммаПредоплатыВВалютеПлатежа,
	|
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаОплатыВВалютеВзаиморасчетов,
	|	0 КАК СуммаПостоплатыВВалютеВзаиморасчетов,
	|	0 КАК СуммаПредоплатыВВалютеВзаиморасчетов,
	|
	|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУДенежныхСредств,
	|	ДанныеДокумента.Ссылка КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 

#Область ПоступлениеТоваров
	ПоступлениеТоваров =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер,
	|
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Соглашение КАК Соглашение,
	|	&Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК Заказ,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Сумма,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СуммаБезНДС,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл) КАК СуммаРегл,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СуммаРеглБезНДС,
	|	СУММА(ТаблицаТовары.СуммаСкидки) КАК СуммаСкидки,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)
	|			ТОГДА СУММА(ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл)
	|		ИНАЧЕ СУММА(ТаблицаТовары.СуммаБезНДСРегл)
	|	КОНЕЦ КАК СтоимостьРегл,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|
	|	&Валюта КАК ВалютаДокумента,
	|	СУММА(ТаблицаТовары.СуммаСНДС) КАК СуммаВВалютеДокумента,
	|	СУММА(ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) КАК СуммаБезНДСВВалютеДокумента,
	|
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВВалютеВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ ТаблицаТовары.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо))
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.ВидЗапасов.ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ ТаблицаТовары.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ
	|";
#КонецОбласти

#Область ПоступлениеРабот
	ПоступлениеРабот =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер,
	|
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&Подразделение КАК Склад,
	|	ТаблицаТовары.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Соглашение КАК Соглашение,
	|	&Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК Заказ,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Сумма,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СуммаБезНДС,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл) КАК СуммаРегл,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СуммаРеглБезНДС,
	|	СУММА(ТаблицаТовары.СуммаСкидки) КАК СуммаСкидки,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)
	|			ТОГДА СУММА(ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл)
	|		ИНАЧЕ СУММА(ТаблицаТовары.СуммаБезНДСРегл)
	|	КОНЕЦ КАК СтоимостьРегл,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|
	|	&Валюта КАК ВалютаДокумента,
	|	СУММА(ТаблицаТовары.СуммаСНДС) КАК СуммаВВалютеДокумента,
	|	СУММА(ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) КАК СуммаБезНДСВВалютеДокумента,
	|
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВВалютеВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ ТаблицаТовары.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Не ТаблицаТовары.СписатьНаРасходы
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС,
	|	ТаблицаТовары.ВидЗапасов.ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ ТаблицаТовары.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ,
	|	ТаблицаТовары.Подразделение
	|";
#КонецОбласти

#Область ПриемНаКомиссию
	ПриемНаКомиссию = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер,
	|
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Соглашение КАК Соглашение,
	|	&Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК Заказ,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|
	|	0 КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	0 КАК СуммаСкидки,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)
	|			ТОГДА СУММА(ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл)
	|		ИНАЧЕ СУММА(ТаблицаТовары.СуммаБезНДСРегл)
	|	КОНЕЦ КАК СтоимостьРегл,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|
	|	&Валюта КАК ВалютаДокумента,
	|	СУММА(ТаблицаТовары.СуммаСНДС) КАК СуммаВВалютеДокумента,
	|	СУММА(ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) КАК СуммаБезНДСВВалютеДокумента,
	|
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВВалютеВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ ТаблицаТовары.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
    |	И &ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт))
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.ВидЗапасов.ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ ТаблицаТовары.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		КОГДА &ПоступлениеПоЗаказу И &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику
	|		КОГДА &ПоступлениеПоЗаказу И Не &ПоступлениеПоНесколькимЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА &ЗаказПоставщику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ
	|";
#КонецОбласти

	ТекстЗапроса = ПоступлениеТоваров
		+ " ОБЪЕДИНИТЬ ВСЕ " + ПоступлениеРабот
		+ " ОБЪЕДИНИТЬ ВСЕ " + ПриемНаКомиссию;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеУслуг) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Подразделение КАК Подразделение,
	|
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		ИНАЧЕ ВЫБОР КОГДА &ПоступлениеПоЗаказу И НЕ &РасчетыПоНакладным
	|				ТОГДА ТаблицаТовары.ЗаказПоставщику
	|				ИНАЧЕ &Ссылка
	|			КОНЕЦ
	|	КОНЕЦ КАК ОбъектРасчетов,
	|
	|	ТаблицаТовары.СтатьяРасходов КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	ТаблицаТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ((ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ((ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРеглБезНДС,
	|
	|	&Валюта КАК Валюта,
	|	ТаблицаТовары.СуммаСНДС КАК СуммаВВалюте,
	|	ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС КАК СуммаБезНДСВВалюте,
	|		
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		ИНАЧЕ ВЫБОР КОГДА &ПоступлениеПоЗаказу И НЕ &РасчетыПоНакладным
	|				ТОГДА ТаблицаТовары.ЗаказПоставщику
	|				ИНАЧЕ &Ссылка
	|			КОНЕЦ
	|	КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	(ТаблицаТовары.СписатьНаРасходы ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо),
	|		ЗНАЧЕНиЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет))
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР 
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|		  ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет) ТОГДА
	|			ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|				&Договор
	|			КОГДА &ПоступлениеПоЗаказу ТОГДА
	|				ТаблицаТовары.ЗаказПоставщику
	|			ИНАЧЕ
	|				&Ссылка
	|           КОНЕЦ
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ИЛИ
	|	          &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо) ТОГДА
	|			ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|				&Договор
	|			ИНАЧЕ
	|				&Ссылка
	|           КОНЕЦ
	|	КОНЕЦ КАК ОбъектРасчетов,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТаблицаТовары.СуммаСНДС КАК СуммаВзаиморасчетов,
	|	ВЫБОР КОГДА (НЕ ТаблицаТовары.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)) ТОГДА
	|		ТаблицаТовары.СуммаНДСРегл
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНДСКредит,
	|
	|	НЕОПРЕДЕЛЕНО КАК ДатаВходящегоНалоговогоДокумента,
	|	&Ссылка КАК ДокументПоставки
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ТаблицаТовары.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|   &ОрганизацияПлательщикНДС
	// Учет НДС только по гривневым поступлениям, для валютных ГТД, для мелких валютных не требующих ГТД - не автоматизировано
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	)
	|   И &ВалютаРегламентированногоУчета = &ВалютаВзаиморасчетов
	|   И (НЕ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаНДСРасчетНалоговогоКредита(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСРасчетНалоговогоКредита";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|   КОНЕЦ КАК ОбъектРасчетов,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|
	|	&Ссылка КАК ДокументПоставки,
	|	ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазы.ПустаяСсылка) КАК МоментОпределенияБазыНДС,
	|
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаПоставкиТребующаяРегистрацииНН,
	|   0 КАК СуммаПоставкиНеТребующаяРегистрацииНН
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация  = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер 	  = Аналитика.Партнер
	|		И &Договор    = Аналитика.Договор
	|		И ТаблицаТовары.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ОрганизацияПлательщикНДС
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	)
	|   И &ВалютаРегламентированногоУчета = &ВалютаВзаиморасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено),
	|	ТаблицаТовары.ЗаказПоставщику
	|
	|ИМЕЮЩИЕ 
	|	СУММА(ТаблицаТовары.СуммаСНДС) <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаСерииТоваров";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                          КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                        КАК Характеристика,
	|	ТаблицаТовары.Склад                                 КАК Склад,
	|	ТаблицаТовары.Количество                            КАК Количество,
	|	ТаблицаТовары.СтатусУказанияСерий                   КАК СтатусУказанияСерий,
	|	ТаблицаТовары.Серия                                 КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ПОМЕСТИТЬ ВтТаблицаСерииТоваров
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (НЕ ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|		ИЛИ &Период < ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И (НЕ ТаблицаТовары.СтатусУказанияСерий В (4, 6, 8, 10))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Склад,
	|	ТаблицаСерии.Количество,
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий),
	|	ТаблицаСерии.Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|			И ТаблицаСерии.Склад = ТаблицаТовары.Склад
	|			И ТаблицаСерии.Назначение = ТаблицаТовары.Назначение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Поступление
	|		ПО Поступление.Ссылка = ТаблицаСерии.Ссылка
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И (НЕ ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|		ИЛИ &Период < ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Назначение,
	|	ТаблицаСерии.Склад,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Количество
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (4, 6, 8, 10)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаТовары";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаТовары.Ссылка                       КАК Ссылка,
	|	ТаблицаТовары.КодСтроки                    КАК КодСтроки,
	|	ТаблицаТовары.СтатьяРасходов               КАК СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов            КАК АналитикаРасходов,
	|	ТаблицаТовары.ЗаказПоставщику              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                 КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТовары.Характеристика               КАК Характеристика,
	|	ТаблицаТовары.Серия                        КАК Серия,
	|
	|	ТаблицаТовары.НомерГТД                     КАК НомерГТД,
	|	ТаблицаТовары.ВидЗапасов                   КАК ВидЗапасов,
	|
	|	ТаблицаТовары.Количество                   КАК Количество,
	|	ТаблицаТовары.Цена                         КАК Цена,
	|	ТаблицаТовары.Склад                        КАК Склад,
	|	ВЫБОР КОГДА ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|			И &Период >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                      КАК ИспользоватьОрдернуюСхемуПриПоступлении,
	|	ТаблицаТовары.Сумма                        КАК Сумма,
	|	ТаблицаТовары.СуммаНДС                     КАК СуммаНДС,
	|	ТаблицаТовары.СуммаСНДС                    КАК СуммаСНДС,
	|	ТаблицаТовары.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ТаблицаТовары.Назначение                   КАК Назначение,
	|	ТаблицаТовары.НалоговоеНазначение          КАК НалоговоеНазначение,
	|	ТаблицаТовары.АналитикаУчетаПартий         КАК АналитикаУчетаПартий,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			И &ВернутьМногооборотнуюТару ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТараКВозврату,
	|
	|	ВЫБОР 
	|		КОГДА &ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета И Не Суммы.СуммаБезНДСРегл ЕСТЬ NULL ТОГДА
	|			Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета И &Валюта <> &ВалютаВзаиморасчетов ТОГДА
	|			ТаблицаТовары.СуммаВзаиморасчетов
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ((ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуУПР) КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СуммаСНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета И Не Суммы.СуммаБезНДСРегл ЕСТЬ NULL ТОГДА
	|			Суммы.СуммаБезНДСРегл
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета И &Валюта <> &ВалютаВзаиморасчетов ТОГДА
	|			ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(((ТаблицаТовары.СуммаСНДС-ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуУПР) КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ((ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС + ТаблицаТовары.СуммаНДСПропорционально) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) 
	|		КОНЕЦ 
	|	) КАК СуммаБезНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, 
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ((ТаблицаТовары.СуммаНДС - ТаблицаТовары.СуммаНДСПропорционально) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2))
	|		КОНЕЦ
	|	) КАК СуммаНДСРегл,
	|
	|	ВЫРАЗИТЬ((ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуВзаиморасчетов) КАК ЧИСЛО(15,2)) КАК СуммаСНДСВзаиморасчеты,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаРучнойСкидки * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15,1)) КАК СуммаСкидки,
	|
	|	ТаблицаТовары.Подразделение                КАК Подразделение,
	|	ТаблицаТовары.СписатьНаРасходы             КАК СписатьНаРасходы,
	|	ВЫБОР 
	|		КОГДА &РасчетыПоЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПоставщику.НаправлениеДеятельности 	
	|		ИНАЧЕ
	|			&НаправлениеДеятельности
	|	КОНЕЦ  		 							   КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		ТаблицаТовары.Ссылка = Суммы.Регистратор
	|		И ТаблицаТовары.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		И (ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) = Суммы.СуммаБезНДС
	|		И ТаблицаТовары.СуммаНДС = Суммы.СуммаНДС
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтСоответствиеВидовЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтСоответствиеВидовЗапасов";
	
	СоответствиеВидовЗапасов = ИнициализироватьВидыЗапасов(Запрос.Параметры);
	Запрос.УстановитьПараметр("СоответствиеВидовЗапасов", СоответствиеВидовЗапасов);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СоответствиеВидовЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	СоответствиеВидовЗапасов.НовыйВидЗапасов КАК НовыйВидЗапасов
	|ПОМЕСТИТЬ ВтСоответствиеВидовЗапасов
	|ИЗ
	|	&СоответствиеВидовЗапасов КАК СоответствиеВидовЗапасов
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТоварыОрганизацийКОформлению(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТоварыОрганизацийКОформлению";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР КОГДА
	|		ТоварыОрганизацийКОформлению.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ДокументПоступленияЗаполнен
	|ПОМЕСТИТЬ ВтТоварыОрганизацийКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКОформлению КАК ТоварыОрганизацийКОформлению
	|ГДЕ
	|	ТоварыОрганизацийКОформлению.Регистратор = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаКурсыВалют";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаТовары";
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.Номенклатура           КАК Номенклатура,
	|	Товары.Характеристика         КАК Характеристика,
	|	Товары.ВидЦеныПоставщика      КАК ВидЦеныПоставщика,
	|	Товары.Упаковка               КАК Упаковка,
	|	ВЫРАЗИТЬ(Товары.Цена
	|				* ВЫБОР
	|					КОГДА
	|						&ЦенаВключаетНДСДокумента И НЕ &ЦенаВключаетНДССоглашения
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|							ТОГДА
	|								1
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|							ТОГДА
	|								100/120
    |							КОГДА
    |								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
    |							ТОГДА
    |								100/114
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|							ТОГДА
	|								100/107
	|						КОНЕЦ
	|					КОГДА
	|						НЕ &ЦенаВключаетНДСДокумента И &ЦенаВключаетНДССоглашения
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|							ТОГДА
	|								1
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|							ТОГДА
	|								1.20
    |							КОГДА
    |								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
    |							ТОГДА
    |								1.14
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|							ТОГДА
	|								1.07
	|						КОНЕЦ
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ
	|				* ВЫБОР
	|					КОГДА
	|						&Валюта <> &ВалютаСоглашения
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыСоглашения.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыВалютыСоглашения.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|							ТОГДА 
	|								(КурсыВалюты.Курс * КурсыВалютыСоглашения.Кратность)
	|								/ (КурсыВалютыСоглашения.Курс * КурсыВалюты.Кратность)
	|							ИНАЧЕ
	|								0
	|						КОНЕЦ
	|					ИНАЧЕ 
	|						1
	|				КОНЕЦ КАК ЧИСЛО(15, 2))
	|	КАК Цена
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|ПО
	|	КурсыВалюты.Валюта = &Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалютыСоглашения
	|ПО
	|	КурсыВалютыСоглашения.Валюта = &ВалютаСоглашения
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &РегистрироватьЦеныПоставщика
	|	И (Товары.КодСтроки = 0 ИЛИ НЕ Товары.ЗаказПоставщику.РегистрироватьЦеныПоставщика)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ТоварыСРазличнымиУпаковкамиЦенами";
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура                    КАК Номенклатура,
	|	Товары.Характеристика                  КАК Характеристика,
	|	Товары.ВидЦеныПоставщика               КАК ВидЦеныПоставщика,
	|	СРЕДНЕЕ(
	|		Товары.Цена / ВЫБОР
	|				КОГДА
	|					Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА
	|					&ТекстЗапросаКоэффициентУпаковки
	|				ИНАЧЕ
	|					1
	|			КОНЕЦ
	|	) КАК ЦенаЗаБазовуюЕдиницу,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка)  КАК КоличествоРазличныхУпаковок
	|ПОМЕСТИТЬ
	|	ТоварыСРазличнымиУпаковкамиЦенами
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦеныПоставщика
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЦеныНоменклатурыПоставщиков";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ТоварыСРазличнымиУпаковкамиЦенами", ТекстыЗапроса) Тогда
		ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(Товары.НоменклатураПоставщика) КАК НоменклатураПоставщика,
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	Товары.Характеристика                   КАК Характеристика,
	|	Товары.ВидЦеныПоставщика                КАК ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта         КАК Валюта,
	|	&Период                                 КАК Период,
	|	&Партнер                                КАК Партнер,
	|	МИНИМУМ(ВЫБОР
	|				КОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|				ТОГДА
	|					ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ИНАЧЕ
	|					Товары.Упаковка
	|				КОНЕЦ
	|			) КАК Упаковка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(ВЫБОР
	|				КОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|				ТОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.ЦенаЗаБазовуюЕдиницу
	|				ИНАЧЕ
	|					Товары.Цена
	|				КОНЕЦ
	|			* ВЫБОР
	|				КОГДА
	|					&Валюта <> Товары.ВидЦеныПоставщика.Валюта
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|							/ (КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				ИНАЧЕ 
	|					1
	|			КОНЕЦ) КАК Число(15,2)) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТоварыСРазличнымиУпаковкамиЦенами КАК ТоварыСРазличнымиУпаковкамиЦенами
	|ПО
	|	Товары.Номенклатура = ТоварыСРазличнымиУпаковкамиЦенами.Номенклатура
	|	И Товары.Характеристика = ТоварыСРазличнымиУпаковкамиЦенами.Характеристика
	|	И Товары.ВидЦеныПоставщика = ТоварыСРазличнымиУпаковкамиЦенами.ВидЦеныПоставщика
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|ПО
	|	КурсыВалюты.Валюта = &Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
	|ПО
	|	КурсыВалютыЦены.Валюта = Товары.ВидЦеныПоставщика.Валюта
	|ГДЕ
	|	Не Товары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуВзаиморасчетов") Тогда
		Возврат;
	КонецЕсли;

	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта, Запрос.Параметры.ВалютаВзаиморасчетов, Запрос.Параметры.Период);
		
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",            Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",           Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуВзаиморасчетов", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПоступлениеТоваровУслуг";
	
	ЗначенияПараметров = Новый Структура();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ПоступлениеПоЗаказу", "ТаблицаТовары.Ссылка.ПоступлениеПоЗаказам");
	
	Если ИмяРегистра = "ЗаказыПоставщикам" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru='В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';uk='У документі %ПолноеИмяДокумента% не реалізована адаптація тексту запиту формування рухів по регістру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Поступление товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Поступление товаров';uk='Надходження товарів'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;

	// Приходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриходнаяНакладная";
	КомандаПечати.Представление = НСтр("ru='Приходная накладная';uk='Прибуткова накладна'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 20;

	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru='Акт об оказании услуг';uk='Акт про надання послуг'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 30;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		// Акт выполненных работ (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьАктВыполненныхРаботMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор  = "АктMicrosoftWord";
		КомандаПечати.Представление  = УправлениеПечатьюУТВызовСервера.ПредставлениеКомандыПечатьАктВыполненныхРаботMicrosoftWord(Ложь);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 40;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьАктВыполненныхРаботMicrosoftWordАльтернативныйЯзык";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор  = "АктMicrosoftWordАльтернативныйЯзык";
		КомандаПечати.Представление  = УправлениеПечатьюУТВызовСервера.ПредставлениеКомандыПечатьАктВыполненныхРаботMicrosoftWord(Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 50;
		
	КонецЕсли;

	// Задание на размещение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров";
	КомандаПечати.Идентификатор = "ЗаданиеНаОтборРазмещениеТовара";
	КомандаПечати.Представление = НСтр("ru='Задание на размещение товаров';uk='Завдання на розміщення товарів'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИмяФормы", "ЗаданиеНаРазмещение");
	КомандаПечати.Порядок = 60;

	// Приходный ордер (М-4)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "М4";
	КомандаПечати.Представление = НСтр("ru='Приходный ордер (М-4)';uk='Прибутковий ордер (М-4)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 70;
	

	Если ПраваПользователяПовтИсп.ПечатьЭтикетокИЦенников() Тогда
		// Ценники
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокИЦенников";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru='Ценники';uk='Цінники'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 80;

		// Этикетки
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокИЦенников";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "Этикетки";
		КомандаПечати.Представление = НСтр("ru='Этикетки';uk='Етикетки'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 90;
	КонецЕсли;
	
	// Авансовый отчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.АвансовыйОтчет";
	КомандаПечати.Идентификатор = "АвансовыйОтчет";
	КомандаПечати.Представление = НСтр("ru='Авансовый отчет';uk='Авансовий звіт'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 75;
	
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Накладная';uk='Накладна'"), СформироватьПечатнуюФормуНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,,Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриходнаяНакладная", НСтр("ru='Приходная накладная';uk='Прибуткова накладна'"), СформироватьПечатнуюФормуПриходнаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,,,Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ПоступлениеТоваровУслуг", МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", "Акт об оказании услуг", Обработки.ПечатьАктОбОказанииУслуг.СформироватьПечатнуюФормуАктОбОказанииУслуг(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода),,,,Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АвансовыйОтчет",
			НСтр("ru='Авансовый отчет';uk='Авансовий звіт'"),
			Документы.АвансовыйОтчет.СформироватьПечатнуюФормуАвансовогоОтчета(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыОтборРазмещениеТоваров(ПараметрыПечати, МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслугТовары.Склад КАК Склад
	|ПОМЕСТИТЬ СкладыДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|	И ПоступлениеТоваровУслугТовары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ПоступлениеТоваровУслугТовары.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыДокумента.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(СкладыДокумента.Ссылка) КАК СсылкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СкладыДокумента.Склад) КАК СкладПредставление,
	|	СкладыДокумента.Склад КАК Склад,
	|	"""" КАК ПомещениеПредставление,
	|	Поступление.Дата КАК Дата,
	|	Поступление.Номер КАК Номер,
	|	ЛОЖЬ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА СкладыДокумента.Склад.ИспользоватьАдресноеХранениеСправочно
	|				И (НЕ СкладыДокумента.Склад.ИспользоватьАдресноеХранение
	|					ИЛИ Поступление.Дата < СкладыДокумента.Склад.ДатаНачалаАдресногоХраненияОстатков)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяСправочноеХранение,
	|	ВЫБОР
	|		КОГДА СкладыДокумента.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И Поступление.Дата >= СкладыДокумента.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НарушенаОрдернаяСхема,
	|	СкладыДокумента.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	СкладыДокумента.Склад.ИспользованиеРабочихУчастков КАК ИспользованиеРабочихУчастков
	|ИЗ
	|	СкладыДокумента КАК СкладыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Поступление
	|		ПО (Поступление.Ссылка = СкладыДокумента.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок КАК НаборУпаковок,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Поступление
	|		ПО (Поступление.Ссылка = ТаблицаТовары.Ссылка)
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.СтатусУказанияСерий В (2, 4, 6, 8, 10)
	|	И (НЕ ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|			ИЛИ Поступление.Дата < ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки),
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ВЫРАЗИТЬ(ТаблицаСерии.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок,
	|	ТаблицаСерии.Склад,
	|	ТаблицаСерии.Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|			И ТаблицаСерии.Склад = ТаблицаТовары.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Поступление
	|		ПО (Поступление.Ссылка = ТаблицаСерии.Ссылка)
	|ГДЕ
	|	ТаблицаСерии.Ссылка В(&МассивОбъектов)
	|	И ТаблицаСерии.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (НЕ ТаблицаСерии.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|			ИЛИ Поступление.Дата < ТаблицаСерии.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Склад,
	|	ТаблицаСерии.Количество
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8, 10)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТовары.НаборУпаковок КАК НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровСуммированная
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ТаблицаТовары.Ссылка.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровСуммированная.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровСуммированная.Характеристика КАК Характеристика,
	|	ТаблицаТоваровСуммированная.Серия КАК Серия,
	|	ТаблицаТоваровСуммированная.Номенклатура.Код КАК Код,
	|	ТаблицаТоваровСуммированная.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТоваровСуммированная.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ТаблицаТоваровСуммированная.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ТаблицаТоваровСуммированная.Серия.Наименование КАК ПредставлениеСерии,
	|	ТаблицаТоваровСуммированная.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбхода,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбходаДополнительнаяЯчейка,
	|	ПРЕДСТАВЛЕНИЕ(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток) КАК ПредставлениеРабочегоУчастка,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.Код, """") КАК ОсновнаяЯчейкаПредставление,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.Код, """") КАК ЯчейкаПредставление,
	|	ТаблицаТоваровСуммированная.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
	|	ТаблицаТоваровСуммированная.Количество КАК КоличествоУпаковок,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Упаковка) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = ТаблицаТоваровСуммированная.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения)) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (ТаблицаТоваровСуммированная.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				ИЛИ ТаблицаТоваровСуммированная.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
	|			И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
	|			И ТаблицаТоваровСуммированная.Количество >= &ТекстЗапросаКоэффициентУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	КоличествоВУпаковке УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия.Наименование КАК ПредставлениеСерии,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТовары.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТовары.Склад)
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|	И НЕ ТаблицаТовары.Серия ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкиНоменклатуры",
			"ТаблицаТоваровСуммированная.Номенклатура"));
			
	Запрос.УстановитьПараметр("МассивОбъектов", МассивДокументов); 
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[1];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[4];
	РезультатПоУпаковкам 		= МассивРезультатов[5];
	РезультатПоСериям 			= МассивРезультатов[6];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти, РезультатПоУпаковкам, РезультатПоСериям",
													РезультатПоШапке,
													РезультатПоТабличнойЧасти,
													РезультатПоУпаковкам,
													РезультатПоСериям);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Функция получает данные для формирования печатной формы  М-4
//
Функция ПолучитьДанныеДляПечатнойФормыМ4(ПараметрыПечати, МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка               КАК Ссылка,
	|	ДанныеДокументов.Дата                 КАК Дата,
	|	ДанныеДокументов.Валюта               КАК Валюта,
	|	ДанныеДокументов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);
	
	Запрос.Текст = "
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка                     КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Номер                      КАК Номер,
	|	ПоступлениеТоваровУслуг.Дата                       КАК Дата,
	|	ПоступлениеТоваровУслуг.Дата                       КАК ДатаСоставления,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента    КАК НомерСопроводительногоДокумента,
	|	ПоступлениеТоваровУслуг.Контрагент                 КАК Поставщик,
	|	ПоступлениеТоваровУслуг.Организация                КАК Организация,
	|	ПоступлениеТоваровУслуг.Организация.Префикс        КАК Префикс,
	|	ПоступлениеТоваровУслуг.БанковскийСчетОрганизации  КАК БанковскийСчетОрганизации,
	|
	|	ПоступлениеТоваровУслуг.Валюта                     КАК Валюта,
	|	ПоступлениеТоваровУслуг.Принял        			   КАК МОЛ,
	|	ПоступлениеТоваровУслуг.ПринялДолжность            КАК ДолжностьМОЛ
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ПоступлениеТоваровУслуг.Ссылка = ДанныеДокументов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка                                  КАК Ссылка,
	|	ТаблицаТоваров.Склад                                   КАК Склад,
	|	ТаблицаТоваров.Склад.Наименование                      КАК СкладНаименование,
	|	ТаблицаТоваров.Номенклатура                            КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.НаименованиеПолное         КАК ТоварНаименование,
	|	
	|	ВЫБОР КОГДА &КолонкаКодов = ""Артикул"" ТОГДА
	|		ТаблицаТоваров.Номенклатура.Артикул
	|	ИНАЧЕ
	|		ТаблицаТоваров.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	
	|	ТаблицаТоваров.ЕдиницаИзмерения.Представление          КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Код                    КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТоваров.Характеристика.НаименованиеПолное       КАК Характеристика,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаТоваров.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|
	|	ТаблицаТоваров.КоличествоУпаковок                      КАК Количество,
	|	ТаблицаТоваров.КоличествоУпаковок                      КАК КоличествоПринято,
	|	ВЫБОР КОГДА ТаблицаТоваров.Количество <> 0 ТОГДА 
	|		ТаблицаТоваров.СуммаБезНДС / ТаблицаТоваров.КоличествоУпаковок
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                                  КАК Цена,
	|	ТаблицаТоваров.СуммаБезНДС                             КАК СуммаБезНДС,
	|	ТаблицаТоваров.СуммаНДС                                КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаБезНДС + ТаблицаТоваров.СуммаНДС   КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаТоваров.Ссылка.ВернутьМногооборотнуюТару
	|			И ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаТоваров.НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка, Склад
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
			
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Функция получения данных печатной формы Акт документа
//
Функция ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|   ИСТИНА КАК УчитыватьНДС,
	|   Товары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов) И Товары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|СГРУППИРОВАТЬ ПО Товары.Ссылка 
	|;
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка              КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Номер               КАК Номер,
	|	ПоступлениеТоваровУслуг.Дата                КАК Дата,
	|	ПоступлениеТоваровУслуг.Партнер             КАК Партнер,
	|	ПоступлениеТоваровУслуг.Организация         КАК Контрагент,
	|	ПоступлениеТоваровУслуг.Контрагент          КАК Организация,
	|	ПоступлениеТоваровУслуг.Организация.Префикс КАК Префикс,
	|	ПоступлениеТоваровУслуг.Валюта              КАК Валюта,
	|	ПоступлениеТоваровУслуг.ЦенаВключаетНДС     КАК ЦенаВключаетНДС,
	|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС,
	|	"""" КАК ДополнительнаяИнформация,
	|	"""" КАК ДополнительнаяИнформацияШапки,
	|	ПоступлениеТоваровУслуг.Договор КАК Договор,
	|	ПоступлениеТоваровУслуг.Договор.НаименованиеДляПечати             		КАК ДоговорНаименованиеДляПечати,
	|	ЛОЖЬ                                                               		КАК ПечататьЗаказ,
	|	ПоступлениеТоваровУслуг.ЗаказПоставщику 								КАК Заказ,
	|	ПоступлениеТоваровУслуг.Соглашение                                   	КАК Соглашение,
	|	ТаблицаОтветственныеЛица.РуководительНаименование                       КАК РуководительКонтрагента,
	|	ТаблицаОтветственныеЛица.РуководительДолжность                          КАК ДолжностьРуководителяКонтрагента,
	|	""""                                                                	КАК РуководительОрганизации,
	|	""""                                                                	КАК ДолжностьРуководителяОрганизации,
	|	""""                     												КАК ПредставительОрганизации,
	|	""""            														КАК ПредставительОрганизацииДолжность,
	|	""""                     												КАК ПредставительКонтрагента,
	|	""""                                                                	КАК ПредставительОрганизацииПолучателя,
	|	""""                                                                	КАК ПредставительОрганизацииПолучателяДолжность,
	|	""""                    												КАК МестоСоставленияДокумента,
	|	ПоступлениеТоваровУслуг.БанковскийСчетОрганизации                    	КАК БанковскийСчетКонтрагента,
	|	ПоступлениеТоваровУслуг.БанковскийСчетКонтрагента                    	КАК БанковскийСчетОрганизации
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ПоступлениеТоваровУслуг.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
	|		ПО ПоступлениеТоваровУслуг.Ссылка = ТаблицаУчитыватьНДС.Ссылка
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК УслугаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                                           КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул                                       КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование                              КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика                                             КАК Характеристика,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное                          КАК ХарактеристикаНаименованиеПолное,
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) = 1 
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Наименование
	|	КОНЕЦ                                                                      КАК Упаковка,
	|	ВложенныйЗапрос.СтавкаНДС                                                  КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                                                       КАК Цена,
	|	ВложенныйЗапрос.Количество                                                 КАК Количество,
	|	ВложенныйЗапрос.Сумма                                                      КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС                                                   КАК СуммаНДС,
	|	ВложенныйЗапрос.СуммаСкидки                                                КАК СуммаСкидки,
	|	ВложенныйЗапрос.СуммаБезСкидки                                             КАК СуммаБезСкидки,
	|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки,
	|	Ложь                                                                       КАК ЭтоВозвратнаяТара
	|ИЗ (
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|
	|
	|		ВЫБОР КОГДА ПоступлениеТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			&ТекстЗапросаКоэффициентУпаковки2
	|		КОНЕЦ КАК Коэффициент,
	|		&ТекстЗапросаЕдиницаИзмерения 						КАК ЕдиницаИзмерения,
	|
	|		ПоступлениеТоваровУслуг.ПроцентРучнойСкидки         КАК ПроцентСкидки,
	|		ПоступлениеТоваровУслуг.Характеристика              КАК Характеристика,
	|		ПоступлениеТоваровУслуг.Упаковка                    КАК Упаковка,
	|		ПоступлениеТоваровУслуг.СтавкаНДС                   КАК СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена                        КАК Цена,
	|		ПоступлениеТоваровУслуг.КоличествоУпаковок          КАК Количество,
	|		ПоступлениеТоваровУслуг.Сумма                       КАК Сумма,
	|		ПоступлениеТоваровУслуг.СуммаРучнойСкидки           КАК СуммаСкидки,
	|		ПоступлениеТоваровУслуг.Сумма +
	|		ПоступлениеТоваровУслуг.СуммаРучнойСкидки           КАК СуммаБезСкидки,
	|		ПоступлениеТоваровУслуг.СуммаНДС                    КАК СуммаНДС,
	|		ПоступлениеТоваровУслуг.НомерСтроки                 КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В (&МассивДокументов)
	|		И ПоступлениеТоваровУслуг.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ
	|	СУММА(СуммаСкидки)
	|ПО
	|	Ссылка
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВложенныйЗапрос.Упаковка",
			"ВложенныйЗапрос.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ПоступлениеТоваровУслуг.Упаковка",
			"ПоступлениеТоваровУслуг.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ПоступлениеТоваровУслуг.Упаковка",
			"ПоступлениеТоваровУслуг.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		МассивРезультатов[1],
		МассивРезультатов[2]
	);
	
КонецФункции // ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг


//  Функция СформироватьПечатнуюФормуНакладная(МассивОбъектов, ОбъектыПечати)
Функция СформироватьПечатнуюФормуНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)	
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|   ИСТИНА КАК УчитыватьНДС,
	|   Товары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов) И Товары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|СГРУППИРОВАТЬ ПО Товары.Ссылка 
	|;
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка                                   КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Номер                                    КАК Номер,
	|	ПоступлениеТоваровУслуг.Дата                                     КАК Дата,
	|	ПоступлениеТоваровУслуг.Партнер                                  КАК Партнер,
	|	ПоступлениеТоваровУслуг.Контрагент                               КАК Поставщик,
	|	ПоступлениеТоваровУслуг.Организация                              КАК Организация,
	|	ПоступлениеТоваровУслуг.Организация.Префикс                      КАК Префикс,
	|	ПоступлениеТоваровУслуг.Валюта                                   КАК Валюта,
	|	ПоступлениеТоваровУслуг.ЦенаВключаетНДС                          КАК ЦенаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Принял                      			 КАК ПолучениеПроизвел,
	|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
	|		ПО ПоступлениеТоваровУслуг.Ссылка = ТаблицаУчитыватьНДС.Ссылка
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                                           КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул                                       КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование                              КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное                          КАК Характеристика,
	|	ВложенныйЗапрос.Серия.Наименование							               КАК Серия,
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) = 1
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Наименование
	|	КОНЕЦ                                                                      КАК Упаковка,
	|	ВложенныйЗапрос.СтавкаНДС                                                  КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                                                       КАК Цена,
	|	ВложенныйЗапрос.Количество                                                 КАК Количество,
	|	ВложенныйЗапрос.Сумма                                                      КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС                                                   КАК СуммаНДС,
	|	ВложенныйЗапрос.СуммаСкидки                                                КАК СуммаСкидки,
	|	ВложенныйЗапрос.СуммаБезСкидки                                             КАК СуммаБезСкидки,
	|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			ВложенныйЗапрос.Ссылка.ВернутьМногооборотнуюТару
	|			И ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ИЗ (
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|
	|		ВЫБОР КОГДА ПоступлениеТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			&ТекстЗапросаКоэффициентУпаковки2
	|		КОНЕЦ КАК Коэффициент,
	|
	|		ВЫБОР КОГДА ПоступлениеТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|			ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			ПоступлениеТоваровУслуг.Упаковка
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|
	|		ПоступлениеТоваровУслуг.ПроцентРучнойСкидки         КАК ПроцентСкидки,
	|		ПоступлениеТоваровУслуг.Характеристика              КАК Характеристика,
	|		ПоступлениеТоваровУслуг.Серия              			КАК Серия,
	|		ПоступлениеТоваровУслуг.Упаковка                    КАК Упаковка,
	|		ПоступлениеТоваровУслуг.СтавкаНДС                   КАК СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена                        КАК Цена,
	|		ПоступлениеТоваровУслуг.КоличествоУпаковок          КАК Количество,
	|		ПоступлениеТоваровУслуг.Сумма                       КАК Сумма,
	|		ПоступлениеТоваровУслуг.СуммаРучнойСкидки           КАК СуммаСкидки,
	|		ПоступлениеТоваровУслуг.Сумма +
	|		ПоступлениеТоваровУслуг.СуммаРучнойСкидки           КАК СуммаБезСкидки,
	|		ПоступлениеТоваровУслуг.СуммаНДС                    КАК СуммаНДС,
	|		ПоступлениеТоваровУслуг.НомерСтроки                 КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В (&МассивДокументов)
	|		И ПоступлениеТоваровУслуг.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ
	|	СУММА(СуммаСкидки)
	|ПО
	|	Ссылка
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВложенныйЗапрос.Упаковка",
			"ВложенныйЗапрос.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ПоступлениеТоваровУслуг.Упаковка",
			"ПоступлениеТоваровУслуг.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", 				МассивОбъектов);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	ДанныеПечати			= МассивРезультатов[1].Выбрать();
	ВыборкаПоДокументам 	= МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в накладной только услуги - перейдем к следующему документу
		
		Если НайденСледующий Тогда
			ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
			ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ВыборкаПоТоварам, ИспользоватьРучныеСкидки, КодЯзыкаПечать);
			ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
			ВыборкаПоТоварам.Сбросить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваровУслуг.ПФ_MXL_ПоступлениеТоваров", КодЯзыкаПечать);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Поступление товаров';uk='Надходження товарів'", КодЯзыкаПечать), КодЯзыкаПечать));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
		СтруктураДанныхПоставщик = Новый Структура;
		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.Дата), "ПолноеНаименование");
		СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		СтруктураДанныхПоставщик.Вставить("Поставщик", ДанныеПечати.Поставщик);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
		СтруктураДанныхПокупатель = Новый Структура;
		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование");
		СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		СтруктураДанныхПокупатель.Вставить("Получатель", ДанныеПечати.Организация);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы Товары
		
		Если ЕстьСкидки Тогда
			ОбластьКолонкаТовар = Макет.Область("ТоварСоСкидкой");
		Иначе
			ОбластьКолонкаТовар = Макет.Область("Товар");
		КонецЕсли;
			
		Если Не ВыводитьКоды Тогда
			
			Если ЕстьСкидки Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
			Иначе
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСоСкидкой");
			
			СтруктураЗаголовокСкидки = Новый Структура("Скидка, СуммаБезСкидки", 
				ЗаголовокСкидки.Скидка,
				ЗаголовокСкидки.СуммаСкидки);
			ОбластьДанных.Параметры.Заполнить(СтруктураЗаголовокСкидки);
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьДанных.Параметры, ФормированиеПечатныхФорм.СформироватьЗаголовкиДляСуммовыхПоказателей(ДанныеПечати, КодЯзыкаПечать));
			
		ТабличныйДокумент.Вывести(ОбластьНомера);
			
		Если ВыводитьКоды Тогда
			СтруктураДанныхКоды = Новый Структура("ИмяКолонкиКодов", КолонкаКодов);
			ОбластьКодов.Параметры.Заполнить(СтруктураДанныхКоды);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
			
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСоСкидкой");
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
			
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок    = 0;
		НомерСтроки    = 0;
		ВсегоБезСкидок = 0;
		
		// Выводим строки таблицы Товары
			
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			СтруктураДанныхНомерСтроки = Новый Структура("НомерСтроки", НомерСтроки);
			ОбластьНомера.Параметры.Заполнить(СтруктураДанныхНомерСтроки);
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				СтруктураДанныхКоды = Новый Структура("Артикул", ВыборкаПоТоварам[КолонкаКодов]);
				ОбластьКодов.Параметры.Заполнить(СтруктураДанныхКоды);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьТовар.Параметры.Заполнить(ВыборкаПоТоварам);
			
			Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоТоварам.ТоварНаименованиеПолное,
				ВыборкаПоТоварам.Характеристика,
				,
				ВыборкаПоТоварам.Серия,
				,
				ВыборкаПоТоварам.ЭтоВозвратнаяТара,
				КодЯзыкаПечать
			);
			СтруктураДанныхТовар = Новый Структура("Товар", Товар);
			ОбластьТовар.Параметры.Заполнить(СтруктураДанныхТовар);
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);

			ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
			Если ЗаголовокСкидки.ЕстьСкидки Тогда
				СтруктураДанныхСуммаСкидки = Новый Структура("СуммаСкидки", 
					?(ЗаголовокСкидки.ТолькоНаценка,- ВыборкаПоТоварам.СуммаСкидки,ВыборкаПоТоварам.СуммаСкидки));
				ОбластьДанных.Параметры.Заполнить(СтруктураДанныхСуммаСкидки);
			КонецЕсли;

			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Сумма          = Сумма          + ВыборкаПоТоварам.Сумма;
			СуммаНДС       = СуммаНДС       + ВыборкаПоТоварам.СуммаНДС;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок    = ВсегоСкидок    + ВыборкаПоТоварам.СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаПоТоварам.СуммаБезСкидки;
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСоСкидкой");
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		СтруктураДанныхВсегоСкидки = Новый Структура;
		Если ЕстьСкидки Тогда
			СтруктураДанныхВсегоСкидки.Вставить("ВсегоСкидок", ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок));
			СтруктураДанныхВсегоСкидки.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
		КонецЕсли;
		СтруктураДанныхВсегоСкидки.Вставить("Всего",  ФормированиеПечатныхФорм.ФорматСумм(Сумма));
		ОбластьДанных.Параметры.Заполнить(СтруктураДанныхВсегоСкидки);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Выводим ИтогоНДС
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			Если ЕстьСкидки Тогда
				
				ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|НомерСтроки");
				ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|КолонкаКодов");
				ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|ТоварСоСкидкой");
				ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|ДанныеСоСкидкой");
				
			Иначе
				
				ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
				ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
				ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
				ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			СтруктураДанныхНДС = Новый Структура;
			СтруктураДанныхНДС.Вставить("ВсегоНДС", СуммаНДС);
			СтруктураДанныхНДС.Вставить("НДС", ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'", КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'", КодЯзыкаПечать)));
			ОбластьДанных.Параметры.Заполнить(СтруктураДанныхНДС);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если Не ДанныеПечати.ЦенаВключаетНДС Тогда
				
				ТабличныйДокумент.Вывести(ОбластьНомера);	
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;	
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				
				ОбластьДанных.Параметры.НДС = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'", КодЯзыкаПечать);
				ОбластьДанных.Параметры.ВсегоНДС = Сумма+СуммаНДС;
				ТабличныйДокумент.Присоединить(ОбластьДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Выводим Сумму прописью
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Всего наименований %1, на сумму %2';uk='Всього найменувань %1, на суму %2'", КодЯзыкаПечать),
			ВыборкаПоТоварам.Количество(),
			ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
	
		СтруктураДанныхИтоговаяСтрока = Новый Структура;
		СтруктураДанныхИтоговаяСтрока.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		СтруктураДанныхИтоговаяСтрока.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта, , КодЯзыкаПечать));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхИтоговаяСтрока);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		Если ЗначениеЗаполнено(ДанныеПечати.ПолучениеПроизвел) Тогда
			СтруктураДанныхПолучениеПроизвел = Новый Структура;
			СтруктураДанныхПолучениеПроизвел.Вставить("ПолучениеПроизвел", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ПолучениеПроизвел, ДанныеПечати.Дата));
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПолучениеПроизвел);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище
//
Функция ДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура   КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|
	|	ВЫБОР КОГДА ПоступлениеТоваровУслугТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПоступлениеТоваровУслугТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|
	|	МИНИМУМ(ПоступлениеТоваровУслугТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА ПоступлениеТоваровУслугТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|			ПоступлениеТоваровУслугТовары.КоличествоУпаковок * (ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1))
	|		ИНАЧЕ
	|			ПоступлениеТоваровУслугТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
	|		ПО ЦеныНоменклатуры.Номенклатура   = ПоступлениеТоваровУслугТовары.Номенклатура
	|		 И ЦеныНоменклатуры.Характеристика = ПоступлениеТоваровУслугТовары.Характеристика
	|		 И ЦеныНоменклатуры.ВидЦены        = ПоступлениеТоваровУслугТовары.Ссылка.Склад.РозничныйВидЦены
	|	
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ВЫБОР КОГДА ПоступлениеТоваровУслугТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПоступлениеТоваровУслугТовары.Упаковка
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Организация            КАК Организация,
	|	ПоступлениеТоваровУслуг.Склад                  КАК Склад,
	|	ПоступлениеТоваровУслуг.Склад.РозничныйВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ПоступлениеТоваровУслугТовары.Упаковка",
			"ПоступлениеТоваровУслугТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатуры.Упаковка",
			"ЦеныНоменклатуры.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивВидовЦен    = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивВидовЦен.Количество() = 1,    МассивВидовЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище
//
Функция ДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура   КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|
	|	ВЫБОР КОГДА ПоступлениеТоваровУслугТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПоступлениеТоваровУслугТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|
	|	МИНИМУМ(ПоступлениеТоваровУслугТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА ПоступлениеТоваровУслугТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|			ПоступлениеТоваровУслугТовары.КоличествоУпаковок * (ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1))
	|		ИНАЧЕ
	|			ПоступлениеТоваровУслугТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
	|		ПО ЦеныНоменклатуры.Номенклатура   = ПоступлениеТоваровУслугТовары.Номенклатура
	|		 И ЦеныНоменклатуры.Характеристика = ПоступлениеТоваровУслугТовары.Характеристика
	|		 И ЦеныНоменклатуры.ВидЦены        = ПоступлениеТоваровУслугТовары.Ссылка.Склад.РозничныйВидЦены
	|	
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ВЫБОР КОГДА ПоступлениеТоваровУслугТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПоступлениеТоваровУслугТовары.Упаковка
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Организация            КАК Организация,
	|	ПоступлениеТоваровУслуг.Склад                  КАК Склад,
	|	ПоступлениеТоваровУслуг.Склад.РозничныйВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ПоступлениеТоваровУслугТовары.Упаковка",
			"ПоступлениеТоваровУслугТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатуры.Упаковка",
			"ЦеныНоменклатуры.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивВидовЦен    = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивВидовЦен.Количество() = 1,    МассивВидовЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

Функция СформироватьПечатнуюФормуПриходнаяНакладная(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)	
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ПриходнаяНакладная";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ИспользованиеУпаковок = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Организация КАК Организация,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	Документы.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Документы.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	Документы.Организация.Префикс КАК Префикс
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Склад КАК Склад,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное КАК Номенклатура,
	|	Товары.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА
	|			Товары.Ссылка.ВернутьМногооборотнуюТару
	|			И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	Товары.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваровУслуг.ПФ_MXL_ПриходнаяНакладная", КодЯзыкаПечать);
	
	Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
	ШиринаУдаленныхКолонок = 0;
	Если КолонкаКодов <> "Артикул" Тогда
		ШиринаУдаленныхКолонок = ШиринаУдаленныхКолонок + Макет.Область("Артикул").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("Артикул"), Смещать);
	КонецЕсли;
	Если КолонкаКодов<>"Код" Тогда
		ШиринаУдаленныхКолонок = ШиринаУдаленныхКолонок + Макет.Область("Код").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("Код"), Смещать);
	КонецЕсли;
	
	Если Не ИспользованиеУпаковок Тогда
		ШиринаУдаленныхКолонок = ШиринаУдаленныхКолонок + Макет.Область("УпаковкаКоличество").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("УпаковкаКоличество"), Смещать);
		ШиринаУдаленныхКолонок = ШиринаУдаленныхКолонок + Макет.Область("УпаковкаПредставление").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("УпаковкаПредставление"), Смещать);
	КонецЕсли;
	ОбластьПервойКолонкиТоваров = Макет.Область("ПерваяКолонкаТовара");
	ОбластьПервойКолонкиТоваров.ШиринаКолонки = ОбластьПервойКолонкиТоваров.ШиринаКолонки + ШиринаУдаленныхКолонок;
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ДанныеПечати = ПакетЗапросов[0].Выбрать();
	ВыборкаПоДокументам = ПакетЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Создание массива для проверки: какие из докуметов не попали в выборку
	МассивПроверки = Новый Массив;
	Для Каждого Ссылка Из МассивОбъектов Цикл
		МассивПроверки.Добавить(Ссылка);
	КонецЦикла;
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс, Представление, ПредставлениеРаспоряжения");
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(Новый Структура("Ссылка", ДанныеПечати.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПроверки.Удалить(МассивПроверки.Найти(ДанныеПечати.Ссылка));
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ДанныеПечати);
		РеквизитыДокумента.ПредставлениеРаспоряжения = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, НСтр("ru='Поступление товаров';uk='Надходження товарів'", КодЯзыкаПечать), КодЯзыкаПечать);
		
		ВыборкаПоСкладам = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			Область = Макет.ПолучитьОбласть("Заголовок");
			Область.Параметры.Заполнить(РеквизитыДокумента);
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Область, ДанныеПечати.Ссылка);
			ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Приходная накладная';uk='Прибуткова накладна'", КодЯзыкаПечать), КодЯзыкаПечать);
			Область.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Шапка");
			Область.Параметры.Заполнить(РеквизитыДокумента);
			СтруктураДанныхШапка = Новый Структура;
			СтруктураДанныхШапка.Вставить("ПредставлениеСклада", ВыборкаПоСкладам.Склад);
			Область.Параметры.Заполнить(СтруктураДанныхШапка);
			ТабличныйДокумент.Вывести(Область);
			
			
			СведенияОПоставщике	= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата, , ДанныеПечати.БанковскийСчетКонтрагента);	
			СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата, , ДанныеПечати.БанковскийСчетОрганизации);

			ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
			ПредставлениеПоставщика                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование",,КодЯзыкаПечать);
			РеквизитыПоставщика                             = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,",,КодЯзыкаПечать);
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
			ОбластьМакета.Параметры.Поставщик               = ДанныеПечати.Контрагент;
			ОбластьМакета.Параметры.РеквизитыПоставщика     = РеквизитыПоставщика;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
			ПредставлениеПолучателя                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование",,КодЯзыкаПечать);
			РеквизитыПокупателя                             = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
			ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
			ОбластьМакета.Параметры.Получатель              = ДанныеПечати.Организация;
			ОбластьМакета.Параметры.РеквизитыПокупателя		= РеквизитыПокупателя;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
			
			СчетСтрок = 1;
			ВыборкаПоТоварам = ВыборкаПоСкладам.Выбрать();
			Пока ВыборкаПоТоварам.Следующий() Цикл
				
				Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
				СтруктураДанныхНомерСтроки = Новый Структура("НомерСтроки", СчетСтрок);
				Область.Параметры.Заполнить(СтруктураДанныхНомерСтроки);
				
				СчетСтрок = СчетСтрок + 1;
				Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаПоТоварам.Номенклатура,
					ВыборкаПоТоварам.Характеристика,
					,
					,
					,
					ВыборкаПоТоварам.ЭтоВозвратнаяТара,
					КодЯзыкаПечать
				);
				СтруктураДанныхТовар = Новый Структура("Товар", Товар);
				Область.Параметры.Заполнить(СтруктураДанныхТовар);
				Область.Параметры.Заполнить(ВыборкаПоТоварам);
				ТабличныйДокумент.Вывести(Область);
				
			КонецЦикла;
			
			Область = Макет.ПолучитьОбласть("ПодвалТаблицы");
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Подписи");
			ТекстИтоговойСтроки = НСтр("ru='Всего наименований %ВсегоНаименований%';uk= 'Всього найменувань %ВсегоНаименований%'", КодЯзыкаПечать);
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", СчетСтрок-1);
			СтруктураДанныхИтоговаяСтрока = Новый Структура;
			СтруктураДанныхИтоговаяСтрока.Вставить("ИтоговаяСтрока", ТекстИтоговойСтроки);
			Область.Параметры.Заполнить(СтруктураДанныхИтоговаяСтрока);
			ТабличныйДокумент.Вывести(Область);
			
		КонецЦикла;
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивПроверки Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(
				НСтр("ru='В документе %Ссылка% отсутствуют товары. Печать приходной накладной не требуется.';uk='У документі %Ссылка% відсутні товари. Друк прибуткової накладної не потрібний.'"),
				"%Ссылка%",
				Ссылка
			),
			Ссылка);
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Валюта.
//
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                          КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика                        КАК Характеристика,
	|	ТаблицаДокумента.Количество                            КАК Количество,
	|	ТаблицаДокумента.КоличествоУпаковок                    КАК КоличествоУпаковок,
	|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СтавкаНДС                             КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС,
	|	ТаблицаДокумента.Упаковка                              КАК Упаковка,
	|   &ТекстЗапросаЕдиницаИзмерения 						   КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.Склад                                 КАК Склад
	|
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|
	|ГДЕ
	|	ДанныеДокументов.Валюта = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                 КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                            КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика                         КАК Характеристика,
	|	ТаблицаДокумента.Количество                             КАК Количество,
	|	ТаблицаДокумента.КоличествоУпаковок                     КАК КоличествоУпаковок,
// Для внешнеэкономических документов(в валюте) регламентированная себестоимость(гривневая) должна расчитываться с учетом курсов полученных
// авансов. Т.к. в конфигурации отсутствует полнофункциональный расчет регламентированной себестоимости, то рекомендуется указывать суммовые
// показатели вручную, после определения корректной регламентированной себестоимости (напр. в "1С: Бухгалтерия для Украины",
// см. комментарий к проводкам "Корректировка суммы зачета аванса по курсам авансов")
	|	0                                                       КАК СуммаБезНДС,
	|	ТаблицаДокумента.СтавкаНДС                              КАК СтавкаНДС,
	|	0                                                       КАК СуммаНДС,
	|	ТаблицаДокумента.Упаковка                               КАК Упаковка,
	|   &ТекстЗапросаЕдиницаИзмерения							КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.Склад                                  КАК Склад
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|	
	|
	|ГДЕ
	|	ДанныеДокументов.Валюта <> &ВалютаРегламентированногоУчета
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ТаблицаДокумента.Упаковка",
			"ТаблицаДокумента.Номенклатура"));
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПересчитатьТаблицуТоваровВВалютуРегл(Запрос)
	
	ЗапросПредварительный = Новый Запрос;
	ЗапросПредварительный.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПредварительный.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.СтавкаНДС                             КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС                             КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
	|	&Валюта                                                КАК Валюта,
	|	&Период                                                КАК Дата
	|
	|ПОМЕСТИТЬ ТаблицаТоваровПредварительная
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И &Валюта <> &ВалютаРегламентированногоУчета
	|	И (ТаблицаДокумента.Номенклатура.ТипНоменклатуры = &МногооборотнаяТара И &ВернутьМногооборотнуюТару
	|		ИЛИ &ХозяйственнаяОперация В (&ОперацииДляПересчета))
	|";
	
	ОперацииДляПересчета = Новый Массив;
	ОперацииДляПересчета.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	ОперацииДляПересчета.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	
	ЗапросПредварительный.УстановитьПараметр("ОперацииДляПересчета", ОперацииДляПересчета);
	ЗапросПредварительный.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросПредварительный.УстановитьПараметр("Период", Запрос.Параметры.Период);
	ЗапросПредварительный.УстановитьПараметр("Валюта", Запрос.Параметры.Валюта);
	ЗапросПредварительный.УстановитьПараметр("МногооборотнаяТара", Запрос.Параметры.МногооборотнаяТара);
	ЗапросПредварительный.УстановитьПараметр("ВернутьМногооборотнуюТару", Запрос.Параметры.ВернутьМногооборотнуюТару);
	ЗапросПредварительный.УстановитьПараметр("ХозяйственнаяОперация", Запрос.Параметры.ХозяйственнаяОперация);
	ЗапросПредварительный.УстановитьПараметр("ВалютаРегламентированногоУчета", Запрос.Параметры.ВалютаРегламентированногоУчета);
	
	ЗапросПредварительный.Выполнить();
	
	ОбщегоНазначенияУТ.ПересчитатьТаблицуТоваровВВалютуРегл(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;

	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "Накладная", НСтр("ru='Накладная';uk='Накладна'"), "Документ.ПоступлениеТоваровУслуг", Неопределено));
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "ПриходнаяНакладная", НСтр("ru='ПриходнаяНакладная';uk='ПриходнаяНакладная'"), "Документ.ПоступлениеТоваровУслуг", Неопределено));
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "Акт", НСтр("ru='Акт об оказании услуг';uk='Акт про надання послуг'"), "Документ.ПоступлениеТоваровУслуг", Неопределено));
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "М4", НСтр("ru='Приходный ордер (М-4)';uk='Прибутковий ордер (М-4)'"), "Обработка.ПечатьОбщихФорм", Неопределено));
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область Прочее

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПоступления", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентПоступления", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПросроченнойОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаСпискаДокументов";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ПоступлениеТоваровУслуг))
		И ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваровУслуг)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПоставщику)
		И ПравоДоступа("Чтение",   Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаРаспоряжений.ЗаказПоставщику) КАК РаспоряженияНаОформлениеПоступленийТоваровИУслугВсегоВРаботе
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (
	|		ВЫБРАТЬ
	|			ЗаказПоставщику.Ссылка
	|		ИЗ
	|			Документ.ЗаказПоставщику КАК ЗаказПоставщику)) КАК ТаблицаРаспоряжений
	|ГДЕ
	|	ТаблицаРаспоряжений.КОформлениюОстаток > 0";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ДокументыПоступленияТоваровИУслуг
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ДокументыПоступленияТоваровИУслуг";
	ДелоРодитель.Представление  = НСтр("ru='Документы поступления товаров и услуг';uk='Документи надходження товарів і послуг'");
	ДелоРодитель.ЕстьДела       = Результат.РаспоряженияНаОформлениеПоступленийТоваровИУслугВсегоВРаботе > 0;
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
	
	// РаспоряженияНаОформлениеПоступленийТоваровИУслугВсегоВРаботе
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "РаспоряженияНаОформлениеПоступленийТоваровИУслугВсегоВРаботе";
	Дело.ЕстьДела       = Результат.РаспоряженияНаОформлениеПоступленийТоваровИУслугВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru='Распоряжения на оформление в работе';uk='Розпорядження на оформлення в роботі'");
	Дело.Количество     = Результат.РаспоряженияНаОформлениеПоступленийТоваровИУслугВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ДокументыПоступленияТоваровИУслуг";
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Процедура ЗаполнитьВидЦеныПоставщикаВТабличнойЧастиТовары_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПоступлениеТоваровУслугТовары.Ссылка                              КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО (Соглашения.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка.Соглашение)
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Соглашения.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПоступлениеТоваровУслугТовары.Ссылка                              КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.УдалитьТоварыПоДаннымПоставщика КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО (Соглашения.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка.Соглашение)
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Соглашения.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПоступлениеТоваровУслугТовары.Ссылка                              КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.УдалитьРасхождения КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО (Соглашения.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка.Соглашение)
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Соглашения.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
    |";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );	

КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
// Заполняет "ВидЦеныПоставщика" в табличных частях документа и обновляет движения по регистру сведений ЦеныНоменклатурыПоставщиков
Процедура ЗаполнитьВидЦеныПоставщикаВТабличнойЧастиТовары(Параметры) Экспорт
    
    ПолноеИмяОбъекта = "Документ.ПоступлениеТоваровУслуг"; 
    
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяОбъекта, 
        МенеджерВременныхТаблиц
    );
    
    Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
    
	ЗапросПоДокументам = Новый Запрос;
    ЗапросПоДокументам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоДокументам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПоступлениеТоваровУслугТовары.Ссылка                              КАК Ссылка,
	|	Соглашения.ВидЦеныПоставщика                                      КАК ВидЦеныПоставщика,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Партнер                      КАК Партнер,
	|	ПоступлениеТоваровУслугТовары.Ссылка.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК ДокументыКОбработке
	|		    ПО ПоступлениеТоваровУслугТовары.Ссылка = ДокументыКОбработке.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО (Соглашения.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка.Соглашение)
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Соглашения.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПоступлениеТоваровУслугТовары.Ссылка                              КАК Ссылка,
	|	Соглашения.ВидЦеныПоставщика                                      КАК ВидЦеныПоставщика,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Партнер                      КАК Партнер,
	|	ПоступлениеТоваровУслугТовары.Ссылка.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.УдалитьТоварыПоДаннымПоставщика КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК ДокументыКОбработке
	|		    ПО ПоступлениеТоваровУслугТовары.Ссылка = ДокументыКОбработке.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО (Соглашения.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка.Соглашение)
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Соглашения.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПоступлениеТоваровУслугТовары.Ссылка                              КАК Ссылка,
	|	Соглашения.ВидЦеныПоставщика                                      КАК ВидЦеныПоставщика,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Партнер                      КАК Партнер,
	|	ПоступлениеТоваровУслугТовары.Ссылка.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.УдалитьРасхождения КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК ДокументыКОбработке
	|		    ПО ПоступлениеТоваровУслугТовары.Ссылка = ДокументыКОбработке.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО (Соглашения.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка.Соглашение)
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Соглашения.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|";
    
    ЗапросПоДокументам.Текст = СтрЗаменить(ЗапросПоДокументам.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
    
    Выборка = ЗапросПоДокументам.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка	
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеТоваровУслуг");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЦеныНоменклатурыПоставщиков.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
    		Если ЗначениеЗаполнено(Выборка.ВидЦеныПоставщика) Тогда
    			ВидЦеныПоставщика = Выборка.ВидЦеныПоставщика;
    		Иначе
    			ВидЦеныПоставщика = ЗначениеНастроекПовтИсп.ВидЦеныПоставщикаПоУмолчанию(Выборка.Партнер);
            КонецЕсли;
            
    		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
    			Если ЗначениеЗаполнено(СтрокаТЧ.ВидЦеныПоставщика) Тогда
    				Продолжить;
    			КонецЕсли;
    			СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
    		КонецЦикла;
    		Для Каждого СтрокаТЧ Из ДокументОбъект.УдалитьТоварыПоДаннымПоставщика Цикл
    			Если ЗначениеЗаполнено(СтрокаТЧ.ВидЦеныПоставщика) Тогда
    				Продолжить;
    			КонецЕсли;
    			СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
    		КонецЦикла;
    		Для Каждого СтрокаТЧ Из ДокументОбъект.УдалитьРасхождения Цикл
    			Если ЗначениеЗаполнено(СтрокаТЧ.ВидЦеныПоставщика) Тогда
    				Продолжить;
    			КонецЕсли;
    			СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
            КонецЦикла;
            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
            
			Если Выборка.РегистрироватьЦеныПоставщика И ДокументОбъект.Проведен Тогда
				
				НаборЗаписей = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Значение = ДокументОбъект.Ссылка;
				НаборЗаписей.Отбор.Регистратор.Использование = Истина;
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Выбран() Тогда
					
					Для Каждого СтрокаТЧ Из НаборЗаписей Цикл
						
						Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидЦеныПоставщика) Тогда
							СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
						КонецЕсли;
						
						СтрокаТЧ.Соглашение = Неопределено;
						СтрокаТЧ.Партнер    = Выборка.Партнер;
						
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					
				КонецЕсли;
				
            КонецЕсли;
            
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
										
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяОбъекта
    );
    
КонецПроцедуры

Процедура ПерезаполнитьНазначениеВТЧСерии_ДанныеДляОбновления(Параметры) Экспорт
	ОбеспечениеСервер.ПерезаполнитьНазначениеВТЧСерии_ДанныеДляОбновления("ПоступлениеТоваровУслуг", Параметры);
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
// Перезаполняет "Назначение" в табличной части "Серии"
Процедура ПерезаполнитьНазначениеВТЧСерии(Параметры) Экспорт
	ОбеспечениеСервер.ПерезаполнитьНазначениеВТЧСерии("ПоступлениеТоваровУслуг", Параметры);
КонецПроцедуры

Процедура ЗаполнитьСпособДоставкиПоУмолчаниюЗарегистрироватьКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Дата,
	|	Т.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Т
	|ГДЕ
	|	Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результат.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
Процедура ЗаполнитьСпособДоставкиПоУмолчанию(Параметры) Экспорт
	
	ДоставкаТоваров.ЗаполнитьСпособДоставкиПоУмолчанию(Параметры, Метаданные.Документы.ПоступлениеТоваровУслуг);
	
КонецПроцедуры


// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ДанныеДокумента.ПоступлениеПоЗаказам КАК ПоступлениеПоЗаказам,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ПоЗаказу = Выборка.ПоступлениеПоЗаказам;
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		ПоЗаказу = Ложь;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, ПоЗаказу, СуммаДокумента, СуммаВзаиморасчетов",
		Дата,
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		ХозяйственнаяОперация,
		ПоЗаказу,
		СуммаДокумента,
		СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

#Область ПереносРасхожденийВАктыПослеПриемки

Процедура ПеренестиРасхожденияВАктыЗарегистрироватьКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.УдалитьЕстьРасхождения";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Переносит данные о расхождениях из документов "Поступление товаров и услуг" 
// в "Акты о расхождениях после поступления" при обновлении на версию УТ 11.2.3 ПеренестиРасхожденияВАкты
//
Процедура ПеренестиРасхожденияВАкты(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.ПоступлениеТоваровУслуг";
	МетаданныеДокумента = Метаданные.Документы.ПоступлениеТоваровУслуг;
	
	ТекстЗапроса = ТекстЗапросаПереносРасхожденийВАкты();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоступленияСРасхождениями = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаРеквизитыПечати           = Результат[4].Выбрать();
	
	//Здесь все документы, пришедшие из очереди
	ТаблицаСсылокКОбработке = Результат[5].Выгрузить();
	СоответствиеОбработанныхДокументов = Новый Соответствие;
	
	ВыборкаИспользованиеАктов = Результат[6].Выбрать();
	ВыборкаИспользованиеАктов.Следующий();
	ИспользованиеАктов = ВыборкаИспользованиеАктов.ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям;
	ЭтоБазовая         = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(Запрос,"ТоварыПоДокументуИФакт");
	
	Пока ВыборкаПоступленияСРасхождениями.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоступленияСРасхождениями.ДокументОснование);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			СоответствиеОбработанныхДокументов.Вставить(ВыборкаПоступленияСРасхождениями.ДокументОснование);
			ТекстСообщения = НСтр("ru='Не удалось заблокировать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося заблокувати документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", ВыборкаПоступленияСРасхождениями.ДокументОснование);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Документы.ПоступлениеТоваровУслуг,
									ВыборкаПоступленияСРасхождениями.ДокументОснование,
									ТекстСообщения);
			Продолжить;
			
		КонецПопытки;
		
		ДокументПоступленияОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(ВыборкаПоступленияСРасхождениями.ДокументОснование,
		                                                                 ВыборкаПоступленияСРасхождениями.ВерсияДанных,
		                                                                 Параметры.Очередь);
		Если ДокументПоступленияОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			СоответствиеОбработанныхДокументов.Вставить(ВыборкаПоступленияСРасхождениями.ДокументОснование);
			Продолжить;
		КонецЕсли;

		АктОРасхожденияхПослеПриемкиОбъект = Документы.АктОРасхожденияхПослеПриемки.СоздатьДокумент();
		
		ЕстьНедостачиЗаСчетСтороннейКомпании = Ложь;
		ЕстьИзлишкиНаПрочиеДоходы            = Ложь;
		ЕстьНедостачиНаПрочиеРасходы         = Ложь;
		
		ЗаполнитьЗначенияСвойств(АктОРасхожденияхПослеПриемкиОбъект, ДокументПоступленияОбъект,,"Номер");
		
		АктОРасхожденияхПослеПриемкиОбъект.ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПоступлениеТоваровУслуг;
		АктОРасхожденияхПослеПриемкиОбъект.Статус                       = Перечисления.СтатусыАктаОРасхождениях.Согласовано;
		АктОРасхожденияхПослеПриемкиОбъект.СпособОтраженияРасхождений   = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов;
		АктОРасхожденияхПослеПриемкиОбъект.ОснованиеДляСоставленияАкта  = НСтр("ru='Приказ';uk='Наказ'");
		
		ТекстКомментария = НСтр("ru='Автоматически создан по расхождениям документа %Документ при обновлении информационной базы.';uk='Автоматично створений за розбіжностями документа %Документ при оновленні інформаційної бази.'");
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%Документ", ДокументПоступленияОбъект);
		АктОРасхожденияхПослеПриемкиОбъект.Комментарий = ТекстКомментария;
		
		ВыборкаСтроки = ВыборкаПоступленияСРасхождениями.Выбрать();
		
		Попытка
		
			Пока ВыборкаСтроки.Следующий() Цикл
				
				НоваяСтрокаТовары = АктОРасхожденияхПослеПриемкиОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ВыборкаСтроки);
				
				Если ВыборкаСтроки.ВариантРасхождений = Перечисления.ВариантыРасхождений.Излишки Тогда
					
					Если ВыборкаСтроки.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.ИзлишкиВПользуПоставщика Тогда
						НоваяСтрокаТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
					ИначеЕсли ВыборкаСтроки.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.ИзлишкиНаПрочиеДоходы Тогда
						НоваяСтрокаТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
						ЕстьИзлишкиНаПрочиеДоходы  = Истина;
					КонецЕсли;
					
				ИначеЕсли ВыборкаСтроки.ВариантРасхождений = Перечисления.ВариантыРасхождений.Недостачи Тогда
					
					Если ВыборкаСтроки.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.НедостачиЗаСчетПоставщика Тогда
						НоваяСтрокаТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу;
					ИначеЕсли ВыборкаСтроки.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.НедостачиЗаСчетСтороннейКомпании Тогда
						НоваяСтрокаТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы;
						НоваяСтрокаТовары.ПоВинеСтороннейКомпании = Истина;
						ЕстьНедостачиЗаСчетСтороннейКомпании      = Истина;
					ИначеЕсли ВыборкаСтроки.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.НедостачиНаПрочиеРасходы Тогда
						НоваяСтрокаТовары.Действие   = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы;
						ЕстьНедостачиНаПрочиеРасходы = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяСтрокаТовары.ДокументОснование = ВыборкаПоступленияСРасхождениями.ДокументОснование;
				
			КонецЦикла;
			
			ВыборкаРеквизитыПечати.Сбросить();
			ЕстьРеквизитыПечати = ВыборкаРеквизитыПечати.НайтиСледующий(Новый Структура("ДокументОснование", ВыборкаПоступленияСРасхождениями.ДокументОснование));
			Если ЕстьРеквизитыПечати Тогда
				ЗаполнитьЗначенияСвойств(АктОРасхожденияхПослеПриемкиОбъект, ВыборкаРеквизитыПечати,,"ПриемкаТоваров");
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыборкаРеквизитыПечати.ПриемкаТоваров.Выгрузить(), АктОРасхожденияхПослеПриемкиОбъект.ПриемкаТоваров);
			КонецЕсли;
			
			Если АктОРасхожденияхПослеПриемкиОбъект.Товары.Количество() > 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(АктОРасхожденияхПослеПриемкиОбъект, Истина, , РежимЗаписиДокумента.Проведение);
			Иначе
				ОтметитьДокументКакОбработанный(СоответствиеОбработанныхДокументов,
				                                ВыборкаПоступленияСРасхождениями.ДокументОснование,
				                                Параметры.Очередь);
				Возврат;
			КонецЕсли;
			
			ДокументПоступленияОбъект.УдалитьЕстьРасхождения = Ложь;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументПоступленияОбъект, Истина, , РежимЗаписиДокумента.Запись);
			
			Если ЕстьНедостачиЗаСчетСтороннейКомпании Тогда
				
				СоздатьСписаниеДокументыПоВинеСтороннейКомпании(ДокументПоступленияОбъект,
				                                                АктОРасхожденияхПослеПриемкиОбъект.Ссылка,
				                                                ТекстКомментария);
				
			КонецЕсли;
			
			Если ЕстьИзлишкиНаПрочиеДоходы Тогда
				
				СоздатьСписаниеЗадолженностиПоИзлишкамНаПрочиеДоходы(ДокументПоступленияОбъект,
				                                                     АктОРасхожденияхПослеПриемкиОбъект.Ссылка,
				                                                     ТекстКомментария);
			КонецЕсли;
			
			Если ЕстьНедостачиНаПрочиеРасходы Тогда
				
				СоздатьСписаниеЗадолженностиПоНедостачамНаПрочиеРасходы(ДокументПоступленияОбъект,
				                                                        АктОРасхожденияхПослеПриемкиОбъект.Ссылка,
				                                                        ТекстКомментария);
				
			КонецЕсли;
				
			Если НЕ ЭтоБазовая И Не ИспользованиеАктов Тогда
				Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям.Установить(Истина);
				ИспользованиеАктов = Истина;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			ОтметитьДокументКакОбработанный(СоответствиеОбработанныхДокументов,
			                                ВыборкаПоступленияСРасхождениями.ДокументОснование,
			                                Параметры.Очередь);
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", ВыборкаПоступленияСРасхождениями.ДокументОснование);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеДокумента,
				ВыборкаПоступленияСРасхождениями.ДокументОснование,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылокКОбработке Цикл
		
		Если СоответствиеОбработанныхДокументов.Получить(СтрокаТаблицы.Ссылка) = Неопределено Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаТаблицы.Ссылка,, Параметры.Очередь);
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);

КонецПроцедуры 

Процедура СоздатьСписаниеДокументыПоВинеСтороннейКомпании(ДокументПоступленияОбъект, АктОРасхождениях, ТекстКомментария)
	
	ВзаимозачетЗадолженностиОбъект = Документы.ВзаимозачетЗадолженности.СоздатьДокумент();
	
	//Кредиторская задолженность с поставщиком
	Для Каждого СтрокаРасхождений Из ДокументПоступленияОбъект.УдалитьРасхождения Цикл
		
		Если СтрокаРасхождений.ВариантОтраженияРасхождений <> Перечисления.ВариантыОтраженияРасхождений.НедостачиЗаСчетСтороннейКомпании Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаДебиторская = ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Добавить();
		НоваяСтрокаДебиторская.ТипРасчетов          = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		НоваяСтрокаДебиторская.Партнер              = ДокументПоступленияОбъект.Партнер;
		НоваяСтрокаДебиторская.Сумма                = СтрокаРасхождений.Сумма;
		НоваяСтрокаДебиторская.СуммаВзаиморасчетов  = СтрокаРасхождений.СуммаВзаиморасчетов;
		НоваяСтрокаДебиторская.ВалютаВзаиморасчетов = ДокументПоступленияОбъект.ВалютаВзаиморасчетов;
		НоваяСтрокаДебиторская.Организация          = ДокументПоступленияОбъект.Организация;
		НоваяСтрокаДебиторская.Заказ                = ОбъектРасчетовДокументаВзаиморасчетов(ДокументПоступленияОбъект, СтрокаРасхождений);
		
	КонецЦикла;
	
	Если ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Сумма и валюта шапки
	ВзаимозачетЗадолженностиОбъект.СуммаДокумента = ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Итог("Сумма");
	ВзаимозачетЗадолженностиОбъект.Валюта         = ДокументПоступленияОбъект.Валюта;
	
	//Дебиторская задолженность со сторонней компанией
	НоваяСтрокаКредиторская = ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность.Добавить();
	НоваяСтрокаКредиторская.ТипРасчетов          = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;;
	НоваяСтрокаКредиторская.Партнер              = ДокументПоступленияОбъект.УдалитьСторонняяКомпания;
	НоваяСтрокаКредиторская.Заказ                = ?(ЗначениеЗаполнено(ДокументПоступленияОбъект.УдалитьДоговорСоСтороннейКомпанией),
	                                                ДокументПоступленияОбъект.УдалитьДоговорСоСтороннейКомпанией,
	                                                Неопределено);
	НоваяСтрокаКредиторская.Сумма                = ВзаимозачетЗадолженностиОбъект.СуммаДокумента;
	НоваяСтрокаКредиторская.СуммаВзаиморасчетов  = ДокументПоступленияОбъект.УдалитьСуммаРасчетовСоСтороннейКомпаниейПоРасхождениям;
	НоваяСтрокаКредиторская.ВалютаВзаиморасчетов = ДокументПоступленияОбъект.УдалитьВалютаВзаиморасчетовСоСтороннейКомпанией;
	НоваяСтрокаКредиторская.Организация          = ДокументПоступленияОбъект.Организация;
	
	//Прочие реквизиты шапки
	ВзаимозачетЗадолженностиОбъект.Дата                 = ДокументПоступленияОбъект.Дата;
	ВзаимозачетЗадолженностиОбъект.Организация          = ДокументПоступленияОбъект.Организация;
	ВзаимозачетЗадолженностиОбъект.КонтрагентДебитор    = ДокументПоступленияОбъект.УдалитьКонтрагентСтороннейКомпании;;
	ВзаимозачетЗадолженностиОбъект.КонтрагентКредитор   = ДокументПоступленияОбъект.Контрагент;
	ВзаимозачетЗадолженностиОбъект.Валюта               = ДокументПоступленияОбъект.Валюта;
	ВзаимозачетЗадолженностиОбъект.Подразделение        = ДокументПоступленияОбъект.Подразделение;
	ВзаимозачетЗадолженностиОбъект.ВидОперации          = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками;
	ВзаимозачетЗадолженностиОбъект.ТипДебитора          = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
	ВзаимозачетЗадолженностиОбъект.ТипКредитора         = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;;
	ВзаимозачетЗадолженностиОбъект.ДокументОснование    = ДокументПоступленияОбъект.Ссылка;
	ВзаимозачетЗадолженностиОбъект.Комментарий          = ТекстКомментария;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВзаимозачетЗадолженностиОбъект, Истина, , РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура СоздатьСписаниеЗадолженностиПоИзлишкамНаПрочиеДоходы(ДокументПоступленияОбъект, АктОРасхождениях, ТекстКомментария)
	
	СписаниеЗадолженностиОбъект                           = Документы.СписаниеЗадолженности.СоздатьДокумент();
	
	Для Каждого СтрокаРасхождений Из ДокументПоступленияОбъект.УдалитьРасхождения Цикл
		
		Если СтрокаРасхождений.ВариантОтраженияРасхождений <> Перечисления.ВариантыОтраженияРасхождений.ИзлишкиНаПрочиеДоходы Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СписаниеЗадолженностиОбъект.Задолженность.Добавить();
		
		НоваяСтрока.ВалютаВзаиморасчетов = ДокументПоступленияОбъект.ВалютаВзаиморасчетов;
		НоваяСтрока.Сумма                = СтрокаРасхождений.СуммаВзаиморасчетов;
		НоваяСтрока.ТипРасчетов          = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		НоваяСтрока.Партнер              = ДокументПоступленияОбъект.Партнер;
		НоваяСтрока.Заказ                = ОбъектРасчетовДокументаВзаиморасчетов(ДокументПоступленияОбъект, СтрокаРасхождений);
		
	КонецЦикла;
	
	Если СписаниеЗадолженностиОбъект.Задолженность.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписаниеЗадолженностиОбъект.Дата                      = ДокументПоступленияОбъект.Дата;
	СписаниеЗадолженностиОбъект.Основание                 = ДокументПоступленияОбъект.Ссылка;
	СписаниеЗадолженностиОбъект.АктОРасхожденияхОснование = АктОРасхождениях;
	СписаниеЗадолженностиОбъект.Подразделение             = ДокументПоступленияОбъект.Подразделение;
	СписаниеЗадолженностиОбъект.Организация               = ДокументПоступленияОбъект.Организация;
	СписаниеЗадолженностиОбъект.Контрагент                = ДокументПоступленияОбъект.Контрагент;
	СписаниеЗадолженностиОбъект.ХозяйственнаяОперация     = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности;
	СписаниеЗадолженностиОбъект.СтатьяДоходов             = ДокументПоступленияОбъект.УдалитьСтатьяДоходовПоРасхождениям;
	СписаниеЗадолженностиОбъект.АналитикаДоходов          = ДокументПоступленияОбъект.УдалитьАналитикаДоходовПоРасхождениям;
	СписаниеЗадолженностиОбъект.Комментарий               = ТекстКомментария;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СписаниеЗадолженностиОбъект, Истина, , РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура СоздатьСписаниеЗадолженностиПоНедостачамНаПрочиеРасходы(ДокументПоступленияОбъект, АктОРасхождениях, ТекстКомментария)
	
	СписаниеЗадолженностиОбъект                           = Документы.СписаниеЗадолженности.СоздатьДокумент();
	
	Для Каждого СтрокаРасхождений Из ДокументПоступленияОбъект.УдалитьРасхождения Цикл
		
		Если СтрокаРасхождений.ВариантОтраженияРасхождений <> Перечисления.ВариантыОтраженияРасхождений.НедостачиНаПрочиеРасходы Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СписаниеЗадолженностиОбъект.Задолженность.Добавить();
		
		НоваяСтрока.ВалютаВзаиморасчетов = ДокументПоступленияОбъект.ВалютаВзаиморасчетов;
		НоваяСтрока.Сумма                = СтрокаРасхождений.СуммаВзаиморасчетов;
		НоваяСтрока.ТипРасчетов          = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		НоваяСтрока.Партнер              = ДокументПоступленияОбъект.Партнер;
		НоваяСтрока.Заказ                = ОбъектРасчетовДокументаВзаиморасчетов(ДокументПоступленияОбъект, СтрокаРасхождений);
		
	КонецЦикла;
	
	Если СписаниеЗадолженностиОбъект.Задолженность.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписаниеЗадолженностиОбъект.Дата                      = ДокументПоступленияОбъект.Дата;
	СписаниеЗадолженностиОбъект.Основание                 = ДокументПоступленияОбъект.Ссылка;
	СписаниеЗадолженностиОбъект.АктОРасхожденияхОснование = АктОРасхождениях;
	СписаниеЗадолженностиОбъект.Подразделение             = ДокументПоступленияОбъект.Подразделение;
	СписаниеЗадолженностиОбъект.Организация               = ДокументПоступленияОбъект.Организация;
	СписаниеЗадолженностиОбъект.Контрагент                = ДокументПоступленияОбъект.Контрагент;
	СписаниеЗадолженностиОбъект.ХозяйственнаяОперация     = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности;
	СписаниеЗадолженностиОбъект.СтатьяРасходов            = ДокументПоступленияОбъект.УдалитьСтатьяРасходовПоРасхождениям;
	СписаниеЗадолженностиОбъект.АналитикаРасходов         = ДокументПоступленияОбъект.УдалитьАналитикаРасходовПоРасхождениям;
	СписаниеЗадолженностиОбъект.Комментарий               = ТекстКомментария;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СписаниеЗадолженностиОбъект, Истина, , РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция ОбъектРасчетовДокументаВзаиморасчетов(ДокументПоступленияОбъект, СтрокаРасхождений)

	Если ДокументПоступленияОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			Возврат Неопределено;
		Иначе
			Если ДокументПоступленияОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
				Возврат ДокументПоступленияОбъект.Договор;
			ИначеЕсли ДокументПоступленияОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным И ДокументПоступленияОбъект.ПоступлениеПоЗаказам Тогда
				Возврат СтрокаРасхождений.ЗаказПоставщику;
			Иначе
				Возврат ДокументПоступленияОбъект.Ссылка;
			КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ТекстЗапросаПереносРасхожденийВАкты() 
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расхождения.Ссылка,
	|	МАКСИМУМ(АктОРасхожденияхПриПоступленииТоваров.Ссылка) КАК АктОРасхождениях
	|ПОМЕСТИТЬ ПоступленияСРасхождениями
	|ИЗ
	|	&ВТДокументыДляОбработки КАК СсылкиДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.УдалитьРасхождения КАК Расхождения
	|		ПО СсылкиДляОбработки.Ссылка = Расхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдалитьАктОРасхожденияхПриПоступленииТоваров КАК АктОРасхожденияхПриПоступленииТоваров
	|		ПО (Расхождения.Ссылка = АктОРасхожденияхПриПоступленииТоваров.ДокументОснование)
	|ГДЕ
	|	Расхождения.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Расхождения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК ДатаДокументаОснования,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.НоменклатураПоставщика,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ПоступлениеТоваровУслугТовары.Упаковка,
	|	ПоступлениеТоваровУслугТовары.КоличествоУпаковок,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.КоличествоУпаковок, 0) КАК КоличествоУпаковокПоДокументу,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Количество, 0) КАК КоличествоПоДокументу,
	|	ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаСНДС,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Сумма, 0) КАК СуммаПоДокументу,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.СуммаНДС, 0) КАК СуммаНДСПоДокументу,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.СуммаСНДС, 0) КАК СуммаСНДСПоДокументу,
	|	ПоступлениеТоваровУслугТовары.КодСтроки,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.Склад,
	|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику,
	|	ПоступлениеТоваровУслугТовары.СтатусУказанияСерий,
	|	ПоступлениеТоваровУслугТовары.Серия,
	|	ПоступлениеТоваровУслугТовары.Сделка,
	|	ПоступлениеТоваровУслугТовары.Назначение,
	|	ПоступлениеТоваровУслугТовары.Подразделение,
	|	ПоступлениеТоваровУслугТовары.Сертификат,
	|	ПоступлениеТоваровУслугТовары.НомерПаспорта,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.УдалитьНомерСтрокиДокументаПоставщика <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполненоПоОснованию,
	|	ПоступлениеТоваровУслугТовары.СтатьяРасходов,
	|	ПоступлениеТоваровУслугТовары.АналитикаРасходов,
	|	ПоступлениеТоваровУслугТовары.СписатьНаРасходы
	|ПОМЕСТИТЬ ТоварыПоДокументуИФакт
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоступленияСРасхождениями КАК ПоступленияСРасхождениями
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка = ПоступленияСРасхождениями.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.УдалитьТоварыПоДаннымПоставщика КАК ПоступлениеТоваровУслугТоварыПоДаннымПоставщика
	|		ПО ПоступлениеТоваровУслугТовары.УдалитьНомерСтрокиДокументаПоставщика = ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.НомерСтроки
	|			И ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Ссылка
	|			И ПоступлениеТоваровУслугТовары.Номенклатура = ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Номенклатура
	|		И ПоступлениеТоваровУслугТовары.НоменклатураПоставщика = ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.НоменклатураПоставщика
	|		И ПоступлениеТоваровУслугТовары.Характеристика = ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Характеристика
	|		И ПоступлениеТоваровУслугТовары.Упаковка = ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Упаковка
	|		И ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика = ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.ВидЦеныПоставщика
	|		И ПоступлениеТоваровУслугТовары.Цена = ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Цена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Ссылка,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Ссылка.Дата,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Номенклатура,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.НоменклатураПоставщика,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Характеристика,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Упаковка,
	|	0,
	|	0,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.КоличествоУпаковок,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Количество,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.ВидЦеныПоставщика,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Цена,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.СтавкаНДС,
	|	0,
	|	0,
	|	0,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Сумма,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.СуммаНДС,
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.СуммаСНДС,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
	|	ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Ссылка.Склад,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка),
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
	|	"""",
	|	"""",
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.УдалитьТоварыПоДаннымПоставщика КАК ПоступлениеТоваровУслугТоварыПоДаннымПоставщика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоступленияСРасхождениями КАК ПоступленияСРасхождениями
	|		ПО ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Ссылка = ПоступленияСРасхождениями.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.НомерСтроки = ПоступлениеТоваровУслугТовары.УдалитьНомерСтрокиДокументаПоставщика
	|			И ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка
	|		И ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.НоменклатураПоставщика = ПоступлениеТоваровУслугТовары.НоменклатураПоставщика
	|		И ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|		И ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Характеристика = ПоступлениеТоваровУслугТовары.Характеристика
	|		И ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Упаковка = ПоступлениеТоваровУслугТовары.Упаковка
	|		И ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.Цена = ПоступлениеТоваровУслугТовары.Цена
	|		И ПоступлениеТоваровУслугТоварыПоДаннымПоставщика.ВидЦеныПоставщика = ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.УдалитьНомерСтрокиДокументаПоставщика ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Ссылка,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.НоменклатураПоставщика,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Номенклатура,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Характеристика,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Упаковка,
	|	СУММА(ПоступлениеТоваровУслугУдалитьРасхождения.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ПоступлениеТоваровУслугУдалитьРасхождения.Количество) КАК Количество,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.ВидЦеныПоставщика,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Цена,
	|	СУММА(ПоступлениеТоваровУслугУдалитьРасхождения.Сумма) КАК Сумма,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.СтавкаНДС,
	|	СУММА(ПоступлениеТоваровУслугУдалитьРасхождения.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ПоступлениеТоваровУслугУдалитьРасхождения.СуммаСНДС) КАК СуммаСНДС,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.КодСтроки,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Склад,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.ЗаказПоставщику,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.ВариантРасхождений,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.ВариантОтраженияРасхождений,
	|	СУММА(ПоступлениеТоваровУслугУдалитьРасхождения.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ПоступлениеТоваровУслугУдалитьРасхождения.СуммаНДСВзаиморасчетов) КАК СуммаНДСВзаиморасчетов
	|ПОМЕСТИТЬ Расхождения
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.УдалитьРасхождения КАК ПоступлениеТоваровУслугУдалитьРасхождения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоступленияСРасхождениями КАК ПоступленияСРасхождениями
	|		ПО ПоступлениеТоваровУслугУдалитьРасхождения.Ссылка = ПоступленияСРасхождениями.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Ссылка,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.НоменклатураПоставщика,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Номенклатура,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Характеристика,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Упаковка,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.ВидЦеныПоставщика,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Цена,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.КодСтроки,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.Склад,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.ЗаказПоставщику,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.ВариантРасхождений,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.ВариантОтраженияРасхождений,
	|	ПоступлениеТоваровУслугУдалитьРасхождения.СтавкаНДС
	|;
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ТоварыПоДокументуИФакт.Ссылка КАК ДокументОснование,
	|	ТоварыПоДокументуИФакт.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ТоварыПоДокументуИФакт.ДатаДокументаОснования КАК ДатаДокументаОснования,
	|	ТоварыПоДокументуИФакт.Номенклатура,
	|	ТоварыПоДокументуИФакт.НоменклатураПоставщика,
	|	ТоварыПоДокументуИФакт.Характеристика,
	|	ТоварыПоДокументуИФакт.Упаковка,
	|	ТоварыПоДокументуИФакт.КоличествоУпаковок,
	|	ТоварыПоДокументуИФакт.Количество,
	|	ТоварыПоДокументуИФакт.КоличествоУпаковокПоДокументу,
	|	ТоварыПоДокументуИФакт.КоличествоПоДокументу,
	|	ТоварыПоДокументуИФакт.ВидЦеныПоставщика,
	|	ТоварыПоДокументуИФакт.Цена,
	|	ТоварыПоДокументуИФакт.СтавкаНДС,
	|	ТоварыПоДокументуИФакт.Сумма,
	|	ТоварыПоДокументуИФакт.СуммаНДС,
	|	ТоварыПоДокументуИФакт.СуммаСНДС,
	|	ТоварыПоДокументуИФакт.СуммаПоДокументу,
	|	ТоварыПоДокументуИФакт.СуммаНДСПоДокументу,
	|	ТоварыПоДокументуИФакт.СуммаСНДСПоДокументу,
	|	ТоварыПоДокументуИФакт.КодСтроки,
	|	ТоварыПоДокументуИФакт.НомерГТД,
	|	ТоварыПоДокументуИФакт.Склад,
	|	ВЫБОР
	|		КОГДА ТоварыПоДокументуИФакт.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(Расхождения.ЗаказПоставщику, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|		ИНАЧЕ ТоварыПоДокументуИФакт.ЗаказПоставщику
	|	КОНЕЦ КАК ЗаказПоставщику,
	|	ТоварыПоДокументуИФакт.СтатусУказанияСерий,
	|	ТоварыПоДокументуИФакт.Серия,
	|	ТоварыПоДокументуИФакт.Сделка,
	|	ТоварыПоДокументуИФакт.Подразделение,
	|	ТоварыПоДокументуИФакт.Сертификат,
	|	ТоварыПоДокументуИФакт.НомерПаспорта,
	|	ТоварыПоДокументуИФакт.ЗаполненоПоОснованию,
	|	Расхождения.ВариантРасхождений,
	|	Расхождения.ВариантОтраженияРасхождений,
	|	Расхождения.СуммаВзаиморасчетов,
	|	Расхождения.СуммаНДСВзаиморасчетов,
	|	ТоварыПоДокументуИФакт.СтатьяРасходов,
	|	ТоварыПоДокументуИФакт.АналитикаРасходов,
	|	ТоварыПоДокументуИФакт.СписатьНаРасходы,
	|	ТоварыПоДокументуИФакт.Назначение
	|ИЗ
	|	ТоварыПоДокументуИФакт КАК ТоварыПоДокументуИФакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расхождения КАК Расхождения
	|		ПО ТоварыПоДокументуИФакт.Ссылка = Расхождения.Ссылка
	|			И ТоварыПоДокументуИФакт.Номенклатура = Расхождения.Номенклатура
	|			И ТоварыПоДокументуИФакт.Характеристика = Расхождения.Характеристика
	|			И ТоварыПоДокументуИФакт.Упаковка = Расхождения.Упаковка
	|			И ТоварыПоДокументуИФакт.ВидЦеныПоставщика = Расхождения.ВидЦеныПоставщика
	|			И ТоварыПоДокументуИФакт.Цена = Расхождения.Цена
	|			И ТоварыПоДокументуИФакт.НоменклатураПоставщика = Расхождения.НоменклатураПоставщика
	|			И (ВЫБОР
	|				КОГДА Расхождения.ВариантРасхождений = ЗНАЧЕНИЕ(Перечисление.ВариантыРасхождений.Недостачи)
	|					ТОГДА ТоварыПоДокументуИФакт.КоличествоПоДокументу - ТоварыПоДокументуИФакт.Количество = Расхождения.Количество
	|				КОГДА Расхождения.ВариантРасхождений = ЗНАЧЕНИЕ(Перечисление.ВариантыРасхождений.Излишки)
	|					ТОГДА ТоварыПоДокументуИФакт.Количество - ТоварыПоДокументуИФакт.КоличествоПоДокументу = Расхождения.Количество
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокументаОснования
	|ИТОГИ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ПоступленияСРасхождениями.Ссылка КАК ДокументОснование,
	|	ПоступленияСРасхождениями.АктОРасхождениях,
	|	АктОРасхожденияхПриПоступленииТоваров.ОснованиеДляСоставленияАкта,
	|	АктОРасхожденияхПриПоступленииТоваров.МестоПриемкиТовара,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаДоставкиТоваров,
	|	АктОРасхожденияхПриПоступленииТоваров.ПереченьСопроводительныхДокументов,
	|	АктОРасхожденияхПриПоступленииТоваров.ВызываемыйПредставительПартнера,
	|	АктОРасхожденияхПриПоступленииТоваров.ВидДокументаВызоваПредставителяПартнера,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерДокументаОВызовеПредставителяПартнера,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаДокументаОВызовеПредставителяПартнера,
	|	АктОРасхожденияхПриПоступленииТоваров.Грузоотправитель,
	|	АктОРасхожденияхПриПоступленииТоваров.Производитель,
	|	АктОРасхожденияхПриПоступленииТоваров.СтраховаяКомпания,
	|	АктОРасхожденияхПриПоступленииТоваров.КонтрагентСтраховойКомпании,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерДоговораПоставки,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаДоговораПоставки,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерКоммерческогоАкта,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаКоммерческогоАкта,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерУдостоверенияОКачестве,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаУдостоверенияОКачестве,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерВетеринарногоСвидетельства,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаВетеринарногоСвидетельства,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерЖелезнодорожнойНакладной,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаЖелезнодорожнойНакладной,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерКоносамента,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаКоносамента,
	|	АктОРасхожденияхПриПоступленииТоваров.СпособДоставки,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерТранспортногоСредства,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаОтправленияТоваров,
	|	АктОРасхожденияхПриПоступленииТоваров.ПунктОтправления,
	|	АктОРасхожденияхПриПоступленииТоваров.СкладОтправителяТовара,
	|	АктОРасхожденияхПриПоступленииТоваров.СведенияОСостоянииТранспортаПоСопроводительнымДокументам,
	|	АктОРасхожденияхПриПоступленииТоваров.СведенияОСостоянииТранспортаПоФакту,
	|	АктОРасхожденияхПриПоступленииТоваров.УсловияХраненияТовараДоВскрытияНаСкладеПолучателя,
	|	АктОРасхожденияхПриПоступленииТоваров.СведенияОТемпературеПриРазгрузке,
	|	АктОРасхожденияхПриПоступленииТоваров.СостояниеТарыИУпаковки,
	|	АктОРасхожденияхПриПоступленииТоваров.СодержаниеНаружнойМаркировки,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаВскрытияТары,
	|	АктОРасхожденияхПриПоступленииТоваров.ОрганизацияВзвесившаяИОпломбировавшаяТовар,
	|	АктОРасхожденияхПриПоступленииТоваров.ПорядокОтбораТовараДляВыборочнойПроверки,
	|	АктОРасхожденияхПриПоступленииТоваров.СпособОпределенияКоличества,
	|	АктОРасхожденияхПриПоступленииТоваров.МестоОпределенияКоличества,
	|	АктОРасхожденияхПриПоступленииТоваров.СведенияОбИсправностиВесоизмерительныхПриборов,
	|	АктОРасхожденияхПриПоступленииТоваров.ПрочиеДанные,
	|	АктОРасхожденияхПриПоступленииТоваров.ПодробноеОписаниеДефектов,
	|	АктОРасхожденияхПриПоступленииТоваров.ЗаключениеКомиссии,
	|	АктОРасхожденияхПриПоступленииТоваров.Приложение,
	|	АктОРасхожденияхПриПоступленииТоваров.ДокументУдостоверяющийПолномочияПредставителяПартнера,
	|	АктОРасхожденияхПриПоступленииТоваров.НомерДокументаУдостоверяющегоПолномочияПредставителяПартнера,
	|	АктОРасхожденияхПриПоступленииТоваров.ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера,
	|	АктОРасхожденияхПриПоступленииТоваров.КоличествоЛистовПриложения,
	|	АктОРасхожденияхПриПоступленииТоваров.РешениеРуководителя,
	|	АктОРасхожденияхПриПоступленииТоваров.КладовщикПринявшийТовар,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаБруттоПоДаннымПроизводителя,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаБруттоВПунктеОтправления,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаБруттоВПунктеНазначения,
	|	АктОРасхожденияхПриПоступленииТоваров.КоличествоМестПоДокументамГрузоотправителя,
	|	АктОРасхожденияхПриПоступленииТоваров.КоличествоМестПоФакту,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаБруттоПоДокументамГрузоотправителя,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаБруттоПоФакту,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаНеттоПоДокументамГрузоотправителя,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаНеттоПоФакту,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаТарыПоДокументамГрузоотправителя,
	|	АктОРасхожденияхПриПоступленииТоваров.МассаТарыПоФакту,
	|	АктОРасхожденияхПриПоступленииТоваров.СтепеньЗаполненияПоДокументамГрузоотправителя,
	|	АктОРасхожденияхПриПоступленииТоваров.СтепеньЗаполненияПоФакту,
	|	АктОРасхожденияхПриПоступленииТоваров.ПредседательКомиссии,
	|	АктОРасхожденияхПриПоступленииТоваров.ДолжностьПредседателяКомиссии,
	|	АктОРасхожденияхПриПоступленииТоваров.ЧленКомиссии1,
	|	АктОРасхожденияхПриПоступленииТоваров.ДолжностьЧленаКомиссии1,
	|	АктОРасхожденияхПриПоступленииТоваров.ЧленКомиссии2,
	|	АктОРасхожденияхПриПоступленииТоваров.ДолжностьЧленаКомиссии2,
	|	АктОРасхожденияхПриПоступленииТоваров.ЧленКомиссии3,
	|	АктОРасхожденияхПриПоступленииТоваров.ДолжностьЧленаКомиссии3,
	|	АктОРасхожденияхПриПоступленииТоваров.ПриемкаТоваров.(
	|		НомерСтроки,
	|		ДатаПрибытияВПунктНазначения,
	|		ДатаВскрытия,
	|		ДатаВыдачиОрганизациейТранспорта,
	|		ДатаДоставкиНаСкладПолучателя,
	|		ДатаНачалаРазгрузки,
	|		ДатаНачалаПриемки,
	|		ДатаПриостановленияПриемки,
	|		ДатаВозобновленияПриемки,
	|		ДатаОкончанияПриемки
	|	),
	|	АктОРасхожденияхПриПоступленииТоваров.Руководитель,
	|	АктОРасхожденияхПриПоступленииТоваров.ГлавныйБухгалтер
	|ИЗ
	|	Документ.УдалитьАктОРасхожденияхПриПоступленииТоваров КАК АктОРасхожденияхПриПоступленииТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоступленияСРасхождениями КАК ПоступленияСРасхождениями
	|		ПО (ПоступленияСРасхождениями.АктОРасхождениях = АктОРасхожденияхПриПоступленииТоваров.Ссылка)
	|ГДЕ
	|	ПоступленияСРасхождениями.Ссылка ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СсылкиДляОбработки.Ссылка
	|ИЗ
	|	&ВТДокументыДляОбработки КАК СсылкиДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ
	|	ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям.Значение КАК ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям
	|ИЗ
	|	Константа.ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям КАК ИспользоватьАктыРасхожденийПослеПриемкиПоПоступлениям";
	
КонецФункции

Процедура ОтметитьДокументКакОбработанный(СоответствиеОбработанныхДокументов, СсылкаНаДокумент, Очередь);
	
	СоответствиеОбработанныхДокументов.Вставить(СсылкаНаДокумент);
	ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаДокумент,, Очередь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли

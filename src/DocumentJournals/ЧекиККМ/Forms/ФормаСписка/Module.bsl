
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКассККМ") Тогда
		КассаККМ = Справочники.КассыККМ.КассаККМФискальныйРегистраторПоУмолчанию();
		Если Не ЗначениеЗаполнено(КассаККМ) Тогда
			ВызватьИсключение НСтр("ru='В информационной базе не создано кассы ККМ с типом: Фискальный регистратор.
            |Для работы со списком чеков ККМ в системе должен быть зарегистрирован как минимум один фискальный регистратор.'
            |;uk='В інформаційній базі не створено каси ККМ з типом: Фіскальний реєстратор.
            |Для роботи зі списком чеків ККМ в системі повинен бути зареєстрований як мінімум один фіскальний реєстратор.'");
		КонецЕсли;
	КонецЕсли;
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода,
	                                              |ФискальныйРегистратор";
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	РозничныеПродажи.ЗаполнитьТаблицуОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СнятьZОтчет", "Видимость",
		ПравоДоступа("Изменение", Метаданные.Документы.КассоваяСмена));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену", "Видимость",
		ПравоДоступа("Изменение", Метаданные.Документы.КассоваяСмена));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег", "Видимость",
		ПравоДоступа("Изменение", Метаданные.Документы.ВнесениеДенежныхСредствВКассуККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег", "Видимость",
		ПравоДоступа("Изменение", Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ));
	
	ДоступноДобавлениеИзменениеЧековККМ = ПравоДоступа("Изменение", Метаданные.Документы.ЧекККМ);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ОборудованиеПодключено = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(
			Неопределено,
			Неопределено,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()).Количество() > 0;
		ЗначениеОткрыватьФормуСПодключеннымОборудованием = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ЧекККМ", "ОткрыватьФормуСПодключеннымОборудованием");
		Если ЗначениеОткрыватьФормуСПодключеннымОборудованием = Неопределено Тогда
			ОткрыватьФормуСПодключеннымОборудованием = ОборудованиеПодключено;
		Иначе
			ОткрыватьФормуСПодключеннымОборудованием = ЗначениеОткрыватьФормуСПодключеннымОборудованием И ОборудованиеПодключено;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ЧекиККМКонтекстноеМенюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка());
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ЧекиККМ", "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Если ОткрыватьФормуСПодключеннымОборудованием Тогда
			
			ПодключитьОбработчикОжидания("ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания", 0.5, Истина);
			
		Иначе
			
			Для Каждого СтрокаТЧ Из Оборудование Цикл
				
				МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
					Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПоИдентификаторуЗавершение", ЭтотОбъект, СтрокаТЧ),
					ЭтотОбъект,
					СтрокаТЧ.Ссылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ОтчетОРозничныхПродажах"
		ИЛИ ИмяСобытия = "Запись_ЧекККМ"
		ИЛИ ИмяСобытия = "Запись_ЧекККМВозврат"
		ИЛИ ИмяСобытия = "Запись_РеализацияПодарочныхСертификатов"
		ИЛИ ИмяСобытия = "Запись_ВозвратПодарочныхСертификатов" Тогда
		
		Элементы.ЧекиККМ.Обновить();
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
		УстановитьДоступностьКомандСозданияДокументовНаВозврат();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененоРабочееМестоТекущегоСеанса" Тогда
		
		КассаОтборПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	КассаККМ = Настройки.Получить("КассаККМ");
	ТолькоТекущаяСмена = Настройки.Получить("ТолькоТекущаяСмена");
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	
	УстановитьОтборДинамическихСписковНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КассаККМОтборПриИзменении(Элемент)
	
	КассаОтборПриИзмененииСервер();
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоТекущаяСменаОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЧекиКкм

&НаКлиенте
Процедура ЧекиККМПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиККМПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	ИмяОтрываемойФормы = ИмяОтрываемойФормы(ТекущиеДанные.Ссылка);
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Отказ = Истина;
		ОткрытьФорму(ИмяОтрываемойФормы, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	ИмяОтрываемойФормы = ИмяОтрываемойФормы(ТекущиеДанные.Ссылка);
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(ИмяОтрываемойФормы, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиККМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	Отказ = Истина;

	Если Копирование = Истина Тогда
		
		ИмяОтрываемойФормы = ИмяОтрываемойФормы(ТекущиеДанные.Ссылка);
		ПараметрыОткрытияФормы = Новый Структура("Основание", ТекущиеДанные.Ссылка);
		ОткрытьФорму(
			ИмяОтрываемойФормы,
			ПараметрыОткрытияФормы);
		
	Иначе
		
		ПараметрыОткрытияФормы = Новый Структура("Основание", Новый Структура("КассаККМ", КассаККМ));
		ОткрытьФорму(
			"Документ.ЧекККМ.Форма.ФормаДокументаРМК",
			ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		// Подключение устройства
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибки = "";
			
			Результат = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройства);
			
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					//Открыть смену на фискальном регистраторе
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "OpenDay",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки);
					
					Если Не Результат Тогда
						
						ТекстСообщения = НСтр("ru='При открытии смены произошла ошибка.
                                                    |Смена не открыта.
                                                    |Дополнительное описание:
                                                    |%ДополнительноеОписание%'
                                                    |;uk='При відкритті зміни сталася помилка.
                                                    |Зміна не відкрита.
                                                    |Додатковий опис:
                                                    |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
				Иначе
					ТекстСообщения = НСтр("ru='При открытии смены произошла ошибка.
                                          |Смена не открыта на фискальном регистраторе.
                                          |Дополнительное описание:
                                          |%ДополнительноеОписание%'
                                          |;uk='При відкритті зміни сталася помилка.
                                          |Зміна не відкрита на фіскальному реєстраторі.
                                          |Додатковий опис:
                                          |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					                             "%ДополнительноеОписание%",
					                             ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                            |Смена не открыта на фискальном регистраторе.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При підключенні пристрою сталася помилка.
                                            |Зміна не відкрита на фіскальному реєстраторі.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце зовнішнього обладнання поточного сеансу.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Ложь;
	ОшибкаПриСнятииZОтчета = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		// Подключение устройства
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибки = "";
			
			Результат = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройства);
			
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintZReport",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Не Результат И Не ИспользоватьБезПодключенияОборудования Тогда
					
					ТекстВопроса = НСтр("ru='При снятии отчета на фискальном регистраторе произошла ошибка.
                                        |""%ОписаниеОшибки%""
                                        |
                                        |Если смена на фискальном регистраторе закрыта, то
                                        |нажмите ""Да"" для формирования отчета о розничных продажах.
                                        |
                                        |Закрыть смену?'
                                        |;uk='При знятті звіту на фіскальному реєстраторі сталася помилка.
                                        |""%ОписаниеОшибки%""
                                        |
                                        |Якщо зміна на фіскальному реєстраторі закрита, то
                                        |натисніть ""Так"" для формування звіту про роздрібні продажі.
                                        |
                                        |Закрити зміну?'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
					ДополнительныеПараметры.Вставить("ОписаниеОшибки", ВыходныеПараметры[1]);
					ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
					ПоказатьВопрос(
						Новый ОписаниеОповещения("ЗакрытьКассовуюСменуФрагмент", ЭтотОбъект, ДополнительныеПараметры),
						ТекстВопроса,
						РежимДиалогаВопрос.ДаНет,
						,
						КодВозвратаДиалога.Нет);
					
				Иначе
					
					СформироватьОтчетОРозничныхПродажах();
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                            |Отчет не напечатан и смена не закрыта на фискальном регистраторе.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При підключенні пристрою сталася помилка.
                                            |Звіт не надрукований і зміна не закрита на фіскальному реєстраторі.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце зовнішнього обладнання поточного сеансу.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСменуФрагмент(РезультатВопроса, Параметры) Экспорт
	
	Результат = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если Не Результат И Не Параметры.ИспользоватьБезПодключенияОборудования Тогда
		
		ТекстСообщения = НСтр("ru='При снятии отчета на фискальном регистраторе произошла ошибка.
                             |""%ОписаниеОшибки%""
                             |Отчет на фискальном регистраторе не сформирован.'
                             |;uk='При знятті звіту на фіскальному реєстраторі сталася помилка.
                             |""%ОписаниеОшибки%""
                             |Звіт на фіскальному реєстраторі не сформований.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Параметры.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		СформироватьОтчетОРозничныхПродажах();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОРозничныхПродажах()
	
	ОписаниеОшибки = "";
	МассивДокументов = ЗакрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, Ложь, ОписаниеОшибки);
	
	// Все результирующие документы выводим пользователю.
	Для Каждого Документ Из МассивДокументов Цикл
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ, ПровестиПриОткрытии", Документ, Истина));
		
	КонецЦикла;
	
	// Текст ошибки должен появиться в окне открытого документа.
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru='Смена закрыта на фискальном регистраторе.
                              |Дополнительное описание:
                              |%ДополнительноеОписание%'
                              |;uk='Зміна закрита на фіскальному реєстраторі.
                              |Додатковий опис:
                              |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
	
	Оповестить("Запись_ОтчетОРозничныхПродажах", Новый Структура, МассивДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСмены(Команда)
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КассаККМ", КассаККМ);
		ОткрытьФорму("Документ.ВнесениеДенежныхСредствВКассуККМ.Форма.ФормаВыбораРасходногоКассовогоОрдера", ПараметрыОткрытия,,,,, 
			Новый ОписаниеОповещения("ВнесениеДенегЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце зовнішнього обладнання поточного сеансу.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенегЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	СтруктураВыбранныеДанные = Результат1;
	
	Если СтруктураВыбранныеДанные <> Неопределено Тогда
		
		ОписаниеОшибки = "";
		
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			Результат = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройства);
			
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					//Готовим данные
					ВходныеПараметры  = Новый Массив();
					ВыходныеПараметры = Неопределено;
					
					ВходныеПараметры.Добавить(1);
					ВходныеПараметры.Добавить(СтруктураВыбранныеДанные.СуммаВнесения);
					
					// Печатаем чек.
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
						"Encash",
						ВходныеПараметры,
						ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					// Итоговое действие.
					СтруктураВыбранныеДанные.Вставить("Дата", ТекущаяДата());
					
					Результат = СоздатьДокументВнесениеДенежныхСредствВКассуККМ(СтруктураВыбранныеДанные, ОписаниеОшибки);
					Если Не Результат Тогда
						
						ТекстСообщения = НСтр("ru='При внесении денежных средств в кассу ККМ произошла ошибка.
                                                    |Дополнительное описание:
                                                    |%ДополнительноеОписание%'
                                                    |;uk='При внесенні грошових коштів у касу ККМ сталася помилка.
                                                    |Додатковий опис:
                                                    |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
					
				Иначе
					
					ТекстСообщения = НСтр("ru='При печати чека произошла ошибка.
                                                |Чек не напечатан на фискальном регистраторе.
                                                |Дополнительное описание:
                                                |%ДополнительноеОписание%'
                                                |;uk='При друку чека виникла помилка.
                                                |Чек не надрукований на фіскальному реєстраторі.
                                                |Додатковий опис:
                                                |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
						"%ДополнительноеОписание%",
						ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                            |Чек не напечатан на фискальном регистраторе.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При підключенні пристрою сталася помилка.
                                            |Чек не надрукований на фіскальному реєстраторі.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ИзымаемаяСумма = 0;
		
		ОткрытьФорму("Документ.ВыемкаДенежныхСредствИзКассыККМ.Форма.ВводСуммы", 
			Новый Структура("Валюта", СтруктураСостояниеКассовойСмены.Валюта),,,,, 
			Новый ОписаниеОповещения("ВыемкаДенегЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце зовнішнього обладнання поточного сеансу.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыемкаДенегЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
	ВозвращенноеЗначение = Результат1;
	Если ВозвращенноеЗначение <> Неопределено И ТипЗнч(ВозвращенноеЗначение) = Тип("Число") Тогда
		
		ИзымаемаяСумма = ВозвращенноеЗначение;
		
		ОписаниеОшибки = "";
		
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			Результат = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройства);
			
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					//Готовим данные
					ВходныеПараметры  = Новый Массив();
					ВыходныеПараметры = Неопределено;
					
					ВходныеПараметры.Добавить(0);
					ВходныеПараметры.Добавить(ИзымаемаяСумма);
					
					// Печатаем чек.
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
						"Encash",
						ВходныеПараметры,
						ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					// Итоговое действие.
					Результат = СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Новый Структура("КассаККМ, СуммаВнесения, Дата", КассаККМ, ИзымаемаяСумма, ТекущаяДата()), ОписаниеОшибки);
					Если Не Результат Тогда
						
						ТекстСообщения = НСтр("ru='При выемке денежных средств из кассы ККМ произошла ошибка.
                                                    |Дополнительное описание:
                                                    |%ДополнительноеОписание%'
                                                    |;uk='При вийманні грошових коштів з каси ККМ сталася помилка.
                                                    |Додатковий опис:
                                                    |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
					
				Иначе
					
					ТекстСообщения = НСтр("ru='При печати чека произошла ошибка.
                                                |Чек не напечатан на фискальном регистраторе.
                                                |Дополнительное описание:
                                                |%ДополнительноеОписание%'
                                                |;uk='При друку чека виникла помилка.
                                                |Чек не надрукований на фіскальному реєстраторі.
                                                |Додатковий опис:
                                                |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
						"%ДополнительноеОписание%",
						ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                            |Чек не напечатан на фискальном регистраторе.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При підключенні пристрою сталася помилка.
                                            |Чек не надрукований на фіскальному реєстраторі.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьНулевойЧек(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		// Подключение устройства
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибки = "";
			
			Результат = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройства);
			
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					//Напечатать нулевой чек на фискальном регистраторе
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintNullReceipt",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Не Результат И Не ИспользоватьБезПодключенияОборудования Тогда
					
					ТекстСообщения = НСтр("ru='При печати чека произошла ошибка.
                                          |Чек не напечатан на фискальном регистраторе.
                                          |Дополнительное описание:
                                          |%ДополнительноеОписание%'
                                          |;uk='При друку чека виникла помилка.
                                          |Чек не надрукований на фіскальному реєстраторі.
                                          |Додатковий опис:
                                          |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					                             "%ДополнительноеОписание%",
					                             ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                            |Чек не напечатан на фискальном регистраторе.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При підключенні пристрою сталася помилка.
                                            |Чек не надрукований на фіскальному реєстраторі.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце зовнішнього обладнання поточного сеансу.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключенноеОборудование(Команда)
	
	ОткрытьФормуПодключенноеОборудование(Ложь);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.ЧекиККМ);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.ЧекиККМ);
	
КонецПроцедуры
// Конец МенюОтчеты

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЧекККМВозврат.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Элементы.ЧекиККМ.ТекущаяСтрока = Ссылка;
		ИмяОтрываемойФормы = ИмяОтрываемойФормы(Ссылка);
		
		Если СтатусДокумента(Ссылка) <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", Ссылка);
			ОткрытьФорму(ИмяОтрываемойФормы, ПараметрыОткрытия);
		Иначе
			ПоказатьЗначение(,Ссылка);
		КонецЕсли;
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания()
	
	ОткрытьФормуПодключенноеОборудование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудование(ПодключитьОборудованиеПриОткрытии = Истина)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор",           УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ПодключитьОборудованиеПриОткрытии", ПодключитьОборудованиеПриОткрытии);
	ПараметрыОткрытия.Вставить("ПоддерживаемыеТипыПодключаемогоОборудования", ПоддерживаемыеТипыПодключаемогоОборудования);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ПодключенноеОборудование", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервереБезКонтекста
Функция СостояниеКассовойСменыНаСервереБезКонтекста(КассаККМ)
	
	Возврат РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции

&НаСервере
Процедура КассаОтборПриИзмененииСервер()
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	УстановитьОтборДинамическихСписковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	СменаОткрыта = Ложь;
	ТекущаяКассоваяСмена = Неопределено;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервереБезКонтекста(КассаККМ);
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
			
			ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%';uk='Зміна № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В касі %НаличностьВКассе% %Валюта%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СтруктураСостояниеКассовойСмены.СтатусКассовойСмены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
			
			СостояниеКассовойСмены = ТекстСообщения;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Смена не открыта, В кассе %НаличностьВКассе% %Валюта%';uk='Зміна не выдкрита, В касі %НаличностьВКассе% %Валюта%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
			
			СостояниеКассовойСмены = ТекстСообщения;
			
		КонецЕсли;
		
		// Переменная формы
		СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
		ТекущаяКассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(КассаККМ));
	
	Иначе
		
		СостояниеКассовойСмены = НСтр("ru='Касса ККМ не выбрана.';uk='Каса ККМ не вибрана.'");
		ПараметрыКассыККМ = Неопределено;
		
	КонецЕсли;
	
	ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователи.ТекущийПользователь());
	
	// Управление доступностью.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СнятьZОтчет",                       "Доступность", СменаОткрыта И ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ЗакрытьСмену);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену",              "Доступность", НЕ СменаОткрыта И ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ОткрытьСмену);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМСоздать",                    "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМСкопировать",                "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМСоздать",     "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМСкопировать", "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег",                     "Доступность", ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ВнесениеДенег);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег",                       "Доступность", ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ВыемкаДенег);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбновитьСостояниеКассовойСмены",    "Доступность", ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПробитьНулевойЧек",                 "Доступность", СменаОткрыта И ЗначениеЗаполнено(КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ)
	
	СменаОткрыта = Ложь;
	ТекущаяКассоваяСмена = Неопределено;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
	
		СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервереБезКонтекста(КассаККМ);
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
			
			ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%';uk='Зміна № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В касі %НаличностьВКассе% %Валюта%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СтруктураСостояниеКассовойСмены.СтатусКассовойСмены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
			
			СостояниеКассовойСмены = ТекстСообщения;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Смена не открыта, В кассе %НаличностьВКассе% %Валюта%';uk='Зміна не выдкрита, В касі %НаличностьВКассе% %Валюта%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
			
			СостояниеКассовойСмены = ТекстСообщения;
			
		КонецЕсли;
		
		// Переменная формы
		СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
		ТекущаяКассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	
	Иначе
		
		СтруктураСостояниеКассовойСмены = Неопределено;
		СостояниеКассовойСмены = НСтр("ru='Касса ККМ не выбрана.';uk='Каса ККМ не вибрана.'");
		
	КонецЕсли;
	
	// Управление доступностью.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СнятьZОтчет",                       "Доступность", СменаОткрыта);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену",              "Доступность", НЕ СменаОткрыта И ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМСоздать",                    "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМСкопировать",                "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМСоздать",     "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМСкопировать", "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег",                     "Доступность", ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег",                       "Доступность", ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбновитьСостояниеКассовойСмены",    "Доступность", ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПробитьНулевойЧек",                 "Доступность", СменаОткрыта И ЗначениеЗаполнено(КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСозданияДокументовНаВозврат()
	
	Если СтруктураСостояниеКассовойСмены = Неопределено И ЗначениеЗаполнено(КассаККМ) Тогда
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И СтруктураСостояниеКассовойСмены <> Неопределено
		И ТекущиеДанные.Свойство("Тип")
		И ТекущиеДанные.Тип <> Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.НомерЧекаККМ)
			И ТекущиеДанные.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена
			И СменаОткрыта Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",   "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМКонтекстноеМенюДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",   "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
			
		Иначе
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",   "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМКонтекстноеМенюДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",   "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
			
			Если ЗначениеЗаполнено(ТекущиеДанные.НомерЧекаККМ)
				И (ТекущиеДанные.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена И НЕ СменаОткрыта)
				Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                          "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",          "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",                "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании",        "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМКонтекстноеМенюДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",   "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Истина);
				
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НомерЧекаККМ)
				И (ТекущиеДанные.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена)
				Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                          "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",          "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",                "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании",        "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМКонтекстноеМенюДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",   "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Истина);
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                          "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",          "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",                "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании",        "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМКонтекстноеМенюДокументВозвратПодарочныхСертификатовСоздатьНаОсновании",   "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки = "")
	
	Возврат РозничныеПродажи.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗакрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "")
	
	Возврат РозничныеПродажи.ВыполнитьОперациюЗакрытияКассовойСмены(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ)
	
	ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
	
	УстановитьОтборДинамическихСписковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписковНаКлиенте()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассаККМ", КассаККМ, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(КассаККМ));
	
	Если ТолькоТекущаяСмена = 0 Тогда // Все
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ТолькоТекущаяСмена = 1 Тогда // Только текущая смена
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ТолькоТекущаяСмена = 2 Тогда // Все отложенные
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли ТолькоТекущаяСмена = 3 Тогда // Отложенные по текущей смене
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборДинамическихСписковНаКлиенте()

&НаСервере
Процедура УстановитьОтборДинамическихСписковНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассаККМ", КассаККМ, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(КассаККМ));
	
	Если ТолькоТекущаяСмена = 0 Тогда // Все
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ТолькоТекущаяСмена = 1 Тогда // Только текущая смена
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ТолькоТекущаяСмена = 2 Тогда // Все отложенные
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли ТолькоТекущаяСмена = 3 Тогда // Отложенные по текущей смене
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусДокумента(Ссылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные, ОписаниеОшибки)
	Возврат РозничныеПродажи.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные, ОписаниеОшибки);
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки)
	Возврат РозничныеПродажи.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки);
КонецФункции

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, СтрокаТЧ) Экспорт

	Если НЕ Данные.Результат Тогда
		
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка:
                                    |""%ОписаниеОшибки%"".'
                                    |;uk='При підключенні пристрою виникла помилка:
                                    |""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Данные.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		СтрокаТЧ.Подключено = 1;
		
	Иначе
		
		СтрокаТЧ.Подключено = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяОтрываемойФормы(Ссылка)
	
	ИмяОтрываемойФормы = "";
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ИмяОтрываемойФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		ИмяОтрываемойФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов") Тогда
		ИмяОтрываемойФормы = "Документ.РеализацияПодарочныхСертификатов.Форма.ФормаДокументаРМК";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратПодарочныхСертификатов") Тогда
		ИмяОтрываемойФормы = "Документ.ВозвратПодарочныхСертификатов.Форма.ФормаДокументаРМК";
	КонецЕсли;
	
	Возврат ИмяОтрываемойФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

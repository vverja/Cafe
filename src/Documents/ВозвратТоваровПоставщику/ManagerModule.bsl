#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	Шапка.СпособДоставки    КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Шапка.Склад             КАК Склад,
	|	ИСТИНА                  КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка В (&Ссылки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам") Тогда
		КомандаСоздания = Документы.АктОРасхожденияхПослеОтгрузки.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
		Если КомандаСоздания <> Неопределено Тогда
			КомандаСоздания.Представление = НСтр("ru='Акт о расхождениях после возврата поставщику';uk='Акт про розбіжності після повернення постачальнику'");
		КонецЕсли;
	КонецЕсли;
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСоздатьНаОсновании);
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПоступлениеТоваровУслуг.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВозвратТоваровПоставщику) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ВозвратТоваровПоставщику.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ВозвратТоваровПоставщику);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОстаткиТоваровОрганизаций(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовПоПринятойВозвратнойТаре(КомандыОтчетов);
	
	// ФормаСпискаДокументов
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовПоПринятойВозвратнойТаре(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.Порядок = 3;
	КонецЕсли;

КонецПроцедуры

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику);
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерий.ПланированиеОтбора   = Ложь;
	ПараметрыУказанияСерий.ФактОтбора           = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.РегистрироватьСерии = НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);

	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И &ФактОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоВозвратуПоставщику
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|				И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО (Склады.Ссылка = ПолитикиУчетаСерий.Склад)
	|			ПО ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|				И ПолитикиУчетаСерий.Склад = &Склад
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции



// Возвращает текст запроса для получениях доступных назначений
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Возврат Справочники.Назначения.ТекстЗапросаНеобеспеченныхНазначенийОбеспечено(ПараметрыФормированияЗапроса);
	
КонецФункции

Функция МетаданныеДокумента() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Если ИмяРегистра = "Закупки" Тогда
		ИсточникиДанных.Вставить("ВидыЗапасов.АналитикаУчетаНоменклатуры");
	КонецЕсли;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДополнительныеСвойства);
	
	// Текст запроса, формирующего таблицы движений
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПринятаяВозвратнаяТара(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументовТовары(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументовРасшифровкаПлатежа(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСРасчетНалоговогоКредита(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
	
	// Выполение запроса и выгрузка полученных таблиц для формирования движений
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
    Если ПроведениеСервер.ТребуетсяТаблицаДляДвижений("НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов", Регистры) Тогда
        
    	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов", 
    		ДополнитьТаблицуОбъектомРасчетов(
    			ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументовТовары,
    			ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументовРасшифровкаПлатежа
    		)
    	);
        
    КонецЕсли;    
 	
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                КАК Ссылка,
		|	ДанныеДокумента.Дата                  КАК Период,
		|	ДанныеДокумента.Организация           КАК Организация,
		|	ДанныеДокумента.Партнер               КАК Партнер,
		|	ДанныеДокумента.Контрагент            КАК Контрагент,
		|	ДанныеДокумента.Валюта                КАК Валюта,
		|	ДанныеДокумента.Склад                 КАК Склад,
		|	ДанныеДокумента.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Подразделение         КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ДанныеДокумента.Дата >= ДанныеДокумента.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                 КАК ИспользоватьОрдернуюСхемуПриОтгрузке,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Возврат) КАК ВидПоставки,
		|	ВЫБОР КОГДА ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК РасчетыПоДоговорамКонтрагентов,
		|	
		|	ДанныеДокумента.ВозвратПринятойМногооборотнойТары КАК ВозвратПринятойМногооборотнойТары,
		|	ДанныеДокумента.ПредусмотренЗалогЗаТару           КАК ПредусмотренЗалогЗаТару,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК ВернутьДенежныеСредства,
		|	ДанныеДокумента.Менеджер КАК Менеджер,
		|	ДанныеДокумента.Договор	КАК Договор,
		|	ДанныеДокумента.ДокументПоступления КАК ДокументПоступления,
		|	ЕСТЬNULL(ДанныеДокумента.ДокументПоступления.ЗаказПоставщику,
		|		Значение(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ЗаказПоступления,
		|	ДанныеДокумента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ДокументПоступления.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		|			И ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетыПоДоговорам,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ДокументПоступления.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		|			И ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетыПоНакладным,
		|	ДанныеДокумента.Соглашение КАК Соглашение,
		|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВЫБОР КОГДА ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|		И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК ГрафикИсполненияВДоговоре
		|
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Склад",                                    Реквизиты.Склад);
	Запрос.УстановитьПараметр("Валюта",                                   Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Период",                                   Реквизиты.Период);
	Запрос.УстановитьПараметр("Контрагент",                               Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Организация",                              Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                          ?(Реквизиты.ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",                    Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",           Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",               Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ИспользоватьОрдернуюСхемуПриОтгрузке",     Реквизиты.ИспользоватьОрдернуюСхемуПриОтгрузке);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("ВозвратПринятойМногооборотнойТары",        Реквизиты.ВозвратПринятойМногооборотнойТары);
	Запрос.УстановитьПараметр("Партнер",                                  Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Подразделение",                            Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ПредусмотренЗалогЗаТару",                  Реквизиты.ПредусмотренЗалогЗаТару);
	Запрос.УстановитьПараметр("ВернутьДенежныеСредства",                  Реквизиты.ВернутьДенежныеСредства);
	Запрос.УстановитьПараметр("Менеджер",                                 Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Договор", 								  Реквизиты.Договор);
	Запрос.УстановитьПараметр("ДокументПоступления",					  Реквизиты.ДокументПоступления);
	Запрос.УстановитьПараметр("ЗаказПоступления", 						  Реквизиты.ЗаказПоступления);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", 				  Реквизиты.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам", 					  Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным", 					  Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ИспользоватьПартионныйУчет",               ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет"));
	Запрос.УстановитьПараметр("Соглашение",								  Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",				  Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре",                Реквизиты.ГрафикИсполненияВДоговоре);
	Запрос.УстановитьПараметр("РасчетыПоДоговорамКонтрагентов",           Реквизиты.РасчетыПоДоговорамКонтрагентов);
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС",                 НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ВидПоставки",                              Реквизиты.ВидПоставки);
	Запрос.УстановитьПараметр("МоментОпределенияБазыНДС",                 НДСВходящийСервер.ОпределитьМоментОпределенияБазыНДС(Реквизиты.ВидПоставки, Реквизиты.ХозяйственнаяОперация, Реквизиты.Организация, Реквизиты.Договор));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",           Константы.ВалютаРегламентированногоУчета.Получить());
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПартнеровИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос();
	ТекстЗапроса = ТекстЗапросаВтОбъектыРасчетов(ЗапросАналитик, Новый СписокЗначений());
	ТекстЗапроса = ТекстЗапроса + "
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|";
	
	ЗапросАналитик.Текст = ТекстЗапроса
		+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	&Контрагент КАК Контрагент,
		|	&Партнер КАК Партнер,
		|	ТаблицаОбъектовРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаОбъектовРасчетов.Договор КАК Договор
		|ИЗ
		|	ВтОбъектыРасчетов КАК ТаблицаОбъектовРасчетов
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|	ПО
		|		&Организация = Аналитика.Организация
		|		И &Контрагент = Аналитика.Контрагент
		|		И &Партнер = Аналитика.Партнер
		|		И ТаблицаОбъектовРасчетов.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
		|		И ТаблицаОбъектовРасчетов.Договор = Аналитика.Договор
		|ГДЕ
		|	Аналитика.КлючАналитики ЕСТЬ NULL";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                  Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Организация",             Запрос.Параметры.Организация);
	ЗапросАналитик.УстановитьПараметр("Контрагент",              Запрос.Параметры.Контрагент);
	ЗапросАналитик.УстановитьПараметр("Партнер",                 Запрос.Параметры.Партнер);
	ЗапросАналитик.УстановитьПараметр("НаправлениеДеятельности", Запрос.Параметры.НаправлениеДеятельности);
	ЗапросАналитик.УстановитьПараметр("Договор",                 Запрос.Параметры.Договор);
	ЗапросАналитик.УстановитьПараметр("ВернутьДенежныеСредства", Запрос.Параметры.ВернутьДенежныеСредства);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПартнеровИнициализированы", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАналитики = Новый Структура;
	ПараметрыАналитики.Вставить("Организация", 				Запрос.Параметры.Организация);
	ПараметрыАналитики.Вставить("Партнер",     				Запрос.Параметры.Партнер);
	ПараметрыАналитики.Вставить("Контрагент",  				Запрос.Параметры.Контрагент);
	ПараметрыАналитики.Вставить("Договор",     				Запрос.Параметры.Договор);
	ПараметрыАналитики.Вставить("НаправлениеДеятельности", 	Запрос.Параметры.НаправлениеДеятельности);
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(ПараметрыАналитики));
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Запрос.Параметры.Валюта, Неопределено, Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Процедура ПересчитатьТаблицуТоваровВВалютуРегл(Запрос)
	
	Если Запрос.Параметры.Свойство("ТаблицаТоваровПредварительнаяРасчитана") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПредварительный = Новый Запрос;
	ЗапросПредварительный.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПредварительный.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
		|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
		|	ТаблицаДокумента.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
		|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
		|	ТаблицаДокумента.СтавкаНДС                             КАК СтавкаНДС,
		|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС,
		|	&Валюта                                                КАК Валюта,
		|	&Период                                                КАК Дата
		|
		|ПОМЕСТИТЬ ТаблицаТоваровПредварительная
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ВидыЗапасов КАК ТаблицаДокумента
		|
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И &Валюта <> &ВалютаРегламентированногоУчета
		|	И НЕ &ВозвратКомитенту";
	ЗапросПредварительный.УстановитьПараметр("Ссылка",                         Запрос.Параметры.Ссылка);
	ЗапросПредварительный.УстановитьПараметр("Период",                         Запрос.Параметры.Период);
	ЗапросПредварительный.УстановитьПараметр("Валюта",                         Запрос.Параметры.Валюта);
	ЗапросПредварительный.УстановитьПараметр("ВалютаРегламентированногоУчета", Запрос.Параметры.ВалютаРегламентированногоУчета);
	ЗапросПредварительный.УстановитьПараметр("ВозвратКомитенту",               Запрос.Параметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	
	ЗапросПредварительный.Выполнить();
	
	ОбщегоНазначенияУТ.ПересчитатьТаблицуТоваровВВалютуРегл(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("ТаблицаТоваровПредварительнаяРасчитана", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса)
	ИмяВременнойТаблицы = "ВтТаблицаСерииТоваров";
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
		|			ТОГДА ТаблицаТовары.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК Назначение,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ТаблицаТовары.Серия КАК Серия,
		|	ТаблицаТовары.НомерСтроки,
		|	0 КАК Порядок
		|ПОМЕСТИТЬ ВтТаблицаСерииТоваров
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И (НЕ ТаблицаТовары.СтатусУказанияСерий В (4, 6, 8))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	ТаблицаСерии.Назначение,
		|	ТаблицаСерии.Количество,
		|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий),
		|	ТаблицаСерии.Серия,
		|	МИНИМУМ(ТаблицаСерии.НомерСтроки),
		|	1
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Серии КАК ТаблицаСерии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
		|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
		|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
		|			И ТаблицаСерии.Назначение = ТаблицаТовары.Назначение
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаСерии.Количество <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	ТаблицаСерии.Назначение,
		|	ТаблицаСерии.Серия,
		|	ТаблицаСерии.Количество
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (4, 6, 8)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОбъектыРасчетов(Запрос, ТекстыЗапроса)
	ИмяВременнойТаблицы = "ВтОбъектыРасчетов";
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРасшифровкаПлатежа.Заказ КАК Заказ,
		|
		|	ВЫБОР КОГДА &ВернутьДенежныеСредства
		|		И (ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
		|		ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) ТОГДА
		|		&Договор
		|	КОГДА ТаблицаРасшифровкаПлатежа.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
		|		ТаблицаРасшифровкаПлатежа.Заказ
		|	ИНАЧЕ
		|		ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.Заказ.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|	КОНЕЦ КАК Договор,
		|
		|	ВЫБОР 
		|		КОГДА ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА &НаправлениеДеятельности
		|		ИНАЧЕ
		|   		ТаблицаРасшифровкаПлатежа.Заказ.НаправлениеДеятельности 
		|	КОНЕЦ КАК НаправлениеДеятельности 
		|
		|ПОМЕСТИТЬ ВтОбъектыРасчетов
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|	
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	ИмяВременнойТаблицы = "ВтВидыЗапасов";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                КАК НомерСтроки,
	|	Аналитика.Номенклатура                        КАК Номенклатура,
	|	Аналитика.Характеристика                      КАК Характеристика,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов      КАК ТипЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                 КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС                  КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС                   КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СтавкаНДС                  КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.ВидЗапасов.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТаблицаВидыЗапасов.ЦелевоеНалоговоеНазначение 	  КАК ЦелевоеНалоговоеНазначение,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки        КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовСводно(Запрос, ТекстыЗапроса)
	ИмяВременнойТаблицы = "ВтВидыЗапасовСводно";
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
    |	МАКСИМУМ(ВтВидыЗапасов.НалоговоеНазначение.ВидДеятельностиНДС) КАК ВидДеятельностиНДС,
	|	МАКСИМУМ(ВтВидыЗапасов.НалоговоеНазначение) КАК НалоговоеНазначение
	|ПОМЕСТИТЬ ВтВидыЗапасовСводно
	|ИЗ
	|	ВтВидыЗапасов КАК ВтВидыЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтВидыЗапасов.АналитикаУчетаНоменклатуры";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	Возврат ТекстЗапроса;
	
КонецФункции
 

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СвободныеОстатки";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаСерииТоваров", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Количество               КАК ВНаличии,
		|	ВЫБОР КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТаблицаТовары.Количество
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ                              КАК ВРезервеПодЗаказ
		|ИЗ
		|	ВтТаблицаСерииТоваров КАК ТаблицаТовары";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Назначение               КАК Назначение,
		|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ,
		|	-ТаблицаТовары.Количество              КАК КЗаказу
		|
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаСерииТоваров", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период КАК Период,
		|	&Склад  КАК Склад,
		|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Назначение     КАК Назначение,
		|	ТаблицаТовары.Серия          КАК Серия,
		|	ТаблицаТовары.Количество     КАК ВНаличии,
		|	0                            КАК КОтгрузке
		|ИЗ
		|	ВтТаблицаСерииТоваров КАК ТаблицаТовары
		|ГДЕ
		|	НЕ &ИспользоватьОрдернуюСхемуПриОтгрузке";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	&Партнер                               КАК Получатель,
		|	&Ссылка                                КАК ДокументОтгрузки,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) ТОГДА
		|				ТаблицаТовары.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                              КАК Назначение,
		|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В (10, 14) ТОГДА
		|				ТаблицаТовары.Серия
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ                              КАК Серия,
		|	ТаблицаТовары.Количество               КАК КОтгрузке
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	&Партнер                               КАК Получатель,
		|	&Ссылка                                КАК ДокументОтгрузки,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) ТОГДА
		|				ТаблицаТовары.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                              КАК Назначение,
		|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В (10, 14) ТОГДА
		|				ТаблицаТовары.Серия
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ                              КАК Серия,
		|	ТаблицаТовары.Количество               КАК КОтгрузке
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	НЕ &ИспользоватьОрдернуюСхемуПриОтгрузке
		|	И ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура   КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) ТОГДА
		|				ТаблицаСерии.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                   КАК Назначение,
		|	ТаблицаСерии.Серия          КАК Серия,
		|	ТаблицаСерии.Количество     КАК Количество,
		|	&Склад                      КАК Отправитель,
		|	&Партнер                    КАК Получатель,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику) КАК СкладскаяОперация,
		|	&Ссылка                     КАК Документ,
		|	&Период                     КАК Период,
		|	&Ссылка                     КАК Регистратор,
		|	НЕ &ИспользоватьОрдернуюСхемуПриОтгрузке КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Серии КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Количество <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура   КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) ТОГДА
		|				ТаблицаСерии.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                   КАК Назначение,
		|	ТаблицаСерии.Серия          КАК Серия,
		|	ТаблицаСерии.Количество     КАК Количество,
		|	&Склад                      КАК Склад,
		|	&Партнер                    КАК Получатель,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику) КАК СкладскаяОперация,
		|	&Ссылка                     КАК Документ,
		|	&Период                     КАК Период,
		|	&Ссылка                     КАК Регистратор,
		|	НЕ &ИспользоватьОрдернуюСхемуПриОтгрузке КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПринятаяВозвратнаяТара(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПринятаяВозвратнаяТара";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) ТОГДА
		|				ТаблицаТовары.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                                             КАК Назначение,
		|	ТаблицаТовары.Количество                              КАК Количество,
		|	ТаблицаТовары.ДокументПоступления                     КАК ДокументПоступления,
		|	ТаблицаТовары.Сумма
		|		+ ТаблицаТовары.СуммаНДС * &ЦенаВключаетНДС       КАК Сумма,
		|	&Партнер                                              КАК Партнер,
		|	&ПредусмотренЗалогЗаТару                              КАК ПредусмотренЗалог
		|
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
		|
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|	И &ВозвратПринятойМногооборотнойТары";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтОбъектыРасчетов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОбъектыРасчетов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	&Период КАК Период,
		|	&Период КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
		|	
		|	ВЫБОР КОГДА (РасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
		|			ИЛИ РасшифровкаПлатежа.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) ТОГДА
		|		ВЫБОР КОГДА &ВернутьДенежныеСредства ТОГДА
		|			&Ссылка
		|		КОГДА	&РасчетыПоДоговорам ТОГДА
		|			&Договор
		|		ИНАЧЕ
		|			&Ссылка
		|		КОНЕЦ
		|	ИНАЧЕ
		|		РасшифровкаПлатежа.Заказ
		|	КОНЕЦ КАК ЗаказПоставщику,
		|	
		|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
		|	
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК КОплате,
		|	ВЫРАЗИТЬ(РасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ(РасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
		|	&Организация КАК Организация
		|	
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОбъектыРасчетов КАК ТаблицаОбъектовРасчетов
		|		ПО РасшифровкаПлатежа.Заказ = ТаблицаОбъектовРасчетов.Заказ
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|	ПО
		|		&Организация = Аналитика.Организация
		|		И &Контрагент = Аналитика.Контрагент
		|		И &Партнер = Аналитика.Партнер
		|		И ТаблицаОбъектовРасчетов.Договор = Аналитика.Договор
		|		И ТаблицаОбъектовРасчетов.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
		|	
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка
		|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасшифровкаПлатежа.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки                КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)        КАК ВидДвижения,
		|	&Период                                       КАК Период,
		|	&Склад                                        КАК Склад,
		|	&Организация                                  КАК ОрганизацияОтгрузки,
		|	&Организация                                  КАК Организация,
		|	ТаблицаВидыЗапасов.Номенклатура               КАК Номенклатура,
		|	ТаблицаВидыЗапасов.Характеристика             КАК Характеристика,
		|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество                 КАК Количество,
    	|   ТаблицаВидыЗапасов.ЦелевоеНалоговоеНазначение КАК НалоговоеНазначение,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВидыЗапасов.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период КАК Период,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	&Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
		|	КОНЕЦ КАК РазделУчета,
		|
		|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
		|		ВидыЗапасов.ВидЗапасов
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ВидЗапасов,
		|   ВидыЗапасов.НалоговоеНазначение КАК НалоговоеНазначение,
		|   ВидыЗапасов.ЦелевоеНалоговоеНазначение КАК КорНалоговоеНазначение,
		|
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВЫРАЗИТЬ(ВидыЗапасов.СуммаСНДС * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15,2)) КАК Стоимость,
		|	ВЫРАЗИТЬ(ВидыЗапасов.СуммаСНДС * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15,2)) КАК КорСтоимость,
		|	ВЫРАЗИТЬ((ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15,2)) КАК СтоимостьБезНДС,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА 0
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ((ВидыЗапасов.СуммаСНДС - (ВЫБОР КОГДА ВидыЗапасов.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) ТОГДА 0 ИНАЧЕ ВидыЗапасов.СуммаНДС КОНЕЦ)) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) 
		|	КОНЕЦ КАК СтоимостьРегл,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА 0
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ((ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) 
		|	КОНЕЦ КАК СтоимостьРеглБезНДС,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА 0
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(ВидыЗапасов.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) 
		|	КОНЕЦ КАК НДСРегл,
		|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров) КАК СтатьяРасходовСписания,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров) КАК СтатьяДоходов,
		|	&Партнер КАК АналитикаРасходов,
		|	&Партнер КАК АналитикаДоходов,
		|	&Подразделение КАК Подразделение,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|		ТОГДА &Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументДвижения
		|ИЗ
		|	ВтВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.ТипЗапасов В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар))
		|	И &ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ПересчитатьТаблицуТоваровВВалютуРегл(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Валюта КАК Валюта,
		|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаВидыЗапасов.СуммаСНДС - ТаблицаВидыЗапасов.СуммаНДС КАК СуммаБезНДС,
		|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДокументаРегл.СуммаБезНДС КАК СуммаБезНДСРегл,
		|	ТаблицаДокументаРегл.СуммаНДС КАК СуммаНДСРегл,
		|	НЕОПРЕДЕЛЕНО КАК ТипРасчетов
		|
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаТоваровПредварительная КАК ТаблицаДокументаРегл
		|	ПО
		|		ТаблицаВидыЗапасов.ИдентификаторСтроки = ТаблицаДокументаРегл.ИдентификаторСтроки
		|
		|ГДЕ
		|	&Валюта <> &ВалютаРегламентированногоУчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаВидыЗапасов.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
		"// Возврат товаров поставщику.
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|	&Менеджер КАК Менеджер,
		|
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Склад КАК Склад,
		|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
		|	ВЫБОР
		|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
		|			ТОГДА ВидыЗапасов.ВидЗапасов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|   КОНЕЦ КАК ВидЗапасов,
		|	
		|	&Партнер КАК Партнер,
		|	&Контрагент КАК Контрагент,
		|	&Соглашение КАК Соглашение,
		|	&Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА &ЗаказПоступления <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|   		ТОГДА &ЗаказПоступления
		|		ИНАЧЕ &ДокументПоступления
		|	КОНЕЦ КАК Заказ,
		|
		|	ВидыЗапасов.Количество КАК Количество,
		|
		|	ВЫРАЗИТЬ(ВидыЗапасов.СуммаСНДС * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15,2)) КАК Сумма,
		|	ВЫРАЗИТЬ((ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
		|	ВЫРАЗИТЬ(ВидыЗапасов.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВЫРАЗИТЬ((ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРеглБезНДС,
		|	0 КАК СуммаСкидки,
		|
		|	ВЫРАЗИТЬ(ВидыЗапасов.СуммаСНДС * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15,2)) КАК Стоимость,
		|	ВЫРАЗИТЬ((ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15,2)) КАК СтоимостьБезНДС,
		|	ВЫРАЗИТЬ((ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) КАК СтоимостьРегл,
		|	0 КАК СуммаДопРасходов,
		|	0 КАК СуммаДопРасходовБезНДС,
		|
		|	&Валюта КАК ВалютаДокумента,
		|	ВидыЗапасов.СуммаСНДС КАК СуммаВВалютеДокумента,
		|	ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС КАК СуммаБезНДСВВалютеДокумента,
		|
		|	&Валюта КАК ВалютаВзаиморасчетов,
		|	ВидыЗапасов.СуммаСНДС КАК СуммаВВалютеВзаиморасчетов,
		|	ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС КАК СуммаБезНДСВВалютеВзаиморасчетов,
		|
		|	ВЫБОР
		|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
		|			ТОГДА ВидыЗапасов.ВидЗапасов
		|		ИНАЧЕ ВидыЗапасов.Номенклатура
		|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
		|	ВЫБОР
		|		КОГДА &РасчетыПоДоговорам
		|			ТОГДА &Договор
		|		КОГДА &ЗаказПоступления <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) И НЕ &РасчетыПоНакладным
		|			ТОГДА &ЗаказПоступления
		|		ИНАЧЕ &Ссылка
		|	КОНЕЦ КАК ИсточникГФУРасчетов
		|ИЗ
		|	ВтВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.ТипЗапасов В (ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар))
		|	И &ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту))
		|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ВозвратТоваровПоставщику";
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке",
		"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
	
	Если ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru='В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';uk='У документі %ПолноеИмяДокумента% не реалізована адаптація тексту запиту формування рухів по регістру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;

КонецФункции

Функция ТекстЗапросаТаблицаНДСРасчетНалоговогоКредита(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСРасчетНалоговогоКредита";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорамКонтрагентов ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаТовары.ДокументПоступления
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	&Ссылка КАК ДокументПоставки,
	|
	|	&ВидПоставки КАК ВидПоставки, 
	|	&МоментОпределенияБазыНДС КАК МоментОпределенияБазыНДС,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДС) КАК СуммаПоставкиТребующаяРегистрацииНН,
	|   0 КАК СуммаПоставкиНеТребующаяРегистрацииНН
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрганизацияПлательщикНДС
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту)
	|   И &ВалютаРегламентированногоУчета = &Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ДокументПоступления
	|
	|ИМЕЮЩИЕ 
	|	СУММА(ТаблицаТовары.СуммаСНДС) <> 0
	|
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументовРасшифровкаПлатежа(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументовРасшифровкаПлатежа";
	ИмяРегистраДляПроверки = "НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистраДляПроверки, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтОбъектыРасчетов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОбъектыРасчетов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА &ВернутьДенежныеСредства
	|			И (ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) ТОГДА
	|		ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|			&Договор
	|		ИНАЧЕ
	|			&Ссылка
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ТаблицаРасшифровкаПлатежа.Заказ
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
// В валюте документа
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма) КАК СуммаВзаиморасчетов 
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОбъектыРасчетов КАК ТаблицаОбъектовРасчетов
	|		ПО ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОбъектовРасчетов.Заказ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И &Партнер = Аналитика.Партнер
	|		И ТаблицаОбъектовРасчетов.Договор = Аналитика.Договор
	|		И ТаблицаОбъектовРасчетов.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|
	|ГДЕ
	|	&ОрганизацияПлательщикНДС
	|	И ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|   И &ВалютаРегламентированногоУчета = &Валюта
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА &ВернутьДенежныеСредства
	|			И (ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) ТОГДА
	|		ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|			&Договор
	|		ИНАЧЕ
	|			&Ссылка
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ТаблицаРасшифровкаПлатежа.Заказ
	|	КОНЕЦ,
	|	Аналитика.КлючАналитики
	|
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументовТовары(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументовТовары";
	ИмяРегистраДляПроверки = "НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов";
    
    Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистраДляПроверки, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
 	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасовСводно", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасовСводно(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
 	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР
	|   	КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику) ТОГДА
// Заполняется после выполнения общего запроса
	|			НЕОПРЕДЕЛЕНО
	|   	КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту) ТОГДА
	|			ВЫБОР КОГДА &РасчетыПоДоговорамКонтрагентов ТОГДА
	|				&Договор
	|			ИНАЧЕ
	|				ТаблицаТовары.ДокументПоступления
	|			КОНЕЦ
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	&ВидПоставки КАК ВидПоставки,
	|
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВтВидыЗапасовСводно.НалоговоеНазначение КАК НалоговоеНазначение,
	|	СУММА(ТаблицаТовары.СуммаСНДС) КАК СуммаВзаиморасчетов,
	|   СУММА(ВЫБОР 
	|   	КОГДА НЕ &ОрганизацияПлательщикНДС 
	|			ТОГДА 0
	|		КОГДА ТаблицаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) 
	|			ТОГДА 0
	|		КОГДА ТаблицаТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС) 
	|			ТОГДА 0
	|	    КОГДА ВтВидыЗапасовСводно.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|			ТОГДА 0
	|		ИНАЧЕ
	|   		ТаблицаТовары.СуммаНДС
	|	КОНЕЦ) КАК СуммаНДСКредит,
	|
	|	НЕОПРЕДЕЛЕНО КАК ДатаВходящегоНалоговогоДокумента,
	|	&Ссылка КАК ДокументПоставки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
    |ЛЕВОЕ СОЕДИНЕНИЕ 
	|	ВтВидыЗапасовСводно
	|ПО 
	|    ТаблицаТовары.АналитикаУчетаНоменклатуры = ВтВидыЗапасовСводно.АналитикаУчетаНоменклатуры		
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|   И &ОрганизацияПлательщикНДС
	|   И &ВалютаРегламентированногоУчета = &Валюта
	|   И (НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ИЛИ НЕ &ВозвратПринятойМногооборотнойТары)
    |
    |СГРУППИРОВАТЬ ПО
    |   ВтВидыЗапасовСводно.НалоговоеНазначение,
    |	ТаблицаТовары.СтавкаНДС,
    |	ТаблицаТовары.ДокументПоступления
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции


 

#КонецОбласти

#Область Печать

Функция СформироватьПечатнуюФормуВозвратПоставщику(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)	
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|   ИСТИНА КАК УчитыватьНДС,
	|   Товары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов) И Товары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|СГРУППИРОВАТЬ ПО Товары.Ссылка 
	|;
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|	ВозвратТоваровПоставщику.Номер КАК Номер,
	|	ВозвратТоваровПоставщику.Дата КАК Дата,
	|	ВозвратТоваровПоставщику.Партнер КАК Партнер,
	|	ВозвратТоваровПоставщику.Контрагент КАК Получатель,
	|	ВозвратТоваровПоставщику.Организация КАК Организация,
	|	ВозвратТоваровПоставщику.Организация.Префикс КАК Префикс,
	|	ВозвратТоваровПоставщику.Валюта КАК Валюта,
	|	ВозвратТоваровПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВозвратТоваровПоставщику.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС,
	|	ВозвратТоваровПоставщику.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ВозвратТоваровПоставщику.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ВозвратТоваровПоставщику.Договор КАК Договор,
	|	ВозвратТоваровПоставщику.Договор.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ВозвратТоваровПоставщику.МестоСоставленияДокумента КАК МестоСоставленияДокумента,
	|	ВозвратТоваровПоставщику.ПредставительОрганизации.Наименование КАК ПредставительОрганизации,
	|	ВозвратТоваровПоставщику.ПредставительОрганизацииДолжность КАК ПредставительОрганизацииДолжность,
	|	ВозвратТоваровПоставщику.ДоверенностьАльтернативныйВидДокумента КАК ДоверенностьАльтернативныйВидДокумента,
	|	ВозвратТоваровПоставщику.ПолучилПоДругомуДокументу КАК ПолучилПоДругомуДокументу,
	|	ВозвратТоваровПоставщику.ДоверенностьСерия КАК ДоверенностьСерия,
	|	ВозвратТоваровПоставщику.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ВозвратТоваровПоставщику.ДоверенностьДата КАК ДоверенностьДата,
	|	ВозвратТоваровПоставщику.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ВозвратТоваровПоставщику.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	ВозвратТоваровПоставщику.ДоверенностьПримечание КАК ДоверенностьПримечание
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
	|		ПО ВозвратТоваровПоставщику.Ссылка = ТаблицаУчитыватьНДС.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)
	|	И ВозвратТоваровПоставщику.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			ВложенныйЗапрос.Ссылка.ВозвратПринятойМногооборотнойТары
	|			И ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|		ВозвратТоваровПоставщику.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ВозвратТоваровПоставщику.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки2
	|		КОНЕЦ КАК Коэффициент,
	|		ВозвратТоваровПоставщику.Упаковка КАК Упаковка,
	|		ВЫБОР
	|			КОГДА ВозвратТоваровПоставщику.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ВозвратТоваровПоставщику.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ВозвратТоваровПоставщику.Упаковка
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.Характеристика КАК Характеристика,
	|		ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена КАК Цена,
	|		ВозвратТоваровПоставщику.КоличествоУпаковок КАК Количество,
	|		ВозвратТоваровПоставщику.Сумма КАК Сумма,
	|		ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДС,
	|		ВозвратТоваровПоставщику.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)
	|		И ВозвратТоваровПоставщику.Ссылка.Проведен) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВложенныйЗапрос.Упаковка",
		"ВложенныйЗапрос.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВозвратТоваровПоставщику.Упаковка",
		"ВозвратТоваровПоставщику.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";
	
	МассивРезультатов   = Запрос.ВыполнитьПакет();
	ДанныеПечати        = МассивРезультатов[1].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
	
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровПоставщику.ПФ_MXL_ВозвратПоставщику", КодЯзыкаПечать);
		
		ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		СтруктураДанныхШапки = Новый Структура;
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Возврат поставщику';uk='Повернення постачальнику'",КодЯзыкаПечать), КодЯзыкаПечать);
		СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СведенияОПоставщике	= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Получатель,  ДанныеПечати.Дата, , ДанныеПечати.БанковскийСчетКонтрагента);	
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата, , ДанныеПечати.БанковскийСчетОрганизации);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
		СтруктураДанныхПоставщик = Новый Структура;
		ПредставлениеПоставщика                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование",,КодЯзыкаПечать);
		РеквизитыПоставщика                             = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства",,КодЯзыкаПечать);
		СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		СтруктураДанныхПоставщик.Вставить("РеквизитыПоставщика", РеквизитыПоставщика);
		СтруктураДанныхПоставщик.Вставить("Поставщик", ДанныеПечати.Организация);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
		СтруктураДанныхПокупатель = Новый Структура;
		ПредставлениеПолучателя                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование",,КодЯзыкаПечать);
		РеквизитыПокупателя                             = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
		СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		СтруктураДанныхПокупатель.Вставить("РеквизитыПокупателя", РеквизитыПокупателя);
		СтруктураДанныхПокупатель.Вставить("Получатель", ДанныеПечати.Получатель);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		// Выводим заголовок таблицы Товары
		
		
		ОбластьНомера     = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов      = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар      = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных     = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ТабличныйДокумент.Вывести(ОбластьНомера);
			
		Если ВыводитьКоды Тогда
			СтруктураДанныхКоды = Новый Структура("ИмяКолонкиКодов", КолонкаКодов);
			ОбластьКодов.Параметры.Заполнить(СтруктураДанныхКоды);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
			
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ЗаполнитьЗначенияСвойств(ОбластьДанных.Параметры, ФормированиеПечатныхФорм.СформироватьЗаголовкиДляСуммовыхПоказателей(ДанныеПечати, КодЯзыкаПечать));
		ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
		ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		Сумма          = 0;
		СуммаНДС       = 0;
		НомерСтроки    = 0;
		
		// Выводим строки таблицы Товары
			
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			СтруктураДанныхНомерСтроки = Новый Структура("НомерСтроки", НомерСтроки);
			ОбластьНомера.Параметры.Заполнить(СтруктураДанныхНомерСтроки);
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				СтруктураДанныхКоды = Новый Структура("Артикул", ВыборкаПоТоварам[КолонкаКодов]);
				ОбластьКодов.Параметры.Заполнить(СтруктураДанныхКоды);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьТовар.Параметры.Заполнить(ВыборкаПоТоварам);
			
			Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоТоварам.ТоварНаименованиеПолное,
				ВыборкаПоТоварам.Характеристика,
				,
				,
				,
				ВыборкаПоТоварам.ЭтоВозвратнаяТара,
				КодЯзыкаПечать
			);
			СтруктураДанныхТовар = Новый Структура("Товар", Товар);
			ОбластьТовар.Параметры.Заполнить(СтруктураДанныхТовар);
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Сумма    = Сумма    + ВыборкаПоТоварам.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаПоТоварам.СуммаНДС;
				
		КонецЦикла;
		
		// Выводим подвал
		
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			СтруктураДанныхВсего = Новый Структура("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
			ОбластьДанных.Параметры.Заполнить(СтруктураДанныхВсего);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			
		// Выводим ИтогоНДС
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			СтруктураДанныхНДС = Новый Структура;
			СтруктураДанныхНДС.Вставить("НДС", ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать)));
			СтруктураДанныхНДС.Вставить("ВсегоНДС", СуммаНДС);
			ОбластьДанных.Параметры.Заполнить(СтруктураДанныхНДС);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если Не ДанныеПечати.ЦенаВключаетНДС Тогда
				
				ТабличныйДокумент.Вывести(ОбластьНомера);	
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;	
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				
				СтруктураДанныхНДС = Новый Структура;
				
				СтруктураДанныхНДС.Вставить("НДС", НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать));
				СтруктураДанныхНДС.Вставить("ВсегоНДС", Сумма + СуммаНДС);
				
				ОбластьДанных.Параметры.Заполнить(СтруктураДанныхНДС);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
			
			// Выводим Сумму прописью
			
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
			
			ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru='Всего наименований %1, на сумму %2';uk='Всього найменувань %1, на суму %2'",КодЯзыкаПечать),
				ВыборкаПоТоварам.Количество(),
				ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
			
			СтруктураДанныхИтоговаяСтрока = Новый Структура;
			СтруктураДанныхИтоговаяСтрока.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		    СтруктураДанныхИтоговаяСтрока.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта,,КодЯзыкаПечать));
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхИтоговаяСтрока);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			

		Если ЗначениеЗаполнено(ДанныеПечати.МестоСоставленияДокумента) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
			СтруктураДанныхМестоСоставления = Новый Структура;
			СтруктураДанныхМестоСоставления.Вставить("МестоСоставления", СокрЛП(ДанныеПечати.МестоСоставленияДокумента));
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхМестоСоставления);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;


		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьМакета.Параметры.Заполнить(ФормированиеПечатныхФорм.СведенияОбОтветсвенныхЛицах(ДанныеПечати, КодЯзыкаПечать));
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

	

// Функция получает данные для формирования печатной формы отбора товаров из ячеек
//
Функция ПолучитьДанныеДляПечатнойФормыОтборРазмещениеТоваров(ПараметрыПечати, МассивДокументов) Экспорт
	           
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщику.Ссылка) КАК СсылкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщику.Склад) КАК СкладПредставление,
	|	ВозвратТоваровПоставщику.Склад КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) КАК ПомещениеПредставление,
	|	ВозвратТоваровПоставщику.Дата КАК Дата,
	|	ВозвратТоваровПоставщику.Номер КАК Номер,
	|	ЛОЖЬ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Склад.ИспользоватьАдресноеХранениеСправочно
	|				И (НЕ ВозвратТоваровПоставщику.Склад.ИспользоватьАдресноеХранение
	|					ИЛИ ВозвратТоваровПоставщику.Дата < ВозвратТоваровПоставщику.Склад.ДатаНачалаАдресногоХраненияОстатков)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяСправочноеХранение,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И ВозвратТоваровПоставщику.Дата >= ВозвратТоваровПоставщику.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НарушенаОрдернаяСхема,
	|	ВозвратТоваровПоставщику.Склад.ИспользованиеРабочихУчастков КАК ИспользованиеРабочихУчастков,
	|	ВозвратТоваровПоставщику.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок КАК НаборУпаковок,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И НЕ ТаблицаТовары.СтатусУказанияСерий В (2, 4, 6, 8)
	|	И (НЕ ТаблицаТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			ИЛИ ТаблицаТовары.Ссылка.Дата < ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки),
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ВЫРАЗИТЬ(ТаблицаСерии.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок,
	|	ТаблицаСерии.Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|ГДЕ
	|	ТаблицаСерии.Ссылка В(&МассивОбъектов)
	|	И (НЕ ТаблицаСерии.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			ИЛИ ТаблицаСерии.Ссылка.Дата < ТаблицаСерии.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Количество,
	|	ВЫРАЗИТЬ(ТаблицаСерии.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8, 10)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТовары.НаборУпаковок КАК НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровСуммированная
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ,
	|	ТаблицаТовары.НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ТаблицаТовары.Ссылка.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровСуммированная.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровСуммированная.Характеристика КАК Характеристика,
	|	ТаблицаТоваровСуммированная.Серия КАК Серия,
	|	ТаблицаТоваровСуммированная.Номенклатура.Код КАК Код,
	|	ТаблицаТоваровСуммированная.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТоваровСуммированная.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ТаблицаТоваровСуммированная.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ТаблицаТоваровСуммированная.Серия.Наименование КАК ПредставлениеСерии,
	|	ТаблицаТоваровСуммированная.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбхода,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбходаДополнительнаяЯчейка,
	|	ПРЕДСТАВЛЕНИЕ(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток) КАК ПредставлениеРабочегоУчастка,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.Код, """") КАК ОсновнаяЯчейкаПредставление,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.Код, """") КАК ЯчейкаПредставление,
	|	ТаблицаТоваровСуммированная.Количество КАК КоличествоУпаковок,
	|	ТаблицаТоваровСуммированная.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Упаковка) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаТоваровСуммированная.Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения)) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (ТаблицаТоваровСуммированная.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				ИЛИ ТаблицаТоваровСуммированная.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
	|			И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
	|			И ТаблицаТоваровСуммированная.Количество >= &ТекстЗапросаКоэффициентУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	КоличествоВУпаковке УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия.Наименование КАК ПредставлениеСерии,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТовары.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТовары.Ссылка.Склад)
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|	И НЕ ТаблицаТовары.Серия ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры",
		"ТаблицаТоваровСуммированная.Номенклатура"));

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("МассивОбъектов", МассивДокументов); 
	МассивРезультатов          = Запрос.ВыполнитьПакет();
	РезультатПоШапке           = МассивРезультатов[0];
	РезультатПоТабличнойЧасти  = МассивРезультатов[3];
	РезультатПоУпаковкам       = МассивРезультатов[4];
	РезультатПоСериям		   = МассивРезультатов[5];
	
	СтруктураДанныхДляПечати   = Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти, РезультатПоУпаковкам, РезультатПоСериям",
													РезультатПоШапке,
													РезультатПоТабличнойЧасти,
													РезультатПоУпаковкам,
													РезультатПоСериям);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

//


Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	// Заглушка, чтобы не падала печать комплектов из задания на перевозку.
	ТекстСообщения = НСтр("ru='Печать комплектов для документов ""%Документ%"" не поддерживается.';uk='Друк комплектів для документів ""%Документ%"" не підтримується.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Метаданные.Документы.ВозвратТоваровПоставщику.Синоним);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Возврат Неопределено;
КонецФункции

#Область ОснованиеДляПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Возврат поставщику
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ВозвратПоставщику";
	КомандаПечати.Представление = НСтр("ru='Возврат поставщику';uk='Повернення постачальнику'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	Если НЕ ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		// Задание на отбор товаров
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров";
		КомандаПечати.Идентификатор = "ЗаданиеНаОтборРазмещениеТовара";
		КомандаПечати.Представление = НСтр("ru='Задание на отбор товаров';uk='Завдання на відбір товарів'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ИмяФормы", "ЗаданиеНаОтбор");
	КонецЕсли;

	
	Если НЕ ПраваПользователяПовтИсп.ЭтоПартнер()
	 И ПолучитьФункциональнуюОпцию("ИспользоватьТТН")
	 И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда
		 
		// 1-ТН (Товарно-транспортная накладная)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТТН";
		КомандаПечати.Представление = НСтр("ru='Товарно-транспортная накладная (1-ТН)';uk='Товарно-транспортна накладна (1-ТН)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;		
		
	КонецЕсли;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВозвратПоставщику") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ВозвратПоставщику", 
			НСтр("ru='Возврат поставщику';uk='Повернення постачальнику'"), 
			СформироватьПечатнуюФормуВозвратПоставщику(
				МассивОбъектов, 
				ОбъектыПечати,
				ПараметрыВывода
			),
			,
			,
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма  
		);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка.
//
//	ПараметрыЗаполнения - Структура - структура, возвращаемая функцией ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл", ПараметрыЗаполнения.ПересчитыватьВВалютуРегл);
	Запрос.УстановитьПараметр("ВключаяНомераГТД",         ПараметрыЗаполнения.ВключаяНомераГТД);
	Запрос.УстановитьПараметр("ПустаяГТД",                Справочники.НомераГТД.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка                КАК Ссылка,
	|	ТаблицаТоваров.Номенклатура          КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика        КАК Характеристика,
	|	ТаблицаТоваров.Серия                 КАК Серия,
	|	ТаблицаТоваров.Упаковка              КАК Упаковка,
	|	ТаблицаТоваров.Цена                  КАК Цена,
	|	МАКСИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки
	|
	|ПОМЕСТИТЬ СтрокиТоваров
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Цена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Цена
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                        КАК Ссылка,
	|	СтрокиТоваров.НомерСтроки                                      КАК НомерСтроки,
	|	Аналитика.Номенклатура                                         КАК Номенклатура,
	|	Аналитика.Характеристика                                       КАК Характеристика,
	|	Аналитика.Серия                                                КАК Серия,
	|	
	|	ВЫБОР КОГДА &ВключаяНомераГТД ТОГДА
	|		ТаблицаДокумента.НомерГТД
	|	ИНАЧЕ
	|		&ПустаяГТД
	|	КОНЕЦ КАК НомерГТД,
	|
	|	ТаблицаДокумента.Цена                                          КАК Цена,
	|	СУММА(ТаблицаДокумента.Количество)                             КАК Количество,
	|	СУММА(ТаблицаДокумента.КоличествоУпаковок)                     КАК КоличествоУпаковок,
	|	
	|	СУММА(ЕСТЬNULL(
	|		СуммыДокументовВВалютеРегл.СуммаБезНДСРегл,
	|		ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС
	|	)) КАК СуммаБезНДС,
	|	
	|	ТаблицаДокумента.СтавкаНДС                                     КАК СтавкаНДС,
	|	
	|	СУММА(ЕСТЬNULL(
	|		СуммыДокументовВВалютеРегл.СуммаНДСРегл,
	|		ТаблицаДокумента.СуммаНДС
	|	)) КАК СуммаНДС,
	|	
	|	ИСТИНА                                                         КАК ЭтоТовар,
	|	ТаблицаДокумента.Ссылка.ПредусмотренЗалогЗаТару                КАК ВернутьМногооборотнуюТару,
	|	ТаблицаДокумента.Упаковка                                      КАК Упаковка
	|
	|ПОМЕСТИТЬ ВозвратТоваровПоставщикуТаблицаТоваров
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВидыЗапасов КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО
	|		ТаблицаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|		И СуммыДокументовВВалютеРегл.Активность
	|		И &ПересчитыватьВВалютуРегл
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаДокумента.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СтрокиТоваров КАК СтрокиТоваров
	|	ПО
	|		ТаблицаДокумента.Ссылка      = СтрокиТоваров.Ссылка
	|		И Аналитика.Номенклатура     = СтрокиТоваров.Номенклатура
	|		И Аналитика.Характеристика   = СтрокиТоваров.Характеристика
	|		И Аналитика.Серия            = СтрокиТоваров.Серия
	|		И ТаблицаДокумента.Упаковка  = СтрокиТоваров.Упаковка
	|		И ТаблицаДокумента.Цена      = СтрокиТоваров.Цена
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	СтрокиТоваров.НомерСтроки,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Упаковка,
	|	ТаблицаДокумента.Цена,
	|
	|	ВЫБОР КОГДА &ВключаяНомераГТД ТОГДА
	|		ТаблицаДокумента.НомерГТД
	|	ИНАЧЕ
	|		&ПустаяГТД
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СтрокиТоваров
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "ВозвратПоставщику", НСтр("ru='Возврат поставщику';uk='Повернення постачальнику'"), "Документ.ВозвратТоваровПоставщику", Неопределено));
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции


Функция ДополнитьТаблицуОбъектомРасчетов(ТаблицаЗапросаТовары, ТаблицаРасшифровкаПлатежа)
	
	ДобавлятьКолонкуОбъектРасчетов = НЕ (ТаблицаРасшифровкаПлатежа.Количество() = 0); 
	
	Если ДобавлятьКолонкуОбъектРасчетов Тогда 
		ТаблицаЗапросаТовары.Колонки.ОбъектРасчетов.Имя = "ОбъектРасчетовСтарый";
		ТаблицаЗапросаТовары.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов(
			Метаданные.РегистрыНакопления.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов.Измерения.ОбъектРасчетов.Тип.Типы()));
		
		ТаблицаЗапросаТовары.Колонки.Удалить("ОбъектРасчетовСтарый");
	КонецЕсли;	
	
	// В случае комиссии ТаблицаРасшифровкаПлатежа пуста, ОбъектРасчетов остается в значении НЕОПРЕДЕЛЕНО
	Для Каждого СтрокаРасшифровкаПлатежа Из ТаблицаРасшифровкаПлатежа Цикл
		
		СуммаВзаиморасчетовКРаспределению = СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов;
		
		Для каждого СтрокаТоваров Из ТаблицаЗапросаТовары Цикл
			Если СтрокаТоваров.СуммаВзаиморасчетов = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаВзаиморасчетов = Мин(СуммаВзаиморасчетовКРаспределению, СтрокаТоваров.СуммаВзаиморасчетов);
			СуммаНДСКредит 		= ?(СуммаВзаиморасчетов = СтрокаТоваров.СуммаВзаиморасчетов, СтрокаТоваров.СуммаНДСКредит, (СтрокаТоваров.СуммаНДСКредит * СуммаВзаиморасчетов ) / СтрокаТоваров.СуммаВзаиморасчетов);
			
			НоваяСтрока = ТаблицаЗапросаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
			
			НоваяСтрока.АналитикаУчетаПоПартнерам = СтрокаРасшифровкаПлатежа.АналитикаУчетаПоПартнерам;
			НоваяСтрока.ОбъектРасчетов = СтрокаРасшифровкаПлатежа.ОбъектРасчетов;
			НоваяСтрока.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
			НоваяСтрока.СуммаНДСКредит = СуммаНДСКредит;
			
			
			СтрокаТоваров.СуммаВзаиморасчетов = СтрокаТоваров.СуммаВзаиморасчетов - СуммаВзаиморасчетов;
			СтрокаТоваров.СуммаНДСКредит = СтрокаТоваров.СуммаНДСКредит - СуммаНДСКредит;
			
			СуммаВзаиморасчетовКРаспределению = СуммаВзаиморасчетовКРаспределению - НоваяСтрока.СуммаВзаиморасчетов;
			
			Если СуммаВзаиморасчетовКРаспределению = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ТаблицаЗапросаТовары.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ТаблицаЗапросаТовары.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ТаблицаЗапросаТовары;
	
КонецФункции
 
#КонецОбласти

#Область Прочее

// Функция выполняет проверки документа-распоряжения при создании расходного ордера
//
// Параметры:
//	Распоряжение - Ссылка на документ-распоряжение
//	Склад - Ссылка на элемент справочника Склады
//
// Возвращаемое значение:
//	Структура - результаты проверки:
//		- Отказ - Булево - Истина, если проверки прошли с ошибками, иначе - Ложь
//		- ТекстОшибки - Строка - Обязательно должен быть заполнен, когда Отказ = Истина
//		- ДатаОтгрузки - Дата
//		- ГруппаСкладовВРаспоряжении - Булево - В распоряжении выбрана группа складов 
//		- ИспользоватьОрдернуюСхему - Булево - На складе используется ордерная схема
//
Функция ВыполнитьПроверкиРаспоряжения(Распоряжение, Склад) Экспорт 
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Операция", "");
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	СтруктураВозврата.Вставить("ГруппаСкладовВРаспоряжении", Ложь);
	СтруктураВозврата.Вставить("ДатаОтгрузки");
	СтруктураВозврата.Вставить("ИспользоватьОрдернуюСхему");
		
	Реквизиты = Новый Структура("ДатаОтгрузки, Склад, ИспользоватьОрдернуюСхему", "Дата");
		 			
	Реквизиты.Склад = "Склад";
	Реквизиты.ИспользоватьОрдернуюСхему ="
	|ВЫБОР
	|	КОГДА ЕстьNULL(Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, Ложь)
	|			И Дата >= ЕстьNULL(Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1,1,1))
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, Реквизиты);
	ИспользоватьОрдернуюСхему = ЗначенияРеквизитов.ИспользоватьОрдернуюСхему;
	
	СтруктураВозврата.ИспользоватьОрдернуюСхему = ИспользоватьОрдернуюСхему;
	
	Если ИспользоватьОрдернуюСхему Тогда
		
		Склад = ЗначенияРеквизитов.Склад;
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ЗначенияРеквизитов, "ДатаОтгрузки");
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Для склада ""%Склад%"" оформление расходных ордеров не требуется.
            |Заполнение документа не выполнено.'
            |;uk='Для складу ""%Склад%"" оформлення видаткових ордерів не потрібно.
            |Заповнення документа не виконано.'");
		СтруктураВозврата.ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", Строка(ЗначенияРеквизитов.Склад));
		СтруктураВозврата.Операция = "Отказ";
		Возврат СтруктураВозврата;
		
	КонецЕсли;	

	Возврат СтруктураВозврата
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ВозвратТоваровПоставщику";
КонецФункции


Процедура ПеренестиСерии10ВТЧТовары_ЗаполнитьДанныеДляОбновления(Очередь) Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка.Проведен
	|	И ДокументТовары.СтатусУказанияСерий = 10
	|	И ДокументТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Очередь, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Переносит серии, указываемые при планировании отгрузки в ТЧ Товары
Процедура ПеренестиСерии10ВТЧТовары(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		ПолноеИмяОбъекта(), МенеджерВТ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Накладные.Ссылка КАК Ссылка,
	|	Накладные.ВерсияДанных КАК ВерсияДанных,
	|	НакладнаяТовары.НомерСтроки,
	|	НакладнаяТовары.Ссылка ЕСТЬ NULL  КАК УдалитьИзОчереди
	|ИЗ
	|	ВТДляОбработкиВозвратТоваровПоставщику КАК ДокументыФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК Накладные
	|		ПО (Накладные.Ссылка = ДокументыФильтр.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК НакладнаяТовары
	|		ПО (Накладные.Ссылка = НакладнаяТовары.Ссылка)
	|			И (Накладные.Проведен)
	|			И (НакладнаяТовары.СтатусУказанияСерий = 10)
	|			И (НакладнаяТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|ИТОГИ
	|	МАКСИМУМ(УдалитьИзОчереди)
	|ПО
	|	Ссылка";
	
	ВыборкаПоСсылкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПараметрыОбработчика = ЗаказыСервер.ПараметрыОбработчикаОбновленияПоЗаполнениюСерийВЗаказах_3_2_2();
	ПараметрыОбработчика.ПоляПоискаСерийВНакладной = "Номенклатура, Характеристика, Назначение";
	ПараметрыОбработчика.РеквизитыПересчета = "КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС";
	
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Если ВыборкаПоСсылкам.УдалитьИзОчереди Тогда
			// Документы, которые перестали удовлетворять условиям для обработки, нужно удалить из очереди
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСсылкам.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоСсылкам.Выбрать();
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ВыборкаПоСсылкам.Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоСсылкам.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойБлокировке(ВыборкаПоСсылкам.Ссылка);
			Продолжить;
		КонецПопытки;
		
		НакладнаяОбъект = ВыборкаПоСсылкам.Ссылка.ПолучитьОбъект();
		Если НакладнаяОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСсылкам.Ссылка);
			Продолжить;
		КонецЕсли;
		Если НакладнаяОбъект.ВерсияДанных <> ВыборкаПоСсылкам.ВерсияДанных Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		ОбработатьШапкуПриОбновлении(НакладнаяОбъект);
		ЗаказыСервер.ОбработатьСерииНакладной(НакладнаяОбъект, Выборка,, ПараметрыОбработчика);
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НакладнаяОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(НакладнаяОбъект.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

Процедура ДанныеДляОбновленияПеренестиРасхожденияВАкты(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТоварыРасхождения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.УдалитьРасхожденияТовары КАК ТоварыРасхождения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК Накладная
	|		ПО (Накладная.Ссылка = ТоварыРасхождения.Ссылка)
	|			И (Накладная.Проведен)
	|ГДЕ
	|	Накладная.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|	И Накладная.Дата >= Накладная.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|	И (ТоварыРасхождения.КоличествоРасхождение <> 0
	|			ИЛИ ТоварыРасхождения.ЕстьРасхождениеПоСериям = 1)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Переносит расхождения из документа "Возврат товаров поставщику" в "Акт о расхождениях после отгрузки"
Процедура ПеренестиРасхожденияВАкты(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.ВозвратТоваровПоставщику";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано) КАК Статус,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОснованияАктаОРасхождении.ВозвратПоставщику)
	|		                                                       КАК ТипОснованияАктаОРасхождении,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов)
	|		                                                       КАК СпособОтраженияРасхождений,
	|
	|	Накладная.Ссылка                                           КАК Реализация,
	|	Накладная.ВерсияДанных                                     КАК ВерсияДанных,
	|	КОНЕЦПЕРИОДА(Накладная.Дата, ДЕНЬ)                         КАК Дата,
	|	Накладная.Организация                                      КАК Организация,
	|	Накладная.Контрагент                                       КАК Контрагент,
	|	Накладная.Менеджер                                         КАК Менеджер,
	|	Накладная.Партнер                                          КАК Партнер,
	|	Накладная.Валюта                                           КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(Накладная.Грузоотправитель)                  КАК Грузоотправитель,
	|	Накладная.ХозяйственнаяОперация                            КАК ХозяйственнаяОперация,
	|	Накладная.ЦенаВключаетНДС                                  КАК ЦенаВключаетНДС,
	|	Накладная.Договор                                          КАК Договор,
	|	Накладная.КонтактноеЛицо                                   КАК КонтактноеЛицо,
	|	Накладная.Соглашение                                       КАК Соглашение,
	|	Накладная.Склад                                            КАК Склад,
	|
	|	ТоварыРасхождения.НомерСтроки                              КАК НомерСтроки,
	|	ТоварыРасхождения.Номенклатура                             КАК Номенклатура,
	|	ТоварыРасхождения.Характеристика                           КАК Характеристика,
	|	ТоварыРасхождения.Серия                                    КАК Серия,
	|	ТоварыРасхождения.СтатусУказанияСерий                      КАК СтатусУказанияСерий,
	|	ТоварыРасхождения.Ссылка                                   КАК ДокументОснование,
	|	ВЫБОР КОГДА ТоварыРасхождения.КоличествоПринято - ТоварыРасхождения.КоличествоРасхождение = 0
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                      КАК ЗаполненоПоРеализации,
	|	ТоварыРасхождения.КоличествоПринято - ТоварыРасхождения.КоличествоРасхождение
	|		                                                       КАК КоличествоУпаковокПоДокументу,
	|	ТоварыРасхождения.КоличествоПринято - ТоварыРасхождения.КоличествоРасхождение
	|		                                                       КАК КоличествоПоДокументу,
	|	ТоварыРасхождения.КоличествоПринято                        КАК КоличествоУпаковок,
	|	ТоварыРасхождения.КоличествоПринято                        КАК Количество,
	|	ЛОЖЬ                                                       КАК НеизвестенЗаказВСтрокеНакладнойВведеннойПоЗаказу
	|ИЗ
	|	&ВТДокументыДляОбработки КАК СсылкиДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК Накладная
	|		ПО	(Накладная.Ссылка = СсылкиДляОбработки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.УдалитьРасхожденияТовары КАК ТоварыРасхождения
	|		ПО (Накладная.Ссылка = ТоварыРасхождения.Ссылка)
	|			И (Накладная.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ТоварыНакладной
	|		ПО (ТоварыНакладной.Ссылка = ТоварыРасхождения.Ссылка)
	|			И (ТоварыНакладной.ИдентификаторСтроки = ТоварыРасхождения.ИдентификаторСтроки)
	|ГДЕ
	|	Накладная.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|	И Накладная.Дата >= Накладная.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|	И (ТоварыРасхождения.КоличествоРасхождение <> 0
	|			ИЛИ ТоварыРасхождения.ЕстьРасхождениеПоСериям = 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование,
	|	ТоварыРасхождения.НомерСтроки УБЫВ
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СсылкиДляОбработки.Ссылка 
	|	ИЗ &ВТДокументыДляОбработки КАК СсылкиДляОбработки
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.Ссылка КАК ДокументОснование,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Ссылка КАК Акт
	|ИЗ
	|	&ВТДокументыДляОбработки КАК СсылкиДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ДокументыОснования
	|		ПО ДокументыОснования.Ссылка = СсылкиДляОбработки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|		ПО (АктОРасхожденияхПослеОтгрузкиТовары.Реализация = ДокументыОснования.Ссылка)
	|ГДЕ
	|	НЕ АктОРасхожденияхПослеОтгрузкиТовары.Ссылка ЕСТЬ NULL 
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Ссылка.Проведен
	|ИТОГИ ПО
	|	ДокументОснование";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	//Здесь все документы, пришедшие из очереди
	ТаблицаСсылокКОбработке = ПакетЗапросов[1].Выгрузить();
	СоответствиеОбработанныхДокументов = Новый Соответствие;
	
	//Соответствие
	ВыборкаОснованияСозданныеАкты = ПакетЗапросов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоотвествиеОснованиеАкты = Новый Соответствие;
	Пока ВыборкаОснованияСозданныеАкты.Следующий() Цикл
		МассивСозданныхАктов = Новый Массив;
		ВыборкаДетали = ВыборкаОснованияСозданныеАкты.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			МассивСозданныхАктов.Добавить(ВыборкаДетали.Акт);
		КонецЦикла;
		СоотвествиеОснованиеАкты.Вставить(ВыборкаОснованияСозданныеАкты.ДокументОснование, МассивСозданныхАктов);
	КонецЦикла;
	
	Выборка = ПакетЗапросов[0].Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ДокументОснование);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			СоответствиеОбработанныхДокументов.Вставить(Выборка.ДокументОснование);
			ТекстСообщения = НСтр("ru='Не удалось заблокировать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося заблокувати документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.ДокументОснование);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Документы.ВозвратТоваровПоставщику,
									Выборка.ДокументОснование,
									ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
		НакладнаяОбъект = ЗаказыСервер.ПроверитьПолучитьОбъект(Выборка.ДокументОснование, Выборка.ВерсияДанных, Параметры.Очередь);
		Если НакладнаяОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			СоответствиеОбработанныхДокументов.Вставить(Выборка.ДокументОснование);
			Продолжить;
		КонецЕсли;
		
		МассивСозданныхАктов = СоотвествиеОснованиеАкты.Получить(Выборка.ДокументОснование);
		Если МассивСозданныхАктов = Неопределено Или МассивСозданныхАктов.Количество() = 0 Тогда
			АктОРасхожденияхОбъект = Документы.АктОРасхожденияхПослеОтгрузки.СоздатьДокумент();
		Иначе
			АктОРасхожденияхОбъект = МассивСозданныхАктов[0].ПолучитьОбъект();
			Если АктОРасхожденияхОбъект = Неопределено Тогда
				АктОРасхожденияхОбъект = Документы.АктОРасхожденияхПослеОтгрузки.СоздатьДокумент();
			КонецЕсли;
		КонецЕсли;
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
		ОбработатьШапкуПриОбновлении(НакладнаяОбъект);
		РасхожденияСервер.ЗаполнитьАктПоРасхождениямПриОбновлении(Выборка, АктОРасхожденияхОбъект, НакладнаяОбъект, СтруктураПоиска, Параметры);
		СоответствиеОбработанныхДокументов.Вставить(Выборка.ДокументОснование);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылокКОбработке Цикл
		
		Если СоответствиеОбработанныхДокументов.Получить(СтрокаТаблицы.Ссылка) = Неопределено Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаТаблицы.Ссылка,, Параметры.Очередь);
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
	
КонецПроцедуры

Функция ПеренестиРасхожденияВАктыМожноЧитатьИМенять(Данные) Экспорт

	МетаданныеИОтбор = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(Данные);
	Если МетаданныеИОтбор.ЭтоНовый Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ТипЗнч(МетаданныеИОтбор.Отбор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаИзменения.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
		|	И ТаблицаИзменения.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", МетаданныеИОтбор.Отбор);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		
		Возврат Результат.Пустой();
	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОчиститьСтатусыНакладныхОтложенноКОтработке(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсправляемыйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ИсправляемыйДокумент
	|ГДЕ
	|	ИсправляемыйДокумент.УдалитьСтатус В (ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыВозвратовТоваровПоставщикам.КОтгрузке),
	|		ЗНАЧЕНИЕ(Перечисление.УдалитьСтатусыВозвратовТоваровПоставщикам.Отгружено))");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Очищает статус "К сборке".
Процедура ОчиститьСтатусыНакладныхОтложенно(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.ВозвратТоваровПоставщику";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.УдалитьСтатус,
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.Ссылка = СсылкиДляОбработки.Ссылка";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.УдалитьСтатус = Перечисления.УдалитьСтатусыВозвратовТоваровПоставщикам.ПустаяСсылка() Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ВозвратТоваровПоставщику");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбработатьШапкуПриОбновлении(ДокументОбъект) Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, "Документ.ВозвратТоваровПоставщику");
	
КонецПроцедуры

Процедура ЗаполнитьСпособДоставкиСамовывозОтложенноЗаполнитьДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровПоставщику.Дата УБЫВ";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));	
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Заполняет новый реквизит "Способ доставки" значением "Самовывоз" 
Процедура ЗаполнитьСпособДоставкиСамовывозОтложенно(Параметры) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта());
	
	Пока Выборка.Следующий() Цикл	
		
		НачатьТранзакцию();
		
		Попытка	
			
			Блокировка = Новый БлокировкаДанных;
            ЭлементБлокировки = Блокировка.Добавить("Документ.ВозвратТоваровПоставщику");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.СпособДоставки <> Перечисления.СпособыДоставки.ПустаяСсылка() Тогда 
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбработатьШапкуПриОбновлении(ДокументОбъект) Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВозвратТоваровПоставщику,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

Функция ОбработатьШапкуПриОбновлении(ДокументОбъект)
	
	ДокументОбработан = Ложь;
	
	Если ДокументОбъект.УдалитьСтатус <> Перечисления.УдалитьСтатусыВозвратовТоваровПоставщикам.ПустаяСсылка() Тогда
		ДокументОбъект.УдалитьСтатус = Неопределено;
		ДокументОбработан = Истина;
	КонецЕсли;
	
	Если ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПустаяСсылка() Тогда 
		ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ДокументОбработан = Истина;
	КонецЕсли;
	
	Возврат ДокументОбработан;
	
КонецФункции



#КонецОбласти

#КонецОбласти

#КонецЕсли

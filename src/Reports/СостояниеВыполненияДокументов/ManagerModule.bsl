#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует отчет "Состояние выполнения документов" путем выполнения пакета запросов. 
// 
// Параметры:
// ВходящиеДокументы - СписокЗначений - Список ссылок на документы.
// ТаблицаОтчета - ТабличныйДокумент - Табличный документ отчета.
//
Процедура СформироватьОтчетСостояниеВыполненияДокументов(ВходящиеДокументы, ТаблицаОтчета) Экспорт
	
	ТаблицаОтчета.АвтоМасштаб = Истина;
	ТаблицаОтчета.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СОСТОЯНИЕВЫПОЛНЕНИЯДОКУМЕНТОВ";
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ВходящиеДокументы[0].Значение);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
	СтруктураПараметров = МенеджерОбъекта.СтруктураСостояниеВыполненияДокумента();
	
	Макет = ПолучитьМакет("Макет");
	
	Запрос = Новый Запрос;
	
	// Установка параметров запроса.
	Запрос.УстановитьПараметр("МассивДокументов", ВходящиеДокументы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	// Формирование текстов запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДокументы(ИмяТаблицы, СтруктураПараметров), "ВтДокументы");
	ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаДокументы(СтруктураПараметров), "ТаблицаДокументы");
	
	ВсегоТаблиц = 0;
	ВыводитьТаблицуРасчетов = Ложь;
	
	Если СтруктураПараметров.ВыводитьТаблицуРасчетыСКлиентами <> 0
		 И ЕстьПравоДоступаКНаборуДанных("РасчетыСКлиентами", СтруктураПараметров) Тогда
		 
		Запрос.УстановитьПараметр("Отгрузка", НСтр("ru='Отгрузка';uk='Відвантаження'"));
		ТекстыЗапроса.Добавить(ТекстЗапросаВтОбъектыРасчетов(ИмяТаблицы, СтруктураПараметров), "ВтОбъектыРасчетов");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаРасчетыСКлиентами(СтруктураПараметров), "ТаблицаРасчетыСКлиентами");
		ВыводитьТаблицуРасчетов = Истина;
		ВсегоТаблиц = ВсегоТаблиц + 1;
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицуРасчетыСПоставщиками <> 0
		 И ЕстьПравоДоступаКНаборуДанных("РасчетыСПоставщиками", СтруктураПараметров) Тогда
		
		Если НЕ ВыводитьТаблицуРасчетов Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВтОбъектыРасчетов(ИмяТаблицы, СтруктураПараметров), "ВтОбъектыРасчетов");
		КонецЕсли; 
		Запрос.УстановитьПараметр("Поступление", НСтр("ru='Поступление';uk='Надходження'"));
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаРасчетыСПоставщиками(СтруктураПараметров), "ТаблицаРасчетыСПоставщиками");
		ВыводитьТаблицуРасчетов = Истина;
		ВсегоТаблиц = ВсегоТаблиц + 1;
	КонецЕсли;
	
	Если ВыводитьТаблицуРасчетов Тогда
		Запрос.УстановитьПараметр("ОплатаПоГрафику"  , НСтр("ru='Оплата по графику';uk='Оплата за графіком'"));
		Запрос.УстановитьПараметр("ОплатаНеПоГрафику", НСтр("ru='Оплата не по графику';uk='Оплата не за графіком'"));

		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаГрафикиОплаты(ИмяТаблицы, СтруктураПараметров), "ТаблицаГрафикиОплаты");
		Если СтруктураПараметров.ЭтоЗаказ Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаПодчиненныеДокументы(ИмяТаблицы, СтруктураПараметров), "ТаблицаПодчиненныеДокументы");
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураПараметров.ВыводитьТаблицыОбеспечение <> 0 Тогда
		Запрос.УстановитьПараметр("МассивСтатусовБезОтгрузки", ПолучитьМассивСтатусовБезОтгрузки(ИмяТаблицы));
		
		ТекстЗапросаТаблицаНеобеспеченныеТовары = ТекстЗапросаТаблицаНеобеспеченныеТовары(ИмяТаблицы, СтруктураПараметров);
		ТекстЗапросаТаблицаСостояниеОбеспечения = ТекстЗапросаТаблицаСостояниеОбеспечения(ИмяТаблицы, СтруктураПараметров);
		
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаНеобеспеченныеТовары, "ТаблицаНеобеспеченныеТовары");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаСостояниеОбеспечения, "ТаблицаСостояниеОбеспечения");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыОтгрузка <> 0 И ЕстьПравоДоступаКНаборуДанных("Отгрузка", СтруктураПараметров) Тогда
		
		ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыКОтгрузке(СтруктураПараметров), "ВТТоварыКОтгрузке");
		Если СтруктураПараметров.ЭтоЗаказ Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено(ИмяТаблицы, СтруктураПараметров, ТекстыЗапроса), "ВТТоварыРаспоряжениеЗаказОтгружено");
		КонецЕсли;
		Если СтруктураПараметров.ЭтоНакладная Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыРаспоряжениеНакладнаяОтгружено(ИмяТаблицы, СтруктураПараметров), "ВТТоварыРаспоряжениеНакладнаяОтгружено");
		КонецЕсли;
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтгрузка(СтруктураПараметров), "ТаблицаОтгрузка");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтгружено(СтруктураПараметров), "ТаблицаОтгружено");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицуЗаказано Тогда
		
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаЗаказано(ИмяТаблицы, СтруктураПараметров), "ТаблицаЗаказано");
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыПоступление <> 0 И ЕстьПравоДоступаКНаборуДанных("Поступление", СтруктураПараметров) Тогда
		
		ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыПоступление(СтруктураПараметров), "ВТТоварыПоступление");
		Если СтруктураПараметров.ЭтоЗаказ Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ(ИмяТаблицы, СтруктураПараметров), "ВТТоварыРаспоряженияПоступлениеЗаказ");
		КонецЕсли;
		Если СтруктураПараметров.ЭтоНакладная Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыРаспоряженияПоступлениеНакладная(ИмяТаблицы, СтруктураПараметров), "ВТТоварыРаспоряженияПоступлениеНакладная");
		КонецЕсли;
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаПоступление(СтруктураПараметров), "ТаблицаПоступление");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаПоступило(СтруктураПараметров), "ТаблицаПоступило");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	
	Если СтруктураПараметров.ВыводитьТаблицыОтмененоОтгрузка <> 0 Тогда
		
		ТекстЗапросаТаблицаОтменено = ТекстЗапросаТаблицаОтмененоОтгрузка(ИмяТаблицы, СтруктураПараметров);
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтменено, "ТаблицаОтмененоОтгрузка");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыОтмененоПоступление <> 0 Тогда
		
		ТекстЗапросаТаблицаОтменено = ТекстЗапросаТаблицаОтмененоПоступление(ИмяТаблицы, СтруктураПараметров);
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтменено, "ТаблицаОтмененоПоступление");
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыводитьТаблицыВозврат <> 0
		И ЕстьПравоДоступаКНаборуДанных("ЗаявкиНаВозвратТоваровОтКлиентов", СтруктураПараметров) Тогда
		
		ТекстЗапросаТаблицаВозвратТоваров = ТекстЗапросаТаблицаВозвратТоваров(ИмяТаблицы, СтруктураПараметров);
		ТекстЗапросаТаблицаВозвращеноТоваров = ТекстЗапросаТаблицаВозвращеноТоваров(ИмяТаблицы, СтруктураПараметров);
		
		ТекстыЗапроса.Добавить(ТекстЗапросаВТВозвращаемыеТовары(СтруктураПараметров), "ВТВозвращаемыеТовары");
		ТекстыЗапроса.Добавить(ТекстЗапросаВТТоварыКВозврату(СтруктураПараметров), "ВТТоварыКВозврату");
		
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаВозвратТоваров, "ТаблицаВозвратТоваров");
		ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаВозвращеноТоваров, "ТаблицаВозвращеноТоваров");
		
		ВсегоТаблиц = ВсегоТаблиц + 1;
		
	КонецЕсли;
	
	
	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если ПустаяСтрока(ТекстЗапроса.Значение) Тогда
			ТекстыЗапроса.Удалить(ТекстЗапроса);
		КонецЕсли;
	КонецЦикла; 
	
	// Инициализация таблиц запроса.
	ТаблицыРезультатов = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Вывод результатов в табличный документ.
	НомерТипаДокумента = 0;
	ТаблицаДокументов = ТаблицыРезультатов.ТаблицаДокументы.Строки;
	
	Для каждого СтрокаДокумент Из ТаблицаДокументов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЕстьДанные = Ложь;
		
		ВывестиЗаголовокОтчета(ТаблицаОтчета, Макет, СтрокаДокумент);
		Для НомерТаблицы = 1 По ВсегоТаблиц Цикл
			
			Если СтруктураПараметров.ВыводитьТаблицуРасчетыСКлиентами = НомерТаблицы Тогда
				
				ЕстьДанные = ВывестиТаблицуРасчетов(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, "ТаблицаРасчетыСКлиентами")
					Или ЕстьДанные;
				ЕстьДанные = ВывестиТаблицуПодчиненныеДокументы(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов) 
					Или ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицуРасчетыСПоставщиками = НомерТаблицы Тогда
				
				ЕстьДанные = ВывестиТаблицуРасчетов(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, "ТаблицаРасчетыСПоставщиками")
					Или ЕстьДанные;
				ЕстьДанные = ВывестиТаблицуПодчиненныеДокументы(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов)
					Или ЕстьДанные;
					
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицуЗаказано = НомерТаблицы Тогда
				
				ЕстьДанные = ВывестиТаблицуЗаказано(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицыПоступление = НомерТаблицы Тогда
				
				ЕстьДанныеПоступление = ВывестиТаблицуПоступление(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				ЕстьДанныеПоступление = ВывестиТаблицуПоступило(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанныеПоступление;
				ЕстьДанныеПоступление = ВывестиТаблицуОтмененоПоступление(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров) 
					Или ЕстьДанныеПоступление;
				Если ЕстьДанныеПоступление Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
				
				ЕстьДанные = ЕстьДанныеПоступление ИЛИ ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицыОтгрузка = НомерТаблицы Тогда
				
				ЕстьДанныеОтгрузка = ВывестиТаблицуОтгрузка(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				ЕстьДанныеОтгрузка = ВывестиТаблицуОтгружено(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров) 
					Или ЕстьДанныеОтгрузка;
				ЕстьДанныеОтгрузка = ВывестиТаблицуОтмененоОтгрузка(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанныеОтгрузка;
				Если ЕстьДанныеОтгрузка Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли; 
				
				ЕстьДанные = ЕстьДанныеОтгрузка ИЛИ ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицыОбеспечение = НомерТаблицы Тогда	
				
				ЕстьДанныеОбеспечение = ВывестиТаблицуНеобеспеченныеТовары(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				ЕстьДанныеОбеспечение = ВывестиТаблицуСостояниеОбеспечения(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					ИЛИ ЕстьДанныеОбеспечение;
					
				Если ЕстьДанныеОбеспечение Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
				
				ЕстьДанные = ЕстьДанныеОбеспечение ИЛИ ЕстьДанные;
				
			ИначеЕсли СтруктураПараметров.ВыводитьТаблицыВозврат = НомерТаблицы Тогда
				
				ЕстьДанныеВозврат = ВывестиТаблицуВозвратТоваров(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров);
				ЕстьДанныеВозврат = ВывестиТаблицуВозвращеноТоваров(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанныеВозврат;
				ЕстьДанныеВозврат = ВывестиТаблицуОтмененоПоступление(ТаблицаОтчета, Макет, СтрокаДокумент.Ссылка, ТаблицыРезультатов, СтруктураПараметров)
					Или ЕстьДанныеВозврат;
				Если ЕстьДанныеВозврат Тогда
					ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
				КонецЕсли;
				
				ЕстьДанные = ЕстьДанныеВозврат ИЛИ ЕстьДанные;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиТаблицуНетДанных(ТаблицаОтчета, Макет, СтрокаДокумент, ЕстьДанные);
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет инициализацию структуры состояния выполнения документа.
//
Функция ИницициализироватьСтруктуруСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Новый Структура;
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами",           0); // 0 - не выводить, другое значение указывает порядок вывода таблицы
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСПоставщиками",        0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение",                 0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка",                    0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыВозврат",                     0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление",                 0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка",            0);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление",         0);
	СтруктураСостояние.Вставить("ВыводитьТаблицуЗаказано",                    0);
	
	СтруктураСостояние.Вставить("ЭтоЗаказ",                                   Ложь);
	СтруктураСостояние.Вставить("ЭтоНакладная",                               Ложь);
	
	СтруктураСостояние.Вставить("СкладВШапке",                                Ложь);
	
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки",             Ложь);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиПоступления",          Ложь);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыОтгрузки",                  Ложь);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыПоступления",               Ложь);
	
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка",                        "Товары");
	СтруктураСостояние.Вставить("ИмяТЧТоварыПоступление",                     "Товары");
	СтруктураСостояние.Вставить("ИмяПоляДатаОтгрузки",                        "ДатаОтгрузки");
	СтруктураСостояние.Вставить("ИмяПоляСклад",                               "Склад");
	СтруктураСостояние.Вставить("ИмяПоляСкладПолучатель",                     "Склад");
	СтруктураСостояние.Вставить("ИмяПоляСумма",                               "СуммаСНДС");
	
	СтруктураСостояние.Вставить("ИмяРегистраОтгрузкаУслуг",                   Неопределено);
	СтруктураСостояние.Вставить("ИмяРегистраПоступлениеУслуг",                Неопределено);
	СтруктураСостояние.Вставить("ИмяПоляНакладнаяПоЗаказам",                  Неопределено);
	
	СтруктураСостояние.Вставить("СтруктураДопЗапросов",                       Неопределено);
	
	СтруктураСостояние.Вставить("ДействиеРасшифровкаКоличествоОтгружено",     Неопределено);
	СтруктураСостояние.Вставить("ДействиеРасшифровкаКоличествоПоступило",     Неопределено);
	
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка",    НСтр("ru='Товар (услуга)';uk='Товар (послуга)'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление", НСтр("ru='Товар (услуга)';uk='Товар (послуга)'"));
	СтруктураСостояние.Вставить("ТекстОтмененоОтгрузка",     НСтр("ru='Отменено (%Кол-во%)';uk='Скасовано (%Кол-во%)'"));
	СтруктураСостояние.Вставить("ТекстОтмененоПоступление",  НСтр("ru='Отменено (%Кол-во%)';uk='Скасовано (%Кол-во%)'"));
	
	Возврат СтруктураСостояние
	
КонецФункции

#Область СтандартныеПодсистемы
// СтандартныеПодсистемы.ВариантыОтчетов

// Настройки вариантов этого отчета.
// Подробнее - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	// Отключение контекстных вариантов
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаВтДокументы(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВтДокументы") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВтДокументы;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК ДокументСсылка,
	|	ТИПЗНАЧЕНИЯ(Документ.Ссылка) КАК ТипДокумента,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Проведен КАК Проведен,
	|	Документ.Номер КАК НомерДокумента
	|ПОМЕСТИТЬ
	|	ВтДокументы
	|ИЗ
	|	%ИмяТаблицы% КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&МассивДокументов);
	|	
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументы(СтруктураПараметров)
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаДокументы") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаДокументы;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документы.ДокументСсылка КАК Ссылка,
	|	Документы.ДатаДокумента КАК ДатаДокумента,
	|	Документы.Проведен КАК ДокументПроведен,
	|	Документы.НомерДокумента КАК НомерДокумента
	|ИЗ
	|	ВтДокументы КАК Документы;
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВтОбъектыРасчетов(ИмяТаблицы, СтруктураПараметров)
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВтОбъектыРасчетов") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВтОбъектыРасчетов;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документы.ДокументСсылка КАК Документ,
	|	
	|	ВЫБОР
	|		КОГДА Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА Документы.ДокументСсылка.Договор
	|		КОГДА (Документы.ТипДокумента = ТИП(Документ.РеализацияТоваровУслуг)
	|			ИЛИ Документы.ТипДокумента = ТИП(Документ.АктВыполненныхРабот))
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА Документы.ДокументСсылка
	|		КОГДА (Документы.ТипДокумента = ТИП(Документ.ЗаказКлиента) 
	|			ИЛИ Документы.ТипДокумента = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|			ТОГДА Документы.ДокументСсылка
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказПоставщику) 
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|			ТОГДА Документы.ДокументСсылка
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ПоступлениеТоваровУслуг)
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА Документы.ДокументСсылка
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			И Документы.ТипДокумента <> ТИП(Документ.ГрафикИсполненияДоговора)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ГрафикИсполненияДоговора)
	|		ТОГДА ИСТИНА
	|		КОГДА (Документы.ТипДокумента = ТИП(Документ.РеализацияТоваровУслуг)
	|			ИЛИ Документы.ТипДокумента = ТИП(Документ.АктВыполненныхРабот))
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|		ТОГДА ИСТИНА
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ПоступлениеТоваровУслуг)
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|		ТОГДА ИСТИНА
	|		КОГДА (Документы.ТипДокумента = ТИП(Документ.ЗаказКлиента)
	|			ИЛИ Документы.ТипДокумента = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|		ТОГДА ИСТИНА
	|		КОГДА Документы.ТипДокумента = ТИП(Документ.ЗаказПоставщику) 
	|			И Документы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК ТребуетсяГрафик
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	ВтДокументы КАК Документы
	|";
	
	Если ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка,
			|	Истина
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|		И НЕ Документ.РеализацияПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.ЗаказКлиента,
			|	Истина
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|		И Документ.Ссылка.РеализацияПоЗаказам
			|
			|";
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ПоступлениеТоваровУслуг" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка,
			|	Истина
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|		И НЕ Документ.ПоступлениеПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.ЗаказПоставщику,
			|	Истина
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|		И Документ.Ссылка.ПоступлениеПоЗаказам
			|
			|";
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.Ссылка,
			|	Истина
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|		И НЕ Документ.АктПоЗаказам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВтДокументы.ДокументСсылка,
			|	Документ.ЗаказКлиента,
			|	Истина
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Документ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
			|		ПО Документ.Ссылка = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	Документ.Ссылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
			|		И Документ.Ссылка.АктПоЗаказам 
			|";
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса + ";";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикиОплаты(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТаблицаГрафикиОплаты") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаРасчетыСКлиентами;
	КонецЕсли;
	
	Если СтруктураПараметров.ЭтоЗаказ Тогда
		
		СуммаПлатежа = "ДокументЭтапыГрафикаОплаты.СуммаПлатежа + ДокументЭтапыГрафикаОплаты.СуммаЗалогаЗаТару";
		
		
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументЭтапыГрафикаОплаты.Ссылка КАК Документ,
		|	ДокументЭтапыГрафикаОплаты.НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ДокументЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
		|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа,
		|	" + СуммаПлатежа + " КАК СуммаПлатежа
		|ИЗ
		|	%ИмяТаблицы%.ЭтапыГрафикаОплаты КАК ДокументЭтапыГрафикаОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка)
		|		И ОбъектыРасчетов.ТребуетсяГрафик";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
		
	ИначеЕсли СтруктураПараметров.ЭтоНакладная Тогда
		
		Если ЗначениеЗаполнено(СтруктураДопЗапросов)
			И СтруктураДопЗапросов.Свойство("ТаблицаГрафикОплатыПоНакладной") Тогда
			
			ТекстЗапроса = СтруктураДопЗапросов.ТаблицаГрафикОплатыПоНакладной;
			
		Иначе
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументНакладная.Ссылка КАК Документ,
			|	1 КАК НомерСтроки,
			|	ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки))  КАК ВариантОплаты,
			|	ДокументНакладная.ДатаПлатежа КАК ДатаПлатежа,
			|	ДокументНакладная.СуммаДокумента КАК СуммаПлатежа
			|ИЗ
			|	%ИмяТаблицы% КАК ДокументНакладная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
			|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументНакладная.Ссылка)
			|		И ОбъектыРасчетов.ТребуетсяГрафик";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
		
		КонецЕсли;
		
		Если ИмяТаблицы = "Документ.РеализацияТоваровУслуг"
			ИЛИ ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоГрафикуОплатыОбъектРасчетов("ЗаказКлиента");
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоГрафикуОплатыОбъектРасчетов("ЗаявкаНаВозвратТоваровОтКлиента");
			
		КонецЕсли;
		
		Если ИмяТаблицы = "Документ.ПоступлениеТоваровУслуг" Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоГрафикуОплатыОбъектРасчетов("ЗаказПоставщику");
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоДоговор") И СтруктураПараметров.ЭтоДоговор Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументЭтапыГрафикаОплаты.Ссылка.Договор КАК Документ,
		|	ДокументЭтапыГрафикаОплаты.НомерСтроки,
		|	%ВариантОплаты% КАК ВариантОплаты,
		|	ДокументЭтапыГрафикаОплаты.ДатаПоГрафику КАК ДатаПлатежа,
		|	ДокументЭтапыГрафикаОплаты.СуммаОплаты КАК СуммаПлатежа
		|ИЗ
		|	%ИмяТаблицы%.ЭтапыГрафикаИсполненияДоговора КАК ДокументЭтапыГрафикаОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка.Договор
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВариантОплаты%", НСтр("ru='""Оплата""';uk='""Оплата""'"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИТОГИ ПО
	|	Ссылка;";
	
	Возврат ТекстЗапроса

КонецФункции

Функция ТекстЗапросаПоГрафикуОплатыОбъектРасчетов(ИмяДокумента)

	Если Не ПравоДоступа("Чтение", Метаданные.Документы.Найти(ИмяДокумента)) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЭтапыГрафикаОплаты.Ссылка КАК Документ,
	|	ДокументЭтапыГрафикаОплаты.НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
	|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ДокументЭтапыГрафикаОплаты.СуммаПлатежа + ДокументЭтапыГрафикаОплаты.СуммаЗалогаЗаТару КАК СуммаПлатежа
	|ИЗ
	|	%ИмяТаблицы%.ЭтапыГрафикаОплаты КАК ДокументЭтапыГрафикаОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка)
	|		И ОбъектыРасчетов.ТребуетсяГрафик";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%","Документ." + ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаРасчетыСКлиентами") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаРасчетыСКлиентами;
	КонецЕсли;
	
	ТекстЗапроса = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыРасчетов.Документ КАК Документ,
		|	РасчетыСКлиентами.ЗаказКлиента КАК ОбъектРасчетов,
		|	РасчетыСКлиентами.ЗаказКлиента.ПорядокРасчетов КАК ПорядокРасчетов,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.ЗаказКлиента.ВалютаВзаиморасчетов ЕСТЬ NULL 
		|			ТОГДА РасчетыСКлиентами.ЗаказКлиента.Валюта
		|		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.ВалютаВзаиморасчетов
		|	КОНЕЦ КАК Валюта,
		|	ОбъектыРасчетов.ТребуетсяГрафик КАК ТребуетсяГрафик,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.КОплатеПриход <> 0
		|			ТОГДА ВЫРАЗИТЬ(&ОплатаПоГрафику КАК СТРОКА(150))
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыСКлиентами.КОплатеРасход <> 0
		|					ТОГДА ВЫРАЗИТЬ(&ОплатаНеПоГрафику КАК СТРОКА(150))
		|				ИНАЧЕ ВЫРАЗИТЬ(&Отгрузка КАК СТРОКА(150))
		|			КОНЕЦ
		|	КОНЕЦ КАК ЭтапОплатыОтгрузки,
		|	РасчетыСКлиентами.Период КАК ДатаПлатежа,
		|	РасчетыСКлиентами.КОплатеПриход КАК ОплатаПлан,
		|	РасчетыСКлиентами.КОплатеРасход КАК ОплатаФакт,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.Период < &ТекущаяДата
		|				И РасчетыСКлиентами.КОплатеКонечныйОстаток > 0
		|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОплатаПросрочено,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0) > 0
		|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОплатаПросроченоИтого,
		|	РасчетыСКлиентами.КОтгрузкеРасход КАК ОтгрузкаПлан,
		|	РасчетыСКлиентами.КОтгрузкеПриход КАК ОтгрузкаФакт,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентами.Период < &ТекущаяДата
		|				И РасчетыСКлиентами.КОтгрузкеКонечныйОстаток < 0
		|			ТОГДА -РасчетыСКлиентами.КОтгрузкеКонечныйОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОтгрузкаПросрочено,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(-РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОтгрузкеПриход, 0) > 0
		|			ТОГДА ЕСТЬNULL(-РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОтгрузкеПриход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОтгрузкаПросроченоИтого
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
		|			,
		|			,
		|			День,
		|			,
		|			ЗаказКлиента В
		|				(ВЫБРАТЬ
		|					ОбъектыРасчетов.ОбъектРасчетов
		|				ИЗ
		|					ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО (ОбъектыРасчетов.ОбъектРасчетов = РасчетыСКлиентами.ЗаказКлиента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
		|				&ТекущаяДата,
		|				ЗаказКлиента В
		|					(ВЫБРАТЬ
		|						ОбъектыРасчетов.ОбъектРасчетов
		|					ИЗ
		|						ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСКлиентамиОстатки
		|		ПО РасчетыСКлиентами.ЗаказКлиента = РасчетыСКлиентамиОстатки.ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(
		|				&ТекущаяДата,
		|				,
		|				,
		|				ЗаказКлиента В
		|					(ВЫБРАТЬ
		|						ОбъектыРасчетов.ОбъектРасчетов
		|					ИЗ
		|						ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСКлиентамиОбороты
		|		ПО (РасчетыСКлиентами.ЗаказКлиента = РасчетыСКлиентамиОстатки.ЗаказКлиента)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыСКлиентами.Период
		|ИТОГИ
		|	МАКСИМУМ(ПорядокРасчетов),
		|	МАКСИМУМ(Валюта),
		|	МАКСИМУМ(ТребуетсяГрафик),
		|	СУММА(ОплатаПлан),
		|	СУММА(ОплатаФакт),
		|	МАКСИМУМ(ОплатаПросроченоИтого),
		|	СУММА(ОтгрузкаПлан),
		|	СУММА(ОтгрузкаФакт),
		|	МАКСИМУМ(ОтгрузкаПросроченоИтого)
		|ПО
		|	Документ,
		|	ОбъектРасчетов;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаРасчетыСПоставщиками") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаРасчетыСПоставщиками;
	КонецЕсли;
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыРасчетов.Документ КАК Документ,
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.ЗаказПоставщику.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ВЫБОР КОГДА РасчетыСПоставщиками.ЗаказПоставщику.ВалютаВзаиморасчетов ЕСТЬ NULL 
	|		ТОГДА РасчетыСПоставщиками.ЗаказПоставщику.Валюта 
	|	ИНАЧЕ
	|		РасчетыСПоставщиками.ЗаказПоставщику.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|	ОбъектыРасчетов.ТребуетсяГрафик,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.КОплатеРасход <> 0
	|			ТОГДА ВЫРАЗИТЬ(&ОплатаПоГрафику КАК Строка(150))
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыСПоставщиками.КОплатеПриход <> 0
	|					ТОГДА ВЫРАЗИТЬ(&ОплатаНеПоГрафику КАК Строка(150))
	|				ИНАЧЕ ВЫРАЗИТЬ(&Поступление КАК Строка(150))
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтапОплатыОтгрузки,
	|	РасчетыСПоставщиками.Период КАК ДатаПлатежа,
	|	РасчетыСПоставщиками.КОплатеПриход КАК ОплатаФакт,
	|	РасчетыСПоставщиками.КОплатеРасход КАК ОплатаПлан,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Период < &ТекущаяДата
	|				И РасчетыСПоставщиками.КОплатеКонечныйОстаток < 0
	|			ТОГДА -РасчетыСПоставщиками.КОплатеКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплатаПросрочено,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0) + ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеОстаток, 0) < 0
	|			ТОГДА -(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0) + ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеОстаток, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплатаПросроченоИтого,
	|	РасчетыСПоставщиками.КПоступлениюРасход КАК ОтгрузкаФакт,
	|	РасчетыСПоставщиками.КПоступлениюПриход КАК ОтгрузкаПлан,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Период < &ТекущаяДата
	|				И РасчетыСПоставщиками.КПоступлениюКонечныйОстаток > 0
	|			ТОГДА РасчетыСПоставщиками.КПоступлениюКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтгрузкаПросрочено,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюОстаток, 0) - ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КПоступлениюРасход, 0) > 0 ТОГДА
	|			ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюОстаток, 0) - ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КПоступлениюРасход, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ОтгрузкаПросроченоИтого
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			,
	|			,
	|			День,
	|			,
	|			ЗаказПоставщику В
	|				(ВЫБРАТЬ
	|					ОбъектыРасчетов.ОбъектРасчетов
	|				ИЗ
	|					ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.ОбъектРасчетов = РасчетыСПоставщиками.ЗаказПоставщику)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				&ТекущаяДата,
	|				ЗаказПоставщику В
	|					(ВЫБРАТЬ
	|						ОбъектыРасчетов.ОбъектРасчетов
	|					ИЗ
	|						ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСПоставщикамиОстатки
	|		ПО РасчетыСПоставщиками.ЗаказПоставщику = РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|				&ТекущаяДата,
	|				,
	|				,
	|				ЗаказПоставщику В
	|					(ВЫБРАТЬ
	|						ОбъектыРасчетов.ОбъектРасчетов
	|					ИЗ
	|						ОбъектыРасчетов КАК ОбъектыРасчетов)) КАК РасчетыСПоставщикамиОбороты
	|		ПО РасчетыСПоставщиками.ЗаказПоставщику = РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПоставщиками.Период
	|ИТОГИ
	|	МАКСИМУМ(Валюта),
	|	СУММА(ОплатаПлан),
	|	СУММА(ОплатаФакт),
	|	МАКСИМУМ(ОплатаПросроченоИтого),
	|	СУММА(ОтгрузкаПлан),
	|	СУММА(ОтгрузкаФакт),
	|	МАКСИМУМ(ОтгрузкаПросроченоИтого),
	|	МАКСИМУМ(ТребуетсяГрафик)
	|ПО
	|	Документ,
	|	ОбъектРасчетов;
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаПодчиненныеДокументы(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаПодчиненныеДокументы") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаПодчиненныеДокументы;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	ПервыйЗапрос = Истина;
	Если (ИмяТаблицы = "Документ.ЗаказКлиента" 
			ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента")
		И ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
		|	ТчДокументРеализациии.Ссылка.Валюта КАК Валюта,
		|	ТчДокументРеализациии.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ТчДокументРеализациии.Ссылка КАК ПодчиненныйДокумент
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТчДокументРеализациии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
		|		ПО ТчДокументРеализациии.ЗаказКлиента = ВтДокументы.ДокументСсылка
		|ГДЕ
		|	ВтДокументы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И НЕ ТчДокументРеализациии.Ссылка.ПометкаУдаления
		|";
		ПервыйЗапрос = Ложь;
	КонецЕсли;
	
	Если (ИмяТаблицы = "Документ.ЗаказКлиента" 
			ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента") 
		И ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот) Тогда
			
		Если НЕ ПервыйЗапрос Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|	ВтДокументы.ДокументСсылка КАК Документ,
			|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
			|	ТчДокументРеализациии.Ссылка.Валюта КАК Валюта,
			|	ТчДокументРеализациии.Ссылка.СуммаДокумента КАК СуммаДокумента,
			|	ТчДокументРеализациии.Ссылка КАК ПодчиненныйДокумент
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК ТчДокументРеализациии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
			|		ПО ТчДокументРеализациии.ЗаказКлиента = ВтДокументы.ДокументСсылка
			|ГДЕ
			|	ВтДокументы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
			|	И НЕ ТчДокументРеализациии.Ссылка.ПометкаУдаления";
		ПервыйЗапрос = Ложь;
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" 
		И ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровУслуг) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) КАК ПорядокРасчетов,
		|	ТчДокументРеализациии.Ссылка.Валюта КАК Валюта,
		|	ТчДокументРеализациии.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ТчДокументРеализациии.Ссылка КАК ПодчиненныйДокумент
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТчДокументРеализациии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы 
		|		ПО ТчДокументРеализациии.ЗаказПоставщику = ВтДокументы.ДокументСсылка
		|ГДЕ
		|	ВтДокументы.ДокументСсылка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И НЕ ТчДокументРеализациии.Ссылка.ПометкаУдаления
		|";
		ПервыйЗапрос = Ложь;
	КонецЕсли;


	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = "
			|//////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ"
			+ ТекстЗапроса + "
			|
			|ИТОГИ
			|	МАКСИМУМ(ПорядокРасчетов),
			|	МАКСИМУМ(Валюта)
			|ПО
			|	Документ;
			|";
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаНеобеспеченныеТовары(ИмяТаблицы, СтруктураПараметров)
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаНеобеспеченныеТовары") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаНеобеспеченныеТовары;
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	%ИмяПоляСумма% КАК Сумма
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|	И НЕ ДокументТовары.Отменено
	|ИТОГИ ПО
	|	Документ;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаСостояниеОбеспечения(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаСостояниеОбеспечения") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаСостояниеОбеспечения;
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.Серия КАК Серия,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	%ИмяПоляДатаОтгрузки% КАК ДатаОтгрузки,
	|	ДокументТовары.ВариантОбеспечения КАК Действие,
	|	%ИмяПоляСумма% КАК Сумма
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	(ДокументТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|	ИЛИ ВЫБОР КОГДА ДокументТовары.Ссылка.Статус В (&МассивСтатусовБезОтгрузки) ТОГДА
	|		ДокументТовары.ВариантОбеспечения В(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	КОНЕЦ)
	|	И НЕ ДокументТовары.Отменено
	|ИТОГИ ПО
	|	Документ;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляДатаОтгрузки%", "ДокументТовары." + СтруктураПараметров.ИмяПоляДатаОтгрузки);
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТТоварыКОтгрузке(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыКОтгрузке") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыКОтгрузке;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если СтруктураПараметров.ЕстьПравоНаТаблицуОтгрузки Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОстатки.Склад КАК Склад,
		|	ТоварыКОтгрузкеОстатки.Серия КАК Серия,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеПриход КАК КОтгрузке,
		|	ТоварыКОтгрузкеОстатки.СобираетсяКонечныйОстаток КАК Собирается,
		|	ТоварыКОтгрузкеОстатки.СобраноКонечныйОстаток КАК Собрано,
		|	ТоварыКОтгрузкеОстатки.КОформлениюКонечныйОстаток КАК Оформить,
		|	ТоварыКОтгрузкеОстатки.КОформлениюРасход КАК Оформлено,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток КАК Отгрузить,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеРасход КАК Отгружено,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОстатки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И &ТекущаяДата >= ТоварыКОтгрузкеОстатки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке
		|ПОМЕСТИТЬ ВТТоварыКОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ДокументОтгрузки В
		|				(ВЫБРАТЬ
		|					ВтДокументы.ДокументСсылка
		|				ИЗ
		|					ВтДокументы КАК ВтДокументы)) КАК ТоварыКОтгрузкеОстатки
		|";
		
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ЕстьПравоДоступаРегистрОтгрузкаУслуг") 
		И СтруктураПараметров.ЕстьПравоДоступаРегистрОтгрузкаУслуг Тогда
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ";
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ";
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИмяРегистраОтгрузкаУслуг = "ЗаказыКлиентов" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ДокументОтгрузки,
			|	ЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура,
			|	ЗаказыКлиентовОстатки.Характеристика КАК Характеристика,
			|	ЗаказыКлиентовОстатки.Склад КАК Склад,
			|	ЗаказыКлиентовОстатки.Серия КАК Серия,
			|	ЗаказыКлиентовОстатки.ЗаказаноПриход КАК КОтгрузке,
			|	0 КАК Собирается,
			|	0 КАК Собрано,
			|	ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток КАК Оформить,
			|	ЗаказыКлиентовОстатки.КОформлениюРасход КАК Оформлено,
			|	0 КАК Отгрузить,
			|	0 КАК Отгружено,
			|	ЛОЖЬ КАК ОрдернаяСхемаПриОтгрузке
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(
			|			,
			|			,
			|			,
			|			,
			|			ЗаказКлиента В
			|				(ВЫБРАТЬ
			|					ВтДокументы.ДокументСсылка
			|				ИЗ
			|					ВтДокументы КАК ВтДокументы)
			|			И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)) 
			|		)КАК ЗаказыКлиентовОстатки
			|";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////" + ТекстЗапроса + ";";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено(ИмяТаблицы,СтруктураПараметров, ТекстыЗапроса)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(%ИмяПоляСумма%) КАК СуммаСНДС,
	|	ДокументТовары.Серия КАК Серия,
	|	%СкладРасположение% КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ %ВТТоварыРаспоряженияОтгружено%
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	НЕ ДокументТовары.Отменено
	|	И ДокументТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ВтДокументы.Проведен
	|	И НЕ ДокументТовары.Ссылка.Статус В (&МассивСтатусовБезОтгрузки)
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Серия,
	|	%СкладРасположение%,
	|	ВтДокументы.ДокументСсылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСклад);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Склад");
	КонецЕсли;
	
	Если (ИмяТаблицы = "Документ.ЗаказКлиента"
		ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента")
		И ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВТТоварыРаспоряженияОтгружено%", "ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	СУММА(ДокументТовары.Количество),
		|	СУММА(ДокументТовары.СуммаСНДС),
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказКлиента)
		|ГДЕ
		|	ДокументТовары.Ссылка.Проведен
		|	И ДокументТовары.КодСтроки = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Упаковка,
		|	ДокументТовары.Серия,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка;";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТПредварительноТоварыРаспоряженияОтгружено");
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыРаспоряжения.Номенклатура КАК Номенклатура,
		|	ТоварыРаспоряжения.Характеристика КАК Характеристика,
		|	СУММА(ТоварыРаспоряжения.Количество) КАК Количество,
		|	СУММА(ТоварыРаспоряжения.СуммаСНДС) КАК СуммаСНДС,
		|	ТоварыРаспоряжения.Серия КАК Серия,
		|	ТоварыРаспоряжения.Склад КАК Склад,
		|	ТоварыРаспоряжения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
		|ИЗ
		|	ВТПредварительноТоварыРаспоряженияОтгружено КАК ТоварыРаспоряжения
		|СГРУППИРОВАТЬ ПО
		|	ТоварыРаспоряжения.Номенклатура,
		|	ТоварыРаспоряжения.Характеристика,
		|	ТоварыРаспоряжения.Серия,
		|	ТоварыРаспоряжения.Склад,
		|	ТоварыРаспоряжения.Ссылка;
		|";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВТТоварыРаспоряженияОтгружено%", "ВТТоварыРаспоряженияОтгружено");
		ТекстЗапроса = ТекстЗапроса + ";";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряжениеНакладнаяОтгружено(ИмяТаблицы,СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыРаспоряжениеНакладнаяОтгружено") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыРаспоряжениеНакладнаяОтгружено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(%ИмяПоляСумма%) КАК СуммаСНДС,
	|	ДокументТовары.Серия КАК Серия,
	|	%СкладРасположение% КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	ВтДокументы.Проведен
	|	%ДопУсловия%
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Серия,
	|	%СкладРасположение%,
	|	ВтДокументы.ДокументСсылка
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСклад);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Склад");
	КонецЕсли;
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	ИмяПоляНакладнаяПоЗаказам = СтруктураПараметров.ИмяПоляНакладнаяПоЗаказам;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДопУсловия%", "И НЕ ДокументТовары.Ссылка." + ИмяПоляНакладнаяПоЗаказам);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтгрузка(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаОтгрузка") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаОтгрузка;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыРаспоряженияОтгружено.Ссылка КАК Документ,
	|	ВТТоварыКОтгрузке.Склад КАК Склад,
	|	ВТТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ВТТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ВТТоварыРаспоряженияОтгружено.СуммаСНДС КАК СуммаСНДС,
	|	ВТТоварыРаспоряженияОтгружено.Серия КАК Серия,
	|	ВТТоварыКОтгрузке.КОтгрузке КАК КОтгрузке,
	|	ВТТоварыКОтгрузке.Собирается КАК Собирается,
	|	ВТТоварыКОтгрузке.Собрано КАК Собрано,
	|	ВТТоварыКОтгрузке.Оформить КАК Оформить,
	|	ВТТоварыКОтгрузке.Оформлено КАК Оформлено,
	|	ВТТоварыКОтгрузке.Отгрузить КАК Отгрузить,
	|	ВТТоварыКОтгрузке.Отгружено КАК Отгружено,
	|	ВТТоварыКОтгрузке.ОрдернаяСхемаПриОтгрузке КАК ОрдернаяСхемаПриОтгрузке
	|ИЗ
	|	ВТТоварыКОтгрузке КАК ВТТоварыКОтгрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыРаспоряженияОтгружено КАК ВТТоварыРаспоряженияОтгружено
	|		ПО ВТТоварыКОтгрузке.ДокументОтгрузки = ВТТоварыРаспоряженияОтгружено.Ссылка
	|			И ВТТоварыКОтгрузке.Номенклатура = ВТТоварыРаспоряженияОтгружено.Номенклатура
	|			И ВТТоварыКОтгрузке.Характеристика = ВТТоварыРаспоряженияОтгружено.Характеристика
	|			И ВТТоварыКОтгрузке.Склад = ВТТоварыРаспоряженияОтгружено.Склад
	|			И ВТТоварыКОтгрузке.Серия = ВТТоварыРаспоряженияОтгружено.Серия
	|ГДЕ
	|	НЕ ВТТоварыРаспоряженияОтгружено.Номенклатура ЕСТЬ NULL 
	|	И (ВТТоварыКОтгрузке.Отгрузить <> 0
	|			ИЛИ ВТТоварыКОтгрузке.Оформить <> 0
	|			ИЛИ ВТТоварыКОтгрузке.Оформлено <> ВТТоварыКОтгрузке.Отгружено)
	|ИТОГИ
	|	МАКСИМУМ(ОрдернаяСхемаПриОтгрузке)
	|ПО
	|	Документ,
	|	Склад
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтгружено(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаОтгружено") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаОтгружено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыРаспоряженияОтгружено.Ссылка КАК Документ,
	|	ВТТоварыРаспоряженияОтгружено.Номенклатура КАК Номенклатура,
	|	ВТТоварыРаспоряженияОтгружено.Характеристика КАК Характеристика,
	|	ВТТоварыРаспоряженияОтгружено.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВТТоварыРаспоряженияОтгружено.Количество КАК Количество,
	|	ВТТоварыРаспоряженияОтгружено.СуммаСНДС КАК Сумма,
	|	ВТТоварыРаспоряженияОтгружено.Серия КАК Серия
	|ИЗ
	|	ВТТоварыРаспоряженияОтгружено КАК ВТТоварыРаспоряженияОтгружено
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыКОтгрузке КАК ВТТоварыКОтгрузке
	|		ПО (ВТТоварыКОтгрузке.ДокументОтгрузки = ВТТоварыРаспоряженияОтгружено.Ссылка)
	|			И (ВТТоварыКОтгрузке.Номенклатура = ВТТоварыРаспоряженияОтгружено.Номенклатура)
	|			И (ВТТоварыКОтгрузке.Характеристика = ВТТоварыРаспоряженияОтгружено.Характеристика)
	|			И (ВТТоварыКОтгрузке.Склад = ВТТоварыРаспоряженияОтгружено.Склад)
	|			И (ВТТоварыКОтгрузке.Серия = ВТТоварыРаспоряженияОтгружено.Серия)
	|ГДЕ
	|	(ВТТоварыКОтгрузке.Отгрузить = 0
	|	И ВТТоварыКОтгрузке.Оформить = 0
	|	И ВТТоварыКОтгрузке.Оформлено = ВТТоварыКОтгрузке.Отгружено)
	|		ИЛИ ВТТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|ИТОГИ ПО
	|	Документ;
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыПоступление(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыПоступление") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыПоступление;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если СтруктураПараметров.ЕстьПравоНаТаблицуПоступления Тогда
		
		ТекстЗапроса = 
		"
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика КАК Характеристика,
		|	ТоварыКПоступлению.Склад КАК Склад,
		|	СУММА(ТоварыКПоступлению.КПоступлению) КАК КПоступлению,
		|	СУММА(ТоварыКПоступлению.Принимается) КАК Принимается,
		|	СУММА(ТоварыКПоступлению.Принято) КАК Принято,
		|	СУММА(ТоварыКПоступлению.Оформить) КАК Оформить,
		|	СУММА(ТоварыКПоступлению.Оформлено) КАК Оформлено,
		|	СУММА(ТоварыКПоступлению.Принять) КАК Принять,
		|	СУММА(ТоварыКПоступлению.Поступило) КАК Поступило,
		|	ВЫБОР
		|		КОГДА ТоварыКПоступлению.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|				И &ТекущаяДата >= ТоварыКПоступлению.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрдернаяСхемаПриПоступлении
		|ПОМЕСТИТЬ ВТТоварыПоступление
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|		ТоварыКПоступлению.Номенклатура КАК Номенклатура,
		|		ТоварыКПоступлению.Характеристика КАК Характеристика,
		|		ТоварыКПоступлению.Склад КАК Склад,
		|		0 КАК КПоступлению,
		|		ТоварыКПоступлению.ПринимаетсяКонечныйОстаток КАК Принимается,
		|		ТоварыКПоступлению.КПоступлениюРасход КАК Принято,
		|		0 КАК Оформить,
		|		0 КАК Оформлено,
		|		ТоварыКПоступлению.КПоступлениюКонечныйОстаток КАК Принять,
		|		ТоварыКПоступлению.КПоступлениюРасход КАК Поступило
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(
		|				,
		|				,
		|				,
		|				,
		|				ДокументПоступления В
		|					(ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКПоступлению
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказыПоставщикам.ЗаказПоставщику,
		|		ЗаказыПоставщикам.Номенклатура,
		|		ЗаказыПоставщикам.Характеристика,
		|		ЗаказыПоставщикам.Склад,
		|		ЗаказыПоставщикам.КОформлениюПриход,
		|		0,
		|		0,
		|		ЗаказыПоставщикам.КОформлениюКонечныйОстаток,
		|		ЗаказыПоставщикам.КОформлениюРасход,
		|		0,
		|		0
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(
		|				,
		|				,
		|				,
		|				,
		|				ЗаказПоставщику В
		|					(ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ЗаказыПоставщикам) КАК ТоварыКПоступлению
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлению.ДокументПоступления,
		|	ТоварыКПоступлению.Номенклатура,
		|	ТоварыКПоступлению.Характеристика,
		|	ТоварыКПоступлению.Склад,
		|	ВЫБОР
		|		КОГДА ТоварыКПоступлению.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|				И &ТекущаяДата >= ТоварыКПоступлению.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ(ИмяТаблицы,СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(%ИмяПоляСумма%) КАК СуммаСНДС,
	|	%СкладРасположение% КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	НЕ ДокументТовары.Отменено
	|	И ВтДокументы.Проведен
	|	%ДопУсловия%
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	%СкладРасположение%,
	|	ВтДокументы.ДокументСсылка
	|";
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику"
		И ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровУслуг) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	СУММА(ДокументТовары.Количество),
		|	СУММА(ДокументТовары.СуммаСНДС),
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказПоставщику)
		|ГДЕ
		|	ДокументТовары.Ссылка.Проведен
		|	И ДокументТовары.КодСтроки = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Упаковка,
		|	ДокументТовары.Склад,
		|	ВтДокументы.ДокументСсылка
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ";";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыПоступление);
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСкладПолучатель);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Склад");
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДопУсловия%", "
			|	И ДокументТовары.Ссылка.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))");
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказНаПеремещение" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДопУсловия%", "
			|
			|	И ДокументТовары.ВариантОбеспечения В(
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|
			|	И ДокументТовары.Ссылка.Статус В(
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
			|");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДопУсловия%", "");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряженияПоступлениеНакладная(ИмяТаблицы,СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыРаспоряженияПоступлениеНакладная") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыРаспоряженияПоступлениеНакладная;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(%ИмяПоляСумма%) КАК СуммаСНДС,
	|	%СкладРасположение% КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	ВтДокументы.Проведен
	|	%ДопУсловия%
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	%СкладРасположение%,
	|	ВтДокументы.ДокументСсылка
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыПоступление);
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСкладПолучатель);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Склад");
	КонецЕсли;
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	ИмяПоляНакладнаяПоЗаказам = СтруктураПараметров.ИмяПоляНакладнаяПоЗаказам;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДопУсловия%", "И НЕ ДокументТовары.Ссылка." + ИмяПоляНакладнаяПоЗаказам);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказано(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаЗаказано") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаЗаказано;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(%ИмяПоляСумма%) КАК Сумма,
	|	%СкладРасположение% КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Документ
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	НЕ ДокументТовары.Отменено
	|	И ВтДокументы.Проведен
	|	%ДопУсловия%
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Упаковка,
	|	%СкладРасположение%,
	|	ВтДокументы.ДокументСсылка
	|ИТОГИ ПО
	|	Документ
	|";
	
	ТекстЗапроса = ТекстЗапроса + ";";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыПоступление);
	
	ЕстьСуммовыеПоказатели = СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(ЕстьСуммовыеПоказатели, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	
	Если СтруктураПараметров.СкладВШапке Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Ссылка." + СтруктураПараметров.ИмяПоляСкладПолучатель);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СкладРасположение%", "ДокументТовары.Склад");
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДопУсловия%", "И НЕ ДокументТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
			|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДопУсловия%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоступление(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаПоступление") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаПоступление;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыРаспоряженияПоступление.Ссылка КАК Документ,
	|	ВТТоварыПоступление.Склад КАК Склад,
	|	ВТТоварыПоступление.Номенклатура КАК Номенклатура,
	|	ВТТоварыПоступление.Характеристика КАК Характеристика,
	|	ВТТоварыРаспоряженияПоступление.СуммаСНДС КАК СуммаСНДС,
	|	ВТТоварыПоступление.КПоступлению КАК КПоступлению,
	|	ВТТоварыПоступление.Принимается КАК Принимается,
	|	ВТТоварыПоступление.Принято КАК Принято,
	|	ВТТоварыПоступление.Оформить КАК Оформить,
	|	ВТТоварыПоступление.Оформлено КАК Оформлено,
	|	ВТТоварыПоступление.Принять КАК Принять,
	|	ВТТоварыПоступление.Поступило КАК Поступило,
	|	ВТТоварыПоступление.ОрдернаяСхемаПриПоступлении КАК ОрдернаяСхемаПриПоступлении
	|ИЗ
	|	ВТТоварыПоступление КАК ВТТоварыПоступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыРаспоряженияПоступление КАК ВТТоварыРаспоряженияПоступление
	|		ПО ВТТоварыПоступление.ДокументПоступления = ВТТоварыРаспоряженияПоступление.Ссылка
	|			И ВТТоварыПоступление.Номенклатура = ВТТоварыРаспоряженияПоступление.Номенклатура
	|			И ВТТоварыПоступление.Характеристика = ВТТоварыРаспоряженияПоступление.Характеристика
	|			И ВТТоварыПоступление.Склад = ВТТоварыРаспоряженияПоступление.Склад
	|ГДЕ
	|	НЕ ВТТоварыРаспоряженияПоступление.Номенклатура ЕСТЬ NULL 
	|	И (ВТТоварыПоступление.Принять <> 0
	|			ИЛИ ВТТоварыПоступление.Оформить <> 0
	|			ИЛИ ВТТоварыПоступление.Оформлено <> ВТТоварыПоступление.Поступило)
	|ИТОГИ
	|	МАКСИМУМ(ОрдернаяСхемаПриПоступлении)
	|ПО
	|	Документ,
	|	Склад
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоступило(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаПоступило") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаПоступило;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыРаспоряженияПоступление.Ссылка КАК Документ,
	|	ВТТоварыРаспоряженияПоступление.Номенклатура КАК Номенклатура,
	|	ВТТоварыРаспоряженияПоступление.Характеристика КАК Характеристика,
	|	ВТТоварыРаспоряженияПоступление.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВТТоварыРаспоряженияПоступление.Количество КАК Количество,
	|	ВТТоварыРаспоряженияПоступление.СуммаСНДС КАК Сумма
	|ИЗ
	|	ВТТоварыРаспоряженияПоступление КАК ВТТоварыРаспоряженияПоступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыПоступление КАК ВТТоварыПоступление
	|		ПО (ВТТоварыПоступление.ДокументПоступления = ВТТоварыРаспоряженияПоступление.Ссылка)
	|			И (ВТТоварыПоступление.Номенклатура = ВТТоварыРаспоряженияПоступление.Номенклатура)
	|			И (ВТТоварыПоступление.Характеристика = ВТТоварыРаспоряженияПоступление.Характеристика)
	|			И (ВТТоварыПоступление.Склад = ВТТоварыРаспоряженияПоступление.Склад)
	|ГДЕ
	|	(ВТТоварыПоступление.Принять = 0
	|	И ВТТоварыПоступление.Оформить = 0
	|	И ВТТоварыПоступление.Оформлено = ВТТоварыПоступление.Поступило)
	|		ИЛИ ВТТоварыПоступление.ДокументПоступления ЕСТЬ NULL
	|ИТОГИ ПО
	|	Документ;
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтмененоОтгрузка(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаОтмененоОтгрузка") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаОтмененоОтгрузка;
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	%ИмяПоляПричинаОтмены% КАК ПричинаОтмены,
	|	%ИмяПоляСумма% КАК Сумма
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ДокументТовары.Отменено
	|ИТОГИ ПО
	|	Документ;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыОтгрузка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляПричинаОтмены%", ?(СтруктураПараметров.ЕстьПричиныОтменыОтгрузки, "ДокументТовары.ПричинаОтмены", """"""));
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаТаблицаОтмененоПоступление(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаОтмененоПоступление") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаОтмененоПоступление;
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	%ИмяПоляПричинаОтмены% КАК ПричинаОтмены,
	|	%ИмяПоляСумма% КАК Сумма
	|ИЗ
	|	%ИмяТаблицы%.%ИмяТЧТовары% КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ДокументТовары.Отменено
	|ИТОГИ ПО
	|	Документ;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТЧТовары%", СтруктураПараметров.ИмяТЧТоварыПоступление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляСумма%", ?(СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления, "ДокументТовары." + СтруктураПараметров.ИмяПоляСумма, 0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПоляПричинаОтмены%", ?(СтруктураПараметров.ЕстьПричиныОтменыПоступления, "ДокументТовары.ПричинаОтмены", """"""));
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТТоварыКВозврату(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТТоварыКОтгрузке") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТТоварыКОтгрузке;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗаявкиОстатки.Заявка КАК Заявка,
	|	ЗаявкиОстатки.Номенклатура КАК Номенклатура,
	|	ЗаявкиОстатки.Характеристика КАК Характеристика,
	|	ЗаявкиОстатки.Склад КАК Склад,
	|	СУММА(ЗаявкиОстатки.КОформлению) КАК КОформлению,
	|	СУММА(ЗаявкиОстатки.Принимается) КАК Принимается,
	|	СУММА(ЗаявкиОстатки.Принято) КАК Принято,
	|	СУММА(ЗаявкиОстатки.Оформить) КАК Оформить,
	|	СУММА(ЗаявкиОстатки.Оформлено) КАК Оформлено,
	|	СУММА(ЗаявкиОстатки.Принять) КАК Принять,
	|	СУММА(ЗаявкиОстатки.Поступило) КАК Поступило,
	|	ВЫБОР
	|		КОГДА ЗаявкиОстатки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И &ТекущаяДата >= ЗаявкиОстатки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриПоступлении
	|ПОМЕСТИТЬ ВТТоварыКВозврату
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКПоступлению.ДокументПоступления КАК Заявка,
	|		ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|		ТоварыКПоступлению.Характеристика КАК Характеристика,
	|		ТоварыКПоступлению.Склад КАК Склад,
	|		0 КАК КОформлению,
	|		ТоварыКПоступлению.ПринимаетсяКонечныйОстаток КАК Принимается,
	|		ТоварыКПоступлению.КПоступлениюРасход КАК Принято,
	|		0 КАК Оформить,
	|		0 КАК Оформлено,
	|		ТоварыКПоступлению.КПоступлениюКонечныйОстаток КАК Принять,
	|		ТоварыКПоступлению.КПоступлениюРасход КАК Поступило
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(
	|				,
	|				,
	|				,
	|				,
	|				ДокументПоступления В
	|					(ВЫБРАТЬ
	|						ВтДокументы.ДокументСсылка
	|					ИЗ
	|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКПоступлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТоварыКВозврату.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
	|		ТоварыКВозврату.Номенклатура КАК Номенклатура,
	|		ТоварыКВозврату.Характеристика КАК Характеристика,
	|		ТоварыКВозврату.ЗаявкаНаВозвратТоваровОтКлиента.Склад КАК Склад,
	|		ТоварыКВозврату.ЗаявленоПриход КАК КОформлению,
	|		0,
	|		0,
	|		ТоварыКВозврату.КОформлениюКонечныйОстаток КАК Оформить,
	|		ТоварыКВозврату.КОформлениюРасход КАК Оформлено,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.ОстаткиИОбороты(
	|			,
	|			,
	|			,
	|			,
	|			ЗаявкаНаВозвратТоваровОтКлиента В
	|				(ВЫБРАТЬ
	|					ВтДокументы.ДокументСсылка
	|				ИЗ
	|					ВтДокументы КАК ВтДокументы)) КАК ТоварыКВозврату) КАК ЗаявкиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиОстатки.Заявка,
	|	ЗаявкиОстатки.Номенклатура,
	|	ЗаявкиОстатки.Характеристика,
	|	ЗаявкиОстатки.Склад,
	|	ВЫБОР
	|		КОГДА ЗаявкиОстатки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И &ТекущаяДата >= ЗаявкиОстатки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТВозвращаемыеТовары(СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаВТВозвращаемыеТовары") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаВТВозвращаемыеТовары;
	КонецЕсли;
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА
	|			ДокументТовары.Порча
	|				И ДокументТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ДокументТовары.НоменклатураОприходование
	|		ИНАЧЕ ДокументТовары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР КОГДА
	|			ДокументТовары.Порча
	|				И ДокументТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ДокументТовары.ХарактеристикаОприходование
	|		ИНАЧЕ ДокументТовары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(ДокументТовары.СуммаСНДС) КАК СуммаСНДС,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТВозвращаемыеТовары
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	НЕ ДокументТовары.Отменено
	|	И ВтДокументы.Проведен
	|	И НЕ ДокументТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована), 
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА
	|			ДокументТовары.Порча
	|				И ДокументТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ДокументТовары.НоменклатураОприходование
	|		ИНАЧЕ ДокументТовары.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР КОГДА
	|			ДокументТовары.Порча
	|				И ДокументТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ДокументТовары.ХарактеристикаОприходование
	|		ИНАЧЕ ДокументТовары.Характеристика
	|	КОНЕЦ,
	|	ДокументТовары.Порча,
	|	ДокументТовары.Ссылка.ХозяйственнаяОперация,
	|	ВтДокументы.ДокументСсылка
	|;
	|";
	Возврат ТекстЗапроса
	
	
КонецФункции

Функция ТекстЗапросаТаблицаВозвратТоваров(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаВозвратТоваров") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаВозвратТоваров;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТТоварыКВозврату.Заявка КАК Документ,
	|	ВТТоварыКВозврату.Склад КАК Склад,
	|	ВТТоварыКВозврату.Принимается КАК Принимается,
	|	ВТТоварыКВозврату.Принято КАК Принято,
	|	ВТТоварыКВозврату.КОформлению КАК КОформлению,
	|	ВТТоварыКВозврату.Оформлено КАК Оформлено,
	|	ВТТоварыКВозврату.Оформить КАК Оформить,
	|	ВТТоварыКВозврату.Принять КАК Принять,
	|	ВТТоварыКВозврату.Поступило КАК Поступило,
	|	ВТТоварыКВозврату.ОрдернаяСхемаПриПоступлении КАК ОрдернаяСхемаПриПоступлении,
	|	ВТТоварыКВозврату.Номенклатура КАК Номенклатура,
	|	ВТТоварыКВозврату.Характеристика КАК Характеристика
	|ИЗ
	|	ВТТоварыКВозврату КАК ВТТоварыКВозврату
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозвращаемыеТовары КАК ВТВозвращаемыеТовары
	|		ПО ВТТоварыКВозврату.Заявка = ВТВозвращаемыеТовары.Ссылка
	|			И ВТТоварыКВозврату.Номенклатура = ВТВозвращаемыеТовары.Номенклатура
	|			И ВТТоварыКВозврату.Характеристика = ВТВозвращаемыеТовары.Характеристика
	|ГДЕ
	|	НЕ ВТВозвращаемыеТовары.Номенклатура ЕСТЬ NULL 
	|	И (ВТТоварыКВозврату.Принять <> 0
	|			ИЛИ ВТТоварыКВозврату.Оформить <> 0
	|			ИЛИ ВТТоварыКВозврату.Оформлено <> ВТТоварыКВозврату.Поступило)
	|ИТОГИ
	|	МАКСИМУМ(ОрдернаяСхемаПриПоступлении)
	|ПО
	|	Документ,
	|	Склад
	|;";
	
	Возврат ТекстЗапроса
	
	
КонецФункции

Функция ТекстЗапросаТаблицаВозвращеноТоваров(ИмяТаблицы, СтруктураПараметров)
	
	СтруктураДопЗапросов = СтруктураПараметров.СтруктураДопЗапросов;
	
	Если ЗначениеЗаполнено(СтруктураДопЗапросов)
		И СтруктураДопЗапросов.Свойство("ТекстЗапросаТаблицаВозвращеноТоваров") Тогда
		
		Возврат СтруктураДопЗапросов.ТекстЗапросаТаблицаВозвращеноТоваров;
	КонецЕсли;
	
	ТекстЗапроса =" 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТВозвращаемыеТовары.Ссылка КАК Документ,
	|	ВТВозвращаемыеТовары.Номенклатура КАК Номенклатура,
	|	ВТВозвращаемыеТовары.Характеристика КАК Характеристика,
	|	ВТВозвращаемыеТовары.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВТВозвращаемыеТовары.Количество КАК Количество,
	|	ВТВозвращаемыеТовары.СуммаСНДС КАК Сумма
	|ИЗ
	|	ВТВозвращаемыеТовары КАК ВТВозвращаемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыКВозврату КАК ВТТоварыКВозврату
	|		ПО (ВТТоварыКВозврату.Заявка = ВТВозвращаемыеТовары.Ссылка)
	|			И (ВТТоварыКВозврату.Номенклатура = ВТВозвращаемыеТовары.Номенклатура)
	|			И (ВТТоварыКВозврату.Характеристика = ВТВозвращаемыеТовары.Характеристика)
	|ГДЕ
	|	(ВТТоварыКВозврату.Принять = 0
	|	И ВТТоварыКВозврату.Оформить = 0
	|	И ВТТоварыКВозврату.Оформлено = ВТТоварыКВозврату.Поступило)
	|		ИЛИ ВТТоварыКВозврату.Заявка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Документ;
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции



#КонецОбласти

#Область ВыводДанных

Процедура ВывестиЗаголовокОтчета(ТаблицаОтчета, Макет, Выборка)
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ГрафикИсполненияДоговора") Тогда
		СтруктураПараметров.Вставить("ИмяДокумента", Строка(Выборка.Ссылка));
	Иначе
		СтруктураПараметров.Вставить("ИмяДокумента", ОбщегоНазначенияУТ.ПолучитьПредставлениеДокумента(Выборка.Ссылка, 
		Выборка.НомерДокумента, 
		Выборка.ДатаДокумента));
	КонецЕсли;
	Область.Параметры.Заполнить(СтруктураПараметров);
	Область.Параметры.СтруктураПараметров = Новый Структура("Заказ, Действие", Выборка.Ссылка, "ОткрытьЗначение");
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ОбластьЗаголовок = Область.Области.ОбластьЗаголовок;
		ОбластьЗаголовок.ЦветТекста = ЦветаСтиля.ЦветТекстаЗаголовокОтчетаВТакси;
	КонецЕсли;
	
	ТаблицаОтчета.Вывести(Область);
	
КонецПроцедуры

Функция ВывестиТаблицуРасчетов(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, ИмяТаблицы)
	Перем ТаблицаРасчетов;
	
	Если НЕ ТаблицыРезультатов.Свойство(ИмяТаблицы, ТаблицаРасчетов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗадолженностьПоДокументу = ТаблицаРасчетов.Строки.Найти(Документ, "Документ");
	Если ЗадолженностьПоДокументу = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоОтгрузка = (ИмяТаблицы = "ТаблицаРасчетыСКлиентами");
	
	ТребуетсяГрафик = ЗадолженностьПоДокументу.ТребуетсяГрафик;
	
	ВыводитьОтступ = Ложь;
	Для каждого ЗадолженностьПоОбъектуРасчетов Из ЗадолженностьПоДокументу.Строки Цикл 
		
		Если ТребуетсяГрафик Тогда
			
			Если НЕ ТаблицыРезультатов.Свойство("ТаблицаГрафикиОплаты") Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ГрафикОплаты = ТаблицыРезультатов.ТаблицаГрафикиОплаты.Строки.Найти(ЗадолженностьПоОбъектуРасчетов.ОбъектРасчетов, "Документ");
			Если ГрафикОплаты = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ДатаПредыдущегоЭтапа = Дата(1,1,1);
			ИмяЭтапа = "";
			ПлановыеПлатежиНаДень = 0;
			
			Для Каждого ЭтапГрафикаОплаты Из ГрафикОплаты.Строки Цикл
				
				ДатаПлатежа = НачалоДня(ЭтапГрафикаОплаты.ДатаПлатежа);
				
				Если ДатаПредыдущегоЭтапа = ДатаПлатежа Тогда
					ПлановыеПлатежиНаДень = ПлановыеПлатежиНаДень + ЭтапГрафикаОплаты.СуммаПлатежа;
					Если СтрЧислоВхождений(ИмяЭтапа, ЭтапГрафикаОплаты.ВариантОплаты) = 0 Тогда
						ИмяЭтапа  = ?(ПустаяСтрока(ИмяЭтапа), ЭтапГрафикаОплаты.ВариантОплаты, ИмяЭтапа + Символы.ПС + ЭтапГрафикаОплаты.ВариантОплаты);
					КонецЕсли;
				Иначе
					ПлановыеПлатежиНаДень = ЭтапГрафикаОплаты.СуммаПлатежа;
					ИмяЭтапа = ЭтапГрафикаОплаты.ВариантОплаты;
				КонецЕсли;
				ДатаПредыдущегоЭтапа = ДатаПлатежа;
				
				НайденныеСтрокиРасчетов = ЗадолженностьПоОбъектуРасчетов.Строки.НайтиСтроки(Новый Структура("ДатаПлатежа, ОплатаПлан",
				                                                                            ДатаПлатежа,
				                                                                            ПлановыеПлатежиНаДень));
				
				Если НайденныеСтрокиРасчетов.Количество() > 0 Тогда
					Для Каждого НайденнаяСтрокаРасчетов Из НайденныеСтрокиРасчетов Цикл
						Если СокрЛП(НайденнаяСтрокаРасчетов.ЭтапОплатыОтгрузки) = НСтр("ru='Оплата по графику';uk='Оплата за графіком'") Тогда
							НайденнаяСтрокаРасчетов.ЭтапОплатыОтгрузки = ИмяЭтапа;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			РаспределитьОплатыПоГрафику(ЗадолженностьПоОбъектуРасчетов.Строки, ГрафикОплаты.Строки);
			
		КонецЕсли;
		
		ВывестиТаблицуРасчетовПоОбъектуРасчетов(ТаблицаОтчета, Макет, ЗадолженностьПоОбъектуРасчетов, ВыводитьОтступ, ЭтоОтгрузка);
		ВыводитьОтступ = Истина;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиТаблицуРасчетовПоОбъектуРасчетов(ТаблицаОтчета, Макет, ЗадолженностьПоДокументу, ВыводитьОтступ, ЭтоОтгрузка)
	
	Если ВыводитьОтступ Тогда
		
		ИмяОбласти = "СтрокаТаблицыПоследняя";
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Область.Параметры.Заполнить(ЗадолженностьПоДокументу);
		ТаблицаОтчета.Вывести(Область);
		
	КонецЕсли;
	
	ИмяОбласти = "ПорядокРасчетов";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заполнить(ЗадолженностьПоДокументу);
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "ОбъектРасчетов";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заполнить(ЗадолженностьПоДокументу);
	Область.Параметры.СтруктураПараметров = Новый Структура("Заказ, Действие", ЗадолженностьПоДокументу.ОбъектРасчетов, "ОткрытьЗначение");
	ТаблицаОтчета.Вывести(Область);
	
	Если ЭтоОтгрузка Тогда
		ЗаголовокТаблицы = НСтр("ru='Задолженность клиента';uk='Заборгованість клієнта'");
	Иначе
		ЗаголовокТаблицы = НСтр("ru='Наша задолженность';uk='Наша заборгованість'");
	КонецЕсли; 
	
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = ЗаголовокТаблицы;
	Область.Параметры.Заголовок = Заголовок;
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыЗадолженность";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ЗаголовокОтгрузкаПоступление = ?(ЭтоОтгрузка, НСтр("ru='Отгрузка';uk='Відвантаження'"), НСтр("ru='Поступление';uk='Надходження'"));
	Область.Параметры.ЗаголовокЭтапОплаты = ?(ЭтоОтгрузка, НСтр("ru='Этап оплаты/отгрузки';uk='Етап оплати/відвантаження'"), НСтр("ru='Этап оплаты/поступления';uk='Етап оплати/надходження'"));
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыЗадолженность";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаЗадолженностьСтрока";
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаЗадолженность Из ЗадолженностьПоДокументу.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаЗадолженность);
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла; 
	
	ИмяОбласти = "СтрокаТаблицыЗадолженностьИтого";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Область.Параметры.Заполнить(ЗадолженностьПоДокументу);
	Область.Параметры.ОплатаПланИтого = ЗадолженностьПоДокументу.ОплатаПлан;
	Область.Параметры.ОплатаФактИтого = ЗадолженностьПоДокументу.ОплатаФакт;
	Область.Параметры.ОтгрузкаПланИтого = ЗадолженностьПоДокументу.ОтгрузкаПлан;
	Область.Параметры.ОтгрузкаФактИтого = ЗадолженностьПоДокументу.ОтгрузкаФакт;
	
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Функция ВывестиТаблицуПодчиненныеДокументы(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаПодчиненныеДокументы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодчиненныеДокументы = ТаблицыРезультатов.ТаблицаПодчиненныеДокументы.Строки.Найти(Документ, "Документ");
	Если ПодчиненныеДокументы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбласти = "ПорядокРасчетов";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заполнить(ПодчиненныеДокументы);
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru='Объекты расчетов (%Кол-во%)';uk='Об''єкти розрахунків (%Кол-во%)'");
	Область.Параметры.Заголовок = СтрЗаменить(Заголовок, "%Кол-во%", ПодчиненныеДокументы.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "СтрокаПодчиненныйДокумент";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Для каждого СтрокаДокумент Из ПодчиненныеДокументы.Строки Цикл
		Область.Параметры.ПредставлениеДокумента = Строка(СтрокаДокумент.ПодчиненныйДокумент)
			+ " " + НСтр("ru='на сумму';uk='на суму'") + " " + Формат(СтрокаДокумент.СуммаДокумента,"ЧДЦ=2") + " " 
			+ СтрокаДокумент.Валюта;
		Область.Параметры.СтруктураПараметров = Новый Структура("Заказ, Действие", 
			СтрокаДокумент.ПодчиненныйДокумент,
			"ОткрытьЗначение");
		ТаблицаОтчета.Вывести(Область);
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуНеобеспеченныеТовары(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаНеобеспеченныеТовары") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НеобеспеченныеТовары = ТаблицыРезультатов.ТаблицаНеобеспеченныеТовары.Строки.Найти(Документ, "Документ");
	Если НеобеспеченныеТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СуффиксБезСумм = ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки,"", "БезСумм");
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru='Необеспеченные товары и услуги (%Кол-во%)';uk='Незабезпечені товари і послуги (%Кол-во%)'");
	Область.Параметры.Заголовок = СтрЗаменить(Заголовок, "%Кол-во%", НеобеспеченныеТовары.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыНеОбеспечено" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыНеОбеспечено" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаНеОбеспеченоСтрока" + СуффиксБезСумм;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из НеобеспеченныеТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					,
					,
					);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина
	
КонецФункции

Функция ВывестиТаблицуСостояниеОбеспечения(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаСостояниеОбеспечения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КОбеспечениюТовары = ТаблицыРезультатов.ТаблицаСостояниеОбеспечения.Строки.Найти(Документ, "Документ");
	Если КОбеспечениюТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СуффиксБезСумм = ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки,"", "БезСумм");
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru='Обеспечение (%Кол-во%)';uk='Забезпечення (%Кол-во%)'");
	Область.Параметры.Заголовок = СтрЗаменить(Заголовок, "%Кол-во%", КОбеспечениюТовары.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыОбеспечение" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыОбеспечение" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаОбеспечениеСтрока" + СуффиксБезСумм;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из КОбеспечениюТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					СтрокаТовар.Серия,
					,
					);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	Если ЕстьПравоДоступаКНаборуДанных("ОбеспечениеДополнительно", СтруктураПараметров) Тогда
		ИмяОбласти = "СтрокаТаблицыОбеспечениеДополнительно";
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Область.Параметры.СтруктураПараметров = Новый Структура("Заказ, Действие", Документ.Ссылка, "ОткрытьСостояниеОбеспечения");
		ТаблицаОтчета.Вывести(Область);
	КонецЕсли;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуОтгрузка(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаОтгрузка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтгрузкаТовары = ТаблицыРезультатов.ТаблицаОтгрузка.Строки.Найти(Документ, "Документ");
	Если ОтгрузкаТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ОтгрузкаТоварыПоСкладу Из ОтгрузкаТовары.Строки Цикл
		
		ВывестиТаблицуОтгрузкиПоСкладу(ТаблицаОтчета, Макет, ОтгрузкаТоварыПоСкладу, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуОтгружено(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаОтгружено") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтгруженоТовары = ТаблицыРезультатов.ТаблицаОтгружено.Строки.Найти(Документ, "Документ");
	Если ОтгруженоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СуффиксБезСумм = ?(СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки,"", "БезСумм");
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru='Отгружено (%Кол-во%)';uk='Відвантажено (%Кол-во%)'");
	Область.Параметры.Заголовок = СтрЗаменить(Заголовок, "%Кол-во%", ОтгруженоТовары.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыОтгружено" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыОтгружено" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	ИмяОбластьСтроки = "ТаблицаОтгруженоСтрока" + СуффиксБезСумм;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ОтгруженоТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					СтрокаТовар.Серия,
					,
					);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		Если СтруктураПараметров.ДействиеРасшифровкаКоличествоОтгружено <> Неопределено Тогда
			РасшифровкаКоличество = Новый Структура("Номенклатура,Характеристика,Серия");
			ЗаполнитьЗначенияСвойств(РасшифровкаКоличество, СтрокаТовар);
			РасшифровкаКоличество.Вставить("Документ", Документ);
			РасшифровкаКоличество.Вставить("Действие", СтруктураПараметров.ДействиеРасшифровкаКоличествоОтгружено);
			Область.Параметры.РасшифровкаКоличество = РасшифровкаКоличество;
		КонецЕсли; 
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуПоступление(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаПоступление") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоступлениеТовары = ТаблицыРезультатов.ТаблицаПоступление.Строки.Найти(Документ, "Документ");
	Если ПоступлениеТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ПоступлениеТоварыПоСкладу Из ПоступлениеТовары.Строки Цикл
		
		ВывестиТаблицуПоступленияПоСкладу(ТаблицаОтчета, Макет, ПоступлениеТоварыПоСкладу, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуПоступило(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаПоступило") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоступилоТовары = ТаблицыРезультатов.ТаблицаПоступило.Строки.Найти(Документ, "Документ");
	Если ПоступилоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СуффиксБезСумм = ?(СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления,"", "БезСумм");
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru='Поступило (%Кол-во%)';uk='Надійшло (%Кол-во%)'");
	Область.Параметры.Заголовок = СтрЗаменить(Заголовок, "%Кол-во%", ПоступилоТовары.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыПоступило" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыПоступило" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	ИмяОбластьСтроки = "ТаблицаПоступилоСтрока" + СуффиксБезСумм;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ПоступилоТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		Если СтруктураПараметров.ДействиеРасшифровкаКоличествоПоступило <> Неопределено Тогда
			РасшифровкаКоличество = Новый Структура("Номенклатура,Характеристика,Серия");
			ЗаполнитьЗначенияСвойств(РасшифровкаКоличество, СтрокаТовар);
			РасшифровкаКоличество.Вставить("Документ", Документ);
			РасшифровкаКоличество.Вставить("Действие", СтруктураПараметров.ДействиеРасшифровкаКоличествоПоступило);
			Область.Параметры.РасшифровкаКоличество = РасшифровкаКоличество;
		КонецЕсли; 
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуЗаказано(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаЗаказано") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоступилоТовары = ТаблицыРезультатов.ТаблицаЗаказано.Строки.Найти(Документ, "Документ");
	Если ПоступилоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СуффиксБезСумм = ?(СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления,"", "БезСумм");
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Заголовок = НСтр("ru='Заказано (%Кол-во%)';uk='Замовлено (%Кол-во%)'");
	Область.Параметры.Заголовок = СтрЗаменить(Заголовок, "%Кол-во%", ПоступилоТовары.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыПоступило" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыПоступило" + СуффиксБезСумм;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	ИмяОбластьСтроки = "ТаблицаПоступилоСтрока" + СуффиксБезСумм;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ПоступилоТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиТаблицуОтгрузкиПоСкладу(ТаблицаОтчета, Макет, ТоварыПоСкладу, СтруктураПараметров)
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Если ЗначениеЗаполнено(ТоварыПоСкладу.Склад) Тогда 
		ЗаголовокТаблицы = НСтр("ru='В процессе отгрузки на складе ""%СкладОтгрузки%"" (%Кол-во%)';uk='У процесі відвантаження на складі ""%СкладОтгрузки%"" (%Кол-во%)'");
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%СкладОтгрузки%", ТоварыПоСкладу.Склад);
	Иначе
		ЗаголовокТаблицы = НСтр("ru='Услуги и работы в процессе оформления (%Кол-во%)';uk='Послуги і роботи в процесі оформлення (%Кол-во%)'");
	КонецЕсли;
	Область.Параметры.Заголовок = СтрЗаменить(ЗаголовокТаблицы, "%Кол-во%", ТоварыПоСкладу.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	СуффиксБезОрдера = ?(СтруктураПараметров.ЭтоЗаказ И ТоварыПоСкладу.ОрдернаяСхемаПриОтгрузке, "", "БезОрдера");
	СуффиксБезОрдера = ?(СтруктураПараметров.ЭтоНакладная, "Накладная", СуффиксБезОрдера);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыОтгрузка" + СуффиксБезОрдера;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаОтгрузка;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыОтгрузка" + СуффиксБезОрдера;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаОтгрузкаСтрока" + СуффиксБезОрдера;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ТоварыПоСкладу.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					СтрокаТовар.Серия);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиТаблицуПоступленияПоСкладу(ТаблицаОтчета, Макет, ТоварыПоСкладу, СтруктураПараметров)
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Если ЗначениеЗаполнено(ТоварыПоСкладу.Склад) Тогда 
		ЗаголовокТаблицы = НСтр("ru='В процессе поступления на склад ""%СкладОтгрузки%"" (%Кол-во%)';uk='В процесі надходження на склад ""%СкладОтгрузки%"" (%Кол-во%)'");
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%СкладОтгрузки%", ТоварыПоСкладу.Склад);
	Иначе
		ЗаголовокТаблицы = НСтр("ru='Услуги и работы в процессе оформления (%Кол-во%)';uk='Послуги і роботи в процесі оформлення (%Кол-во%)'");
	КонецЕсли;
	Область.Параметры.Заголовок = СтрЗаменить(ЗаголовокТаблицы, "%Кол-во%", ТоварыПоСкладу.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	СуффиксБезОрдера = ?(СтруктураПараметров.ЭтоЗаказ И ТоварыПоСкладу.ОрдернаяСхемаПриПоступлении, "", "БезОрдера");
	СуффиксБезОрдера = ?(СтруктураПараметров.ЭтоНакладная, "Накладная", СуффиксБезОрдера);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыПоступление" + СуффиксБезОрдера;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыПоступление" + СуффиксБезОрдера;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаПоступлениеСтрока" + СуффиксБезОрдера;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ТоварыПоСкладу.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Функция ВывестиТаблицуОтмененоОтгрузка(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаОтмененоОтгрузка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтмененоТовары = ТаблицыРезультатов.ТаблицаОтмененоОтгрузка.Строки.Найти(Документ, "Документ");
	Если ОтмененоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВывестиТаблицуОтменено(
				ТаблицаОтчета, 
				Макет, 
				ОтмененоТовары, 
				СтруктураПараметров, 
				СтруктураПараметров.ЕстьПричиныОтменыОтгрузки,
				СтруктураПараметров.ТекстОтмененоОтгрузка);
	
КонецФункции

Функция ВывестиТаблицуОтмененоПоступление(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаОтмененоПоступление") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтмененоТовары = ТаблицыРезультатов.ТаблицаОтмененоПоступление.Строки.Найти(Документ, "Документ");
	Если ОтмененоТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВывестиТаблицуОтменено(
				ТаблицаОтчета, 
				Макет, 
				ОтмененоТовары, 
				СтруктураПараметров, 
				СтруктураПараметров.ЕстьПричиныОтменыПоступления,
				СтруктураПараметров.ТекстОтмененоПоступление,
				Ложь);
	
КонецФункции

Функция ВывестиТаблицуОтменено(ТаблицаОтчета, Макет, ОтмененоТовары, СтруктураПараметров, ИспользоватьПричиныОтмены, ЗаголовокТаблицы, Отгрузка = Истина)
	
	ЕстьСуммовыеПоказатели = Отгрузка И СтруктураПараметров.ЕстьСуммовыеПоказателиОтгрузки
	                             Или Не Отгрузка И СтруктураПараметров.ЕстьСуммовыеПоказателиПоступления;

	СуффиксБезПричины = ?(ИспользоватьПричиныОтмены И ЕстьСуммовыеПоказатели, "", "БезПричины");
	СуффиксБезПричины = ?(ЕстьСуммовыеПоказатели, СуффиксБезПричины, СуффиксБезПричины + "БезСумм");
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заголовок = СтрЗаменить(ЗаголовокТаблицы, "%Кол-во%", ОтмененоТовары.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыОтменено" + СуффиксБезПричины;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = ?(Отгрузка, СтруктураПараметров.ТекстТоварУслугаОтгрузка, СтруктураПараметров.ТекстТоварУслугаПоступление);
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыОтменено" + СуффиксБезПричины;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаОтмененоСтрока" + СуффиксБезПричины;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ОтмененоТовары.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					,
					,
					);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Функция ВывестиТаблицуВозвратТоваров(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаВозвратТоваров") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоступлениеТовары = ТаблицыРезультатов.ТаблицаВозвратТоваров.Строки.Найти(Документ, "Документ");
	Если ПоступлениеТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ВозвратТоваровПоСкладу Из ПоступлениеТовары.Строки Цикл
		
		ВывестиТаблицуВозвратТоваровПоСкладу(ТаблицаОтчета, Макет, ВозвратТоваровПоСкладу, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиТаблицуВозвратТоваровПоСкладу(ТаблицаОтчета, Макет, ВозвратТоваровПоСкладу, СтруктураПараметров)
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Если ЗначениеЗаполнено(ВозвратТоваровПоСкладу.Склад) Тогда 
		ЗаголовокТаблицы = НСтр("ru='В процессе возврата на склад ""%СкладОтгрузки%"" (%Кол-во%)';uk='В процесі повернення на склад ""%СкладОтгрузки%"" (%Кол-во%)'");
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%СкладОтгрузки%", ВозвратТоваровПоСкладу.Склад);
	КонецЕсли;
	Область.Параметры.Заголовок = СтрЗаменить(ЗаголовокТаблицы, "%Кол-во%", ВозвратТоваровПоСкладу.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	СуффиксБезОрдера = ?(СтруктураПараметров.ЭтоЗаказ И ВозвратТоваровПоСкладу.ОрдернаяСхемаПриПоступлении, "", "БезОрдера");
	СуффиксБезОрдера = ?(СтруктураПараметров.ЭтоНакладная, "Накладная", СуффиксБезОрдера);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыВозврат" + СуффиксБезОрдера;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыВозврат" + СуффиксБезОрдера;
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаВозвратСтрока" + СуффиксБезОрдера;
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ВозвратТоваровПоСкладу.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Функция ВывестиТаблицуВозвращеноТоваров(ТаблицаОтчета, Макет, Документ, ТаблицыРезультатов, СтруктураПараметров)
	
	Если НЕ ТаблицыРезультатов.Свойство("ТаблицаВозвращеноТоваров") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВозвращеноТоваров = ТаблицыРезультатов.ТаблицаВозвращеноТоваров.Строки.Найти(Документ, "Документ");
	Если ВозвращеноТоваров = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаголовокТаблицы = НСтр("ru='Возвращено товаров клиентом (%Кол-во%)';uk='Повернуто товарів клієнтом (%Кол-во%)'");
	
	ИмяОбласти = "ЗаголовокТаблицы";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заголовок = СтрЗаменить(ЗаголовокТаблицы, "%Кол-во%", ВозвращеноТоваров.Строки.Количество());
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	ИмяОбласти = "ШапкаТаблицыВозвращено";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.ТекстТоварУслуга = СтруктураПараметров.ТекстТоварУслугаПоступление;
	ТаблицаОтчета.Вывести(Область);
	
	ИмяОбласти = "СтрокаТаблицыВозвращено";
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ИмяОбластьСтроки = "ТаблицаВозвращеноСтрока";
	ОбластьСтроки = Область.Области[ИмяОбластьСтроки];
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТовар Из ВозвращеноТоваров.Строки Цикл
		
		Если ЧетнаяСтрока Тогда
			ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаТовар);
		ПредставлениеНоменклатурыДляПечати = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовар.Номенклатура,
					СтрокаТовар.Характеристика,
					,
					,
					,
					);
		Область.Параметры.Товар = ПредставлениеНоменклатурыДляПечати;
		
		ОбластьСтроки.ЦветФона = ЦветФона;
		
		ТаблицаОтчета.Вывести(Область);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиПоследнююСтроку(ТаблицаОтчета, Макет)
	
	Область = Макет.ПолучитьОбласть("СтрокаТаблицыПоследняя");
	ТаблицаОтчета.Вывести(Область);
	
КонецПроцедуры

Процедура ВывестиТаблицуНетДанных(ТаблицаОтчета, Макет, Выборка, ЕстьДанные)
	
	Если ЕстьДанные Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ Выборка.ДокументПроведен Тогда
		ТекстСообщения = НСтр("ru='Документ не проведен. Нет данных для заполнения.';uk='Документ не проведений. Немає даних для заповнення.'");
	Иначе
		ТекстСообщения = НСтр("ru='Нет данных для заполнения.';uk='Немає даних для заповнення.'");
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("СтрокаТаблицыНетДанных");
	Область.Параметры.ТекстСообщения = ТекстСообщения;
	ТаблицаОтчета.Вывести(Область);
	
	ВывестиПоследнююСтроку(ТаблицаОтчета, Макет);
	
КонецПроцедуры



#КонецОбласти

#Область Прочее

Процедура РаспределитьОплатыПоГрафику(Оплаты, ЭтапыГрафика)
	
	КоличествоЭтаповГрафикаОплаты = ЭтапыГрафика.Количество();
	Если КоличествоЭтаповГрафикаОплаты = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокСФактическимиОплатами = Новый Массив;
	ЕстьОплатыНеПоГрафику = Ложь;
	Для Каждого Оплата Из Оплаты Цикл
		Если Оплата.ОплатаФакт <> 0 Тогда
			МассивСтрокСФактическимиОплатами.Добавить(Оплата);
			Если Оплата.ЭтапОплатыОтгрузки = НСтр("ru='Оплата не по графику';uk='Оплата не за графіком'") Тогда
				ЕстьОплатыНеПоГрафику = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОплатыНеПоГрафику Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаГрафикаОплат = 0;
	Для Каждого СтрокаСФактическойОплатой Из МассивСтрокСФактическимиОплатами Цикл
		
		Если ТекущаяСтрокаГрафикаОплат > КоличествоЭтаповГрафикаОплаты - 1 Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаСФактическойОплатой.ОплатаФакт = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа Тогда
			
			Если СокрЛП(СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки) = НСтр("ru='Оплата не по графику';uk='Оплата не за графіком'") Тогда
				СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты;
			КонецЕсли;
			
			ТекущаяСтрокаГрафикаОплат = ТекущаяСтрокаГрафикаОплат + 1;
			
		ИначеЕсли СтрокаСФактическойОплатой.ОплатаФакт < ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа Тогда
			
			Если СокрЛП(СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки) = НСтр("ru='Оплата не по графику';uk='Оплата не за графіком'") Тогда
				СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты;
			КонецЕсли;
			ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа - СтрокаСФактическойОплатой.ОплатаФакт;
			
		Иначе
			
			ОсталосьРаспределить = СтрокаСФактическойОплатой.ОплатаФакт;
			МассивВидовОплатыПоПлатежу = Новый Массив;
			
			Пока ОсталосьРаспределить >= ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа Цикл
				ОсталосьРаспределить = ОсталосьРаспределить - ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа;
				
				ВариантОплатыЭтапа = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты;
				Если МассивВидовОплатыПоПлатежу.Найти(ВариантОплатыЭтапа) = Неопределено Тогда
					МассивВидовОплатыПоПлатежу.Добавить(ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты);
				КонецЕсли;
				 
				ТекущаяСтрокаГрафикаОплат = ТекущаяСтрокаГрафикаОплат + 1;
				Если ТекущаяСтрокаГрафикаОплат > КоличествоЭтаповГрафикаОплаты - 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОсталосьРаспределить > 0 И (НЕ ТекущаяСтрокаГрафикаОплат > КоличествоЭтаповГрафикаОплаты - 1) Тогда
				ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].СуммаПлатежа - ОсталосьРаспределить;
				ВариантОплатыЭтапа = ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты;
				Если МассивВидовОплатыПоПлатежу.Найти(ВариантОплатыЭтапа) = Неопределено Тогда
					МассивВидовОплатыПоПлатежу.Добавить(ЭтапыГрафика[ТекущаяСтрокаГрафикаОплат].ВариантОплаты);
				КонецЕсли;
			КонецЕсли;
			
			Если МассивВидовОплатыПоПлатежу.Количество() = 1
				И СокрЛП(СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки) = НСтр("ru='Оплата не по графику';uk='Оплата не за графіком'") Тогда
				
				СтрокаСФактическойОплатой.ЭтапОплатыОтгрузки = МассивВидовОплатыПоПлатежу[0];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПравоДоступаКНаборуДанных(ИмяНабораДанных, СтруктураПараметров)
	
	ЕстьПравоДоступа = Ложь;
	
	Если ИмяНабораДанных = "РасчетыСКлиентами" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		
	ИначеЕсли ИмяНабораДанных = "ЗаявкиНаВозвратТоваровОтКлиентов" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
		ЕстьПравоДоступа = ЕстьПравоДоступа И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
		
	ИначеЕсли ИмяНабораДанных = "РасчетыСПоставщиками" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		
	ИначеЕсли ИмяНабораДанных = "Отгрузка" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
		СтруктураПараметров.Вставить("ЕстьПравоНаТаблицуОтгрузки", ЕстьПравоДоступа);
		
		Если СтруктураПараметров.ИмяРегистраОтгрузкаУслуг = "ЗаказыКлиентов" Тогда
			
			ЕстьПравоДоступаРегистрОтгрузкаУслуг = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов);
			ЕстьПравоДоступа = ЕстьПравоДоступа Или ЕстьПравоДоступаРегистрОтгрузкаУслуг;
			СтруктураПараметров.Вставить("ЕстьПравоДоступаРегистрОтгрузкаУслуг", ЕстьПравоДоступаРегистрОтгрузкаУслуг);
			
		КонецЕсли;
		
	ИначеЕсли ИмяНабораДанных = "Поступление" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
		СтруктураПараметров.Вставить("ЕстьПравоНаТаблицуПоступления", ЕстьПравоДоступа);
		
		Если СтруктураПараметров.ИмяРегистраПоступлениеУслуг = "ЗаказыПоставщикам" Тогда
			
			ЕстьПравоДоступаРегистрПоступлениеУслуг = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
			ЕстьПравоДоступа = ЕстьПравоДоступа Или ЕстьПравоДоступаРегистрПоступлениеУслуг;
			СтруктураПараметров.Вставить("ЕстьПравоДоступаРегистрПоступлениеУслуг", ЕстьПравоДоступаРегистрПоступлениеУслуг);
			
		КонецЕсли;
		
	ИначеЕсли ИмяНабораДанных = "ОбеспечениеДополнительно" Тогда
		
		ЕстьПравоДоступа = ПравоДоступа("Использование", Метаданные.Обработки.СостояниеОбеспечения);
		
	КонецЕсли;
	
	Возврат ЕстьПравоДоступа;
	
КонецФункции

Функция ПолучитьМассивСтатусовБезОтгрузки(ИмяТаблицы)
	
	МассивСтатусов = Новый Массив();
	
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована);
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату);
	МассивСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена);
	МассивСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	Возврат МассивСтатусов
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
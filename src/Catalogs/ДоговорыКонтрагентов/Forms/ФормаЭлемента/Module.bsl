
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ЗаполнитьСписокВыбораПорядкаОплаты();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ФиксированнаяСуммаДоговора И Объект.Сумма = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Не заполнена сумма договора.';uk='Не заповнена сума договору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"Объект.Сумма",
			,
			Отказ);
	КонецЕсли;
	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ОбновитьЗаголовокФормы();
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОбновитьОграничениеЗадолженности();
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ГрафикИсполненияДоговора" Тогда
		Если Объект.Ссылка = Параметр.Договор Тогда
			
			Объект.ГрафикИсполненияДоговора = Источник;
			Объект.Сумма = Параметр.СуммаДоговора;
			
			Модифицированность = Истина;
			ИзменениеГрафикаИсполненияНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка)
		Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ИзмененаОплатаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПроизведенаЗапись = Истина;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПередЗакрытиемНаСервере(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере(Отказ)
	
	Если Не ПроизведенаЗапись
		И ЗначениеЗаполнено(Объект.ГрафикИсполненияДоговора)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ЗаданГрафикИсполнения") Тогда
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Объект.ГрафикИсполненияДоговора);
			Объект.ГрафикИсполненияДоговора.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Объект.ГрафикИсполненияДоговора = Неопределено;
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,,,Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Закрыт") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПриИзменении(Элемент)
	
	ТипДоговораПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ПартнерПриИзмененииСервер(Объект.Партнер, 
								Объект.Контрагент, 
								Объект.ПорядокОплаты, 
								Объект.БанковскийСчетКонтрагента, 
								Объект.КонтактноеЛицо, 
								КонтрагентЮрФизЛицо);
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КонтактноеЛицоПриИзмененииСервер(Объект.Партнер, 
										Объект.Контрагент, 
										Объект.ПорядокОплаты, 
										Объект.БанковскийСчетКонтрагента, 
										Объект.КонтактноеЛицо, 
										КонтрагентЮрФизЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо") <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		Объект.ПорядокОплаты 		= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах;
	Иначе	
		Объект.ПорядокОплаты 		= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		Если Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Объект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;	
	
	КонтрагентПриИзмененииСервер(Объект.Контрагент, Объект.ПорядокОплаты, Объект.БанковскийСчетКонтрагента, КонтрагентЮрФизЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ПорядокОплаты, Объект.БанковскийСчет);
	
	ЗаполнитьНастройкиУчетаНДСПоОрганизации();
	УправлениеЭлементамиНастройкиУчетаНДС();
	ЗаполнитьСписокВыбораПорядкаОплаты();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОплатыПриИзменении(Элемент)
	
	ПорядокОплатыПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ВалютаВзаиморасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Элементы.НаименованиеДляПечати.СписокВыбора.Очистить();
	Элементы.НаименованиеДляПечати.СписокВыбора.Добавить(Объект.Наименование);
КонецПроцедуры


&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	ПорядокРасчетовПриИзмененииСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура ФиксированнаяСуммаДоговораПриИзменении(Элемент)
	
	Если Не ФиксированнаяСуммаДоговора Тогда
		ГрафикИсполненияВДоговоре = 0;
		Объект.ЗаданГрафикИсполнения = Ложь;
		Объект.Сумма = 0;
	КонецЕсли;
	
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикИсполненияВДоговореПриИзменении(Элемент)
	
	Объект.ЗаданГрафикИсполнения = (ГрафикИсполненияВДоговоре = 1);
	
	УправлениеЭлементамиГрафикИсполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьГрафикИсполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Договор еще не записан. Переход к редактированию графика возможен только после записи договора и установки статуса ""Действует"".';uk='Договір ще не записаний. Перехід до редагування графіка можливий тільки після запису договору і встановлення статусу ""Діє"".'"));
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Договор", Объект.Ссылка);
	
	СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
	СтруктураПараметры.Вставить("Сумма", Объект.Сумма);
	СтруктураПараметры.Вставить("Ключ", Объект.ГрафикИсполненияДоговора);
	
	ОткрытьФорму("Документ.ГрафикИсполненияДоговора.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Объект.ГрафикИсполненияДоговора.Пустая() Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Объект.ГрафикИсполненияДоговора);
		
		ОткрытьФорму(
			"Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета",
			Новый Структура("ВходящиеДокументы", СписокДокументов),
			ЭтаФорма,
			Истина
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("СуммаВзаиморасчетов", Объект.Сумма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Ссылка));
	ПараметрыФормы.Вставить("Договор",                     Объект.Ссылка);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Ссылка);
	
КонецПроцедуры


&НаКлиенте
Процедура МоментОпределенияБазыНДСПриИзменении(Элемент)
	УправлениеЭлементамиНастройкиУчетаНДС();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачалаДействия", "ДатаОкончанияДействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ТипДоговораПриИзмененииСервер()
	
	Объект.ХозяйственнаяОперация = Справочники.ДоговорыКонтрагентов.ХозяйственнаяОперация(Объект.ТипДоговора);
	
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Партнер, "Клиент, Поставщик");
	Если ЗначениеЗаполнено(Объект.Партнер)
		И (НЕ РеквизитыПартнера.Клиент
			И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию))
		И (НЕ РеквизитыПартнера.Поставщик
			И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию)) Тогда
		
		Объект.Партнер    = Справочники.Партнеры.ПустаяСсылка();
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		Объект.ОграничиватьСуммуЗадолженности = Ложь;
	КонецЕсли;
	
	Если Объект.ТипДоговора <> Перечисления.ТипыДоговоров.СПокупателем Тогда
		Объект.ЗапрещаетсяПросроченнаяЗадолженность = Ложь;
	КонецЕсли;
	
	
	
	ЗаполнитьПараметрыВыбораПартнера();
	НастроитьСписокВыбораПорядкаРасчетов();
	НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств();
	ОбновитьЗаголовокФормы();
	УправлениеЭлементамиГрафикИсполнения();
	УстановитьВидимостьНаправленияДеятельности();
	УправлениеЭлементамиНастройкиУчетаНДС();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораПартнера()
	
	МассивПараметровВыбораПартнера = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		МассивПараметровВыбораПартнера.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		
		МассивПараметровВыбораПартнера.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораПартнера);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент, ПорядокОплаты, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо)
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ПорядокОплаты, БанковскийСчетКонтрагента);
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ПорядокОплатыПриИзмененииСервер()
	
	Если Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах Тогда	
		Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	ИначеЕсли Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Объект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыВыбораБанковскихСчетов = ПараметрыВыбораБанковскихСчетов(Объект.ПорядокОплаты);
	Элементы.БанковскийСчет.ПараметрыВыбора            = ПараметрыВыбораБанковскихСчетов;
	Элементы.БанковскийСчетКонтрагента.ПараметрыВыбора = ПараметрыВыбораБанковскихСчетов;
	
	Если НЕ БанковскийСчетСоответствуетПорядкуОплаты(Объект.БанковскийСчет, Объект.ПорядокОплаты) Тогда
		Объект.БанковскийСчет = Неопределено;
	КонецЕсли;
	ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ПорядокОплаты, Объект.БанковскийСчет);
	
	Если НЕ БанковскийСчетСоответствуетПорядкуОплаты(Объект.БанковскийСчетКонтрагента, Объект.ПорядокОплаты) Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, Объект.ПорядокОплаты, Объект.БанковскийСчетКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Объект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах;
	ИначеЕсли Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах Тогда	
		Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	КонецЕсли;
	
	ПорядокОплатыПриИзмененииСервер();
	
	ЗаполнитьМоментОпределенияБазыНДСПоОрганизации();
	УправлениеЭлементамиНастройкиУчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьСуммуЗадолженностиПриИзменении(Элемент)
	
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтактноеЛицоПриИзмененииСервер(Партнер, Контрагент, ПорядокОплаты, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Партнер Тогда
		Партнер = ВладелецКонтактногоЛица;
		ПартнерПриИзмененииСервер(Партнер, Контрагент, ПорядокОплаты, БанковскийСчетКонтрагента, КонтактноеЛицо, КонтрагентЮрФизЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииСервер(Контрагент, ПорядокОплаты, БанковскийСчетКонтрагента, КонтрагентЮрФизЛицо)
	
	ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ПорядокОплаты, БанковскийСчетКонтрагента);
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ПорядокРасчетовПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Объект.ЗаданГрафикИсполнения = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиГрафикИсполнения();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изменить", "Доступность", Ложь);
	
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо");
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	ФиксированнаяСуммаДоговора = (Объект.Сумма <> 0);
	Если Объект.ЗаданГрафикИсполнения Тогда
		ГрафикИсполненияВДоговоре = 1;
	Иначе
		ГрафикИсполненияВДоговоре = 0;
	КонецЕсли;
	
	
	ОбновитьСостояниеСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	ПараметрыВыбораБанковскогоСчета = ПараметрыВыбораБанковскихСчетов(Объект.ПорядокОплаты);
	Элементы.БанковскийСчет.ПараметрыВыбора            = ПараметрыВыбораБанковскогоСчета;
	Элементы.БанковскийСчетКонтрагента.ПараметрыВыбора = ПараметрыВыбораБанковскогоСчета;
	ЗаполнитьПараметрыВыбораПартнера();
	НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	НастроитьСписокВыбораПорядкаРасчетов();
	УстановитьВидимостьКонтроляЗадолженности(ЭтаФорма);
	УправлениеЭлементамиГрафикИсполнения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьНастройкиУчетаНДСПоОрганизации();
	КонецЕсли; 
	УправлениеЭлементамиНастройкиУчетаНДС();
	
	
	
	УстановитьВидимостьНаправленияДеятельности();
	
	ОбновитьЗаголовокФормы();
	
	Элементы.НаименованиеДляПечати.СписокВыбора.Очистить();
	Элементы.НаименованиеДляПечати.СписокВыбора.Добавить(Объект.Наименование);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Или
		Объект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("ДатаНачалаДействия");
	МассивЭлементов.Добавить("ДатаОкончанияДействия");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	МассивЭлементов.Добавить("ПорядокОплаты");
	МассивЭлементов.Добавить("ТипДоговора");
	МассивЭлементов.Добавить("ПорядокРасчетов");
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивЭлементов.Добавить("ОбособленноеПодразделениеПоУмолчанию");
	МассивЭлементов.Добавить("ОтветственныйЗаВыпискуНалоговыхДокументов");
	МассивЭлементов.Добавить("НоменклатураЗаполненияНалоговыхНаАванс");
	МассивЭлементов.Добавить("МоментОпределенияБазыНДС");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивЭлементов.Добавить("ЗапрещаетсяПросроченнаяЗадолженность");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"ТолькоПросмотр", НЕ ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораБанковскихСчетов(ПорядокОплаты)

	МассивПараметров = Новый Массив;
	
	Если ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах
	 ИЛИ ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Константы.ВалютаРегламентированногоУчета.Получить()));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Новый ФиксированныйМассив(ИностранныеВалюты())));
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВыборСчетовГоловнойОрганизации", Неопределено));
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИностранныеВалюты()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Ссылка <> &ВалютаРегламентированногоУчета
	|");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетСоответствуетПорядкуОплаты(БанковскийСчет, ПорядокОплаты)

	Соответствует = Истина;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Если ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте Тогда
			Соответствует = ВалютаСчета <> ВалютаРегламентированногоУчета;
		Иначе
			Соответствует = ВалютаСчета = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскийСчетОрганизацииПоУмолчанию(Организация, ПорядокОплаты, БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет)
	 ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОплатаВВалюте = ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Организация
	|	И ((БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И Не БанковскиеСчетаОрганизаций.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.БанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, ПорядокОплаты, БанковскийСчетКонтрагента)
	
	Если (ЗначениеЗаполнено(БанковскийСчетКонтрагента)
		И Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента,"Владелец"))
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОплатаВВалюте = ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	БанковскиеСчетаКонтрагентов.Владелец = &Контрагент
	|	И ((БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаРегл И НЕ &ОплатаВВалюте)
	|	ИЛИ (БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> &ВалютаРегл И &ОплатаВВалюте))
	|	И Не БанковскиеСчетаКонтрагентов.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ОплатаВВалюте", ОплатаВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		БанковскийСчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
	Иначе
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		ПредставлениеТипа = НСтр("ru='Договор с покупателем / заказчиком';uk='Договір з покупцем / замовником'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		ПредставлениеТипа = НСтр("ru='Договор с комиссионером';uk='Договір з комісіонером'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
		ПредставлениеТипа = НСтр("ru='Договор с поставщиком / исполнителем';uk='Договір з постачальником / виконавцем'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда	
		ПредставлениеТипа = НСтр("ru='Договор с поставщиком';uk='Договір з постачальником'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
		ПредставлениеТипа = НСтр("ru='Договор с комитентом';uk='Договір з комітентом'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика Тогда
		ПредставлениеТипа = НСтр("ru='Договор с переработчиком';uk='Договір з переробником'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
		ПредставлениеТипа = НСтр("ru='Договор с давальцем';uk='Договір з давальцем'");
	Иначе
		ПредставлениеТипа = НСтр("ru='Договор с контрагентом';uk='Договір з контрагентом'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ПредставлениеТипа + НСтр("ru=' (создание)';uk=' (створення)'"); ;
	Иначе
		ЭтаФорма.Заголовок = Объект.Наименование + " (" + ПредставлениеТипа + ")";
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "Партнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаСчетКонтрагентаВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "БанковскийСчетКонтрагента", Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКонтроляЗадолженности(Форма)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ОграничиватьСуммуЗадолженности");
	МассивИменЭлементов.Добавить("ДопустимаяСуммаЗадолженности");
	МассивИменЭлементов.Добавить("НадписьВалютаВзаиморасчетов");
	МассивИменЭлементов.Добавить("ЗапрещаетсяПросроченнаяЗадолженность");
	МассивИменЭлементов.Добавить("ГруппаКонтрольЗадолженности");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивИменЭлементов,
		"Видимость",
		Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДопустимаяСуммаЗадолженности",
		"Доступность",
		Форма.Объект.ОграничиватьСуммуЗадолженности);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораПорядкаРасчетов()
	
	СписокВыбора = Элементы.ПорядокРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным, НСтр("ru='По отчетам по комиссии';uk='За звітами по комісії'"));
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	ИначеЕсли (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
		)
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	Иначе
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораСтатьиДвиженияДенежныхСредств()
	
	ТипыДоговоровПокупатель = Новый Массив;
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СПокупателем);
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СКомиссионером);
	ТипыДоговоровПокупатель.Добавить(Перечисления.ТипыДоговоров.СДавальцем);
	
	ТипыДоговоровПоставщик = Новый Массив;
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПоставщиком);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СКомитентом);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.СПереработчиком);
	ТипыДоговоровПоставщик.Добавить(Перечисления.ТипыДоговоров.Импорт);

	МассивПараметровВыбора = Новый Массив;
	
	Если ТипыДоговоровПокупатель.Найти(Объект.ТипДоговора) <> Неопределено Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	ИначеЕсли ТипыДоговоровПоставщик.Найти(Объект.ТипДоговора) <> Неопределено Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элементы.СтатьяДвиженияДенежныхСредств.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьНаправленияДеятельности()
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	Видимость = Ложь;
	ОтметкаНезаполненного = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ТипДоговора) тогда
		
		Если НаправленияДеятельностиСервер.ХозяйственнаяОперацияОбразуетДоход(Объект.ХозяйственнаяОперация) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			
			Видимость = Истина;
			
			
		ИначеЕсли НаправленияДеятельностиСервер.ХозяйственнаяОперацияОбразуетАктив(Объект.ХозяйственнаяОперация)
			 И ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			 
			Видимость = Истина;
			
		КонецЕсли;
		
		ОтметкаНезаполненного = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
		
	КонецЕсли;
	
	Элементы.НаправлениеДеятельности.Видимость = Видимость;
	Элементы.НаправлениеДеятельности.ОтметкаНезаполненного = ОтметкаНезаполненного;
																	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиГрафикИсполнения()
	
	ТипыДоговоров = Новый Массив;
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПокупателем);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СДавальцем);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПоставщиком);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПереработчиком);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.Импорт);
	
	ВидимостьГрафика = (ТипыДоговоров.Найти(Объект.ТипДоговора) <> Неопределено)
		И (Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	ЗависимыеЭлементы = Новый Массив;
	ЗависимыеЭлементы.Добавить(Элементы.Отступ2);
	ЗависимыеЭлементы.Добавить(Элементы.ЗаголовокГрафикИсполненияВДоговоре);
	ЗависимыеЭлементы.Добавить(Элементы.ГрафикИсполненияВДоговоре);
	ЗависимыеЭлементы.Добавить(Элементы.НадписьГрафикИсполнения);
	
	Для каждого ЗависимыйЭлемент из ЗависимыеЭлементы Цикл
		ЗависимыйЭлемент.Видимость = ВидимостьГрафика;
	КонецЦикла;
	
	Элементы.Сумма.Доступность = ФиксированнаяСуммаДоговора;
	Элементы.Сумма.АвтоОтметкаНезаполненного = ФиксированнаяСуммаДоговора;
	
	Элементы.ГрафикИсполненияВДоговоре.Доступность = ФиксированнаяСуммаДоговора;
	Элементы.НадписьГрафикИсполнения.Видимость = Элементы.НадписьГрафикИсполнения.Видимость И Объект.ЗаданГрафикИсполнения;
	
	НадписьГрафикИсполнения = Документы.ГрафикИсполненияДоговора.ПредставлениеГрафика(Объект.ГрафикИсполненияДоговора);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Справочники.ДоговорыКонтрагентов.РассчитатьСостояние(
		Объект.Ссылка,
		ЭтаФорма);
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер()
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеГрафикаИсполненияНаСервере()
	
	УправлениеЭлементамиГрафикИсполнения();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	СтрокаОтгружено = "";
	Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
		СтрокаОтгружено = НСтр("ru='Отгружено';uk='Відвантажено'");
	ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
		СтрокаОтгружено = НСтр("ru='Поступило';uk='Надійшло'");
	КонецЕсли;
	
	Расчеты = НСтр("ru='Оплачено';uk='Оплачено'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") 
				+ " " + Объект.ВалютаВзаиморасчетов + "  " + ПроцентОплаты + "%";
	Расчеты = Расчеты + ", " + СтрокаОтгружено + ": " + Формат(СуммаОтгрузки, "ЧЦ=15; ЧДЦ=2; ЧН=") 
				+ " " + Объект.ВалютаВзаиморасчетов + "  " + ПроцентОтгрузки + "%";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов()
	
	Элементы.Расчеты.Видимость =
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ГрафикИсполненияВДоговоре
		И Не Объект.ГрафикИсполненияДоговора.Пустая();
	ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма,,, Истина);
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Ссылка,
		ТекущаяДатаСеанса(),
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиНастройкиУчетаНДС()
	
	// Отображаем настройки учета НДС независимо от статуса плательщик/неплательщик НДС. Статус может смениться в периоде действия договора
	
	// Отображаем признак "Внешнеэкономический"
	Внешнеэкономический = Справочники.ДоговорыКонтрагентов.ЭтоВнешнеэкономическийДоговор(Объект);
	ЗаголовокГруппы = НСтр("ru='Моменты определения базы НДС';uk='Моменти визначення бази ПДВ'") + ?(Внешнеэкономический, НСтр("ru=' (внешнеэкономический договор)';uk=' (зовнішньоекономічний договір)'"), "");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМоментыОпределенияБазыНДС", "Заголовок", ЗаголовокГруппы);
	
	// Отображаем номенклатуру
	ВидимостьНоменклатуры = Справочники.ДоговорыКонтрагентов.ИспользоватьНоменклатуруЗаполненияНалоговыхНаАванс(Объект);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураЗаполненияНалоговыхНаАванс", "Видимость", ВидимостьНоменклатуры);
	
	
	// Отображаем моменты определения базы НДС
	ОсновнойЭлементФормы = Неопределено;
	ОсновнойЗаголовок    = Неопределено;
	ВспомогательныйОсновнойЭлементФормы = Неопределено;
	ВспомогательныйОсновнойЗаголовок    = Неопределено;
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		
		Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			Если Не Внешнеэкономический Тогда
				ОсновнойЗаголовок = НСтр("ru='По продаже';uk='По продажу'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
			Иначе
				ОсновнойЗаголовок = НСтр("ru='По экспорту';uk='По експорту'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоЭкспорту;
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
			Если Не Внешнеэкономический Тогда
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='По закупке';uk='По купівлі'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоЗакупкам;
			Иначе
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ОсновнойЗаголовок = НСтр("ru='По импорту
                                       |(без таможенной декларации)'
                                       |;uk='По імпорту
                                       |(без митної декларації)'");
				МоментОпределенияБазыНДССтрокой = НСтр("ru='Не определяется';uk='Не визначається'");
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
			Если Не Внешнеэкономический Тогда
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоЗакупкам;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию
                                                      |(авансовые платежи не поддерживаются)'
                                                      |;uk='За постачанням товарів на комісію
                                                      |(авансові платежі не підтримуються)'");
				МоментОпределенияБазыНДССтрокой = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);
			Иначе
				
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
				МоментОпределенияБазыНДССтрокой = НСтр("ru='Не определяется';uk='Не визначається'");;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокойДополнительно";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию';uk='За постачанням товарів на комісію'");
				МоментОпределенияБазыНДССтрокойДополнительно = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке); // ПоЭкспорту 
				
				
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом Тогда
			Если Не Внешнеэкономический Тогда
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию
                                                      |(авансовые платежи не поддерживаются)'
                                                      |;uk='За постачанням товарів на комісію
                                                      |(авансові платежі не підтримуються)'");
				МоментОпределенияБазыНДССтрокой = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);
			Иначе
				ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
				ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
				//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
				
				ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
				ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию
                                                      |(без таможенной декларации)'
                                                      |;uk='За постачанням товарів на комісію
                                                      |(без митної декларації)'");
				МоментОпределенияБазыНДССтрокой = НСтр("ru='Не определяется';uk='Не визначається'");
				
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
			ОсновнойЗаголовок = НСтр("ru='По импорту
                                   |(с таможенной декларацией)'
                                   |;uk='По імпорту
                                   |(з митною декларацією)'");
			МоментОпределенияБазыНДССтрокой = НСтр("ru='По таможенной декларации';uk='За митною декларацією'");			
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.ИмпортКомиссия Тогда
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			ОсновнойЗаголовок = НСтр("ru='По услугам комиссии';uk='По послугах комісії'");
			//Объект.МоментОпределенияБазыНДС = Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
			
			ВспомогательныйОсновнойЭлементФормы = "МоментОпределенияБазыНДССтрокой";
			ВспомогательныйОсновнойЗаголовок = НСтр("ru='По поставке товаров на комиссию
                                                  |(с таможенной декларацией)'
                                                  |;uk='За постачанням товарів на комісію
                                                  |(з митною декларацією)'");
			МоментОпределенияБазыНДССтрокой = НСтр("ru='По таможенной декларации';uk='За митною декларацією'");			
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
			ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
			ОсновнойЗаголовок = НСтр("ru='По продаже';uk='По продажу'");
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
            ОсновнойЭлементФормы = "МоментОпределенияБазыНДС";
            ОсновнойЗаголовок = НСтр("ru='По закупке';uk='По купівлі'");
		КонецЕсли;
		
	Иначе
		ОсновнойЭлементФормы = "ДекорацияНеУказанТипДоговора";
		ОсновнойЗаголовок = НСтр("ru='Не указан тип договора';uk='Не зазначений тип договору'");
		
	КонецЕсли;
	
	МассивМоментовОпределенияБазыНДС = Новый Массив;
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДС"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДССтрокой"); 
	МассивМоментовОпределенияБазыНДС.Добавить("МоментОпределенияБазыНДССтрокойДополнительно"); 
	МассивМоментовОпределенияБазыНДС.Добавить("ДекорацияНеУказанТипДоговора"); 
	
	// Основной элемент делаем видимым
	МассивМоментовОпределенияБазыНДС.Удалить(МассивМоментовОпределенияБазыНДС.Найти(ОсновнойЭлементФормы));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОсновнойЭлементФормы, "Видимость", Истина);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОсновнойЭлементФормы, "Заголовок", ОсновнойЗаголовок);
	
	// Вспомогательный элемент делаем видимым
	Если ЗначениеЗаполнено(ВспомогательныйОсновнойЭлементФормы) Тогда
		МассивМоментовОпределенияБазыНДС.Удалить(МассивМоментовОпределенияБазыНДС.Найти(ВспомогательныйОсновнойЭлементФормы));
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВспомогательныйОсновнойЭлементФормы, "Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ВспомогательныйОсновнойЭлементФормы, "Заголовок", ВспомогательныйОсновнойЗаголовок);
	КонецЕсли;
	
	// Остальное скрываем
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивМоментовОпределенияБазыНДС, "Видимость", Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиУчетаНДСПоОрганизации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.ОбособленноеПодразделениеПоУмолчанию      = Объект.Организация.ОбособленноеПодразделениеПоУмолчанию;
	Объект.ОтветственныйЗаВыпискуНалоговыхДокументов = Объект.Организация.ОтветственныйЗаВыпискуНалоговыхДокументов;
	Объект.НоменклатураЗаполненияНалоговыхНаАванс    = Объект.Организация.НоменклатураЗаполненияНалоговыхНаАванс;
	
	ЗаполнитьМоментОпределенияБазыНДСПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМоментОпределенияБазыНДСПоОрганизации()
	
	Объект.МоментОпределенияБазыНДС = Справочники.ДоговорыКонтрагентов.ПолучитьМоментОпределенияБазыНДСПоУмолчанию(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПорядкаОплаты()
	
	Если Объект.Организация = Справочники.Организации.УправленческаяОрганизация Тогда

		Если Элементы.ПорядокОплаты.СписокВыбора.НайтиПоЗначению(Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах) = Неопределено Тогда
			Элементы.ПорядокОплаты.СписокВыбора.Добавить(Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах);
		КонецЕсли;
		
	Иначе
		
		Если Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах Тогда
			Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		КонецЕсли;
		
		ЭлементСписка = Элементы.ПорядокОплаты.СписокВыбора.НайтиПоЗначению(Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах);
		
		Если НЕ (ЭлементСписка = Неопределено) Тогда
			Элементы.ПорядокОплаты.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВалютаВзаиморасчетов" Тогда
		ВалютаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПорядокОплаты" Тогда
		ПорядокОплатыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТипДоговора" Тогда
		ТипДоговораПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПорядокРасчетов" Тогда
		ПорядокРасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ОграничиватьСуммуЗадолженности" Тогда
		ОграничиватьСуммуЗадолженностиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МоментОпределенияБазыНДС" Тогда
		МоментОпределенияБазыНДСПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "УстановитьИнтервал" Тогда
		УстановитьИнтервал(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
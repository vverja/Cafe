
#Область ПрограммныйИнтерфейс

// Процедура вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДата();
		УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
		УзелОбъект.Записать();
	КонецЦикла;
	
	ЗарегистрироватьИзменения(Устройство);
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы                             КАК УзелИнформационнойБазы,
	|	ПодключаемоеОборудование.ПравилоОбмена                                      КАК ПравилоОбмена,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВыполненоУспешно И СтруктураДанные <> Неопределено Тогда
			
			Если Выборка.ВыгружатьИзменения Тогда
				
				Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
				Для Каждого СтрокаТЧ Из СтруктураДанные.Данные Цикл
					
					Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
					Набор.Отбор.ПравилоОбмена.Использование = Истина;
					
					Набор.Отбор.Код.Значение = СтрокаТЧ.КодВРегистре;
					Набор.Отбор.Код.Использование = Истина;
					
					ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы, Набор);
					
				КонецЦикла;
				
			Иначе
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаВыгрузки      = ТекущаяДата();
		УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
		УзелОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при загрузке отчета о розничных продажах с устройства.
// Выполняет запись информации в узел плана обмена. Создает отчет о розничных продажах.
//
// Параметры:
//  Устройство       - <СправочникСсылка.ПодключаемоеОборудование>
//  ВыполненоУспешно - <Булево> Признак успешного выполнения операции
//
// Возвращаемое значение:
//  Нет
//
Функция ПриЗагрузкеОтчетаОРозничныхПродажах(Устройство, МассивДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КассыККМ.КассаККМ КАК КассаККМ,
	|	КассыККМ.КассаККМ.ВалютаДенежныхСредств КАК Валюта,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад КАК Склад,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены КАК ВидЦены,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КассыККМ.КассаККМ.Владелец КАК Организация
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|		ПО КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка
	|		 И КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
	|ГДЕ
	|	СправочникПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код",        Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Цена",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Скидка",     Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",    Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",   Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаТЧ Из МассивДанных Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		// Преобразование кода
		НоваяСтрока.Код = СтрокаТЧ.Код;
		Если СтрокаТЧ.Код <= МаксимальныйКодВесовогоТовара() Тогда
			НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(СтрокаТЧ.Код,,Истина);
			НоваяСтрока.Весовой = Истина;
		КонецЕсли;
		
		НоваяСтрока.Цена       = СтрокаТЧ.Цена;
		НоваяСтрока.Количество = СтрокаТЧ.Количество;
		НоваяСтрока.Скидка     = СтрокаТЧ.Скидка;
		НоваяСтрока.Сумма      = СтрокаТЧ.Сумма;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Код        КАК Код,
	|	Товары.Цена       КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка     КАК Скидка,
	|	Товары.Сумма      КАК Сумма,
	|	Товары.Весовой                            КАК Весовой,
	|	ВЫРАЗИТЬ(Товары.Штрихкод КАК Строка(200)) КАК Штрихкод
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаЗначений КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))             КАК Упаковка,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар, ЛОЖЬ) КАК ПодакцизныйТовар
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО Товары.Код = КодыТоваровПодключаемогоОборудованияOffline.Код 
	|		 И КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|		 И НЕ Товары.Весовой
	|ГДЕ
	|	Не Товары.Весовой
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))             КАК Упаковка,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар, ЛОЖЬ) КАК ПодакцизныйТовар
	|ИЗ
	|	Товары КАК Товары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ПОДСТРОКА(Товары.Штрихкод, 3, 5) = ПОДСТРОКА(Штрихкоды.Штрихкод, 3, 5)
	|		 И Штрихкоды.Штрихкод ПОДОБНО &ФорматШтрихкода
	|		 И Товары.Весовой
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|		 И Штрихкоды.Номенклатура   = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
	|		 И Штрихкоды.Характеристика = КодыТоваровПодключаемогоОборудованияOffline.Характеристика
	|		 И Штрихкоды.Упаковка       = КодыТоваровПодключаемогоОборудованияOffline.Упаковка
	|		 И Товары.Весовой
	|
	|ГДЕ
	|	Товары.Весовой
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
		"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
		
	Запрос.УстановитьПараметр("ПравилоОбмена",   Выборка.ПравилоОбмена);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода("_", Истина));
	
	ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	ОтчетОРозничныхПродажахОбъект.Дата               = ТекущаяДата();
	ОтчетОРозничныхПродажахОбъект.Валюта             = Выборка.Валюта;
	ОтчетОРозничныхПродажахОбъект.ВидЦены            = Выборка.ВидЦены;
	ОтчетОРозничныхПродажахОбъект.КассаККМ           = Выборка.КассаККМ;
	ОтчетОРозничныхПродажахОбъект.Комментарий        = НСтр("ru='Загружено из ККМ Offline:';uk='Завантажено з ККМ Offline:'") + " " + Устройство;
	ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДС(Выборка.Организация, Неопределено, ТекущаяДата(), Истина);
	ОтчетОРозничныхПродажахОбъект.Организация        = Выборка.Организация;
	ОтчетОРозничныхПродажахОбъект.Ответственный      = Пользователи.ТекущийПользователь();
	ОтчетОРозничныхПродажахОбъект.Подразделение      = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	ОтчетОРозничныхПродажахОбъект.Склад              = Выборка.Склад;
	ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС    = Выборка.ЦенаВключаетНДС;
	
	ТаблицаНаборов = Новый ТаблицаЗначений;
	ТаблицаНаборов.Колонки.Добавить("Номенклатура");
	ТаблицаНаборов.Колонки.Добавить("Характеристика");
	ТаблицаНаборов.Колонки.Добавить("Количество");
	ТаблицаНаборов.Колонки.Добавить("Цена");
	ТаблицаНаборов.Колонки.Добавить("ПроцентРучнойСкидки");
	ТаблицаНаборов.Колонки.Добавить("ПодакцизныйТовар");
	ТаблицаНаборов.Колонки.Добавить("СтавкаНДС");
	
	ВыборкаПоТоварам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		Если ВыборкаПоТоварам.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
		
			НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура        = ВыборкаПоТоварам.Номенклатура;
			НоваяСтрока.Характеристика      = ВыборкаПоТоварам.Характеристика;
			НоваяСтрока.Упаковка            = ВыборкаПоТоварам.Упаковка;
			НоваяСтрока.Количество          = ВыборкаПоТоварам.Количество;
			НоваяСтрока.КоличествоУпаковок  = ВыборкаПоТоварам.КоличествоУпаковок;
			НоваяСтрока.Сумма               = ВыборкаПоТоварам.Сумма;
			НоваяСтрока.Цена                = ВыборкаПоТоварам.Цена;
			НоваяСтрока.ПроцентРучнойСкидки = ВыборкаПоТоварам.ПроцентРучнойСкидки;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.СтавкаНДС = СтавкаНДС(ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС, ВыборкаПоТоварам.ПодакцизныйТовар, ВыборкаПоТоварам.СтавкаНДС);
			КонецЕсли;
			
			НоваяСтрока.СуммаРучнойСкидки   = Окр(НоваяСтрока.КоличествоУпаковок * НоваяСтрока.Цена * НоваяСтрока.ПроцентРучнойСкидки / 100, 2);
			НоваяСтрока.СуммаНДС            = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, Выборка.ЦенаВключаетНДС);
			НоваяСтрока.Партнер             = Справочники.Партнеры.РозничныйПокупатель;
			
		Иначе
			
			НоваяСтрока = ТаблицаНаборов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНаборов.Свернуть("Номенклатура,Характеристика,ПроцентРучнойСкидки,СтавкаНДС,Цена,ПодакцизныйТовар","Количество");
	
	Для Каждого ВыборкаПоТоварам Из ТаблицаНаборов Цикл
		
		МассивСтрокНабора = Новый Массив;
		Данные = ШтрихкодированиеНоменклатурыСервер.Комплектующие(
			ВыборкаПоТоварам.Номенклатура,
			ВыборкаПоТоварам.Характеристика);
		
		Для Каждого СтрокаТЧ Из Данные Цикл
			
			НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
			НоваяСтрока.НоменклатураНабора   = СтрокаТЧ.НоменклатураНабора;
			НоваяСтрока.ХарактеристикаНабора = СтрокаТЧ.ХарактеристикаНабора;
			НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
			НоваяСтрока.КоличествоУпаковок   = ВыборкаПоТоварам.Количество * СтрокаТЧ.КоличествоУпаковок;
			НоваяСтрока.Количество           = ВыборкаПоТоварам.Количество * СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Коэффициент;
			НоваяСтрока.ПроцентРучнойСкидки  = ВыборкаПоТоварам.ПроцентРучнойСкидки;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.СтавкаНДС = СтавкаНДС(ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС, СтрокаТЧ.ПодакцизныйТовар, ВыборкаПоТоварам.СтавкаНДС);
			КонецЕсли;
			
			НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
			
			МассивСтрокНабора.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НоменклатураНабора", ВыборкаПоТоварам.Номенклатура);
		Отбор.Вставить("ХарактеристикаНабора", ВыборкаПоТоварам.Характеристика);
		
		ПараметрыЗаполнения = Новый Структура( // Параметры заполнения
					"Дата, Валюта, ВидЦены, ПоляЗаполнения",
					ОтчетОРозничныхПродажахОбъект.Дата,
					ОтчетОРозничныхПродажахОбъект.Валюта,
					ОтчетОРозничныхПродажахОбъект.ВидЦены,
					"Цена");
		
		КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(
			ОтчетОРозничныхПродажахОбъект.Товары.Выгрузить(Отбор),
			ПараметрыЗаполнения);
		
		ОбщаяСтоимость = 0;
		СуммаКРаспределению = ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество;
		
		СлужебнаяТЧ = Новый ТаблицаЗначений;
		СлужебнаяТЧ.Колонки.Добавить("СтрокаТЧ");
		СлужебнаяТЧ.Колонки.Добавить("Количество");
		СлужебнаяТЧ.Колонки.Добавить("Стоимость");
		Для Каждого ТекущаяСтрока Из МассивСтрокНабора Цикл
			
			Стоимость = КоэффициентыПропорциональностиРасчетаЦенНаборов.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки").Цена;
			Количество = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "КоличествоУпаковок"), ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
			
			НоваяСтрока = СлужебнаяТЧ.Добавить();
			НоваяСтрока.СтрокаТЧ = ТекущаяСтрока;
			НоваяСтрока.Стоимость = Стоимость;
			НоваяСтрока.Количество = Количество;
			
			ОбщаяСтоимость = ОбщаяСтоимость + Стоимость;
			
		КонецЦикла;
		СлужебнаяТЧ.Сортировать("Количество УБЫВ");
		
		НомерСтроки = 0;
		КоличествоСтрок = СлужебнаяТЧ.Количество();
		Для Каждого СтрокаСлужебнойТЧ Из СлужебнаяТЧ Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ТекущаяСтрока = СтрокаСлужебнойТЧ.СтрокаТЧ;
			Стоимость = СтрокаСлужебнойТЧ.Стоимость;
			Количество = СтрокаСлужебнойТЧ.Количество;
			
			Если Количество <> 0 И ОбщаяСтоимость <> 0 Тогда
				ТекущаяСтрока.Цена = Окр(((Стоимость / ОбщаяСтоимость) * СуммаКРаспределению) / Количество, 2);
			Иначе
				ТекущаяСтрока.Цена = 0;
			КонецЕсли;
			
			ОбщаяСтоимость = ОбщаяСтоимость - Стоимость;
			СуммаКРаспределению = СуммаКРаспределению - ТекущаяСтрока.Цена * Количество;
			
			Погрешность = 0;
			Если НомерСтроки = КоличествоСтрок Тогда
				Погрешность = СуммаКРаспределению;
			КонецЕсли;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОтчетОРозничныхПродажахОбъект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		Если ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
	УзелОбъект.ДатаЗагрузки = ТекущаяДата();
	УзелОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОтчетОРозничныхПродажахОбъект.Ссылка;
	
КонецФункции

Функция СтавкаНДС(НалогообложениеНДС, ПодакцизныйТовар, СтавкаНДСНоменклатуры)
	
	СтавкаНДС = Неопределено;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		СтавкаНДС = СтавкаНДСНоменклатуры;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	Иначе
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

#Область ВыгрузкаТоваров

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в весы с печатью этикеток
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//
// Возвращаемое значение:
//  <Структура> с массивом структур для выгрузки и количеством не выгруженных строк
//
Функция ПолучитьДанныеДляВесов(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные И Параметры.ВыгружатьИзменения);
	
	ВозвращаемоеЗначение = Новый Структура(
		"Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры",
		Новый Массив(),
		0,
		ТолькоИзмененные И Параметры.ВыгружатьИзменения,
		Параметры);
	
	Таблица = ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, Истина);
	
	МаксимальныйКодВесовогоТовара = ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		Штрихкод = СтрокаТЧ.МассивШтрихкодов[0];
		
		ЭлементМассива = Новый Структура("КодВРегистре, PLU, Код, Штрихкод, Наименование, Цена", 0, 0, 0, "", "" , 0);
		// Все коды товаров в правилах выгрузки начинаются с 100000
		Если СтрокаТЧ.Код > МаксимальныйКодВесовогоТовара Тогда
			ЭлементМассива.PLU = СтрокаТЧ.Код - МаксимальныйКодВесовогоТовара;
		Иначе
			ЭлементМассива.PLU = СтрокаТЧ.Код;
		КонецЕсли;
		ЭлементМассива.КодВРегистре = СтрокаТЧ.Код;
		ЭлементМассива.Код = Сред(Штрихкод, 3, 5);
		Если СтрокаТЧ.Используется Тогда
			ЭлементМассива.Наименование = Строка(СтрокаТЧ.Номенклатура);
			ЭлементМассива.Цена         = СтрокаТЧ.Цена;
		КонецЕсли;
		
		ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
		
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в ККМ Offline
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//
// Возвращаемое значение:
//  <Структура> с массивом структур для выгрузки и количеством не выгруженных строк
//
Функция ПолучитьДанныеДляКассы(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные И Параметры.ВыгружатьИзменения);
	
	ВозвращаемоеЗначение = Новый Структура(
		"Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры",
		Новый Массив(),
		0,
		ТолькоИзмененные И Параметры.ВыгружатьИзменения,
		Параметры);
	
	Таблица = ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, Истина);
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Весовой Тогда
			
			Для Каждого Штрихкод Из СтрокаТЧ.МассивШтрихкодов Цикл
				
				ЭлементМассива = Новый Структура("КодВРегистре, PLU, Код, Штрихкод, Наименование, НаименованиеПолное, ЕдиницаИзмерения, Цена, Остаток, ВесовойТовар, Артикул", 0, 0, 0, "", "", "", "", 0, 0, Ложь, "");
				ЭлементМассива.Код          = Сред(Штрихкод, 3, 5);
				ЭлементМассива.PLU          = СтрокаТЧ.Код;
				ЭлементМассива.КодВРегистре = СтрокаТЧ.Код;
				Если СтрокаТЧ.Используется Тогда
					ЭлементМассива.Артикул            = СтрокаТЧ.Артикул;
					ЭлементМассива.Наименование       = СтрокаТЧ.Наименование;
					ЭлементМассива.НаименованиеПолное = СтрокаТЧ.НаименованиеПолное;
					ЭлементМассива.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмерения;
					ЭлементМассива.Цена               = СтрокаТЧ.Цена;
					ЭлементМассива.Остаток            = СтрокаТЧ.Остаток;
					ЭлементМассива.ВесовойТовар       = СтрокаТЧ.Весовой;
				КонецЕсли;
				
				ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
				
			КонецЦикла;
			
		Иначе
			
			ЭлементМассива = Новый Структура("КодВРегистре, PLU, Код, Штрихкод, Наименование, НаименованиеПолное, ЕдиницаИзмерения, Цена, Остаток, ВесовойТовар, Артикул", 0, 0, 0, "", "", "", "", 0, 0, Ложь, "");
			ЭлементМассива.Код          = СтрокаТЧ.Код;
			ЭлементМассива.PLU          = СтрокаТЧ.Код;
			ЭлементМассива.КодВРегистре = СтрокаТЧ.Код;
			Если СтрокаТЧ.Используется Тогда
				ЭлементМассива.Штрихкод           = СтрокаТЧ.МассивШтрихкодов;
				ЭлементМассива.Артикул            = СтрокаТЧ.Артикул;
				ЭлементМассива.Наименование       = СтрокаТЧ.Наименование;
				ЭлементМассива.НаименованиеПолное = СтрокаТЧ.НаименованиеПолное;
				ЭлементМассива.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмерения;
				ЭлементМассива.Цена               = СтрокаТЧ.Цена;
				ЭлементМассива.Остаток            = СтрокаТЧ.Остаток;
				ЭлементМассива.ВесовойТовар       = СтрокаТЧ.Весовой;
			КонецЕсли;
			
			ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция получает параметры устройства
Функция ПолучитьПараметрыУстройства(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКод, 0) КАК МаксимальныйКод,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПравилоОбмена",          Выборка.ПравилоОбмена);
	ВозвращаемоеЗначение.Вставить("УзелИнформационнойБазы", Выборка.УзелИнформационнойБазы);
	ВозвращаемоеЗначение.Вставить("Склад",                  Выборка.Склад);
	ВозвращаемоеЗначение.Вставить("ВидЦены",                Выборка.ВидЦены);
	ВозвращаемоеЗначение.Вставить("ТипОборудования",        Выборка.ТипОборудования);
	ВозвращаемоеЗначение.Вставить("МаксимальныйКод",        Выборка.МаксимальныйКод + ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара());
	ВозвращаемоеЗначение.Вставить("ВыгружатьИзменения",     Выборка.ВыгружатьИзменения);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция регистрирует изменения для устройства.
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование>
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗарегистрироватьИзменения(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО ПодключаемоеОборудование.ПравилоОбмена = КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется
	|	И ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
		Набор.Отбор.ПравилоОбмена.Использование = Истина;
		
		Набор.Отбор.Код.Значение = Выборка.Код;
		Набор.Отбор.Код.Использование = Истина;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Набор);
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромКодыТоваровПодключаемогоОборудования

Функция МаксимальныйКодВесовогоТовара() Экспорт
	
	Возврат 99999;
	
КонецФункции

// Функция возвращает максимальный код товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//
// Возвращаемое значение:
//  <Число> - Максимальный код товарара для заданного правила обмена.
//
Функция ПолучитьМаксимальныйКод(ПравилоОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КодыТоваровПодключаемогоОборудованияOffline.Код), 0) КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МаксимальныйКодВесовогоТовара = МаксимальныйКодВесовогоТовара();
	
	Если Выборка.Следующий() Тогда
		
		Код = Выборка.Код;
		Если Код < МаксимальныйКодВесовогоТовара Тогда
			Код = МаксимальныйКодВесовогоТовара;	
		КонецЕсли;
		
		Возврат Код;

	Иначе
		Возврат МаксимальныйКодВесовогоТовара;
	КонецЕсли;
	
КонецФункции

// Функция возвращает таблицу свободных кодов товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена. Свободными являются коды, для которых не задана соответствующая номенклатура.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  Количество - <Число> - Необходимое количество свободных кодов.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - Таблица свободных кодов товаров.
//
Функция ПолучитьСвободныеКоды(ПравилоОбмена, Количество = 0) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ //ПЕРВЫЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодыТоваровПодключаемогоОборудованияOffline.Код Возр");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПЕРВЫЕ", ?(Количество = 0,"","ПЕРВЫЕ" + " " + Формат(Количество, "ЧГ=0")));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура записывает в регистр КодыТоваровПодключаемогоОборудованияOffline
// код для заданного правила обмена и соответствующие ему параметры номенклатуры
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  Данные        - <Структура> - Структура, содержащая поля: Номенклатура, Характеристика, Упаковка
//  Код           - <Число> - Код товара в разрезе правила обмена.
//  Используется  - <Число> - Признак того, что товар соответствует заданному в правиле обмена отбору.
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаписатьКод(Данные, ПравилоОбмена, Код, Используется) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
	
	МенеджерЗаписи.Код             = Код;
	МенеджерЗаписи.ПравилоОбмена   = ПравилоОбмена;
	МенеджерЗаписи.Используется    = Используется;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

// Процедура очищает параметры номенклатуры для записи, соответствущей коду в пределах правила обмена
// в регистре КодыТоваровПодключаемогоОборудованияOffline.
// Такая запись становится свободной.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  Код           - <Число> - Код товара в разрезе правила обмена.
//
// Возвращаемое значение:
//  Нет
//
Процедура УдалитьКод(ПравилоОбмена, Код) Экспорт
	
	ЗаписатьКод(Новый Структура("Номенклатура, Характеристика, Упаковка"), ПравилоОбмена, Код , Ложь);
	
КонецПроцедуры

// Процедура обновляет записи в регистре КодыТоваровПодключаемогоОборудованияOffline
// в соответствии с правилом обмена. Записи, не соответствующие отбору правила становятся
// неиспользуемыми. Добавляются новые записи, соответствующие отбору, если такие будут найдены.
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//
// Возвращаемое значение:
//  Нет
//
Процедура ОбновитьКодыТоваров(ПравилоОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Склад.РозничныйВидЦены КАК ВидЦены,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипПодключаемогоОборудования
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМOffline Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Выборка.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru='Некорректный тип подключаемого оборудования';uk='Некоректний тип обладнання для підключення'");
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Компоновщик.ЗагрузитьНастройки(Выборка.НастройкиКомпоновкиДанных.Получить());
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Заполнение структуры отчета и выбранных полей.
	Компоновщик.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	ВыбранноеПоле.Использование = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Характеристика");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Упаковка");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("СоответствуетОтбору");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Код");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Используется");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Весовой");
	ВыбранноеПоле.Использование = Истина;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	
	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Дата");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТекущаяДата();
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Выборка.ВидЦены;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПравилоОбмена");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЕдиницаИзмеренияВеса");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Выборка.ЕдиницаИзмеренияВеса;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ФорматШтрихкода");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода("_");
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	НачатьТранзакцию();
	
	PLU = ПолучитьМаксимальныйКод( ПравилоОбмена) + 1;
	СвободныеPLU = ПолучитьСвободныеКоды(ПравилоОбмена);
	Для Каждого Капсула Из ДанныеОтчета Цикл
		Если Капсула.СоответствуетОтбору Тогда
			Если Не ЗначениеЗаполнено(Капсула.Код) Тогда
				
				Если СвободныеPLU.Количество() = 0 Тогда
					ЗаписатьКод(Капсула, ПравилоОбмена, PLU, Истина);
					PLU = PLU + 1;
				Иначе
					ЗаписатьКод(Капсула, ПравилоОбмена, СвободныеPLU[0].Код, Истина);
					СвободныеPLU.Удалить(0);
				КонецЕсли;
				
			Иначе
				ЗаписатьКод(Капсула, ПравилоОбмена, Капсула.Код, Истина);
			КонецЕсли;
		Иначе
			ЗаписатьКод(Капсула, ПравилоОбмена, Капсула.Код, Ложь);
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура выполняет обновление кодов товаров для всех правил обмена.
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура РегламентноеЗаданиеОбновитьКодыТоваров() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Обновление кодов товаров подключаемого оборудования Offline';uk='Оновлення кодів товарів обладнання для підключення Offline'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru='Начато регламентное обновление кодов товаров подключаемого оборудования Offline.';uk='Розпочато регламентне оновлення кодів товарів обладнання для підключення Offline.'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ОбновитьКодыТоваров(Выборка.ПравилоОбмена);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Обновление кодов товаров подключаемого оборудования Offline';uk='Оновлення кодів товарів обладнання для підключення Offline'"),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         НСтр("ru='Во время регламентного обновления кодов товаров подключаемого оборудования Offline произошла ошибка.';uk='Під час регламентного оновлення кодів товарів обладнання для підключення Offline сталася помилка.'")
			                         + Символы.ПС + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Обновление кодов товаров подключаемого оборудования Offline';uk='Оновлення кодів товарів обладнання для підключення Offline'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru='Закончено регламентное обновление кодов товаров подключаемого оборудования Offline.';uk='Закінчено регламентне оновлення кодів товарів обладнання для підключення Offline.'"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаТоваров

// Функция возвращает таблицу товаров с данными к выгрузке в устройство
//
// Параметры:
//  Устройство - <СправочникСсылка.ПодключаемоеОборудование> - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - <Булево> - Флаг получения только измененных данных
//  ОбновитьКодыТоваров - <Булево> - Флаг обновления кодов товаров перед получением данных.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> товаров к выгрузке
//
Функция ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, ОбновитьКодыТоваров = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрефиксУзлаШтрихкода                      = РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода();
	МаксимальноеЗначениеКодаВесовыхШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаВесовыхШтрихкодов();
	МаксимальныйКодВесовогоТовара             = РегистрыСведений.ШтрихкодыНоменклатуры.МаксимальныйКодВесовогоТовара();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Параметры.Склад));
	
	Если ОбновитьКодыТоваров Тогда
		ОбновитьКодыТоваров(Параметры.ПравилоОбмена);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Артикул,"""")            КАК Артикул,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование,"""")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименованиеПолное,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	КодыТоваровПодключаемогоОборудованияOffline.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток - СвободныеОстатки.ВРезервеСоСкладаОстаток - СвободныеОстатки.ВРезервеПодЗаказОстаток, 0) КАК Остаток,
	|	ВЫБОР
	|		КОГДА &ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Весовой,
	|	
	|	//ИспользованиеСерий ВЫБОР КОГДА 1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК Т ГДЕ Т.Склад = &ПравилоОбменаСклад И Т.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу И Т.Ссылка = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидНоменклатуры) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УказыватьСерииПриОтгрузкеВРозницу,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинкиЕстьИзменения
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&ТекущаяДата, Склад = &ПравилоОбменаСклад) КАК СвободныеОстатки
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СвободныеОстатки.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = СвободныеОстатки.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваровПодключаемогоОборудованияOffline.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|			//ВесыСПечатьюЭтикеток И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Изменения КАК КодыТоваровПодключаемогоОборудованияOfflineИзменения
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Код = КодыТоваровПодключаемогоОборудованияOfflineИзменения.Код
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	
	|//ТолькоИзмененные И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
	|//ТолькоИзмененные И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));

	Если Параметры.ЧастичнаяВыгрузка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ТолькоИзмененные","");
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ИспользованиеСерий","");
	КонецЕсли;
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ВесыСПечатьюЭтикеток","");
	КонецЕсли;
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода("_"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	Запрос.УстановитьПараметр("ПравилоОбменаСклад",     Параметры.Склад);
	Запрос.УстановитьПараметр("ВидЦены",                Параметры.ВидЦены);
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("ТекущаяДата",            КонецДня(ТекущаяДата()));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Артикул",            Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",   Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",   Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",            Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	
	ТаблицаТоваров.Колонки.Добавить("ТребуетсяУказаниеСерий", Новый ОписаниеТипов("Булево"));
	
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",                  Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения", Новый ОписаниеТипов("Число"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Весовой Тогда
				Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Выборка.Штрихкод);
			Иначе
				Штрихкод = СокрЛП(Выборка.Штрихкод);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
				
				НоваяСтрока.Используется                = Выборка.Используется;
				НоваяСтрока.Код                         = Выборка.Код;
				НоваяСтрока.Артикул                     = Выборка.Артикул;
				НоваяСтрока.Номенклатура                = Выборка.Номенклатура;
				НоваяСтрока.Характеристика              = Выборка.Характеристика;
				НоваяСтрока.Упаковка                    = Выборка.Упаковка;
				НоваяСтрока.Наименование                = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование + ")","");
				НоваяСтрока.НаименованиеПолное          = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименованиеПолное) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование + ")","");
				НоваяСтрока.Цена                        = Выборка.Цена;
				НоваяСтрока.Остаток                     = Выборка.Остаток;
				НоваяСтрока.Весовой                     = Выборка.Весовой;
				НоваяСтрока.ИндексКартинкиЕстьИзменения = Выборка.ИндексКартинкиЕстьИзменения;
				НоваяСтрока.Штрихкод                    = Штрихкод;
				
				Если ИспользоватьСерииНоменклатуры Тогда
					НоваяСтрока.ТребуетсяУказаниеСерий  = Выборка.УказыватьСерииПриОтгрузкеВРозницу;
				КонецЕсли;
				
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + Штрихкод;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НоваяСтрока.Весовой
			И ОбновитьКодыТоваров
			И (Не ЗначениеЗаполнено(НоваяСтрока.Штрихкод)) Тогда
			
				Если МаксимальноеЗначениеКодаВесовыхШтрихкодов = Неопределено ИЛИ МаксимальноеЗначениеКодаВесовыхШтрихкодов >= МаксимальныйКодВесовогоТовара Тогда
					ВызватьИсключение РегистрыСведений.ШтрихкодыНоменклатуры.ТекстСообщенияНетСвободныхКодовВесовыхШтрихкодов();
				КонецЕсли;
				
				МаксимальноеЗначениеКодаВесовыхШтрихкодов = МаксимальноеЗначениеКодаВесовыхШтрихкодов + 1;
				
				Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(МаксимальноеЗначениеКодаВесовыхШтрихкодов, ПрефиксУзлаШтрихкода);
				
				Попытка
					
					МенеджерЗаписиШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
					МенеджерЗаписиШтрихкода.Номенклатура   = НоваяСтрока.Номенклатура;
					МенеджерЗаписиШтрихкода.Характеристика = НоваяСтрока.Характеристика;
					МенеджерЗаписиШтрихкода.Упаковка       = НоваяСтрока.Упаковка;
					МенеджерЗаписиШтрихкода.Штрихкод       = Штрихкод;
					МенеджерЗаписиШтрихкода.Записать();
					
					НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Штрихкод);
					НоваяСтрока.МассивШтрихкодов.Добавить(НоваяСтрока.Штрихкод);
					
				Исключение
					
					НоваяСтрока.Штрихкод = "";
					НоваяСтрока.МассивШтрихкодов.Очистить();
					
				КонецПопытки;
				
		КонецЕсли;
		
		Если НоваяСтрока.Весовой Тогда
			
			Если НоваяСтрока.МассивШтрихкодов.Количество() = 0 Тогда
				НоваяСтрока.ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Цена)
			ИЛИ НоваяСтрока.ТребуетсяУказаниеСерий
			ИЛИ Не ЗначениеЗаполнено(НоваяСтрока.Наименование)
			ИЛИ (Не ЗначениеЗаполнено(НоваяСтрока.Штрихкод) И Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток)
			ИЛИ (ЗначениеЗаполнено(Параметры.МаксимальныйКод) И НоваяСтрока.Код > Параметры.МаксимальныйКод) Тогда
			НоваяСтрока.ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

#Область ТоварыПравилаВыгрузки

// Функция возвращает таблицу товаров с данными о товарам для правила выгрузки с ценами
//
// Параметры:
//  ПравилоОбмена - <СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline>
//  ВидЦены - <СправочникСсылка.ВидыЦен>
//
// Возвращаемое значение:
//  <ТаблицаЗначений>
//
Функция ПолучитьТаблицуТоваровДляПравила(ПравилоОбмена, ВидЦены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПараметры = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &Ссылка");
	
	ЗапросПараметры.УстановитьПараметр("Ссылка", ПравилоОбмена);
	
	Параметры = ЗапросПараметры.Выполнить().Выбрать();
	Параметры.Следующий();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование, """")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное, """") КАК НоменклатураНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВЫБОР
	|		КОГДА &ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Весовой
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваровПодключаемогоОборудованияOffline.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|			//ВесыСПечатьюЭтикеток И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ВесыСПечатьюЭтикеток","");
		Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода("_"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	Запрос.УстановитьПараметр("ВидЦены",       ВидЦены);
	Запрос.УстановитьПараметр("ТекущаяДата",   КонецДня(ТекущаяДата()));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Весовой Тогда
				Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Выборка.Штрихкод);
			Иначе
				Штрихкод = СокрЛП(Выборка.Штрихкод);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
				НоваяСтрока.Используется       = Выборка.Используется;
				НоваяСтрока.Код                = Выборка.Код;
				НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
				НоваяСтрока.Характеристика     = Выборка.Характеристика;
				НоваяСтрока.Упаковка           = Выборка.Упаковка;
				НоваяСтрока.Наименование       = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", "+Выборка.УпаковкаНаименование + ")","");
				НоваяСтрока.НаименованиеПолное = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименованиеПолное) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", "+Выборка.УпаковкаНаименование + ")","");
				НоваяСтрока.Цена               = Выборка.Цена;
				НоваяСтрока.Весовой            = Выборка.Весовой;
				НоваяСтрока.Штрихкод           = Штрихкод;
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + Штрихкод;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

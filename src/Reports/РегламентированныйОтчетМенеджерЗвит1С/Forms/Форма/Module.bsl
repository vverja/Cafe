
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьПараметрыРаботыЗвит1С();

	мМинимальнаяВерсия1СЗвит = "1.00.028";

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Отказ = Истина;

	// Если отчет встроенный или открывается уже зарегистрированный отчет из справочника "Регламентированные отчеты" 
	Если Не ЭтоВнешнийОтчет() Тогда
		Сообщить(НСтр("ru='Данный отчет носит служебный характер и не предназначен для самостоятельного использования!';uk='Даний звіт носить службовий характер і не призначений для самостійного використання!'"));	
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоВнешнийОтчет()

	Возврат РегламентированнаяОтчетность.ЭтоВнешнийОтчет("РегламентированныйОтчетМенеджерЗвит1С");

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает регламентированный отчет по переданой ссылке на справочник
// РегламентированныеОтчеты. Используется для получения связанного внешнего отчета.
//      Ссылка - Ссылка на элемент справочника РегламентированныеОтчеты
//
// Возвращаемое значение:
// 		Отчет/Внешний отчет Отчет связанный с переданным элементом справочника РегламентированныеОтчеты
//
&НаСервере
Функция ПолучитьРегламентированныйОтчетПоСсылке(Ссылка) Экспорт
	
	ИсточникОтчета = Ссылка.ИсточникОтчета;
	Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ссылка = РегламентированнаяОтчетность.ПолучитьРеглОтчетПоУмолчанию(ИсточникОтчета) Тогда
		Возврат РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	КонецЕсли;
	
	Если Не Ссылка.ВнешнийОтчетИспользовать Тогда
		Если Метаданные.Отчеты.Найти(ИсточникОтчета) <> Неопределено Тогда
			Возврат Отчеты[ИсточникОтчета];
		Иначе
			Сообщить(НСтр("ru='Не найден отчет ';uk='Не знайдений звіт '") + СокрП(ИсточникОтчета) + ".", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		Попытка
			ВременныйФайл = ПолучитьИмяВременногоФайла();
			Ссылка.ВнешнийОтчетХранилище.Получить().Записать(ВременныйФайл);
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл);
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
			КонецПопытки;
			Возврат ВнешнийОтчет;
		Исключение
			Сообщить(НСтр("ru='Не удалось запустить внешний отчет ';uk='Не вдалося запустити зовнішній звіт '") + СокрП(ИсточникОтчета) + ".", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		Конецпопытки;
	
	КонецЕсли;
	
КонецФункции

// Функция получает список поддерживаемых схем из ТекОтчет,
// дополняет им переденную кеш таблицу и возвращает массив добавленных строк
&НаСервере
Функция ДополнитьКешТаблицу(ТекущийОтчет, КешТаблица)
	
	ДобавленныеСтроки = Новый Массив;
		
	ТекОтчетМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(ТекущийОтчет));
	Если ТекОтчетМетаданные = Неопределено Тогда
		// Если отчет внешний, то возвращается объект типа "Внешний отчет объект"
		Попытка
			ТекОтчетМетаданные = ТекущийОтчет.Метаданные();
		Исключение 
		КонецПопытки;
	КонецЕсли;
	
	Если ТекОтчетМетаданные = Неопределено Тогда
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("FREDO Звіт. Заповнення відповідності звітів <-> підтримуваних схем FREDO Звіт. Помилка отримання метаданих звіту """+ТекущийОтчет+"""!", СтатусСообщения.Внимание);
		КонецЕсли;
		Возврат ДобавленныеСтроки;
	КонецЕсли;
	
	Если ТекОтчетМетаданные.Макеты.Найти("ПоказателиЗвит1С") = Неопределено Тогда
		Возврат ДобавленныеСтроки;
	КонецЕсли;
	
	МакетПоказателиЗвит1С = ТекущийОтчет.ПолучитьМакет("ПоказателиЗвит1С");
	МакетПоказателиЗвит1С.КодЯзыкаМакета = "ru";
	
	Если МакетПоказателиЗвит1С.Области.Найти("Структура") = Неопределено Тогда
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("FREDO Звіт. Заповнення відповідності звітів <-> підтримуваних схем FREDO Звіт. У звіті """+ТекущийОтчет+""" в макеті ПоказателиЗвит1С відсутня службова область ""Структура""!", СтатусСообщения.Внимание);
		КонецЕсли;
		Возврат ДобавленныеСтроки;
	КонецЕсли;
	
	ОбластьСтруктура = МакетПоказателиЗвит1С.ПолучитьОбласть("Структура");
	
	Для сч = 1 По ОбластьСтруктура.ВысотаТаблицы Цикл
		ИмяСхемыЗвит1С = СокрЛП(ОбластьСтруктура.Область(сч, 1, сч, 1).Текст);
		ИмяОбласти     = СокрЛП(ОбластьСтруктура.Область(сч, 2, сч, 2).Текст);
		ИмяФормыОтчета = СокрЛП(ОбластьСтруктура.Область(сч, 3, сч, 3).Текст);
		
		Если ПустаяСтрока(ИмяСхемыЗвит1С) ИЛИ Лев(ИмяСхемыЗвит1С, 2)= "//" 
		 ИЛИ ПустаяСтрока(ИмяФормыОтчета) Тогда
			Продолжить; 
		КонецЕсли;
		
		// Для наглядности не заполняем параметр "ИмяОбласти" если он совпадает с "ИмяСхемы"
		Если ПустаяСтрока(ИмяОбласти) Тогда
			ИмяОбласти = ИмяСхемыЗвит1С;
		КонецЕсли;
		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
							
			Если МакетПоказателиЗвит1С.Области.Найти(ИмяОбласти) = Неопределено Тогда
				Сообщить("FREDO Звіт. Заповнення відповідності звітів <-> підтримуваних схем FREDO Звіт. В макеті ""ПоказателиЗвит1С"" звіта """+ТекущийОтчет+""" відсутня область """+ИмяОбласти+""", яка описує заповнення схеми " + ИмяСхемыЗвит1С+ "!", СтатусСообщения.Внимание);
			КонецЕсли;
			
			Если ТекОтчетМетаданные.Формы.Найти(ИмяФормыОтчета) = Неопределено Тогда
				Сообщить("FREDO Звіт. Заповнення відповідності звітів <-> підтримуваних схем FREDO Звіт. У звіті """+ТекущийОтчет+""" посилання на неіснуючу форму звіту  """+ИмяФормыОтчета+""", яка описує заповнення схеми " + ИмяСхемыЗвит1С + "!", СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = КешТаблица.Добавить();
		
		НоваяСтрока.ИмяСхемыЗвит1С = ИмяСхемыЗвит1С;
		НоваяСтрока.ИмяФормы	   = ИмяФормыОтчета;
		НоваяСтрока.ИмяОбласти     = ИмяОбласти;
		
		ДобавленныеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

// Функция заполняет кеш поддерживаемых схем в 1С
//
&НаСервере
Процедура ЗаполнитьСоответствиеОтчетов(ИсточникОтчета = Неопределено, ПерезаполнитьПринудительно = Ложь) Экспорт

	НачатьТранзакцию();
	
	Попытка
		// Получаем все отчеты
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныеОтчеты.Ссылка КАК Ссылка,
		|	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		|ИЗ
		|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		|ГДЕ
		|	РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
		|	И РегламентированныеОтчеты.ИсточникОтчета <> """"
		|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМенеджерЗвит1С""
		|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности""
		|	И РегламентированныеОтчеты.КешСхемЗвит1САктуален = ЛОЖЬ ИЛИ &ПерезаполнитьПринудительно
		|	И РегламентированныеОтчеты.ПометкаУдаления = ЛОЖЬ
		|//ОтборПоИсточникуОтчета И РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Справочник.РегламентированныеОтчеты";
		Запрос.УстановитьПараметр("ПерезаполнитьПринудительно", ПерезаполнитьПринудительно); 
		
		Если ЗначениеЗаполнено(ИсточникОтчета) Тогда		
			// Параметр процедуры ИсточникОтчета оставлен для совместимости
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИсточникуОтчета", "");
			Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
		КонецЕсли;	

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			// Кеш актуален
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;

		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда		
				Сообщить("FREDO Звіт. Оновлення доступних схем для всіх звітів (кеш у довідніку рег.звітів)");
			Иначе		
				Сообщить("FREDO Звіт. Оновлення доступних схем для звіта """+ИсточникОтчета+""" (кеш у довідніку рег.звітів)");
			КонецЕсли;	
		КонецЕсли;			
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекущийИсточникОтчета = Выборка.ИсточникОтчета;
			
			ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ТекущийИсточникОтчета);
			Если ПравоДоступаКОтчету = Ложь ИЛИ ПравоДоступаКОтчету = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийОтчет = ПолучитьРегламентированныйОтчетПоСсылке(Выборка.Ссылка);
			Если ТекущийОтчет = Неопределено Тогда
				Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
					Сообщить("FREDO Звіт. Заповнення відповідності. Не вдалося отримати звіт """+ТекущийИсточникОтчета+"""!", СтатусСообщения.Внимание);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.КешСхемЗвит1САктуален = Истина;
			СправочникОбъект.КешСхемЗвит1С.Очистить();

			ДополнитьКешТаблицу(ТекущийОтчет, СправочникОбъект.КешСхемЗвит1С);
		
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
				
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		Сообщить(НСтр("ru='Ошибка обновления кеша поддерживаемых схем ""FREDO Звіт""';uk='Помилка оновлення кешу підтримуваних схем ""FREDO Звіт""'"), СтатусСообщения.Важное);
		Сообщить(ОписаниеОшибки(), СтатусСообщения.БезСтатуса);
		
	КонецПопытки;
		
КонецПроцедуры

// Функция возвращает копию соответствия отчетов для использования извне
//
&НаСервере
Функция ПолучитьСоответствиеОтчетов(ИмяСхемыЗвит1С = Неопределено, ФлСтаройСхемы = Ложь) Экспорт
	
	// Актуализируем кеш
	Если Не ФлагОтладкиПакетноеТестирование Тогда
		ЗаполнитьСоответствиеОтчетов();
	КонецЕсли;
			
	// Получим требуемые данные. Для каждого ИсточникОтчета анализируются схемы только по отчету по умолчанию
	// Дополнительно накладывается фильтр на получение только актуальной части кеша (на случай если были ошибки при актуализации)
	Запрос = Новый Запрос;
	Запрос.Текст =
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(РегламентированныеОтчеты.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ РеглОтчетыПоУмолчанию
		|ИЗ
		|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		|ГДЕ
		|	РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
		|	И РегламентированныеОтчеты.ИсточникОтчета <> """"
		|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМенеджерЗвит1С""
		|	И РегламентированныеОтчеты.ИсточникОтчета <> ""РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности""
		|	И РегламентированныеОтчеты.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РегламентированныеОтчеты.ИсточникОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегламентированныеОтчетыКешСхемЗвит1С.Ссылка КАК Ссылка,
		|	РегламентированныеОтчетыКешСхемЗвит1С.Ссылка.ИсточникОтчета КАК ИмяОтчета,
		|	РегламентированныеОтчетыКешСхемЗвит1С.ИмяСхемыЗвит1С КАК ИмяСхемыЗвит1С,
		|	РегламентированныеОтчетыКешСхемЗвит1С.ИмяФормы КАК ИмяФормыОтчета,
		|	РегламентированныеОтчетыКешСхемЗвит1С.ИмяОбласти КАК ИмяОбласти
		|ИЗ
		|	Справочник.РегламентированныеОтчеты.КешСхемЗвит1С КАК РегламентированныеОтчетыКешСхемЗвит1С
		|ГДЕ
		|	РегламентированныеОтчетыКешСхемЗвит1С.Ссылка В
		|				(ВЫБРАТЬ
		|					РеглОтчетыПоУмолчанию.Ссылка
		|				ИЗ
		|					РеглОтчетыПоУмолчанию КАК РеглОтчетыПоУмолчанию
		|				ГДЕ
		|					РеглОтчетыПоУмолчанию.Ссылка.КешСхемЗвит1САктуален = ИСТИНА)
		|//ОтборПоИмениСхемы	И РегламентированныеОтчетыКешСхемЗвит1С.ИмяСхемыЗвит1С = &ИмяСхемыЗвит1С
		|//ОтборСтаройСхемы		И ПОДСТРОКА(РегламентированныеОтчетыКешСхемЗвит1С.ИмяСхемыЗвит1С, 1, 6) = &ИмяСхемыЗвит1С";	
		
	Если ЗначениеЗаполнено(ИмяСхемыЗвит1С) Тогда
		Если ФлСтаройСхемы Тогда  //попробуем найти старую схему
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборСтаройСхемы", "");
			Запрос.УстановитьПараметр("ИмяСхемыЗвит1С", Лев(ИмяСхемыЗвит1С,6));
		Иначе	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИмениСхемы", "");
			Запрос.УстановитьПараметр("ИмяСхемыЗвит1С", ИмяСхемыЗвит1С);
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ЗначениеЗаполнено(ИмяСхемыЗвит1С) Тогда
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СоответствиеОтчетов = Новый Структура("ИмяСхемыЗвит1С, ИмяОтчета, ИмяФормыОтчета, ИмяОбласти");
			ЗаполнитьЗначенияСвойств(СоответствиеОтчетов, Выборка);
			Возврат СоответствиеОтчетов;
		Иначе
			Возврат Неопределено;							
		КонецЕсли;
	Иначе
		ПолныйСписокСоответствий = Новый СписокЗначений;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеОтчетов = Новый Структура("ИмяСхемыЗвит1С, ИмяОтчета, ИмяФормыОтчета, ИмяОбласти");
			ЗаполнитьЗначенияСвойств(СоответствиеОтчетов, Выборка);
			ПолныйСписокСоответствий.Добавить(СоответствиеОтчетов);
		КонецЦикла;	
		
		Возврат ПолныйСписокСоответствий;

	КонецЕсли;

КонецФункции 

// Функция переводит период построения отчета из формата FREDO Звіт в 1С
//
&НаСервере
Функция ОпределитьТипПериодаЗвит1С(Знач ДатаПериода, Знач ТипПериода, Периодичность = Неопределено, 
	                                                                  ДатаНачалаПериодаОтчета = Неопределено, 
	                                                                  ДатаКонцаПериодаОтчета = Неопределено) Экспорт
	ПредставлениеПериода = "";
	
	Если ТипПериода = 0 Тогда
		// Месяц
		ДатаНачалаПериодаОтчета = НачалоМесяца(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ТипПериода = 10 Тогда	
		// Квартал
		ДатаНачалаПериодаОтчета = НачалоКвартала(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецКвартала(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ТипПериода = 20 Тогда	
		// Полугодие
		ГодПериода = Год(ДатаПериода);
		МесяцПериода = Месяц(ДатаПериода);		
		Если МесяцПериода <= 6 Тогда
			ДатаНачалаПериодаОтчета = Дата(ГодПериода, 1, 1);
			ПредставлениеПериода = "1";
		Иначе
			ДатаНачалаПериодаОтчета = Дата(ГодПериода, 7, 1);
			ПредставлениеПериода = "2";
		КонецЕсли;		
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(ДатаНачалаПериодаОтчета, 5));
		Периодичность = Перечисления.Периодичность.Квартал;
		
		ПредставлениеПериода = ПредставлениеПериода+" півріччя "+ПредставлениеПериода(НачалоГода(ДатаПериода), КонецГода(ДатаПериода), "Л=uk_UA");
		
	ИначеЕсли ТипПериода = 25 Тогда	
		// 9 месяцев
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецМесяца(ДобавитьМесяц(ДатаНачалаПериодаОтчета, 8));
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ТипПериода = 30 Тогда	
		// Год
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаПериода);
		ДатаКонцаПериодаОтчета  = КонецГода(ДатаПериода);
		Периодичность = Перечисления.Периодичность.Год;
		
	КонецЕсли;

	Если ПустаяСтрока(ПредставлениеПериода) Тогда
		ПредставлениеПериода = ПредставлениеПериода(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, "Л=uk_UA; ФП=Истина");
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

// Функция возвращает ссылку на текущую организацию для которой строится 
// отчет в FREDO Звіт
//
&НаСервере
Функция ОпределитьТекущуюОрганизациюЗвит1С(ЕДРПОУ, ДатаОтчета = Неопределено)

	Организации = Новый Массив;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КодПоЕДРПОУ КАК ЕДРПОУ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.КодПоЕДРПОУ ПОДОБНО &ЕДРПОУ";
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	
	Запрос.УстановитьПараметр("ЕДРПОУ", "%"+СокрЛП(ЕДРПОУ)+"%");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СокрЛП(Выборка.ЕДРПОУ) = СокрЛП(ЕДРПОУ) Тогда
			Организации.Добавить(Выборка.Ссылка)
		КонецЕсли;
	КонецЦикла;
	
	Возврат Организации;
	
КонецФункции

// Функция проверяет версию FREDO Звіт на актуальность
//
&НаКлиенте
Функция ВерсияЗвит1САктуальна(ВыводитьПредупреждение = Истина)
	
	// Проверка версии может осуществляться только при запущенном звите	
	Если глКомпонентаЗвит1С.IsZvitActive() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Метод getZvitVersion появился версии в 1.00.025
	ВерсияЗвит1С = СокрЛП(глКомпонентаЗвит1С.getZvitVersion());		
	Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
		Если СтрДлина(ВерсияЗвит1С)<> СтрДлина(мМинимальнаяВерсия1СЗвит) Тогда
			Сообщить("FREDO Звіт. Метод getZvitVersion() повернув некоректний номер версії: """+ВерсияЗвит1С+"""", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;

	Если (ВерсияЗвит1С = Неопределено) ИЛИ (ВерсияЗвит1С < мМинимальнаяВерсия1СЗвит) Тогда
		Если ВыводитьПредупреждение Тогда
			глКомпонентаЗвит1С.Bring1CToFront();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание, используется устаревшая версия FREDO Звіт!
|
|Необходимо обновить программу до версии не ниже %1. Для этого необходимо в окне FREDO Звіт
|выбрать пункт меню ""Сервіс - Оновити программу"" и следовать подсказкам мастера обновления';uk='Увага, використовується застаріла версія FREDO Звіт!
|
|Необхідно оновити програму до версії не нижче %1. Для цього необхідно у вікні FREDO Звіт
|вибрати пункт меню ""Сервіс - Оновити програму"" і слідувати підказкам майстра оновлення'"), мМинимальнаяВерсия1СЗвит);
			ПоказатьПредупреждение(,ТекстПредупреждения);                                                                                                                                                                                                                                        
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Функция заполняет структуру параметров необходимую для работы FREDO Звіт
//
&НаСервере
Функция ЗаполнитьПараметрыРаботыЗвит1С()
	
	АдресВременногоХранилищаДанныеОтчета       = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресВременногоХранилищаДанныеОтчетов      = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресВременногоХранилищаРасшифровкиЗвит1С  = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресВременногоХранилищаРасшифровкиОтчета  = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресВременногоХранилищаРасшифровкиОтчетов = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
КонецФункции 

&НаСервере
Процедура ПротоколСообщить(Текст)
	
	ПротоколОтладкиПакетноеТестирование = ПротоколОтладкиПакетноеТестирование + Текст + Символы.ПС;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ ЗАПОЛНЕНИЕ ПОКАЗАТЕЛЕЙ ОТЧЕТА

// Процедура выполняет заполнение отчета FREDO Звіт по подготовленным данным из 1С
//
&НаСервере
Процедура ЗаполнениеПоказателейОтчетаЗвит1С(РасшифровкаСфорирована = Неопределено)
	
	ДанныеОтчета			= ПолучитьИзВременногоХранилища(АдресВременногоХранилищаДанныеОтчета);

	СоответствиеПоказателей = ПолучитьТаблицуСоответствияПоказателейЗвит1С(СоответствиеПоказателейЗвит1СОбласть);
	
	ДеревоПоказателей = РеквизитФормыВЗначение("ДеревоПоказателейЗвит1С", Тип("ДеревоЗначений"));
	ДеревоПоказателей.Строки.Очистить();
	
	РасшифровкаОтчета = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаРасшифровкиОтчета);
	
	ФормироватьРасшифровку = Ложь;
	Если ЗначениеЗаполнено(РасшифровкаОтчета) Тогда
		РасшифровкаОтчетаЗвит1С = РасшифровкаОтчета.СкопироватьКолонки();	
	    ФормироватьРасшифровку = Истина;
	КонецЕсли;
	
	ВсегоСтрокСоответствия = СоответствиеПоказателей.Количество();
	ТекНомерСтроки = 0;
	Пока ТекНомерСтроки < ВсегоСтрокСоответствия Цикл
		
		СтрокаСоответствия = СоответствиеПоказателей[ТекНомерСтроки];
		
		Если НЕ ЗначениеЗаполнено(СтрокаСоответствия.ТаблицаЗвит) Тогда
			
			// простой показатель
			ЗначПоказателя1С = ПолучитьЗначениеПоказателя1С(ДанныеОтчета, СтрокаСоответствия.Таблица1С, СтрокаСоответствия.Имя1С);
			
			// преобразуем показатель
			Если ЗначениеЗаполнено(СтрокаСоответствия.Формат) Тогда
				Попытка
					Выполнить(СтрокаСоответствия.Формат);
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					Если ФлагОтладки Тогда
						Сообщить(ТекстОшибки);
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
			
			// Создадим расшифровку
			Если ФормироватьРасшифровку Тогда
				
				ИмяЯчейкиДляРасшифровки = ?(ЗначениеЗаполнено(СтрокаСоответствия.Имя1СРасшифровки), СтрокаСоответствия.Имя1СРасшифровки, СтрокаСоответствия.Имя1С);
				
				СтрокиРасшифровки = РасшифровкаОтчета.НайтиСтроки(Новый Структура("ИмяПоказателя", ИмяЯчейкиДляРасшифровки));
				
				Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					
					СтрокаРасшифровкиЗвит1С = РасшифровкаОтчетаЗвит1С.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасшифровкиЗвит1С, СтрокаРасшифровки);
					
					СтрокаРасшифровкиЗвит1С.ИмяПоказателя = СтрокаСоответствия.ИмяЗвит; 
				
				КонецЦикла;
				
			КонецЕсли;
			
			// запишем показатель в ЗВИТ
			ЗаписатьВТаблицуДляОтчетаЗвит1С(ДеревоПоказателей, "", , СтрокаСоответствия.ИмяЗвит, ЗначПоказателя1С);
			
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
		Иначе
			
			// определим границу таблицы
			ПерваяСтрокаТаблицы    = ТекНомерСтроки;
			ПоследняяСтрокаТаблицы = ТекНомерСтроки;
			
			ИмяТаблицы = СтрокаСоответствия.ТаблицаЗвит;
			
			СтрокаТаблицыДляИдентификации = Неопределено;
			
			// Проверим первую строку соответсвия показателей на наличие итератора
			Если Найти(СоответствиеПоказателей[ПоследняяСтрокаТаблицы].Имя1С, "*") > 0 Тогда
				СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;					
			КонецЕсли;
			
			Пока ПоследняяСтрокаТаблицы + 1 < ВсегоСтрокСоответствия
			   И СоответствиеПоказателей[ПоследняяСтрокаТаблицы + 1].ТаблицаЗвит = ИмяТаблицы Цикл
			
				ПоследняяСтрокаТаблицы = ПоследняяСтрокаТаблицы + 1;
				
				// Проверим все остальные строки соответсвия показателей на наличие итератора
				Если Найти(СоответствиеПоказателей[ПоследняяСтрокаТаблицы].Имя1С, "*") > 0 Тогда
					СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаТаблицыДляИдентификации = Неопределено Тогда
				СтрокаТаблицыДляИдентификации = ПоследняяСтрокаТаблицы;
				
				Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
					Сообщить("FREDO Звіт. Заповнення табличного поля """+ИмяТаблицы+""". Итератор не заданий!", СтатусСообщения.Внимание);					
				КонецЕсли;
				
			КонецЕсли;
			
			// будем формировать строки таблицы пока будем находить данные 
			ШаблонИмениПоказателяДляИдентификации = СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].Имя1С;
			ДлинаНомераДляИдентификации           = СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].ДлинаНомера;
			
			// Определим количество строк
			ТекНомерСтрокиТаблицы = 1;
			ИмяТестовогоПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоказателяДляИдентификации, ДлинаНомераДляИдентификации, ТекНомерСтрокиТаблицы);
			// Есть показатель с очередным номером в списке показателей - значит есть и вся строка с таким номером ТекНомерСтрокиТаблицы
			Пока ИмяТестовогоПоказателяТекСтрокиТаблицы <> "" 
			   И ДанныеОтчета[СоответствиеПоказателей[СтрокаТаблицыДляИдентификации].Таблица1С].Свойство(ИмяТестовогоПоказателяТекСтрокиТаблицы) Цикл						
				ТекНомерСтрокиТаблицы = ТекНомерСтрокиТаблицы + 1;
				ИмяТестовогоПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоказателяДляИдентификации, ДлинаНомераДляИдентификации, ТекНомерСтрокиТаблицы);
			КонецЦикла;
			КоличествоСтрокТаблицы = ТекНомерСтрокиТаблицы-1;
			
			Для ТекНомерСтрокиТаблицы = 1 По КоличествоСтрокТаблицы Цикл
				
				Для Инд1 = ПерваяСтрокаТаблицы По ПоследняяСтрокаТаблицы Цикл
					
					СтрокаСоответствия = СоответствиеПоказателей[Инд1];
					 					
					ИмяПоказателяТекСтрокиТаблицы = ПолучитьИмяПоказателяВТаблице(СтрокаСоответствия.Имя1С, СтрокаСоответствия.ДлинаНомера, ТекНомерСтрокиТаблицы);
					
					Если ИмяПоказателяТекСтрокиТаблицы = "" Тогда
						// этот параметр мы можем только вычислить
						ЗначПоказателя1С = Неопределено;						
                    ИначеЕсли ИмяПоказателяТекСтрокиТаблицы = "#" Тогда
						// это номер строки таблицы
						ЗначПоказателя1С = ТекНомерСтрокиТаблицы;						
					Иначе
						ЗначПоказателя1С = ПолучитьЗначениеПоказателя1С(ДанныеОтчета, СтрокаСоответствия.Таблица1С, ИмяПоказателяТекСтрокиТаблицы);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаСоответствия.Формат) Тогда
						Попытка
							Выполнить(СтрокаСоответствия.Формат);
						Исключение
							ТекстОшибки = ОписаниеОшибки();
							Если ФлагОтладки Тогда
								Сообщить(ТекстОшибки);
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
					
					Если ФормироватьРасшифровку Тогда
						
						ИмяЯчейкиДляРасшифровки	= ПолучитьИмяПоказателяВТаблице(СтрокаСоответствия.Имя1СРасшифровки, СтрокаСоответствия.ДлинаНомера, ТекНомерСтрокиТаблицы);
						
						СтрокиРасшифровки = РасшифровкаОтчета.НайтиСтроки(Новый Структура("ИмяПоказателя", ИмяЯчейкиДляРасшифровки));
						
						Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
							
							СтрокаРасшифровкиЗвит1С = РасшифровкаОтчетаЗвит1С.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаРасшифровкиЗвит1С, СтрокаРасшифровки);
							
							СтрокаРасшифровкиЗвит1С.ИмяПоказателя = СтрокаСоответствия.ИмяЗвит + "_" + Формат(ТекНомерСтрокиТаблицы, "ЧГ=0"); 
						
						КонецЦикла;
						
					КонецЕсли;
					
				    ЗаписатьВТаблицуДляОтчетаЗвит1С(ДеревоПоказателей, ИмяТаблицы, ТекНомерСтрокиТаблицы, СтрокаСоответствия.ИмяЗвит, ЗначПоказателя1С);
					
				КонецЦикла;

			КонецЦикла;
			
			// продолжим обход таблицы соответствия для следующей таблицы или показателя
		    ТекНомерСтроки = ПоследняяСтрокаТаблицы + 1;
			
		КонецЕсли;	
	  
	КонецЦикла;

	Если ФормироватьРасшифровку 
	   И РасшифровкаОтчетаЗвит1С.Количество() = 0 Тогда
		// фактически расшифровки нет
		РасшифровкаОтчетаЗвит1С = Неопределено;
	Иначе
		РасшифровкаСфорирована = Истина;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоПоказателей, "ДеревоПоказателейЗвит1С");	
	ПоместитьВоВременноеХранилище(РасшифровкаОтчетаЗвит1С, АдресВременногоХранилищаРасшифровкиЗвит1С);
	
КонецПроцедуры

// Процедура выполняет установку значений параметров в отчетах FREDO Звіт
//
&НаСервере
Процедура ЗаписатьВТаблицуДляОтчетаЗвит1С(ДеревоПоказателей, ИмяТаблицыЗвит1С, НомерСтроки = 1, ИмяЗвит1С, Значение);
	
	СписокТаблиц = ДеревоПоказателей.Строки;
	
	// первый уровень - таблицы (тело это тоже таблица)
	Таблица = СписокТаблиц.Найти(ИмяТаблицыЗвит1С, "ИмяТаблицыЗвит1С", Ложь);
	
	Если Таблица = Неопределено Тогда
	
		Таблица = СписокТаблиц.Добавить();
		Таблица.ИмяТаблицыЗвит1С = ИмяТаблицыЗвит1С;
		
	КонецЕсли;
	
	// второй уровень - строки (для тела - одна строка)
	СписокСтрокТаблицы = Таблица.Строки;
	
	Если СписокСтрокТаблицы.Количество() < НомерСтроки Тогда
		Пока СписокСтрокТаблицы.Количество() < НомерСтроки Цикл
	 		СтрокаТаблицы = СписокСтрокТаблицы.Добавить(); 
		КонецЦикла;
	Иначе	
		СтрокаТаблицы = СписокСтрокТаблицы[НомерСтроки - 1];
	КонецЕсли;
	
	// третий уровень - знаения колонок строки таблицы
	ПоказательСтрокиТаблицы 	 		= СтрокаТаблицы.Строки.Добавить();
	ПоказательСтрокиТаблицы.ИмяЗвит1С 	= ИмяЗвит1С;
	ПоказательСтрокиТаблицы.Значение 	= Значение;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередатьПоказателиВЗвит1С(Отчет)

	ТаблицыОтчета = ДеревоПоказателейЗвит1С.ПолучитьЭлементы();
	
	// получаем строки первого уровня - это таблицы или показатели тела
	Для каждого ТаблицаОтчета Из ТаблицыОтчета Цикл
		
		ИмяТаблицыЗвит1С = ТаблицаОтчета.ИмяТаблицыЗвит1С;
		
		СтрокиТаблицы = ТаблицаОтчета.ПолучитьЭлементы();	
		
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
							
			// добавим строку для табличных показателей
			Если ЗначениеЗаполнено(ИмяТаблицыЗвит1С) Тогда
				Отчет.NewRow(ИмяТаблицыЗвит1С);
			КонецЕсли;
		
			ПоказателиТаблицы = СтрокаТаблицы.ПолучитьЭлементы();
			
			Для каждого ПоказательТаблицы Из ПоказателиТаблицы Цикл
				
				ЗаписатьВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С, ПоказательТаблицы.ИмяЗвит1С, ПоказательТаблицы.Значение);
			
			КонецЦикла;
		
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет установку значений параметров в отчетах FREDO Звіт
//
&НаКлиенте
Процедура ЗаписатьВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение) Экспорт
	
	Если (Значение = Неопределено) ИЛИ (Не ФлагОтладки И Не ФлагОтладкиПакетноеТестирование И Не ЗначениеЗаполнено(Значение)) Тогда
		Если ИмяЗвит1С = "EDRPOU" Тогда
			//налоговый номер надо выгружать даже пустым, иначе во Fredo заполняется по-умолчанию
			Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение);
		Иначе	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение); 
	Исключение
		
		Если ФлагОтладки И НЕ ФлагОтладкиПакетноеТестирование Тогда
			
			Сообщить("FREDO Звіт. Помилка установки показника (схема """+Отчет.CharCode+?(ПустаяСтрока(ИмяТаблицыЗвит1С),"",""", назва таблиці """+ИмяТаблицыЗвит1С)+""", поле """+ИмяЗвит1С+""", тип значення """+ТипЗнч(Значение)+""", значення """+ Значение+""")", СтатусСообщения.Внимание);
			
		ИначеЕсли ФлагОтладкиПакетноеТестирование Тогда
			// Проверим выгрузку разных типов данных
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, 0); 
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, 1); 
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, "0");
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, "X");
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, '2000-01-01');
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Ложь);
				Возврат;
			Исключение
			КонецПопытки;
			
			Попытка
				Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Неопределено);
				Возврат;
			Исключение
			КонецПопытки;
			
			ПротоколСообщить("FREDO Звіт. Помилка установки показника ( схема """+Отчет.CharCode+?(ПустаяСтрока(ИмяТаблицыЗвит1С),"",""", назва таблиці """+ИмяТаблицыЗвит1С)+""", назва во ""FREDO Звіт"" """+ИмяЗвит1С+""", тип значення """+ТипЗнч(Значение)+""", значення """+ Значение+""")");
			
		КонецЕсли;
		
	КонецПопытки;
		
КонецПроцедуры

// Функция возвращает таблицу значений с соответствия показателей 1С и FREDO Звіт
// оформленную на основании служебного макета "ПоказателиЗвит1С"
//
&НаСервереБезКонтекста
Функция ПолучитьТаблицуСоответствияПоказателейЗвит1С(ТабличныйДокумент)

	ТаблицаСоответствия = Новый ТаблицаЗначений();
	ТаблицаСоответствия.Колонки.Добавить("ТаблицаЗвит");
	ТаблицаСоответствия.Колонки.Добавить("ИмяЗвит");
	ТаблицаСоответствия.Колонки.Добавить("Имя1С");
	ТаблицаСоответствия.Колонки.Добавить("Имя1СРасшифровки");
	ТаблицаСоответствия.Колонки.Добавить("ДлинаНомера");
	ТаблицаСоответствия.Колонки.Добавить("Таблица1С");
	ТаблицаСоответствия.Колонки.Добавить("Формат");
	
	КоличествоСтрок = ТабличныйДокумент.Область().Низ;
	
	Для Инд = 1 По КоличествоСтрок Цикл
	
		ИмяЗвит = СокрЛП(ТабличныйДокумент.Область(Инд, 2, Инд, 2).Текст);

		Если ПустаяСтрока(ИмяЗвит) ИЛИ Лев(ИмяЗвит,2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаб = ТаблицаСоответствия.Добавить();
		
		СтрокаТаб.ТаблицаЗвит 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 1, Инд, 1).Текст);
		СтрокаТаб.ИмяЗвит 		   = ИмяЗвит;
		СтрокаТаб.Имя1С 		   = СокрЛП(ТабличныйДокумент.Область(Инд, 3, Инд, 3).Текст);
		СтрокаТаб.Имя1СРасшифровки = СокрЛП(ТабличныйДокумент.Область(Инд, 4, Инд, 4).Текст);
		СтрокаТаб.ДлинаНомера 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 5, Инд, 5).Текст);
		СтрокаТаб.Таблица1С 	   = СокрЛП(ТабличныйДокумент.Область(Инд, 6, Инд, 6).Текст);
		СтрокаТаб.Формат 		   = СокрЛП(ТабличныйДокумент.Область(Инд, 7, Инд, 7).Текст);
		
		Если ПустаяСтрока(СтрокаТаб.Имя1СРасшифровки) Тогда
			СтрокаТаб.Имя1СРасшифровки = СтрокаТаб.Имя1С;
		КонецЕсли;
		
	КонецЦикла;
	
	// Для корректной работы функции заполнения данные связанные
	// с одной таблицей должны распологаться без пропусков
	ТаблицаСоответствия.Сортировать("ТаблицаЗвит, ИмяЗвит");
	
	Возврат	ТаблицаСоответствия;

КонецФункции

// Функция возвращает имя поля в таблицах 1С 
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяПоказателяВТаблице(ШаблонИмениПоля, ДлинаНомера, Номер)
	
	Если Не ЗначениеЗаполнено(ДлинаНомера) Тогда
		Возврат СтрЗаменить(ШаблонИмениПоля, "*", Формат(Номер, "ЧГ=0"+ДлинаНомера));
	Иначе
		Возврат СтрЗаменить(ШаблонИмениПоля, "*", Формат(Номер, "ЧГ=0; ЧВН=; ЧЦ="+ДлинаНомера));	
	КонецЕсли;

КонецФункции

// Функция возвращает необходимые данные из структуры 1С
// 
&НаСервере
Функция ПолучитьЗначениеПоказателя1С(Данные, ИмяТаблицы,ИмяПоказателя)

	Значение = Неопределено;
	
	// Если показатель 1С не задан, он может быть только вычислен
	Если ПустаяСтрока(ИмяПоказателя) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Попытка
		Значение = Данные[ИмяТаблицы][ИмяПоказателя]
	Исключение
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("FREDO Звіт. Помилка отримання показника (табличне поле """ + ИмяТаблицы + """, показник """ + ИмяПоказателя + """). Назва табличного поля чи показника вказано не вірно!", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С РАСШИФРОВКОЙ

// Функция возвращает параметры расшифровки для FREDO Звіт
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыРасшифровкиЗвит1С(Знач Запрос)

	ПараметрыРасшифровки = Новый Структура();
	
	НомПоз   = Найти(Запрос,",");
	ИдОтчета = Число(СокрЛП(Лев(Запрос,НомПоз -1))); 
	
	Запрос = СокрЛП(Сред(Запрос,НомПоз+1));
	НомПоз = Найти(Запрос,",");
	ИмяПок = СокрЛП(Лев(Запрос,НомПоз-1)); 
	
	Запрос = СокрЛП(Сред(Запрос,НомПоз+1));
	НомПоз = Найти(Запрос,",");
	Если НомПоз = 0 Тогда
	    НомСтрТаб = Число(СокрЛП(Запрос));   
	Иначе	
		НомСтрТаб = Число(СокрЛП(Лев(Запрос,НомПоз-1)));   
	КонецЕсли;
	Если НомСтрТаб = 0 Тогда
		Если ВРЕГ(ЛЕВ(ИмяПок, 3)) = "TAB" Тогда
		    // показатель в таблице - увеличим не единицу его номер
			ИмяПок = ИмяПок + "_1";
		КонецЕсли;
	Иначе
		ИмяПок = ИмяПок + "_" + Формат(НомСтрТаб + 1, "ЧГ=0");
	КонецЕсли;
	
	Если НомПоз > 0 Тогда
		НомерСтрокиРасшифровки = Число(Сред(Запрос,НомПоз+1)); 
	Иначе
		НомерСтрокиРасшифровки = 0;
	КонецЕсли;
	
	ПараметрыРасшифровки.Вставить("ИдОтчета",  ИдОтчета);
	ПараметрыРасшифровки.Вставить("ИмяЯчейки", ИмяПок);
	ПараметрыРасшифровки.Вставить("НомерСтрокиРасшифровки",  НомерСтрокиРасшифровки);
	
	Возврат ПараметрыРасшифровки;

КонецФункции 

// Функция возвращает расшифровку для FREDO Звіт
//
&НаСервере
Функция ПолучитьРасшифровкуЗвит1С(ИдОтчета)

	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.Расшифровка,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ИмяСхемыЗвит1С,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПредставлениеПериода,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.Организация,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПериодНач,
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ПериодКон
	|ИЗ
	|	РегистрСведений.РасшифровкиРегламентированныхОтчетовЗвит1С КАК РасшифровкиРегламентированныхОтчетовЗвит1С
	|ГДЕ
	|	РасшифровкиРегламентированныхОтчетовЗвит1С.ИдОтчета = &ИдОтчета";
	
	Запрос.УстановитьПараметр("ИдОтчета", ИдОтчета);
	Расшифровка = Запрос.Выполнить().Выгрузить();
	
	Если Расшифровка.Количество() = 0 Тогда
	
		Возврат Ложь;
		
	Иначе
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("ИмяСхемыЗвит1С", 			Расшифровка[0].ИмяСхемыЗвит1С);
		ПараметрыОтчета.Вставить("Организация", 			Расшифровка[0].Организация);
		ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", Расшифровка[0].ПериодНач);
		ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  Расшифровка[0].ПериодКон);
		ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", АдресВременногоХранилищаРасшифровкиОтчета);
		
		// строка таблицы
		ПоместитьВоВременноеХранилище(Расшифровка[0].Расшифровка.Получить(), АдресВременногоХранилищаРасшифровкиОтчета);
		
		Возврат ПараметрыОтчета;
	
	КонецЕсли;	

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧИВАЮЩИЕ РАБОТУ РЕГ.ОТЧЕТОВ

&НаСервере
Функция ПроверитьВозможностьФормированияОтчета(ИмяОтчета)
	
	ТекстОшибки = "";
	
	// Получаем менеджер отчета                                   
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = "Не вдалося відкрити звіт """+ИмяОтчета+"""!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Возврат ТекстОшибки;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеСпискаПоказателейВОтчете(ИмяОтчета, ИмяОбласти)

	// Получаем таблицу соответствия имен
	Попытка
		Если РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИмяОтчета) Тогда
			СоответствиеПоказателейЗвит1СМакет = ВнешниеОтчеты.Создать(ИмяОтчета).ПолучитьМакет("ПоказателиЗвит1С");
		Иначе	
			СоответствиеПоказателейЗвит1СМакет = Отчеты[ИмяОтчета].ПолучитьМакет("ПоказателиЗвит1С");
		КонецЕсли;
	Исключение 
		ТекстОшибки = "Відсутній макет з відповідністю показників FREDO Звіт!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
		Возврат ТекстОшибки;			  
	КонецПопытки;
	
	СоответствиеПоказателейЗвит1СМакет.КодЯзыкаМакета = "ru";
			
	Если СоответствиеПоказателейЗвит1СМакет.Области.Найти(ИмяОбласти) = Неопределено Тогда
		ТекстОшибки = "Відсутній опис відповідностей показників FREDO Звіт!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
					  
					  
		Возврат ТекстОшибки;
	Иначе
		
		СоответствиеПоказателейЗвит1СОбласть = СоответствиеПоказателейЗвит1СМакет.ПолучитьОбласть(ИмяОбласти);	
		
	КонецЕсли;	

	Возврат "";// без ошибок
	
КонецФункции // ()

&НаСервере
Функция ИспользоватьКешПриЗаполненииОтчета(ИмяОтчета, ИмяФормыОтчета)
	
	ИспользоватьКеш = Ложь;
	
	// получаем структуру данных по всем формам, которые заполнеят регл. отчет конфгиурации (с приложениями)
	ДанныеОтчетов = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаДанныеОтчетов);
	
	// найдем в этом списке данные определенной формы (приложения)
	ДанныеОтчета = Неопределено;
	
	Если  ДанныеОтчетов <> Неопределено
		И ДанныеОтчетов.Свойство(ИмяОтчета + "_" + ИмяФормыОтчета, ДанныеОтчета) Тогда
		
		ИспользоватьКеш = Истина;		
		
		ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресВременногоХранилищаДанныеОтчета);
		
		// при групповом заполнении этот отчет уже вызывался
		// и его данные имеются в памяти
		// заново заполнять не будем
		
		// Восстановим расшифровку показателей
		РасшифровкиОтчетов = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаРасшифровкиОтчетов);
		
		Если ТипЗнч(РасшифровкиОтчетов) = Тип("Структура") Тогда
		    РасшифровкаОтчета = Неопределено;
			РасшифровкиОтчетов.Свойство(ИмяОтчета + "_" + ИмяФормыОтчета, РасшифровкаОтчета);	
		    ПоместитьВоВременноеХранилище(РасшифровкаОтчета, АдресВременногоХранилищаРасшифровкиОтчета);
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат ИспользоватьКеш;	
	
КонецФункции

&НаСервере
Процедура СохранитьВоВременномХранилищеСтруктуруДанныхОтчета(ИмяОтчета, ИмяФормыОтчета)	
	
	// получаем структуру данных по всем формам, которые заполнеят регл. отчет конфгиурации (с приложениями)
	ДанныеОтчетов = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаДанныеОтчетов);
	
	// найдем в этом списке данные определенной формы (приложения)
	ДанныеОтчета  = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаДанныеОтчета);
		
	// Сохраняем данные отчета для использования в других отчетах из заполняемой группы отчетов
	Если ДанныеОтчетов <> Неопределено И ДанныеОтчета <> Неопределено Тогда
		ДанныеОтчетов.Вставить(ИмяОтчета + "_" + ИмяФормыОтчета, ДанныеОтчета);
		ПоместитьВоВременноеХранилище(ДанныеОтчетов, АдресВременногоХранилищаДанныеОтчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановаитьПараметрыЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета, ОткрыватьОтчет)
	
	ОповещениЗавершениеФормирования = Новый ОписаниеОповещения("ЗаполнитьИСохранитьОтчетЗвит1С", ЭтаФорма, Новый Структура("ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета, ОткрыватьОтчет", ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета, ОткрыватьОтчет));
	
	ИмяОтчета  		 = СоответствиеОтчета.ИмяОтчета;
	ИмяФормыОтчета   = СоответствиеОтчета.ИмяФормыОтчета;
	ИмяОбласти 		 = СоответствиеОтчета.ИмяОбласти;
	
	ТекстОшибки = ПроверитьВозможностьФормированияОтчета(ИмяОтчета);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
			Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениЗавершениеФормирования, Ложь);
		
		ИмяСхемыЗвит1С = ""; 
		Возврат;
		
	КонецЕсли;
	
	// Получаем требуемую форму отчета
	Если РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИмяОтчета) Тогда
		ТекФорма = ПолучитьФорму("ВнешнийОтчет." + ИмяОтчета + ".Форма." + ИмяФормыОтчета, НастройкаФормыОтчета, ЭтаФорма, Новый УникальныйИдентификатор);
	Иначе
		ТекФорма = ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма." + ИмяФормыОтчета, НастройкаФормыОтчета, ЭтаФорма, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Если ТекФорма = Неопределено Тогда
		
		ТекстОшибки = "Не вдалося відкрити форму """+ИмяОтчета+"."+ИмяФормыОтчета+"""!
					  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе";
					  
		глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
			Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениЗавершениеФормирования, Ложь);
		
		ИмяСхемыЗвит1С = ""; 
		Возврат;
		
	КонецЕсли;
	
	ТекстОшибки = ПроверитьНаличиеСпискаПоказателейВОтчете(ИмяОтчета, ИмяОбласти);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
	
		глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
			Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениЗавершениеФормирования, Ложь);
		
		ИмяСхемыЗвит1С = ""; 
		Возврат;
		
	КонецЕсли;

	ОповещениЗавершениеФормирования.ДополнительныеПараметры.Вставить("ТекФорма", ТекФорма);
	
	Попытка
		Если ФлагОтладкиПакетноеТестирование = Истина Тогда
			глКомпонентаЗвит1С.Bring1CToFront();
			ВызватьИсключение "";	
		КонецЕсли;
		ТекФорма.ОткрытьФормуПараметровДляЗвит1С(ОповещениЗавершениеФормирования);
	Исключение
	    ВыполнитьОбработкуОповещения(ОповещениЗавершениеФормирования, Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИСохранитьОтчетЗвит1С(Результат, ДопПараметры) Экспорт
	
	Если НЕ ФлагОтладкиПакетноеТестирование = Истина Тогда
		глКомпонентаЗвит1С.BringZvitToFront();
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		ИмяСхемыЗвит1С = ""; 
		Возврат;
	КонецЕсли;
	
	ОтчетЗвит1С								= ДопПараметры.ОтчетЗвит1С;
	СоответствиеОтчета						= ДопПараметры.СоответствиеОтчета;
	НастройкаФормыОтчета					= ДопПараметры.НастройкаФормыОтчета;
	ДанныеДляСохраненияРасшифровкиОтчета	= ДопПараметры.ДанныеДляСохраненияРасшифровкиОтчета;
	ОткрыватьОтчет							= ДопПараметры.ОткрыватьОтчет;
	ТекФорма								= ДопПараметры.ТекФорма;
	
	ИмяОтчета  		 = СоответствиеОтчета.ИмяОтчета;
	ИмяФормыОтчета   = СоответствиеОтчета.ИмяФормыОтчета;
	ИмяОбласти 		 = СоответствиеОтчета.ИмяОбласти;
	
	ТекстОшибки = ПроверитьНаличиеСпискаПоказателейВОтчете(ИмяОтчета, ИмяОбласти);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
	
		глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
		Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
			Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		
		ИмяСхемыЗвит1С = ""; 
		Возврат;
		
	КонецЕсли;
	
	// Заполняем отчет (получаем его данные и расшифровку)
	ПоместитьВоВременноеХранилище(Неопределено, АдресВременногоХранилищаДанныеОтчета);
	ПоместитьВоВременноеХранилище(Неопределено, АдресВременногоХранилищаРасшифровкиОтчета);
	
	Если НЕ ИспользоватьКешПриЗаполненииОтчета(ИмяОтчета, ИмяФормыОтчета) Тогда
		// нужно заполнить отчет
	
		Если ФлагОтладки Тогда
			глКомпонентаЗвит1С.Bring1CToFront();
		КонецЕсли;
		
		// вызываем процедуру формирования необходимых данных - имена показателей будут в формате 1С
		Попытка
			
			ТекФорма.СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С", АдресВременногоХранилищаРасшифровкиОтчета);
			
			СтруктураДанных = ТекФорма.СформироватьДанныеДляЗвит1С(ОтчетЗвит1С);
		Исключение
			СтруктураДанных = Неопределено;		
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если ФлагОтладки Тогда
			глКомпонентаЗвит1С.BringZvitToFront();
		КонецЕсли;
		
		Если СтруктураДанных = Неопределено Тогда
			
			ТекстОшибки = "Помилка алгоритму заповнення звіту!
						  |Заповенення звіту "+ИмяСхемыЗвит1С+" неможливе
						  |
						  |"+ОписаниеОшибки;
						  
			глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
			Если НЕ ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
				Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			ИмяСхемыЗвит1С = ""; 
			Возврат;
			
		КонецЕсли;
		
		
		Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда			
			
			Если СтруктураДанных.Свойство("ДанныеОтчета") Тогда
				ПоместитьВоВременноеХранилище(СтруктураДанных.ДанныеОтчета, АдресВременногоХранилищаДанныеОтчета);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СохранитьВоВременномХранилищеСтруктуруДанныхОтчета(ИмяОтчета, ИмяФормыОтчета);	

	// Заполняем показатели отчета и передаем отчет в Звит1С
	// Одновременно преобразовываем расшифровку и оставляем в ней только строки,
	// относящиеся к данному отчету
	// После сохранения сможем получить  ИД отчета из ЗВит1С и под этим номером сохранить расшифровку
	
	// заполняем на сервере структуру показателей
	ЗаписыватьРасшифровку = Неопределено;
	ЗаполнениеПоказателейОтчетаЗвит1С(ЗаписыватьРасшифровку);
	
	// передаем ее на клиенте в Звит-1С
	ПередатьПоказателиВЗвит1С(ОтчетЗвит1С);
	
	Если ОткрыватьОтчет = Неопределено Тогда
		ИДотчета = глКомпонентаЗвит1С.SaveReport(ОтчетЗвит1С); 
	Иначе
		ИДотчета = глКомпонентаЗвит1С.SaveReportEx(ОтчетЗвит1С, Число(ОткрыватьОтчет)); 
	КонецЕсли;	
	Если ФлагОтладки Тогда
		Сообщить("FREDO Звіт. Збережено звіт FREDO Звіт (ID " + ИДотчета+")");	
	КонецЕсли;
	
	Если ЗаписыватьРасшифровку = Истина Тогда
	
		ТекстОшибки = "";
		СохранитьРасшифровкуОтчета(ДанныеДляСохраненияРасшифровкиОтчета, ИДотчета, ИмяОтчета, ИмяФормыОтчета, ТекстОшибки);	
		Если Не ТекстОшибки = "" Тогда
			ПредупреждениеЗвит1С(ТекстОшибки, "Збереження розшифровки");					
		КонецЕсли;
		
	КонецЕсли;
	
	ДопПараметры.Вставить("ФлагУспешногоСохранения");
	ИмяСхемыЗвит1С = ""; 
	
КонецПроцедуры


&НаСервере
Процедура СохранитьРасшифровкуОтчета(ДанныеДляСохраненияРасшифровкиОтчета, ИДотчета, ИмяОтчета, ИмяФормыОтчета, ТекстОшибки = "");
	
	РасшифровкаОтчетаЗвит1С = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаРасшифровкиЗвит1С);
	РасшифровкаОтчета 		= ПолучитьИзВременногоХранилища(АдресВременногоХранилищаРасшифровкиОтчета);
	РасшифровкиОтчетов 		= ПолучитьИзВременногоХранилища(АдресВременногоХранилищаРасшифровкиОтчетов);
	
	Если РасшифровкиОтчетов <> Неопределено И РасшифровкаОтчетаЗвит1С <> Неопределено Тогда
		
		// сохраняем в памяти расшифровку с именами показателей в формате 1С
		РасшифровкиОтчетов.Вставить(ИмяОтчета + "_" + ИмяФормыОтчета, РасшифровкаОтчета);		
		АдресВременногоХранилищаРасшифровкиОтчетов = ПоместитьВоВременноеХранилище(РасшифровкиОтчетов, УникальныйИдентификатор);
		
		// сохраняем расшифровку в регистре сведений для последующего ее открытия вызовом из Звит1С
		Если РасшифровкаОтчетаЗвит1С <> Неопределено Тогда
			
			РСРасшифрокаЗвит1С = РегистрыСведений.РасшифровкиРегламентированныхОтчетовЗвит1С.СоздатьНаборЗаписей();
			РСРасшифрокаЗвит1С.Отбор.ИдОтчета.Значение 		= ИДотчета;
			РСРасшифрокаЗвит1С.Отбор.ИдОтчета.Использование = Истина;
			
			ЗаписьРСРасшифрокаЗвит1С = РСРасшифрокаЗвит1С.Добавить();
			
			ЗаписьРСРасшифрокаЗвит1С.Расшифровка 	= Новый ХранилищеЗначения(РасшифровкаОтчетаЗвит1С,  Новый СжатиеДанных(9));
			
			ЗаписьРСРасшифрокаЗвит1С.ИдОтчета 		= ИдОтчета;
			ЗаписьРСРасшифрокаЗвит1С.ИмяСхемыЗвит1С = ИмяСхемыЗвит1С;
			
			ЗаписьРСРасшифрокаЗвит1С.Организация 	= ДанныеДляСохраненияРасшифровкиОтчета.Организация;
			ЗаписьРСРасшифрокаЗвит1С.ПредставлениеПериода = ПредставлениеПериода(ДанныеДляСохраненияРасшифровкиОтчета.ДатаНачалаПериодаОтчета, ДанныеДляСохраненияРасшифровкиОтчета.ДатаКонцаПериодаОтчета, "Л=uk_UA; ФП=Истина");
			ЗаписьРСРасшифрокаЗвит1С.ПериодНач 		= ДанныеДляСохраненияРасшифровкиОтчета.ДатаНачалаПериодаОтчета;
			ЗаписьРСРасшифрокаЗвит1С.ПериодКон 		= ДанныеДляСохраненияРасшифровкиОтчета.ДатаКонцаПериодаОтчета;
			ЗаписьРСРасшифрокаЗвит1С.Периодичность 	= ДанныеДляСохраненияРасшифровкиОтчета.Периодичность;
			ЗаписьРСРасшифрокаЗвит1С.ТипПериода 	= ДанныеДляСохраненияРасшифровкиОтчета.ТипПериода;
			ЗаписьРСРасшифрокаЗвит1С.ДатаФормирования = ТекущаяДата();
			
			Попытка
				РСРасшифрокаЗвит1С.Записать();
				Если ФлагОтладки = Истина Тогда
					Сообщить("FREDO Звіт. Расшифровка записана (строк "+РасшифровкаОтчетаЗвит1С.Количество()+")");	
				КонецЕсли;
			Исключение
				ТекстОшибки = "Не вдалося зберегти розшифровку звіту!
							  |
							  |"+ОписаниеОшибки();
				
				Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
					Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
				КонецЕсли;

			КонецПопытки;
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНТЕРАКТИВНОЙ РАБОТЫ С FREDO Звіт

// Функция определяет, возможен ли запуск FREDO Звіт на данном компьютере
//
&НаКлиенте
Функция ВозможенЗапускЗвит1С(ВыводитьСообщенияОбОшибках)

	// Инициализировать отчет для администратора системы при включенном разделении данных (базе опубликованной по технологии Fresh) не нужно 
	Если Не ВозможенЗапускПриВключенномРазделенииДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Если ВыводитьСообщенияОбОшибках Тогда
			ПоказатьПредупреждение(,НСтр("ru='Работа с ""FREDO Звіт"" в режиме Веб-клиента не поддерживается. Воспользуйтесь тонким клиентом';uk='Робота з "" FREDO Звіт "" в режимі Веб-клієнта не підтримується. Скористайтеся тонким клієнтом'"));
		КонецЕсли;
		Возврат Ложь;
	#КонецЕсли
	
	// Определим, установлен ли FREDO Звіт
	Если глКомпонентаЗвит1С <> Неопределено Тогда
		// При инициализации менеджера компонента еще не определена
		Если глКомпонентаЗвит1С.IsZvitInstalled() = 0 Тогда
			Если ВыводитьСообщенияОбОшибках Тогда
				ПоказатьПредупреждение(,НСтр("ru='Ошибка подключения к системе ""FREDO Звіт""
|Приложение ""FREDO Звіт"" не установлено';uk='Помилка підключення до системи ""FREDO Звіт""
|Додаток ""FREDO Звіт"" не встановлено'"));	
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроверитьОрганизацию(ВыводитьСообщенияОбОшибках);
	
КонецФункции

&НаСервере
Функция ПроверитьОрганизацию(ВыводитьСообщенияОбОшибках)

	// Проверим есть ли организации
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ
	|	И Организации.ДатаНачалаИспользованияЗвит1С <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ДатаНачалаИспользованияЗвит1С", ТекущаяДата());
    РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Если ВыводитьСообщенияОбОшибках Тогда
			
			
			
			ТекстВопроса = "На "+Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")+
			               НСтр("ru=' нет организаций использующих ""FREDO Звіт"".
|Необходимо указать дату начала использования ""FREDO"" в карточке организации.';uk=' немає організацій, що використовують ""FREDO Звіт"".
|Необхідно зазначити дату початку використання ""FREDO"" у картці організації.'");
								 
			Сообщить(ТекстВопроса);
		КонецЕсли;
		
	    Возврат Ложь;
		
	КонецЕсли;	
	
	Возврат Истина;

КонецФункции // ()

// Функция выполняющая подключение dll
//
&НаКлиенте
Функция Инициализация(ВыводитьСообщенияОбОшибках) Экспорт
	
	Если Не ВозможенЗапускЗвит1С(ВыводитьСообщенияОбОшибках) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	глКомпонентаЗвит1С = Неопределено;
		
	Попытка
		
		ПодключениеУспешно = ПодключитьВнешнююКомпоненту("Отчет.РегламентированныйОтчетМенеджерЗвит1С.Макет.ZvitAPI_dll","Zvit1С", ТипВнешнейКомпоненты.COM);
		
		Если Не ПодключениеУспешно Тогда
			
			// при первом запуске звита компоненту нужно доставить с сервера на клиент
			Если ВыводитьСообщенияОбОшибках Тогда
				Попытка
					Сообщить("Виконується установка зовнішньої компоненти для роботи з ""FREDO Звіт""...");
					
					ИсточникОтчета = "РегламентированныйОтчетМенеджерЗвит1С";
					                                                           
					ВариантОткрытия = РегламентированнаяОтчетностьВызовСервера.ВариантОткрытияОтчета(ИсточникОтчета);
					
					НачатьУстановкуВнешнейКомпоненты(Новый ОписаниеОповещения("УстановкаКомпонентыЗвит1СЗавершение", ЭтотОбъект),ВариантОткрытия + ".РегламентированныйОтчетМенеджерЗвит1С.Макет.ZvitAPI_dll");
					Возврат Ложь;
					
				Исключение
					ВызватьИсключение " Не вдалося встановити зовнішню компоненту ""ZvitAPI.dll";				
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		глКомпонентаЗвит1С = Новый("AddIn.Zvit1С.ZvitAPI");	

	Исключение
		
		Если ВыводитьСообщенияОбОшибках Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина
			КонецЕсли;
			Сообщить(НСтр("ru=""Ошибка при загрузке компоненты 'ZvitAPI.dll'!"";uk=""Помилка при завантаженні компоненти 'ZvitAPI.dll'!"""), СтатусСообщения.Важное);
			Сообщить(ИнформацияОбОшибке.Описание, СтатусСообщения.БезСтатуса);
		КонецЕсли;
		
	КонецПопытки;
	
	Если глКомпонентаЗвит1С = Неопределено Тогда
				
		Возврат Ложь;
		
	КонецЕсли;
	
	// Установим представление 1С для FREDO Звіт
	глКомпонентаЗвит1С.SetConnectionInfo("" +" ("+СтрокаСоединенияИнформационнойБазы()+")");		
		
	// Восстановим состояние отладки
	ФлагОтладки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ФлагОтладки",);
	Если ФлагОтладки = Неопределено Тогда
		ФлагОтладки = Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановкаКомпонентыЗвит1СЗавершение(ДопПараметры) Экспорт
	
	// перепроверим, а реально ли успешно 
	УстановкаКомпонентыПрошлаУспешно = ПодключитьВнешнююКомпоненту("Отчет.РегламентированныйОтчетМенеджерЗвит1С.Макет.ZvitAPI_dll","Zvit1С", ТипВнешнейКомпоненты.COM); 
	Если УстановкаКомпонентыПрошлаУспешно Тогда	
		Сообщить(НСтр("ru='Установка внешней компоненты для работы с ""FREDO Звіт"" выполнена успешно!"
	"Повторите подключение к ""FREDO Звіт""';uk='Встановлення зовнішньої компоненти для роботи з ""FREDO Звіт"" виконано успішно!"
	"Повторіть підключення до ""FREDO Звіт""'"));
	Иначе		
		Сообщить(НСтр("ru='Установка внешней компоненты для работы с ""FREDO Звіт"" не выполнена!';uk='Встановлення зовнішньої компоненти для роботи з ""FREDO Звіт"" не виконано!'"));
	КонецЕсли; 

КонецПроцедуры

////&НаКлиенте

 &НаСервереБезКонтекста
Функция ПолучитьИмяПользователя()

	Возврат СокрП(Лев(СокрЛП(ИмяПользователя()), 50));

КонецФункции

// Функция выполняет запуск FREDO Звіт. Возвращает Истина в случае успеха
//
&НаКлиенте
Функция ЗапуститьЗвит1С(НаПереднийПлан = Неопределено, Организация = Неопределено) Экспорт
	
	// Возможно FREDO Звіт уже запущен
	Если глКомпонентаЗвит1С.IsZvitActive() = 1 Тогда
		Если Не ВерсияЗвит1САктуальна() Тогда
			// Сессия FREDO Звіт запущена для обновления
			Возврат Ложь;
		КонецЕсли;
		Если НаПереднийПлан = Истина Тогда
			глКомпонентаЗвит1С.BringZvitToFront();
		ИначеЕсли НаПереднийПлан = Ложь Тогда
			глКомпонентаЗвит1С.Bring1CToFront();
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;

	Если Не ВозможенЗапускЗвит1С(Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(НСтр("ru='Запуск FREDO Звіт';uk='Запуск FREDO Звіт'"));	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		// Выполним запуск выбрав сразу определенную организацию
		//ПользовательЗвит1С = СокрП(Лев(СокрЛП(ИмяПользователя()), 50));
		ПользовательЗвит1С = ПолучитьИмяПользователя();
		
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("","КодПоЕДРПОУ");
		СписокПоказателей.Добавить("","НаименованиеПолное");
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СписокПоказателей);
		
		КодПоЕДРПОУ        = СведенияОбОрганизации.КодПоЕДРПОУ;
		НаименованиеПолное = СведенияОбОрганизации.НаименованиеПолное;
		
		РезультатЗапуска = глКомпонентаЗвит1С.LaunchZvitDirect(ПользовательЗвит1С, КодПоЕДРПОУ, НаименованиеПолное);
	Иначе		
		
		РезультатЗапуска = глКомпонентаЗвит1С.LaunchZvit();	
		
	КонецЕсли;
	
	// Установлено несколько копий FREDO Звіт. При выборе 
	// рабочего каталога с FREDO Звіт пользователь нажал "Відмінити"
	Если    РезультатЗапуска = Неопределено 
		ИЛИ РезультатЗапуска = 0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Ошибка подключения к системе ""FREDO Звіт"".';uk= 'Помилка підключення до системи ""FREDO Звіт"".'"));	
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ВерсияЗвит1САктуальна() Тогда
		// Сессия FREDO Звіт запущена для обновления
		Возврат Ложь;
	КонецЕсли;
	
	Если НаПереднийПлан = Истина Тогда
		глКомпонентаЗвит1С.BringZvitToFront();
	ИначеЕсли НаПереднийПлан = Ложь Тогда
		глКомпонентаЗвит1С.Bring1CToFront();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет закрывает FREDO Звіт. Возвращает Истина в случае успеха
//
&НаКлиенте
Процедура ЗавершитьЗвит1С(Отказ) Экспорт
	
	// Внимание! Вызов инициируется из конфигурации
	Если глКомпонентаЗвит1С = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагОтладки Тогда
		Возврат;
	КонецЕсли;
	
	Если глКомпонентаЗвит1С.IsZvitActive() = 1 Тогда
		Если глКомпонентаЗвит1С.ExitZvit() = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru='Необходимо в начале закрыть окно программы ""FREDO Звіт""!';uk='Необхідно на початку закрити вікно програми ""FREDO Звіт""!'"));			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит сообщение в окне FREDO Звіт. 
// Сообщения должны быть оформлены только на украинском языке, т.к. FREDO Звіт
// не поддерживает мультиязычность
//
&НаКлиенте
Процедура ПредупреждениеЗвит1С(ТекстПредупреждения, Заголовок = "", УровеньСообщения = 3) Экспорт

	Если ФлагОтладкиПакетноеТестирование Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ФлагОтладки Тогда
			глКомпонентаЗвит1С.BringZvitToFront();
		КонецЕсли;
		
	    глКомпонентаЗвит1С.Show1CMessage(ТекстПредупреждения, УровеньСообщения);
		
		Если ФлагОтладки Тогда
			глКомпонентаЗвит1С.Bring1CToFront();
		КонецЕсли;
		
	Исключение
	    ПоказатьПредупреждение(,ТекстПредупреждения, , Заголовок);
	КонецПопытки;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИнформациюОбОрганизациях()

	МассивОрганизаций = Новый Массив;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.НаименованиеПолное
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ
	|	И Организации.ДатаНачалаИспользованияЗвит1С <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл			
		МассивОрганизаций.Добавить(Новый Структура("Имя, Код", Выборка.НаименованиеПолное, РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Ссылка, ТекущаяДата(), СписокПоказателей).КодПоЕДРПОУ));
	КонецЦикла;
	
	Возврат МассивОрганизаций;	

КонецФункции // ()

// Процедура обработчик внешнего события
//
&НаКлиенте
Процедура ОбработкаВнешнегоСобытияЗвит1С(Источник, Событие, Данные) Экспорт

	Команда  = Врег(Событие);
	ИДВызова = Данные;
	
	Если ФлагОтладки Тогда
		Сообщить("FREDO Звіт. Зовнішнє подія (подія """+Событие+""", дані """ + Данные+""")");
	КонецЕсли;
	
	Если Команда = "USER" Тогда    
		
		ПользовательЗвит1С = ПолучитьИмяПользователя();
		глКомпонентаЗвит1С.SaveUser(ПользовательЗвит1С);                 
		
	ИначеЕсли Команда = "REQUESTDBINFO" Тогда
		
		базаИнфо = глКомпонентаЗвит1С.GETDBINFO( ИДВызова );
		
		базаИнфо.Name = СтрокаСоединенияИнформационнойБазы();
			
		Выборка = ПолучитьИнформациюОбОрганизациях();
		Для Каждого Инфо Из Выборка Цикл
			базаИнфо.AddFirm(Инфо.Код, Инфо.Имя);
		КонецЦикла;
		
		глКомпонентаЗвит1С.SaveDBInfo(базаИнфо);
		
		СисИнфо = Новый СистемнаяИнформация;
		ВерсияПриложения = СисИнфо.ВерсияПриложения;
		
	ИначеЕсли Команда = "BEGINREPGROUP" Тогда    
		// начало заполнение группы отчетов
		
		// инициализация структуры
		// структура - код отчета + данные
		ДанныеОтчетов 	   = Новый Структура();
		ПоместитьВоВременноеХранилище(ДанныеОтчетов, АдресВременногоХранилищаДанныеОтчетов);
		
		РасшифровкиОтчетов = Новый Структура();
		ПоместитьВоВременноеХранилище(РасшифровкиОтчетов, АдресВременногоХранилищаРасшифровкиОтчетов);
		
	ИначеЕсли Команда = "ENDREPGROUP" Тогда    
		// конец заполнения группы отчетов
		
		// очистка структуры
		ПоместитьВоВременноеХранилище(ДанныеОтчетов, АдресВременногоХранилищаДанныеОтчетов);
		
		ПоместитьВоВременноеХранилище(РасшифровкиОтчетов, АдресВременногоХранилищаРасшифровкиОтчетов);
				
	ИначеЕсли Команда = "REPORT" Тогда
	
		// Заполнение отчета из группы связанных отчетов
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			ОтчетЗвит1С    = Данные.ОтчетЗвит1С;                // режим тестирования
			ОткрыватьОтчет = Данные.ОткрыватьОтчет;
		Иначе
			ОтчетЗвит1С = глКомпонентаЗвит1С.GetEmptyReport(ИДВызова);  // рабочий режим
			ОткрыватьОтчет = Ложь;
		КонецЕсли;
		
		// По-умолчанию используются единицы и точности которые устанавливаются при открытии отчета (по умолчанию)
		ИмяСхемы = ОтчетЗвит1С.CharCode;
				
		// Определяем используемый для заполнения имя отчета и имя формы		
		СоответствиеОтчета = ПолучитьСоответствиеОтчетов(ИмяСхемы);
		
		Если СоответствиеОтчета = Неопределено Тогда 
			
			Если (НЕ РазделениеВключено()) И (НЕ мОбновлениеСправочникаРеглОтчетовВыполнено = Истина) Тогда
				
				// перезаполняем список отчетов
				ЗаполнитьСоответствиеОтчетов(Неопределено, Истина);
				мОбновлениеСправочникаРеглОтчетовВыполнено = Истина;
				
				// снова пытаемся получить нужный отчет
				СоответствиеОтчета = ПолучитьСоответствиеОтчетов(ИмяСхемы);
				
			КонецЕсли;
			
			Если СоответствиеОтчета = Неопределено Тогда 
				// Проверим используется ли предыдущая схема
				СоответствиеОтчета = ПолучитьСоответствиеОтчетов(ИмяСхемы, Истина);
				Если ЗначениеЗаполнено(СоответствиеОтчета) Тогда
					// нашли старую схему
					ТекстОшибки = "Автоматичне заповнення звіту """+ИмяСхемы+"""
					|у даній версії облікової системи BAS ще не реалізовано. 
					|Перевірте, чи встановлені всі оновлення облікової системи та всі випущені 
					|для неї зовнішні звіти. Якщо у останніх оновленнях немає необхідної версії 
					|звіту - дочекайтесь наступного оновлення чи випуску зовнішнього звіту.
					|Докладніше див.:   https://its.bas-soft.eu/bmk/baserc";
					глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
					
					Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
						Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
					КонецЕсли;
				Иначе	
					// Заполнение не предусмотрено в 1С
					ТекстОшибки = "Заповнення звіту """+ИмяСхемы+"""
								  |даними з облікової системи BAS не передбачено!";
					глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
					
					Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
						Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
					КонецЕсли;
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		Если СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная"
		 ИЛИ СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной" Тогда
			// Два исключения из общих правил
			ТекстОшибки = "Заповнення звіту """+ИмяСхемы+"""
						  |Виконується з форми відповідного документа облікової системи BAS!";
			глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
			
			Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании это сообщение не выводится, продублируем его
				Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;		
		Если СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетОКонтролируемыхОперациях" Тогда
			// еще одно исключение из общих правил
			ТекстОшибки = "Заповнення даного звіту необхідно ініціювати з підприємства! 
						  |Перейдіть у вікно підприємства і сформуйте звіт, натиснувши на кнопку ""Передати дані в FREDO Звіт"" на формі звіту";
			глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);
			
			Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании это сообщение не выводится, продублируем его
				Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;		
		
		ДатаНачалаПериодаОтчета = '00010101';
		ДатаКонцаПериодаОтчета  = '00010101';
		Периодичность = Неопределено;
		
		ТипПериода     = ОтчетЗвит1С.PeriodType;
		ДатаПериода    = ОтчетЗвит1С.PeriodDate;
		
		ОпределитьТипПериодаЗвит1С(ДатаПериода, ТипПериода, Периодичность, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
		
		// Исключение из общих правил. Период отчета 5-ПН строится за 10 дней
		Если СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчет5ПН" Тогда
			Попытка                                                    
				ДатаКонцаПериодаОтчета = ОтчетЗвит1С.GetValue("MAIN", "1C_DATE");				
			Исключение 
			КонецПопытки;
			
			Если Не ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) Тогда
				ДатаКонцаПериодаОтчета = ТекущаяДата();	
			КонецЕсли;
			ДатаКонцаПериодаОтчета  = КонецДня(ДатаКонцаПериодаОтчета);
			ДатаНачалаПериодаОтчета = НачалоДня(ДатаКонцаПериодаОтчета - 10*24*60*60);
			
		ИначеЕсли СоответствиеОтчета.ИмяОтчета = "РегламентированныйОтчетДекларацияОПрибыли" Тогда
			// Отчеты за II-III и II-IV кварталы 2011 года в FREDO Звіт хранятся
			// с периодом "III квартал" и "IV квартал" соответственно
			Если ДатаКонцаПериодаОтчета = КонецКвартала('20110701')
			 ИЛИ ДатаКонцаПериодаОтчета = КонецКвартала('20111001') Тогда
				ДатаНачалаПериодаОтчета = НачалоКвартала('20110401');			
			КонецЕсли;
			
		КонецЕсли;
		
 		ОрганизацииЗвит1С = ОпределитьТекущуюОрганизациюЗвит1С(ОтчетЗвит1С.FIRM_EDRPOU, ДатаНачалаПериодаОтчета);
		Если ОрганизацииЗвит1С.Количество() = 0 Тогда
			ТекстОшибки = "В обліковій системі BAS не знайдено фірму з ЄДРПОУ """+ОтчетЗвит1С.FIRM_EDRPOU+""""+ " на "+Формат(ДатаНачалаПериодаОтчета, "Л=uk_UA; ДФ=dd.MM.yyyy")+"
						  |Заповенення звіту "+ИмяСхемы+" неможливе";
						  
			глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);	
			
			Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
				Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ОрганизацииЗвит1С.Количество() > 1 Тогда
			ТекстОшибки = "В обліковій системі BAS знайдено декілька фірм з однаковим ЄДРПОУ """+ОтчетЗвит1С.FIRM_EDRPOU+""""+" на "+Формат(ДатаНачалаПериодаОтчета, "Л=uk_UA; ДФ=dd.MM.yyyy")+Символы.ПС;
			Для каждого ОрганизацияЗвит1С Из ОрганизацииЗвит1С Цикл
				ТекстОшибки = ТекстОшибки + Строка(ОрганизацияЗвит1С)+Символы.ПС;
			КонецЦикла;
			ТекстОшибки = ТекстОшибки + "Заповенення звіту "+ИмяСхемы+" неможливе";
						  
			глКомпонентаЗвит1С.CancelReport(ОтчетЗвит1С, ТекстОшибки);	
			
			Если ФлагОтладкиПакетноеТестирование Тогда	// При пакетном тестировании сообщения не выводятся, продублируем его
				Сообщить("FREDO Звіт. "+ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		ОрганизацияЗвит1С = ОрганизацииЗвит1С[0];
		
		Если ФлагОтладки Тогда
			Сообщить("FREDO Звіт. Запит заповнення звіту із FREDO Звіт (схема """+ИмяСхемы+""", тип періода """+ТипПериода+""", періодичність """+Периодичность+""")");
		КонецЕсли;

		ИмяСхемыЗвит1С = ИмяСхемы;
		
		НастройкаФормыОтчета = Новый Структура;
		НастройкаФормыОтчета.Вставить("мВыбраннаяФорма", 			СоответствиеОтчета.ИмяФормыОтчета);
		НастройкаФормыОтчета.Вставить("мДатаКонцаПериодаОтчета",	ДатаКонцаПериодаОтчета);
		НастройкаФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", 	ДатаНачалаПериодаОтчета);
		НастройкаФормыОтчета.Вставить("мПериодичность", 			Периодичность);
		НастройкаФормыОтчета.Вставить("Периодичность", 				Периодичность);
		НастройкаФормыОтчета.Вставить("мСкопированаФорма", 			Неопределено);
		НастройкаФормыОтчета.Вставить("мСохраненныйДок", 			Неопределено);
		НастройкаФормыОтчета.Вставить("Организация", 				ОрганизацияЗвит1С);
		НастройкаФормыОтчета.Вставить("ДатаПодписи", 				ТекущаяДата());
			
		ДанныеДляСохраненияРасшифровкиОтчета = Новый Структура;
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("Организация", 			 ОрганизацияЗвит1С);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаКонцаПериодаОтчета);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("Периодичность", 			 Периодичность);
		ДанныеДляСохраненияРасшифровкиОтчета.Вставить("ТипПериода", 			 ТипПериода);
		
		УстановаитьПараметрыЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета, ОткрыватьОтчет);
		
		// заполнение отчета будет произведено позже - из-за ассинхронности.
		//ЗаполнитьИСохранитьОтчетЗвит1С(ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ДанныеДляСохраненияРасшифровкиОтчета, ОткрыватьОтчет);
		//ИмяСхемыЗвит1С = "";
		
	ИначеЕсли Команда = "SHOWREPCELLDETAILS" ИЛИ Команда = "SHOWDETAILSROW" Тогда 
		// Расшифровка		
		// Здесь нужно получить сохраненную расшифровку
		// Определим какую расшифровку "Заказал" Звит1С
		ПараметрыРасшифровки = ПолучитьПараметрыРасшифровкиЗвит1С(ИДВызова);
		
		Если Команда = "SHOWDETAILSROW"
		   И ПараметрыРасшифровки.НомерСтрокиРасшифровки = 0 Тогда
			// вызвали "не ту" строку
			Возврат;
		КонецЕсли;
		
		// Поищем сохраненную расшифровку
		ПараметрыОтчета = ПолучитьРасшифровкуЗвит1С(ПараметрыРасшифровки.ИдОтчета);
		Если ПараметрыОтчета = Ложь Тогда
			Возврат;
		КонецЕсли;
	
		Если Команда = "SHOWREPCELLDETAILS" Тогда
			ПараметрыОтчета.Вставить("ПередаватьДанныеВСистемуЗвит1С", Истина);
		Иначе	
			ПараметрыОтчета.Вставить("ОткрыватьРасшифровкуСтрокиДляЗвит1С", Истина);
			ПараметрыОтчета.Вставить("НомерСтрокиРасшифровкиЗвит1С", ПараметрыРасшифровки.НомерСтрокиРасшифровки);
		КонецЕсли;
		
		ИДИменПоказателей = Новый Массив();
		ИДИменПоказателей.Добавить(ПараметрыРасшифровки.ИмяЯчейки);
		
		РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ПараметрыОтчета.ИмяСхемыЗвит1С, Истина, ИДИменПоказателей, ПараметрыОтчета);
		
		//Если Команда = "SHOWREPCELLDETAILS" Тогда
		//	глКомпонентаЗвит1С.SaveDetails();
		//Иначе
		//	// Расшифровка конкретной строки из Звит1С,
		//	// сделаем эмуляцию вызова подробной расшифровки конкретной строки
		//	Расшифровка = ФормаРасшифровки.ЭлементыФормы.ПолеРасшифровки.Область(ПараметрыРасшифровки.НомерСтрокиРасшифровки, 2, ПараметрыРасшифровки.НомерСтрокиРасшифровки, 2).Расшифровка;
		//	Если Расшифровка <> Неопределено Тогда
		//		ФормаРасшифровки.ПолеРасшифровкиОбработкаРасшифровки(Неопределено, Расшифровка, Неопределено);				
		//		глКомпонентаЗвит1С.Bring1CToFront();
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдКонфигурации()

	Возврат	 РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();

КонецФункции // ()


// Функция открывает форму для пакетной выгрузки налоговых документов в FREDO Звіт
//
&НаКлиенте
Функция ОткрытьФормуВыгрузкиНалоговыхДокументов() Экспорт
	
	Если ЭтоВнешнийОтчет() Тогда
		
		Возврат ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаВыгрузкиИПроверкиНалоговыхДокументов", Новый Структура("мЭтоИсходящиеНалоговыеДокументы", Истина), , 1);
		
	Иначе
		
		Возврат ОткрытьФорму("Отчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаВыгрузкиИПроверкиНалоговыхДокументов", Новый Структура("мЭтоИсходящиеНалоговыеДокументы", Истина), , 1);
		
	КонецЕсли;
	
КонецФункции

// Функция открывает форму для пакетной проверки статуса регистрации входящих налоговых документов
//
&НаКлиенте
Функция ОткрытьФормуПроверкиВходящихНалоговыхДокументов() Экспорт
	
	Если ЭтоВнешнийОтчет() Тогда
		
		Возврат ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаВыгрузкиИПроверкиНалоговыхДокументов", Новый Структура("мЭтоИсходящиеНалоговыеДокументы", Ложь), , 0);
		
	Иначе
		
		Возврат ОткрытьФорму("Отчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаВыгрузкиИПроверкиНалоговыхДокументов", Новый Структура("мЭтоИсходящиеНалоговыеДокументы", Ложь), , 0);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОткрытьФормуЗагрузкиВходящихНалоговыхДокументов() Экспорт
	
	Если ЭтоВнешнийОтчет() Тогда
		
		ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаЗагрузкиВходящихНалоговыхДокументов");
		
	Иначе
		
		ОткрытьФорму("Отчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаЗагрузкиВходящихНалоговыхДокументов");
		
	КонецЕсли;
	
	глКомпонентаЗвит1С.Bring1CToFront();			
	
КонецФункции


&НаКлиенте
Функция ОткрытьФормуЗагрузкиВходящихПервичныхДокументов(ТипДокумента) Экспорт
	
	Если ЭтоВнешнийОтчет() Тогда
		
		ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаЗагрузкиПервичныхДокументов",Новый Структура("ТипДокумента", ТипДокумента));
		
	Иначе
		
		ОткрытьФорму("Отчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаЗагрузкиПервичныхДокументов",Новый Структура("ТипДокумента", ТипДокумента));
		
	КонецЕсли;
	
	глКомпонентаЗвит1С.Bring1CToFront();			
	
КонецФункции

&НаКлиенте
Функция ОткрытьФормуВыгрузкиПервичныхДокументов(ТипДокумента) Экспорт
	
	Если ЭтоВнешнийОтчет() Тогда
		
		Возврат ОткрытьФорму("ВнешнийОтчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаВыгрузкиПервичныхДокументов",Новый Структура("ТипДокумента", ТипДокумента),,ТипДокумента);
		
	Иначе
		
		Возврат ОткрытьФорму("Отчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.ФормаВыгрузкиПервичныхДокументов",Новый Структура("ТипДокумента", ТипДокумента),,ТипДокумента);
		
	КонецЕсли;
	
	глКомпонентаЗвит1С.Bring1CToFront();			
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С НАЛОГОВЫМИ ДОКУМЕНТАМИ

// Функция добавляет переданный налоговый документ в форму пакетной выгрузки и проверки FREDO Звіт
//
&НаКлиенте
Функция ВыгрузитьДокумент(ДокументыМассив, ФормаДокумента = Неопределено) Экспорт
	
	МассивОтобранныхДокументов = новый Массив;
	
	ТекЭтоИсходящиеНалоговыеДокументы = Неопределено;
	ТекОрганизация = Неопределено;
	
	Для каждого ДокументСсылка Из ДокументыМассив Цикл
		
		// позволяем добавлять в обработку документы только одного типа и только от одной не пустой организации. 
		// Определяем по данным первого подходящего документа в массиве
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НалоговаяНакладная")
		 ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
			ЭтоИсходящиеНалоговыеДокументы = Истина;
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегистрацияВходящегоНалоговогоДокумента") Тогда
			ЭтоИсходящиеНалоговыеДокументы = Ложь;
		Иначе
			Сообщить("Документ " + ДокументСсылка + " пропущено: неприпустимий вид документа");
			Продолжить;	
		КонецЕсли;
		
		Если ТекЭтоИсходящиеНалоговыеДокументы = Неопределено Тогда
			ТекЭтоИсходящиеНалоговыеДокументы = ЭтоИсходящиеНалоговыеДокументы;	
		ИначеЕсли НЕ ТекЭтоИсходящиеНалоговыеДокументы = ЭтоИсходящиеНалоговыеДокументы Тогда
			Сообщить("Документ " + ДокументСсылка + " пропущено: вид документа не відповідає виду першого обробленого документа");
			Продолжить;	
		КонецЕсли;
		
		Организация = ПолучитьОрганизациюДокумента(ДокументСсылка);
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Сообщить("Документ " + ДокументСсылка + " пропущено: пуста організація в документі");
			Продолжить;	
		КонецЕсли;
		
		Если ТекОрганизация = Неопределено Тогда
			ТекОрганизация = Организация;	
		ИначеЕсли НЕ ТекОрганизация = Организация Тогда
			Сообщить("Документ " + ДокументСсылка + " пропущено: організація не відповідає організації першого обробленого документа");
			Продолжить;	
		КонецЕсли;
		
		МассивОтобранныхДокументов.Добавить(ДокументСсылка);
		
	КонецЦикла;	
	
	Если НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Форма = ?(ЭтоИсходящиеНалоговыеДокументы, ОткрытьФормуВыгрузкиНалоговыхДокументов(), ОткрытьФормуПроверкиВходящихНалоговыхДокументов());	
	
	Форма.ДобавитьНалоговыйДокумент(МассивОтобранныхДокументов, ТекОрганизация, ФормаДокумента);
	
КонецФункции

&НаКлиенте
Функция ВыгрузитьПервичныйДокумент(Документ, ФормаДокумента = Неопределено) Экспорт
	
	Если Не ТипЗнч(Документ) = Тип("Массив") Тогда
		ДокументыМассив	= Новый Массив();
		ДокументыМассив.Добавить(Документ);
	Иначе 	
	    ДокументыМассив = Документ;
	КонецЕсли;
	
	МассивОтобранныхДокументов = новый Массив;
	
	ТекЭтоИсходящиеНалоговыеДокументы = Неопределено;
	ТекОрганизация = Неопределено;
	
	Для каждого ДокументСсылка Из ДокументыМассив Цикл
		// позволяем добавлять в обработку документы только одного типа и только от одной не пустой организации. 
		// Определяем по данным первого подходящего документа в массиве
		
		ДопустимыеТипы = Новый Массив;
		ДопустимыеТипы.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		Если ИдКонфигурации() = "ЕРП" или ИдКонфигурации() = "BASУТ" Тогда
			ДопустимыеТипы.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));	
			ДопустимыеТипы.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
			ДопустимыеТипы.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
		Иначе	
			ДопустимыеТипы.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
			ДопустимыеТипы.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
			ДопустимыеТипы.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		КонецЕсли;
		
		Если ДопустимыеТипы.Найти(ТипЗнч(ДокументСсылка)) = Неопределено Тогда
			Сообщить("Документ " + ДокументСсылка + " пропущено: неприпустимий вид документа");
			Продолжить;
		КонецЕсли;
		
		Организация = ПолучитьОрганизациюДокумента(ДокументСсылка);
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Сообщить("Документ " + ДокументСсылка + " пропущено: пуста організація в документі");
			Продолжить;
		КонецЕсли;
		
		Если ТекОрганизация = Неопределено Тогда
			ТекОрганизация = Организация;	
		ИначеЕсли НЕ ТекОрганизация = Организация Тогда
			Сообщить("Документ " + ДокументСсылка + " пропущено: організація не відповідає організації першого обробленого документа");
			Продолжить;
		КонецЕсли;
		
		МассивОтобранныхДокументов.Добавить(ДокументСсылка);
		
		Если НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма = ОткрытьФормуВыгрузкиПервичныхДокументов(Неопределено);	
	
	Форма.ДобавитьПервичныйДокумент(МассивОтобранныхДокументов, ТекОрганизация, ФормаДокумента);
	
КонецФункции

// Функция открывает налоговый документ в FREDO Звіт
// 
&НаКлиенте
Функция ОткрытьДокументВЗвит1С(ДокументСсылка) Экспорт
		
	Если Не ЗапуститьЗвит1С(Неопределено, ПолучитьОрганизациюДокумента(ДокументСсылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = глКомпонентаЗвит1С.ShowReport(РегламентированнаяОтчетностьКлиентСервер.ПолучитьУникальныйИдентификаторДокумента(ДокументСсылка));
	
	Если Результат = 0 Тогда
		глКомпонентаЗвит1С.Bring1CToFront();		
		Возврат Ложь;
	КонецЕсли;

	глКомпонентаЗвит1С.BringZvitToFront();
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОрганизациюДокумента(ДокументСсылка)

	Возврат РегламентированнаяОтчетность.ПолучитьОрганизациюДокумента(ДокументСсылка);	

КонецФункции // ()


&НаКлиенте
Процедура УстановитьЗначенияПоляКарточкиОрганизации(Карточка, ИмяТаблицы, ИмяПоля, ЗначениеПоля)
	
	Попытка
		
		Карточка.SetValue(ИмяТаблицы, ИмяПоля, ЗначениеПоля);
		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("Заповнення картки підприємства. Передано дані. Назва таблиці: " + ИмяТаблицы + ". Назва поля: " + ИмяПоля + ". Значення: " + ЗначениеПоля);	
		КонецЕсли;
		
	Исключение
		
		Если ФлагОтладки ИЛИ ФлагОтладкиПакетноеТестирование Тогда
			Сообщить("Помилка при заповненні картки підприємства.  Назва таблиці: " + ИмяТаблицы + ". Назва поля: " + ИмяПоля + ". Значення: " + ЗначениеПоля, СтатусСообщения.Внимание);	
		КонецЕсли;
		
	КонецПопытки;

КонецПроцедуры


&НаСервере
Функция ОпределитьТипДокументаПоСсылкеНаСервере(Документ) Экспорт

	Результат  = Неопределено;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" 
		ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "BASУТ" Тогда
			
		Если    ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказКлиента") 
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			Результат = "Рахунок";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			
			Результат  = "Акт";
			
		ИначеЕсли НЕ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина)= "ERP25"
			И (ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			  ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
			
			Результат  = "Акт";
			
			// если есть только услуги - то акт, иначе - накладная
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	1
			                      |ИЗ
			                      |	Документ.РеализацияТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |	И НЕ Док.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
			                      |
			                      |ОБЪЕДИНИТЬ
			                      |
			                      |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	1
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |	И НЕ Док.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
								  
			Запрос.УстановитьПараметр("Документ", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если  Выборка.Следующий() Тогда
				Результат  = "Накладна";	
			КонецЕсли;
			
		ИначеЕсли РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина)= "ERP25"
			И (ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			  ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")) Тогда
			
			Результат  = "Акт";
			
			// если есть только услуги - то акт, иначе - накладная
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	1
			                      |ИЗ
			                      |	Документ.РеализацияТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |	И НЕ Док.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
			                      |
			                      |ОБЪЕДИНИТЬ
			                      |
			                      |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	1
			                      |ИЗ
			                      |	Документ.ПриобретениеТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |	И НЕ Док.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
								  
			Запрос.УстановитьПараметр("Документ", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если  Выборка.Следующий() Тогда
				Результат  = "Накладна";	
			КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			
			Результат  = "Накладна";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
			Результат = "Накладна";
		КонецЕсли;
		
	Иначе	
			
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			Результат = "Рахунок";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			Результат = "Рахунок";
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда

			Результат = "Накладна";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			
			Результат = "Акт";	
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Результат  = "Накладна";
			
			// если есть только услуги - то акт, иначе - накладная
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""Товары"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.РеализацияТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |
			                      |ОБЪЕДИНИТЬ
			                      |
			                      |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""Услуги""
			                      |ИЗ
			                      |	Документ.РеализацияТоваровУслуг.Услуги КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ");
			Запрос.УстановитьПараметр("Документ", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если  Выборка.Следующий()
				И Выборка.ВидНоменклатуры = "Услуги" Тогда
				Результат  = "Акт";	
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Результат  = "Накладна";
			
			// если есть только услуги - то акт, иначе - накладная
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	""Товары"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
								  
			                      |ОБЪЕДИНИТЬ
								  |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""Оборудование"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |
								  
								  |ОБЪЕДИНИТЬ
								  |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""ОбъектыСтроительства"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
								  
								  |ОБЪЕДИНИТЬ
								  |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""БланкиСтрогогоУчета"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.БланкиСтрогогоУчета КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
								  
								  |ОБЪЕДИНИТЬ
								  |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""Услуги""
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Услуги КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ");
								  
			Запрос.УстановитьПараметр("Документ", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если  Выборка.Следующий()
				И Выборка.ВидНоменклатуры = "Услуги" Тогда
				Результат  = "Акт";	
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ОпределитьТипДокументаПоСсылке(Документ) Экспорт
	
	Возврат ОпределитьТипДокументаПоСсылкеНаСервере(Документ);

КонецФункции

&НаКлиенте
Функция ОпределитьИмяФормыВыгрузки(Документ) Экспорт

	Возврат "ФормаОтчета" + ОпределитьИмяФормыВыгрузкиНаСервере(Документ);
	
КонецФункции

&НаСервере
Функция ОпределитьИмяФормыВыгрузкиНаСервере(Документ)

	БазовыйТип = ОпределитьТипДокументаПоСсылкеНаСервере(Документ);
	Если БазовыйТип = "Рахунок" Тогда
		БазовыйТип = "Счет";
	ИначеЕсли БазовыйТип = "Накладна" Тогда
		БазовыйТип = "Накладная";
		Если ИдКонфигурации() = "ЕРП" ИЛИ ИдКонфигурации() = "BASУТ" Тогда
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда	
					БазовыйТип = "ВозвратнаяНакладная";
			КонецЕсли;		
		Иначе
		     Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда	
					БазовыйТип = "ВозвратнаяНакладная";
			КонецЕсли;		
		КонецЕсли;
	ИначеЕсли БазовыйТип = "Акт" Тогда
		БазовыйТип = "Акт";
		Если НЕ (ИдКонфигурации() = "ЕРП" ИЛИ ИдКонфигурации() = "BASУТ") Тогда
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда	
				БазовыйТип = "АктПроизвУслуг";
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли БазовыйТип = Неопределено Тогда	
		БазовыйТип = "";
	КонецЕсли;	
	
	Если УчетнаяПолитика.ПлательщикНДС(Документ.Организация, Документ.Дата) Тогда
		
		Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" 
			ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "BASУТ" Тогда
			Если Документ.ЦенаВключаетНДС Тогда
				ПараметрыНДС = "СНДС";
			Иначе	
				ПараметрыНДС = "БезНДС";
			КонецЕсли;
		Иначе	
			Если Документ.СуммаВключаетНДС Тогда
				ПараметрыНДС = "СНДС";
			Иначе	
				ПараметрыНДС = "БезНДС";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат БазовыйТип + ПараметрыНДС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВозможенЗапускПриВключенномРазделенииДанных()
	//Возврат Не (ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()); 
	Перем Результат;
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина) = "ERP25" Тогда
		ВЫПОЛНИТЬ("Результат = ОбщегоНазначения.РазделениеВключено() И ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей()")
	Иначе	
		ВЫПОЛНИТЬ("Результат = ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()"); 	
	КонецЕсли;
	Возврат Не Результат; 	
КонецФункции

&НаСервереБезКонтекста
Функция РазделениеВключено()
	Перем Результат;
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина) = "ERP25" Тогда
		ВЫПОЛНИТЬ("Результат = ОбщегоНазначения.РазделениеВключено()")
	Иначе	
		ВЫПОЛНИТЬ("Результат = ОбщегоНазначенияПовтИсп.РазделениеВключено()"); 	
	КонецЕсли;
	Возврат Результат; 	
КонецФункции






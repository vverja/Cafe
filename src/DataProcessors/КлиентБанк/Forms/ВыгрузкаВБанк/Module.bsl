
&НаКлиенте
Перем СуммыПлатежейКВыгрузке;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьТаблицуСчетов();
	
	Если Параметры.Свойство("БанковскийСчет")
		И ЗначениеЗаполнено(Параметры.БанковскийСчет) Тогда
		
		СтрокиТаблицы = Объект.БанковскиеСчета.НайтиСтроки(Новый Структура("Ссылка", Параметры.БанковскийСчет));
		Если СтрокиТаблицы.Количество() Тогда
			СтрокиТаблицы[0].Пометка = Истина;
			Объект.СписокСчетов.Добавить(СтрокиТаблицы[0].Ссылка);
			ОбновитьСписокПлатежей();
			ИндексСтрокиСчета = Объект.БанковскиеСчета.Индекс(СтрокиТаблицы[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПериодов();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Объект.ТолькоНевыгруженные = (ТолькоНевыгруженные = 1);
	Если Период = НСтр("ru='Все время';uk=' Увесь час'") Тогда
		Объект.ДатаНачалаВыгрузки  = '00010101';
		Объект.ДатаКонцаВыгрузки   = '00010101';
	ИначеЕсли Период = "ЗаДату" Тогда
		Объект.ДатаНачалаВыгрузки  = НачалоДня(ДатаОтбор);
		Объект.ДатаКонцаВыгрузки   = КонецДня(ДатаОтбор);
	ИначеЕсли ТипЗнч(Период) = Тип("Дата") Тогда
		Объект.ДатаНачалаВыгрузки  = Период;
		Объект.ДатаКонцаВыгрузки   = КонецДня(Период);
	ИначеЕсли Период = НСтр("ru='Сегодня';uk='Сьогодні'") Тогда
		Объект.ДатаНачалаВыгрузки  = ТекущаяДата();
		Объект.ДатаКонцаВыгрузки   = КонецДня(ТекущаяДата());
	ИначеЕсли Период = НСтр("ru='Три дня';uk='Три дні'") Тогда
		Объект.ДатаНачалаВыгрузки  = ТекущаяДата() - 3 * 24 * 3600;
		Объект.ДатаКонцаВыгрузки   = КонецДня(ТекущаяДата());
	ИначеЕсли Период = НСтр("ru='Неделю';uk='Тиждень'") Тогда		
		Объект.ДатаНачалаВыгрузки  = ТекущаяДата() - 7 * 24 * 3600;
		Объект.ДатаКонцаВыгрузки   = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПодвал();
	
	Если Объект.СписокСчетов.Количество() = 1 Тогда
		БанковскийСчет = Объект.СписокСчетов[0].Значение;
		Элементы.БанковскиеСчета.ТекущаяСтрока = ИндексСтрокиСчета;
	КонецЕсли;
	
	ВозможностьВыбораФайлов = ПодключитьРасширениеРаботыСФайлами();
	
КонецПроцедуры

 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаБанковскихСчетов

&НаКлиенте
Процедура БанковскиеСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	
	Если Поле.Имя = "БанковскиеСчетаСсылка" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	ИначеЕсли Поле.Имя = "БанковскиеСчетаНастройкаОбмена" Тогда
 	   	Если ТекущиеДанные.Выгружается Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура БанковскиеСчетаПометкаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьПометкуСчета", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаНастройкаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВозможностьВыбораФайлов Тогда
		ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
		ВыборФайлаОбменаСБанком(ТекущиеДанные, "Выгрузка");
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаНастройкаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.НастройкаОбмена) Тогда
		ФинансыКлиент.ОткрытьФайлДляПросмотра(
			"Объект.БанковскиеСчета[" + Строка(Элементы.БанковскиеСчета.ТекущаяСтрока) + "].НастройкаОбмена",
			ТекущиеДанные.НастройкаОбмена, ТекущиеДанные.Кодировка, НСтр("ru='Файл выгрузки';uk='Файл вивантаження'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаНастройкаОбменаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	ТекущиеДанные.ПравилоФайловогоОбменаСБанками = ТекущиеДанные.НастройкаОбмена;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаПлатежей

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если Период = НСтр("ru='Все время';uk=' Увесь час'") Тогда

		Объект.ДатаНачалаВыгрузки  = '00010101';
		Объект.ДатаКонцаВыгрузки   = '00010101';
		
	ИначеЕсли Период = "ЗаДату" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтаФорма, );
		ПоказатьВводДаты(Оповещение, ТекущаяДата(), "Дата отбора платежей", ЧастиДаты.Дата);
		Возврат;
		
	ИначеЕсли ТипЗнч(Период) = Тип("Дата") Тогда
		
		Объект.ДатаНачалаВыгрузки  = Период;
		Объект.ДатаКонцаВыгрузки   = КонецДня(Период);
	ИначеЕсли Период = НСтр("ru='Сегодня';uk='Сьогодні'") Тогда
		
		Объект.ДатаНачалаВыгрузки  = ТекущаяДата();
		Объект.ДатаКонцаВыгрузки   = КонецДня(ТекущаяДата());
		
	ИначеЕсли Период = НСтр("ru='Три дня';uk='Три дні'") Тогда
		
		Объект.ДатаНачалаВыгрузки  = ТекущаяДата() - 3 * 24 * 3600;
		Объект.ДатаКонцаВыгрузки   = КонецДня(ТекущаяДата());
		
	ИначеЕсли Период = НСтр("ru='Неделю';uk='Тиждень'") Тогда
		Объект.ДатаНачалаВыгрузки  = ТекущаяДата() - 7 * 24 * 3600;
		Объект.ДатаКонцаВыгрузки   = КонецДня(ТекущаяДата());
		
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "Дату" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект);
		
		ПоясняющийТекст = НСтр("ru='Выберите дату выгружаемых документов';uk='Виберіть дату документів, що вивантажуються'") + " ";
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДаты",
			Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),
			,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элемент.ОграничениеТипа = ОписаниеТиповДата;
		
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РедактированиеТекста = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Объект.ДатаНачалаВыгрузки  = НачалоДня(ВыбраннаяДата);
		Объект.ДатаКонцаВыгрузки   = КонецДня(ВыбраннаяДата);
		Период = ВыбраннаяДата;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элементы.Период.ОграничениеТипа = ОписаниеТиповДата;
		
		Элементы.Период.КнопкаВыбора = Истина;
		Элементы.Период.РедактированиеТекста = Истина;
	Иначе
		
		Если ТипЗнч(Период) = Тип("Дата") Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ДатаНачалаВыгрузки  = '00010101' И Объект.ДатаКонцаВыгрузки = '00010101' Тогда
			Период = НСтр("ru='Все время';uk=' Увесь час'");
		ИначеЕсли Объект.ДатаНачалаВыгрузки = ТекущаяДата() И Объект.ДатаКонцаВыгрузки = КонецДня(ТекущаяДата()) Тогда
			Период = НСтр("ru='Сегодня';uk='Сьогодні'");
		ИначеЕсли Объект.ДатаНачалаВыгрузки = ТекущаяДата() - 3 * 24 * 3600 И Объект.ДатаКонцаВыгрузки = КонецДня(ТекущаяДата()) Тогда
			Период = НСтр("ru='Три дня';uk='Три дні'");
		ИначеЕсли Объект.ДатаНачалаВыгрузки = ТекущаяДата() - 7 * 24 * 3600 И Объект.ДатаКонцаВыгрузки = КонецДня(ТекущаяДата()) Тогда
			Период = НСтр("ru='Неделю';uk='Тиждень'");
			
		КонецЕсли;
	КонецЕсли;
	ПериодПриИзмененииНаСервере();
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеВыгруженныеПриИзменении(Элемент)
	
	Объект.ТолькоНевыгруженные = (ТолькоНевыгруженные = 1);
	
	ОбновитьСписокПлатежей();
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКВыгрузкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Поле.Имя = "ДокументыКВыгрузкеВыгружать" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКВыгрузке.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Выгружать, 1, -1);
	
	КоличествоКВыгрузке = КоличествоКВыгрузке + 1 * Знак;
	
	СуммаПлатежей = СуммыПлатежейКВыгрузке.Получить(ТекущиеДанные.Валюта);
	Если СуммаПлатежей = Неопределено Тогда
		СуммыПлатежейКВыгрузке.Вставить(ТекущиеДанные.Валюта, ТекущиеДанные.Сумма);
	Иначе
		СуммыПлатежейКВыгрузке.Вставить(ТекущиеДанные.Валюта, СуммаПлатежей + ТекущиеДанные.Сумма * Знак);
	КонецЕсли;
	СформироватьСтрокуСуммыКВыгрузке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметитьСчета(Команда)
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Не Счет.Выгружается Тогда
			Счет.Пометка = Истина;
			Объект.СписокСчетов.Добавить(Счет.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСписокПлатежей();
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиСчетов(Команда)
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Не Счет.Выгружается Тогда
			Счет.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ДокументыКВыгрузке.Очистить();
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСчетов(Команда)
	
	// Если есть счета, которые выгружаются, обновить не даем
	ПроизводитсяВыгрузка = Ложь;
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Счет.Выгружается Тогда
			ПроизводитсяВыгрузка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПроизводитсяВыгрузка Тогда
		ОбновитьСписокСчетовНаСервере();
		ОбновитьПодвал();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСчетовНаСервере()
	
	ЗаполнитьТаблицуСчетов();
	
	// Отмеченные счета сохраняют отметку
	МассивНайденныхСчетов = Новый Массив;
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		СчетСписка = Объект.СписокСчетов.НайтиПоЗначению(Счет.Ссылка);
		Если СчетСписка <> Неопределено Тогда
			Счет.Пометка = Истина;
			МассивНайденныхСчетов.Добавить(СчетСписка);
		КонецЕсли;
	КонецЦикла;
	
	МассивНеНайденныхСчетов = Новый Массив;
	Для каждого Счет из Объект.СписокСчетов Цикл
		Если МассивНайденныхСчетов.Найти(Счет) = Неопределено Тогда
			МассивНеНайденныхСчетов.Добавить(Счет);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Счет Из МассивНеНайденныхСчетов Цикл
		Объект.СписокСчетов.Удалить(Счет);
	КонецЦикла;
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Команда)
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ВозможностьВыбораФайлов Тогда
			ВыборФайлаОбменаСБанком(ТекущиеДанные, "Выгрузка");
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл", 0.1, Истина);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для выбора файла должна быть выделена строка с банковским счетом.
                |Если список банковских счетов пуст, убедитесь, что в карточке банковского счета включен обмен с банком.'
                |;uk='Для вибору файлу повинен бути виділений рядок з банківським рахунком.
                |Якщо список банківських рахунків порожній, переконайтеся, що у картці банківського рахунку включений обмін з банком.'"),
			,
			"Элементы.БанковскиеСчетаСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.НастройкаОбмена) Тогда
			ФинансыКлиент.ОткрытьФайлДляПросмотра(
				"Объект.БанковскиеСчета[" + Строка(Элементы.БанковскиеСчета.ТекущаяСтрока) + "].НастройкаОбмена",
				ТекущиеДанные.НастройкаОбмена, ТекущиеДанные.Кодировка, НСтр("ru='Файл выгрузки';uk='Файл вивантаження'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отметить(Команда)
	
	Для каждого СтрокаДокумента Из Объект.ДокументыКВыгрузке Цикл
		СтрокаДокумента.Выгружать = Истина;
	КонецЦикла;
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	Для каждого СтрокаДокумента Из Объект.ДокументыКВыгрузке Цикл
		СтрокаДокумента.Выгружать = Ложь;
	КонецЦикла;
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокПлатежей();
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		
		Если Не Счет.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Счет.НастройкаОбмена) Тогда
			
			Если ВозможностьВыбораФайлов Тогда
				ВыборФайлаПриВыгрузке(Счет);
			Иначе
				ПодключитьРасширениеРаботыСФайламиИВыбратьФайлПриВыгрузке(Счет);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВыгрузитьНаСервере();
	
	ПодключитьОбработчикОжидания("ОбработатьЗавершениеВыгрузки", 1, Истина);
	
КонецПроцедуры


&НаСервере
Процедура ВыгрузитьНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ВыгрузитьПлатежи(ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФОрмы(Обработка, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// Производится выгрузка данных по счету
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскиеСчетаКВыгрузке.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.Выгружается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Выгружается...';uk='Вивантажується...'"));
	
	// Документ ранее не выгружался в банк
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыКВыгрузкеДатаВыгрузки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументыКВыгрузке.ДатаВыгрузки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Дата("00010101");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	
	// Есть ошибка, препятствующая выгрузке документа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыКВыгрузке.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументыКВыгрузке.ЕстьОшибка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	// Закрытые счета серым
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("БанковскиеСчета");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскиеСчета.Закрыт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ЕстьВозможностьПрямогоОбмена = Ложь;
	Элементы.БанковскиеСчетаЕстьВозможностьПрямогоОбмена.Видимость = ЕстьВозможностьПрямогоОбмена;
	
	ЕстьОшибкиПлатежей = Ложь;
	Отбор = Новый Структура("ЕстьОшибка", Истина);
	НайденныеСтроки = Объект.ДокументыКВыгрузке.НайтиСтроки(Отбор);
	ЕстьОшибкиПлатежей = Булево(НайденныеСтроки.Количество());
	Элементы.ДокументыКВыгрузкеОписаниеОшибок.Видимость = ЕстьОшибкиПлатежей;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ЗаполнитьТаблицуСчетовВыгрузки();
	ЗначениеВРеквизитФОрмы(Обработка, "Объект");
	
	МассивСчетов = Объект.БанковскиеСчета.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ДополнитьТаблицуСчетовКоличествомДокументовКВыгрузке(МассивСчетов);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуСчетовКоличествомДокументовКВыгрузке(МассивСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДокумента.Ссылка) КАК Количество
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|	И ДанныеДокумента.БанковскийСчет В (&МассивСчетов)
	|	И ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.БанковскийСчет
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДокумента.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|	И ДанныеДокумента.БанковскийСчет В (&МассивСчетов)
	|	И ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.БанковскийСчет
	|";
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Результат.Выгрузить();
	Таблица.Свернуть("БанковскийСчет", "Количество");
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		СтрокаКоличества = Таблица.Найти(Счет.Ссылка, "БанковскийСчет");
		Если СтрокаКоличества <> Неопределено Тогда
			Счет.КВыгрузке = СтрокаКоличества.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПлатежей()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ЗаполнитьТаблицуПлатежей();
	ЗначениеВРеквизитФОрмы(Обработка, "Объект");
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПериодов()
	
	СписокВыбораПериода = Элементы.Период.СписокВыбора;
	СписокВыбораПериода.Добавить(НСтр("ru='Все время';uk=' Увесь час'"),     НСтр("ru='Все время';uk=' Увесь час'"));
	СписокВыбораПериода.Добавить("Дату",                     НСтр("ru='Дату...';uk='Дату...'"));
	СписокВыбораПериода.Добавить(НСтр("ru='Сегодня';uk='Сьогодні'"),       НСтр("ru='Сегодня';uk='Сьогодні'"));
	СписокВыбораПериода.Добавить(НСтр("ru='Три дня';uk='Три дні'"),       НСтр("ru='Три дня';uk='Три дні'"));
	СписокВыбораПериода.Добавить(НСтр("ru='Неделю';uk='Тиждень'"),        НСтр("ru='Неделю';uk='Тиждень'"));
	
	// Начальные установки
	Период = НСтр("ru='Все время';uk=' Увесь час'");	
	Объект.ДатаНачалаВыгрузки = '00010101';
	Объект.ДатаКонцаВыгрузки = '00010101';
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьПометкуСчета()
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Счет.Пометка Тогда
			Объект.СписокСчетов.Добавить(Счет.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСписокПлатежей();
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеВыгрузки()
	
	ЕстьФайлыДляСохранения = Ложь;
	ЕстьНеобходимостьОбновленияСпискаПлатежей = Ложь;
	ЕстьНевыполненныеЗадания = Ложь;
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Счет.Выгружается И ЗначениеЗаполнено(Счет.ИдентификаторВыгрузки) Тогда
			Если ЗаданиеВыполнено(Счет.ИдентификаторВыгрузки) Тогда
				Счет.Выгружается = Ложь;
				Счет.СохранитьФайл = Истина;
			Иначе
				ЕстьНевыполненныеЗадания = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Счет из Объект.БанковскиеСчета Цикл
		Если Счет.СохранитьФайл Тогда
			ЕстьФайлыДляСохранения = Истина;
			Если Счет.Пометка Тогда
				ЕстьНеобходимостьОбновленияСпискаПлатежей = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьФайлыДляСохранения Тогда
		СохранитьФайлы();
	КонецЕсли;
	
	ТаблицаОтчетОВыгрузке = Неопределено;
	ОбработатьЗавершениеВыгрузкиНаСервере(ЕстьНеобходимостьОбновленияСпискаПлатежей, ТаблицаОтчетОВыгрузке);
	
	Если Объект.ОтчетОВыгрузке И ТаблицаОтчетОВыгрузке <> Неопределено Тогда
		ТаблицаОтчетОВыгрузке.ТолькоПросмотр = Истина;
		ТаблицаОтчетОВыгрузке.Показать(НСтр("ru='Отчет о выгруженных платежах';uk='Звіт про вивантажені платежі'"));
	КонецЕсли;
	
	Если ЕстьНеобходимостьОбновленияСпискаПлатежей Тогда
		ОбновитьПодвал();
	КонецЕсли;
	
	Если ЕстьНевыполненныеЗадания Тогда
		ПодключитьОбработчикОжидания("ОбработатьЗавершениеВыгрузки", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеВыгрузкиНаСервере(ЕстьНеобходимостьОбновленияСпискаПлатежей, ТаблицаОтчетОВыгрузке)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Обработка.ЗаписатьДатуВыгрузкиПлатежей();
	
	Если ЕстьНеобходимостьОбновленияСпискаПлатежей Тогда
		Обработка.ЗаполнитьТаблицуПлатежей();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	УстановитьВидимость();
	
	// Завершающие процедуры - очистка путей и вывод отчета
	ОтборПометка = Новый Структура("Пометка", Истина);
	ОтборВыгружен = Новый Структура("Выгружен", Истина);
	
	НайденныеСтрокиПометка = Объект.БанковскиеСчета.НайтиСтроки(ОтборПометка);
	НайденныеСтрокиВыгружен = Объект.БанковскиеСчета.НайтиСтроки(ОтборВыгружен);
	
	Если НайденныеСтрокиПометка.Количество() = НайденныеСтрокиВыгружен.Количество() Тогда
		Если Объект.ОтчетОВыгрузке Тогда
			ТаблицаОтчетОВыгрузке = Обработка.ПечатьОтчетаОВыгрузке();
		КонецЕсли;
		
		Для каждого Счет из Объект.БанковскиеСчета Цикл
			Если Счет.Выгружен Тогда
				Счет.АдресХранилищаДокументов = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПодвал()
	
	СуммыПлатежейКВыгрузке.Очистить();
	
	ОтборСтрокКВыгрузке = Новый Структура("Выгружать", Истина);
	СтрокиКВыгрузке = Объект.ДокументыКВыгрузке.НайтиСтроки(ОтборСтрокКВыгрузке);
	
	КоличествоКВыгрузке = СтрокиКВыгрузке.Количество();
	
	Для каждого Строка Из СтрокиКВыгрузке Цикл
		СуммаПлатежей = СуммыПлатежейКВыгрузке.Получить(Строка.Валюта);
		Если СуммаПлатежей = Неопределено Тогда
			СуммыПлатежейКВыгрузке.Вставить(Строка.Валюта, Строка.Сумма);
		Иначе
			СуммыПлатежейКВыгрузке.Вставить(Строка.Валюта, СуммаПлатежей + Строка.Сумма);
		КонецЕсли;
	КонецЦикла;
	СформироватьСтрокуСуммыКВыгрузке();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСтрокуСуммыКВыгрузке()
	
	СуммаКВыгрузке = "";
	Если СуммыПлатежейКВыгрузке.Количество() Тогда
		Для каждого СуммаПлатежей из СуммыПлатежейКВыгрузке Цикл
			Если ЗначениеЗаполнено(СуммаПлатежей.Значение) Тогда
				СуммаКВыгрузке = СуммаКВыгрузке + Формат(СуммаПлатежей.Значение, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СуммаПлатежей.Ключ) + ", ";
			КонецЕсли;
		КонецЦикла;
		СуммаКВыгрузке = Лев(СуммаКВыгрузке, СтрДлина(СуммаКВыгрузке) - 2);
		СуммаКВыгрузке = НСтр("ru='На сумму:';uk='На суму:'") + " " + ?(СуммаКВыгрузке = "", "-", СуммаКВыгрузке);
	Иначе
		СуммаКВыгрузке = НСтр("ru='На сумму: -';uk='На суму: -'")
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияНастройкиЭДО(НастройкаЭДО, Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборФайлаПриВыгрузке(Счет)
	
	Режим = "Выгрузка";
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);

	ДиалогВыбораФайла.Фильтр                  = НСтр("ru='XML файл (*.xml)|*.xml';uk='XML файл (*.xml)|*.xml'");
	
	ДиалогВыбораФайла.Заголовок               = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Укажите файл для %1 данных по счету %2';uk='Вкажіть файл %1 даних по рахунку %2'"),
		?(Режим = "Выгрузка", НСтр("ru='выгрузки';uk='вивантаження'"), НСтр("ru='загрузки';uk='завантаження'")),
		Счет.Ссылка);
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение              = "xml";
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = ?(Режим = "Выгрузка", "1C_to_CB.xml", "CB_to_1C.xml");
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИдСчета", Счет.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаПриВыгрузкеЗавершение", ЭтаФорма, ДопПараметры);
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПриВыгрузкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И ТипЗнч(Результат) = Тип("Массив")
		И Результат.Количество() > 0 Тогда
		
		ИмяФайла = Результат[0];
		Счет = Объект.БанковскиеСчета.НайтиПоИдентификатору(ДополнительныеПараметры.ИдСчета);
		
		Если Счет <> Неопределено Тогда
			Счет.НастройкаОбмена = ИмяФайла;
			ВыгрузитьПлатежиПослеВыбораФайла(ДополнительныеПараметры.ИдСчета);
			
			ПодключитьОбработчикОжидания("ОбработатьЗавершениеВыгрузки", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаОбменаСБанком(ТекущиеДанные, Режим) Экспорт
	
	ИмяФайла = ТекущиеДанные.НастройкаОбмена;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = НСтр("ru='XML файл (*.xml)|*.xml';uk='XML файл (*.xml)|*.xml'");
	
	ДиалогВыбораФайла.Заголовок               = СтрЗаменить(НСтр("ru='Выберите файл для %1 данных из клиента банка';uk='Виберіть файл для %1 даних з клієнта банку'"), "%1",
		?(Режим = "Выгрузка", НСтр("ru='выгрузки';uk='вивантаження'"), НСтр("ru='загрузки';uk='завантаження'")));
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение              = "xml";
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = ?(ПустаяСтрока(ИмяФайла),
		?(Режим = "Выгрузка", "1C_to_CB.xml", "CB_to_1C.xml"), ИмяФайла);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборФайлаЗавершение",
		ЭтотОбъект,
		Новый Структура("Режим, ТекущиеДанные", Режим, ТекущиеДанные));
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	Иначе
		ДополнительныеПараметры.ТекущиеДанные.НастройкаОбмена = ВыбранныеФайлы[0];
		ДополнительныеПараметры.ТекущиеДанные.ПравилоФайловогоОбменаСБанками = ВыбранныеФайлы[0];
		ДополнительныеПараметры.ТекущиеДанные.ПрямойОбмен = Ложь;
		Если Не ДополнительныеПараметры.ТекущиеДанные.Пометка Тогда
			ПодключитьОбработчикОжидания("ОбработатьПометкуСчета", 0.1, Истина);
		КонецЕсли;
		ДополнительныеПараметры.ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлы()
	
	ВыгруженныеСчета = "";
	
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		
		Если Счет.СохранитьФайл И ЭтоАдресВременногоХранилища(Счет.АдресХранилищаФайла) Тогда
			
			ДанныеВыгрузки = ПолучитьИзВременногоХранилища(Счет.АдресХранилищаФайла);
			Если ТипЗнч(ДанныеВыгрузки) = Тип("ДвоичныеДанные") Тогда
				
				Если ВозможностьВыбораФайлов Тогда
					
					ВыгрузитьФайлНаКлиенте(Счет);
					
				Иначе // Веб клиент без расширения для работы с файлами
					
					Попытка
						Если ЗначениеЗаполнено(Счет.НастройкаОбмена) Тогда
							ПолучитьФайл(Счет.АдресХранилищаФайла, Счет.НастройкаОбмена, Истина);
						Иначе
							ПолучитьФайл(Счет.АдресХранилищаФайла, "1c_to_kl.txt", Истина);
						КонецЕсли;
						Счет.Выгружен = Истина;
						
					Исключение
						ШаблонСообщения = НСтр("ru='При записи файла возникла ошибка
                            |%1'
                            |;uk='При запису файлу виникла помилка
                            |%1'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецПопытки;
				КонецЕсли;
				
				ВыгруженныеСчета = ВыгруженныеСчета + Строка(Счет.Ссылка) + "
				|";
			КонецЕсли;
			
			Счет.СохранитьФайл = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВыгруженныеСчета) Тогда
		ПоказатьОповещениеПользователя(,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Выгружены в файлы данные по счетам
            |%1'
            |;uk='Вивантажені у файли дані за рахунками
            |%1'"),
			ВыгруженныеСчета)
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиенте(Счет)
	
	ДополнительныеПараметры = Новый Структура("Счет", Счет);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, Счет.НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ДополнительныеПараметры.Вставить("ФайлСуществует", Существует);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Если Существует Тогда
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Счет = ДополнительныеПараметры.Счет;
	
	Если Прав(СокрЛП(Счет.НастройкаОбмена), 1) = "\"
		ИЛИ Прав(СокрЛП(Счет.НастройкаОбмена), 1) = "/"
		ИЛИ ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru='Указан некорректный файл для выгрузки - выбран ""каталог"".
            |Выберите файл для выгрузки'
            |;uk='Вказано некоректний файл для вивантаження - обраний ""каталог"".
            |Виберіть файл для вивантаження'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения
			,, "Объект.БанковскиеСчета");
		Возврат;
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Счет.НастройкаОбмена, Счет.АдресХранилищаФайла);
	ПередаваемыеФайлы.Добавить(ОписаниеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПолучениеФайлов(ОписаниеОповещения, ПередаваемыеФайлы, Счет.НастройкаОбмена, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Счет.Выгружен = Истина;
	
	ОбработатьЗавершениеВыгрузки();
	
КонецПроцедуры

#Область РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл()
	
	ТекстСообщения = НСтр("ru='Для выбора файла необходимо установить расширение работы с файлами.';uk='Для вибору файла необхідно встановити розширення роботи з файлами.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Результат;
	
	Если ВозможностьВыбораФайлов Тогда
		ТекущиеДанные = Элементы.БанковскиеСчета.ТекущиеДанные;
		ВыборФайлаОбменаСБанком(ТекущиеДанные, "Выгрузка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСФайламиИВыбратьФайлПриВыгрузке(Счет)
	
	ТекстСообщения = НСтр("ru='Для указания файла выгрузки платежей по счету %1 необходимо установить расширение работы с файлами.';uk='Для зазначення файлу вивантаження платежів по рахунку %1 необхідно встановити розширення роботи з файлами.'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Счет.Наименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлПриВыгрузкеЗавершение", ЭтотОбъект, Счет);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлПриВыгрузкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Результат;
	
	Если ВозможностьВыбораФайлов Тогда
		ВыборФайлаПриВыгрузке(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьПлатежиПослеВыбораФайла(ИдСчета)
	
	Счет = Объект.БанковскиеСчета.НайтиПоИдентификатору(ИдСчета);
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ВыгрузитьПлатежиПоСчету(Счет, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

СуммыПлатежейКВыгрузке = Новый Соответствие;

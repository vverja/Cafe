
#Область ПрограммныйИнтерфейс

// Возращает индекс картинки для скидки.
//
// Возвращаемое значение:
//	Число
//
Функция ПолучитьИндексКартинкиДляГруппы(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		Индекс = 8;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		Индекс = 16;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		Индекс = 0;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		Индекс = 4;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Индекс = 12;
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Возращает индекс картинки для скидки.
//
// Возвращаемое значение:
//	Число
//
Функция ПолучитьИндексКартинкиДляСкидки(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 32;
		Иначе
			Индекс = 28;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Количество Тогда
		Индекс = 36;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		Индекс = 36;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		Индекс = 48;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
		Индекс = 52;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КартаЛояльности Тогда
		Индекс = 52;
	ИначеЕсли ТипЗнч(СтрокаДерева.СпособПредоставления) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Индекс = 56;
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции


// Возращает доступные способы предоставления скидок (наценок)
//
// Возвращаемое значение:
//	Массив
//
Функция ДоступныеСпособыПредоставления() Экспорт
	
	ДоступныеСпособыПредоставленияСкидкиНаценки = Новый СписокЗначений;
	ДоступныеСпособыПредоставленияБонусныеБаллы = Новый СписокЗначений;
	
	СпособыПредоставленияСкидкиНаценки = Новый Массив;
	СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Процент);
	СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сумма);
	СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки);
	СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Количество);
	СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Подарок);
	СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены);
	СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение);
	СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности") Тогда
		СпособыПредоставленияСкидкиНаценки.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.КартаЛояльности);
	КонецЕсли;
	
	Для Каждого СпособПредоставления Из СпособыПредоставленияСкидкиНаценки Цикл
		ДоступныеСпособыПредоставленияСкидкиНаценки.Добавить(СпособПредоставления, Строка(СпособПредоставления));
	КонецЦикла;
	
	ДоступныеСпособыПредоставленияБонусныеБаллы.Добавить(
		Перечисления.СпособыПредоставленияСкидокНаценок.Процент, НСтр("ru='Бонус процентом';uk='Бонус відсотком'"));
	ДоступныеСпособыПредоставленияБонусныеБаллы.Добавить(
		Перечисления.СпособыПредоставленияСкидокНаценок.Сумма, НСтр("ru='Бонус суммой';uk='Бонус сумою'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		
		ЗапросСпособыПредоставленияИзВнешнихОбработок = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка,
		|	Т.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК Т
		|ГДЕ
		|	Т.Публикация В (ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется),
		|	                ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки))
		|	И Вид = &Вид
		|");
		
		ЗапросСпособыПредоставленияИзВнешнихОбработок.Параметры.Вставить("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.РасчетСкидкиНаценки);
		
		Выборка = ЗапросСпособыПредоставленияИзВнешнихОбработок.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ВнешняяОбработка = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(Выборка.Ссылка);
			УстановитьБезопасныйРежим(Истина);
			СпособПрименения = ВнешняяОбработка.СпособПрименения();
			УстановитьБезопасныйРежим(Ложь);
			
			Если СпособПрименения = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда
				ДоступныеСпособыПредоставленияБонусныеБаллы.Добавить(Выборка.Ссылка, Выборка.Наименование);
			Иначе
				ДоступныеСпособыПредоставленияСкидкиНаценки.Добавить(Выборка.Ссылка, Выборка.Наименование);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СпособыПредоставления = Новый Структура;
	СпособыПредоставления.Вставить("СкидкиНаценки", ДоступныеСпособыПредоставленияСкидкиНаценки);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") Тогда
		СпособыПредоставления.Вставить("БонусныеБаллы", ДоступныеСпособыПредоставленияБонусныеБаллы);
	КонецЕсли;
	
	Возврат СпособыПредоставления;
	
КонецФункции

// Возращает доступные условия предоставления предоставления скидок (наценок)
//
// Возвращаемое значение:
//	Массив
//
Функция ДоступныеУсловияПредоставленияСкидокНаценок() Экспорт
	
	ДоступныеУсловияПредоставления = Новый СписокЗначений;
	ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности") Тогда
		ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.КартаЛояльностиНеЗарегистрирована);
		ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНаличиеКартыЛояльности);
	КонецЕсли;
	ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты);
	ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи);
	ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДеньРожденияКлиента);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") Тогда
		ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей") Тогда
		ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров") Тогда
		ДоступныеУсловияПредоставления.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ВхождениеПартнераВСегмент);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ДоступныеУсловияПредоставления Цикл
		ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		
		ЗапросУсловияИзВнешнихОбработок = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка,
		|	Т.Наименование КАК Наименование,
		|	Т.Информация КАК Информация
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК Т
		|ГДЕ
		|	Т.Публикация В (ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется),
		|	                ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки))
		|	И Вид = &Вид
		|");
		
		ЗапросУсловияИзВнешнихОбработок.Параметры.Вставить("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.ПроверкаУсловияПредоставленияСкидкиНаценки);
		
		Выборка = ЗапросУсловияИзВнешнихОбработок.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДоступныеУсловияПредоставления.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДоступныеУсловияПредоставления;
	
КонецФункции


// Возращает параметры регистрации внешней обработки для скидки (наценки)
//
// Возвращаемое значение:
//	Массив
//
Функция ПараметрыРегистрацииВнешнейОбработкиСкидкиНаценки(Наименование, Информация) Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.РасчетСкидкиНаценки);
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование", Наименование);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Информация", Информация);
	ПараметрыРегистрации.Вставить("ВерсияБСП", "2.1.2.1");
	
	ПараметрыРегистрации.Вставить("Команды", Новый ТаблицаЗначений);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Возращает параметры регистрации внешней обработки для условия предоставления скидки (наценки)
//
// Возвращаемое значение:
//	Массив
//
Функция ПараметрыРегистрацииВнешнейОбработкиУсловияПредоставленияСкидокНаценок(Наименование, Информация) Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.ПроверкаУсловияПредоставленияСкидкиНаценки);
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование", Наименование);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Информация", Информация);
	ПараметрыРегистрации.Вставить("ВерсияБСП", "2.1.2.1");
	
	ПараметрыРегистрации.Вставить("Команды", Новый ТаблицаЗначений);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции


#Область РаботаССообщениями

// Выполняет сохранение отработанных сообщений.
//
Процедура СохранитьОтработанныеСообщения(Объект, Сообщения) Экспорт
	
	Для Каждого СтрокаТЧ Из Сообщения Цикл
		НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка, КлючСвязи", СтрокаТЧ.СкидкаНаценка, -1));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.НапомнитьПозже = СтрокаТЧ.НапомнитьПозже;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру, содежащую сообщения для объекта
//
Функция ПолучитьСтруктуруСообщений(Объект) Экспорт
	
	Сообщения = Новый Массив;
	
	АвтоматическиОткрывать = Ложь;
	
	НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", -1));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Сообщения.Добавить(Новый Структура("СкидкаНаценка, НапомнитьПозже", СтрокаТЧ.СкидкаНаценка, СтрокаТЧ.НапомнитьПозже));
		Если СтрокаТЧ.НапомнитьПозже Тогда
			АвтоматическиОткрывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураСообщений = Новый Структура("Сообщения, АвтоматическиОткрывать, КартаЛояльности, Партнер", Сообщения, АвтоматическиОткрывать, Объект.КартаЛояльности, Объект.Партнер);
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
		И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		СтруктураСообщений.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		СтруктураСообщений.Вставить("Соглашение", Объект.Соглашение);
	КонецЕсли;
	
	Возврат СтруктураСообщений;
	
КонецФункции

// Настраивает отображение команды показать сообщения на форме
//
Процедура НастроитьКомандуПоказатьСообщения(Объект, ЭлементФормы, Видимость = Истина) Экспорт
	
	СтруктуруСообщений = ПолучитьСтруктуруСообщений(Объект);
	ВсегоСообщений = СтруктуруСообщений.Сообщения.Количество();
	НепрочитанныхСообщений = 0;
	Для Каждого СтрокаТЧ Из СтруктуруСообщений.Сообщения Цикл
		Если СтрокаТЧ.НапомнитьПозже Тогда
			НепрочитанныхСообщений = НепрочитанныхСообщений + 1;
		КонецЕсли;
	КонецЦикла;
	ЭлементФормы.Видимость = ВсегоСообщений > 0 И Видимость;
	Если НепрочитанныхСообщений > 0 Тогда
		ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru='Показать непрочитанные сообщения (%1)';uk='Показати непрочитані повідомлення (%1)'"), НепрочитанныхСообщений);
	Иначе
		ЭлементФормы.Заголовок = СтрШаблон(НСтр("ru='Показать сообщения (%1)';uk='Показати повідомлення (%1)'"), СтруктуруСообщений.Сообщения.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРасчетаСкидокНаценокПоДокументам

// Процедура назначает ручные скидки в табичной части
//
Процедура НазначитьРучнуюСкидку(Объект, ИмяТЧ, СуммаСкидкиКРаспределению, ВходныеПараметры) Экспорт
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Ложь);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуВзаиморасчетов", Ложь);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", Неопределено);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", Неопределено);
	ПараметрыСкидки.Вставить("РеализацияСверхЗаказа", Ложь);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСкидки, ВходныеПараметры);
	
	Если ИмяТЧ = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Если ПараметрыСкидки.ВыделенныеСтроки <> Неопределено Тогда
		СтрокиТабличнойЧасти = Новый Массив();
		
		Для Каждого ТекСтрока Из ПараметрыСкидки.ВыделенныеСтроки Цикл
			НайденнаяСтрока = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекСтрока);
			Если ?(ПараметрыСкидки.РеализацияСверхЗаказа, НайденнаяСтрока.КодСтроки = 0, Истина) Тогда
				СтрокиТабличнойЧасти.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если ПараметрыСкидки.ТолькоДляАктивныхСтрок Тогда
			СтрокиТабличнойЧасти = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Активность", Истина));
		ИначеЕсли ПараметрыСкидки.РеализацияСверхЗаказа Тогда
			СтрокиТабличнойЧасти = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("КодСтроки", 0));
		Иначе
			СтрокиТабличнойЧасти = Объект[ИмяТЧ];
		КонецЕсли;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(ПараметрыСкидки.АдресВоВременномХранилище);
	Данные.Ограничения.Колонки.Добавить("СуммаСкидкиКРаспределению", Новый ОписаниеТипов("Число"));
	
	Режим0Суммы = Ложь;
	
	Если СуммаСкидкиКРаспределению >=0 Тогда
		МаксимальнаяСуммаСкидкиНаценки = Данные.Ограничения.Итог("МаксимальнаяСуммаРучнойСкидки");
	Иначе
		МаксимальнаяСуммаСкидкиНаценки = Данные.Ограничения.Итог("МаксимальнаяСуммаРучнойНаценки");
	КонецЕсли;
	Если МаксимальнаяСуммаСкидкиНаценки = 0 Тогда
		Режим0Суммы = Истина;
	КонецЕсли;
	Если Режим0Суммы Тогда
		МаксимальнаяСуммаСкидкиНаценки = Данные.Ограничения.Итог("СуммаБезСкидки");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МаксимальнаяСуммаСкидкиНаценки) Тогда
		МаксимальнаяСуммаСкидкиНаценки = 0;
	КонецЕсли;
	
	мСуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению;
	Для Каждого Ограничение Из Данные.Ограничения Цикл
		
		Если мСуммаСкидкиКРаспределению >=0 Тогда
			МаксимальнаяСуммаСкидкиНаценкиОграничения = Ограничение.МаксимальнаяСуммаРучнойСкидки;
		Иначе
			МаксимальнаяСуммаСкидкиНаценкиОграничения = Ограничение.МаксимальнаяСуммаРучнойНаценки;
		КонецЕсли;
		Если Режим0Суммы Тогда
			МаксимальнаяСуммаСкидкиНаценкиОграничения = Ограничение.СуммаБезСкидки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МаксимальнаяСуммаСкидкиНаценкиОграничения) Тогда
			МаксимальнаяСуммаСкидкиНаценкиОграничения = 0;
		КонецЕсли;
		
		Если МаксимальнаяСуммаСкидкиНаценки <> 0 Тогда
			
			Ограничение.СуммаСкидкиКРаспределению = мСуммаСкидкиКРаспределению * (МаксимальнаяСуммаСкидкиНаценкиОграничения / МаксимальнаяСуммаСкидкиНаценки);
			
			мСуммаСкидкиКРаспределению = мСуммаСкидкиКРаспределению - Ограничение.СуммаСкидкиКРаспределению;
			МаксимальнаяСуммаСкидкиНаценки = МаксимальнаяСуммаСкидкиНаценки - МаксимальнаяСуммаСкидкиНаценкиОграничения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из СтрокиТабличнойЧасти Цикл
		
		ДанныеНоменклатуры = Данные.Товары.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		
		Для Каждого Ограничение Из Данные.Ограничения Цикл
			
			Если  НЕ (ДанныеНоменклатуры.ЦеноваяГруппа = Ограничение.ЦеноваяГруппа
				      ИЛИ (Данные.Ограничения.Найти(ДанныеНоменклатуры.ЦеноваяГруппа, "ЦеноваяГруппа") = Неопределено
				      И Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка())) Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена;
			СуммаАвтоматическойСкидки = ?(ПараметрыСкидки.ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
			
			Если Ограничение.СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.СуммаРучнойСкидки = (СуммаБезСкидки) * (Ограничение.СуммаСкидкиКРаспределению / Ограничение.СуммаБезСкидки);
			Иначе
				СтрокаТЧ.СуммаРучнойСкидки = 0;
			КонецЕсли;
			Ограничение.СуммаСкидкиКРаспределению = Ограничение.СуммаСкидкиКРаспределению - СтрокаТЧ.СуммаРучнойСкидки;
			Ограничение.СуммаБезСкидки = Ограничение.СуммаБезСкидки - СуммаБезСкидки;
			
			Если СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
			Иначе
				СтрокаТЧ.ПроцентРучнойСкидки = 0;
			КонецЕсли;
			
			СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
			
			Если ПараметрыСкидки.ИспользуютсяАвтоматическиеСкидки Тогда
				Если СуммаБезСкидки <> 0 Тогда
					СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
				Иначе
					СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
			СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
			Если ПараметрыСкидки.РассчитыватьСуммуСНДС Тогда
				СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			
			Если ПараметрыСкидки.РассчитыватьСуммуВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Процедура выполняет отмену ручных скидок в табичной части
//
Процедура ОчиститьСкидкиВТЧ(Объект, ИмяТЧ, РассчитыватьСуммуСНДС=Ложь, РассчитыватьСуммуВзаиморасчетов=Ложь, ОтменитьТолькоАвтоСкидки = Ложь) Экспорт
	
	Если ИмяТЧ="Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;

	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "СуммаАвтоматическойСкидки") Тогда
			СтрокаТЧ.СуммаАвтоматическойСкидки   = 0;
			СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "СуммаРучнойСкидки") И НЕ ОтменитьТолькоАвтоСкидки Тогда
			СтрокаТЧ.СуммаРучнойСкидки           = 0;
			СтрокаТЧ.ПроцентРучнойСкидки         = 0;
		КонецЕсли;
		
		СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена - СтрокаТЧ.СуммаРучнойСкидки;
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки;
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
		
		Если РассчитыватьСуммуСНДС Тогда
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		КонецЕсли;
		
		Если РассчитыватьСуммуВзаиморасчетов Тогда
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Процедура отменяет рассчитанные по объекту скидки.
// Вызывается из форм документов.
//
Процедура ОтменитьСкидки(Объект, ИмяТЧ, РассчитыватьСуммуСНДС=Ложь, РассчитыватьСуммуВзаиморасчетов=Ложь, ОтменитьТолькоАвтоСкидки = Ложь) Экспорт
	
	Объект.СкидкиНаценки.Очистить();
	ОчиститьСкидкиВТЧ(Объект, ИмяТЧ, РассчитыватьСуммуСНДС, РассчитыватьСуммуВзаиморасчетов, ОтменитьТолькоАвтоСкидки);
	Объект.СкидкиРассчитаны = Ложь;
	
КонецПроцедуры

// Процедура выполняет отмену ручных скидок в табичной части
//
Процедура ОтменитьРучныеСкидки(Объект, ИмяТЧ, ИспользуютсяАвтоматическиеСкидки,
	РассчитыватьСуммуСНДС=Ложь, РассчитыватьСуммуВзаиморасчетов=Ложь, РеализацияСверхЗаказа = Ложь) Экспорт
	
	Если ИмяТЧ="Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Если РеализацияСверхЗаказа Тогда
		СтрокиТабличнойЧасти = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Иначе
		СтрокиТабличнойЧасти = Объект[ИмяТЧ];
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СтрокиТабличнойЧасти Цикл
		
		Если СтрокаТЧ.СуммаРучнойСкидки <> 0 Или СтрокаТЧ.ПроцентРучнойСкидки <> 0 Тогда
			
			СтрокаТЧ.СуммаРучнойСкидки = 0;
			СтрокаТЧ.ПроцентРучнойСкидки = 0;
			
			СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена;
			
			СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаАвтоматическойСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаАвтоматическойСкидки);
			СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
			Если РассчитыватьСуммуСНДС Тогда
				СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			
			Если РассчитыватьСуммуВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры


// Выполняет расчет скидок по документу.
// Вызывается из форм документов.
//
Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		РезультатРасчета = РассчитатьПоЗаказуКлиента(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		РезультатРасчета = РассчитатьПоЗаявкеНаВозвратТоваровОтКлиента(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		
		РезультатРасчета = РассчитатьПоКоммерческомуПредложениюКлиенту(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		РезультатРасчета = РассчитатьПоЧекуККМ(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		РезультатРасчета = РассчитатьПоРеализацииТоваровУслуг(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		РезультатРасчета = РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры);
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

// Выполняет расчет скидок по заказу клиента.
//
Функция РассчитатьПоЗаказуКлиента(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	%ПоляНабора%
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Серия              КАК Серия,
	|	Товары.Склад              КАК Склад,
	|	Товары.ВидЦены            КАК ВидЦены,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена                             КАК Цена,
	|	Товары.Цена * Товары.КоличествоУпаковок КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	%Поля%
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|%ИмяВременнойТаблицы%
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		%Соединение%
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА &ВозвратТары ТОГДА
	|			Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|%ЗапросНаборы%
	|";
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ПараметрыЗапроса.Вставить("ВозвратТары", Объект.ВернутьМногооборотнуюТару);
	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);
	
	СкидкиНаценки = ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.Соглашение,
		Объект.КартаЛояльности);
	
	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Партнер;
	ПараметрыРасчета.Соглашение    = Объект.Соглашение;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.ФормаОплаты = Объект.ФормаОплаты;
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.ГрафикОплаты = Объект.ГрафикОплаты;
	
	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;
	
	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.Пользователь               = Объект.Менеджер;
	ПараметрыРасчета.Объект                     = Объект;
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКЗаказуКлиента(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

// Выполняет расчет скидок по заявке на возврат товаров от клиента.
//
Функция РассчитатьПоЗаявкеНаВозвратТоваровОтКлиента(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "ЗаменяющиеТовары");
	
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	%ПоляНабора%
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Серия              КАК Серия,
	|	&Склад                    КАК Склад,
	|	Товары.ВидЦены            КАК ВидЦены,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена                             КАК Цена,
	|	Товары.Цена * Товары.КоличествоУпаковок КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	%Поля%
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|%ИмяВременнойТаблицы%
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		%Соединение%
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА &ВозвратТары ТОГДА
	|			Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|%ЗапросНаборы%
	|";
	
	ТаблицаТовары = Объект.ЗаменяющиеТовары.Выгрузить();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ПараметрыЗапроса.Вставить("ВозвратТары", Объект.ВернутьМногооборотнуюТару);
	ПараметрыЗапроса.Вставить("Склад", Объект.Склад);
	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);
	
	СкидкиНаценки = ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.Соглашение,
		Объект.КартаЛояльности);
	
	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Партнер;
	ПараметрыРасчета.Соглашение    = Объект.Соглашение;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.ФормаОплаты = Объект.ФормаОплаты;
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.ГрафикОплаты = Объект.ГрафикОплаты;
	
	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;
	
	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.Пользователь               = Объект.Менеджер;
	ПараметрыРасчета.Объект                     = Объект;
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКВозвратуТоваровОтКлиента(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

// Выполняет расчет скидок по коммерческому предложению клиенту.
//
Функция РассчитатьПоКоммерческомуПредложениюКлиенту(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи                                    КАК КлючСвязи,
	|	%ПоляНабора%
	|	Товары.Номенклатура                                 КАК Номенклатура,
	|	Товары.Характеристика                               КАК Характеристика,
	|	Товары.Упаковка                                     КАК Упаковка,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	Товары.ВидЦены                                      КАК ВидЦены,
	|	&Склад                                              КАК Склад,
	|	Товары.Количество                                   КАК Количество,
	|	Товары.КоличествоУпаковок                           КАК КоличествоУпаковок,
	|	Товары.Цена                                         КАК Цена,
	|	Товары.Цена * Товары.КоличествоУпаковок             КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	%Поля%
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|%ИмяВременнойТаблицы%
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		%Соединение%
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА &ВозвратТары ТОГДА
	|			Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|%ЗапросНаборы%
	|";
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ПараметрыЗапроса.Вставить("ВозвратТары", Объект.ВернутьМногооборотнуюТару);
	ПараметрыЗапроса.Вставить("Склад", Объект.Склад);
	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);
	
	СкидкиНаценки = ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.Соглашение,
		Объект.КартаЛояльности);
	
	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Партнер;
	ПараметрыРасчета.Соглашение    = Объект.Соглашение;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.ФормаОплаты = Объект.ФормаОплаты;
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.ГрафикОплаты = Объект.ГрафикОплаты;
	
	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;
	
	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.Пользователь               = Объект.Менеджер;
	ПараметрыРасчета.Объект                     = Объект;
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаККоммерческомуПредложениюКлиенту(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

// Выполняет расчет скидок по реализации товаров и услуг.
//
Функция РассчитатьПоРеализацииТоваровУслуг(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КодСтроки          КАК КодСтроки,
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	%ПоляНабора%
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Серия              КАК Серия,
	|	Товары.Склад              КАК Склад,
	|	Товары.ВидЦены            КАК ВидЦены,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена                             КАК Цена,
	|	Товары.КоличествоУпаковок * Товары.Цена КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	%Поля%
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|%ИмяВременнойТаблицы%
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		%Соединение%
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА &ВозвратТары ТОГДА
	|			Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР 
	|		КОГДА &РеализацияСверхЗаказа ТОГДА 
	|			Таблица.КодСтроки = 0 
	|		ИНАЧЕ 
	|			ИСТИНА
	|	КОНЕЦ
	|%ЗапросНаборы%
	|";
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	
	ПараметрыЗапроса = ПараметрыРасчета();
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ПараметрыЗапроса.Вставить("РеализацияСверхЗаказа", ВходныеПараметры.РеализацияСверхЗаказа);
	ПараметрыЗапроса.Вставить("ВозвратТары", Объект.ВернутьМногооборотнуюТару);
	
	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);
	
	СкидкиНаценки = ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.Соглашение,
		Объект.КартаЛояльности);
	
	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Партнер;
	ПараметрыРасчета.Соглашение    = Объект.Соглашение;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.ФормаОплаты = Объект.ФормаОплаты;
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.ГрафикОплаты = Неопределено;
	
	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;
	
	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.Пользователь               = Объект.Менеджер;
	ПараметрыРасчета.Объект                     = Объект;
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКРеализацииТоваровУслуг(Объект, ПримененныеСкидкиНаценки, ВходныеПараметры.РеализацияСверхЗаказа);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

// Выполняет расчет скидок по реализации товаров и услуг.
//
Функция РассчитатьПоРеализацииТоваровУслугПоЗаказу(Объект) Экспорт
	
	Объект.СкидкиНаценки.Очистить();
	
	ПакетЗапросов = ЗапросСкидкиНаценкиПоЗаказу(Объект).ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = ПакетЗапросов[3].Выгрузить();
	
	ВыборкаТовары = ПакетЗапросов[2].Выбрать();
	
	НомерОбрабатываемойСтроки = 0;
	ПредыдущийКодСтроки       = 0;
	ПредыдущийЗаказ           = Неопределено;
	Пока ВыборкаТовары.Следующий() Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ЗаказКлиента, КодСтроки", ВыборкаТовары.ЗаказКлиента, ВыборкаТовары.КодСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийКодСтроки = ВыборкаТовары.КодСтроки И ПредыдущийЗаказ = ВыборкаТовары.ЗаказКлиента Тогда
			НомерОбрабатываемойСтроки = НомерОбрабатываемойСтроки + 1;
		Иначе
			НомерОбрабатываемойСтроки = 0;
		КонецЕсли;
		
		СтрокаТаблицы = НайденныеСтроки[НомерОбрабатываемойСтроки];
		
		ПредыдущийКодСтроки = ВыборкаТовары.КодСтроки;
		ПредыдущийЗаказ     = ВыборкаТовары.ЗаказКлиента;
		
		СписокПолей = "ПроцентАвтоматическойСкидки, ПроцентРучнойСкидки";
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаТовары, СписокПолей);
		
		ОбщийПроцентСкидки = СтрокаТаблицы.ПроцентАвтоматическойСкидки + СтрокаТаблицы.ПроцентРучнойСкидки;
		
		ТекСуммаАвтоматическойСкидки = Окр(ВыборкаТовары.СуммаАвтоматическойСкидки, 2);
		ТекСуммаРучнойСкидки = Окр(ВыборкаТовары.СуммаРучнойСкидки , 2);
		
		Если ТекСуммаАвтоматическойСкидки <> СтрокаТаблицы.СуммаАвтоматическойСкидки Или
			ТекСуммаРучнойСкидки <> СтрокаТаблицы.СуммаРучнойСкидки Тогда
		
			СтрокаТаблицы.СуммаАвтоматическойСкидки = ТекСуммаАвтоматическойСкидки;
			СтрокаТаблицы.СуммаРучнойСкидки = ТекСуммаРучнойСкидки;
			
			// Пересчет сумм
			СтруктураДействий = Новый Структура;
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
			СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
				Объект.РеализацияПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
			СуммаКРаспределению = СтрокаТаблицы.СуммаАвтоматическойСкидки;
			
			Если СтрокаТаблицы.КлючСвязи <> 0 Тогда
			
				НайденныеСтроки = СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("ЗаказКлиента, КлючСвязи", СтрокаТаблицы.ЗаказКлиента, СтрокаТаблицы.КлючСвязи));
				Если НайденныеСтроки.Количество() <> 0 Тогда
					Для Каждого СтрокаСкидкиЗаказа Из НайденныеСтроки Цикл
						
						СтрокаСкидки = Объект.СкидкиНаценки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
						СтрокаСкидки.Сумма = ВыборкаТовары.Коэффициент * СтрокаСкидки.Сумма;
						
						СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
					КонецЦикла;
					Если СуммаКРаспределению <> 0 Тогда
						СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СкидкиРассчитаны = Истина;
	
КонецФункции

// Выполняет расчет скидок по акту выполненных работ.
//
Функция РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Услуги");
	
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
	// Обработка табличной части "Услуги".
	ТаблицаТовары = Объект.Услуги.Выгрузить(
		,
		"КлючСвязи,
		|НоменклатураНабора,
		|ХарактеристикаНабора,
		|Номенклатура,
		|Характеристика,
		|ВидЦены,
		|Количество,
		|Цена");
	ТаблицаТовары.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТовары.Колонки.Добавить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
	КонецЦикла;
	
	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи            КАК КлючСвязи,
	|	%ПоляНабора%
	|	Товары.Номенклатура         КАК Номенклатура,
	|	Товары.Характеристика       КАК Характеристика,
	|	Товары.Упаковка             КАК Упаковка,
	|	Товары.Серия                КАК Серия,
	|	&Склад                      КАК Склад,
	|	Товары.ВидЦены              КАК ВидЦены,
	|	Товары.Количество           КАК Количество,
	|	Товары.КоличествоУпаковок   КАК КоличествоУпаковок,
	|	Товары.Цена                             КАК Цена,
	|	Товары.Цена * Товары.КоличествоУпаковок КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	%Поля%
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|%ИмяВременнойТаблицы%
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		%Соединение%
	|%ЗапросНаборы%
	|";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ПараметрыЗапроса.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);
	
	СкидкиНаценки = ПолучитьТаблицуСкидокНаценокДляУслуг(
		Объект.Дата,
		Объект.Соглашение,
		Объект.КартаЛояльности);
	
	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Партнер;
	ПараметрыРасчета.Соглашение    = Объект.Соглашение;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.ФормаОплаты = Объект.ФормаОплаты;
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.ГрафикОплаты = Неопределено;
	
	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;
	
	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.Пользователь               = Объект.Менеджер;
	ПараметрыРасчета.Объект                     = Объект;
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКАктуВыполненныхРабот(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

// Выполняет расчет скидок по чеку ККМ.
//
Функция РассчитатьПоЧекуККМ(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	%ПоляНабора%
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Серия              КАК Серия,
	|	&Склад                    КАК Склад,
	|	&ВидЦены                  КАК ВидЦены,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена                             КАК Цена,
	|	Товары.Цена * Товары.КоличествоУпаковок КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	%Поля%
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|%ИмяВременнойТаблицы%
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		%Соединение%
	|%ЗапросНаборы%
	|";
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ПараметрыЗапроса.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыЗапроса.Вставить("Склад", Объект.Склад);
	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);
	
	СкидкиНаценки = ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.КартаЛояльности);
	
	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Партнер;
	ПараметрыРасчета.Соглашение    = Неопределено;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.ФормаОплаты = Объект.ФормаОплаты;
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.ГрафикОплаты = Неопределено;
	
	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;
	
	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.Пользователь               = Объект.Кассир;
	ПараметрыРасчета.Объект                     = Объект;
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКЧекуККМ(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции


// Процедура применяет результат расчет скидок к документу.
// Вызывается из форм документов.
//
Процедура ПрименитьРезультатРасчета(Объект, ПримененныеСкидки, РеализацияСверхЗаказа = Ложь) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ПрименитьРезультатРасчетаКЗаказуКлиента(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ПрименитьРезультатРасчетаКВозвратуТоваровОтКлиента(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		
		ПрименитьРезультатРасчетаККоммерческомуПредложениюКлиенту(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ПрименитьРезультатРасчетаКЧекуККМ(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ПрименитьРезультатРасчетаКРеализацииТоваровУслуг(Объект, ПримененныеСкидки, РеализацияСверхЗаказа);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ПрименитьРезультатРасчетаКАктуВыполненныхРабот(Объект, ПримененныеСкидки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаКЗаказуКлиента(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки, Истина);
	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаКВозвратуТоваровОтКлиента(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "ЗаменяющиеТовары", ПримененныеСкидкиНаценки, Истина);
	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаККоммерческомуПредложениюКлиенту(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки, Истина);
	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаКРеализацииТоваровУслуг(Объект, ПримененныеСкидкиНаценки, РеализацияСверхЗаказа)
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки, Истина, Истина, РеализацияСверхЗаказа);
	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаКАктуВыполненныхРабот(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Услуги", ПримененныеСкидкиНаценки, Истина, Истина);
	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаКЧекуККМ(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки);
	
	Если Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель Тогда
		Возврат;
	КонецЕсли;
	
	НачисленныеБонусныеБаллы = БонусныеБаллыСервер.ТаблицаБонусныеБаллы(ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, Объект.Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности.НеНачислятьБаллыПриОплатеБонусами, Ложь) КАК НеНачислятьБаллыПриОплатеБонусами
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|ГДЕ
	|	КартыЛояльности.Ссылка = &КартаЛояльности";
	
	Запрос.УстановитьПараметр("КартаЛояльности", Объект.КартаЛояльности);
	
	ИспользуетсяОдновременноеСписаниеИНачисление = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИспользуетсяОдновременноеСписаниеИНачисление = Не Выборка.НеНачислятьБаллыПриОплатеБонусами;
	КонецЕсли;
	
	Объект.БонусныеБаллы.Очистить();
	БонусныеБаллы = Новый ТаблицаЗначений;
	БонусныеБаллы.Колонки.Добавить("БонуснаяПрограммаЛояльности", Новый ОписаниеТипов("СправочникСсылка.БонусныеПрограммыЛояльности"));
	БонусныеБаллы.Колонки.Добавить("ДатаНачисления",              ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	БонусныеБаллы.Колонки.Добавить("ДатаСписания",                ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	БонусныеБаллы.Колонки.Добавить("СуммаБонусныхБаллов",         ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если (НЕ Объект.ИспользоватьОплатуБонуснымиБаллами) ИЛИ ИспользуетсяОдновременноеСписаниеИНачисление Тогда
			
			Начислено = 0;
			НайденныеСтроки = НачисленныеБонусныеБаллы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
			Для Каждого СтрокаНачислениеБаллов Из НайденныеСтроки Цикл
				
				НоваяСтрока = БонусныеБаллы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислениеБаллов);
				
				// Конвертация начисленных баллов из валюты документа в баллы.
				НоваяВалюта = СтрокаНачислениеБаллов.ВалютаКонвертацииБонусов;
				СтруктураКурсовНовойВалюты = ПримененныеСкидкиНаценки.Параметры.КурсыВалют.Найти(НоваяВалюта, "Валюта");
				ТекущаяВалюта = Объект.Валюта;
				СтруктураКурсовТекущейВалюты = ПримененныеСкидкиНаценки.Параметры.КурсыВалют.Найти(ТекущаяВалюта, "Валюта");
				
				Начислено = Начислено + СтрокаНачислениеБаллов.СуммаБонусныхБаллов;
				
				НоваяСтрока.СуммаБонусныхБаллов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаБонусныхБаллов,
					ТекущаяВалюта,
					НоваяВалюта,
					СтруктураКурсовТекущейВалюты.Курс,
					СтруктураКурсовНовойВалюты.Курс,
					СтруктураКурсовТекущейВалюты.Кратность,
					СтруктураКурсовНовойВалюты.Кратность) / СтрокаНачислениеБаллов.КурсКонвертацииБонусовВВалюту;
				
			КонецЦикла;
			
			СтрокаТЧ.СуммаНачисленныхБонусныхБалловВВалюте = Начислено;
			
		Иначе
			
			СтрокаТЧ.СуммаНачисленныхБонусныхБалловВВалюте = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	БонусныеБаллы.Свернуть("БонуснаяПрограммаЛояльности, ДатаНачисления, ДатаСписания", "СуммаБонусныхБаллов");
	Объект.БонусныеБаллы.Загрузить(БонусныеБаллы);
	
КонецПроцедуры


Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Форма, ИмяТаблицы, УникальныйИдентификатор, ТолькоДляВыделенныхСтрок,
                                                              ИмяТаблицыВыделенныхСтрок = Неопределено, ТолькоАктивныеСтроки = Ложь,
                                                              ИспользоватьОграничения = Истина, РеализацияСверхЗаказа = Ложь) Экспорт
	
	СоглашениеСКлиентом = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСКлиентом = Форма.Объект.Соглашение;
	КонецЕсли;

	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьОграниченияРучныхСкидокВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	
	Если ЗначениеЗаполнено(СоглашениеСКлиентом) Тогда
		ИспользоватьОграниченияПоСоглашениям = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	Иначе
		ИспользоватьОграниченияПоСоглашениям = Ложь;
	КонецЕсли;

	ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграничения И ИспользоватьРучныеСкидки И (ИспользоватьОграниченияРучныхСкидокВПродажах ИЛИ ИспользоватьОграниченияПоСоглашениям);

	Если ИмяТаблицы = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить(ИмяКоличества,               Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Цена",                      Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаРучнойСкидки",         Новый ОписаниеТипов("Число"));
	
	Если ТолькоДляВыделенныхСтрок Тогда
		
		Для Каждого ТекСтрока Из Форма.Элементы[?(ИмяТаблицыВыделенныхСтрок = Неопределено, ИмяТаблицы, ИмяТаблицыВыделенныхСтрок)].ВыделенныеСтроки Цикл
			
			СтрокаКоллекции = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(ТекСтрока);
			
			Если ?(РеализацияСверхЗаказа, СтрокаКоллекции = Неопределено ИЛИ СтрокаКоллекции.КодСтроки > 0, СтрокаКоллекции = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			
		КонецЦикла;
	Иначе
		Если РеализацияСверхЗаказа Тогда
			НайденныеСтроки = Форма.Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("КодСтроки", 0));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		ИначеЕсли ТолькоАктивныеСтроки Тогда
			НайденныеСтроки =Форма.Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Активность", Истина));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТаблицы] Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОграниченияРучныхСкидок Тогда
		
		ОграниченияРучныхСкидок = НастройкиПродажДляПользователейСервер.ОграниченияСкидокНаценок(СоглашениеСКлиентом, Пользователи.ТекущийПользователь());
		ЦеновыеГруппы = ОграниченияРучныхСкидок.ВыгрузитьКолонку("ЦеноваяГруппа");
		
	Иначе
		
		ОграниченияРучныхСкидок = Новый ТаблицаЗначений;
		ОграниченияРучныхСкидок.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойСкидки",  Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		Ограничение = ОграниченияРучныхСкидок.Добавить();
		Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Ограничение.МаксимальныйПроцентРучнойСкидки  = 999.99;
		Ограничение.МаксимальныйПроцентРучнойНаценки = 999.99;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары." + ИмяКоличества + " " + "КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблица КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияРучныхСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки
	|ПОМЕСТИТЬ ОграниченияРучныхСкидок
	|ИЗ
	|	&ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Т.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Т.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Т.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(15, 2)) КАК МаксимальнаяСуммаРучнойСкидки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(15, 2)) КАК МаксимальнаяСуммаРучнойНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ КАК ЦеноваяГруппа,
	|		СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.КоличествоУпаковок * ВременнаяТаблицаТовары.ЦенаЗаУпаковку КАК ЧИСЛО(15, 2))) КАК СуммаБезСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|		ПО (ОграниченияРучныхСкидок.ЦеноваяГруппа = Т.ЦеноваяГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Товары", Товары);
	Запрос.Параметры.Вставить("ОграниченияРучныхСкидок", ОграниченияРучныхСкидок);
	Запрос.Параметры.Вставить("ЦеновыеГруппы", ЦеновыеГруппы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Ограничения = Результат[3].Выгрузить();
	Ограничения.Индексы.Добавить("ЦеноваяГруппа");
	
	Товары = Результат[4].Выгрузить();
	Товары.Индексы.Добавить("Номенклатура");
	
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок", Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок), УникальныйИдентификатор);
	
КонецФункции

Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилищеЗакупки(Форма, ИмяТаблицы, УникальныйИдентификатор, ТолькоДляВыделенныхСтрок, ИмяТаблицыВыделенныхСтрок = Неопределено, ТолькоАктивныеСтроки = Ложь, ИспользоватьОграничения = Истина) Экспорт
	
	СоглашениеСПоставщиком = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСПоставщиком = Форма.Объект.Соглашение;
	КонецЕсли;

	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");

	ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграничения И ИспользоватьРучныеСкидки И Не ПолучитьФункциональнуюОпцию("БазоваяВерсия");

	Если ИмяТаблицы = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить(ИмяКоличества,               Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Цена",                      Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаРучнойСкидки",         Новый ОписаниеТипов("Число"));
	
	Если ТолькоДляВыделенныхСтрок Тогда
		
		Для Каждого ТекСтрока Из Форма.Элементы[?(ИмяТаблицыВыделенныхСтрок = Неопределено, ИмяТаблицы, ИмяТаблицыВыделенныхСтрок)].ВыделенныеСтроки Цикл
			
			СтрокаКоллекции = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(ТекСтрока);
			
			Если СтрокаКоллекции = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			
		КонецЦикла;
	Иначе
		
		Если Не ТолькоАктивныеСтроки Тогда
			Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТаблицы] Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		Иначе
			НайденныеСтроки =Форма.Объект.Товары.НайтиСтроки(Новый Структура("Активность", Истина));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОграниченияРучныхСкидок Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка) КАК ЦеноваяГруппа,
			|	СоглашенияСПоставщиками.ПроцентРучнойСкидки     КАК МаксимальныйПроцентРучнойСкидки,
			|	СоглашенияСПоставщиками.ПроцентРучнойНаценки    КАК МаксимальныйПроцентРучнойНаценки
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
			|ГДЕ
			|	СоглашенияСПоставщиками.Ссылка = &СоглашениеСПоставщиком
			|");
		Запрос.УстановитьПараметр("СоглашениеСПоставщиком", СоглашениеСПоставщиком);
		
		ОграниченияРучныхСкидок = Запрос.Выполнить().Выгрузить();
		
		ЦеновыеГруппы = ОграниченияРучныхСкидок.ВыгрузитьКолонку("ЦеноваяГруппа");
		
	Иначе
		
		ОграниченияРучныхСкидок = Новый ТаблицаЗначений;
		ОграниченияРучныхСкидок.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойСкидки",  Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		Ограничение = ОграниченияРучныхСкидок.Добавить();
		Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Ограничение.МаксимальныйПроцентРучнойСкидки  = 999.99;
		Ограничение.МаксимальныйПроцентРучнойНаценки = 999.99;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары." + ИмяКоличества + " " + "КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблица КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияРучныхСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки
	|ПОМЕСТИТЬ ОграниченияРучныхСкидок
	|ИЗ
	|	&ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Т.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Т.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Т.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(15, 2)) КАК МаксимальнаяСуммаРучнойСкидки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(15, 2)) КАК МаксимальнаяСуммаРучнойНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ КАК ЦеноваяГруппа,
	|		СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.КоличествоУпаковок * ВременнаяТаблицаТовары.ЦенаЗаУпаковку КАК ЧИСЛО(15, 2))) КАК СуммаБезСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|		ПО (ОграниченияРучныхСкидок.ЦеноваяГруппа = Т.ЦеноваяГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Товары", Товары);
	Запрос.Параметры.Вставить("ОграниченияРучныхСкидок", ОграниченияРучныхСкидок);
	Запрос.Параметры.Вставить("ЦеновыеГруппы", ЦеновыеГруппы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Ограничения = Результат[3].Выгрузить();
	Ограничения.Индексы.Добавить("ЦеноваяГруппа");
	
	Товары = Результат[4].Выгрузить();
	Товары.Индексы.Добавить("Номенклатура");
	
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок", Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок), УникальныйИдентификатор);
	
КонецФункции


#КонецОбласти

#Область ОбработкаПроведения

// Формирует движения по регистру "Бонусные баллы".
//
// Параметры:
//	ДополнительныеСвойства - Структура дополнительный свойств
//	Движения - Коллекция движений
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьБонусныеБаллы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБонусныеБаллы;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.БонусныеБаллы.Записывать = Истина;
	Движения.БонусныеБаллы.Загрузить(Таблица);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет использование скидки (наценки)
//
// Параметры:
//  СкидкаНаценка  - СправочникСсылка.СкидкаНаценка - скидка (наценка), для которой определяется использование
//  ДатаДействия   - Дата - дата, на которую определяется использование
//
// Возвращаемое значение:
//   Структура   - содержит следующие поля
//        - ДействуетНаСкладах - Число - количество складов, для которых действует скидка (наценка).
//        - ВсегоНаСкладах     - Число - количество складов, для которых выполнялась настройка скидки (наценки).
//        - ДействуетВТиповыхСоглашениях - Число - количество типовых соглашений, для которых действует скидка (наценка).
//        - ДействуетВИндивидуальныхСоглашениях - Число - количество индивидуальных соглашений, для которых действует скидка (наценка).
//        - ВсегоВСоглашениях     - Число - количество соглашений, для которых выполнялась настройка скидки (наценки).
//        - ДействуетВКартахЛояльности - Число - количество видов карт лояльности, для которых действует скидка (наценка).
//        - ВсегоВКартахЛояльности - Число - количество видов карт лояльности, для которых выполнялась скидки скидок (наценки).
//        - ДействуетНаВсехСкладах - Булево - признак того, что скидка (наценка) действует для всех складов.
//        - ДатаНачалаБезусловногоДействия - Дата - дата начала общего действия скидки (наценки).
//        - ДатаОкончанияБезусловногоДействия - Дата - дата окончания общего действия скидки (наценки), пустая дата, если действие бессрочно.
//
Функция ИспользованиеСкидкиНаценки(СкидкаНаценка, ДатаДействия) Экспорт
	
	Если СкидкаНаценка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДействуетНаСкладах", 0);
	Результат.Вставить("ВсегоНаСкладах", 0);
	Результат.Вставить("ДействуетВТиповыхСоглашениях", 0);
	Результат.Вставить("ВсегоВТиповыхСоглашениях", 0);
	Результат.Вставить("ДействуетВИндивидуальныхСоглашениях", 0);
	Результат.Вставить("ВсегоВИндивидуальныхСоглашениях", 0);
	Результат.Вставить("ДействуетВКартахЛояльности", 0);
	Результат.Вставить("ВсегоВКартахЛояльности", 0);
	Результат.Вставить("ДействуетНаВсехСкладах", Ложь);
	Результат.Вставить("ДатаНачалаБезусловногоДействия", Дата(1, 1, 1));
	Результат.Вставить("ДатаОкончанияБезусловногоДействия", Дата(1, 1, 1));
	
	ЗаполнитьЗначенияСвойств(Результат, ЗначениеНастроекПовтИсп.КоличествоИсточниковСкидокНаценок());
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДействиеСкидокНаценокСрезПоследних.Источник КАК Источник,
	|	ДействиеСкидокНаценокСрезПоследних.Статус
	|ПОМЕСТИТЬ Источники
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, СкидкаНаценка = &СкидкаНаценка) КАК ДействиеСкидокНаценокСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.Склады)
	|			ТОГДА ""ДействуетНаСкладах""
	|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.ВидыКартЛояльности)
	|			ТОГДА ""ДействуетПоВидамКартЛояльности""
	|		&ТекстПоСоглашениям
	|	КОНЕЦ КАК ГдеПрименяется,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Источники.Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И Источники.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДействуетНаПустомСкладе,
	|	СУММА(ВЫБОР
	|			КОГДА Источники.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|					И Источники.Источник <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДействуетПоИсточникам
	|ИЗ
	|	Источники КАК Источники
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.Склады)
	|			ТОГДА ""ДействуетНаСкладах""
	|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.ВидыКартЛояльности)
	|			ТОГДА ""ДействуетПоВидамКартЛояльности""
	|		&ТекстПоСоглашениям
	|	КОНЕЦ");
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.СоглашенияСКлиентами) Тогда
		
		ТекстПоСоглашениям ="
		|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.СоглашенияСКлиентами)
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Источники.Источник КАК Справочник.СоглашенияСКлиентами).Типовое
		|						ТОГДА ""ДействуетПоТиповымСоглашениямСКлиентами""
		|					ИНАЧЕ ""ДействуетПоИндивидуальнымСоглашениямСКлиентами""
		|				КОНЕЦ";
		
	Иначе 
		ТекстПоСоглашениям = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоСоглашениям", ТекстПоСоглашениям);

	Запрос.УстановитьПараметр("ТекущаяДата", ДатаДействия);
	Запрос.УстановитьПараметр("СкидкаНаценка", СкидкаНаценка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ГдеПрименяется = "ДействуетНаСкладах" Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
				Результат.ДействуетНаСкладах  = Выборка.ДействуетПоИсточникам;
			КонецЕсли;
			Результат.ДействуетНаВсехСкладах = Выборка.ДействуетНаПустомСкладе;
			
		ИначеЕсли Выборка.ГдеПрименяется = "ДействуетПоВидамКартЛояльности" 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности") Тогда
		
			Результат.ДействуетВКартахЛояльности = Выборка.ДействуетПоИсточникам;
			
		ИначеЕсли Выборка.ГдеПрименяется = "ДействуетПоТиповымСоглашениямСКлиентами" 
			И ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами") Тогда
		
			Результат.ДействуетВТиповыхСоглашениях = Выборка.ДействуетПоИсточникам;
			
		ИначеЕсли Выборка.ГдеПрименяется = "ДействуетПоИндивидуальнымСоглашениямСКлиентами" 
			И ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами") Тогда
		
			Результат.ДействуетВИндивидуальныхСоглашениях = Выборка.ДействуетПоИсточникам;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.ДействуетНаВсехСкладах Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НачалоДействия.Период КАК НачалоДействия,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ОкончаниеДействия.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ОкончаниеДействия
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДействиеСкидокНаценокСрезПоследних.Период КАК Период
		|	ИЗ
		|		РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|				&ТекущаяДата,
		|				СкидкаНаценка = &СкидкаНаценка
		|					И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|					И Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ДействиеСкидокНаценокСрезПоследних) КАК НачалоДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МИНИМУМ(ДействиеСкидокНаценок.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|		ГДЕ
		|			ДействиеСкидокНаценок.Период > &ТекущаяДата
		|			И ДействиеСкидокНаценок.Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)
		|			И ДействиеСкидокНаценок.СкидкаНаценка = &СкидкаНаценка) КАК ОкончаниеДействия
		|		ПО (ИСТИНА)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат.ДатаОкончанияБезусловногоДействия = Выборка.ОкончаниеДействия;
			Результат.ДатаНачалаБезусловногоДействия    = Выборка.НачалоДействия;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует информационные строки по использовнию скидки (наценки) в разрезе типов источников действия
//
// Параметры:
//  Форма  - УправляемаяФорма - форма, для которой заполняются строковые переменные, содержащие информацию о количестве скидок (наценок)
//  ИспользованиеСкидкиНаценки  - Структура - содержит информацию о использовании скидки (наценки). Подрбоно о полях структуры можно 
//            прочитать в описании функции ИспользованиеСкидкиНаценки.
//
Процедура СформироватьИнформациюОКоличествеИспользуемыхСкидок(Форма, ИспользованиеСкидкиНаценки) Экспорт

	ШаблонЗаголовка          = НСтр("ru='%1 из %2';uk='%1 з %2'");
	ИнформацияСоглашения         = "";
	ИнформацияСклады             = "";
	ИнформацияВидыКартЛояльности = "";
	
	Если Не ИспользованиеСкидкиНаценки = Неопределено Тогда
		
		Если ИспользованиеСкидкиНаценки.ВсегоВТиповыхСоглашениях > 0 Тогда
			
			ИнформацияТиповыеСоглашения = СтрШаблон(ШаблонЗаголовка, 
				                                    ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях,
				                                    ИспользованиеСкидкиНаценки.ВсегоВТиповыхСоглашениях);
		КонецЕсли;
			
		Если ИспользованиеСкидкиНаценки.ВсегоВИндивидуальныхСоглашениях > 0 Тогда
			
			ИнформацияИндивидуальныеСоглашения = СтрШаблон(ШаблонЗаголовка, 
				                                           ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях,
				                                           ИспользованиеСкидкиНаценки.ВсегоВИндивидуальныхСоглашениях);
		КонецЕсли;
		
		Если ИспользованиеСкидкиНаценки.ВсегоНаСкладах > 0 Тогда
			
			ИнформацияСклады = СтрШаблон(ШаблонЗаголовка, 
				                         ИспользованиеСкидкиНаценки.ДействуетНаСкладах,
				                         ИспользованиеСкидкиНаценки.ВсегоНаСкладах);
		КонецЕсли;
		
		Если ИспользованиеСкидкиНаценки.ВсегоВКартахЛояльности > 0 Тогда
			
			ИнформацияВидыКартЛояльности = 
			      СтрШаблон(ШаблонЗаголовка, 
			                ИспользованиеСкидкиНаценки.ДействуетВКартахЛояльности,
			                ИспользованиеСкидкиНаценки.ВсегоВКартахЛояльности);
		КонецЕсли;
		
	КонецЕсли;
		
	Форма.ИнформацияКоличествоСкидокИндивидуальныеСоглашения = ИнформацияИндивидуальныеСоглашения;
	Форма.ИнформацияКоличествоСкидокТиповыеСоглашения        = ИнформацияТиповыеСоглашения;
	Форма.ИнформацияКоличествоСкидокСклады                   = ИнформацияСклады;
	Форма.ИнформацияКоличествоСкидокКартыЛояльности          = ИнформацияВидыКартЛояльности;

КонецПроцедуры

// Формирует и устанавливает информационную надпись о использовании скидки(наценки)
//
// Параметры:
//  Элемент  - ДекорацияФормы - в заголовок данного элемента формы будет установлена информационная надпись.
//  ИспользованиеСкидкиНаценки - Стркутура - содержит информацию о использовании скидки (наценки). Подрбоно о полях структуры можно 
//                                           прочитать в описании функции ИспользованиеСкидкиНаценки.
//  ДополнительнаяКоманда          - Строка - имя дополнительной команды, которая должна быть выведена.
//  ВыводитьПояснениеОбщегоСтатуса - Булево - признак необходимости вывода информации, поясняющей общий статус.
//
Процедура СформироватьИнформационнуюНадписьИспользованиеСкидокНаценок(ИнформацияОДействииСкидок,
	                                                                  ИспользованиеСкидкиНаценки,
	                                                                  ДополнительнаяКоманда = Неопределено,
	                                                                  ВыводитьПояснениеОбщегоСтатуса = Истина) Экспорт
	
	Если ИспользованиеСкидкиНаценки = Неопределено Тогда
		ИнформацияОДействииСкидок = "";
		Если ДополнительнаяКоманда = "НастроитьСкидки" Тогда
			ИнформацияОДействииСкидок = Новый ФорматированнаяСтрока(НСтр("ru='Настроить скидки (наценки)';uk='Настроїти знижки (націнки)'"),, ЦветаСтиля.ЦветГиперссылки,,"НастроитьСкидки");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИспользоватьНесколькоСкладов                   = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьТиповыеСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьКартыЛояльности                    = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	ИспользоватьУпрощенныйРежим =   Не ИспользоватьНесколькоСкладов
	                              И Не ИспользоватьТиповыеСоглашенияСКлиентами
	                              И Не ИспользоватьИндивидуальныеСоглашенияСКлиентами
	                              И Не ИспользоватьКартыЛояльности;
	
	ТекстНадписи = "";
	
	Если (ИспользованиеСкидкиНаценки.ДействуетНаСкладах = 0) 
		И (ИспользованиеСкидкиНаценки.ДействуетВКартахЛояльности = 0) 
		И (ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях = 0)
		И (ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях = 0)
		И НЕ ИспользованиеСкидкиНаценки.ДействуетНаВсехСкладах  Тогда
		
		ТекстНадписи = ТекстНадписи + " " + НСтр("ru='Не предоставляется';uk='Не надається'");
		
	Иначе
		
		ТекстНадписи = ТекстНадписи + " " + НСтр("ru='Предоставляется';uk='Надається'");
		ТребуетсяЗапятая = Ложь;
		
		Если НЕ ИспользованиеСкидкиНаценки.ДействуетНаВсехСкладах Тогда
			
			ТекстНадписи = ТекстНадписи + " ";
			
			Если ИспользованиеСкидкиНаценки.ДействуетНаСкладах > 0 Тогда
				
				ТекстНадписи = ТекстНадписи + НСтр("ru='получателям складов';uk='одержувачам складів'") + " (" + ИспользованиеСкидкиНаценки.ДействуетНаСкладах + ")";
				ТребуетсяЗапятая = Истина;
				
			КонецЕсли;
				
			Если ИспользованиеСкидкиНаценки.ДействуетВКартахЛояльности > 0 Тогда
				
				ТекстНадписи = ?(ТребуетсяЗапятая,ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр("ru='держателям карт лояльности';uk='власникам карт лояльності'") + " (" + ИспользованиеСкидкиНаценки.ДействуетВКартахЛояльности + ")";
				ТребуетсяЗапятая = Истина; 
				
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях > 0 Тогда
				
				ТекстНадписи = ?(ТребуетсяЗапятая,ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр("ru='участникам типовых соглашений';uk='учасникам типових оферт'") + " (" + ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях + ")";
				ТребуетсяЗапятая = Истина; 

			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях > 0 Тогда
				
				ТекстНадписи = ?(ТребуетсяЗапятая,ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр("ru='участникам индивидуальных соглашений';uk='учасникам індивідуальних оферт'") + " (" + ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях + ")";
				ТребуетсяЗапятая = Истина; 

			КонецЕсли;
			
		Иначе
			
			ТекстНадписи = НСтр("ru='Предоставляется всем клиентам';uk='Надається всім клієнтам'");
			
			ШаблонПериода = НСтр("ru='(с %1 %2 %3)';uk='(з %1 %2 %3)'");
			ТекстНадписи = ТекстНадписи + " " + СтрШаблон(
			              ШаблонПериода,
			              Формат(ИспользованиеСкидкиНаценки.ДатаНачалаБезусловногоДействия, "ДЛФ=DD"),
			              ?(ИспользованиеСкидкиНаценки.ДатаОкончанияБезусловногоДействия = Дата(1, 1, 1),НСтр("ru='и';uk='і'"),НСтр("ru='по';uk='по'")),
			              ?(ИспользованиеСкидкиНаценки.ДатаОкончанияБезусловногоДействия = Дата(1, 1, 1),
			                 НСтр("ru='бессрочно';uk='безстроково'"),
			                 Формат(ИспользованиеСкидкиНаценки.ДатаОкончанияБезусловногоДействия, "ДЛФ=DD")));
			
			Если ВыводитьПояснениеОбщегоСтатуса 
				И (ИспользованиеСкидкиНаценки.ВсегоНаСкладах > 0 
				ИЛИ ИспользованиеСкидкиНаценки.ВсегоВКартахЛояльности > 0
				ИЛИ ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях > 0
				ИЛИ ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях > 0)  Тогда
				
				Если ДополнительнаяКоманда = "НастроитьСкидки" Тогда
					ТекстПояснения = НСтр("ru='В период действия общего статуса настройки, сделанные в данной форме не актуальны.';uk='В період дії загального статусу настройки, зроблені в даній формі не актуальні.'");
				Иначе
					ТекстПояснения = НСтр("ru='В период действия общего статуса вышеуказанные уточнения не актуальны.';uk='В період дії загального статусу вищевказані уточнення не актуальні.'");
				КонецЕсли;
				
				ТекстНадписи = ТекстНадписи + "." + Символы.ПС + ТекстПояснения;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаИнформация  = Новый ФорматированнаяСтрока(ТекстНадписи + "  ",, ЦветаСтиля.ЦветТекстаПоля);
	
	Если ДополнительнаяКоманда <> Неопределено
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДействиеСкидокНаценок) Тогда
		
		Если ДополнительнаяКоманда = "Изменить" Тогда
			СтрокаИзменить = Новый ФорматированнаяСтрока(НСтр("ru='Изменить';uk='Змінити'"),, ЦветаСтиля.ЦветГиперссылки,,"Изменить");
		ИначеЕсли ДополнительнаяКоманда = "НастроитьСкидки" Тогда
			СтрокаИзменить = Новый ФорматированнаяСтрока(НСтр("ru='Настроить скидки (наценки)';uk='Настроїти знижки (націнки)'"),, ЦветаСтиля.ЦветГиперссылки,,"НастроитьСкидки");
		ИначеЕсли ДополнительнаяКоманда = "ИзменитьОбщийСтатус" Тогда
			СтрокаИзменить = Новый ФорматированнаяСтрока(НСтр("ru='Изменить общий статус';uk='Змінити загальний статус'"),, ЦветаСтиля.ЦветГиперссылки,,"ИзменитьОбщийСтатус");
		Иначе
			СтрокаИзменить = "";
		КонецЕсли;
		
		ИнформацияОДействииСкидок = Новый ФорматированнаяСтрока(СтрокаИнформация, СтрокаИзменить);
	Иначе
		ИнформацияОДействииСкидок = СтрокаИнформация;
	КонецЕсли;

КонецПроцедуры

// Формирует информацию о количестве действующих скидок (наценок) для источиника действия
//
// Параметры:
//  Источник  - СправочникСсылка.Склады, СправочникСсылка.ВидыКартЛояльности, СправочникСсылка.СоглашенияСКлиентом - источник действия скидок.
//  ДатаСреза  - Дата - дата, на которую получается информация о действии скидок
//
// Возвращаемое значение:
//   Строка   - в формате "КоличествоДействует из КоличествоВсего"
//
Функция ИнформацияОКоличествеСкидок(Источник, ДатаСреза) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		Возврат "";
	КонецЕсли;
	
	Всего     = 0;
	Действует = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(1) КАК КоличествоДействующихСкидок
	|ПОМЕСТИТЬ ДействующиеСкидки
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ДатаСреза, Источник = &Источник) КАК ДействиеСкидокНаценокСрезПоследних
	|ГДЕ
	|	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК КоличествоСкидокВсего
	|ПОМЕСТИТЬ ВсегоСкидки
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	НЕ СкидкиНаценки.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсегоСкидки.КоличествоСкидокВсего КАК Всего,
	|	ЕСТЬNULL(ДействующиеСкидки.КоличествоДействующихСкидок, 0) КАК Действует
	|ИЗ
	|	ВсегоСкидки КАК ВсегоСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДействующиеСкидки КАК ДействующиеСкидки
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Всего     = Выборка.Всего;
		Действует = Выборка.Действует;
	КонецЕсли;
	
	Если Всего = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru='%1 из %2';uk='%1 з %2'"),Действует, Всего);

КонецФункции 

// Получает значения необходимых в различных формах скидок (наценок) функциональных опций
//
// Возвращаемое значение:
//   Структура   - содержит значения требуемых функциональных опций
//
Функция СтруктураИсточниковДействияСкидокСогласноФО() Экспорт
	
	СтруктураКВозврату = Новый Структура;
	
	СтруктураКВозврату.Вставить("ИспользоватьКартыЛояльности", ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности"));
	СтруктураКВозврату.Вставить("ИспользоватьБонусныеПрограммыЛояльности", ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности"));
	СтруктураКВозврату.Вставить("ИспользоватьНесколькоСкладов", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"));
	СтруктураКВозврату.Вставить("ИспользоватьСоглашенияСКлиентами", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	
	Возврат СтруктураКВозврату;
	
КонецФункции

Процедура ПостроитьДеревоСкидкиНаценкиРекурсивно(ДеревоСкидок, ТаблицаСкидкиНаценки)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПостроитьДеревоСкидкиНаценкиРекурсивно(СтрокаДерева, ТаблицаСкидкиНаценки);
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляГруппы(СтрокаДерева);
			
		Иначе
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляСкидки(СтрокаДерева);
			
			Отбор = Новый Структура;
			Отбор.Вставить("СкидкаНаценка", СтрокаДерева.Ссылка);
			НайденныеСтроки = ТаблицаСкидкиНаценки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаДерева.Статус = НайденныеСтроки[0].Статус;
				СтрокаДерева.ДатаНачала = НайденныеСтроки[0].ДатаНачала;
				СтрокаДерева.ДатаОкончания = НайденныеСтроки[0].ДатаОкончания;
			Иначе
				СтрокаДерева.Статус = Перечисления.СтатусыДействияСкидок.НеДействует;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет построение дерева скидок (наценок) для источника
//
// Параметры:
//  Форма  - УправляемаяФорма - форма, в которой строится дерево
//  Источник  - СправочникСсылка.Склады, СправочникСсылка.ВидыКартЛояльности, СправочникСсылка.СоглашенияСКлиентом - источник действия скидок.
//
Процедура ПостроитьДеревоСкидкиНаценкиВФорме(Форма, Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСкидкиНаценки = ДействиеСкидокНаценокПоИсточнику(Источник, Форма.ДатаСреза);
	
	МассивСкидок = Новый Массив;
	
	Если ЗначениеЗаполнено(Форма.ВариантОтображенияСкидок) Тогда
		
		Отбор = Новый Структура;
		Если Форма.ВариантОтображенияСкидок = "ТолькоДействующие" Тогда
			Отбор.Вставить("Статус", Перечисления.СтатусыДействияСкидок.Действует);
		ИначеЕсли Форма.ВариантОтображенияСкидок = "ДействующиеИОтмененные" Тогда
			Отбор.Вставить("Использование", Истина);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаСкидкиНаценки.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			МассивСкидок.Добавить(СтрокаТЧ.СкидкаНаценка);
		КонецЦикла;
		
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СкидкиНаценки.Ссылка
		|ИЗ
		|	Справочник.СкидкиНаценки КАК СкидкиНаценки
		|ГДЕ
		|	НЕ СкидкиНаценки.ЭтоГруппа");
		МассивСкидок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	ДеревоСкидок = ПолучитьДеревоСкидок(МассивСкидок);
	
	ДеревоСкидок.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ДеревоСкидок.Колонки.Добавить("Статус",         Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДействияСкидок"));
	ДеревоСкидок.Колонки.Добавить("ДатаНачала",     Новый ОписаниеТипов("Дата"));
	ДеревоСкидок.Колонки.Добавить("ДатаОкончания",  Новый ОписаниеТипов("Дата"));
	
	ПостроитьДеревоСкидкиНаценкиРекурсивно(ДеревоСкидок, ТаблицаСкидкиНаценки);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоСкидок, "СкидкиНаценки");
	
КонецПроцедуры

// Формирует таблицу действия скидок (наценок) по источнику
//
// Параметры:
//  Источник  - СправочникСсылка.Склады, СправочникСсылка.ВидыКартЛояльности, СправочникСсылка.СоглашенияСКлиентом - источник действия скидок.
//  Дата  - Дата - дата среза действия скидок (наценок)
//
// Возвращаемое значение:
//   ТаблицаЗначений  - таблица содержащая скидки, статус и период действия
//
Функция ДействиеСкидокНаценокПоИсточнику(Источник, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка                                                              КАК СкидкаНаценка,
	|	ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)) КАК Статус,
	|	
	|	ВЫБОР
	|		КОГДА ДействиеСкидокНаценокСрезПоследних.Статус ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использование,
	|	
	|	ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
	|	
	|	ВЫБОР КОГДА ДействиеСкидокНаценокСрезПоследних.Период ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДобавитьКДате(ДействиеСкидокНаценокСрезПервых.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) 
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДобавитьКДате(Таблица.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаОкончания
	|	
	|ИЗ
	|	// Таблица может быть изменена
	|	Справочник.СкидкиНаценки КАК ТаблицаСкидкиНаценки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ДатаСреза, Источник = &Источник) КАК ДействиеСкидокНаценокСрезПоследних
	|			ПО ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка = ТаблицаСкидкиНаценки.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(Т.Период) КАК Период,
	|			Т.СкидкаНаценка КАК СкидкаНаценка
	|		ИЗ
	|			РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ДатаСреза, Источник = &Источник) КАК Срез
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок КАК Т
	|				ПО (Т.СкидкаНаценка = Срез.СкидкаНаценка)
	|					И Т.Источник = Срез.Источник
	|					И Т.Период > Срез.Период
	|					И Т.Статус <> Срез.Статус
	|		СГРУППИРОВАТЬ ПО
	|			Т.СкидкаНаценка) КАК Таблица
	|		ПО (Таблица.СкидкаНаценка = ТаблицаСкидкиНаценки.Ссылка)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПервых(
	|				&ДатаСреза,
	|				Источник = &Источник) КАК ДействиеСкидокНаценокСрезПервых
	|		ПО ДействиеСкидокНаценокСрезПервых.СкидкаНаценка = ТаблицаСкидкиНаценки.Ссылка
	|ГДЕ
	|	    НЕ ДействиеСкидокНаценокСрезПоследних.Период ЕСТЬ NULL
	|	ИЛИ НЕ ДействиеСкидокНаценокСрезПервых.Период ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Общая часть обработчиков события "ПриСозданииНаСервере" источников действия скидок
//
// Параметры:
//  Форма  - УправляемаяФорма - форма, для которй выполняются действия
//  Источник  - СправочникСсылка.Склады, СправочникСсылка.ВидыКартЛояльности, СправочникСсылка.СоглашенияСКлиентом - источник действия скидок.
//  РассчитыватьИнформациюОКоличестве  -  признак необходимости расчета информации о количестве действующих скидок по источнику.
//
Процедура ПриСозданииНаСервереИсточниковДействияСкидок(Форма, Источник, РассчитыватьИнформациюОКоличестве = Истина) Экспорт

	Форма.ВариантОтображенияСкидок = "ТолькоДействующие";
	Форма.ДатаСреза = ТекущаяДатаСеанса();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	ПостроитьДеревоСкидкиНаценкиВФорме(Форма, Источник);
	Если РассчитыватьИнформациюОКоличестве Тогда
		Форма.ИнформацияОКоличествеСкидок = ИнформацияОКоличествеСкидок(Источник, ТекущаяДатаСеанса());
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиНаСервереИсточниковДействияСкидокНаценок(ТекущийОбъект, ЗначениеКопирования) Экспорт
	
	Если Не ЗначениеКопирования.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДействиеСкидокНаценокСрезПоследних.Период,
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка,
		|	ДействиеСкидокНаценокСрезПоследних.Статус,
		|	ДействиеСкидокНаценокСрезПоследних.СегментПартнеров
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ДатаСреза, Источник = &Источник) КАК ДействиеСкидокНаценокСрезПоследних";
		
		Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Источник", ЗначениеКопирования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Ответственный = Пользователи.ТекущийПользователь();;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.ДействиеСкидокНаценок.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Источник = ТекущийОбъект.Ссылка;
			МенеджерЗаписи.Ответственный = Ответственный;
			МенеджерЗаписи.Записать(Истина);
			
		КонецЦикла;
		
		ЗначениеКопирования = Справочники.СделкиСКлиентами.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление для дерева скидок (наценок) в форме источника
//
// Параметры:
//  УсловноеОформление  - УсловноеОформление - условное оформление формы, в которое добавляются элементы
//  Элементы  - ЭлементыФормы - коллекция элементов формы, для которых устанавливается условное оформление
//
Процедура УстановитьУсловноеОформлениеФормыИсточникаДействияСкидок(УсловноеОформление, Элементы, ИмяТаблицы = "СкидкиНаценки") Экспорт
	
	//"Статус" - не действует
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТаблицы].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДействияСкидок.НеДействует;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//Скидка (наценка) действует бессрочно

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТаблицы + "ДатаОкончанияДействия"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ДатаОкончания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '00010101';

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ДатаНачала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = '00010101';

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<бессрочно>';uk='<безстроково>'"));
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДанныхПодчиненныхСтрок(РезультатРасчета, ПодчиненнаяСтрока)
	
	Для Каждого СтрокаТаблицы Из ПодчиненнаяСтрока.РезультатРасчета Цикл
		Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
			НоваяСтрока = РезультатРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
		Иначе
			Если СтрокаТаблицы.Действует Тогда
				НоваяСтрока = РезультатРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет объединение подчиненных таблиц данных.
//
// Возвращаемое значение:
//	РезультатРасчета - объединенная таблица данных.
//
Функция ТаблицаДанныхПоСпособуСовместногоПримененияДляДокументаВЦелом(СтрокаДерева)
	
	РезультатРасчета = Новый ТаблицаЗначений;
	РезультатРасчета.Колонки.Добавить("КлючСвязи",                 Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Сумма",                     Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	РезультатРасчета.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СтрокаДерева");
	Таблица.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если НЕ ПодчиненнаяСтрока.ЭтоГруппа Тогда // Это скидка а не группа
			
			Если НЕ ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.Управляемая И НЕ ПодчиненнаяСтрока.НазначенаПользователем Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.СтрокаДерева              = ПодчиненнаяСтрока;
		НоваяСтрока.РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
		
		Для Каждого СтрокаТаблицы Из ПодчиненнаяСтрока.РезультатРасчета Цикл
			Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаТаблицы.Сумма;
			Иначе
				Если СтрокаТаблицы.Действует Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаТаблицы.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		Таблица.Сортировать("Сумма Убыв, РеквизитДопУпорядочивания");
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		Таблица.Сортировать("Сумма Возр, РеквизитДопУпорядочивания");
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Таблица.Сортировать("РеквизитДопУпорядочивания");
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		ЗаполнитьТаблицуДанныхПодчиненныхСтрок(РезультатРасчета, СтрокаТЧ.СтрокаДерева);
		Прервать;
	КонецЦикла;
	
	Возврат РезультатРасчета;
	
КонецФункции

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(ТекущаяДата, Склад, КартаЛояльности)
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьКартыЛояльности  = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	
	ГруппыСкладов = Новый Массив;
	Если ИспользоватьНесколькоСкладов Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ссылка.Родитель КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Т
		|ГДЕ
		|	Т.Ссылка В (&Склад)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ
		|");
		Запрос.Параметры.Вставить("Склад", Склад);
		ГруппыСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата,
	|		Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		//ИспользоватьНесколькоСкладов ИЛИ Источник = &Склад ИЛИ Источник В (&ГруппыСкладов)
	|	) КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|";
	Если ИспользоватьНесколькоСкладов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ИспользоватьНесколькоСкладов", "");
	КонецЕсли;
	
	Если ИспользоватьКартыЛояльности Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.ВидыКартЛояльности) КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КартыЛояльности КАК КартыЛояльности
		|		ПО (КартыЛояльности.Владелец = Таблица.Источник)
		|			И (КартыЛояльности.Ссылка = &КартаЛояльности)
		|ГДЕ
		|	КартыЛояльности.Владелец.ДатаНачалаДействия <= &ТекущаяДата
		|	И ВЫБОР
		|			КОГДА КартыЛояльности.Владелец.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КартыЛояльности.Владелец.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
		|		КОНЕЦ
		|	И Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	
	Если ИспользоватьКартыЛояльности Тогда
		Запрос.Параметры.Вставить("КартаЛояльности", КартаЛояльности);
	КонецЕсли;
	Если ИспользоватьНесколькоСкладов Тогда
		Запрос.Параметры.Вставить("Склад",         Склад);
		Запрос.Параметры.Вставить("ГруппыСкладов", ГруппыСкладов);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкидкаНаценка");
	
КонецФункции

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(ТекущаяДата, Склад, Соглашение, КартаЛояльности)
	
	ИспользоватьНесколькоСкладов     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьКартыЛояльности      = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	
	ГруппыСкладов = Новый Массив;
	Если ИспользоватьНесколькоСкладов Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ссылка.Родитель КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Т
		|ГДЕ
		|	Т.Ссылка В (&Склад)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ
		|");
		Запрос.Параметры.Вставить("Склад", Склад);
		ГруппыСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата,
	|		Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		//ИспользоватьНесколькоСкладов ИЛИ Источник = &Склад ИЛИ Источник В (&ГруппыСкладов)
	|		//ИспользоватьСоглашенияСКлиентами ИЛИ Источник = &Соглашение
	|	) КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|";
	Если ИспользоватьНесколькоСкладов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ИспользоватьНесколькоСкладов", "");
	КонецЕсли;
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ИспользоватьСоглашенияСКлиентами", "");
	КонецЕсли;
	
	Если ИспользоватьКартыЛояльности Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.ВидыКартЛояльности) КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КартыЛояльности КАК КартыЛояльности
		|		ПО (КартыЛояльности.Владелец = Таблица.Источник)
		|			И (КартыЛояльности.Ссылка = &КартаЛояльности)
		|ГДЕ
		|	КартыЛояльности.Владелец.ДатаНачалаДействия <= &ТекущаяДата
		|	И ВЫБОР
		|			КОГДА КартыЛояльности.Владелец.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КартыЛояльности.Владелец.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
		|		КОНЕЦ
		|	И Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		Запрос.Параметры.Вставить("Соглашение", Соглашение);
	КонецЕсли;
	Если ИспользоватьКартыЛояльности Тогда
		Запрос.Параметры.Вставить("КартаЛояльности", КартаЛояльности);
	КонецЕсли;
	Если ИспользоватьНесколькоСкладов Тогда
		Запрос.Параметры.Вставить("Склад",         Склад);
		Запрос.Параметры.Вставить("ГруппыСкладов", ГруппыСкладов);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкидкаНаценка");
	
КонецФункции

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляУслуг(ТекущаяДата, Соглашение, КартаЛояльности)
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьКартыЛояльности      = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата,
	|		Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		//ИспользоватьСоглашенияСКлиентами ИЛИ Источник = &Соглашение
	|	) КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|";
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ИспользоватьСоглашенияСКлиентами", "");
	КонецЕсли;
	
	Если ИспользоватьКартыЛояльности Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.ВидыКартЛояльности) КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КартыЛояльности КАК КартыЛояльности
		|		ПО (КартыЛояльности.Владелец = Таблица.Источник)
		|			И (КартыЛояльности.Ссылка = &КартаЛояльности)
		|ГДЕ
		|	КартыЛояльности.Владелец.ДатаНачалаДействия <= &ТекущаяДата
		|	И ВЫБОР
		|			КОГДА КартыЛояльности.Владелец.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КартыЛояльности.Владелец.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
		|		КОНЕЦ
		|	И Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		Запрос.Параметры.Вставить("Соглашение", Соглашение);
	КонецЕсли;
	Если ИспользоватьКартыЛояльности Тогда
		Запрос.Параметры.Вставить("КартаЛояльности", КартаЛояльности);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкидкаНаценка");
	
КонецФункции

// Функция заполняет ключи связи в табличной части "Товары" документа.
//
Процедура ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, ИмяТЧ)
	
	Индекс = 0;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Индекс = Индекс + 1;
		СтрокаТЧ.КлючСвязи = Индекс;
	КонецЦикла;
	
КонецПроцедуры

// Функция получает текущее время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущееВремяОбъекта(Объект)
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата());
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции

// Функция получает текущую дату время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущуюДатуОбъекта(Объект)
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата());
	
	Возврат ТекущаяДата;
	
КонецФункции

// Процедура заполняет служебную структуру "УправляемыеСкидки" структуры "ВходныеПараметры"
//
Процедура ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры)
	
	ПараметрыРасчета.Вставить("УправляемыеСкидки", Новый Массив);
	
	// Если управляемые скидки не переданы, то получим их из предыдущего расчета
	Если ВходныеПараметры.Свойство("УправляемыеСкидки") И ВходныеПараметры.УправляемыеСкидки <> Неопределено И ВходныеПараметры.УправляемыеСкидки.Количество() > 0 Тогда
		Для Каждого УправляемаяСкидка Из ВходныеПараметры.УправляемыеСкидки Цикл
			ПараметрыРасчета.УправляемыеСкидки.Добавить(УправляемаяСкидка.Значение);
		КонецЦикла;
	Иначе
		Если ВходныеПараметры.ВосстанавливатьУправляемыеСкидки Тогда
			НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", 0));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				ПараметрыРасчета.УправляемыеСкидки.Добавить(СтрокаТЧ.СкидкаНаценка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Сообщения = Новый ТаблицаЗначений;
	Сообщения.Колонки.Добавить("СкидкаНаценка",  Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	Сообщения.Колонки.Добавить("НапомнитьПозже", Новый ОписаниеТипов("Булево"));
	Сообщения.Индексы.Добавить("СкидкаНаценка");
	
	НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", -1));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Сообщение = Сообщения.Добавить();
		Сообщение.СкидкаНаценка  = СтрокаТЧ.СкидкаНаценка;
		Сообщение.НапомнитьПозже = СтрокаТЧ.НапомнитьПозже;
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("Сообщения", Сообщения);
	
КонецПроцедуры

// Процедура сохраняет выбранные управляемые скидки в табличной части "СкидкиНаценки"
//
Процедура СохранитьДанныеОВыбранныхУправляемыхСкидках(ТаблицаСкидкиНаценки, ПараметрыРасчета)
	
	Для Каждого УправляемаяСкидка Из ПараметрыРасчета.УправляемыеСкидки Цикл
		НоваяСтрока = ТаблицаСкидкиНаценки.Добавить();
		НоваяСтрока.КлючСвязи     = 0;
		НоваяСтрока.Сумма         = 0;
		НоваяСтрока.СкидкаНаценка = УправляемаяСкидка;
	КонецЦикла;
	
	ТекущиеСообщения = ТаблицаСкидкиНаценки.Скопировать(Новый Структура("ЭтоСообщение", Истина), "СкидкаНаценка");
	ТекущиеСообщения.Свернуть("СкидкаНаценка");
	
	Для Каждого СтрокаТЧСообщение Из ТекущиеСообщения Цикл
		
		СтрокаТЧ = ТаблицаСкидкиНаценки.Добавить();
		СтрокаТЧ.КлючСвязи     = -1;
		СтрокаТЧ.СкидкаНаценка = СтрокаТЧСообщение.СкидкаНаценка;
		
		СохраненныеСообщения = ПараметрыРасчета.Сообщения.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаТЧСообщение.СкидкаНаценка));
		Если СохраненныеСообщения.Количество() > 0 Тогда
			Для Каждого Сообщение Из СохраненныеСообщения Цикл
				СтрокаТЧ.НапомнитьПозже = Сообщение.НапомнитьПозже;
			КонецЦикла;
		Иначе
			// Новое сообщение
			СтрокаТЧ.НапомнитьПозже = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ФункцииРасчетаСкидокНаценокПоДеревуСкидокНаценок

Функция ПолучитьГруппуУмножениеРодитель(СтрокаДерева, ПараметрыРасчета)
	
	Результат = ПараметрыРасчета.КешУмножениеГруппы.Получить(СтрокаДерева);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		
		Родитель = СтрокаДерева.Родитель;
		ГруппаУмноженияВерхнегоУровня = ПолучитьГруппуУмножениеРодитель(Родитель, ПараметрыРасчета);
		
		Если ГруппаУмноженияВерхнегоУровня = Неопределено
			И Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
			Результат = Родитель;
		Иначе
			Результат = ПолучитьГруппуУмножениеРодитель(Родитель, ПараметрыРасчета);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыРасчета.КешУмножениеГруппы.Вставить(СтрокаДерева, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИтогРезультатаРасчета(СтрокаДерева, КлючСвязи, ПараметрыРасчета)
	
	Идентификатор = Строка(СтрокаДерева.Ссылка.УникальныйИдентификатор()) + КлючСвязи;
	Сумма = ПараметрыРасчета.КешУмножениеСуммы.Получить(Идентификатор);
	Если Сумма <> Неопределено Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Сумма = 0;
	
	Для Каждого СтрокаДерева Из СтрокаДерева.РезультатРасчета Цикл
		
		Если Не СтрокаДерева.Действует Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.КлючСвязи <> КлючСвязи Тогда
			Продолжить;
		КонецЕсли;
		
		Сумма = Сумма + СтрокаДерева.Сумма;
		
	КонецЦикла;
	
	ПараметрыРасчета.КешУмножениеСуммы.Вставить(Идентификатор, Сумма);
	
	Возврат Сумма;
	
КонецФункции

// Функция получает сумму примененной скидки подчиненных групп для строки товара с учетом иерархии скидок.
//
// Возвращаемое значение:
//	Сумма примененной скидки - Число
//
Функция ПолучитьСуммуПримененныхСкидок(СтрокиДерева, КлючСвязи, ПараметрыРасчета)
	
	Сумма = 0;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ЭтоГруппа Тогда
			Если СтрокаДерева.Рассчитано Тогда
				Сумма = Сумма + ПолучитьИтогРезультатаРасчета(СтрокаДерева, КлючСвязи, ПараметрыРасчета);
			Иначе
				Сумма = Сумма + ПолучитьСуммуПримененныхСкидок(СтрокаДерева.Строки, КлючСвязи, ПараметрыРасчета);
			КонецЕсли;
		Иначе
			Если СтрокаДерева.Рассчитано Тогда
				Сумма = Сумма + ПолучитьИтогРезультатаРасчета(СтрокаДерева, КлючСвязи, ПараметрыРасчета);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

// Функция получает цену номенклатуры по виду цен заданному в параметрах скидки.
//
// Возвращаемое значение:
//	Число - цена номенклатуры.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦен(Товар, Параметры, ВидЦены)
	
	Цена = 0;
	
	Отбор = Новый Структура(
		"Номенклатура,
		|Характеристика,
		|ВидЦены",
		Товар.Номенклатура,
		Товар.Характеристика,
		ВидЦены);
	
	МассивСтрокЦены = Параметры.ЦеныНоменклатуры.НайтиСтроки(Отбор);
	Для Каждого СтрокаЦена Из МассивСтрокЦены Цикл
		
		Если СтрокаЦена.Упаковка = Товар.Упаковка Тогда
			Цена = СтрокаЦена.Цена;
		Иначе
			
			// Приведем цену к цене за упаковку сегмента.
			// Цена не округляется для повышения точности...
			Если СтрокаЦена.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
				Цена = СтрокаЦена.Цена * (Товар.Количество / Товар.КоличествоУпаковок);
			Иначе
				Цена = (СтрокаЦена.Цена / СтрокаЦена.УпаковкаКоэффициент) * (Товар.Количество / Товар.КоличествоУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Цена;
	
КонецФункции


// Функция выполняет объединение подчиненных таблиц данных.
//
// Возвращаемое значение:
//	РезультатРасчета - объединенная таблица данных.
//
Функция ОбъединитьРезультатыРасчетаПодчиненныхСтрок(СтрокаДерева)
	
	РезультатРасчета = Новый ТаблицаЗначений;
	РезультатРасчета.Колонки.Добавить("КлючСвязи",                 Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Сумма",                     Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	РезультатРасчета.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если НЕ ПодчиненнаяСтрока.ЭтоГруппа Тогда // Это скидка а не группа
			
			Если НЕ ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.Управляемая И НЕ ПодчиненнаяСтрока.НазначенаПользователем Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьТаблицуДанныхПодчиненныхСтрок(РезультатРасчета, ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	Возврат РезультатРасчета;
	
КонецФункции

// Процедура выполняет расчет скидки по группе совместного применения: максимум, минимум, вытеснение.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимумМинимумВытеснение(СтрокаДерева, Параметры)
	
	ТЗ = ПустаяТаблицаСкидокСРасшифровкой(Параметры);
	
	Если СтрокаДерева.ВариантРасчетаРезультатаСовместногоПрименения = Перечисления.ВариантыРасчетаРезультатаСовместногоПрименения.ПоСтроке Тогда
		
		РезультатРасчета = ОбъединитьРезультатыРасчетаПодчиненныхСтрок(СтрокаДерева);
		Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
			РезультатРасчета.Сортировать("КлючСвязи, Сумма Убыв, РеквизитДопУпорядочивания");
		ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
			РезультатРасчета.Сортировать("КлючСвязи, Сумма Возр, РеквизитДопУпорядочивания");
		ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
			РезультатРасчета.Сортировать("КлючСвязи, РеквизитДопУпорядочивания");
		КонецЕсли;
		
		КлючСвязи = Неопределено;
		Для Каждого СтрокаТаблицы Из РезультатРасчета Цикл
			
			Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
				
				НоваяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Действует = Истина;
				
				КлючСвязи = СтрокаТаблицы.КлючСвязи;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		РезультатРасчета = ТаблицаДанныхПоСпособуСовместногоПримененияДляДокументаВЦелом(СтрокаДерева);
		Для Каждого СтрокаТаблицы Из РезультатРасчета Цикл
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаДерева.РезультатРасчета = ТЗ;
	
КонецПроцедуры

// Процедура выполняет расчет скидки по группе совместного применения: сложение.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияСложениеУмножение(СтрокаДерева, ПараметрыРасчета)
	
	РезультатРасчета = ОбъединитьРезультатыРасчетаПодчиненныхСтрок(СтрокаДерева);
	РезультатРасчета.Сортировать("КлючСвязи");
	
	ТЗ = ПустаяТаблицаСкидокСРасшифровкой(ПараметрыРасчета);
	
	КлючСвязи = Неопределено;
	Для Каждого СтрокаТаблицы Из РезультатРасчета Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.КлючСвязи = СтрокаТаблицы.КлючСвязи;
			НоваяСтрокаТЗ.Сумма = СтрокаТаблицы.Сумма;
			НоваяСтрокаТЗ.Действует = Истина;
			
			// Расшифровка скидки.
			НоваяСтрокаТЗ.Расшифровка = ПараметрыРасчета.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		Иначе
			
			НоваяСтрокаТЗ.Сумма = НоваяСтрокаТЗ.Сумма + СтрокаТаблицы.Сумма;
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.РезультатРасчета = ТЗ;
	
КонецПроцедуры

// Процедура выполняет расчет скидки по группе совместного применения.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, ПараметрыРасчета)
	
	Если    СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум
		ИЛИ СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум
		ИЛИ СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимумМинимумВытеснение(СтрокаДерева, ПараметрыРасчета);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение
		  ИЛИ СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияСложениеУмножение(СтрокаДерева, ПараметрыРасчета);
		
	КонецЕсли;
	
	СтрокаДерева.Рассчитано = Истина;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПрименения()


Функция СтрокиТоваровДляРаспределения(СтрокаДерева, ПараметрыРасчета) Экспорт
	
	Если СтрокаДерева.ПараметрыУсловий.ЕстьУсловияПоСтроке Тогда
		Товары = Новый Массив;
		Для Каждого СтрокаТЧ Из СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий Цикл
			Товары.Добавить(ПараметрыРасчета.Товары.Найти(СтрокаТЧ.КлючСвязи, "КлючСвязи"));
		КонецЦикла;
	Иначе
		Товары = ПараметрыРасчета.Товары;
	КонецЕсли;
	
	Возврат Товары;
	
КонецФункции

Функция ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета, ЭтоУмножение = Истина) Экспорт
	
	Если ЭтоУмножение Тогда
		
		ГруппаУмножение = ПолучитьГруппуУмножениеРодитель(СтрокаДерева, ПараметрыРасчета);
		
		Если ГруппаУмножение <> Неопределено Тогда
			СуммаПримененнойСкидки = Окр(ПолучитьСуммуПримененныхСкидок(ГруппаУмножение.Строки, Товар.КлючСвязи, ПараметрыРасчета), 2);
		Иначе
			СуммаПримененнойСкидки = 0;
		КонецЕсли;
		
		Сумма = Товар.Сумма - СуммаПримененнойСкидки;
		Если Сумма < 0 Тогда
			Сумма = 0;
		КонецЕсли;
		
	Иначе
		Сумма = Товар.Сумма;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Функция КратностьВыполнения(СтрокаДерева) Экспорт
	
	МинимальнаяКратностьВыполнения = Неопределено;
	Условия = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе));
	Для Каждого СтрокаУсловия Из Условия Цикл
		Если СтрокаУсловия.КратностьВыполнения < 0 Тогда
			Продолжить;
		КонецЕсли;
		Если МинимальнаяКратностьВыполнения = Неопределено Или СтрокаУсловия.КратностьВыполнения < МинимальнаяКратностьВыполнения Тогда
			МинимальнаяКратностьВыполнения = СтрокаУсловия.КратностьВыполнения;
		КонецЕсли;
	КонецЦикла;
	Если МинимальнаяКратностьВыполнения = Неопределено Тогда
		Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
			МинимальнаяКратностьВыполнения = 1;
		Иначе
			МинимальнаяКратностьВыполнения = 0;
		КонецЕсли;
	КонецЕсли;
	Если Не СтрокаДерева.ИспользоватьКратность Тогда
		Если МинимальнаяКратностьВыполнения > 0 Тогда
			МинимальнаяКратностьВыполнения = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МинимальнаяКратностьВыполнения;
	
КонецФункции

Функция ЗначениеСкидкиНаценки(СтрокаДерева, СтрокаТЧ, ПараметрыРасчета) Экспорт
	
	ЗначениеСкидкиНаценки = СтрокаДерева.ЗначениеСкидкиНаценки;
	
	Если ПараметрыРасчета.ИспользоватьЦеновыеГруппы Тогда
		УточненияЗначенияСкидкиНаценки = ПараметрыРасчета.УточненияЗначенияСкидкиНаценки.Получить(СтрокаДерева.Ссылка);
		Если УточненияЗначенияСкидкиНаценки <> Неопределено Тогда
			Для Каждого Уточнение Из УточненияЗначенияСкидкиНаценки Цикл
				Если Уточнение.Ключ = СтрокаТЧ.ЦеноваяГруппа Тогда
					ЗначениеСкидкиНаценки = Уточнение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеСкидкиНаценки;
	
КонецФункции


Функция КонвертироватьСуммуВБонусы(СтрокаДерева, Сумма, ПараметрыРасчета) Экспорт
	
	Значение = Сумма;
	
	Если СтрокаДерева.СпособПримененияСкидки = Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы Тогда
		
		НоваяВалюта = СтрокаДерева.ВалютаКонвертацииБонусов;
		СтруктураКурсовНовойВалюты = ПараметрыРасчета.КурсыВалют.Найти(НоваяВалюта, "Валюта");
		ТекущаяВалюта = ПараметрыРасчета.ВалютаДокумента;
		СтруктураКурсовТекущейВалюты = ПараметрыРасчета.КурсыВалют.Найти(ТекущаяВалюта, "Валюта");
		
		Значение = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма * СтрокаДерева.КурсКонвертацииБонусовВВалюту,
			НоваяВалюта,
			ТекущаяВалюта,
			СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовТекущейВалюты.Курс,
			СтруктураКурсовНовойВалюты.Кратность,
			СтруктураКурсовТекущейВалюты.Кратность);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьРасшифровкуСкидки(СтрокаДерева, Сумма, ПараметрыРасчета, ЭтоСообщение = Ложь) Экспорт
	
	Расшифровка = ПараметрыРасчета.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
	
	СтрокаРасшифровки = Расшифровка.Добавить();
	СтрокаРасшифровки.СкидкаНаценка = СтрокаДерева.Ссылка;
	СтрокаРасшифровки.Сумма         = Сумма;
	СтрокаРасшифровки.ЭтоСообщение  = ЭтоСообщение;
	
	Возврат Расшифровка;
	
КонецФункции


Функция СтоимостьСамыхДешевыхТоваров(Количество, Товары) Экспорт
	
	ТаблицаСтоимостейТоваров = Новый ТаблицаЗначений;
	ТаблицаСтоимостейТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаСтоимостейТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого Товар Из Товары Цикл
		
		Если Товар.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСтоимостейТоваров.Добавить();
		НоваяСтрока.Цена       = Товар.Сумма / Товар.Количество;
		НоваяСтрока.Количество = Товар.Количество;
		
	КонецЦикла;
	ТаблицаСтоимостейТоваров.Сортировать("Цена Возр");
	
	Стоимость = 0;
	Для Итерация = 1 По Количество Цикл
		Для Каждого СтрокаТЧ Из ТаблицаСтоимостейТоваров Цикл
			Если СтрокаТЧ.Количество > 0 Тогда
				СтрокаТЧ.Количество = СтрокаТЧ.Количество - 1;
				Стоимость = Стоимость + СтрокаТЧ.Цена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Стоимость;
	
КонецФункции

Процедура ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, СуммаСкидки, Товар, РезультатРасчета, ПараметрыРасчета) Экспорт
	
	НоваяСтрока           = РезультатРасчета.Добавить();
	НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
	НоваяСтрока.Действует = Истина;
	
	Если СтрокаДерева.Управляемая И НЕ СтрокаДерева.НазначенаПользователем Тогда
		НоваяСтрока.Действует = Ложь;
	КонецЕсли;
	
	// Если скидка на данную строку не действует - пропускаем.
	Если СтрокаДерева.ПараметрыУсловий.ЕстьУсловияПоСтроке
		И СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
		НоваяСтрока.Действует = Ложь;
	КонецЕсли;
	
	НоваяСтрока.Сумма = КонвертироватьСуммуВБонусы(СтрокаДерева, СуммаСкидки, ПараметрыРасчета);
	
	НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, ПараметрыРасчета);
	
КонецПроцедуры

Процедура РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, Товары, РезультатРасчета, ПараметрыРасчета) Экспорт
	
	СуммаСкидкиКРаспределению = СуммаСкидки;
	
	// Расчет общей суммы товаров.
	ОбщаяСуммаТоваров = 0;
	Для Каждого Товар Из Товары Цикл
		
		Сумма = ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета);
		ОбщаяСуммаТоваров = ОбщаяСуммаТоваров + Сумма;
		
	КонецЦикла;
	
	// Распределение скидки на товары сегмента.
	Для Каждого Товар Из Товары Цикл
		
		// Расчет суммы скидки.
		Сумма = ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета);
		
		Если ОбщаяСуммаТоваров <> 0 Тогда
			СуммаСкидки = Окр(Сумма * (СуммаСкидкиКРаспределению / ОбщаяСуммаТоваров), 2);
		Иначе
			СуммаСкидки = 0;
		КонецЕсли;
		
		ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, СуммаСкидки, Товар, РезультатРасчета, ПараметрыРасчета);
		
		СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СуммаСкидки;
		ОбщаяСуммаТоваров = ОбщаяСуммаТоваров - Сумма;
		
	КонецЦикла;
	
КонецПроцедуры


// Процедура выполняет расчет скидки дерева скидок.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидку(СтрокаДерева, ПараметрыРасчета)
	
	Товары = СтрокиТоваровДляРаспределения(СтрокаДерева, ПараметрыРасчета);
	
	РезультатРасчета = ПустаяТаблицаСкидокСРасшифровкой(ПараметрыРасчета);
	
	Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		
		ЭтоУмножение = СтрокаДерева.ПрименятьУмножениеВРамкахВышестоящейГруппы;
		
		Для Каждого Товар Из Товары Цикл
			
			Сумма = ЗначениеСкидкиНаценки(СтрокаДерева, Товар, ПараметрыРасчета) / 100 * ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета, ЭтоУмножение);
			
			ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, Сумма, Товар, РезультатРасчета, ПараметрыРасчета);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		
		СуммаСкидки = СтрокаДерева.ЗначениеСкидкиНаценки * КратностьВыполнения(СтрокаДерева);
		
		РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, Товары, РезультатРасчета, ПараметрыРасчета);
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки Тогда
		
		КратностьВыполнения = КратностьВыполнения(СтрокаДерева);
		
		Для Каждого Товар Из Товары Цикл
			
			СуммаСкидки = ЗначениеСкидкиНаценки(СтрокаДерева, Товар, ПараметрыРасчета) * КратностьВыполнения;
			
			ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, СуммаСкидки, Товар, РезультатРасчета, ПараметрыРасчета);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		
		Для Каждого Товар Из Товары Цикл
			
			ЦенаЗаУпаковку = ПолучитьЦенуНоменклатурыПоВидуЦен(Товар, ПараметрыРасчета, СтрокаДерева.ВидЦены);
			Если ЦенаЗаУпаковку <> 0 Тогда
				СуммаСкидки = Товар.Сумма - Товар.КоличествоУпаковок * ЦенаЗаУпаковку;
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
			
			ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, СуммаСкидки, Товар, РезультатРасчета, ПараметрыРасчета);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение
		ИЛИ СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КартаЛояльности Тогда
		
		Для Каждого Товар Из Товары Цикл
			
			НоваяСтрока              = РезультатРасчета.Добавить();
			НоваяСтрока.КлючСвязи    = Товар.КлючСвязи;
			НоваяСтрока.Действует    = Истина;
			НоваяСтрока.Расшифровка  = ПолучитьРасшифровкуСкидки(СтрокаДерева, 0, ПараметрыРасчета, Истина);
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Количество Тогда
		
		ТаблицаОдинаковыхТоваров = Новый ТаблицаЗначений;
		ТаблицаОдинаковыхТоваров.Колонки.Добавить("КлючСвязи",      Новый ОписаниеТипов("Число"));
		ТаблицаОдинаковыхТоваров.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Если СтрокаДерева.УчитыватьХарактеристики Тогда
			ТаблицаОдинаковыхТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		КонецЕсли;
		ТаблицаОдинаковыхТоваров.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
		ТаблицаОдинаковыхТоваров.Колонки.Добавить("Сумма",     Новый ОписаниеТипов("Число"));
		
		Для Каждого Товар Из Товары Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаОдинаковыхТоваров.Добавить(), Товар);
		КонецЦикла;
		
		ТаблицаОдинаковыхТоваровКопия = ТаблицаОдинаковыхТоваров.Скопировать();
		Если СтрокаДерева.УчитыватьХарактеристики Тогда
			ТаблицаОдинаковыхТоваров.Свернуть("Номенклатура, Характеристика", "Количество, Сумма");
		Иначе
			ТаблицаОдинаковыхТоваров.Свернуть("Номенклатура", "Количество, Сумма");
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура");
		Если СтрокаДерева.УчитыватьХарактеристики Тогда
			Отбор.Вставить("Характеристика");
		КонецЕсли;
		
		Для Каждого Товар Из ТаблицаОдинаковыхТоваров Цикл
			
			Если Товар.Количество <> 0 Тогда
				КратностьВыполнения = Окр((Товар.Количество / СтрокаДерева.УсловиеДляСкидкиКоличеством) - 0.5, 0, РежимОкругления.Окр15как20);
			Иначе
				КратностьВыполнения = 0;
			КонецЕсли;
			
			Если КратностьВыполнения > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(Отбор, Товар);
				СтрокиТоваров = ТаблицаОдинаковыхТоваровКопия.НайтиСтроки(Отбор);
				
				СуммаСкидки = СтоимостьСамыхДешевыхТоваров(КратностьВыполнения * СтрокаДерева.ЗначениеСкидкиНаценки, СтрокиТоваров);
				РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, СтрокиТоваров, РезультатРасчета, ПараметрыРасчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		
		Если ЗначениеЗаполнено(СтрокаДерева.СегментПодарков) Тогда
			ТоварыСегментаПодарков = ПараметрыРасчета.ТоварыПоСегментам.НайтиСтроки(Новый Структура("СегментНоменклатуры", СтрокаДерева.СегментПодарков));
		Иначе
			ТоварыСегментаПодарков = ПараметрыРасчета.Товары;
		КонецЕсли;
		
		СуммаСкидки = СтоимостьСамыхДешевыхТоваров(КратностьВыполнения(СтрокаДерева) * СтрокаДерева.ЗначениеСкидкиНаценки, ТоварыСегментаПодарков);
		
		РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, Товары, РезультатРасчета, ПараметрыРасчета);
		
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы Тогда
		
		СуммаТоваров = 0;
		Для Каждого Товар Из Товары Цикл
			СуммаТоваров = СуммаТоваров + ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета);
		КонецЦикла;
		
		СуммаСкидки = 0;
		Если СтрокаДерева.ЗначениеСкидкиНаценки <= СуммаТоваров Тогда
			
			Если ЗначениеЗаполнено(СтрокаДерева.ТочностьОкругления) Тогда
				СуммаСкидки = СуммаТоваров - ЦенообразованиеКлиентСервер.ОкруглитьЦену(СуммаТоваров, СтрокаДерева.ТочностьОкругления, СтрокаДерева.ВариантОкругления);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДерева.ПсихологическоеОкругление) Тогда
				СуммаСкидки = СуммаТоваров + СуммаСкидки - ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(СуммаТоваров, СтрокаДерева.ПсихологическоеОкругление);
			КонецЕсли;
			
		КонецЕсли;
		
		РаспределитьЗначениеСкидкиНаТовары(СтрокаДерева, СуммаСкидки, Товары, РезультатРасчета, ПараметрыРасчета);
		
	ИначеЕсли ТипЗнч(СтрокаДерева.СпособПредоставления) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
	
		ВнешняяОбработка = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(СтрокаДерева.СпособПредоставления);
		УстановитьБезопасныйРежим(Истина);
		РезультатРасчета = ВнешняяОбработка.Рассчитать(
			СтрокаДерева,
			СтрокаДерева.ПараметрыВнешнейОбработки.Получить(),
			Товары,
			ПараметрыРасчета);
		УстановитьБезопасныйРежим(Ложь);
		
	КонецЕсли;
	
	СтрокаДерева.Рассчитано = Истина;
	СтрокаДерева.РезультатРасчета = РезультатРасчета;
	
КонецПроцедуры

// Процедура рекурсивно обходит дерево и производит расчет
// скидок снизу-вверх: от подчиненного элемента дерева к родителю.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РассчитатьСкидкиРекурсивно(СтрокаДерева, Параметры);
			
			// Скидки по подчиненным элементам рассчитаны.
			// Рассчитываем скидки по группе совместного применения (родителю).
			РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры);
			
		Иначе
			
			РассчитатьСкидку(СтрокаДерева, Параметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция производит полный расчет скидок в дереве.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица с рассчитанными скидками.
//
Функция РассчитатьДеревоСкидок(ДеревоСкидок, Параметры)
	
	ВозвращаемыеДанные = Новый Структура;
	
	РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры);
	
	// На верхнем уровне только одна корневая группа.
	ЕстьРезультат = ДеревоСкидок.Строки.Количество() > 0;
	
	Если ЕстьРезультат Тогда
		РезультатРасчета = ДеревоСкидок.Строки[0].РезультатРасчета;
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КлючСвязи",     Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ТЗ.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ЭтоСообщение",  Новый ОписаниеТипов("Булево"));
	
	Если ЕстьРезультат Тогда
		Для Каждого СтрокаТаблицы ИЗ РезультатРасчета Цикл
			Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл
				НоваяСтрока               = ТЗ.Добавить();
				НоваяСтрока.КлючСвязи     = СтрокаТаблицы.КлючСвязи;
				НоваяСтрока.СкидкаНаценка = СтрокаСкидкиНаценки.СкидкаНаценка;
				НоваяСтрока.Сумма         = СтрокаСкидкиНаценки.Сумма;
				НоваяСтрока.ЭтоСообщение  = СтрокаСкидкиНаценки.ЭтоСообщение;
			КонецЦикла;
		КонецЦикла;
		ТЗ.Свернуть("КлючСвязи, СкидкаНаценка, ЭтоСообщение", "Сумма");
	КонецЕсли;
	
	ТЗ.Колонки.Добавить("НапомнитьПозже", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("СпособПримененияСкидки", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПримененияСкидокНаценок"));
	
	Если ЕстьРезультат Тогда
		Для Каждого СтрокаТЧ Из ТЗ Цикл
			СтрокаСкидкаНаценка = ДеревоСкидок.Строки.Найти(СтрокаТЧ.СкидкаНаценка, "Ссылка", Истина);
			СтрокаТЧ.СпособПримененияСкидки = СтрокаСкидкаНаценка.СпособПримененияСкидки;
		КонецЦикла;
	КонецЕсли;
	
	СохранитьДанныеОВыбранныхУправляемыхСкидках(ТЗ, Параметры);
	
	ВозвращаемыеДанные.Вставить("ДеревоСкидок",         ДеревоСкидок);
	ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
	ВозвращаемыеДанные.Вставить("Параметры",            Параметры);
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

// Функция выполняет расчет скидок (наценок) по переданным параметрам.
//
Функция РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры)
	
	ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОсновныеТаблицы = ПакетЗапросовСоздать();
	ОсновныеТаблицы.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УдалятьВременныеТаблицы = Ложь;
	ПреобразовыватьПараметры = Ложь;
	Для Каждого КлючИЗначение Из ПараметрыРасчета Цикл
		ОсновныеТаблицы.Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПакетЗапросовВставитьЗапросВПакет(ЗапросВременнаяТаблицаТовары(ПараметрыРасчета),  ОсновныеТаблицы, Неопределено,              УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	ПакетЗапросовВставитьЗапросВПакет(ЗапросКурсыВалют(ПараметрыРасчета),              ОсновныеТаблицы, "КурсыВалют",              УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	ПакетЗапросовВставитьЗапросВПакет(ЗапросСкидкиНаценки(ПараметрыРасчета),           ОсновныеТаблицы, "СкидкиНаценки",           УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	ПакетЗапросовВставитьЗапросВПакет(ЗапросТЧУсловияПредоставления(ПараметрыРасчета), ОсновныеТаблицы, "ТЧУсловияПредоставления", УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	ПакетЗапросовВставитьЗапросВПакет(ЗапросУсловияПредоставления(ПараметрыРасчета),   ОсновныеТаблицы, "УсловияПредоставления",   УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	// Для Подарков
	ПакетЗапросовВставитьЗапросВПакет(ЗапросТоварыПоСегментам(ПараметрыРасчета),       ОсновныеТаблицы, "ТоварыПоСегментам",       УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	// Для Специальной цены
	ПакетЗапросовВставитьЗапросВПакет(ЗапросЦеныНоменклатуры(ПараметрыРасчета),        ОсновныеТаблицы, "ЦеныНоменклатуры",        УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	Если ИспользоватьЦеновыеГруппы Тогда
		ПакетЗапросовВставитьЗапросВПакет(
			ЗапросСкидкиНаценкиПоЦеновымГруппам(ПараметрыРасчета),
			ОсновныеТаблицы,
			"УточненияЗначенияСкидкиНаценкиПоЦеновымГруппам",
			УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
	КонецЕсли;
	
	ПакетЗапросовВыполнить(ОсновныеТаблицы);
	
	КурсыВалют = ПакетЗапросовРезультатПоИмени("КурсыВалют", ОсновныеТаблицы).Выгрузить();
	Для Каждого СтрокаТЧ Из КурсыВалют Цикл
		Если СтрокаТЧ.Курс = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru='Для валюты %1 не установлен курс.
                           |Перед расчетом скидок (наценок) курсы валют должны быть установлены.'
                           |;uk='Для валюти %1 не встановлений курс.
                           |Перед розрахунком знижок (націнок) курси валют повинні бути встановлені.'"), СтрокаТЧ.Валюта);
		КонецЕсли;
	КонецЦикла;
	
	Условия               = ПакетЗапросовРезультатПоИмени("ТЧУсловияПредоставления", ОсновныеТаблицы).Выгрузить();
	УсловияПредоставления = ПакетЗапросовРезультатПоИмени("УсловияПредоставления", ОсновныеТаблицы).Выгрузить();
	ДеревоСкидок          = ПолучитьДеревоСкидок(ОсновныеТаблицы);
	
	ДеревоСкидок.Колонки.Добавить("Рассчитано", Новый ОписаниеТипов("Булево"));
	
	Скидки = ДеревоСкидок.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
	
	ТаблицаВыполненныеУсловия = ВыполнитьЗапросыУсловийПредоставления(
		УсловияПредоставления,
		Скидки,
		ПараметрыРасчета,
		МенеджерВременныхТаблиц);
	ПроверитьУсловияРекурсивно(ДеревоСкидок, Скидки, Условия, ТаблицаВыполненныеУсловия);
	
	Если ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		
		ВозвращаемыеДанные = Новый Структура;
		ВозвращаемыеДанные.Вставить("ДеревоСкидок", ДеревоСкидок);
		ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ПустаяТаблицаСкидкиНаценки());
		
		Возврат ВозвращаемыеДанные;
		
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("ИспользоватьЦеновыеГруппы", ИспользоватьЦеновыеГруппы);
	ПараметрыРасчета.Вставить("ЦеныНоменклатуры",      ПакетЗапросовРезультатПоИмени("ЦеныНоменклатуры",  ОсновныеТаблицы).Выгрузить());
	ПараметрыРасчета.Вставить("ТоварыПоСегментам",     ПакетЗапросовРезультатПоИмени("ТоварыПоСегментам", ОсновныеТаблицы).Выгрузить());
	ПараметрыРасчета.Вставить("УсловияПредоставления", ПакетЗапросовРезультатПоИмени("УсловияПредоставления",         ОсновныеТаблицы).Выгрузить());
	
	ПараметрыРасчета.Вставить("ПримененныеСкидкиУмножение", ПустаяТаблицаСкидкиНаценки());
	ПараметрыРасчета.Вставить("ВыполненныеУсловия",         ТаблицаВыполненныеУсловия);
	ПараметрыРасчета.Вставить("КурсыВалют",                 КурсыВалют);
	
	ПараметрыРасчета.Вставить("ПустаяТаблицаСкидокСРасшифровкой", ПустаяТаблицаСкидокСРасшифровкой());
	ПараметрыРасчета.Вставить("ПустаяТаблицаРасшифровка",         ПустаяТаблицаРасшифровка());
	ПараметрыРасчета.Вставить("ПустаяТаблицаСкидкиНаценки",       ПустаяТаблицаСкидкиНаценки());
	
	ПараметрыРасчета.Вставить("КешУмножениеГруппы", Новый Соответствие);
	ПараметрыРасчета.Вставить("КешУмножениеСуммы",  Новый Соответствие);
	
	Если ИспользоватьЦеновыеГруппы Тогда
		
		ПараметрыРасчета.Вставить("УточненияЗначенияСкидкиНаценки", Новый Соответствие);
		
		УточненияЗначенияСкидкиНаценкиПоЦеновымГруппам = ПакетЗапросовРезультатПоИмени(
			"УточненияЗначенияСкидкиНаценкиПоЦеновымГруппам", ОсновныеТаблицы).Выгрузить();
		
		ТекущаяСкидка = Неопределено;
		Уточнения = Неопределено;
		
		Для Каждого СтрокаТЧ Из УточненияЗначенияСкидкиНаценкиПоЦеновымГруппам Цикл
			Если ТекущаяСкидка <> СтрокаТЧ.СкидкаНаценка Тогда
				Если ТекущаяСкидка <> Неопределено Тогда
					ПараметрыРасчета.УточненияЗначенияСкидкиНаценки.Вставить(ТекущаяСкидка, Уточнения);
				КонецЕсли;
				Уточнения = ПустаяТаблицаУточненияЗначенияСкидкиНаценки();
				ТекущаяСкидка = СтрокаТЧ.СкидкаНаценка;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Уточнения.Добавить(), СтрокаТЧ);
		КонецЦикла;
		
		Если ТекущаяСкидка <> Неопределено Тогда
			ПараметрыРасчета.УточненияЗначенияСкидкиНаценки.Вставить(ТекущаяСкидка, Уточнения);
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатРасчета = РассчитатьДеревоСкидок(ДеревоСкидок, ПараметрыРасчета);
	
	Возврат РезультатРасчета;
	
КонецФункции

// Процедура применяет результат расчета скидок (наценок) к объекту.
// Вызывается из форм документов.
//
Процедура ПрименитьРезультатРасчетаКОбъекту(Объект, 
                                            ИмяТЧ,
                                            ПримененныеСкидкиНаценки,
                                            РассчитыватьСуммуСНДС=Ложь, 
                                            РассчитыватьСуммуВзаиморасчетов=Ложь,
                                            РеализацияСверхЗаказа = Ложь)
	
	Объект.СкидкиНаценки.Загрузить(ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки);
	АвтоматическиеСкидкиНаценки = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Скопировать(Новый Структура("СпособПримененияСкидки", Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок));
	НачисленныеБонусныеБаллы = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Скопировать(Новый Структура("СпособПримененияСкидки", Перечисления.СпособыПримененияСкидокНаценок.НачислитьБонусныеБаллы));
	
	// Заполнение скидок в табличной части "Товары"
	АвтоматическиеСкидкиНаценки.Свернуть("КлючСвязи", "Сумма");
	АвтоматическиеСкидкиНаценки.Индексы.Добавить("КлючСвязи");
	
	Если ИмяТЧ="Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если РеализацияСверхЗаказа И СтрокаТЧ.КодСтроки > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = АвтоматическиеСкидкиНаценки.Найти(СтрокаТЧ.КлючСвязи, "КлючСвязи");
		Если СтрокаТаблицы = Неопределено Тогда
			СуммаАвтоматическойСкидки = 0;
		Иначе
			СуммаАвтоматическойСкидки = Окр(СтрокаТаблицы.Сумма, 2);
		КонецЕсли;
		
		РассчитыватьСуммуВзаиморасчетовПоСтроке = (РассчитыватьСуммуВзаиморасчетов И СтрокаТЧ.СуммаАвтоматическойСкидки <> СуммаАвтоматическойСкидки);
		
		СтрокаТЧ.СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки;
		
		// Применение автоматической скидки.
		СуммаБезСкидки = Окр(СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена,2);
		
		Если СуммаБезСкидки <> 0 Тогда
			СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
		КонецЕсли;
		
		СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
		
		СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
		
		Если РассчитыватьСуммуСНДС Тогда
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		КонецЕсли;
		
		Если РассчитыватьСуммуВзаиморасчетовПоСтроке Тогда
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросыПодготовкиДанныхДляРасчета

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ЗапросКурсыВалют(ПараметрыРасчета)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	КурсыВалют
	|");
	
	Запрос.Параметры.Вставить("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ЗапросСкидкиНаценки(ПараметрыРасчета, РасширенныйВариант = Истина)
	
	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка                    КАК Ссылка,
	|	СкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|
	|	СкидкиНаценки.ВариантСовместногоПрименения                  КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.ВариантРасчетаРезультатаСовместногоПрименения КАК ВариантРасчетаРезультатаСовместногоПрименения,
	|	
	|	СкидкиНаценки.ПометкаУдаления        КАК ПометкаУдаления,
	|	СкидкиНаценки.СпособПредоставления   КАК СпособПредоставления,
	|	СкидкиНаценки.СпособПримененияСкидки КАК СпособПримененияСкидки,
	|	СкидкиНаценки.ПрименятьУмножениеВРамкахВышестоящейГруппы КАК ПрименятьУмножениеВРамкахВышестоящейГруппы,
	|	
	|	//РасширенныйВариант ВЫБОР
	|	//РасширенныйВариант 	КОГДА (СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма) ИЛИ СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки))
	|	//РасширенныйВариант 		ТОГДА СкидкиНаценки.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|	//РасширенныйВариант 	ИНАЧЕ СкидкиНаценки.ЗначениеСкидкиНаценки
	|	//РасширенныйВариант КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	//ПростойВариант СкидкиНаценки.ЗначениеСкидкиНаценки,
	|	
	|	СкидкиНаценки.ТочностьОкругления        КАК ТочностьОкругления,
	|	СкидкиНаценки.ВариантОкругления         КАК ВариантОкругления,
	|	СкидкиНаценки.ПсихологическоеОкругление КАК ПсихологическоеОкругление,
	|	
	|	СкидкиНаценки.ЭтоГруппа                    КАК ЭтоГруппа,
	|	СкидкиНаценки.Управляемая                  КАК Управляемая,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.ССЫЛКА В(&УправляемыеСкидки) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК НазначенаПользователем,
	|	
	|	СкидкиНаценки.ВидЦены                           КАК ВидЦены,
	|	СкидкиНаценки.СегментПодарков                   КАК СегментПодарков,
	|	СкидкиНаценки.СегментНоменклатурыОграничения    КАК СегментНоменклатурыОграничения,
	|	СкидкиНаценки.ИспользоватьКратность             КАК ИспользоватьКратность,
	|	СкидкиНаценки.УсловиеДляСкидкиКоличеством       КАК УсловиеДляСкидкиКоличеством,
	|	СкидкиНаценки.ВариантОтбораНоменклатуры         КАК ВариантОтбораНоменклатуры,
	|	//РасширенныйВариант СкидкиНаценки.ПараметрыВнешнейОбработки         КАК ПараметрыВнешнейОбработки,
	|	//РасширенныйВариант СкидкиНаценки.УстановленДополнительныйОтбор     КАК УстановленДополнительныйОтбор,
	|	//РасширенныйВариант СкидкиНаценки.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	//РасширенныйВариант СкидкиНаценки.УчитыватьХарактеристики КАК УчитыватьХарактеристики,
	|	
	|	//РасширенныйВариант БонусныеПрограммыЛояльности.ВалютаКонвертацииБонусов      КАК ВалютаКонвертацииБонусов,
	|	//РасширенныйВариант БонусныеПрограммыЛояльности.КурсКонвертацииБонусовВВалюту КАК КурсКонвертацииБонусовВВалюту,
	|	СкидкиНаценки.ВалютаПредоставления КАК ВалютаПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|	
	|		//РасширенныйВариант ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		//РасширенныйВариант ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|	
	|		//РасширенныйВариант ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		//РасширенныйВариант ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|	
	|		//РасширенныйВариант ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК БонусныеПрограммыЛояльности
	|		//РасширенныйВариант ПО БонусныеПрограммыЛояльности.Ссылка = СкидкиНаценки.БонуснаяПрограммаЛояльности
	|	
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&СкидкиНаценки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиНаценки.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	СкидкиНаценки.Ссылка ИЕРАРХИЯ");
	
	Запрос.Параметры.Вставить("СкидкиНаценки",     ПараметрыРасчета.СкидкиНаценки);
	Запрос.Параметры.Вставить("УправляемыеСкидки", ПараметрыРасчета.УправляемыеСкидки);
	
	Если РасширенныйВариант Тогда
		
		Запрос.Параметры.Вставить("ВалютаДокумента", ПараметрыРасчета.ВалютаДокумента);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//РасширенныйВариант", "");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПростойВариант", "");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросТЧУсловияПредоставления(ПараметрыРасчета)
	
	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК СкидкаНаценка,
	|	Т.УсловиеПредоставления КАК УсловиеПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК Т
	|ГДЕ
	|	Т.Ссылка В(&СкидкиНаценки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка КАК СкидкаНаценка,
	|	Т.Ссылка КАК УсловиеПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки КАК Т
	|ГДЕ
	|	Т.Ссылка В(&СкидкиНаценки)
	|	И (Т.ВариантОтбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.БезОграничений)
	|	ИЛИ Т.УстановленДополнительныйОтбор)
	|");
	
	Запрос.Параметры.Вставить("СкидкиНаценки", ПараметрыРасчета.СкидкиНаценки);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ЗапросУсловияПредоставления(ПараметрыРасчета)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка,
	|	
	|	ВЫБОР
	|		КОГДА (
	|				Т.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж)
	|				ИЛИ Т.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|				)
	|				И Т.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА Т.ЗначениеУсловияОграничения * ЕСТЬNULL(КурсыВалютОграничения.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютОграничения.Кратность, 1))
	|		ИНАЧЕ Т.ЗначениеУсловияОграничения
	|	КОНЕЦ КАК ЗначениеУсловияОграничения
	|	
	|ПОМЕСТИТЬ УсловияПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК Условия
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК Т
	|		ПО Т.Ссылка = Условия.УсловиеПредоставления
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОграничения
	|		ПО (КурсыВалютОграничения.Валюта = Условия.УсловиеПредоставления.ВалютаОграничения)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|ГДЕ
	|	Условия.Ссылка В (&СкидкиНаценки)
	|;
	|
	|//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка                                         КАК Ссылка,
	|	УсловияПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	Т.УсловиеПредоставления                          КАК УсловиеПредоставления,
	|	Т.ВариантОпределенияПериодаНакопительнойСкидки   КАК ВариантОпределенияПериодаНакопительнойСкидки,
	|	Т.ВариантНакопления                              КАК ВариантНакопления,
	|	Т.ВалютаОграничения                              КАК ВалютаОграничения,
	|	Т.ВалютаОграничения.Код                          КАК ЦифровойКодВалютыОграничения,
	|	Т.ТипСравнения                                   КАК ТипСравнения,
	|	Т.КритерийОграниченияПримененияЗаОбъемПродаж     КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	Т.ГрафикОплаты                                   КАК ГрафикОплаты,
	|	Т.ФормаОплаты                                    КАК ФормаОплаты,
	|	Т.СегментНоменклатурыОграничения                 КАК СегментНоменклатурыОграничения,
	|	Т.ПериодНакопления                               КАК ПериодНакопления,
	|	Т.ГруппаПользователей                            КАК ГруппаПользователей,
	|	Т.ВидКартыЛояльности                             КАК ВидКартыЛояльности,
	|	Т.КоличествоПериодовНакопления                   КАК КоличествоПериодовНакопления,
	|	Т.ВариантОтбораНоменклатуры                      КАК ВариантОтбораНоменклатуры,
	|	Т.ХранилищеНастроекКомпоновкиДанных              КАК ХранилищеНастроекКомпоновкиДанных,
	|	Т.ПараметрыВнешнейОбработки                      КАК ПараметрыВнешнейОбработки,
	|	Т.КоличествоДнейДоДняРождения                    КАК КоличествоДнейДоДняРождения,
	|	Т.КоличествоДнейПослеДняРождения                 КАК КоличествоДнейПослеДняРождения,
	|	Т.ВключатьТекущуюПродажуВНакопленныйОбъемПродаж  КАК ВключатьТекущуюПродажуВНакопленныйОбъемПродаж,
	|	Т.УчитыватьХарактеристики                        КАК УчитыватьХарактеристики,
	|	Т.СегментПартнеров                               КАК СегментПартнеров
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК Т
	|		ПО Т.Ссылка = УсловияПредоставления.Ссылка
	|");
	
	Запрос.Параметры.Вставить("СкидкиНаценки",   ПараметрыРасчета.СкидкиНаценки);
	Запрос.Параметры.Вставить("ВалютаДокумента", ПараметрыРасчета.ВалютаДокумента);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует текст запроса для таблицы товаров по сегментам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ЗапросВременнаяТаблицаТовары(ПараметрыРасчета)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Серия              КАК Серия,
	|	Товары.Склад              КАК Склад,
	|
	|	ВЫБОР
	|		КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) ТОГДА
	|			9999999999
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ТекущаяДата, ВЫРАЗИТЬ(Товары.Серия КАК Справочник.СерииНоменклатуры).ГоденДо, ДЕНЬ) КАК Число(10))
	|	КОНЕЦ КАК КоличествоДнейДоОкончанияСрокаГодности,
	|
	|	Товары.ВидЦены            КАК ВидЦены,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена                             КАК ЦенаЗаУпаковку,
	|	Товары.КоличествоУпаковок * Товары.Цена КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	Запрос.Параметры.Вставить("Товары", ПараметрыРасчета.Товары);
	Запрос.Параметры.Вставить("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует текст запроса для таблицы товаров по сегментам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ЗапросТоварыПоСегментам(ПараметрыРасчета)
	
	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючСвязи             КАК КлючСвязи,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Упаковка              КАК Упаковка,
	|	Товары.Количество            КАК Количество,
	|	Товары.КоличествоУпаковок    КАК КоличествоУпаковок,
	|	Товары.Серия                 КАК Серия,
	|	Товары.ВидЦены               КАК ВидЦены,
	|	НоменклатураСегмента.Сегмент КАК СегментНоменклатуры,
	|	Т.ЦеноваяГруппа              КАК ЦеноваяГруппа,
	|	Товары.Сумма                 КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО    Товары.Номенклатура   = НоменклатураСегмента.Номенклатура
	|			И Товары.Характеристика = НоменклатураСегмента.Характеристика
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Т
	|		ПО Т.Ссылка = Товары.Номенклатура
	|");
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ЗапросСкидкиНаценкиПоЦеновымГруппам(ПараметрыРасчета)
	
	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УточненияПоЦеновымГруппам.Ссылка        КАК СкидкаНаценка,
	|	УточненияПоЦеновымГруппам.ЦеноваяГруппа КАК Ключ,
	|	ВЫБОР
	|		КОГДА (СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма) ИЛИ СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки))
	|			ТОГДА УточненияПоЦеновымГруппам.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ УточненияПоЦеновымГруппам.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК УточненияПоЦеновымГруппам
	|		ПО СкидкиНаценки.Ссылка = УточненияПоЦеновымГруппам.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (&СкидкиНаценки)
	|УПОРЯДОЧИТЬ ПО
	|	УточненияПоЦеновымГруппам.Ссылка
	|");
	
	Запрос.Параметры.Вставить("СкидкиНаценки", ПараметрыРасчета.СкидкиНаценки);
	Запрос.Параметры.Вставить("ВалютаДокумента", ПараметрыРасчета.ВалютаДокумента);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует текст запроса для таблицы цены номенклатуры (цена пересчитывается в валюту документа за единицу хранения).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ЗапросЦеныНоменклатуры(ПараметрыРасчета)

	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены        КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура   КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Упаковка       КАК Упаковка,
	|	
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
	|	
	|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена
	|		* ( ЕСТЬNULL(КурсыВалют.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) )
	|		/ ( ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалют.Кратность, 1) )
	|	КАК ЧИСЛО(15, 2)) КАК Цена
	|	
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|			ВидЦены В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Т.ВидЦены
	|						ИЗ
	|							Справочник.СкидкиНаценки КАК Т
	|						ГДЕ
	|							Т.Ссылка В (&СкидкиНаценки) И Т.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены))
	|				И (Номенклатура, Характеристика) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ВременнаяТаблицаТовары КАК Т)
	|	
	|	) КАК ЦеныНоменклатурыСрезПоследних
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО (КурсыВалют.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	
	Запрос.Параметры.Вставить("СкидкиНаценки",   ПараметрыРасчета.СкидкиНаценки);
	Запрос.Параметры.Вставить("ВалютаДокумента", ПараметрыРасчета.ВалютаДокумента);
	Запрос.Параметры.Вставить("ТекущаяДата",     ПараметрыРасчета.ТекущаяДата);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросСкидкиНаценкиПоЗаказу(Объект) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсВалютыВзаиморасчетов.Курс * КурсВалюты.Кратность / (КурсВалюты.Курс * КурсВалютыВзаиморасчетов.Кратность) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ВалютаЗаказаВВалютуДокумента
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсВалюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаВзаиморасчетов) КАК КурсВалютыВзаиморасчетов
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(Товары.КлючСвязи КАК ЧИСЛО) КАК КлючСвязи,
	|	ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО) КАК Количество
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыЗаказа.КлючСвязи КАК КлючСвязи,
	|	ТоварыРеализации.Количество / ТоварыЗаказа.Количество КАК Коэффициент,
	|	ТоварыЗаказа.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказа.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК СуммаАвтоматическойСкидки,
	|	ТоварыЗаказа.СуммаРучнойСкидки * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК СуммаРучнойСкидки,
	|	ТоварыЗаказа.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	ТоварыДокумента КАК ТоварыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
	|		ПО ТоварыРеализации.КодСтроки = ТоварыЗаказа.КодСтроки
	|			И ТоварыРеализации.Номенклатура = ТоварыЗаказа.Номенклатура
	|			И ТоварыРеализации.Характеристика = ТоварыЗаказа.Характеристика
	|			И ТоварыРеализации.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыЗаказа.КодСтроки,
	|	ТоварыЗаказа.КлючСвязи,
	|	ТоварыРеализации.Количество / ТоварыЗаказа.Количество,
	|	ТоварыЗаказа.ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказа.ПроцентРучнойСкидки,
	|	ТоварыЗаказа.СуммаАвтоматическойСкидки * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	ТоварыЗаказа.СуммаРучнойСкидки * (ТоварыРеализации.Количество / ТоварыЗаказа.Количество) * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	ТоварыЗаказа.Ссылка
	|ИЗ
	|	ТоварыДокумента КАК ТоварыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаказа
	|		ПО ТоварыРеализации.КодСтроки = ТоварыЗаказа.КодСтроки
	|			И ТоварыРеализации.Номенклатура = ТоварыЗаказа.Номенклатура
	|			И ТоварыРеализации.Характеристика = ТоварыЗаказа.Характеристика
	|			И ТоварыРеализации.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета КАК Сумма,
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента.СкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(СкидкиНаценки.Ссылка, СкидкиНаценки.КлючСвязи) В
	|			(ВЫБРАТЬ
	|				ТоварыДокумента.ЗаказКлиента,
	|				ТоварыДокумента.КлючСвязи
	|			ИЗ
	|				ТоварыДокумента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценки.КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка,
	|	СкидкиНаценки.Сумма * ВалютаЗаказаВВалютуДокумента.КоэффициентПересчета,
	|	СкидкиНаценки.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.СкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютаЗаказаВВалютуДокумента КАК ВалютаЗаказаВВалютуДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(СкидкиНаценки.Ссылка, СкидкиНаценки.КлючСвязи) В
	|			(ВЫБРАТЬ
	|				ТоварыДокумента.ЗаказКлиента,
	|				ТоварыДокумента.КлючСвязи
	|			ИЗ
	|				ТоварыДокумента)");
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Объект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(, "ЗаказКлиента, Номенклатура, Характеристика, КодСтроки, Количество, КлючСвязи"));
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ЗапросыПроверкиУсловийПредоставленияСкидок

Функция ДанныеФильтраПоНоменклатуре(ИсточникДанных, СтрокаЗамены) Экспорт
	
	Если ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") Тогда
		Если ИсточникДанных.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.КоличествоОдинаковых Тогда
			СхемаКомпоновкиДанных = Справочники.СкидкиНаценки.ПолучитьМакет("ОтборУсловияПредоставленияКоличествоОдинаковых");
		ИначеЕсли ИсточникДанных.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.КоличествоРазличных Тогда
			СхемаКомпоновкиДанных = Справочники.СкидкиНаценки.ПолучитьМакет("ОтборУсловияПредоставленияКоличествоРазличных");
		Иначе
			СхемаКомпоновкиДанных = Справочники.СкидкиНаценки.ПолучитьМакет("ОтборУсловияПредоставленияСуммаКоличество");
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = Справочники.СкидкиНаценки.ПолучитьМакет("ОтборСтрок");
		
		Набор = СхемаКомпоновкиДанных.НаборыДанных.Найти("НаборДанных");
		Поля = "СвободныеОстаткиОстатки.Номенклатура,СвободныеОстаткиОстатки.Характеристика,СвободныеОстаткиОстатки.Склад";
		Набор.Запрос = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Набор.Запрос, "ПодстановкаТоварногоОграничения", Поля);
		
	КонецЕсли;
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") Тогда
		УстановленДополнительныйОтбор = Ложь;
	Иначе
		УстановленДополнительныйОтбор = ИсточникДанных.УстановленДополнительныйОтбор;
	КонецЕсли;
	
	Если ИсточникДанных.ВариантОтбораНоменклатуры = Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.ОтборКомпоновкиДанных
		ИЛИ УстановленДополнительныйОтбор Тогда
		Настройки = ИсточникДанных.ХранилищеНастроекКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если ИсточникДанных.ВариантОтбораНоменклатуры = Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.ОтборКомпоновкиДанных Тогда
		
		Если Настройки <> Неопределено И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Настройки, "ОтборПоНоменклатуре") Тогда
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, Настройки.ОтборПоНоменклатуре.Отбор, Ложь);
		КонецЕсли;
		
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
		
	ИначеЕсли ИсточникДанных.ВариантОтбораНоменклатуры = Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.СегментНоменклатуры Тогда
		
		ЭлементОтбора = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СегментНоменклатуры");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ИсточникДанных.СегментНоменклатурыОграничения;
		ЭлементОтбора.Использование = Истина;
		
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
		
	ИначеЕсли ИсточникДанных.ВариантОтбораНоменклатуры = Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.СписокНоменклатуры Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик, "ИспользуетсяОтборПоТоварамИзСписка", Истина, Истина);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик, "Источник", ИсточникДанных.Ссылка, Истина);
		
	КонецЕсли;
	
	Если УстановленДополнительныйОтбор Тогда
		Если Настройки <> Неопределено И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Настройки, "ДополнительныеУсловия") Тогда
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, Настройки.ДополнительныеУсловия.Отбор, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") Тогда
		Если ИсточникДанных.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.КоличествоОдинаковых Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик, "УчитыватьХарактеристики", ИсточникДанных.УчитыватьХарактеристики, Истина);
		ИначеЕсли ИсточникДанных.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.КоличествоРазличных Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Компоновщик, "УчитыватьХарактеристики", ИсточникДанных.УчитыватьХарактеристики, Истина);
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		Компоновщик.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
	
	КомментарийРазделителя = "////////////////////////////////////////////////////////////////////////////////";
	Позиция = СтрНайти(ТекстЗапроса, КомментарийРазделителя);
	ТекстЗапроса = Сред(ТекстЗапроса, Позиция + СтрДлина(КомментарийРазделителя) + 1);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаШаблон", СтрокаЗамены);
	
	Тексты = СтрРазделить(ТекстЗапроса, ";");
	Тексты[Тексты.Количество() - 1] = СтрЗаменить(Тексты[Тексты.Количество() - 1], Символы.ПС + "ИЗ", Символы.ПС + "ПОМЕСТИТЬ ФильтрПоНоменклатуре" + Символы.ПС + "ИЗ");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстЗапроса", СтрСоединить(Тексты, ";") + Символы.ПС);
	ВозвращаемоеЗначение.Вставить("Параметры", Новый Структура);
	Для Каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		ВозвращаемоеЗначение.Параметры.Вставить(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПодготовитьФильтрПоНоменклатуре(Запрос, ИсточникДанных, СтрокаЗамены, ПараметрыРасчета)
	
	ДанныеФильтраПоНоменклатуре = ДанныеФильтраПоНоменклатуре(ИсточникДанных, СтрокаЗамены);
	
	Постфиксы = ПакетЗапросовПостфиксы();
	Для Каждого КлючЗначение Из ДанныеФильтраПоНоменклатуре.Параметры Цикл
		ИмяПараметра = КлючЗначение.Ключ;
		Если Не ПараметрыРасчета.Свойство(ИмяПараметра) Тогда
			НовоеИмяПараметра = ИмяПараметра + "_Кэшируется";
			ЗаменитьИмяПараметраВЗапросе(ДанныеФильтраПоНоменклатуре.ТекстЗапроса, ИмяПараметра, НовоеИмяПараметра, Постфиксы);
		Иначе
			НовоеИмяПараметра = ИмяПараметра;
		КонецЕсли;
		Запрос.УстановитьПараметр(НовоеИмяПараметра, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат ДанныеФильтраПоНоменклатуре.ТекстЗапроса;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок за разовую продажу с условием по строке.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросОпределенияПозицийНоменклатурыНаКоторыеПредоставляетсяСкидка(СкидкаНаценка, ПараметрыРасчета, ЗаполняемыеПараметры)
	
	Запрос = Новый Запрос;
	
	ИмяВременнойТаблицы = "ВременнаяТаблицаТовары";
	
	ТекстЗапроса = ПодготовитьФильтрПоНоменклатуре(Запрос, СкидкаНаценка, ИмяВременнойТаблицы, ПараметрыРасчета);
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовПакета("#Результат#");
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Неопределено     КАК ЗначениеПоказателя,
	|	-1               КАК КратностьВыполнения
	|ИЗ
	|	ФильтрПоНоменклатуре КАК Товары
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗаполнитьПараметрыЗапросОпределенияПозицийНоменклатурыНаКоторыеПредоставляетсяСкидка(Запрос, ПараметрыРасчета, ЗаполняемыеПараметры);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок за разовую продажу с условием по документу.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияЗаРазовуюПродажуСУсловиемПоДокументу(УсловиеПредоставления, ПараметрыРасчета, ЗаполняемыеПараметры)
	
	Запрос = Новый Запрос;
	
	ИмяВременнойТаблицы = "ВременнаяТаблицаТовары";
	
	ТекстЗапроса = ПодготовитьФильтрПоНоменклатуре(Запрос, УсловиеПредоставления, ИмяВременнойТаблицы, ПараметрыРасчета);
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовПакета("#Результат#");
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	&ТекстЗначениеПоказателя КАК ЗначениеПоказателя,
	|	&ТекстКратности          КАК КратностьВыполнения
	|ИЗ
	|	ФильтрПоНоменклатуре КАК Товары
	|";
	
	ПодготовитьТекстЗапросаДляПроверкиУсловияИРасчетаКратности(ТекстЗапроса, УсловиеПредоставления);
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗаполнитьПараметрыЗапросУсловияЗаРазовуюПродажуСУсловиемПоДокументу(
		Запрос,
		УсловиеПредоставления,
		ПараметрыРасчета, ЗаполняемыеПараметры);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для получения временной таблицы накопленного объем продаж по партнеру.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросНакопленныйОбъемПродажПоПартнеруЗаПериод(УсловиеПредоставления, Интервал, ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура              КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика            КАК Характеристика,
	|	ЕСТЬNULL(РегистрСведенийАналитикаУчетаНаборов.НоменклатураНабора,   ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))               КАК НоменклатураНабора,
	|	ЕСТЬNULL(РегистрСведенийАналитикаУчетаНаборов.ХарактеристикаНабора, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНабора,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот
	|	* ЕСТЬNULL(КурсыВалютИсточник.Курс, 1) * ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютИсточник.Кратность, 1)) КАК Сумма
	|	
	|ПОМЕСТИТЬ ИсходныеДанные
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Авто,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам.КлючАналитики
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|				ГДЕ
	|					АналитикаУчетаПоПартнерам.Партнер = &Партнер И АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель))) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНаборов КАК РегистрСведенийАналитикаУчетаНаборов
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНаборов = РегистрСведенийАналитикаУчетаНаборов.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютИсточник
	|		ПО (КурсыВалютИсточник.Валюта = &ВалютаУправленческогоУчета)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУсловиеПредоставления
	|		ПО (КурсыВалютУсловиеПредоставления.Валюта = &ВалютаУсловия)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(РегистрСведенийАналитикаУчетаНаборов.НоменклатураНабора,   ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))               КАК НоменклатураНабора,
	|	ЕСТЬNULL(РегистрСведенийАналитикаУчетаНаборов.ХарактеристикаНабора, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНабора,
	|	-ВыручкаИСебестоимостьПродаж.Количество     КАК Количество,
	|	-ВыручкаИСебестоимостьПродаж.СуммаВыручки
	|	* ЕСТЬNULL(КурсыВалютИсточник.Курс, 1) * ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютИсточник.Кратность, 1)) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНаборов КАК РегистрСведенийАналитикаУчетаНаборов
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНаборов = РегистрСведенийАналитикаУчетаНаборов.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютИсточник
	|		ПО (КурсыВалютИсточник.Валюта = &ВалютаУправленческогоУчета)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУсловиеПредоставления
	|		ПО (КурсыВалютУсловиеПредоставления.Валюта = &ВалютаУсловия)
	|	
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|	И ВыручкаИСебестоимостьПродаж.Период МЕЖДУ &ДатаНачалаЧекККМ И &ДатаОкончанияЧекККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ПроданныеТовары.Номенклатура   КАК Номенклатура,
	|	ПроданныеТовары.Характеристика КАК Характеристика,
	|	ПроданныеТовары.НоменклатураНабора   КАК НоменклатураНабора,
	|	ПроданныеТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ПроданныеТовары.Количество     КАК Количество,
	|	ПроданныеТовары.Сумма
	|	* ЕСТЬNULL(КурсыВалютИсточник.Курс, 1) * ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютИсточник.Кратность, 1)) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ПроданныеТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютИсточник
	|		ПО (КурсыВалютИсточник.Валюта = ПроданныеТовары.Ссылка.Валюта)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУсловиеПредоставления
	|		ПО (КурсыВалютУсловиеПредоставления.Валюта = &ВалютаУсловия)
	|	
	|ГДЕ
	|	ПроданныеТовары.Ссылка В (
	|		ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			Документ.ЧекККМ КАК Т
	|		ГДЕ
	|			Т.Дата МЕЖДУ &ДатаНачалаЧекККМ И &ДатаОкончанияЧекККМ
	|			И Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|			И Т.КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			И Т.Партнер = &Партнер
	|			И Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ПроданныеТовары.Номенклатура   КАК Номенклатура,
	|	ПроданныеТовары.Характеристика КАК Характеристика,
	|	ПроданныеТовары.НоменклатураНабора   КАК НоменклатураНабора,
	|	ПроданныеТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	-ПроданныеТовары.Количество     КАК Количество,
	|	-ПроданныеТовары.Сумма
	|	* ЕСТЬNULL(КурсыВалютИсточник.Курс, 1) * ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютИсточник.Кратность, 1)) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК ПроданныеТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютИсточник
	|		ПО (КурсыВалютИсточник.Валюта = ПроданныеТовары.Ссылка.Валюта)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУсловиеПредоставления
	|		ПО (КурсыВалютУсловиеПредоставления.Валюта = &ВалютаУсловия)
	|	
	|ГДЕ
	|	ПроданныеТовары.Ссылка В (
	|		ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			Документ.ЧекККМВозврат КАК Т
	|		ГДЕ
	|			Т.Дата МЕЖДУ &ДатаНачалаЧекККМ И &ДатаОкончанияЧекККМ
	|			И Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|			И Т.КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			И Т.Партнер = &Партнер
	|			И Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|)";
	
	Если УсловиеПредоставления.ВключатьТекущуюПродажуВНакопленныйОбъемПродаж Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС +
		"ОБЪЕДИНИТЬ ВСЕ
		|";
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ПроданныеТовары.Номенклатура   КАК Номенклатура,
		|	ПроданныеТовары.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураНабора,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
		|	ПроданныеТовары.Количество КАК Количество,
		|	ПроданныеТовары.Сумма
		|	* ЕСТЬNULL(КурсыВалютИсточник.Курс, 1) * ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Кратность, 1)
		|	 / (ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютИсточник.Кратность, 1)) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ПроданныеТовары
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютИсточник
		|		ПО (КурсыВалютИсточник.Валюта = &ВалютаДокумента)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУсловиеПредоставления
		|		ПО (КурсыВалютУсловиеПредоставления.Валюта = &ВалютаУсловия)
		|";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗаполнитьПараметрыЗапросНакопленныйОбъемПродажПоПартнеруЗаПериод(
		Запрос,
		УсловиеПредоставления,
		Интервал,
		ПараметрыРасчета);
	
	ИмяВременнойТаблицы = ИмяВременнойТаблицыНакопленныйОбъемПродаж(УсловиеПредоставления, Интервал);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ИсходныеДанные", "ПОМЕСТИТЬ" + " " + ИмяВременнойТаблицы);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для получения временной таблицы накопленного объем продаж по соглашению.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(УсловиеПредоставления, Интервал, ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура             КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика           КАК Характеристика,
	|	ЕСТЬNULL(РегистрСведенийАналитикаУчетаНаборов.НоменклатураНабора,   ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))               КАК НоменклатураНабора,
	|	ЕСТЬNULL(РегистрСведенийАналитикаУчетаНаборов.ХарактеристикаНабора, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНабора,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот   КАК Количество,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот
	|	* ЕСТЬNULL(КурсыВалютИсточник.Курс, 1) * ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютИсточник.Кратность, 1)) КАК Сумма
	|	
	|ПОМЕСТИТЬ ИсходныеДанные
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Авто,
	|			Соглашение = &Соглашение
	|			И АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам.КлючАналитики
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|				ГДЕ
	|					АналитикаУчетаПоПартнерам.Партнер = &Партнер И АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель))) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНаборов КАК РегистрСведенийАналитикаУчетаНаборов
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНаборов = РегистрСведенийАналитикаУчетаНаборов.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютИсточник
	|		ПО (КурсыВалютИсточник.Валюта = &ВалютаУправленческогоУчета)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУсловиеПредоставления
	|		ПО (КурсыВалютУсловиеПредоставления.Валюта = &ВалютаУсловия)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(РегистрСведенийАналитикаУчетаНаборов.НоменклатураНабора,   ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))               КАК НоменклатураНабора,
	|	ЕСТЬNULL(РегистрСведенийАналитикаУчетаНаборов.ХарактеристикаНабора, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНабора,
	|	-ВыручкаИСебестоимостьПродаж.Количество     КАК Количество,
	|	-ВыручкаИСебестоимостьПродаж.СуммаВыручки
	|	* ЕСТЬNULL(КурсыВалютИсточник.Курс, 1) * ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютИсточник.Кратность, 1)) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНаборов КАК РегистрСведенийАналитикаУчетаНаборов
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНаборов = РегистрСведенийАналитикаУчетаНаборов.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютИсточник
	|		ПО (КурсыВалютИсточник.Валюта = &ВалютаУправленческогоУчета)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУсловиеПредоставления
	|		ПО (КурсыВалютУсловиеПредоставления.Валюта = &ВалютаУсловия)
	|	
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|	И ВыручкаИСебестоимостьПродаж.Период МЕЖДУ &ДатаНачалаПС И &ДатаОкончанияПС
	|";
	
	Если УсловиеПредоставления.ВключатьТекущуюПродажуВНакопленныйОбъемПродаж Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС +
		"ОБЪЕДИНИТЬ ВСЕ
		|";
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ПроданныеТовары.Номенклатура   КАК Номенклатура,
		|	ПроданныеТовары.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураНабора,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
		|	ПроданныеТовары.Количество КАК Количество,
		|	ПроданныеТовары.Сумма
		|	* ЕСТЬNULL(КурсыВалютИсточник.Курс, 1) * ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Кратность, 1)
		|	 / (ЕСТЬNULL(КурсыВалютУсловиеПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютИсточник.Кратность, 1)) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ПроданныеТовары
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютИсточник
		|		ПО (КурсыВалютИсточник.Валюта = &ВалютаДокумента)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУсловиеПредоставления
		|		ПО (КурсыВалютУсловиеПредоставления.Валюта = &ВалютаУсловия)
		|";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗаполнитьПараметрыЗапросНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(
		Запрос,
		УсловиеПредоставления,
		Интервал,
		ПараметрыРасчета);
	
	ИмяВременнойТаблицы = ИмяВременнойТаблицыНакопленныйОбъемПродаж(УсловиеПредоставления, Интервал);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ИсходныеДанные", "ПОМЕСТИТЬ" + " " + ИмяВременнойТаблицы);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок за накопленный объем продаж по партнеру.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(УсловиеПредоставления, Интервал, ПараметрыРасчета, ЗаполняемыеПараметры)
	
	Запрос = Новый Запрос;
	
	Если ЗаполняемыеПараметры = "Кэшируемые" Тогда
		ИмяВременнойТаблицы = "ИсходныеДанные";
	Иначе
		ИмяВременнойТаблицы = ИмяВременнойТаблицыНакопленныйОбъемПродаж(УсловиеПредоставления, Интервал);
	КонецЕсли;
	
	ТекстЗапроса = ПодготовитьФильтрПоНоменклатуре(Запрос, УсловиеПредоставления, ИмяВременнойТаблицы, ПараметрыРасчета);
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовПакета("#Результат#");
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	&ТекстЗначениеПоказателя КАК ЗначениеПоказателя,
	|	&ТекстКратности          КАК КратностьВыполнения
	|ИЗ
	|	ФильтрПоНоменклатуре КАК Товары
	|";
	
	ПодготовитьТекстЗапросаДляПроверкиУсловияИРасчетаКратности(ТекстЗапроса, УсловиеПредоставления);
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗаполнитьПараметрыЗапросУсловияЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(
		Запрос,
		УсловиеПредоставления,
		Интервал,
		ПараметрыРасчета, ЗаполняемыеПараметры);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок за накопленный объем продаж по торговому соглашению.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияЗаНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(УсловиеПредоставления, Интервал, ПараметрыРасчета, ЗаполняемыеПараметры)
	
	Запрос = Новый Запрос;
	
	Если ЗаполняемыеПараметры = "Кэшируемые" Тогда
		ИмяВременнойТаблицы = "ИсходныеДанные";
	Иначе
		ИмяВременнойТаблицы = ИмяВременнойТаблицыНакопленныйОбъемПродаж(УсловиеПредоставления, Интервал);
	КонецЕсли;
	
	ТекстЗапроса = ПодготовитьФильтрПоНоменклатуре(Запрос, УсловиеПредоставления, ИмяВременнойТаблицы, ПараметрыРасчета);
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовПакета("#Результат#");
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	&ТекстЗначениеПоказателя КАК ЗначениеПоказателя,
	|	&ТекстКратности          КАК КратностьВыполнения
	|ИЗ
	|	ФильтрПоНоменклатуре КАК Товары
	|";
	
	ПодготовитьТекстЗапросаДляПроверкиУсловияИРасчетаКратности(ТекстЗапроса, УсловиеПредоставления);
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗаполнитьПараметрыЗапросУсловияЗаНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(
		Запрос,
		УсловиеПредоставления,
		Интервал,
		ПараметрыРасчета, ЗаполняемыеПараметры);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок за соблюдение графика оплаты.
//
// Возвращаемое значение:
//	Запрос
//
Функция ПроверитьУсловиеЗаГрафикОплаты(УсловиеПредоставления, Контекст)
	
	КратностьВыполнения = 0;
	
	Если (Контекст.ГрафикОплаты = УсловиеПредоставления.ГрафикОплаты) Тогда
		КратностьВыполнения = -1;
	КонецЕсли;
	
	Возврат КратностьВыполнения;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок за форму оплаты.
//
// Возвращаемое значение:
//	Запрос
//
Функция ПроверитьУсловиеЗаФормуОплаты(УсловиеПредоставления, Контекст)
	
	КратностьВыполнения = 0;
	
	Если (Контекст.ФормаОплаты = УсловиеПредоставления.ФормаОплаты) Тогда
		КратностьВыполнения = -1;
	КонецЕсли;
	
	Возврат КратностьВыполнения;
	
КонецФункции

// Функция формирует запрос для проверки, что карта лояльности не зарегистирована.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияКартаЛояльностиНеЗарегистрирована(УсловиеПредоставления, ПараметрыРасчета)

	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-1 КАК КратностьВыполнения
	|ГДЕ
	|	НЕ &ВидКартыЛояльностиУсловия В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Т.Владелец
	|		ИЗ
	|			Справочник.КартыЛояльности КАК Т
	|		ГДЕ
	|			Т.Партнер = &Партнер
	|			И Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))");
	
	Запрос.УстановитьПараметр("ВидКартыЛояльностиУсловия", УсловиеПредоставления.ВидКартыЛояльности);
	Запрос.УстановитьПараметр("Партнер", ПараметрыРасчета.Партнер);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для проверки, что партнер является владельцем карты лояльности.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияЗаНаличиеКартыЛояльности(УсловиеПредоставления, ПараметрыРасчета)

	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-1 КАК КратностьВыполнения
	|ГДЕ
	|	&ВидКартыЛояльностиУсловия В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Т.Владелец
	|		ИЗ
	|			Справочник.КартыЛояльности КАК Т
	|		ГДЕ
	|			Т.Партнер = &Партнер
	|			И Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))");
	
	Запрос.УстановитьПараметр("ВидКартыЛояльностиУсловия", УсловиеПредоставления.ВидКартыЛояльности);
	Запрос.УстановитьПараметр("Партнер", ПараметрыРасчета.Партнер);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок с ограничением по группе пользователей.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияОграничениеПоГруппеПользователей(УсловиеПредоставления, ПараметрыРасчета)

	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	-1 КАК КратностьВыполнения
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Ссылка = &ГруппаПользователейУсловия
	|	И ГруппыПользователейСостав.Пользователь = &Пользователь");
	
	Запрос.УстановитьПараметр("ГруппаПользователейУсловия", УсловиеПредоставления.ГруппаПользователей);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыРасчета.Пользователь);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок за время продажи.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияЗаВремяПродажи(УсловиеПредоставления, ПараметрыРасчета)

	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	-1 КАК КратностьВыполнения
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ВремяДействия
	|ГДЕ
	|	ВремяДействия.Ссылка = &Условие
	|	И ВремяДействия.ДеньНедели = &ДеньНедели
	|	И (ВремяДействия.ВремяНачала <= &ТекущееВремя И ВремяДействия.ВремяОкончания >= &ТекущееВремя)");
	
	Запрос.УстановитьПараметр("Условие", УсловиеПредоставления.Ссылка);
	Запрос.УстановитьПараметр("ТекущееВремя", ПараметрыРасчета.ТекущееВремя);
	Запрос.УстановитьПараметр("ДеньНедели", ПараметрыРасчета.ДеньНедели);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для таблицы рассчитанных скидок за вхождение партнера в сегмент.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияВхождениеПартнераВСегмент(УсловиеПредоставления, ПараметрыРасчета)

	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-1 КАК КратностьВыполнения
	|ГДЕ
	|	&СегментПартнеровУсловия В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.Сегмент КАК Сегмент
	|			ИЗ
	|				РегистрСведений.ПартнерыСегмента КАК Т
	|			ГДЕ
	|				Т.Партнер = &Партнер)");
	
	Запрос.УстановитьПараметр("СегментПартнеровУсловия", УсловиеПредоставления.СегментПартнеров);
	Запрос.УстановитьПараметр("Партнер", ПараметрыРасчета.Партнер);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует запрос для проверки, что партнер является владельцем карты лояльности.
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросУсловияЗаДеньРождения(УсловиеПредоставления, ПараметрыРасчета)

	Запрос = Новый Запрос(
	"//#Результат#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-1 КАК КратностьВыполнения
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|	И &ТекущаяДата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|");
	
	ДатаРожденияТекущегоГода = ПолучитьБлижайшийДеньРождения(ПараметрыРасчета.Партнер, ПараметрыРасчета.ТекущаяДата);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаРожденияТекущегоГода) + УсловиеПредоставления.КоличествоДнейПослеДняРождения * 24*60*60);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаРожденияТекущегоГода) - УсловиеПредоставления.КоличествоДнейДоДняРождения * 24*60*60);
	Запрос.УстановитьПараметр("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	Запрос.УстановитьПараметр("Партнер", ПараметрыРасчета.Партнер);
	
	Возврат Запрос;
	
КонецФункции


Процедура ЗаполнитьПараметрыЗапросНакопленныйОбъемПродажПоПартнеруЗаПериод(Запрос, УсловиеПредоставления, Интервал, ПараметрыРасчета)
	
	Запрос.УстановитьПараметр("ВалютаУсловия",              УсловиеПредоставления.ВалютаОграничения);
	
	Запрос.УстановитьПараметр("Партнер",                    ПараметрыРасчета.Партнер);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", ПараметрыРасчета.ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента",            ПараметрыРасчета.ВалютаДокумента);
	Запрос.УстановитьПараметр("ТекущаяДата",                ПараметрыРасчета.ТекущаяДата);
	Запрос.УстановитьПараметр("Регистратор",                ПараметрыРасчета.Регистратор);
	
	Если Интервал.ДатаНачала <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаНачалаЧекККМ", Интервал.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаНачала",       Интервал.ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("ДатаНачалаЧекККМ", Дата(1,1,1));
		Запрос.УстановитьПараметр("ДатаНачала", "");
	КонецЕсли;
	
	Если Интервал.ДатаОкончания <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаОкончанияЧекККМ", Интервал.ДатаОкончания);
		Запрос.УстановитьПараметр("ДатаОкончания",       Интервал.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончанияЧекККМ", КонецДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ДатаОкончания", "");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПараметрыЗапросНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(Запрос, УсловиеПредоставления, Интервал, ПараметрыРасчета)
	
	Запрос.УстановитьПараметр("ВалютаУсловия",              УсловиеПредоставления.ВалютаОграничения);
	
	Запрос.УстановитьПараметр("Соглашение",                 ПараметрыРасчета.Соглашение);
	Запрос.УстановитьПараметр("Партнер",                    ПараметрыРасчета.Партнер);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", ПараметрыРасчета.ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента",            ПараметрыРасчета.ВалютаДокумента);
	Запрос.УстановитьПараметр("ТекущаяДата",                ПараметрыРасчета.ТекущаяДата);
	Запрос.УстановитьПараметр("Регистратор",                ПараметрыРасчета.Регистратор);
	
	Если Интервал.ДатаНачала <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаНачалаПС", Интервал.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаНачала",   Интервал.ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("ДатаНачалаПС", Дата(1,1,1));
		Запрос.УстановитьПараметр("ДатаНачала",   "");
	КонецЕсли;
	
	Если Интервал.ДатаОкончания <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаОкончанияПС", Интервал.ДатаОкончания);
		Запрос.УстановитьПараметр("ДатаОкончания",   Интервал.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончанияПС", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ДатаОкончания",   "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗапросОпределенияПозицийНоменклатурыНаКоторыеПредоставляетсяСкидка(Запрос, ПараметрыРасчета, ЗаполняемыеПараметры)
	
	Если ЗаполняемыеПараметры = "Все" ИЛИ ЗаполняемыеПараметры = "ПараметрыРасчета" Тогда
		Запрос.УстановитьПараметр("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
		Запрос.УстановитьПараметр("Партнер", ПараметрыРасчета.Партнер);
		Запрос.УстановитьПараметр("Соглашение", ПараметрыРасчета.Соглашение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗапросУсловияЗаРазовуюПродажуСУсловиемПоДокументу(Запрос, УсловиеПредоставления, ПараметрыРасчета, ЗаполняемыеПараметры)

	Если ЗаполняемыеПараметры = "Все" ИЛИ ЗаполняемыеПараметры = "Кэшируемые" Тогда
		Запрос.УстановитьПараметр("ЗначениеУсловияОграничения_Кэшируется", УсловиеПредоставления.ЗначениеУсловияОграничения);
	КонецЕсли;
	
	Если ЗаполняемыеПараметры = "Все" ИЛИ ЗаполняемыеПараметры = "ПараметрыРасчета" Тогда
		Запрос.УстановитьПараметр("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗапросУсловияЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(Запрос, УсловиеПредоставления, Интервал, ПараметрыРасчета, ЗаполняемыеПараметры)
	
	Если ЗаполняемыеПараметры = "Все" ИЛИ ЗаполняемыеПараметры = "Кэшируемые" Тогда
		Запрос.УстановитьПараметр("ЗначениеУсловияОграничения_Кэшируется", УсловиеПредоставления.ЗначениеУсловияОграничения);
	КонецЕсли;
	
	Если ЗаполняемыеПараметры = "Все" ИЛИ ЗаполняемыеПараметры = "ПараметрыРасчета" Тогда
		Запрос.УстановитьПараметр("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыЗапросУсловияЗаНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(Запрос, УсловиеПредоставления, Интервал, ПараметрыРасчета, ЗаполняемыеПараметры)

	Если ЗаполняемыеПараметры = "Все" ИЛИ ЗаполняемыеПараметры = "Кэшируемые" Тогда
		Запрос.УстановитьПараметр("ЗначениеУсловияОграничения_Кэшируется", УсловиеПредоставления.ЗначениеУсловияОграничения);
	КонецЕсли;
	
	Если ЗаполняемыеПараметры = "Все" ИЛИ ЗаполняемыеПараметры = "ПараметрыРасчета" Тогда
		Запрос.УстановитьПараметр("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаУсловийСкидокНаценок

Функция ИнтервалНакопленияОбъемаПродаж(СтрокаТЧ, ПараметрыРасчета)
	
	ДатаНачала    = Неопределено;
	ДатаОкончания = ПараметрыРасчета.ТекущаяДата - 1;
	
	Если СтрокаТЧ.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод Тогда
		
		Если СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
			ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
				НачалоПолугодия(ПараметрыРасчета.ТекущаяДата),
				Перечисления.Периодичность.Полугодие,
				-1 * СтрокаТЧ.КоличествоПериодовНакопления);
			ДатаОкончания = НачалоПолугодия(ПараметрыРасчета.ТекущаяДата) - 1;
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
			ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
				НачалоДекады(ПараметрыРасчета.ТекущаяДата),
				Перечисления.Периодичность.Декада,
				-1 * СтрокаТЧ.КоличествоПериодовНакопления);
			ДатаОкончания = НачалоДекады(ПараметрыРасчета.ТекущаяДата) - 1;
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Год Тогда
			ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
				НачалоГода(ПараметрыРасчета.ТекущаяДата),
				Перечисления.Периодичность.Год,
				-1 * СтрокаТЧ.КоличествоПериодовНакопления);
			ДатаОкончания = НачалоГода(ПараметрыРасчета.ТекущаяДата) - 1;
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
			ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
				НачалоКвартала(ПараметрыРасчета.ТекущаяДата),
				Перечисления.Периодичность.Квартал,
				-1 * СтрокаТЧ.КоличествоПериодовНакопления);
			ДатаОкончания = НачалоКвартала(ПараметрыРасчета.ТекущаяДата) - 1;
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
			ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
				НачалоМесяца(ПараметрыРасчета.ТекущаяДата),
				Перечисления.Периодичность.Месяц,
				-1 * СтрокаТЧ.КоличествоПериодовНакопления);
			ДатаОкончания = НачалоМесяца(ПараметрыРасчета.ТекущаяДата) - 1;
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
			ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
				НачалоНедели(ПараметрыРасчета.ТекущаяДата),
				Перечисления.Периодичность.Неделя,
				-1 * СтрокаТЧ.КоличествоПериодовНакопления);
			ДатаОкончания = НачалоНедели(ПараметрыРасчета.ТекущаяДата) - 1;
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.День Тогда
			ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
				НачалоДня(ПараметрыРасчета.ТекущаяДата),
				Перечисления.Периодичность.День,
				-1  *СтрокаТЧ.КоличествоПериодовНакопления);
			ДатаОкончания = НачалоДня(ПараметрыРасчета.ТекущаяДата) - 1;
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод Тогда
		
		ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
		ДатаНачала = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
			ПараметрыРасчета.ТекущаяДата,
			СтрокаТЧ.ПериодНакопления,
			-1 * СтрокаТЧ.КоличествоПериодовНакопления);
		
	ИначеЕсли СтрокаТЧ.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода Тогда
		
		ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
		Если СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Год Тогда
			ДатаНачала = НачалоГода(ПараметрыРасчета.ТекущаяДата);
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
			ДатаНачала = НачалоДекады(ПараметрыРасчета.ТекущаяДата);
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
			ДатаНачала = НачалоПолугодия(ПараметрыРасчета.ТекущаяДата);
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
			ДатаНачала = НачалоКвартала(ПараметрыРасчета.ТекущаяДата);
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
			ДатаНачала = НачалоМесяца(ПараметрыРасчета.ТекущаяДата);
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
			ДатаНачала = НачалоНедели(ПараметрыРасчета.ТекущаяДата);
		ИначеЕсли СтрокаТЧ.ПериодНакопления = Перечисления.Периодичность.День Тогда
			ДатаНачала = НачалоДня(ПараметрыРасчета.ТекущаяДата);
		КонецЕсли;
		
	КонецЕсли;
	
	Интервал = Новый Структура;
	Интервал.Вставить("ДатаНачала", ДатаНачала);
	Интервал.Вставить("ДатаОкончания", ДатаОкончания);
	
	Возврат Интервал;
	
КонецФункции

Функция ЗапросПроверкиУсловияПредоставления(СтрокаТЧ, ПараметрыРасчета, ЗаполняемыеПараметры) Экспорт
	
	Запрос = Неопределено;
	
	Если СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
		
		Запрос = ЗапросУсловияЗаРазовуюПродажуСУсловиемПоДокументу(СтрокаТЧ, ПараметрыРасчета, ЗаполняемыеПараметры);
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
		
		Интервал = ИнтервалНакопленияОбъемаПродаж(СтрокаТЧ, ПараметрыРасчета);
		
		Если СтрокаТЧ.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру Тогда
			Запрос = ЗапросУсловияЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(СтрокаТЧ, Интервал, ПараметрыРасчета, ЗаполняемыеПараметры);
		ИначеЕсли СтрокаТЧ.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоТорговомуСоглашению Тогда
			Запрос = ЗапросУсловияЗаНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(СтрокаТЧ, Интервал, ПараметрыРасчета, ЗаполняемыеПараметры);
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей Тогда
		
		Запрос = ЗапросУсловияОграничениеПоГруппеПользователей(СтрокаТЧ, ПараметрыРасчета);
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
		
		Запрос = ЗапросУсловияЗаВремяПродажи(СтрокаТЧ, ПараметрыРасчета);
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.КартаЛояльностиНеЗарегистрирована Тогда
		
		Запрос = ЗапросУсловияКартаЛояльностиНеЗарегистрирована(СтрокаТЧ, ПараметрыРасчета);
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНаличиеКартыЛояльности Тогда
		
		Запрос = ЗапросУсловияЗаНаличиеКартыЛояльности(СтрокаТЧ, ПараметрыРасчета);
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВхождениеПартнераВСегмент Тогда
		
		Запрос = ЗапросУсловияВхождениеПартнераВСегмент(СтрокаТЧ, ПараметрыРасчета);
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДеньРожденияКлиента Тогда
		
		Запрос = ЗапросУсловияЗаДеньРождения(СтрокаТЧ, ПараметрыРасчета);
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты Тогда
		
		// Обработка второй очереди
		
	ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты Тогда
		
		// Обработка второй очереди
		
	ИначеЕсли ТипЗнч(СтрокаТЧ.УсловиеПредоставления) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		
		ВнешняяОбработка = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(СтрокаТЧ.УсловиеПредоставления);
		УстановитьБезопасныйРежим(Истина);
		Запрос = ВнешняяОбработка.Запрос(СтрокаТЧ.ПараметрыВнешнейОбработки.Получить(), ПараметрыРасчета);
		УстановитьБезопасныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьЗапросыУсловийПредоставления(УсловияПредоставления, СкидкиНаценки, ПараметрыРасчета, МенеджерВременныхТаблиц)
	
	Пакет = ПакетЗапросовСоздать();
	Пакет.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОбработкаВторойОчереди = Новый Массив;
	
	// Подготовка таблиц для сбора данных за накопленный объем продаж
	ДанныеОТаблицах = Новый Соответствие;
	Для Каждого СтрокаТЧ Из УсловияПредоставления Цикл
		
		Если Не СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
			Продолжить;
		КонецЕсли;
		
		Интервал = ИнтервалНакопленияОбъемаПродаж(СтрокаТЧ, ПараметрыРасчета);
		
		ИмяВременнойТаблицы = ИмяВременнойТаблицыНакопленныйОбъемПродаж(СтрокаТЧ, Интервал);
		
		Если ДанныеОТаблицах.Получить(ИмяВременнойТаблицы) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОТаблицах.Вставить(ИмяВременнойТаблицы, Истина);
		
		Если СтрокаТЧ.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру Тогда
			Запрос = ЗапросНакопленныйОбъемПродажПоПартнеруЗаПериод(СтрокаТЧ, Интервал, ПараметрыРасчета);
		ИначеЕсли СтрокаТЧ.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоТорговомуСоглашению Тогда
			Запрос = ЗапросНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(СтрокаТЧ, Интервал, ПараметрыРасчета);
		КонецЕсли;
		
		Ключ = Неопределено;
		УдалятьВременныеТаблицы = Ложь;
		ПреобразовыватьПараметры = Истина;
		
		ПакетЗапросовВставитьЗапросВПакет(
			Запрос, Пакет, Ключ,
			УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из УсловияПредоставления Цикл
		
		Ключ = СтрокаТЧ.Ссылка;
		
		ИспользоватьКэшированныйЗапрос = Ложь;
		Если СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			ИспользоватьКэшированныйЗапрос = Истина;
		ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
			ИспользоватьКэшированныйЗапрос = Истина;
		КонецЕсли;
		
		Если ИспользоватьКэшированныйЗапрос Тогда
			
			Настройки = СтрокаТЧ.ХранилищеНастроекКомпоновкиДанных.Получить();
			
			Если Настройки <> Неопределено И Настройки.Свойство("Запрос") Тогда
			
				КоличествоЗапросовВПакете = Настройки.Запрос.КоличествоЗапросовВПакете;
				ИндексЗапросаРезультата   = Настройки.Запрос.ИндексЗапросаРезультата;
				ТекстЗапроса              = Настройки.Запрос.ТекстЗапроса;
				
				Интервал = ИнтервалНакопленияОбъемаПродаж(СтрокаТЧ, ПараметрыРасчета);
				
				Если СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
					ИмяВременнойТаблицы = ИмяВременнойТаблицыНакопленныйОбъемПродаж(СтрокаТЧ, Интервал);
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсходныеДанные", ИмяВременнойТаблицы);
				КонецЕсли;
				
				Запрос = Новый Запрос(ТекстЗапроса);
				Для Каждого Параметр Из Настройки.Запрос.Параметры Цикл
					Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				
				Если СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
					Если СтрокаТЧ.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру Тогда
						ЗаполнитьПараметрыЗапросУсловияЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(Запрос, СтрокаТЧ, Интервал, ПараметрыРасчета, "ПараметрыРасчета");
					ИначеЕсли СтрокаТЧ.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоТорговомуСоглашению Тогда
						ЗаполнитьПараметрыЗапросУсловияЗаНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(Запрос, СтрокаТЧ, Интервал, ПараметрыРасчета, "ПараметрыРасчета");
					КонецЕсли;
				ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
					ЗаполнитьПараметрыЗапросУсловияЗаРазовуюПродажуСУсловиемПоДокументу(Запрос, СтрокаТЧ, ПараметрыРасчета, "ПараметрыРасчета");
				КонецЕсли;
				
				УдалятьВременныеТаблицы = Ложь;
				ПреобразовыватьПараметры = Истина;
				ПакетЗапросовВставитьЗапросВПакет(
					Запрос, Пакет, Ключ,
					УдалятьВременныеТаблицы, ПреобразовыватьПараметры,
					КоличествоЗапросовВПакете,
					ИндексЗапросаРезультата);
					
			Иначе
				
				УдалятьВременныеТаблицы = Истина;
				ПреобразовыватьПараметры = Истина;
				
				Запрос = ЗапросПроверкиУсловияПредоставления(СтрокаТЧ, ПараметрыРасчета, "Все");
				ПакетЗапросовВставитьЗапросВПакет(
					Запрос, Пакет, Ключ,
					УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
				
			КонецЕсли;
			
		Иначе
			
			Запрос = ЗапросПроверкиУсловияПредоставления(СтрокаТЧ, ПараметрыРасчета, "Все");
			
			Если Запрос = Неопределено Тогда
				ОбработкаВторойОчереди.Добавить(СтрокаТЧ);
			Иначе
				
				Если ТипЗнч(СтрокаТЧ.УсловиеПредоставления) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
					УдалятьВременныеТаблицы = Истина;
				Иначе
					УдалятьВременныеТаблицы = Ложь;
				КонецЕсли;
				
				ПреобразовыватьПараметры = Истина;
				
				ПакетЗапросовВставитьЗапросВПакет(
					Запрос, Пакет, Ключ,
					УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из СкидкиНаценки Цикл
		
		Если СтрокаДерева.ВариантОтбораНоменклатуры = Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.БезОграничений
			И Не СтрокаДерева.УстановленДополнительныйОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		Ключ = СтрокаДерева.Ссылка;
		
		Настройки = СтрокаДерева.ХранилищеНастроекКомпоновкиДанных.Получить();
		
		Если Настройки <> Неопределено И Настройки.Свойство("Запрос") Тогда
		
			КоличествоЗапросовВПакете = Настройки.Запрос.КоличествоЗапросовВПакете;
			ИндексЗапросаРезультата   = Настройки.Запрос.ИндексЗапросаРезультата;
			ТекстЗапроса              = Настройки.Запрос.ТекстЗапроса;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Для Каждого Параметр Из Настройки.Запрос.Параметры Цикл
				Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
			КонецЦикла;
			
			УдалятьВременныеТаблицы = Ложь;
			ПреобразовыватьПараметры = Истина;
			ЗаполнитьПараметрыЗапросОпределенияПозицийНоменклатурыНаКоторыеПредоставляетсяСкидка(Запрос, ПараметрыРасчета, "ПараметрыРасчета");
			ПакетЗапросовВставитьЗапросВПакет(
				Запрос, Пакет, Ключ,
				УдалятьВременныеТаблицы, ПреобразовыватьПараметры,
				КоличествоЗапросовВПакете,
				ИндексЗапросаРезультата);
			
		Иначе
			
			УдалятьВременныеТаблицы = Истина;
			ПреобразовыватьПараметры = Истина;
			
			Запрос = ЗапросОпределенияПозицийНоменклатурыНаКоторыеПредоставляетсяСкидка(СтрокаДерева, ПараметрыРасчета, "Все");
			ПакетЗапросовВставитьЗапросВПакет(
				Запрос, Пакет, Ключ,
				УдалятьВременныеТаблицы, ПреобразовыватьПараметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПакетЗапросовВыполнить(Пакет);
	
	ТЗ = ПустаяТаблицаРезультатПроверкиУсловия();
	
	Для Каждого СтрокаТЧ Из ОбработкаВторойОчереди Цикл
		
		Если СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты Тогда
			
			КратностьВыполнения = ПроверитьУсловиеЗаГрафикОплаты(СтрокаТЧ, ПараметрыРасчета);
			
		ИначеЕсли СтрокаТЧ.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты Тогда
			
			КратностьВыполнения = ПроверитьУсловиеЗаФормуОплаты(СтрокаТЧ, ПараметрыРасчета);
			
		ИначеЕсли ТипЗнч(СтрокаТЧ.УсловиеПредоставления) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			
			ВнешняяОбработка = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(СтрокаТЧ.УсловиеПредоставления);
			УстановитьБезопасныйРежим(Истина);
			КратностьВыполнения = ВнешняяОбработка.ПроверитьУсловие(СтрокаТЧ.ПараметрыВнешнейОбработки.Получить(), ПараметрыРасчета);
			УстановитьБезопасныйРежим(Ложь);
			
		КонецЕсли;
		
		Если КратностьВыполнения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Ссылка              = СтрокаТЧ.Ссылка;
		НоваяСтрока.КлючСвязи           = -1;
		НоваяСтрока.КратностьВыполнения = КратностьВыполнения;
		
	КонецЦикла;
	
	ТаблицаВыполненныеУсловия = ОбъединитьРезультаты(Пакет, ТЗ);
	
	Возврат ТаблицаВыполненныеУсловия;
	
КонецФункции

Функция ОбъединитьРезультаты(ПакетЗапросов, Таблица)
	
	ТЗ = ПустаяТаблицаРезультатПроверкиУсловия();
	
	ТипСкидкиНаценки = Тип("СправочникСсылка.СкидкиНаценки");
	
	Для Каждого КлючИЗначение Из ПакетЗапросов.СоответствиеЗапросаИНомераТаблицыРезультата Цикл
		
		ЕстьКолонкаЗначениеПоказателя = Неопределено;
		
		Выборка = ПакетЗапросов.РезультатЗапроса[КлючИЗначение.Значение-1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЕстьКолонкаЗначениеПоказателя = Неопределено Тогда
				ЕстьКолонкаЗначениеПоказателя = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Выборка, "ЗначениеПоказателя");
			КонецЕсли;
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Ссылка = КлючИЗначение.Ключ;
			Если ТипЗнч(КлючИЗначение.Ключ) = ТипСкидкиНаценки Тогда
				НоваяСтрока.КлючСвязи = Выборка.КлючСвязи;
			Иначе
				НоваяСтрока.КлючСвязи = -1;
			КонецЕсли;
			НоваяСтрока.КратностьВыполнения = Выборка.КратностьВыполнения;
			
			Если ЕстьКолонкаЗначениеПоказателя Тогда
				НоваяСтрока.ЗначениеПоказателя = Выборка.ЗначениеПоказателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия, Условия)
	
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияВыполнены",    Истина);
	СтрокаДерева.ПараметрыУсловий.Вставить("КодыСтрок",           Новый Массив);
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияПоСтроке",     Новый Структура);
	СтрокаДерева.ПараметрыУсловий.Вставить("ЕстьУсловияПоСтроке", Ложь);
	СтрокаДерева.ПараметрыУсловий.Вставить("ТаблицаУсловий",      Новый ТаблицаЗначений);
	
	// Служебная таблица для временного хранения результатов проверки условий предоставления
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("УсловиеПредоставления", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок,СправочникСсылка.СкидкиНаценки"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ОбластьОграничения",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбластейОграниченияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("Выполнено");
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ЗначениеПоказателя");
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("КратностьВыполнения",   Новый ОписаниеТипов("Число"));
	
	// Таблица применяется для проверки выполнения условий по строке.
	// Если у скидки существуют условия по строке то для этих условий в таблице будет создана колонка
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("ТаблицаПроверкиУсловий", Новый ТаблицаЗначений);
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить("КлючСвязи");
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Индексы.Добавить("КлючСвязи");
	
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("СоответствиеУсловийКолонкамТаблицыПроверкиУсловий", Новый Соответствие);
	
	// Служебные параметры
	ИспользуетсяТаблицаПроверкиУсловий      = Ложь;
	ЭтоПервоеУсловиеТаблицыПроверкиУсловий  = Истина;
	КоличествоКолонокТаблицыПроверкиУсловий = 0;
	
	Для Каждого Условие Из Условия.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.Ссылка)) Цикл
		
		СтрокаТаблицаУсловий = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Добавить();
		СтрокаТаблицаУсловий.УсловиеПредоставления = Условие.УсловиеПредоставления;
		Если ТипЗнч(Условие.УсловиеПредоставления) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") Тогда
			СтрокаТаблицаУсловий.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		Иначе
			СтрокаДерева.ПараметрыУсловий.ЕстьУсловияПоСтроке = Истина;
			СтрокаТаблицаУсловий.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке;
		КонецЕсли;
		
		НайденныеСтроки = ВыполненныеУсловия.НайтиСтроки(Новый Структура("Ссылка", Условие.УсловиеПредоставления));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Условие не выполнено.
			СтрокаТаблицаУсловий.Выполнено = Ложь;
			
			СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;
			
			СтрокаТаблицаУсловий.КратностьВыполнения = 0;
			
		ИначеЕсли НайденныеСтроки.Количество() = 1
			И НайденныеСтроки[0].КлючСвязи = -1 Тогда
			
			НайденнаяСтрока = НайденныеСтроки[0];
			Если НайденнаяСтрока.КратностьВыполнения = 0 Тогда
				
				СтрокаТаблицаУсловий.Выполнено = Ложь;
				// Условие не выполнено.
				СтрокаТаблицаУсловий.ЗначениеПоказателя = НайденнаяСтрока.ЗначениеПоказателя;
				
				СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;
				
			Иначе
				
				СтрокаТаблицаУсловий.Выполнено = Истина;
				// Условие выполнено. Условие не зависит от конкретных строк.
				СтрокаТаблицаУсловий.ЗначениеПоказателя = НайденнаяСтрока.ЗначениеПоказателя;
				СтрокаТаблицаУсловий.КратностьВыполнения = НайденнаяСтрока.КратностьВыполнения;
				
			КонецЕсли;
			
		Иначе
			
			КоличествоКолонокТаблицыПроверкиУсловий = КоличествоКолонокТаблицыПроверкиУсловий + 1;
			ЗаголовокКолонки = "Условие" + КоличествоКолонокТаблицыПроверкиУсловий;
			
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Вставить(Условие.УсловиеПредоставления, ЗаголовокКолонки);
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить(ЗаголовокКолонки, Новый ОписаниеТипов("Булево"));
			
			Счетчик = 0;
			СуммарнаяКратностьВыполнения = 0;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.КратностьВыполнения <> 0 Тогда
					Счетчик = Счетчик + 1;
				КонецЕсли;
				
				ИспользуетсяТаблицаПроверкиУсловий = Истина;
				
				НайденныеСтрокиТаблицыПроверкиУсловий = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Найти(НайденнаяСтрока.КлючСвязи, "КлючСвязи");
				Если НайденныеСтрокиТаблицыПроверкиУсловий <> Неопределено Тогда
					НайденныеСтрокиТаблицыПроверкиУсловий[ЗаголовокКолонки] = Истина;
				Иначе
					Если ЭтоПервоеУсловиеТаблицыПроверкиУсловий Тогда
						НоваяСтрока1 = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Добавить();
						НоваяСтрока1.КлючСвязи = НайденнаяСтрока.КлючСвязи;
						НоваяСтрока1[ЗаголовокКолонки] = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НайденнаяСтрока.КратностьВыполнения > 0 Тогда
					СуммарнаяКратностьВыполнения = СуммарнаяКратностьВыполнения + НайденнаяСтрока.КратностьВыполнения;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаТаблицаУсловий.Выполнено = (Счетчик > 0);
			// Условие выполнено если найдено несколько строк, прошедших проверку условий.
			
			Если Не СтрокаТаблицаУсловий.Выполнено Тогда
				СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;
			КонецЕсли;
			
			СтрокаТаблицаУсловий.КратностьВыполнения = СуммарнаяКратностьВыполнения;
			
		КонецЕсли;
		
		Если ИспользуетсяТаблицаПроверкиУсловий Тогда
			ЭтоПервоеУсловиеТаблицыПроверкиУсловий = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним коды строк...
	Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
		
		Если СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Количество() > 0 Тогда
			
			Отбор = Новый Структура;
			Для Каждого КлючИЗначение Из СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий Цикл
				Отбор.Вставить(КлючИЗначение.Значение, Истина);
			КонецЦикла;
			
			НайденныеСтроки = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.НайтиСтроки(Отбор);
			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаДерева.ПараметрыУсловий.КодыСтрок.Добавить(СтрокаТЗ.КлючСвязи);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

Процедура ПроверитьУсловияРекурсивно(ДеревоСкидок, СтрокиДереваСкидок, Условия, ВыполненныеУсловия)
	
	ДеревоСкидок.Колонки.Добавить("УсловияПредоставления", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("РезультатРасчета",         Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("ПараметрыУсловий",      Новый ОписаниеТипов("Структура"));
	
	Для Каждого СтрокаДерева Из СтрокиДереваСкидок Цикл
		
		ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия, Условия);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТекстЗапросаДляПроверкиУсловияИРасчетаКратности(ТекстЗапроса, УсловиеПредоставления)
	
	ТекстУсловия = "";
	ТекстПоказателя = "";
	Если УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма Тогда
		Если УсловиеПредоставления.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее Тогда
			ТекстУсловия = "ЕСТЬNULL(Товары.Сумма, 0) >= &ЗначениеУсловияОграничения_Кэшируется";
		Иначе
			ТекстУсловия = "ЕСТЬNULL(Товары.Сумма, 0) <= &ЗначениеУсловияОграничения_Кэшируется";
		КонецЕсли;
		ТекстПоказателя = "ЕСТЬNULL(Товары.Сумма, 0)";
	Иначе
		Если УсловиеПредоставления.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее ТОГДА
			ТекстУсловия = "ЕСТЬNULL(Товары.Количество, 0) >= &ЗначениеУсловияОграничения_Кэшируется"
		Иначе
			ТекстУсловия = "ЕСТЬNULL(Товары.Количество, 0) <= &ЗначениеУсловияОграничения_Кэшируется"
		КонецЕсли;
		ТекстПоказателя = "ЕСТЬNULL(Товары.Количество, 0)";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловия", ТекстУсловия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗначениеПоказателя", ТекстПоказателя);
	
	ТекстКратности = "";
	Если УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма Тогда
		
		Если УсловиеПредоставления.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее ТОГДА
			Если УсловиеПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
				ТекстКратности = "ВЫБОР КОГДА ЕСТЬNULL(Товары.Сумма, 0) > 0 ТОГДА ВЫРАЗИТЬ((ЕСТЬNULL(Товары.Сумма, 0) / &ЗначениеУсловияОграничения_Кэшируется - 0.5) КАК Число(10,0)) ИНАЧЕ 0 КОНЕЦ";
			Иначе
				ТекстКратности = "
				|ВЫБОР
				|	КОГДА ЕСТЬNULL(Товары.Сумма, 0) > 0 ТОГДА
				|		1
				|	ИНАЧЕ
				|		0
				|КОНЕЦ";
			КонецЕсли;
		Иначе
			ТекстКратности = "
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(Товары.Сумма, 0) <= &ЗначениеУсловияОграничения_Кэшируется ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|КОНЕЦ";
		КонецЕсли;
	ИначеЕсли УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество
		ИЛИ УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.КоличествоОдинаковых
		ИЛИ УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.КоличествоРазличных Тогда
		
		Если УсловиеПредоставления.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее ТОГДА
			Если УсловиеПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
				ТекстКратности = "ВЫБОР КОГДА ЕСТЬNULL(Товары.Количество, 0) > 0 ТОГДА ВЫРАЗИТЬ((ЕСТЬNULL(Товары.Количество, 0) / &ЗначениеУсловияОграничения_Кэшируется - 0.5) КАК Число(10,0)) ИНАЧЕ 0 КОНЕЦ";
			Иначе
				ТекстКратности = "
				|ВЫБОР
				|	КОГДА ЕСТЬNULL(Товары.Количество, 0) > 0 ТОГДА
				|		1
				|	ИНАЧЕ
				|		0
				|КОНЕЦ";
			КонецЕсли
		Иначе
			ТекстКратности = "
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(Товары.Количество, 0) <= &ЗначениеУсловияОграничения_Кэшируется ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|КОНЕЦ";
		КонецЕсли;
	Иначе
		ТекстКратности = "0";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстКратности", ТекстКратности);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

Функция ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы)
	
	ПоляНабора =
	"	Товары.НоменклатураНабора   КАК НоменклатураНабора,
	|	Товары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|";
	
	Поля =
	"	ВариантыКомплектацииНоменклатуры.Ссылка  КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|";
	
	Соединение =
	"	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|";
	
	ЗапросНаборы =
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	МИНИМУМ(Таблица.КлючСвязи)   КАК КлючСвязи,
	|	СУММА(Таблица.Цена * Таблица.КоличествоУпаковок) КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	Товары КАК Таблица
	|
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Таблица.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|	                                      ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|		И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	0 КАК КоличествоПоУмолчанию,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	Товары КАК Товары
	|
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец                                  КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика                            КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ОсновнаяКомплектующая,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПоУмолчанию,
	|	0 КАК Количество
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ Товары КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0 И Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора                КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора              КАК ХарактеристикаНабора,
	|	Таблица.КлючСвязи                         КАК КлючСвязи,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	Таблица.Сумма                             КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	Таблица.НоменклатураНабора КАК Номенклатура,
	|	Таблица.ХарактеристикаНабора КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
	|	Таблица.НоменклатураНабора.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	ВЫБОР КОГДА Таблица.КоличествоУпаковок <> 0 ТОГДА
	|		Таблица.Сумма / Таблица.КоличествоУпаковок
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК Цена,
	|	Таблица.Сумма
	|ИЗ
	|	ВременнаяТаблицаНаборы КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	Таблица.ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|ИЗ
	|	Товары КАК Таблица
	|ГДЕ
	|	Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ИЛИ (Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	   И Таблица.ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих))
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.КлючСвязи   КАК КлючСвязиКомплектующих,
	|	ВременнаяТаблицаНаборы.КлючСвязи КАК КлючСвязиНабора
	|ИЗ
	|	Товары КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|		ПО ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|		И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Таблица.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|	                                      ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|ИТОГИ ПО
	|	ВременнаяТаблицаНаборы.КлючСвязи
	|";
	
	Если ИспользоватьНаборы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяВременнойТаблицы%", "ПОМЕСТИТЬ Товары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляНабора%",          ПоляНабора);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Поля%",         Поля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Соединение%",   Соединение);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЗапросНаборы%", ЗапросНаборы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяВременнойТаблицы%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляНабора%",          "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Поля%",         "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Соединение%",   "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЗапросНаборы%", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Для Каждого КлючЗначение Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Товары");
	ВозвращаемоеЗначение.Вставить("СоответствиеКлючей");
	Если ИспользоватьНаборы Тогда
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВозвращаемоеЗначение.Товары             = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить();
		ВозвращаемоеЗначение.СоответствиеКлючей = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВозвращаемоеЗначение.Товары = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, СоответствиеКлючей, ТаблицаТовары)
	
	Для Каждого СтрокаТЧ Из ПримененныеСкидкиНаценки.ДеревоСкидок.Строки Цикл
		РаспределитьТаблицыДанныхПоКомплектующим(СтрокаТЧ, СоответствиеКлючей, ТаблицаТовары);
	КонецЦикла;
	
	Для Каждого СтрокаНабор Из СоответствиеКлючей.Строки Цикл
		
		КУдалению = Новый Массив;
		
		НайденныеСтроки = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаНабор.КлючСвязиНабора));
		Для Каждого СтрокаСкидка Из НайденныеСтроки Цикл
			
			СуммаКРаспределению = СтрокаСкидка.Сумма;
			
			Сумма = 0;
			Для Каждого СтрокаКомплектующие Из СтрокаНабор.Строки Цикл
				СтрокаТЧ = ТаблицаТовары.Найти(СтрокаКомплектующие.КлючСвязиКомплектующих, "КлючСвязи");
				Сумма = Сумма + СтрокаТЧ.КоличествоУпаковок*СтрокаТЧ.Цена;
			КонецЦикла;
			
			Для Каждого СтрокаКомплектующие Из СтрокаНабор.Строки Цикл
				
				СтрокаТЧ = ТаблицаТовары.Найти(СтрокаКомплектующие.КлючСвязиКомплектующих, "КлючСвязи");
				
				НоваяСтрока = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидка,,"КлючСвязи,Сумма");
				
				НоваяСтрока.КлючСвязи = СтрокаКомплектующие.КлючСвязиКомплектующих;
				Если Сумма <> 0 Тогда
					НоваяСтрока.Сумма = (СтрокаТЧ.КоличествоУпаковок*СтрокаТЧ.Цена)/Сумма*СуммаКРаспределению;
				КонецЕсли;
				СуммаКРаспределению = СуммаКРаспределению - НоваяСтрока.Сумма;
				Сумма = Сумма - СтрокаТЧ.КоличествоУпаковок*СтрокаТЧ.Цена;
				
			КонецЦикла;
			
			КУдалению.Добавить(СтрокаСкидка);
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из КУдалению Цикл
			ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Удалить(СтрокаТЧ);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьТаблицыДанныхПоКомплектующим(СтрокаТаблицы, СоответствиеКлючей, ТаблицаТовары)
	
	Для Каждого СтрокаНабор Из СоответствиеКлючей.Строки Цикл
		
		КУдалению = Новый Массив;
		
		НайденныеСтроки = СтрокаТаблицы.РезультатРасчета.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаНабор.КлючСвязиНабора));
		Для Каждого СтрокаСкидка Из НайденныеСтроки Цикл
			
			СуммаКРаспределению = СтрокаСкидка.Сумма;
			
			Сумма = 0;
			Для Каждого СтрокаКомплектующие Из СтрокаНабор.Строки Цикл
				СтрокаТЧ = ТаблицаТовары.Найти(СтрокаКомплектующие.КлючСвязиКомплектующих, "КлючСвязи");
				Сумма = Сумма + СтрокаТЧ.КоличествоУпаковок*СтрокаТЧ.Цена;
			КонецЦикла;
			
			Для Каждого СтрокаКомплектующие Из СтрокаНабор.Строки Цикл
				
				СтрокаТЧ = ТаблицаТовары.Найти(СтрокаКомплектующие.КлючСвязиКомплектующих, "КлючСвязи");
				
				НоваяСтрока =  СтрокаТаблицы.РезультатРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидка,,"КлючСвязи,Сумма,Расшифровка");
				
				НоваяСтрока.КлючСвязи = СтрокаКомплектующие.КлючСвязиКомплектующих;
				Если Сумма <> 0 Тогда
					НоваяСтрока.Сумма = (СтрокаТЧ.КоличествоУпаковок*СтрокаТЧ.Цена)/Сумма*СуммаКРаспределению;
				КонецЕсли;
				СуммаКРаспределению = СуммаКРаспределению - НоваяСтрока.Сумма;
				Сумма = Сумма - СтрокаТЧ.КоличествоУпаковок*СтрокаТЧ.Цена;
				
				НоваяСтрока.Расшифровка = СтрокаСкидка.Расшифровка.СкопироватьКолонки();
				Для Каждого СтрокаТЧ Из СтрокаСкидка.Расшифровка Цикл
					НоваяСтрокаРасшифровки = НоваяСтрока.Расшифровка.Добавить();
					НоваяСтрокаРасшифровки.СкидкаНаценка = СтрокаТЧ.СкидкаНаценка;
					Если СтрокаСкидка.Сумма <> 0 Тогда
						НоваяСтрокаРасшифровки.Сумма = СтрокаТЧ.Сумма * НоваяСтрока.Сумма / СтрокаСкидка.Сумма;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			КУдалению.Добавить(СтрокаСкидка);
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из КУдалению Цикл
			СтрокаТаблицы.РезультатРасчета.Удалить(СтрокаТЧ);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из СтрокаТаблицы.Строки Цикл
		РаспределитьТаблицыДанныхПоКомплектующим(СтрокаТЧ, СоответствиеКлючей, ТаблицаТовары);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыФункцииФормУсловийПримененияСкидок

Процедура ВставитьКэшированныйЗапрос(НастройкиКомпоновкиДанных, ТекущийОбъект) Экспорт
	
	ПараметрыРасчета = ПараметрыРасчета();
	Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") Тогда
		ИспользоватьКэшированныйЗапрос = Ложь;
		Если ТекущийОбъект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			ИспользоватьКэшированныйЗапрос = Истина;
		ИначеЕсли ТекущийОбъект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
			ИспользоватьКэшированныйЗапрос = Истина;
		КонецЕсли;
		Если ИспользоватьКэшированныйЗапрос Тогда
			Запрос = ЗапросПроверкиУсловияПредоставления(ТекущийОбъект, ПараметрыРасчета, "Кэшируемые");
		КонецЕсли;
	Иначе
		Запрос = ЗапросОпределенияПозицийНоменклатурыНаКоторыеПредоставляетсяСкидка(ТекущийОбъект, ПараметрыРасчета, "Кэшируемые");
	КонецЕсли;
	
	Если Запрос <> Неопределено Тогда
		
		УдалитьВременныеТаблицы(Запрос);
		
		Подзапросы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запрос.Текст, ";");
		КоличествоЗапросовВПакете = Подзапросы.Количество();
		ИндексЗапросаРезультата = 0;
		Для Индекс = -(КоличествоЗапросовВПакете - 1) По 0 Цикл
			Если Найти(Подзапросы[-Индекс], "#Результат#") > 0 Тогда
				ИндексЗапросаРезультата = -Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиКомпоновкиДанных.Вставить("Запрос", Новый Структура);
		НастройкиКомпоновкиДанных.Запрос.Вставить("Параметры", Новый Структура);
		Для Каждого Параметр Из Запрос.Параметры Цикл
			Если СтрНайти(Параметр.Ключ, "_Кэшируется") > 0 Тогда
				ИмяПараметра = ПакетЗапросовПреобразоватьПараметр(Запрос.Текст, Параметр.Ключ, Параметр.Значение, Неопределено);
				Если ИмяПараметра <> Неопределено Тогда
					НастройкиКомпоновкиДанных.Запрос.Параметры.Вставить(ИмяПараметра, Параметр.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НастройкиКомпоновкиДанных.Запрос.Вставить("ТекстЗапроса", Запрос.Текст);
		НастройкиКомпоновкиДанных.Запрос.Вставить("ИндексЗапросаРезультата",   ИндексЗапросаРезультата);
		НастройкиКомпоновкиДанных.Запрос.Вставить("КоличествоЗапросовВПакете", КоличествоЗапросовВПакете);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписьюНаСервере.
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект, ИмяПоля) Экспорт
	
	Если ТипЗнч(ТекущийОбъект[ИмяПоля]) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Если ЗначениеЗаполнено(Форма.АдресНастроекВнешнейОбработки) Тогда
			ТекущийОбъект.ПараметрыВнешнейОбработки = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресНастроекВнешнейОбработки));
		Иначе
			ТекущийОбъект.ПараметрыВнешнейОбработки = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
	Иначе
		ТекущийОбъект.ПараметрыВнешнейОбработки = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	НастройкиКомпоновкиДанных = Новый Структура;
	НастройкиКомпоновкиДанных.Вставить("ОтборПоНоменклатуре", Форма.КомпоновщикНастроекОтборПоНоменклатуре.ПолучитьНастройки());
	Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда
		ТекущийОбъект.УстановленДополнительныйОтбор = ЗначениеЗаполнено(Строка(Форма.КомпоновщикНастроекДополнительныеУсловия.Настройки.Отбор));
		НастройкиКомпоновкиДанных.Вставить("ДополнительныеУсловия", Форма.КомпоновщикНастроекДополнительныеУсловия.ПолучитьНастройки());
	КонецЕсли;
	
	// Поместить настройки без кэшированного запроса.
	// Функция ДанныеФильтраПоНоменклатуре считывает настройки из объекта для подготовки кэшированного запроса
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
	
	ВставитьКэшированныйЗапрос(НастройкиКомпоновкиДанных, ТекущийОбъект);
	
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
	
КонецПроцедуры

Процедура ПриСозданииЧтенииНаСервере(Форма, ТекущийОбъект = Неопределено) Экспорт
	
	Если ТекущийОбъект <> Неопределено Тогда
		Форма.АдресНастроекВнешнейОбработки = ПоместитьВоВременноеХранилище(ТекущийОбъект.ПараметрыВнешнейОбработки.Получить(), Форма.УникальныйИдентификатор);
		Настройки = ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
	Иначе
		Если Форма.Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			ОбъектКопирования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.Параметры.ЗначениеКопирования, "ПараметрыВнешнейОбработки,ХранилищеНастроекКомпоновкиДанных");
			Форма.АдресНастроекВнешнейОбработки = ПоместитьВоВременноеХранилище(ОбъектКопирования.ПараметрыВнешнейОбработки.Получить(), Форма.УникальныйИдентификатор);
			Настройки = ОбъектКопирования.ХранилищеНастроекКомпоновкиДанных.Получить();
		Иначе
			Форма.АдресНастроекВнешнейОбработки = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") Тогда
		
		Для Каждого РеквизитСправочника Из Метаданные.Справочники.УсловияПредоставленияСкидокНаценок.Реквизиты Цикл
			
			ЗначениеЗаполнения = РеквизитСправочника.ЗначениеЗаполнения;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, РеквизитСправочника.Имя)
				И Не ЗначениеЗаполнено(Форма.Объект[РеквизитСправочника.Имя]) Тогда
				Форма.Объект[РеквизитСправочника.Имя] = ЗначениеЗаполнения;
			КонецЕсли;
			
			Если РеквизитСправочника = Метаданные.Справочники.УсловияПредоставленияСкидокНаценок.Реквизиты.ВалютаОграничения
				И Не ЗначениеЗаполнено(Форма.Объект.ВалютаОграничения) Тогда
				Форма.Объект.ВалютаОграничения = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
			КонецЕсли;
			
		КонецЦикла;
		
		СкидкиНаценкиКлиентСервер.УсловиеПредоставленияПриИзмененииНаСервере(Форма);
		СкидкиНаценкиКлиентСервер.КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере(Форма);
		СкидкиНаценкиКлиентСервер.ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере(Форма);
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Форма.Объект.Наименование = СкидкиНаценкиКлиентСервер.АвтоНаименованиеУсловияПредоставленияСкидки(Форма);
		Иначе
			СкидкиНаценкиКлиентСервер.АвтоНаименованиеУсловияПредоставленияСкидки(Форма);
		КонецЕсли;
		СкидкиНаценкиКлиентСервер.ОбновитьРеквизитыАвтонаименования(Форма);
		
		Для Каждого ЭлементСписка Из СкидкиНаценкиСервер.ДоступныеУсловияПредоставленияСкидокНаценок() Цикл
			Форма.Элементы.УсловиеПредоставления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ЭлементыВариантОтбораНоменклатуры = Новый Массив;
		ЭлементыВариантОтбораНоменклатуры.Добавить("ВариантОтбораНоменклатурыЗаНакопленныйОбъемПродаж");
		ЭлементыВариантОтбораНоменклатуры.Добавить("ВариантОтбораНоменклатуры");
		Для Каждого ИмяЭлемента Из ЭлементыВариантОтбораНоменклатуры Цикл
			Форма.Элементы[ИмяЭлемента].СписокВыбора.Очистить();
			Форма.Элементы[ИмяЭлемента].СписокВыбора.Добавить(
				Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.БезОграничений,
				НСтр("ru='По всей номенклатуре';uk='По всій номенклатурі'"));
			Форма.Элементы[ИмяЭлемента].СписокВыбора.Добавить(
				Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.СписокНоменклатуры,
				НСтр("ru='По номенклатуре из списка';uk='По номенклатурі зі списку'"));
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
				Форма.Элементы[ИмяЭлемента].СписокВыбора.Добавить(
					Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.СегментНоменклатуры,
					НСтр("ru='По номенклатуре из сегмента';uk='По номенклатурі із сегмента'"));
			КонецЕсли;
			Форма.Элементы[ИмяЭлемента].СписокВыбора.Добавить(
				Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.ОтборКомпоновкиДанных,
				НСтр("ru='По отобранной номенклатуре';uk='По номенклатурі, що відібрана'"));
		КонецЦикла;
		
		Форма.Элементы.ФормаОплаты.СписокВыбора.Очистить();
		Форма.Элементы.ФормаОплаты.СписокВыбора.Добавить(Перечисления.ФормыОплаты.Наличная);
		Форма.Элементы.ФормаОплаты.СписокВыбора.Добавить(Перечисления.ФормыОплаты.Безналичная);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
			Форма.Элементы.ФормаОплаты.СписокВыбора.Добавить(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") Тогда
			Форма.Элементы.ФормаОплаты.СписокВыбора.Добавить(Перечисления.ФормыОплаты.БонусныеБаллы);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
			Форма.Элементы.ФормаОплаты.СписокВыбора.Добавить(Перечисления.ФормыОплаты.ПодарочныйСертификат);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда
		
		Форма.Элементы.ВариантОтбораНоменклатуры.СписокВыбора.Очистить();
		Форма.Элементы.ВариантОтбораНоменклатуры.СписокВыбора.Добавить(
			Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.БезОграничений,
			НСтр("ru='Любую номенклатуру';uk='Будь-яку номенклатуру'"));
		Форма.Элементы.ВариантОтбораНоменклатуры.СписокВыбора.Добавить(
			Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.СписокНоменклатуры,
			НСтр("ru='Номенклатуру из списка';uk='Номенклатуру зі списку'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
			Форма.Элементы.ВариантОтбораНоменклатуры.СписокВыбора.Добавить(
				Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.СегментНоменклатуры,
				НСтр("ru='Номенклатуру из сегмента';uk='Номенклатуру з сегменту'"));
		КонецЕсли;
		Форма.Элементы.ВариантОтбораНоменклатуры.СписокВыбора.Добавить(
			Перечисления.ВариантыОтбораНоменклатурыДляРасчетаСкидокНаценок.ОтборКомпоновкиДанных,
			НСтр("ru='Номенклатуру по отбору';uk='Номенклатуру за відбором'"));
		
	КонецЕсли;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда
		СхемаКомпоновкиДанных = Справочники.СкидкиНаценки.ПолучитьМакет("ОтборСтрокНоменклатура");
	Иначе
		СхемаКомпоновкиДанных = Справочники.СкидкиНаценки.ПолучитьМакет("ОтборУсловияПредоставленияСуммаКоличество");
	КонецЕсли;

	Форма.КомпоновщикНастроекОтборПоНоменклатуре.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(
			ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор)));
	Если ЗначениеЗаполнено(Настройки) И ТипЗнч(Настройки) = Тип("Структура") И Настройки.Свойство("ОтборПоНоменклатуре") Тогда
		Форма.КомпоновщикНастроекОтборПоНоменклатуре.ЗагрузитьНастройки(Настройки.ОтборПоНоменклатуре);
	Иначе
		Форма.КомпоновщикНастроекОтборПоНоменклатуре.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	Форма.КомпоновщикНастроекОтборПоНоменклатуре.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда
		
		СхемаКомпоновкиДанных = Справочники.СкидкиНаценки.ПолучитьМакет("ОтборСтрокДополнительныеУсловия");
		Форма.КомпоновщикНастроекДополнительныеУсловия.Инициализировать(
			Новый ИсточникДоступныхНастроекКомпоновкиДанных(
				ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор)));
		Если ЗначениеЗаполнено(Настройки) И ТипЗнч(Настройки) = Тип("Структура") И Настройки.Свойство("ДополнительныеУсловия") Тогда
			Форма.КомпоновщикНастроекДополнительныеУсловия.ЗагрузитьНастройки(Настройки.ДополнительныеУсловия);
		Иначе
			Форма.КомпоновщикНастроекДополнительныеУсловия.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КонецЕсли;
		Форма.КомпоновщикНастроекДополнительныеУсловия.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиентСервер.НастроитьГиперссылкуНаСписокНоменклатурныхПозиций(Форма);
	
	СкидкиНаценкиКлиентСервер.НастроитьГиперссылкиОтборов(Форма);
	
КонецПроцедуры

Процедура ДобавитьКомандыСозданияНовыхУсловийПредоставленияСкидокНаценок(Форма, ГруппаСоздать) Экспорт
	
	КомандыФормы = СкидкиНаценкиСервер.ДоступныеУсловияПредоставленияСкидокНаценок();
	
	Для Каждого ЭлементСписка Из КомандыФормы Цикл
		
		ИмяКоманды = "ПодключаемаяКоманда" + СтрЗаменить(Новый УникальныйИдентификатор, "-","");
		
		НоваяСтрока = Форма.КомандыУсловияПредоставления.Добавить();
		НоваяСтрока.ИмяКоманды = ИмяКоманды;
		НоваяСтрока.Значение = ЭлементСписка.Значение;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
		КомандаФормы.Заголовок = ЭлементСписка.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Авто;
		
		НовыйЭлемент = Форма.Элементы.Добавить("Кнопка"+ИмяКоманды, Тип("КнопкаФормы"), ГруппаСоздать);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКомандыСозданияНовыхСкидокНаценок(Форма, ГруппаСоздать) Экспорт
	
	Варианты = СкидкиНаценкиСервер.ДоступныеСпособыПредоставления();
	
	Для Каждого ЭлементСписка Из Варианты.СкидкиНаценки Цикл
		ДобавитьКомандуВГруппу(ЭлементСписка, Форма, ГруппаСоздать, "СкидкиНаценки");
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") Тогда
		Для Каждого ЭлементСписка Из Варианты.БонусныеБаллы Цикл
			ДобавитьКомандуВГруппу(ЭлементСписка, Форма, ГруппаСоздать, "БонусныеБаллы");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииПакетаЗапросов

// Конструктор пакета запросов.
//
// Возвращаемое значение:
//	Структура - пакет запросов.
//
Функция ПакетЗапросовСоздать()
	
	ПакетЗапросов = Новый Структура;
	ПакетЗапросов.Вставить("ОбщееКоличествоТаблиц", 0);
	ПакетЗапросов.Вставить("СоответствиеЗапросаИНомераТаблицыРезультата", Новый Соответствие);
	ПакетЗапросов.Вставить("Запрос", Новый Запрос);
	ПакетЗапросов.Вставить("Параметры", Новый Соответствие);
	ПакетЗапросов.Вставить("РезультатЗапроса", Неопределено);
	ПакетЗапросов.Вставить("МассивИменЗапросов", Новый Массив);
	
	Возврат ПакетЗапросов;
	
КонецФункции

Процедура УдалитьВременныеТаблицы(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ТаблицыДляУничтожения = Новый Массив;
	Для Индекс = 0 По СхемаЗапроса.ПакетЗапросов.Количество() - 1 Цикл
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Получить(Индекс);
		Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Если ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
				ТаблицыДляУничтожения.Добавить(ЗапросСхемы.ТаблицаДляПомещения);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗапросСхемы) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Индекс = ТаблицыДляУничтожения.Найти(ЗапросСхемы.ИмяТаблицы);
			Если Индекс <> Неопределено Тогда
				ТаблицыДляУничтожения.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ИмяТаблицы Из ТаблицыДляУничтожения Цикл
		Запрос.Текст = Запрос.Текст + СтрЗаменить(
			ОбщегоНазначенияУТ.РазделительЗапросовПакета() + "УНИЧТОЖИТЬ ИмяТаблицы", "ИмяТаблицы", ИмяТаблицы) + Символы.ПС;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Добавляет запрос в пакет запросов.
//
Процедура ПакетЗапросовВставитьЗапросВПакет(Запрос,
	                                        ПакетЗапросов,
	                                        Ключ = Неопределено,
	                                        УдалятьВременныеТаблицы,
	                                        ПреобразовыватьПараметры,
	                                        КоличествоЗапросовВПакете = Неопределено,
	                                        ИндексЗапросаРезультата = Неопределено)
	
	// Проверка на дубли запросов.
	Если Ключ <> Неопределено
		И ПакетЗапросов.МассивИменЗапросов.Найти(Ключ) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПреобразовыватьПараметры Тогда
		Для Каждого Параметр Из Запрос.Параметры Цикл
			НовоеИмя = ПакетЗапросовПреобразоватьПараметр(Запрос.Текст, Параметр.Ключ, Параметр.Значение, ПакетЗапросов);
			Если НовоеИмя <> Неопределено Тогда
				ПакетЗапросов.Запрос.УстановитьПараметр(НовоеИмя, Параметр.Значение);
				ПакетЗапросов.Параметры.Вставить(Параметр.Значение, НовоеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если УдалятьВременныеТаблицы Тогда
		УдалитьВременныеТаблицы(Запрос);
	КонецЕсли;
	
	Если КоличествоЗапросовВПакете = Неопределено ИЛИ ИндексЗапросаРезультата = Неопределено Тогда
		Если СтрЧислоВхождений(Запрос.Текст, ";") > 0 Тогда
			Подзапросы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запрос.Текст, ";");
			КоличествоЗапросовВПакете = Подзапросы.Количество();
			ИндексЗапросаРезультата = 0;
			Для Индекс = -(КоличествоЗапросовВПакете - 1) По 0 Цикл
				Если Найти(Подзапросы[-Индекс], "#Результат#") > 0 Тогда
					ИндексЗапросаРезультата = -Индекс + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			КоличествоЗапросовВПакете = 1;
			ИндексЗапросаРезультата = 1;
		КонецЕсли;
	КонецЕсли;
	
	ПакетЗапросов.ОбщееКоличествоТаблиц = ПакетЗапросов.ОбщееКоличествоТаблиц + КоличествоЗапросовВПакете;
	
	Если ПакетЗапросов.ОбщееКоличествоТаблиц = КоличествоЗапросовВПакете Тогда
		ПакетЗапросов.Запрос.Текст = Запрос.Текст;
	Иначе
		ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст + ОбщегоНазначенияУТ.РазделительЗапросовПакета() + Запрос.Текст;
	КонецЕсли;
	
	Если Ключ <> Неопределено Тогда
		НомерТаблицы = ПакетЗапросов.ОбщееКоличествоТаблиц - КоличествоЗапросовВПакете + ИндексЗапросаРезультата;
		ПакетЗапросов.СоответствиеЗапросаИНомераТаблицыРезультата.Вставить(Ключ, НомерТаблицы);
		ПакетЗапросов.МассивИменЗапросов.Добавить(Ключ);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет пакет запросов.
//
// Возвращаемое значение:
//	Булево - Истина, если запрос выполнен успешно.
//
Функция ПакетЗапросовВыполнить(ПакетЗапросов)
	
	Если ЗначениеЗаполнено(ПакетЗапросов.Запрос.Текст) Тогда
		ПакетЗапросов.РезультатЗапроса = ПакетЗапросов.Запрос.ВыполнитьПакет();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получает результат запроса по имени из пакета запросов.
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса входящего в пакет.
//
Функция ПакетЗапросовРезультатПоИмени(ИмяЗапроса, ПакетЗапросов)
	
	Возврат ПакетЗапросов.РезультатЗапроса[ПакетЗапросов.СоответствиеЗапросаИНомераТаблицыРезультата[ИмяЗапроса] - 1];
	
КонецФункции

Функция ПакетЗапросовПостфиксы()
	
	Постфиксы = Новый Массив;
	Постфиксы.Добавить(Символы.ПС);
	Постфиксы.Добавить(" ");
	Постфиксы.Добавить(",");
	Постфиксы.Добавить(".");
	Постфиксы.Добавить(")");
	Постфиксы.Добавить(Символы.Таб);
	Постфиксы.Добавить("(");
	Постфиксы.Добавить("+");
	Постфиксы.Добавить("-");
	Постфиксы.Добавить("*");
	Постфиксы.Добавить("/");
	
	Возврат Постфиксы;
	
КонецФункции

Функция ЗаменитьИмяПараметраВЗапросе(ТекстЗапроса, ИсходноеИмя, НовоеИмя, Постфиксы)
	
	Для Каждого Постфикс Из Постфиксы Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ИсходноеИмя + Постфикс, "&" + НовоеИмя + Постфикс);
	КонецЦикла;

КонецФункции

// Преобразует параметр запроса (Изменяет имя или устраняет необходимость использования параметра).
// Используется для объединения запросов с одинаковыми параметрами.
//
// Возвращаемое значение:
//	Строка - Новое имя параметра.
//
Функция ПакетЗапросовПреобразоватьПараметр(ТекстЗапроса, ИсходноеИмя, ЗначениеПараметра, ПакетЗапросов = Неопределено)
	
	Постфиксы = ПакетЗапросовПостфиксы();
	
	ТипЗнч = ТипЗнч(ЗначениеПараметра);
	
	НовоеИмя = Неопределено;
	
	Если ТипЗнч = Тип("Дата") Тогда
		Текст = "ДатаВремя("+Формат(Год(ЗначениеПараметра),"ЧН=0; ЧГ=0")+","+Месяц(ЗначениеПараметра)+","+День(ЗначениеПараметра)+","+Час(ЗначениеПараметра)+","+Минута(ЗначениеПараметра)+","+Секунда(ЗначениеПараметра)+")";
		Для Каждого Постфикс Из Постфиксы Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ИсходноеИмя + Постфикс, Текст + Постфикс);
		КонецЦикла;
	ИначеЕсли ТипЗнч = Тип("Число") Тогда
		Текст = Формат(ЗначениеПараметра, "ЧРД=.; ЧН=; ЧГ=0");
		Для Каждого Постфикс Из Постфиксы Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ИсходноеИмя + Постфикс, Текст + Постфикс);
		КонецЦикла;
	ИначеЕсли ТипЗнч = Тип("Булево") Тогда
		Текст = Формат(ЗначениеПараметра, "БЛ=Ложь; БИ=Истина");
		Для Каждого Постфикс Из Постфиксы Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ИсходноеИмя + Постфикс, Текст + Постфикс);
		КонецЦикла;
	ИначеЕсли ЗначениеПараметра = "" Тогда
		Для Каждого Постфикс Из Постфиксы Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ИсходноеИмя + Постфикс, Постфикс);
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеПараметра) И Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч) Тогда
		
		ИмяПеречисления = ЗначениеПараметра.Метаданные().Имя;
		ИмяЗначения = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Перечисления[ИмяПеречисления].Индекс(ЗначениеПараметра)].Имя;
		
		Текст = "ЗНАЧЕНИЕ(Перечисление." + ИмяПеречисления + "." + ИмяЗначения + ")";
		Для Каждого Постфикс Из Постфиксы Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ИсходноеИмя + Постфикс, Текст + Постфикс);
		КонецЦикла;
		
	Иначе
		
		Если ПакетЗапросов <> Неопределено Тогда
			Ключ = ПакетЗапросов.Параметры.Получить(ЗначениеПараметра);
		КонецЕсли;
		Если Ключ = Неопределено Тогда
			
			Если ПакетЗапросов <> Неопределено И ПакетЗапросов.Запрос.Параметры.Свойство(ИсходноеИмя) Тогда
			
				НовоеИмя = "П" + СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
				ЗаменитьИмяПараметраВЗапросе(ТекстЗапроса, ИсходноеИмя, НовоеИмя, Постфиксы);
				
			Иначе
				
				НовоеИмя = ИсходноеИмя;
				
			КонецЕсли;
			
		Иначе
			
			ЗаменитьИмяПараметраВЗапросе(ТекстЗапроса, ИсходноеИмя, Ключ, Постфиксы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовоеИмя;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает пустую таблицу значений для хранения результа рассчитанных скидок (наценок).
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПустаяТаблицаСкидокСРасшифровкой(ПараметрыРасчета = Неопределено) Экспорт
	
	Если ПараметрыРасчета = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("КлючСвязи",   Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица.Колонки.Добавить("Сумма",       Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Действует",   Новый ОписаниеТипов("Булево"));
		Возврат Таблица;
	Иначе
		Возврат ПараметрыРасчета.ПустаяТаблицаСкидокСРасшифровкой.СкопироватьКолонки();
	КонецЕсли;
	
КонецФункции

Функция ПустаяТаблицаРасшифровка(ПараметрыРасчета = Неопределено)
	
	Если ПараметрыРасчета = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
		Таблица.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("ЭтоСообщение",  Новый ОписаниеТипов("Булево"));
		Возврат Таблица;
	Иначе
		Возврат ПараметрыРасчета.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
	КонецЕсли;
	
КонецФункции

Функция ПустаяТаблицаСкидкиНаценки(ПараметрыРасчета = Неопределено)
	
	Если ПараметрыРасчета = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("КлючСвязи",     Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
		Таблица.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
		Возврат Таблица;
	Иначе
		Возврат ПараметрыРасчета.ПустаяТаблицаСкидкиНаценки.СкопироватьКолонки();
	КонецЕсли;
	
КонецФункции

Функция ПустаяТаблицаРезультатПроверкиУсловия()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок,СправочникСсылка.СкидкиНаценки"));
	ТЗ.Колонки.Добавить("КлючСвязи",           Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КратностьВыполнения", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ЗначениеПоказателя");
	
	Возврат ТЗ;
	
КонецФункции

Функция ПустаяТаблицаУточненияЗначенияСкидкиНаценки()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ключ");
	ТЗ.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Возврат ТЗ;
	
КонецФункции


Функция УдалитьЛишниеСтрокиДереваСкидокРекурсивно(ДеревоСкидок)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			УдалитьЛишниеСтрокиДереваСкидокРекурсивно(СтрокаДерева);
			
		Иначе
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Строки[0]);
				СтрокаДерева.Строки.Удалить(СтрокаДерева.Строки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьДеревоСкидок(Данные)
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		ДеревоСкидок = ПакетЗапросовРезультатПоИмени("СкидкиНаценки", Данные).Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	Иначе
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("СкидкиНаценки", Данные);
		ПараметрыРасчета.Вставить("УправляемыеСкидки", Новый Массив);
		
		Запрос = ЗапросСкидкиНаценки(ПараметрыРасчета, Ложь);
		
		ДеревоСкидок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	КонецЕсли;
	
	УдалитьЛишниеСтрокиДереваСкидокРекурсивно(ДеревоСкидок);
	
	Возврат ДеревоСкидок;
	
КонецФункции


Функция ПараметрыРасчета()
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", Новый Массив);
	ПараметрыРасчета.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Регистратор", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.ПустаяСсылка());
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.Вставить("ДеньНедели", 1);
	ПараметрыРасчета.Вставить("ТекущееВремя", '00010101');
	ПараметрыРасчета.Вставить("ТекущаяДата", '00010101');
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.Вставить("ГрафикОплаты", Справочники.ГрафикиОплаты.ПустаяСсылка());
	
	// Карты лояльности
	ПараметрыРасчета.Вставить("КартаЛояльности", Справочники.КартыЛояльности.ПустаяСсылка());
	
	ПараметрыРасчета.Вставить("Товары", Новый Массив);
	ПараметрыРасчета.Вставить("ВалютаДокумента", Справочники.Валюты.ПустаяСсылка());
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Справочники.Валюты.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Объект", Неопределено);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция НачалоДекады(Дата)
	
	Если День(Дата) < 11 Тогда
		
		Возврат НачалоМесяца(Дата);
		
	ИначеЕсли День(Дата) < 21 Тогда
		
		Возврат НачалоМесяца(Дата) + 86400 * 10;
		
	Иначе
		
		Возврат НачалоМесяца(Дата) + 86400 * 20;
		
	КонецЕсли;
	
КонецФункции

Функция НачалоПолугодия(Дата)
	
	Если Месяц(Дата) < 6 Тогда
		Возврат НачалоГода(Дата)
	Иначе
		Возврат ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
			НачалоГода(Дата),
			Перечисления.Периодичность.Полугодие,
			1) + 1;
	КонецЕсли;
	
КонецФункции

Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина)
	
	ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

Процедура ДобавитьКомандуВГруппу(ЭлементСписка, Форма, ГруппаСоздать, Ключ)
	
	ИмяКоманды = "ПодключаемаяКоманда" + Ключ + (ГруппаСоздать.ПодчиненныеЭлементы.Количество() + 1);
	
	НоваяСтрока = Форма.КомандыУсловияПредоставления.Добавить();
	НоваяСтрока.ИмяКоманды = ИмяКоманды;
	НоваяСтрока.Значение = ЭлементСписка.Значение;
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
	КомандаФормы.Заголовок = ЭлементСписка.Представление;
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	КомандаФормы.Отображение = ОтображениеКнопки.Авто;
	
	НовыйЭлемент = Форма.Элементы.Добавить("Кнопка"+ИмяКоманды, Тип("КнопкаФормы"), ГруппаСоздать);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

Функция ИмяВременнойТаблицыНакопленныйОбъемПродаж(УсловиеПредоставления, Интервал)
	
	Если УсловиеПредоставления.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру Тогда
		ИмяВременнойТаблицы = "НакопленныйОбъемПродажПоПартнеруЗаПериод";
	ИначеЕсли УсловиеПредоставления.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоТорговомуСоглашению Тогда
		ИмяВременнойТаблицы = "НакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод";
	КонецЕсли;
	
	ПредставлениеДатаНачала    = Формат(Интервал.ДатаНачала, "ДФ=ddMMyyyy; ДП=");
	Если ПустаяСтрока(ПредставлениеДатаНачала) Тогда
		ПредставлениеДатаНачала = "01010001";
	КонецЕсли;
	ПредставлениеДатаОкончания = Формат(Интервал.ДатаОкончания, "ДФ=ddMMyyyy; ДП=");
	Если ПустаяСтрока(ПредставлениеДатаОкончания) Тогда
		ПредставлениеДатаОкончания = "01010001";
	КонецЕсли;
	
	ИмяВременнойТаблицы = ИмяВременнойТаблицы
	                    + ПредставлениеДатаНачала
	                    + ПредставлениеДатаОкончания
	                    + СокрЛП(УсловиеПредоставления.ЦифровойКодВалютыОграничения)
	                    + ?(УсловиеПредоставления.ВключатьТекущуюПродажуВНакопленныйОбъемПродаж, "ВключаяТекущуюПродажу", "ИсключаяТекущуюПродажу");
	
	Возврат ИмяВременнойТаблицы;
	
КонецФункции

// Процедура получает ближайший день рождения для расчета скидок
//
// Параметры:
//  Получатель - физическое лицо получатель скидки
//  ТекущаяДата - дата, на которую рассчитывается скидка
//
//
// Возвращаемое значение:
//  ДатаРождения - ближайшая дата Дня рождения получателя.
//
Функция  ПолучитьБлижайшийДеньРождения(Партнер, ТекущаяДата)  
	Перем ДатаРождения;
	ДатаРождения = Дата(0001,01,01);
		
	Если ЗначениеЗаполнено(Партнер.ДатаРождения) Тогда
		
			ДатаТекущегоГода    = Дата(Год(ТекущаяДата),Месяц(Партнер.ДатаРождения),День(Партнер.ДатаРождения));
			ДатаПредыдущегоГода = ДобавитьМесяц(ДатаТекущегоГода,-12);
			ДатаСледующегоГода  = ДобавитьМесяц(ДатаТекущегоГода,12);
			
			Если ТекущаяДата < ДатаТекущегоГода Тогда
				Разность = ДатаТекущегоГода - ТекущаяДата;
			Иначе
				Разность = ТекущаяДата - ДатаТекущегоГода;
			КонецЕсли;
			
			Если Разность > (ТекущаяДата - ДатаПредыдущегоГода) Тогда
				ДатаРождения = ДатаПредыдущегоГода
			ИначеЕсли Разность > (ДатаСледующегоГода - ТекущаяДата) Тогда
				ДатаРождения = ДатаСледующегоГода
			Иначе
				ДатаРождения = ДатаТекущегоГода
			КонецЕсли;
		КонецЕсли;
	
	Возврат ДатаРождения
КонецФункции

#КонецОбласти

#КонецОбласти
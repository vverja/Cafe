#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбновлениеИнформационнойБазы


Функция ПолноеИмяРегистра()
    Возврат "РегистрНакопления.Закупки";
КонецФункции 

#Область ЗакупкиЗаполнитьСуммыДопРасходов

Процедура ЗакупкиЗаполнитьСуммыДопРасходов_ДанныеДляОбновления(Параметры) Экспорт
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Регистратор
	|ПОМЕСТИТЬ
	|	Расходы
	|ИЗ
	|	РегистрНакопления.ПартииПрочихРасходов КАК ДД
	|ГДЕ
	|	ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДД.СтатьяРасходов.ВариантРаспределенияРасходов =
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Регистратор
	|ПОМЕСТИТЬ
	|	Закупки
	|ИЗ
	|	РегистрНакопления.Закупки КАК ДД
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|		ПО Расходы.Регистратор = ДД.Регистратор
	|ГДЕ
	|	ДД.СуммаДопРасходов <> 0	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДД.Регистратор
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ДД.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДД
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|		ПО Расходы.Регистратор = ДД.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Закупки КАК Закупки
	|		ПО Закупки.Регистратор = ДД.Регистратор	
	|ГДЕ
	|	ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДД.СуммаДопРасходов <> 0
	|	И ДД.СтатьяРасходовСписания <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	И Закупки.Регистратор ЕСТЬ NULL
	|");
    
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
    ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
        Параметры, 
        Регистраторы, 
        ПолноеИмяРегистра()
    );
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
// Заполняет ресурсы "СуммаДопРасходов" и "СуммаДопРасходовБезНДС" в регистре "Закупки".
Процедура ЗакупкиЗаполнитьСуммыДопРасходов(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	РегистраторыДляОбработки.Регистратор.МоментВремени КАК МоментВремени,
	|	РегистраторыДляОбработки.Регистратор
	|ПОМЕСТИТЬ
	|	Регистраторы
	|ИЗ
	|	втДляОбработкиЗакупки КАК РегистраторыДляОбработки
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.МоментВремени
	|ИЗ
	|	Регистраторы КАК ДД
	|УПОРЯДОЧИТЬ ПО
	|	ДД.МоментВремени УБЫВ
	|;
	|ВЫБРАТЬ
	|	МИНИМУМ(СебестоимостьТоваров.Период) КАК НачалоПериода,
	|	МАКСИМУМ(СебестоимостьТоваров.Период) КАК ОкончаниеПериода
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
	|		ПО Регистраторы.Регистратор = СебестоимостьТоваров.Регистратор
	|");
    
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
        Параметры.Очередь,
        Неопределено, // ПолноеИмяДокумента
		ПолноеИмяРегистра(),
		Запрос.МенеджерВременныхТаблиц
    );
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
    КонецЕсли;
    
	Результаты = Запрос.ВыполнитьПакет();
	// Результаты[0] - вт Регистраторы
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() Тогда
        
        МоментВремени = Выборка.МоментВремени;
		
		Периоды = Результаты[2].Выбрать();
		Периоды.Следующий();
	
		ИсходныйТекстЗапроса = 
			ТекстОписаниеДанныхДляЗакупок()
			+ "ОБЪЕДИНИТЬ ВСЕ" + ТекстЗакупкиИзСебестоимости() // использует Регистраторы
			+ "ОБЪЕДИНИТЬ ВСЕ" + ТекстДополнениеЗакупки(); // использует Регистраторы
		ИсходныйЗапрос = Новый Запрос(ИсходныйТекстЗапроса);
        
		ИсходныйЗапрос.УстановитьПараметр("НачалоПериода",    Периоды.НачалоПериода);
		ИсходныйЗапрос.УстановитьПараметр("ОкончаниеПериода", Периоды.ОкончаниеПериода);
        
		ИсходныйЗапрос.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
        
		ДанныеДляРасчета = ИсходныйЗапрос.Выполнить().Выгрузить();
		ДанныеДляРасчета.Сортировать("Регистратор", Новый СравнениеЗначений);
		
		ЗаписатьРасчетныеПартии(ДанныеДляРасчета);
		
	КонецЕсли;
    
	ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяРегистра()
    );
    
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Функция ТекстОписаниеДанныхДляЗакупок()
	Возврат "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК Приоритет,
		|	""ХХХХХХХХХХХХХХХХ"" КАК ТипЗаписи,
		|	ЛОЖЬ КАК РасчетЗавершен,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период,
		|	НЕОПРЕДЕЛЕНО КАК Регистратор,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаНоменклатуры,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПустаяСсылка) КАК ТипЗапасов,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК Заказ,
		|	0. КАК Количество,
		|	0. КАК Сумма,
		|	0. КАК СуммаБезНДС,
		|	0. КАК СуммаРегл,
		|	0. КАК СуммаРеглБезНДС,
		|	0. КАК СуммаСкидки,
		|	0. КАК Стоимость,
		|	0. КАК СтоимостьБезНДС,
		|	0. КАК СтоимостьРегл,
		|	0. КАК СуммаДопРасходов,
		|	0. КАК СуммаДопРасходовБезНДС,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
		|	0. КАК СуммаВВалютеДокумента,
		|	0. КАК СуммаБезНДСВВалютеДокумента,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаВзаиморасчетов,
		|	0. КАК СуммаВВалютеВзаиморасчетов,
		|	0. КАК СуммаБезНДСВВалютеВзаиморасчетов,
		|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУНоменклатуры,
		|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУРасчетов,
		|	НЕОПРЕДЕЛЕНО КАК ДокументДвижения
		|";
КонецФункции

Функция ТекстЗакупкиИзСебестоимости() // использует Регистраторы
	Возврат "
		|ВЫБРАТЬ
		|	90 КАК Приоритет,
		|	""Партия"" КАК ТипЗаписи,
		|	ИСТИНА КАК РасчетЗавершен,
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.Организация,
		|	ДД.Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
		|	ДД.АналитикаУчетаНоменклатуры,
		|	Аналитика.Склад,
		|	ЕСТЬNULL(СпрВидыЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК ТипЗапасов,
		|	ДД.ВидЗапасов,
		|	АналитикаПартнеров.Партнер,
		|	АналитикаПартнеров.Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК Заказ,
		|	0. КАК Количество,
		|	0. КАК Сумма,
		|	0. КАК СуммаБезНДС,
		|	0. КАК СуммаРегл,
		|	0. КАК СуммаРеглБезНДС,
		|	0. КАК СуммаСкидки,
		|	0. КАК Стоимость,
		|	0. КАК СтоимостьБезНДС,
		|	СУММА(ДД.СтоимостьРегл) КАК СтоимостьРегл,
		|	СУММА(ДД.СуммаДопРасходов) КАК СуммаДопРасходов,
		|	СУММА(ДД.СуммаДопРасходовБезНДС) КАК СуммаДопРасходовБезНДС,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
		|	0. КАК СуммаВВалютеДокумента,
		|	0. КАК СуммаБезНДСВВалютеДокумента,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаВзаиморасчетов,
		|	0. КАК СуммаВВалютеВзаиморасчетов,
		|	0. КАК СуммаБезНДСВВалютеВзаиморасчетов,
		|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУНоменклатуры,
		|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУРасчетов,
		|	НЕОПРЕДЕЛЕНО КАК ДокументДвижения
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК ДД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
		|		ПО Регистраторы.Регистратор = ДД.Регистратор
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.Ссылка = ДД.АналитикаУчетаНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК АналитикаПартнеров
		|		ПО АналитикаПартнеров.Ссылка = ДД.АналитикаУчетаПоПартнерам
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СпрВидыЗапасов
		|		ПО СпрВидыЗапасов.Ссылка = ДД.ВидЗапасов
		|ГДЕ
		|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И (ДД.СуммаДопРасходов <> 0. ИЛИ ДД.СуммаДопРасходов <> 0.)
		|	И ДД.Количество = 0
		|	И ДД.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|	И ДД.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОформлениеГТДСамостоятельно)
		|СГРУППИРОВАТЬ ПО
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.Организация,
		|	ДД.Подразделение,
		|	ДД.АналитикаУчетаНоменклатуры,
		|	Аналитика.Склад,
		|	ЕСТЬNULL(СпрВидыЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)),
		|	ДД.ВидЗапасов,
		|	АналитикаПартнеров.Партнер,
		|	АналитикаПартнеров.Контрагент
		|";
КонецФункции

Функция ТекстДополнениеЗакупки() // использует Регистраторы
	Возврат "
		|ВЫБРАТЬ
		|	10 КАК Приоритет,
		|	""Дополнение"" КАК ТипЗаписи,
		|	ИСТИНА КАК РасчетЗавершен,
		|	ДД.Период,
		|	ДД.Регистратор,
		|	ДД.ХозяйственнаяОперация,
		|	ДД.Организация,
		|	ДД.Подразделение,
		|	ДД.Менеджер,
		|	ДД.АналитикаУчетаНоменклатуры,
		|	ДД.Склад,
		|	ДД.ТипЗапасов,
		|	ДД.ВидЗапасов,
		|	ДД.Партнер,
		|	ДД.Контрагент,
		|	ДД.Соглашение,
		|	ДД.Договор,
		|	ДД.Заказ,
		|	ДД.Количество,
		|	ДД.Сумма,
		|	ДД.СуммаБезНДС,
		|	ДД.СуммаРегл,
		|	ДД.СуммаРеглБезНДС,
		|	ДД.СуммаСкидки,
		|	ДД.Стоимость,
		|	ДД.СтоимостьБезНДС,
		|	ДД.СтоимостьРегл,
		|	ДД.СуммаДопРасходов,
		|	ДД.СуммаДопРасходовБезНДС,
		|	ДД.ВалютаДокумента,
		|	ДД.СуммаВВалютеДокумента,
		|	ДД.СуммаБезНДСВВалютеДокумента,
		|	ДД.ВалютаВзаиморасчетов,
		|	ДД.СуммаВВалютеВзаиморасчетов,
		|	ДД.СуммаБезНДСВВалютеВзаиморасчетов,
		|	ДД.ИсточникГФУНоменклатуры,
		|	ДД.ИсточникГФУРасчетов,
		|	ДД.ДокументДвижения
		|ИЗ
		|	РегистрНакопления.Закупки КАК ДД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
		|		ПО Регистраторы.Регистратор = ДД.Регистратор
		|ГДЕ
		|	ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И (ДД.СуммаДопРасходов = 0. И ДД.СуммаДопРасходов = 0.
		|		ИЛИ ДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОформлениеГТДСамостоятельно))
		|";
КонецФункции

Процедура ЗаписатьРасчетныеПартии(РасчетныеПартии)
    
    РасчетныеПартии.Сортировать("Регистратор", Новый СравнениеЗначений);
	
	Движения = РегистрыНакопления.Закупки.СоздатьНаборЗаписей();
    Движения.ДополнительныеСвойства.Вставить("ПартионныйУчет_ЗаписьПартии");
	
	Регистратор = Неопределено;
	Замещать = Истина;
	Счетчик = 0;
	МаксимумСчетчика = РасчетныеПартии.Количество() - 1;
	Пока Счетчик <= МаксимумСчетчика Цикл
		РасчетнаяПартия = РасчетныеПартии[Счетчик];
		Если Регистратор <> РасчетнаяПартия.Регистратор Тогда
            
            Регистратор = РасчетнаяПартия.Регистратор;
			
			Движения.Очистить();
			Движения.Отбор.Регистратор.Установить(Регистратор);
			
			НачатьТранзакцию();
            Замещать = Ложь;
		КонецЕсли;

		Движение = Движения.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, РасчетнаяПартия);
		Движение.Активность = Истина;
		
		Счетчик = Счетчик + 1;
		Если Счетчик > МаксимумСчетчика Или (Регистратор <> РасчетныеПартии[Счетчик].Регистратор) Тогда
			Движения.Записать(Замещать);
            ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Движения);
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти // ЗакупкиЗаполнитьСуммыДопРасходов

Процедура ПереносДопРасходовПоСтатьяНаСебестоимость_ДанныеДляОбновления(Параметры) Экспорт
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Закупки.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|ГДЕ
	|	Закупки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|	И (Закупки.СуммаДопРасходов <> 0. ИЛИ Закупки.СуммаДопРасходовБезНДС <> 0.)";
	
	ДанныеКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеКОбработке, ДополнительныеПараметрыОтметки);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
// Переносит движения доп.расходов по статьям расходов, распределяемым на себестоимость 
// из регистра накопления Закупки в регистр накопления ДвиженияНоменклатураДоходыРасходы
Процедура ПереносДопРасходовПоСтатьямНаСебестоимость(Параметры) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаДопРасходовПоСтатьямНаСебестоимость());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
        Параметры.Очередь,
		Неопределено,
		ПолноеИмяРегистра(),
        Запрос.МенеджерВременныхТаблиц
    );
                    
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Закупки = РезультатЗапроса[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументу = РезультатЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаПоДокументу.Следующий() Цикл
		
		Регистратор = ВыборкаПоДокументу.Регистратор;
		НачатьТранзакцию();
	
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Закупки.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДвиженияНоменклатураДоходыРасходы.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			
			Блокировка.Заблокировать();
			
			// Записать правильные движения
			Набор = РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Выборка = ВыборкаПоДокументу.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
				МоментВремени = Выборка.МоментВремени;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			// Удалить движения из регистра Закупки
			ДвиженияПоЗакупкам = Закупки.Строки.Найти(ВыборкаПоДокументу.Регистратор, "Регистратор");
			Набор = РегистрыНакопления.Закупки.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Если ДвиженияПоЗакупкам = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			Иначе
				Для Каждого Движение Из ДвиженияПоЗакупкам.Строки Цикл
					ЗаполнитьЗначенияСвойств(Набор.Добавить(), Движение);
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				Закупки.Строки.Удалить(ДвиженияПоЗакупкам);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось обработать %Документ% по причине: %Причина%';uk='Не вдалося обробити %Документ% з причини: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				Регистратор,
				ТекстСообщения
            );
			ОтменитьТранзакцию();
		КонецПопытки;
	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяРегистра()
    );
	
КонецПроцедуры

Функция ТекстЗапросаДопРасходовПоСтатьямНаСебестоимость()
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Закупки.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втДопРасходы
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДляОбработкиЗакупки КАК Фильтр
	|		ПО Закупки.Регистратор = Фильтр.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартииРасходов.Регистратор КАК Регистратор,
	|	ПартииРасходов.Организация КАК Организация,
	|	ПартииРасходов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ПартииРасходов.ВидЗапасов КАК ВидЗапасов,
	|	ПартииРасходов.СтатьяРасходов КАК СтатьяРасходов,
	|	ПартииРасходов.АналитикаРасходов КАК АналитикаРасходов
	|
	|ПОМЕСТИТЬ втПартииРасходовНаСебестоимостьТоваров
	|ИЗ
	|	РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК ПартииРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДопРасходы КАК ДопРасходы
	|		ПО ПартииРасходов.Регистратор = ДопРасходы.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартииРасходов.Регистратор,
	|	ПартииРасходов.Организация,
	|	ПартииРасходов.АналитикаУчетаНоменклатуры,
	|	ПартииРасходов.СтатьяРасходов,
	|	ПартииРасходов.АналитикаРасходов
	|
	|ПОМЕСТИТЬ втПартииПрочихРасходов
	|ИЗ
	|	РегистрНакопления.ПартииПрочихРасходов КАК ПартииРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДопРасходы КАК ДопРасходы
	|			ПО ПартииРасходов.Регистратор = ДопРасходы.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПартииРасходовНаСебестоимостьТоваров КАК ПартииНаСебестоимость
	|			ПО ПартииРасходов.Регистратор = ПартииНаСебестоимость.Регистратор
	|ГДЕ
	|	ПартииНаСебестоимость.Регистратор ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартииРасходов.Регистратор,
	|	ПартииРасходов.Организация,
	|	ПартииРасходов.АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Закупки"" КАК ИмяРегистра,
	|	Закупки.Период КАК Период,
	|	Закупки.Регистратор КАК Регистратор,
	|	Закупки.Активность КАК Активность,
    |
	|	Закупки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Закупки.Организация КАК Организация,
	|	Закупки.Подразделение КАК Подразделение,
	|	Закупки.Менеджер КАК Менеджер,
	|	Закупки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Закупки.Склад КАК Склад,
	|	Закупки.ТипЗапасов КАК ТипЗапасов,
	|	Закупки.ВидЗапасов КАК ВидЗапасов,
	|	Закупки.Партнер КАК Партнер,
	|	Закупки.Контрагент КАК Контрагент,
	|	Закупки.Соглашение КАК Соглашение,
	|	Закупки.Договор КАК Договор,
	|	Закупки.Заказ КАК Заказ,
    |
	|	Закупки.Количество КАК Количество,
	|	Закупки.Сумма КАК Сумма,
	|	Закупки.СуммаБезНДС КАК СуммаБезНДС,
	|	Закупки.СуммаРегл КАК СуммаРегл,
	|	Закупки.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|	Закупки.СуммаСкидки КАК СуммаСкидки,
	|	Закупки.Стоимость КАК Стоимость,
	|	Закупки.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|	Закупки.СтоимостьРегл КАК СтоимостьРегл,
	|	Закупки.СуммаДопРасходов КАК СуммаДопРасходов,
	|	Закупки.СуммаДопРасходовБезНДС КАК СуммаДопРасходовБезНДС,
    |
	|	Закупки.ВалютаДокумента КАК ВалютаДокумента,
	|	Закупки.СуммаВВалютеДокумента КАК СуммаВВалютеДокумента,
	|	Закупки.СуммаБезНДСВВалютеДокумента КАК СуммаБезНДСВВалютеДокумента,
	|	Закупки.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Закупки.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	Закупки.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	Закупки.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|	Закупки.ИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
	|	Закупки.ДокументДвижения КАК ДокументДвижения,
	|	Закупки.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДопРасходы КАК ДопРасходы
	|		ПО Закупки.Регистратор = ДопРасходы.Регистратор
	|ГДЕ
	|	(Закупки.СуммаДопРасходов = 0 ИЛИ Закупки.СуммаДопРасходовБезНДС = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Закупки.Период УБЫВ,
	|	Закупки.НомерСтроки
	|ИТОГИ ПО
	|	Закупки.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ДвиженияНоменклатураДоходыРасходы"" КАК ИмяРегистра,
	|	Закупки.Период КАК Период,
	|	Закупки.Регистратор КАК Регистратор,
	|	Закупки.Активность КАК Активность,
    |
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РаспределениеРасходовНаСебестоимость) КАК ХозяйственнаяОперация,
	|	Закупки.Организация КАК Организация,
	|	Закупки.Подразделение КАК Подразделение,
	|	Закупки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Закупки.Склад КАК Склад,
	|	Закупки.ТипЗапасов КАК ТипЗапасов,
	|	Закупки.ВидЗапасов КАК ВидЗапасов,
	|	ПартииРасходов.СтатьяРасходов КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	ПартииРасходов.АналитикаРасходов КАК АналитикаРасходов,
    |
	|	Закупки.СтоимостьРегл КАК СтоимостьРегл,
	|	Закупки.СуммаДопРасходов КАК Стоимость,
	|	Закупки.СуммаДопРасходовБезНДС КАК СтоимостьБезНДС,
    |
	|	Закупки.ВидЗапасов КАК ИсточникГФУНоменклатуры,
	|	Закупки.Регистратор КАК ДокументДвижения,
	|	Закупки.МоментВремени,
	|	Закупки.НомерСтроки
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДопРасходы КАК ДопРасходы
	|		ПО Закупки.Регистратор = ДопРасходы.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПартииРасходовНаСебестоимостьТоваров КАК ПартииРасходов
	|		ПО Закупки.Регистратор = ПартииРасходов.Регистратор
	|			И Закупки.Организация = ПартииРасходов.Организация
	|			И Закупки.АналитикаУчетаНоменклатуры = ПартииРасходов.АналитикаУчетаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|						И Закупки.ВидЗапасов = ПартииРасходов.ВидЗапасов
	|					ТОГДА ИСТИНА
	|				КОГДА НЕ &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|					ТОГДА ИСТИНА
	|				КОГДА Закупки.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (Закупки.СуммаДопРасходов <> 0 ИЛИ Закупки.СуммаДопРасходовБезНДС <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДвиженияНоменклатураДоходыРасходы"",
	|	Закупки.Период,
	|	Закупки.Регистратор,
	|	Закупки.Активность,
    |
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РаспределениеРасходовНаСебестоимость),
	|	Закупки.Организация,
	|	Закупки.Подразделение,
	|	Закупки.АналитикаУчетаНоменклатуры,
	|	Закупки.Склад,
	|	Закупки.ТипЗапасов,
	|	Закупки.ВидЗапасов,
	|	ПартииРасходов.СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО,
	|	ПартииРасходов.АналитикаРасходов,
    |
	|	Закупки.СтоимостьРегл,
	|	Закупки.СуммаДопРасходов,
	|	Закупки.СуммаДопРасходовБезНДС,
	|	Закупки.ВидЗапасов,
	|	Закупки.Регистратор,
	|	Закупки.МоментВремени,
	|	Закупки.НомерСтроки
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДопРасходы КАК ДопРасходы
	|		ПО Закупки.Регистратор = ДопРасходы.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПартииПрочихРасходов КАК ПартииРасходов
	|		ПО Закупки.Регистратор = ПартииРасходов.Регистратор
	|			И Закупки.Организация = ПартииРасходов.Организация
	|			И (Закупки.СуммаДопРасходов <> 0 ИЛИ Закупки.СуммаДопРасходовБезНДС <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Закупки.Период УБЫВ,
	|	Закупки.НомерСтроки
	|ИТОГИ ПО
	|	Закупки.Регистратор
    |";
	
КонецФункции

Процедура КорректироватьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровПоставщику.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту)
	|	И ВозвратТоваровПоставщику.Проведен
    |
    |ОБЪЕДИНИТЬ 
    |
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Закупки.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|ГДЕ
	|	Закупки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|	И Закупки.СтоимостьБезНДС = 0
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), 
        ПолноеИмяРегистра()
    );
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
// Исправляются движения по регистру "Закупки" для документов возврата товаров поставщику
Процедура КорректироватьДвижения(Параметры) Экспорт
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		"Документ.ВозвратТоваровПоставщику",
		ПолноеИмяРегистра(),
		Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли
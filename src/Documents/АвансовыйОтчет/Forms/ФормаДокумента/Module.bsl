&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	УстановитьУсловноеОформление();
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьОплатуПоставщикамИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		РассчитатьСуммуДокумента();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
			ДанныеСтроки.Подразделение = РезультатВыбора;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПрочиеРасходы);
	
	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_АвансовыйОтчет", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗадаватьВопрос = Ложь;
	НайденныеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов > 0
			И СтрокаТаблицы.ВалютаВзаиморасчетов <> Объект.Валюта Тогда
			
			ЗадаватьВопрос = Истина;
			НайденныеСтроки.Добавить(СтрокаТаблицы);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадаватьВопрос Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("НайденныеСтроки", НайденныеСтроки)), НСтр("ru='Очистить суммы взаиморасчетов?';uk='Очистити суми взаєморозрахунків?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииСервер();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НайденныеСтроки = ДополнительныеПараметры.НайденныеСтроки;
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			
		КонецЦикла;
	КонецЕсли;
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ПересчитатьИтоги();
	
	УстановитьВидимостьНалоговыхНазначений();
	УстановитьКоэффициентПропорциональногоНДС();
		
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ВалютаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ПодотчетноеЛицоПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(Объект.ПодотчетноеЛицо);
	КонецЕсли;
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры


&НаСервере
Процедура УстановитьКоэффициентПропорциональногоНДС()
	КоэффициентПропорциональногоОтнесенияНДСНаОбязательства = НДСОбщегоНазначенияПовтИсп.ПолучитьКоэффициентПропорциональногоНДСОбязательтсва(Объект.Организация, НачалоГода(Объект.Дата));
КонецПроцедуры // УстановитьКоэффициентПропорциональногоНДС

&НаСервере
Процедура УстановитьВидимостьНалоговыхНазначений()
	НДСОбщегоНазначенияСервер.УстановитьВидимостьНалоговыхНазначений(ЭтаФорма);
	
	НДСОбщегоНазначенияСервер.УстановитьВидимостьСуммаНДСПропорционально(ЭтаФорма, Ложь, НЕ Объект.Валюта = ВалютаРегламентированногоУчета);
	
	НДСОбщегоНазначенияСервер.ЗаполнитьСписокВыбораНалоговыхНазначенийПоступления(Элементы.ПрочиеРасходыНалоговоеНазначение.СписокВыбора, Ложь);
	
КонецПроцедуры // УстановитьВидимостьНалоговыхНазначений

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплатаПоставщикам

&НаКлиенте
Процедура ОплатаПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(
		СтрокаТаблицы.Заказ,
		Ложь); // ЭтоРасчетыСКлиентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПоставщикПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, Ложь);

	Если СтрокаТаблицы = Неопределено
	 ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.Поставщик)
	 ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)
	Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПоУмолчанию = ПолучитьКонтрагентаПартнераПоУмолчанию(СтрокаТаблицы.Поставщик);
	Если КонтрагентПоУмолчанию <> Неопределено Тогда
		СтрокаТаблицы.Контрагент = КонтрагентПоУмолчанию;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация",           Объект.Организация);
	ЗначенияОтбора.Вставить("Партнер",               СтрокаТаблицы.Поставщик);
	ЗначенияОтбора.Вставить("Контрагент",            СтрокаТаблицы.Контрагент);
	ЗначенияОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"));
	ЗначенияОтбора.Вставить("Валюта", Объект.Валюта);	
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент          = Объект.Ссылка;
	НастройкиВыбора.ИсключитьХозяйственнуюОперацию = Истина;
	НастройкиВыбора.ЗапретитьДоговорыПоДокументам  = Истина;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Подразделение = Объект.Подразделение;
		ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС");
		ПриДобавлениСтрокиРасходов(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
	СтрокаТаблицы = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Элементы.ПрочиеРасходы.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
			СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна,
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация,
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.ПрочиеРасходы.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.ПрочиеРасходы.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.ПрочиеРасходы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
		Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.СуммаСНДС);
	ТекущаяСтрока.Вставить("НалоговоеНазначение", ТекущиеДанные.НалоговоеНазначение);
	ТекущаяСтрока.Вставить("СуммаНДСПропорционально", ТекущиеДанные.СуммаНДСПропорционально);
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПропорционально", Новый Структура("КоэффициентПропорциональногоОтнесенияНДСНаОбязательства", КоэффициентПропорциональногоОтнесенияНДСНаОбязательства));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыЭтоСуточныеПриИзменении(Элемент)	

	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ТекущаяСтрока.ЭтоСуточные = Истина Тогда
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС");
		
		СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДСПропорционально", Новый Структура("КоэффициентПропорциональногоОтнесенияНДСНаОбязательства", КоэффициентПропорциональногоОтнесенияНДСНаОбязательства));
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПропорционально", Новый Структура("КоэффициентПропорциональногоОтнесенияНДСНаОбязательства", КоэффициентПропорциональногоОтнесенияНДСНаОбязательства));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПропорционально", Новый Структура("КоэффициентПропорциональногоОтнесенияНДСНаОбязательства", КоэффициентПропорциональногоОтнесенияНДСНаОбязательства));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыНалоговоеНазначениеПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПропорционально", Новый Структура("КоэффициентПропорциональногоОтнесенияНДСНаОбязательства", КоэффициентПропорциональногоОтнесенияНДСНаОбязательства));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура используется в автотесте процесса продаж.
//
&НаКлиенте
Процедура АвтоТест_ЗаполнитьПолученныеАвансы(Команда) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("АвтоТест_ЗаполнитьПолученныеАвансыЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.ПрочиеРасходы,
		Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Валюта");
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru='В список ""Прочие расходы"" не введено ни одной строки.';uk='У список ""Інші витрати"" не введено жодного рядка.'"));
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru='В списке ""Прочие расходы"" не выбрано ни одной строки.';uk='У списку ""Інші витрати"" не вибрано жодного рядка.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Подразделение", Объект.Подразделение);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "Сумма");
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru='Введите сумму в новой строке';uk='Введіть суму в новому рядку'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	
	ТаблицаФормы  = Элементы.ПрочиеРасходы;
	ДанныеТаблицы = Объект.ПрочиеРасходы;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДСПропорционально", Новый Структура("КоэффициентПропорциональногоОтнесенияНДСНаОбязательства", КоэффициентПропорциональногоОтнесенияНДСНаОбязательства));
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуВОплатыПоставщикам(Команда)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		НоваяСтрока = Объект.ОплатаПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , "НомерСтроки");
	
		Объект.ПрочиеРасходы.Удалить(Объект.ПрочиеРасходы.Индекс(ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуВРасходы(Команда)
	
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		НоваяСтрока = Объект.ПрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , "НомерСтроки");
		ПриДобавлениСтрокиРасходов(НоваяСтрока);
		
		Объект.ОплатаПоставщикам.Удалить(Объект.ОплатаПоставщикам.Индекс(ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользуетсяОбменСБухгалтериейПредприятия   = ПолучитьФункциональнуюОпцию("ИспользуетсяОбменСБухгалтериейПредприятия");
	ИспользуютсяПодразделения                   = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьНесколькоВалют                  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьСтатусыАвансовыхОтчетов         = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов");
	КонтролироватьВыдачуПодОтчетВРазрезеЦелей   = ПолучитьФункциональнуюОпцию("КонтролироватьВыдачуПодОтчетВРазрезеЦелей"); 
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ИспользоватьСтатусыАвансовыхОтчетов Тогда
		ПравоУтверждения = ПраваПользователяПовтИсп.УтверждениеЗаявокНаРасходованиеДенежныхСредств();
	Иначе
		ПравоУтверждения = Истина;
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	
	Элементы.ОплатаПоставщикамСуммаВзаиморасчетов.Видимость = ИспользоватьНесколькоВалют;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаСуммы.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПрочиеРасходы);
	
	ПересчитатьИтоги();
	УправлениеФормой();
	УстановитьСписокСтатусов();
	
	
	УстановитьВидимостьНалоговыхНазначений();
	УстановитьКоэффициентПропорциональногоНДС();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьВидимостьНалоговыхНазначений();
	УстановитьКоэффициентПропорциональногоНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииКлиент()
	
	// При смене валюты очистим сумму в валюте взаиморасчетов.
	Если ТекущаяВалюта <> Объект.Валюта
		И Объект.ОплатаПоставщикам.Итог("СуммаВзаиморасчетов") <> 0 Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
				СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущаяВалюта <> Объект.Валюта
		И ЗначениеЗаполнено(ТекущаяВалюта)
		И ЗначениеЗаполнено(Объект.Валюта)
		И Объект.ОплатаПоставщикам.Количество() > 0 Тогда
		
		ПредставлениеТЧ = НСтр("ru='Оплата поставщикам';uk='Оплата постачальникам'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Табличная часть ""%1"" будет очищена, продолжить?';uk='Таблична частина ""%1"" буде очищена, продовжити?'"),
			ПредставлениеТЧ);
		ТекстВопроса = НСтр("ru='Валюта документа не совпадает с валютой взаиморасчетов в табличной части.';uk='Валюта документа не збігається з валютою взаєморозрахунків у табличній частині.'") + Символы.ПС + ТекстВопроса;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросВалютаНеСовпадаетЗавершение", ЭтотОбъект, ), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
////////		
		//Если Отказ Тогда
		//	Объект.Валюта = ТекущаяВалюта; 
		//	Возврат;
		//КонецЕсли;	
		//
		//Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация") Тогда
		//	
		//	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Пересчитать суммы в документе в валюту %1 ?';uk='Перерахувати суми в документі в валюту %1 ?'"), Объект.Валюта);
		//
		//	ПоказатьВопрос(Новый ОписаниеОповещения("ВалютаПриИзмененииКлиентЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		//	
		//КонецЕсли;	
		
	Иначе
		
		ТекущаяВалюта = Объект.Валюта;
		
		ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВалютаНеСовпадаетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодОтвета = РезультатВопроса;
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		Объект.ОплатаПоставщикам.Очистить();
		
		Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация") Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Пересчитать суммы в документе в валюту %1 ?';uk='Перерахувати суми в документі в валюту %1 ?'"), Объект.Валюта);
		
			ПоказатьВопрос(Новый ОписаниеОповещения("ВалютаПриИзмененииКлиентЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;	
	Иначе
		Объект.Валюта = ТекущаяВалюта;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ВалютаПриИзмененииКлиентЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПересчетСуммДокументаВВалютуСервер();
		РассчитатьСуммуДокумента();
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Суммы в документе пересчитаны в валюту %1';uk='Суми у документі перераховані у валюту %1'"), Объект.Валюта);
		ПоказатьОповещениеПользователя(НСтр("ru='Суммы пересчитаны';uk='Суми перераховані'"),, Текст, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");

КонецПроцедуры

&НаСервере
Процедура ПолучитьОплатуПоставщикамИзХранилища(АдресПлатежейВХранилище)

	ТаблицаПлатежей = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		НоваяСтрока = Объект.ОплатаПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Поставщик = СтрокаТаблицы.Партнер;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаИзрасходовано = 0;
	Объект.СуммаОтклонено = 0;
	
	Для каждого Расход Из Объект.ПрочиеРасходы Цикл
		Если Расход.Отменено Тогда
			Объект.СуммаОтклонено = Объект.СуммаОтклонено + Расход.Сумма;
		Иначе
			Объект.СуммаИзрасходовано = Объект.СуммаИзрасходовано + Расход.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаИзрасходовано = Объект.СуммаИзрасходовано + Объект.ОплатаПоставщикам.Итог("Сумма");
	
	Если Получено <= Объект.СуммаИзрасходовано Тогда
		Перерасход = Получено - Объект.СуммаИзрасходовано;
		Остаток = 0;
	Иначе
		Перерасход = 0;
		Остаток = Получено - Объект.СуммаИзрасходовано;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммДокументаВВалютуСервер()
	
	СтруктураКурсовТекущейВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущаяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата);
	
	МассивТабличныхЧастей = Новый Массив;
	МассивТабличныхЧастей.Добавить(Объект.ПрочиеРасходы);
	МассивТабличныхЧастей.Добавить(Объект.ОплатаПоставщикам);
	
	Для Каждого ТабличнаяЧасть из МассивТабличныхЧастей Цикл
	
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Сумма,
				ТекущаяВалюта,
				Объект.Валюта,
				СтруктураКурсовТекущейВалюты.Курс,
				СтруктураКурсовНовойВалюты.Курс,
				СтруктураКурсовТекущейВалюты.Кратность,
				СтруктураКурсовНовойВалюты.Кратность);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер)
	
	Возврат ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Форма)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "ПрочиеРасходы", ТипыСтатей);

	//
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("ПрочиеРасходы"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОплатаПоставщикамВалютаВзаиморасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Организации.УправленческаяОрганизация;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Ценообразование.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма,
														"ПрочиеРасходыСтавкаНДС",
														"ПрочиеРасходыСуммаНДС",
														"ПрочиеРасходыСуммаСНДС");
	
	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "ПрочиеРасходыСуммаСНДС");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыКонтрагент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтавкиНДС.НеНДС;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСтавкаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаНДСПропорционально.Имя);	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыКонтрагент.Имя);	

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ЭтоСуточные");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.ПрочиеРасходы,
		Элементы.ПрочиеРасходыОтклонено.Имя,
		Элементы.ПрочиеРасходыПричинаОтклонения.Имя);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыПричинаОтклонения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ПричинаОтмены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСтатьяРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаАктивовПассивов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетРеглУчетаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетРеглУчетаАктивовПассивов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСтавкаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаСНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыНалоговоеНазначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаНДСПропорционально.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	НДСОбщегоНазначенияСервер.УстановитьУсловноеОформлениеНалоговыхНазначений(ЭтаФорма, "ПрочиеРасходыНалоговоеНазначение", "Объект.ПрочиеРасходы.НалоговоеНазначение");
	НДСОбщегоНазначенияСервер.УстановитьУсловноеОформлениеСуммаНДСПропорционально(ЭтаФорма, "ПрочиеРасходыСуммаНДСПропорционально", "Объект.ПрочиеРасходы.НалоговоеНазначение");
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если ИспользоватьСтатусыАвансовыхОтчетов Тогда
		
		СтатусУтвержден = (Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден);
		
		ЭлементыВСтатусеУтвержден = Новый Массив;
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаРасходы");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаНДС");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаАналитика");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаСчетРеглУчета");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаОтклонение");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыЗаполнитьПодразделение");
		
		Для каждого Элемент Из ЭлементыВСтатусеУтвержден Цикл
			Элементы[Элемент].Видимость = СтатусУтвержден;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтоги()
	
	Получено = СуммаПолучено();
	
	Если Получено <= Объект.СуммаИзрасходовано Тогда
		Перерасход = Объект.СуммаИзрасходовано - Получено;
		Остаток = 0;
	Иначе
		Перерасход = 0;
		Остаток = Получено - Объект.СуммаИзрасходовано;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СуммаПолучено()
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден Тогда
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДенежныеСредства.СуммаНачальныйОстаток КАК Получено
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(,,
		|		Регистратор,,
		|		Организация = &Организация
		|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
		|		И Валюта = &Валюта
		|	) КАК ДенежныеСредства
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.АвансовыйОтчет КАК АвансовыйОтчет
		|	ПО
		|		АвансовыйОтчет.Ссылка = ДенежныеСредства.Регистратор
		|		И АвансовыйОтчет.Ссылка = &Ссылка
		|";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДенежныеСредства.СуммаОстаток КАК Получено
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ДатаДокумента,
		|		Организация = &Организация
		|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
		|		И Валюта = &Валюта
		|	) КАК ДенежныеСредства
		|";
		
		Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", Объект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Получено;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте                    
Процедура АвтоТест_ЗаполнитьПолученныеАвансыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПолученныеАвансы();
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='У подотчетного лица отсутствуют выданные авансы, за которые он не отчитался перед организацией %1 в валюте %2';uk='У підзвітної особи відсутні видані аванси, за які він не відзвітував перед організацією %1 у валюті %2'"),
			Объект.Организация,
			Объект.Валюта);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолученныеАвансы()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПолученныеАвансы();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыПодбора = Новый Структура("
		|Организация, 
		|Валюта,
		|СуммаДокумента,
		|ДатаДокумента,
		|ХозяйственнаяОперация
		|",
		Объект.Организация, 
		Объект.Валюта,
		Остаток,
		Объект.Дата,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.АвансовыйОтчет"));
		
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора,
		ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСписокСтатусов()
	
	Если Не ПравоУтверждения Тогда
		СписокВыбора = Элементы.Статус.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Перечисления.СтатусыАвансовогоОтчета.Подготовлен);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасходов(Строка)
	
	ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов")
	
КонецПроцедуры

Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.ПрочиеРасходыСтатьяРасходов.Заголовок = НСтр("ru='Статья расходов';uk='Стаття витрат'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
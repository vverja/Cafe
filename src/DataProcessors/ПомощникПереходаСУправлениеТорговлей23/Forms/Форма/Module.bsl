////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	ЭтоУправлениеТорговлей = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЭтоУправлениеТорговлей Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Помощник работает только в Управлении торговлей';uk='Помічник працює лише в Управлінні торгівлею'"));
	    Отказ = Истина;
	    Возврат;
	КонецЕсли;
	
	//Предупреждение("В тестовой версии 3.1.1.116 функциональность не реализована!");
	//Отказ = Истина;
	//Возврат;
	СтатусВыполненнойЗагрузки = Ложь;
	// Устанавливаем текущую таблицу переходов
	ТаблицаПереходовПоСценарию();
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр             = "Файл выгрузки (*.xml)|*.xml";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите путь к файлу выгрузки данных из УТ для Украины 2.3';uk='Виберіть шлях до файлу вивантаження даних з УТ для України 2.3'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.ИмяФайлаОбмена = ДиалогОткрытияФайла.ПолноеИмяФайла;
		КонецЕсли;
	Иначе
		Предупреждение(НСтр("ru='Для выбора каталога необходимо установить расширение для работы с файлами в Веб-клиенте.';uk='Для вибору каталогу необхідно встановити розширення для роботи з файлами у Веб-клієнтові.'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжидания Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияКомандаДалее", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияКомандаДалее()
	
	КомандаДалее(Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Раздел инициализации переходов помощника

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаПриветствие", "СтраницаНавигацииНачало", "СтраницаДекорацииНачало", "СтраницаПриветствие_ПриОткрытии", "СтраницаПриветствие_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаОжидания", "СтраницаНавигацииОжидание", "СтраницаДекорацииОжидание", "СтраницаОжидания_ПриОткрытии", "СтраницаОжидания_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаЗавершение", "СтраницаНавигацииОкончание", "СтраницаДекорацииОкончание", "СтраницаЗавершение_ПриОткрытии");
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) – Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) – Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) – Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяСтраницыДекорации (необязательный) – Строка. Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) – Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) – Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) – Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = ""
									)
	//
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
			КонецПопытки;
			
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Попытка
			Выполнить(ИмяПроцедуры);
		Исключение
		КонецПопытки;
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Раздел обработчиков событий перехода

// Обработчик выполняется при открытии страницы помощника "СтраницаПриветствие"
//
// Параметры:
//
//Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад
&НаКлиенте
Процедура Подключаемый_СтраницаПриветствие_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаПриветствие"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Процедура Подключаемый_СтраницаПриветствие_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	
	// Проверка файла данных
	ТекстСообщения = "";
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ИмяФайлаОбмена)) Тогда
		ТекстСообщения = НСтр("ru='Не указан путь к файлу с данными';uk='Не зазначений шлях до файлу з даними'");
	Иначе
		ФайлОбмена = Новый Файл(Объект.ИмяФайлаОбмена);
		Если НЕ ФайлОбмена.Существует() Тогда
			ТекстСообщения = НСтр("ru='По указанному пути файл с данными не найден';uk='За вказаним шляхом файл з даними не знайдено'");
		Иначе
			Попытка
				Если НЕ ПоместитьФайл(АдресВременногоХранилища, Объект.ИмяФайлаОбмена, , Ложь, УникальныйИдентификатор) Тогда
					Отказ = Истина;
				КонецЕсли;
			Исключение
				ТекстСообщения = НСтр("ru='Ошибка передачи файла на сервер';uk='Помилка передачі файлу на сервер'");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		СообщитьПользователюОбОшибке(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "СтраницаЗавершение"
//
// Параметры:
//
//  Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад.
//
&НаКлиенте
Процедура Подключаемый_СтраницаЗавершение_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.НадписьСтатусЗагрузки.Заголовок = ?(СтатусВыполненнойЗагрузки,
												"Загрузка данных успешно завершена!",
												"Загрузка данных выполненна с ошибками!");
	Элементы.НадписьВариантовПродолжения.Заголовок = ?(
												СтатусВыполненнойЗагрузки,
												"Нажмите кнопку ""Готово"" для выхода из помощника.",
												"Для того чтобы попробовать загрузить еще раз, нажмите ""Назад"", "
												"для выхода из помошника, нажимите ""Готово""");
	ЗаполнитьИтоговуюИнформацию();
	
КонецПроцедуры

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаОжидания"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Процедура Подключаемый_СтраницаОжидания_ПриПереходеДалее(Отказ)
	
	ЗагруженыНастройки = Ложь;
	Состояние(НСтр("ru='Загрузка данных...';uk='Завантаження даних...'"),, НСтр("ru='Выполняется загрузка данных из конфигурации ""Управление торговлей для Украины"" ред. 2.3';uk='Виконується завантаження даних з конфігурації ""Управління торгівлею для України"" ред. 2.3'"));
	СтатусВыполненнойЗагрузки = ЗагрузитьНаСервере();
	
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "СтраницаОжидания"
//
// Параметры:
//
//  Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад.
//
// Логика данного обработчика пропускает отображение
// страницы помощника "СтраницаОжидания", если выполняется переход назад.
//
&НаКлиенте
Процедура Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЭтоПереходДалее Тогда
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура СообщитьПользователюОбОшибке(ТекстСообщения)
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИмяФайлаОбмена", "ИмяФайлаОбмена");
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере()
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	// получаем файл правил для зачитки
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	УникальныйИдентификатор_          = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПротоколаОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор_ + ".txt";
	
	Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Обработка.ИмяФайлаОбмена                        = ИмяВременногоФайла;
	Обработка.РежимОбмена                           = "Загрузка";
	Обработка.ЗапоминатьЗагруженныеОбъекты          = Ложь;
	Обработка.ВыводВПротоколСообщенийОбОшибках      = Истина;
	Обработка.ВыводВПротоколИнформационныхСообщений = Ложь;
	Обработка.ИмяФайлаПротоколаОбмена               = ИмяВременногоФайлаПротоколаОбмена;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена               			= Истина;
	Обработка.ОбъектыПоСсылкеЗагружатьБезПометкиУдаления 			= Истина;
	Обработка.ОптимизированнаяЗаписьОбъектов             			= Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты               			= Истина;
	Обработка.НеВыводитьНикакихИнформационныхСообщенийПользователю	= Истина;
	Обработка.ВыводВОкноСообщенийИнформационныхСообщений 			= Ложь;

	ДатаНачалаЗагрузки = ТекущаяДата();

	УстановитьПривилегированныйРежим(Истина);
	Обработка.ВыполнитьЗагрузку();
	ЗагрузкаВыполнена = НЕ Обработка.ФлагОшибки;
	УстановитьПривилегированныйРежим(Ложь);
	
	ДатаОкончанияЗагрузки = ТекущаяДата();
	
	ПротоколОбмена = Новый ТекстовыйДокумент;
	ПротоколОбмена.Прочитать(ИмяВременногоФайлаПротоколаОбмена);
	
	ЗагруженыНастройки = Ложь;
	Если ЗагрузкаВыполнена
		И ТипЗнч(Обработка.Параметры) = Тип("Структура")
		И Обработка.Параметры.Свойство("ЗагруженыНастройки") Тогда
			ЗагруженыНастройки = Истина;
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайлаПротоколаОбмена);  // Удаляем временный файл правил
	
	Возврат ЗагрузкаВыполнена;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ИмяМакета = ?(ЗагруженыНастройки, "МакетИтоговойИнформацииНастройки", "МакетИтоговойИнформации");
	ИтоговаяИнформация = Обработки.ПомощникПереходаСУправлениеТорговлей23.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаНачалаЗагрузки#", ДатаНачалаЗагрузки);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаОкончанияЗагрузки#", ДатаОкончанияЗагрузки);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоличествоЗагруженныхОбъектов#", КоличествоЗагруженныхОбъектов);
	
	Если СтатусВыполненнойЗагрузки тогда
		
		Если ЗагруженыНастройки Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Константы.ВалютаРегламентированногоУчета,
			               |	Константы.ВалютаУправленческогоУчета,
			               |	Константы.ДополнительнаяКолонкаПечатныхФормДокументов,
			               |	Константы.ЕдиницаИзмеренияВеса,
			               |	Константы.ЕдиницаИзмеренияОбъема,
			               |	Константы.ЗаголовокСистемы,
			               |	Константы.ИспользоватьАвтоматическиеСкидкиВПродажах,
			               |	Константы.ИспользоватьДополнительныеРеквизитыИСведения,
			               |	Константы.ИспользоватьЗаказыКлиентов,
			               |	Константы.ИспользоватьЗаказыПоставщикам,
			               |	Константы.ИспользоватьКартыЛояльности,
			               |	Константы.ИспользоватьКачествоТоваров,
			               |	Константы.ИспользоватьКомиссиюПриЗакупках,
			               |	Константы.ИспользоватьНесколькоВидовНоменклатуры,
			               |	Константы.ИспользоватьКомиссиюПриПродажах,
			               |	Константы.ИспользоватьНоменклатуруПоставщиков,
			               |	Константы.ИспользоватьОплатуПлатежнымиКартами,
			               |	Константы.ИспользоватьПодключаемоеОборудование,
			               |	Константы.ИспользоватьРозничныеПродажи,
			               |	Константы.ИспользоватьСерииНоменклатуры,
			               |	Константы.ИспользоватьУпаковкиНоменклатуры,
			               |	Константы.ИспользоватьХарактеристикиНоменклатуры,
			               |	Константы.ИспользоватьЦеновыеГруппы,
			               |	Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы,
			               |	Константы.ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки,
			               |	Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи,
			               |	Константы.ОграничиватьДоступНаУровнеЗаписей,
			               |	Константы.ИспользоватьРаздельныйУчетПоНалогообложению,
			               |	Константы.ИспользоватьПартнеровИКонтрагентов,
			               |	Константы.ИспользоватьПодразделения,
			               |	Константы.ИспользоватьМногооборотнуюТару,
			               |	Константы.ИспользоватьНаборы,
			               |	Константы.ИспользованиеСоглашенийСКлиентами,
			               |	Константы.ИспользоватьОрдерныеСклады,
			               |	Константы.ИспользоватьДоговорыСКлиентами,
			               |	ВЫБОР
			               |		КОГДА Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
			               |				И Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента
			               |			ТОГДА ""Заказ со склада и под заказ""
			               |		ИНАЧЕ ""Заказ как счет""
			               |	КОНЕЦ КАК ИспользованиеЗаказов,
			               |	Константы.ИспользоватьПричиныОтменыЗаказовКлиентов,
			               |	Константы.ИспользоватьПричиныОтменыЗаказовПоставщикам,
			               |	Константы.ИспользоватьДоговорыСПоставщиками,
			               |	Константы.НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты,
			               |	Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОплаты,
			               |	Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки,
			               |	Константы.НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления,
			               |	Константы.ИспользоватьДоверенностиНаПолучениеТМЦ
			               |ИЗ
			               |	Константы КАК Константы";
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Колонка Из Результат.Колонки Цикл
				Значение = Результат[0][Колонка.Имя];
				Значение = ?(ТипЗнч(Значение) = Тип("Булево"), Формат(Значение, "БЛ=Выключено; БИ=Включено"), Строка(Значение));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#" + Колонка.Имя + "#", Значение);
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		ИтоговаяИнформация = ИтоговаяИнформация + Символы.ПС+ "Протокол ошибок: ";
		ИтоговаяИнформация = ИтоговаяИнформация + Символы.ПС+ ПротоколОбмена.ПолучитьТекст();
	КонецЕсли;
	
КонецПроцедуры

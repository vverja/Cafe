#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполненНаОснованииДокумента = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			Если ДанныеЗаполнения.Свойство("ДокументОснование") 
				И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				   ИЛИ ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")) Тогда
				ЗаполненНаОснованииДокумента = Истина;
				ЗаполнитьНаОсновании(ДанныеЗаполнения.ДокументОснование);
			Иначе
				ЗаполнитьПоОтбору(ДанныеЗаполнения);
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")Тогда
			
			ЗаполненНаОснованииДокумента = Истина;
			ЗаполнитьНаОсновании(ДанныеЗаполнения);
			ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаполненНаОснованииДокумента Тогда
		Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента Тогда 
			ИнициализироватьУсловияПродаж();
		Иначе
			ИнициализироватьУсловияЗакупок();
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	АвторизованВнешнийПользователь = ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
	
	Если Статус = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДокументОснование");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Действие");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковокПоДокументу");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоПоДокументу");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента
		И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.СуффиксДопРеквизита = "ПоДокументу";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	//Проверка того, что поступления по заказу
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ЗаказПоставщику");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
	
	ПроверкиПоЗаказуТребуются = Ложь;
	Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПоступлениеТоваровУслуг Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РеализацииДокумента.ДокументОснование
		|ПОМЕСТИТЬ ДокументыОснования
		|ИЗ
		|	&ДокументыОснования КАК РеализацииДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыОснования.ДокументОснование КАК Основание
		|ИЗ
		|	ДокументыОснования КАК ДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ПО ДокументыОснования.ДокументОснование = ПоступлениеТоваровУслуг.Ссылка
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ПоступлениеПоЗаказам";
		
		Запрос.УстановитьПараметр("ДокументыОснования", Товары.Выгрузить( ,"ДокументОснование"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ПроверкиПоЗаказуТребуются = Истина;
			МассивОснованийПоЗаказу = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Основание");
		КонецЕсли;
		
	КонецЕсли;
	
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		ТекущаяСтрока = Товары[ТекИндекс];
		
		Если ПроверкиПоЗаказуТребуются Тогда 
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ЗаказПоставщику) И ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование)
				И МассивОснованийПоЗаказу.Найти(ТекущаяСтрока.ДокументОснование) <> Неопределено Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Заказ поставщика"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнено поле ""Заказ постачальника"" в рядку %НомерСтроки% списку ""Товари""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				             ТекстОшибки,
				             ЭтотОбъект,
				             ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ЗаказПоставщику"),
				             ,
				             Отказ);
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Код строки"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнене поле ""Код рядка"" в рядку %НомерСтроки% списку ""Товари""'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				             ТекстОшибки,
				             ЭтотОбъект,
				             ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "ЗаказПоставщику"),
				             ,
				             Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.ЗаполненоПоОснованию И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КоличествоУпаковокПоДокументу) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Количество по документу"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнено поле ""Кількість за документом"" в рядку %НомерСтроки% списку ""Товари""'");
			ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			                ТекстОшибки,
			                ЭтотОбъект,
			                ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "КоличествоУпаковокПоДокументу"),
			                ,
			                Отказ);
			
		КонецЕсли;
		
		Если Статус <> Перечисления.СтатусыАктаОРасхождениях.НеСогласовано 
			И (ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокПоДокументу) <> 0 
			И Не ЗначениеЗаполнено(ТекущаяСтрока.Действие) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Как отработать расхождение"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнено поле ""Як відпрацювати розбіжність"" в рядку %НомерСтроки% списку ""Товари""'");
			ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			                  ТекстОшибки,
			                  ЭтотОбъект,
			                  ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "Действие"),
			                  ,
			                  Отказ);
			
		КонецЕсли;
		
		Если НЕ ТекущаяСтрока.ЗаполненоПоОснованию И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КоличествоУпаковок) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Количество факт"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнене поле ""Кількість факт"" в рядку %НомерСтроки% списку ""Товари""'");
			ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			                   ТекстОшибки,
			                   ЭтотОбъект,
			                   ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "КоличествоУпаковок"),
			                   ,
			                   Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Подразделение");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	
	Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента Тогда
		Если Не ЗначениеЗаполнено(Соглашение) Или Не ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Договор");
		КонецЕсли;
		МассивНепроверяемыхРеквизитов.Добавить("Товары.АналитикаРасходов");
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
		
		ТипыНоменклатуры = Новый Массив;
		ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		ТекстОшибки = НСтр("ru='Не указан получатель работ (услуг) в строке %1 списка Товары';uk='Не зазначений отримувач робіт (послуг) в рядку %1 списку Товари'");
		ЗапасыСервер.ПроверитьЗаполнениеПодразделенияВТабличнойЧасти(ЭтотОбъект, Товары, ТипыНоменклатуры, ТекстОшибки, Отказ);
		
		РеквизитыПроверкиАналитик = Новый Массив;
		РеквизитыПроверкиАналитик.Добавить(Новый Структура("Товары"));
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект, РеквизитыПроверкиАналитик, МассивНепроверяемыхРеквизитов, Отказ);
			
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
		Если ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД")
		  И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда

			ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
			ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ, "Товары");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПоступлениеТоваровУслуг Тогда
		ОписаниеМетаданных = РасхожденияСервер.ОписаниеМетаданныхПроверкиВозможностиВнесенияИзлишкаВНакладную();
		ОписаниеМетаданных.ИмяПоляНакладнойЗаказ = "ЗаказПоставщику";
		ОписаниеМетаданных.ИмяПоляАктаЗаказ = "ЗаказПоставщику";
		ОписаниеМетаданных.ИмяПоляАктаНакладная = "ДокументОснование";
		
		РасхожденияСервер.ПроверкаВозможностиВнесенияИзлишкаВНакладную(ЭтотОбъект, "ЗаказыПоставщикам", ОписаниеМетаданных, Отказ);
	ИначеЕсли ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента Тогда
		ОписаниеМетаданных = РасхожденияСервер.ОписаниеМетаданныхПроверкиВозможностиВнесенияИзлишкаВНакладную();
		ОписаниеМетаданных.ИмяПоляНакладнойЗаказ = "ЗаявкаНаВозвратТоваровОтКлиента";
		ОписаниеМетаданных.ИмяПоляАктаЗаказ = "ЗаказПоставщику";
		ОписаниеМетаданных.ИмяПоляАктаНакладная = "ДокументОснование";
		ОписаниеМетаданных.ЗаказВШапке = Истина;
		
		РасхожденияСервер.ПроверкаВозможностиВнесенияИзлишкаВНакладную(ЭтотОбъект, "ЗаявкиНаВозвратТоваровОтКлиентов", ОписаниеМетаданных, Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента Тогда
		ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект,Отказ);
	Иначе
		ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.АктОРасхожденияхПослеПриемки.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ТоварыКОформлениюПоступления.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);	
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоОтбору(СтруктураОтбора)
	
	Если СтруктураОтбора.Свойство("Организация") Тогда
		Организация = СтруктураОтбора.Организация;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Партнер") Тогда
		Партнер = СтруктураОтбора.Партнер;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Контрагент") Тогда
		Контрагент = СтруктураОтбора.Контрагент;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Валюта") Тогда
		Валюта = СтруктураОтбора.Валюта;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ТипОснованияАктаОРасхождении") Тогда
		ТипОснованияАктаОРасхождении = СтруктураОтбора.ТипОснованияАктаОРасхождении;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОсновании(Основание)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПоступлениеТоваровУслуг;
		Запрос.Текст = ТекстЗапросаПоОснованиюПоступлению();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента;
		Запрос.Текст = ТекстЗапросаПоОснованиюВозврату();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Основание", Основание);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыОснования.ДокументОснование,
		,
		РеквизитыОснования.ЕстьОшибкиПроведен);
		
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования);
	
	Товары.Загрузить(РезультатЗапроса[1].Выгрузить());
	Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
КонецПроцедуры

Функция ТекстЗапросаПоОснованиюПоступлению()

	Возврат "
	|ВЫБРАТЬ
	|	НЕ ПоступлениеТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументОснование,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.Менеджер,
	|	ПоступлениеТоваровУслуг.Партнер,
	|	ПоступлениеТоваровУслуг.Валюта,
	|	ПоступлениеТоваровУслуг.ХозяйственнаяОперация,
	|	ПоступлениеТоваровУслуг.ЦенаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Договор,
	|	ПоступлениеТоваровУслуг.Соглашение
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.НоменклатураПоставщика,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ПоступлениеТоваровУслугТовары.Серия,
	|	ПоступлениеТоваровУслугТовары.Назначение,
	|	ПоступлениеТоваровУслугТовары.Упаковка,
	|	ПоступлениеТоваровУслугТовары.КоличествоУпаковок,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.ВидЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.КоличествоУпаковок = 0
	|			ТОГДА ПоступлениеТоваровУслугТовары.Цена
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ПоступлениеТоваровУслугТовары.Сумма / ПоступлениеТоваровУслугТовары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.Склад,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаСНДС,
	|	ПоступлениеТоваровУслугТовары.СтатусУказанияСерий,
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументОснование,
	|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ПоступлениеТоваровУслугТовары.КодСтроки КАК КодСтроки,
	|	ИСТИНА КАК ЗаполненоПоОснованию,
	|	ПоступлениеТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковокПоДокументу,
	|	ПоступлениеТоваровУслугТовары.Количество КАК КоличествоПоДокументу,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК СуммаПоДокументу,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДСПоДокументу,
	|	ПоступлениеТоваровУслугТовары.СуммаСНДС КАК СуммаСНДСПоДокументу, 
	|	ПоступлениеТоваровУслугТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ПоступлениеТоваровУслугТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	ПоступлениеТоваровУслугТовары.Сертификат КАК Сертификат,
	|	ПоступлениеТоваровУслугТовары.Сделка КАК Сделка,
	|	ПоступлениеТоваровУслугТовары.Подразделение КАК Подразделение,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СписатьНаРасходы КАК СписатьНаРасходы
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслугСерии.Серия          КАК Серия,
	|	ПоступлениеТоваровУслугСерии.Количество     КАК Количество,
	|	ПоступлениеТоваровУслугСерии.Количество     КАК КоличествоПоДокументу,
	|	ПоступлениеТоваровУслугСерии.Номенклатура   КАК Номенклатура,
	|	ПоступлениеТоваровУслугСерии.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровУслугСерии.Назначение     КАК Назначение,
	|	ПоступлениеТоваровУслугСерии.Склад          КАК Склад,
	|	ПоступлениеТоваровУслугСерии.Ссылка         КАК ДокументОснование,
	|	Истина                                      КАК ЗаполненоПоОснованию
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Серии КАК ПоступлениеТоваровУслугСерии
	|ГДЕ
	|	ПоступлениеТоваровУслугСерии.Ссылка = &Основание
	|";

КонецФункции

Функция ТекстЗапросаПоОснованиюВозврату()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕ ВозвратТоваровОтКлиента.Проведен КАК ЕстьОшибкиПроведен,
	|	ВозвратТоваровОтКлиента.Ссылка КАК ДокументОснование,
	|	ВозвратТоваровОтКлиента.Организация,
	|	ВозвратТоваровОтКлиента.Контрагент,
	|	ВозвратТоваровОтКлиента.Менеджер,
	|	ВозвратТоваровОтКлиента.Партнер,
	|	ВозвратТоваровОтКлиента.Валюта,
	|	ВозвратТоваровОтКлиента.ХозяйственнаяОперация,
	|	ВозвратТоваровОтКлиента.ЦенаВключаетНДС,
	|	ВозвратТоваровОтКлиента.Договор,
	|	ВозвратТоваровОтКлиента.КонтактноеЛицо,
	|	ВозвратТоваровОтКлиента.Соглашение,
	|	ЛОЖЬ КАК СоглашениеДоступноВнешнимПользователям
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтКлиентаТовары.Порча
	|			ТОГДА ВозвратТоваровОтКлиентаТовары.НоменклатураОприходование
	|		ИНАЧЕ ВозвратТоваровОтКлиентаТовары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтКлиентаТовары.Порча
	|			ТОГДА ВозвратТоваровОтКлиентаТовары.ХарактеристикаОприходование
	|		ИНАЧЕ ВозвратТоваровОтКлиентаТовары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВозвратТоваровОтКлиентаТовары.Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ВозвратТоваровОтКлиентаТовары.Упаковка КАК Упаковка,
	|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВозвратТоваровОтКлиентаТовары.Количество КАК Количество,
	|	ВозвратТоваровОтКлиентаТовары.Цена КАК Цена,
	|	ВозвратТоваровОтКлиентаТовары.Сумма КАК Сумма,
	|	ВозвратТоваровОтКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровОтКлиентаТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровОтКлиентаТовары.СуммаСНДС КАК СуммаСНДС,
	|	ВозвратТоваровОтКлиентаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВозвратТоваровОтКлиентаТовары.Ссылка КАК ДокументОснование,
	|	ИСТИНА КАК ЗаполненоПоОснованию,
	|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковокПоДокументу,
	|	ВозвратТоваровОтКлиентаТовары.Количество КАК КоличествоПоДокументу,
	|	ВозвратТоваровОтКлиентаТовары.Сумма КАК СуммаПоДокументу,
	|	ВозвратТоваровОтКлиентаТовары.СуммаНДС КАК СуммаНДСПоДокументу,
	|	ВозвратТоваровОтКлиентаТовары.СуммаСНДС КАК СуммаСНДСПоДокументу,
	|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК ДокументРеализации,
	|	ВозвратТоваровОтКлиентаТовары.КодСтроки КАК КодСтроки,
	|	ВозвратТоваровОтКлиента.Склад КАК Склад,
	|	ВозвратТоваровОтКлиента.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ПО ВозвратТоваровОтКлиентаТовары.Ссылка = ВозвратТоваровОтКлиента.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиентаТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	ТаблицаСерии.Количество КАК КоличествоПоДокументу,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Порча
	|			ТОГДА ТаблицаСерии.НоменклатураОприходование
	|		ИНАЧЕ ТаблицаСерии.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Порча
	|			ТОГДА ТаблицаСерии.ХарактеристикаОприходование
	|		ИНАЧЕ ТаблицаСерии.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ТаблицаСерии.Ссылка.Склад КАК Склад,
	|	ТаблицаСерии.Ссылка КАК ДокументОснование,
	|	ИСТИНА КАК ЗаполненоПоОснованию,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) КАК СтатусУказанияСерий
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|			И ТаблицаСерии.НоменклатураОприходование = ТаблицаТовары.НоменклатураОприходование
	|			И ТаблицаСерии.ХарактеристикаОприходование = ТаблицаТовары.ХарактеристикаОприходование
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Основание
	|	И ТаблицаТовары.Ссылка = &Основание
	|	И ТаблицаСерии.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.НоменклатураОприходование,
	|	ТаблицаСерии.ХарактеристикаОприходование,
	|	ТаблицаТовары.Порча,
	|	ТаблицаСерии.Количество,
	|	ТаблицаСерии.Ссылка.Склад,
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Количество
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (4, 6, 8, 10)";

КонецФункции 

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		Менеджер    = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Валюта      = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Статус      = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
	
КонецПроцедуры

#Область УсловияЗакупок

Процедура ИнициализироватьУсловияЗакупок()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		ЗаполнитьУсловияЗакупокПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия закупок по умолчанию в акте
//
Процедура ЗаполнитьУсловияЗакупокПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено (Партнер) Тогда
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер);
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			
			Если Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
				
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
				
			Иначе
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
			КонецЕсли;
				
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в акте
//
Процедура ЗаполнитьУсловияЗакупокПоCоглашению() Экспорт
	
	УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение);
	ЗаполнитьУсловияЗакупок(УсловияЗакупок);
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
КонецПроцедуры

// Заполняет условия закупок в акте
//
// Параметры:
//	УсловияЗакупок - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияЗакупок.Валюта;
	
	ЦенаВключаетНДС      = УсловияЗакупок.ЦенаВключаетНДС;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация<>Организация Тогда
		Организация = УсловияЗакупок.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) И УсловияЗакупок.Контрагент <> Контрагент Тогда
		Контрагент = УсловияЗакупок.Контрагент;
	КонецЕсли;
	
	ХозяйственнаяОперация = УсловияЗакупок.ХозяйственнаяОперация;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	ХозяйственнаяОперацияДоговора = ?(
				ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет")
				Или ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"),
				ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"),
				ХозяйственнаяОперация);
			
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора, Валюта);
 				
	
КонецПроцедуры 

#КонецОбласти

#Область УсловияПродаж

Процедура ИнициализироватьУсловияПродаж()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в документе
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено(Партнер) ИЛИ Не ИспользоватьСоглашенияСКлиентами Тогда
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			Новый Структура(
				"ВыбранноеСоглашение,
				|ПустаяСсылкаДокумента",
				Соглашение,
				Документы.АктОРасхожденияхПослеПриемки.ПустаяСсылка()));
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если НЕ ИспользоватьСоглашенияСКлиентами ИЛИ 
				(Соглашение <> УсловияПродажПоУмолчанию.Соглашение И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
			
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
				
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	
КонецПроцедуры

// Заполняет условия продаж в документе 
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж, СегментНоменклатуры = Неопределено) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.Валюта;
	
	ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	ЦенаВключаетНДС       = УсловияПродаж.ЦенаВключаетНДС;
	СегментНоменклатуры   = УсловияПродаж.СегментНоменклатуры;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация Тогда
		Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) И УсловияПродаж.Контрагент<>Контрагент Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) 
			И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	ХозяйственнаяОперация = ПродажиСервер.ПолучитьХозяйственнуюОперациюВозвратаПоРеализации(УсловияПродаж.ХозяйственнаяОперация);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ХозяйственнаяОперацияДоговора = Неопределено;
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
			ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
			ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		КонецЕсли;
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора, Валюта);
		
	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в документе
//
Процедура ЗаполнитьУсловияПродажПоCоглашению(СегментНоменклатуры = Неопределено) Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж, СегментНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у документа
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыАктаОРасхождениях[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ТоварыНаСкладах);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

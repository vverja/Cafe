#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ТекстЗапросаСторноЗаписейЗаказа() Экспорт

	Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура     КАК Номенклатура,
		|	Таблица.Характеристика   КАК Характеристика,
		|	Таблица.Склад            КАК Склад,
		|	Таблица.Назначение       КАК Назначение,
		|
		|	- Таблица.Потребность    КАК Потребность,
		|	- Таблица.КЗаказу        КАК КЗаказу
		|
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов КАК Таблица
		|
		|ГДЕ
		|	Таблица.Активность
		|	И Таблица.Регистратор В(&Ссылка)
		|	И (Таблица.Потребность <> 0 ИЛИ Таблица.КЗаказу <> 0)
		|	И &Отбор
		|;
		|
		|//////////////////////////////////////////////////
		|";

	Возврат Текст;

КонецФункции

#Область ПрограммныйИнтерфейс

Функция ТекстЗапросаОстатков(ИспользоватьКорректировку, Разделы = Неопределено) Экспорт

	Если Не ИспользоватьКорректировку Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.Номенклатура           КАК Номенклатура,
			|	Т.Характеристика         КАК Характеристика,
			|	Т.Склад                  КАК Склад,
			|	Т.Назначение             КАК Назначение,
			|
			|	Т.НаличиеПодЗаказОстаток КАК Количество,
			|	Т.КЗаказуОстаток         КАК КоличествоКЗаказу
			|
			|ПОМЕСТИТЬ ВтОбеспечениеЗаказов
			|ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|		(Номенклатура, Характеристика, Склад, Назначение) В(
			|			ВЫБРАТЬ
			|				Ключи.Номенклатура   КАК Номенклатура,
			|				Ключи.Характеристика КАК Характеристика,
			|				Ключи.Склад          КАК Склад,
			|				Ключи.Назначение     КАК Назначение
			|			ИЗ
			|				ВтТоварыОбособленные КАК Ключи
			|		)) КАК Т
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение
			|;
			|
			|/////////////////////////////////////////////////////////////
			|";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	НаборДанных.Номенклатура           КАК Номенклатура,
			|	НаборДанных.Характеристика         КАК Характеристика,
			|	НаборДанных.Склад                  КАК Склад,
			|	НаборДанных.Назначение             КАК Назначение,
			|
			|	СУММА(НаборДанных.Количество)         КАК Количество,
			|	СУММА(НаборДанных.КоличествоКЗаказу)  КАК КоличествоКЗаказу
			|
			|ПОМЕСТИТЬ ВтОбеспечениеЗаказов
			|ИЗ (
			|	ВЫБРАТЬ
			|		Т.Номенклатура           КАК Номенклатура,
			|		Т.Характеристика         КАК Характеристика,
			|		Т.Склад                  КАК Склад,
			|		Т.Назначение             КАК Назначение,
			|
			|		Т.НаличиеПодЗаказОстаток КАК Количество,
			|		Т.КЗаказуОстаток         КАК КоличествоКЗаказу
			|
			|	ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|		(Номенклатура, Характеристика, Склад, Назначение) В(
			|			ВЫБРАТЬ
			|				Ключи.Номенклатура   КАК Номенклатура,
			|				Ключи.Характеристика КАК Характеристика,
			|				Ключи.Склад          КАК Склад,
			|				Ключи.Назначение     КАК Назначение
			|			ИЗ
			|				ВтТоварыОбособленные КАК Ключи
			|		)) КАК Т
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.Номенклатура            КАК Номенклатура,
			|		Т.Характеристика          КАК Характеристика,
			|		Т.Склад                   КАК Склад,
			|		Т.Назначение              КАК Назначение,
			|
			|		- Т.КОтгрузке             КАК Количество,
			|		- Т.КОтгрузке             КАК КоличествоКЗаказу
			|
			|	ИЗ
			|		ВтТоварыКОтгрузкеКорректировка КАК Т
			|	ГДЕ
			|		Т.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|	) КАК НаборДанных
			|
			|СГРУППИРОВАТЬ ПО
			|	НаборДанных.Номенклатура, НаборДанных.Характеристика, НаборДанных.Склад, НаборДанных.Назначение
			|ИМЕЮЩИЕ
			|	СУММА(НаборДанных.Количество) <> 0
			|		ИЛИ СУММА(НаборДанных.КоличествоКЗаказу) <> 0
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение
			|;
			|
			|/////////////////////////////////////////////////////////////
			|";
	КонецЕсли;

	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаОстаткиСкладаОбособленные");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


Функция ПолноеИмяРегистра()
	Возврат "РегистрНакопления.ОбеспечениеЗаказов";
КонецФункции 

Функция ИсправитьДвиженияПоОбеспечениюЗаказов_ДанныеДляОбновления(Параметры) Экспорт
    
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ 
    |	    Товары.Ссылка
	|   ИЗ
	|	    Документ.ОприходованиеИзлишковТоваров.Товары КАК Товары
	|		    ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		    ПО Товары.Ссылка = ОбеспечениеЗаказов.Регистратор
	|   ГДЕ
	|	    ОбеспечениеЗаказов.Регистратор ЕСТЬ NULL 
	|	    И Товары.Количество > 0
	|	    И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	    И ВЫБОР
	|		    КОГДА Товары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|				И Товары.Ссылка.Дата >= Товары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|			ТОГДА ЛОЖЬ
	|		    ИНАЧЕ ИСТИНА
	|	    КОНЕЦ
    |
	|	ОБЪЕДИНИТЬ ВСЕ
    |
	|   ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	    Товары.Ссылка
	|   ИЗ
	|	    Документ.ОрдерНаОтражениеИзлишковТоваров.Товары КАК Товары
	|		    ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		    ПО Товары.Ссылка = ОбеспечениеЗаказов.Регистратор
	|   ГДЕ
	|	    ОбеспечениеЗаказов.Регистратор ЕСТЬ NULL 
	|	    И Товары.Количество > 0
	|	    И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
    |
	|	ОБЪЕДИНИТЬ ВСЕ
    |
	|   ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	    Товары.Ссылка
	|   ИЗ
	|	    Документ.СписаниеНедостачТоваров.Товары КАК Товары
	|		    ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		    ПО Товары.Ссылка = ОбеспечениеЗаказов.Регистратор
	|   ГДЕ
	|	    ОбеспечениеЗаказов.Регистратор ЕСТЬ NULL 
	|	    И Товары.Количество > 0
	|	    И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	    И ВЫБОР
	|		    КОГДА Товары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|				И Товары.Ссылка.Дата >= Товары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|			    ТОГДА ЛОЖЬ
	|		    ИНАЧЕ ИСТИНА
	|	    КОНЕЦ
    |
	|	ОБЪЕДИНИТЬ ВСЕ
    |
	|   ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	    Товары.Ссылка
	|   ИЗ
	|	    Документ.ОрдерНаОтражениеНедостачТоваров.Товары КАК Товары
	|		    ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		    ПО Товары.Ссылка = ОбеспечениеЗаказов.Регистратор
	|   ГДЕ
	|	    ОбеспечениеЗаказов.Регистратор ЕСТЬ NULL 
	|	    И Товары.Количество > 0
	|	    И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
    |
	|	ОБЪЕДИНИТЬ ВСЕ
    |
	|   ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	    Товары.Ссылка
	|   ИЗ
	|	    Документ.ПорчаТоваров.Товары КАК Товары
	|		    ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		    ПО Товары.Ссылка = ОбеспечениеЗаказов.Регистратор
	|   ГДЕ
	|	    ОбеспечениеЗаказов.Регистратор ЕСТЬ NULL 
	|	    И Товары.Количество > 0
	|	    И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	    И ВЫБОР
	|		    КОГДА Товары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|				И Товары.Ссылка.Дата >= Товары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|			ТОГДА ЛОЖЬ
	|		    ИНАЧЕ ИСТИНА
	|       КОНЕЦ
    |
	|	ОБЪЕДИНИТЬ ВСЕ
    |
	|   ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	    Товары.Ссылка
	|   ИЗ
	|	    Документ.ОрдерНаОтражениеПорчиТоваров.Товары КАК Товары
	|		    ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		    ПО Товары.Ссылка = ОбеспечениеЗаказов.Регистратор
	|   ГДЕ
	|	    ОбеспечениеЗаказов.Регистратор ЕСТЬ NULL 
	|	    И Товары.Количество > 0
	|	    И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
    |
	|	ОБЪЕДИНИТЬ ВСЕ
    |
	|   ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	    Товары.Ссылка
	|   ИЗ
	|	    Документ.ПересчетТоваров.Товары КАК Товары
	|		    ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		    ПО Товары.Ссылка = ОбеспечениеЗаказов.Регистратор
	|   ГДЕ
	|	    ОбеспечениеЗаказов.Регистратор ЕСТЬ NULL 
	|	    И Товары.КоличествоФакт - Товары.Количество <> 0
	|	    И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	    И Товары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Выполнено)	
	|	    И ВЫБОР
	|		    КОГДА Товары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|				И Товары.Ссылка.Дата >= Товары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|			ТОГДА ИСТИНА
	|		    ИНАЧЕ ЛОЖЬ
	|	    КОНЕЦ
    |
	|	ОБЪЕДИНИТЬ ВСЕ
    |
	|   ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	    Товары.Ссылка
	|   ИЗ
	|	    Документ.ПересортицаТоваров.Товары КАК Товары
	|		    ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		    ПО Товары.Ссылка = ОбеспечениеЗаказов.Регистратор
	|   ГДЕ
	|	    ОбеспечениеЗаказов.Регистратор ЕСТЬ NULL 
	|	    И Товары.Количество > 0
	|	    И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	        ИЛИ Товары.НазначениеОприходование <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	    И ВЫБОР
	|		    КОГДА Товары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|				И Товары.Ссылка.Дата >= Товары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|			ТОГДА ЛОЖЬ
	|		    ИНАЧЕ ИСТИНА
	|	    КОНЕЦ
	|
	|	) КАК Таб
	|
    |";
    
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
    ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
        Параметры, 
        Регистраторы, 
        ПолноеИмяРегистра()
    );
	
КонецФункции

// Обработчик обновления BAS УТ 3.2.1
// Формирует движения по рн ОбеспечениеЗаказов для документов 
// ОприходованиеИзлишковТоваров
// ОрдерНаОтражениеИзлишковТоваров
// СписаниеНедостачТоваров
// ОрдерНаОтражениеНедостачТоваров
// ПорчаТоваров
// ОрдерНаОтражениеПорчиТоваров
// ПересортицаТоваров
// ПересчетТоваров
// для документа ПересчетТоваров также дополнительно формируются движения по рн СвободныеОстатки
Процедура ИсправитьДвиженияПоОбеспечениюЗаказов(Параметры) Экспорт
    
	ТипыРегистраторов = Новый Массив;
	ТипыРегистраторов.Добавить("Документ.ОприходованиеИзлишковТоваров");
    ТипыРегистраторов.Добавить("Документ.ОрдерНаОтражениеИзлишковТоваров");
    ТипыРегистраторов.Добавить("Документ.СписаниеНедостачТоваров");
    ТипыРегистраторов.Добавить("Документ.ОрдерНаОтражениеНедостачТоваров");
    ТипыРегистраторов.Добавить("Документ.ПорчаТоваров");
    ТипыРегистраторов.Добавить("Документ.ОрдерНаОтражениеПорчиТоваров");
    ТипыРегистраторов.Добавить("Документ.ПересортицаТоваров");
    
	ОбработкаЗавершенаОсновная = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		ТипыРегистраторов,
	    ПолноеИмяРегистра(),
		Параметры.Очередь
    );
    
    ТипыРегистраторов.Добавить("Документ.ПересчетТоваров");
    
	ОбработкаЗавершенаПересчетТоваров = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		"Документ.ПересчетТоваров",
	    "РегистрНакопления.ОбеспечениеЗаказов,РегистрНакопления.СвободныеОстатки",
		Параметры.Очередь
    );
    
	Параметры.ОбработкаЗавершена = ОбработкаЗавершенаОсновная И ОбработкаЗавершенаПересчетТоваров;
    
КонецПроцедуры

Процедура ИсправитьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ОбеспечениеЗаказов";
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	// АктОРасхожденияхПослеОтгрузки
	ТекстЗапросаМеханизмаПроведения = Документы.АктОРасхожденияхПослеОтгрузки.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.АктОРасхожденияхПослеОтгрузки");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	// АктОРасхожденияхПослеПеремещения
	ТекстЗапросаМеханизмаПроведения = Документы.АктОРасхожденияхПослеПеремещения.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.АктОРасхожденияхПослеПеремещения"
    );
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    
#Область ВозвратТоваровПоставщику
	// Исправляются расхождения в движениях документа, когда движение по ресурсу "Наличие под заказ" было, а по ресурсу "К заказу" - не было.
	ИмяДокумента = "Документ.ВозвратТоваровПоставщику";
	ТекстЗапросаМеханизмаПроведения = Документы.ВозвратТоваровПоставщику.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		ИмяДокумента
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказКлиента

	ТекстЗапросаМеханизмаПроведения = Документы.ЗаказКлиента.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.ЗаказКлиента"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	Документы.ЗаказКлиента.ИсправлениеДвиженийОбеспечениеЗаказовЗарегистрироватьДанныеДляКОбработке(Параметры);
	
#КонецОбласти

#Область ЗаказНаВнутреннееПотребление
	ТекстЗапросаМеханизмаПроведения = Документы.ЗаказНаВнутреннееПотребление.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.ЗаказНаВнутреннееПотребление"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказНаПеремещение
	ТекстЗапросаМеханизмаПроведения = Документы.ЗаказНаПеремещение.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.ЗаказНаПеремещение"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ПеремещениеТоваров
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА Товары.КодСтроки = 0
	|				ТОГДА Товары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВНаличии,
	|	СУММА(ВЫБОР
	|			КОГДА Товары.КодСтроки = 0
	|					И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА Товары.Количество
	|		КОНЕЦ) КАК КоличествоВРезервеПодЗаказ
	|ПОМЕСТИТЬ КоличествоВНакладной
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка.Проведен
	|	И Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СвободныеОстатки.ВНаличии, 0)) КАК ВНаличии,
	|	СУММА(ЕСТЬNULL(СвободныеОстатки.ВРезервеСоСклада, 0)) КАК ВРезервеСоСклада,
	|	СУММА(ЕСТЬNULL(СвободныеОстатки.ВРезервеПодЗаказ, 0)) КАК ВРезервеПодЗаказ,
	|	КоличествоВНакладной.Ссылка,
	|	КоличествоВНакладной.КоличествоВНаличии,
	|	КоличествоВНакладной.КоличествоВРезервеПодЗаказ
	|ПОМЕСТИТЬ ОбщееКоличество
	|ИЗ
	|	КоличествоВНакладной КАК КоличествоВНакладной
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки КАК СвободныеОстатки
	|		ПО (СвободныеОстатки.Регистратор = КоличествоВНакладной.Ссылка)
	|ГДЕ
	|	СвободныеОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоВНакладной.Ссылка,
	|	КоличествоВНакладной.КоличествоВНаличии,
	|	КоличествоВНакладной.КоличествоВРезервеПодЗаказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбщееКоличество.Ссылка
	|ПОМЕСТИТЬ ДокументыДляОбновления
	|ИЗ
	|	ОбщееКоличество КАК ОбщееКоличество
	|ГДЕ
	|	(ОбщееКоличество.ВНаличии <> ОбщееКоличество.КоличествоВНаличии
	|			ИЛИ ОбщееКоличество.ВРезервеПодЗаказ <> ОбщееКоличество.КоличествоВРезервеПодЗаказ
	|			ИЛИ ОбщееКоличество.ВРезервеСоСклада <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыДляОбновления.Ссылка КАК Регистратор
	|ИЗ
	|	ДокументыДляОбновления КАК ДокументыДляОбновления";
    
    Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказНаСборку
	ТекстЗапросаМеханизмаПроведения = Документы.ЗаказНаСборку.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.ЗаказНаСборку"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Регистраторы = Документы.ЗаказНаСборку.ЗаказыНаРазборкуКоторыеНужноРазбитьПередЗаполнениемСерий();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноРазбитьПоВариантуОбеспечения();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область СборкаТоваров
	ТекстЗапросаМеханизмаПроведения = Документы.СборкаТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.СборкаТоваров"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаявкаНаВозвратТоваровОтКлиента
	ТекстЗапросаМеханизмаПроведения = Документы.ЗаявкаНаВозвратТоваровОтКлиента.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ИсправлениеДвиженийОбеспечениеЗаказовЗарегистрироватьДанныеДляКОбработке(Параметры);
#КонецОбласти


КонецПроцедуры

Процедура ИсправитьДвижения(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеОтгрузки");
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	Регистраторы.Добавить("Документ.ЗаказКлиента");
	Регистраторы.Добавить("Документ.ЗаказНаВнутреннееПотребление");
	Регистраторы.Добавить("Документ.ЗаказНаПеремещение");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.ЗаказНаСборку");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	Регистраторы.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
	Регистраторы.Добавить("Документ.ВозвратТоваровПоставщику");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
	    "РегистрНакопления.ОбеспечениеЗаказов",
	    Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры



Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаВерсию2_1_12(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ОбеспечениеЗаказов";
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	// Прочее оприходование товаров
	ТекстЗапросаМеханизмаПроведения = Документы.ПрочееОприходованиеТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.ПрочееОприходованиеТоваров");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	
	ТекстЗапросаМеханизмаПроведения = Документы.ПорчаТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(ТекстЗапросаМеханизмаПроведения,
																				ПолноеИмяРегистра,
																				"Документ.ПорчаТоваров");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	ТекстЗапросаМеханизмаПроведения = Документы.ОприходованиеИзлишковТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(ТекстЗапросаМеханизмаПроведения,
																				ПолноеИмяРегистра,
																				"Документ.ОприходованиеИзлишковТоваров");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаВерсию2_1_12(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ПрочееОприходованиеТоваров");
	Регистраторы.Добавить("Документ.ПорчаТоваров");
	Регистраторы.Добавить("Документ.ОприходованиеИзлишковТоваров");
    
    ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
	    "РегистрНакопления.ОбеспечениеЗаказов",
	    Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли

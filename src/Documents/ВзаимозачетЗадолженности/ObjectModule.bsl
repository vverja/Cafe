#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ДебиторскаяЗадолженность.Количество() > 0 Тогда
		ДебиторскаяЗадолженность.Очистить();
	КонецЕсли;
	
	Если КредиторскаяЗадолженность.Количество() > 0 Тогда
		КредиторскаяЗадолженность.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ВзаимозачетЗадолженности.ЗаполнитьИменаРеквизитовПоВидуОперации(
		ВидОперации,
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	// Проверим соответствие сумм документа и табличной части.
	Если ДебиторскаяЗадолженность.Итог("Сумма") <> КредиторскаяЗадолженность.Итог("Сумма") Тогда
		ТекстСообщения = НСтр("ru='Сумма по строкам в табличной части ""Задолженность дебитора"" должна равняться сумме по строкам в табличной части ""Задолженность перед кредитором""';uk='Сума за рядками у табличній частині ""Заборгованість дебітора"" повинна дорівнювати сумі рядків у табличній частині ""Заборгованість перед кредитором""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			, // Поле
			,
			Отказ);
	КонецЕсли;
	
	Если ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		Или ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДебиторскаяЗадолженность.Партнер");
	КонецЕсли;
	Если ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		Или ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КредиторскаяЗадолженность.Партнер");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СтруктураПредставлений = Документы.ВзаимозачетЗадолженности.ПредставлениеРекизитовПоВидуОперации(ВидОперации);
	ПроверитьСовпадениеЮрЛиц("КонтрагентДебитор", СтруктураПредставлений.КонтрагентДебитор, Отказ);
	Если МассивНепроверяемыхРеквизитов.Найти("КонтрагентКредитор") = Неопределено Тогда
		ПроверитьСовпадениеЮрЛиц("КонтрагентКредитор", СтруктураПредставлений.КонтрагентКредитор, Отказ);
	КонецЕсли;
	Если МассивНепроверяемыхРеквизитов.Найти("ОрганизацияКредитор") = Неопределено Тогда
		ПроверитьСовпадениеЮрЛиц("ОрганизацияКредитор", СтруктураПредставлений.ОрганизацияКредитор, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ЗначениеЗаполнено(ВидОперации)
			И ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами
			И ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками
			И ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный Тогда
		КонтрагентКредитор = КонтрагентДебитор;
		ТипКредитора = ТипДебитора;
	КонецЕсли;
	
	СформироватьСписокЗависимыхЗаказов();
	
	// Заполнение реквизитов в табличных частях.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
			Валюта,
			Дата,
			ДебиторскаяЗадолженность);
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
			Валюта,
			Дата,
			КредиторскаяЗадолженность);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ДебиторскаяЗадолженность);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(КредиторскаяЗадолженность);
		
		ДенежныеСредстваСервер.ЗаполнитьВладельцаОбъектаРасчета(ЭтотОбъект, "ДебиторскаяЗадолженность");
		ДенежныеСредстваСервер.ЗаполнитьВладельцаОбъектаРасчета(ЭтотОбъект, "КредиторскаяЗадолженность");
		
		ЗаполнитьТипРасчетовВТабличнойЧасти(ДебиторскаяЗадолженность, ТипДебитора);
		ЗаполнитьТипРасчетовВТабличнойЧасти(КредиторскаяЗадолженность, ТипКредитора);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ВзаимозачетЗадолженности.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по расчетам с поставщиками и клиентами.
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	

	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияКонтрагентКонтрагент(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Валюта      = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Массив.Добавить(Движения.РасчетыСКлиентами);

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В (&МассивЗаказовДеб)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&МассивЗаказовКред)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&МассивЗаказовДеб)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&МассивЗаказовКред)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В
		|		(ВЫБРАТЬ
		|			ДебиторскаяЗадолженность.Заказ
		|		ИЗ
		|			Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
		|		ГДЕ
		|			ДебиторскаяЗадолженность.Ссылка = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В
		|		(ВЫБРАТЬ
		|			КредиторскаяЗадолженность.Заказ
		|		ИЗ
		|			Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК КредиторскаяЗадолженность
		|		ГДЕ
		|			КредиторскаяЗадолженность.Ссылка = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В
		|		(ВЫБРАТЬ
		|			ДебиторскаяЗадолженность.Заказ
		|		ИЗ
		|			Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
		|		ГДЕ
		|			ДебиторскаяЗадолженность.Ссылка = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В
		|		(ВЫБРАТЬ
		|			КредиторскаяЗадолженность.Заказ
		|		ИЗ
		|			Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК КредиторскаяЗадолженность
		|		ГДЕ
		|			КредиторскаяЗадолженность.Ссылка = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Ссылка;
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В(&МассивЗаказовДеб)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщику.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В(&МассивЗаказовКред)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщику.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В
		|		(ВЫБРАТЬ
		|			ДебиторскаяЗадолженность.Заказ
		|		ИЗ
		|			Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
		|		ГДЕ
		|			ДебиторскаяЗадолженность.Ссылка = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщику.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В
		|		(ВЫБРАТЬ
		|			КредиторскаяЗадолженность.Заказ
		|		ИЗ
		|			Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК КредиторскаяЗадолженность
		|		ГДЕ
		|			КредиторскаяЗадолженность.Ссылка = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщику.Ссылка
		|";
	
	Запрос.УстановитьПараметр("МассивЗаказовДеб", ЭтотОбъект.ДебиторскаяЗадолженность.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("МассивЗаказовКред", ЭтотОбъект.КредиторскаяЗадолженность.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	МассивЗависимыхЗаказов = Результат[0].Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
	МассивЗависимыхЗаказов = Результат[1].Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовПоставщикам", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Процедура ПроверитьСовпадениеЮрЛиц(Реквизит, Представление, Отказ)
	
	ЮрЛицо = ЭтотОбъект[Реквизит];
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ЮрЛицо) И (Организация = ЮрЛицо) Тогда
		Текст = НСтр("ru='Организация и %Контрагент% должны различаться.';uk='Організація і %Контрагент% повинні розрізнятися.'");
		Текст = СтрЗаменить(Текст,"%Контрагент%", Представление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, Реквизит,, Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТипРасчетовВТабличнойЧасти(ТабличнаяЧасть, ТипКонтрагента)
	
	Если ЗначениеЗаполнено(ТипКонтрагента) Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер Тогда
			
			Если ТабличнаяЧасть = ДебиторскаяЗадолженность Тогда
				ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
			Иначе
				ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
			КонецЕсли;
			
		Иначе
			
			Если ТипКонтрагента = Перечисления.ТипыУчастниковВзаимозачета.Клиент
				Или ТипКонтрагента = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент Тогда
				ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
			Иначе
				ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			СтрокаТаблицы.ТипРасчетов = ТипРасчетов;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

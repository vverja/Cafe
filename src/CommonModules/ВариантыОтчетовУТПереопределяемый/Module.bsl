
#Область ПрограммныйИнтерфейс

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных)
//
// Описание:
//   В Разделы необходимо добавить метаданные подсистем тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Разделы.Добавить(Метаданные.Подсистемы.CRMИМаркетинг,
			НСтр("ru='Отчеты по CRM и маркетингу';uk='Звіти по CRM і маркетингу'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Закупки,
			НСтр("ru='Отчеты по закупкам';uk='Звіти по купівлях'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Казначейство,
			НСтр("ru='Отчеты по казначейству';uk='Звіти по казначейству'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Продажи,
			НСтр("ru='Отчеты по продажам';uk='Звіти по продажам'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.Склад,
			НСтр("ru='Отчеты по складу';uk='Звіти по складу'") );
		
		Разделы.Добавить(Метаданные.Подсистемы.ФинансовыйРезультатИКонтроллинг,
			НСтр("ru='Отчеты по финансовому результату';uk='Звіти по фінансовому результату'"));
			
			Разделы.Добавить(Метаданные.Подсистемы.Найти("Планирование"),
					НСтр("ru='Отчеты по планированию';uk='Звіти з планування'"));
		
		Разделы.Добавить(Метаданные.Подсистемы.РегламентированныйУчет,
			НСтр("ru='Отчеты по регламентированному учету';uk='Звіти по регламентованому обліку'"));
		
		
	КонецЕсли;
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//
// Описание:
//   В данной процедуре необходимо указать каким именно образом предопределенные варианты отчетов
//   будут регистрироваться в системе и показываться в панели отчетов.
//
// Вспомогательные функции:
//   Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//   Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "<ИмяВарианта>");
//
//   Данные функции получают описание отчета или варианта отчета следующей структуры:
//       	|- Включен (Булево)
//            Если Ложь, то вариант отчета не регистрируется в подсистеме.
//              Используется для удаления технических и контекстных вариантов отчетов из всех интерфейсов.
//              Эти варианты отчета по прежнему можно открывать в форме отчета программно при помощи
//              параметров открытия (см. справку по "Расширение управляемой формы для отчета.КлючВарианта").
//       	|- ВидимостьПоУмолчанию (Булево)
//            Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//              Пользователь может "включить" его в режиме настройки панели отчетов
//              или открыть через форму "Все отчеты".
//       	|- Описание (Строка)
//            Дополнительная информация по варианту отчета.
//              В панели отчетов выводится в качестве подсказки.
//              Должно расшифровывать для пользователя содержимое варианта отчета
//              и не должно дублировать наименование варианта отчета.
//       	|- Размещение (Соответствие) Настройки размещения варианта отчета в разделах
//           	|- Ключ     (ОбъектМетаданных) Подсистема, в которой размещается отчет или вариант отчета
//           	|- Значение (Строка)           Необязательный. Настройки размещения в подсистеме.
//               	|- ""        - Выводить отчет в своей группе обычным шрифтом.
//               	|- "Важный"  - Выводить отчет в своей группе жирным шрифтом.
//               	|- "СмТакже" - Выводить отчет в группе "См. также".
//
// Например:
//
//  (1) Оставить в подсистеме только один из вариантов отчета
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	Отчет.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта1");
//	Отчет.Размещение.Вставить(Метаданные.Подсистемы.ИмяРаздела);
//
//  (2) Отключить вариант отчета
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИмяОтчета, "ИмяВарианта1");
//	Вариант.Включен = Ложь;
//
//  (3) Отключить все варианты отчета, кроме требуемого
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	Отчет.Включен = Ложь;
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта");
//	Вариант.Включен = Истина;
//
//  (4) Результат исполнения любого из двух фрагментов кода будет одинаковым:
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта1");
//	Вариант.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта2");
//	Вариант.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта3");
//	Вариант.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	Отчет.Размещение.Удалить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта1");
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта2");
//	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Отчет, "ИмяВарианта3");
//	Отчет.Размещение.Вставить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//
//
// Важно:
//   Начальная настройка размещения отчетов по разделам зачитывается из метаданных,
//   ее дублирование в коде не требуется.
//   
//   Настройки варианта имеют приоритет над настройками отчета.
//   
//   Настройки варианта при получении формируются из настроек отчета
//   и после получения не зависят от настроек отчета (становятся самостоятельными, см. примеры 3 и 4).
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	ВыводитьВариантыОтчетов = Ложь;
	
	ИспользоватьПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ABCXYZАнализНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какие товары хорошо и стабильно продаются? 
        |Какие имеют низкий товарооборот и продаются нестабильно?'
        |;uk='Які товари добре і стабільно продаються? 
        |Які мають низький товарообіг і продаються нестабільно?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗапасыПоСкладам");
	ОписаниеВарианта.Описание = НСтр("ru='Какие товары хорошо и стабильно продаются? 
        |Какие имеют низкий товарооборот и продаются нестабильно?'
        |;uk='Які товари добре і стабільно продаються? 
        |Які мають низький товарообіг і продаються нестабільно?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ABCXYZРаспределениеКлиентов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);

	

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализДвиженийДенежныхСредств);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализДенежныхПотоков);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализДоступностиТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиИДоступностьТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Каков остаток товаров и сколько из них доступно?
        |Сколько товаров отгружается, в резерве или в обособлении?
        |Какими заказами зарезервирован товар?'
        |;uk='Який залишок товарів і скільки з них доступно?
        |Скільки товарів відвантажується, в резерві або у відокремленні?
        |Якими замовленнями зарезервований товар?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиИДоступностьТоваров");
	ОписаниеВарианта.Описание = НСтр("ru='Каков остаток товаров и сколько из них доступно?
        |Сколько товаров отгружается, в резерве или в обособлении?
        |Какими заказами зарезервирован товар?'
        |;uk='Який залишок товарів і скільки з них доступно?
        |Скільки товарів відвантажується, в резерві або у відокремленні?
        |Якими замовленнями зарезервований товар?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализДоходовРасходов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Постатейный анализ доходов и расходов предприятия.';uk='Постатейний аналіз доходів і витрат підприємства.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоходыИРасходы");
	ОписаниеВарианта.Описание = НСтр("ru='Постатейный анализ доходов и расходов предприятия с возможностью выбора аналитики.';uk='Постатейний аналіз доходів і витрат підприємства з можливістю вибору аналітики.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольРаспределенияДоходовИРасходов");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль полноты распределения доходов и расходов.';uk='Контроль повноти розподілу доходів і витрат.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "Доходы");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДоходыИРасходыПоЗаказамКлиентов");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДоходыИРасходыПоПартнерам");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДоходыИРасходыПоПодразделениям");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДоходыИРасходыПоСделкам");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДоходыФинансовыйРезультатНеФормируется");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтчетОПрибыляхИУбытках");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "Расходы");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасходыФинансовыйРезультатНеФормируется");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РБП");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ТЗР");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЖурналаРегистрации);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АктивностьПользователя");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализАктивностиПользователей");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольЖурналаРегистрации");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродолжительностьРаботыРегламентныхЗаданий");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЗависимостиОтКлиентовABC);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какие группы клиентов покупают более всего?';uk='Які групи клієнтів купують більш за все?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ изменения количества и соотношения клиентов, покупающих много, средне и мало.';uk='Аналіз зміни кількості та співвідношення клієнтів, що купують багато, середньо і мало.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализИсполненияАссортимента);
	ОписаниеВарианта.Описание = НСтр("ru='Контроль соблюдения требований ассортиментной политики.
        |Какие квоты назначены на товары? Какие товары представлены в магазинах?'
        |;uk='Контроль дотримання вимог асортиментної політики.
        |Які квоти призначені на товари? Які товари представлені в магазинах?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализИсполненияАссортимента");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта.Описание = НСтр("ru='Соответствует ли количество товаров установленным квотам:
        |- по вводу в ассортимент,
        |- по наличию в магазинах?'
        |;uk='Чи відповідає кількість товарів установленими квотами:
        |- за введення в асортимент,
        |- за наявності в магазинах?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоКатегорииКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализКлиентскойБазыBCG);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Комплексный анализ клиентской базы на основе АВС/XYZ-классификации клиентов.
        |С какими клиентам перспективно работать?'
        |;uk='Комплексний аналіз клієнтської бази на основі АВС/XYZ-класифікації клієнтів.
        |З якими клієнтам перспективно працювати?'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='A-класс
        |B-класс
        |C-класс
        |X-класс
        |Y-класс
        |Z-класс
        |Потерянные
        |Потенциальные
        |Текущая классификация
        |Предыдущая классификация
        |ABC/XYZ распределение
        |Изменения ABC
        |Изменения XYZ'
        |;uk='A-клас
        |B-клас
        |C-клас
        |X-клас
        |Y-клас
        |Z-клас
        |Втрачені
        |Потенційні
        |Поточна класифікація
        |Попередня класифікація
        |ABC/XYZ розподіл
        |Зміни ABC
        |Зміни XYZ'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru='Анализ на дату
        |Тип параметра классификации
        |Дата текущего среза
        |Дата предыдущего среза'
        |;uk='Аналіз на дату
        |Тип значення класифікації
        |Дата поточного зрізу
        |Дата попереднього зрізу'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЛояльностиКлиентовXYZ);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какие клиенты покупают регулярно?';uk='Які клієнти купують регулярно?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Какие клиенты покупают стабильно?
        |Какие клиенты являются разовыми?'
        |;uk='Які клієнти купують стабільно?
        |Які клієнти є разовими?'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализОстатковТоваровОрганизаций);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПервичногоИнтереса);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько клиентов было привлечено?
        |Сколько было заключено сделок?
        |Анализ в разрезе источников воздействия, каналов первичного интереса и типам источников.'
        |;uk='Скільки клієнтів було залучено?
        |Скільки було укладено угод?
        |Аналіз в розрізі джерел впливу, каналів первинного інтересу і типів джерел.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПервичныйИнтерес");
	ОписаниеВарианта.Описание = НСтр("ru='Сравнение источников первичного интереса по количеству зарегистрированных клиентов и заключенных сделок.';uk='Порівняння джерел первинного інтересу за кількістю зареєстрованих клієнтів та укладених угод.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПервичногоСпроса);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Насколько удовлетворен спрос клиентов?
        |Какие причины неудовлетворения спроса?'
        |;uk='Наскільки задоволений попит клієнтів?
        |Які причини незадоволення попиту?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "УдовлетворениеПервичногоСпроса");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы основные причины неудовлетворения спроса в разрезе сделок и менеджеров?
        |По каким сделкам спрос был удовлетворен?'
        |;uk='Які основні причини незадоволення попиту у розрізі угод і менеджерів?
        |За якими угодами попит був задоволений?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПоступленийРасходовТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПретензийКлиентов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ регистрации и удовлетворения претензий от клиентов.';uk='Зведений аналіз реєстрації і задоволення претензій клієнтів.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализВозникновенияПретензийКлиентов");
	ОписаниеВарианта.Описание = НСтр("ru='Рейтинг причин возникновения претензий, подразделений и сотрудников по количеству претензий.';uk='Рейтинг причин виникнення претензій, підрозділів і співробітників за кількістю претензій.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализУдовлетворенияПретензий");
	ОписаниеВарианта.Описание = НСтр("ru='Соотношение удовлетворенных и неудовлетворенных претензий в разрезе причин.';uk='Співвідношення задоволених і незадоволених претензій у розрізі причин.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаВозникновения");
	ОписаниеВарианта.Описание = НСтр("ru='Соотношение поступивших и отработанных претензий за период помесячно.';uk='Співвідношення отриманих та відпрацьованих претензій за період помісячно.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыСИстекающимиСертификатами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Товары с истекающими сертификатами");
	ОписаниеВарианта.Описание = НСтр("ru='Товары с истекающими сертификатами.';uk='Товари з сертифікатами, які закінчуються.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинОтменыЗаказовКлиентов);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='По каким причинам чаще всего заказы выполняются частично или не выполняются полностью?';uk='З яких причин найчастіше замовлення виконуються частково або не виконуються повністю?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПричиныОтменыЗаказовКлиентовБезЦеновыхГрупп");
	ОписаниеВарианта.Описание = НСтр("ru='По каким причинам чаще всего заказы выполняются частично или не выполняются полностью?
        |У каких менеджеров более всего выполненных не полностью заказов?'
        |;uk='З яких причин найчастіше замовлення виконуються частково або не виконуються повністю?
        |У будь менеджерів більш всього не повністю виконаних замовлень?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеИспользоватьЦеновыеГруппы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПричиныОтменыЗаказовКлиентовСЦеновымиГруппами");
	ОписаниеВарианта.Описание = НСтр("ru='По каким причинам чаще всего заказы выполняются частично или не выполняются полностью?
        |У каких менеджеров более всего выполненных не полностью заказов?'
        |;uk='З яких причин найчастіше замовлення виконуються частково або не виконуються повністю?
        |У будь менеджерів більш всього не повністю виконаних замовлень?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьЦеновыеГруппы");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинОтменыЗаказовПоставщикам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='По каким причинам чаще всего заказы выполняются частично или не выполняются полностью?
        |У каких поставщиков более всего выполненных не полностью заказов?'
        |;uk='З яких причин найчастіше замовлення виконуються частково або не виконуються повністю?
        |У яких постачальників більш всього не повністю виконаних замовлень?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РейтингПричинОтменыЗаказовПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru='Соотношение причин отмены с нашей стороны и со стороны поставщика.';uk='Співвідношення причин скасування з нашого боку і з боку постачальника.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СтатистикаОтменыЗаказовПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru='Соотношение заказанных и отмененных строк в заказах поставщикам.';uk='Співвідношення замовлених та скасованих рядків в замовленнях постачальникам.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинОтменыЗаказовПоставщикамПоДокументу);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПричинПроигрышаСделок);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какие причины привели к проигрышу сделок?';uk='Які причини призвели до програшу угод?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПричиныПроигрышаСделок");
	ОписаниеВарианта.Описание = НСтр("ru='Какие причины привели к проигрышу сделок?
        |У каких менеджеров?
        |С какими клиентами?'
        |;uk='Які причини призвели до програшу угод?
        |У яких менеджерів?
        |З якими клієнтами?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСебестоимостиТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСебестоимостиТоваровРасширенный);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ себестоимости товаров и сумм ТЗР.';uk='Аналіз собівартості товарів і сум ТЗВ.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СебестоимостьТоваров");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ себестоимости товаров и сумм ТЗР,
        |распределенных на себестоимость реализованных товаров.'
        |;uk='Аналіз собівартості товарів і сум ТЗВ,
        |розподілених на собівартість реалізованих товарів.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СебестоимостьТоваровПоОперациям");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ себестоимости товаров и сумм ТЗР в разрезе операций.';uk='Аналіз собівартості товарів і сум ТЗВ в розрізі операцій.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СебестоимостьТоваровБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ себестоимости товаров и сумм ТЗР,
        |распределенных на себестоимость реализованных товаров.'
        |;uk='Аналіз собівартості товарів і сум ТЗВ,
        |розподілених на собівартість реалізованих товарів.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СебестоимостьТоваровПоОперациямБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ себестоимости товаров и сумм ТЗР в разрезе операций.';uk='Аналіз собівартості товарів і сум ТЗВ в розрізі операцій.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаЗакупок");
	ИзменитьРазмещениеВариантаОтчета(ОписаниеВарианта.Размещение, "Удалить", "ФинансовыйРезультатИКонтроллинг.СебестоимостьЗапасов");
	ИзменитьРазмещениеВариантаОтчета(ОписаниеВарианта.Размещение, "Вставить", "Закупки.Закупки");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта.Описание = НСтр("ru='Помесячные объемы закупок за выбранный период по поставщикам и номенклатуре.
        |Возможен анализ по периодам - квартал, месяц, неделя, день.'
        |;uk='Помісячні обсяги купівель за вибраний період по постачальниках і номенклатурі.
        |Можливий аналіз за періодами - квартал, місяць, тиждень, день.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСебестоимостиТоваровПоПоставщикам);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСтатейКредитовИДепозитов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль поступлений и списаний средств
        |по кредитным (депозитным) договорам.'
        |;uk='Контроль надходжень і списань коштів
        |по кредитних (депозитних) договорах.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСтатейКредитовДепозитов");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль поступлений и списаний средств
        |по кредитным (депозитным) договорам.'
        |;uk='Контроль надходжень і списань коштів
        |по кредитних (депозитних) договорах.'");
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализФинансовыхРезультатов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ прибылей и убытков по статьям и направлениям деятельности.';uk='Аналіз прибутків та збитків за статтями і напрямами діяльності.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтчетОПрибыляхИУбыткахПоНаправлениям");
	ОписаниеВарианта.Описание = НСтр("ru='Постатейный анализ финансовых результатов по направлениям деятельности.';uk='Постатейний аналіз фінансових результатів за напрямами діяльності.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНаправлениямДеятельности");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЦенПоставщиков);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЭффективностиРаботыТорговыхПредставителей);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ того, насколько успешно торговые представители справляются с поставленными заданиями.
        |Отчет используется только при схеме работы с выдачей заданий торговым представителям.'
        |;uk='Аналіз того, наскільки успішно торгові представники справляються з поставленими завданнями.
        |Звіт використовується тільки при схемі роботи з видачею завдань торговим представникам.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ того, насколько успешно торговые представители справляются с поставленными заданиями.
        |Отчет используется только при схеме работы с выдачей заданий торговым представителям.'
        |;uk='Аналіз того, наскільки успішно торгові представники справляються з поставленими завданнями.
        |Звіт використовується тільки при схемі роботи з видачею завдань торговим представникам.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.БонусныеБаллы);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько осталось бонусных баллов, начисленных клиенту?';uk='Скільки залишилося бонусних балів, нарахованих клієнту?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиБонусныхБаллов");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько осталось бонусных баллов, начисленных клиенту?
        |По каким бонусным программам остались начисленные баллы?'
        |;uk='Скільки залишилося бонусних балів, нарахованих клієнту?
        |За яким бонусними програмами залишилися нараховані бали?'");
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВаловаяПрибыльПоОплаченнымОтгрузкам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВаловаяПрибыльПоПолностьюОплаченнымОтгрузкам");
	ОписаниеВарианта.Описание = НСтр("ru='Какие подразделения и менеджеры принесли более всего прибыли по оплате?';uk='Які підрозділи і менеджери принесли більше всього прибутку за оплатою?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВаловаяПрибыльПоПолностьюОплаченнымОтгрузкамБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='Какие клиенты принесли более всего прибыли по оплате?';uk='Які клієнти принесли більше всього прибутку за оплатою?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВаловаяПрибыльПоЧастичноОплаченнымОтгрузкам");
	ОписаниеВарианта.Описание = НСтр("ru='Какие подразделения и менеджеры принесли более всего прибыли по частиной оплате?';uk='Які підрозділи і менеджери принесли більше всього прибутку за частковою оплатою?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВаловаяПрибыльПоЧастичноОплаченнымОтгрузкамБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='Какие клиенты принесли более всего прибыли по частиной оплате?';uk='Які клієнти принесли більше всього прибутку за частковою оплатою?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьБезналичныхДенежныхСредств);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоДням");
	ОписаниеВарианта.Описание = НСтр("ru='Есть ли расхождения данных системы с загруженными выписками банка?';uk='Чи є розбіжності даних системи з завантаженими виписками банку?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ВедомостьПоДнямОдинСчет");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоДенежнымСредствам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоДенежнымСредствам");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько денежных средств на расчетных счетах и в кассах?';uk='Скільки грошових коштів на розрахункових рахунках і в касах?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияДенежныхСредств");
	ОписаниеВарианта.Описание = НСтр("ru='Какие движения денежных средств происходили помесячно за период?
        |По каким статьям ДДС?'
        |;uk='Які рухи грошових коштів відбувалися щомісячно за період?
        |За якими статтями РГК?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДенежныеСредстваУПодотчетныхЛиц");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько денежных средств на руках у подотчетных лиц?';uk='Скільки грошових коштів на руках у підзвітних осіб?'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоПартиямТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль поступлений и списаний партий товаров.
        |Контроль распределения расходов механизмом партионного учета.'
        |;uk='Контроль надходжень і списань партій товарів.
        |Контроль розподілу витрат механізмом партіонного обліку.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПартионныйУчет");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоПартиямТоваров");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль поступлений и списаний партий товаров.
        |Контроль распределения расходов механизмом партионного учета.'
        |;uk='Контроль надходжень і списань партій товарів.
        |Контроль розподілу витрат механізмом партіонного обліку.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПартионныйУчет");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоПереданнойВозвратнойТаре);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ оборотов переданной клиентам возвратной тары за определенный период.';uk='Зведений аналіз оборотів переданої клієнтам зворотної тари за певний період.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоПереданнойВозвратнойТаре");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ оборотов переданной клиентам возвратной тары за определенный период.
        |Какова ее стоимость и количество?'
        |;uk='Зведений аналіз оборотів переданої клієнтам зворотної тари за певний період.
        |Яка її вартість та кількість?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоПринятойВозвратнойТаре);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ оборотов принятой от поставщиков тары за определенный период.';uk='Зведений аналіз оборотів прийнятої від постачальників тари за певний період.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоПринятойВозвратнойТаре");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ оборотов принятой от поставщиков тары за определенный период.
        |Какова ее стоимость и количество?'
        |;uk='Зведений аналіз оборотів прийнятої від постачальників тари за певний період.
        |Яка її вартість та кількість?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ количественного движения товаров на складах предприятия.';uk='Аналіз кількісного руху товарів на складах підприємства.'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоТоварамНаСкладах");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ количественного движения товаров на складах предприятия.';uk='Аналіз кількісного руху товарів на складах підприємства.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиНаСкладе");
	ОписаниеВарианта.Описание = НСтр("ru='Остатки товаров на складах и в помещениях предприятия.';uk='Залишки товарів на складах і у приміщеннях підприємства.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОстаткиИОборотыСГруппировкойПоСкладам");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтгружаемыеТовары");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОтгружаемыеТоварыПоПересчетуКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоТоварамНаСкладахВЦенахНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ движений и оценка стоимости товаров на складах по выбранному виду цен.';uk='Аналіз рухів та оцінка вартості товарів на складах за обраним видом цін.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьВЦенахНоменклатуры");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ движений и оценка стоимости товаров на складах по выбранному виду цен.';uk='Аналіз рухів та оцінка вартості товарів на складах за обраним видом цін.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОценкаОстатковТоваров");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка стоимости остатков товаров на складах по выбранному виду цен.';uk='Оцінка вартості залишків товарів на складах за обраним видом цін.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль остатков и движений товаров по организациям.';uk='Контроль залишків і рухів товарів по організаціям.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияТоваровОрганизаций");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ движений товаров на складах и организациях.
        |В какой организации и по какому складу есть товар и были движения за период?'
        |;uk='Аналіз рухів товарів на складах і організаціях.
        |В якій організації і на якому складі є товар і були руху за період?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоступныеДляПродажиТоварыОрганизаций");
	ОписаниеВарианта.Описание = НСтр("ru='Какие товары доступны на складах для продажи от имени выбранной организации?';uk='Які товари доступні на складах для продажу від імені обраної організації?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОстаткиТоваровОрганизаций");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекстБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоТоварамОрганизацийВЦенахНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ движений и оценка стоимости товаров
        |на розничных складах по выбранному виду цен.'
        |;uk='Аналіз рухів та оцінка вартості товарів
        |на роздрібних складах за обраним видом цін.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоТоварамОрганизацийВЦенахНоменклатуры");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ движений и оценка стоимости товаров
        |на розничных складах по выбранному виду цен.'
        |;uk='Аналіз рухів та оцінка вартості товарів
        |на роздрібних складах за обраним видом цін.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВероятностныйПрогноз);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какая вероятность выигрыша сделок на каждом из этапов процесса продаж?';uk='Яка ймовірність виграшу угод на кожному з етапів процесу продажу?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Какая вероятность выигрыша сделок на каждом из этапов процесса продаж?';uk='Яка ймовірність виграшу угод на кожному з етапів процесу продажу?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВоронкаПродаж);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какова эффективность каждой стадии продажи?';uk='Яка ефективність кожної стадії продажу?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Какова эффективность каждой стадии продажи?';uk='Яка ефективність кожної стадії продажу?'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль выполнения клиентами условий соглашений, в которых заданы регулярные условия продаж.';uk='Контроль виконання клієнтами умов оферт, в яких задані регулярні умови продажів.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль выполнения клиентами условий соглашений, в которых заданы регулярные условия продаж.';uk='Контроль виконання клієнтами умов оферт, в яких задані регулярні умови продажів.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Финансовый анализ продаж по аналитикам организации, клиенты, менеджеры, 
        |склады, номенклатура и другим.'
        |;uk='Фінансовий аналіз продажів по аналітиках організації, клієнти, менеджери, 
        |склади, номенклатура та іншими.'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПродаж");
	ОписаниеВарианта.Описание = НСтр("ru='Помесячные объемы продаж за выбранный период по видам номенклатуры.
        |Возможен анализ по периодам - квартал, месяц, неделя, день.'
        |;uk='Помісячні обсяги продажу за вибраний період по видах номенклатури.
        |Можливий аналіз по періодах - квартал, місяць, тиждень, день.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПродажБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru='Помесячные объемы продаж за выбранный период по бизнес-регионам и видам номенклатуры.
        |Возможен анализ по периодам - квартал, месяц, неделя, день.'
        |;uk='Помісячні обсяги продажу за вибраний період по бізнес-регіонах та видах номенклатури.
        |Можливий аналіз по періодах - квартал, місяць, тиждень, день.'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Продажи.Подсистема.ОптовыеПродажи");
	ОписаниеВарианта.Размещение.Вставить(Подсистема);
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоПартнерам");
	ОписаниеВарианта.Описание = НСтр("ru='По каким клиентам получена наибольшая валовая прибыль?';uk='За яким клієнтам отриманий найбільший валовий прибуток?'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Финансы.Подсистема.ФинансовыйРезультат");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоПартнерамБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='По каким клиентам получена наибольшая валовая прибыль?';uk='За яким клієнтам отриманий найбільший валовий прибуток?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru='По товарам от каких поставщиков получена наибольшая валовая прибыль?';uk='По товарах від яких постачальників отриманий найбільший валовий прибуток?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ФормироватьВидыЗапасовПоПоставщикам");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Финансы.Подсистема.ФинансовыйРезультат");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоСделкам");
	ОписаниеВарианта.Описание = НСтр("ru='По каким видам сделок и сделкам больше всего продаж клиентам?';uk='За якими видами угод і угодами найбільше продажів клієнтам?'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Продажи.Подсистема.ОптовыеПродажи");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.ФинансовыйРезультатИКонтроллинг.Подсистема.ФинансовыйРезультат");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.CRMИМаркетинг.Подсистема.ПроведениеСделокОтчеты");
	ОписаниеВарианта.Размещение.Вставить(Подсистема);
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСделкиСКлиентами");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиСводно");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ продаж по организациям, подразделениям (магазинам), 
        |менеджерам и номенклатуре.'
        |;uk='Зведений аналіз продажів по організаціям, підрозділам (магазинам), 
        |менеджерам і номенклатурою.'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Продажи.Подсистема.ОптовыеПродажи");
	ОписаниеВарианта.Размещение.Вставить(Подсистема, "Важный");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Финансы.Подсистема.ФинансовыйРезультат");
	ОписаниеВарианта.Размещение.Вставить(Подсистема);
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиСводноБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ продаж по организациям, подразделениям (магазинам), 
        |менеджерам и номенклатуре.'
        |;uk='Зведений аналіз продажів по організаціям, підрозділам (магазинам), 
        |менеджерам і номенклатурою.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДинамикаПродажКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПродажиПоЗаказуКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВыручкаИСебестоимостьРозничныхПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Финансовый анализ розничных продаж
        |по подразделениям (магазинам), складам и поставщикам.'
        |;uk='Фінансовий аналіз роздрібних продажів
        |за підрозділами (магазинами), складами та постачальниками.'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПродажРозницы");
	ОписаниеВарианта.Описание = НСтр("ru='Помесячные объемы розничных продаж за выбранный период.
        |Возможен анализ по периодам - квартал, месяц, неделя, день.'
        |;uk='Помісячні обсяги роздрібних продажів за вибраний період.
        |Можливий аналіз по періодах - квартал, місяць, тиждень, день.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПродажРозницыБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru='Помесячные объемы розничных продаж за выбранный период.
        |Возможен анализ по периодам - квартал, месяц, неделя, день.'
        |;uk='Помісячні обсяги роздрібних продажів за вибраний період.
        |Можливий аналіз по періодах - квартал, місяць, тиждень, день.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиРозницыПоПодразделениям");
	ОписаниеВарианта.Описание = НСтр("ru='Какие магазины принесли более всего валовой прибыли?';uk='Які магазини принесли більше всього валового прибутку?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиРозницыПоПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru='По товарам от каких поставщиков получена
        |наибольшая валовая прибыль при розничных продажах?'
        |;uk='По товарах від яких постачальників отриманий
        |найбільший валовий прибуток при роздрібних продажах?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ФормироватьВидыЗапасовПоПоставщикам");
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ГрафикОплатНачисленийКредитовИДепозитов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ графика траншей, погашений основного долга, процентов, комиссий.
        |Когда и на какую сумму произведены начисления?'
        |;uk='Аналіз графіка траншей, погашення основного боргу, відсотків, комісій.
        |Коли і на яку суму проведені нарахування?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ГрафикОплатПоДатам");
	ОписаниеВарианта.Описание = НСтр("ru='Детальный график траншей, оплат и начислений.';uk='Детальний графік траншів, оплат і нарахувань.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ГрафикОплатПоМесяцам");
	ОписаниеВарианта.Описание = НСтр("ru='Укрупненный, помесячный график траншей, оплат и начислений.';uk='Укрупнений, помісячний графік траншів, оплат і нарахувань.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ГрафикОплатПоМесяцамКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеАссортимента);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru='Сводный анализ движения серии номенклатуры на складах и в производстве.';uk='Зведений аналіз руху серії номенклатури на складах і у виробництві.'"),
									НСтр("ru='Сводный анализ движения серии номенклатуры на складах.';uk='Зведений аналіз руху серії номенклатури на складах.'"));
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоСериямНоменклатуры");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru='Сводный анализ движения серии номенклатуры на складах и в производстве.';uk='Зведений аналіз руху серії номенклатури на складах і у виробництві.'"),
									НСтр("ru='Сводный анализ движения серии номенклатуры на складах.';uk='Зведений аналіз руху серії номенклатури на складах.'"));
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ВедомостьПоСериямНоменклатурыКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СтруктураСерииНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяСборкаРазборкаИСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru='Какие серии использовались при выпуске серии изделия?';uk='Які серії використовувалися при випуску серії виробу?'"),
									НСтр("ru='Какие серии использовались при сборке серии комплекта?';uk='Які серії використовувалися при збиранні серії комплекту?'"));
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СтруктураСерииНоменклатуры");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяСборкаРазборкаИСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru='Какие серии использовались при выпуске серии изделия?';uk='Які серії використовувалися при випуску серії виробу?'"),
									НСтр("ru='Какие серии использовались при сборке серии комплекта?';uk='Які серії використовувалися при збиранні серії комплекту?'"));
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СтруктураСерииНоменклатурыКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДвижениеСерииНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСерииНоменклатуры");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru='Детальный анализ движения серии номенклатуры на складах и в производстве.';uk='Детальний аналіз руху серії номенклатури на складах і у виробництві.'"),
									НСтр("ru='Детальный анализ движения серии номенклатуры на складах.';uk='Детальний аналіз руху серії номенклатури на складах.'"));
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвижениеСерииНоменклатуры");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьСерииНоменклатуры");
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru='Детальный анализ движения серии номенклатуры на складах и в производстве.';uk='Детальний аналіз руху серії номенклатури на складах і у виробництві.'"),
									НСтр("ru='Детальный анализ движения серии номенклатуры на складах.';uk='Детальний аналіз руху серії номенклатури на складах.'"));
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвижениеСерииНоменклатурыКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПрименениеСерииНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяСборкаРазборкаИСерииНоменклатуры");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = ?(ИспользоватьПроизводство,
									НСтр("ru='В каких изделия использовалась серия номенклатуры?';uk='В яких виробах використовувалася серія номенклатури?'"),
									НСтр("ru='В каких комплектах использовалась серия номенклатуры?';uk='В яких комплектах використовувалася серія номенклатури?'"));
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПрименениеСерииНоменклатурыКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДебиторскаяЗадолженность);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ задолженности клиентов с разбивкой по интервалам долга.
        |Например, 0-7 дней, 7-15 дней, 15-30 дней, более 30 дней.'
        |;uk='Аналіз заборгованості клієнтів з розбивкою по інтервалах боргу.
        |Наприклад, 0-7 днів, 7-15 днів, 15-30 днів, більше 30 днів.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДебиторскаяЗадолженность");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ задолженности клиентов с разбивкой по интервалам долга.
        |Например, 0-7 дней, 7-15 дней, 15-30 дней, более 30 дней.'
        |;uk='Аналіз заборгованості клієнтів з розбивкою по інтервалах боргу.
        |Наприклад, 0-7 днів, 7-15 днів, 15-30 днів, більше 30 днів.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДебиторскаяЗадолженностьДоляПросрочки);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализа изменения доли просроченной дебиторской задолженности с разбивкой по периодам.';uk='Аналізу зміни частки простроченої дебіторської заборгованості з розбивкою по періодах.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоляПросроченнойДЗ");
	ОписаниеВарианта.Описание = НСтр("ru='Анализа изменения доли просроченной дебиторской задолженности с разбивкой по периодам.';uk='Аналізу зміни частки простроченої дебіторської заборгованості з розбивкою по періодах.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДинамикаИзмененияЦенНоменклатуры);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДинамикаИзмененияЦенНоменклатурыПоставщика);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДинамикаПоказателейРаботыТорговыхПредставителей);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ изменения показателей, характеризующих эффективность работы торговых представителей.';uk='Зведений аналіз зміни показників, що характеризують ефективність роботи торгових представників.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДинамикаПоказателейТорговыхПредставителей");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ изменения показателей, характеризующих эффективность работы торговых представителей.';uk='Зведений аналіз зміни показників, що характеризують ефективність роботи торгових представників.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДоступностьВариантовАнализаЦелевыхПоказателей);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДосьеПартнера);
	ОписаниеОтчета.Включен = Ложь;
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗаблокированныеЯчейки);
	ОтключитьОтчет(ОписаниеОтчета);

	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗависшиеЗадачи);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Задачи, которые не могут быть выполнены из-за того, что не заполнен список ролей и исполнителей.';uk='Задачі, які не можуть бути виконані із-за того, що не заповнений список ролей і виконавців.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗависшиеЗадачиПоИсполнителям");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗависшиеЗадачиПоОбъектамАдресации");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПросроченныеЗадачи");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводкаПоЗависшимЗадачам");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.Задачи);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СправкаПоИсполнительскойДисциплине");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТекущиеЗадачи");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗадачиИстекающиеНаДату);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗадачиИстекающиеНаДату");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗаполнениеСвойствПартнеров);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru='Все ли свойства клиентов, поставщиков заполнены?
        |Сколько и каких свойств нужно заполнить?'
        |;uk='Чи всі властивості клієнтів, постачальників заповнені?
        |Скільки і яких властивостей потрібно заповнити?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru='Насколько заполнены свойства клиентов, поставщиков?
        |Оценка полноты клиентской базы.'
        |;uk='Наскільки заповнені властивості клієнтів, постачальників?
        |Оцінка повноти клієнтської бази.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЗаполненностьСклада);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какие складские помещения простаивают (пусты или заполнены недостаточно)?';uk='Які складські приміщення простоюють (порожні або заповнені недостатньо)?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗаполненностьСклада");
	ОписаниеВарианта.Описание = НСтр("ru='Какие складские помещения простаивают (пусты или заполнены недостаточно)?
        |Какие области переполнены и требуют расширения?'
        |;uk='Які складські приміщення простоюють (порожні або заповнені недостатньо)?
        |Які області переповнені і вимагають розширення?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИзменениеABCXYZРаспределенияКлиентов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИндексыЦенНоменклатуры);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка эффективности сдерживания закупочных цен
        |без учета цен отдельных поставщиков.'
        |;uk='Оцінка ефективності стримування купівельних цін
        |без урахування цін окремих постачальників.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИндексыЦенНоменклатуры");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка эффективности сдерживания закупочных цен
        |без учета цен отдельных поставщиков.'
        |;uk='Оцінка ефективності стримування купівельних цін
        |без урахування цін окремих постачальників.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИндексыЦенПоставщиков);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка эффективности сдерживания закупочных цен
        |с учетом цен отдельных поставщиков.'
        |;uk='Оцінка ефективності стримування купівельних цін
        |з урахуванням цін окремих постачальників.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ФормироватьВидыЗапасовПоПоставщикам");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИндексыЦенПоставщиков");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка эффективности сдерживания закупочных цен
        |с учетом цен отдельных поставщиков.'
        |;uk='Оцінка ефективності стримування купівельних цін
        |з урахуванням цін окремих постачальників.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ФормироватьВидыЗапасовПоПоставщикам");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеПланаЗакупок);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка фактического состояния закупок товаров по плану.
        |Какие заказы поставщикам еще не поступили на склад?'
        |;uk='Оцінка фактичного стану купівель товарів за планом.
        |Які замовлення постачальникам ще не надійшли на склад?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаЗакупокПоПодразделениям");
	ОписаниеВарианта.Описание = НСтр("ru='Динамика фактического исполнения плана в разрезе подразделений и номенклатуры.';uk='Динаміка фактичного виконання плану в розрізі підрозділів та номенклатури.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаЗакупокПоПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru='Динамика фактического исполнения плана в разрезе поставщиков и номенклатуры.';uk='Динаміка фактичного виконання плану в розрізі постачальників і номенклатури.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаЗакупокПоСкладам");
	ОписаниеВарианта.Описание = НСтр("ru='Динамика фактического исполнения плана в разрезе складов и номенклатуры.';uk='Динаміка фактичного виконання плану в розрізі складів та номенклатури.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаОплатПоПоставщикам");
	ОписаниеВарианта.Описание = НСтр("ru='Проверка исполнения плана по фактическому расходу денежных средств.
        |План и факт поставок от поставщика за период.'
        |;uk='Перевірка виконання плану по фактичній витраті грошових коштів.
        |План і факт надходжень від постачальника за період.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеПланаПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка фактического состояния продаж товаров по плану.
        |Какие заказы клиентов еще не отгружены со склада?'
        |;uk='Оцінка фактичного стану продажів товарів за планом.
        |Які замовлення клієнтів ще не відвантажені зі складу?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаОплатПоКлиентам");
	ОписаниеВарианта.Описание = НСтр("ru='Проверка исполнения плана оплат по фактическому приходу денежных средств.
        |Плана и факт отгрузок клиенту за период.'
        |;uk='Перевірка виконання плану оплат за фактичному надходженню грошових коштів.
        |Плану і факт відвантаження клієнтові за період.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПродажПоКлиентам");
	ОписаниеВарианта.Описание = НСтр("ru='Динамика фактического исполнения плана в разрезе клиентов и номенклатуры.';uk='Динаміка фактичного виконання плану в розрізі клієнтів та номенклатури.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПродажПоМенеджерам");
	ОписаниеВарианта.Описание = НСтр("ru='Динамика фактического исполнения плана в разрезе менеджеров и номенклатуры.';uk='Динаміка фактичного виконання плану в розрізі менеджерів та номенклатури.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПродажПоПодразделениям");
	ОписаниеВарианта.Описание = НСтр("ru='Динамика фактического исполнения плана в разрезе подразделений и номенклатуры.';uk='Динаміка фактичного виконання плану в розрізі підрозділів та номенклатури.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаПродажПоСкладам");
	ОписаниеВарианта.Описание = НСтр("ru='Динамика фактического исполнения плана в разрезе складов и номенклатуры.';uk='Динаміка фактичного виконання плану в розрізі складів та номенклатури.'");
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеПланаСборкиРазборки);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Выполнен ли план сборок (разборок)?
        |Насколько выполнен по факту?'
        |;uk='Чи виконаний план збирань (розбирань)?
        |Наскільки виконаний за фактом?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИсполнениеПланаСборкиРазборки");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка фактического состояния сборки (разборки) товаров по плану.
        |Какие заказы на сборку (разборку) еще не поступили на склад?'
        |;uk='Оцінка фактичного стану збирання (розбирання) товарів за планом.
        |Які замовлення на збирання (розбирання) ще не надійшли на склад?'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.Склад.Подсистема.ВнутреннееТовародвижение");
	ОписаниеВарианта.Размещение.Удалить(Подсистема);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеРаспоряженийНаПеремещениеСборку);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеРаспоряженийНаПоступление);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КалендарьСобытий);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Список текущих дел - просроченных и запланированных.';uk='Список поточних справ - прострочених і запланованих.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Список текущих дел - просроченных и запланированных.';uk='Список поточних справ - прострочених і запланованих.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КартаПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ объемов продаж с помощью географической карты.';uk='Аналіз обсягів продажу за допомогою географічної карти.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КартаПродаж");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ объемов продаж с помощью географической карты.';uk='Аналіз обсягів продажу за допомогою географічної карти.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаПартииПоНалоговымНазначениям);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаРасчетовПоПереданнойВозвратнойТаре);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаРасчетовПоПринятойВозвратнойТаре);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаРасчетовСКлиентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаРасчетовСКлиентами");
	ОписаниеВарианта.Описание = НСтр("ru='Расшифровка взаиморасчетов до документов регистраторов.
        |Какие документы сформировали текущее сальдо расчетов?
        |Как изменялись взаиморасчеты за период?'
        |;uk='Розшифровка взаєморозрахунків до документів реєстраторів.
        |Які документи сформували поточне сальдо розрахунків?
        |Як змінювалися взаєморозрахунки за період?'");
	ОписаниеВарианта.Включен = Истина;

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаРасчетовСПоставщиками);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаРасчетовСПоставщиками");
	ОписаниеВарианта.Описание = НСтр("ru='Расшифровка взаиморасчетов до документов регистраторов.
        |Какие документы сформировали текущее сальдо расчетов?
        |Как изменялись взаиморасчеты за период?'
        |;uk='Розшифровка взаєморозрахунків до документів реєстраторів.
        |Які документи сформували поточне сальдо розрахунків?
        |Як змінювалися взаєморозрахунки за період?'");
	ОписаниеВарианта.Включен = Истина;
	
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтактнаяИнформация);
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "СмТакже");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru='Информация о клиентах, поставщиках, их основном менеджере, 
        |ABC/XYZ-классификации и контактной информации.'
        |;uk='Інформація про клієнтів, постачальників, їх основного менеджера, 
        |ABC/XYZ-класифікацію і контактну інформацію.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПоКонтаткнымЛицам");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "СмТакже");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru='Информация о контактных лицах.';uk='Інформація про контактних осіб.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольНомеровГТДТоваров);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль корректности учета операций с импортными товарами с указанием кодов УКТВЭД и номеров ГТД товаров.';uk='Контроль коректності обліку операцій з імпортними товарами із зазначенням кодів УКТЗЕД та номерів ВМД товарів.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольНомеровГТДТоваров");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль корректности учета операций с импортными товарами с указанием кодов УКТВЭД и номеров ГТД товаров.';uk='Контроль коректності обліку операцій з імпортними товарами із зазначенням кодів УКТЗЕД та номерів ВМД товарів.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольНомеровГТДТоваровБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольОперацийСДенежнымиСредствами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль корректности операций с денежными средствами:
        |- подотчетные лица,
        |- эквайринг (операции с платежными картами),
        |- конвертация валют,
        |- перемещения внутри организации,
        |- перемещения между организациями.'
        |;uk='Контроль коректності операцій з грошовими коштами:
        |- підзвітні особи,
        |- еквайринг (операції з платіжними картами),
        |- конвертація валют,
        |- переміщення всередині організації,
        |- переміщення між організаціями.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольОперацийСДенежнымиСредствами");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный контроль корректности операций с денежными средствами.';uk='Зведений контроль коректності операцій з грошовими коштами.'");

	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольОформленияДокументовТовародвижений);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль корректности операций с товарно-материальными ценностями.';uk='Контроль коректності операцій з товарно-матеріальними цінностями.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольОформленияДокументовТовародвижений");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль отражения операций с детализацией до номенклатуры.';uk='Контроль відображення операцій з деталізацією до номенклатури.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводныйКонтрольОформленияДокументовТовародвижений");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль отражения операций сводно по номенклатуре с детализацией до документа.';uk='Контроль відображення операцій зведено по номенклатурі з деталізацією до документа.'");
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Все ли возвраты товаров оформлены?
        |Все ли отчеты комиссии оформлены? Каковы остатки комиссионных товаров?
        |Все ли передачи товаров оформлены?'
        |;uk='Чи всі повернення товарів оформлені?
        |Чи всі звіти комісії оформлені? Які залишки комісійних товарів?
        |Чи всі передачі товарів оформлені?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОформлениеВозвратовТоваров");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ возвращенных организации товаров в рамках заключенных договоров комиссии.
        |Кто отправитель и получатель?'
        |;uk='Аналіз повернутих організації товарів у рамках укладених договорів комісії.
        |Хто відправник і одержувач?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОформлениеОтчетовПоКомиссии");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ товаров, которые были переданы на комиссию другой организации.
        |Какие получатели еще не отчитались?'
        |;uk='Аналіз товарів, які були передані на комісію іншій організації.
        |Які одержувачі ще не відзвітували?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОформлениеПередачТоваров");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ товаров, проданных по схеме интеркампани.
        |Кто отправитель и получатель?'
        |;uk='Аналіз товарів, проданих за схемою інтеркампані.
        |Хто відправник і одержувач?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыНаКомиссии");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ имеющихся остатков комиссионных товаров организации.
        |От каких организаций приняты товары на комиссию?'
        |;uk='Аналіз наявних залишків комісійних товарів організації.
        |Від яких організацій товари прийняті на комісію?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОформлениеВозвратовТоваровКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОформлениеПередачТоваровКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОформлениеОтчетовПоКомиссииКонтекст");
	
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КредиторскаяЗадолженность);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ задолженности перед поставщиками с разбивкой по интервалам долга.
        |Например, 0-7 дней, 7-15 дней, 15-30 дней, более 30 дней.'
        |;uk='Аналіз заборгованості перед постачальниками з розбивкою по інтервалах боргу.
        |Наприклад, 0-7 днів, 7-15 днів, 15-30 днів, більше 30 днів.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КредиторскаяЗадолженность");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ задолженности перед поставщиками с разбивкой по интервалам долга.
        |Например, 0-7 дней, 7-15 дней, 15-30 дней, более 30 дней.'
        |;uk='Аналіз заборгованості перед постачальниками з розбивкою по інтервалах боргу.
        |Наприклад, 0-7 днів, 7-15 днів, 15-30 днів, більше 30 днів.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЛимитыРасходаДенежныхСредств);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='План-фактный анализ использования лимитов за период.';uk='План-фактний аналіз використання лімітів за період.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИспользованияЛимитовРасходаДенежныхСредств");
	ОписаниеВарианта.Описание = НСтр("ru='План-фактный анализ использования лимитов за период.
        |По каким статьям ДДС есть превышение или лимит израсходован не полностью?'
        |;uk='План-фактний аналіз використання лімітів за період.
        |За якими статтями РГК є перевищення або ліміт витрачений не повністю?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ЛимитыРасходаДенежныхСредствКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОплатаЗаявокНаРасходованиеДенежныхСредств);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОплатаЗаявокНаРасходованиеДенежныхСредств");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МатериалыВЭксплуатации);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько и каких товарно-материальных ценностей передано сотрудникам в эксплуатацию?';uk='Скільки і яких товарно-матеріальних цінностей передано співробітникам в експлуатацію?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТМЦВЭксплуатации");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько и каких товарно-материальных ценностей передано сотрудникам в эксплуатацию?';uk='Скільки і яких товарно-матеріальних цінностей передано співробітникам в експлуатацію?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ТМЦВЭксплуатацииКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МониторЦелевыхПоказателей);
	ОписаниеОтчета.Размещение.Очистить();
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "МониторЦелевыхПоказателей");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль ключевых (целевых) показателей деятельности предприятия.';uk='Контроль ключових (цільових) показників діяльності підприємства.'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.НаличныеДенежныеСредства);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборачиваемостьЗапасов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какая оборачиваемость у товаров?';uk='Яка оборотність товарів?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборачиваемостьЗапасов");
	ОписаниеВарианта.Описание = НСтр("ru='На каких складах оборачиваемость товаров низкая?
        |Каковы текущие остатки и уровень запасов интересующих товаров?'
        |;uk='На яких складах оборотність товарів низька?
        |Які поточні залишки і рівень запасів товарів, що цікавлять?'");
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиИДвиженияДенежныхСредствСводно);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиИДвиженияДенежныхСредствВКассахККМ);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль денежных средств в кассах ККМ.';uk='Контроль грошових коштів в касах ККМ.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияДенежныхСредствККМ");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль денежных средств в кассах ККМ.
        |В какой кассе ККМ, когда и сколько денежных средств приходило или уходило?'
        |;uk='Контроль грошових коштів в касах ККМ.
        |У якій касі ККМ, коли і скільки грошових коштів надходило або йшло?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьНесколькоВалют");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияДенежныхСредствККМОднаВалюта");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль денежных средств в кассах ККМ.
        |В какой кассе ККМ, когда и сколько денежных средств приходило или уходило?'
        |;uk='Контроль грошових коштів в касах ККМ.
        |У якій касі ККМ, коли і скільки грошових коштів надходило або йшло?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеИспользоватьНесколькоВалют");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТоваровОрганизаций);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТоваровПереданныхНаКомиссию);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько, каких товаров у комиссионеров и по какой цене?';uk='Скільки, яких товарів у комісіонерів і за якою ціною?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажах");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПереданныхНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько, каких товаров у комиссионеров и по какой цене?
        |Когда товары были переданы на комиссию?'
        |;uk='Скільки, яких товарів у комісіонерів і за якою ціною?
        |Коли товари були передані на комісію?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажах");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТоваровПринятыхНаКомиссию);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько, каких товаров от комитентов и по какой цене?';uk='Скільки яких товарів від комітентів і за якою ціною?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупках");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПринятыхНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько, каких товаров от комитентов и по какой цене?
        |Когда товары были приняты на комиссию?'
        |;uk='Скільки яких товарів від комітентів і за якою ціною?
        |Коли товари були прийняті на комісію?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупках");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияОтУсловийЗакупок);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияОтУсловийПродаж);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмпортныеТоварыКОформлению);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИмпортныеТоварыКОформлению");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьИмпортныеЗакупки");
	ОписаниеВарианта.Описание = НСтр("ru='По каким товарам не оформлены таможенные декларации?';uk='За якими товарами не оформлені митні декларації?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОформлениеОтчетовКомитенту);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль за своевременным предоставлением отчетности комитенту.';uk='Контроль за своєчасним наданням звітності комітенту.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупках");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОформлениеОтчетовКомитенту");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль за своевременным предоставлением отчетности комитенту.
        |По каким товарам, на какие количество и сумму мы не отчитались?'
        |;uk='Контроль за своєчасним наданням звітності комітенту.
        |За яким товарів, на які кількість і суму ми не відзвітували?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупках");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОценкаРентабельностиПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
    
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПартнерыКоторымОтгрузкаЗапрещена);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Каким клиентам запрещена отгрузка?';uk='Яким клієнтам заборонене відвантаження?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьЗапретОтгрузки");
	ОписаниеОтчета.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПартнерыКоторымОтгрузкаЗапрещена");
	ОписаниеВарианта.Описание = НСтр("ru='Каким клиентам запрещена отгрузка?
        |Кто основной менеджер клиента?
        |Какие причины запрета?'
        |;uk='Яким клієнтам заборонена відвантаження?
        |Хто основний менеджер клієнта?
        |Які причини заборони?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьЗапретОтгрузки");
	ОписаниеОтчета.ВидимостьПоУмолчанию = Ложь;
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПереданнаяВозвратнаяТара);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка количества и залоговых суммы невозвращенной клиентом тары.';uk='Оцінка кількості і заставної суми неповернутої клієнтом тари.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПереданнаяВозвратнаяТара");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка количества и залоговых суммы невозвращенной (или возвращенной не вовремя) клиентом тары.
        |Каковы сроки наступления ближайших возвратов?'
        |;uk='Оцінка кількості і заставних суми неповернутої (або повернутої не вчасно) клієнтом тари.
        |Які строки настання найближчих повернень?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПересеченияСегментаНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПересеченияСегментаПартнеров);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализКредитовИДепозитов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ отклонений по фактически произведенным оплатам и начислениям
        |в рамках заключенных кредитных (депозитных) договоров с учетом комиссии.'
        |;uk='Аналіз відхилень за фактично виробленими оплатами та нарахуваннями
        |в рамках укладених кредитних (депозитних) договорів з урахуванням комісії.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПланФактныйАнализ");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ отклонений по фактически произведенным оплатам и начислениям
        |в рамках заключенных кредитных (депозитных) договоров с учетом комиссии.'
        |;uk='Аналіз відхилень за фактично виробленими оплатами та нарахуваннями
        |в рамках укладених кредитних (депозитних) договорів з урахуванням комісії.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПланФактныйАнализКонтекст");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализРаботыТорговыхПредставителейПоКоличеству);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сравнение плановых и фактических количественных показателей торгового представителя.';uk='Порівняння планових і фактичних кількісних показників торгового представника.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеЗаданийПоНоменклатуре");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ исполнения заданий торговыми представителями.';uk='Аналіз виконання завдань торговими представниками.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеЗаданийПоПредставителям");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ исполнения заданий торговыми представителями с точностью до номенклатуры.';uk='Аналіз виконання завдань торговими представниками з точністю до номенклатури.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализРаботыТорговыхПредставителейПоСумме);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сравнение плановых и фактических суммовых показателей торгового представителя.';uk='Порівняння планових і фактичних сумових показників торгового представника.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВыполнениеЗаданийПоСумме");
	ОписаниеВарианта.Описание = НСтр("ru='Сравнение плановых и фактических суммовых показателей торгового представителя.';uk='Порівняння планових і фактичних сумових показників торгового представника.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПлатежнаяДисциплинаКлиентов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Как часто, на сколько дней и какие клиенты задерживают оплаты?';uk='Як часто, на скільки днів і які клієнти затримують оплати?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПлатежнаяДисциплинаКлиентов");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль просроченной задолженности у клиентов в течении выбранного периода.
        |Как часто, на сколько дней и какие клиенты задерживают оплаты?'
        |;uk='Контроль простроченої заборгованості в клієнтів протягом вибраного періоду.
        |Як часто, на скільки днів і які клієнти затримують оплати?'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПрайсЛист);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какие цены установлены на товары?';uk='Які ціни встановлені на товари?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрайсЛист");
	ОписаниеВарианта.Описание = НСтр("ru='Формирование прайс-листа по выбранным ценам, 
        |при необходимости только товары в наличии.'
        |;uk='Формування прайс-листа по обраним цінами, 
        |при необхідності тільки товари в наявності.'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПрайсЛистКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПрайсЛистДляПриемаЗаказов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Печатная форма прайс-листа для выдачи торговому представителю.';uk='Друкована форма прайс-листа для видачі торговому представнику.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Печатная форма прайс-листа для выдачи торговому представителю.';uk='Друкована форма прайс-листа для видачі торговому представнику.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПримененныеСкидкиВДокументе);
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПринятаяВозвратнаяТара);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка количества и залоговых суммы принятой тары.';uk='Оцінка кількості і заставної суми прийнятої тари.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПринятаяВозвратнаяТара");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка количества и залоговых суммы принятой тары.
        |Каковы сроки наступления ближайших возвратов тары поставщикам?'
        |;uk='Оцінка кількості і заставних суми прийнятої тари.
        |Які тарміни настання найближчих повернень тари постачальникам?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПричиныЗапретаОтгрузки);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПродажиМеждуОрганизациями);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ прибыли при продажах между организациями предприятия.';uk='Аналіз прибутку при продажах між організаціями підприємства.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиМеждуОрганизациями");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ прибыли, полученной при оформлении продаж товаров между организациями, 
        |входящими в состав торгового предприятия.'
        |;uk='Аналіз прибутку, отриманого при оформленні продажу товарів між організаціями, 
        |що входять до складу торгового підприємства.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПродажиСравнениеАналогичныхПериодов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеПродажАналогичныхПериодовБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ структуры и изменений выручки за несколько периодов - лет, месяцев,
        |недель, дней.'
        |;uk='Аналіз структури і змін виторгу за кілька періодів - років, місяців,
        |тижнів, днів.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СравнениеПродажАналогичныхПериодов");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПродажиСравнениеДвухПериодов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РейтингПродажДвухПериодовБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ тренда продаж по сравнению с прошлым перидом?
        |Понижаются или повышаются продажи?'
        |;uk='Аналіз тренду продажів порівняно з минулим перидом?
        |Знижуються або підвищуються продажі?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РейтингПродажДвухПериодов");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеВыручкиДвухПериодовБизнесРегионы");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ продаж по двум периодам
        |по бизнес-регионам и видам номенклатуры.'
        |;uk='Зведений аналіз продажів по двом періодам
        |за бізнес-регіонами та видами номенклатури.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СравнениеВыручкиДвухПериодов");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПроизводительностьРаботниковСклада);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка количества обработанных складскими сотрудниками заданий.';uk='Оцінка кількості оброблених складськими співробітниками завдань.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПроизводительностьРаботниковСклада");
	ОписаниеВарианта.Описание = НСтр("ru='Оценка количества обработанных складскими сотрудниками грузов за период.
        |Сколько приемок, размещений, отборов или пересчетов было сделано?'
        |;uk='Оцінка кількості оброблених складськими співробітниками вантажів за період.
        |Скільки приймань, розміщень, відборів або перерахунків було зроблено?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПросроченныеЗадачи);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗадачиВыполненныеСНарушениемСроков");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РаспределениеТорговыхПредставителей);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Когда, по какому заданию и к какому клиенту планируется визит?';uk='Коли, за яким завданням і до якого клієнту планується візит?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КалендарьВизитовТорговыхПредставителей");
	ОписаниеВарианта.Описание = НСтр("ru='Когда, по какому заданию и к какому клиенту планируется визит?';uk='Коли, за яким завданням і до якого клієнту планується візит?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасчетыМеждуОрганизациями);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль взаиморасчетов между организациями, входящими в состав предприятия.';uk='Контроль взаєморозрахунків між організаціями, що входять до складу підприємства.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыПоЗакупкам");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль взаиморасчетов между организациями, входящими в состав предприятия.
        |Сколько организация-покупатель должна организации-продавцу?
        |Уменьшился или увеличился долг за выбранный период?'
        |;uk='Контроль взаєморозрахунків між організаціями, що входять до складу підприємства.
        |Скільки організація-покупець повинна організації-продавцю?
        |Зменшився або збільшився борг за вибраний період?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасчетыСКлиентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Детальный анализ взаиморасчетов с клиентами.
        |Как изменялась задолженность за указанный период?
        |Какое текущее сальдо расчетов?'
        |;uk='Детальний аналіз взаєморозрахунків з клієнтами.
        |Як змінювалася заборгованість за вказаний період?
        |Яке поточне сальдо розрахунків?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСКлиентами");
	ОписаниеВарианта.Описание = НСтр("ru='Детальный анализ взаиморасчетов с клиентами.
        |Как изменялась задолженность за указанный период?
        |Какое текущее сальдо расчетов?'
        |;uk='Детальний аналіз взаєморозрахунків з клієнтами.
        |Як змінювалася заборгованість за вказаний період?
        |Яке поточне сальдо розрахунків?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСКлиентамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	ТекстОписания = НСтр("ru='Суммовые оценки отклонений от курса НБУ при валютных взаиморасчетах с клиентами.';uk='Сумові оцінки відхилень від курсу НБУ при валютних взаєморозрахунках з клієнтами.'");
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияСуммыВзаиморасчетовПоКлиентам);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = ТекстОписания;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтклоненияСуммыВзаиморасчетовПоКлиентам");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = ТекстОписания;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасчетыСПартнерами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПартнерами");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ взаиморасчетов с клиентами и поставщиками.
        |Как изменялась задолженность за указанный период?
        |Какое текущее сальдо расчетов?'
        |;uk='Зведений аналіз взаєморозрахунків з клієнтами і постачальниками.
        |Як змінювалася заборгованість за вказаний період?
        |Яке поточне сальдо розрахунків?'");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПартнерамиБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='Сводный анализ взаиморасчетов с клиентами и поставщиками.
        |Как изменялась задолженность за указанный период?
        |Какое текущее сальдо расчетов?'
        |;uk='Зведений аналіз взаєморозрахунків з клієнтами і постачальниками.
        |Як змінювалася заборгованість за вказаний період?
        |Яке поточне сальдо розрахунків?'");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоКонтрагентамКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоКонтрагентамКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоПартнерамКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоПартнерамКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоСверкеВзаиморасчетовКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоСверкеВзаиморасчетовКонтекстБазовая");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасчетыСПоставщиками);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Детальный анализ взаиморасчетов с поставщиками.
        |Как изменялась задолженность за указанный период?
        |Какое текущее сальдо расчетов?'
        |;uk='Детальний аналіз взаєморозрахунків з постачальниками.
        |Як змінювалася заборгованість за вказаний період?
        |Яке поточне сальдо розрахунків?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПоставщиками");
	ОписаниеВарианта.Описание = НСтр("ru='Детальный анализ взаиморасчетов с поставщиками.
        |Как изменялась задолженность за указанный период?
        |Какое текущее сальдо расчетов?'
        |;uk='Детальний аналіз взаєморозрахунків з постачальниками.
        |Як змінювалася заборгованість за вказаний період?
        |Яке поточне сальдо розрахунків?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПоставщикамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	
	ТекстОписания = НСтр("ru='Суммовые оценки отклонений от курса НБУ при валютных взаиморасчетах с поставщиками.';uk='Сумові оцінки відхилень від курсу НБУ при валютних взаєморозрахунки з постачальниками.'");
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтклоненияСуммыВзаиморасчетовПоПоставщикам);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = ТекстОписания;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтклоненияСуммыВзаиморасчетовПоПоставщикам");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = ТекстОписания;
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрКредитовИДепозитов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Реквизиты договоров кредитов и депозитов.';uk='Реквізити договорів кредитів і депозитів.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РеестрДоговоровКредитовДепозитов");
	ОписаниеВарианта.Описание = НСтр("ru='Договоры указанного типа (кредиты или депозиты) с реквизитами,
        |суммами плана оплат и начислений, фактом оплат и начислений,
        |отклонениями и остатком долга по договору.'
        |;uk='Договори зазначеного типу (кредити або депозити) з реквізитами,
        |сумами плану оплат та нарахувань, фактом оплат та нарахувань,
        |відхиленнями та залишком боргу за договором.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрНормативноСправочнойИнформации);
	ОтключитьОтчет(ОписаниеОтчета);	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрУчетныхДанных);
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатыСогласованияЗакупки);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатыСогласованияПродажи);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СбалансированностьПлановУТ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Выполнимы ли планы потребностей за счет планов обеспечения?';uk='Чи здійсненні плани потреб за рахунок планів забезпечення?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СбалансированностьПланов");
	ОписаниеВарианта.Описание = НСтр("ru='Проверка корректности составленных планов. 
        |Выполнимы ли планы потребностей за счет планов обеспечения?'
        |;uk='Перевірка коректності складених планів. 
        |Чи здійсненні плани потреб за рахунок планів забезпечення?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаРасчетовСПартнерами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ задокументированных сверок расчетов с клиентами.
        |Есть ли расхождения между данными от клиента и нашими?'
        |;uk='Аналіз задокументованих звірок розрахунків з клієнтами.
        |Є розбіжності між даними від клієнта і нашими?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаРасчетовСПартнерами");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ задокументированных сверок расчетов с клиентами.
        |Есть ли расхождения между данными от клиента и нашими?'
        |;uk='Аналіз задокументованих звірок розрахунків з клієнтами.
        |Є розбіжності між даними від клієнта і нашими?'");
	
		
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СертификатыНоменклатурыСИстекающимСрокомДействия);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СоставПродажи);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СоставСегмента);
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеВыполненияДокументов);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСКлиентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Текущее состояние расчетов с клиентами.
        |Какой долг клиента сейчас? На какую сумму планируется отгрузка?
        |На какую сумма ожидается оплата от клиента?'
        |;uk='Поточний стан розрахунків з клієнтами.
        |Який борг клієнта зараз? На яку суму планується відвантаження?
        |На яку суму очікується оплата від клієнта?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентами");
	ОписаниеВарианта.Описание = НСтр("ru='Текущее состояние расчетов с клиентами.
        |Какой долг клиента сейчас? На какую сумму планируется отгрузка?
        |На какую сумма ожидается оплата от клиента?'
        |;uk='Поточний стан розрахунків з клієнтами.
        |Який борг клієнта зараз? На яку суму планується відвантаження?
        |На яку суму очікується оплата від клієнта?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентомКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентомКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентамиКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКлиентамиКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовУпрощенныйКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовУпрощенныйКонтекстБазовая");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСКлиентамиСамообслуживание);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ОтключитьОтчет(ОписаниеОтчета);	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСКомиссионерами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько комиссионер должен нам за проданные товары?
        |Сколько мы должны комиссионеру, например, по вознаграждениям?'
        |;uk='Скільки комісіонер повинен нам за продані товари?
        |Скільки ми повинні комісіонеру, наприклад, з винагород?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомиссионерами");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько комиссионер должен нам за проданные товары?
        |Сколько мы должны комиссионеру, например, по вознаграждениям?'
        |;uk='Скільки комісіонер повинен нам за продані товари?
        |Скільки ми повинні комісіонеру, наприклад, з винагород?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажахНеБазовая");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомиссионерамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажахБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомиссионерамиКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомиссионерамиКонтекстБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСКомитентами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько мы должны комитенту за реализованные товары?
        |Сколько комитент должен нам, например, по вознаграждениям?'
        |;uk='Скільки ми повинні комітенту за реалізовані товари?
        |Скільки комітент повинен нам, наприклад, з винагород?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомитентами");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько мы должны комитенту за реализованные товары?
        |Сколько комитент должен нам, например, по вознаграждениям?'
        |;uk='Скільки ми повинні комітенту за реалізовані товари?
        |Скільки комітент повинен нам, наприклад, з винагород?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупкахНеБазовая");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомитентамиБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупкахБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомитентамиКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСКомитентамиКонтекстБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СостояниеРасчетовСПоставщиками);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Текущее состояние расчетов с поставщиками.
        |Какой долг поставщику сейчас? На какую сумму планируется поступление?
        |На какую сумма ожидается оплата поставщику?'
        |;uk='Поточний стан розрахунків з постачальниками.
        |Який борг постачальнику зараз? На яку суму планується надходження?
        |На яку сума очікується оплата постачальнику?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщиками");
	ОписаниеВарианта.Описание = НСтр("ru='Текущее состояние расчетов с клиентами.
        |Какой долг поставщику сейчас? На какую сумму планируется поступление?
        |На какую сумма ожидается оплата поставщику?'
        |;uk='Поточний стан розрахунків з клієнтами.
        |Який борг постачальнику зараз? На яку суму планується надходження?
        |На яку сума очікується оплата постачальнику?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикамиБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='Текущее состояние расчетов с клиентами.
        |Какой долг поставщику сейчас? На какую сумму планируется поступление?
        |На какую сумма ожидается оплата поставщику?'
        |;uk='Поточний стан розрахунків з клієнтами.
        |Який борг постачальнику зараз? На яку суму планується надходження?
        |На яку сума очікується оплата постачальнику?'");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовПоОбъектуРасчетовКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикомКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикомКонтекстБазовая");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикамиКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СостояниеРасчетовСПоставщикамиКонтекстБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправочноеРазмещениеНоменклатуры);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Для каких товаров в наличии не назначена основная ячейка?
        |Какие ячейки пусты и не назначены для товаров?'
        |;uk='Для яких товарів в наявності не призначена основна комірка?
        |Які комірки пусті і не призначені для товарів?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РазмещениеНоменклатурыПоЯчейкамСправочно");
	ОписаниеВарианта.Описание = НСтр("ru='Для каких товаров в наличии не назначена основная ячейка?
        |Какие ячейки пусты и не назначены для товаров?'
        |;uk='Для яких товарів в наявності не призначена основна комірка?
        |Які комірки пусті і не призначені для товарів?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РазмещениеНоменклатурыПоЯчейкамСправочноКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнениеГрафиковКредитовИДепозитов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ отклонений между двумя вариантами графиков по кредитным (депозитным) договорам.';uk='Аналіз відхилень між двома варіантами графіків по кредитних (депозитних) договорах.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СравнениеВариантовГрафиков");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ отклонений между двумя вариантами графиков по кредитным (депозитным) договорам.';uk='Аналіз відхилень між двома варіантами графіків по кредитних (депозитних) договорах.'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СравнениеВариантовГрафиковКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнениеСегментовПартнеров);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько клиентов в сегментах?
        |Какой объем продаж по сегментам?
        |Какое количество сделок и их состояние.'
        |;uk='Скільки клієнтів у сегментах?
        |Який обсяг продажів по сегментах?
        |Яка кількість угод та їх стан.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько клиентов в сегментах?
        |Какой объем продаж по сегментам?
        |Какое количество сделок и их состояние.'
        |;uk='Скільки клієнтів у сегментах?
        |Який обсяг продажів по сегментах?
        |Яка кількість угод та їх стан.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнительныйАнализДинамикиАссортиментаИПродаж);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Как изменяется наполнение ассортимента со временем?';uk='Як змінюється наповнення асортименту з часом?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПоКатегориям");
	ОписаниеВарианта.Описание = НСтр("ru='Как изменяется наполнение ассортимента со временем?';uk='Як змінюється наповнення асортименту з часом?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СравнительныйАнализПоказателейРаботыМенеджеров);
	ОписаниеОтчета.ФорматНастроекСКД = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Комплексный анализ показателей, характеризующих эффективность работы менеджеров.';uk='Комплексний аналіз показників, що характеризують ефективність роботи менеджерів.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='Продажи
        |Прибыль
        |Поступление денежных средств
        |Выручка (по оплате) минус себестоимость (по отгрузке)
        |Соблюдение условий продаж
        |Потери
        |Ручные скидки
        |Продажи на одну сделку
        |Продажи на одно взаимодействие
        |Основные этапы потерь
        |Причины проигрыша сделок
        |Причины неудовлетворения первичного спроса
        |Динамика клиентской базы
        |Продажи новым клиентам
        |Претензии клиентов
        |Причины возникновения претензий клиентов'
        |;uk='Продажі
        |Прибуток
        |Надходження грошових коштів
        |Виторг (по оплаті) мінус собівартість (по відвантаженню)
        |Дотримання умов продажів
        |Втрати
        |Ручні знижки
        |Продажі на одну операцію
        |Продажі на одне взаємодія
        |Основні етапи втрат
        |Причини програшу угод
        |Причини незадоволення первинного попиту
        |Динаміка клієнтської бази
        |Продажі новим клієнтам
        |Претензії клієнтів
        |Причини виникнення претензій клієнтів'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru='Анализируемый период
        |Период для сравнения
        |Показатели
        |Годовая ставка
        |Подразделение
        |Менеджер'
        |;uk='Аналізований період
        |Період для порівняння
        |Показники
        |Річна ставка
        |Підрозділ
        |Менеджер'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Комплексный анализ показателей, характеризующих эффективность работы менеджеров.
        |Таких, как продажи, прибыль, поступление ДС, скидки и другие.'
        |;uk='Комплексний аналіз показників, що характеризують ефективність роботи менеджерів.
        |Таких, як продажі, прибуток, надходження коштів, знижки та інші.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='Продажи
        |Прибыль
        |Поступление денежных средств
        |Выручка (по оплате) минус себестоимость (по отгрузке)
        |Соблюдение условий продаж
        |Потери
        |Ручные скидки
        |Продажи на одну сделку
        |Продажи на одно взаимодействие
        |Основные этапы потерь
        |Причины проигрыша сделок
        |Причины неудовлетворения первичного спроса
        |Динамика клиентской базы
        |Продажи новым клиентам
        |Претензии клиентов
        |Причины возникновения претензий клиентов'
        |;uk='Продажі
        |Прибуток
        |Надходження грошових коштів
        |Виторг (по оплаті) мінус собівартість (по відвантаженню)
        |Дотримання умов продажів
        |Втрати
        |Ручні знижки
        |Продажі на одну операцію
        |Продажі на одне взаємодія
        |Основні етапи втрат
        |Причини програшу угод
        |Причини незадоволення первинного попиту
        |Динаміка клієнтської бази
        |Продажі новим клієнтам
        |Претензії клієнтів
        |Причини виникнення претензій клієнтів'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru='Анализируемый период
        |Период для сравнения
        |Показатели
        |Годовая ставка
        |Подразделение
        |Менеджер'
        |;uk='Аналізований період
        |Період для порівняння
        |Показники
        |Річна ставка
        |Підрозділ
        |Менеджер'");
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТекущаяНаполненностьАссортимента);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какова роль, стадия жизни товара в ассортименте?';uk='Яка роль, стадія життя товару в асортименті?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТекущаяНаполненностьАссортимента");
	ОписаниеВарианта.Описание = НСтр("ru='Какова роль, стадия жизни товара в ассортименте?
        |В каких форматах магазинов товар представлен и по какой цене?'
        |;uk='Яка роль, стадія життя товару в асортименті?
        |У яких форматах магазинів товар представлений і за якою ціною?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТекущиеКвотыАссортимента);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Состав и объемы квот товаров ассортимента.';uk='Склад і обсяги квот товарів асортименту.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрисутствиеМаркиВКатегориях");
	ОписаниеВарианта.Описание = НСтр("ru='В каких категориях товаров присутствуют различные марки?';uk='В яких категоріях товарів присутні різні марки?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТекущиеКвотыАссортимента");
	ОписаниеВарианта.Описание = НСтр("ru='Какие квоты действуют на товары для различных форматов магазинов?';uk='Які квоти діють на товари різних форматів магазинів?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварныйКалендарь);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы текущие остатки товаров на складах? 
        |Когда планируются отгрузки и поступления товаров?'
        |;uk='Які поточні залишки товарів на складах? 
        |Коли плануються відвантаження і надходження товарів?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварныйКалендарь");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы текущие остатки товаров на складах? 
        |Когда планируются отгрузки и поступления товаров?'
        |;uk='Які поточні залишки товарів на складах? 
        |Коли плануються відвантаження і надходження товарів?'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварныйОтчетТОРГ29);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='Товарый отчет
        |Организация
        |Материально-ответственное лицо
        |МОЛ'
        |;uk='Товарый звіт
        |Організація
        |Матеріально-відповідальна особа
        |МВО'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru='Период
        |Организация
        |Склад
        |Номер отчета'
        |;uk='Період
        |Організація
        |Склад
        |Номер звіту'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыВЯчейках);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какие товары размещены по складским ячейкам?';uk='Які товари розміщені по складських комірках?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвиженияТоваровВнутриСклада");
	ОписаниеВарианта.Описание = НСтр("ru='Какие товары размещены по складским ячейкам?
        |Какие товары запланированы к непосредственной выемке или размещению?'
        |;uk='Які товари розміщені по складських комірках?
        |Які товари заплановані до безпосередньої виїмки або розміщення?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвиженияТоваровВЯчейкеКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвиженияТоваровПоЗаблокированнымЯчейкамКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоОбластиХраненияКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоСкладскойГруппеНоменклатурыКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоЯчейкеКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыКОтгрузке);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыКПоступлению);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='По каким товарам скоро истекает срок годности?';uk='В яких товарів скоро закінчується строк придатності?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПоСрокамГодности");
	ОписаниеВарианта.Описание = НСтр("ru='По каким товарам скоро истекает срок годности?
        |Сколько таких товаров и на каком складе?'
        |;uk='В яких товарів скоро закінчується строк придатності?
        |Скільки таких товарів і на якому складі?'");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоНоменклатуреКонтекст");

	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыПереданныеНаКомиссию);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько товаров было передано комиссионеру за период?';uk='Скільки товарів було передано комісіонеру за період?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПереданныеНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько товаров было передано комиссионеру за период?
        |Сколько он продал, списал, вернул или заказал за тот же период?'
        |;uk='Скільки товарів було передано комісіонеру за період?
        |Скільки він продав, списав, повернув або замовив за той же період?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажахНеБазовая");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПереданныеНаКомиссиюБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриПродажахБазовая");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыПринятыеНаКомиссию);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, Ложь);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько товаров было принято от комитентов за период?';uk='Скільки товарів було прийнято від комітентів за період?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПринятыеНаКомиссию");
	ОписаниеВарианта.Описание = НСтр("ru='Сколько товаров было принято от комитентов за период?
        |Сколько мы продали, списали, вернули или заказали за тот же период?'
        |;uk='Скільки товарів було прийнято від комітентів за період?
        |Скільки ми продали, списали, повернули або замовили за той же період?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупкахНеБазовая");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыПринятыеНаКомиссиюБазовая");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьКомиссиюПриЗакупкахБазовая");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварыСИстекающимиСертификатами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Товары с истекающими сертификатами");
	ОписаниеВарианта.Описание = НСтр("ru='По каким сертификатам заканчивается срок действия?';uk='За якими сертифікатами закінчується строк дії?'");
	ОписаниеВарианта.Включен = Истина;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.УправленческийБаланс);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ финансовых показателей на начало и конец периода и их изменения.';uk='Аналіз фінансових показників на початок та кінець періоду та їх зміни.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КонтрольБаланса");
	ОписаниеВарианта.Описание = НСтр("ru='Контроль финансовых показателей по месяцам и документам.';uk='Контроль фінансових показників по місяцях і документах.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "УправленческийБаланс");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы финансовые показатели по статьям активов и пассивов?
        |Каковы финансовые показатели по организациям и подразделениям?
        |Есть ли нарушение баланса?'
        |;uk='Які фінансові показники за статтями активів і пасивів?
        |Які фінансові показники за організаціями та підрозділами?
        |Чи є порушення балансу?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ФинансовоеСостояниеБазовая");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы финансовые показатели по статьям активов и обязательств?';uk='Які фінансові показники за статтями активів та зобов''язань?'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("БазоваяВерсия");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КарточкаАктиваПассиваКонтекст");
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КонтрольВводаОстатковКонтекст");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.УсловияЗакупок);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	ОписаниеВарианта.Описание = НСтр("ru='Сравнение условий закупки товаров у различных поставщиков.';uk='Порівняння умов купівлі товарів у різних постачальників.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "УсловияЗакупок");
	ОписаниеВарианта.Описание = НСтр("ru='Сравнение условий закупки товаров у различных поставщиков.';uk='Порівняння умов купівлі товарів у різних постачальників.'");
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.УсловияПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Сравнение фактических условий продаж товаров с зарегистрированными в соглашениях.';uk='Порівняння фактичних умов продажу товарів із зареєстрованими в офертах.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОбщиеПараметры");
	ОписаниеВарианта.Описание = НСтр("ru='Анализ типовых соглашений о продажах по видам цен, графикам оплат, периодам действия, хозяйственным операциям, складам и срокам поставки номенклатуры.';uk='Аналіз типових оферт про продажі за видами цін, графіків оплат, періодам дії, господарськими операціями, складів і термінів поставки номенклатури.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Цены");
	ОписаниеВарианта.Описание = НСтр("ru='Сводные данные по ценовым группам и соглашениям.';uk='Зведені дані за ціновими групами та офертами.'");
	

	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЭффективностьСделокСКлиентами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Какое количество сделок выиграно, проиграно или находится в работе?';uk='Яка кількість угод виграна, програна або знаходиться в роботі?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЭффективностьСделок");
	ОписаниеВарианта.Описание = НСтр("ru='Какое количество сделок выиграно, проиграно или находится в работе?
        |На какую потенциальную сумму продаж?'
        |;uk='Яка кількість угод виграна, програна або знаходиться в роботі?
        |На яку потенційну суму продажів?'");
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрТорговыхДокументов);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "СмТакже");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru='Список всех торговых документов';uk='Список всіх торгових документів'");
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.НастройкаСписка);
	ОтключитьОтчет(ОписаниеОтчета);
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаПоступленийПоНоменклатуре); 
	ОтключитьОтчет(ОписаниеОтчета);
	
		

	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольОперацийСДенежнымиСредствами);
	ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "КонтрольДенежныхСредствУПодотчетныхЛиц");
	
	
	
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаДанныхПартионногоУчетаИСебестоимости);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаДанныхПартионногоУчетаИСебестоимости");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПартионныйУчет");
	ОписаниеВарианта.Описание = НСтр("ru='Сверка движений по регистрам партионного учета и движений по регистру себестоимости.';uk='Звірка рухів по регістрах партіонного обліку і рухів по регістру собівартості.'");
	
КонецПроцедуры

// Содержит описания изменений имен вариантов отчетов. Используется
//   при обновлении информационной базы, в целях контроля ссылочной целостности
//   и для сохранения настроек варианта, сделанных администратором.
//
// Параметры:
//   Изменения (ТаблицаЗначений) Таблица изменений имен вариантов
//       	|- Отчет (ОбъектМетаданных)
//       	|- СтароеИмяВарианта (Строка)
//       	|- АктуальноеИмяВарианта (Строка)
//
// Описание:
//   В Изменения необходимо добавить описания изменений имен вариантов
//   отчетов, подключенных к подсистеме.
//
// Например:
//	ДобавитьИзменениеКлючей(Изменения, "<ИмяОтчета>", "<СтароеИмяВарианта>", "<АктуальноеИмяВарианта>");
//
// Важно:
//   Старое имя варианта резервируется и не может быть использовано в дальнейшем.
//   Если изменений было несколько, то каждое изменение необходимо зарегистрировать,
//   указывая в актуальном имени варианта последнее (текущее) имя варианта отчета.
//   Поскольку имена вариантов отчетов не выводятся в пользовательском интерфейсе,
//   то рекомендуется задавать их таким образом, что бы затем не менять.
//
Процедура ЗарегистрироватьИзмененияКлючейВариантовОтчетов(Изменения) Экспорт
	
	ДобавитьИзменениеКлючей(Изменения, "АнализДоступностиТоваров", "Основной", "ДоступныеДляПродажиТовары");
	ДобавитьИзменениеКлючей(Изменения, "АнализПоступленийРасходовТоваров", "АнализПоступленийТоваров", "СебестоимостьПоступившихТоваров");
	ДобавитьИзменениеКлючей(Изменения, "АнализПоступленийРасходовТоваров", "АнализРасходовТоваров", "СебестоимостьВыбывшихТоваров");
	ДобавитьИзменениеКлючей(Изменения, "АнализПоступленийРасходовТоваров", "АнализСписанийТоваров", "СебестоимостьСписанныхТоваров");
	ДобавитьИзменениеКлючей(Изменения, "ДебиторскаяЗадолженность", "ИнтервалыГоризонтально", "ДебиторскаяЗадолженность");
	ДобавитьИзменениеКлючей(Изменения, "ДебиторскаяЗадолженность", "ПоРасчетнымДокументам", "ДебиторскаяЗадолженностьПоРасчетнымДокументам");
	ДобавитьИзменениеКлючей(Изменения, "КредиторскаяЗадолженность", "ИнтервалыГоризонтально", "КредиторскаяЗадолженность");
	ДобавитьИзменениеКлючей(Изменения, "КредиторскаяЗадолженность", "ПоРасчетнымДокументам", "КредиторскаяЗадолженностьПоРасчетнымДокументам");
	ДобавитьИзменениеКлючей(Изменения, "ВедомостьПоТоварамНаСкладахВЦенахНоменклатуры", "Основной", "ВедомостьВЦенахНоменклатуры");
	ДобавитьИзменениеКлючей(Изменения, "ВедомостьПоТоварамОрганизаций", "ОстаткиТоваровПоВладельцамИПродавцам", "ДоступныеДляПродажиТоварыОрганизаций");
	ДобавитьИзменениеКлючей(Изменения, "ВедомостьПоТоварамОрганизацийВЦенахНоменклатуры", "Основной", "ВедомостьПоТоварамОрганизацийВЦенахНоменклатуры");
	ДобавитьИзменениеКлючей(Изменения, "ВыручкаИСебестоимостьПродаж", "ПродажиСписок", "ПродажиПоПартнерам");
	ДобавитьИзменениеКлючей(Изменения, "ВыручкаИСебестоимостьПродаж", "АнализПродажПоПоставщикам", "ПродажиПоПоставщикам");
	ДобавитьИзменениеКлючей(Изменения, "ВыручкаИСебестоимостьПродаж", "АнализПродажПоБизнесРегионамДиаграмма", "АнализПродажПоБизнесРегионам");
	ДобавитьИзменениеКлючей(Изменения, "ДинамикаПоказателейРаботыТорговыхПредставителей", "Основной", "ДинамикаПоказателейТорговыхПредставителей");
	ДобавитьИзменениеКлючей(Изменения, "КарточкаРасчетовСКлиентами", "Основной", "КарточкаРасчетовСКлиентами");
	ДобавитьИзменениеКлючей(Изменения, "КарточкаРасчетовСПоставщиками", "Основной", "КарточкаРасчетовСПоставщиками");
	ДобавитьИзменениеКлючей(Изменения, "ПланФактныйАнализРаботыТорговыхПредставителейПоКоличеству", 
		"ВыполнениеЗаданийПоКоличествуВРазрезеТорговыхПредставителей", "ВыполнениеЗаданийПоПредставителям");
	ДобавитьИзменениеКлючей(Изменения, "ПланФактныйАнализРаботыТорговыхПредставителейПоКоличеству", 
		"ВыполнениеЗаданийПоКоличествуВРазрезеНоменклатуры", "ВыполнениеЗаданийПоНоменклатуре");
	ДобавитьИзменениеКлючей(Изменения, "РаспределениеТорговыхПредставителей", "Основной", "КалендарьВизитовТорговыхПредставителей");
	ДобавитьИзменениеКлючей(Изменения, "РеестрКредитовИДепозитов", "Основной", "РеестрДоговоровКредитовДепозитов");
	ДобавитьИзменениеКлючей(Изменения, "РеестрКредитовИДепозитов", "Горизонтальный", "РеестрДоговоровКредитовДепозитовГоризонтальный");
	ДобавитьИзменениеКлючей(Изменения, "СостояниеРасчетовСКлиентами", "Основной", "СостояниеРасчетовСКлиентами");
	ДобавитьИзменениеКлючей(Изменения, "СостояниеРасчетовСПоставщиками", "Основной", "СостояниеРасчетовСПоставщиками");
	ДобавитьИзменениеКлючей(Изменения, "ТоварныйКалендарь", "Основной", "ТоварныйКалендарь");
	ДобавитьИзменениеКлючей(Изменения, "УправленческийБаланс", "ПоОрганизациям", "УправленческийБаланс");
	
КонецПроцедуры

// Возвращает имя отчета как оно задано в конфигураторе
//
// Параметры:
//   Форма (Форма) Форма отчета
//
// Возвращаемое значение:
//	Строка - имя отчета без "Отчет."
//
Функция ИмяОтчетаПоКлючуОбъекта(Форма) Экспорт
	Если Форма = Неопределено Тогда
		ИмяОтчета = Неопределено;
	Иначе
		Если ТипЗнч(Форма.НастройкиОтчета.ОтчетСсылка) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			ИмяОтчета = Форма.НастройкиОтчета.ОтчетСсылка.ИмяОбъекта;
		ИначеЕсли ТипЗнч(Форма.НастройкиОтчета.ОтчетСсылка) = Тип("Строка") Тогда
			ИмяОтчета = СтрЗаменить(Форма.НастройкиОтчета.ОтчетСсылка, "ВнешнийОтчет.", "");
		Иначе
            ИмяОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.НастройкиОтчета.ОтчетСсылка, "Имя");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяОтчета;
КонецФункции

// Устанавливает важность для указанного варианта отчета в указанной подсистеме
//
// Параметры:
// 	ОписаниеОтчета - СтрокаДереваЗначений
//  Важность   - Строка
//               	|- ""        - Вывод отчета в своей группе обычным шрифтом.
//               	|- "Важный"  - Вывод отчета в своей группе жирным шрифтом.
//               	|- "СмТакже" - Вывод отчета в группе "См. также".
//  Подсистема   - Метаданные.Подсистема - если подсистема не указана, то для всех подсистем варианта
//
Процедура УстановитьВажностьВариантаОтчета(ОписаниеВарианта, Важность, Подсистема = Неопределено) Экспорт
	
	Если ВажностьУказанаВерно(Важность) Тогда
		Размещение = ОписаниеВарианта.Размещение.Получить(Подсистема);
		
		Если Не Размещение = Неопределено Тогда
			ОписаниеВарианта.Размещение.Вставить(Подсистема, Важность);
		Иначе
			Для Каждого Размещение Из ОписаниеВарианта.Размещение Цикл 
				ОписаниеВарианта.Размещение.Вставить(Размещение.Ключ, Важность);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отключает указанный отчет со всеми его вариантами от механизма "Варианты отчетов".
//
// Параметры:
// 	ОписаниеОтчета - СтрокаДереваЗначений
//
Процедура ОтключитьОтчет(ОписаниеОтчета) Экспорт
	
	ОписаниеОтчета.Включен = Ложь;
	
КонецПроцедуры

// Отключает указанный вариант отчета от механизма "Варианты отчетов".
//
// Параметры:
//	Настройки 	   - ДеревоЗначений
// 	ОписаниеОтчета - СтрокаДереваЗначений
//  КлючВарианта   - Строка
//
Процедура ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, КлючВарианта) Экспорт
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, КлючВарианта);
	
	ОписаниеВарианта.Включен = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет строку на содержание параметров важности
//
// Параметры:
//  Важность   - (Строка)
//
// Возвращаемое значение: 
//  Булево   - Истина, если переданная строка равна одному из значений:
//               	|- ""        - Вывод отчета в своей группе обычным шрифтом.
//               	|- "Важный"  - Вывод отчета в своей группе жирным шрифтом.
//               	|- "СмТакже" - Вывод отчета в группе "См. также".
//             Ложь, в ином случае
//
Функция ВажностьУказанаВерно(Важность)
	
	Возврат ПустаяСтрока(Важность) Или Важность = "Важный" Или Важность = "СмТакже";
	
КонецФункции

Процедура ДобавитьИзменениеКлючей(Изменения, ИмяОтчета, СтароеИмяВарианта, АктуальноеИмяВарианта)
	
	Изменение = Изменения.Добавить();
	
	Изменение.Отчет 				= Метаданные.Отчеты[ИмяОтчета];
	Изменение.СтароеИмяВарианта 	= СтароеИмяВарианта;
	Изменение.АктуальноеИмяВарианта = АктуальноеИмяВарианта;
	
КонецПроцедуры

// Добавляет или удаляет подсистему из размещений варианта отчета.
//
// Параметры:
//	Размещение - размещение варианта отчета, подробнее см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
//	Дествие - Строка - "Удалить" или "Вставить"
//	ИмяПодсистемы - Строка - имя подсистемы
//		подчиненные подсистемы разделяются ".",	служебные слова "Подсистема" или "Подсистемы" указывать не нужно
//
Процедура ИзменитьРазмещениеВариантаОтчета(Размещение, Действие, ИмяПодсистемы) Экспорт
	
	Подсистема = ОбщегоНазначенияУТ.ПодсистемаПоИмени(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат; // нет такой подсистемы в метаданных
	КонецЕсли;
	
	Если Действие = "Удалить" Тогда
		Размещение.Удалить(Подсистема);
	ИначеЕсли Действие = "Вставить" Тогда
		Размещение.Вставить(Подсистема);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыПодменюОтчеты

#Область ABCXYZАнализНоменклатуры

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Функция ДобавитьКомандуABCXYZАнализНоменклатуры(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ABCXYZАнализНоменклатуры) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ABCXYZАнализНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='ABC/XYZ-анализ номенклатуры';uk='ABC/XYZ-аналіз номенклатури'");
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.ABCXYZАнализНоменклатуры";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоНоменклатуре");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                    "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования",     "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область АнализПричинОтменыЗаказовПоставщикамПоДокументу

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуАнализПричинОтмены(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализПричинОтменыЗаказовПоставщикамПоДокументу) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.АнализПричинОтменыЗаказовПоставщикамПоДокументу.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Анализ причин отмены';uk='Аналіз причин скасування'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти


#Область АнализЦенПоставщиков

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализЦенПоставщиков) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.АнализЦенПоставщиков.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Анализ цен';uk='Аналіз цін'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "АнализЦенПоставщиков");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ВедомостьПоТоварамНаСкладах

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПоПересчетуТоваров(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Товары в процессе отгрузки';uk='Товари в процесі відвантаження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ТоварыВПроцессеОтгрузки");
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьОрдернуюСхемуПриОтгрузке,ИспользоватьСтатусыПеремещенийТоваров,ИспользоватьСтатусыРеализацийТоваровУслуг,ИспользоватьСтатусыСборокТоваров";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтгружаемыеТоварыПоПересчетуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОтгружаемыеТоварыПоПересчетуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДвиженияТовара(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах.ПолноеИмя();
		КомандаОтчет.Представление = "Движения товара на складах";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ДвиженияТовара");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеУсловийСоглашенийСКлиентами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВыполнениеУсловийСоглашенийСКлиентами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Выполнение регулярных условий';uk='Виконання регулярних умов'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ВыполнениеУсловийСоглашенийСКлиентами");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВыполнениеУсловийСоглашенийСКлиентамиПоПартнеру(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыполнениеУсловийСоглашенийСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Выполнение регулярных условий соглашений';uk='Виконання регулярних умов оферт'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ВыполнениеУсловийСоглашенийСКлиентамиПоПартнеру");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ВыручкаИСебестоимостьПродаж

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПродажи(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Продажи';uk='Продажі'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "Продажи");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаПродажКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПродажиПоЗаказу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Продажи по заказу';uk='Продажі по замовленнях'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПродажиПоЗаказу");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПродажиПоЗаказуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПродажиПоЗаказуКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПродажиПоСегменту(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Продажи по сегменту';uk='Продажі по сегменту'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПродажиПоСегменту");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СегментПартнеров");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаПродажКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СтруктураПодчиненности

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СтруктураПодчиненности) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СтруктураПодчиненности";
		КомандаОтчет.Идентификатор = Метаданные.ОбщиеФормы.СтруктураПодчиненности.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Структура подчиненности';uk='Структура підпорядкованості'");
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Картинка      = БиблиотекаКартинок.СтруктураПодчиненности;
		КомандаОтчет.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.S, Ложь, Истина, Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции
#КонецОбласти

#Область ДвиженияДокумента

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДвиженияДокумента) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ДвиженияДокумента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Движения документа';uk='Рухи документа'");
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "НеБазоваяВерсия";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДвиженияЗаказов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДвиженияДокумента) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ДвиженияДокумента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Движения документа';uk='Рухи документа'");
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьОтчетДвиженияЗаказов";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ДосьеПартнера

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДосьеПартнера(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДосьеПартнера) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
		Представление = ?(ИспользоватьПартнеровКакКонтрагентов, НСтр("ru='Досье контрагента по данным программы';uk='Досьє контрагента за даними програми'"), НСтр("ru='Досье партнера';uk='Досьє партнера'"));
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ДосьеПартнера.ПолноеИмя();
		КомандаОтчет.Представление = Представление;
		КомандаОтчет.СписокФорм = "ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#Область КарточкаПартииПоНалоговымНазначениям

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаПартииПоНалоговымНазначениям(КомандыОтчетов) Экспорт	
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаПартииПоНалоговымНазначениям) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаПартииПоНалоговымНазначениям.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Карточка партии по налоговым назначениям';uk='Картка партії за податковим призначенням'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КарточкаРасчетовПоПереданнойВозвратнойТаре

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовПоПереданнойВозвратнойТаре(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовПоПереданнойВозвратнойТаре) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовПоПереданнойВозвратнойТаре.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Карточка расчетов по таре';uk='Картка розрахунків по тарі'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМногооборотнуюТару";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КарточкаРасчетовПоПринятойВозвратнойТаре

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовПоПринятойВозвратнойТаре(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовПоПринятойВозвратнойТаре) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовПоПринятойВозвратнойТаре.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Карточка расчетов по таре';uk='Картка розрахунків по тарі'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМногооборотнуюТару";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КарточкаРасчетовСКлиентами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовСКлиентом(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с клиентами';uk='Картка розрахунків з клієнтами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСКлиентом");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСКлиентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с клиентами';uk='Картка розрахунків з клієнтами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСКлиентомПоДокументам");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КарточкаРасчетовСПоставщиками

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовСПоставщиком(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с поставщиками';uk='Картка розрахунків з постачальниками'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСПоставщиком");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КарточкаРасчетовСПоставщиками) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КарточкаРасчетовСПоставщиками.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Карточка расчетов с поставщиками';uk='Картка розрахунків з постачальниками'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "КарточкаРасчетовСПоставщикомПоДокументам");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтактнаяИнформацияПоПартнерам(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтактнаяИнформация) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтактнаяИнформация.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Контактная информация';uk='Контактна інформація'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРолиКонтактныхЛицПартнеров";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции


// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтактнаяИнформацияКонтактныхЛиц(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтактнаяИнформация) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтактнаяИнформация.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Контактная информация контактных лиц';uk='Контактна інформація контактних осіб'");
		КомандаОтчет.СписокФорм = "ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРолиКонтактныхЛицПартнеров";
		КомандаОтчет.ПараметрыФормы.Вставить("ГруппироватьПоПартнеру", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#Область КонтрольПередачТоваровМеждуОрганизациями

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольВозвратовТоваров(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
				) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Контроль возвратов товаров';uk='Контроль повернень товарів'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Документ");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеВозвратовТоваровКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольПередачТоваров(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
				) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Контроль передач товаров';uk='Контроль передач товарів'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Документ");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеПередачТоваровКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОформленияОтчетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
				) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольПередачТоваровМеждуОрганизациями.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Оформление отчетов';uk='Оформлення звітів'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Документ");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеОтчетовПоКомиссииКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#Область ЛимитыРасходаДенежныхСредств

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуЛимитыРасходаДенежныхСредств(КомандыОтчетов) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредств") Тогда
		
		Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ЛимитыРасходаДенежныхСредств)
			Тогда
			
			КомандаОтчет = КомандыОтчетов.Добавить();
			
			КомандаОтчет.Идентификатор = Метаданные.Отчеты.ЛимитыРасходаДенежныхСредств.ПолноеИмя();
			КомандаОтчет.Представление = НСтр("ru='Лимиты расхода ДС';uk='Ліміти витрачання ГК'");
			КомандаОтчет.СписокФорм = "ФормаДокумента";
			КомандаОтчет.Порядок       = 50;
			КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
			КомандаОтчет.ФункциональныеОпции = "";
			КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ЛимитыРасходаДенежныхСредствКонтекст");
			КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
			
			Возврат КомандаОтчет;
			
		КонецЕсли;
		
	КонецЕсли;
	

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область МатериалыВЭксплуатации

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуМатериалыВЭксплуатации(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.МатериалыВЭксплуатации) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.МатериалыВЭксплуатации.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='ТМЦ в эксплуатации';uk='ТМЦ в експлуатації'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьМатериалыВЭксплуатацииКонтекст";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ТМЦВЭксплуатацииКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#Область ОстаткиТоваровОрганизаций

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОстаткиТоваровОрганизаций(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиТоваровОрганизаций) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями")
				ИЛИ ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОстаткиТоваровОрганизаций.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Остатки товаров организаций';uk='Залишки товарів організацій'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#Область ОтклоненияОтУсловийЗакупок

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОтклоненияОтУсловийЗакупок(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОтклоненияОтУсловийЗакупок) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОтклоненияОтУсловийЗакупок.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Отклонения от условий закупок';uk='Відхилення від умов купівель'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ОтклоненияОтУсловийПродаж

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОтклоненияОтУсловийПродаж(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОтклоненияОтУсловийПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОтклоненияОтУсловийПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Отклонения от условий продаж';uk='Відхилення від умов продажу'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента,ФормаСписка";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ОформлениеИзлишковНедостачТоваров

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОформление(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Оформление';uk='Оформлення'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОформлениеИзлишковНедостачКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеИзлишковНедостачКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОформлениеПересчет(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОформлениеИзлишковНедостачТоваров.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Оформление';uk='Оформлення'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОформлениеИзлишковНедостачКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОформлениеИзлишковНедостачКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ОценкаРентабельностиПродаж

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОценкаРентабельностиПродажи(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОценкаРентабельностиПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОценкаРентабельностиПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Оценка рентабельности продажи';uk='Оцінка рентабельності продажу'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
		ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
		Если Не ИспользоватьРучныеСкидкиВПродажах
			И Не ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			КлючВарианта = "ОценкаРентабельностиПродажиБезСкидокКонтекст";
		ИначеЕсли ИспользоватьРучныеСкидкиВПродажах И Не ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			КлючВарианта = "ОценкаРентабельностиПродажиТолькоРучныеСкидкиКонтекст";
		ИначеЕсли Не ИспользоватьРучныеСкидкиВПродажах И ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			КлючВарианта = "ОценкаРентабельностиПродажиТолькоАвтоСкидкиКонтекст";
		Иначе
			КлючВарианта = "ОценкаРентабельностиПродажиКонтекст";
		КонецЕсли;
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#Область ПересеченияСегментаНоменклатуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПересеченияСегментаНоменклатурыПересеченияСегмента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПересеченияСегментаНоменклатуры) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПересеченияСегментаНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Пересечения сегмента';uk='Перетини сегмента'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСегментыНоменклатуры";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ПересеченияСегментаПартнеров

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПересеченияСегментаПартнеровПересеченияСегмента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПересеченияСегментаПартнеров) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПересеченияСегментаПартнеров.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Пересечения сегмента';uk='Перетини сегмента'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти





#Область ПланФактныйАнализКредитовИДепозитов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПланФактныйАнализДоговора(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПланФактныйАнализКредитовИДепозитов) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПланФактныйАнализКредитовИДепозитов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='План-фактный анализ';uk='План-фактний аналіз'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПланФактныйАнализКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ПримененныеСкидкиВДокументе

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПримененныеСкидки(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПримененныеСкидкиВДокументе) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ПримененныеСкидкиВДокументе.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Примененные скидки';uk='Застосовані знижки'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти


#Область РасчетыСПартнерами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВедомостьРасчетов(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасчетыСПартнерами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РасчетыСПартнерами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Ведомость расчетов';uk='Відомість розрахунків'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#Область РезультатыСогласованияЗакупки

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗакупкиПоДокументу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЗакупки) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЗаказовПоставщикам") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЗакупки.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСогласованиеЗаказовПоставщикам";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗакупкиПоДокументу");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗакупки(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЗакупки) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЗаказовПоставщикам") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЗакупки.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСогласованиеЗаказовПоставщикам";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗакупки");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиентаПоДокументу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиентаПоДокументу");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗаявкиНаВозвратТоваровОтКлиента");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область РезультатыСогласованияПродажи

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЗаказаКлиента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияПродажи) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьВнутреннееСогласованиеЗаказовКлиентов";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЗаказаКлиента");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияКоммерческогоПредложения(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияПродажи) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьВнутреннееСогласованиеКоммерческихПредложений";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияКоммерческогоПредложения");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияПродажи(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияПродажи) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьВнутреннееСогласованиеЗаказовКлиентов,ИспользоватьВнутреннееСогласованиеКоммерческихПредложений,ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияПродажи");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияСоглашенияСКлиентами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияПродажи) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеЗаказовКлиентов")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеКоммерческихПредложений")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияСоглашенияСКлиентами");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область РезультатыСогласованияЦенНоменклатуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЦенНоменклатурыПоДокументу(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСогласованиеЦенНоменклатуры";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЦенНоменклатурыПоДокументу");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРезультатыСогласованияЦенНоменклатуры(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РезультатыСогласованияЦенНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Результаты согласования';uk='Результати погодження'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСогласованиеЦенНоменклатуры";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "РезультатыСогласованияЦенНоменклатуры");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СверкаРасчетовСПартнерами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСверкаРасчетовСПартнерами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СверкаРасчетовСПартнерами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СверкаРасчетовСПартнерами";
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СверкаРасчетовСПартнерами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Сверка расчетов с партнерами';uk='Звірка розрахунків з партнерами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СоставПродажи

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСоставПродажи(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СоставПродажи) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СоставПродажи.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состав продажи';uk='Склад продажу'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "СоставПродажи");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СоставСегмента

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСоставСегмента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СоставСегмента) 
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СоставСегмента.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состав сегмента';uk='Склад сегмента'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ИмяФормыОтчета = "Отчет.СоставСегмента.Форма.ФормаОтчета";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьСегментыНоменклатуры,ИспользоватьСегментыПартнеров";
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СостояниеВыполненияДокументов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаказКлиента(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние выполнения';uk='Стан виконання'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРасширенныеВозможностиЗаказаКлиента";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаказаДавальца(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние выполнения';uk='Стан виконання'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаявокНаВозврат(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние выполнения';uk='Стан виконання'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьРасширенныеВозможностиЗаказаКлиента";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СостояниеВыполненияРеализацииАкта";
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние выполнения';uk='Стан виконання'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние выполнения';uk='Стан виконання'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияЗаказПереработчику(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние выполнения';uk='Стан виконання'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеВыполненияДокументов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние выполнения';uk='Стан виконання'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти


#Область СостояниеРасчетовСКлиентами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСКлиентом(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКлиентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Задолженность клиентов';uk='Заборгованість клієнтів'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентом");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСКлиентомПоДокументам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКлиентами) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Задолженность клиентов';uk='Заборгованість клієнтів'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСКлиентомПоДокументам");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СостояниеРасчетовСКомиссионерами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСКомиссионерами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКомиссионерами) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСКомиссионерами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние расчетов с комиссионерами';uk='Стан розрахунків з комісіонерами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтчетКомиссионера");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СостояниеРасчетовСКомитентами

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСКомитентами(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСКомитентами) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСКомитентами.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние расчетов с комитентами';uk='Стан розрахунків з комітентами'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтчетКомитенту");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СостояниеРасчетовСПоставщиками

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСПоставщиком(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСПоставщиками) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Задолженность поставщикам';uk='Заборгованість постачальникам'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщиком");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРасчетовСПоставщиками) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеРасчетовСПоставщиками.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Задолженность поставщикам';uk='Заборгованість постачальникам'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеРасчетовСПоставщикомПоДокументам");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СправочноеРазмещениеНоменклатуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуРазмещениеНоменклатурыПоЯчейкам(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СправочноеРазмещениеНоменклатуры) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СправочноеРазмещениеНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Размещение номенклатуры по ячейкам';uk='Розміщення номенклатури по комірках'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "РазмещениеНоменклатурыПоЯчейкамСправочноКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "РазмещениеНоменклатурыПоЯчейкамСправочноКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СравнениеГрафиковКредитовИДепозитов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСравнениеПроизвольныхГрафиков(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СравнениеГрафиковКредитовИДепозитов) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.СравнениеПроизвольныхГрафиков";
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СравнениеГрафиковКредитовИДепозитов.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Сравнение графиков';uk='Порівняння графіків'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#Область ТоварыВЯчейках

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуТоварыВЯчейках(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыВЯчейках) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыВЯчейках.ПолноеИмя();
		КомандаОтчет.Представление = "Товары в ячейках";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоНоменклатуре");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуДвиженияТовараВЯчейках(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыВЯчейках) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыВЯчейках.ПолноеИмя();
		КомандаОтчет.Представление = "Движения товара в ячейках";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоНоменклатуре");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ДвиженияТоваровВЯчейкеКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДвиженияТоваровВЯчейкеКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ТоварыКПоступлению

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуТоварыКПоступлению(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыКПоступлению) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыКПоступлению.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Выполнение приемки товаров';uk='Виконання приймання товарів'");
		
		КомандаОтчет.Порядок    = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаДокумента";
		
		КомандаОтчет.МестоРазмещенияКоманды      = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ТоварыКПоступлениюПоРаспоряжению");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                    "СостояниеПриемкиКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования",     "СостояниеПриемкиКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ТоварыПереданныеНаКомиссию

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуТоварыПереданныеНаКомиссию(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыПереданныеНаКомиссию) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыПереданныеНаКомиссию.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Товары переданные на комиссию';uk='Товари, передані на комісію'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтчетКомиссионера");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ТоварыПереданныеНаКомиссию");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ТоварыПринятыеНаКомиссию

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуТоварыПринятыеНаКомиссию(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыПринятыеНаКомиссию) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыПринятыеНаКомиссию.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Товары, принятые на комисию';uk='Товари, прийняті на комісію'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОтчетКомитенту");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ТоварыПринятыеНаКомиссию");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область УправленческийБаланс

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКарточкаАктиваПассива(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УправленческийБаланс) 
			И ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УправленческийБаланс.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Карточка актива/пассива';uk='Картка активу/пасиву'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "НеБазоваяВерсия";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КарточкаАктиваПассиваКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область УсловияЗакупок

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуУсловияЗакупок(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УсловияЗакупок) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УсловияЗакупок.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Условия закупок';uk='Умови купівель'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "УсловияЗакупок");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуУсловияЗакупокПоПоставщику(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УсловияЗакупок) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УсловияЗакупок.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Условия закупок по поставщику';uk='Умови купівель по постачальнику'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераПоставщикаКонтекст,ИспользоватьДанныеПоставщикаИлиКонкурентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "УсловияЗакупокПоПоставщику");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область УсловияПродаж

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуУсловияПродаж(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УсловияПродаж) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УсловияПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Условия продаж';uk='Умови продажів'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "УсловияПродаж");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуУсловияПродажПоПартнеру(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.УсловияПродаж) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.УсловияПродаж.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Условия продаж клиенту';uk='Умови продажів клієнту'");
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаЭлемента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьДанныеПартнераКлиентаКонтекст";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "УсловияПродажПоПартнеру");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

#КонецОбласти



#КонецОбласти

#Область КомандыПодменюОбработки

#Область СбалансированностьПланов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСбалансированностьПланов(КомандыОтчетов) Экспорт
	
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СбалансированностьПлановУТ) 
			И (    ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж")
			   ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки")) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СбалансированностьПлановУТ.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Сбалансированность планов';uk='Збалансованість планів'");
		КомандаОтчет.СписокФорм = "ФормаДокумента";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СбалансированностьПланов");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта",                "СбалансированностьПланов");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Истина);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуКонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Контроль выданных подотчетному лицу авансов';uk='Контроль виданих підзвітній особі авансів'");
		КомандаОтчет.СписокФорм    = "ФормаДокумента";
		КомандаОтчет.Порядок       = 70;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "КонтрольПоЗаявкеКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОплатаЗаявок

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОплатаЗаявок(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОплатаЗаявокНаРасходованиеДенежныхСредств) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОплатаЗаявокНаРасходованиеДенежныхСредств.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Оплата заявок на расходование денежных средств';uk='Оплата заявок на витрачання грошових коштів'");
		КомандаОтчет.СписокФорм    = "ФормаДокумента";
		КомандаОтчет.Порядок       = 60;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СостояниеОбеспечения

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеОбеспеченияСпискаЗаказовКлиента(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.СостояниеОбеспечения) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Обработки.СостояниеОбеспечения.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Состояние обеспечения';uk='Стан забезпечення'");
		КомандаОтчет.СписокФорм = "ФормаСписка";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыВажное";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВедомостьПоТоварамОрганизаций

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВедомостьПоНоменклатуреОрганизаций(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций.ПолноеИмя();
		КомандаОтчет.Представление = "Движения товара в организациях";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ВедомостьПоНоменклатуреОрганизаций");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьНесколькоОрганизаций";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВедомостьПоСериямНоменклатуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуВедомостьПоСериямТовара(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры.ПолноеИмя();
		КомандаОтчет.Представление = "Движения по сериям товара";
		
		КомандаОтчет.Обработчик = "МенюОтчетыУТКлиент.ВедомостьПоСериямТовара";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ВедомостьПоСериямТовара");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ВедомостьПоСериямНоменклатурыКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ВедомостьПоСериямНоменклатурыКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуПродажиПоНоменклатуре(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж.ПолноеИмя();
		КомандаОтчет.Представление = "Продажи номенклатуры";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПродажиПоНоменклатуре");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОстаткиИДоступностьТоваров

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОстаткиИДоступность(КомандыОтчетов) Экспорт
	
	Если  ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИДоступностьТоваров)
		И НЕ ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ОстаткиИДоступностьТоваров.ПолноеИмя();
		КомандаОтчет.Представление = "Остатки и доступность";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ОстаткиИДоступность");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ТоварыНаСкладахПоСрокамГодности

// Добавляет команду отчета в список команд.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуОстаткиНоменклатурыПоСрокамГодности(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности.ПолноеИмя();
		КомандаОтчет.Представление = "Остатки по срокам годности";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ОстаткиНоменклатурыПоСрокамГодности");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПоНоменклатуреКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СостояниеВыполненияДокументов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Функция ДобавитьКомандуСостояниеАссортимента(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеАссортимента) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.СостояниеАссортимента.ПолноеИмя();
		КомандаОтчет.Представление = "Состояние ассортимента";
		
		КомандаОтчет.Порядок = 50;
		КомандаОтчет.СписокФорм = "ФормаСписка, ФормаЭлемента";
		
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "СостояниеАссортимента");
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "ОсновнойКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОсновнойКонтекст");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
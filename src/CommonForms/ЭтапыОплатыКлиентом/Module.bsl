
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьГрафикиОплаты         = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	
	Параметры.ЗакрыватьПриВыборе            = Истина;
	Параметры.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры);
	
	УпрощенныйРежим = РасширенныйРежимНеИспользуется Или ИспользоватьУпрощеннуюСхемуОплаты;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Соглашение = Неопределено;
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ЭтапыГрафикаОплаты.Очистить();
	ИдентификаторВызывающейФормы        = Параметры.УникальныйИдентификатор;
	ТолькоПросмотр                      = Параметры.ТолькоПросмотр;
	
	ГрафикСоглашенияЗаполнен = ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);
	
	Если Не Параметры.ИспользоватьОтрицательныеСуммыПлатежа Тогда
		ОграничитьТипЭлементовСуммыПлатежа();
	КонецЕсли;
	
	Если Параметры.ПараметрыВыбораРеквизитов <> Неопределено Тогда
		Для Каждого ЭлНастройки Из Параметры.ПараметрыВыбораРеквизитов Цикл
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлНастройки.Ключ, "ПараметрыВыбора", ЭлНастройки.Значение);
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьСписокВыбораФормыОплаты();
	УстановитьДоступностьЭлементовПоФормеОплаты();
	
	НастроитьЭлементыФормы();
	УстановитьТекстКнопкиЗаполнения(ЭтаФорма);
	
	Если УпрощенныйРежим И Не УчитыватьВариантОплаты Тогда
		СуммаПлатежаПредоплата        = СуммаОплатыПоДокументу;
		СуммаЗалогаЗаТаруПредоплата   = СуммаЗалогаПоДокументу;
		ПроцентЗалогаЗаТаруПредоплата = 100;
		ПроцентПлатежаПредоплата      = 100;
		ДатаПредоплата                = Параметры.ДатаПлатежа;
	Иначе
		ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(Параметры.АдресВоВременномХранилище);
	КонецЕсли;
	
	Если Не ТребуетсяЗалогЗаТару Тогда
		СуммаЗалогаПоДокументу = 0;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);

	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
	
	УстановитьСвойстваЭлементаПорядокРасчетов();
	
	Если ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		Элементы.ЗаполнитьЭтапыГрафикаОплатыФорма.Видимость = Ложь;
		Элементы.ЗаполнитьЭтапыГрафикаОплатыТаблица.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность И Не Готово Тогда
		
		Отказ = Истина;
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru='Закрыть';uk='Закрити'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru='Не закрывать';uk='Не закривати'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), 
			НСтр("ru='Все измененные данные будут потеряны. Закрыть форму?';uk='Всі змінені дані будуть втрачені. Закрити форму?'"), 
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Закрыть" Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию()
	
	ОчиститьСообщения();
	
	ЗаполнитьЭтапыГрафикаОплаты();
	
Конецпроцедуры

&НаКлиенте
Процедура РаспределитьСумму(Команда)
	
	ОчиститьСообщения();
	
	РаспределитьСуммуПоЭтапамГрафикаОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ОчиститьСообщения();
	
	Если Не Модифицированность Или ТолькоПросмотр Тогда
		
		Закрыть();
		
	Иначе
		
		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("ПорядокРасчетов",      ПорядокРасчетов);
		СтруктураОбъекта.Вставить("ФормаОплаты",          ФормаОплаты);
		СтруктураОбъекта.Вставить("Касса",                Касса);
		СтруктураОбъекта.Вставить("БанковскийСчет",       БанковскийСчет);
		СтруктураОбъекта.Вставить("ГрафикОплаты",         ГрафикОплаты);
		СтруктураОбъекта.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки);
		
		Если РежимСамообслуживания Тогда
			Готово = Истина;
		ИначеЕсли УпрощенныйРежим И Не УчитыватьВариантОплаты Тогда
			
			ТекстОшибки = "";
			
			Если Не ЗначениеЗаполнено(ДатаПредоплата) Тогда
				Если СуммаОплатыПоДокументу <> 0 Тогда
					ТекстОшибки = НСтр("ru='Поле ""Дата платежа"" не заполнено';uk='Поле ""Дата платежу"" не заповнено'");
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Дата) И ДатаПредоплата < Дата Тогда
				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%';uk='Дата платежу повинна бути не менше дати документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(Дата, "ДЛФ=DD"));
			КонецЕсли;
			
			Если ТекстОшибки = "" Тогда
				Готово = Истина;
				СтруктураОбъекта.Вставить("ДатаПлатежа", ДатаПредоплата);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ДатаПредоплата");
			КонецЕсли;
		
		Иначе
		
			АдресВоВременномХранилище = ПроверитьОплатуПоместитьВХранилище();
			
			Если Не ПустаяСтрока(АдресВоВременномХранилище) Тогда
				Готово = Истина;
				СтруктураОбъекта.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Готово Тогда
			Закрыть(СтруктураОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	ПорядокРасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		Если УпрощенныйРежим И Не УчитыватьВариантОплаты Тогда
			ЗаполнитьДатуПредоплатыПоГрафикуСервер(Истина);
		Иначе
			ЗаполнитьЭтапыОплатыПоГрафикуСервер(Истина);
			ПронумероватьТаблицуЭтапов();
			РассчитатьИтоговыеПоказатели(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекстКнопкиЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ПриИзмененииФормыОплатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаПредоплатаПриИзменении(Элемент)
	
	СуммаПлатежаПриИзменении(СуммаПлатежаПредоплата, ПроцентПлатежаПредоплата, 
							СуммаПлатежаКредит, ПроцентПлатежаКредит, СуммаОплатыПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПлатежаПредоплатаПриИзменении(Элемент)
	
	ПроцентПлатежаПриИзменении(СуммаПлатежаПредоплата, ПроцентПлатежаПредоплата,
								СуммаПлатежаКредит, ПроцентПлатежаКредит, СуммаОплатыПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗалогаЗаТаруПредоплатаПриИзменении(Элемент)
	
	СуммаПлатежаПриИзменении(СуммаЗалогаЗаТаруПредоплата, ПроцентЗалогаЗаТаруПредоплата, 
							СуммаЗалогаЗаТаруКредит, ПроцентЗалогаЗаТаруКредит, СуммаЗалогаПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентЗалогаЗаТаруПредоплатаПриИзменении(Элемент)
	
	ПроцентПлатежаПриИзменении(СуммаЗалогаЗаТаруПредоплата, ПроцентЗалогаЗаТаруПредоплата, 
							СуммаЗалогаЗаТаруКредит, ПроцентЗалогаЗаТаруКредит, СуммаЗалогаПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаКредитПриИзменении(Элемент)
	
	СуммаПлатежаПриИзменении(СуммаПлатежаКредит, ПроцентПлатежаКредит, 
							СуммаПлатежаПредоплата, ПроцентПлатежаПредоплата, СуммаОплатыПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПлатежаКредитПриИзменении(Элемент)
	
	ПроцентПлатежаПриИзменении(СуммаПлатежаКредит, ПроцентПлатежаКредит, 
							СуммаПлатежаПредоплата, ПроцентПлатежаПредоплата, СуммаОплатыПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗалогаЗаТаруКредитПриИзменении(Элемент)
	
	СуммаПлатежаПриИзменении(СуммаЗалогаЗаТаруКредит, ПроцентЗалогаЗаТаруКредит,
							СуммаЗалогаЗаТаруПредоплата, ПроцентЗалогаЗаТаруПредоплата, СуммаЗалогаПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентЗалогаЗаТаруКредитПриИзменении(Элемент)
	
	ПроцентПлатежаПриИзменении(СуммаЗалогаЗаТаруКредит, ПроцентЗалогаЗаТаруКредит,
							СуммаЗалогаЗаТаруПредоплата, ПроцентЗалогаЗаТаруПредоплата, СуммаЗалогаПоДокументу);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыГрафикаОплаты

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПослеУдаления(Элемент)
	
	ПронумероватьТаблицуЭтапов();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СортироватьЭтапыОплаты();
	ПронумероватьТаблицуЭтапов();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПроцентПлатежаПриИзменении(Элемент)

	ЭтапыОплатыКлиент.ЭтапыГрафикаОплатыПроцентПлатежаПриИзменении(
		Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные,
		ЭтапыГрафикаОплаты,
		СуммаОплатыПоДокументу);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыСуммаПлатежаПриИзменении(Элемент)

	ЭтапыОплатыКлиент.ЭтапыГрафикаОплатыСуммаПлатежаПриИзменении(
		Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные,
		ЭтапыГрафикаОплаты,
		СуммаОплатыПоДокументу);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПриИзменении(Элемент)
	
	ПронумероватьТаблицуЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатыПроцентЗалогаЗаТаруПриИзменении(Элемент)

	ЭтапыОплатыКлиент.ЭтапыГрафикаОплатыПроцентЗалогаЗаТаруПриИзменении(
		Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные,
		ЭтапыГрафикаОплаты,
		СуммаЗалогаПоДокументу);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатыСуммаЗалогаЗаТаруПриИзменении(Элемент)

	ЭтапыОплатыКлиент.ЭтапыГрафикаОплатыСуммаЗалогаЗаТаруПриИзменении(
		Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные,
		ЭтапыГрафикаОплаты,
		СуммаЗалогаПоДокументу);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыДатаПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ДатаЗаполненаНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаКредит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПредоплата");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ПроцентЗаполненНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентПлатежаПредоплата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентПлатежаКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентПлатежейОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 100;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаОплатыПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентПлатежаПредоплата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентПлатежаКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентПлатежейОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 100;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаОплатыПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПредоплата.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаПлатежаПредоплата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаОплатыПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗалогЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаЗаТаруПредоплата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаКредит.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаПлатежаКредит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаОплатыПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗалогЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаЗаТаруКредит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ДатаЗаполненаНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("НомерСтрокиПолнойОплаты");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерСтрокиПолнойОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Seagreen);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентЗалогаЗаТару.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ПроцентЗалогаЗаполненНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентЗалогаЗаТаруПредоплата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентЗалогаЗаТаруКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентЗалогаОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 100;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентЗалогаЗаТаруПредоплата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентЗалогаЗаТаруКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентЗалогаОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 100;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентЗалогаЗаТару.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ДатаЗаполненаНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("НомерСтрокиПолнойОплатыЗалога");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерСтрокиПолнойОплатыЗалога");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Seagreen);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентПлатежа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентЗалогаЗаТару.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ПроцентПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентЗалогаЗаТару.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыСуммаЗалогаЗаТару.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗалогЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Если Параметры.СпециальныеЗаголовкиЭтаповДляВозврата Тогда

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыВариантОплаты.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ВариантОплаты");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Аванс или возврат (до обеспечения)';uk='Аванс або повернення (до забезпечення)'"));

		//

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыВариантОплаты.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ВариантОплаты");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Предоплата или возврат (до отгрузки)';uk='Передоплата або повернення (до відвантаження)'"));

		//

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыВариантОплаты.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ВариантОплаты");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Кредит или возврат (после отгрузки)';uk='Кредит або повернення (після відвантаження)'"));

	КонецЕсли;

КонецПроцедуры

#Область ГрафикОплаты

&НаСервере
Процедура ЗаполнитьЭтапыОплатыПоСоглашениюСервер(ЗаполнятьФормуОплаты = Ложь)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ГрафикОплаты",         ГрафикОплаты);
	ПараметрыЗаполнения.Вставить("ФормаОплаты",          ФормаОплаты);
	ПараметрыЗаполнения.Вставить("ЭтапыГрафикаОплаты",   ЭтапыГрафикаОплаты);
	ПараметрыЗаполнения.Вставить("Дата",                 Дата);
	ПараметрыЗаполнения.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки);
	ПараметрыЗаполнения.Вставить("Соглашение",           Соглашение);

	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоСоглашению(
		ПараметрыЗаполнения,
		СуммаОплатыПоДокументу,
		СуммаЗалогаПоДокументу);
	
	Если УпрощенныйРежим Тогда
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыГрафикаОплаты.Выгрузить());
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		ФормаОплаты = ПараметрыЗаполнения.ФормаОплаты;
		ПриИзмененииФормыОплатыСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыПоГрафикуСервер(ЗаполнятьФормуОплаты = Ложь)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ГрафикОплаты",         ГрафикОплаты);
	ПараметрыЗаполнения.Вставить("ФормаОплаты",          ФормаОплаты);
	ПараметрыЗаполнения.Вставить("ЭтапыГрафикаОплаты",   ЭтапыГрафикаОплаты);
	ПараметрыЗаполнения.Вставить("Дата",                 Дата);
	ПараметрыЗаполнения.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки);
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(ПараметрыЗаполнения, СуммаОплатыПоДокументу, СуммаЗалогаПоДокументу, ЗаполнятьФормуОплаты);
	
	Если УпрощенныйРежим Тогда
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыГрафикаОплаты.Выгрузить());
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		ФормаОплаты = ПараметрыЗаполнения.ФормаОплаты;
		ПриИзмененииФормыОплатыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуПредоплатыПоГрафикуСервер(ЗаполнятьФормуОплаты = Ложь)
	
	ДатаПредоплата = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(
		?(ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки), ЖелаемаяДатаОтгрузки, Дата),
		?(ИспользоватьГрафикиОплаты, ГрафикОплаты, Неопределено),
		Соглашение);
	
	Если Не ЗначениеЗаполнено(ДатаПредоплата) Тогда
		ДатаПредоплата = ?(ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки), ЖелаемаяДатаОтгрузки, Дата);
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		
		Если ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(ГрафикОплаты) Тогда
			ИсточникФормыОплаты = ГрафикОплаты;
		ИначеЕсли ЗначениеЗаполнено(Соглашение) Тогда
			ИсточникФормыОплаты = Соглашение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникФормыОплаты) Тогда
			
			ФормаОплатыИсточника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникФормыОплаты, "ФормаОплаты");
		
			Если ЗначениеЗаполнено(ФормаОплатыИсточника) И ФормаОплаты <> ФормаОплатыИсточника Тогда
				ФормаОплаты = ФормаОплатыИсточника;
				ПриИзмененииФормыОплатыСервер();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапОплатыПоУмолчанию()
	
	Если УпрощенныйРежим Тогда
		
		ОчиститьДанныеУпрощенногоРежима(ЭтаФорма);
		
		ДатаКредит                = ?(ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки), ЖелаемаяДатаОтгрузки, Дата);
		СуммаПлатежаКредит        = СуммаОплатыПоДокументу;
		ПроцентПлатежаКредит      = 100;
		СуммаЗалогаЗаТаруКредит   = СуммаЗалогаПоДокументу;
		ПроцентЗалогаЗаТаруКредит = 100;
		
		Если РежимРеализации Тогда
			ДатаПредоплата = НеизменяемаяДатаПредоплаты;
		КонецЕсли;
		
	Иначе
		
		ВариантОплатыПоУмолчанию = Неопределено;
		Если УчитыватьВариантОплаты Тогда
			ВариантОплатыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки");
		КонецЕсли;
		
		ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
			ЭтаФорма,
			ВариантОплатыПоУмолчанию,
			ЖелаемаяДатаОтгрузки,
			СуммаОплатыПоДокументу,
			СуммаЗалогаПоДокументу);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПоЭтапамГрафикаОплаты()
	
	Если УпрощенныйРежим Тогда
		
		ЭтапыОплаты = ПреобразоватьДанныеУпрощенногоРежимаВТаблицуЭтапов();
		
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			ЭтапыОплаты,
			СуммаОплатыПоДокументу,
			СуммаЗалогаПоДокументу);
		
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыОплаты);
		
	Иначе
		
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			ЭтапыГрафикаОплаты,
			СуммаОплатыПоДокументу,
			СуммаЗалогаПоДокументу);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если УпрощенныйРежим Тогда
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыОплаты);
		Если РежимРеализации Тогда
			НеизменяемаяДатаПредоплаты = ДатаПредоплата;
		КонецЕсли;
	Иначе
		
		Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
			НоваяСтрока = ЭтапыГрафикаОплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьОплатуПоместитьВХранилище()
	
	Если УпрощенныйРежим Тогда
		ЭтапыГрафикаОплаты.Загрузить(ПреобразоватьДанныеУпрощенногоРежимаВТаблицуЭтапов());
	КонецЕсли;
	
	Отказ = Ложь;
	Если Не ((ЭтоЗаказ И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
		Или ГрафикИсполненияВДоговоре И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		Или НеПроверятьКорректностьЭтаповОплаты) Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки);
		СтруктураПараметров.Вставить("Дата", Дата);
		СтруктураПараметров.Вставить("Валюта", Валюта);
		ПродажиСервер.ПроверитьКорректностьЭтаповГрафикаОплатыПоТаблицеЗначений(
			ЭтапыГрафикаОплаты,
			СуммаОплатыПоДокументу,
			СуммаЗалогаПоДокументу,
			УчитыватьВариантОплаты,
			Отказ,
			УпрощенныйРежим,
			СтруктураПараметров);
	КонецЕсли;
	
	Если Не Отказ И РежимРеализации Тогда
		СохранитьДатуПлатежаДляРеализации();
	КонецЕсли;
	
	Возврат ?(Отказ, "", ПоместитьВоВременноеХранилищеНаСервере());
	
КонецФункции

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииФормыОплатыСервер()

	УстановитьДоступностьЭлементовПоФормеОплаты();
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.БанковскийСчет 			= БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);

	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
	СтруктураПараметров.Касса 					= Касса;
	
	Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПорядокРасчетовПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(ПорядокРасчетов) Тогда
		ПорядокРасчетов = Элементы.ПорядокРасчетов.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если ЭтоЗаказ И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		СуммаПлатежаПредоплата      = 0;
		СуммаПлатежаКредит          = 0;
		СуммаЗалогаЗаТаруПредоплата = 0;
		СуммаЗалогаЗаТаруКредит     = 0;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоПорядкуРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаПриИзменении(Сумма, Процент, ЗависимаяСумма, ЗависимыйПроцент, СуммаВсего)

	Если СуммаВсего <> 0 Тогда
		
		Процент           = Мин(Сумма * 100 / СуммаВсего, 100);
		ЗависимаяСумма    = Макс(СуммаВсего - Сумма, 0);
		ЗависимыйПроцент  = 100 - Процент;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПроцентПлатежаПриИзменении(Сумма, Процент, ЗависимаяСумма, ЗависимыйПроцент, СуммаВсего)

	Сумма            = СуммаВсего * Процент / 100;
	ЗависимаяСумма   = СуммаВсего - Сумма;
	ЗависимыйПроцент = 100 - Процент;

	РассчитатьИтоговыеПоказатели(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЭтаповГрафикаОплаты

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаОплаты()
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перезаполнить этапы оплаты';uk='Перезаповнити етапи оплати'"));
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить';uk='Скасувати'"));
	
	ТекстВопроса = "";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ГрафикЗаполнен", ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(ГрафикОплаты));
	ПараметрыЗаполнения.Вставить("ЗаполнитьДату",  УпрощенныйРежим И Не УчитыватьВариантОплаты);
	ПараметрыЗаполнения.Вставить("РаспределитьСумму", Ложь);
	ПараметрыЗаполнения.Вставить("ПерезаполнитьЭтапы", Ложь);
	
	Если Не ПараметрыЗаполнения.ЗаполнитьДату Тогда
		
		Если УпрощенныйРежим Тогда
			СуммаОплатыПоЭтапам    = СуммаПлатежаПредоплата + СуммаПлатежаКредит;
			СуммаЗалогаПоЭтапам    = СуммаЗалогаЗаТаруПредоплата + СуммаЗалогаЗаТаруКредит;
			ЭтапыОплатыНеЗаполнены = СуммаПлатежаПредоплата = 0 И СуммаПлатежаКредит = 0 И СуммаЗалогаПоЭтапам = 0;
		Иначе
			СуммаОплатыПоЭтапам    = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			СуммаЗалогаПоЭтапам    = ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
			ЭтапыОплатыНеЗаполнены = ЭтапыГрафикаОплаты.Количество() = 0;
		КонецЕсли;
		
		Если СуммаОплатыПоДокументу = 0 И СуммаЗалогаПоДокументу = 0 Тогда
			
			Если ЭтапыОплатыНеЗаполнены Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru='Сумма неотмененных строк заказа нулевая. Заполнение этапов оплаты не требуется.';uk='Сума нескасованих рядків замовлення нульова. Заповнення етапів оплати не потрібно.'"));
				Возврат;
				
			КонецЕсли;
			
			ЭтапыГрафикаОплаты.Очистить();
			СуммаПлатежаПредоплата      = 0;
			СуммаПлатежаКредит          = 0;
			СуммаЗалогаЗаТаруПредоплата = 0;
			СуммаЗалогаЗаТаруКредит     = 0;
			ЭтапыОплатыКлиент.ОповеститьОНевозможностиЗаполненияЭтаповГрафикаОплаты();
			РассчитатьИтоговыеПоказатели(ЭтаФорма);
			Возврат;
		
		КонецЕсли;
		
		Если СуммаОплатыПоДокументу = СуммаОплатыПоЭтапам  И СуммаЗалогаПоДокументу = СуммаЗалогаПоЭтапам Тогда
		
			ТекстВопроса = НСтр("ru='Сумма заказанных строк совпадает с суммой этапов оплаты';uk='Сума замовлених рядків співпадає із сумою етапів оплати'") + Символы.ПС +
								НСтр("ru='Перезаполнить этапы оплаты %ИсточникЗаполнения%?';uk='Перезаповнити етапи оплати %ИсточникЗаполнения%?'");
		
		ИначеЕсли Не ЭтапыОплатыНеЗаполнены Тогда
		
			ВариантыОтветов.Вставить(1, КодВозвратаДиалога.Нет, НСтр("ru='Распределить сумму';uk='Розподілити суму'"));
			
			ТекстВопроса = НСтр("ru='Этапы оплаты заполнены';uk='Етапи оплати заповнені'")+ Символы.ПС +
							НСтр("ru='Перезаполнить этапы оплаты %ИсточникЗаполнения% или распределить сумму по имеющимся этапам?';uk='Перезаповнити етапи оплати %ИсточникЗаполнения% або розподілити суму за наявними етапами?'");
		
		Иначе
			ПараметрыЗаполнения.ПерезаполнитьЭтапы = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстВопроса) Тогда
		
		Если ПараметрыЗаполнения.ГрафикЗаполнен Тогда 
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИсточникЗаполнения%", НСтр("ru='по графику';uk='за графіком'"));
		ИначеЕсли ГрафикСоглашенияЗаполнен Тогда
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИсточникЗаполнения%", НСтр("ru='по соглашению';uk='за офертою'"));
		Иначе
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИсточникЗаполнения%", НСтр("ru='по умолчанию';uk='по умовчанню'"));
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВыборИсточникаЗаполненияЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		ПоказатьВопрос(Оповещение , ТекстВопроса, ВариантыОтветов);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЭтапыГрафикаОплатыФрагмент(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИсточникаЗаполненияЗавершение(РезультатВопроса, ПараметрыЗаполнения) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаполнения.ПерезаполнитьЭтапы = Истина;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаполнения.РаспределитьСумму = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЭтапыГрафикаОплатыФрагмент(ПараметрыЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаОплатыФрагмент(ПараметрыЗаполнения)

	Если (ПараметрыЗаполнения.ЗаполнитьДату Или ПараметрыЗаполнения.ПерезаполнитьЭтапы) Тогда
		
		ПроверитьКорректностьЖелаемойДатыОтгрузки(ПараметрыЗаполнения);
		
	Иначе
		
		ЗаполнитьЭтапыГрафикаОплатыЗавершение(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьЖелаемойДатыОтгрузки(ПараметрыЗаполнения)
	
	Если Не НеПроверятьКорректностьЭтаповОплаты
		И ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) И ЖелаемаяДатаОтгрузки < НачалоДня(Дата) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВводЖелаемойДатыОтгрузкиФрагмент", ЭтаФорма, ПараметрыЗаполнения);
		
		ТекстВопроса = НСтр("ru='Желаемая дата отгрузки меньше даты документа. Необходимо ввести корректную желаемую дату.';uk='Бажана дата відвантаження менше дати документа. Необхідно ввести коректну бажану дату.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ЗаполнитьЭтапыГрафикаОплатыЗавершение(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводЖелаемойДатыОтгрузкиФрагмент(Результат, ПараметрыЗаполнения) Экспорт
	
	Если Результат <> Неопределено И Результат = КодВозвратаДиалога.ОК Тогда
		
		ЖелаемаяДата = НачалоДня(Дата);
		
		Оповещение = Новый ОписаниеОповещения("ВводЖелаемойДатыОтгрузкиЗавершение", ЭтаФорма, ПараметрыЗаполнения);
		
		РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			ЖелаемаяДата,
			НСтр("ru='Введите желаемую дату отгрузки';uk='Введіть бажану дату відвантаження'"),
			ЧастиДаты.Дата,
			Оповещение);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводЖелаемойДатыОтгрузкиЗавершение(ВыбраннаяДата, ПараметрыЗаполнения) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Если ВыбраннаяДата < НачалоДня(Дата) Тогда
			ТекстПредупреждения = НСтр("ru='Желаемая дата отгрузки меньше даты документа. Этапы оплаты не могут быть заполнены.';uk='Бажана дата відвантаження менше дати документа. Етапи оплати не можуть бути заповнені.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		Иначе
			ЖелаемаяДатаОтгрузки = ВыбраннаяДата;
			ЗаполнитьЭтапыГрафикаОплатыЗавершение(ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаОплатыЗавершение(ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.ЗаполнитьДату Тогда
		ЗаполнитьДатуПредоплатыПоГрафикуСервер();
	КонецЕсли;

	Если ПараметрыЗаполнения.ПерезаполнитьЭтапы Тогда
		
		Если ПараметрыЗаполнения.ГрафикЗаполнен Тогда
			ЗаполнитьЭтапыОплатыПоГрафикуСервер();
		ИначеЕсли ГрафикСоглашенияЗаполнен Тогда
			ЗаполнитьЭтапыОплатыПоСоглашениюСервер();
		Иначе
			ДобавитьЭтапОплатыПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.РаспределитьСумму Тогда
		РаспределитьСуммуПоЭтапамГрафикаОплаты();
	КонецЕсли;

	ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
	ПронумероватьТаблицуЭтапов();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура НастроитьЭлементыФормы()

	МассивЭлементов = Новый Массив;
	Если УпрощенныйРежим Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаУпрощеннаяСхема;
		МассивЭлементов.Добавить("СтраницаРасширеннаяНастройка");
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасширеннаяНастройка;
		МассивЭлементов.Добавить("СтраницаУпрощеннаяСхема");
		МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплатыФорма");
		МассивЭлементов.Добавить("РаспределитьСуммуФорма");
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЭтапыОплатыВариантОплаты");
	МассивЭлементов.Добавить("ГруппаКредит");
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", УчитыватьВариантОплаты);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СуммаПлатежаПредоплата");
	МассивЭлементов.Добавить("СуммаЗалогаЗаТаруПредоплата");
	МассивЭлементов.Добавить("ПроцентПлатежаПредоплата");
	МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруПредоплата");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "ТолькоПросмотр", Не УчитыватьВариантОплаты);
		
	Элементы.ГруппаПредоплата.ОтображатьЗаголовок = Истина;;
	Элементы.ГруппаПредоплата.Отображение = ОтображениеОбычнойГруппы.Нет;
		
	Если Не УчитыватьВариантОплаты И УпрощенныйРежим Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("СуммаОплатыПоДокументу");
		МассивЭлементов.Добавить("ВалютаОплатыПоДокументу");
		МассивЭлементов.Добавить("СуммаЗалогаПоДокументу");
		МассивЭлементов.Добавить("ВалютаЗалогаПоДокументу");
		МассивЭлементов.Добавить("РаспределитьСуммуФорма");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
		Элементы.ГруппаПредоплата.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаПредоплата.Отображение = ОтображениеОбычнойГруппы.Нет;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПредоплата", "ТолькоПросмотр",
		РежимРеализации И УчитыватьВариантОплаты);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СуммаЗалогаЗаТаруКредит");
	МассивЭлементов.Добавить("СуммаЗалогаЗаТаруПредоплата");
	МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруКредит");
	МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруПредоплата");
	МассивЭлементов.Добавить("ВалютаЗалогаЗаТаруКредит");
	МассивЭлементов.Добавить("ВалютаЗалогаЗаТаруПредоплата");
	МассивЭлементов.Добавить("СуммаЗалогаПоДокументу");
	МассивЭлементов.Добавить("ВалютаЗалогаПоДокументу");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", ТребуетсяЗалогЗаТару);
	
	Если Не НеПроверятьКорректностьЭтаповОплаты Тогда
		
		Если СуммаЗалогаПоДокументу = 0 Тогда
			
			МассивЭлементов = Новый Массив;
			МассивЭлементов.Добавить("СуммаЗалогаЗаТаруКредит");
			МассивЭлементов.Добавить("СуммаЗалогаЗаТаруПредоплата");
			МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруКредит");
			МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруПредоплата");
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
			
		КонецЕсли;
		
		Если СуммаОплатыПоДокументу = 0 Тогда
			
			МассивЭлементов = Новый Массив;
			МассивЭлементов.Добавить("СуммаПлатежаПредоплата");
			МассивЭлементов.Добавить("СуммаПлатежаКредит");
			МассивЭлементов.Добавить("ПроцентПлатежаПредоплата");
			МассивЭлементов.Добавить("ПроцентПлатежаКредит");
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
			
		КонецЕсли;
		
		Если СуммаЗалогаПоДокументу = 0 И СуммаОплатыПоДокументу = 0 Тогда
			
			МассивЭлементов = Новый Массив;
			МассивЭлементов.Добавить("ДатаПредоплата");
			МассивЭлементов.Добавить("ДатаКредит");
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не УчитыватьВариантОплаты И УпрощенныйРежим Тогда
		Элементы.Переместить(Элементы.ГруппаПредоплата, Элементы.ГруппаГрафикИФормаОплаты);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаИсточникиОплаты", "Видимость", Не НеУказыватьИсточникиОплаты);
	
	УстановитьДоступностьКнопокЗаполнения();
	
	Если РежимСамообслуживания Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ПорядокРасчетов");
		МассивЭлементов.Добавить("Касса");
		МассивЭлементов.Добавить("БанковскийСчет");
		МассивЭлементов.Добавить("ДатаПредоплата");
		МассивЭлементов.Добавить("СуммаПлатежаПредоплата");
		МассивЭлементов.Добавить("СуммаЗалогаЗаТаруПредоплата");
		МассивЭлементов.Добавить("ПроцентПлатежаПредоплата");
		МассивЭлементов.Добавить("СуммаЗалогаЗаТаруПредоплата");
		МассивЭлементов.Добавить("ДатаКредит");
		МассивЭлементов.Добавить("СуммаПлатежаКредит");
		МассивЭлементов.Добавить("СуммаЗалогаЗаТаруКредит");
		МассивЭлементов.Добавить("ПроцентПлатежаКредит");
		МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруКредит");
		МассивЭлементов.Добавить("ЭтапыГрафикаОплаты");
		Если ЗначениеЗаполнено(Соглашение) И ЗначениеЗаполнено(Соглашение.ФормаОплаты) Тогда
			МассивЭлементов.Добавить("ФормаОплаты");
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
		СамообслуживаниеСервер.УправлениеЭлементомФормыФормаОплаты(ЭтаФорма, Соглашение, Элементы.ФормаОплаты);
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ГрафикОплаты");
		МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплатыФорма");
		МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплатыТаблица");
		МассивЭлементов.Добавить("РаспределитьСуммуФорма");
		МассивЭлементов.Добавить("РаспределитьСуммуТаблица");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
	Если Параметры.СпециальныеЗаголовкиЭтаповДляВозврата Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредоплата", "Заголовок",
			НСтр("ru='Предоплата или возврат (до отгрузки)';uk='Передоплата або повернення (до відвантаження)'"));
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКредит", "Заголовок",
			НСтр("ru='Кредит или возврат (после отгрузки)';uk='Кредит або повернення (після відвантаження)'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокЗаполнения()
	
	ДоступностьЭлемента = НеПроверятьКорректностьЭтаповОплаты Или СуммаЗалогаПоДокументу <> 0 Или СуммаОплатыПоДокументу <> 0;
	Элементы.ЗаполнитьЭтапыГрафикаОплатыФорма.Доступность   = ДоступностьЭлемента;
	Элементы.ЗаполнитьЭтапыГрафикаОплатыТаблица.Доступность = ДоступностьЭлемента;
	Элементы.РаспределитьСуммуФорма.Доступность             = ДоступностьЭлемента;
	Элементы.РаспределитьСуммуТаблица.Доступность           = ДоступностьЭлемента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоФормеОплаты()
	
	ЛюбаяОплата      = Не ЗначениеЗаполнено(ФормаОплаты);
	ДоступностьКассы = ЛюбаяОплата Или (ФормаОплаты = Перечисления.ФормыОплаты.Наличная);
	ДоступностьСчета = ЛюбаяОплата Или (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Касса", "Доступность", ДоступностьКассы);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчет", "Доступность", ДоступностьСчета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаПорядокРасчетов()
	
	Если Параметры.Свойство("ПорядокРасчетов") Тогда
		
		ПорядокРасчетов = Параметры.ПорядокРасчетов;
		ДоступныеПорядкиРасчетов = Неопределено;
		
		Если Параметры.Свойство("ДоступныеПорядкиРасчетов", ДоступныеПорядкиРасчетов)
				И ДоступныеПорядкиРасчетов.Количество() > 1 Тогда
			
			Элементы.ПорядокРасчетов.СписокВыбора.ЗагрузитьЗначения(ДоступныеПорядкиРасчетов.ВыгрузитьЗначения());
			Элементы.ПорядокРасчетов.ТолькоПросмотр = Ложь;
			Элементы.ПорядокРасчетов.РежимВыбораИзСписка = Истина;
			
		КонецЕсли;
		
		УстановитьДоступностьЭлементовПоПорядкуРасчета();
		
	Иначе
		
		Элементы.ПорядокРасчетов.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоПорядкуРасчета()
	
	Если ЭтоЗаказ И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		Элементы.ГруппаСтраницы.Доступность                   = Ложь;
		Элементы.ЗаполнитьЭтапыГрафикаОплатыФорма.Доступность = Ложь;
		Элементы.РаспределитьСуммуФорма.Доступность           = Ложь;
		Элементы.ГрафикОплаты.Доступность                     = Ложь;
		Элементы.ФормаОплаты.Доступность                      = Ложь;
		Элементы.Касса.Доступность                            = Ложь;
		Элементы.БанковскийСчет.Доступность                   = Ложь;
		
	Иначе
		
		Элементы.ГруппаСтраницы.Доступность = Истина;
		Элементы.ГрафикОплаты.Доступность   = Истина;
		Элементы.ФормаОплаты.Доступность    = Истина;
		
		УстановитьДоступностьКнопокЗаполнения();
		УстановитьДоступностьЭлементовПоФормеОплаты();
		
	КонецЕсли;
	
	ЗапретРедактированияГрафика = (ГрафикИсполненияВДоговоре И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	Если ЗапретРедактированияГрафика Тогда
		Элементы.ПорядокРасчетов.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы.ПорядокРасчетов.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Элементы.ГрафикОплаты.Видимость = Не ЗапретРедактированияГрафика;
	Элементы.ГруппаПредоплата.Доступность = Не ЗапретРедактированияГрафика;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстКнопкиЗаполнения(Форма)
	
	ТекстКнопкиЗаполнения = НСтр("ru='Заполнить по умолчанию';uk='Заповнити по умовчанню'");
	Если Форма.ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Форма.ГрафикОплаты) Тогда
		ТекстКнопкиЗаполнения = НСтр("ru='Заполнить по графику';uk='Заповнити за графіком'");
	ИначеЕсли Форма.ГрафикСоглашенияЗаполнен Тогда
		ТекстКнопкиЗаполнения = НСтр("ru='Заполнить по соглашению';uk='Заповнити за офертою'");
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплатыФорма");
	МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплатыТаблица");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы, МассивЭлементов, "Заголовок", ТекстКнопкиЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипЭлементовСуммыПлатежа()
	
	ОграниченныйТип = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("ЭтапыГрафикаОплатыСуммаПлатежа");
	МассивЭлементов.Добавить("СуммаПлатежаПредоплата");
	МассивЭлементов.Добавить("СуммаПлатежаКредит");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ОграничениеТипа", ОграниченныйТип);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(ЭтапыГрафикаОплаты.Выгрузить(), ИдентификаторВызывающейФормы);
	
КонецФункции

&НаСервере
Функция ПреобразоватьДанныеУпрощенногоРежимаВТаблицуЭтапов()
	
	ТаблицаРезультат = ЭтапыГрафикаОплаты.Выгрузить();
	ТаблицаРезультат.Очистить();
	
	Если ЭтапСодержитДанные("Предоплата") Тогда
		
		СтрокаПредоплаты = ТаблицаРезультат.Добавить();
		СтрокаПредоплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки;
		
		СтрокаПредоплаты.ДатаПлатежа             = ДатаПредоплата;
		СтрокаПредоплаты.СуммаПлатежа            = СуммаПлатежаПредоплата;
		СтрокаПредоплаты.ПроцентПлатежа          = ПроцентПлатежаПредоплата;
		Если ТребуетсяЗалогЗаТару Тогда
			СтрокаПредоплаты.СуммаЗалогаЗаТару   = СуммаЗалогаЗаТаруПредоплата;
			СтрокаПредоплаты.ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТаруПредоплата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтапСодержитДанные("Кредит") Тогда
		
		СтрокаКредита = ТаблицаРезультат.Добавить();
		СтрокаКредита.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
		
		СтрокаКредита.ДатаПлатежа             = ДатаКредит;
		СтрокаКредита.СуммаПлатежа            = СуммаПлатежаКредит;
		СтрокаКредита.ПроцентПлатежа          = ПроцентПлатежаКредит;
		Если ТребуетсяЗалогЗаТару Тогда
			СтрокаКредита.СуммаЗалогаЗаТару   = СуммаЗалогаЗаТаруКредит;
			СтрокаКредита.ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТаруКредит;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервере
Функция ЭтапСодержитДанные(ВариантОплаты)
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("СуммаПлатежа");
	Если ТребуетсяЗалогЗаТару Тогда
		МассивРеквизитов.Добавить("СуммаЗалогаЗаТару");
	КонецЕсли;
	Если НеПроверятьКорректностьЭтаповОплаты Тогда
		МассивРеквизитов.Добавить("Дата");
		МассивРеквизитов.Добавить("ПроцентПлатежа");
		Если ТребуетсяЗалогЗаТару Тогда
			МассивРеквизитов.Добавить("ПроцентЗалогаЗаТару");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МассивРеквизитов Цикл
		Если ЗначениеЗаполнено(ЭтаФорма[ТекРеквизит + ВариантОплаты]) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СохранитьДатуПлатежаДляРеализации()
	
	ДобавитьЭтап = Истина;
	
	Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		
		Отбор = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
		Если ЭтапыГрафикаОплаты.НайтиСтроки(Отбор).Количество() > 0 Тогда
			ДобавитьЭтап = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДобавитьЭтап Тогда
		
		СтрокаКредита = ЭтапыГрафикаОплаты.Добавить();
		СтрокаКредита.ДатаПлатежа = ДатаКредит;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыОплаты)
	
	ОчиститьДанныеУпрощенногоРежима(ЭтаФорма);
	
	Если ЭтапыОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		
		Если ТекСтрока.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
			СуммаПлатежаКредит   = СуммаПлатежаКредит + ТекСтрока.СуммаПлатежа;
			ПроцентПлатежаКредит = ПроцентПлатежаКредит + ТекСтрока.ПроцентПлатежа;
			Если ТребуетсяЗалогЗаТару Тогда
				СуммаЗалогаЗаТаруКредит   = СуммаЗалогаЗаТаруКредит + ТекСтрока.СуммаЗалогаЗаТару;
				ПроцентЗалогаЗаТаруКредит = ПроцентЗалогаЗаТаруКредит + ТекСтрока.ПроцентЗалогаЗаТару;
			КонецЕсли;
			ДатаКредит = Макс(ДатаКредит, ТекСтрока.ДатаПлатежа);
		Иначе //аванс и предоплата суммируются в общую сумму
			СуммаПлатежаПредоплата   = СуммаПлатежаПредоплата + ТекСтрока.СуммаПлатежа;
			ПроцентПлатежаПредоплата = ПроцентПлатежаПредоплата + ТекСтрока.ПроцентПлатежа;
			Если ТребуетсяЗалогЗаТару Тогда
				СуммаЗалогаЗаТаруПредоплата   = СуммаЗалогаЗаТаруПредоплата + ТекСтрока.СуммаЗалогаЗаТару;
				ПроцентЗалогаЗаТаруПредоплата = ПроцентЗалогаЗаТаруПредоплата + ТекСтрока.ПроцентЗалогаЗаТару;
			КонецЕсли;
			ДатаПредоплата = Макс(ДатаПредоплата, ТекСтрока.ДатаПлатежа);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РежимРеализации И ЗначениеЗаполнено(НеизменяемаяДатаПредоплаты) Тогда
		Если ЗначениеЗаполнено(ДатаКредит) И ЗначениеЗаполнено(ДатаПредоплата) Тогда
			ДатаКредит = НеизменяемаяДатаПредоплаты + (ДатаКредит - ДатаПредоплата);
		КонецЕсли;
		ДатаПредоплата = НеизменяемаяДатаПредоплаты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеУпрощенногоРежима(Форма)
	
	Форма.ДатаПредоплата                = Неопределено;
	Форма.ДатаКредит                    = Неопределено;
	Форма.СуммаПлатежаПредоплата        = 0;
	Форма.СуммаПлатежаКредит            = 0;
	Форма.ПроцентПлатежаПредоплата      = 0;
	Форма.ПроцентПлатежаКредит          = 0;
	Форма.СуммаЗалогаЗаТаруПредоплата   = 0;
	Форма.СуммаЗалогаЗаТаруКредит       = 0;
	Форма.ПроцентЗалогаЗаТаруПредоплата = 0;
	Форма.ПроцентЗалогаЗаТаруКредит     = 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказатели(Форма)
	
	ПредыдущееЗначениеДаты = Дата(1,1,1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	Форма.НомерСтрокиПолнойОплатыЗалога = 0;
	Форма.ПроцентПлатежейОбщий = 0;
	Форма.ПроцентЗалогаОбщий   = 0;
	
	Если Форма.УпрощенныйРежим Тогда
		
		Форма.ПроцентПлатежейОбщий = Форма.ПроцентПлатежаПредоплата + Форма.ПроцентПлатежаКредит;
		Форма.ПроцентЗалогаОбщий   = Форма.ПроцентЗалогаЗаТаруПредоплата + Форма.ПроцентЗалогаЗаТаруКредит;
		
	Иначе
		
		Для Каждого ТекСтрока Из Форма.ЭтапыГрафикаОплаты Цикл
			
			Форма.ПроцентПлатежейОбщий = Форма.ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
			ТекСтрока.ПроцентЗаполненНеВерно = (Форма.ПроцентПлатежейОбщий > 100);
			Если Форма.ПроцентПлатежейОбщий = 100 Тогда
				Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
			КонецЕсли;
			
			Форма.ПроцентЗалогаОбщий = Форма.ПроцентЗалогаОбщий + ТекСтрока.ПроцентЗалогаЗаТару;
			ТекСтрока.ПроцентЗалогаЗаполненНеВерно = (Форма.ПроцентЗалогаОбщий > 100);
			Если Форма.ПроцентЗалогаОбщий = 100 Тогда
				Форма.НомерСтрокиПолнойОплатыЗалога = ТекСтрока.НомерСтроки;
			КонецЕсли;
			
			ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
			ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьЭтапыОплаты()
	
	Если УчитыватьВариантОплаты Тогда
		
		Для Каждого ЭтапОплаты Из ЭтапыГрафикаОплаты Цикл
			Если ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 1;
			ИначеЕсли ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 2;
			Иначе
				ЭтапОплаты.НомерВариантаОплаты = 3;
			КонецЕсли;
		КонецЦикла;
		
		ЭтапыГрафикаОплаты.Сортировать("НомерВариантаОплаты, ДатаПлатежа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПронумероватьТаблицуЭтапов()
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из ЭтапыГрафикаОплаты Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораФормыОплаты()
	
	Перем ОтборПоСсылке;
	
	Для Каждого ТекПараметр Из Элементы.ФормаОплаты.ПараметрыВыбора Цикл
		Если ТекПараметр.Имя = "Отбор.Ссылка" Тогда
			ОтборПоСсылке = ТекПараметр.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФормыОплаты.Ссылка
	|ИЗ
	|	Перечисление.ФормыОплаты КАК ФормыОплаты";
	
	Если ОтборПоСсылке <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("Ссылка В(&ОтборПоСсылке)");
		Запрос.УстановитьПараметр("ОтборПоСсылке", ОтборПоСсылке);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
		
	Выборка      = Запрос.Выполнить().Выбрать();
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Не РежимСамообслуживания Тогда
		СписокВыбора.Добавить(Перечисления.ФормыОплаты.ПустаяСсылка(), НСтр("ru='Любая';uk='Будь-яка'"));
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОплатыПлатежнойКартой(Элементы.ФормаОплаты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест"
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Параметры.Свойство("Идентификатор", Идентификатор);
	Параметры.Свойство("ДрайверОборудования", ДрайверОборудования);
	Заголовок = НСтр("ru='ФР';uk='ФР'") + " """ + Строка(Идентификатор) + """";

	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветОшибки = ЦветаСтиля.ЦветОтрицательногоЧисла;

	СпПорт = Элементы.Порт.СписокВыбора;
	Индекс = Неопределено;
	Для Индекс = 1 По 99 Цикл
		СпПорт.Добавить(Индекс, "COM" + СокрЛП(Индекс));
	КонецЦикла;

	СпСкорость = Элементы.Скорость.СписокВыбора;
	СпСкорость.Добавить(1,   "4800");
	СпСкорость.Добавить(2,   "9600");
	СпСкорость.Добавить(3,  "19200");
	СпСкорость.Добавить(4,  "38400");
	СпСкорость.Добавить(5,  "57600");
	СпСкорость.Добавить(6, "115200");
	
	СпМодель = Элементы.Модель.СписокВыбора;
	СпМодель.Добавить("001", "Datecs FP3530T (протокол Datecs)");
	СпМодель.Добавить("101", "Datecs FP3530T (протокол Krypton)");
	СпМодель.Добавить("102", "Datecs FP-3141T (протокол Krypton)");
	СпМодель.Добавить("103", "Datecs FP-T260 (протокол Krypton)");
	СпМодель.Добавить("104", "Datecs CMP-10 (протокол Krypton)");
	СпМодель.Добавить("108", "Datecs CMP-10M (протокол Krypton)");
	СпМодель.Добавить("105", "Datecs FP–Т88 (протокол Krypton)");
	СпМодель.Добавить("106", "Datecs FP–320  (протокол Krypton)");
	СпМодель.Добавить("002", "Екселліо FPU-550");
	СпМодель.Добавить("003", "Екселліо FPU-550ES");
	СпМодель.Добавить("008", "Екселліо FPU-260");
	СпМодель.Добавить("004", "Екселліо LP-1000");
	СпМодель.Добавить("005", "Екселліо FP-700");
	СпМодель.Добавить("006", "Екселліо FP-2000");
	СпМодель.Добавить("007", "Екселліо FPР-350");
	СпМодель.Добавить("009", "Екселліо FP-280");
	СпМодель.Добавить("010", "KBM FP-S651");
	СпМодель.Добавить("011", "KBM FP-СMP10");
	СпМодель.Добавить("109", "Datecs FP-101 Smart");
	СпМодель.Добавить("110", "Datecs FP-7197");
	СпМодель.Добавить("201", "Марія 301МТМ");
	СпМодель.Добавить("202", "Марія 304Т");
	СпМодель.Добавить("203", "Марія 304Т1");
	СпМодель.Добавить("204", "Марія 304Т2");
	СпМодель.Добавить("301", "IKС-483 LT");
	СпМодель.Добавить("302", "IKС-Е260Т");
	СпМодель.Добавить("303", "ІКС-Е810Т");
	СпМодель.Добавить("304", "ІКС-С651Т");
	СпМодель.Добавить("305", "ІКС-А8800");
	СпМодель.Добавить("309", "ІКС-E07");
	СпМодель.Добавить("306", "MG-T808TL");
	СпМодель.Добавить("310", "MG-Р800TL");
	СпМодель.Добавить("308", "MG N707TS (RS-232)");
	СпМодель.Добавить("311", "MG-Р777TL (RS-232)");
	СпМодель.Добавить("312", "MG-T787TL (RS-232)");
	СпМодель.Добавить("601", "MG N707TS (TCP/IP)");
	СпМодель.Добавить("603", "MG-Р777TL (TCP/IP)");
	СпМодель.Добавить("604", "MG-T787TL (TCP/IP)");
	СпМодель.Добавить("307", "ФР7");
	СпМодель.Добавить("402", "Міні-ФП4");
	СпМодель.Добавить("401", "Міні-ФП6");
	СпМодель.Добавить("501", "Міні-ФП54.01");
	СпМодель.Добавить("502", "Міні-ФП81.01");
	СпМодель.Добавить("503", "Міні-ФП82.01");
	СпМодель.Добавить("504", "Міні-Т 400ME");
	СпМодель.Добавить("505", "Міні-Т 51.01");
	СпМодель.Добавить("506", "Міні-Т 61.01");
	СпМодель.Добавить("602", "IPOS.XM (TCP/IP)");
	СпМодель.Добавить("701", "LeoCAS-200");
	СпМодель.Добавить("702", "LeoCAS-201");
	СпМодель.Добавить("*01", "Емулятор фіскального реєстратора");
	
    ЗаполнитьСписокВыбораТипСоединения();
	
	времТипСоединения	           = Неопределено;
	
	времIP	                       = Неопределено;
	времПортIP	                   = Неопределено;
	времПорт                       = Неопределено;
	времСкорость                   = Неопределено;
	времМодель                     = Неопределено;
	времИспользоватьДисплей        = Неопределено;
	 
	времТаблицаСоответствий        = Неопределено;
	
	времНесколькоАкцизныхМарокДляОдногоТовара = Неопределено;
	времШтрихкодАкцизнойМаркиВВидеШтрихкода	  = Неопределено;
	времКодПоУКТВЭДВВидеШтрихкода 			  = Неопределено;

	Параметры.ПараметрыОборудования.Свойство("IP"             , времIP);
	Параметры.ПараметрыОборудования.Свойство("ПортIP"         , времПортIP);
	Параметры.ПараметрыОборудования.Свойство("Порт"           , времПорт);
	Параметры.ПараметрыОборудования.Свойство("Скорость"       , времСкорость);
	Параметры.ПараметрыОборудования.Свойство("Модель"         , времМодель);
	Параметры.ПараметрыОборудования.Свойство("ИспользоватьДисплей", времИспользоватьДисплей);
	Параметры.ПараметрыОборудования.Свойство("ТаблицаСоответствийНалоговыхГрупп", времТаблицаСоответствий);
	Параметры.ПараметрыОборудования.Свойство("НесколькоАкцизныхМарокДляОдногоТовара", времНесколькоАкцизныхМарокДляОдногоТовара);
	Параметры.ПараметрыОборудования.Свойство("ШтрихкодАкцизнойМаркиВВидеШтрихкода"  , времШтрихкодАкцизнойМаркиВВидеШтрихкода);
	Параметры.ПараметрыОборудования.Свойство("КодПоУКТВЭДВВидеШтрихкода"            , времКодПоУКТВЭДВВидеШтрихкода);
	
	Параметры.ПараметрыОборудования.Свойство("ТипСоединения"  , времТипСоединения);

	ТипСоединения              = ?(времТипСоединения              = Неопределено, 0, времТипСоединения);
	
	IP	                       = ?(времIP	                      = Неопределено, ?(ЭтоTCPIPСоединение(ТипСоединения),"192.168.0.1",""), времIP);
	ПортIP                     = ?(времПортIP	                  = Неопределено, ?(ЭтоTCPIPСоединение(ТипСоединения),4545,0), времПортIP);
	Порт                       = ?(времПорт                       = Неопределено, 1, времПорт);
	Скорость                   = ?(времСкорость                   = Неопределено, 0, времСкорость);
	Модель                     = ?(времМодель                     = Неопределено,   Элементы.Модель.СписокВыбора[0].Значение, времМодель);
	ИспользоватьДисплей        = ?(времИспользоватьДисплей        = Неопределено,   Ложь, времИспользоватьДисплей);
	НесколькоАкцизныхМарокДляОдногоТовара = ?(времНесколькоАкцизныхМарокДляОдногоТовара = Неопределено, Ложь, времНесколькоАкцизныхМарокДляОдногоТовара);
	ШтрихкодАкцизнойМаркиВВидеШтрихкода	  = ?(времШтрихкодАкцизнойМаркиВВидеШтрихкода   = Неопределено, Ложь, времШтрихкодАкцизнойМаркиВВидеШтрихкода);
	КодПоУКТВЭДВВидеШтрихкода			  = ?(времКодПоУКТВЭДВВидеШтрихкода             = Неопределено, Ложь, времКодПоУКТВЭДВВидеШтрихкода);
	
	Если Модель = "602" Тогда
		ТекстПредупрежденияПриСтарте = НСтр("ru='Модель %1 более не актуальна.
                                            |Просьба выбрать другую!'
                                            |;uk='Модель %1 більше не актуальна.
                                            |Прохання вибрати іншу!'");
		ТекстПредупрежденияПриСтарте = СтрЗаменить(ТекстПредупрежденияПриСтарте, "%1", "IPOS.XM (TCP/IP)");
	КонецЕсли;
	
	ЗаполнитьТаблицуСоответствийИзПараметров(времТаблицаСоответствий);
	
	Элементы.ТестУстройства.Видимость    = (ПараметрыСеанса.РабочееМестоКлиента
	                                        = Идентификатор.РабочееМесто);
	Элементы.УстановитьДрайвер.Видимость = (ПараметрыСеанса.РабочееМестоКлиента
	                                        = Идентификатор.РабочееМесто);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбновитьИнформациюОДрайвере();
	
	Если ЗначениеЗаполнено(ТекстПредупрежденияПриСтарте) Тогда
		ПоказатьПредупреждение(,ТекстПредупрежденияПриСтарте,,НСтр("ru='Внимание!';uk='Увага!'"));
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Процедура представляет обработчик события "Нажатие" кнопки
// "ОК" командной панели "ОсновныеДействияФормы".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "ОК").
//
&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	НовыеЗначениеПараметров = Новый Структура;
	НовыеЗначениеПараметров.Вставить("ТипСоединения"   , ТипСоединения);
	НовыеЗначениеПараметров.Вставить("IP"              , IP);
	НовыеЗначениеПараметров.Вставить("ПортIP"          , ПортIP);
	НовыеЗначениеПараметров.Вставить("Порт"            , Порт);
	НовыеЗначениеПараметров.Вставить("Скорость"        , Скорость);
	НовыеЗначениеПараметров.Вставить("Модель"          , Модель);
	НовыеЗначениеПараметров.Вставить("ИспользоватьДисплей", ИспользоватьДисплей);
	НовыеЗначениеПараметров.Вставить("НесколькоАкцизныхМарокДляОдногоТовара", НесколькоАкцизныхМарокДляОдногоТовара);
	НовыеЗначениеПараметров.Вставить("ШтрихкодАкцизнойМаркиВВидеШтрихкода"  , ШтрихкодАкцизнойМаркиВВидеШтрихкода);
	НовыеЗначениеПараметров.Вставить("КодПоУКТВЭДВВидеШтрихкода"			, КодПоУКТВЭДВВидеШтрихкода);
	НовыеЗначениеПараметров.Вставить("ТаблицаСоответствийНалоговыхГрупп", ПолучитьПараметрыИзТаблицыСоответствий());
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", Идентификатор);
	Результат.Вставить("ПараметрыОборудования", НовыеЗначениеПараметров);
	
	Закрыть(Результат);

КонецПроцедуры

&НаКлиенте
Процедура ТестУстройства(Команда)

	РезультатТеста    = Неопределено;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("ТипСоединения"             , ТипСоединения);
	времПараметрыУстройства.Вставить("IP"                        , IP);
	времПараметрыУстройства.Вставить("ПортIP"                    , ПортIP);
	времПараметрыУстройства.Вставить("Порт"                      , Порт);
	времПараметрыУстройства.Вставить("Скорость"                  , Скорость);
	времПараметрыУстройства.Вставить("Модель"                    , Модель);
	времПараметрыУстройства.Вставить("ИспользоватьДисплей"       , ИспользоватьДисплей);
	времПараметрыУстройства.Вставить("ТаблицаСоответствийНалоговыхГрупп", ПолучитьПараметрыИзТаблицыСоответствий());

	Результат = МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("CheckHealth",
	                                                                      ВходныеПараметры,
	                                                                      ВыходныеПараметры,
	                                                                      Идентификатор,
	                                                                      времПараметрыУстройства);

	ДополнительноеОписание = ?(ТипЗнч(ВыходныеПараметры) = Тип("Массив")
	                           И ВыходныеПараметры.Количество(),
	                           НСтр("ru='Дополнительное описание:';uk='Додатковий опис:'") + " " + ВыходныеПараметры[1],
	                           "");
	Если Результат Тогда
		ТекстСообщения = НСтр("ru='Тест успешно выполнен.%ПереводСтроки%%ДополнительноеОписание%';uk='Тест успішно виконано.%ПереводСтроки%%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПереводСтроки%", ?(ПустаяСтрока(ДополнительноеОписание),
		                                                                  "",
		                                                                  Символы.ПС));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ?(ПустаяСтрока(ДополнительноеОписание),
		                                                                           "",
		                                                                           ДополнительноеОписание));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru='Тест не пройден.%ПереводСтроки%%ДополнительноеОписание%';uk='Тест не пройдено.%ПереводСтроки%%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПереводСтроки%", ?(ПустаяСтрока(ДополнительноеОписание),
		                                                                  "",
		                                                                  Символы.ПС));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ?(ПустаяСтрока(ДополнительноеОписание),
		                                                                           "",
		                                                                           ДополнительноеОписание));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайверИзАрхиваПриЗавершении(Результат) Экспорт 
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Установка драйвера завершена.';uk='Встановлення драйвера завершена.'")); 
	ОбновитьИнформациюОДрайвере();
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьДрайверИзДистрибутиваПриЗавершении(Результат, Параметры) Экспорт 
	
	Если Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Установка драйвера завершена.';uk='Встановлення драйвера завершена.'")); 
		ОбновитьИнформациюОДрайвере();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При установке драйвера из дистрибутива произошла ошибка.';uk='При встановленні драйвера з дистрибутива сталася помилка.'")); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайвер(Команда)

	ОчиститьСообщения();
	ОповещенияДрайверИзДистрибутиваПриЗавершении = Новый ОписаниеОповещения("УстановитьДрайверИзДистрибутиваПриЗавершении", ЭтотОбъект);
	ОповещенияДрайверИзАрхиваПриЗавершении = Новый ОписаниеОповещения("УстановитьДрайверИзАрхиваПриЗавершении", ЭтотОбъект);
	МенеджерОборудованияКлиент.УстановитьДрайвер(ДрайверОборудования, ОповещенияДрайверИзДистрибутиваПриЗавершении, ОповещенияДрайверИзАрхиваПриЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	
	ОбновитьИнформациюОДрайвере();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСоединенияПриИзменении(Элемент)
	
	Если ЭтоTCPIPСоединение(ТипСоединения) Тогда
		IP       = "192.168.0.1";
		ПортIP   = 4545;
		Порт     = 1;
		Скорость = 0;
	Иначе
		IP       = "";
		ПортIP   = 0;
		Порт     = 1;
		Скорость = 0;
	КонецЕсли;
	
	ОбновитьИнформациюОДрайвере();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьИнформациюОДрайвере()

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("ТипСоединения"             , ТипСоединения);
	времПараметрыУстройства.Вставить("IP"              	       	 , IP);
	времПараметрыУстройства.Вставить("ПортIP"          	       	 , ПортIP);
	времПараметрыУстройства.Вставить("Порт"                      , Порт);
	времПараметрыУстройства.Вставить("Скорость"                  , Скорость);
	времПараметрыУстройства.Вставить("Модель"                    , Модель);
	времПараметрыУстройства.Вставить("ИспользоватьДисплей"       , ИспользоватьДисплей);
	времПараметрыУстройства.Вставить("ТаблицаСоответствийНалоговыхГрупп", ПолучитьПараметрыИзТаблицыСоответствий());

	Если МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("ПолучитьВерсиюДрайвера",
	                                                               ВходныеПараметры,
	                                                               ВыходныеПараметры,
	                                                               Идентификатор,
	                                                               времПараметрыУстройства) Тогда
		Драйвер = ВыходныеПараметры[0];
		Версия  = ВыходныеПараметры[1];
	Иначе
		Драйвер = ВыходныеПараметры[2];
		Версия  = НСтр("ru='Не определена';uk='Не визначена'");
	КонецЕсли;

	Элементы.Драйвер.ЦветТекста = ?(Драйвер = НСтр("ru='Не установлен';uk='Не встановлений'"), ЦветОшибки, ЦветТекста);
	Элементы.Версия.ЦветТекста  = ?(Версия  = НСтр("ru='Не определена';uk='Не визначена'"), ЦветОшибки, ЦветТекста);

	Элементы.УстановитьДрайвер.Доступность = Не (Драйвер = НСтр("ru='Установлен';uk='Встановлений'"));

	Если ЭтоTCPIPСоединение(ТипСоединения) Тогда
		Элементы.IP.Видимость       = Истина;
		Элементы.ПортIP.Видимость   = Истина;
		Элементы.Порт.Видимость     = Ложь;
		Элементы.Скорость.Видимость = Ложь;
	Иначе
		Элементы.IP.Видимость       = Ложь;
		Элементы.ПортIP.Видимость   = Ложь;
		Элементы.Порт.Видимость     = Истина;
		Элементы.Скорость.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСоответствийИзПараметров(ТаблицаСоответствийИзПараметров = Неопределено)
	
	ТаблицаСоответствий.Очистить();
	
	Если ТаблицаСоответствийИзПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из ТаблицаСоответствийИзПараметров Цикл
		
		Строка = ТаблицаСоответствий.Добавить();
		
		Строка.НалоговаяГруппаРРО = Элемент[0];
		Строка.СтавкаНДС          = НДСОбщегоНазначенияКлиентСервер.ПолучитьПоСтрокеСтавкуНДС(Элемент[1]);
		Строка.ПодакцизныйТовар   = Элемент[2];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыИзТаблицыСоответствий()
	
	Результат = Новый Массив;
	
	Для каждого Строка Из ТаблицаСоответствий Цикл
		
		Элемент = Новый Массив(3);
		
		Элемент[0] = Строка.НалоговаяГруппаРРО;
		Элемент[1] = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(Строка.СтавкаНДС);
		Элемент[2] = Строка.ПодакцизныйТовар;
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораТипСоединения()
	
	СписокВыбора = Элементы.ТипСоединения.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(0, НСтр("ru='COM';uk='COM'"));
	СписокВыбора.Добавить(1, НСтр("ru='TCP/IP';uk='TCP/IP'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоTCPIPСоединение(ТипСоединения)
	
	// "ТипСоединения = 1" - условие, когда соединение по протоколу TCP/IP
	Возврат (ТипСоединения = 1);
	
КонецФункции

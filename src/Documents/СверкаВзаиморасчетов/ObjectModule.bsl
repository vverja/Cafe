#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	// Очистим табличную часть документа.
	Если ДанныеКонтрагента.Количество() > 0 Тогда
		ДанныеКонтрагента.Очистить();
	КонецЕсли;
	
	Статус = Перечисления.СтатусыСверокВзаиморасчетов.Создана;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьДокументПоДаннымПомощника(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	СтруктураПараметров = Новый Структура("РасшифровкаПоЗаказам, РасшифровкаПоПартнерам, РасшифровкаПоДоговорам, Партнер, Договор",
										   РасшифровкаПоЗаказам, РасшифровкаПоПартнерам, РасшифровкаПоДоговорам, Партнер, Договор);
	
	Документы.СверкаВзаиморасчетов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		СтруктураПараметров, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
	ПроверитьКорректностьПериода(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	СтруктураПараметров = Новый Структура("РасшифровкаПоЗаказам, РасшифровкаПоПартнерам, РасшифровкаПоДоговорам, Партнер, Договор",
										   РасшифровкаПоЗаказам, РасшифровкаПоПартнерам, РасшифровкаПоДоговорам, Партнер, Договор);
	
	Документы.СверкаВзаиморасчетов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		СтруктураПараметров,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Менеджер) Тогда
		Менеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.СтатусыСверокВзаиморасчетов.Создана;
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = ТекущаяДата();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		КонтактноеЛицо = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераКонтрагентаПоУмолчанию(Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоДаннымПомощника(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	ДанныеЗаполнения.Вставить("Дата", Дата);
	
	ДанныеДокумента = Документы.СверкаВзаиморасчетов.РеквизитыПоследнегоДокумента(Контрагент);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеДокумента, "ФИОРуководителяКонтрагента, ДолжностьРуководителяКонтрагента");
	
	Если ДанныеЗаполнения.Свойство("ВариантДетализацииВзаиморасчетов")
	 И ДанныеЗаполнения.ВариантДетализацииВзаиморасчетов = 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеДокумента, "РасшифровкаПоЗаказам, РасшифровкаПоПартнерам, РасшифровкаПоДоговорам");
	КонецЕсли;
	
	Документы.СверкаВзаиморасчетов.ЗаполнитьДанныеКонтрагента(ЭтотОбъект, ДанныеКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыСверокВзаиморасчетов[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

Процедура ПроверитьКорректностьПериода(Отказ)
	
	Если ЗначениеЗаполнено(НачалоПериода)
	 И ЗначениеЗаполнено(КонецПериода)
	 И НачалоПериода > КонецПериода Тогда
	 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата начала периода не должна быть больше окончания периода %1';uk='Дата початку періоду не повинна бути більше закінчення періоду %1'"),
			Формат(КонецПериода, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"НачалоПериода",
			, // ПутьКДанным
			Отказ);
	 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

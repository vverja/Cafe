
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	Иначе
		Если Объект.ПечатныеФормы.Количество() > 0 Тогда
			ПоказыватьПечатныеФормы = Истина;
			УправлениеДоступностью(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ПараметрШаблона Из ПараметрыШаблона Цикл
		
		Если ТипЗнч(ПараметрШаблона.ОписаниеТипа) = Тип("ОписаниеТипов") И 
			ЗначениеЗаполнено(ПараметрШаблона.ОписаниеТипа) Тогда
			МетаданныеПараметра = Метаданные.НайтиПоТипу(ПараметрШаблона.ОписаниеТипа.Типы()[0]);
			Если МетаданныеПараметра <> Неопределено И Не ПравоДоступа("Чтение", МетаданныеПараметра) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				   НСтр("ru='У пользователя недостаточно прав на чтение одного или нескольких типов параметра шаблона.
                              |Обратитесь к администратору.'
                              |;uk='У вас недостатньо прав для читання одного або декількох типів параметру шаблону.
                              |Зверніться до адміністратора.'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	Для каждого ПараметрШаблонаТекущийОбъект Из ТекущийОбъект.Параметры Цикл
	
		НоваяСтрока = ПараметрыШаблона.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрШаблонаТекущийОбъект);
		НоваяСтрока.ОписаниеТипа    = ПараметрШаблонаТекущийОбъект.ТипПараметра.Получить();
	
	КонецЦикла;
	
	Если Объект.ПредназначенДляSMS Тогда
		Если СокрЛП(Объект.Наименование) <> СокрЛП(ВзаимодействияКлиентСервер.ТемаПоТекстуСообщения(Объект.ТекстШаблонаSMS)) Тогда
			НаименованиеРедактировалось = Истина;
		КонецЕсли
	КонецЕсли;
	
	ПриСозданииЧтенииНаСервере();
	
	СписокФорматов = ТекущийОбъект.ФорматВложений.Получить();
	Если СписокФорматов <> Неопределено Тогда
		ВыбранныеФорматыСохранения.ЗаполнитьПометки(Ложь);
		Для Каждого ЭлементСписка Из СписокФорматов Цикл
			НайденноеЗначение = ВыбранныеФорматыСохранения.НайтиПоЗначению(ЭлементСписка.Значение);
			Если  НайденноеЗначение <> Неопределено Тогда
				НайденноеЗначение.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	ПроверитьПравильностьШаблонов(Отказ, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Объект.ШаблонПоВнешнейОбработке Тогда
		ТекущийОбъект.ВнешняяОбработка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ Объект.ПредназначенДляВводаНаОсновании Тогда
		ТекущийОбъект.ПолноеИмяТипаПараметраВводаНаОсновании = "";
	КонецЕсли;
	
	ТекущийОбъект.Параметры.Очистить();
	Для каждого ПараметрШаблона Из ПараметрыШаблона Цикл
	
		НоваяСтрока = ТекущийОбъект.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрШаблона);
		НоваяСтрока.ТипПараметра = Новый ХранилищеЗначения(ПараметрШаблона.ОписаниеТипа);
	
	КонецЦикла;
	
	Если Не ТекущийОбъект.ПредназначенДляЭлектронныхПисем Тогда
		ТекущийОбъект.ФорматВложений = Неопределено;
	Иначе
		СписокФорматов = Новый СписокЗначений;
		Для каждого ЭлементСписка Из ВыбранныеФорматыСохранения Цикл
			Если ЭлементСписка.Пометка Тогда
				ЗаполнитьЗначенияСвойств(СписокФорматов.Добавить(), ЭлементСписка);
			КонецЕсли;
			ТекущийОбъект.ФорматВложений = Новый ХранилищеЗначения(СписокФорматов);
		КонецЦикла;
	КонецЕсли;
	
	Если (Не ПустаяСтрока(ТекущийОбъект.ТекстШаблонаПисьма)) И (НЕ ТекущийОбъект.ПредназначенДляЭлектронныхПисем) Тогда
		ТекущийОбъект.ТекстШаблонаПисьма = "";
	КонецЕсли;
	
	Если (Не ПустаяСтрока(Объект.ТекстШаблонаSMS)) И (НЕ Объект.ПредназначенДляSMS) Тогда
		ТекущийОбъект.ТекстШаблонаSMS = "";
	КонецЕсли;
	
	//Подготовим документ HTML из содержимого форматированного документа
	Если ТекущийОбъект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		
		СтруктураВложений = Новый Структура;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстШаблонаПисьмаHTML, СтруктураВложений);
		Для каждого Вложение Из СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстШаблонаПисьмаHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML( ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
			ТекущийОбъект.ТекстШаблонаПисьмаHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		КонецЕсли;
		
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВыборФормата();
	СформироватьПредставлениеВыбранныхФорматов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВложенияКУдалению = Новый Массив;
	
	//Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа
	ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(ТекущийОбъект.Ссылка);
	Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		ОбъектВложение = Вложение.Ссылка.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	РассылкиИОповещенияКлиентам.СохранитьКартинкиФорматированнногоДокументаКакПрисоединенныеФайлы(
					ТекущийОбъект.Ссылка,
					ТекущийОбъект.ТипТекстаПисьма,
					ТаблицаСоответствийИменВложенийИдентификаторам,
					УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура  ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредназначениеШаблонаПриИзменении(Элемент)
	
	Объект.ПредназначенДляЭлектронныхПисем = ПредназначениеШаблона = 0;
	Объект.ПредназначенДляSMS              = ПредназначениеШаблона = 1;
	
	УправлениеДоступностью(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТипТекстаПисьмаПриИзменении(Элемент)
	
	Если ТипТекстаПисьма = 0 Тогда
		
		ВзаимодействияКлиент.ВопросПриИзмененииФорматаСообщенияНаОбычныйТекст(ЭтаФорма);
		
	Иначе
		
		ТекстПисьмаФорматированныйДокумент.Добавить(Объект.ТекстШаблонаПисьма);
		Объект.ТекстШаблонаПисьма = "";
		Объект.ТипТекстаПисьма    = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML");
		
		УправлениеДоступностью(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяОбработкаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВнешняяОбработка) Тогда
		ОчиститьШаблон(ЭтаФорма);
		Возврат;
	КонецЕсли;
	ЗаполнитьШаблонПоВнешнейОбработке();
	ПредназначениеШаблонаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФормированияСообщенияПриИзменении(Элемент)

	Объект.ШаблонПоВнешнейОбработке = ТипФормированияСообщения = 1;
	
	Если Объект.ШаблонПоВнешнейОбработке И ЗначениеЗаполнено(Объект.ВнешняяОбработка) Тогда
		ЗаполнитьШаблонПоВнешнейОбработке();
	Иначе
		ОчиститьШаблон(ЭтаФорма);
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматВложенийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РезультатВыбораФорматов = Неопределено;

	ОткрытьФорму("ОбщаяФорма.ВыборФорматаВложений", Новый Структура("НастройкиФормата", ВыбранныеНастройкиФормата()),,,,, Новый ОписаниеОповещения("ФорматВложенийНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматВложенийНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатВыбораФорматов = Результат;
    Если РезультатВыбораФорматов <> КодВозвратаДиалога.Отмена И РезультатВыбораФорматов <> Неопределено Тогда
        УстановитьВыборФормата(РезультатВыбораФорматов.ФорматыСохранения);
        Объект.УпаковатьВАрхив = РезультатВыбораФорматов.УпаковатьВАрхив;
        СформироватьПредставлениеВыбранныхФорматов();
        Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредназначенДляВводаНаОснованииПриИзменении(Элемент)
	
	Если Объект.ПредназначенДляВводаНаОсновании И Не ПустаяСтрока(Объект.ПолноеИмяТипаПараметраВводаНаОсновании) Тогда
		
		ДобавитьПредопределенныйПараметрВДеревоСервер(Объект.ПолноеИмяТипаПараметраВводаНаОсновании);
		
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяТипаПараметраВводаНаОснованииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ПолноеИмяТипаПараметраВводаНаОсновании = ВыбранноеЗначение;
	ТипВводаНаОсновании = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	Если Не ПустаяСтрока(Объект.ПолноеИмяТипаПараметраВводаНаОсновании) Тогда
		
		ДобавитьПредопределенныйПараметрВДеревоСервер(Объект.ПолноеИмяТипаПараметраВводаНаОсновании);
		
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаПисьмаПриИзменении(Элемент)
	
	Объект.ТемаПисьма = СокрЛП(ТемаПисьмаФорматированныйДокумент.ПолучитьТекст());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереводоступныхполей

&НаКлиенте
Процедура ДеревоДоступныхПолейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ПараметрыПеретаскивания.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = ДеревоДоступныхПолей.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	Иначе
		ПараметрыПеретаскивания.Значение = "["+ СтрокаРодитель.ИмяПараметра +"." + СтрокаДерева.ИмяПараметра+ "]";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоступныхПолейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияПараметра(ТекущиеДанные, ИменаПредопределенныхПараметров(ТекущиеДанные.ИмяПараметра));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоступныхПолейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияПараметра(ТекущиеДанные,  ИменаПредопределенныхПараметров(ТекущиеДанные.ИмяПараметра));;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПараметра(ТекущиеДанные, МассивИменПредопределенныхПараметров)

	Если ТекущиеДанные.ЭтоПроизвольныйПараметр ИЛИ ТекущиеДанные.ЭтоПредопределенныйПараметр Тогда
		
		СтруктураПараметров = СтруктураДоступныйПараметр();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
		СтруктураПараметров.Вставить("ИменаПредопределенныхПараметров",МассивИменПредопределенныхПараметров);
		ДобавитьПараметрыОткрытияФормыПараметров(СтруктураПараметров);
	
		ОткрытьФорму("Справочник.ШаблоныСообщений.Форма.ДобавлениеПараметра", СтруктураПараметров,,,,, 
			Новый ОписаниеОповещения("ОткрытьФормуРедактированияПараметраЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПараметраЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Результат <> Неопределено Тогда
		СвязаннаяСтрокаДереваПечатныхФорм = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы(),
		                                                                                               "ИмяПараметра",
		                                                                                               Результат.ИмяПараметра);
		Если СвязаннаяСтрокаДереваПечатныхФорм <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СвязаннаяСтрокаДереваПечатныхФорм, Результат);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		
		Модифицированность = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоступныхПолейПередУдалением(Элемент, Отказ)
	
	ИмяДерева = ИмяДереваДоступныхПолей(Элементы.СтраницыПечатныеФормы.ТекущаяСтраница.Имя);
	
	ТекущиеДанные = Элементы[ИмяДерева].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоПредопределенныйПараметр И 
		 НЕ ТекущиеДанные.ЭтоПроизвольныйПараметр И 
		 НЕ ТекущиеДанные.ИмяПараметра = НСтр("ru='Произвольные';uk='Довільні'") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоПредопределенныйПараметр 
		И ТекущиеДанные.ПолноеИмяТипа = Объект.ПолноеИмяТипаПараметраВводаНаОсновании
		И Объект.ПредназначенДляВводаНаОсновании Тогда
		
		Если ШаблоныСообщенийКлиентСервер.НайтиСтрокиВДанныхФормыДерево(ДеревоДоступныхПолей.ПолучитьЭлементы(), "ОписаниеТипа", ТекущиеДанные.ОписаниеТипа).Количество() = 1 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СвязаннаяСтрокаДереваПечатныхФорм = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
	                                        ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы(),
	                                        "ИмяПараметра",
	                                        ТекущиеДанные.ИмяПараметра);
	Если СвязаннаяСтрокаДереваПечатныхФорм <> Неопределено Тогда
		ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы().Удалить(СвязаннаяСтрокаДереваПечатныхФорм);
	КонецЕсли;
	
	ОбновитьПечатныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоступныхПолейПослеУдаления(Элемент)
	
	СтрокаПроизвольные = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоДоступныхПолей.ПолучитьЭлементы(),
	                                                                                "ИмяПараметра",
	                                                                                НСтр("ru='Произвольные';uk='Довільні'"));

	Если СтрокаПроизвольные <> Неопределено Тогда
		Если СтрокаПроизвольные.ПолучитьЭлементы().Количество() = 0 Тогда
			ДеревоДоступныхПолей.ПолучитьЭлементы().Удалить(СтрокаПроизвольные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоступныхПолейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьПараметр();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереводоступныхпечатныхформ

&НаКлиенте
Процедура ДеревоДоступныхПечатныхФормПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = ДеревоДоступныхПечатныхФорм.НайтиПоИдентификатору(Элементы.ДеревоДоступныхПечатныхФорм.ТекущаяСтрока);
	Если ТекущаяСтрока.Пометка = 2 Тогда
		ТекущаяСтрока.Пометка = 0;
	КонецЕсли;
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		
		Для каждого ПодчиненныйЭлемент Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			
			Если ТекущаяСтрока.Пометка <> ПодчиненныйЭлемент.Пометка Тогда
				ПодчиненныйЭлемент.Пометка = ТекущаяСтрока.Пометка;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ЗначениеПредыдущегоЭлемента = 2;
		
		Для каждого ПодчиненныйЭлемент Из Родитель.ПолучитьЭлементы() Цикл
			
			Если ЗначениеПредыдущегоЭлемента <> 2 И (ПодчиненныйЭлемент.Пометка <> ЗначениеПредыдущегоЭлемента) Тогда
				Родитель.Пометка = 2;
				Прервать;
			ИначеЕсли Родитель.Пометка <> ПодчиненныйЭлемент.Пометка Тогда
				Родитель.Пометка = ПодчиненныйЭлемент.Пометка;
			КонецЕсли;
			
			ЗначениеПредыдущегоЭлемента =  ПодчиненныйЭлемент.Пометка;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьПечатныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоступныхПечатныхФормПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоступныхПечатныхФормПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьШаблоны(Команда)
	
	ОчиститьСообщения();
	ПроверитьПравильностьШаблонов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатныеФормы(Команда)
	
	ПоказыватьПечатныеФормы = Не ПоказыватьПечатныеФормы;
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТекстШаблонаSMS.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПредназначенДляSMS");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТекстШаблонаПисьма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТемаПисьма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПредназначенДляЭлектронныхПисем");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВнешняяОбработка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ШаблонПоВнешнейОбработке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДоступныхПолейИзменить.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДоступныхПолейУдалить.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДоступныхПолей.ЭтоПроизвольныйПараметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДоступныхПолей.ЭтоПредопределенныйПараметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметр()
	
	СтруктураПараметров = Новый Структура;
	ДобавитьПараметрыОткрытияФормыПараметров(СтруктураПараметров);
	СтруктураПараметров.Вставить("ИменаПредопределенныхПараметров",ИменаПредопределенныхПараметров());
	
	ОткрытьФорму("Справочник.ШаблоныСообщений.Форма.ДобавлениеПараметра", СтруктураПараметров,,,,, 
		Новый ОписаниеОповещения("ДобавитьПараметрЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        
        Если Результат.ЭтоПредопределенныйПараметр Тогда
            
            ДобавитьПредопределенныйПараметрВДеревоСервер(Результат);
            
        Иначе
            
            ДобавитьПроизвольныйПараметрВДерево(Результат);
            
        КонецЕсли;
        
        Модифицированность = Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроизвольныйПараметрВДерево(СтруктураДанных)

	ЭлементыВерхнегоУровня = ДеревоДоступныхПолей.ПолучитьЭлементы();
	
	СтрокаПроизвольные = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ЭлементыВерхнегоУровня, "ИмяПараметра", НСтр("ru='Произвольные';uk='Довільні'"));
	Если СтрокаПроизвольные = Неопределено Тогда
		СтрокаПроизвольные              = ЭлементыВерхнегоУровня.Вставить(0);
		СтрокаПроизвольные.ИмяПараметра = "Произвольные";
		СтрокаПроизвольные.ПредставлениеПараметра = НСтр("ru='Произвольные';uk='Довільні'");
		СтрокаПроизвольные.КодКартинки  = 0;
	КонецЕсли;
	
	ПроизвольныеПараметры = СтрокаПроизвольные.ПолучитьЭлементы();
	
	СтрокаПараметр = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ПроизвольныеПараметры, "ИмяПараметра",СтруктураДанных.ИмяПараметра);
	Если СтрокаПараметр= Неопределено Тогда
		СтрокаПараметр = ПроизвольныеПараметры.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПараметр, СтруктураДанных);
	
	СтрокаПараметр.ЭтоПроизвольныйПараметр = Истина;
	СтрокаПараметр.КодКартинки = 1;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредопределенныйПараметрВДеревоСервер(ДанныеПараметра)
	
	Если ТипЗнч(ДанныеПараметра) = Тип("Строка") Тогда
		
		ПолноеИмяОбъектаМетаданных = ДанныеПараметра;
		
	Иначе
		
		Если ДанныеПараметра.Свойство("ПолноеИмяТипа") Тогда
			ПолноеИмяОбъектаМетаданных = ДанныеПараметра.ПолноеИмяТипа;
		Иначе
			ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ДанныеПараметра.ОписаниеТипа.Типы()[0]).ПолноеИмя();
			
			Если ПолноеИмяОбъектаМетаданных = "Перечисление.ТипыСобытийОповещений" Тогда
				ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных + "." + ДанныеПараметра.ИмяПараметра;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных,".");
	Если МассивПодстрок.Количество() = 2 Тогда
		СтрокаИмяОбъекта = ДобавитьПараметрПоОбъектуМетаданных(МассивПодстрок, ДанныеПараметра, ПолноеИмяОбъектаМетаданных);
	ИначеЕсли МассивПодстрок.Количество() = 3 И  МассивПодстрок[1] = "ТипыСобытийОповещений" Тогда
		СтрокаИмяОбъекта = ДобавитьПараметрПоТипуСобытияОповещения(МассивПодстрок, ДанныеПараметра);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтрокаИмяОбъекта <> Неопределено И СтрокаИмяОбъекта.ПолучитьЭлементы().Количество() = 0 Тогда
		Индекс = ДеревоДоступныхПолей.ПолучитьЭлементы().Индекс(СтрокаИмяОбъекта);
		Если Индекс <> - 1 Тогда
			ДеревоДоступныхПолей.ПолучитьЭлементы().Удалить(Индекс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПараметрПоОбъектуМетаданных(МассивПодстрок, ДанныеПараметра, ПолноеИмяОбъектаМетаданных)

	МассивОбъектовМетаданных = ШаблоныСообщенийСервер.МассивОбъектовСДаннымиШаблоновСообщений();
	МассивОбъектовПечатныхФорм = ШаблоныСообщенийСервер.МассивОбъектовСПечатнымиФормами();
	
	Если ТипЗнч(ДанныеПараметра) = Тип("Строка") Тогда
		ИмяПараметра = МассивПодстрок[1];
	Иначе
		ИмяПараметра = ДанныеПараметра.ИмяПараметра;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПараметра) = Тип("Строка") Тогда
		ОписаниеТипа = ОписаниеТипаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
		Если ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоДоступныхПолей.ПолучитьЭлементы(), "ОписаниеТипа", ОписаниеТипа) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПартнеровКакКонтрагентов И ИмяПараметра = "Партнеры" Тогда
		ИмяПараметра = "Контрагенты"
	КонецЕсли;
	
	Если ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоДоступныхПолей.ПолучитьЭлементы(), "ИмяПараметра", ИмяПараметра) <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МассивОбъектовМетаданных.Найти(ПолноеИмяОбъектаМетаданных) <> Неопределено Тогда
		
		МетаданныеОбъекта          = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
		
		ИмяМакетаШаблона = "ДанныеШаблонаСообщений";
		Если ИспользоватьПартнеровКакКонтрагентов И МетаданныеОбъекта.Имя = "Партнеры" Тогда
			ИмяМакетаШаблона = "ДанныеШаблонаСообщенийИспользоватьПартнеровКакКонтрагентов";
		КонецЕсли;
		
		Если МетаданныеОбъекта.Макеты.Найти(ИмяМакетаШаблона) <> Неопределено Тогда
			
			МакетСКД = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных).ПолучитьМакет(ИмяМакетаШаблона);
			КомпоновщикНастроек = РассылкиИОповещенияКлиентам.ИнициализироватьСКД(МакетСКД, УникальныйИдентификатор); 
			
			СтрокаИмяОбъекта = ДеревоДоступныхПолей.ПолучитьЭлементы().Добавить();
			
			Если ТипЗнч(ДанныеПараметра) = Тип("Строка") Тогда
				СтрокаИмяОбъекта.ИмяПараметра                  = НеиспользуемоеИмяПараметра(ИмяПараметра);
				СтрокаИмяОбъекта.ЭтоПредопределенныйПараметр   = Истина;
				СтрокаИмяОбъекта.ПолноеИмяТипа                 = ПолноеИмяОбъектаМетаданных;
				СтрокаИмяОбъекта.ОписаниеТипа                  = ОписаниеТипа;
				ПредставлениеПараметра = Строка(СтрокаИмяОбъекта.ОписаниеТипа);
				Если ИспользоватьПартнеровКакКонтрагентов И МетаданныеОбъекта.Имя = "Партнеры" Тогда
					ПредставлениеПараметра = НСтр("ru='Контрагент';uk='Контрагент'");
				КонецЕсли;
				СтрокаИмяОбъекта.ПредставлениеПараметра        = ПредставлениеПараметра;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаИмяОбъекта, ДанныеПараметра);
				СтрокаИмяОбъекта.ПолноеИмяТипа = ПолноеИмяОбъектаМетаданных;
			КонецЕсли;
			
			СтрокаИмяОбъекта.КодКартинки = 2;
			
			Синоним = МетаданныеОбъекта.Синоним;
			Если ИспользоватьПартнеровКакКонтрагентов И МетаданныеОбъекта.Имя = "Партнеры" Тогда
				Синоним = НСтр("ru='Контрагенты';uk='Контрагенти'");
			КонецЕсли;
			ИмяПараметраВнешняяСсылкаНаОбъект = НСтр("ru='Ссылка на';uk='Посилання на'") + " """ + Синоним + """";
			
			СтрокаИмяПараметра = СтрокаИмяОбъекта.ПолучитьЭлементы().Добавить();
			СтрокаИмяПараметра.ИмяПараметра           = "ВнешняяСсылкаНаОбъект";
			СтрокаИмяПараметра.ПредставлениеПараметра = ИмяПараметраВнешняяСсылкаНаОбъект;
			СтрокаИмяПараметра.ОписаниеТипа           = Новый ОписаниеТипов("Строка");
			СтрокаИмяПараметра.КодКартинки             = 3;
			
			ДобавитьВДеревоДоступныеПоляПоКомпоновщикуНастроек(КомпоновщикНастроек, СтрокаИмяОбъекта, ИмяПараметраВнешняяСсылкаНаОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивОбъектовПечатныхФорм.Найти(ПолноеИмяОбъектаМетаданных) <> Неопределено Тогда
		
		ПечатныеФормы  = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных).ДоступныеДляШаблоновПечатныеФормы();
		
		Если ПечатныеФормы.Количество() > 0 Тогда
			СтрокаПечатныеФормыПараметр = ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПечатныеФормыПараметр, СтрокаИмяОбъекта);
			Для Каждого ПечатнаяФорма Из ПечатныеФормы Цикл
				
				СтрокаПечатнаяФорма = СтрокаПечатныеФормыПараметр.ПолучитьЭлементы().Добавить();
				СтрокаПечатнаяФорма.ПредставлениеПараметра = ПечатнаяФорма.Представление;
				СтрокаПечатнаяФорма.ИмяПараметра           = ?(ЗначениеЗаполнено(ПечатнаяФорма.ИмяПечатнойФормыСУчетомПараметров),
				                                               ПечатнаяФорма.ИмяПечатнойФормыСУчетомПараметров,
				                                               ПечатнаяФорма.Имя);
			
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	ШаблонДляОповещений = Ложь;
	УдалитьЛишниеПараметры();
	
	Возврат СтрокаИмяОбъекта;

КонецФункции

&НаСервере
Функция ДобавитьПараметрПоТипуСобытияОповещения(МассивПодстрок, ДанныеПараметра)

	СтрокаИмяОбъекта = Неопределено;
	ИмяЗначенияПеречисления = МассивПодстрок[2];
	МетаданныеОбъекта = Метаданные.Перечисления.ТипыСобытийОповещений;
	ПолноеИмяОбъектаМетаданных = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивПодстрок,".");
	
	Для Каждого СтрокаВерхнийУровень Из ДеревоДоступныхПолей.ПолучитьЭлементы() Цикл
		Если СтрокаВерхнийУровень.ПолноеИмяТипа = ПолноеИмяОбъектаМетаданных Тогда
			Возврат СтрокаВерхнийУровень;
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеОбъекта.Макеты.Найти(ИмяЗначенияПеречисления) <> Неопределено Тогда
		
		МакетСКД = Перечисления.ТипыСобытийОповещений.ПолучитьМакет(ИмяЗначенияПеречисления);
		КомпоновщикНастроек = РассылкиИОповещенияКлиентам.ИнициализироватьСКД(МакетСКД, УникальныйИдентификатор);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		СтрокаИмяОбъекта = ДеревоДоступныхПолей.ПолучитьЭлементы().Добавить();
		
		Если ТипЗнч(ДанныеПараметра) = Тип("Строка") Тогда
			
			СтрокаИмяОбъекта.ИмяПараметра                  = НеиспользуемоеИмяПараметра(ИмяЗначенияПеречисления);
			СтрокаИмяОбъекта.ЭтоПредопределенныйПараметр   = Истина;
			СтрокаИмяОбъекта.ПолноеИмяТипа                 = ПолноеИмяОбъектаМетаданных;
			СтрокаИмяОбъекта.ОписаниеТипа                  = ОписаниеТипаПоПолномуИмени(МассивПодстрок[0] + "."+ МассивПодстрок[1]);
			СтрокаИмяОбъекта.ПредставлениеПараметра        = Метаданные.Перечисления.ТипыСобытийОповещений.ЗначенияПеречисления[ИмяЗначенияПеречисления].Синоним;
			
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаИмяОбъекта, ДанныеПараметра);
			СтрокаИмяОбъекта.ПолноеИмяТипа = ПолноеИмяОбъектаМетаданных;
		КонецЕсли;
			
		СтрокаИмяОбъекта.КодКартинки = 2;
		
		ДанныеТипаСобытия = Перечисления.ТипыСобытийОповещений.ДанныеДляОбработкиОчередиОповещений(Перечисления.ТипыСобытийОповещений[ИмяЗначенияПеречисления]);
		Если ДанныеТипаСобытия.ВШаблонеДоступнаВнешняяСсылка
			И ДанныеТипаСобытия.МетаданныеИсточникаОповещения <> Неопределено Тогда
			
			ИмяПараметраВнешняяСсылкаНаОбъект = НСтр("ru='Ссылка на';uk='Посилання на'") + " """ + ДанныеТипаСобытия.МетаданныеИсточникаОповещения.Синоним + """";
				
			СтрокаИмяПараметра = СтрокаИмяОбъекта.ПолучитьЭлементы().Добавить();
			СтрокаИмяПараметра.ИмяПараметра           = "ВнешняяСсылкаНаОбъект";
			СтрокаИмяПараметра.ПредставлениеПараметра = ИмяПараметраВнешняяСсылкаНаОбъект;
			СтрокаИмяПараметра.ОписаниеТипа           = Новый ОписаниеТипов("Строка");
			СтрокаИмяПараметра.КодКартинки             = 3;
		
		КонецЕсли;
		
		ДобавитьВДеревоДоступныеПоляПоКомпоновщикуНастроек(КомпоновщикНастроек, СтрокаИмяОбъекта);
		
	КонецЕсли;
	
	ШаблонДляОповещений = Истина;
	УдалитьЛишниеПараметры();
	
	Возврат СтрокаИмяОбъекта;
	
КонецФункции

&НаСервере
Процедура УдалитьЛишниеПараметры()

	МассивСтрокКУдалению = Новый Массив;
	
	Для каждого СтрокаДерева Из ДеревоДоступныхПолей.ПолучитьЭлементы() Цикл
	
		ЭтоПараметрПоТипуСобытийОповещений = СтрЧислоВхождений(СтрокаДерева.ПолноеИмяТипа, "Перечисление.ТипыСобытийОповещений") > 0;
		Если ШаблонДляОповещений И СтрокаДерева.ПолноеИмяТипа <> Объект.ПолноеИмяТипаПараметраВводаНаОсновании Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДерева);
		ИначеЕсли (Не ШаблонДляОповещений) И ЭтоПараметрПоТипуСобытийОповещений Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДерева);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		
		СвязаннаяСтрокаДереваПечатныхФорм = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
		                                                 ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы(),
		                                                 "ИмяПараметра",
		                                                 СтрокаКУдалению.ИмяПараметра);
		
		Если СвязаннаяСтрокаДереваПечатныхФорм <> Неопределено Тогда
			ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы().Удалить(СвязаннаяСтрокаДереваПечатныхФорм);
		КонецЕсли;
		
		ДеревоДоступныхПолей.ПолучитьЭлементы().Удалить(СтрокаКУдалению);
		
	КонецЦикла

КонецПроцедуры 

&НаСервере
Процедура ДобавитьВДеревоДоступныеПоляПоКомпоновщикуНастроек(КомпоновщикНастроек, СтрокаИмяОбъекта, ИмяПараметраВнешняяСсылкаНаОбъект = "")
	
	Для Каждого ДоступноеПоле ИЗ КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		Если ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяПараметраВнешняяСсылкаНаОбъект <> "" И ДоступноеПоле.Заголовок < ИмяПараметраВнешняяСсылкаНаОбъект Тогда
			СтрокаИмяПараметра = СтрокаИмяОбъекта.ПолучитьЭлементы().Вставить(СтрокаИмяОбъекта.ПолучитьЭлементы().Количество() - 1);
		Иначе
			СтрокаИмяПараметра = СтрокаИмяОбъекта.ПолучитьЭлементы().Вставить(СтрокаИмяОбъекта.ПолучитьЭлементы().Количество());
		КонецЕсли;
		
		СтрокаИмяПараметра.ИмяПараметра           = ДоступноеПоле.Поле;
		СтрокаИмяПараметра.ПредставлениеПараметра = ДоступноеПоле.Заголовок;
		СтрокаИмяПараметра.ОписаниеТипа           = ДоступноеПоле.Тип;
		СтрокаИмяПараметра.КодКартинки            = 3;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция НеиспользуемоеИмяПараметра(ИмяПараметра)

	НовоеИмяПараметра = ИмяПараметра;
	Счетчик = 1;
	ЭлементыВерхнийУровень = ДеревоДоступныхПолей.ПолучитьЭлементы();
	
	Пока ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ЭлементыВерхнийУровень, "ИмяПараметра", НовоеИмяПараметра) <> Неопределено Цикл
		
		НовоеИмяПараметра =  ИмяПараметра + Строка(Счетчик);
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат НовоеИмяПараметра;

КонецФункции
 
&НаКлиенте
Процедура ДобавитьПараметрыОткрытияФормыПараметров(СтруктураПараметров)

	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",Истина);
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииВладельца",Истина);
	СтруктураПараметров.Вставить("ТолькоПросмотр",Ложь);

КонецПроцедуры

&НаКлиенте
Функция ВыбранныеНастройкиФормата()
	
	ФорматыСохранения = Новый Массив;
	
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ВыбранныйФормат.Пометка Тогда
			ФорматыСохранения.Добавить(ВыбранныйФормат.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("УпаковатьВАрхив", Объект.УпаковатьВАрхив);
	Результат.Вставить("ФорматыСохранения", ФорматыСохранения);
	Результат.Вставить("Получатели", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВыборФормата(Знач ФорматыСохранения = Неопределено)
	
	ЕстьВыбранныйФормат = Ложь;
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ФорматыСохранения <> Неопределено Тогда
			ВыбранныйФормат.Пометка = ФорматыСохранения.Найти(ВыбранныйФормат.Значение) <> Неопределено;
		КонецЕсли;
			
		Если ВыбранныйФормат.Пометка Тогда
			ЕстьВыбранныйФормат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьВыбранныйФормат Тогда
		ВыбранныеФорматыСохранения[0].Пометка = Истина; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВыбранныхФорматов()
	
	ФорматВложений = "";
	КоличествоФорматов = 0;
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ВыбранныйФормат.Пометка Тогда
			Если Не ПустаяСтрока(ФорматВложений) Тогда
				ФорматВложений = ФорматВложений + ", ";
			КонецЕсли;
			ФорматВложений = ФорматВложений + ВыбранныйФормат.Представление;
			КоличествоФорматов = КоличествоФорматов + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Если ВыбранныеФорматыСохранения.Количество() = 0 Тогда
		Для Каждого ФорматСохранения Из УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента() Цикл
			ВыбранныеФорматыСохранения.Добавить(ФорматСохранения.ТипФайлаТабличногоДокумента, Строка(ФорматСохранения.Ссылка), Ложь, ФорматСохранения.Картинка);
		КонецЦикла;
	КонецЕсли;
	
	ШаблоныСообщенийСервер.ЗаполнитьСписокВыбораВводНаОсновании(Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.СписокВыбора, Ложь, Истина);
	
	Если Объект.ШаблонПоВнешнейОбработке Тогда
		
		ЗаполнитьШаблонПоВнешнейОбработке();
		
	Иначе;
		
		ЗаполнитьДеревоПараметровШаблона();
		
	КонецЕсли;
	
	Если Не Объект.ПредназначенДляЭлектронныхПисем И НЕ Объект.ПредназначенДляSMS Тогда
		Объект.ПредназначенДляЭлектронныхПисем = Истина;
	КонецЕсли;
	
	Если Объект.ПредназначенДляВводаНаОсновании И ЗначениеЗаполнено(Объект.ПолноеИмяТипаПараметраВводаНаОсновании) Тогда
		ЭлементСписка = Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.СписокВыбора.НайтиПоЗначению(Объект.ПолноеИмяТипаПараметраВводаНаОсновании);
		Если ЭлементСписка <> Неопределено Тогда
			ТипВводаНаОсновании = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПредназначениеШаблонаФорма();
	УстановитьСпособРедактированияПисьма();
	
	Если Объект.ШаблонПоВнешнейОбработке Тогда
		ТипФормированияСообщения = 1;
	КонецЕсли;

	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособРедактированияПисьма()
	
	Если Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		ТипТекстаПисьма = 1;
		СтруктураВложений = Новый Структура;
		Если Не Объект.Ссылка.Пустая() Тогда
			Если Не ПустаяСтрока(Объект.ТекстШаблонаПисьмаHTML) Тогда
				
				Объект.ТекстШаблонаПисьмаHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект.Ссылка , Объект.ТекстШаблонаПисьмаHTML,СтруктураВложений)
				
			КонецЕсли;
		КонецЕсли;
		
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстШаблонаПисьмаHTML, СтруктураВложений);
		
	Иначе
		
		Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		ТипТекстаПисьма = 0;
		
	КонецЕсли;
	
	ТемаПисьмаФорматированныйДокумент.Добавить(Объект.ТемаПисьма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредназначениеШаблонаФорма()

	Если Объект.ПредназначенДляSMS Тогда
		ПредназначениеШаблона = 1;
	Иначе
		ПредназначениеШаблона = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	Форма.Элементы.ПредназначениеШаблона.Доступность                  = НЕ Форма.Объект.ШаблонПоВнешнейОбработке;
	Форма.Элементы.ПредназначенДляВводаНаОсновании.Доступность        = НЕ Форма.Объект.ШаблонПоВнешнейОбработке;
	Форма.Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.Доступность = НЕ Форма.Объект.ШаблонПоВнешнейОбработке И Форма.Объект.ПредназначенДляВводаНаОсновании;
	Форма.Элементы.ПроверитьШаблоны.Доступность                       = НЕ Форма.Объект.ШаблонПоВнешнейОбработке;
	
	Если Форма.Объект.ШаблонПоВнешнейОбработке Тогда
		
		Форма.Элементы.СтраницыТекстыПараметры.ТекущаяСтраница       = Форма.Элементы.СтраницаТекстыВнешняяОбработка;
		Форма.Элементы.СтраницыВнешняяОбработкаПусто.ТекущаяСтраница = Форма.Элементы.СтраницаВнешняяОбработка;
		
		Если Форма.ТипТекстаПисьма = 0 Тогда
			Форма.Элементы.СтраницыТекстПисьмаВнешняяОбработка.ТекущаяСтраница = Форма.Элементы.СтраницаТекстПисьмаОбычныйВнешняяОбработка;
		Иначе
			Форма.Элементы.СтраницыТекстПисьмаВнешняяОбработка.ТекущаяСтраница = Форма.Элементы.СтраницаТекстПисьмаHTMLВнешняяОбработка;
		КонецЕсли;
		
		Если Форма.Объект.ПредназначенДляЭлектронныхПисем Тогда
			Форма.Элементы.СтраницыВнешняяОбработкаШаблоны.ТекущаяСтраница = Форма.Элементы.СтраницаВнешняяОбработкаШаблонаПисьма;
		Иначе
			Форма.Элементы.СтраницыВнешняяОбработкаШаблоны.ТекущаяСтраница = Форма.Элементы.СтраницаВнешняяОбработкаШаблонSMS;
		КонецЕсли;
		
	Иначе
		
		Форма.Элементы.СтраницыТекстыПараметры.ТекущаяСтраница                    = Форма.Элементы.СтраницаТекстыПараметрыОбычныйШаблон;
		Форма.Элементы.СтраницыВнешняяОбработкаПусто.ТекущаяСтраница              = Форма.Элементы.СтраницаПусто;
		Форма.Элементы.ДеревоДоступныхПолейSMSПечатныеФормы.Доступность           = Форма.Объект.ПредназначенДляЭлектронныхПисем И НЕ Форма.ШаблонДляОповещений;
		Форма.Элементы.ДеревоДоступныхПолейДобавить.Доступность                   = НЕ Форма.ШаблонДляОповещений;
		Форма.Элементы.ДеревоДоступныхПолейSMSДобавить.Доступность                = НЕ Форма.ШаблонДляОповещений;
		Форма.Элементы.ДеревоДоступныхПолейПечатныеФормы.Доступность              = НЕ Форма.ШаблонДляОповещений;
		Форма.Элементы.ДеревоДоступныхПолейSMSКонтекстноеМенюДобавить.Доступность = НЕ Форма.ШаблонДляОповещений;
		Форма.Элементы.ДеревоДоступныхПолейКонтекстноеМенюДобавить.Доступность    = НЕ Форма.ШаблонДляОповещений;
		Форма.ПоказыватьПечатныеФормы = Форма.ПоказыватьПечатныеФормы И НЕ Форма.ШаблонДляОповещений;
		
		Если Форма.Объект.ПредназначенДляЭлектронныхПисем Тогда
			
			Форма.Элементы.СтраницыШаблоны.ТекущаяСтраница = Форма.Элементы.СтраницаШаблонПисьма;
			Если Форма.ПоказыватьПечатныеФормы Тогда
				Форма.Элементы.СтраницыПечатныеФормы.ТекущаяСтраница = Форма.Элементы.СтраницаПечатныеФормыПисьмо;
			Иначе
				Форма.Элементы.СтраницыПечатныеФормы.ТекущаяСтраница = Форма.Элементы.СтраницаПечатныеФормыSMS;
			КонецЕсли;
			
			Если Форма.ТипТекстаПисьма = 0 Тогда
				Форма.Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Форма.Элементы.СтраницаТекстПисьмаОбычный;
			Иначе
				Форма.Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Форма.Элементы.СтраницаТекстПисьмаHTML;
			КонецЕсли;
			
		Иначе
			
			Форма.Элементы.СтраницыШаблоны.ТекущаяСтраница = Форма.Элементы.СтраницаШаблонSMS;
			Форма.Элементы.СтраницыПечатныеФормы.ТекущаяСтраница = Форма.Элементы.СтраницаПечатныеФормыSMS;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПараметровШаблона()
	
	ЭлементыВерхнегоУровня = ДеревоДоступныхПолей.ПолучитьЭлементы();
	
	МассивПроизвольныхПараметров = Новый Массив;
	Для каждого ПараметрШаблона Из ПараметрыШаблона Цикл
		Если НЕ ПараметрШаблона.ЭтоПредопределенныйПараметр Тогда
			
			Если Не ПустаяСтрока(ПараметрШаблона.ИмяПараметра) Тогда
				МассивПроизвольныхПараметров.Добавить(ПараметрШаблона);
			КонецЕсли;
			
		Иначе
			
			Если Не ПустаяСтрока(ПараметрШаблона.ИмяПараметра) Тогда
				ДобавитьПредопределенныйПараметрВДеревоСервер(ПараметрШаблона);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПечатнаяФорма Из Объект.ПечатныеФормы Цикл
		
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПечатнаяФорма.ПечатнаяФорма, ".");
		Если МассивСтрок.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВерхнегоУровня = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы(), "ИмяПараметра", МассивСтрок[0]);
		Если СтрокаВерхнегоУровня <> Неопределено Тогда
			СтрокаИмяПечатнойФормы = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(СтрокаВерхнегоУровня.ПолучитьЭлементы(), "ИмяПараметра", МассивСтрок[1]);
			Если СтрокаИмяПечатнойФормы <> Неопределено Тогда
				СтрокаИмяПечатнойФормы.Пометка = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы() Цикл
		
		ЗначениеПредыдущегоЭлемента = 2;
		
		Для Каждого СтрокаИмяПечатнойФормы Из СтрокаВерхнегоУровня.ПолучитьЭлементы() Цикл
			
			Если ЗначениеПредыдущегоЭлемента <> 2 И (СтрокаИмяПечатнойФормы.Пометка <> ЗначениеПредыдущегоЭлемента) Тогда
				СтрокаВерхнегоУровня.Пометка = 2;
				Прервать;
			ИначеЕсли СтрокаВерхнегоУровня.Пометка <> СтрокаИмяПечатнойФормы.Пометка Тогда
				СтрокаВерхнегоУровня.Пометка = СтрокаИмяПечатнойФормы.Пометка;
			КонецЕсли;
			
			ЗначениеПредыдущегоЭлемента =  СтрокаИмяПечатнойФормы.Пометка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Объект.ПредназначенДляВводаНаОсновании И Не ПустаяСтрока(Объект.ПолноеИмяТипаПараметраВводаНаОсновании) Тогда
		
		СтрокаПараметрОснование = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
		                                ЭлементыВерхнегоУровня, 
		                                "ОписаниеТипа", 
		                                ОписаниеТипаПоПолномуИмени(Объект.ПолноеИмяТипаПараметраВводаНаОсновании));
		Если СтрокаПараметрОснование = Неопределено Тогда
			ДобавитьПредопределенныйПараметрВДеревоСервер(Объект.ПолноеИмяТипаПараметраВводаНаОсновании);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПроизвольные = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ЭлементыВерхнегоУровня, "ИмяПараметра", НСтр("ru='Произвольные';uk='Довільні'"));
	Если СтрокаПроизвольные = Неопределено Тогда
		Если  МассивПроизвольныхПараметров.Количество() > 0 Тогда
			СтрокаПроизвольные         = ЭлементыВерхнегоУровня.Вставить(0);
			СтрокаПроизвольные.ИмяПараметра           = "Произвольные";
			СтрокаПроизвольные.ПредставлениеПараметра = "Произвольные";
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Если МассивПроизвольныхПараметров.Количество() = 0 Тогда
			ЭлементыВерхнегоУровня.Удалить(СтрокаПроизвольные);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроизвольныеПараметры = СтрокаПроизвольные.ПолучитьЭлементы();
	ПроизвольныеПараметры.Очистить();
	
	Для каждого ЭлементМассива Из МассивПроизвольныхПараметров Цикл
		
		ПроизвольныеПараметр         = ПроизвольныеПараметры.Добавить();
		ЗаполнитьЗначенияСвойств(ПроизвольныеПараметр,ЭлементМассива);
		ПроизвольныеПараметр.ЭтоПроизвольныйПараметр = Истина;
		ПроизвольныеПараметр.ПолноеИмяТипа = Строка(ЭлементМассива.ОписаниеТипа);
		ПроизвольныеПараметр.КодКартинки   = 1;
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыПоНаборамДанных()
	
	ПараметрыШаблона.Очистить();
	
	Если Объект.ПредназначенДляЭлектронныхПисем Тогда
		Если Объект.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
			ТекстШаблонаПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		Иначе
			ТекстШаблонаПисьма = Объект.ТекстШаблонаПисьма;
		КонецЕсли;
	Иначе
		ТекстШаблонаПисьма = "";
	КонецЕсли;
	
	Если Объект.ПредназначенДляSMS Тогда
		ТекстДляПоискаПараметров = Объект.ТекстШаблонаSMS;
	ИначеЕсли Объект.ПредназначенДляЭлектронныхПисем Тогда
		ТекстДляПоискаПараметров = Объект.ТемаПисьма + " " + ТекстШаблонаПисьма;
	Иначе
		Возврат;
	КонецЕсли;
	
	СоответствиеИспользуемыхПараметров = ШаблоныСообщенийКлиентСервер.ПолучитьПараметрыТекстаСообщения(ТекстДляПоискаПараметров);
	
	Для каждого ЭлементСоответствия Из СоответствиеИспользуемыхПараметров Цикл
		
		Если ЭлементСоответствия.Ключ = НСтр("ru='Произвольные';uk='Довільні'") Тогда
			СтрокаДереваПроизвольные = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
			                             ДеревоДоступныхПолей.ПолучитьЭлементы(),
			                             "ИмяПараметра",
			                             ЭлементСоответствия.Ключ);
			Если СтрокаДереваПроизвольные <> Неопределено Тогда
				Для каждого ЭлементПараметр Из ЭлементСоответствия.Значение Цикл
					СтрокаДерева = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
					                  СтрокаДереваПроизвольные.ПолучитьЭлементы(), 
					                  "ИмяПараметра",
						              ЭлементПараметр);
					Если СтрокаДерева <> Неопределено Тогда
						НоваяСтрока = ПараметрыШаблона.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
			
		СтрокаДерева = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоДоступныхПолей.ПолучитьЭлементы(), "ИмяПараметра",ЭлементСоответствия.Ключ);
		Если СтрокаДерева <> Неопределено Тогда
			НоваяСтрока = ПараметрыШаблона.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ПредназначенДляЭлектронныхПисем Тогда
		
		Для каждого СтрокаПечатныеФормы Из Объект.ПечатныеФормы Цикл
			
			МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПечатныеФормы.ПечатнаяФорма, ".");
			Если МассивИмени.Количество() = 2 Тогда
				НайденныеСтроки = ПараметрыШаблона.НайтиСтроки(Новый Структура("ИмяПараметра",МассивИмени[0]));
				Если НайденныеСтроки.Количество() = 0 Тогда
					СтрокаДерева = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоДоступныхПолей.ПолучитьЭлементы(), "ИмяПараметра",МассивИмени[0]);
					Если СтрокаДерева <> Неопределено Тогда
						НоваяСтрока = ПараметрыШаблона.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева)
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравильностьШаблонов(Отказ = Ложь, ВыдаватьСообщениеКорректно = Истина)
	
	ОпределитьПараметрыПоНаборамДанных();
	
	Если Объект.ПредназначенДляSMS Тогда
		ПроверитьПравильностьШаблона("ТекстШаблонаSMS", Отказ);
	КонецЕсли;
	
	Если Объект.ПредназначенДляЭлектронныхПисем Тогда
		Если Объект.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
			СтруктураВложений = Новый Структура;
			Объект.ТекстШаблонаПисьмаHTML = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
			ПроверитьПравильностьШаблона("ТекстШаблонаПисьмаHTML", Отказ);
		Иначе
			ПроверитьПравильностьШаблона("ТекстШаблонаПисьма", Отказ);
		КонецЕсли;
		ПроверитьПравильностьШаблона("ТемаПисьма", Отказ);
		ПроверитьПечатныеФормы(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ И ВыдаватьСообщениеКорректно Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Шаблоны заполнены корректно.';uk='Шаблони заповнені коректно.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравильностьШаблона(ИмяШаблона, Отказ);
	
	ТекстШаблона = Объект[ИмяШаблона];
	ИмяПоля      = "Объект." + ИмяШаблона;
	
	Если ПустаяСтрока(ТекстШаблона) Тогда
		Отказ = Истина;
		Если ИмяШаблона = "ТекстШаблонаSMS" Тогда
			ТекстИмяШаблона = "SMS";
		ИначеЕсли ИмяШаблона = "ТемаПисьма" Тогда
			ТекстИмяШаблона = НСтр("ru='темы письма';uk='теми листа'");
			ИмяПоля = "ТемаПисьмаФорматированныйДокумент";
		Иначе
			ТекстИмяШаблона = НСтр("ru='тела письма';uk='тіло листа'");
			Если Объект.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
				ИмяПоля = "ТекстПисьмаФорматированныйДокумент";
			КонецЕсли;
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнен шаблон %1';uk='Не заповнений шаблон %1'"),ТекстИмяШаблона);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля,, Отказ);
		Возврат;
	КонецЕсли;
	МассивОшибок = Новый Массив;
	
	СоответствиеПараметровТекстаСообщения = ШаблоныСообщенийКлиентСервер.ПолучитьПараметрыТекстаСообщения(Объект[ИмяШаблона]);
	Для Каждого ЭлементСоответствия Из СоответствиеПараметровТекстаСообщения Цикл
		
		СтрокаПервыйУровень = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
		                          ДеревоДоступныхПолей.ПолучитьЭлементы(),
		                          "ИмяПараметра",
		                          ЭлементСоответствия.Ключ);
		Если СтрокаПервыйУровень <> Неопределено Тогда
			Для Каждого ЭлементМассива Из ЭлементСоответствия.Значение Цикл
				СтрокаВторойУровень = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
				                        СтрокаПервыйУровень.ПолучитьЭлементы(),
				                        "ИмяПараметра", 
				                        ЭлементМассива);
				Если СтрокаВторойУровень <> Неопределено Тогда
					Продолжить;
				Иначе
					МассивОшибок.Добавить(ЭлементСоответствия.Ключ + "." + ЭлементМассива);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ЭлементМассива Из ЭлементСоответствия.Значение Цикл
				МассивОшибок.Добавить(ЭлементСоответствия.Ключ + "." + ЭлементМассива);
			КонецЦикла
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Ошибка Из МассивОшибок Цикл
		
		ТекстСообщения = НСтр("ru='Неверный параметр в шаблоне сообщения';uk='Невірний параметр в шаблоні повідомлення'") + ": " + Ошибка;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля,, Отказ);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПечатныеФормы(Отказ)
	
	МассивОшибок = Новый Массив;
	
	Для Каждого СтрокаТаблицы ИЗ Объект.ПечатныеФормы Цикл
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.ПечатнаяФорма,".");
		Если МассивПодстрок.Количество() = 2 Тогда
			СтрокаПервыйУровень = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
			                         ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы(), 
			                         "ИмяПараметра",
			                         МассивПодстрок[0]);
			Если СтрокаПервыйУровень <> Неопределено Тогда
				СтрокаВторойУровень = ШаблоныСообщенийКлиентСервер.НайтиСтрокуВДанныхФормыДерево(
				                        СтрокаПервыйУровень.ПолучитьЭлементы(), 
				                        "ИмяПараметра", 
				                        МассивПодстрок[1]);
				Если СтрокаВторойУровень = Неопределено Тогда
					МассивОшибок.Добавить(СтрокаТаблицы.ПечатнаяФорма);
				КонецЕсли;
			Иначе
				МассивОшибок.Добавить(СтрокаТаблицы.ПечатнаяФорма);
			КонецЕсли;
		Иначе
			МассивОшибок.Добавить(СтрокаТаблицы.ПечатнаяФорма);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Ошибка Из МассивОшибок Цикл
		
		ТекстСообщения = НСтр("ru='Неверное имя печатной формы';uk='Невірне ім''я друкованої форми'") + ": " + Ошибка;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ПечатныеФормы",, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонПоВнешнейОбработке()
	
	ОчиститьШаблон(ЭтаФорма);
	
	ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(Объект.ВнешняяОбработка);
	
	СтруктураДанныхВнешнейОбработки = ВнешнийОбъект.СтруктураДанныхДляОтображенияВШаблоне();
	ПараметрыШаблона.Загрузить(СтруктураДанныхВнешнейОбработки.ПараметрыШаблона);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанныхВнешнейОбработки);
	
	УстановитьПредназначениеШаблонаФорма();
	УстановитьСпособРедактированияПисьма();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьШаблон(Форма)

	Форма.Объект.Параметры.Очистить();
	Форма.Объект.ПредназначенДляЭлектронныхПисем        = Истина;
	Форма.Объект.ПредназначенДляSMS                     = Ложь;
	Форма.ПредназначениеШаблона                         = 0;
	Форма.Объект.Наименование                           = "";
	Форма.Объект.ПредназначенДляВводаНаОсновании        = Ложь;
	Форма.Объект.ПолноеИмяТипаПараметраВводаНаОсновании = "";
	Форма.Объект.ТемаПисьма                             = "";
	Форма.Объект.ТекстШаблонаSMS                        = "";
	Форма.Объект.ТекстШаблонаПисьма                     = "";
	Форма.ТипТекстаПисьма                               = 0;
	Форма.Объект.ТекстШаблонаПисьмаHTML                 = "<html></html>";
	Форма.Объект.ТипТекстаПисьма                        = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст");
	
	Форма.ТекстПисьмаФорматированныйДокумент.Удалить(Форма.ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуНачала(),
	                                                 Форма.ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуКонца());
	
	Форма.ПараметрыШаблона.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныйПараметр()

	Возврат Новый Структура("ИмяПараметра, ПредставлениеПараметра, ОписаниеТипа, 
	                        |ЭтоПредопределенныйПараметр, ПолноеИмяТипа, ИменаПредопределенныхПараметров");

КонецФункции

&НаСервере
Функция ОписаниеТипаПоПолномуИмени(ПолноеИмя)
	
	МассивТипов = Новый Массив;
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
	МассивТипов.Добавить(Тип(МассивСтрок[0] + "Ссылка." + МассивСтрок[1]));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

&НаКлиенте
Функция ИменаПредопределенныхПараметров(ИсключаяИмя = "")

	МассивИмен = Новый Массив;
	
	Для каждого СтрокаДерева Из ДеревоДоступныхПолей.ПолучитьЭлементы() Цикл
	
		Если СтрокаДерева.ИмяПараметра <> ИсключаяИмя Тогда
			МассивИмен.Добавить(СтрокаДерева.ИмяПараметра);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат МассивИмен;

КонецФункции

&НаКлиенте
Процедура ОбновитьПечатныеФормы()
	
	Объект.ПечатныеФормы.Очистить();
	Для каждого ПараметрПечатныеФормы Из ДеревоДоступныхПечатныхФорм.ПолучитьЭлементы() Цикл
		
		Если ПараметрПечатныеФормы.Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ИмяПечатнойФормы Из ПараметрПечатныеФормы.ПолучитьЭлементы() Цикл
			
			Если ИмяПечатнойФормы.Пометка = 1 Тогда
				НоваяСтрока = Объект.ПечатныеФормы.Добавить();
				НоваяСтрока.ПечатнаяФорма = ПараметрПечатныеФормы.ИмяПараметра + "." + ИмяПечатнойФормы.ИмяПараметра;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяДереваДоступныхПолей(ИмяСтраницы)
	
	Если ИмяСтраницы = "СтраницаПечатныеФормыПисьмо" Тогда
		Возврат "ДеревоДоступныхПолей";
	Иначе
		Возврат "ДеревоДоступныхПолейSMS";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросПриИзмененииФорматаПриЗакрытии(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		
		УстановитьHTML(ТекстПисьмаФорматированныйДокумент, Объект.ТекстШаблонаПисьмаHTML, Новый Структура);
		ТипТекстаПисьма = 1;
		
	Иначе
		
		Объект.ТипТекстаПисьма    = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст");
		Объект.ТекстШаблонаПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		ТекстПисьмаФорматированныйДокумент.Удалить();

	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьHTML(РеквизитФорматированныйДокумент, ТекстHTML, Вложения)
	
	РеквизитФорматированныйДокумент.УстановитьHTML(ТекстHTML, Вложения);
	
КонецПроцедуры

#КонецОбласти

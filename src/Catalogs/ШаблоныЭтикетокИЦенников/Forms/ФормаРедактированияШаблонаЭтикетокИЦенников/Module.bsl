
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров);
	Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура)
		 Или ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно", Новый Структура) Тогда
		Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты") Тогда
		Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗначениеКопирования = Неопределено;
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		
		Если Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			
			ИмяМакета = Параметры.ИмяМакета;
			Если ЗначениеЗаполнено(Параметры.Назначение) Тогда
				Объект.Назначение = Параметры.Назначение;
			КонецЕсли;
			Если ЗначениеЗаполнено(Параметры.Высота) Тогда
				Объект.Высота = Параметры.Высота;
			КонецЕсли;
			Если Параметры.Ширина > 0 Тогда
				Объект.Ширина = Параметры.Ширина;
			КонецЕсли;
			Если ЗначениеЗаполнено(Параметры.Наименование) Тогда
				Объект.Наименование = Параметры.Наименование;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
				УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
			КонецЕсли;
			
			ЗаполнитьДоступныеПоля();
			НастроитьШаблон();
			
		Иначе
			
			ЗаполнитьДоступныеПоля();
			ЗагрузитьШаблон();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийРазмер = ТекущийРазмерСтраницы(ЭтаФорма);
	РазмерСтраницы = ТекущийРазмер;
	
	ОбновитьЗаголовок(ЭтаФорма);
	НазначениеПриИзмененииСервер(Ложь);
	
	Коды = ПолучитьКоды();
	Для Каждого СтрокаТЧ Из Коды Цикл
		СписокТипыКодов.Добавить(СтрокаТЧ.ТипКода, СтрокаТЧ.Наименование);
	КонецЦикла;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьРазмещение", 1, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ШаблоныЭтикетокИЦенников", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДоступныеПоля();
	
	ЗагрузитьШаблон();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
	Если НЕ ПроверитьУмещение() Тогда
		Отказ = Истина;
	Иначе
		ТекущийОбъект.Шаблон = Новый ХранилищеЗначения(ПодготовитьСтруктуруМакетаШаблона());
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ОбновитьЗаголовок(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтаФорма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;
	ВыборДоступногоПоля(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТекстПриИзменении(Элемент)
	Элементы.РазмерШрифта.Доступность = ОтображатьТекст;
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	Если Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек")
		ИЛИ Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры") 
		ИЛИ Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов") Тогда
		ТипКода = 4; // Code128
	Иначе
		ТипКода = 1; // EAN13
	КонецЕсли;
	
	НазначениеПриИзмененииСервер();
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		
		Имя = Область.Имя;
		Индекс = ЗаменитьРисунокШтрихкода(Имя);
		ПолеТабличногоДокумента.Рисунки[Индекс].Имя = Имя;
		
	КонецЦикла;
	
	ЗаполнитьТаблицуСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

&НаКлиенте
Процедура РазмерЯчейкиПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

&НаКлиенте
Процедура НазначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвойстваЯчеек

&НаКлиенте
Процедура СвойстваЯчеекЗначениеПриИзменении(Элемент)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = ТекущиеДанные.Значение;
		УстановитьТекущийЭлемент = Неопределено;
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		Если ТекущиеДанные.ИмяСвойства = "ТипКода" Тогда
			
			Для Каждого КлючИЗначение Из СписокТипыКодов Цикл
				Представление = КлючИЗначение.Представление;
				Если ТекущиеДанные.Значение = Представление Тогда
					ТипКода = КлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекущиеДанные.ИмяСвойства = "РазмерШрифта" Тогда
			РазмерШрифта = ТекущиеДанные.Значение;
		ИначеЕсли ТекущиеДанные.ИмяСвойства = "ОтображатьТекст" Тогда
			ОтображатьТекст = ТекущиеДанные.Значение;
		Иначе
			ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = ТекущиеДанные.Значение;
		КонецЕсли;
		
		Имя = ВыделеннаяОбласть.Имя;
		Индекс = ЗаменитьРисунокШтрихкода(Имя);
		ПолеТабличногоДокумента.Рисунки[Индекс].Имя = Имя;
		
		ПодключитьОбработчикОжидания("ЗаполнитьТаблицуСвойств", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	
		
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		Если СтрНайти(ТекущиеДанные.ИмяСвойства, "Линия") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные);
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		Если СтрНайти(ТекущиеДанные.ИмяСвойства, "Граница") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные);
			
		КонецЕсли;
		
		Если СтрНайти(ТекущиеДанные.ИмяСвойства, "Формат") > 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Если СтрНайти(ТекущиеДанные.ИмяСвойства, "Заполнение") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Параметр);
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Текст);
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Шаблон);
			ЭлементСписка = Неопределено;
			
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("СвойстваЯчеекЗначениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ВыделеннаяОбласть, ТекущиеДанные", ВыделеннаяОбласть, ТекущиеДанные)), СписокЗначений, Элементы.СвойстваЯчеекЗначение);
			
		КонецЕсли;
		
		Если СтрНайти(ТекущиеДанные.ИмяСвойства, "Формат") > 0 Тогда
			
			Конструктор = Новый КонструкторФорматнойСтроки;
			Конструктор.Показать(Новый ОписаниеОповещения("СвойстваЯчеекЗначениеНачалоВыбораКонструкторЗавершение", ЭтотОбъект, Новый Структура("ВыделеннаяОбласть, Конструктор, ТекущиеДанные", ВыделеннаяОбласть, Конструктор, ТекущиеДанные)));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекЗначениеНачалоВыбораКонструкторЗавершение(Текст, ДополнительныеПараметры) Экспорт
	
	ВыделеннаяОбласть = ДополнительныеПараметры.ВыделеннаяОбласть;
	Конструктор = ДополнительныеПараметры.Конструктор;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Текст <> Неопределено Тогда
		ТекущиеДанные.Значение = Конструктор.Текст;
		ВыделеннаяОбласть.Формат = Конструктор.Текст;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекЗначениеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыделеннаяОбласть = ДополнительныеПараметры.ВыделеннаяОбласть;
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    ЭлементСписка = ВыбранныйЭлемент;
    Если ЭлементСписка <> Неопределено Тогда
        ТекущиеДанные.Значение = Строка(ЭлементСписка.Значение);
        ВыделеннаяОбласть.Заполнение = ЭлементСписка.Значение;
    КонецЕсли;
    ЗаполнитьТаблицуСвойств();

КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	Элементы.СвойстваЯчеекЗначение.СписокВыбора.Очистить();
	
	ЭтоСтрокаСТипомКода = СтрНайти(ТекущиеДанные.ИмяСвойства, "ТипКода") > 0;
	ЭтоСтрокаГраница = СтрНайти(ТекущиеДанные.ИмяСвойства, "Граница") > 0;
	ЭтоСтрокаЛиния = СтрНайти(ТекущиеДанные.ИмяСвойства, "Линия") > 0;
	
	Если ЭтоСтрокаСТипомКода Тогда
		
		Для Каждого ЭлементСписка Из СписокТипыКодов Цикл
			Элементы.СвойстваЯчеекЗначение.СписокВыбора.Добавить(ЭлементСписка.Представление);
		КонецЦикла;
		
		Элементы.СвойстваЯчеекЗначение.РежимВыбораИзСписка = Истина;
		Элементы.СвойстваЯчеекЗначение.КнопкаСпискаВыбора = Ложь;
		
	Иначе
		
		Элементы.СвойстваЯчеекЗначение.РежимВыбораИзСписка = Ложь;
		Элементы.СвойстваЯчеекЗначение.КнопкаСпискаВыбора = Ложь;
		
	КонецЕсли;
	
	Элементы.СвойстваЯчеекЗначение.РедактированиеТекста =  Не (ЭтоСтрокаГраница ИЛи ЭтоСтрокаСТипомКода ИЛИ ЭтоСтрокаЛиния);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Объединить(Команда)
	
	Если ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		ОбъединитьОбласть(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Некорректная область!';uk='Некоректна область!'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разъединить(Команда)
	
	Если ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		РазъединитьОбласть(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Некорректная область!';uk='Некоректна область!'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекущаяСтрока = Элементы.ДоступныеПоляКомпоновкиДанных.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ВыборДоступногоПоля(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбластьПечати(Команда)
	
	Если (ПолеТабличногоДокумента.ВыделенныеОбласти[0].Лево <> 0 И ПолеТабличногоДокумента.ВыделенныеОбласти[0].Верх <> 0)
		И ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		УстановитьОбластьПечатиНаСервере(ПолеТабличногоДокумента.ВыделенныеОбласти[0].Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Некорректная область печати';uk='Некоректна область друку'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОбразец(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ДляЧего) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено поле ""Для чего""';uk='Не заповнене поле ""Для чого""'"),,"Объект.ДляЧего");
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	Если Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЦенникТовары",
			ПараметрКоманды,
			Неопределено,
			ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара());
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаТовары",
			ПараметрКоманды,
			Неопределено, 
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара());
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаСкладскиеЯчейки",
			ПараметрКоманды,
			Неопределено,
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСкладскойЯчейки());
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаДоставки",
			ПараметрКоманды,
			Неопределено, 
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиДоставки());
			
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаСерииНоменклатуры",
			ПараметрКоманды,
			Неопределено,
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСерииНоменклатуры());
			
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаУпаковочныеЛисты",
			ПараметрКоманды,
			Неопределено, 
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиУпаковочныеЛисты());
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеВерх(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Операция может быть выполнена только над ячейкой табличного документа!';uk='Операція може бути виконана тільки над коміркою табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеЦентр(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Операция может быть выполнена только над ячейкой табличного документа!';uk='Операція може бути виконана тільки над коміркою табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеНиз(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Операция может быть выполнена только над ячейкой табличного документа!';uk='Операція може бути виконана тільки над коміркою табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеГоризонтальноеЛево(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Операция может быть выполнена только над ячейкой табличного документа!';uk='Операція може бути виконана тільки над коміркою табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеГоризонтальноеЦентр(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Операция может быть выполнена только над ячейкой табличного документа!';uk='Операція може бути виконана тільки над коміркою табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеГоризонтальноеПраво(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Операция может быть выполнена только над ячейкой табличного документа!';uk='Операція може бути виконана тільки над коміркою табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	
КонецПроцедуры

&НаКлиенте
Процедура Назначить(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ДляЧего) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Для чего"" не заполнено';uk='Поле ""Для чого"" не заповнено'"),,"Объект.ДляЧего");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Перед выполнением операции элемент необходимо записать. Выполнить запись элемента и продолжить?';uk='Перед виконанням операції елемент необхідно записати. Виконати запис елемента і продовжити?'");
		КодОтвета = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("НазначитьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	НазначитьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    Если КодОтвета <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Если ПроверитьЗаполнение() Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    
    НазначитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура НазначитьФрагмент()
	
	Если Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов") Тогда
		НазначитьШаблонЭтикеткиУпаковочногоЛистаОсновным(Объект.Ссылка);
	Иначе
		ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаНазначенияШаблонов", Новый Структура("Назначение, ДляЧего, Шаблон", Объект.Назначение, Объект.ДляЧего, Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблон(Команда)
	
	ФормаВыбора = ОткрытьФорму(
		"Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаВыбораШаблона",
		Новый Структура("Назначение", Объект.Назначение),
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ВыбратьШаблонЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонЗавершение(ИмяШаблона, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ИмяШаблона) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыбратьШаблонВопросЗавершение", ЭтотОбъект, Новый Структура("ИмяШаблона", ИмяШаблона)), 
			НСтр("ru='Редактируемый шаблон будет заменен на шаблон по умолчанию, продолжить?';uk='Редагований шаблон буде замінений на шаблон по умовчанню, продовжити?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИмяШаблона = ДополнительныеПараметры.ИмяШаблона;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Да Тогда
        УстановитьШаблонПоУмолчанию(ИмяШаблона);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвойстваЯчеек.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СвойстваЯчеек.ИмяСвойства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Разделитель';uk='Роздільник'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ReportHeaderBackColor);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвойстваЯчеекЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СвойстваЯчеек.ИмяСвойства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Разделитель';uk='Роздільник'");

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

КонецПроцедуры

#Область Прочее

&НаСервереБезКонтекста
Функция ПолучитьКоды()
	
	Возврат Справочники.ШаблоныЭтикетокИЦенников.ПолучитьОбразцыШтрихкодов();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПараметраШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПараметраВалютаЦены()
	
	Возврат "ВидЦены.ВалютаЦены";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазмерСтраницы(ПолеТабличногоДокумента)
	
	ВысотаСтраницы = ПолеТабличногоДокумента.ВысотаСтраницы;
	ШиринаСтраницы = ПолеТабличногоДокумента.ШиринаСтраницы;
	
	Наименование = Строка(ШиринаСтраницы)+"х"+Строка(ВысотаСтраницы);
	
	Если ШиринаСтраницы = 210 И ВысотаСтраницы = 297 Тогда
		Наименование = "A4";
	ИначеЕсли ШиринаСтраницы = 148 И ВысотаСтраницы = 210 Тогда
		Наименование = "A5";
	ИначеЕсли ШиринаСтраницы = 105 И ВысотаСтраницы = 148 Тогда
		Наименование = "A6";
	ИначеЕсли ШиринаСтраницы = 74 И ВысотаСтраницы = 105 Тогда
		Наименование = "A7";
	ИначеЕсли ШиринаСтраницы = 52 И ВысотаСтраницы = 74 Тогда
		Наименование = "A8";
	ИначеЕсли ШиринаСтраницы = 37 И ВысотаСтраницы = 52 Тогда
		Наименование = "A9";
	ИначеЕсли ШиринаСтраницы = 26 И ВысотаСтраницы = 37 Тогда
		Наименование = "A10";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовок(Форма)
	
	Наименование = Форма.Объект.Наименование;
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Наименование = Наименование + ?(ЗначениеЗаполнено(Наименование), " ", "") + НСтр("ru='(Создание)';uk='(Створення)'");
	КонецЕсли;
	
	Форма.Автозаголовок = Ложь;
	Если Форма.Объект.Назначение      = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров") Тогда
		Форма.Заголовок = НСтр("ru='Шаблон этикетки:';uk='Шаблон етикетки:'") + " " + Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров") Тогда
		Форма.Заголовок = НСтр("ru='Шаблон ценника:';uk='Шаблон цінника:'") + " "+ Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек") Тогда
		Форма.Заголовок = НСтр("ru='Шаблон этикетки:';uk='Шаблон етикетки:'") + " " + Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки") Тогда
		Форма.Заголовок = НСтр("ru='Шаблон этикетки:';uk='Шаблон етикетки:'") + " " + Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры") Тогда
		Форма.Заголовок = НСтр("ru='Шаблон этикетки:';uk='Шаблон етикетки:'") + " " + Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов") Тогда
		Форма.Заголовок = НСтр("ru='Шаблон этикетки:';uk='Шаблон етикетки:'") + " " + Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШаблон()
	
	СтруктураШаблона = СтруктураШаблона();
	
	Если СтруктураШаблона <> Неопределено Тогда
		// Загрузка шаблона.
		СтруктураШаблона.Свойство("РедакторТабличныйДокумент", ПолеТабличногоДокумента);
		СтруктураШаблона.Свойство("КоличествоПоВертикали"    , КоличествоПоВертикали);
		СтруктураШаблона.Свойство("КоличествоПоГоризонтали"  , КоличествоПоГоризонтали);
		СтруктураШаблона.Свойство("ТипКода"                  , ТипКода);
		СтруктураШаблона.Свойство("РазмерШрифта"             , РазмерШрифта);
		СтруктураШаблона.Свойство("ОтображатьТекст"          , ОтображатьТекст);
		
		Элементы.РазмерШрифта.Доступность = ОтображатьТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьМаксимальноеКоличествоНаСтранице()
	
	МаксимальноеКоличество = МаксимальноеКоличествоЭтикетокНаСтранице();
	
	КоличествоПоВертикали   = МаксимальноеКоличество.ПоВертикали;
	КоличествоПоГоризонтали = МаксимальноеКоличество.ПоГоризонтали;
	
	ОписаниеРазмещенияДляЦенников = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='На странице %1 помещается по вертикали: %2, по горизонтали: %3';uk='На сторінці %1 вміщається по вертикалі: %2, по горизонталі: %3'"),
		РазмерСтраницы(ПолеТабличногоДокумента),
		КоличествоПоВертикали,
		КоличествоПоГоризонтали);
	
КонецПроцедуры

&НаСервере
Процедура НазначениеПриИзмененииСервер(Знач ОчищатьНазначение = Истина)
	
	ОбновитьЗаголовок(ЭтаФорма);
	Элементы.ГруппаОписаниеРазмера.Видимость = Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров");
	
	ЗаполнитьДоступныеПоля();
	
	МассивТипов = Новый Массив;
	Элементы.ДляЧего.ВыбиратьТип = Ложь;
	Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров
		ИЛИ Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров Тогда
		Если ОчищатьНазначение ИЛИ Объект.ДляЧего = Неопределено Тогда
			Объект.ДляЧего = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек Тогда
		Если ОчищатьНазначение ИЛИ Объект.ДляЧего = Неопределено Тогда
			Объект.ДляЧего = Справочники.СкладскиеЯчейки.ПустаяСсылка();
		КонецЕсли;
		МассивТипов.Добавить(Тип("СправочникСсылка.СкладскиеЯчейки"));
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки Тогда
		Элементы.ДляЧего.ВыбиратьТип = Истина;
		Если ОчищатьНазначение Тогда
			Объект.ДляЧего = Неопределено;
		КонецЕсли;
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры Тогда
		Если ОчищатьНазначение ИЛИ Объект.ДляЧего = Неопределено Тогда
			Объект.ДляЧего = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		МассивТипов.Добавить(Тип("СправочникСсылка.СерииНоменклатуры"));
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов Тогда
		Если ОчищатьНазначение ИЛИ Объект.ДляЧего = Неопределено Тогда
			Объект.ДляЧего = Документы.УпаковочныйЛист.ПустаяСсылка();
		КонецЕсли;
		МассивТипов.Добавить(Тип("ДокументСсылка.УпаковочныйЛист"));
	КонецЕсли;
	Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблонПоУмолчанию(ИмяШаблона)
	
	ШаблонПоУмолчанию = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет(ИмяШаблона);
	
	ПолеТабличногоДокумента = ШаблонПоУмолчанию;
	
	Если ИмяШаблона = "ШаблонЭтикеткиСкладскиеЯчейки" Тогда 
		
		ТипКода         = 4; // Code128
		ОтображатьТекст = Ложь;
		РазмерШрифта    = 12;
		
	ИначеЕсли ИмяШаблона = "ШаблонЭтикеткиСерииНоменклатуры" Тогда	
		
		ТипКода         = 4; // Code128
		ОтображатьТекст = Истина;
		РазмерШрифта    = 12;
		
	Иначе
		
		Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек
			ИЛИ Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры Тогда

			ТипКода = 4; // Code128
			
			ОтображатьТекст = Истина;
					
		ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов Тогда
			
			ТипКода = 4; // Code128
			
			Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
				
				Имя = Область.Имя;
				ОтображатьТекст = Ложь;
				Индекс = ЗаменитьРисунокШтрихкода(Имя);
				ПолеТабличногоДокумента.Рисунки[Индекс].Имя = Имя;
				
			КонецЦикла;
	
		Иначе	
			ТипКода = 1; // EAN13
			ОтображатьТекст = Истина;
		КонецЕсли;
		
		РазмерШрифта    = 12;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураШаблона()
	
	СтруктураШаблона = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	СтруктураШаблона = Объект.Ссылка.Шаблон.Получить();
	Иначе
		ЗначениеКопирования = Неопределено;
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		Если ЗначениеКопирования <> Неопределено Тогда
			СтруктураШаблона = ЗначениеКопирования.Шаблон.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШаблона;
	
КонецФункции

&НаСервере
Функция ПодготовитьСтруктуруМакетаШаблона()
	
	СтруктураМакетаШаблона = Справочники.ШаблоныЭтикетокИЦенников.ПодготовитьСтруктуруМакетаШаблона(ПолеТабличногоДокумента, Объект.Назначение);
	СтруктураМакетаШаблона.ТипКода          = ТипКода;
	СтруктураМакетаШаблона.РазмерШрифта     = РазмерШрифта;
	СтруктураМакетаШаблона.ОтображатьТекст  = ОтображатьТекст;
	Возврат СтруктураМакетаШаблона;
	
КонецФункции

&НаСервере
Функция ПроверитьУмещение()
	
	Ошибка = Ложь;
	
	МаксимальноеКоличество = МаксимальноеКоличествоЭтикетокНаСтранице();
	
	Если МаксимальноеКоличество.ПоГоризонтали > 0
		И КоличествоПоГоризонтали > МаксимальноеКоличество.ПоГоризонтали Тогда
		
		ТекстСообщения = НСтр("ru='Максимальное количество по горизонтали: %Количество%';uk='Максимальна кількість по горизонталі: %Количество%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", МаксимальноеКоличество.ПоГоризонтали);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"КоличествоПоГоризонтали",,Ошибка);
		
	КонецЕсли;	
	
	Если МаксимальноеКоличество.ПоВертикали > 0
		И КоличествоПоВертикали > МаксимальноеКоличество.ПоВертикали Тогда
		
		ТекстСообщения = НСтр("ru='Максимальное количество по вертикали: %Количество%';uk='Максимальна кількість по вертикалі: %Количество%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", МаксимальноеКоличество.ПоВертикали);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"КоличествоПоВертикали",,Ошибка);
		
	КонецЕсли;	
	
	Возврат НЕ Ошибка;
	
КонецФункции

&НаСервере
Функция МаксимальноеКоличествоЭтикетокНаСтранице()
	
	Возврат Справочники.ШаблоныЭтикетокИЦенников.МаксимальноеКоличествоНаСтранице(ПолеТабличногоДокумента, Объект.Назначение);
	
КонецФункции

&НаСервере
Процедура УстановитьОбластьПечатиНаСервере(ИмяОбласти)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.Область(ИмяОбласти);
	
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	РедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
	
	Если ПолеТабличногоДокумента.ОбластьПечати <> Неопределено Тогда
		ПолеТабличногоДокумента.ОбластьПечати.Обвести(НетЛинии,НетЛинии,НетЛинии,НетЛинии);
	КонецЕсли;
	
	ПолеТабличногоДокумента.ОбластьПечати = ВыделеннаяОбласть;
	ПолеТабличногоДокумента.ОбластьПечати.Обвести(РедкийПунктир,РедкийПунктир,РедкийПунктир,РедкийПунктир);
	
	ПолеТабличногоДокумента.ОбластьПечати.АвтоВысотаСтроки = Ложь;
	
КонецПроцедуры

&НаСервере
Функция УстановитьКартинкуШтрихкода(РисунокШтрихкода)
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПримерШтрихкода = Неопределено;
	Коды = ПолучитьКоды();
	Для Каждого СтрокаТЧ Из Коды Цикл
		Если СтрокаТЧ.ТипКода = ТипКода Тогда
			ПримерШтрихкода = СтрокаТЧ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          Окр(РисунокШтрихкода.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",          Окр(РисунокШтрихкода.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ПримерШтрихкода.Пример));
	ПараметрыШтрихкода.Вставить("ТипКода",         ПримерШтрихкода.ТипКода);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", ОтображатьТекст);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",    РазмерШрифта);
	
	РисунокШтрихкода.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецФункции

&НаСервере
Функция ВставитьРисунокШтрихкода(ИмяТекущейОбласти)
	
	РисунокШтрихкода = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(РисунокШтрихкода);
	РисунокШтрихкода.Расположить(ПолеТабличногоДокумента.Область(ИмяТекущейОбласти));
	РисунокШтрихкода.Имя = ИмяПараметраШтрихкод()+СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	
	УстановитьКартинкуШтрихкода(ПолеТабличногоДокумента.Рисунки[Индекс]);
	
	Возврат Индекс;
	
КонецФункции

&НаСервере
Функция ВставитьРисунокЗнакВалюты(ИмяТекущейОбласти)
	
	Рисунок = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(Рисунок);
	Рисунок.Расположить(ПолеТабличногоДокумента.Область(ИмяТекущейОбласти));
	Рисунок.Имя = "ЗнакВалюты" + СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	
	Рисунок.ЦветФона = Новый Цвет;
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
	Рисунок.Картинка = Новый Картинка(Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет("ЗнакВалюты643"), Истина);
	
	Возврат Индекс;
	
КонецФункции

&НаСервере
Функция ЗаменитьРисунокШтрихкода(ИмяРисунка)
	
	РисунокШтрихкодаИсточник = Неопределено;
	Для Каждого Рисунок Из ПолеТабличногоДокумента.Рисунки Цикл
		Если Рисунок.Имя <> ИмяРисунка Тогда
			Продолжить;
		КонецЕсли;
		РисунокШтрихкодаИсточник = Рисунок;
		Прервать;
	КонецЦикла;
	
	РисунокШтрихкода = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	РисунокШтрихкода.Верх   = РисунокШтрихкодаИсточник.Верх;
	РисунокШтрихкода.Лево   = РисунокШтрихкодаИсточник.Лево;
	РисунокШтрихкода.Высота = РисунокШтрихкодаИсточник.Высота;
	РисунокШтрихкода.Ширина = РисунокШтрихкодаИсточник.Ширина;
	РисунокШтрихкода.Имя    = РисунокШтрихкодаИсточник.Имя;
	
	ПолеТабличногоДокумента.Рисунки.Удалить(РисунокШтрихкодаИсточник);
	
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(РисунокШтрихкода);
	УстановитьКартинкуШтрихкода(ПолеТабличногоДокумента.Рисунки[Индекс]);
	
	Возврат Индекс;
	
КонецФункции

&НаСервере
Процедура ОбъединитьОбласть(ИмяОбласти)
	
	Область = ПолеТабличногоДокумента.Область(ИмяОбласти);
	Область.Объединить();
	
КонецПроцедуры

&НаСервере
Процедура РазъединитьОбласть(ИмяОбласти)
	
	Область = ПолеТабличногоДокумента.Область(ИмяОбласти);
	Область.Разъединить();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьШаблон()
	
	Если ЗначениеЗаполнено(ИмяМакета) Тогда
		УстановитьШаблонПоУмолчанию(ИмяМакета);
	Иначе
		ПолеТабличногоДокумента = Новый ТабличныйДокумент;
		ПолеТабличногоДокумента.ОбластьПечати = ПолеТабличногоДокумента.Область("R2C2:R20C5");
		РедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
		ПолеТабличногоДокумента.ОбластьПечати.Обвести(РедкийПунктир,РедкийПунктир,РедкийПунктир,РедкийПунктир);
		КоличествоПоГоризонтали = 1;
		КоличествоПоВертикали   = 1;
		ТипКода                 = 1; // EAN-13
		ОтображатьТекст         = Истина;
		РазмерШрифта            = 12;
		
		Элементы.ОтображатьТекст.Доступность = Истина;
		Элементы.ТипКода.Доступность         = Истина;
	КонецЕсли;
	
	Элементы.РазмерШрифта.Доступность = ОтображатьТекст;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоле(Коллекция, СтруктураПоля, Дерево)
	
	Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПоля, ",");
	ИмяПоля = Результат[0];
	Иерархия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	
	Если Результат.Количество() = 2 Тогда
		Действия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат[1], ";");
	Иначе
		Действия = Новый Массив;
	КонецЕсли;
	
	КоллекцияСтрокДерева = Дерево.Строки;
	КоллекцияПолейКомпоновки = Коллекция;
	НайденныйЭлементПолеКомпоновки = Неопределено;
	НайденныйЭлементДерева = Неопределено;
	ИмяЭлемента = "";
	ИмяЭлементаОписание = "";
	ИмяРодителя = "";
	ИмяРодителяОписание = "";
	Для Каждого ЭлементИерархии Из Иерархия Цикл
		
		ИмяРодителя = ?(ЗначениеЗаполнено(ИмяЭлемента), ИмяЭлемента + ".", "");
		ИмяЭлемента = ИмяРодителя + ЭлементИерархии;
		
		НайденныйЭлементПолеКомпоновки = КоллекцияПолейКомпоновки.Найти(ИмяЭлемента);
		Если НайденныйЭлементПолеКомпоновки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		КоллекцияПолейКомпоновки = НайденныйЭлементПолеКомпоновки.Элементы;
		
		ИмяРодителяОписание = ?(ЗначениеЗаполнено(ИмяЭлементаОписание), ИмяЭлементаОписание + ".", "");
		ИмяЭлементаОписание = ИмяРодителяОписание + НайденныйЭлементПолеКомпоновки.Заголовок;
		
		НайденныйЭлементДерева = КоллекцияСтрокДерева.Найти(ЭлементИерархии, "ИмяПоля");
		Если НайденныйЭлементДерева = Неопределено Тогда
			
			НайденныйЭлементДерева = КоллекцияСтрокДерева.Добавить();
			Если КоллекцияСтрокДерева.Родитель <> Неопределено Тогда
				КоллекцияСтрокДерева.Родитель.ИндексКартинки = 0;
			КонецЕсли;
			
			НайденныйЭлементДерева.ИмяПоля = ЭлементИерархии;
			НайденныйЭлементДерева.Описание = СтрЗаменить(НайденныйЭлементПолеКомпоновки.Заголовок, ИмяРодителяОписание, "");
			
		КонецЕсли;
		КоллекцияСтрокДерева = НайденныйЭлементДерева.Строки;
		
	КонецЦикла;
	
	НайденныйЭлементДерева.ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Если НайденныйЭлементДерева.Строки.Количество() > 0 Тогда
		НайденныйЭлементДерева.ИндексКартинки = 0;
	Иначе
		НайденныйЭлементДерева.ИндексКартинки = 7;
	КонецЕсли;
	НайденныйЭлементДерева.Описание = СтрЗаменить(НайденныйЭлементПолеКомпоновки.Заголовок, ИмяРодителяОписание, "");
	
	Если Действия.Найти("Свойства") <> Неопределено Тогда
		
		НаборыРеквизитовИСведений = Новый Массив;
		
		Если ТипЗнч(Объект.ДляЧего) = Тип("СправочникСсылка.Номенклатура")
			И ЗначениеЗаполнено(Объект.ДляЧего) Тогда
		
			Если НайденныйЭлементПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("Номенклатура")
				И ЗначениеЗаполнено(Объект.ДляЧего.ВидНоменклатуры.НаборСвойств) Тогда
				НаборыРеквизитовИСведений.Добавить(Объект.ДляЧего.ВидНоменклатуры.НаборСвойств);
			ИначеЕсли НайденныйЭлементПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("Характеристика")
				И ЗначениеЗаполнено(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствХарактеристик) Тогда
				НаборыРеквизитовИСведений.Добавить(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствХарактеристик);
			ИначеЕсли НайденныйЭлементПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("Серия")
				И ЗначениеЗаполнено(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствСерий) Тогда
				НаборыРеквизитовИСведений.Добавить(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствСерий);
			КонецЕсли;
			
		Иначе
			Для Каждого Тип Из НайденныйЭлементПолеКомпоновки.Тип.Типы() Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
				
				Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
					Если ЗначениеЗаполнено(Характеристика.ЗначениеОтбораВидов)
						И НаборыРеквизитовИСведений.Найти(Характеристика.ЗначениеОтбораВидов) = Неопределено Тогда
						НаборыРеквизитовИСведений.Добавить(Характеристика.ЗначениеОтбораВидов);
					КонецЕсли;
				КонецЦикла
				
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого НаборСсылка Из НаборыРеквизитовИСведений Цикл
			
			ТабличныеЧасти = НаборСсылка.Метаданные().ТабличныеЧасти;
			Если ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено 
					или ТабличныеЧасти.Найти("ДополнительныеСведения") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Набор = НаборСсылка.ПолучитьОбъект();
			Для Каждого ДополнительныйРеквизит Из Набор.ДополнительныеРеквизиты Цикл
				НоваяСтрока = НайденныйЭлементДерева.Строки.Добавить();
				НоваяСтрока.ИндексКартинки = 1;
				НоваяСтрока.ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля+".["+ДополнительныйРеквизит.Свойство.Наименование+"]");
				НоваяСтрока.Описание = ДополнительныйРеквизит.Свойство.Наименование;
			КонецЦикла;
			Для Каждого ДополнительноеСведение Из Набор.ДополнительныеСведения Цикл
				НоваяСтрока = НайденныйЭлементДерева.Строки.Добавить();
				НоваяСтрока.ИндексКартинки = 2;
				НоваяСтрока.ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля+".["+ДополнительноеСведение.Свойство.Наименование+"]");
				НоваяСтрока.Описание = ДополнительноеСведение.Свойство.Наименование;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеПоля()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение доступных полей
	Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаСкладскиеЯчейки");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаТовары");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаТовары");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаДоставка");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаСерииНоменклатуры");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаУпаковочныеЛисты");	
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВХранилище));
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек Тогда
		
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("Штрихкод");
		
		ИменаПолей.Добавить("Ячейка");
		ИменаПолей.Добавить("Ячейка.Код");
		ИменаПолей.Добавить("Ячейка.Родитель");
		ИменаПолей.Добавить("Ячейка.Линия");
		ИменаПолей.Добавить("Ячейка.Наименование");
		ИменаПолей.Добавить("Ячейка.Позиция");
		ИменаПолей.Добавить("Ячейка.ПорядокОбхода");
		ИменаПолей.Добавить("Ячейка.РабочийУчасток");
		ИменаПолей.Добавить("Ячейка.Секция");
		ИменаПолей.Добавить("Ячейка.Владелец");
		ИменаПолей.Добавить("Ячейка.Стеллаж");
		ИменаПолей.Добавить("Ячейка.Ярус");
		
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров
	      ИЛИ Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров Тогда
		
		ИменаПолей = Новый Массив;
		
		ИменаПолей.Добавить("Штрихкод");
		
		ИменаПолей.Добавить("ВидЦены");
		ИменаПолей.Добавить("ВидЦены.ВалютаЦены");
		ИменаПолей.Добавить("ВидЦены.Наименование");
		ИменаПолей.Добавить("ВидЦены.ЦенаВключаетНДС");
		ИменаПолей.Добавить("Цена");
		ИменаПолей.Добавить("ДатаПоследнегоИзмененияЦены");
		
		ИменаПолей.Добавить("ВидЦеныДополнительно");
		ИменаПолей.Добавить("ВидЦеныДополнительно.ВалютаЦены");
		ИменаПолей.Добавить("ВидЦеныДополнительно.Наименование");
		ИменаПолей.Добавить("ВидЦеныДополнительно.ЦенаВключаетНДС");
		ИменаПолей.Добавить("ЦенаДополнительно");
		ИменаПолей.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно");
		
		ИменаПолей.Добавить("Номенклатура.Артикул");
		ИменаПолей.Добавить("Номенклатура.ВариантОформленияПродажи");
		ИменаПолей.Добавить("Номенклатура.Вес");
		ИменаПолей.Добавить("Номенклатура.ВестиУчетПоГТД");
		ИменаПолей.Добавить("Номенклатура.ВидНоменклатуры");
		ИменаПолей.Добавить("Номенклатура.Родитель");
		ИменаПолей.Добавить("Номенклатура.ЕдиницаИзмерения");
		ИменаПолей.Добавить("Номенклатура.Код");
		ИменаПолей.Добавить("Номенклатура.КодДляПоиска");
		ИменаПолей.Добавить("Номенклатура.Наименование");
		ИменаПолей.Добавить("Номенклатура.НаименованиеПолное");
		ИменаПолей.Добавить("Номенклатура.Объем");
		ИменаПолей.Добавить("Номенклатура.Производитель");
		ИменаПолей.Добавить("Номенклатура.СтавкаНДС");
		ИменаПолей.Добавить("Номенклатура.Описание");
		ИменаПолей.Добавить("Номенклатура.ТипНоменклатуры");
		ИменаПолей.Добавить("Номенклатура,Свойства");
		
		ИменаПолей.Добавить("Характеристика.Наименование");
		ИменаПолей.Добавить("Характеристика.НаименованиеПолное");
		ИменаПолей.Добавить("Характеристика.Владелец");
		ИменаПолей.Добавить("Характеристика,Свойства");
		
		ИменаПолей.Добавить("Весовой");
		ИменаПолей.Добавить("КодПодключаемогоОборудованияOffline");
		ИменаПолей.Добавить("PLU");
		ИменаПолей.Добавить("Организация");
		ИменаПолей.Добавить("ТекущееВремя");
		ИменаПолей.Добавить("ТекущийПользователь");
		ИменаПолей.Добавить("УпаковкаЕдиницаИзмерения");
		
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки Тогда
		
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("ВесНакладной");
		ИменаПолей.Добавить("ЕдиницаИзмеренияВеса");
		ИменаПолей.Добавить("ЕдиницаИзмеренияОбъема");
		ИменаПолей.Добавить("КоличествоПозиций");
		ИменаПолей.Добавить("ОбъемНакладной");
		ИменаПолей.Добавить("Распоряжение,Свойства");
		
		ИменаПолей.Добавить("Распоряжение.Автор");
		ИменаПолей.Добавить("Распоряжение.АдресДоставки");
		ИменаПолей.Добавить("Распоряжение.БанковскийСчетГрузоотправителя");
		ИменаПолей.Добавить("Распоряжение.БанковскийСчетГрузополучателя");
		ИменаПолей.Добавить("Распоряжение.БанковскийСчетКонтрагента");
		ИменаПолей.Добавить("Распоряжение.БанковскийСчетОрганизации");
		ИменаПолей.Добавить("Распоряжение.Валюта");
		ИменаПолей.Добавить("Распоряжение.ВалютаВзаиморасчетов");
		ИменаПолей.Добавить("Распоряжение.ВидЦены");
		ИменаПолей.Добавить("Распоряжение.ВидыЗапасов");
		ИменаПолей.Добавить("Распоряжение.Грузоотправитель");
		ИменаПолей.Добавить("Распоряжение.Грузополучатель");
		ИменаПолей.Добавить("Распоряжение.Дата");
		ИменаПолей.Добавить("Распоряжение.ДоверенностьДата");
		ИменаПолей.Добавить("Распоряжение.ДатаПлатежа");
		ИменаПолей.Добавить("Распоряжение.ДатаРаспоряжения");
		ИменаПолей.Добавить("Распоряжение.Договор");
		ИменаПолей.Добавить("Распоряжение.КартаЛояльности");
		ИменаПолей.Добавить("Распоряжение.Касса");
		ИменаПолей.Добавить("Распоряжение.ДоверенностьВыдана");
		ИменаПолей.Добавить("Распоряжение.Партнер,Свойства");
		ИменаПолей.Добавить("Распоряжение.Комментарий");
		ИменаПолей.Добавить("Распоряжение.Менеджер");
		ИменаПолей.Добавить("Распоряжение.НалогообложениеНДС");
		ИменаПолей.Добавить("Распоряжение.Номер");
		ИменаПолей.Добавить("Распоряжение.ДоверенностьНомер");
		ИменаПолей.Добавить("Распоряжение.ХозяйственнаяОперация");
		ИменаПолей.Добавить("Распоряжение.Организация");
		ИменаПолей.Добавить("Распоряжение.Основание");
		ИменаПолей.Добавить("Распоряжение.Ответственный");
		ИменаПолей.Добавить("Распоряжение.Подразделение");
		ИменаПолей.Добавить("Распоряжение.Склад");
		ИменаПолей.Добавить("Распоряжение.СкладОтправитель");
		ИменаПолей.Добавить("Распоряжение.СкладПолучатель");
		ИменаПолей.Добавить("Распоряжение.Согласован");
		ИменаПолей.Добавить("Распоряжение.Соглашение");
		ИменаПолей.Добавить("Распоряжение.СуммаВзаиморасчетов");
		ИменаПолей.Добавить("Распоряжение.СуммаДокумента");
		ИменаПолей.Добавить("Распоряжение.СуммаПредоплаты");
		ИменаПолей.Добавить("Распоряжение.ФормаОплаты");
		ИменаПолей.Добавить("Распоряжение.ЦенаВключаетНДС");
		
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры Тогда
		
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("Штрихкод");
		ИменаПолей.Добавить("Серия.ВидНоменклатуры");
		ИменаПолей.Добавить("Серия.ГоденДо");
		ИменаПолей.Добавить("Серия.Наименование");
		ИменаПолей.Добавить("Серия.Номер");
		ИменаПолей.Добавить("Серия,Свойства");
		
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаУпаковочныхЛистов Тогда
		
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("Штрихкод");
		ИменаПолей.Добавить("Код");
		ИменаПолей.Добавить("Основание");
		
		ИменаПолей.Добавить("УпаковочныйЛист.Код");
		ИменаПолей.Добавить("УпаковочныйЛист.СкладУпаковки");
		ИменаПолей.Добавить("УпаковочныйЛист.Вид");
		ИменаПолей.Добавить("УпаковочныйЛист.Упаковал");
		ИменаПолей.Добавить("УпаковочныйЛист.Основание");
		ИменаПолей.Добавить("УпаковочныйЛист.Комментарий");
		ИменаПолей.Добавить("УпаковочныйЛист.ВсегоМест");
		
	КонецЕсли;

	Дерево = ДанныеФормыВЗначение(ДоступныеПоляКомпоновкиДанных, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		ДобавитьПоле(КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.Элементы, ИмяПоля, Дерево);
	КонецЦикла;
	ЗначениеВДанныеФормы(Дерево, ДоступныеПоляКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРазмер(ШиринаОбластиВМиллиметрах, ВысотаОбластиВМиллиметрах, РазмерЯчейкиВМиллиметрах)
	
	ЭталонРазмеров = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ЭталонРазмерыЯчеек");
	Картинка = ЭталонРазмеров.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Картинка.Расположить(ЭталонРазмеров.Область("R1C1:R100C100"));
	ВысотаКартинкиВМиллиметрах = Картинка.Высота;
	ШиринаКартинкиВМиллиметрах = Картинка.Ширина;
	
	ВысотаВМиллиметрахЯчейкиВысотой0_25  = ВысотаКартинкиВМиллиметрах / 100;
	ШиринаВМиллиметрахЯчейкиШириной0_125 = (ШиринаКартинкиВМиллиметрах / 100) / 4;
	
	МинимальныйШагУстановкиШирины = 0.125;
	МинимальныйШагУстановкиВысоты = 0.25;
	
	КоличествоШаговВМиллиметреПоВысоте = 0;
	Пока КоличествоШаговВМиллиметреПоВысоте * ВысотаВМиллиметрахЯчейкиВысотой0_25 < 1 Цикл
		КоличествоШаговВМиллиметреПоВысоте = КоличествоШаговВМиллиметреПоВысоте + 1;
	КонецЦикла;
	КоличествоШаговВМиллиметреПоВысоте = КоличествоШаговВМиллиметреПоВысоте - 1;
	
	КоличествоШаговВМиллиметреПоШирине = 0;
	Пока КоличествоШаговВМиллиметреПоШирине * ШиринаВМиллиметрахЯчейкиШириной0_125 < 1 Цикл
		КоличествоШаговВМиллиметреПоШирине = КоличествоШаговВМиллиметреПоШирине + 1;
	КонецЦикла;
	КоличествоШаговВМиллиметреПоШирине = КоличествоШаговВМиллиметреПоШирине - 1;
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	ПолеТабличногоДокумента.Очистить();
	
	КоличествоЯчеекПоШирине = Цел(ШиринаОбластиВМиллиметрах / РазмерЯчейкиВМиллиметрах);
	КоличествоЯчеекПоВысоте = Цел(ВысотаОбластиВМиллиметрах / РазмерЯчейкиВМиллиметрах);
	
	ШиринаДокумента = 1 + КоличествоЯчеекПоШирине;
	ВысотаДокумента = 1 + КоличествоЯчеекПоВысоте;
	
	Для НомерКолонки = 2 По ШиринаДокумента Цикл
		// Минимальный шаг установки ширины = 0.125
		// 1 ячейка при ширине 0.5 занимает 0,97 мм
		ИмяОбласти = "C" + НомерКолонки;
		ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = (МинимальныйШагУстановкиШирины * КоличествоШаговВМиллиметреПоШирине) * РазмерЯчейкиВМиллиметрах;
	КонецЦикла;
	
	Для НомерСтроки = 2 По ВысотаДокумента Цикл
		// Минимальный шаг установки высоты = 0.25
		// 1 ячейка при ширине 2.75 занимает 0,97 мм
		ИмяОбласти = "R" + НомерСтроки;
		ПолеТабличногоДокумента.Область(ИмяОбласти).АвтоВысотаСтроки = Ложь;
		ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = (МинимальныйШагУстановкиВысоты * КоличествоШаговВМиллиметреПоВысоте) * РазмерЯчейкиВМиллиметрах;
	КонецЦикла;

	ИмяОбластиПечати = "R2C2"+":"+"R"+Формат(ВысотаДокумента,"ЧГ=0")+"C"+Формат(ШиринаДокумента,"ЧГ=0");
	ПолеТабличногоДокумента.Область("R1C1:"+"R"+200+"C"+200).ЦветФона = WebЦвета.Серый;
	ПолеТабличногоДокумента.Область(ИмяОбластиПечати).ЦветФона = Новый Цвет;
	УстановитьОбластьПечатиНаСервере(ИмяОбластиПечати);
	
	ИндексКартинки = ВставитьРисунокШтрихкода(ИмяОбластиПечати);
	ФактическаяШиринаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Ширина;
	ФактическаяВысотаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Высота;
	
	// Выполним подгонку для более точного соответствия реальным значениям.
	НедостающаяШиринаВМиллиметрах = ШиринаОбластиВМиллиметрах - ФактическаяШиринаВМиллиметрах;
	КоличествоЯчеекДляИзмененияШирины = Цел(НедостающаяШиринаВМиллиметрах / ((ФактическаяШиринаВМиллиметрах/ШиринаОбластиВМиллиметрах) / КоличествоШаговВМиллиметреПоШирине));
	
	Коэффициент = 1;
	КоличествоИзмененныхЯчеек = 0;
	Пока КоличествоЯчеекДляИзмененияШирины > 0 Цикл // -1 для того что бы не превысить реальные требуемые значения
		
		НомерКолонки = ГенераторСлучайныхЧисел.СлучайноеЧисло(2, ШиринаДокумента);
		ИмяОбласти = "C" + НомерКолонки;
		Если ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = (МинимальныйШагУстановкиШирины * КоличествоШаговВМиллиметреПоШирине) * РазмерЯчейкиВМиллиметрах + МинимальныйШагУстановкиШирины * (Коэффициент - 1) Тогда
			ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = (МинимальныйШагУстановкиШирины * КоличествоШаговВМиллиметреПоШирине) * РазмерЯчейкиВМиллиметрах + МинимальныйШагУстановкиШирины * Коэффициент;
			КоличествоЯчеекДляИзмененияШирины = КоличествоЯчеекДляИзмененияШирины - 1;
			
			КоличествоИзмененныхЯчеек = КоличествоИзмененныхЯчеек + 1;
		КонецЕсли;
		
		Если КоличествоИзмененныхЯчеек = КоличествоЯчеекПоШирине Тогда
			КоличествоИзмененныхЯчеек = 0;
			Коэффициент = Коэффициент + 1;
		КонецЕсли;
		
		Если КоличествоЯчеекДляИзмененияШирины = 0 Тогда
			ФактическаяШиринаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Ширина;
			НедостающаяШиринаВМиллиметрах = ШиринаОбластиВМиллиметрах - ФактическаяШиринаВМиллиметрах;
			КоличествоЯчеекДляИзмененияШирины = Цел(НедостающаяШиринаВМиллиметрах / ((ФактическаяШиринаВМиллиметрах/ШиринаОбластиВМиллиметрах) / КоличествоШаговВМиллиметреПоШирине));
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполним подгонку для более точного соответствия реальным значениям.
	НедостающаяВысотаВМиллиметрах = ВысотаОбластиВМиллиметрах - ФактическаяВысотаВМиллиметрах;
	КоличествоЯчеекДляИзмененияВысоты = Цел(НедостающаяВысотаВМиллиметрах / ((ФактическаяВысотаВМиллиметрах/ВысотаОбластиВМиллиметрах) / КоличествоШаговВМиллиметреПоВысоте));
	
	Коэффициент = 1;
	КоличествоИзмененныхЯчеек = 0;
	Пока КоличествоЯчеекДляИзмененияВысоты > 0 Цикл // -1 для того что бы не превысить реальные требуемые значения
		
		НомерСтроки = ГенераторСлучайныхЧисел.СлучайноеЧисло(2, ВысотаДокумента);
		ИмяОбласти = "R" + НомерСтроки;
		Если ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = (МинимальныйШагУстановкиВысоты * КоличествоШаговВМиллиметреПоВысоте) * РазмерЯчейкиВМиллиметрах + МинимальныйШагУстановкиВысоты * (Коэффициент - 1) Тогда
			ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = (МинимальныйШагУстановкиВысоты * КоличествоШаговВМиллиметреПоВысоте) * РазмерЯчейкиВМиллиметрах + МинимальныйШагУстановкиВысоты * Коэффициент;
			КоличествоЯчеекДляИзмененияВысоты = КоличествоЯчеекДляИзмененияВысоты - 1;
			
			КоличествоИзмененныхЯчеек = КоличествоИзмененныхЯчеек + 1;
		КонецЕсли;
		
		Если КоличествоИзмененныхЯчеек = КоличествоЯчеекПоВысоте Тогда
			КоличествоИзмененныхЯчеек = 0;
			Коэффициент = Коэффициент + 1;
		КонецЕсли;
		
		Если КоличествоЯчеекДляИзмененияВысоты = 0 Тогда
			ФактическаяВысотаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Высота;
			НедостающаяВысотаВМиллиметрах = ВысотаОбластиВМиллиметрах - ФактическаяВысотаВМиллиметрах;
			КоличествоЯчеекДляИзмененияВысоты = Цел(НедостающаяВысотаВМиллиметрах / ((ФактическаяВысотаВМиллиметрах/ВысотаОбластиВМиллиметрах) / КоличествоШаговВМиллиметреПоВысоте));
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеТабличногоДокумента.Рисунки.Удалить(ПолеТабличногоДокумента.Рисунки[ИндексКартинки]);
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
КонецПроцедуры

&НаСервере
Функция ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати)
	
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", ПодготовитьСтруктуруМакетаШаблона());
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСкладскойЯчейки()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСкладскойЯчейки(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиДоставки()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиДоставки(Объект.ДляЧего, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиУпаковочныеЛисты()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиУпаковочныеЛисты(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСерииНоменклатуры()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСерииНоменклатуры(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаКлиенте
Процедура ПолеТабличногоДокументаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	СтандартнаяОбработка = Ложь;
	
	ПодставитьПолеШаблона(Область, Элементы.ДоступныеПоляКомпоновкиДанных.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеЛинии(Линия)
	
	Если Линия <> Неопределено Тогда
		Результат = Строка(Линия.ТипЛинии) + ", " + Строка(?(Линия.Толщина=0,1,Линия.Толщина))
	Иначе
		Результат = "";
	КонецЕсли;		
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСвойств()
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	СвойстваЯчеек.Очистить();
	
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = НСтр("ru='Оформление';uk='Оформлення'");
		НоваяСтрока.Значение = "Разделитель";
		
		// Шрифт и цвет
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Шрифт";
		НоваяСтрока.Представление = НСтр("ru='Шрифт';uk='Шрифт'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Шрифт;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ЦветФона";
		НоваяСтрока.Представление = НСтр("ru='Цвет фона';uk='Колір фону'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.ЦветФона;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ЦветТекста";
		НоваяСтрока.Представление = НСтр("ru='Цвет текста';uk='Колір тексту'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.ЦветТекста;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ОриентацияТекста";
		НоваяСтрока.Представление = НСтр("ru='Ориентация текста';uk='Орієнтація тексту'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.ОриентацияТекста;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = НСтр("ru='Границы';uk='Границі'");
		НоваяСтрока.Значение = "Разделитель";
		
		// Границы
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСлева";
		НоваяСтрока.Представление = НСтр("ru='Граница слева';uk='Границя ліворуч'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСлева);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСверху";
		НоваяСтрока.Представление = НСтр("ru='Граница сверху';uk='Границя зверху'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСверху);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСправа";
		НоваяСтрока.Представление = НСтр("ru='Граница справа';uk='Границя праворуч'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСправа);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСнизу";
		НоваяСтрока.Представление = НСтр("ru='Граница снизу';uk='Границя знизу'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСнизу);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = НСтр("ru='Заполнение';uk='Заповнення'");
		НоваяСтрока.Значение = "Разделитель";
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Формат";
		НоваяСтрока.Представление = НСтр("ru='Формат';uk='Формат'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Формат;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Заполнение";
		НоваяСтрока.Представление = НСтр("ru='Заполнение';uk='Заповнення'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Заполнение;
		
		Если ВыделеннаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "Параметр";
			НоваяСтрока.Представление = НСтр("ru='Параметр';uk='Параметр'");
			НоваяСтрока.Значение = ВыделеннаяОбласть.Параметр;
			Если НоваяСтрока.Значение = Неопределено Тогда
				НоваяСтрока.Значение = "";
			КонецЕсли;
		Иначе
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "Текст";
			НоваяСтрока.Представление = НСтр("ru='Текст';uk='Текст'");
			НоваяСтрока.Значение = ВыделеннаяОбласть.Текст;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = НСтр("ru='Параметры штрихкода';uk='Параметри штрихкоду'");
		НоваяСтрока.Значение = "Разделитель";
		
		Если СтрНайти(ВыделеннаяОбласть.Имя, "Штрихкод") > 0 Тогда
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "ТипКода";
			НоваяСтрока.Представление = НСтр("ru='Тип кода';uk='Тип коду'");
			
			ЭлементСписка = СписокТипыКодов.НайтиПоЗначению(ТипКода);
			НоваяСтрока.Значение = ЭлементСписка.Представление;
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "РазмерШрифта";
			НоваяСтрока.Представление = НСтр("ru='Размер шрифта';uk='Розмір шрифту'");
			НоваяСтрока.Значение = РазмерШрифта;
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "ОтображатьТекст";
			НоваяСтрока.Представление = НСтр("ru='Отображать текст';uk='Відображати текст'");
			НоваяСтрока.Значение = ОтображатьТекст;
			
		КонецЕсли;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Имя";
		НоваяСтрока.Представление = НСтр("ru='Имя';uk='Ім''я'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Имя;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Высота";
		НоваяСтрока.Представление = НСтр("ru='Высота';uk='Висота'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Высота;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Ширина";
		НоваяСтрока.Представление = НСтр("ru='Ширина';uk='Ширина'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Ширина;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Линия";
		НоваяСтрока.Представление = НСтр("ru='Линия';uk='Лінія'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.Линия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПриАктивизацииОбласти(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьТаблицуСвойств", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипЛинии", ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства].ТипЛинии);
	ПараметрыФормы.Вставить("Толщина", ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства].Толщина);

	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаВыбораТипаЛинии", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("НастроитьЛиниюЗавершение", ЭтотОбъект, 
		Новый Структура("ВыделеннаяОбласть, ТекущиеДанные", ВыделеннаяОбласть, ТекущиеДанные)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЛиниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделеннаяОбласть = ДополнительныеПараметры.ВыделеннаяОбласть;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Результат <> Неопределено Тогда
		
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = Новый Линия(Результат.ТипЛинии, Результат.Толщина);
		ЗаполнитьТаблицуСвойств();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийРазмерСтраницы(Форма)
	
	ТекущийРазмер = 
	  "ПолеСверху:" + Форма.ПолеТабличногоДокумента.ПолеСверху
	+ "ПолеСнизу:" + Форма.ПолеТабличногоДокумента.ПолеСнизу
	+ "ПолеСлева:" + Форма.ПолеТабличногоДокумента.ПолеСлева
	+ "ПолеСправа:" + Форма.ПолеТабличногоДокумента.ПолеСправа
	+ "Размер:" + РазмерСтраницы(Форма.ПолеТабличногоДокумента);
	
	Возврат ТекущийРазмер;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРазмещение()
	
	ТекущийРазмер = ТекущийРазмерСтраницы(ЭтаФорма);
	
	Если ТекущийРазмер <> РазмерСтраницы Тогда
		РазмерСтраницы = ТекущийРазмер;
		РассчитатьМаксимальноеКоличествоНаСтранице();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьПолеШаблона(Область, ВыбраннаяСтрока)
	
	// Перед началом добавления необходимо выделить область в табличном документе.
	Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Для переноса поля шаблона нужно выделить ячейку или область ячеек!';uk='Для переносу поля шаблону потрібно виділити комірку або область комірок!'"));
		Возврат;
	Иначе
		ТекущаяОбласть = Область;
		ОбъединитьОбласть(ТекущаяОбласть.Имя);
	КонецЕсли;

	// Подготовка данных.
	ИмяПоляВШаблоне = Строка(ДоступныеПоляКомпоновкиДанных.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолеКомпоновкиДанных);
	
	// Размещение поля в шаблоне.
	Если ИмяПоляВШаблоне = ИмяПараметраШтрихкод() Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПодставитьПолеШаблонаЗавершение", ЭтотОбъект, Новый Структура("ИмяПоляВШаблоне, ТекущаяОбласть", ИмяПоляВШаблоне, ТекущаяОбласть)),
			НСтр("ru='Добавить штрихкод, как картинку?';uk='Додати штрих-код, як картинку?'"),
			РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИмяПоляВШаблоне = ИмяПараметраВалютаЦены() Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Знак валюты';uk='Знак валюти'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Текст';uk='Текст'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПодставитьПолеШаблонаЗавершение", ЭтотОбъект, Новый Структура("ИмяПоляВШаблоне, ТекущаяОбласть", ИмяПоляВШаблоне, ТекущаяОбласть)),
			НСтр("ru='Добавить валюту как...';uk='Додати валюту як...'"),
			Кнопки);
		
	Иначе
		
		ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + "["+ИмяПоляВШаблоне+"]";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьПолеШаблонаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоляВШаблоне = ДополнительныеПараметры.ИмяПоляВШаблоне;
	ТекущаяОбласть = ДополнительныеПараметры.ТекущаяОбласть;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ИмяПоляВШаблоне = ИмяПараметраШтрихкод() Тогда
			ВставитьРисунокШтрихкода(ТекущаяОбласть.Имя);
		ИначеЕсли ИмяПоляВШаблоне = ИмяПараметраВалютаЦены() Тогда
			ВставитьРисунокЗнакВалюты(ТекущаяОбласть.Имя);
		КонецЕсли;
		
	Иначе
		
		ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + "["+ИмяПоляВШаблоне+"]";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоступногоПоля(ВыбраннаяСтрока)
	
	ПодставитьПолеШаблона(ПолеТабличногоДокумента.ТекущаяОбласть, ВыбраннаяСтрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НазначитьШаблонЭтикеткиУпаковочногоЛистаОсновным(Шаблон)
	
	Константы.ШаблонЭтикеткиУпаковочногоЛиста.Установить(Шаблон);
	
КонецПроцедуры	
	
#КонецОбласти

#КонецОбласти

&НаКлиенте
Перем ПараметрыОбработчика;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ПриСозданииНаСервере_КонтактнаяИнформацияКонтрагента();
	
	УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен() ИЛИ ТолькоПросмотр;
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.ЮрФизЛицо
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
			|		ПО Контрагенты.Партнер = Партнеры.Ссылка
			|ГДЕ
			|	Партнеры.Ссылка = &ЗначениеЗаполнения";
			
			Запрос.УстановитьПараметр("ЗначениеЗаполнения", Параметры.ЗначениеКопирования);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЮрФизЛицо =  Выборка.ЮрФизЛицо;
			Иначе
				ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонецЕсли;
			
		Иначе
			ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
		ПриСозданииИЧтенииНаСервере();
		
	КонецЕсли;
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Объект.Ссылка);
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		Элементы.НаименованиеПолноеКомпания.Ширина = 60;
	КонецЕсли;
	
	Если ОтгрузкаЗапрещена Тогда
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Версионирование
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Версионирование
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма,
	                                                     Объект,
	                                                     "ГруппаКонтактнаяИнформация",
	                                                     ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) 
		ИЛИ ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры) Тогда
		УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтаФорма, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты,, Ложь);
	// Конец МенюОтчеты
	

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПартнерыИКонтрагенты.ЗаполнитьДанныеКонтрагентаПартнера(ЭтотОбъект, ТекущийОбъект.Ссылка);
    
	
	ПриСозданииИЧтенииНаСервере();
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
		ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		ОбновитьЗапретОтгрузки(Объект.Ссылка, ОтгрузкаЗапрещена);
		УстановитьДоступностьЗапретаОтгрузки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// Обработчик механизма "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	ЗаписатьКонтрагентаПартнера();
	УправлениеДоступностью();
	УстановитьЗаголовок();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(КодПоЕДРПОУ) И (ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"))Тогда
		КодПоЕДРПОУ = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГоловнойКонтрагент) ИЛИ ГоловнойКонтрагент = КонтрагентПартнера Тогда
		ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи, "Партнеры");
	Оповестить("Запись_Партнеры", Объект.Ссылка);
	ОповеститьОбИзменении(КонтрагентПартнера);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПартнерыИКонтрагенты.ПроверитьКорректностьЗаполненияКонтрагента(ЭтаФорма, КонтрагентПартнера, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
    
	УстановитьЗаголовокКодаПоЕДРПОУ();
    
    Элементы.ДекорацияЗаполнитьПоЕГРПОУ.Видимость=Ложь;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаКаналПервичногоИнтересаПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаНаименованиеПриИзменении(ЭтаФорма,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПризнакПартнераПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаФлагПризнакПартнераПриИзменении(ЭтаФорма, Элемент);
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	УстановитьДоступностьЗапретаОтгрузки();
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаКомментарииНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаБизнесРегионПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Если ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		ОбособленноеПодразделение = Истина;
		
		Если ГоловнойКонтрагент = КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо." + ВидКонтрагента);
		ОбособленноеПодразделение = Ложь;
		
		Если ГоловнойКонтрагент <> КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Иначе
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	КонецЕсли;
	
    
	УстановитьЗаголовокКодаПоЕДРПОУ();
	
	УправлениеДоступностью();
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры


&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ОбработатьИзмененияГоловногоКонтрагента();
	ОтключитьОтметкуНезаполненного();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(Объект.Наименование, Объект.НаименованиеПолное);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресКонтрагентаПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ЮридическийАдресКонтрагентаПриИзменении(Элемент, ЭтотОбъект);
	
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ЮридическийАдресКонтрагентаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ЮридическийАдресКонтрагентаОчистка(ЭтотОбъект, Элементы, СтандартнаяОбработка);
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ЮридическийАдресКонтрагентаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Назначение",ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки"));
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ШаблонЭтикетки = Неопределено;

	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",ПараметрыФормы,,,,, Новый ОписаниеОповещения("ШаблонЭтикеткиНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ШаблонЭтикетки = Результат;
    Если ШаблонЭтикетки=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Объект.ШаблонЭтикетки =  ШаблонЭтикетки;

КонецПроцедуры

&НаКлиенте
Процедура ИННПлательщикаНДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Перем ТекстСообщения;
	ЭтоЮрЛицо = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ ЮрФизЛицо =ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(Текст) И
		НЕ РегламентированныеДанныеКлиентСервер.ИННПлательщикаНДССоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,"Объект.ИННПлательщикаНДС",,);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСвидетельстваПлательщикаНДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Перем ТекстСообщения;
	ЭтоЮрЛицо = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(Текст) И
		НЕ РегламентированныеДанныеКлиентСервер.НомерСвидетельстваПлательщикаНДССоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,"Объект.НомерСвидетельстваПлательщикаНДС",,);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоЕДРПОУОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Перем ТекстСообщения;
	ЭтоЮрЛицо = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(Текст) И
		НЕ РегламентированныеДанныеКлиентСервер.КодПоЕДРПОУСоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,"Объект.КодПоЕДРПОУ",,);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикНДСПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьГоловногоКонрагента(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Контрагент", КонтрагентПартнера);
	ПараметрыЗаполнения.Вставить("ИННПлательщикаНДС",        ИННПлательщикаНДС);
	ПараметрыЗаполнения.Вставить("Партнер",    Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("ИспользоватьПартнеровКакКонтрагентов", Истина);

	Оповещение = Новый ОписаниеОповещения("ЗаполнитьГоловногоКонтрагентаЗавершение", ЭтотОбъект);
	ПартнерыИКонтрагентыКлиент.ЗаполнитьГоловногоКонтрагента(ЭтотОбъект, ПараметрыЗаполнения, Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузки(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Данные еще не записаны.
        |Переход к запрету отгрузки возможен только после записи данных.
        |Данные будут записаны.'
        |;uk='Дані ще не записані.
        |Перехід до заборони відвантаження можливий тільки після запису даних.
        |Дані будуть записані.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры


// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	Возврат;

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИНН.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННФизЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЮрФизЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ФизЛицо);
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИНН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УправлениеДоступностью()
	
	ПартнерыИКонтрагенты.УправлениеЭлементамиЮридическихРеквизитов(
		ЭтотОбъект, ЮрФизЛицо, ОбособленноеПодразделение, ПлательщикНДС, ГоловнойКонтрагент, КонтрагентПартнера);
	
	
	
	СамообслуживаниеКлиентСервер.УправлениеСтраницамиЮрФизЛицоПриИзменении(ЭтотОбъект, ЮрФизЛицо);
	
	
	// Страна регистрация видна только в том случае, когда контрагент не является резидентом Украины. 
	// В противном случае - и для физ лиц и для ФОП и для юр лиц страна регистрации всегда Украина.
	Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.ТекущаяСтраница = 
		?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент,
		Элементы.ГруппаСтраницаИностраннойРегистрации, Элементы.ГруппаСтраницаУкраинскогоКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрагентаПартнера()
	
	СоздатьКонтрагента = КонтрагентПартнера.Пустая();
	
	Если СоздатьКонтрагента Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе
		КонтрагентОбъект = КонтрагентПартнера.ПолучитьОбъект();
	КонецЕсли;
	
	КонтрагентОбъект.Наименование = Объект.Наименование;
	КонтрагентОбъект.НаименованиеПолное = Объект.НаименованиеПолное;
	КонтрагентОбъект.Партнер = Объект.Ссылка;
	КонтрагентОбъект.ЮрФизЛицо = ЮрФизЛицо;
	КонтрагентОбъект.КодПоЕДРПОУ = КодПоЕДРПОУ;
	КонтрагентОбъект.ПлательщикНДС = ПлательщикНДС;
	КонтрагентОбъект.ИННПлательщикаНДС = ИННПлательщикаНДС;
	КонтрагентОбъект.НомерСвидетельстваПлательщикаНДС = НомерСвидетельстваПлательщикаНДС;
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	КонтрагентОбъект.ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН = ДополнятьНаименованиеАдресДаннымиГоловногоКонтрагентаВНН;
	КонтрагентОбъект.КодФилиала = КодФилиала;
	
	КонтрагентОбъект.ИспользоватьЭДО1СЗвит = ИспользоватьЭДО1СЗвит;
	
	КонтрагентОбъект.ОбособленноеПодразделение = ОбособленноеПодразделение;
	КонтрагентОбъект.СтранаРегистрации = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, СтранаРегистрации, Справочники.СтраныМира.Украина);
	КонтрагентОбъект.РегистрационныйНомер = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, РегистрационныйНомер, "");
	
	Если Не ЗначениеЗаполнено(ГоловнойКонтрагент) И Не ОбособленноеПодразделение Тогда
		
		Если СоздатьКонтрагента Тогда
			НоваяСсылка = Справочники.Контрагенты.ПолучитьСсылку();
			КонтрагентОбъект.УстановитьСсылкуНового(НоваяСсылка);
			ГоловнойКонтрагент = КонтрагентОбъект.ПолучитьСсылкуНового();
		Иначе
			ГоловнойКонтрагент = КонтрагентПартнера;
		КонецЕсли;
		
	КонецЕсли;
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактнуюИнформациюКонтрагентаПартнера(КонтрагентОбъект, ЭтотОбъект, Объект.КонтактнаяИнформация);
	
	Если Не (СоздатьКонтрагента Или ОбособленноеПодразделение) И ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ПартнерыИКонтрагенты.ИзменитьИННПлательщикаНДСПодчиненныхКонтрагентов(КонтрагентПартнера, ИННПлательщикаНДС);
    КонецЕсли;
    
    КонтрагентОбъект.ДополнительнаяИнформация = ДополнительнаяИнформация;
	
	КонтрагентОбъект.Записать();
	
	КонтрагентПартнера = КонтрагентОбъект.Ссылка;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииИЧтенииНаСервере()
	
	
	Если ОбособленноеПодразделение Тогда
		ВидКонтрагента = "ОбособленноеПодразделение";
	ИначеЕсли ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ВидКонтрагента = ОбщегоНазначения.ИмяЗначенияПеречисления(ЮрФизЛицо);
	КонецЕсли;
	
	УправлениеДоступностью();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЗапретаОтгрузки()
	
	Если ИспользоватьЗапретОтгрузки И Объект.Клиент Тогда
		Если ОтгрузкаЗапрещена Тогда
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
		Иначе
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьЗапретОтгрузки(Партнер, ОтгрузкаЗапрещена)
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере_КонтактнаяИнформацияКонтрагента()
	
	ПартнерыИКонтрагенты.ПриСозданииНаСервере_КонтактнаяИнформацияКонтрагентаПартнера(ЭтотОбъект);
	
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма)

	Форма.Элементы.ЮридическийАдресКонтрагентаКомментарий.Видимость = НЕ ПустаяСтрока(Форма.ЮридическийАдресКонтрагентаКомментарий);

КонецПроцедуры 

&НаСервере
Процедура УстановитьЗаголовок()

	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = НСтр("ru='Контрагент (создание)';uk='Контрагент (створення)'");
		
	Иначе
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (Контрагент)';uk='%1 (Контрагент)'"), Объект.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбработатьИзмененияГоловногоКонтрагента()
	
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		ИННПлательщикаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент, "ИННПлательщикаНДС");
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ГоловнойКонтрагент = ВыбранноеЗначение;
		Модифицированность = Истина;
		ОбработатьИзмененияГоловногоКонтрагента();
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьЗаголовокКодаПоЕДРПОУ()
    
    
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") ИЛИ ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		ЗаголовокКода  = НСтр("ru='Код по ЕДРПОУ';uk='Код за ЄДРПОУ'");
		ПодсказкаВвода = НСтр("ru='Введите код ЕДРПОУ 8 цифр';uk='Введіть код ЄДРПОУ 8 цифр'");
	Иначе
		ЗаголовокКода = НСтр("ru='Код по ДРФО';uk='Код за ДРФО'");
        ПодсказкаВвода = НСтр("ru='Введите код ДРФО 10 цифр';uk='Введіть код ДРФО 10 цифр'")
                         + Символы.ПС
                         + НСтр("ru='или серию и номер паспорта старого образца - 2 буквы и 6 цифр, без пробела между серией и номером';uk='або серію та номер паспорта старого зразка - 2 літери і 6 цифр, без пробілу між серією та номером'") 
                         + Символы.ПС
                         + НСтр("ru='или номер паспорта нового образца - 9 цифр.';uk='або номер паспорта нового зразка - 9 цифр.'") 
                         + Символы.ПС
                         ;
	КонецЕсли;
		
	Элементы.КодПоЕДРПОУ.Заголовок      = ЗаголовокКода;
	Элементы.КодПоЕДРПОУ.ПодсказкаВвода = ПодсказкаВвода;
	
КонецПроцедуры

#Область Пактум

&НаКлиенте
Процедура ЗаполнитьПоЕГРПОУ(Команда)
    
	Если Не Пактум_Сервер.Пактум_Права() Тогда
		Оповестить("Пактум.СозданиеКарточки.Завершено");
		Возврат;
    КонецЕсли;
    
    Если НЕ Пактум_Сервер.НастройкиПодключенияКСервисуПактумЗаданы() Тогда
        Оповестить("Пактум.СозданиеКарточки.Завершено");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не заданы настройки подключения к сервису Пактум.Контрагент!';uk='Не задані настройки підключення до сервісу Пактум.Контрагент!'")
        );
        Возврат;
    КонецЕсли; 
    
	пЕДРПОУ = СокрЛП(КодПоЕДРПОУ);
	Если пЕДРПОУ = "" Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
            НСтр("ru='Не заполнен код ЕГРПОУ';uk='Не заповнено код ЄДРПОУ'"),
            ,
            "КодПоЕДРПОУ"
        );        
		Оповестить("Пактум.СозданиеКарточки.Завершено");
		Возврат;
    КонецЕсли;
    
	СуществующиеКонтрагенты = Пактум_Сервер.ПолучитьКонтрагента(пЕДРПОУ);
	Если СуществующиеКонтрагенты.Кво > 0 Тогда
        ТекстВопроса = НСтр("ru='Контрагент(ы) с таким же ЕГРПОУ найден(ы) в базе. Открыть существующие карточки или заполнить данные в текущей карточке?';uk= 'Контрагента знайдено в базі. Відкрити існуючі картки чи заповнити дані відкритої картки?'");
        спКнопки=Новый СписокЗначений;
        спКнопки.Добавить(НСтр("ru='Открыть';uk='Відкрити'"));
        спКнопки.Добавить(НСтр("ru='Заполнить';uk='Заповнити'"));
        спКнопки.Добавить(НСтр("ru='Отменить';uk= 'Відмінити'"));
        ПоказатьВопрос(Новый ОписаниеОповещения("ВопросНаОткрытиеКарточки", ЭтотОбъект, СуществующиеКонтрагенты), ТекстВопроса, спКнопки);
	Иначе
		ВыполнитьЗаполнениеКарточки();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВопросНаОткрытиеКарточки(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Ответ  = РезультатВопроса;
    Если Ответ = НСтр("ru='Открыть';uk='Відкрити'") Тогда
        Для Каждого Эл Из ДополнительныеПараметры.спКонтрагенты Цикл
    		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", Новый Структура("Ключ", Эл.Значение));
		КонецЦикла;
	ИначеЕсли Ответ = НСтр("ru='Заполнить';uk='Заповнити'") Тогда
		ВыполнитьЗаполнениеКарточки();
	Иначе
		Возврат;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеКарточки()
    
    пЕДРПОУ = СокрЛП(КодПоЕДРПОУ);
    
	СтруПараметры = Пактум_Сервер.ПроверкаКорректностиЕДРПОУ_Пактум(пЕДРПОУ);
	Если Не СтруПараметры.КорректностьЕДРПОУ_Значение Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
            СтруПараметры.КорректностьЕДРПОУ_ТекстОшибки,
            ,
            "КодПоЕДРПОУ"
        );        
		Оповестить("Пактум.СозданиеКарточки.Завершено");
		Возврат;
    КонецЕсли;
    Пактум_Токен = ?(СтруПараметры.Токен=Неопределено, "", СтруПараметры.Токен);
    
    
    РезультатЗапуска = Пактум_Сервер.ФоновоеЗаданиеДанныеПартнераПоКодПоЕДРПОУЗапустить(
        пЕДРПОУ,
        Пактум_Токен,
        УникальныйИдентификатор,
        ФоновоеЗаданиеИдентификатор
    );
    
    ФоновоеЗаданиеИдентификатор  = РезультатЗапуска.ИдентификаторЗадания;
    ФоновоеЗаданиеАдресХранилища = РезультатЗапуска.АдресХранилища;
    
    Если РезультатЗапуска.ЗаданиеЗапущено Тогда
        Пактум_КоличествоПроверок_ФоновогоЗадания = 0;
        ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
        ПараметрыОбработчика.ТекущийИнтервал = 10;
        ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 10, Истина);
        Пактум_Клиент.ЗаблокироватьФорму(ЭтаФорма);
    Иначе
        ВыполнитьЗаполнениеРеквизитовПоЕДРПОУ(РезультатЗапуска.РеквизитыКонтрагента);
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоЕДРПОУ(РеквизитыКонтрагента, ЗаполнятьЕДРПОУ = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		Пактум_Клиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоЕДРПОУ(РеквизитыКонтрагента.ОписаниеОшибки);
        Возврат;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеПредупреждения) Тогда
		Пактум_Клиент.ПоказатьПользователюПредупреждениеПолученияРеквизитовКонтрагентаПоЕДРПОУ(РеквизитыКонтрагента.ОписаниеПредупреждения);
    КонецЕсли;    
        
    РезультатСравнения = Пактум_Клиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(
        РеквизитыКонтрагента,
        ДанныеОбъектаДляСравнения(),
        ЗаполнятьЕДРПОУ
    );
    
    Если РезультатСравнения.ЕстьИзменения Тогда
        
        Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
            
            ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения(
                "ЗаполнениеРеквизитовКонтрагентаПоЕДРПОУЗавершение",
                ЭтотОбъект,
                Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента)
            );
            ТекстВопроса = НСтр("ru='Перезаполнить реквизиты контрагента на основании данных сервиса Пактум.Контрагент?';uk='Перезаполнить реквізити контрагента на підставі даних сервісу Пактум.Контрагент?'");
            ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
        Иначе
            
            ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
            
        КонецЕсли;
        
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоЕДРПОУЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)
    
	Объект.Наименование = РеквизитыКонтрагента.Наименование;
    Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеПолное;
    
    Если РеквизитыКонтрагента.Свойство("КодПоЕДРПОУ") Тогда
		КодПоЕДРПОУ = РеквизитыКонтрагента.КодПоЕДРПОУ;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ИННПлательщикаНДС") Тогда
		ИННПлательщикаНДС = РеквизитыКонтрагента.ИННПлательщикаНДС;
    КонецЕсли;
    
	Если РеквизитыКонтрагента.Свойство("НомерСвидетельстваПлательщикаНДС") Тогда
		НомерСвидетельстваПлательщикаНДС = РеквизитыКонтрагента.НомерСвидетельстваПлательщикаНДС;
	КонецЕсли;
    
	Если РеквизитыКонтрагента.Свойство("ПлательщикНДС") Тогда
		ПлательщикНДС = РеквизитыКонтрагента.ПлательщикНДС;
	КонецЕсли;
    
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(
            ЭтотОбъект,
		    ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		    РеквизитыКонтрагента.Телефон
        );
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("АдресЭП") Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(
            ЭтотОбъект,
		    ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера"),
		    РеквизитыКонтрагента.АдресЭП
        );
    КонецЕсли;
    
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
		ЮридическийАдресКонтрагентаПредставление = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
    КонецЕсли;
    
    Если РеквизитыКонтрагента.Свойство("ДополнительнаяИнформация") И РеквизитыКонтрагента.ДополнительнаяИнформация <> Неопределено Тогда
        ДополнительнаяИнформация = ДополнительнаяИнформация + РеквизитыКонтрагента.ДополнительнаяИнформация;
    КонецЕсли;
      
    
	Модифицированность = Истина;
    
    УправлениеДоступностью();

КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = Пактум_Сервер.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ВыполнитьЗаполнениеРеквизитовПоЕДРПОУ(РезультатВыполнения.РеквизитыКонтрагента);
        Пактум_Клиент.РазблокироватьФорму(ЭтаФорма);
    Иначе
        Пактум_КоличествоПроверок_ФоновогоЗадания = Пактум_КоличествоПроверок_ФоновогоЗадания + 1;
		Если Пактум_КоличествоПроверок_ФоновогоЗадания >= 21 Тогда 	//3 мин + 30 сек
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
    		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    			    НСтр("ru='Заполнить карточку контрагента с ЕДРПОУ %1 не удалось.';uk='Заповнити картку контрагента за ЄДРПОУ %1 не вдалося.'"),
    			    КодПоЕДРПОУ
                ),
                , 
                "КодПоЕДРПОУ"
            );
			Пактум_Клиент.РазблокироватьФорму(ЭтаФорма);
		Иначе
    		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
    		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = Пактум_Клиент.ИнициироватьСтруктураДанныхДляСравнения();
    
    ДанныеДляСравнения.Наименование                     = Объект.Наименование;
    ДанныеДляСравнения.НаименованиеПолное               = Объект.НаименованиеПолное;
	ДанныеДляСравнения.КодПоЕДРПОУ                      = КодПоЕДРПОУ;
    ДанныеДляСравнения.ИННПлательщикаНДС                = ИННПлательщикаНДС;
    ДанныеДляСравнения.НомерСвидетельстваПлательщикаНДС = НомерСвидетельстваПлательщикаНДС;
    ДанныеДляСравнения.ПлательщикНДС                    = ПлательщикНДС;
    
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	    ЭтотОбъект,
	    ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера")
    );
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
    
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
        ЭтотОбъект,
	    ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера")
    );
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.АдресЭП = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
    
    ДанныеДляСравнения.ЮридическийАдрес                  = ЮридическийАдресКонтрагентаПредставление;
    
    ДанныеДляСравнения.ДополнительнаяИнформация          = ДополнительнаяИнформация;
	
	Возврат ДанныеДляСравнения;

КонецФункции 

#КонецОбласти


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	// 0 - Нет на сервере вообще;
	// 1 - Есть на сервере, но не опубликована;
	// 2 - Есть на сервере, опубликована, можно повторно публиковать;
	// 3 - Есть на сервере, опубликована, нельзя повторно публиковать;
	// 4 - Все остальное.
	ЭтаФорма.СтатусНовостиНаСервере = 0; // Параметры.СтатусНовостиНаСервере.
	ЭтаФорма.БезАвторизации         = Параметры.БезАвторизации;
	ЭтаФорма.РазрешенныеДляРедактированияЛентыНовостей.ЗагрузитьЗначения(Параметры.РазрешенныеДляРедактированияЛентыНовостей.ВыгрузитьЗначения());
	// Для пользователя без разделителей не заполняются параметры сеанса, поэтому будет ошибка
	//  в "ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя()".
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если (ОбщегоНазначенияПовтИсп.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()) Тогда
		ЭтаФорма.ПараметрыСеанса_ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		ЭтаФорма.ПараметрыСеанса_ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;

	ТекстСообщения = НСтр("ru='(все время указано для часового пояса %ЧасовойПояс()% (%ПредставлениеЧасовогоПояса(ЧасовойПояс())%))';uk='(весь час зазначений для часового поясу %ЧасовойПояс()% (%ПредставлениеЧасовогоПояса(ЧасовойПояс())%))'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЧасовойПояс()%", ЧасовойПояс());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеЧасовогоПояса(ЧасовойПояс())%", ПредставлениеЧасовогоПояса(ЧасовойПояс()));
	ЭтаФорма.ЧасовойПояс = ТекстСообщения;

	ЭтаФорма.НеобходимоПересчитатьСписокДействий = Истина;

	Если Параметры.Ключ.Пустая() Тогда
		// Сгенерировать новый уникальный идентификатор.
		Объект.УИННовости = СокрЛП(Новый УникальныйИдентификатор);
		// Другие поля.
		Объект.ДатаПубликации = ТекущаяДата(); // По местному времени.
		ПреобразоватьДаты = Ложь;
		ЭтаФорма.СтатусНовостиНаСервере = 0; // нет на сервере.

		Если Параметры.Копирование = Истина Тогда

			// Скопировать свойства и табличные части.
			ЗаполнитьЗначенияСвойств(
				ЭтаФорма.Объект,
				Параметры.ЗначениеКопирования,
				,
				"УИННовости, Действия, ПараметрыДействий, ПривязкаКМетаданным, БинарныеДанные");
			ЭтаФорма.Объект.Действия.Загрузить(Параметры.ЗначениеКопирования.Действия.Выгрузить());
			ЭтаФорма.Объект.ПараметрыДействий.Загрузить(Параметры.ЗначениеКопирования.ПараметрыДействий.Выгрузить());
			ЭтаФорма.Объект.ПривязкаКМетаданным.Загрузить(Параметры.ЗначениеКопирования.ПривязкаКМетаданным.Выгрузить());
			ЭтаФорма.Объект.БинарныеДанные.Загрузить(Параметры.ЗначениеКопирования.БинарныеДанные.Выгрузить());

			// Категории также копировать.
			НаборЗаписей = РегистрыСведений.КатегорииНовостейПростые.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(Параметры.ЗначениеКопирования);
			НаборЗаписей.Прочитать();
			ЭтаФорма.КатегорииПростые.Загрузить(НаборЗаписей.Выгрузить());

			// Интервалы версий тоже копировать.
			НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Новость"].Установить(Параметры.ЗначениеКопирования);
			НаборЗаписей.Прочитать();
			ЭтаФорма.КатегорииИнтервалыВерсий.Загрузить(НаборЗаписей.Выгрузить());

			// Заполнить добавленные колонки.
			ЗаполнитьДобавленныеКолонкиТаблиц(); // При срабатывании из события ПриЧтенииНаСервере(ТекущийОбъект) реквизиты КатегорииПростые и КатегорииИнтервалыВерсий еще не заполнены.

		КонецЕсли;

	Иначе

		// Заполнить категории, простые.
		НаборЗаписей = РегистрыСведений.КатегорииНовостейПростые.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["Новость"].Установить(ЭтаФорма.Объект.Ссылка);
		НаборЗаписей.Прочитать();
		ЭтаФорма.КатегорииПростые.Загрузить(НаборЗаписей.Выгрузить());

		// Заполнить категории, интервалы версий.
		НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["Новость"].Установить(ЭтаФорма.Объект.Ссылка);
		НаборЗаписей.Прочитать();
		ЭтаФорма.КатегорииИнтервалыВерсий.Загрузить(НаборЗаписей.Выгрузить());

		// Заполнить добавленные колонки.
		ЗаполнитьДобавленныеКолонкиТаблиц(); // При срабатывании из события ПриЧтенииНаСервере(ТекущийОбъект) реквизиты КатегорииПростые и КатегорииИнтервалыВерсий еще не заполнены.

	КонецЕсли;

	// Преобразовать все даты в GMT.
	// Даты хранятся в GMT, но редактируются по местному времени.
	ЭтаФорма.ДатаПубликацииМестная     = ?(Объект.ДатаПубликации     = '00010101', '00010101', МестноеВремя(Объект.ДатаПубликации, ЧасовойПояс()));
	ЭтаФорма.ДатаЗавершенияМестная     = ?(Объект.ДатаЗавершения     = '00010101', '00010101', МестноеВремя(Объект.ДатаЗавершения, ЧасовойПояс()));
	ЭтаФорма.ДатаСбросаВажностиМестная = ?(Объект.ДатаСбросаВажности = '00010101', '00010101', МестноеВремя(Объект.ДатаСбросаВажности, ЧасовойПояс()));
	Для каждого ТекущаяСтрока Из Объект.ПривязкаКМетаданным Цикл
		ТекущаяСтрока.ДатаСбросаВажностиМестная =
			?(ТекущаяСтрока.ДатаСбросаВажности = '00010101',
				'00010101',
				МестноеВремя(ТекущаяСтрока.ДатаСбросаВажности, ЧасовойПояс()));
	КонецЦикла;

	Если Параметры.Свойство("ТаблицаМетаданных")
			И ТипЗнч(Параметры.ТаблицаМетаданных) = Тип("ДанныеФормыКоллекция") Тогда
		ЭтаФорма.ТаблицаМетаданных.Загрузить(Параметры.ТаблицаМетаданных.Выгрузить());
	Иначе
		ЭтаФорма.ТаблицаМетаданных.Загрузить(ОбработкаНовостейПовтИсп.ПолучитьТаблицуМетаданных());
	КонецЕсли;

	ЭтаФорма.ЭтоРедактированиеФорматированногоДокумента = Ложь;

	ЭтаФорма.АвтоОтборСтрокПараметровДействий = Ложь;
	Элементы.ПараметрыДействийКомандаИзменитьАвтоОтборСтрокПараметровДействий.Пометка = ЭтаФорма.АвтоОтборСтрокПараметровДействий;

	ЭтаФорма.ЦветаСтиля_ЦветОсобогоТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ЭтаФорма.ЦветаСтиля_ЦветМикротекста   = ЦветаСтиля.ЦветМикротекста;

	ЭтаФорма.КатегорияПродукт         = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("Product");
	ЭтаФорма.КатегорияВерсияПродукта  = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion");
	ЭтаФорма.КатегорияВерсияПлатформы = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("PlatformVersion");

	Если (ЭтаФорма.БезАвторизации = Истина)
			И (ЭтаФорма.РазрешенныеДляРедактированияЛентыНовостей.НайтиПоЗначению(Объект.ЛентаНовостей) = Неопределено)
			И (НЕ Параметры.Ключ.Пустая()) Тогда // Нельзя редактировать новости из нелокальной ленты новостей, когда не авторизован в новостном центре.
		Элементы.ДекорацияВозможностьИзмененияНовости.Заголовок =
			НСтр("ru='Для редактирования этой новости необходимо авторизоваться в новостном центре.';uk='Для редагування цієї новини необхідно авторизуватися на новинному центрі.'");
		Элементы.ДекорацияВозможностьИзмененияНовости.Видимость = Истина;
		ЭтаФорма.ТолькоПросмотр = Истина;
	ИначеЕсли (ЭтаФорма.БезАвторизации = Ложь)
				И (ЭтаФорма.СтатусНовостиНаСервере = 2) Тогда // Есть на сервере, опубликована, можно повторно публиковать.
		Элементы.ДекорацияВозможностьИзмененияНовости.Заголовок =
			НСтр("ru='Новость была успешно опубликована. Чтобы изменить ее, необходимо вначале отменить публикацию.';uk='Новина була успішно опублікована. Щоб змінити її, необхідно спочатку скасувати публікацію.'");
		Элементы.ДекорацияВозможностьИзмененияНовости.Видимость = Истина;
		ЭтаФорма.ТолькоПросмотр = Истина;
	ИначеЕсли (ЭтаФорма.БезАвторизации = Ложь)
			И (ЭтаФорма.СтатусНовостиНаСервере = 3) Тогда // Есть на сервере, опубликована, нельзя повторно публиковать.
		Элементы.ДекорацияВозможностьИзмененияНовости.Заголовок =
			НСтр("ru='Новость была успешно опубликована. Так как новость была опубликована в каналах, по которым запрещена перепубликация (емейл, смс), то изменить ее уже нельзя, но можно скопировать эту новость и править уже ее.';uk='Новина була успішно опублікована. Так як новина була опублікована в каналах, по яких заборонена перепублікація (емейл, смс), то змінити її вже не можна, але можна скопіювати цю новину і правити вже її.'");
		Элементы.ДекорацияВозможностьИзмененияНовости.Видимость = Истина;
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;

	Если ЭтаФорма.БезАвторизации = Истина Тогда

		// Получить список локальных лент новостей, в которых можно редактировать новости:
		// - Для пользователя с ролями АдминистраторСистемы и ПолныеПрава можно редактировать все ленты новостей,
		//    у которых ЗагруженоССервера = Ложь и ЛокальнаяЛентаНовостей = Истина.
		// - Для пользователей с ролью РедактированиеНовостей можно редактировать только
		//    разрешенные ему ленты новостей (из регистра сведений РазрешенныеДляРедактированияЛентыНовостей).
		МассивРазрешенныхДляРедактированияЛентНовостей = Новый Массив;
		Если ЭтаФорма.РазрешенныеДляРедактированияЛентыНовостей.Количество() = 0 Тогда
			ВсеРедакторыНовостей = ОбработкаНовостейПовтИсп.ПолучитьСписокРедакторовНовостей(); // Массив структур с ключами: Пользователь, ПользовательПредставление, ПолныеПрава.
			ТекущийПользователь_Редактор = Неопределено;
			Для Каждого ТекущийРедактор Из ВсеРедакторыНовостей Цикл
				Если ТекущийРедактор.Пользователь = ЭтаФорма.ПараметрыСеанса_ТекущийПользователь Тогда
					ТекущийПользователь_Редактор = Новый Структура("Пользователь, ПолныеПрава",
						ТекущийРедактор.Пользователь,
						ТекущийРедактор.ПолныеПрава);
				КонецЕсли;
			КонецЦикла;
			Если ТипЗнч(ТекущийПользователь_Редактор) = ТипСтруктура Тогда
				Если ТекущийПользователь_Редактор.ПолныеПрава = Истина Тогда // Можно выбрать все локальные ленты новостей.
					Запрос = Новый Запрос;
					Запрос.Текст = "
						|ВЫБРАТЬ
						|	Спр.Ссылка КАК ЛентаНовостей
						|ИЗ
						|	Справочник.ЛентыНовостей КАК Спр
						|ГДЕ
						|	Спр.ЗагруженоССервера = ЛОЖЬ
						|	И Спр.ЛокальнаяЛентаНовостей = ИСТИНА
						|";
					Результат = Запрос.Выполнить(); // Справочник.Новости.ФормаСпискаДляРедактирования.ПриСозданииНаСервере(), ПолныеПрава.
					Если НЕ Результат.Пустой() Тогда
						МассивРазрешенныхДляРедактированияЛентНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("ЛентаНовостей");
					КонецЕсли;
				Иначе // Редактор, надо выбрать разрешенные ленты новостей.
					Запрос = Новый Запрос;
					Запрос.Текст = "
						|ВЫБРАТЬ
						|	Рег.ЛентаНовостей КАК ЛентаНовостей
						|ИЗ
						|	РегистрСведений.РазрешенныеДляРедактированияЛентыНовостей КАК Рег
						|ГДЕ
						|	Рег.Пользователь = &ТекущийПользователь
						|	И Рег.ЛентаНовостей.ЗагруженоССервера = ЛОЖЬ
						|	И Рег.ЛентаНовостей.ЛокальнаяЛентаНовостей = ИСТИНА
						|";
					Запрос.УстановитьПараметр("ТекущийПользователь", ЭтаФорма.ПараметрыСеанса_ТекущийПользователь);
					Результат = Запрос.Выполнить(); // Справочник.Новости.ФормаСпискаДляРедактирования.ПриСозданииНаСервере(), РольРедактированиеНовостей.
					Если НЕ Результат.Пустой() Тогда
						МассивРазрешенныхДляРедактированияЛентНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("ЛентаНовостей");
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Нет прав на редактирование.
				ТекстСообщения = НСтр("ru='Нет прав на редактирование новостей.
                    |Должны быть включены роли АдминистраторСистемы и ПолныеПрава (тогда можно редактировать все локальные ленты новостей)
                    |или роль РедактированиеНовостей (вместе с настройкой лент новостей, в которых можно редактировать новости).'
                    |;uk='Немає прав на редагування новин.
                    |Повинні бути включені ролі АдминистраторСистемы і ПолныеПрава (тоді можна редагувати всі локальні стрічки новин)
                    |або роль РедактированиеНовостей (разом з настройкою стрічок новин, в яких можна редагувати новини).'");
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения;
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				ЭтаФорма.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			МассивРазрешенныхДляРедактированияЛентНовостей = ЭтаФорма.РазрешенныеДляРедактированияЛентыНовостей.ВыгрузитьЗначения();
		КонецЕсли;

		// Установить параметры выбора лент новостей - давать выбирать только разрешенные для редактирования.
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивРазрешенныхДляРедактированияЛентНовостей));
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.ЛентаНовостей.ПараметрыВыбора = НовыеПараметры;
		Элементы.ЛентаНовостей_Публикация.ПараметрыВыбора = НовыеПараметры;
		// Если зашли без авторизации и нет разрешенных для редактирования лент новостей, то не давать редактировать.
		Если МассивРазрешенныхДляРедактированияЛентНовостей.Количество() = 0 Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
			ТекстСообщения = НСтр("ru='Не найдено ни одной разрешенной для редактирования ленты новостей.
                |Невозможно отредактировать новость.'
                |;uk='Не знайдено жодної дозволеної для редагування стрічки новин.
                |Неможливо відредагувати новину.'");
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ТекстСообщения;
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьДоступныеКатегорииДляЛентыНовостейСервер();

	// Значения предопределенных категорий.
	ЭтаФорма.Продукт         = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"); // Только имя продукта.
	ЭтаФорма.ВерсияПлатформы = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы.
	ЭтаФорма.ВерсияПродукта  = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"); // Только полная версия продукта.

	// Получить список категорий с типами "Дата" и "Число", к которым применимы произвольные условия сравнения, а не только "=".
	лкСписокКатегорийТипаЧислоИлиДата = ОбработкаНовостейПовтИсп.ПолучитьСписокКатегорийСПроизвольнымиУсловиямиСравнения();
	ЭтаФорма.КатегорииСПроизвольнымиУсловиями.ЗагрузитьЗначения(лкСписокКатегорийТипаЧислоИлиДата.ВыгрузитьЗначения());

#Область ФорматированиеHTML

	// Создание команд и меню форматирования.
	СоздатьКомандыФорматирования();
	СоздатьПодменюФорматирования(Элементы.ПодменюФорматирование_Для1С, "КП_Для1С_");
	СоздатьПодменюФорматирования(Элементы.КонтекстноеМенюФорматирование_Для1С, "КМ_Для1С_");
	СоздатьПодменюФорматирования(Элементы.ПодменюФорматирование_ДляВнешнихИсточников, "КП_ДляВИ_");
	СоздатьПодменюФорматирования(Элементы.КонтекстноеМенюФорматирование_ДляВнешнихИсточников, "КМ_ДляВИ_");

#КонецОбласти

#Область БуферОбмена

	МассивБуферовОбмена = Новый Массив;
	МассивБуферовОбмена.Добавить("КатегорииПростые");
	МассивБуферовОбмена.Добавить("КатегорииИнтервалыВерсий");
	МассивБуферовОбмена.Добавить("ПривязкаКМетаданным");
	МассивБуферовОбмена.Добавить("БинарныеДанные");
	МассивБуферовОбмена.Добавить("Действия");

	// Создать реквизиты для буфера обмена.
	СоздатьРеквизитыТекущегоБуфераОбмена(МассивБуферовОбмена);

	// Создание реквизитов, команд и меню буфера обмена.
	СоздатьКомандыБуфераОбмена(МассивБуферовОбмена); // Здесь же будут созданы и дополнительные реквизиты (СохраненныеБуферыОбмена_*).

	Для каждого ТекущийБуферОбмена Из МассивБуферовОбмена Цикл
		СоздатьПодменюБуфераОбмена(
			Элементы[ТекущийБуферОбмена + "ГруппаБуферОбмена"],
			ТекущийБуферОбмена);
	КонецЦикла;

#КонецОбласти

	УправлениеФормой(ЭтаФорма);

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

#Область БуферОбмена

	// Загрузить последний сохраненный буфер обмена, для этого оповестить открытые формы - какая-нибудь из них и выгрузит данные.
	Для каждого ТекущийБуферОбменаЭлементСписка Из ЭтаФорма.СписокБуферовОбмена Цикл
		Оповестить(
			"БуферОбмена: получить данные текущего буфера обмена",
			Ложь,
			Новый Структура("Ссылка, КлючОбъекта",
				Объект.Ссылка,
				"Документы.Новости." + ТекущийБуферОбменаЭлементСписка.Значение));
	КонецЦикла;

#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ ПроверитьЗаполнение() Тогда // Вызвать явно.
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЭтаФорма.ДатаПубликацииМестная = ТекущаяДата(); // По местному времени.

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Заполнить объект:
	// БинарныеДанные (ХранилищеЗначения) надо получить из строк;
	// Объект.БинарныеДанные - тут хранятся только строки;
	// ТекущийОбъект.БинарныеДанные - тут хранятся ХранилищеЗначений.
	ТекущийОбъект.БинарныеДанные.Загрузить(Объект.БинарныеДанные.Выгрузить());
	Для каждого ТекущаяСтрока Из Объект.БинарныеДанные Цикл
		ТекущийОбъект.БинарныеДанные[Объект.БинарныеДанные.Индекс(ТекущаяСтрока)].Данные = 
			Новый ХранилищеЗначения(Base64Значение(ТекущаяСтрока.ДанныеСтрока64));
	КонецЦикла;

	// Преобразовать все даты в GMT.
	// Даты хранятся в GMT, но редактируются по местному времени.
	ТекущийОбъект.ДатаПубликации     = ?(ЭтаФорма.ДатаПубликацииМестная     = '00010101', '00010101', УниверсальноеВремя(ЭтаФорма.ДатаПубликацииМестная, ЧасовойПояс()));
	ТекущийОбъект.ДатаЗавершения     = ?(ЭтаФорма.ДатаЗавершенияМестная     = '00010101', '00010101', УниверсальноеВремя(ЭтаФорма.ДатаЗавершенияМестная, ЧасовойПояс()));
	ТекущийОбъект.ДатаСбросаВажности = ?(ЭтаФорма.ДатаСбросаВажностиМестная = '00010101', '00010101', УниверсальноеВремя(ЭтаФорма.ДатаСбросаВажностиМестная, ЧасовойПояс()));
	Если Объект.ПривязкаКМетаданным.Количество() = ТекущийОбъект.ПривязкаКМетаданным.Количество() Тогда
		Для С=0 По Объект.ПривязкаКМетаданным.Количество()-1 Цикл
			ТекущийОбъект.ПривязкаКМетаданным[С].ДатаСбросаВажности =
				?(Объект.ПривязкаКМетаданным[С].ДатаСбросаВажностиМестная = '00010101',
					'00010101',
					УниверсальноеВремя(Объект.ПривязкаКМетаданным[С].ДатаСбросаВажностиМестная, ЧасовойПояс()));
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Прочитать категории новостей, простые.
	ТаблицаКатегорий = ЭтаФорма.КатегорииПростые.Выгрузить();
	ТаблицаКатегорий.ЗаполнитьЗначения(ТекущийОбъект.Ссылка, "Новость");

	НаборЗаписей = РегистрыСведений.КатегорииНовостейПростые.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Новость.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаКатегорий);
	НаборЗаписей.Записать(Истина);

	// Прочитать категории новостей, интервалы версий.
	ТаблицаКатегорий = ЭтаФорма.КатегорииИнтервалыВерсий.Выгрузить();
	ТаблицаКатегорий.ЗаполнитьЗначения(ТекущийОбъект.Ссылка, "Новость");

	НаборЗаписей = РегистрыСведений.КатегорииНовостейИнтервалыВерсий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Новость.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаКатегорий);
	НаборЗаписей.Записать(Истина);

	ЭтаФорма.ЛентаНовостей_Локальная = Объект.ЛентаНовостей.ЛокальнаяЛентаНовостей;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Новости: после записи новости", , Объект.Ссылка);
	Если НЕ Объект.ЛентаНовостей.Пустая() Тогда
		Если ЭтаФорма.ЛентаНовостей_Локальная = ЛОЖЬ Тогда // Установлено в ПриЗаписиНаСервере.
			Оповестить("Новости: обновился список новостей для отправки на сервер новостного центра", , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
// Процедура должна совпадать с проверкой новости в базе новостей.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// Если будут ошибки, то для их показа надо отключить всякие автоотборы строк.
	ЭтаФорма.АвтоОтборСтрокПараметровДействий = Ложь;
	Элементы.ПараметрыДействийКомандаИзменитьАвтоОтборСтрокПараметровДействий.Пометка = ЭтаФорма.АвтоОтборСтрокПараметровДействий;
	Элементы.ПараметрыДействий.ОтборСтрок = Неопределено;

	// 1. Проверить "Действия":
	//  1.1. Не должно быть повторений УИНДействия;
	//  1.2. Правильный формат УИНДействия;
	//  1.3. Правильное значение строки "Действие";
	//  1.4. Все УИНДействия должны использоваться (проверить все гиперссылки в тексте новости).

	// Идентификатор должен начинаться только с "1C:" и состоять из английских букв и цифр.
	РазрешенныеСимволы = ОбработкаНовостейКлиентСервер.ПолучитьРазрешенныеДляИдентификацииСимволы();
	Для С=0 По Объект.Действия.Количество()-1 Цикл
		ТекущаяСтрока = Объект.Действия[С];
		// Повторения УИНДействия.
		НайденныеПовторения = Объект.Действия.НайтиСтроки(Новый Структура("УИНДействия", ТекущаяСтрока.УИНДействия));
		Если НайденныеПовторения.Количество() > 1 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Идентификатор действия %УИНДействия% повторяется %КоличествоПовторений%';uk='Ідентифікатор дії %УИНДействия% повторюється %КоличествоПовторений%'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%УИНДействия%", ТекущаяСтрока.УИНДействия);
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%КоличествоПовторений%", НайденныеПовторения.Количество());
			Сообщение.Поле  = "Объект.Действия[" + С + "].УИНДействия";
			Сообщение.Сообщить();
		КонецЕсли;
		// Правильность идентификатора.
		Если Лев(ВРег(ТекущаяСтрока.УИНДействия), "3") <> ВРег("1C:") Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Идентификатор действия должен начинаться с 1C:';uk='Ідентифікатор дії повинен починатися з 1C:'");
			Сообщение.Поле  = "Объект.Действия[" + С + "].УИНДействия";
			Сообщение.Сообщить();
		КонецЕсли;
		// В идентификаторе должны быть только английские буквы, цифры и знаки подчеркивания.
		Для ТекущийСимвол=4 По СтрДлина(ТекущаяСтрока.УИНДействия) Цикл
			Символ = Сред(ТекущаяСтрока.УИНДействия, ТекущийСимвол, 1);
			Если (Найти(РазрешенныеСимволы, Символ) = 0) Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Идентификатор действия должен начинаться с 1C: и состоять только из английских символов, цифр и знака подчеркивания';uk='Ідентифікатор дії повинен починатися з 1C: і складатися тільки з англійських символів, цифр і знака підкреслення'");
				Сообщение.Поле  = "Объект.Действия[" + С + "].УИНДействия";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЦикла;
		// Поле Действие не должно быть пустым и должно быть заполнено правильным значением.
		Если ПустаяСтрока(ТекущаяСтрока.Действие) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Пустое действие';uk='Пуста дія'");
			Сообщение.Поле  = "Объект.Действия[" + С + "].Действие";
			Сообщение.Сообщить();
		Иначе
			Если ТекущаяСтрока.Действие = "Переход по навигационной ссылке" Тогда
			ИначеЕсли ТекущаяСтрока.Действие = "Оповещение" Тогда
			ИначеЕсли ТекущаяСтрока.Действие = "Открытие раздела справки" Тогда
			ИначеЕсли ТекущаяСтрока.Действие = "Запуск процедуры с параметрами" Тогда
			ИначеЕсли ТекущаяСтрока.Действие = "Переход по интернет ссылке" Тогда
			ИначеЕсли ТекущаяСтрока.Действие = "Показать картинку" Тогда
			ИначеЕсли ТекущаяСтрока.Действие = "Открытие новости" Тогда
			Иначе
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неправильное действие. Выберите значение действия из списка';uk='Неправильня дія. Виберіть значення дії зі списку'");
				Сообщение.Поле  = "Объект.Действия[" + С + "].Действие";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		//  1.4. Все УИНДействия должны использоваться в тексте новости (проверить наличие всех гиперссылок в тексте новости).
		// С помощью ДОМ распарсить новость, найти все теги <a> с id начинающимся с "1C:" и проверить все уникальные идентификаторы ссылок.
		// ////? Проверка: все гиперссылки присутствуют в тексте новости, нет "сирот".
	КонецЦикла;

	// 2. Проверить "ПараметрыДействий":
	//  2.1. Не должно быть "сирот" - когда нет Действия с таким же УИН;
	//  2.2. Во всех строках должны быть корректные имена параметров;
	//  2.3. Параметры "Показать картинку" / "УИН" должны указывать на существующие бинарные данные.
	Для С=0 По Объект.ПараметрыДействий.Количество()-1 Цикл
		ТекущаяСтрока = Объект.ПараметрыДействий[С];
		НайденныеВладельцы = Объект.Действия.НайтиСтроки(
			Новый Структура("УИНДействия",
				ТекущаяСтрока.УИНДействия));
		Если НайденныеВладельцы.Количество() = 0 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Параметр не привязан ни к одному действию (должно быть хотя бы одно действие с таким же идентификатором [%УИНДействия%]). Рекомендуется удалить строку.';uk='Параметр не прив''язаний до жодного кроку повинно бути хоча б одну дію з таким же ідентифікатором [%УИНДействия%]). Рекомендується видалити рядок.'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%УИНДействия%", ТекущаяСтрока.УИНДействия);
			Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].УИНДействия";
			Сообщение.Сообщить();
		ИначеЕсли НайденныеВладельцы.Количество() > 1 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='У параметра должен быть только один владелец (одно действие)';uk='У параметра повинен бути тільки один власник (одна дія)'");
			Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].УИНДействия";
			Сообщение.Сообщить();
		Иначе // =1
			ТекущийВладелец = НайденныеВладельцы[0];
			Если ТекущийВладелец.Действие = "Переход по навигационной ссылке" Тогда
				Если ТекущаяСтрока.Параметр = "Навигационная ссылка" Тогда
				Иначе
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='У действия [%Действие%] параметр [%Параметр%] неправильный. Выберите значение из списка';uk='У дії [%Действие%] параметр [%Параметр%] неправильний. Виберіть зі списку'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Действие%", ТекущийВладелец.Действие);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Параметр%", ТекущаяСтрока.Параметр);
					Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].Параметр";
					Сообщение.Сообщить();
				КонецЕсли;
			ИначеЕсли ТекущийВладелец.Действие = "Оповещение" Тогда
				Если ТекущаяСтрока.Параметр = "ИмяСобытия" Тогда
				ИначеЕсли ТекущаяСтрока.Параметр = "Параметр" Тогда
				ИначеЕсли ТекущаяСтрока.Параметр = "Источник" Тогда
				Иначе
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='У действия [%Действие%] параметр [%Параметр%] неправильный. Выберите значение из списка';uk='У дії [%Действие%] параметр [%Параметр%] неправильний. Виберіть зі списку'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Действие%", ТекущийВладелец.Действие);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Параметр%", ТекущаяСтрока.Параметр);
					Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].Параметр";
					Сообщение.Сообщить();
				КонецЕсли;
			ИначеЕсли ТекущийВладелец.Действие = "Открытие раздела справки" Тогда
				Если ТекущаяСтрока.Параметр = "Раздел справки" Тогда
				Иначе
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='У действия [%Действие%] параметр [%Параметр%] неправильный. Выберите значение из списка';uk='У дії [%Действие%] параметр [%Параметр%] неправильний. Виберіть зі списку'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Действие%", ТекущийВладелец.Действие);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Параметр%", ТекущаяСтрока.Параметр);
					Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].Параметр";
					Сообщение.Сообщить();
				КонецЕсли;
			ИначеЕсли ТекущийВладелец.Действие = "Запуск процедуры с параметрами" Тогда
			ИначеЕсли ТекущийВладелец.Действие = "Переход по интернет ссылке" Тогда
				Если ТекущаяСтрока.Параметр = "URL" Тогда
				Иначе
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='У действия [%Действие%] параметр [%Параметр%] неправильный. Выберите значение из списка';uk='У дії [%Действие%] параметр [%Параметр%] неправильний. Виберіть зі списку'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Действие%", ТекущийВладелец.Действие);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Параметр%", ТекущаяСтрока.Параметр);
					Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].Параметр";
					Сообщение.Сообщить();
				КонецЕсли;
			ИначеЕсли ТекущийВладелец.Действие = "Показать картинку" Тогда
				Если ТекущаяСтрока.Параметр = "УИН" Тогда
					//  2.3. Параметры "Показать картинку" / "УИН" должны указывать на существующие бинарные данные.
					НайденныеБинарныеДанные = Объект.БинарныеДанные.НайтиСтроки(
						Новый Структура("УИН",
							ТекущаяСтрока.ЗначениеПараметра));
					Если НайденныеБинарныеДанные.Количество() = 0 Тогда
						Отказ = Истина;
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = НСтр("ru='У действия [%Действие%] параметр [%Параметр%] указывает на несуществующие бинарные данные. Выберите правильное значение бинарных данных.';uk='У дії [%Действие%] параметр [%Параметр%] вказує на неіснуючі бінарні дані. Виберіть правильне значення бінарних даних.'");
						Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Действие%", ТекущийВладелец.Действие);
						Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Параметр%", ТекущаяСтрока.Параметр);
						Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].Параметр";
						Сообщение.Сообщить();
					КонецЕсли;
				Иначе
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='У действия [%Действие%] параметр [%Параметр%] неправильный. Выберите значение из списка';uk='У дії [%Действие%] параметр [%Параметр%] неправильний. Виберіть зі списку'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Действие%", ТекущийВладелец.Действие);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Параметр%", ТекущаяСтрока.Параметр);
					Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].Параметр";
					Сообщение.Сообщить();
				КонецЕсли;
			ИначеЕсли ТекущийВладелец.Действие = "Открытие новости" Тогда
				// ////? Проверять наличие такой новости?
				Если ТекущаяСтрока.Параметр = "УИННовости" Тогда
				ИначеЕсли ТекущаяСтрока.Параметр = "ЛентаНовостей" Тогда
				Иначе
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='У действия [%Действие%] параметр [%Параметр%] неправильный. Выберите значение из списка';uk='У дії [%Действие%] параметр [%Параметр%] неправильний. Виберіть зі списку'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Действие%", ТекущийВладелец.Действие);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Параметр%", ТекущаяСтрока.Параметр);
					Сообщение.Поле  = "Объект.ПараметрыДействий[" + С + "].Параметр";
					Сообщение.Сообщить();
				КонецЕсли;
			Иначе
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неправильное действие. Выберите значение действия из списка';uk='Неправильня дія. Виберіть значення дії зі списку'");
				Сообщение.Поле  = "Объект.Действия[" + С + "].Действие";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// ////? Проверка: текст новости:
	// Проверить Текст новости:
	// - Не должно быть ссылок на несуществующие действия.

	// ////?  Проверка: категории:
	// Проверить "Категории":
	// - Не должно быть задвоений строк;
	// - Не должно быть пустых значений категорий.
	// Условия сравнения:
	// - не имеет смысла несколько одинаковых условий с одинаковыми значениями для "=";
	// - не имеет смысла несколько одинаковых условий с одинаковыми значениями для "<>";
	// - не имеет смысла несколько одинаковых условий > или >=;
	// - не имеет смысла несколько одинаковых условий < или <=;
	// - условия >, >= и <, <= должны быть выполнимы (например, >=8.2 и <=8.1 - невыполнимо вообще никогда).

	// Есть другие новости с таким уникальным идентификатором?
	// ////? Проверка: уникальность УИН новости.

	// ////? Проверка: привязка к метаданным:
	// Проверить Привязку к метаданным:
	// - Если новость важная или очень важная, то должна быть привязка к метаданным, форме и событию, иначе важность никогда не сработает.

	// ////?  Проверка: бинарные данные:
	// Проверить Бинарные данные:
	// - Не должно быть "сирот", которые нигде не используются.

	// ////? Проверка: корректно описанный УИН.
	// УИН - должна быть строка (36), чтобы из нее можно было получить УникальныйИдентификатор.

	// ////? Проверка: даты:
	// Дата окончания новости не должна быть раньше даты публикации;
	// Дата сброса важности новости не должна быть раньше даты публикации;
	// Дата сброса важности привязок к метаданным не должна быть раньше даты публикации.

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");

	Если ИмяСобытия = "" Тогда

#Область БуферОбмена

	ИначеЕсли ИмяСобытия = "БуферОбмена: изменился состав сохраненных" Тогда
		// Перерисовать меню "Вставить из...".
		Если ТипЗнч(Источник) = ТипСтруктура Тогда
			Если (Источник.Свойство("Ссылка") = Истина)
					И (Источник.Свойство("КлючОбъекта") = Истина) Тогда
				Если Найти(ВРег(Источник.КлючОбъекта), ВРег("Документы.Новости.")) = 1 Тогда
					лкТекущийБуферОбмена = Прав(Источник.КлючОбъекта, СтрДлина(Источник.КлючОбъекта) - СтрДлина("Документы.Новости."));
					ПерерисоватьПодменюВыбораСохраненныхБуферовОбмена(лкТекущийБуферОбмена);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "БуферОбмена: скопировано значение" Тогда
		Если ТипЗнч(Источник) = ТипСтруктура Тогда
			Если (Источник.Свойство("Ссылка") = Истина)
					И (Источник.Свойство("КлючОбъекта") = Истина) Тогда
				Если Источник.Ссылка <> Объект.Ссылка Тогда
					Если ТипЗнч(Параметр) = ТипСписокЗначений Тогда
						Если Найти(ВРег(Источник.КлючОбъекта), ВРег("Документы.Новости.")) = 1 Тогда
							лкТекущийБуферОбмена = Прав(Источник.КлючОбъекта, СтрДлина(Источник.КлючОбъекта) - СтрДлина("Документы.Новости."));
							ЭтаФорма["ТекущийБуферОбмена_" + лкТекущийБуферОбмена].ЗагрузитьЗначения(Параметр.ВыгрузитьЗначения());
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "БуферОбмена: получить данные текущего буфера обмена" Тогда
		Если ТипЗнч(Источник) = ТипСтруктура Тогда
			Если (Источник.Свойство("Ссылка") = Истина)
					И (Источник.Свойство("КлючОбъекта") = Истина) Тогда
				Если Источник.Ссылка <> Объект.Ссылка Тогда
					Если Параметр <> Истина Тогда // Уже оповещено?
						Если Найти(ВРег(Источник.КлючОбъекта), ВРег("Документы.Новости.")) = 1 Тогда
							лкТекущийБуферОбмена = Прав(Источник.КлючОбъекта, СтрДлина(Источник.КлючОбъекта) - СтрДлина("Документы.Новости."));
							Оповестить(
								"БуферОбмена: скопировано значение",
								ЭтаФорма["ТекущийБуферОбмена_" + лкТекущийБуферОбмена],
								Новый Структура("Ссылка, КлючОбъекта", Объект.Ссылка, Источник.КлючОбъекта));
							Параметр = Истина; // Уже оповещено!
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)

	Если Объект.Важность > 0 Тогда
		Если Объект.ДатаСбросаВажности = '00010101' Тогда
			Объект.ДатаСбросаВажности = КонецДня(ТекущаяДата() + 2*7*24*60*60); // + 2 недели
		КонецЕсли;
	ИначеЕсли Объект.Важность = 0 Тогда
		Объект.ДатаСбросаВажности = '00010101';
		Объект.АвтоСбросНапоминанияПриПрочтении = Ложь;
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СтраницыОбъектНовостиПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.СтраницаТексты Тогда
		Если Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаПростоТекстДля1С Тогда
			// Обновить пример новости.
			ОбновитьПримерыНовостейКлиент();
			Если ЭтаФорма.НеобходимоПересчитатьСписокДействий = Истина Тогда
				ОбновитьПодменюВставкиГиперссылокДействий();
			КонецЕсли;
		ИначеЕсли Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаПростоТекстДляВнешнихИсточников Тогда
			ОбновитьПримерыНовостейКлиент();
		ИначеЕсли Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаБинарныеДанные Тогда
			ОбновитьИнформационныеСтроки();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтраницыТекстыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.СтраницаПростоТекстДля1С Тогда
		ОбновитьПримерыНовостейКлиент();
		Если ЭтаФорма.НеобходимоПересчитатьСписокДействий = Истина Тогда
			ОбновитьПодменюВставкиГиперссылокДействий();
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПростоТекстДляВнешнихИсточников Тогда
		ОбновитьПримерыНовостейКлиент();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаБинарныеДанные Тогда
		ОбновитьИнформационныеСтроки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПримерНовостиДля1СПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	Перем Действие, СписокПараметров;

	лкОбъект = Объект; // При открытии из формы элемента справочника / документа.

	СтандартнаяОбработка = Ложь;
	ПродолжитьОбработку = Ложь;

	Если (ДанныеСобытия.Anchor <> Неопределено) Тогда
		НавигационнаяСсылка = ДанныеСобытия.Href; // ДанныеСобытия.Anchor.nameProp.
		ПродолжитьОбработку = Истина;
	ИначеЕсли (ДанныеСобытия.Element <> Неопределено) Тогда
		Если (ВРег(ДанныеСобытия.Element.tagName) = ВРег("area")) Тогда
			НавигационнаяСсылка = ДанныеСобытия.Element.Href;
			ПродолжитьОбработку = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ПродолжитьОбработку = Истина Тогда

		// Некоторые браузеры (например, FF33) добавляют полный адрес к параметру href
		//  и тогда вместо "1C:Act001" получается "http://ПутьКБазе/1C:Act001".
		Если Найти(ВРег(НавигационнаяСсылка), ВРег("http")) = 1 Тогда
			ГдеРазделитель1С = Найти(ВРег(НавигационнаяСсылка), ВРег("/1C:"));
			Если ГдеРазделитель1С > 0 Тогда // 1C - "С" - английская
				НавигационнаяСсылка = Прав(НавигационнаяСсылка, СтрДлина(НавигационнаяСсылка) - ГдеРазделитель1С);
			КонецЕсли;
		КонецЕсли;

		Если ВРег(Лев(НавигационнаяСсылка, 4)) = ВРег("http") Тогда
			ОбработкаНовостейКлиент.ПерейтиПоИнтернетСсылке(НавигационнаяСсылка);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВРег(Лев(НавигационнаяСсылка, 6)) = ВРег("e1c://") Тогда
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВРег(Лев(НавигационнаяСсылка, 6)) = ВРег("e1cib/") Тогда
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВРег(Лев(НавигационнаяСсылка, 3)) = ВРег("1C:") Тогда // 1C - "С" - английская
			// Запустить ОбработкаНавигационнойСсылки с параметрами.
			// При открытии из формы элемента справочника / документа.
				ОбработкаНовостейВызовСервера.ПодготовитьПараметрыНавигационнойСсылки(лкОбъект, НавигационнаяСсылка, Действие, СписокПараметров);
				ОбработкаНовостейКлиент.ОбработкаНавигационнойСсылки(лкОбъект.Ссылка, ЭтаФорма, Действие, СписокПараметров);
			СтандартнаяОбработка = Ложь;
		Иначе
			СтандартнаяОбработка = Ложь;
			ТекстСообщения = НСтр("ru='Неизвестная ссылка: %НавигационнаяСсылка%';uk='Невідома посилання: %НавигационнаяСсылка%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НавигационнаяСсылка%", НавигационнаяСсылка);
			ПоказатьПредупреждение(
				, // ОписаниеОповещенияОЗавершении
				ТекстСообщения,
				0,
				НСтр("ru='Ошибка';uk='Помилка'")); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаПолныйТекстНовостиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Для каждого ТекущаяСтрока Из Объект.Действия Цикл
		ДанныеВыбора.Добавить(ТекущаяСтрока.УИНДействия);
	КонецЦикла;
	ДанныеВыбора.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ДанныеВыбора.Вставить(0, "http://");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПереходитьПоСсылкеНаПолныйТекстНовостиПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПриОткрытииСразуПереходитьПоСсылкеОбработкаНавигационнойСсылки(Элемент, лкНавигационнаяСсылка, СтандартнаяОбработка)

	Если ВРег(лкНавигационнаяСсылка) = ВРег("1C:autoOpenLink") Тогда
		СтандартнаяОбработка = Ложь;
		ЭтаФорма.ТекущийЭлемент = Элементы.ПриОткрытииПереходитьПоСсылкеНаПолныйТекстНовости;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЛентаНовостейПриИзменении(Элемент)

	ЗаполнитьДоступныеКатегорииДляЛентыНовостейСервер();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_КатегорииПростые

&НаКлиенте
Процедура КатегорииПростыеКатегорияНовостейПриИзменении(Элемент)

	ТекущиеДанные = Элементы.КатегорииПростые.ТекущиеДанные;

	// Условия <>, <, <=, >, >= возможны только для категорий с типом Дата или Число.
	лкСписокВыбора = Элементы.КатегорииПростыеУсловиеОтбора.СписокВыбора;
	лкСписокВыбора.Очистить();
	Если НЕ ТекущиеДанные.КатегорияНовостей.Пустая() Тогда
		лкСписокВыбора.Добавить("eq", "=");
		НайденноеЗначение = ЭтаФорма.КатегорииСПроизвольнымиУсловиями.НайтиПоЗначению(ТекущиеДанные.КатегорияНовостей);
		Если НайденноеЗначение <> Неопределено Тогда
			лкСписокВыбора.Добавить("ne", "<>");
			лкСписокВыбора.Добавить("gt", ">");
			лкСписокВыбора.Добавить("ge", ">=");
			лкСписокВыбора.Добавить("lt", "<");
			лкСписокВыбора.Добавить("le", "<=");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииПростыеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Преобразовать значения версий в строгий формат 99.99.999.9999.
	Если НЕ ОтменаРедактирования Тогда

		ТекущиеДанные = Элементы.КатегорииПростые.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда

			// Условия <>, <, <=, >, >= возможны только для категорий с типом Дата или Число.
			Если НЕ ТекущиеДанные.КатегорияНовостей.Пустая() Тогда
				НайденноеЗначение = ЭтаФорма.КатегорииСПроизвольнымиУсловиями.НайтиПоЗначению(ТекущиеДанные.КатегорияНовостей);
				Если НайденноеЗначение = Неопределено Тогда
					ТекущиеДанные.УсловиеОтбора = "eq";
				КонецЕсли;
			КонецЕсли;

			// ////? Выделить лишние категории.

		КонецЕсли;

	КонецЕсли;

	ПроверитьКатегорииНаОшибки();

КонецПроцедуры

&НаКлиенте
Процедура КатегорииПростыеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элементы.КатегорииПростые.ТекущиеДанные;

	Если (НоваяСтрока = Истина) И (Копирование = Ложь) Тогда
		Элементы.КатегорииПростые.ТекущиеДанные.УсловиеОтбора = "eq";
	КонецЕсли;

	// Условия <>, <, <=, >, >= возможны только для категорий с типом Дата или Число.
	лкСписокВыбора = Элементы.КатегорииПростыеУсловиеОтбора.СписокВыбора;
	лкСписокВыбора.Очистить();
	Если НЕ ТекущиеДанные.КатегорияНовостей.Пустая() Тогда
		лкСписокВыбора.Добавить("eq", "=");
		НайденноеЗначение = ЭтаФорма.КатегорииСПроизвольнымиУсловиями.НайтиПоЗначению(ТекущиеДанные.КатегорияНовостей);
		Если НайденноеЗначение <> Неопределено Тогда
			лкСписокВыбора.Добавить("ne", "<>");
			лкСписокВыбора.Добавить("gt", ">");
			лкСписокВыбора.Добавить("ge", ">=");
			лкСписокВыбора.Добавить("lt", "<");
			лкСписокВыбора.Добавить("le", "<=");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииПростыеПослеУдаления(Элемент)

	ПроверитьКатегорииНаОшибки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_КатегорииИнтервалыВерсий

&НаКлиенте
Процедура КатегорииИнтервалыВерсийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	// Преобразовать версии к правильному виду - с лидирующими нулями.
	// Проверить, что версия ОТ <= версия ДО.
	Если ОтменаРедактирования <> Истина Тогда
		ТекущиеДанные = Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ПустаяСтрока(СтрЗаменить(ТекущиеДанные.ВерсияОТ,".","")) Тогда
				ТекущиеДанные.ВерсияОТ = "00.00.000.0000";
			Иначе
				ТекущиеДанные.ВерсияОТ = ОбработкаНовостейКлиентСервер.ПривестиСтрокуКПравильномуФорматуВерсии(ТекущиеДанные.ВерсияОТ);
			КонецЕсли;
			Если ПустаяСтрока(СтрЗаменить(ТекущиеДанные.ВерсияДО,".","")) Тогда
				ТекущиеДанные.ВерсияДО = "99.99.999.9999";
			Иначе
				ТекущиеДанные.ВерсияДО = ОбработкаНовостейКлиентСервер.ПривестиСтрокуКПравильномуФорматуВерсии(ТекущиеДанные.ВерсияДО);
			КонецЕсли;
			Если ТекущиеДанные.ВерсияОТ > ТекущиеДанные.ВерсияДО Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Версия ОТ [ВерсияОТ] не должна быть больше, чем Версия ДО [ВерсияДО].';uk='Версія ВІД [ВерсияОТ] не повинна бути більше, ніж Версія ДО [ВерсияДО].'");
				Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "[ВерсияОТ]", ТекущиеДанные.ВерсияОТ);
				Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "[ВерсияДО]", ТекущиеДанные.ВерсияДО);
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииИнтервалыВерсийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Преобразовать версии к правильному виду - с лидирующими нулями.
	// Проверить, что версия ОТ <= версия ДО.
	Если ОтменаРедактирования <> Истина Тогда

		ТекущиеДанные = Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда

			Если ПустаяСтрока(СтрЗаменить(ТекущиеДанные.ВерсияОТ,".","")) Тогда
				ТекущиеДанные.ВерсияОТ = "00.00.000.0000";
			Иначе
				ТекущиеДанные.ВерсияОТ = ОбработкаНовостейКлиентСервер.ПривестиСтрокуКПравильномуФорматуВерсии(ТекущиеДанные.ВерсияОТ);
			КонецЕсли;

			Если ПустаяСтрока(СтрЗаменить(ТекущиеДанные.ВерсияДО,".","")) Тогда
				ТекущиеДанные.ВерсияДО = "99.99.999.9999";
			Иначе
				ТекущиеДанные.ВерсияДО = ОбработкаНовостейКлиентСервер.ПривестиСтрокуКПравильномуФорматуВерсии(ТекущиеДанные.ВерсияДО);
			КонецЕсли;

			Если ТекущиеДанные.ВерсияОТ > ТекущиеДанные.ВерсияДО Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Версия ОТ [ВерсияОТ] не должна быть больше, чем Версия ДО [ВерсияДО].';uk='Версія ВІД [ВерсияОТ] не повинна бути більше, ніж Версія ДО [ВерсияДО].'");
				Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "[ВерсияОТ]", ТекущиеДанные.ВерсияОТ);
				Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "[ВерсияДО]", ТекущиеДанные.ВерсияДО);
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;

			Если ПустаяСтрока(ТекущиеДанные.ПредставлениеИнтервалаВерсий) Тогда
				ТекущиеДанные.ПредставлениеИнтервалаВерсий= ОбработкаНовостейКлиентСервер.ПолучитьУдобочитаемоеПредставлениеИнтервалаВерсий(ТекущиеДанные.ВерсияОТ, ТекущиеДанные.ВерсияДО);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииИнтервалыВерсийКатегорияНовостейПриИзменении(Элемент)

	Если Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные.КатегорияНовостей = КатегорияВерсияПлатформы Тогда
			Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные.Продукт = "Platform";
		ИначеЕсли Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные.КатегорияНовостей = КатегорияВерсияПродукта Тогда
			Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные.Продукт = ОбработкаНовостейВызовСервера.ПолучитьЗначениеПредопределеннойКатегории("ProductName");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииИнтервалыВерсийПредставлениеИнтервалаВерсийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь; // Чтобы НЕ сработало событие КатегорииИнтервалыВерсийОбработкаВыбора.
	ТекущиеДанные = Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Продукт, ВерсияОТ, ВерсияДО",
			ТекущиеДанные.Продукт,
			ТекущиеДанные.ВерсияОТ,
			ТекущиеДанные.ВерсияДО);
		ОткрытьФорму(
			"Справочник.Новости.Форма.ФормаВыбораИнтервалаВерсий", // Имя формы
			ПараметрыОткрытия, // Параметры открытия
			Элементы.КатегорииИнтервалыВерсий, // ВладелецФормы - кто получит оповещение об обработке выбора.
			""); // Уникальность
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииИнтервалыВерсийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТипСтруктура = Тип("Структура");

	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = ТипСтруктура Тогда
		Если ВыбранноеЗначение.Свойство("ВерсияОТ") И ВыбранноеЗначение.Свойство("ВерсияДО") Тогда
			ТекущиеДанные = Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				ТекущиеДанные.ВерсияОТ = ВыбранноеЗначение.ВерсияОТ;
				ТекущиеДанные.ВерсияДО = ВыбранноеЗначение.ВерсияДО;
				ЗаполнитьПредставлениеИнтервалаВерсий(Элементы.КатегорииИнтервалыВерсий.ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Действия

&НаКлиенте
Процедура ДействияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если (НоваяСтрока = Истина) И (Копирование = Ложь) Тогда
		Элемент.ТекущиеДанные.УИНДействия = "1C:";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если НЕ ОтменаРедактирования Тогда
		// Идентификатор должен начинаться только с "1C:".
		Если Лев(ВРег(Элемент.ТекущиеДанные.УИНДействия), "3") = ВРег("1C:") Тогда
			//
		Иначе
			Отказ = Истина;
		КонецЕсли;
		// В идентификаторе должны быть только английские буквы, цифры и знаки подчеркивания.
		РазрешенныеСимволы = ОбработкаНовостейКлиентСервер.ПолучитьРазрешенныеДляИдентификацииСимволы();
		Для С=4 По СтрДлина(Элемент.ТекущиеДанные.УИНДействия) Цикл
			Символ = Сред(Элемент.ТекущиеДанные.УИНДействия, С, 1);
			Если (Найти(РазрешенныеСимволы, Символ) = 0) Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// Поле Действие не должно быть пустым.
		Если ПустаяСтрока(Элемент.ТекущиеДанные.Действие) Тогда
			Отказ = Истина;
		Иначе
			Если Элемент.ТекущиеДанные.Действие = "Переход по навигационной ссылке" Тогда
			ИначеЕсли Элемент.ТекущиеДанные.Действие = "Оповещение" Тогда
			ИначеЕсли Элемент.ТекущиеДанные.Действие = "Открытие раздела справки" Тогда
			ИначеЕсли Элемент.ТекущиеДанные.Действие = "Запуск процедуры с параметрами" Тогда
			ИначеЕсли Элемент.ТекущиеДанные.Действие = "Переход по интернет ссылке" Тогда
			ИначеЕсли Элемент.ТекущиеДанные.Действие = "Показать картинку" Тогда
			ИначеЕсли Элемент.ТекущиеДанные.Действие = "Открытие новости" Тогда
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Отказ = Истина Тогда
			ТекстОшибки = НСтр("ru='Идентификатор гиперссылки должен начинаться с 1C: (где C - английская буква),
                |и состоять только из английских букв, цифр и знаков подчеркивания.
                |
                |А в поле Действие должно быть значение, выбранное из списка.'
                |;uk='Ідентифікатор гіперпосилання повинен починатися з 1C: (де C - англійська літера),
                |і складатися тільки з англійських букв, цифр і знаків підкреслення.
                |
                |А у полі Дія має бути значення, вибране зі списку.'");
			ПоказатьПредупреждение(
				, // ОписаниеоповещенияОЗавершении
				ТекстОшибки, // ТекстПредупреждения
				0, // Таймаут
				НСтр("ru='Ошибка';uk='Помилка'") // Заголовок
			);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеУдаления(Элемент)

	ЭтаФорма.НеобходимоПересчитатьСписокДействий = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДействияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	Если НЕ ОтменаРедактирования Тогда
		ЭтаФорма.НеобходимоПересчитатьСписокДействий = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияПриАктивизацииСтроки(Элемент)

	Если ЭтаФорма.АвтоОтборСтрокПараметровДействий = Истина Тогда
		Если Элементы.Действия.ТекущиеДанные = Неопределено Тогда
			Элементы.ПараметрыДействий.ОтборСтрок = Неопределено;
		Иначе
			Элементы.ПараметрыДействий.ОтборСтрок = Новый ФиксированнаяСтруктура("УИНДействия", Элементы.Действия.ТекущиеДанные.УИНДействия);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияДействиеПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Действия.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		// Количество параметров
		Если ТекущаяСтрока.Действие = "Переход по навигационной ссылке" Тогда // один параметр с именем "Навигационная ссылка".
			ТекущаяСтрока.КоличествоПараметров = 1;
		ИначеЕсли ТекущаяСтрока.Действие = "Оповещение" Тогда // 3 параметра: "ИмяСобытия" (обязательный), "Параметр", "Источник".
			ТекущаяСтрока.КоличествоПараметров = 3;
		ИначеЕсли ТекущаяСтрока.Действие = "Открытие раздела справки" Тогда // один параметр с именем "Раздел справки".
			ТекущаяСтрока.КоличествоПараметров = 1;
		ИначеЕсли ТекущаяСтрока.Действие = "Запуск процедуры с параметрами" Тогда // Неизвестное количество.
			ТекущаяСтрока.КоличествоПараметров = 9999;
		ИначеЕсли ТекущаяСтрока.Действие = "Переход по интернет ссылке" Тогда // один параметр с именем "URL".
			ТекущаяСтрока.КоличествоПараметров = 1;
		ИначеЕсли ТекущаяСтрока.Действие = "Показать картинку" Тогда // параметров с именем "УИН" может быть много.
			ТекущаяСтрока.КоличествоПараметров = 9999;
		ИначеЕсли ТекущаяСтрока.Действие = "Открытие новости" Тогда // Два параметра: "УИННовости", "ЛентаНовостей".
			ТекущаяСтрока.КоличествоПараметров = 2;
		Иначе
			ТекущаяСтрока.КоличествоПараметров = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияЕдинственноеЗначениеПараметраПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Действия.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ИмяЕдинственногоПараметра = "";
		Если ТекущаяСтрока.Действие = "Переход по навигационной ссылке" Тогда // один параметр с именем "Навигационная ссылка".
			ИмяЕдинственногоПараметра = "Навигационная ссылка";
		ИначеЕсли ТекущаяСтрока.Действие = "Оповещение" Тогда // 3 параметра: "ИмяСобытия" (обязательный), "Параметр", "Источник".
		ИначеЕсли ТекущаяСтрока.Действие = "Открытие раздела справки" Тогда // один параметр с именем "Раздел справки".
			ИмяЕдинственногоПараметра = "Раздел справки";
		ИначеЕсли ТекущаяСтрока.Действие = "Запуск процедуры с параметрами" Тогда // Неизвестное количество.
		ИначеЕсли ТекущаяСтрока.Действие = "Переход по интернет ссылке" Тогда // один параметр с именем "URL".
			ИмяЕдинственногоПараметра = "URL";
		ИначеЕсли ТекущаяСтрока.Действие = "Показать картинку" Тогда // параметров с именем "УИН" может быть много.
		ИначеЕсли ТекущаяСтрока.Действие = "Открытие новости" Тогда // Два параметра: "УИННовости", "ЛентаНовостей".
		Иначе
		КонецЕсли;

		Если НЕ ПустаяСтрока(ИмяЕдинственногоПараметра) Тогда
			// Значение единственного параметра.
			НайденныеСтроки = Объект.ПараметрыДействий.НайтиСтроки(
				Новый Структура("УИНДействия, Параметр",
					ТекущаяСтрока.УИНДействия,
					ИмяЕдинственногоПараметра));
			Если НайденныеСтроки.Количество() = 0 Тогда // Взять первый
				НоваяСтрока = Объект.ПараметрыДействий.Добавить();
				НоваяСтрока.УИНДействия       = ТекущаяСтрока.УИНДействия;
				НоваяСтрока.Параметр          = ИмяЕдинственногоПараметра;
				НоваяСтрока.ЗначениеПараметра = ТекущаяСтрока.ЕдинственноеЗначениеПараметра;
			ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда // Взять первый
				НайденныеСтроки[0].ЗначениеПараметра = ТекущаяСтрока.ЕдинственноеЗначениеПараметра;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияЕдинственноеЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;
	СтандартнаяОбработка = Ложь;

	ТекущаяСтрока = Элементы.Действия.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ТекущаяСтрока.Действие = "Переход по навигационной ссылке" Тогда // один параметр с именем "Навигационная ссылка".
			Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
				ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.НавигационнаяСсылка, ТекущийОбъектМетаданных.ИмяМетаданных);
			КонецЦикла;
		ИначеЕсли ТекущаяСтрока.Действие = "Оповещение" Тогда // 3 параметра: "ИмяСобытия" (обязательный), "Параметр", "Источник".
		ИначеЕсли ТекущаяСтрока.Действие = "Открытие раздела справки" Тогда // один параметр с именем "Раздел справки".
			Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
				ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.РазделСправки, ТекущийОбъектМетаданных.ИмяМетаданных);
			КонецЦикла;
		ИначеЕсли ТекущаяСтрока.Действие = "Запуск процедуры с параметрами" Тогда // Неизвестное количество.
		ИначеЕсли ТекущаяСтрока.Действие = "Переход по интернет ссылке" Тогда // один параметр с именем "URL".
		ИначеЕсли ТекущаяСтрока.Действие = "Показать картинку" Тогда // параметров с именем "УИН" может быть много.
		ИначеЕсли ТекущаяСтрока.Действие = "Открытие новости" Тогда // Два параметра: "УИННовости", "ЛентаНовостей".
		Иначе
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияЕдинственноеЗначениеПараметраАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Действие = "Переход по навигационной ссылке" Тогда
			// Найти в списке похожие значения и вывести их.
			Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
				Если Найти(ВРег(ТекущийОбъектМетаданных.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
					ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.НавигационнаяСсылка, ТекущийОбъектМетаданных.ИмяМетаданных);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТекущиеДанные.Действие = "Открытие раздела справки" Тогда
			// Найти в списке похожие значения и вывести их.
			Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
				Если Найти(ВРег(ТекущийОбъектМетаданных.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
					ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.РазделСправки, ТекущийОбъектМетаданных.ИмяМетаданных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияЕдинственноеЗначениеПараметраОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;

	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Действие = "Переход по навигационной ссылке" Тогда
			// Найти в списке похожие значения и вывести их.
			Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
				Если Найти(ВРег(ТекущийОбъектМетаданных.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
					ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.НавигационнаяСсылка, ТекущийОбъектМетаданных.ИмяМетаданных);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТекущиеДанные.Действие = "Открытие раздела справки" Тогда
			// Найти в списке похожие значения и вывести их.
			Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
				Если Найти(ВРег(ТекущийОбъектМетаданных.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
					ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.РазделСправки, ТекущийОбъектМетаданных.ИмяМетаданных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ДанныеВыбора.Количество() = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ЕдинственноеЗначениеПараметра = ДанныеВыбора[0].Значение;
		ДействияЕдинственноеЗначениеПараметраПриИзменении(Элемент);
	ИначеЕсли ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПараметрыДействий

&НаКлиенте
Процедура ПараметрыДействийУИНДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;
	СтандартнаяОбработка = Ложь;

	// Получить список УИНДействия из Объект.Действия.
	Для каждого ТекущийУИН Из Объект.Действия Цикл
		ДанныеВыбора.Добавить(ТекущийУИН.УИНДействия);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДействийУИНДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;
	СтандартнаяОбработка = Ложь;

	// Получить список УИНДействия из Объект.Действия.
	Для каждого ТекущийУИН Из Объект.Действия Цикл
		Если Найти(ВРег(ТекущийУИН.УИНДействия), ВРег(Текст)) > 0 Тогда
			ДанныеВыбора.Добавить(ТекущийУИН.УИНДействия);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДействийУИНДействияПриИзменении(Элемент)

	ПараметрыДействийПриАктивизацииСтроки(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДействийПриАктивизацииСтроки(Элемент)

	// Заполнить список выбора для ПараметрыДействийПараметр, который зависит от таблицы Действия.Действие.
	// Полный список действий и их параметров можно посмотреть в ОбработкаНовостейКлиент.ОбработкаНавигационнойСсылки.
	ТекущиеДанные = Элементы.ПараметрыДействий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ПараметрыДействийЗначениеПараметра.СписокВыбора.Очистить();
		НайденныеДействия = Объект.Действия.НайтиСтроки(Новый Структура("УИНДействия", ТекущиеДанные.УИНДействия));
		Если НайденныеДействия.Количество() > 0 Тогда
			УИНДействия = НайденныеДействия[0].УИНДействия;
			Действие = НайденныеДействия[0].Действие;
			СписокПараметров = Новый СписокЗначений;
			Если Действие = "Переход по навигационной ссылке" Тогда
				СписокПараметров.Добавить("Навигационная ссылка");
			ИначеЕсли Действие = "Запуск процедуры с параметрами" Тогда
				// Ничего не делать
			ИначеЕсли Действие = "Оповещение" Тогда
				СписокПараметров.Добавить("ИмяСобытия");
				СписокПараметров.Добавить("Параметр");
				СписокПараметров.Добавить("Источник");
			ИначеЕсли Действие = "Открытие раздела справки" Тогда
				СписокПараметров.Добавить("Раздел справки");
				// Заполнить список разделов справки по метаданным.
			ИначеЕсли Действие = "Переход по интернет ссылке" Тогда
				СписокПараметров.Добавить("URL");
			ИначеЕсли Действие = "Открытие новости" Тогда
				СписокПараметров.Добавить("УИННовости");
				СписокПараметров.Добавить("ЛентаНовостей");
			ИначеЕсли Действие = "Показать картинку" Тогда
				СписокПараметров.Добавить("УИН");
			КонецЕсли;
			Элементы.ПараметрыДействийПараметр.СписокВыбора.ЗагрузитьЗначения(СписокПараметров.ВыгрузитьЗначения());
			Если Элементы.ПараметрыДействийПараметр.СписокВыбора.Количество() = 1 Тогда
				ТекущиеДанные.Параметр = Элементы.ПараметрыДействийПараметр.СписокВыбора[0].Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДействийЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ПараметрыДействий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		лкУИНДействия = ТекущиеДанные.УИНДействия;
		лкПараметр    = ТекущиеДанные.Параметр;
		лкДействие    = "";
		НайденныеСтроки = Объект.Действия.НайтиСтроки(Новый Структура("УИНДействия", лкУИНДействия));
		Если НайденныеСтроки.Количество() > 0 Тогда
			лкДействие = НайденныеСтроки[0].Действие;
		КонецЕсли;
		// На основании лкДействие и лкПараметр можно понять, можно ли использовать список выбора.

		Если лкДействие = "Переход по навигационной ссылке" Тогда
			// Возможно, передадут несколько ссылок - открыть их все.
			Если лкПараметр = "Навигационная ссылка" Тогда
				Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
					ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.НавигационнаяСсылка, ТекущийОбъектМетаданных.ИмяМетаданных);
				КонецЦикла;
			КонецЕсли;

		ИначеЕсли лкДействие = "Запуск процедуры с параметрами" Тогда
			// Ничего не делать.

		ИначеЕсли лкДействие = "Оповещение" Тогда
			Если лкПараметр = "ИмяСобытия" Тогда
				// Ничего не делать.
			КонецЕсли;
			Если лкПараметр = "Параметр" Тогда
				// Ничего не делать.
			КонецЕсли;
			Если лкПараметр = "Источник" Тогда
				// Ничего не делать.
			КонецЕсли;

		ИначеЕсли лкДействие = "Открытие раздела справки" Тогда
			Если лкПараметр = "Раздел справки" Тогда
				Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
					ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.РазделСправки, ТекущийОбъектМетаданных.ИмяМетаданных);
				КонецЦикла;
			КонецЕсли;

		ИначеЕсли лкДействие = "Переход по интернет ссылке" Тогда
			Если лкПараметр = "URL" Тогда
				// Ничего не делать.
			КонецЕсли;

		ИначеЕсли лкДействие = "Открытие новости" Тогда
			Если лкПараметр = "УИННовости" Тогда
				// ////? Обработка начала выбора параметра "Открытие новости", "УИН новости".
				// Выбрать новость.
			КонецЕсли;
			Если лкПараметр = "ЛентаНовостей" Тогда
				// ////? Обработка начала выбора параметра "Открытие новости", "Лента новостей".
				// Выбрать ленту новостей.
			КонецЕсли;

		ИначеЕсли лкДействие = "Показать картинку" Тогда
			Если лкПараметр = "УИН" Тогда
				// Взять УИН картинки из списка бинарных данных.
				Для каждого ТекущиеБинарныеДанные Из Объект.БинарныеДанные Цикл
					ДанныеВыбора.Добавить(ТекущиеБинарныеДанные.УИН);
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДействийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		// Если гиперссылка только одна, то сразу вставить ее идентификатор.
		Если ЭтаФорма.Объект.Действия.Количество() = 1 Тогда
			Если Элементы.ПараметрыДействий.ТекущиеДанные <> Неопределено Тогда
				Элементы.ПараметрыДействий.ТекущиеДанные.УИНДействия = ЭтаФорма.Объект.Действия[0].УИНДействия;
				ПараметрыДействийУИНДействияПриИзменении(Элементы.ПараметрыДействийУИНДействия);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыДействийПриАктивизацииСтроки(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДействийЗначениеПараметраПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыДействий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		// Если у действия всего один параметр, то заменить его в Объект.Действия.
		НайденныеСтроки = Объект.Действия.НайтиСтроки(Новый Структура("УИНДействия", ТекущиеДанные.УИНДействия));
		Если НайденныеСтроки.Количество() = 1 Тогда
			Если НайденныеСтроки[0].Действие = "Переход по навигационной ссылке" Тогда // один параметр с именем "Навигационная ссылка".
				НайденныеСтроки[0].ЕдинственноеЗначениеПараметра = ТекущиеДанные.ЗначениеПараметра;
			ИначеЕсли НайденныеСтроки[0].Действие = "Оповещение" Тогда // 3 параметра: "ИмяСобытия" (обязательный), "Параметр", "Источник".
			ИначеЕсли НайденныеСтроки[0].Действие = "Открытие раздела справки" Тогда // один параметр с именем "Раздел справки".
				НайденныеСтроки[0].ЕдинственноеЗначениеПараметра = ТекущиеДанные.ЗначениеПараметра;
			ИначеЕсли НайденныеСтроки[0].Действие = "Запуск процедуры с параметрами" Тогда // Неизвестное количество.
			ИначеЕсли НайденныеСтроки[0].Действие = "Переход по интернет ссылке" Тогда // один параметр с именем "URL".
				НайденныеСтроки[0].ЕдинственноеЗначениеПараметра = ТекущиеДанные.ЗначениеПараметра;
			ИначеЕсли НайденныеСтроки[0].Действие = "Показать картинку" Тогда // параметров с именем "УИН" может быть много.
			ИначеЕсли НайденныеСтроки[0].Действие = "Открытие новости" Тогда // Два параметра: "УИННовости", "ЛентаНовостей".
			Иначе
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДействийЗначениеПараметраАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ПараметрыДействий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		лкУИНДействия = ТекущиеДанные.УИНДействия;
		лкПараметр    = ТекущиеДанные.Параметр;
		лкДействие    = "";
		НайденныеСтроки = Объект.Действия.НайтиСтроки(Новый Структура("УИНДействия", лкУИНДействия));
		Если НайденныеСтроки.Количество() > 0 Тогда
			лкДействие = НайденныеСтроки[0].Действие;
		КонецЕсли;
		// На основании лкДействие и лкПараметр можно понять, можно ли использовать список выбора.

		Если лкДействие = "Переход по навигационной ссылке" Тогда
			Если лкПараметр = "Навигационная ссылка" Тогда
				// Найти в списке похожие значения и вывести их.
				Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
					Если Найти(ВРег(ТекущийОбъектМетаданных.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
						ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.НавигационнаяСсылка, ТекущийОбъектМетаданных.ИмяМетаданных);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		ИначеЕсли лкДействие = "Открытие раздела справки" Тогда
			Если лкПараметр = "Раздел справки" Тогда
				// Найти в списке похожие значения и вывести их.
				Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
					Если Найти(ВРег(ТекущийОбъектМетаданных.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
						ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.РазделСправки, ТекущийОбъектМетаданных.ИмяМетаданных);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		ИначеЕсли лкДействие = "Показать картинку" Тогда
			Если лкПараметр = "УИН" Тогда
				// Найти в списке похожие значения и вывести их.
				Для каждого ТекущиеБинарныеДанные Из Объект.БинарныеДанные Цикл
					Если Найти(ВРег(ТекущиеБинарныеДанные.УИН), ВРег(Текст)) > 0 Тогда
						ДанныеВыбора.Добавить(ТекущиеБинарныеДанные.УИН, ТекущиеБинарныеДанные.УИН);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДействийЗначениеПараметраОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;

	ТекущиеДанные = Элементы.ПараметрыДействий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		лкУИНДействия = ТекущиеДанные.УИНДействия;
		лкПараметр    = ТекущиеДанные.Параметр;
		лкДействие    = "";
		НайденныеСтроки = Объект.Действия.НайтиСтроки(Новый Структура("УИНДействия", лкУИНДействия));
		Если НайденныеСтроки.Количество() > 0 Тогда
			лкДействие = НайденныеСтроки[0].Действие;
		КонецЕсли;
		// На основании лкДействие и лкПараметр можно понять, можно ли использовать список выбора.

		Если лкДействие = "Переход по навигационной ссылке" Тогда
			Если лкПараметр = "Навигационная ссылка" Тогда
				// Найти в списке похожие значения и вывести их.
				Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
					Если Найти(ВРег(ТекущийОбъектМетаданных.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
						ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.НавигационнаяСсылка, ТекущийОбъектМетаданных.ИмяМетаданных);
					КонецЕсли;
				КонецЦикла;
				Если ДанныеВыбора.Количество() = 1 Тогда
					СтандартнаяОбработка = Ложь;
					ТекущиеДанные.ЗначениеПараметра = ДанныеВыбора[0].Значение;
				ИначеЕсли ДанныеВыбора.Количество() > 0 Тогда
					СтандартнаяОбработка = Ложь;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли лкДействие = "Открытие раздела справки" Тогда
			Если лкПараметр = "Раздел справки" Тогда
				// Найти в списке похожие значения и вывести их.
				Для каждого ТекущийОбъектМетаданных Из ЭтаФорма.ТаблицаМетаданных Цикл
					Если Найти(ВРег(ТекущийОбъектМетаданных.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
						ДанныеВыбора.Добавить(ТекущийОбъектМетаданных.РазделСправки, ТекущийОбъектМетаданных.ИмяМетаданных);
					КонецЕсли;
				КонецЦикла;
				Если ДанныеВыбора.Количество() = 1 Тогда
					СтандартнаяОбработка = Ложь;
					ТекущиеДанные.ЗначениеПараметра = ДанныеВыбора[0].Значение;
				ИначеЕсли ДанныеВыбора.Количество() > 0 Тогда
					СтандартнаяОбработка = Ложь;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли лкДействие = "Показать картинку" Тогда
			Если лкПараметр = "УИН" Тогда
				// Найти в списке похожие значения и вывести их.
				Для каждого ТекущиеБинарныеДанные Из Объект.БинарныеДанные Цикл
					Если Найти(ВРег(ТекущиеБинарныеДанные.УИН), ВРег(Текст)) > 0 Тогда
						ДанныеВыбора.Добавить(ТекущиеБинарныеДанные.УИН, ТекущиеБинарныеДанные.УИН);
					КонецЕсли;
				КонецЦикла;
				Если ДанныеВыбора.Количество() = 1 Тогда
					СтандартнаяОбработка = Ложь;
					ТекущиеДанные.ЗначениеПараметра = ДанныеВыбора[0].Значение;
				ИначеЕсли ДанныеВыбора.Количество() > 0 Тогда
					СтандартнаяОбработка = Ложь;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_БинарныеДанные

&НаКлиенте
Процедура БинарныеДанныеПриИзменении(Элемент)

	ОбновитьИнформационныеСтроки();

КонецПроцедуры

&НаКлиенте
Процедура БинарныеДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ВыбраннаяСтрока <> Неопределено Тогда
		Если Поле.Имя = "БинарныеДанныеДанныеСтрока64" Тогда
			Если ЭтаФорма.ТолькоПросмотр <> Истина Тогда
				СтандартнаяОбработка = Ложь; // Чтобы строка не переходила в режим редактирования.
				КомандаЗагрузитьФайлКакБинарныеДанные(Неопределено);
				ОбновитьИнформационныеСтроки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БинарныеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования <> Истина Тогда
		// Ничего не делать
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПривязкаКМетаданным

&НаКлиенте
Процедура ПривязкаКМетаданнымВажностьПриИзменении(Элемент)

	Если Элементы.ПривязкаКМетаданным.ТекущиеДанные.Важность > 0 Тогда
		Если Элементы.ПривязкаКМетаданным.ТекущиеДанные.ДатаСбросаВажности = '00010101' Тогда
			Элементы.ПривязкаКМетаданным.ТекущиеДанные.ДатаСбросаВажности = КонецДня(ТекущаяДата() + 2*7*24*60*60); // + 2 недели
		КонецЕсли;
		// Важные и очень важные новости не могут работать без метаданных, формы и события - подставить хотя бы событие.
		// ////? Автоподстановка метаданных, формы, события.
	ИначеЕсли Элементы.ПривязкаКМетаданным.ТекущиеДанные.Важность = 0 Тогда
		Элементы.ПривязкаКМетаданным.ТекущиеДанные.ДатаСбросаВажности = '00010101';
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымМетаданныеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;

	// Искать и подставлять по части наименования.
	Если НЕ ПустаяСтрока(Текст) Тогда
		Для каждого ТекущаяСтрока Из ЭтаФорма.ТаблицаМетаданных Цикл
			Если Найти(ВРег(ТекущаяСтрока.ИмяМетаданных), ВРег(Текст)) > 0 Тогда
				ДанныеВыбора.Добавить(ТекущаяСтрока.ИмяМетаданных);
			КонецЕсли;
		КонецЦикла;

		Если ДанныеВыбора.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымМетаданныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДанныеВыбора = Новый СписокЗначений;

	Для каждого ТекущаяСтрока Из ЭтаФорма.ТаблицаМетаданных Цикл
		ДанныеВыбора.Добавить(ТекущаяСтрока.ИмяМетаданных);
	КонецЦикла;

	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымМетаданныеПриИзменении(Элемент)

	ПривязкаКМетаданнымПриАктивизацииСтроки(Неопределено);

	// Если выделено несколько строк, то установить одинаковое значение во всех выделенных строках.
	Если Элементы.ПривязкаКМетаданным.ВыделенныеСтроки.Количество() > 1 Тогда
		ИмяКолонки = "Метаданные";
		ТекущееЗначение = Элементы.ПривязкаКМетаданным.ТекущиеДанные[ИмяКолонки];
		Для Каждого ИндексСтроки Из Элементы.ПривязкаКМетаданным.ВыделенныеСтроки Цикл
			Объект.ПривязкаКМетаданным[ИндексСтроки][ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымФормаПриИзменении(Элемент)

	// Если выделено несколько строк, то установить одинаковое значение во всех выделенных строках.
	Если Элементы.ПривязкаКМетаданным.ВыделенныеСтроки.Количество() > 1 Тогда
		ИмяКолонки = "Форма";
		ТекущееЗначение = Элементы.ПривязкаКМетаданным.ТекущиеДанные[ИмяКолонки];
		Для Каждого ИндексСтроки Из Элементы.ПривязкаКМетаданным.ВыделенныеСтроки Цикл
			Объект.ПривязкаКМетаданным[ИндексСтроки][ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымСобытиеПриИзменении(Элемент)

	// Если выделено несколько строк, то установить одинаковое значение во всех выделенных строках.
	Если Элементы.ПривязкаКМетаданным.ВыделенныеСтроки.Количество() > 1 Тогда
		ИмяКолонки = "Событие";
		ТекущееЗначение = Элементы.ПривязкаКМетаданным.ТекущиеДанные[ИмяКолонки];
		Для Каждого ИндексСтроки Из Элементы.ПривязкаКМетаданным.ВыделенныеСтроки Цикл
			Объект.ПривязкаКМетаданным[ИндексСтроки][ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымПоказыватьВФормеОбъектаПриИзменении(Элемент)

	// Если выделено несколько строк, то установить одинаковое значение во всех выделенных строках.
	Если Элементы.ПривязкаКМетаданным.ВыделенныеСтроки.Количество() > 1 Тогда
		ИмяКолонки = "ПоказыватьВФормеОбъекта";
		ТекущееЗначение = Элементы.ПривязкаКМетаданным.ТекущиеДанные[ИмяКолонки];
		Для Каждого ИндексСтроки Из Элементы.ПривязкаКМетаданным.ВыделенныеСтроки Цикл
			Объект.ПривязкаКМетаданным[ИндексСтроки][ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымЭтоПостояннаяНовостьПриИзменении(Элемент)

	// Если выделено несколько строк, то установить одинаковое значение во всех выделенных строках.
	Если Элементы.ПривязкаКМетаданным.ВыделенныеСтроки.Количество() > 1 Тогда
		ИмяКолонки = "ЭтоПостояннаяНовость";
		ТекущееЗначение = Элементы.ПривязкаКМетаданным.ТекущиеДанные[ИмяКолонки];
		Для Каждого ИндексСтроки Из Элементы.ПривязкаКМетаданным.ВыделенныеСтроки Цикл
			Объект.ПривязкаКМетаданным[ИндексСтроки][ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования <> Истина Тогда
		// Ничего не делать.
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПривязкаКМетаданнымПриАктивизацииСтроки(Элемент)

	Элементы.ПривязкаКМетаданнымФорма.СписокВыбора.Очистить();
	Элементы.ПривязкаКМетаданнымСобытие.СписокВыбора.Очистить();

	ТекущиеДанные = Элементы.ПривязкаКМетаданным.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		// ////? Неявные многократные вызовы сервера, если в таблице > 20 строк.
		НайденныеСтроки = ЭтаФорма.ТаблицаМетаданных.НайтиСтроки(Новый Структура("ИмяМетаданных", ТекущиеДанные.Метаданные));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.ПривязкаКМетаданнымФорма.СписокВыбора.ЗагрузитьЗначения(НайденныеСтроки[0].СписокФорм.ВыгрузитьЗначения());
			Элементы.ПривязкаКМетаданнымСобытие.СписокВыбора.ЗагрузитьЗначения(НайденныеСтроки[0].СписокСобытий.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗагрузитьФайлКакБинарныеДанные(Команда)

	Если Элементы.БинарныеДанные.ТекущиеДанные <> Неопределено Тогда
		АдресВХранилище = "";
		ИмяФайла = "";

		ОписаниеОповещенияПослеВыбораФайла = Новый ОписаниеОповещения(
			"ПослеЗагрузкиФайлаКакБинарныхДанных",
			ЭтаФорма,
			Новый Структура("ТекущаяСтрока", Элементы.БинарныеДанные.ТекущаяСтрока));

		НачатьПомещениеФайла(
			ОписаниеОповещенияПослеВыбораФайла, // ОписаниеОповещенияОЗавершении
			АдресВХранилище, // Адрес
			ИмяФайла, // НачальноеИмяФайла
			Истина, // Интерактивно
			ЭтаФорма.УникальныйИдентификатор // УникальныйИдентификаторФормы
		);

	Иначе
		ТекстОшибки = НСтр("ru='Выберите строку, куда помещать данные';uk='Виберіть рядок, куди поміщати дані'");
		ПоказатьПредупреждение(
			, // ОписаниеоповещенияОЗавершении
			ТекстОшибки, // ТекстПредупреждения
			0, // Таймаут
			НСтр("ru='Ошибка';uk='Помилка'") // Заголовок
		);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьУИН(Команда)

	Объект.УИННовости = СокрЛП(Новый УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьГиперссылку(Команда)

	Если Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаПростоТекстДля1С Тогда
		ИмяЭлементаТекстовогоДокумента = "ТекстНовостиДля1С";
		ПолеТекстовогоДокумента = Элементы.ТекстНовостиДля1С;
	ИначеЕсли Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаПростоТекстДляВнешнихИсточников Тогда
		ИмяЭлементаТекстовогоДокумента = "ТекстНовостиДляВнешнихИсточников";
		ПолеТекстовогоДокумента = Элементы.ТекстНовостиДляВнешнихИсточников;
	КонецЕсли;

	Если Команда.Имя = "КомандаВставитьГиперссылку" Тогда // Для внешних источников.
		// Вставить в ссылку и в текст одинаковые данные - их можно поменять в самом тексте.
		НачалоСтроки  = 0;
		НачалоКолонки = 0;
		КонецСтроки   = 0;
		КонецКолонки  = 0;
		ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		ТекстДляВставки = "<a href=""%Ссылка%"" title=""Переход по ссылке"">%Ссылка%</a>";
		ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "%Ссылка%", ПолеТекстовогоДокумента.ВыделенныйТекст);
		ПолеТекстовогоДокумента.ВыделенныйТекст = ТекстДляВставки;
		ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, НачалоКолонки);

	ИначеЕсли Команда.Имя = "КомандаВставитьСуществующуюГиперссылку" Тогда
		// В точку ввода в элемент ТекстНовостиДля1С вставить текст выбранной гиперссылки.
		СписокГиперссылок = Новый СписокЗначений;
		Для каждого ТекущееДействие Из Объект.Действия Цикл
			СписокГиперссылок.Добавить(ТекущееДействие.УИНДействия, СокрЛП(ТекущееДействие.УИНДействия) + " (" + ТекущееДействие.Действие + ")");
		КонецЦикла;
		ОписаниеОповещенияОВыбореИзМеню = Новый ОписаниеОповещения(
			"ПослеВыбораСуществующейГиперссылки",
			ЭтаФорма,
			Новый Структура("ИмяЭлементаТекстовогоДокумента", ИмяЭлементаТекстовогоДокумента));
		ЭтаФорма.ПоказатьВыборИзМеню(ОписаниеОповещенияОВыбореИзМеню, СписокГиперссылок, ПолеТекстовогоДокумента);

	ИначеЕсли Команда.Имя = "КомандаВставитьНовуюГиперссылку" Тогда
		СписокУИНДействий = Новый СписокЗначений;
		Для каждого ТекущаяСтрока Из Объект.Действия Цикл
			СписокУИНДействий.Добавить(ТекущаяСтрока.УИНДействия);
		КонецЦикла;
		ОписаниеОповещенияПослеВводаНовойГиперссылки = Новый ОписаниеОповещения(
			"ПослеВводаНовойГиперссылки",
			ЭтаФорма,
			Новый Структура("ИмяЭлементаТекстовогоДокумента", ИмяЭлементаТекстовогоДокумента));
		ОткрытьФорму(
			"Справочник.Новости.Форма.ФормаВводаГиперссылки",
			Новый Структура("СписокУИНДействий, ТаблицаМетаданных",
				СписокУИНДействий,
				ЭтаФорма.ТаблицаМетаданных),
			ЭтаФорма,
			"", // Уникальность
			, // Окно
			, // НавигационнаяСсылка
			ОписаниеОповещенияПослеВводаНовойГиперссылки,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьКартинку(Команда)

	Если Команда.Имя = "КомандаВставитьКартинкуPNGКакКод" Тогда
		лкИмяФайла = "*.png";
		лкВыбранноеИмяФайла = "*.png";
		лкФорматКартинки = "png";
	ИначеЕсли Команда.Имя = "КомандаВставитьКартинкуJPGКакКод" Тогда
		лкИмяФайла = "*.jpg";
		лкВыбранноеИмяФайла = "*.jpg";
		лкФорматКартинки = "jpeg";
	ИначеЕсли Команда.Имя = "КомандаВставитьКартинкуGIFКакКод" Тогда
		лкИмяФайла = "*.gif";
		лкВыбранноеИмяФайла = "*.gif";
		лкФорматКартинки = "gif";
	Иначе
		Возврат;
	КонецЕсли;

	// 1. Получить файл (или картинку из конфигурации?).
	АдресВХранилище = "";
	ИмяФайла = "";

	ОписаниеОповещенияПослеЗагрузкиВнедреннойКартинки = Новый ОписаниеОповещения(
		"ПослеЗагрузкиВнедреннойКартинки",
		ЭтаФорма,
		Новый Структура("ФорматКартинки", лкФорматКартинки));

	НачатьПомещениеФайла(
		ОписаниеОповещенияПослеЗагрузкиВнедреннойКартинки, // ОписаниеОповещенияОЗавершении
		АдресВХранилище, // Адрес
		ИмяФайла, // НачальноеИмяФайла
		Истина, // Интерактивно
		ЭтаФорма.УникальныйИдентификатор // УникальныйИдентификаторФормы
	);

КонецПроцедуры

#Область ФорматированиеHTML

&НаКлиенте
Процедура КомандаВставитьТеги(Команда)

	// ////! Что еще можно добавить:
	// strong     - акцентированный (но не em);
	// small      - немного уменьшенный;
	// big        - немного увеличенный;
	// acronym    - акроним (с подсказкой);
	// var        - переменная для кода программы;
	// samp       - результат вывода компьютерной программы;
	// listing    - исходный код программы;
	// ul, li     - простой список;
	// ol, li     - нумерованный список.

	Если Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаПростоТекстДля1С Тогда
		ПолеТекстовогоДокумента = Элементы.ТекстНовостиДля1С;
		РедактируемыйТекст = Объект.ТекстНовости; // Переопределение
	ИначеЕсли Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаПростоТекстДляВнешнихИсточников Тогда
		ПолеТекстовогоДокумента = Элементы.ТекстНовостиДляВнешнихИсточников;
		РедактируемыйТекст = Объект.ТекстНовостиДляВнешнихИсточников;
	КонецЕсли;

	НачалоСтроки   = 0;
	НачалоКолонки  = 0;
	КонецСтроки    = 0;
	КонецКолонки   = 0;
	ДлинаИзменения = 0;
	ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

	Если Команда.Имя = "КомандаВставитьТег_РазрывСтроки" Тогда
		ПолеТекстовогоДокумента.ВыделенныйТекст = "<br/>";
		ДлинаИзменения = 5;
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ГоризонтальнаяЛиния" Тогда
		ПолеТекстовогоДокумента.ВыделенныйТекст = "<hr/>";
		ДлинаИзменения = 5;
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_Жирный" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "b", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_Курсив" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "i", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_Подчеркнутый" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "u", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_Зачеркнутый" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "s", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ВерхнийИндекс" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "sup", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_НижнийИндекс" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "sub", , ДлинаИзменения);
	ИначеЕсли Найти(ВРег(Команда.Имя), ВРег("КомандаВставитьТег_Заголовок")) = 1 Тогда // 1..6
		Если Команда.Имя = "КомандаВставитьТег_Заголовок1" Тогда
			Тег = "h1";
		ИначеЕсли Команда.Имя = "КомандаВставитьТег_Заголовок2" Тогда
			Тег = "h2";
		ИначеЕсли Команда.Имя = "КомандаВставитьТег_Заголовок3" Тогда
			Тег = "h3";
		ИначеЕсли Команда.Имя = "КомандаВставитьТег_Заголовок4" Тогда
			Тег = "h4";
		ИначеЕсли Команда.Имя = "КомандаВставитьТег_Заголовок5" Тогда
			Тег = "h5";
		ИначеЕсли Команда.Имя = "КомандаВставитьТег_Заголовок6" Тогда
			Тег = "h6";
		КонецЕсли;
		// Для каждой строки применить форматирование, выделение расширить до начала первой и конца последней строки.
		Для С=НачалоСтроки По КонецСтроки Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(РедактируемыйТекст, С);
			НачалоКолонки = 1;
			КонецКолонки  = СтрДлина(ТекущаяСтрока) + 1;
			ПолеТекстовогоДокумента.УстановитьГраницыВыделения(С, НачалоКолонки, С, КонецКолонки);
			ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, Тег, , ДлинаИзменения);
		КонецЦикла;
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ДлиннаяЦитата" Тогда
		// Выделение расширить до начала первой строки и конца последней строки.
		НачалоКолонки = 1;
		ПоследняяСтрока = СтрПолучитьСтроку(РедактируемыйТекст, КонецСтроки);
		КонецКолонки  = СтрДлина(ПоследняяСтрока) + 1;
		ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "blockquote", , ДлинаИзменения);
		// Для тегов, расширяемых на всю строку, не надо уменьшать позицию окончания выделения - она должна остаться в конце строки.
		Если ДлинаИзменения < 0 Тогда
			ДлинаИзменения = 0;
		КонецЕсли;
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_КороткаяЦитата" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "q", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ИсточникЦитаты" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "cite", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ВводСКлавиатуры" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "kbd", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ПрограммныйКод" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "code", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_АкцентированныйТекст" Тогда
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "em", , ДлинаИзменения);
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ВыравниваниеВлево" Тогда
		// ////? Найти тег <p> или <div> или добавить <p> с атрибутом <p style="text-align: left;"></p>.
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ВыравниваниеВправо" Тогда
		// ////? Найти тег <p> или <div> или добавить <p> с атрибутом <p style="text-align: right;"></p>.
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ВыравниваниеПоЦентру" Тогда
		// ////? Найти тег <p> или <div> или добавить <p> с атрибутом <p style="text-align: center;"></p>.
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_ВыравниваниеПоШирине" Тогда
		// ////? Найти тег <p> или <div> или добавить <p> с атрибутом <p style="text-align: justify;"></p>.
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_Параграф" Тогда
		// ////? Настроить параметры текста - выравнивание, отступы, цвет текста, цвет фона, всплывающая подсказка.
		// ////? Вставлять <p> для каждой строки или одним куском (как div)?
		// Для каждой строки применить форматирование, выделение расширить до начала и конца строки.
		Для С=НачалоСтроки По КонецСтроки Цикл
			ТекущаяСтрока = СтрПолучитьСтроку(РедактируемыйТекст, С);
			НачалоКолонки = 1;
			КонецКолонки  = СтрДлина(ТекущаяСтрока) + 1;
			ПолеТекстовогоДокумента.УстановитьГраницыВыделения(С, НачалоКолонки, С, КонецКолонки);
			ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "p", , ДлинаИзменения);
		КонецЦикла;
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_БлокDIV" Тогда
		// ////? Настроить параметры текста - выравнивание, отступы, цвет текста, цвет фона, всплывающая подсказка.
		// Выделение расширить до начала первой строки и конца последней строки.
		НачалоКолонки = 1;
		ПоследняяСтрока = СтрПолучитьСтроку(РедактируемыйТекст, КонецСтроки);
		КонецКолонки  = СтрДлина(ПоследняяСтрока) + 1;
		ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "div", , ДлинаИзменения);
		// Для тегов, расширяемых на всю строку, не надо уменьшать позицию окончания выделения - она должна остаться в конце строки.
		Если ДлинаИзменения < 0 Тогда
			ДлинаИзменения = 0;
		КонецЕсли;
	ИначеЕсли Команда.Имя = "КомандаВставитьТег_БлокSPAN" Тогда
		// ////? Настроить параметры текста - цвет текста, цвет фона, всплывающая подсказка.
		ВставитьУдалитьТег(ПолеТекстовогоДокумента.ВыделенныйТекст, "span", , ДлинаИзменения);
	КонецЕсли;

	ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки + ДлинаИзменения);

КонецПроцедуры

&НаКлиенте
// Процедура вставляет или удаляет обрамление тегами для выделенного текста.
//
// Параметры:
// ВыделенныйТекст - Строка - в этом параметре хранится выделенный текст, который необходимо изменить;
// ТегНачала       - Строка - тег начала;
// ТегОкончания    - Строка - тег окончания. Если не задан, то равен тегу начала;
// ДлинаИзменения  - Число  - В этот параметр будет возвращена разница между размером выделения до и после изменения.
//
Процедура ВставитьУдалитьТег(ВыделенныйТекст, ТегНачала, ТегОкончания = "", ДлинаИзменения = 0)

	// В начальном теге могут содержаться атрибуты, необходимо предусмотреть этот вариант.
	ГдеНачало = Найти(ВыделенныйТекст, "<" + ТегНачала);
	Если ГдеНачало > 0 Тогда
		Для С=ГдеНачало По СтрДлина(ВыделенныйТекст) Цикл
			Если Сред(ВыделенныйТекст, С, 1) = ">" Тогда
				лкТегНачала = Сред(ВыделенныйТекст, ГдеНачало, С-ГдеНачало+1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(лкТегНачала) Тогда
		лкТегНачала = "<" + ТегНачала + ">";
	КонецЕсли;
	Если ПустаяСтрока(ТегОкончания) Тогда
		лкТегОкончания = "</" + ТегНачала + ">";
	Иначе
		лкТегОкончания = "</" + ТегОкончания + ">";
	КонецЕсли;
	ДлинаТегов = СтрДлина(лкТегНачала) + СтрДлина(лкТегОкончания);

	Добавить = Истина;
	// Если этот тег уже стоит, то удалить. Иначе - добавить.
	// Также необходимо анализировать, что открывающий тег может содержать атрибуты.
	Если (СтрДлина(ВыделенныйТекст) >= СтрДлина(лкТегНачала)) И (СтрДлина(ВыделенныйТекст) >= СтрДлина(лкТегОкончания)) Тогда
		Если (ВРег(Лев(ВыделенныйТекст, СтрДлина(лкТегНачала))) = ВРег(лкТегНачала))
				И (ВРег(Прав(ВыделенныйТекст, СтрДлина(лкТегОкончания))) = ВРег(лкТегОкончания)) Тогда
			Добавить = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Добавить = Истина Тогда
		ВыделенныйТекст = лкТегНачала + ВыделенныйТекст + лкТегОкончания;
		ДлинаИзменения  = ДлинаТегов;
	Иначе
		ВыделенныйТекст = Сред(ВыделенныйТекст, СтрДлина(лкТегНачала)+1, СтрДлина(ВыделенныйТекст) - СтрДлина(лкТегНачала) - СтрДлина(лкТегОкончания));
		ДлинаИзменения  = -ДлинаТегов;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область БуферОбмена

&НаКлиенте
Процедура КомандаБуферОбмена_Копировать(Команда)

	Если ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_КатегорииПростые")
			ИЛИ ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_КатегорииИнтервалыВерсий")
			ИЛИ ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_ПривязкаКМетаданным")
			ИЛИ ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_БинарныеДанные")
			Тогда

		Если ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_КатегорииПростые") Тогда
			ТекущийБуферОбмена = ЭтаФорма.ТекущийБуферОбмена_КатегорииПростые;
			ЭлементФормы = Элементы.КатегорииПростые;
			КлючОбъекта = "Документы.Новости.КатегорииПростые";
		ИначеЕсли ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_КатегорииИнтервалыВерсий") Тогда
			ТекущийБуферОбмена = ЭтаФорма.ТекущийБуферОбмена_КатегорииИнтервалыВерсий;
			ЭлементФормы = Элементы.КатегорииИнтервалыВерсий;
			КлючОбъекта = "Документы.Новости.КатегорииИнтервалыВерсий";
		ИначеЕсли ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_ПривязкаКМетаданным") Тогда
			ТекущийБуферОбмена = ЭтаФорма.ТекущийБуферОбмена_ПривязкаКМетаданным;
			ЭлементФормы = Элементы.ПривязкаКМетаданным;
			КлючОбъекта = "Документы.Новости.ПривязкаКМетаданным";
		ИначеЕсли ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_БинарныеДанные") Тогда
			ТекущийБуферОбмена = ЭтаФорма.ТекущийБуферОбмена_БинарныеДанные;
			ЭлементФормы = Элементы.БинарныеДанные;
			КлючОбъекта = "Документы.Новости.БинарныеДанные";
		КонецЕсли;

		Если ЭлементФормы.ВыделенныеСтроки.Количество() > 0 Тогда
			ТекущийБуферОбмена.Очистить();
			Для каждого ТекущаяВыделеннаяСтрока Из ЭлементФормы.ВыделенныеСтроки Цикл
				СтруктураДанных = ОбработкаНовостейКлиентСервер.ПолучитьСтруктуруПолейБуфераОбмена(КлючОбъекта);
				ЗаполнитьЗначенияСвойств(СтруктураДанных, ЭлементФормы.ДанныеСтроки(ТекущаяВыделеннаяСтрока));
				ТекущийБуферОбмена.Добавить(СтруктураДанных);
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Скопировано строк: %ТекущийБуферОбмена.Количество()%';uk='Скопійовано рядків: %ТекущийБуферОбмена.Количество()%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийБуферОбмена.Количество()%", ТекущийБуферОбмена.Количество());
			ПоказатьОповещениеПользователя(ТекстСообщения, , , БиблиотекаКартинок.ИнформацияБСП);
			// Оповещение, чтобы другие открытые формы тоже заполнили свои буферы обмена.
			Оповестить(
				"БуферОбмена: скопировано значение",
				ТекущийБуферОбмена,
				Новый Структура("Ссылка, КлючОбъекта", Объект.Ссылка, КлючОбъекта));
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Выделите хотя бы одну строку';uk='Виділіть хоча б один рядок'"), , , БиблиотекаКартинок.Внимание);
		КонецЕсли;

	ИначеЕсли ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Копировать_Действия") Тогда

		ТекущийБуферОбмена = ЭтаФорма.ТекущийБуферОбмена_Действия;
		ЭлементФормы = Элементы.Действия;
		КлючОбъекта = "Документы.Новости.Действия";

		Если ЭлементФормы.ВыделенныеСтроки.Количество() > 0 Тогда
			ТекущийБуферОбмена.Очистить();
			Для каждого ТекущаяВыделеннаяСтрока Из ЭлементФормы.ВыделенныеСтроки Цикл
				СтруктураДанных = ОбработкаНовостейКлиентСервер.ПолучитьСтруктуруПолейБуфераОбмена(КлючОбъекта);
				ЗаполнитьЗначенияСвойств(СтруктураДанных, ЭлементФормы.ДанныеСтроки(ТекущаяВыделеннаяСтрока));
				// Параметры действий.
				СписокПараметровДействий = Новый СписокЗначений;
				НайденныеПараметрыДействий = Объект.ПараметрыДействий.НайтиСтроки(Новый Структура("УИНДействия", ЭлементФормы.ДанныеСтроки(ТекущаяВыделеннаяСтрока).УИНДействия));
				Для каждого ТекущийПараметрДействия Из НайденныеПараметрыДействий Цикл
					СтруктураДанныхПараметрДействия = ОбработкаНовостейКлиентСервер.ПолучитьСтруктуруПолейБуфераОбмена("Документы.Новости.ПараметрыДействий");
					ЗаполнитьЗначенияСвойств(СтруктураДанныхПараметрДействия, ТекущийПараметрДействия);
					СписокПараметровДействий.Добавить(СтруктураДанныхПараметрДействия);
				КонецЦикла;
				СтруктураДанных.ПараметрыДействий = СписокПараметровДействий;
				ТекущийБуферОбмена.Добавить(СтруктураДанных);
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Скопировано строк: %ТекущийБуферОбмена.Количество()%';uk='Скопійовано рядків: %ТекущийБуферОбмена.Количество()%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийБуферОбмена.Количество()%", ТекущийБуферОбмена.Количество());
			ПоказатьОповещениеПользователя(ТекстСообщения, , , БиблиотекаКартинок.ИнформацияБСП);
			// Оповещение, чтобы другие открытые формы тоже заполнили свои буферы обмена.
			Оповестить(
				"БуферОбмена: скопировано значение",
				ТекущийБуферОбмена,
				Новый Структура("Ссылка, КлючОбъекта", Объект.Ссылка, КлючОбъекта));
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Выделите хотя бы одну строку';uk='Виділіть хоча б один рядок'"), , , БиблиотекаКартинок.Внимание);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаБуферОбмена_Вставить(Команда)

	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");

	Если ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_КатегорииПростые")
			ИЛИ Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_КатегорииПростые_")) = 1 Тогда // Начинается с ...
		ИмяТекущегоБуфераОбмена = "КатегорииПростые";
		КлючОбъекта = "Документы.Новости." + ИмяТекущегоБуфераОбмена;
		ЭлементФормы = Элементы[ИмяТекущегоБуфераОбмена];
		ДанныеФормы  = ЭтаФорма[ИмяТекущегоБуфераОбмена];
		Если Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_")) = 1 Тогда // Текущий буфер обмена
			ДанныеБуфераОбмена = ЭтаФорма["ТекущийБуферОбмена_" + ИмяТекущегоБуфераОбмена];
		ИначеЕсли Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_")) = 1 Тогда // Сохраненный буфер обмена
			СписокКлючейНастроек = ЭтаФорма["СохраненныеБуферыОбмена_" + ИмяТекущегоБуфераОбмена];
			НайденныйКлючНастроек = СписокКлючейНастроек.НайтиПоЗначению(Прав(Команда.Имя, 3));
			Если НайденныйКлючНастроек <> Неопределено Тогда
				ДанныеБуфераОбмена = ПолучитьДанныеСохраненногоБуфераОбмена(КлючОбъекта, НайденныйКлючНастроек.Представление);
			Иначе
				ДанныеБуфераОбмена = Новый СписокЗначений;
			КонецЕсли;
		КонецЕсли;

		Если ДанныеБуфераОбмена.Количество() > 0 Тогда
			Для каждого ТекущаяСкопированнаяСтрока Из ДанныеБуфераОбмена Цикл
				Если ТипЗнч(ТекущаяСкопированнаяСтрока.Значение) = ТипСтруктура Тогда
					НоваяСтрока = ДанныеФормы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСкопированнаяСтрока.Значение);
					// Выполнить действия после окончания редактирования, но перед этим необходимо установить текущую строку.
					ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					КатегорииПростыеПриОкончанииРедактирования(
						Неопределено, // Элемент,
						Истина, // НоваяСтрока,
						Ложь // ОтменаРедактирования
					);
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Вставлено строк: %ДанныеБуфераОбмена.Количество()%';uk='Вставлено рядків: %ДанныеБуфераОбмена.Количество()%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеБуфераОбмена.Количество()%", ДанныеБуфераОбмена.Количество());
			ПоказатьОповещениеПользователя(ТекстСообщения, , , БиблиотекаКартинок.ИнформацияБСП);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Нет данных в буфере обмена.';uk='Немає даних в буфері обміну.'"), , НСтр("ru='Вначале скопируйте строки.';uk='Спочатку скопіюйте рядки.'"), БиблиотекаКартинок.Внимание);
		КонецЕсли;

	ИначеЕсли ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_КатегорииИнтервалыВерсий")
			ИЛИ Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_КатегорииИнтервалыВерсий_")) = 1 Тогда // Начинается с ...
		ИмяТекущегоБуфераОбмена = "КатегорииИнтервалыВерсий";
		КлючОбъекта = "Документы.Новости." + ИмяТекущегоБуфераОбмена;
		ЭлементФормы = Элементы[ИмяТекущегоБуфераОбмена];
		ДанныеФормы  = ЭтаФорма[ИмяТекущегоБуфераОбмена];
		Если Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_")) = 1 Тогда // Текущий буфер обмена
			ДанныеБуфераОбмена = ЭтаФорма["ТекущийБуферОбмена_" + ИмяТекущегоБуфераОбмена];
		ИначеЕсли Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_")) = 1 Тогда // Сохраненный буфер обмена
			СписокКлючейНастроек = ЭтаФорма["СохраненныеБуферыОбмена_" + ИмяТекущегоБуфераОбмена];
			НайденныйКлючНастроек = СписокКлючейНастроек.НайтиПоЗначению(Прав(Команда.Имя, 3));
			Если НайденныйКлючНастроек <> Неопределено Тогда
				ДанныеБуфераОбмена = ПолучитьДанныеСохраненногоБуфераОбмена(КлючОбъекта, НайденныйКлючНастроек.Представление);
			Иначе
				ДанныеБуфераОбмена = Новый СписокЗначений;
			КонецЕсли;
		КонецЕсли;

		Если ДанныеБуфераОбмена.Количество() > 0 Тогда
			Для каждого ТекущаяСкопированнаяСтрока Из ДанныеБуфераОбмена Цикл
				Если ТипЗнч(ТекущаяСкопированнаяСтрока.Значение) = ТипСтруктура Тогда
					НоваяСтрока = ДанныеФормы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСкопированнаяСтрока.Значение);
					// Выполнить действия после окончания редактирования, но перед этим необходимо установить текущую строку.
					ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					КатегорииИнтервалыВерсийПриОкончанииРедактирования(
						Неопределено, // Элемент,
						Истина, // НоваяСтрока,
						Ложь // ОтменаРедактирования
					);
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Вставлено строк: %ДанныеБуфераОбмена.Количество()%';uk='Вставлено рядків: %ДанныеБуфераОбмена.Количество()%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеБуфераОбмена.Количество()%", ДанныеБуфераОбмена.Количество());
			ПоказатьОповещениеПользователя(ТекстСообщения, , , БиблиотекаКартинок.ИнформацияБСП);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Нет данных в буфере обмена.';uk='Немає даних в буфері обміну.'"), , НСтр("ru='Вначале скопируйте строки.';uk='Спочатку скопіюйте рядки.'"), БиблиотекаКартинок.Внимание);
		КонецЕсли;

	ИначеЕсли ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_ПривязкаКМетаданным")
			ИЛИ Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_ПривязкаКМетаданным_")) = 1 Тогда // Начинается с ...
		ИмяТекущегоБуфераОбмена = "ПривязкаКМетаданным";
		КлючОбъекта = "Документы.Новости." + ИмяТекущегоБуфераОбмена;
		ЭлементФормы = Элементы[ИмяТекущегоБуфераОбмена];
		ДанныеФормы  = Объект[ИмяТекущегоБуфераОбмена];
		Если Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_")) = 1 Тогда // Текущий буфер обмена
			ДанныеБуфераОбмена = ЭтаФорма["ТекущийБуферОбмена_" + ИмяТекущегоБуфераОбмена];
		ИначеЕсли Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_")) = 1 Тогда // Сохраненный буфер обмена
			СписокКлючейНастроек = ЭтаФорма["СохраненныеБуферыОбмена_" + ИмяТекущегоБуфераОбмена];
			НайденныйКлючНастроек = СписокКлючейНастроек.НайтиПоЗначению(Прав(Команда.Имя, 3));
			Если НайденныйКлючНастроек <> Неопределено Тогда
				ДанныеБуфераОбмена = ПолучитьДанныеСохраненногоБуфераОбмена(КлючОбъекта, НайденныйКлючНастроек.Представление);
			Иначе
				ДанныеБуфераОбмена = Новый СписокЗначений;
			КонецЕсли;
		КонецЕсли;

		Если ДанныеБуфераОбмена.Количество() > 0 Тогда
			Для каждого ТекущаяСкопированнаяСтрока Из ДанныеБуфераОбмена Цикл
				Если ТипЗнч(ТекущаяСкопированнаяСтрока.Значение) = ТипСтруктура Тогда
					НоваяСтрока = ДанныеФормы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСкопированнаяСтрока.Значение);
					// Выполнить действия после окончания редактирования, но перед этим необходимо установить текущую строку.
					ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					ПривязкаКМетаданнымПриОкончанииРедактирования(
						Неопределено, // Элемент,
						Истина, // НоваяСтрока,
						Ложь // ОтменаРедактирования
					);
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Вставлено строк: %ДанныеБуфераОбмена.Количество()%';uk='Вставлено рядків: %ДанныеБуфераОбмена.Количество()%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеБуфераОбмена.Количество()%", ДанныеБуфераОбмена.Количество());
			ПоказатьОповещениеПользователя(ТекстСообщения, , , БиблиотекаКартинок.ИнформацияБСП);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Нет данных в буфере обмена.';uk='Немає даних в буфері обміну.'"), , НСтр("ru='Вначале скопируйте строки.';uk='Спочатку скопіюйте рядки.'"), БиблиотекаКартинок.Внимание);
		КонецЕсли;

	ИначеЕсли ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_БинарныеДанные")
			ИЛИ Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_БинарныеДанные_")) = 1 Тогда // Начинается с ...
		ИмяТекущегоБуфераОбмена = "БинарныеДанные";
		КлючОбъекта = "Документы.Новости." + ИмяТекущегоБуфераОбмена;
		ЭлементФормы = Элементы[ИмяТекущегоБуфераОбмена];
		ДанныеФормы  = Объект[ИмяТекущегоБуфераОбмена];
		Если Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_")) = 1 Тогда // Текущий буфер обмена
			ДанныеБуфераОбмена = ЭтаФорма["ТекущийБуферОбмена_" + ИмяТекущегоБуфераОбмена];
		ИначеЕсли Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_")) = 1 Тогда // Сохраненный буфер обмена
			СписокКлючейНастроек = ЭтаФорма["СохраненныеБуферыОбмена_" + ИмяТекущегоБуфераОбмена];
			НайденныйКлючНастроек = СписокКлючейНастроек.НайтиПоЗначению(Прав(Команда.Имя, 3));
			Если НайденныйКлючНастроек <> Неопределено Тогда
				ДанныеБуфераОбмена = ПолучитьДанныеСохраненногоБуфераОбмена(КлючОбъекта, НайденныйКлючНастроек.Представление);
			Иначе
				ДанныеБуфераОбмена = Новый СписокЗначений;
			КонецЕсли;
		КонецЕсли;

		Если ДанныеБуфераОбмена.Количество() > 0 Тогда
			Для каждого ТекущаяСкопированнаяСтрока Из ДанныеБуфераОбмена Цикл
				Если ТипЗнч(ТекущаяСкопированнаяСтрока.Значение) = ТипСтруктура Тогда
					НоваяСтрока = ДанныеФормы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСкопированнаяСтрока.Значение);
					// Выполнить действия после окончания редактирования, но перед этим необходимо установить текущую строку.
					ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					БинарныеДанныеПриОкончанииРедактирования(
						Неопределено, // Элемент,
						Истина, // НоваяСтрока,
						Ложь // ОтменаРедактирования
					);
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Вставлено строк: %ДанныеБуфераОбмена.Количество()%';uk='Вставлено рядків: %ДанныеБуфераОбмена.Количество()%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеБуфераОбмена.Количество()%", ДанныеБуфераОбмена.Количество());
			ПоказатьОповещениеПользователя(ТекстСообщения, , , БиблиотекаКартинок.ИнформацияБСП);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Нет данных в буфере обмена.';uk='Немає даних в буфері обміну.'"), , НСтр("ru='Вначале скопируйте строки.';uk='Спочатку скопіюйте рядки.'"), БиблиотекаКартинок.Внимание);
		КонецЕсли;

	ИначеЕсли ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_Действия")
			ИЛИ Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_Действия_")) = 1 Тогда // Начинается с ...
		ИмяТекущегоБуфераОбмена = "Действия";
		КлючОбъекта = "Документы.Новости." + ИмяТекущегоБуфераОбмена;
		ЭлементФормы = Элементы[ИмяТекущегоБуфераОбмена];
		ДанныеФормы  = Объект[ИмяТекущегоБуфераОбмена];
		Если Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_")) = 1 Тогда // Текущий буфер обмена
			ДанныеБуфераОбмена = ЭтаФорма["ТекущийБуферОбмена_" + ИмяТекущегоБуфераОбмена];
		ИначеЕсли Найти(ВРег(Команда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_")) = 1 Тогда // Сохраненный буфер обмена
			СписокКлючейНастроек = ЭтаФорма["СохраненныеБуферыОбмена_" + ИмяТекущегоБуфераОбмена];
			НайденныйКлючНастроек = СписокКлючейНастроек.НайтиПоЗначению(Прав(Команда.Имя, 3));
			Если НайденныйКлючНастроек <> Неопределено Тогда
				ДанныеБуфераОбмена = ПолучитьДанныеСохраненногоБуфераОбмена(КлючОбъекта, НайденныйКлючНастроек.Представление);
			Иначе
				ДанныеБуфераОбмена = Новый СписокЗначений;
			КонецЕсли;
		КонецЕсли;

		Если ДанныеБуфераОбмена.Количество() > 0 Тогда
			Для каждого ТекущаяСкопированнаяСтрока Из ДанныеБуфераОбмена Цикл
				Если ТипЗнч(ТекущаяСкопированнаяСтрока.Значение) = ТипСтруктура Тогда
					НоваяСтрока = ДанныеФормы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСкопированнаяСтрока.Значение);
					// Параметры действий.
					Если (ТекущаяСкопированнаяСтрока.Значение.Свойство("ПараметрыДействий"))
							И ТипЗнч(ТекущаяСкопированнаяСтрока.Значение.ПараметрыДействий) = ТипСписокЗначений Тогда
						Для каждого ТекущийПараметрДействия Из ТекущаяСкопированнаяСтрока.Значение.ПараметрыДействий Цикл
							НоваяСтрокаПараметрДействий = Объект.ПараметрыДействий.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаПараметрДействий, ТекущийПараметрДействия.Значение);
							НоваяСтрокаПараметрДействий.УИНДействия = НоваяСтрока.УИНДействия;
						КонецЦикла;
					КонецЕсли;
					// Выполнить действия после окончания редактирования, но перед этим необходимо установить текущую строку.
					ЭлементФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					ДействияПриОкончанииРедактирования(
						Неопределено, // Элемент,
						Истина, // НоваяСтрока,
						Ложь // ОтменаРедактирования
					);
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Вставлено строк: %ДанныеБуфераОбмена.Количество()%';uk='Вставлено рядків: %ДанныеБуфераОбмена.Количество()%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеБуфераОбмена.Количество()%", ДанныеБуфераОбмена.Количество());
			ПоказатьОповещениеПользователя(ТекстСообщения, , , БиблиотекаКартинок.ИнформацияБСП);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Нет данных в буфере обмена.';uk='Немає даних в буфері обміну.'"), , НСтр("ru='Вначале скопируйте строки.';uk='Спочатку скопіюйте рядки.'"), БиблиотекаКартинок.Внимание);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаБуферОбмена_Настроить(Команда)

	Если ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Настроить_КатегорииПростые")
			ИЛИ ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Настроить_КатегорииИнтервалыВерсий")
			ИЛИ ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Настроить_ПривязкаКМетаданным")
			ИЛИ ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Настроить_БинарныеДанные")
			ИЛИ ВРег(Команда.Имя) = ВРег("КомандаБуферОбмена_Настроить_Действия")
			Тогда

		лкИмяБуфера = СтрЗаменить(Команда.Имя, "КомандаБуферОбмена_Настроить_", "");
		ПараметрыОткрытияФормы = ПодготовитьПараметрыОткрытияФормыНастроекБуфераОбмена(лкИмяБуфера);

		ОткрытьФорму(
			"ХранилищеНастроек.БуферыОбменаНовостей.Форма.ФормаУправленияБуферамиОбмена",
			ПараметрыОткрытияФормы,
			ЭтаФорма,
			"",
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаОткрытьФормуКонтекстнойНовости(Команда)

	Если Элементы.ПривязкаКМетаданным.ТекущиеДанные <> Неопределено Тогда

		// Новость надо сохранить?
		Если ЭтаФорма.Модифицированность Тогда
			Записать(Новый Структура("АвтоматическаяЗапись", Истина));
		КонецЕсли;

		// Получить и открыть форму.
		ИмяФормыПроверкиНовости = СокрЛП(Элементы.ПривязкаКМетаданным.ТекущиеДанные.Метаданные) + ".Форма." + СокрЛП(Элементы.ПривязкаКМетаданным.ТекущиеДанные.Форма);
		Попытка
			ФормаНовости = ОткрытьФорму(ИмяФормыПроверкиНовости, , ЭтаФорма);
		Исключение
			ТекстОшибки = НСтр("ru='Форма %ИмяФормыПроверкиНовости% не обнаружена.
                |Возможно, для описания формы использованы не имена в метаданных, а другой текст,
                |	либо неправильно введены идентификаторы метаданных и / или формы.
                |Для проверки новости необходимо открыть форму вручную или исправить значения в колонках.'
                |;uk='Форма %ИмяФормыПроверкиНовости% не виявлена.
                |Можливо, для опису форми використані не імена в метаданих, а інший текст,
                |або неправильно введені ідентифікатори метаданих та / або форми.
                |Для перевірки новости необхідно відкрити форму вручну або виправити значення у колонках.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяФормыПроверкиНовости%", ИмяФормыПроверкиНовости);
			ПоказатьПредупреждение(
				, // ОписаниеоповещенияОЗавершении
				ТекстОшибки, // ТекстПредупреждения
				0, // Таймаут
				НСтр("ru='Предупреждение';uk='Попередження'") // Заголовок
			);
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьАвтоОтборСтрокПараметровДействий(Команда)

	ЭтаФорма.АвтоОтборСтрокПараметровДействий = НЕ ЭтаФорма.АвтоОтборСтрокПараметровДействий;
	Элементы.ПараметрыДействийКомандаИзменитьАвтоОтборСтрокПараметровДействий.Пометка = ЭтаФорма.АвтоОтборСтрокПараметровДействий;
	Элементы.ПараметрыДействий.ОтборСтрок = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВсеВозможныеКатегории(Команда)

	Если Команда.Имя = "КомандаДобавитьВсеВозможныеКатегорииПростые" Тогда
		Для каждого ТекущаяКатегория Из ЭтаФорма.ДоступныеКатегорииПростые Цикл
			НоваяСтрока = ЭтаФорма.КатегорииПростые.Добавить();
			НоваяСтрока.КатегорияНовостей = ТекущаяКатегория.Значение;
			НоваяСтрока.УсловиеОтбора = "eq";
		КонецЦикла;
	ИначеЕсли Команда.Имя = "КомандаДобавитьВсеВозможныеКатегорииИнтервалыВерсий" Тогда
		Для каждого ТекущаяКатегория Из ЭтаФорма.ДоступныеКатегорииИнтервалыВерсий Цикл
			НоваяСтрока = ЭтаФорма.КатегорииИнтервалыВерсий.Добавить();
			НоваяСтрока.КатегорияНовостей = ТекущаяКатегория.Значение;
			Если ТекущаяКатегория.Значение = ЭтаФорма.КатегорияВерсияПродукта Тогда
				НоваяСтрока.Продукт                      = ЭтаФорма.Продукт;
				НоваяСтрока.ВерсияОТ                     = ЭтаФорма.ВерсияПродукта;
				НоваяСтрока.ВерсияДО                     = ЭтаФорма.ВерсияПродукта;
				НоваяСтрока.ПредставлениеИнтервалаВерсий = ОбработкаНовостейКлиентСервер.ПолучитьУдобочитаемоеПредставлениеИнтервалаВерсий(НоваяСтрока.ВерсияОТ, НоваяСтрока.ВерсияДО);
			ИначеЕсли ТекущаяКатегория.Значение = ЭтаФорма.КатегорияВерсияПлатформы Тогда
				НоваяСтрока.Продукт                      = "Platform";
				НоваяСтрока.ВерсияОТ                     = ЭтаФорма.ВерсияПлатформы;
				НоваяСтрока.ВерсияДО                     = ЭтаФорма.ВерсияПлатформы;
				НоваяСтрока.ПредставлениеИнтервалаВерсий = ОбработкаНовостейКлиентСервер.ПолучитьУдобочитаемоеПредставлениеИнтервалаВерсий(НоваяСтрока.ВерсияОТ, НоваяСтрока.ВерсияДО);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьПримерыНовости(Команда)

	Если Команда.Имя = "КомандаОбновитьПримерНовостиДля1С" Тогда
		ОбновитьПримерыНовостейКлиент();
	ИначеЕсли Команда.Имя = "КомандаОбновитьПримерНовостиДляВнешнихИсточников" Тогда
		ОбновитьПримерыНовостейКлиент();
	КонецЕсли;

КонецПроцедуры

#Область ГиперссылкиДействий

&НаКлиенте
Процедура КомандаГиперссылкаДействия(Команда)

	ШаблонИмениКоманды = "КомандаГиперссылкаДействий_";
	ПолеТекстовогоДокумента = Элементы.ТекстНовостиДля1С;

	Если Найти(ВРег(Команда.Имя), ВРег(ШаблонИмениКоманды)) = 1 Тогда
		ИдентификаторКоманды = Число(Прав(Команда.Имя, 3));
		НайденнаяСтрока = Объект.Действия.НайтиПоИдентификатору(ИдентификаторКоманды);
		Если НайденнаяСтрока <> Неопределено Тогда
			НачалоСтроки  = 0;
			НачалоКолонки = 0;
			КонецСтроки   = 0;
			КонецКолонки  = 0;
			ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
			ТекстДляВставки = "<a href=""%УИНДействия%"" title=""Переход по ссылке"">%ТекстГиперссылки%</a>";
			ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "%УИНДействия%", НайденнаяСтрока.УИНДействия);
			Если ПустаяСтрока(ПолеТекстовогоДокумента.ВыделенныйТекст) Тогда
				ТекстГиперссылки = НСтр("ru='Нажмите здесь';uk='Натисніть тут'");
			Иначе
				ТекстГиперссылки = ПолеТекстовогоДокумента.ВыделенныйТекст;
			КонецЕсли;
			ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "%ТекстГиперссылки%", ТекстГиперссылки);
			ПолеТекстовогоДокумента.ВыделенныйТекст = ТекстДляВставки;
			ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, НачалоКолонки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(лкФорма)

	лкЭлементы = лкФорма.Элементы;
	лкОбъект   = лкФорма.Объект;

	КоличествоПривязокКМетаданным = лкОбъект.ПривязкаКМетаданным.Количество();
	КоличествоНеважныхПривязокКМетаданным = лкОбъект.ПривязкаКМетаданным.НайтиСтроки(Новый Структура("Важность", 0)).Количество();

	Если лкОбъект.Важность = 0 Тогда
		лкЭлементы.ДатаСбросаВажности.Доступность = Ложь;
		Если ((КоличествоПривязокКМетаданным - КоличествоНеважныхПривязокКМетаданным) > 0)
				ИЛИ (лкОбъект.ПриОткрытииСразуПереходитьПоСсылке = Истина) Тогда
			// Есть важные привязки к метаданным.
			лкЭлементы.АвтоСбросНапоминанияПриПрочтении.Доступность = Истина;
		Иначе
			лкЭлементы.АвтоСбросНапоминанияПриПрочтении.Доступность = Ложь;
		КонецЕсли;
	Иначе // >0
		лкЭлементы.ДатаСбросаВажности.Доступность = Истина;
		лкЭлементы.АвтоСбросНапоминанияПриПрочтении.Доступность = Истина;
	КонецЕсли;

	// Несмотря на то, что если новость никогда не открывается для просмотра, а сразу осуществляется переход по ссылке,
	//  и тексты (и все, что с ними связано - бинарные данные, гиперссылки) редактировать не нужно,
	//  НО новость все равно будет видна в окне предпросмотра  списка новостей.
	// Поэтому никакие страницы блокировать не будем, а только выведется сообщение.
	лкЭлементы.ДекорацияПриОткрытииСразуПереходитьПоСсылке.Видимость = лкОбъект.ПриОткрытииСразуПереходитьПоСсылке;

КонецПроцедуры

// Обновляет все информационные строки.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьИнформационныеСтроки()

	лкИтоговыйРазмерБинарныхДанных = Объект.БинарныеДанные.Итог("ДанныеРазмер");
	лкТекст = НСтр("ru='Размер всех бинарных данных: %РазмерБинарныхДанных% байт
        |Примерный размер новости (включая текст новости): %ОбщийРазмер% байт
        |%Предупреждение%'
        |;uk='Розмір всіх бінарних даних: %РазмерБинарныхДанных% байт
        |Приблизний розмір новини (включаючи текст новости): %ОбщийРазмер% байт
        |%Предупреждение%'");
	лкТекст = СтрЗаменить(лкТекст, "%РазмерБинарныхДанных%", лкИтоговыйРазмерБинарныхДанных);
	лкТекст = СтрЗаменить(лкТекст, "%ОбщийРазмер%", лкИтоговыйРазмерБинарныхДанных + Макс(СтрДлина(Объект.ТекстНовости), СтрДлина(Объект.ТекстНовостиДляВнешнихИсточников)));

	Если Объект.БинарныеДанные.Итог("ДанныеРазмер") > 50000 Тогда
		лкТекст = СтрЗаменить(лкТекст, "%Предупреждение%", НСтр("ru='Новости большого размера могут замедлить работу программы на платформе 1С';uk='Новини великого розміру можуть сповільнити роботу програми на платформі 1С'"));
		Элементы.ДекорацияБинарныеДанныеИтог.ЦветТекста = ЭтаФорма.ЦветаСтиля_ЦветОсобогоТекста;
	Иначе
		лкТекст = СтрЗаменить(лкТекст, "%Предупреждение%", "");
		Элементы.ДекорацияБинарныеДанныеИтог.ЦветТекста = ЭтаФорма.ЦветаСтиля_ЦветМикротекста;
	КонецЕсли;

	Элементы.ДекорацияБинарныеДанныеИтог.Заголовок = лкТекст;

КонецПроцедуры

&НаСервере
// Процедура заполняет добавленные колонки.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого ТекущаяСтрока Из Объект.Действия Цикл
		// Гиперссылка действия
		лкТекстГиперссылки = "<a href=""%УИНДействия%"" title=""Переход по ссылке"">здесь</a>";
		лкТекстГиперссылки = СтрЗаменить(лкТекстГиперссылки, "%УИНДействия%", ТекущаяСтрока.УИНДействия);
		ТекущаяСтрока.ТекстГиперссылки = лкТекстГиперссылки;

		// Количество параметров
		ИмяЕдинственногоПараметра = "";
		Если ТекущаяСтрока.Действие = "Переход по навигационной ссылке" Тогда // один параметр с именем "Навигационная ссылка".
			ТекущаяСтрока.КоличествоПараметров = 1;
			ИмяЕдинственногоПараметра = "Навигационная ссылка";
		ИначеЕсли ТекущаяСтрока.Действие = "Оповещение" Тогда // 3 параметра: "ИмяСобытия" (обязательный), "Параметр", "Источник".
			ТекущаяСтрока.КоличествоПараметров = 3;
		ИначеЕсли ТекущаяСтрока.Действие = "Открытие раздела справки" Тогда // один параметр с именем "Раздел справки".
			ТекущаяСтрока.КоличествоПараметров = 1;
			ИмяЕдинственногоПараметра = "Раздел справки";
		ИначеЕсли ТекущаяСтрока.Действие = "Запуск процедуры с параметрами" Тогда // Неизвестное количество.
			ТекущаяСтрока.КоличествоПараметров = 9999;
		ИначеЕсли ТекущаяСтрока.Действие = "Переход по интернет ссылке" Тогда // один параметр с именем "URL".
			ТекущаяСтрока.КоличествоПараметров = 1;
			ИмяЕдинственногоПараметра = "URL";
		ИначеЕсли ТекущаяСтрока.Действие = "Показать картинку" Тогда // параметров с именем "УИН" может быть много.
			ТекущаяСтрока.КоличествоПараметров = 9999;
		ИначеЕсли ТекущаяСтрока.Действие = "Открытие новости" Тогда // Два параметра: "УИННовости", "ЛентаНовостей".
			ТекущаяСтрока.КоличествоПараметров = 2;
		Иначе
			ТекущаяСтрока.КоличествоПараметров = 0;
		КонецЕсли;

		// Значение единственного параметра.
		НайденныеСтроки = Объект.ПараметрыДействий.НайтиСтроки(
			Новый Структура("УИНДействия, Параметр",
				ТекущаяСтрока.УИНДействия,
				ИмяЕдинственногоПараметра));
		Если НайденныеСтроки.Количество() > 0 Тогда // Взять первый.
			ТекущаяСтрока.ЕдинственноеЗначениеПараметра = НайденныеСтроки[0].ЗначениеПараметра;
		КонецЕсли;
	КонецЦикла;

	Для каждого ТекущаяСтрока Из Объект.ПривязкаКМетаданным Цикл
		ТекущаяСтрока.ДатаСбросаВажностиМестная =
			?(ТекущаяСтрока.ДатаСбросаВажности = '00010101',
				'00010101',
				МестноеВремя(ТекущаяСтрока.ДатаСбросаВажности, ЧасовойПояс()));
	КонецЦикла;

	// Данные картинок.

	// Хранилище значения недоступно на клиенте, его надо получать / сохранять в объекте на сервере, ...
	лкОбъект = РеквизитФормыВЗначение("Объект");
	Если Объект.БинарныеДанные.Количество() = лкОбъект.БинарныеДанные.Количество() Тогда
		Для С=0 По Объект.БинарныеДанные.Количество()-1 Цикл
			ДвоичныеДанные = лкОбъект.БинарныеДанные[С].Данные.Получить();
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				Объект.БинарныеДанные[С].ДанныеСтрока64 = Base64Строка(ДвоичныеДанные);
				Объект.БинарныеДанные[С].ДанныеРазмер   = ДвоичныеДанные.Размер();
			КонецЕсли;
		КонецЦикла;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось загрузить бинарные данные (не совпадает количество строк в форме и в объекте). При сохранении они будут утеряны. Рекомендуется закрыть / открыть форму новости без сохранения';uk='Не вдалося завантажити двійкові дані (не збігається кількість рядків у формі і в об''єкті). При збереженні вони будуть втрачені. Рекомендовано закрити / відкрити форму новини без збереження'");
		Сообщение.Сообщить();
	КонецЕсли;

	// Заполнить колонку "ПредставлениеИнтервалаВерсий" реквизита ЭтаФорма.КатегорииИнтервалыВерсий.
	ЗаполнитьПредставлениеИнтервалаВерсий(Неопределено);

КонецПроцедуры

&НаСервере
Функция ПолучитьТекстНовостиХТМЛДля1С();

	Возврат Справочники.Новости.ПолучитьХТМЛТекстНовостей(Объект);

КонецФункции

&НаСервере
Функция ПолучитьТекстНовостиХТМЛДляВнешнихИсточников();

	Возврат Справочники.Новости.ПолучитьХТМЛТекстНовостейДляВнешнихИсточников(Объект);

КонецФункции

&НаКлиенте
// Процедура проверяет Категории на ошибки и неточности.
//
// Параметры:
//  Нет.
//
Процедура ПроверитьКатегорииНаОшибки()

	// ////? ПроверитьКатегорииНаОшибки().

КонецПроцедуры

&НаСервере
// Заполняет реквизиты РазрешенныеКатегорииПростые и РазрешенныеКатегорииИнтервалыВерсий из разрешенных категорий ленты новостей.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьДоступныеКатегорииДляЛентыНовостейСервер()

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|// Интервалы версий
		|ВЫБРАТЬ
		|	Спр.КатегорияНовостей.Ссылка КАК КатегорияНовостей
		|ИЗ
		|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
		|ГДЕ
		|	Спр.КатегорияНовостей.ТипЗначенияВспомогательный = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта)
		|	И Спр.Ссылка = &ЛентаНовостей
		|УПОРЯДОЧИТЬ ПО
		|	Спр.КатегорияНовостей.Наименование
		|;
		|
		|// Все, кроме интервалов версий
		|ВЫБРАТЬ
		|	Спр.КатегорияНовостей.Ссылка КАК КатегорияНовостей
		|ИЗ
		|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
		|ГДЕ
		|	Спр.КатегорияНовостей.ТипЗначенияВспомогательный <> ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта)
		|	И Спр.Ссылка = &ЛентаНовостей
		|УПОРЯДОЧИТЬ ПО
		|	Спр.КатегорияНовостей.Наименование
		|";
	Запрос.УстановитьПараметр("ЛентаНовостей", Объект.ЛентаНовостей);

	Результаты = Запрос.ВыполнитьПакет();

	МассивКатегорий_ИнтервалыВерсий = Новый Массив;
	Если НЕ Результаты[0].Пустой() Тогда
		МассивКатегорий_ИнтервалыВерсий = Результаты[0].Выгрузить().ВыгрузитьКолонку("КатегорияНовостей");
		ЭтаФорма.ДоступныеКатегорииИнтервалыВерсий.ЗагрузитьЗначения(МассивКатегорий_ИнтервалыВерсий);
	Иначе
		ЭтаФорма.ДоступныеКатегорииИнтервалыВерсий.Очистить();
	КонецЕсли;

	МассивКатегорий_Простые = Новый Массив;
	Если НЕ Результаты[1].Пустой() Тогда
		МассивКатегорий_Простые = Результаты[1].Выгрузить().ВыгрузитьКолонку("КатегорияНовостей");
		ЭтаФорма.ДоступныеКатегорииПростые.ЗагрузитьЗначения(МассивКатегорий_Простые);
	Иначе
		ЭтаФорма.ДоступныеКатегорииПростые.Очистить();
	КонецЕсли;

	// Жестко установить параметры выбора.
	// Простые категории.
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивКатегорий_Простые));
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.КатегорииПростыеКатегорияНовостей.ПараметрыВыбора = НовыеПараметры;
	// Если нет категорий, то заблокировать ввод новых строк.
	Если МассивКатегорий_Простые.Количество() = 0 Тогда
		Элементы.КатегорииПростые.ТолькоПросмотр = Истина;
		Элементы.ГруппаКатегорииПростые.Доступность = Ложь;
		Элементы.ГруппаКатегорииПростые.Заголовок = НСтр("ru='Простые категории (недоступно, так как для этой ленты новостей не включены отборы по простым категориям)';uk='Прості категорії (недоступна, так як для цієї стрічки новин не включені відбори за простими категоріями)'");
	Иначе
		Элементы.КатегорииПростые.ТолькоПросмотр = Ложь;
		Элементы.ГруппаКатегорииПростые.Доступность = Истина;
		Элементы.ГруппаКатегорииПростые.Заголовок = НСтр("ru='Простые категории';uk='Прості категорії'");
	КонецЕсли;

	// Категории интервалов версий.
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивКатегорий_ИнтервалыВерсий));
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.КатегорииИнтервалыВерсийКатегорияНовостей.ПараметрыВыбора = НовыеПараметры;
	// Если нет категорий, то заблокировать ввод новых строк.
	Если МассивКатегорий_ИнтервалыВерсий.Количество() = 0 Тогда
		Элементы.КатегорииИнтервалыВерсий.ТолькоПросмотр = Истина;
		Элементы.ГруппаКатегорииИнтервалыВерсий.Доступность = Ложь;
		Элементы.ГруппаКатегорииИнтервалыВерсий.Заголовок = НСтр("ru='Привязка к версиям (недоступна, так как для этой ленты новостей не включены отборы по версиям)';uk='Прив''язка до версій (недоступна, так як для цієї стрічки новин не включені відбори за версіями)'");
	Иначе
		Элементы.КатегорииИнтервалыВерсий.ТолькоПросмотр = Ложь;
		Элементы.ГруппаКатегорииИнтервалыВерсий.Доступность = Истина;
		Элементы.ГруппаКатегорииИнтервалыВерсий.Заголовок = НСтр("ru='Привязка к версиям';uk='Прив''язка до версій'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Заполняет колонку ПредставлениеИнтервалаВерсий для реквизита формы КатегорииИнтервалыВерсий.
//
// Параметры:
//  ИдентификаторСтроки - Число - идентификатор строки или Неопределено, если надо заполнить наименование для всех строк.
//
Процедура ЗаполнитьПредставлениеИнтервалаВерсий(ИдентификаторСтроки)

	Если ИдентификаторСтроки = Неопределено Тогда
		Для каждого ТекущаяСтрока Из ЭтаФорма.КатегорииИнтервалыВерсий Цикл
			ЗаполнитьПредставлениеИнтервалаВерсий(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЦикла;
	Иначе
		ТекущаяСтрока = ЭтаФорма.КатегорииИнтервалыВерсий.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущаяСтрока.ПредставлениеИнтервалаВерсий = ОбработкаНовостейКлиентСервер.ПолучитьУдобочитаемоеПредставлениеИнтервалаВерсий(ТекущаяСтрока.ВерсияОТ, ТекущаяСтрока.ВерсияДО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обновляет HTML-представления новостей (примеры) для новости для 1С и для внешних источников.
//
// Параметры:
//  Нет
//
Процедура ОбновитьПримерыНовостейКлиент()

	Если ПустаяСтрока(Объект.ТекстНовости) Тогда
		ЭтаФорма.ПримерНовостиДля1С = ПолучитьТекстНовостиХТМЛДляВнешнихИсточников();
	Иначе
		ЭтаФорма.ПримерНовостиДля1С = ПолучитьТекстНовостиХТМЛДля1С();
	КонецЕсли;
	Если ПустаяСтрока(Объект.ТекстНовостиДляВнешнихИсточников) Тогда
		ЭтаФорма.ПримерНовостиДляВнешнихИсточников = ЭтаФорма.ПримерНовостиДля1С;
	Иначе
		ЭтаФорма.ПримерНовостиДляВнешнихИсточников = ПолучитьТекстНовостиХТМЛДляВнешнихИсточников();
	КонецЕсли;

	Если ПустаяСтрока(Объект.ТекстНовостиДляВнешнихИсточников) Тогда
		ЭтаФорма.ПримерНовостиДляВнешнихИсточников = ЭтаФорма.ПримерНовостиДля1С;
	КонецЕсли;
	Если ПустаяСтрока(Объект.ТекстНовости) Тогда
		ЭтаФорма.ПримерНовостиДля1С = ЭтаФорма.ПримерНовостиДляВнешнихИсточников;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура загружает файл в текущую строку.
// 
// Параметры:
//  АдресВХранилище     - Строка;
//  ИдентификаторСтроки - Число.
//
Процедура ВставитьБинарныеДанныеИзФайлаСервер(АдресВХранилище, ИдентификаторСтроки)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);

	// Хранилище значения недоступно на клиенте, его надо сохранять в объекте на сервере,
	//  а вот добавленный реквизит-колонка ДанныеСтрока64 недоступен на сервере.
	НайденнаяСтрока = Объект.БинарныеДанные.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ДанныеСтрока64 = Base64Строка(ДвоичныеДанные);
		НайденнаяСтрока.ДанныеРазмер   = ДвоичныеДанные.Размер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает добавление новой гиперссылки.
//
// Параметры:
//  РезультатЗакрытия       - Произвольный - Результат, с которым закрылась форма ввода гиперссылки;
//  ДополнительныеПараметры - Произвольный - Произвольные дополнительные параметры.
//
Процедура ПослеВводаНовойГиперссылки(РезультатЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт

	ТипСтруктура = Тип("Структура");

	ПолеТекстовогоДокумента = Элементы[ДополнительныеПараметры.ИмяЭлементаТекстовогоДокумента];

	Если ТипЗнч(РезультатЗакрытия) = ТипСтруктура Тогда
		// Если это переход по интернет-ссылке, то не добавлять новую ссылку, а вставить напрямую.
		Если ВРег(РезультатЗакрытия.Действие) = ВРег("Переход по интернет ссылке") Тогда
			// Добавить гиперссылку в текст.
			НачалоСтроки  = 0;
			НачалоКолонки = 0;
			КонецСтроки   = 0;
			КонецКолонки  = 0;
			ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

			лкВыделенныйТекст = ПолеТекстовогоДокумента.ВыделенныйТекст;
			Если ПустаяСтрока(лкВыделенныйТекст) Тогда
				лкВыделенныйТекст = НСтр("ru='Нажмите здесь';uk='Натисніть тут'");
			КонецЕсли;

			ПолеТекстовогоДокумента.ВыделенныйТекст =
				"<a href=""" + РезультатЗакрытия.ИнтернетСсылка + """ title=""" + РезультатЗакрытия.ВсплывающаяПодсказка + """>"
				+ лкВыделенныйТекст
				+ "</a>";

			ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, НачалоКолонки);

		Иначе
			// Добавить / обновить новую гиперссылку в табличные части Действия и ПараметрыДействия.
			// Вначале попробуем найти существующую гиперссылку.
			НайденныеСтроки = Объект.Действия.НайтиСтроки(Новый Структура("УИНДействия", РезультатЗакрытия.УИНДействия));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрокаДействия = НайденныеСтроки[0];
			Иначе
				НайденнаяСтрокаДействия = Объект.Действия.Добавить();
				НайденнаяСтрокаДействия.УИНДействия = РезультатЗакрытия.УИНДействия;
			КонецЕсли;
			НайденнаяСтрокаДействия.Действие = РезультатЗакрытия.Действие;
			ДействияДействиеПриИзменении(Элементы.ДействияДействие);
			// Изменим ее параметры.
			НайденныеСтроки = Объект.ПараметрыДействий.НайтиСтроки(Новый Структура("УИНДействия", РезультатЗакрытия.УИНДействия));
			// Вначале удалим все ранее введенные параметры.
			Для каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				ЭтаФорма.Объект.ПараметрыДействий.Удалить(ТекущаяСтрока);
			КонецЦикла;
			// Теперь добавим параметры заново.
			Если ВРег(РезультатЗакрытия.Действие) = ВРег("Переход по навигационной ссылке") Тогда
				НоваяСтрока = ЭтаФорма.Объект.ПараметрыДействий.Добавить();
				НоваяСтрока.УИНДействия = РезультатЗакрытия.УИНДействия;
				НоваяСтрока.Параметр = "Навигационная ссылка";
				НоваяСтрока.ЗначениеПараметра = РезультатЗакрытия.НавигационнаяСсылка;
			ИначеЕсли ВРег(РезультатЗакрытия.Действие) = ВРег("Открытие раздела справки") Тогда
				НоваяСтрока = ЭтаФорма.Объект.ПараметрыДействий.Добавить();
				НоваяСтрока.УИНДействия = РезультатЗакрытия.УИНДействия;
				НоваяСтрока.Параметр = "Раздел справки";
				НоваяСтрока.ЗначениеПараметра = РезультатЗакрытия.РазделСправки;
			ИначеЕсли ВРег(РезультатЗакрытия.Действие) = ВРег("Переход по интернет ссылке") Тогда
				// Вставилось раньше, напрямую (href=), без подмены на механизмы новостей.
			ИначеЕсли ВРег(РезультатЗакрытия.Действие) = ВРег("Показать картинку") Тогда
				// Добавить картинку.
				// Придумать уникальный идентификатор и вставить картинку.
				Для С=1 По 999 Цикл
					ИдентификаторКартинки = "image" + Формат(С, "ЧЦ=3; ЧВН=; ЧГ=0");
					НайденныеСтроки = Объект.БинарныеДанные.НайтиСтроки(Новый Структура("УИН", ИдентификаторКартинки));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрокаКартинки = Объект.БинарныеДанные.Добавить(); // ДанныеФормыЭлементКоллекции
						НоваяСтрокаКартинки.УИН            = ИдентификаторКартинки;
						НоваяСтрокаКартинки.Заголовок      = РезультатЗакрытия.КартинкаЗаголовок;
						НоваяСтрокаКартинки.ИнтернетСсылка = "";
						// Этой колонки Данные (типа ХранилищеЗначения) нет на стороне клиента.
						// НоваяСтрокаКартинки.Данные         = ""; // Хранилище значения, заполнится при серверном вызове ПередЗаписьюНаСервере из ДанныеСтрока64.
						НоваяСтрокаКартинки.ДанныеСтрока64 = РезультатЗакрытия.КартинкаДанные;
						НоваяСтрокаКартинки.ДанныеРазмер   = РезультатЗакрытия.КартинкаРазмер;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				// Добавить ссылку на картинку.
				НоваяСтрока = ЭтаФорма.Объект.ПараметрыДействий.Добавить();
				НоваяСтрока.УИНДействия = РезультатЗакрытия.УИНДействия;
				НоваяСтрока.Параметр = "УИН";
				НоваяСтрока.ЗначениеПараметра = ИдентификаторКартинки;
			ИначеЕсли ВРег(РезультатЗакрытия.Действие) = ВРег("Открытие новости") Тогда
				// ////? Пока не обрабатывается "Открытие новости".
			КонецЕсли;
			// Добавить гиперссылку в текст.
			НачалоСтроки  = 0;
			НачалоКолонки = 0;
			КонецСтроки   = 0;
			КонецКолонки  = 0;
			ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

			лкВыделенныйТекст = ПолеТекстовогоДокумента.ВыделенныйТекст;
			Если ПустаяСтрока(лкВыделенныйТекст) Тогда
				лкВыделенныйТекст = НСтр("ru='Нажмите здесь';uk='Натисніть тут'");
			КонецЕсли;

			ПолеТекстовогоДокумента.ВыделенныйТекст =
				"<a href=""" + РезультатЗакрытия.УИНДействия + """ title=""" + РезультатЗакрытия.ВсплывающаяПодсказка + """>"
				+ лкВыделенныйТекст
				+ "</a>";

			ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, НачалоКолонки);
		КонецЕсли;
		// После успешного добавления гиперссылки перерисовать подменю добавления гиперссылок.
		ОбновитьПодменюВставкиГиперссылокДействий();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает выбор из меню существующей гиперссылки.
//
// Параметры:
//  ВыбранныйЭлемент        - Выбранное значение из меню или Неопределено - выбранное значение;
//  ДополнительныеПараметры - произвольный - Произвольные дополнительные параметры.
//
Процедура ПослеВыбораСуществующейГиперссылки(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт

	ПолеТекстовогоДокумента = ЭтаФорма.Элементы[ДополнительныеПараметры.ИмяЭлементаТекстовогоДокумента];

	Если ВыбранныйЭлемент <> Неопределено Тогда
		НачалоСтроки  = 0;
		НачалоКолонки = 0;
		КонецСтроки   = 0;
		КонецКолонки  = 0;
		ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		ТекстДляВставки = "<a href=""%УИНДействия%"" title=""Переход по ссылке"">%ТекстГиперссылки%</a>";
		ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "%УИНДействия%", ВыбранныйЭлемент.Значение);
		Если ПустаяСтрока(ПолеТекстовогоДокумента.ВыделенныйТекст) Тогда
			ТекстГиперссылки = НСтр("ru='Нажмите здесь';uk='Натисніть тут'");
		Иначе
			ТекстГиперссылки = ПолеТекстовогоДокумента.ВыделенныйТекст;
		КонецЕсли;
		ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "%ТекстГиперссылки%", ТекстГиперссылки);
		ПолеТекстовогоДокумента.ВыделенныйТекст = ТекстДляВставки;
		ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, НачалоКолонки);
	КонецЕсли;

КонецПроцедуры

#Область ФорматированиеHTML

&НаСервере
// Создает команды форматирования.
//
// Параметры:
//  Нет.
//
Процедура СоздатьКомандыФорматирования()

#Область ФорматированиеHTML_БлокиИРазрывы

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_РазрывСтроки");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Разрыв строки <br/>";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ГоризонтальнаяЛиния");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Горизонтальная линия <hr/>";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_Параграф");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Абзац <p></p>";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеСимволПараграфа;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.P, Истина, , Истина); // Alt+Shift+P

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_БлокDIV");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Блок для абзаца <div></div>";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.I, Истина, , Истина); // Alt+Shift+I

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_БлокSPAN");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Блок для текста внутри абзаца <span></span>";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.S, Истина, , Истина); // Alt+Shift+S

#КонецОбласти

#Область ФорматированиеHTML_ФорматШрифта

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_Жирный");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Жирный шрифт (<b></b>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеШрифтЖирный;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.B, , Истина); // Ctrl+B

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_Курсив");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Курсивный шрифт (<i></i>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеШрифтКурсив;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.I, , Истина); // Ctrl+I

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_Подчеркнутый");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Подчеркнутый шрифт (<u></u>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеШрифтПодчеркнутый;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.U, , Истина); // Ctrl+U

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_Зачеркнутый");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Зачеркнутый шрифт (<s></s>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеШрифтЗачеркнутый;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.D, Истина, , Истина); // Alt+Shift+D

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ВерхнийИндекс");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Верхний индекс (<sup></sup>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.NumAdd, , Истина); // Ctrl+Num+

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_НижнийИндекс");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Нижний индекс (<sub></sub>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.NumSubtract, , Истина); // Ctrl+Num-

#КонецОбласти

#Область ФорматированиеHTML_ФорматШрифта_Заголовки

	Для С=1 По 6 Цикл
		НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_Заголовок" + С);
		НоваяКоманда.Действие                  = "КомандаВставитьТеги";
		НоваяКоманда.Заголовок                 = "Заголовок " + С + " уровня (<h" + С + "></h" + С + ">)";
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
		НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
		НоваяКоманда.Картинка                  = БиблиотекаКартинок["ФорматированиеШрифтЗаголовок" + С];
		НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша["_" + С], Истина, Истина); // Ctrl+Alt+1..6
	КонецЦикла;

#КонецОбласти

#Область ФорматированиеHTML_ФорматАбзаца

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ВыравниваниеВлево");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Выравнивание влево"; // <p style="text-align: left;"></p>
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеАбзацВыравниваниеВлево;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.L, , Истина); // Ctrl+L

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ВыравниваниеВправо");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Выравнивание вправо"; // <p style="text-align: right;"></p>
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеАбзацВыравниваниеВправо;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.R, , Истина); // Ctrl+R

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ВыравниваниеПоЦентру");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Выравнивание по центру"; // <p style="text-align: center;"></p>
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеАбзацВыравниваниеПоЦентру;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.E, , Истина); // Ctrl+E

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ВыравниваниеПоШирине");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Выравнивание по ширине"; // <p style="text-align: justify;"></p>
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.Картинка                  = БиблиотекаКартинок.ФорматированиеАбзацВыравниваниеПоШирине;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.J, , Истина); // Ctrl+J

#КонецОбласти

#Область ФорматированиеHTML_СтилиТекста

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ДлиннаяЦитата");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Длинная цитата (<blockquote></blockquote>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_КороткаяЦитата");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Короткая цитата (<q></q>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ИсточникЦитаты");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Источник цитаты (<cite></cite>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ВводСКлавиатуры");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Ввод с клавиатуры (<kbd></kbd>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
	НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.K, , Истина); // Ctrl+K

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_ПрограммныйКод");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Программный код (<code></code>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;

	НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаВставитьТег_АкцентированныйТекст");
	НоваяКоманда.Действие                  = "КомандаВставитьТеги";
	НоваяКоманда.Заголовок                 = "Акцентированный текст (<em></em>)";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;

#КонецОбласти

КонецПроцедуры

&НаСервере
// Создает подменю форматирования - в командной панели или в контекстном меню.
//
// Параметры:
//  Подменю - ЭлементФормы - элемент формы типа ГруппаФормы, в котором необходимо создать подменю форматирования;
//  Префикс - Строка - префикс для создаваемых элементов управления.
//
Процедура СоздатьПодменюФорматирования(Подменю, Префикс)

#Область ФорматированиеHTML_БлокиИРазрывы

	// Группа БлокиИРазрывы.
	ГруппаКоманд = Элементы.Добавить(Префикс + "Форматирование_ГруппаБлокиИРазрывы", Тип("ГруппаФормы"), Подменю);
	ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
	ГруппаКоманд.Заголовок = "Блоки и разрывы";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаБлокиИРазрывы_РазрывСтроки", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_РазрывСтроки";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаБлокиИРазрывы_ГоризонтальнаяЛиния", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_ГоризонтальнаяЛиния";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаБлокиИРазрывы_Параграф", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_Параграф";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаБлокиИРазрывы_БлокDIV", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_БлокDIV";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаБлокиИРазрывы_БлокSPAN", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_БлокSPAN";

#КонецОбласти

#Область ФорматированиеHTML_ФорматШрифта

	// Группа ФорматШрифта.
	ГруппаКоманд = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта", Тип("ГруппаФормы"), Подменю);
	ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
	ГруппаКоманд.Заголовок = "Формат шрифта";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта_Жирный", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_Жирный";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта_Курсив", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_Курсив";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта_Подчеркнутый", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_Подчеркнутый";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта_Зачеркнутый", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_Зачеркнутый";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта_ВерхнийИндекс", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_ВерхнийИндекс";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта_НижнийИндекс", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_НижнийИндекс";

#КонецОбласти

#Область ФорматированиеHTML_ФорматШрифта_Заголовки

	ГруппаКоманд = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта_Заголовки", Тип("ГруппаФормы"), Подменю);
	ГруппаКоманд.Вид = ВидГруппыФормы.Подменю; // Подменю, а не группа кнопок.
	ГруппаКоманд.Заголовок = "Заголовки";

	Для С=1 По 6 Цикл
		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ФорматШрифта_Заголовок" + С, Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_Заголовок" + С;
	КонецЦикла;

#КонецОбласти

#Область ФорматированиеHTML_ФорматАбзаца
#КонецОбласти

#Область ФорматированиеHTML_СтилиТекста

	// Группа СтилиТекста.
	ГруппаКоманд = Элементы.Добавить(Префикс + "Форматирование_ГруппаСтилиТекста", Тип("ГруппаФормы"), Подменю);
	ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
	ГруппаКоманд.Заголовок = "Стили текста";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаСтилиТекста_ДлиннаяЦитата", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_ДлиннаяЦитата";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаСтилиТекста_КороткаяЦитата", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_КороткаяЦитата";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаСтилиТекста_ИсточникЦитата", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_ИсточникЦитаты";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаСтилиТекста_ВводСКлавиатуры", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_ВводСКлавиатуры";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаСтилиТекста_ПрограммныйКод", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_ПрограммныйКод";

		НовыйЭлемент = Элементы.Добавить(Префикс + "Форматирование_ГруппаСтилиТекста_АкцентированныйТекст", Тип("КнопкаФормы"), ГруппаКоманд);
		НовыйЭлемент.ИмяКоманды = "КомандаВставитьТег_АкцентированныйТекст";

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область БуферОбмена

&НаСервере
// Создает общие команды буфера обмена (копировать, вставить, настроить) для всех возможных.
//
// Параметры:
//  МассивБуферовОбмена - Массив - массив строк с именами буферов обмена.
//
Процедура СоздатьКомандыБуфераОбмена(МассивБуферовОбмена)

	Для каждого ТекущийБуферОбмена Из МассивБуферовОбмена Цикл

		НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаБуферОбмена_Копировать_" + ТекущийБуферОбмена);
		НоваяКоманда.Действие                  = "КомандаБуферОбмена_Копировать";
		НоваяКоманда.Заголовок                 = "Копировать";
		НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
		НоваяКоманда.Отображение               = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка                 = НСтр("ru='Копировать выделенные строки в буфер обмена';uk='Копіювати виділені рядки в буфер обміну'");
		НоваяКоманда.Картинка                  = БиблиотекаКартинок.КатегорииКопировать;
		НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.C, Истина, Истина); // Ctrl+Alt+C

		НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаБуферОбмена_Настроить_" + ТекущийБуферОбмена);
		НоваяКоманда.Действие                  = "КомандаБуферОбмена_Настроить";
		НоваяКоманда.Заголовок                 = НСтр("ru='Управление сохраненными буферами обмена';uk='Управління збереженими буферами обміну'");
		НоваяКоманда.ИзменяетСохраняемыеДанные = Ложь;
		НоваяКоманда.Отображение               = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка                 = "Управление сохраненными раньше буферами обмена";
		НоваяКоманда.Картинка                  = БиблиотекаКартинок.НастройкиНовостей;

		НоваяКоманда = ЭтаФорма.Команды.Добавить("КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_" + ТекущийБуферОбмена);
		НоваяКоманда.Действие                  = "КомандаБуферОбмена_Вставить";
		НоваяКоманда.Заголовок                 = НСтр("ru='Вставить содержимое буфера обмена';uk='Вставити вміст буфера обміну'");
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		НоваяКоманда.Отображение               = ОтображениеКнопки.Картинка;
		НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
		НоваяКоманда.Картинка                  = БиблиотекаКартинок.КатегорииВставить;
		НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша.V, Истина, Истина); // Ctrl+Alt+V

	КонецЦикла;

	// Создать команды для сохраненных буфером обмена.
	СоздатьКомандыБуфераОбмена_СохраненныеБуферыОбмена(МассивБуферовОбмена);

КонецПроцедуры

&НаСервере
// Создает необходимые для хранения текущего буфера обмена реквизиты формы.
//
// Параметры:
//  МассивБуферовОбмена - Массив - массив строк с именами буферов обмена.
//
Процедура СоздатьРеквизитыТекущегоБуфераОбмена(МассивБуферовОбмена)

	ствНайденныеРеквизиты = Новый Соответствие;

	Для каждого ТекущийБуферОбмена Из МассивБуферовОбмена Цикл
		ствНайденныеРеквизиты.Вставить("Найден_" + ствНайденныеРеквизиты, Ложь);
	КонецЦикла;

	ВсеРеквизиты = ЭтаФорма.ПолучитьРеквизиты();
	Для каждого ТекущийРеквизит Из ВсеРеквизиты Цикл
		Для каждого ТекущийБуферОбмена Из МассивБуферовОбмена Цикл
			Если ВРег(ТекущийРеквизит.Имя) = ВРег("ТекущийБуферОбмена_" + ТекущийБуферОбмена) Тогда
				ствНайденныеРеквизиты.Вставить("Найден_" + ствНайденныеРеквизиты, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	МассивУдаляемыхРеквизитов = Новый Массив;
	Для каждого ТекущийБуферОбмена Из МассивБуферовОбмена Цикл
		Если ствНайденныеРеквизиты.Получить("Найден_" + ствНайденныеРеквизиты) = Истина Тогда
			МассивУдаляемыхРеквизитов.Добавить("ТекущийБуферОбмена_" + ТекущийБуферОбмена);
		КонецЕсли;
	КонецЦикла;

	МассивДобавляемыхРеквизитов = Новый Массив;

	Для каждого ТекущийБуферОбмена Из МассивБуферовОбмена Цикл
		МассивДобавляемыхРеквизитов.Добавить(
			Новый РеквизитФормы(
				"ТекущийБуферОбмена_" + ТекущийБуферОбмена,
				Новый ОписаниеТипов("СписокЗначений"),
				"",
				"",
				Ложь
			)
		);
	КонецЦикла;

	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы(
			"СписокБуферовОбмена",
			Новый ОписаниеТипов("СписокЗначений"),
			"",
			"",
			Ложь
		)
	);

	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);

	ЭтаФорма.СписокБуферовОбмена.ЗагрузитьЗначения(МассивБуферовОбмена);

КонецПроцедуры

&НаСервере
// Создает команды буфера обмена для вставки сохраненных ранее буферов обмена. Также создает некоторые необходимые реквизиты формы.
//
// Параметры:
//  МассивБуферовОбмена - Массив - массив строк с именами буферов обмена.
//
Процедура СоздатьКомандыБуфераОбмена_СохраненныеБуферыОбмена(МассивБуферовОбмена)

	Для каждого ТекущийБуферОбмена Из МассивБуферовОбмена Цикл

		// Создать реквизиты формы для всех сохраненных буферов обмена.
		Найден_УдаляемыйРеквизит = Ложь;
		ВсеРеквизиты = ЭтаФорма.ПолучитьРеквизиты();
		Для каждого ТекущийРеквизит Из ВсеРеквизиты Цикл
			Если ВРег(ТекущийРеквизит.Имя) = ВРег("СохраненныеБуферыОбмена_" + ТекущийБуферОбмена) Тогда
				Найден_УдаляемыйРеквизит = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		МассивУдаляемыхРеквизитов = Новый Массив;
		Если Найден_УдаляемыйРеквизит = Истина Тогда
			МассивУдаляемыхРеквизитов.Добавить("СохраненныеБуферыОбмена_" + ТекущийБуферОбмена);
		КонецЕсли;

		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(
			Новый РеквизитФормы(
				"СохраненныеБуферыОбмена_" + ТекущийБуферОбмена,
				Новый ОписаниеТипов("СписокЗначений"),
				"",
				"",
				Ложь
			)
		);
		ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);

		// Заполнить созданные реквизиты формы именами сохраненных буферов обмена.
		лкСписокСохраненных = ХранилищаНастроек.БуферыОбменаНовостей.ПолучитьСписок("Документы.Новости." + ТекущийБуферОбмена, "");
		ЭтаФорма["СохраненныеБуферыОбмена_" + ТекущийБуферОбмена].Очистить();
		С = 0;
		Для каждого ТекущийЭлементСписка Из лкСписокСохраненных Цикл
			// Значение - число в формате 999 (чтобы проще было искать).
			// Представление - КлючНастройки (строка, имя настройки).
			ЭтаФорма["СохраненныеБуферыОбмена_" + ТекущийБуферОбмена].Добавить(Формат(С, "ЧЦ=3; ЧДЦ=; ЧН=000; ЧВН=; ЧГ=0"), ТекущийЭлементСписка.Значение);
			С = С + 1;
		КонецЦикла;

		// Удалить ранее созданные команды для вставки сохраненных буферов обмена.
		БылиУдаления = Истина;
		Пока БылиУдаления = Истина Цикл
			БылиУдаления = Ложь;
			Для каждого ТекущаяКоманда Из ЭтаФорма.Команды Цикл
				Если Найти(ВРег(ТекущаяКоманда.Имя), ВРег("КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_" + ТекущийБуферОбмена + "_")) = 1 Тогда
					ЭтаФорма.Команды.Удалить(ТекущаяКоманда);
					БылиУдаления = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Создать команды заново.
		Для каждого ТекущийЭлементСписка Из ЭтаФорма["СохраненныеБуферыОбмена_" + ТекущийБуферОбмена] Цикл
			ИмяКоманды = "КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_" + ТекущийБуферОбмена + "_" + ТекущийЭлементСписка.Значение;
			НайденнаяКоманда = ЭтаФорма.Команды.Найти(ИмяКоманды);
			Если ТипЗнч(НайденнаяКоманда) = Тип("КомандаФормы") Тогда
				НоваяКоманда = НайденнаяКоманда; // Не удалилась?
			Иначе
				НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
			КонецЕсли;
			НоваяКоманда.Действие                  = "КомандаБуферОбмена_Вставить";
			НоваяКоманда.Заголовок                 = "Вставить из " + ТекущийЭлементСписка.Представление;
			НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
			НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
			НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
			НоваяКоманда.Картинка                  = БиблиотекаКартинок.КатегорииДобавить;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаСервере
// Создает подменю буферов обмена - в командной панели или в контекстном меню.
//
// Параметры:
//  Подменю     - ЭлементФормы - элемент формы типа ГруппаФормы, в котором необходимо создать подменю форматирования;
//  БуферОбмена - Строка - для этого буфера обмена необходимо создать подменю. Возможные значения: КатегорииПростые, КатегорииИнтервалыВерсий.
//
Процедура СоздатьПодменюБуфераОбмена(Подменю, БуферОбмена)

	НовыйЭлемент = Элементы.Добавить(БуферОбмена + "_БуферОбмена_Копировать", Тип("КнопкаФормы"), Подменю);
	НовыйЭлемент.ИмяКоманды = "КомандаБуферОбмена_Копировать_" + БуферОбмена;

	ГруппаКомандВставить = Элементы.Добавить(БуферОбмена + "_БуферОбмена_ВставитьПодменю", Тип("ГруппаФормы"), Подменю);
	ГруппаКомандВставить.Вид = ВидГруппыФормы.Подменю;
	ГруппаКомандВставить.Картинка    = БиблиотекаКартинок.КатегорииВставить;
	ГруппаКомандВставить.Отображение = ОтображениеКнопки.Картинка;
	ГруппаКомандВставить.Заголовок   = "Вставить";

		НовыйЭлемент = Элементы.Добавить(БуферОбмена + "_БуферОбмена_Вставить", Тип("КнопкаФормы"), ГруппаКомандВставить);
		НовыйЭлемент.ИмяКоманды = "КомандаБуферОбмена_Вставить_ТекущийБуферОбмена_" + БуферОбмена;

		ГруппаКомандВставитьСохраненный = Элементы.Добавить(БуферОбмена + "_БуферОбмена_ВставитьСохраненный", Тип("ГруппаФормы"), ГруппаКомандВставить);
		ГруппаКомандВставитьСохраненный.Вид = ВидГруппыФормы.ГруппаКнопок;
		ГруппаКомандВставитьСохраненный.Заголовок = "Вставить сохраненный";

		СоздатьПодменюБуфераОбмена_СохраненныеБуферыОбмена(ГруппаКомандВставитьСохраненный, БуферОбмена);

		НовыйЭлемент = Элементы.Добавить(БуферОбмена + "_БуферОбмена_Настроить", Тип("КнопкаФормы"), ГруппаКомандВставить);
		НовыйЭлемент.ИмяКоманды = "КомандаБуферОбмена_Настроить_" + БуферОбмена;

КонецПроцедуры

&НаСервере
// Создает подменю буферов обмена - в командной панели или в контекстном меню.
//
// Параметры:
//  Подменю     - ЭлементФормы - элемент формы типа ГруппаФормы, в котором необходимо создать подменю форматирования;
//  БуферОбмена - Строка - для этого буфера обмена необходимо создать подменю. Возможные значения: КатегорииПростые, КатегорииИнтервалыВерсий.
//
Процедура СоздатьПодменюБуфераОбмена_СохраненныеБуферыОбмена(Подменю, БуферОбмена)

	// Вначале удалить все ранее добавленные элементы.
	МассивУдаляемыхЭлементов = Новый Массив;
	Для каждого ТекущийЭлементФормы Из ЭтаФорма.Элементы Цикл
		Если Найти(ВРег(ТекущийЭлементФормы.Имя), ВРег(БуферОбмена + "_БуферОбмена_ВставитьСохраненный_")) = 1 Тогда // Начинается с ...
			МассивУдаляемыхЭлементов.Добавить(ТекущийЭлементФормы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекущийУдаляемыйЭлемент Из МассивУдаляемыхЭлементов Цикл
		ЭтаФорма.Элементы.Удалить(ТекущийУдаляемыйЭлемент);
	КонецЦикла;

	// Добавить заново.
	Для каждого ТекущийЭлементСписка Из ЭтаФорма["СохраненныеБуферыОбмена_" + БуферОбмена] Цикл
		НовыйЭлемент = Элементы.Добавить(
			БуферОбмена + "_БуферОбмена_ВставитьСохраненный_" + Формат(ТекущийЭлементСписка.Значение, "ЧЦ=3; ЧДЦ=; ЧН=000; ЧВН=; ЧГ=0"),
			Тип("КнопкаФормы"),
			Подменю);
		НовыйЭлемент.ИмяКоманды = "КомандаБуферОбмена_Вставить_СохраненныйБуферОбмена_" + БуферОбмена + "_" + Формат(ТекущийЭлементСписка.Значение, "ЧЦ=3; ЧДЦ=; ЧН=000; ЧВН=; ЧГ=0");
	КонецЦикла;

КонецПроцедуры

&НаСервере
// Перерисовывает подменю выбора сохраненных буферов обмена, создает все необходимые команды.
//
// Параметры:
//  БуферОбмена - Строка - для этого буфера обмена необходимо создать подменю. Возможные значения: КатегорииПростые, КатегорииИнтервалыВерсий.
//
Процедура ПерерисоватьПодменюВыбораСохраненныхБуферовОбмена(БуферОбмена)

	СоздатьКомандыБуфераОбмена_СохраненныеБуферыОбмена(ЭтаФорма.СписокБуферовОбмена.ВыгрузитьЗначения());
	СоздатьПодменюБуфераОбмена_СохраненныеБуферыОбмена(Элементы[БуферОбмена + "_БуферОбмена_ВставитьСохраненный"], БуферОбмена);

КонецПроцедуры

&НаКлиенте
// Подготавливает параметры для открытия формы настроек буфера обмена.
//
// Параметры:
//  БуферОбмена - Строка - Имя буфера обмена. Может быть КатегорииПростые или КатегорииИнтервалыВерсий.
//
// Возвращаемое значение:
//   Структура - Структура с данными.
//
Функция ПодготовитьПараметрыОткрытияФормыНастроекБуфераОбмена(БуферОбмена)

	ПараметрыОткрытияФормы = Новый Структура;

	Если ВРег(БуферОбмена) = ВРег("КатегорииПростые")
			ИЛИ ВРег(БуферОбмена) = ВРег("КатегорииИнтервалыВерсий")
			ИЛИ ВРег(БуферОбмена) = ВРег("ПривязкаКМетаданным")
			ИЛИ ВРег(БуферОбмена) = ВРег("БинарныеДанные")
			ИЛИ ВРег(БуферОбмена) = ВРег("Действия")
			Тогда
		Если ЭтаФорма["ТекущийБуферОбмена_" + БуферОбмена].Количество() <= 0 Тогда
			ДанныеТекущегоБуфераОбмена = Неопределено;
		Иначе
			ДанныеТекущегоБуфераОбмена = ЭтаФорма["ТекущийБуферОбмена_" + БуферОбмена];
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура("КлючОбъекта, ТекущийБуферОбмена, ТекущийПользователь",
			"Документы.Новости." + БуферОбмена,
			ДанныеТекущегоБуфераОбмена,
			ЭтаФорма.ПараметрыСеанса_ТекущийПользователь
		);
	КонецЕсли;

	Возврат ПараметрыОткрытияФормы;

КонецФункции

&НаСервереБезКонтекста
// Получает сохраненные ранее данные.
//
// Параметры:
//  КлючОбъекта   - Строка - Ключ объекта, который необходимо загрузить и вставить;
//  КлючНастроек - Строка - Ключ настройки, который необходимо загрузить и вставить.
//
// Возвращаемое значение:
//   СписокЗначений - Список структур со значениями.
//
Функция ПолучитьДанныеСохраненногоБуфераОбмена(КлючОбъекта, КлючНастроек)

	ДанныеБуфераОбмена = ХранилищаНастроек.БуферыОбменаНовостей.Загрузить(КлючОбъекта, КлючНастроек);

	Возврат ДанныеБуфераОбмена;

КонецФункции

#КонецОбласти

// Процедура устанавливает условное оформление в форме.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// 1. Заменить в колонке КатегорииПростыеУсловиеОтбора текстовое условие (eq, ne, ...) на простое ("=", "<>", ...).
		УсловияОтбора = Новый Соответствие;
		УсловияОтбора.Вставить("eq", "=");
		УсловияОтбора.Вставить("ne", "<>");
		УсловияОтбора.Вставить("gt", ">");
		УсловияОтбора.Вставить("ge", ">=");
		УсловияОтбора.Вставить("lt", "<");
		УсловияОтбора.Вставить("le", "<=");

		Для каждого КлючЗначение Из УсловияОтбора Цикл
			Элемент = УсловноеОформление.Элементы.Добавить();

			// Оформляемые поля
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПростыеУсловиеОтбора.Имя);

			// Отбор
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КатегорииПростые.УсловиеОтбора");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = КлючЗначение.Ключ;

			// Оформление
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", КлючЗначение.Значение);

			// Использование
			Элемент.Использование = Истина;

		КонецЦикла;

	// 2. Заменить в поле Объект.Важность число (0, 1, 2) на текст ("Обычная", "Очень важная", "Важная").
		УсловияОтбора = Новый Соответствие;
		УсловияОтбора.Вставить(0, "Обычная");
		УсловияОтбора.Вставить(1, "Очень важная");
		УсловияОтбора.Вставить(2, "Важная");

		Для каждого КлючЗначение Из УсловияОтбора Цикл
			Элемент = УсловноеОформление.Элементы.Добавить();

			// Оформляемые поля
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Важность.Имя);

			// Отбор
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Важность");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = КлючЗначение.Ключ;

			// Оформление
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", КлючЗначение.Значение);

			// Использование
			Элемент.Использование = Истина;

		КонецЦикла;

	// 3. Заменить в колонке ПривязкаКМетаданным.Важность число (0, 1, 2) на текст ("Обычная", "Очень важная", "Важная").
		УсловияОтбора = Новый Соответствие;
		УсловияОтбора.Вставить(0, "Обычная");
		УсловияОтбора.Вставить(1, "Очень важная");
		УсловияОтбора.Вставить(2, "Важная");

		Для каждого КлючЗначение Из УсловияОтбора Цикл
			Элемент = УсловноеОформление.Элементы.Добавить();

			// Оформляемые поля
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПривязкаКМетаданнымВажность.Имя);

			// Отбор
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ПривязкаКМетаданным.Важность");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = КлючЗначение.Ключ;

			// Оформление
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", КлючЗначение.Значение);

			// Использование
			Элемент.Использование = Истина;

		КонецЦикла;

	// 4. Цвет фона ошибочных строк "Категории простые" (предупреждение, 1).
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПростыеКатегорияНовостей.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПростыеУсловиеОтбора.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПростыеЗначениеКатегорииНовостей.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КатегорииПростые.ОшибочнаяСтрока");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 1;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Персиковый);

		// Использование
		Элемент.Использование = Истина;

	// 5. Цвет фона ошибочных строк "Категории простые" (ошибка, 2).
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПростыеКатегорияНовостей.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПростыеУсловиеОтбора.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПростыеЗначениеКатегорииНовостей.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КатегорииПростые.ОшибочнаяСтрока");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 2;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ОранжевоКрасный);

		// Использование
		Элемент.Использование = Истина;

	// 6. Доступность полей ДатаСбросаВажности, АвтоСбросНапоминанияПриПрочтении если Важность = 0.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаСбросаВажности.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоСбросНапоминанияПриПрочтении.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Важность");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

		// Использование
		Элемент.Использование = Истина;

	// 7. Доступность поля ПривязкаКМетаданнымДатаСбросаВажности если Объект.ПривязкаКМетаданным.Важность = 0.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПривязкаКМетаданнымДатаСбросаВажности.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ПривязкаКМетаданным.Важность");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

		// Использование
		Элемент.Использование = Истина;

	// 8. Поле "Единственный параметр".
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДействияЕдинственноеЗначениеПараметра.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Действия.КоличествоПараметров");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 1;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Несколько параметров настраиваются в таблице [Параметры]';uk='Кілька параметрів, що настроюються в таблиці [Параметры]'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

		// Использование
		Элемент.Использование = Истина;

КонецПроцедуры

&НаКлиенте
// Регулярно выдает статистику о редактируемых текстах.
// Должна подключаться через ЭтаФорма.ПодключитьОбработчикОжидания.
//
// Параметры:
//  Нет.
//
Процедура ВывестиСтатистику() Экспорт

	Текст1С_10_О = СтрЧислоВхождений(Объект.ТекстНовости, Символ(10));
	Текст1С_13_О = СтрЧислоВхождений(Объект.ТекстНовости, Символ(13));
	ТекстВИ_10_О = СтрЧислоВхождений(Объект.ТекстНовостиДляВнешнихИсточников, Символ(10));
	ТекстВИ_13_О = СтрЧислоВхождений(Объект.ТекстНовостиДляВнешнихИсточников, Символ(13));

	Текст1С_10_Э = СтрЧислоВхождений(Элементы.ТекстНовостиДля1С.ТекстРедактирования, Символ(10));
	Текст1С_13_Э = СтрЧислоВхождений(Элементы.ТекстНовостиДля1С.ТекстРедактирования, Символ(13));
	ТекстВИ_10_Э = СтрЧислоВхождений(Элементы.ТекстНовостиДляВнешнихИсточников.ТекстРедактирования, Символ(10));
	ТекстВИ_13_Э = СтрЧислоВхождений(Элементы.ТекстНовостиДляВнешнихИсточников.ТекстРедактирования, Символ(13));

	ТекстПояснения = 
		"Текст для внешних источников:
		| - 10 = %ТекстВИ_10_Э% / %ТекстВИ_10_О%,
		| - 13 = %ТекстВИ_13_Э% / %ТекстВИ_13_О%,
		|Текст для 1С:
		| - 10 = %Текст1С_10_Э% / %Текст1С_10_О%,
		| - 13 = %Текст1С_13_Э% / %Текст1С_13_О%,
		|";

	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%Текст1С_10_О%", Текст1С_10_О);
	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%Текст1С_13_О%", Текст1С_13_О);
	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%ТекстВИ_10_О%", ТекстВИ_10_О);
	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%ТекстВИ_13_О%", ТекстВИ_13_О);

	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%Текст1С_10_Э%", Текст1С_10_Э);
	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%Текст1С_13_Э%", Текст1С_13_Э);
	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%ТекстВИ_10_Э%", ТекстВИ_10_Э);
	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%ТекстВИ_13_Э%", ТекстВИ_13_Э);

	ПоказатьОповещениеПользователя(
		НСтр("ru='Статистика по переводам строк:';uk='Статистика по переказах рядків:'"),
		,
		ТекстПояснения,
		БиблиотекаКартинок.ИнформацияБСП);

КонецПроцедуры

#Область ГиперссылкиДействий

&НаСервере
// Запускает несколько серверных процедур по обновлению подменю вставки гиперссылок действий.
//
// Параметры:
//   Нет.
//
Процедура ОбновитьПодменюВставкиГиперссылокДействий()

	// Создание реквизитов, команд и меню гиперссылок действий.
	СоздатьКомандыГиперссылокДействий();
	СоздатьПодменюГиперссылокДействий(Элементы.ПодменюВставитьСуществующуюГиперссылку.Имя);
	ЭтаФорма.НеобходимоПересчитатьСписокДействий = Ложь;

КонецПроцедуры

&НаСервере
// Создает команды гиперссылок действий.
//
// Параметры:
//  Нет.
//
Процедура СоздатьКомандыГиперссылокДействий()

	ШаблонИмениКоманды = "КомандаГиперссылкаДействий_";

	// Удалить ранее созданные команды для вставки гиперссылок действий.
	БылиУдаления = Истина;
	Пока БылиУдаления = Истина Цикл
		БылиУдаления = Ложь;
		Для каждого ТекущаяКоманда Из ЭтаФорма.Команды Цикл
			Если Найти(ВРег(ТекущаяКоманда.Имя), ВРег(ШаблонИмениКоманды)) = 1 Тогда
				ЭтаФорма.Команды.Удалить(ТекущаяКоманда);
				БылиУдаления = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Создать команды заново.
	Для каждого ТекущееДействие Из Объект.Действия Цикл
		ИмяКоманды = ШаблонИмениКоманды + Формат(ТекущееДействие.ПолучитьИдентификатор(), "ЧЦ=3; ЧДЦ=; ЧН=000; ЧВН=; ЧГ=0");
		НайденнаяКоманда = ЭтаФорма.Команды.Найти(ИмяКоманды);
		Если ТипЗнч(НайденнаяКоманда) = Тип("КомандаФормы") Тогда
			НоваяКоманда = НайденнаяКоманда; // Не удалилась?
		Иначе
			НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КонецЕсли;
		НоваяКоманда.Действие                  = "КомандаГиперссылкаДействия";
		НоваяКоманда.Заголовок                 = ТекущееДействие.Действие + " (" + ТекущееДействие.УИНДействия + ")";
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		НоваяКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
		НоваяКоманда.Подсказка                 = НоваяКоманда.Заголовок;
		НоваяКоманда.Картинка                  = БиблиотекаКартинок.ВставитьСуществующуюГиперссылку;
	КонецЦикла;

КонецПроцедуры

&НаСервере
// Создает подменю гиперссылок действий - в командной панели или в контекстном меню.
//
// Параметры:
//  ИмяПодменю - Строка - имя элемента формы типа ГруппаФормы, в котором необходимо создать подменю форматирования.
//                        Передается НЕ ЭлементФормы, т.к. с клиента на сервер нельзя передать элемент формы.
//
Процедура СоздатьПодменюГиперссылокДействий(ИмяПодменю)

	ШаблонИмениКоманды = "КомандаГиперссылкаДействий_";
	Подменю = Элементы[ИмяПодменю];

	// Вначале удалить все ранее добавленные элементы.
	БылиУдаления = Истина;
	Пока БылиУдаления = Истина Цикл
		БылиУдаления = Ложь;
		Для каждого ТекущийЭлементФормы Из ЭтаФорма.Элементы Цикл
			Если Найти(ВРег(ТекущийЭлементФормы.Имя), ВРег(ШаблонИмениКоманды)) = 1 Тогда // Начинается с ...
				ЭтаФорма.Элементы.Удалить(ТекущийЭлементФормы);
				БылиУдаления = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Добавить заново.
	Для каждого ТекущаяКоманда Из ЭтаФорма.Команды Цикл
		Если Найти(ВРег(ТекущаяКоманда.Имя), ВРег(ШаблонИмениКоманды)) = 1 Тогда
			НовыйЭлемент = Элементы.Добавить(ТекущаяКоманда.Имя, Тип("КнопкаФормы"), Подменю);
			НовыйЭлемент.ИмяКоманды = ТекущаяКоманда.Имя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Обработчик оповещения о вставке файла как бинарных данных.
//
// Параметры:
//  Результат               - Булево - Ложь - в параметре <Интерактивно> установлен интерактивный режим (Истина)
//                                    и пользователь отказался от выполнения операции в диалоге выбора файла;
//  АдресВХранилище         - Строка - расположение нового файла;
//  ВыбранноеИмяФайла       - Строка - Через этот параметр возвращается путь к файлу, указанный в диалоге выбора файла.
//                               Для неинтерактивного режима выбранное имя файла соответствует начальному имени файла.
//                               В режиме запуска "Веб-клиент" значение параметра зависит от типа браузера.
//  ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ПослеЗагрузкиФайлаКакБинарныхДанных(Результат, АдресВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат = Истина Тогда
		ВставитьБинарныеДанныеИзФайлаСервер(
			АдресВХранилище,
			ДополнительныеПараметры.ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

// Обработчик оповещения о вставке inline-картинки.
//
// Параметры:
//  Результат               - Булево - Ложь - в параметре <Интерактивно> установлен интерактивный режим (Истина)
//                                    и пользователь отказался от выполнения операции в диалоге выбора файла;
//  АдресВХранилище         - Строка - расположение нового файла;
//  ВыбранноеИмяФайла       - Строка - Через этот параметр возвращается путь к файлу, указанный в диалоге выбора файла.
//                               Для неинтерактивного режима выбранное имя файла соответствует начальному имени файла.
//                               В режиме запуска "Веб-клиент" значение параметра зависит от типа браузера.
//  ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ПослеЗагрузкиВнедреннойКартинки(Результат, АдресВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат = Истина Тогда
		лкДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресВХранилище);
		лкДанныеФайлаСтрока64 = base64Строка(лкДвоичныеДанныеФайла);
		лкДанныеФайлаСтрока64 = СтрЗаменить(base64Строка(лкДвоичныеДанныеФайла), Символы.ПС, ""); // Иначе картинка не отобразится

		// 2. Вставить код
		Если Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаПростоТекстДля1С Тогда
			ПолеТекстовогоДокумента = Элементы.ТекстНовостиДля1С;
		ИначеЕсли Элементы.СтраницыТексты.ТекущаяСтраница = Элементы.СтраницаПростоТекстДляВнешнихИсточников Тогда
			ПолеТекстовогоДокумента = Элементы.ТекстНовостиДляВнешнихИсточников;
		КонецЕсли;
		НачалоСтроки  = 0;
		НачалоКолонки = 0;
		КонецСтроки   = 0;
		КонецКолонки  = 0;
		ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		ТекстДляВставки = "<img src=""%ДанныеКартинки%"" />";

		ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "%ДанныеКартинки%", "data:image/" + ДополнительныеПараметры.ФорматКартинки + ";base64," + лкДанныеФайлаСтрока64);

		ПолеТекстовогоДокумента.ВыделенныйТекст = ТекстДляВставки;
		ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, НачалоКолонки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

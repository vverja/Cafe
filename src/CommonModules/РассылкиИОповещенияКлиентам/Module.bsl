////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылки и оповещения клиентам".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//  Содержит общие серверные процедуры и предназначенные для настройки, а также 
//  формирования сообщений по рассылкам и оповещениям.
//

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСВложениями

// Формирует перед записью объекта ТекстHTML из форматированного документа.
// Картинки ФД будут сохранены как присоединенные файлы объекта.
//
// Параметры:
//  ФорматированныйДокумент  - ФорматированныйДокумент - ФД, который будет преобразован в HTML.
//  ТекстHTML  - Строка - в ней будет сохранен получившийся HTML.
//  ТипТекстаПисьма  - Перечисление.СпособыРедактированияЭлектронныхПисем - для определения необходимости выполенния преобразований.
//  ТаблицаСоответствийИменВложенийИдентификаторам  - ТаблицаЗначений - позволяет определить какому вложению соответветствует какая картинка.
//
Процедура ФорматированныйДокументВHTMLПередЗаписью(ФорматированныйДокумент, ТекстHTML, ТипТекстаПисьма, ТаблицаСоответствийИменВложенийИдентификаторам) Экспорт

	//Подготовим документ HTML из содержимого форматированного документа
	Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		
		СтруктураВложений = Новый Структура;
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, СтруктураВложений);
		Для каждого Вложение Из СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML( ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
			ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Если ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст()) Тогда
				ТекстHTML = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Добавляет в список вложений к удалению вложения, которые соответствовали картинкам тела письма.
//
// Параметры:
//  Ссылка  - ДокументСсылка - ссылка на владельца присоединенных файлов.
//  УдаленныеВложения  - Массив - массив вложений к удалению.
//
Процедура ДобавитьВСписокУдаляемыхВложенияСНепустымИД(Ссылка, УдаленныеВложения) Экспорт
	
	ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Ссылка);
	Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		УдаленныеВложения.Добавить(Вложение.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет вложения согласно переданному массиву вложений.
//
// Параметры:
//  УдаленныеВложения  - Массив - массив вложений к удалению.
//
Процедура УдалитьВложения(УдаленныеВложения) Экспорт
	
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
КонецПроцедуры

// Сохраняет картинки форматированного документа как присоединенные файлы объекта.
//
// Параметры:
//  Ссылка  - ДокументСсылка - ссылка на владельца присоединенных файлов.
//  ТипТекстаПисьма  - Перечисление.СпособыРедактированияЭлектронныхПисем - для определения необходимости выполенния преобразований.
//  ТаблицаСоответствийИменВложенийИдентификаторам  - ТаблицаЗначений - позволяет определить какому вложению соответветствует какая картинка.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы из которого выполняется сохранение.
//
Процедура СохранитьКартинкиФорматированнногоДокументаКакПрисоединенныеФайлы(Ссылка,
	                                                                        ТипТекстаПисьма,
	                                                                        ТаблицаСоответствийИменВложенийИдентификаторам,
	                                                                        УникальныйИдентификатор) Экспорт
	
	Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Ссылка,
			АдресКартинкиВоВременномХранилище,
			"_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"),
			ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет вложения объекта как присоединенные файлы.
//
// Параметры:
//  Ссылка                   - ДокументСсылка - ссылка на владельца присоединенных файлов.
//  Вложения                 - ТаблицаЗначений - таблица вложений.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы из которого выполняется сохранение.
//
Процедура СохранитьВложения(Ссылка, Вложения, УникальныйИдентификатор) Экспорт
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			СтрокаТаблицыВложений.Ссылка = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Ссылка, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			СтрокаТаблицыВложений.Ссылка = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
			Ссылка, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет анализ данных для оповещений клиентам и выполняет запись в очередь оповещений
// 
// Параметры:
//   ВидОповещения  СправочникСсылка.ВидыОповещенийКлиентам - Вид оповещения, данные по которому должны быть проанализированы.
//
Процедура АнализДанныхДляОповещенийКлиентам(ВидОповещения) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ТипЗнч(ВидОповещения) <> Тип("СправочникСсылка.ВидыОповещенийКлиентам") ИЛИ ВидОповещения.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОповещения, "ТипСобытия");
	ТипСобытия = Реквизиты.ТипСобытия;
	
	Если ТипСобытия.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ТипСобытия = Перечисления.ТипыСобытийОповещений.ПоздравлениеСДнемРождения Тогда
		АнализДанныхПоздравленияСДнемРождения(ВидОповещения);
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ПросроченнаяЗадолженность Тогда
		АнализПросроченнаяЗадолженность(ВидОповещения);
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеПлатежи Тогда
		АнализПлановыеПлатежи(ВидОповещения);
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ПлановыеОтгрузки Тогда
		АнализПлановыеОтгрузки(ВидОповещения);
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОповещений.ОкончаниеОпроса Тогда
		АнализОкончаниеОпроса(ВидОповещения);
	Иначе
		МодификацияКонфигурацииПереопределяемый.АнализДанныхДляВидаОповещения(ВидОповещения);
	КонецЕсли;

КонецПроцедуры

// Формирует документы "Сообщение SMS" и "Электронное письмо исходящее" по данным РС "ОчередьСобытийДляОповещенийКлиентам".
// За собственно отправку подготовленных сообщений отвечают регламентные задания
// "Получение и отправка электронных писем" и "Отправка SMS".
//
Процедура ФормированиеСообщенийПоОповещениямКлиентов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗаписи = НСтр("ru='Начало формирования сообщений по очереди оповещений для клиентов';uk='Початок формування повідомлень за чергою повідомлення для клієнтів'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи, УровеньЖурналаРегистрации.Информация);
	ДатаОбработки = ТекущаяДатаСеанса(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения КАК ВидОповещения
	               |ИЗ
	               |	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
	               |ГДЕ
	               |	ОчередьСобытийДляОповещенийКлиентам.Период < &ДатаОбработки";
	
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			ОбработатьОчередьСообщенийПоВидуОповещения(Выборка.ВидОповещения, ДатаОбработки);
			РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.УдалитьЗаписиПоВидуОповещенияИзОчереди(Выборка.ВидОповещения, ДатаОбработки);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ТекстЗаписи = НСтр("ru='Ошибка при формировании сообщений по оповещениям клиентов';uk='Помилка при формуванні повідомлень за повідомленнями клієнтів'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + " : ";
			ТекстЗаписи = ТекстЗаписи + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньЖурналаРегистрации.Ошибка);
			ОтменитьТранзакцию();
			Возврат;

			ОтменитьТранзакцию();
		
		КонецПопытки;
			
	КонецЦикла;
	
	ТекстЗаписи = НСтр("ru='Окончание формирования сообщений по рассылкам клиентов';uk='Закінчення формування повідомлень за розсилками клієнтів'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

// Формирует документы "Сообщение SMS" и "Электронное письмо исходящее" по документам "Рассылка клиентам",
// находящимся в статусе "К отправке". За собственно отправку подготовленных сообщений отвечают регламентные задания
// "Получение и отправка электронных писем" и "Отправка SMS".
//
Процедура ФормированиеСообщенийПоРассылкамКлиентам() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗаписи = НСтр("ru='Начало формирования сообщений по рассылкам клиентов';uk='Початок формування повідомлень за розсилками клієнтів'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньЖурналаРегистрации.Информация);
	
	КоличествоОбработанныхРассылок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РассылкаКлиентам.Ссылка,
	|	РассылкаКлиентам.ДатаРассылки,
	|	РассылкаКлиентам.ДатаАктуальности,
	|	РассылкаКлиентам.ГруппаРассылокИОповещений,
	|	РассылкаКлиентам.ПредназначенаДляЭлектронныхПисем,
	|	РассылкаКлиентам.ПредназначенаДляSMS,
	|	РассылкаКлиентам.Тема,
	|	РассылкаКлиентам.ТекстПисьма,
	|	РассылкаКлиентам.ТекстПисьмаHTML,
	|	РассылкаКлиентам.ТекстSMS,
	|	РассылкаКлиентам.ОтборАдресатов,
	|	РассылкаКлиентам.ТипТекстаПисьма,
	|	РассылкаКлиентам.ОтправлятьВТранслите,
	|	ГруппыРассылокИОповещений.Принудительная,
	|	ГруппыРассылокИОповещений.ОтправлятьПартнеру,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактнымЛицамРоли,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактномуЛицуОбъектаОповещения,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииПартнераДляПисем,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииПартнераДляSMS,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииКонтактногоЛицаДляSMS,
	|	ГруппыРассылокИОповещений.РольКонтактногоЛица,
	|	РассылкаКлиентам.Ответственный,
	|	РассылкаКлиентам.Номер,
	|	РассылкаКлиентам.Дата,
	|	ГруппыРассылокИОповещений.УчетнаяЗапись,
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты, """") КАК УчетнаяЗаписьАдресЭлектроннойПочты,
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.ИмяПользователя, """") КАК УчетнаяЗаписьИмяПользователя,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.УдалятьПисьмаПослеОтправки, ЛОЖЬ) КАК УдалятьПослеОтправки,
	|	РассылкаКлиентам.Основание,
	|	РассылкаКлиентам.ЕстьВложения
	|ИЗ
	|	Документ.РассылкаКлиентам КАК РассылкаКлиентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|				ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
	|			ПО ГруппыРассылокИОповещений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ПО РассылкаКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|ГДЕ
	|	НЕ РассылкаКлиентам.ПометкаУдаления
	|	И РассылкаКлиентам.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРассылокКлиентам.КОтправке)
	|	И РассылкаКлиентам.ДатаРассылки < &ДатаРассылокКПодготовке
	|	И ВЫБОР
	|			КОГДА РассылкаКлиентам.ДатаАктуальности = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РассылкаКлиентам.ДатаАктуальности > &ДатаРассылокКПодготовке
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаРассылокКПодготовке", ТекущаяДатаСеанса() + 3600);
	
	ВыборкаРассылки = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРассылки.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			ДокументОбъект        = ВыборкаРассылки.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыРассылокКлиентам.КОтправке;
			ДокументОбъект.Записать();
			
			МассивСозданныхВзаимодействий = Новый Массив;
			Если ТипЗнч(ВыборкаРассылки.Основание) = Тип("ДокументСсылка.НазначениеОпросов") И ЗначениеЗаполнено(ВыборкаРассылки.Основание) Тогда
				ДанныеОснования = ДанныеОснованияНазначениеОпросов(ВыборкаРассылки.Основание);
			Иначе
				ДанныеОснования = Неопределено;
			КонецЕсли;
			
			ВыборкаАдресатовРассылки = ВыборкаАдресатовРассылки(ВыборкаРассылки, ДанныеОснования);
			
			Если ВыборкаРассылки.ПредназначенаДляЭлектронныхПисем Тогда
				СоздатьПисьмаДляРассылки(ВыборкаРассылки, ВыборкаАдресатовРассылки, МассивСозданныхВзаимодействий, ДанныеОснования);
			Иначе
				СоздатьSMSДляРассылки(ВыборкаРассылки, ВыборкаАдресатовРассылки, МассивСозданныхВзаимодействий , ДанныеОснования);
			КонецЕсли;
			
			ДокументОбъект.Статус = Перечисления.СтатусыРассылокКлиентам.Выполнена;
			ДокументОбъект.Записать();
			
			Взаимодействия.РассчитатьРассмотреноПоПредметам(МассивСозданныхВзаимодействий);
			Взаимодействия.РассчитатьРассмотреноПоКонтактам(МассивСозданныхВзаимодействий);
			
			КоличествоОбработанныхРассылок = КоличествоОбработанныхРассылок + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ТекстЗаписи = НСтр("ru='Ошибка при формировании сообщений по рассылкам клиентов';uk='Помилка при формуванні повідомлень за розсилками клієнтів'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + " : ";
			ТекстЗаписи = ТекстЗаписи + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньЖурналаРегистрации.Ошибка);
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТекстЗаписи = НСтр("ru='Окончание формирования сообщений по рассылкам клиентов. Обработано рассылок %1.';uk='Закінчення формування повідомлень за розсилками клієнтів. Опрацьовано розсилок %1.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТекстЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаписи, Строка(КоличествоОбработанныхРассылок));
	ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

// Удаляет документы взаимодействий по рассылкам и оповещениям у которых истек срок хранения.
//
Процедура УдалениеВзаимодействийПоРассылкамИОповещениям() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗаписи = НСтр("ru='Начало установки пометки удаления для взаимодействий по рассылке клиентам';uk='Початок встановлення позначки вилучення для взаємодій з розсилки клієнтам'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньЖурналаРегистрации.Информация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка
	|ИЗ
	|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РассылкаКлиентам КАК РассылкаКлиентам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|			ПО РассылкаКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|		ПО Взаимодействия.ВзаимодействиеОснование = РассылкаКлиентам.Ссылка
	|ГДЕ
	|	РассылкаКлиентам.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРассылокКлиентам.Выполнена)
	|	И НЕ Взаимодействия.ПометкаУдаления
	|	И ГруппыРассылокИОповещений.СрокХраненияСообщений <> 0
	|	И ВЫБОР
	|			КОГДА Взаимодействия.ДатаАктуальностиОтправки > Взаимодействия.Дата
	|				ТОГДА ДОБАВИТЬКДАТЕ(Взаимодействия.ДатаАктуальностиОтправки, ДЕНЬ, ГруппыРассылокИОповещений.СрокХраненияСообщений) < &ТекущаяДата
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(Взаимодействия.Дата, ДЕНЬ, ГруппыРассылокИОповещений.СрокХраненияСообщений) < &ТекущаяДата
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка
	|ИЗ
	|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|			ПО ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|		ПО Взаимодействия.ВзаимодействиеОснование = ВидыОповещенийКлиентам.Ссылка
	|ГДЕ
	|	НЕ Взаимодействия.ПометкаУдаления
	|	И ГруппыРассылокИОповещений.СрокХраненияСообщений <> 0
	|	И ВЫБОР
	|			КОГДА Взаимодействия.ДатаАктуальностиОтправки > Взаимодействия.Дата
	|				ТОГДА ДОБАВИТЬКДАТЕ(Взаимодействия.ДатаАктуальностиОтправки, ДЕНЬ, ГруппыРассылокИОповещений.СрокХраненияСообщений) < &ТекущаяДата
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(Взаимодействия.Дата, ДЕНЬ, ГруппыРассылокИОповещений.СрокХраненияСообщений) < &ТекущаяДата
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ТекстЗаписи = НСтр("ru='Начало установки пометки удаления для взаимодействий по рассылке клиентам';uk='Початок встановлення позначки вилучення для взаємодій з розсилки клієнтам'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененияДанныхДляОповещенийКлиентов

// Обработчик подписки на событие "Перед записью" регистров сведения и накопления
//  для формирования очереди оповещений клиентов. Выступает маршрутизатором для различных типов источников.
//
// Параметры:
//  Источник  - РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей - набор записей, данные которого анализируются до записи.
//  Отказ     - Булево - возможность отказаться от записи набора записей.
//
Процедура ИсточникОповещенияПередЗаписьюРегистры(Источник, Отказ) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.БонусныеБаллы") Тогда
		
		ОбработатьИзменениеБонусныхБаллов(Источник, "ПередЗаписью");
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СостоянияЗаказовКлиентов") Тогда
		
		ОбработатьИзменениеСостоянияЗаказовКлиента(Источник, "ПередЗаписью");
		
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ИсточникОповещенияПередЗаписью(Источник, Отказ, Неопределено, Неопределено);
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" регистров сведения и накопления
//  для формирования очереди оповещений клиентов. Выступает маршрутизатором для различных типов источников.
//
// Параметры:
//  Источник  - РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей - набор записей, данные которого анализируются при записи.
//  Отказ     - Булево - возможность отказаться от записи набора записей.
//
Процедура ИсточникОповещенияПриЗаписиРегистры(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.БонусныеБаллы") Тогда
		
		ОбработатьИзменениеБонусныхБаллов(Источник, "ПриЗаписи");
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СостоянияЗаказовКлиентов") Тогда
		
		ОбработатьИзменениеСостоянияЗаказовКлиента(Источник, "ПриЗаписи");
		
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ИсточникОповещенияПриЗаписи(Источник, Отказ);
	
КонецПроцедуры

// Обработчик подписки на событие "Перед записью" документов для формирования очереди
// оповещений клиентов. Выступает маршрутизатором для различных типов источников.
//
// Параметры:
//  Источник        - Документ - документ, данные которого анализируются до записи.
//  Отказ           - Булево - возможность отказаться от записи документа.
//  РежимЗаписи     - РежимЗаписи - режим записи документа.
//  РежимПроведения - РежимПроведения - режим проведения документа.
//
Процедура ИсточникОповещенияПередЗаписьюДокументы(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		
		ОбработатьИзменениеСчетаНаОплату(Источник, "ПередЗаписью", РежимЗаписи);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Или
			ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Или
			ТипЗнч(Источник) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
			
			ОбработатьИзменениеПоступленияОплаты(Источник, "ПередЗаписью", РежимЗаписи);
	
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ИсточникОповещенияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" документов для формирования очереди
// оповещений клиентов. Выступает маршрутизатором для различных типов источников.
//
// Параметры:
//  Источник  - Документ - документ, данные которого анализируются при записи.
//  Отказ     - Булево - возможность отказаться от записи документа.
//
Процедура ИсточникОповещенияПриЗаписиДокументы(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		
		ОбработатьИзменениеСчетаНаОплату(Источник, "ПриЗаписи", Неопределено);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Или
			ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Или
			ТипЗнч(Источник) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
			
			ОбработатьИзменениеПоступленияОплаты(Источник, "ПриЗаписи", Неопределено);
		
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ИсточникОповещенияПриЗаписи(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

// Получает данные документа "Назначение опросов", основания расссылки клиентам
//
// Параметры:
//  Основание  - ДокументСсылка.НазначениеОпросов - документ, данные которого получаются.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса, Неопределено - данные документа "Назначение опросов"
//
Функция ДанныеОснованияНазначениеОпросов(Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НазначениеОпросов.Ссылка,
	|	НазначениеОпросов.ДатаНачала,
	|	НазначениеОпросов.ДатаОкончания,
	|	НазначениеОпросов.Наименование,
	|	НазначениеОпросов.СвободныйОпрос,
	|	НазначениеОпросов.ТипРеспондентов
	|ИЗ
	|	Документ.НазначениеОпросов КАК НазначениеОпросов
	|ГДЕ
	|	НазначениеОпросов.Ссылка = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка;
	КонецЕсли;

КонецФункции

// Устанавливает видимость на форме документа информационного сообщения, предлагающего менеджеру подписать
// клиента на оповещения по данному документу.
//
// Параметры:
//  ГруппаПодпискаНаОповещения  - ГруппаФормы - группа формы, на которой расположены страницы с сообщением и пустой страницей.
//  Партнер  - СправочникСсылка.Партнеры - партнер, для которого будет оформлена подписка.
//  ТипСобытия  - ПеречислениеСсылкаСсылка.ТипыСобытийОповещений, Массив - типы событий оповещений для которых будут найдены
//    группы рассылок и оповещений и будет предложено оформить на них подписку.
//
Процедура УстановитьВидимостьПодпискиНаОповещенияВОбъекте(ГруппаПодпискаНаОповещения, Партнер, ТипСобытия) Экспорт
		
	ПоказыватьПодпискиНаОповещения = РассылкиИОповещенияКлиентамВызовСервера.ПоказыватьПодпискиНаОповещенияВОбъекте(
		Партнер,
		ТипСобытия);
		
	Если ПоказыватьПодпискиНаОповещения Тогда
		ГруппаПодпискаНаОповещения.Видимость = Истина;
	Иначе
		ГруппаПодпискаНаОповещения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос, помещающий партнеров, согласно настройке отбора во временную таблицу.
//
// Параметры:
//  Данные  - Структура - содержит следующие свойства:
//    * ОтборАдресатов - Хранилище значения - содержит настройки компоновки данных с отбором по партнеру.
//    * Основание - ДокументСсылка - основание рассылки клиентам.
//  УстановленОтборПоОснованию - Булево - в него записывается признак того,
//                                        что в в настройках компоновки установлен отбор по основанию рассылки.
//
Функция ЗапросОтборПоКомпоновке(Данные, УстановленОтборПоОснованию) Экспорт
	
	Настройки = Данные.ОтборАдресатов.Получить();
	
	НаОснованииОпроса = ЗначениеЗаполнено(Данные.Основание) 
	                    И ТипЗнч(Данные.Основание) = Тип("ДокументСсылка.НазначениеОпросов");
	
	ИмяМакета = ?(НаОснованииОпроса, "ОтборПартнеровНазначениеОпросов", "ОтборПартнеров");
	
	//Формирование запроса
	СхемаОтбора = Обработки.ПодборПартнеровПоОтбору.ПолучитьМакет(ИмяМакета);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроекРасчета = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекРасчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОтбора));
	КомпоновщикНастроекРасчета.ЗагрузитьНастройки(Настройки);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаОтбора, КомпоновщикНастроекРасчета.ПолучитьНастройки(),,,
	                                                    Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Макет = Документы.РассылкаКлиентам.ПолучитьМакет("СостояниеРассылки");
	
	ЕстьОтборПоКомпоновке = Ложь;
	Если МакетКомпоновкиДанных.ЗначенияПараметров.Количество() > 0 Тогда
		Если НЕ (НаОснованииОпроса 
			И МакетКомпоновкиДанных.ЗначенияПараметров.Количество() = 1 
			И МакетКомпоновкиДанных.ЗначенияПараметров[0].Значение = Данные.Основание) Тогда
			ЕстьОтборПоКомпоновке = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЗначениеПараметров Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Если ЗначениеПараметров.Значение = Данные.Основание Тогда
			УстановленОтборПоОснованию = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Если ЕстьОтборПоКомпоновке Тогда
		
		Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
		
		Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		КонецЦикла;
		
		ТекстПоместить = "ПОМЕСТИТЬ ОтборПартнеров";
		ПозицияВставки =  СтрНайти(Запрос.Текст, "Справочник.Партнеры КАК Партнеры") - 5;
		ЛеваяЧасть     = ЛЕВ(Запрос.Текст, ПозицияВставки);
		ПраваяЧасть    = Прав(Запрос.Текст, СтрДлина(Запрос.Текст) -ПозицияВставки);
		Запрос.Текст = ЛеваяЧасть + ТекстПоместить + Символы.ПС + ПраваяЧасть;
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Устанавливает параметры динамических списков для текстового представления вида сообщений.
//
// Параметры:
//  Список  - ДинамическийСписок - список, в который помещаются параметры.
//
Процедура ГруппыРассылокОповещенийУстановитьПараметрыДинамическогоСписка(Список) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                   "ДляПисемИSMS",
	                                                                   НСтр("ru='Email и SMS';uk='Email і SMS'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                   "ДляПисем",
	                                                                   НСтр("ru='Email';uk='Email'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                   "ДляSMS",
	                                                                   НСтр("ru='SMS';uk='SMS'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                   "ИспользоватьПрочиеВзаимодействия",
	                                                                   ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия"));
	
КонецПроцедуры

// Инициализирует компоновщик настроек СКД, предварительно помещая СКД во временное хранилище.
//
// Параметры:
//  МакетСКД  - СхемаКомпоновкиДанных - СКД, компоновщик настроек которой будет инициализирован.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы, для помещения СКД во временное хранилище.
//
Функция ИнициализироватьСКД(МакетСКД, УникальныйИдентификатор) Экспорт

	АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД,УникальныйИдентификатор);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	Возврат КомпоновщикНастроек;

КонецФункции 

// Заполняет реквизиты формы по группе рассылок и оповещений.
//
// Параметры:
//  Форма  - УправляемаяФорма - форма, реквизиты которой будут заполнены.
//  ГруппаРассылокИОповещений  - СправочникСсылка.ГруппаРассылокИОповещений - по ее данным будут заполнены реквизиты формы.
//
Процедура ЗаполнитьРеквизитыФормыПоГруппеРассылокИОповещений(Форма, ГруппаРассылокИОповещений) Экспорт

	РеквизитыГруппы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГруппаРассылокИОповещений,
	    "ПредназначенаДляЭлектронныхПисем, ПредназначенаДляSMS, ВидКонтактнойИнформацииПартнераДляПисем,
		|ВидКонтактнойИнформацииПартнераДляSMS, ВидКонтактнойИнформацииКонтактногоЛицаДляSMS,
		|ВидКонтактнойИнформацииКонтактногоЛицаДляПисем, Принудительная");
	ЗаполнитьЗначенияСвойств(Форма, РеквизитыГруппы);

КонецПроцедуры

// Добавляет значение в массив, если оно отсутствует в массиве.
//
// Параметры:
//  МассивДляДобавления - Массив - массив, в который происходит добавление.
//  ДобавляемоеЗначение - Произвольный - значение, которое будет добавлено в массив, если отсутствует.
//
Процедура ДобавитьВМассив(МассивДляДобавления, ДобавляемоеЗначение) Экспорт

	Если Не ЗначениеЗаполнено(ДобавляемоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивДляДобавления.Найти(ДобавляемоеЗначение) = Неопределено Тогда
		МассивДляДобавления.Добавить(ДобавляемоеЗначение);
	КонецЕсли;

КонецПроцедуры

// Формирует строку адресов из массива адресов, добавляя разделитель между элементами массива.
//
// Параметры:
//  МассивАдресов - Массив - массив, содержащий адреса.
//  Разделитель - Строка - разделитель, который будет добавлен между адресов в результирующей строке.
//
// Возвращаемое значение:
//   Строка   - сформированная строка.
//
Функция СтрокаАдресовИзМассива(МассивАдресов, Разделитель) Экспорт

	СтрокаКВозврату = "";
	
	Для Каждого ЭлементМассива Из МассивАдресов Цикл
		СтрокаКВозврату = СтрокаКВозврату + ?(ПустаяСтрока(СтрокаКВозврату),"" , Разделитель) + ЭлементМассива;
	КонецЦикла;
	
	Возврат СтрокаКВозврату;

КонецФункции

// Формирует стуктуру списков выбора КИ. Используется в форме "Группы рассылок и оповещений" и "Подписки".
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Структура   - содержит следующие свойства: 
//      ПартнерыАдресЭлектроннойПочты - виды КИ партнера типа "Адрес электронной почты".
//      ПартнерыТелефон - виды КИ партнера типа "Телефон".
//      КонтактныеЛицаАдресЭлектроннойПочты - виды КИ контактного лица типа "Адрес электронной почты".
//      КонтактныеЛицаТелефон - виды КИ контактного лица типа "Телефон".
//
Функция СтруктураСписковВыбораКИ() Экспорт

	СтруктураСписковВыбора = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель,
	|	ВидыКонтактнойИнформации.Тип КАК Тип
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	(ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
	|			ИЛИ ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров))
	|	И (ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ИТОГИ ПО
	|	Родитель,
	|	Тип";
	
	ВыборкаРодитель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРодитель.Следующий() Цикл
		
		ВыборкаТип = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТип.Следующий() Цикл
			
			Если ВыборкаТип.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры Тогда
				Если ВыборкаТип.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					ИмяКлюча = "ПартнерыАдресЭлектроннойПочты";
				Иначе
					ИмяКлюча = "ПартнерыТелефон";
				КонецЕсли;
			Иначе
				Если ВыборкаТип.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					ИмяКлюча = "КонтактныеЛицаАдресЭлектроннойПочты";
				Иначе
					ИмяКлюча = "КонтактныеЛицаТелефон";
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаДетали = ВыборкаТип.Выбрать();
			
			СписокВидовКИ = Новый СписокЗначений;
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				СписокВидовКИ.Добавить(ВыборкаДетали.Ссылка, ВыборкаДетали.Наименование);
				
			КонецЦикла;
			
			СтруктураСписковВыбора.Вставить(ИмяКлюча, СписокВидовКИ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураСписковВыбора;

КонецФункции

// Копирует значения одного списка значений в другой
//
// Параметры:
//  Приемник  - СписокЗначений - список значений, в который будут скопированы элементы.
//  Источник  - СписокЗначений - список значений, из которого будут скопированы элементы
//
Процедура СкопироватьЗначенияСпискаЗначений(Приемник, Источник) Экспорт

	Приемник.Очистить();
	
	Для Инд = 0 По Источник.Количество() - 1 Цикл 
		
		ЭлементСписка = Источник.Получить(Инд);
		Приемник.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		
	КонецЦикла;

КонецПроцедуры

// Получает список выбора видов КИ по представлениюю
//
// Параметры:
//  СпискиВыбораДляКИ  - Структура - структура, содержащая списки выбора КИ.
//  Представление  - Строка - представление списка выбора, подробнее см. в описании
//                 процедуры СтруктураСписковВыбораКИ.
//
// Возвращаемое значение:
//   СписокЗначений   - содержит список выбора КИ.
//
Функция СписокВидаКИПоПредставлению(СпискиВыбораДляКИ, Представление) Экспорт

	Для Инд = 0 По СпискиВыбораДляКИ.Количество() -1  Цикл
		
		ЭлементСписка = СпискиВыбораДляКИ.Получить(Инд);
		Если ЭлементСписка.Представление = Представление Тогда
			Возврат ЭлементСписка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый СписокЗначений;
	
КонецФункции

// Выполняет запись журнала регистрации по событию "Рассылки и оповещения клиентам".
//
// Параметры:
//  ТекстЗаписи  - Строка - содержить текст записи журнала регистрации.
//  УровеньВажности  - УровеньЖурналаРегистрации - уровень важности записи.
//
Функция ВыполнитьЗаписьЖурналаРегистрации(ТекстЗаписи ,УровеньВажности)

	ЗаписьЖурналаРегистрации(
		НСтр("ru='Рассылки и оповещения клиентам';uk='Розсилки і сповіщення клієнтам'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		УровеньВажности, , ,
		ТекстЗаписи);

КонецФункции 

// Формирует текст контекстной справки для настройки "Отправлять контактному лицу объекта оповещения"
//
// Возвращаемое значение:
//   Строка   - текст контекстной подсказки
//
Функция ТекстПоясненияКонтактноеЛицоОбъектаОповещения() Экспорт
	
	Возврат НСтр("ru='Когда это возможно, оповещение будет отправлено контактному лицу, указанному в объекте, являющимся
                       |источником оповещения. Например, оповещение по изменившемуся состоянию ""Заказа клиента"" будет 
                       |послано контактному лицу, указанному в документе.'
                       |;uk='Коли це можливо, сповіщення буде відправлено контактній особі, вказаній у об''єкті, що є
                       |джерелом сповіщення. Наприклад, сповіщення по зміні стану ""Замовлення клієнта"" буде 
                       |надіслано контактній особі, зазначеній у документі.'");
	
КонецФункции

// Формирует строку с информацией о адресатах подписки.
//
//  Данные          - Структура - содержит информацию о подписке.
//  Принудительная  - Булево - признак, того что сообщения будет отравляться в принудительном порядке.
//
// Возвращаемое значение:
//   Строка   - строку с информацией о адресатах подписки
//
Функция ТекстКомуБудутОтправленыСообщения(Данные, Принудительная = Ложь) Экспорт

	ТекстАдресаты = "";
	Если Данные.ОтправлятьПартнеру Тогда
		ТекстАдресаты = НСтр("ru='Партнер';uk='Партнер'");
	КонецЕсли;
	
	Если Данные.ОтправлятьКонтактномуЛицуОбъектаОповещения Тогда
		ДобавитьЗапятуюЕслиНеПустойТекст(ТекстАдресаты);
		ТекстАдресаты = ТекстАдресаты + НСтр("ru='контактное лицо объекта оповещения';uk='контактна особа об''єкта сповіщення'");
	КонецЕсли;
	
	Если Принудительная Тогда
		
		Если Данные.ОтравлятьКонтактнымЛицаРоли Тогда
			ДобавитьЗапятуюЕслиНеПустойТекст(ТекстАдресаты);
			ТекстКЛ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='контактные лица роли ""%1""';uk='контактні особи ролі ""%1""'"),
			Данные.НаименованиеРолиКонтактногоЛица);
			ТекстАдресаты = ТекстАдресаты + ТекстКЛ;
		КонецЕсли;
		
	Иначе
		
		Если Данные.КоличествоДопАдресатов Тогда
			
			ДобавитьЗапятуюЕслиНеПустойТекст(ТекстАдресаты);
			ТекстКЛ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='контактные лица - %1 чел';uk='контактні особи - %1 чол'"),
			Данные.КоличествоДопАдресатов);
			ТекстАдресаты = ТекстАдресаты + ТекстКЛ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстАдресаты = ТекстАдресаты + ?(ПустаяСтрока(ТекстАдресаты), "", ".");
	ТекстАдресаты = ВРег(Лев(ТекстАдресаты, 1)) + Прав(ТекстАдресаты, СтрДлина(ТекстАдресаты) - 1);
	
	Возврат ТекстАдресаты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АнализДанныхДляОповещенийКлиентов

Процедура АнализДанныхПоздравленияСДнемРождения(ВидОповещения)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыОповещенийКлиентам.ГруппаРассылокИОповещений,
	|	ГруппыРассылокИОповещений.Принудительная,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактномуЛицуОбъектаОповещения
	|ИЗ
	|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|		ПО ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|ГДЕ
	|	ВидыОповещенийКлиентам.Ссылка = &ВидОповещения";
	
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Запрос = Новый Запрос;
	
	Если Выборка.Принудительная Тогда
		
		Если Не Выборка.ОтправлятьКонтактномуЛицуОбъектаОповещения Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка КАК ИсточникОповещения,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1), ДЕНЬ) КАК ДатаОтправки,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ) КАК ДатаАктуальностиОтправки,
		|	КонтактныеЛицаПартнеров.Владелец КАК Подписчик
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|		ПО КонтактныеЛицаПартнеров.Ссылка = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|			И (ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения)
		|ГДЕ
		|	НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
		|	И КонтактныеЛицаПартнеров.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ДЕНЬ(КонтактныеЛицаПартнеров.ДатаРождения) = ДЕНЬ(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1))
		|	И МЕСЯЦ(ДОБАВИТЬКДАТЕ(КонтактныеЛицаПартнеров.ДатаРождения, ДЕНЬ, 1)) = МЕСЯЦ(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1))
		|	И ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения ЕСТЬ NULL ";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка КАК ИсточникОповещения,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1), ДЕНЬ) КАК ДатаОтправки,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ) КАК ДатаАктуальностиОтправки,
		|	КонтактныеЛицаПартнеров.Владелец КАК Подписчик
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|		ПО КонтактныеЛицаПартнеров.Ссылка = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|			И (ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
		|		ПО КонтактныеЛицаПартнеров.Владелец = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
		|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует)
		|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьКонтактномуЛицуОбъектаОповещения)
		|			И (НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления)
		|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений)
		|ГДЕ
		|	НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
		|	И КонтактныеЛицаПартнеров.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ДЕНЬ(КонтактныеЛицаПартнеров.ДатаРождения) = ДЕНЬ(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1))
		|	И МЕСЯЦ(ДОБАВИТЬКДАТЕ(КонтактныеЛицаПартнеров.ДатаРождения, ДЕНЬ, 1)) = МЕСЯЦ(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1))
		|	И ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения ЕСТЬ NULL ";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", Выборка.ГруппаРассылокИОповещений);
	
	ВыборкаОчередь = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаОчередь.Следующий() Цикл
		
		РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ВыполнитьЗаписьВРегистр(
		                ВидОповещения,
		                ВыборкаОчередь.Подписчик,
		                ВыборкаОчередь.ИсточникОповещения,
		                ВыборкаОчередь.ДатаОтправки,
		                ВыборкаОчередь.ДатаАктуальностиОтправки);
		
	КонецЦикла;

КонецПроцедуры

Процедура АнализПросроченнаяЗадолженность(ВидОповещения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыОповещенийКлиентам.ГруппаРассылокИОповещений,
	|	ГруппыРассылокИОповещений.Принудительная,
	|	ГруппыРассылокИОповещений.ОтправлятьПартнеру,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактнымЛицамРоли
	|ИЗ
	|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|		ПО ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|ГДЕ
	|	ВидыОповещенийКлиентам.Ссылка = &ВидОповещения";
	
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Запрос = Новый Запрос;
	
	Если Выборка.Принудительная Тогда
		
		Если Не Выборка.ОтправлятьПартнеру И НЕ Выборка.ОтправлятьКонтактнымЛицамРоли Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК ИсточникОповещения,
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(РасчетыСКлиентамиОстатки.КОплатеОстаток) КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ТекущаяДата, ) КАК РасчетыСКлиентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|		ПО РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|			И (ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения)
		|ГДЕ
		|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер
		|
		|ИМЕЮЩИЕ
		|	ВЫБОР
		|		КОГДА СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) >= СУММА(РасчетыСКлиентамиОстатки.КОплатеОстаток)
		|			ТОГДА СУММА(РасчетыСКлиентамиОстатки.КОплатеОстаток)
		|		ИНАЧЕ СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток)
		|	КОНЕЦ > 0"
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК ИсточникОповещения,
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(РасчетыСКлиентамиОстатки.КОплатеОстаток) КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|			&ТекущаяДата,
		|			АналитикаУчетаПоПартнерам.Партнер В
		|				(ВЫБРАТЬ
		|					ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
		|				ИЗ
		|					Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|						ПО
		|							ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|								И ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
		|				ГДЕ
		|					ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений
		|					И НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
		|					И ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
		|					И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру
		|						ИЛИ ПодпискиНаРассылкиИОповещенияКлиентам.КоличествоКонтактныхЛицАдресатов > 0)
		|					И ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения ЕСТЬ NULL )) КАК РасчетыСКлиентамиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер
		|
		|ИМЕЮЩИЕ
		|	ВЫБОР
		|		КОГДА СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) >= СУММА(РасчетыСКлиентамиОстатки.КОплатеОстаток)
		|			ТОГДА СУММА(РасчетыСКлиентамиОстатки.КОплатеОстаток)
		|		ИНАЧЕ СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток)
		|	КОНЕЦ > 0";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", Выборка.ГруппаРассылокИОповещений);
	
	ВыборкаОчередь = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаОчередь.Следующий() Цикл
		
		РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ВыполнитьЗаписьВРегистр(
		                ВидОповещения,
		                ВыборкаОчередь.ИсточникОповещения,
		                ВыборкаОчередь.ИсточникОповещения,
		                Дата(1,1,1),
		                Дата(1,1,1));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АнализПлановыеПлатежи(ВидОповещения)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыОповещенийКлиентам.ГруппаРассылокИОповещений,
	|	ГруппыРассылокИОповещений.Принудительная,
	|	ГруппыРассылокИОповещений.ОтправлятьПартнеру,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактнымЛицамРоли
	|ИЗ
	|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|		ПО ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|ГДЕ
	|	ВидыОповещенийКлиентам.Ссылка = &ВидОповещения";
	
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Запрос = Новый Запрос;
	
	Если Выборка.Принудительная Тогда
		
		Если Не Выборка.ОтправлятьПартнеру И НЕ Выборка.ОтправлятьКонтактнымЛицамРоли Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК ИсточникОповещения,
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ) КАК РасчетыСКлиентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|		ПО РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|			И (ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения)
		|ГДЕ
		|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) > 0";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК ИсточникОповещения,
		|	СУММА(РасчетыСКлиентамиОстатки.КОплатеОстаток) КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|			ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2),
		|			АналитикаУчетаПоПартнерам.Партнер В
		|				(ВЫБРАТЬ
		|					ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
		|				ИЗ
		|					Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|						ПО
		|							ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|								И ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
		|				ГДЕ
		|					ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений
		|					И НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
		|					И ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
		|					И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру
		|						ИЛИ ПодпискиНаРассылкиИОповещенияКлиентам.КоличествоКонтактныхЛицАдресатов > 0)
		|					И ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения ЕСТЬ NULL )) КАК РасчетыСКлиентамиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСКлиентамиОстатки.КОплатеОстаток) > 0"
		
		
	КонецЕсли;
	
	ДатаАнализа = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаАнализа);
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", Выборка.ГруппаРассылокИОповещений);
	
	ВыборкаОчередь = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаОчередь.Следующий() Цикл
		
		РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ВыполнитьЗаписьВРегистр(
		                ВидОповещения,
		                ВыборкаОчередь.ИсточникОповещения,
		                ВыборкаОчередь.ИсточникОповещения,
		                Дата(1, 1, 1),
		                НачалоДня(ДатаАнализа + 86400 * 2));
		
	КонецЦикла;

КонецПроцедуры

Процедура АнализПлановыеОтгрузки(ВидОповещения)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыОповещенийКлиентам.ГруппаРассылокИОповещений,
	|	ГруппыРассылокИОповещений.Принудительная,
	|	ГруппыРассылокИОповещений.ОтправлятьПартнеру,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактнымЛицамРоли,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактномуЛицуОбъектаОповещения
	|ИЗ
	|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|		ПО ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|ГДЕ
	|	ВидыОповещенийКлиентам.Ссылка = &ВидОповещения";
	
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Запрос = Новый Запрос;
	
	Если Выборка.Принудительная Тогда
		
		Если Не Выборка.ОтправлятьПартнеру И НЕ Выборка.ОтправлятьКонтактнымЛицамРоли И НЕ Выборка.ОтправлятьКонтактномуЛицуОбъектаОповещения Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отбор.ЗаказКлиента         КАК ИсточникОповещения,
		|	Отбор.ЗаказКлиента.Партнер КАК Подписчик,
		|	&Период                    КАК ДатаСобытия
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента) КАК Отбор
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов КАК ТаблицаКОформлению
		|		ПО Отбор.ЗаказКлиента = ТаблицаКОформлению.ЗаказКлиента
		|		 И Отбор.КодСтроки    = ТаблицаКОформлению.КодСтроки
		|		 И Отбор.КОформлениюОстаток > 0
		|		 И ТаблицаКОформлению.КОформлению > 0
		|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		 И ТаблицаКОформлению.Активность
		|		 И ТаблицаКОформлению.Период = &Период
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|		ПО Отбор.ЗаказКлиента.Партнер = ОчередьСобытийДляОповещенийКлиентам.Подписчик
		|		 И Отбор.ЗаказКлиента = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|		 И ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
		|ГДЕ
		|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения ЕСТЬ NULL";
		
	Иначе
		
		 Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отбор.ЗаказКлиента         КАК ИсточникОповещения,
		|	Отбор.ЗаказКлиента.Партнер КАК Подписчик,
		|	&ДатаСобытия               КАК ДатаСобытия
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента) КАК Отбор
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов КАК ТаблицаКОформлению
		|		ПО Отбор.ЗаказКлиента = ТаблицаКОформлению.ЗаказКлиента
		|		 И Отбор.КодСтроки    = ТаблицаКОформлению.КодСтроки
		|		 И Отбор.КОформлениюОстаток > 0
		|		 И ТаблицаКОформлению.КОформлению > 0
		|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		 И ТаблицаКОформлению.Активность
		|		 И ТаблицаКОформлению.Период = &ДатаСобытия
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
		|		ПО Отбор.ЗаказКлиента.Партнер = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
		|		 И ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
		|		 И ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьКонтактномуЛицуОбъектаОповещения
		|		 И НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
		|		 И ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|		ПО Отбор.ЗаказКлиента.Партнер = ОчередьСобытийДляОповещенийКлиентам.Подписчик
		|		 И Отбор.ЗаказКлиента = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|		 И ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
		|ГДЕ
		|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения ЕСТЬ NULL";
		
	КонецЕсли;
	
	ДатаАнализа = ТекущаяДатаСеанса(); 
	
	Запрос.УстановитьПараметр("ДатаСобытия", НачалоДня(ДатаАнализа + 86400));
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", Выборка.ГруппаРассылокИОповещений);
	
	ВыборкаОчередь = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаОчередь.Следующий() Цикл
		
		РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ВыполнитьЗаписьВРегистр(
		                ВидОповещения,
		                ВыборкаОчередь.Подписчик,
		                ВыборкаОчередь.ИсточникОповещения,
		                Дата(1, 1, 1),
		                КонецДня(ВыборкаОчередь.ДатаСобытия));
		
	КонецЦикла;

КонецПроцедуры

Процедура АнализОкончаниеОпроса(ВидОповещения)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыОповещенийКлиентам.ГруппаРассылокИОповещений,
	|	ГруппыРассылокИОповещений.Принудительная,
	|	ГруппыРассылокИОповещений.ОтправлятьПартнеру,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактнымЛицамРоли,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактномуЛицуОбъектаОповещения
	|ИЗ
	|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|		ПО ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|ГДЕ
	|	ВидыОповещенийКлиентам.Ссылка = &ВидОповещения";
	
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Запрос = Новый Запрос;
	
	Если Выборка.Принудительная Тогда
		
		Если (НЕ Выборка.ОтправлятьПартнеру) ИЛИ (НЕ Выборка.ОтправлятьКонтактномуЛицуОбъектаОповещения) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НазначениеОпросов.Ссылка,
		|	НазначениеОпросов.ТипРеспондентов,
		|	НазначениеОпросов.СвободныйОпрос
		|ПОМЕСТИТЬ ЗаканчивающиесяОпросы
		|ИЗ
		|	Документ.НазначениеОпросов КАК НазначениеОпросов
		|ГДЕ
		|	НазначениеОпросов.Проведен
		|	И НазначениеОпросов.ДатаНачала < &ТекущаяДата
		|	И ДЕНЬ(НазначениеОпросов.ДатаОкончания) = ДЕНЬ(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2))
		|	И (НазначениеОпросов.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ИЛИ НазначениеОпросов.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаканчивающиесяОпросы.Ссылка КАК Опрос,
		|	Партнеры.Ссылка КАК Респондент,
		|	ЗаканчивающиесяОпросы.ТипРеспондентов
		|ПОМЕСТИТЬ ОпросыРеспонденты
		|ИЗ
		|	ЗаканчивающиесяОпросы КАК ЗаканчивающиесяОпросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|		ПО (ИСТИНА)
		|			И (ЗаканчивающиесяОпросы.СвободныйОпрос)
		|			И (ЗаканчивающиесяОпросы.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|			И (НЕ Партнеры.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаканчивающиесяОпросы.Ссылка,
		|	КонтактныеЛица.Ссылка,
		|	ЗаканчивающиесяОпросы.ТипРеспондентов
		|ИЗ
		|	ЗаканчивающиесяОпросы КАК ЗаканчивающиесяОпросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
		|		ПО (ИСТИНА)
		|			И (ЗаканчивающиесяОпросы.СвободныйОпрос)
		|			И (ЗаканчивающиесяОпросы.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
		|			И (НЕ КонтактныеЛица.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаканчивающиесяОпросы.Ссылка,
		|	НазначениеОпросовРеспонденты.Респондент,
		|	ЗаканчивающиесяОпросы.ТипРеспондентов
		|ИЗ
		|	ЗаканчивающиесяОпросы КАК ЗаканчивающиесяОпросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеОпросов.Респонденты КАК НазначениеОпросовРеспонденты
		|		ПО ЗаканчивающиесяОпросы.Ссылка = НазначениеОпросовРеспонденты.Ссылка
		|			И (НЕ ЗаканчивающиесяОпросы.СвободныйОпрос)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОпросыРеспонденты.Опрос КАК ИсточникОповещения,
		|	ВЫБОР
		|		КОГДА ОпросыРеспонденты.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ТОГДА ОпросыРеспонденты.Респондент
		|		ИНАЧЕ ОпросыРеспонденты.Респондент.Владелец
		|	КОНЕЦ КАК Подписчик,
		|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ) КАК ДатаАктуальностиОтправки
		|ПОМЕСТИТЬ НеЗаполнившиеРеспондентыОпросы
		|ИЗ
		|	ОпросыРеспонденты КАК ОпросыРеспонденты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Анкета КАК Анкета
		|		ПО ОпросыРеспонденты.Опрос = Анкета.Опрос
		|			И ОпросыРеспонденты.Респондент = Анкета.Респондент
		|			И (Анкета.Проведен)
		|ГДЕ
		|	Анкета.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеЗаполнившеиеРеспондентыОпросы.ИсточникОповещения,
		|	НеЗаполнившеиеРеспондентыОпросы.Подписчик,
		|	НеЗаполнившеиеРеспондентыОпросы.ДатаАктуальностиОтправки
		|ИЗ
		|	НеЗаполнившиеРеспондентыОпросы КАК НеЗаполнившеиеРеспондентыОпросы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|		ПО НеЗаполнившеиеРеспондентыОпросы.ИсточникОповещения = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|			И НеЗаполнившеиеРеспондентыОпросы.Подписчик = ОчередьСобытийДляОповещенийКлиентам.Подписчик
		|			И (ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения)
		|ГДЕ
		|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения ЕСТЬ NULL ";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НазначениеОпросов.Ссылка,
		|	НазначениеОпросов.ТипРеспондентов,
		|	НазначениеОпросов.СвободныйОпрос
		|ПОМЕСТИТЬ ЗаканчивающиесяОпросы
		|ИЗ
		|	Документ.НазначениеОпросов КАК НазначениеОпросов
		|ГДЕ
		|	НазначениеОпросов.Проведен
		|	И НазначениеОпросов.ДатаНачала < &ТекущаяДата
		|	И ДЕНЬ(НазначениеОпросов.ДатаОкончания) = ДЕНЬ(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2))
		|	И (НазначениеОпросов.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ИЛИ НазначениеОпросов.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаканчивающиесяОпросы.Ссылка КАК Опрос,
		|	Партнеры.Ссылка КАК Респондент,
		|	ЗаканчивающиесяОпросы.ТипРеспондентов
		|ПОМЕСТИТЬ ОпросыРеспонденты
		|ИЗ
		|	ЗаканчивающиесяОпросы КАК ЗаканчивающиесяОпросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|		ПО (ИСТИНА)
		|			И (ЗаканчивающиесяОпросы.СвободныйОпрос)
		|			И (ЗаканчивающиесяОпросы.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|			И (НЕ Партнеры.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаканчивающиесяОпросы.Ссылка,
		|	КонтактныеЛица.Ссылка,
		|	ЗаканчивающиесяОпросы.ТипРеспондентов
		|ИЗ
		|	ЗаканчивающиесяОпросы КАК ЗаканчивающиесяОпросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
		|		ПО (ИСТИНА)
		|			И (ЗаканчивающиесяОпросы.СвободныйОпрос)
		|			И (ЗаканчивающиесяОпросы.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
		|			И (НЕ КонтактныеЛица.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаканчивающиесяОпросы.Ссылка,
		|	НазначениеОпросовРеспонденты.Респондент,
		|	ЗаканчивающиесяОпросы.ТипРеспондентов
		|ИЗ
		|	ЗаканчивающиесяОпросы КАК ЗаканчивающиесяОпросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеОпросов.Респонденты КАК НазначениеОпросовРеспонденты
		|		ПО ЗаканчивающиесяОпросы.Ссылка = НазначениеОпросовРеспонденты.Ссылка
		|			И (НЕ ЗаканчивающиесяОпросы.СвободныйОпрос)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОпросыРеспонденты.Опрос КАК ИсточникОповещения,
		|	ВЫБОР
		|		КОГДА ОпросыРеспонденты.ТипРеспондентов = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ТОГДА ОпросыРеспонденты.Респондент
		|		ИНАЧЕ ОпросыРеспонденты.Респондент.Владелец
		|	КОНЕЦ КАК Подписчик,
		|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ) КАК ДатаАктуальностиОтправки
		|ПОМЕСТИТЬ НеЗаполнивеиеРеспондентыОпросы
		|ИЗ
		|	ОпросыРеспонденты КАК ОпросыРеспонденты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Анкета КАК Анкета
		|		ПО ОпросыРеспонденты.Опрос = Анкета.Опрос
		|			И ОпросыРеспонденты.Респондент = Анкета.Респондент
		|			И (Анкета.Проведен)
		|ГДЕ
		|	Анкета.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеЗаполнившеиеРеспондентыОпросы.ИсточникОповещения,
		|	НеЗаполнившеиеРеспондентыОпросы.Подписчик,
		|	НеЗаполнившеиеРеспондентыОпросы.ДатаАктуальностиОтправки
		|ИЗ
		|	НеЗаполнивеиеРеспондентыОпросы КАК НеЗаполнившеиеРеспондентыОпросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
		|		ПО НеЗаполнившеиеРеспондентыОпросы.Подписчик = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
		|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует)
		|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьКонтактномуЛицуОбъектаОповещения)
		|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру)
		|			И (НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления)
		|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|		ПО НеЗаполнившеиеРеспондентыОпросы.ИсточникОповещения = ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
		|			И НеЗаполнившеиеРеспондентыОпросы.Подписчик = ОчередьСобытийДляОповещенийКлиентам.Подписчик
		|			И (ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения)
		|ГДЕ
		|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения ЕСТЬ NULL ";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", Выборка.ГруппаРассылокИОповещений);
	
	ВыборкаОчередь = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаОчередь.Следующий() Цикл
		
		РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ВыполнитьЗаписьВРегистр(
		                ВидОповещения,
		                ВыборкаОчередь.Подписчик,
		                ВыборкаОчередь.ИсточникОповещения,
		                Дата(1, 1, 1),
		                КонецДня(ВыборкаОчередь.ДатаАктуальностиОтправки));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СчетаНаОплату

Процедура ОбработатьИзменениеСчетаНаОплату(Источник, ТипСобытия, РежимЗаписи)

	СозданиеСчетаИспользуется      = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(Перечисления.ТипыСобытийОповещений.ВыпискаСчета);
	ИзменениеСчетаИспользуется     = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(Перечисления.ТипыСобытийОповещений.ИзменениеСчета);
	АннулированиеСчетаИспользуется = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(Перечисления.ТипыСобытийОповещений.АннулированиеСчета);
	
	Если ТипСобытия = "ПередЗаписью" Тогда
		
		Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ СозданиеСчетаИспользуется И НЕ ИзменениеСчетаИспользуется И НЕ АннулированиеСчетаИспользуется Тогда
			Возврат;
		КонецЕсли;
		
		Источник.ДополнительныеСвойства.Вставить("ДанныеДоЗаписи", ДанныеСчетаНаОплату(Источник.Ссылка));
		
	ИначеЕсли ТипСобытия = "ПриЗаписи" Тогда
		
		
		Если НЕ Источник.ДополнительныеСвойства.Свойство("ДанныеДоЗаписи") Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеДоЗаписи = Источник.ДополнительныеСвойства.ДанныеДоЗаписи;
		
		Если ДанныеДоЗаписи.Количество() = 0 Тогда
			
			Если СозданиеСчетаИспользуется Тогда
				
				ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.ВыпискаСчета,
				                            Источник.Ссылка,
				                            Источник.Партнер,
				                            Дата(1, 1, 1),
				                            ТекущаяДатаСеанса()+ 86400*3);
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ДанныеДоЗаписи[0].Аннулирован И Источник.Аннулирован Тогда
				
				Если АннулированиеСчетаИспользуется Тогда
					
					ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.АннулированиеСчета,
					                            Источник.Ссылка,
					                            Источник.Партнер,
					                            Дата(1, 1, 1),
					                            ТекущаяДатаСеанса()+ 86400*3);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеДоЗаписи[0].БанковскийСчет <> Источник.БанковскийСчет 
				ИЛИ ДанныеДоЗаписи[0].Валюта <> Источник.Валюта
				ИЛИ ДанныеДоЗаписи[0].Договор <> Источник.Договор
				ИЛИ ДанныеДоЗаписи[0].Касса <> Источник.Касса
				ИЛИ ДанныеДоЗаписи[0].Контрагент <> Источник.Контрагент
				ИЛИ ДанныеДоЗаписи[0].СуммаДокумента <> Источник.СуммаДокумента
				ИЛИ ДанныеДоЗаписи[0].ФормаОплаты <> Источник.ФормаОплаты Тогда
				
				Если ИзменениеСчетаИспользуется Тогда
					
					ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.ИзменениеСчета,
					                            Источник.Ссылка,
					                            Источник.Партнер,
					                            Дата(1, 1, 1),
					                            ТекущаяДатаСеанса()+ 86400*3);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ДанныеСчетаНаОплату(СчетНаОплату)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.СуммаДокумента,
	|	СчетНаОплатуКлиенту.Валюта,
	|	СчетНаОплатуКлиенту.ФормаОплаты,
	|	СчетНаОплатуКлиенту.БанковскийСчет,
	|	СчетНаОплатуКлиенту.Касса,
	|	СчетНаОплатуКлиенту.Аннулирован,
	|	СчетНаОплатуКлиенту.Контрагент,
	|	СчетНаОплатуКлиенту.Договор
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &СчетНаОплату
	|	И СчетНаОплатуКлиенту.Проведен";
	
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область СостояниеЗаказов

Процедура ОбработатьИзменениеСостоянияЗаказовКлиента(Источник, ТипСобытия)

	ТипСобытияОповещения = Перечисления.ТипыСобытийОповещений.ИзменениеСостоянияЗаказа;
	
	Если Источник.Отбор.Найти("Заказ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказКлиента = Источник.Отбор.Заказ.Значение;
	
	Если ТипСобытия = "ПередЗаписью" Тогда
		
		Если НЕ РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(ТипСобытияОповещения) Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Возврат;
		КонецЕсли;
		
		Источник.ДополнительныеСвойства.Вставить("ДанныеДоЗаписи", ДанныеРегистраСостоянияЗаказов(ЗаказКлиента));
		
		
	ИначеЕсли ТипСобытия = "ПриЗаписи" Тогда
		
		Если НЕ Источник.ДополнительныеСвойства.Свойство("ДанныеДоЗаписи") Тогда
			 Возврат;
		КонецЕсли;
		
		ДанныеПослеЗаписи = ДанныеРегистраСостоянияЗаказов(ЗаказКлиента);
		
		Если ДанныеПослеЗаписи.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ТаблицыОтличаются(ДанныеПослеЗаписи, Источник.ДополнительныеСвойства.ДанныеДоЗаписи) Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ДанныеПослеЗаписи[0];
		
		Если НЕ ТекущиеДанные.Проведен Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке
			ИЛИ ТекущиеДанные.Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию Тогда
			
			Возврат;
			
		КонецЕсли;
		
		МассивВидовОповещений = РассылкиИОповещенияКлиентамПовтИсп.ДействующиеВидыОповещенийПоТипуСобытия(ТипСобытияОповещения);
		Получатель = ТекущиеДанные.Партнер;
		
		Для Каждого ВидОповещения Из МассивВидовОповещений Цикл
		
			РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ВыполнитьЗаписьВРегистр(ВидОповещения,
			                                                                             Получатель,
			                                                                             ЗаказКлиента,
			                                                                             Дата(1, 1, 1),
			                                                                             ТекущаяДатаСеанса() + 86400);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ДанныеРегистраСостоянияЗаказов(ЗаказКлиента)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние,
	|	ЗаказКлиента.Проведен,
	|	ЗаказКлиента.Партнер
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО СостоянияЗаказовКлиентов.Заказ = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область НачислениеСписаниеБонусов

Процедура ОбработатьИзменениеБонусныхБаллов(Источник, ТипСобытия);

	НачислениеБонусовИспользуется = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(Перечисления.ТипыСобытийОповещений.НачислениеБонусов);
	СписаниеБонусовИспользуется = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(Перечисления.ТипыСобытийОповещений.СписаниеБонусов);
	
	Если Источник.Отбор.Найти("Регистратор") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Регистратор = Источник.Отбор.Регистратор.Значение;
	
	Если ТипСобытия = "ПередЗаписью" Тогда
		
		Если НЕ НачислениеБонусовИспользуется И НЕ СписаниеБонусовИспользуется Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			КассоваяСмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "КассоваяСмена");
			Если Не КассоваяСмена.Пустая() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ЧекАрхивный(Регистратор) Тогда
			Возврат;
		КонецЕсли;
		
		Источник.ДополнительныеСвойства.Вставить("ДанныеДоЗаписи", ДанныеРегистраНачислениеБонусов(Регистратор));
		
	ИначеЕсли ТипСобытия = "ПриЗаписи" Тогда
		
		Если НЕ Источник.ДополнительныеСвойства.Свойство("ДанныеДоЗаписи") Тогда
			 Возврат;
		КонецЕсли;
		
		Если ЧекАрхивный(Регистратор) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеПослеЗаписи = ДанныеРегистраНачислениеБонусов(Регистратор);
		
		Если ТаблицыОтличаются(ДанныеПослеЗаписи.Начисление, Источник.ДополнительныеСвойства.ДанныеДоЗаписи.Начисление) Тогда
			
			МассивПредполагаемыхПолучателей = ДанныеПослеЗаписи.Начисление.ВыгрузитьКолонку("Партнер");
			Для Каждого Получатель Из МассивПредполагаемыхПолучателей Цикл
				
				ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.НачислениеБонусов,
				                            Регистратор,
				                            Получатель,
				                            Дата(1, 1, 1),
				                            ТекущаяДатаСеанса() + 86400);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТаблицыОтличаются(ДанныеПослеЗаписи.Списание, Источник.ДополнительныеСвойства.ДанныеДоЗаписи.Списание) Тогда
		
			МассивПредполагаемыхПолучателей = ДанныеПослеЗаписи.Списание.ВыгрузитьКолонку("Партнер");
			Для Каждого Получатель Из МассивПредполагаемыхПолучателей Цикл
				
				ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.СписаниеБонусов,
				                            Регистратор,
				                            Получатель,
				                            Дата(1, 1, 1),
				                            ТекущаяДатаСеанса() + 86400);
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеРегистраНачислениеБонусов(Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	СУММА(БонусныеБаллы.Начислено) КАК Начислено
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Регистратор = &Регистратор
	|	И БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	СУММА(БонусныеБаллы.Начислено) КАК Начислено
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Регистратор = &Регистратор
	|	И БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнер";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Начисление", Результат[0].Выгрузить());
	СтруктураДанных.Вставить("Списание", Результат[1].Выгрузить());
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ЧекАрхивный(Регистратор)
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЧекККМ") ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Архивный");
	Иначе
		Возврат Ложь;
	КонецЕсли
	
КонецФункции

#КонецОбласти

#Область ПоступлениеОплаты

Процедура ОбработатьИзменениеПоступленияОплаты(Источник, ТипСобытия, РежимЗаписи)

	ПоступлениеОплатыИспользуется = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента);
	
	Если ТипСобытия = "ПередЗаписью" Тогда
		
		Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ПоступлениеОплатыИспользуется Тогда
			Возврат;
		КонецЕсли;
		
		Источник.ДополнительныеСвойства.Вставить("ДанныеДоЗаписи", ДанныеПоступленияОплаты(Источник.Ссылка));
		
	ИначеЕсли ТипСобытия = "ПриЗаписи" Тогда
		
		Если НЕ Источник.ДополнительныеСвойства.Свойство("ДанныеДоЗаписи") Тогда
			Возврат;
		КонецЕсли;
		
		РасшифровкаПлатежаДоЗаписи = Источник.ДополнительныеСвойства.ДанныеДоЗаписи;
		РасшифровкаПлатежаДоЗаписи.Свернуть("Партнер,Валюта", "Сумма");
		
		РасшифровкаПлатежа = Источник.РасшифровкаПлатежа.Выгрузить(,"Партнер,Сумма");
		РасшифровкаПлатежа.Колонки.Добавить("Валюта");
		РасшифровкаПлатежа.Свернуть("Партнер", "Сумма");
		
		Для каждого ТекСтрока Из РасшифровкаПлатежа Цикл
			
			СтрокаДоЗаписи = РасшифровкаПлатежаДоЗаписи.Найти(ТекСтрока.Партнер, "Партнер");
			
			Если СтрокаДоЗаписи = Неопределено
				Или СтрокаДоЗаписи.Валюта <> Источник.Валюта
				Или СтрокаДоЗаписи.Сумма <> ТекСтрока.Сумма Тогда
				
				ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.ПоступлениеОплатыОтКлиента,
				                            Источник.Ссылка,
				                            ТекСтрока.Партнер,
				                            Дата(1, 1, 1),
				                            ТекущаяДатаСеанса()+ 86400*3);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ДанныеПоступленияОплаты(ПлатежныйДокумент)

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Партнер КАК Партнер,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сумма КАК Сумма,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Валюта КАК Валюта
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &ПлатежныйДокумент
		|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Партнер КАК Партнер,
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма КАК Сумма,
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Валюта КАК Валюта
		|	
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка = &ПлатежныйДокумент
		|	И ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Партнер КАК Партнер,
		|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Сумма КАК Сумма,
		|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Валюта КАК Валюта
		|	
		|ИЗ
		|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОперацияПоПлатежнойКартеРасшифровкаПлатежа
		|ГДЕ
		|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка = &ПлатежныйДокумент
		|	И ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Проведен
		|
		|";
	
	Запрос.УстановитьПараметр("ПлатежныйДокумент", ПлатежныйДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область СозданиеВзаимодействийПоОчередиОповещений

Функция ДанныеВидаОповещения(ВидОповещения)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыОповещенийКлиентам.Ссылка КАК ВидОповещения,
	|	ВидыОповещенийКлиентам.ГруппаРассылокИОповещений,
	|	ВидыОповещенийКлиентам.ПредназначенаДляЭлектронныхПисем,
	|	ВидыОповещенийКлиентам.ПредназначенаДляSMS,
	|	ВидыОповещенийКлиентам.ШаблонСообщенияSMS,
	|	ВидыОповещенийКлиентам.ШаблонЭлектронногоПисьма,
	|	ВидыОповещенийКлиентам.УсловиеОтправки,
	|	ВидыОповещенийКлиентам.ТипСобытия,
	|	ГруппыРассылокИОповещений.Принудительная,
	|	ГруппыРассылокИОповещений.УчетнаяЗапись,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииПартнераДляПисем,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииПартнераДляSMS,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииКонтактногоЛицаДляSMS,
	|	ГруппыРассылокИОповещений.ОтправлятьПартнеру,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактномуЛицуОбъектаОповещения,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактнымЛицамРоли,
	|	ГруппыРассылокИОповещений.РольКонтактногоЛица,
	|	ГруппыРассылокИОповещений.Ответственный,
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.ИмяПользователя, """") КАК УчетнаяЗаписьИмяПользователя,
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты, """") КАК УчетнаяЗаписьАдресЭлектроннойПочты,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.УдалятьПисьмаПослеОтправки, ЛОЖЬ) КАК УдалятьПисьмаПослеОтправки,
	|	ВидыОповещенийКлиентам.Наименование,
	|	ВидыОповещенийКлиентам.ПараметрыУсловия.(
	|		ЭтоПараметрПредущегоСообщения,
	|		ИмяПараметра
	|	),
	|	ВидыОповещенийКлиентам.ИспользуетсяУсловиеОтправки
	|ИЗ
	|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|				ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
	|			ПО ГруппыРассылокИОповещений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ПО ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|ГДЕ
	|	ВидыОповещенийКлиентам.Ссылка = &ВидОповещенийКлиентам
	|	И НЕ ВидыОповещенийКлиентам.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОповещенийКлиентам", ВидОповещения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции 

Процедура ОбработатьОчередьСообщенийПоВидуОповещения(ВидОповещения, ДатаОбработки );
	
	ДанныеВидаОповещения    = ДанныеВидаОповещения(ВидОповещения);
	Если ДанныеВидаОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТипаСобытия       = Перечисления.ТипыСобытийОповещений.ДанныеДляОбработкиОчередиОповещений(ДанныеВидаОповещения.ТипСобытия);
	ДанныеПолучателей       = ДанныеПолучателейПоВидуОповещения(ДанныеВидаОповещения, ДатаОбработки, ДанныеТипаСобытия);
	ДанныеШаблоновСообщений = ДанныеШаблоновВидаОповещений(ДанныеВидаОповещения, ДатаОбработки);
	
	МассивСозданныхВзаимодействий = Новый Массив;
	
	СформироватьСообщенияПоВидуОповещения(ДанныеВидаОповещения, ДанныеТипаСобытия, ДанныеПолучателей,
	                                      ДанныеШаблоновСообщений, МассивСозданныхВзаимодействий);
	
КонецПроцедуры

Процедура СформироватьСообщенияПоВидуОповещения(ДанныеВидаОповещения, ДанныеТипаСобытия, ДанныеПолучателей,
	                                            ДанныеШаблоновСообщений, МассивСозданныхВзаимодействий)

	Если ДанныеВидаОповещения.ПредназначенаДляЭлектронныхПисем Тогда
		
		Для Каждого СтрокаДанныхШаблона Из ДанныеШаблоновСообщений.ДанныеШаблонаПисьма.ТаблицаВыводимыхПолей Цикл
			
			ДанныеПоИсточнику = ДанныеПолучателей.Получить(СтрокаДанныхШаблона.ИсточникОповещения);
			Если ДанныеПоИсточнику = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ДанныеАдресатов = ДанныеПоИсточнику.Получить(СтрокаДанныхШаблона.Подписчик);
			Если ДанныеПолучателей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СоздатьПисьмоПоОповещению(ДанныеАдресатов, СтрокаДанныхШаблона,
			                          ДанныеВидаОповещения, ДанныеШаблоновСообщений.ДанныеШаблонаПисьма,
			                          ДанныеТипаСобытия, 
			                          МассивСозданныхВзаимодействий);
			
			КонецЦикла;
			
			Взаимодействия.УстановитьПапкиДляМассиваПисем(МассивСозданныхВзаимодействий);
		
	КонецЕсли;
	
	Если ДанныеВидаОповещения.ПредназначенаДляSMS Тогда
		
		Для Каждого СтрокаДанныхШаблона Из ДанныеШаблоновСообщений.ДанныеШаблонаSMS.ТаблицаВыводимыхПолей Цикл
			
			ДанныеПоИсточнику = ДанныеПолучателей.Получить(СтрокаДанныхШаблона.ИсточникОповещения);
			Если ДанныеПоИсточнику = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ДанныеАдресатов = ДанныеПоИсточнику.Получить(СтрокаДанныхШаблона.Подписчик);
			Если ДанныеПолучателей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СоздатьSMSПоОповещению(ДанныеАдресатов, СтрокаДанныхШаблона,
			                       ДанныеВидаОповещения, ДанныеШаблоновСообщений.ДанныеШаблонаSMS,
			                       ДанныеТипаСобытия, МассивСозданныхВзаимодействий);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Взаимодействия.РассчитатьРассмотреноПоПредметам(МассивСозданныхВзаимодействий);
	Взаимодействия.РассчитатьРассмотреноПоКонтактам(МассивСозданныхВзаимодействий);

КонецПроцедуры

Процедура СоздатьSMSПоОповещению(ДанныеПолучателей,
                                СтрокаДанныхШаблона,
                                ДанныеВидаОповещения,
                                ДанныеШаблона,
                                ДанныеТипаСобытия,
                                МассивСозданныхВзаимодействий)
	
	Если НЕ СообщениеУдовлетворяетУсловиюОтправки(ДанныеВидаОповещения, СтрокаДанныхШаблона, ДанныеПолучателей) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТелефонов = Новый Массив;
	
	ДокументСообщениеSMS    = Документы.СообщениеSMS.СоздатьДокумент();
	ПредставлениеПолучателя = "";
	
	Для Каждого ДанныеПолучателя Из ДанныеПолучателей.МассивПолучателей Цикл
		Для Каждого ДанныеТелефона Из ДанныеПолучателя.КонтактнаяИнформация.МассивНомеровТелефонов Цикл
			
			НомерТелефона = "";
			ПодготовитьНомерТелефона(ДанныеТелефона.ЗначениеПолей,
			                         ДанныеТелефона.Представление,
			                         НомерТелефона);
			
			Если ПустаяСтрока(НомерТелефона) Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивТелефонов.Найти(НомерТелефона) = Неопределено Тогда
				МассивТелефонов.Добавить(НомерТелефона);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ДанныеАдресата = Новый Структура;
			ДанныеАдресата.Вставить("Получатель", ДанныеПолучателя.Получатель);
			ДанныеАдресата.Вставить("ПредставлениеПолучателя", ДанныеПолучателя.ПредставлениеПолучателя);
			ДанныеАдресата.Вставить("ПредставлениеКонтактнойИнформации", ДанныеТелефона.Представление);
			ДанныеАдресата.Вставить("КонтактнаяИнформация", НомерТелефона);
			
			ДобавитьАдресатаSMS(ДокументСообщениеSMS, ДанныеАдресата);
			
		КонецЦикла;
	КонецЦикла;
	
	Если ДокументСообщениеSMS.Адресаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Ответственный", ДанныеВидаОповещения.Ответственный);
	ДанныеДокумента.Вставить("Ссылка", ДанныеВидаОповещения.ВидОповещения);
	ДанныеДокумента.Вставить("Тема", ДанныеВидаОповещения.Наименование);
	ДанныеДокумента.Вставить("Комментарий", КомментарийДляСообщенияПоОповещению(ДанныеВидаОповещения));
	ДанныеДокумента.Вставить("ОтправлятьВТранслите", ДанныеШаблона.ДанныеШаблона.ОтправлятьВТранслите);
	ДанныеДокумента.Вставить("Основание", Неопределено);
	ДанныеДокумента.Вставить("ДатаРассылки", ДанныеПолучателей.ДатаОтправки);
	ДанныеДокумента.Вставить("ДатаАктуальности", ДанныеПолучателей.ДатаАктуальностиОтправки);


	ЗаполнитьРеквизитыДокументаСообщениеSMS(ДанныеДокумента, ДокументСообщениеSMS);
	ТаблицаПараметровСообщения = ТаблицаПараметровСообщения(СтрокаДанныхШаблона, ДанныеШаблона.ДанныеШаблона, ДанныеТипаСобытия);
	ДокументСообщениеSMS.ТекстСообщения = ШаблоныСообщенийСервер.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
	                                                                     ДанныеШаблона.ДанныеШаблона.ТекстШаблонаSMS,
	                                                                     ТаблицаПараметровСообщения);

	ЗаписатьДокументСообщениеSMS(ДокументСообщениеSMS, ДанныеДокумента);
	ВыполнитьЗаписьДанныхОповещения(СтрокаДанныхШаблона, ДанныеВидаОповещения);
	МассивСозданныхВзаимодействий.Добавить(ДокументСообщениеSMS.Ссылка);
	
КонецПроцедуры

Процедура СоздатьПисьмоПоОповещению(ДанныеПолучателей,
	                                СтрокаДанныхШаблона,
	                                ДанныеВидаОповещения,
	                                ДанныеШаблонаПисьма,
	                                ДанныеТипаСобытия,
	                                МассивСозданныхВзаимодействий)
	
	Если НЕ СообщениеУдовлетворяетУсловиюОтправки(ДанныеВидаОповещения, СтрокаДанныхШаблона, ДанныеПолучателей) Тогда
		Возврат;
	КонецЕсли;
	
	МассивАдресов = Новый Массив;
	ДанныеШаблона = ДанныеШаблонаПисьма.ДанныеШаблона;
	ТаблицаПрисоединенныхФайлов = ДанныеШаблонаПисьма.ТаблицаПрисоединенныхФайлов;
	
	Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	ПредставлениеПолучателя = "";
	
	Для Каждого ДанныеПолучателя Из ДанныеПолучателей.МассивПолучателей Цикл
		Для Каждого АдресЭП Из ДанныеПолучателя.КонтактнаяИнформация.МассивАдресовЭП Цикл
			
			Если МассивАдресов.Найти(АдресЭП.Представление) = Неопределено Тогда
				МассивАдресов.Добавить(АдресЭП.Представление);
			Иначе
				Продолжить;
			КонецЕсли;
			
			Получатель = Новый Структура("КонтактнаяИнформация, ПредставлениеПолучателя, Получатель",
			                             АдресЭП.Представление,
			                             ДанныеПолучателя.ПредставлениеПолучателя, 
			                             ДанныеПолучателя.Получатель);
			
			Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Получатель.КонтактнаяИнформация) Тогда
				 ДобавитьПолучателяПисьма(Письмо.ПолучателиПисьма, Получатель);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если Письмо.ПолучателиКопий.Количество() = 0 И Письмо.ПолучателиПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Письмо.Автор                    = Пользователи.ТекущийПользователь();
	Письмо.Ответственный            = ДанныеВидаОповещения.Ответственный;
	Письмо.Дата                     = ТекущаяДатаСеанса();
	Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Письмо.Кодировка                = "UTF-8";
	Письмо.УчетнаяЗапись            = ДанныеВидаОповещения.УчетнаяЗапись;
	
	Письмо.ОтправительПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(
	                                            ДанныеВидаОповещения.УчетнаяЗаписьИмяПользователя,
	                                            ДанныеВидаОповещения.УчетнаяЗаписьАдресЭлектроннойПочты,
	                                            "");
	Письмо.СтатусПисьма             = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	Письмо.ТипТекста                = ?(ДанныеШаблона.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML, 
	                                            Перечисления.ТипыТекстовЭлектронныхПисем.HTML, 
	                                            Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	
	Письмо.УведомитьОДоставке            = Ложь;
	Письмо.УведомитьОПрочтении           = Ложь;
	Письмо.ОтображатьТелоИсходногоПисьма = Ложь;
	Письмо.ВключатьТелоИсходногоПисьма   = Ложь;
	Письмо.УдалятьПослеОтправки          = ДанныеВидаОповещения.УдалятьПисьмаПослеОтправки;
	Письмо.Комментарий                   = КомментарийДляСообщенияПоОповещению(ДанныеВидаОповещения);
	Письмо.ВзаимодействиеОснование       = ДанныеВидаОповещения.ВидОповещения;
	Письмо.ДатаКогдаОтправить            = ДанныеПолучателей.ДатаОтправки;
	Письмо.ДатаАктуальностиОтправки      = ДанныеПолучателей.ДатаАктуальностиОтправки;
	
	Письмо.ЕстьВложения             = ТаблицаПрисоединенныхФайлов.Количество() > 0;
	
	ТаблицаПараметровСообщения = ТаблицаПараметровСообщения(СтрокаДанныхШаблона, ДанныеШаблона, ДанныеТипаСобытия);
	Письмо.Тема                = ШаблоныСообщенийСервер.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
	                                                          ДанныеШаблона.ТемаПисьма,
	                                                          ТаблицаПараметровСообщения);
	Если ДанныеШаблона.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
		Письмо.Текст = ШаблоныСообщенийСервер.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
		                                                          ДанныеШаблона.ТекстШаблонаПисьма,
		                                                          ТаблицаПараметровСообщения);
	Иначе
		Письмо.ТекстHTML = ШаблоныСообщенийСервер.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
		                                                                ДанныеШаблона.ТекстШаблонаПисьмаHTML,
		                                                                ТаблицаПараметровСообщения);
		Письмо.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Письмо.ТекстHTML);
	КонецЕсли;
	
	СформироватьСпискиПолучателей(Письмо);
	
	Письмо.Записать();
	
	Для Каждого Вложение Из ТаблицаПрисоединенныхФайлов Цикл
		ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		                                Письмо.Ссылка, Вложение.АдресВременногоХранилища, Вложение.Наименование, Вложение.Размер);
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИДФайлаЭлектронногоПисьма;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
			
	КонецЦикла;
	
	МассивСозданныхВзаимодействий.Добавить(Письмо.Ссылка);
	ВыполнитьЗаписьДанныхОповещения(СтрокаДанныхШаблона, ДанныеВидаОповещения);
	
	Реквизиты = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи( ,Письмо.Ссылка,Истина,);
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, Реквизиты);
	
	
КонецПроцедуры

Процедура ВыполнитьЗаписьДанныхОповещения(СтрокаДанныхШаблона, ДанныеВидаОповещения)
	
	Если ДанныеВидаОповещения.ИспользуетсяУсловиеОтправки Тогда
		СтруктураДанныеСообщения = Новый Структура;
		Для каждого Параметр Из ДанныеВидаОповещения.ПараметрыУсловия.Выгрузить() Цикл
			Если НЕ Параметр.ЭтоПараметрПредущегоСообщения И Не СтруктураДанныеСообщения.Свойство(Параметр.ИмяПараметра) Тогда
				СтруктураДанныеСообщения.Вставить(Параметр.ИмяПараметра, СтрокаДанныхШаблона[Параметр.ИмяПараметра]);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураДанныеСообщения.Количество() > 0 Тогда
			МенеджерЗаписи = РегистрыСведений.ДанныеПоследнихОповещений.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидОповещения              = ДанныеВидаОповещения.ВидОповещения;
			МенеджерЗаписи.ИсточникОповещения         = СтрокаДанныхШаблона.ИсточникОповещения;
			МенеджерЗаписи.Подписчик                  = СтрокаДанныхШаблона.Подписчик;
			МенеджерЗаписи.ДанныеПоследнегоОповещения = Новый ХранилищеЗначения(СтруктураДанныеСообщения);
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СообщениеУдовлетворяетУсловиюОтправки(ДанныеВидаОповещения, СтрокаДанныхШаблона, ДанныеПолучателей)
	
	Если НЕ ДанныеВидаОповещения.ИспользуетсяУсловиеОтправки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеПолучателей.ДанныеПоследнегоОповещения = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеПредыдущегоСообщения = ДанныеПолучателей.ДанныеПоследнегоОповещения.Получить();
	
	Если ДанныеПредыдущегоСообщения = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
		
	УсловиеОтправки = ДанныеВидаОповещения.УсловиеОтправки;
	
	Попытка
	
		СоответствиеПараметровУсловия = ШаблоныСообщенийКлиентСервер.ПолучитьПараметрыТекстаСообщения(УсловиеОтправки);
		ТекущееСообщение = Новый Структура;
		ПредыдущееСообщение = Новый Структура;
		
		Для Каждого ЭлементСоотвествия ИЗ СоответствиеПараметровУсловия Цикл
			Для Каждого Параметр Из ЭлементСоотвествия.Значение Цикл
				Если ЭлементСоотвествия.Ключ = "ПредыдущееСообщение" Тогда
					
					ПредыдущееСообщение.Вставить(Параметр, ДанныеПредыдущегоСообщения[Параметр]);
					
				ИначеЕсли ЭлементСоотвествия.Ключ = "ТекущееСообщение" Тогда
					
					ТекущееСообщение.Вставить(Параметр, СтрокаДанныхШаблона[Параметр]); 
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				УсловиеОтправки = СтрЗаменить(УсловиеОтправки, "[", "");
				УсловиеОтправки = СтрЗаменить(УсловиеОтправки, "]", "");
				
			КонецЦикла;
		КонецЦикла;
		
		Если РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(УсловиеОтправки) = Ложь Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	
	Возврат Истина;
	
КонецФункции

Функция ТаблицаПараметровСообщения(СтрокаДанныхШаблона, ДанныеШаблона, ДанныеТипаСобытия)

	СоответстиеПараметровТекстаСообщения = СоответствиеПараметровСообщения(ДанныеШаблона);
	ТаблицаПараметровСообщения = ШаблоныСообщенийСервер.ПустаяТаблицаПараметровСообщения();
	МассивПараметров = СоответстиеПараметровТекстаСообщения.Получить(ДанныеТипаСобытия.Имя);
	
	Если МассивПараметров <> Неопределено Тогда
		
		Для Каждого Параметр Из МассивПараметров Цикл
			Попытка
				ШаблоныСообщенийСервер.ДобавитьСтрокуТаблицуПараметров(ТаблицаПараметровСообщения,
				                                                       ДанныеТипаСобытия.Имя + "." + Параметр,
				                                                       СтрокаДанныхШаблона[Параметр]);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если МассивПараметров.Найти("ВнешняяСсылкаНаОбъект") <> Неопределено Тогда
			ШаблоныСообщенийСервер.ДобавитьСтрокуТаблицуПараметров(
		                            ТаблицаПараметровСообщения,
		                            ДанныеТипаСобытия.Имя + ".ВнешняяСсылкаНаОбъект",
		                            ШаблоныСообщенийСервер.ВнешняяСсылкаНаОбъект(СтрокаДанныхШаблона.ИсточникОповещения));
		
	КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаПараметровСообщения;

КонецФункции

Функция СоответствиеПараметровСообщения(ДанныеШаблона)

	Возврат  ШаблоныСообщенийСервер.ПараметрыТекстаСообщения(ДанныеШаблона.ПредназначенДляЭлектронныхПисем,
	                                                         ДанныеШаблона.ПредназначенДляSMS,
	                                                         ДанныеШаблона.ТипТекстаПисьма,
	                                                         ДанныеШаблона.ТемаПисьма,
	                                                         ДанныеШаблона.ТекстШаблонаПисьмаHTML,
	                                                         ДанныеШаблона.ТекстШаблонаПисьма,
	                                                         ДанныеШаблона.ТекстШаблонаSMS);

КонецФункции 

Функция ДанныеШаблоновВидаОповещений(ДанныеВидаОповещения, ДатаОтработки)

	ДанныеШаблоновСообщений = Новый Структура;
	ДанныеШаблоновСообщений.Вставить("ДанныеШаблонаSMS",Неопределено);
	ДанныеШаблоновСообщений.Вставить("ДанныеШаблонаПисьма", Неопределено);
	Если ДанныеВидаОповещения.ИспользуетсяУсловиеОтправки Тогда
		ПараметрыУсловия = ДанныеВидаОповещения.ПараметрыУсловия.Выгрузить();
	Иначе
		ПараметрыУсловия = Неопределено;
	КонецЕсли;
	
	Если ДанныеВидаОповещения.ПредназначенаДляSMS Тогда
		ДанныеШаблоновСообщений.ДанныеШаблонаSMS = ДанныеШаблонаСообщений(ДатаОтработки,
		                                                                  ДанныеВидаОповещения.ВидОповещения,
		                                                                  ДанныеВидаОповещения.ШаблонСообщенияSMS,
		                                                                  ПараметрыУсловия,
		                                                                  Ложь);
	КонецЕсли;
	
	Если ДанныеВидаОповещения.ПредназначенаДляЭлектронныхПисем Тогда
		ДанныеШаблоновСообщений.ДанныеШаблонаПисьма = ДанныеШаблонаСообщений(ДатаОтработки,
		                                                                     ДанныеВидаОповещения.ВидОповещения,
		                                                                     ДанныеВидаОповещения.ШаблонЭлектронногоПисьма,
		                                                                     ПараметрыУсловия,
		                                                                     Истина);
	КонецЕсли;
	
	Возврат ДанныеШаблоновСообщений;

КонецФункции

Функция ДанныеШаблонаСообщений(ДатаОтработки, ВидОповещения, ШаблонСообщения, ПараметрыУсловия, ПредназначенДляПисем)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ШаблоныСообщений.ТекстШаблонаПисьма,
	|	ШаблоныСообщений.ПредназначенДляЭлектронныхПисем,
	|	ШаблоныСообщений.ТекстШаблонаSMS,
	|	ШаблоныСообщений.ТекстШаблонаПисьмаHTML,
	|	ШаблоныСообщений.ТипТекстаПисьма,
	|	ШаблоныСообщений.ОтправлятьВТранслите,
	|	ШаблоныСообщений.ТемаПисьма,
	|	ШаблоныСообщений.ПредназначенДляSMS,
	|	ШаблоныСообщений.Параметры.(
	|		Ссылка,
	|		НомерСтроки,
	|		ИмяПараметра,
	|		ТипПараметра,
	|		ЭтоПредопределенныйПараметр,
	|		ПредставлениеПараметра
	|	)
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Ссылка = &ШаблонСообщения
	|	И ШаблоныСообщений.ПредназначенДляЭлектронныхПисем = &ПредназначенДляЭлектронныхПисем
	|	И ШаблоныСообщений.ПредназначенДляSMS = &ПредназначенДляSMS
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныСообщенийПрисоединенныеФайлы.Ссылка,
	|	ШаблоныСообщенийПрисоединенныеФайлы.Размер,
	|	ШаблоныСообщенийПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма,
	|	ШаблоныСообщенийПрисоединенныеФайлы.Наименование,
	|	ШаблоныСообщенийПрисоединенныеФайлы.Расширение,
	|	НЕОПРЕДЕЛЕНО КАК АдресВременногоХранилища
	|ИЗ
	|	Справочник.ШаблоныСообщенийПрисоединенныеФайлы КАК ШаблоныСообщенийПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ШаблоныСообщенийПрисоединенныеФайлы.ПометкаУдаления
	|	И ШаблоныСообщенийПрисоединенныеФайлы.ВладелецФайла = &ШаблонСообщения
	|	И ШаблоныСообщенийПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма <> """"";
	
	Запрос.УстановитьПараметр("ШаблонСообщения", ШаблонСообщения);
	Запрос.УстановитьПараметр("ПредназначенДляЭлектронныхПисем", ПредназначенДляПисем);
	Запрос.УстановитьПараметр("ПредназначенДляSMS", НЕ ПредназначенДляПисем);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат[0].Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеШаблона", Выборка);
	
	СоответстиеПараметровТекстаСообщения = ШаблоныСообщенийСервер.ПараметрыТекстаСообщения(Выборка.ПредназначенДляЭлектронныхПисем,
	                                                                                       Выборка.ПредназначенДляSMS,
	                                                                                       Выборка.ТипТекстаПисьма,
	                                                                                       Выборка.ТемаПисьма,
	                                                                                       Выборка.ТекстШаблонаПисьмаHTML,
	                                                                                       Выборка.ТекстШаблонаПисьма,
	                                                                                       Выборка.ТекстШаблонаSMS);
	
	Если СоответстиеПараметровТекстаСообщения.Количество() = 0 Тогда
		ТипСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОповещения, "ТипСобытия");
		Если Не ЗначениеЗаполнено(ТипСобытия) Тогда
			Возврат Неопределено;
		КонецЕсли;
		СоответстиеПараметровТекстаСообщения.Вставить(ОбщегоНазначения.ИмяЗначенияПеречисления(ТипСобытия), Новый Массив);
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из СоответстиеПараметровТекстаСообщения Цикл
		
		Попытка
		
			МакетСКД = Перечисления.ТипыСобытийОповещений.ПолучитьМакет(ЭлементСоответствия.Ключ);
			СнятьОграничениеИспользованияУПоля("Подписчик", МакетСКД.НаборыДанных.Данные);
			СнятьОграничениеИспользованияУПоля("ИсточникОповещения", МакетСКД.НаборыДанных.Данные);
			
			АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД, Новый УникальныйИдентификатор);
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
			
			КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
			
			Для Каждого ВыбранноеПоле Из ЭлементСоответствия.Значение Цикл 
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ВыбранноеПоле);
			КонецЦикла;
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ИсточникОповещения");
			ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Подписчик");
			
			Если ПараметрыУсловия <> Неопределено Тогда
				Для Каждого Параметр Из ПараметрыУсловия Цикл
					Если (Не Параметр.ЭтоПараметрПредущегоСообщения) И (ЭлементСоответствия.Значение.Найти(Параметр.ИмяПараметра) = Неопределено) Тогда
						ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, Параметр.ИмяПараметра);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(МакетСКД, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.Данные.Запрос;
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
			Запрос.УстановитьПараметр("ДатаОтработки", ДатаОтработки);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("ВалютаРегламентированогоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
			Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
			СтруктураВозврата.Вставить("ТаблицаВыводимыхПолей", Запрос.Выполнить().Выгрузить());
			
			Прервать;
			
		Исключение
			
			Возврат Неопределено
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТаблицаПрисоединенныхФайлов = Результат[1].Выгрузить();
	УникальныйИдентификаторДляПомещения = Новый УникальныйИдентификатор;
	Для Каждого ПрисоединенныйФайл Из ТаблицаПрисоединенныхФайлов Цикл
		ПрисоединенныйФайл.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(
		                                     ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ПрисоединенныйФайл.Ссылка),
		                                     УникальныйИдентификаторДляПомещения);
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ТаблицаПрисоединенныхФайлов", ТаблицаПрисоединенныхФайлов);
	Возврат СтруктураВозврата;

КонецФункции

Процедура СнятьОграничениеИспользованияУПоля(ИмяПоля, НаборДанных)
	
	ПолеИсточникОповещений = НаборДанных.Поля.Найти(ИмяПоля);
	Если ПолеИсточникОповещений <> Неопределено Тогда
		ПолеИсточникОповещений.ОграничениеИспользования.Поле = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПолучателейПоВидуОповещения(ДанныеВидаОповещения, ДатаОбработки, ДанныеТипаСобытия)
	
	ШаблонЗапроса = "
	|%ВременнаяТаблицаПодписчики%
	|%ВременнаяТаблицаКонтакныеЛицаОповещения%
	|%ВременнаяТаблицаКонтакныеЛицаПодписчика%
	|%КонтактнаяИнформацияПодписчики%
	|%КонтактнаяИнформацияКонтактныхЛицОповещения%
	|%КонтактнаяИнформацияКонтактныхЛицПодписчика%
	|
	|ИТОГИ ПО
	|	ИсточникОповещения,
	|	Подписчик,
	|	Получатель
	|";
	
	ОбработатьТекстЗапросаПоПодписчикамДляОповещений(ШаблонЗапроса,
	                                                 ДанныеВидаОповещения,
	                                                 ДатаОбработки,
	                                                 ДанныеТипаСобытия);
	
	ОбработатьТекстЗапросаПоКонтактнымЛицамДляОповещений(ШаблонЗапроса,
	                                                     ДанныеВидаОповещения,
	                                                     ДатаОбработки,
	                                                     ДанныеТипаСобытия);
	 
	ОбработатьТекстЗапросаПоКонтактнымЛицамПодписчика(ШаблонЗапроса,
	                                                  ДанныеВидаОповещения,
	                                                  ДатаОбработки,
	                                                  ДанныеТипаСобытия);
	
	ТекстЗапросаПоКонтактнымЛицам = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонЗапроса;
	
	Запрос.УстановитьПараметр("ВидОповещения", ДанныеВидаОповещения.ВидОповещения);
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	Запрос.УстановитьПараметр("РольКонтактногоЛица", ДанныеВидаОповещения.РольКонтактногоЛица);
	Запрос.УстановитьПараметр("ВидКИКонтактногоЛицаДляПисем", ДанныеВидаОповещения.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем);
	Запрос.УстановитьПараметр("ВидКИКонтактногоЛицаДляSMS", ДанныеВидаОповещения.ВидКонтактнойИнформацииКонтактногоЛицаДляSMS);
	Запрос.УстановитьПараметр("ВидКИПартнераДляПисем", ДанныеВидаОповещения.ВидКонтактнойИнформацииПартнераДляПисем);
	Запрос.УстановитьПараметр("ВидКИПартнераДляSMS", ДанныеВидаОповещения.ВидКонтактнойИнформацииПартнераДляSMS);
	Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", ДанныеВидаОповещения.ГруппаРассылокИОповещений);
	
	СоответствиеДанныхПолучателей = Новый Соответствие;
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		СоотвествиеПодписчики = Новый Соответствие;
		
		ВыборкаПодписчик = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодписчик.Следующий() Цикл
			
			СтруктураДанныеПодписчика = Новый Структура;
			МассивПолучателей = Новый Массив;
			
			ВыборкаПолучатель = ВыборкаПодписчик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПолучатель.Следующий() Цикл
				
				МассивНомеровТелефонов  = Новый Массив;
				МассивАдресовЭП         = Новый Массив;
				ПредставлениеПолучателя = "";
				
				ВыборкаДетали = ВыборкаПолучатель.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					
					ПредставлениеПолучателя = ?(ПустаяСтрока(ПредставлениеПолучателя), ВыборкаДетали.ПредставлениеПолучателя, ПредставлениеПолучателя);
					
					Если ДанныеВидаОповещения.ПредназначенаДляSMS 
						И (НЕ ПустаяСтрока(ВыборкаДетали.ПредставлениеТелефон) ИЛИ НЕ ПустаяСтрока(ВыборкаДетали.ЗначениеПолейТелефон)) Тогда
						
						МассивНомеровТелефонов.Добавить(Новый Структура("Представление, ЗначениеПолей",
						                                                ВыборкаДетали.ПредставлениеТелефон, ВыборкаДетали.ЗначениеПолейТелефон));
						
					КонецЕсли;
					
					Если ДанныеВидаОповещения.ПредназначенаДляЭлектронныхПисем 
						И (НЕ ПустаяСтрока(ВыборкаДетали.ПредставлениеПисьмо) ИЛИ НЕ ПустаяСтрока(ВыборкаДетали.ЗначениеПолейПисьмо)) Тогда
						
						МассивАдресовЭП.Добавить(Новый Структура("Представление, ЗначениеПолей",
						                                         ВыборкаДетали.ПредставлениеПисьмо, ВыборкаДетали.ЗначениеПолейПисьмо));
						
					КонецЕсли;
					
				КонецЦикла;
				
				СтруктураКонтактнойИнформации = Новый Структура;
				СтруктураКонтактнойИнформации.Вставить("МассивНомеровТелефонов", МассивНомеровТелефонов);
				СтруктураКонтактнойИнформации.Вставить("МассивАдресовЭП", МассивАдресовЭП);
				
				СтруктураПолучатель = Новый Структура;
				СтруктураПолучатель.Вставить("Получатель", ВыборкаПолучатель.Получатель);
				СтруктураПолучатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
				СтруктураПолучатель.Вставить("КонтактнаяИнформация", СтруктураКонтактнойИнформации);
				
				МассивПолучателей.Добавить(СтруктураПолучатель);
				
			КонецЦикла;
			
			СтруктураДанныеПодписчика.Вставить("МассивПолучателей", МассивПолучателей);
			СтруктураДанныеПодписчика.Вставить("ДатаОтправки", Дата(1,1,1));
			СтруктураДанныеПодписчика.Вставить("ДатаАктуальностиОтправки", Дата(1,1,1));
			СтруктураДанныеПодписчика.Вставить("ДанныеПоследнегоОповещения", Неопределено);
			СоотвествиеПодписчики.Вставить(ВыборкаПодписчик.Подписчик, СтруктураДанныеПодписчика);
			
		КонецЦикла;
		
		СоответствиеДанныхПолучателей.Вставить(ВыборкаИтоги.ИсточникОповещения, СоотвествиеПодписчики);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения КАК ИсточникОповещения,
	|	ОчередьСобытийДляОповещенийКлиентам.Подписчик КАК Подписчик,
	|	МАКСИМУМ(ОчередьСобытийДляОповещенийКлиентам.ДатаОтправки) КАК ДатаОтправки,
	|	МАКСИМУМ(ОчередьСобытийДляОповещенийКлиентам.ДатаАктуальностиОтправки) КАК ДатаАктуальностиОтправки
	|ПОМЕСТИТЬ ДатыРассылок
	|ИЗ
	|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
	|ГДЕ
	|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
	|	И ОчередьСобытийДляОповещенийКлиентам.Период < &ДатаОбработки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения,
	|	ОчередьСобытийДляОповещенийКлиентам.Подписчик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсточникОповещения,
	|	Подписчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРассылок.ИсточникОповещения,
	|	ДатыРассылок.Подписчик,
	|	ДатыРассылок.ДатаОтправки,
	|	ДатыРассылок.ДатаАктуальностиОтправки,
	|	ЕСТЬNULL(ДанныеПоследнихОповещений.ДанныеПоследнегоОповещения, НЕОПРЕДЕЛЕНО) КАК ДанныеПоследнегоОповещения
	|ИЗ
	|	ДатыРассылок КАК ДатыРассылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПоследнихОповещений КАК ДанныеПоследнихОповещений
	|		ПО ДатыРассылок.ИсточникОповещения = ДанныеПоследнихОповещений.ИсточникОповещения
	|			И ДатыРассылок.Подписчик = ДанныеПоследнихОповещений.Подписчик
	|			И (ДанныеПоследнихОповещений.ВидОповещения = &ВидОповещения)";
	
	Запрос.УстановитьПараметр("ВидОповещения", ДанныеВидаОповещения.ВидОповещения);
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеИсточника = СоответствиеДанныхПолучателей.Получить(Выборка.ИсточникОповещения);
		Если ДанныеИсточника <> Неопределено Тогда
			ДанныеПодписчика = ДанныеИсточника.Получить(Выборка.Подписчик);
			Если ДанныеПодписчика <> Неопределено Тогда
				ДанныеПодписчика.ДатаОтправки               = Выборка.ДатаОтправки;
				ДанныеПодписчика.ДатаАктуальностиОтправки   = Выборка.ДатаАктуальностиОтправки;
				ДанныеПодписчика.ДанныеПоследнегоОповещения = Выборка.ДанныеПоследнегоОповещения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеДанныхПолучателей;
	
КонецФункции

Процедура ОбработатьТекстЗапросаПоПодписчикамДляОповещений(ШаблонЗапроса, ДанныеВидаОповещения, ДатаОтработки, ДанныеТипаСобытия)
	
	Если НЕ ДанныеТипаСобытия.ОтправлятьПартнеру И  НЕ ДанныеТипаСобытия.ОтправлятьКонтактнымЛицамПартнера  Тогда
		
		ТекстВременнаяТаблицаПодписчики = "";
		ТекстКонтактнаяИнформацияПодписчики = "";
		
	Иначе
		
		ТекстВременнаяТаблицаПодписчики = "
		|ВЫБРАТЬ
		|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения,
		|	ОчередьСобытийДляОповещенийКлиентам.Подписчик
		|ПОМЕСТИТЬ Подписчики
		|ИЗ
		|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|ГДЕ
		|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
		|	И ОчередьСобытийДляОповещенийКлиентам.Период < &ДатаОбработки
		|;
		|
		|/////////////////////////////////////////////////////";
		
		Если ДанныеВидаОповещения.Принудительная Тогда
			
			Если ДанныеТипаСобытия.ОтправлятьПартнеру И ДанныеВидаОповещения.ОтправлятьПартнеру Тогда
			
				ТекстКонтактнаяИнформацияПодписчики = "
				|ВЫБРАТЬ
				|	Подписчики.ИсточникОповещения КАК ИсточникОповещения,
				|	Подписчики.Подписчик КАК Подписчик,
				|	Подписчики.Подписчик КАК Получатель,
				|	Партнеры.НаименованиеПолное КАК ПредставлениеПолучателя,
				|	ЕСТЬNULL(КонтактнаяИнформацияДляSMS.Представление, """") КАК ПредставлениеТелефон,
				|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияДляSMS.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейТелефон,
				|	ЕСТЬNULL(КонтактнаяИнформацияДляПисем.Представление, """") КАК ПредставлениеПисьмо,
				|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияДляПисем.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейПисьмо
				|ИЗ
				|	Подписчики КАК Подписчики
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияДляПисем
				|		ПО Подписчики.Подписчик = КонтактнаяИнформацияДляПисем.Ссылка
				|			И (КонтактнаяИнформацияДляПисем.Вид = &ВидКИПартнераДляПисем)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияДляSMS
				|		ПО Подписчики.Подписчик = КонтактнаяИнформацияДляSMS.Ссылка
				|			И (КонтактнаяИнформацияДляSMS.Вид = &ВидКИПартнераДляSMS)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО Подписчики.Подписчик = Партнеры.Ссылка";
				
			КонецЕсли;

			
		Иначе
			
			Если ДанныеТипаСобытия.ОтправлятьПартнеру Тогда
				
				ТекстКонтактнаяИнформацияПодписчики = "
				|ВЫБРАТЬ
				|	Подписчики.ИсточникОповещения КАК ИсточникОповещения,
				|	Подписчики.Подписчик,
				|	Подписчики.Подписчик КАК Получатель,
				|	Партнеры.НаименованиеПолное КАК ПредставлениеПолучателя,
				|	ЕСТЬNULL(ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляПисем, НЕОПРЕДЕЛЕНО) КАК ВидКИДляПисем,
				|	ЕСТЬNULL(ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляSMS, НЕОПРЕДЕЛЕНО) КАК ВидКИДляSMS
				|ПОМЕСТИТЬ ПодписчикиВидыКИ
				|ИЗ
				|	Подписчики КАК Подписчики
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
				|			ПО (НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления)
				|				И (ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует)
				|				И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру)
				|				И (ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений)
				|				И Партнеры.Ссылка = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
				|		ПО Подписчики.Подписчик = Партнеры.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПодписчикиВидыКИ.ИсточникОповещения,
				|	ПодписчикиВидыКИ.Подписчик,
				|	ПодписчикиВидыКИ.Получатель,
				|	ПодписчикиВидыКИ.ПредставлениеПолучателя,
				|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.Представление, """") КАК ПредставлениеТелефон,
				|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияТелефон.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейТелефон,
				|	ЕСТЬNULL(КонтактнаяИнформацияПисьма.Представление, """") КАК ПредставлениеПисьмо,
				|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияПисьма.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейПисьмо
				|ИЗ
				|	ПодписчикиВидыКИ КАК ПодписчикиВидыКИ
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияПисьма
				|		ПО ПодписчикиВидыКИ.Получатель = КонтактнаяИнформацияПисьма.Ссылка
				|			И ПодписчикиВидыКИ.ВидКИДляПисем = КонтактнаяИнформацияПисьма.Вид
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
				|		ПО ПодписчикиВидыКИ.Получатель = КонтактнаяИнформацияТелефон.Ссылка
				|			И ПодписчикиВидыКИ.ВидКИДляSMS = КонтактнаяИнформацияТелефон.Вид";
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ВременнаяТаблицаПодписчики%", ТекстВременнаяТаблицаПодписчики);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%КонтактнаяИнформацияПодписчики%", ТекстКонтактнаяИнформацияПодписчики);
	
КонецПроцедуры

Процедура ОбработатьТекстЗапросаПоКонтактнымЛицамДляОповещений(ШаблонЗапроса, ДанныеВидаОповещения, МассивИсточниковОповещений, ДанныеТипаСобытия)
	
	Если ДанныеТипаСобытия.ОтправлятьКонтактнымЛицамОбъектаОповещения Тогда
		
		ТекстВременнаяТаблицаВременнаяТаблицаКонтакныеЛицаОповещения = "
		|ВЫБРАТЬ
		|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения КАК ИсточникОповещения,
		|	ОчередьСобытийДляОповещенийКлиентам.Подписчик КАК Подписчик,
		|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения" + ДанныеТипаСобытия.ПутьККонтактномуЛицу + " КАК КонтактноеЛицоОбъектаОповещения
		|ПОМЕСТИТЬ КонтактныеЛицаОбъектОповещения
		|ИЗ
		|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
		|ГДЕ
		|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
		|	И ОчередьСобытийДляОповещенийКлиентам.Период < &ДатаОбработки
		|;
		|
		|/////////////////////////////////////////////////////";
		
		Если ДанныеВидаОповещения.Принудительная Тогда
			
			ТекстКонтактнаяИнформацияКонтактныеЛицаОповещения = "
			|ВЫБРАТЬ
			|	КонтактныеЛицаОбъектОповещения.ИсточникОповещения КАК ИсточникОповещения,
			|	КонтактныеЛицаОбъектОповещения.Подписчик,
			|	КонтактныеЛицаОбъектОповещения.КонтактноеЛицоОбъектаОповещения КАК Получатель,
			|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя,
			|	ЕСТЬNULL(КонтактнаяИнформацияДляSMS.Представление, """") КАК ПредставлениеТелефон,
			|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияДляSMS.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейТелефон,
			|	ЕСТЬNULL(КонтактнаяИнформацияДляПисем.Представление, """") КАК ПредставлениеПисьмо,
			|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияДляПисем.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейПисьмо
			|ИЗ
			|	КонтактныеЛицаОбъектОповещения КАК КонтактныеЛицаОбъектОповещения
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияДляПисем
			|		ПО КонтактныеЛицаОбъектОповещения.КонтактноеЛицоОбъектаОповещения = КонтактнаяИнформацияДляПисем.Ссылка
			|			И (КонтактнаяИнформацияДляПисем.Вид = &ВидКИКонтактногоЛицаДляПисем)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияДляSMS
			|		ПО КонтактныеЛицаОбъектОповещения.КонтактноеЛицоОбъектаОповещения = КонтактнаяИнформацияДляSMS.Ссылка
			|			И (КонтактнаяИнформацияДляSMS.Вид = &ВидКИКонтактногоЛицаДляSMS)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО КонтактныеЛицаОбъектОповещения.КонтактноеЛицоОбъектаОповещения = КонтактныеЛицаПартнеров.Ссылка";
			
		Иначе
			
			ТекстВременнаяТаблицаВременнаяТаблицаКонтакныеЛицаОповещения = ТекстВременнаяТаблицаВременнаяТаблицаКонтакныеЛицаОповещения + "
			|ВЫБРАТЬ
			|	КонтактныеЛицаОбъектОповещения.ИсточникОповещения КАК ИсточникОповещения,
			|	КонтактныеЛицаОбъектОповещения.Подписчик,
			|	КонтактныеЛицаОбъектОповещения.КонтактноеЛицоОбъектаОповещения КАК Получатель,
			|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя,
			|	ЕСТЬNULL(ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИКонтактногоЛицаОбъектаОповещенияДляПисем, НЕОПРЕДЕЛЕНО) КАК ВидКИДляПисем,
			|	ЕСТЬNULL(ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИКонтактногоЛицаОбъектаОповещенияДляSMS, НЕОПРЕДЕЛЕНО) КАК ВидКИДляSMS
			|ПОМЕСТИТЬ КонтактныеЛицаОповещенияВидыКИ
			|ИЗ
			|	КонтактныеЛицаОбъектОповещения КАК КонтактныеЛицаОбъектОповещения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
			|			ПО (НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления)
			|				И (ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует)
			|				И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьКонтактномуЛицуОбъектаОповещения)
			|				И (ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений)
			|				И КонтактныеЛицаПартнеров.Владелец = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
			|		ПО КонтактныеЛицаОбъектОповещения.КонтактноеЛицоОбъектаОповещения = КонтактныеЛицаПартнеров.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			ТекстКонтактнаяИнформацияКонтактныеЛицаОповещения = "
			|ВЫБРАТЬ
			|	КонтактныеЛицаОповещенияВидыКИ.ИсточникОповещения,
			|	КонтактныеЛицаОповещенияВидыКИ.Подписчик,
			|	КонтактныеЛицаОповещенияВидыКИ.Получатель,
			|	КонтактныеЛицаОповещенияВидыКИ.ПредставлениеПолучателя,
			|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.Представление, """") КАК ПредставлениеТелефон,
			|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияТелефон.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейТелефон,
			|	ЕСТЬNULL(КонтактнаяИнформацияПисьма.Представление, """") КАК ПредставлениеПисьмо,
			|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияПисьма.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейПисьмо
			|ИЗ
			|	КонтактныеЛицаОповещенияВидыКИ КАК КонтактныеЛицаОповещенияВидыКИ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияПисьма
			|		ПО КонтактныеЛицаОповещенияВидыКИ.Получатель = КонтактнаяИнформацияПисьма.Ссылка
			|			И КонтактныеЛицаОповещенияВидыКИ.ВидКИДляПисем = КонтактнаяИнформацияПисьма.Вид
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
			|		ПО КонтактныеЛицаОповещенияВидыКИ.Получатель = КонтактнаяИнформацияТелефон.Ссылка
			|			И КонтактныеЛицаОповещенияВидыКИ.ВидКИДляSMS = КонтактнаяИнформацияТелефон.Вид";
			
		КонецЕсли;
		
	Иначе
		
		ТекстВременнаяТаблицаВременнаяТаблицаКонтакныеЛицаОповещения = "";
		ТекстКонтактнаяИнформацияКонтактныеЛицаОповещения = "";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстКонтактнаяИнформацияКонтактныеЛицаОповещения) И СтрНайти(ШаблонЗапроса, "ВЫБРАТЬ") > 0 Тогда
		 ТекстКонтактнаяИнформацияКонтактныеЛицаОповещения = ТекстОбъединить() + ТекстКонтактнаяИнформацияКонтактныеЛицаОповещения;
	КонецЕсли;
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ВременнаяТаблицаКонтакныеЛицаОповещения%", ТекстВременнаяТаблицаВременнаяТаблицаКонтакныеЛицаОповещения);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%КонтактнаяИнформацияКонтактныхЛицОповещения%", ТекстКонтактнаяИнформацияКонтактныеЛицаОповещения);
	
КонецПроцедуры

Процедура ОбработатьТекстЗапросаПоКонтактнымЛицамПодписчика(ШаблонЗапроса,
	                                                        ДанныеВидаОповещения,
	                                                        ДатаОтработки,
	                                                        ДанныеТипаСобытия);

	Если ДанныеТипаСобытия.ОтправлятьКонтактнымЛицамПартнера Тогда
		
		Если ДанныеВидаОповещения.Принудительная Тогда
			
			ТекстВременнаяТаблицаКонтактныеЛицаПодписчиков = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения,
			|	ОчередьСобытийДляОповещенийКлиентам.Подписчик,
			|	КонтактныеЛицаПартнеров.Ссылка КАК Получатель
			|ПОМЕСТИТЬ КонтактныеЛицаПодписчика
			|ИЗ
			|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО ОчередьСобытийДляОповещенийКлиентам.Подписчик = КонтактныеЛицаПартнеров.Владелец
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.РолиКонтактногоЛица КАК КонтактныеЛицаПартнеровРолиКонтактногоЛица
			|		ПО (КонтактныеЛицаПартнеровРолиКонтактногоЛица.Ссылка = КонтактныеЛицаПартнеров.Ссылка)
			|			И (КонтактныеЛицаПартнеровРолиКонтактногоЛица.РольКонтактногоЛица = &РольКонтактногоЛица)
			|ГДЕ
			|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
			|	И ОчередьСобытийДляОповещенийКлиентам.Период < &ДатаОбработки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			ТекстКонтактнаяИнформацияКонтактныеЛицаПодписчиков = "
			|ВЫБРАТЬ
			|	КонтактныеЛицаПодписчика.ИсточникОповещения КАК ИсточникОповещения,
			|	КонтактныеЛицаПодписчика.Подписчик,
			|	КонтактныеЛицаПодписчика.Получатель КАК Получатель,
			|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя,
			|	ЕСТЬNULL(КонтактнаяИнформацияДляSMS.Представление, """") КАК ПредставлениеТелефон,
			|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияДляSMS.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейТелефон,
			|	ЕСТЬNULL(КонтактнаяИнформацияДляПисем.Представление, """") КАК ПредставлениеПисьмо,
			|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияДляПисем.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейПисьмо
			|ИЗ
			|	КонтактныеЛицаПодписчика КАК КонтактныеЛицаПодписчика
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияДляПисем
			|		ПО КонтактныеЛицаПодписчика.Получатель = КонтактнаяИнформацияДляПисем.Ссылка
			|			И (КонтактнаяИнформацияДляПисем.Вид = &ВидКИКонтактногоЛицаДляПисем)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияДляSMS
			|		ПО КонтактныеЛицаПодписчика.Получатель = КонтактнаяИнформацияДляSMS.Ссылка
			|			И (КонтактнаяИнформацияДляSMS.Вид = &ВидКИКонтактногоЛицаДляSMS)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО КонтактныеЛицаПодписчика.Получатель = КонтактныеЛицаПартнеров.Ссылка";

		Иначе
			
			ТекстВременнаяТаблицаКонтактныеЛицаПодписчиков = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения,
			|	ОчередьСобытийДляОповещенийКлиентам.Подписчик,
			|	ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.КонтактноеЛицо КАК Получатель,
			|	ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.ВидКИДляПисем,
			|	ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.ВидКИДляSMS
			|ПОМЕСТИТЬ КонтактныеЛицаПодписчика
			|ИЗ
			|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам.КонтактныеЛица КАК ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица
			|			ПО ПодпискиНаРассылкиИОповещенияКлиентам.Ссылка = ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.Ссылка
			|		ПО ОчередьСобытийДляОповещенийКлиентам.Подписчик = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
			|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений)
			|			И (НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления)
			|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует)
			|ГДЕ
			|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
			|	И ОчередьСобытийДляОповещенийКлиентам.Период < &ДатаОбработки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			ТекстКонтактнаяИнформацияКонтактныеЛицаПодписчиков = "
			|ВЫБРАТЬ
			|	КонтактныеЛицаПодписчика.ИсточникОповещения КАК ИсточникОповещения,
			|	КонтактныеЛицаПодписчика.Подписчик,
			|	КонтактныеЛицаПодписчика.Получатель КАК Получатель,
			|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя,
			|	ЕСТЬNULL(КонтактнаяИнформацияДляSMS.Представление, """") КАК ПредставлениеТелефон,
			|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияДляSMS.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейТелефон,
			|	ЕСТЬNULL(КонтактнаяИнформацияДляПисем.Представление, """") КАК ПредставлениеПисьмо,
			|	ПОДСТРОКА(ЕСТЬNULL(КонтактнаяИнформацияДляПисем.ЗначенияПолей, """"), 1, 1024) КАК ЗначениеПолейПисьмо
			|ИЗ
			|	КонтактныеЛицаПодписчика КАК КонтактныеЛицаПодписчика
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияДляПисем
			|		ПО КонтактныеЛицаПодписчика.Получатель = КонтактнаяИнформацияДляПисем.Ссылка
			|			И (КонтактнаяИнформацияДляПисем.Вид = КонтактныеЛицаПодписчика.ВидКИДляПисем)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияДляSMS
			|		ПО КонтактныеЛицаПодписчика.Получатель = КонтактнаяИнформацияДляSMS.Ссылка
			|			И (КонтактнаяИнформацияДляSMS.Вид = КонтактныеЛицаПодписчика.ВидКИДляSMS)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО КонтактныеЛицаПодписчика.Получатель = КонтактныеЛицаПартнеров.Ссылка";
			
		КонецЕсли;
		
	Иначе
		
		ТекстВременнаяТаблицаКонтактныеЛицаПодписчиков = "";
		ТекстКонтактнаяИнформацияКонтактныеЛицаПодписчиков = "";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстКонтактнаяИнформацияКонтактныеЛицаПодписчиков) И СтрНайти(ШаблонЗапроса, "ВЫБРАТЬ") > 0 Тогда
		 ТекстКонтактнаяИнформацияКонтактныеЛицаПодписчиков = ТекстОбъединить() + ТекстКонтактнаяИнформацияКонтактныеЛицаПодписчиков;
	КонецЕсли;
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ВременнаяТаблицаКонтакныеЛицаПодписчика%", ТекстВременнаяТаблицаКонтактныеЛицаПодписчиков);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%КонтактнаяИнформацияКонтактныхЛицПодписчика%", ТекстКонтактнаяИнформацияКонтактныеЛицаПодписчиков);

КонецПроцедуры

Функция КомментарийДляСообщенияПоОповещению(ДанныеВидаОповещения)

	ТекстКомментария =  НСтр("ru='Создано по виду оповещения ""%1""';uk='Створено за видом сповіщення ""%1""'");
	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, ДанныеВидаОповещения.Наименование);
	
	Возврат ТекстКомментария;
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументовПоРассылке

Процедура ОбработатьТекстЗапросаАдресатыРассылки(Данные, Запрос, ЕстьОтборПоКомпоновке)

	Если Данные.Принудительная Тогда
		
		ТекстЗапросаПартнеры = "";
		ТекстЗапросаКонактныеЛица = "";
		
		Если Данные.ОтправлятьПартнеру Тогда
			
			ТекстЗапросаПартнеры = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
			|	ПартнерыКонтактнаяИнформация.Ссылка КАК Получатель,
			|	ПартнерыКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
			|	ВЫБОР
			|		КОГДА &ПредназначенаДляПисем
			|			ТОГДА ПартнерыКонтактнаяИнформация.АдресЭП
			|		ИНАЧЕ ПартнерыКонтактнаяИнформация.НомерТелефона
			|	КОНЕЦ КАК КонтактнаяИнформация,
			|	ПОДСТРОКА(ПартнерыКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
			|	Партнеры.НаименованиеПолное КАК ПредставлениеПолучателя
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
			|		%СоединениеПоОтбору%
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
			|		ПО ПартнерыКонтактнаяИнформация.Ссылка = Партнеры.Ссылка
			|			И (ПартнерыКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииПартнера)
			|			И (НЕ Партнеры.ПометкаУдаления)";
			
			ОбработатьТекстЗапросаПоПартнерамРассылки(Запрос, ТекстЗапросаПартнеры, Данные, ЕстьОтборПоКомпоновке);
			
		КонецЕсли;
		
		Если Данные.ОтправлятьКонтактнымЛицамРоли Тогда
			
			ТекстЗапросаКонтактныеЛица ="
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Получатель,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
			|	ВЫБОР
			|		КОГДА &ПредназначенаДляПисем
			|			ТОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП
			|		ИНАЧЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
			|	КОНЕЦ КАК КонтактнаяИнформация,
			|	ПОДСТРОКА(КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
			|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = КонтактныеЛицаПартнеров.Ссылка
			|			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
			|		%СоединениеПоОтбору%
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.РолиКонтактногоЛица КАК КонтактныеЛицаПартнеровРолиКонтактногоЛица
			|		ПО КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = КонтактныеЛицаПартнеровРолиКонтактногоЛица.Ссылка
			|			И (КонтактныеЛицаПартнеровРолиКонтактногоЛица.РольКонтактногоЛица = &РольКонтактногоЛица)
			|			И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииКонтаткногоЛица)
			|		";
			
			ОбработатьТекстЗапросаПоКонтактнымЛицамРассылки(Запрос, ТекстЗапросаКонтактныеЛица, Данные, ЕстьОтборПоКомпоновке);
			Запрос.УстановитьПараметр("РольКонтактногоЛица", Данные.РольКонтактногоЛица);
			
		КонецЕсли;
		
		Если (НЕ Данные.ОтправлятьПартнеру) И (НЕ Данные.ОтправлятьКонтактнымЛицамРоли) Тогда
			Запрос.Текст = "";
		Иначе
			НеобходимТекстОбъединить = Данные.ОтправлятьПартнеру И Данные.ОтправлятьКонтактнымЛицамРоли;
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПартнеры + ?(НеобходимТекстОбъединить, ТекстОбъединить(), "") + ТекстЗапросаКонтактныеЛица;
		КонецЕсли;
		
	Иначе // По подпискам
		
		ТекстЗапросаПодписчики = "
		|ВЫБРАТЬ
		|	ПодпискиНаРассылкиИОповещенияКлиентам.Владелец КАК Партнер,
		|	ПодпискиНаРассылкиИОповещенияКлиентам.Владелец КАК Получатель,
		|	ПартнерыКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
		|	ВЫБОР
		|		КОГДА &ПредназначенаДляПисем
		|			ТОГДА ПартнерыКонтактнаяИнформация.АдресЭП
		|		ИНАЧЕ ПартнерыКонтактнаяИнформация.НомерТелефона
		|	КОНЕЦ КАК КонтактнаяИнформация,
		|	ПОДСТРОКА(ПартнерыКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
		|	Партнеры.НаименованиеПолное КАК ПредставлениеПолучателя
		|ИЗ
		|	Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
		|		%СоединениеПоОтбору%
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|		ПО ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = Партнеры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|		ПО ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = ПартнерыКонтактнаяИнформация.Ссылка
		|			И (ВЫБОР
		|				КОГДА &ПредназначенаДляПисем
		|					ТОГДА ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляПисем = ПартнерыКонтактнаяИнформация.Вид
		|				ИНАЧЕ ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляSMS = ПартнерыКонтактнаяИнформация.Вид
		|			КОНЕЦ)
		|ГДЕ
		|	ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
		|	И ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру
		|	И НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
		|	И ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
		|	ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.КонтактноеЛицо КАК Получатель,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
		|	ВЫБОР
		|		КОГДА &ПредназначенаДляПисем
		|			ТОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП
		|		ИНАЧЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
		|	КОНЕЦ КАК КонтактнаяИнформация,
		|	ПОДСТРОКА(КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей, 1, 1024),
		|	КонтактныеЛицаПартнеров.Наименование
		|ИЗ
		|	Справочник.ПодпискиНаРассылкиИОповещенияКлиентам.КонтактныеЛица КАК ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
		|		ПО ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.Ссылка = ПодпискиНаРассылкиИОповещенияКлиентам.Ссылка
		|		%СоединениеПоОтбору%
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|		ПО ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.КонтактноеЛицо = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
		|			И (ВЫБОР
		|				КОГДА &ПредназначенаДляПисем
		|					ТОГДА ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.ВидКИДляПисем = КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
		|				ИНАЧЕ ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.ВидКИДляSMS = КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
		|			КОНЕЦ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ПО ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.КонтактноеЛицо = КонтактныеЛицаПартнеров.Ссылка
		|ГДЕ
		|	НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
		|	И ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
		|	И ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений";
		
		Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", Данные.ГруппаРассылокИОповещений);
		
		Если ЕстьОтборПоКомпоновке Тогда
			ТекстСоединениеПоОтбору ="ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПартнеров КАК ОтборПартнеров
			                         |ПО ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = ОтборПартнеров.Партнер";
		Иначе
			ТекстСоединениеПоОтборуПартнеры = "";
		КонецЕсли;
		
		ТекстЗапросаПодписчики = СтрЗаменить(ТекстЗапросаПодписчики, "%СоединениеПоОтбору%", ТекстСоединениеПоОтбору);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПодписчики;
		
	КонецЕсли;

КонецПроцедуры

// Добавляет при необходимости в текст запроса по партнерам рассылки соединение с временной таблицей отбора
//  и устанавливает значение параметра ВидКонтактнойИнформацииПартнера
//
// Параметры:
//  Запрос                - Запрос - запрос, который формируется динамически.
//  ТекстЗапроса          - Строка - текст запроса, который будет обработан.
//  Данные                - Структура - содержит в себе реквизиты документа "Рассылка клиентам".
//  ЕстьОтборПоКомпоновке - Булево - признак того, что отбор по партнерам установлен
//
Процедура ОбработатьТекстЗапросаПоПартнерамРассылки(Запрос, ТекстЗапроса, Данные, ЕстьОтборПоКомпоновке) Экспорт
	
	Если ЕстьОтборПоКомпоновке Тогда
		ТекстСоединениеПоОтбору ="ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПартнеров КАК ОтборПартнеров
		|ПО ПартнерыКонтактнаяИнформация.Ссылка = ОтборПартнеров.Партнер";
	Иначе
		ТекстСоединениеПоОтбору = "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СоединениеПоОтбору%", ТекстСоединениеПоОтбору);
	
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииПартнера",
	?(Данные.ПредназначенаДляЭлектронныхПисем,
	Данные.ВидКонтактнойИнформацииПартнераДляПисем,
	Данные.ВидКонтактнойИнформацииПартнераДляSMS));
	
КонецПроцедуры

// Добавляет при необходимости в текст запроса по контактным лицам рассылки соединение с временной таблицей отбора
//  и устанавливает значение параметра ВидКонтактнойИнформацииКонтаткногоЛица
//
// Параметры:
//  Запрос                - Запрос - запрос, который формируется динамически.
//  ТекстЗапроса          - Строка - текст запроса, который будет обработан.
//  Данные                - Структура - содержит в себе реквизиты документа "Рассылка клиентам".
//  ЕстьОтборПоКомпоновке - Булево - признак того, что отбор по партнерам установлен
//
Процедура ОбработатьТекстЗапросаПоКонтактнымЛицамРассылки(Запрос, ТекстЗапроса, Данные, ЕстьОтборПоКомпоновке) Экспорт

	Если ЕстьОтборПоКомпоновке Тогда
		ТекстСоединениеПоОтбору ="ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПартнеров КАК ОтборПартнеров
		|ПО КонтактныеЛицаПартнеров.Владелец = ОтборПартнеров.Партнер";
	Иначе
		ТекстСоединениеПоОтбору = "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СоединениеПоОтбору%", ТекстСоединениеПоОтбору);
	
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииКонтаткногоЛица",
	?(Данные.ПредназначенаДляЭлектронныхПисем,
	Данные.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем,
	Данные.ВидКонтактнойИнформацииКонтактногоЛицаДляSMS));

КонецПроцедуры

Процедура ОбработатьТекстЗапросаАдресатыРассылкиНазначениеОпросов(Данные, ДанныеОснования, Запрос, ЕстьОтборПоКомпоновке)
	
	Если Данные.Принудительная Тогда
		
		Если ТипЗнч(ДанныеОснования.ТипРеспондентов) = Тип("СправочникСсылка.Партнеры") И Данные.ОтправлятьПартнеру Тогда
			
			Если ДанныеОснования.СвободныйОпрос Тогда
				
				ТекстЗапросаРеспонденты = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
				|	ПартнерыКонтактнаяИнформация.Ссылка КАК Получатель,
				|	ПартнерыКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
				|	ВЫБОР
				|		КОГДА &ПредназначенаДляПисем
				|			ТОГДА ПартнерыКонтактнаяИнформация.АдресЭП
				|		ИНАЧЕ ПартнерыКонтактнаяИнформация.НомерТелефона
				|	КОНЕЦ КАК КонтактнаяИнформация,
				|	ПОДСТРОКА(ПартнерыКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
				|	Партнеры.НаименованиеПолное КАК ПредставлениеПолучателя
				|ИЗ
				|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
				|		%СоединениеПоОтбору%
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО ПартнерыКонтактнаяИнформация.Ссылка = Партнеры.Ссылка
				|			И (ПартнерыКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииПартнера)
				|			И (НЕ Партнеры.ПометкаУдаления)";
				
			Иначе
				
				ТекстЗапросаРеспонденты = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НазначениеОпросовРеспонденты.Респондент КАК Партнер,
				|	НазначениеОпросовРеспонденты.Респондент КАК Получатель,
				|	ПартнерыКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
				|	ВЫБОР
				|		КОГДА &ПредназначенаДляПисем
				|			ТОГДА ПартнерыКонтактнаяИнформация.АдресЭП
				|		ИНАЧЕ ПартнерыКонтактнаяИнформация.НомерТелефона
				|	КОНЕЦ КАК КонтактнаяИнформация,
				|	ПОДСТРОКА(ПартнерыКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
				|	Партнеры.НаименованиеПолное КАК ПредставлениеПолучателя
				|ИЗ
				|	Документ.НазначениеОпросов.Респонденты КАК НазначениеОпросовРеспонденты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
				|		ПО НазначениеОпросовРеспонденты.Респондент = ПартнерыКонтактнаяИнформация.Ссылка
				|			И (ПартнерыКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииПартнера)
				|		%СоединениеПоОтбору%
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО НазначениеОпросовРеспонденты.Респондент = Партнеры.Ссылка
				|ГДЕ
				|	НазначениеОпросовРеспонденты.Ссылка = &НазначениеОпросов"
				
			КонецЕсли;
			
			ОбработатьТекстЗапросаПоПартнерамРассылки(Запрос, ТекстЗапросаРеспонденты, Данные, ЕстьОтборПоКомпоновке);
			
		ИначеЕсли ТипЗнч(ДанныеОснования.ТипРеспондентов) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") И Данные.ОтправлятьКонтактномуЛицуОбъектаОповещения Тогда
			
			Если ДанныеОснования.СвободныйОпрос Тогда
				
				ТекстЗапросаРеспонденты ="
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
				|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Получатель,
				|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
				|	ВЫБОР
				|		КОГДА &ПредназначенаДляПисем
				|			ТОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП
				|		ИНАЧЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
				|	КОНЕЦ КАК КонтактнаяИнформация,
				|	ПОДСТРОКА(КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
				|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя
				|ИЗ
				|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
				|		ПО КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = КонтактныеЛицаПартнеров.Ссылка
				|			И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииКонтаткногоЛица)
				|			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
				|		%СоединениеПоОтбору%
				|";
				
			Иначе
				
				ТекстЗапросаРеспонденты = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Партнеры.Ссылка КАК Партнер,
				|	НазначениеОпросовРеспонденты.Респондент КАК Получатель,
				|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
				|	ВЫБОР
				|		КОГДА &ПредназначенаДляПисем
				|			ТОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП
				|		ИНАЧЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
				|	КОНЕЦ КАК КонтактнаяИнформация,
				|	ПОДСТРОКА(КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
				|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя
				|ИЗ
				|	Документ.НазначениеОпросов.Респонденты КАК НазначениеОпросовРеспонденты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
				|		ПО НазначениеОпросовРеспонденты.Респондент = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
				|			И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииКонтаткногоЛица)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
				|		ПО КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = КонтактныеЛицаПартнеров.Ссылка
				|		%СоединениеПоОтбору%
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО КонтактныеЛицаПартнеров.Владелец = Партнеры.Ссылка
				|ГДЕ
				|	НазначениеОпросовРеспонденты.Ссылка = &НазначениеОпросов";
				
			КонецЕсли;
			
			ОбработатьТекстЗапросаПоКонтактнымЛицамРассылки(Запрос, ТекстЗапросаРеспонденты, Данные, ЕстьОтборПоКомпоновке);
			
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", Данные.ГруппаРассылокИОповещений);
		
		Если ТипЗнч(ДанныеОснования.ТипРеспондентов) = Тип("СправочникСсылка.Партнеры")  Тогда
			
			Если ДанныеОснования.СвободныйОпрос Тогда
				
				ТекстЗапросаРеспонденты = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПодпискиНаРассылкиИОповещенияКлиентам.Владелец КАК Партнер,
				|	ПодпискиНаРассылкиИОповещенияКлиентам.Владелец КАК Получатель,
				|	ПартнерыКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
				|	ВЫБОР
				|		КОГДА &ПредназначенаДляПисем
				|			ТОГДА ПартнерыКонтактнаяИнформация.АдресЭП
				|		ИНАЧЕ ПартнерыКонтактнаяИнформация.НомерТелефона
				|	КОНЕЦ КАК КонтактнаяИнформация,
				|	ПОДСТРОКА(ПартнерыКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
				|	Партнеры.НаименованиеПолное КАК ПредставлениеПолучателя
				|ИЗ
				|	Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = Партнеры.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
				|		ПО ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = ПартнерыКонтактнаяИнформация.Ссылка
				|			И (ВЫБОР
				|				КОГДА &ПредназначенаДляПисем
				|					ТОГДА ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляПисем = ПартнерыКонтактнаяИнформация.Вид
				|				ИНАЧЕ ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляSMS = ПартнерыКонтактнаяИнформация.Вид
				|			КОНЕЦ)
				|		%СоединениеПоОтбору%
				|ГДЕ
				|	ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
				|	И ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру
				|	И НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
				|	И ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений";
				
			Иначе
				
				ТекстЗапросаРеспонденты = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НазначениеОпросовРеспонденты.Респондент КАК Партнер,
				|	НазначениеОпросовРеспонденты.Респондент КАК Получатель,
				|	ПартнерыКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
				|	ВЫБОР
				|		КОГДА &ПредназначенаДляПисем
				|			ТОГДА ПартнерыКонтактнаяИнформация.АдресЭП
				|		ИНАЧЕ ПартнерыКонтактнаяИнформация.НомерТелефона
				|	КОНЕЦ КАК КонтактнаяИнформация,
				|	ПОДСТРОКА(ПартнерыКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
				|	Партнеры.НаименованиеПолное КАК ПредставлениеПолучателя
				|ИЗ
				|	Документ.НазначениеОпросов.Респонденты КАК НазначениеОпросовРеспонденты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
				|			ПО НазначениеОпросовРеспонденты.Респондент = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
				|				И ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
				|				И ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру
				|				И НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
				|				И ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений			
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
				|		ПО НазначениеОпросовРеспонденты.Респондент = ПартнерыКонтактнаяИнформация.Ссылка
				|			И (ВЫБОР
				|				КОГДА &ПредназначенаДляПисем
				|					ТОГДА ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляПисем = ПартнерыКонтактнаяИнформация.Вид
				|				ИНАЧЕ ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляSMS = ПартнерыКонтактнаяИнформация.Вид
				|			КОНЕЦ)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО НазначениеОпросовРеспонденты.Респондент = Партнеры.Ссылка
				|		%СоединениеПоОтбору%
				|ГДЕ
				|	НазначениеОпросовРеспонденты.Ссылка = &НазначениеОпросов"
				
			КонецЕсли;
			
			ОбработатьТекстЗапросаПоПартнерамРассылки(Запрос, ТекстЗапросаРеспонденты, Данные, ЕстьОтборПоКомпоновке);
			
		ИначеЕсли ТипЗнч(ДанныеОснования.ТипРеспондентов) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			Если ДанныеОснования.СвободныйОпрос Тогда
				
				ТекстЗапросаРеспонденты = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СправочникПартнеры.Ссылка КАК Партнер,
				|	КонтактныеЛицаПартнеров.Ссылка КАК Получатель,
				|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
				|	ВЫБОР
				|		КОГДА &ПредназначенаДляПисем
				|			ТОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП
				|		ИНАЧЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
				|	КОНЕЦ КАК КонтактнаяИнформация,
				|	ПОДСТРОКА(КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
				|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя
				|ИЗ
				|	Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СправочникПартнеры
				|		ПО ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = СправочникПартнеры.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
				|		ПО (СправочникПартнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
				|		ПО (КонтактныеЛицаПартнеров.Ссылка = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка)
				|			И (ВЫБОР
				|				КОГДА &ПредназначенаДляПисем
				|					ТОГДА ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИКонтактногоЛицаОбъектаОповещенияДляПисем = КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
				|				ИНАЧЕ ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИКонтактногоЛицаОбъектаОповещенияДляSMS = КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
				|			КОНЕЦ)
				|		%СоединениеПоОтбору%
				|ГДЕ
				|	НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
				|	И ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
				|	И ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьКонтактномуЛицуОбъектаОповещения
				|	И ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений";

			Иначе
				
				ТекстЗапросаРеспонденты = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НазначениеОпросовРеспонденты.Респондент КАК Партнер,
				|	НазначениеОпросовРеспонденты.Респондент КАК Получатель,
				|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК ПредставлениеКонтактнойИнформации,
				|	ВЫБОР
				|		КОГДА &ПредназначенаДляПисем
				|			ТОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП
				|		ИНАЧЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
				|	КОНЕЦ КАК КонтактнаяИнформация,
				|	ПОДСТРОКА(КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей, 1, 1024) КАК ЗначенияПолей,
				|	КонтактныеЛицаПартнеров.Наименование КАК ПредставлениеПолучателя
				|ИЗ
				|	Документ.НазначениеОпросов.Респонденты КАК НазначениеОпросовРеспонденты
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
				|		ПО НазначениеОпросовРеспонденты.Респондент = КонтактныеЛицаПартнеров.Ссылка
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
				|		ПО КонтактныеЛицаПартнеров.Владелец = Партнеры.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
				|			ПО Партнеры.Ссылка = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
				|				И ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
				|				И ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьКонтактномуЛицуОбъектаОповещения
				|				И НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
				|				И ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений			
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
				|		ПО КонтактныеЛицаПартнеров.Ссылка = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
				|			И (ВЫБОР
				|				КОГДА &ПредназначенаДляПисем
				|					ТОГДА ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИКонтактногоЛицаОбъектаОповещенияДляПисем = КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
				|				ИНАЧЕ ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИКонтактногоЛицаОбъектаОповещенияДляSMS = КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
				|			КОНЕЦ)
				|		%СоединениеПоОтбору%
				|ГДЕ
				|	НазначениеОпросовРеспонденты.Ссылка = &НазначениеОпросов"
				
			КонецЕсли;
			
			ОбработатьТекстЗапросаПоКонтактнымЛицамРассылки(Запрос, ТекстЗапросаРеспонденты, Данные, ЕстьОтборПоКомпоновке);

		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаРеспонденты;
	Запрос.УстановитьПараметр("НазначениеОпросов", ДанныеОснования.Ссылка); 
	
КонецПроцедуры

Функция ВыборкаАдресатовРассылки(Данные, ДанныеОснования)
	
	УстановленОтборПоОснованию = Ложь;
	Запрос = ЗапросОтборПоКомпоновке(Данные, УстановленОтборПоОснованию);
	ТекстЗапросаОтборПоКомпоновке = Запрос.Текст;
	
	ЕстьОтборПоКомпоновке = Не ПустаяСтрока(Запрос.Текст);
	
	Если ДанныеОснования <> Неопределено И УстановленОтборПоОснованию Тогда
		
		Если ТипЗнч(ДанныеОснования.Ссылка) = Тип("ДокументСсылка.НазначениеОпросов") Тогда
			
			ОбработатьТекстЗапросаАдресатыРассылкиНазначениеОпросов(Данные, ДанныеОснования, Запрос, ЕстьОтборПоКомпоновке);
			
		КонецЕсли;
		
	Иначе
		
		ОбработатьТекстЗапросаАдресатыРассылки(Данные, Запрос, ЕстьОтборПоКомпоновке);
		
	КонецЕсли;
	
	Если Запрос.Текст = ТекстЗапросаОтборПоКомпоновке Тогда
		Запрос.Текст = "";
	КонецЕсли;
	
	
	ТекстЗапросаДополнительныеПолучатели = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА РассылкаКлиентамДополнительныеПолучатели.Контакт ССЫЛКА Справочник.Партнеры
	|			ТОГДА Партнеры.Ссылка
	|		ИНАЧЕ КонтактныеЛицаПартнеров.Владелец
	|	КОНЕЦ КАК Партнер,
	|	РассылкаКлиентамДополнительныеПолучатели.Контакт КАК Получатель,
	|	РассылкаКлиентамДополнительныеПолучатели.КонтактнаяИнформация КАК ПредставлениеКонтактнойИнформации,
	|	РассылкаКлиентамДополнительныеПолучатели.КонтактнаяИнформация КАК КонтактнаяИнформация,
	|	"""" КАК ЗначенияПолей,
	|	ВЫБОР
	|		КОГДА РассылкаКлиентамДополнительныеПолучатели.Контакт ССЫЛКА Справочник.Партнеры
	|			ТОГДА ЕСТЬNULL(Партнеры.НаименованиеПолное, """")
	|		ИНАЧЕ ЕСТЬNULL(КонтактныеЛицаПартнеров.Наименование, """")
	|	КОНЕЦ КАК ПредставлениеПолучателя
	|ИЗ
	|	Документ.РассылкаКлиентам.ДополнительныеПолучатели КАК РассылкаКлиентамДополнительныеПолучатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО РассылкаКлиентамДополнительныеПолучатели.Контакт = Партнеры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ПО РассылкаКлиентамДополнительныеПолучатели.Контакт = КонтактныеЛицаПартнеров.Ссылка
	|ГДЕ
	|	РассылкаКлиентамДополнительныеПолучатели.Ссылка = &РассылкаКлиентам
	|ИТОГИ ПО
	|	Партнер,
	|   Получатель";
	
	Запрос.УстановитьПараметр("ПредназначенаДляПисем", Данные.ПредназначенаДляЭлектронныхПисем);
	Запрос.УстановитьПараметр("РассылкаКлиентам", Данные.Ссылка);
	
	Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", ТекстОбъединить()) + ТекстЗапросаДополнительныеПолучатели;
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции 

Процедура СоздатьПисьмаДляРассылки(Данные, ВыборкаАдресатовРассылки, МассивСозданныхВзаимодействий, ДанныеОснования)
	
	РассылкаПерсонализирована = РассылкаПерсонализирована(Данные);
	АдресатыАдреса = Новый Соответствие;
	МассивАдресатовРассылки = Новый Массив;
	
	Пока ВыборкаАдресатовРассылки.Следующий() Цикл
		
		Если Не РассылкаПерсонализирована Тогда
			МассивАдресатовРассылки.Очистить();
		КонецЕсли;
		
		ВыборкаПолучатель = ВыборкаАдресатовРассылки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПолучатель.Следующий() Цикл
			
			Если РассылкаПерсонализирована Тогда
				МассивАдресатовРассылки.Очистить();
			КонецЕсли;
		
			ВыборкаДетали = ВыборкаПолучатель.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				
				МассивАдресатовРассылки.Добавить(ДанныеАдресатаПоВыборке(ВыборкаДетали));
				
			КонецЦикла;
			
			Если РассылкаПерсонализирована Тогда
				СоздатьПисьмоДляАдресатаРассылки(Данные, МассивАдресатовРассылки, АдресатыАдреса,
				                                 РассылкаПерсонализирована, МассивСозданныхВзаимодействий, ДанныеОснования);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не РассылкаПерсонализирована Тогда
			СоздатьПисьмоДляАдресатаРассылки(Данные, МассивАдресатовРассылки, АдресатыАдреса,
			                                 РассылкаПерсонализирована, МассивСозданныхВзаимодействий, ДанныеОснования);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСозданныхВзаимодействий.Количество() > 0 Тогда
		Взаимодействия.УстановитьПапкиДляМассиваПисем(МассивСозданныхВзаимодействий);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеАдресатаПоВыборке(Выборка)
	
	ДанныеАдресата = Новый Структура;
	ДанныеАдресата.Вставить("ЗначенияПолей",                     Выборка.ЗначенияПолей);
	ДанныеАдресата.Вставить("КонтактнаяИнформация",              Выборка.КонтактнаяИнформация);
	ДанныеАдресата.Вставить("Партнер",                           Выборка.Партнер);
	ДанныеАдресата.Вставить("Получатель",                        Выборка.Получатель);
	ДанныеАдресата.Вставить("ПредставлениеКонтактнойИнформации", Выборка.ПредставлениеКонтактнойИнформации);
	ДанныеАдресата.Вставить("ПредставлениеПолучателя",           Выборка.ПредставлениеПолучателя);
	
	Возврат ДанныеАдресата;
	
КонецФункции

Функция УжеОтравлялосьНаДанныйАдрес(АдресатРассылки, АдресатыАдреса)
	
	МассивАдресов = АдресатыАдреса.Получить(АдресатРассылки.Получатель);
	Если МассивАдресов = Неопределено Тогда
		
		МассивАдресов = Новый Массив;
		МассивАдресов.Добавить(АдресатРассылки.КонтактнаяИнформация);
		АдресатыАдреса.Вставить(АдресатРассылки.Получатель, МассивАдресов);
		
	Иначе
		Если МассивАдресов.Найти(АдресатРассылки.КонтактнаяИнформация) = Неопределено Тогда
			МассивАдресов.Добавить(АдресатРассылки.КонтактнаяИнформация);
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура СоздатьПисьмоДляАдресатаРассылки(Данные, МассивАдресатовРассылки, АдресатыАдреса,
	                                       РассылкаПерсонализирована, МассивСозданныхПисем, ДанныеОснования)
	
	Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	ПредставлениеПолучателя = "";
	
	Для Каждого ДанныеПолучателя Из МассивАдресатовРассылки Цикл
		
		Если УжеОтравлялосьНаДанныйАдрес(ДанныеПолучателя, АдресатыАдреса) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РассылкаПерсонализирована Тогда
			ТабличнаяЧасть = Письмо.ПолучателиПисьма;
		Иначе
		
			ТабличнаяЧасть = ?(ТипЗнч(ДанныеПолучателя.Получатель) = Тип("СправочникСсылка.Партнеры") ИЛИ (НЕ Данные.ОтправлятьПартнеру), 
			                   Письмо.ПолучателиПисьма,
			                   Письмо.ПолучателиКопий);
		
		КонецЕсли;
		
		ПредставлениеПолучателя = ДанныеПолучателя.ПредставлениеПолучателя;
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ДанныеПолучателя.КонтактнаяИнформация) Тогда
			ДобавитьПолучателяПисьма(ТабличнаяЧасть, ДанныеПолучателя);
		КонецЕсли;
		
	КонецЦикла;
		
	Если Письмо.ПолучателиКопий.Количество() = 0 И Письмо.ПолучателиПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Письмо.Автор                    = Пользователи.ТекущийПользователь();
	Письмо.Ответственный            = Данные.Ответственный;
	Письмо.Дата                     = ТекущаяДатаСеанса();
	Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Письмо.Кодировка                = "UTF-8";
	Письмо.УчетнаяЗапись            = Данные.УчетнаяЗапись;
	Письмо.ОтправительПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Данные.УчетнаяЗаписьИмяПользователя,
	                                                                                           Данные.УчетнаяЗаписьАдресЭлектроннойПочты,
	                                                                                           "");
	
	Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	Письмо.Тема                    = Данные.Тема;
	Письмо.ТипТекста               = ?(Данные.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML, 
	                                   Перечисления.ТипыТекстовЭлектронныхПисем.HTML, 
	                                   Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	Письмо.ВзаимодействиеОснование = Данные.Ссылка;
	Письмо.УведомитьОДоставке  = Ложь;
	Письмо.УведомитьОПрочтении = Ложь;
	Письмо.ОтображатьТелоИсходногоПисьма = Ложь;
	Письмо.ВключатьТелоИсходногоПисьма   = Ложь;
	Письмо.УдалятьПослеОтправки = Данные.УдалятьПослеОтправки;
	Письмо.Комментарий = КомментарийДляСообщенияПоРассылке(Данные);
	Письмо.ДатаКогдаОтправить = Данные.ДатаРассылки;
	Письмо.ДатаАктуальностиОтправки = Данные.ДатаАктуальности;
	Письмо.ЕстьВложения             = Данные.ЕстьВложения;

	Если Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		Письмо.Текст = СформироватьТекстСообщения(Данные.ТекстПисьма, ПредставлениеПолучателя, ДанныеОснования);
	Иначе
		Письмо.ТекстHTML = СформироватьТекстСообщения(Данные.ТекстПисьмаHTML, ПредставлениеПолучателя, ДанныеОснования);
		Письмо.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Письмо.ТекстHTML);
	КонецЕсли;
	
	СформироватьСпискиПолучателей(Письмо);
	
	Письмо.Записать();
	
	Предмет = ПредметСообщения(Данные.Основание, Письмо.Ссылка);
	Реквизиты = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(,Предмет,Истина,,Ложь);
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, Реквизиты);
	
	МассивСозданныхПисем.Добавить(Письмо.Ссылка);
	
КонецПроцедуры

Процедура СформироватьСпискиПолучателей(Письмо)
	
	Письмо.СписокПолучателейПисьма       = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
	Письмо.СписокПолучателейКопий        = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий, Ложь);
	Письмо.СписокПолучателейСкрытыхКопий = "";
	
КонецПроцедуры

Процедура ДобавитьПолучателяПисьма(ТабличнаяЧасть, Получатель)

	НоваяСтрока = ТабличнаяЧасть.Добавить();
	НоваяСтрока.Адрес         = Получатель.КонтактнаяИнформация;
	НоваяСтрока.Представление = Получатель.ПредставлениеПолучателя;
	НоваяСтрока.Контакт       = Получатель.Получатель;
	
КонецПроцедуры

Функция ПредметСообщения(ОснованиеРассылки, Сообщение)

	Если ЗначениеЗаполнено(ОснованиеРассылки) И ВзаимодействияКлиентСервер.ЯвляетсяПредметом(ОснованиеРассылки) Тогда
		Возврат ОснованиеРассылки;
	Иначе
		Возврат Сообщение;
	КонецЕсли;

КонецФункции 

Процедура СоздатьSMSДляРассылки(Данные, ВыборкаАдресатовРассылки, МассивСозданныхВзаимодействий, ДанныеОснования)
	
	РассылкаПерсонализирована = РассылкаПерсонализирована(Данные);
	АдресатыАдреса = Новый Соответствие;
	МассивАдресатовРассылки = Новый Массив;
	
	Пока ВыборкаАдресатовРассылки.Следующий() Цикл
		
		ВыборкаПолучатель = ВыборкаАдресатовРассылки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПолучатель.Следующий() Цикл
			
			Если РассылкаПерсонализирована Тогда
				МассивАдресатовРассылки.Очистить();
			КонецЕсли;
		
			ВыборкаДетали = ВыборкаПолучатель.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				
				МассивАдресатовРассылки.Добавить(ДанныеАдресатаПоВыборке(ВыборкаДетали));
				
			КонецЦикла;
			
			Если РассылкаПерсонализирована Тогда
				СоздатьSMSДляАдресатовРассылки(Данные, МассивАдресатовРассылки, АдресатыАдреса, МассивСозданныхВзаимодействий, ДанныеОснования);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не РассылкаПерсонализирована Тогда
		СоздатьSMSДляАдресатовРассылки(Данные, МассивАдресатовРассылки, АдресатыАдреса, МассивСозданныхВзаимодействий, ДанныеОснования);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьSMSДляАдресатовРассылки(Данные, МассивАдресатовРассылки, АдресатыАдреса, МассивСозданныхВзаимодействий, ДанныеОснования)
	
	ДокументСообщениеSMS = Документы.СообщениеSMS.СоздатьДокумент();
	ПредставлениеПолучателя = "";

	Для каждого АдресатРассылки Из МассивАдресатовРассылки Цикл
		
		ПодготовитьНомерТелефона(АдресатРассылки.ЗначенияПолей,
		                         АдресатРассылки.ПредставлениеКонтактнойИнформации,
		                         АдресатРассылки.КонтактнаяИнформация);
		
		Если ПустаяСтрока(АдресатРассылки.КонтактнаяИнформация) Тогда
			Продолжить;
		КонецЕсли;
		
		Если УжеОтравлялосьНаДанныйАдрес(АдресатРассылки, АдресатыАдреса) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеПолучателя = АдресатРассылки.ПредставлениеПолучателя;
		
		ДобавитьАдресатаSMS(ДокументСообщениеSMS, АдресатРассылки);
	
	КонецЦикла;
	
	Если ДокументСообщениеSMS.Адресаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДокументаСообщениеSMS(Данные, ДокументСообщениеSMS);
	ДокументСообщениеSMS.ТекстСообщения = СформироватьТекстСообщения(Данные.ТекстSMS, ПредставлениеПолучателя, ДанныеОснования);

	ЗаписатьДокументСообщениеSMS(ДокументСообщениеSMS, Данные);
	МассивСозданныхВзаимодействий.Добавить(ДокументСообщениеSMS.Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьДокументСообщениеSMS(ДокументСообщениеSMS, Данные)

	ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(ДокументСообщениеSMS);
	
	ДокументСообщениеSMS.Записать();
	
	Предмет = ПредметСообщения(Данные.Основание, ДокументСообщениеSMS.Ссылка);
	Реквизиты = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи( , Предмет, Истина,,Ложь);
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(ДокументСообщениеSMS.Ссылка, Реквизиты);

КонецПроцедуры

Процедура ДобавитьАдресатаSMS(ДокументСообщениеSMS, ДанныеАдресата)
	
	НоваяСтрока = ДокументСообщениеSMS.Адресаты.Добавить();
	НоваяСтрока.Контакт               = ДанныеАдресата.Получатель;
	НоваяСтрока.ПредставлениеКонтакта = ДанныеАдресата.ПредставлениеПолучателя;
	НоваяСтрока.КакСвязаться          = ДанныеАдресата.ПредставлениеКонтактнойИнформации;
	НоваяСтрока.НомерДляОтправки      = ДанныеАдресата.КонтактнаяИнформация;
	НоваяСтрока.СостояниеСообщения    = Перечисления.СостоянияСообщенияSMS.Исходящее;

КонецПроцедуры

Процедура ПодготовитьНомерТелефона(ЗначенияПолей, Представление, НомерТелефона)

	ЗначенияПолейXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(ЗначенияПолей,
	                                                                            Представление,
	                                                                            Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	СтруктураПолей = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(ЗначенияПолейXML);
	
	КодСтраны     = ?(СтруктураПолей.Свойство("КодСтраны"), СтруктураПолей.КодСтраны, "");
	КодГорода     = ?(СтруктураПолей.Свойство("КодГорода"), СтруктураПолей.КодГорода, "");
	НомерТелефона = ?(СтруктураПолей.Свойство("НомерТелефона"), СтруктураПолей.НомерТелефона, "");
	
	//По значениям полей
	Если Не ПустаяСтрока(КодСтраны) И НЕ ПустаяСтрока(КодГорода) И Не ПустаяСтрока(НомерТелефона) Тогда
		Если КодСтраны = "38" ИЛИ КодСтраны = "8" Тогда
			КодСтраны = "+38";
		КонецЕсли;
		НомерТелефонаДляОтправки = КодСтраны + КодГорода + НомерТелефона;
		
		Если НомерТелефонаСоотвествуетТребованиямДляОтправкиSMS(НомерТелефонаДляОтправки) Тогда
			НомерТелефона = НомерТелефонаДляОтправки;
		Возврат;
		
	КонецЕсли;

	КонецЕсли;
	
	//По номеру телефона
	Если Не ПустаяСтрока(НомерТелефона) Тогда
		
		НомерТелефонаДляОтправки = НомерТелефона;
		Если СтрДлина(НомерТелефонаДляОтправки) = 10 Тогда
			НомерТелефона = "+38" + НомерТелефонаДляОтправки;
		ИначеЕсли СтрДлина(НомерТелефонаДляОтправки) = 11 
				И Лев(НомерТелефонаДляОтправки, 1) = "8" Тогда
				НомерТелефонаДляОтправки = "+3" + НомерТелефонаДляОтправки;
		КонецЕсли;
			
		Если НомерТелефонаСоотвествуетТребованиямДляОтправкиSMS(НомерТелефонаДляОтправки) Тогда
			НомерТелефона = НомерТелефонаДляОтправки;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Представление) Тогда
		
		//По представлению в формате XXXXXXXXXXXXX
		НомерТелефонаДляОтправки = Представление;
		Если СтрДлина(НомерТелефонаДляОтправки) = 10 Тогда
			НомерТелефонаДляОтправки = "+38" + НомерТелефонаДляОтправки;
		ИначеЕсли СтрДлина(НомерТелефонаДляОтправки) = 11 
				И Лев(НомерТелефонаДляОтправки, 1) = "8" Тогда
				НомерТелефонаДляОтправки = "+3" + НомерТелефонаДляОтправки;
		КонецЕсли;
			
		Если НомерТелефонаСоотвествуетТребованиямДляОтправкиSMS(НомерТелефонаДляОтправки) Тогда
			НомерТелефона = НомерТелефонаДляОтправки;
			Возврат;
		КонецЕсли;
		
		// По представлению в формате +X(XXX)XXXXXXX
		СтруктураПолей = ВзаимодействияКлиентСервер.СтруктураПолейПоПредставлениюТелефона(Представление);
		КодСтраны     = ?(СтруктураПолей.Свойство("КодСтраны"), СтруктураПолей.КодСтраны, "");
		КодГорода     = ?(СтруктураПолей.Свойство("КодГорода"), СтруктураПолей.КодГорода, "");
		НомерТелефона = ?(СтруктураПолей.Свойство("НомерТелефона"), СтруктураПолей.НомерТелефона, "");
		
		Если Не ПустаяСтрока(КодСтраны) И НЕ ПустаяСтрока(КодГорода) И Не ПустаяСтрока(НомерТелефона) Тогда
			Если КодСтраны = "38" ИЛИ КодСтраны = "8" Тогда
				КодСтраны = "+38";
			КонецЕсли;
			НомерТелефонаДляОтправки = КодСтраны + КодГорода + НомерТелефона;
			
			Если НомерТелефонаСоотвествуетТребованиямДляОтправкиSMS(НомерТелефонаДляОтправки) Тогда
				НомерТелефона = НомерТелефонаДляОтправки;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	НомерТелефона = "";

КонецПроцедуры

Функция НомерТелефонаСоотвествуетТребованиямДляОтправкиSMS(НомерТелефонаДляОтправки)

	
	Если СтрДлина(НомерТелефонаДляОтправки) <> 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Лев(НомерТелефонаДляОтправки, 3) <> "+38" Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(НомерТелефонаДляОтправки, 10)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции 

Функция СформироватьТекстСообщения(ШаблонСообщения, ПредставлениеПолучателя, ДанныеОснования)
	
	ТекстСообщения = ШаблонСообщения;
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ПредставлениеАдресата]", ПредставлениеПолучателя);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТекущаяДата]", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
	
	Если ДанныеОснования <> Неопределено Тогда
		Если ТипЗнч(ДанныеОснования.Ссылка) = Тип("ДокументСсылка.НазначениеОпросов") Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДатаНачалаОпроса]", Формат(ДанныеОснования.ДатаНачала, "ДЛФ=D"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДатаОкончанияОпроса]", Формат(ДанныеОснования.ДатаОкончания, "ДЛФ=D"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НаименованиеОпроса]", ДанныеОснования.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Процедура ЗаполнитьРеквизитыДокументаСообщениеSMS(Данные, ДокументСообщениеSMS)
	
	ДокументСообщениеSMS.Дата                     = ТекущаяДатаСеанса();
	ДокументСообщениеSMS.Автор                    = Пользователи.ТекущийПользователь();
	ДокументСообщениеSMS.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ДокументСообщениеSMS.Ответственный            = Данные.Ответственный;
	ДокументСообщениеSMS.ВзаимодействиеОснование  = Данные.Ссылка;
	ДокументСообщениеSMS.Тема                     = Данные.Тема;
	ДокументСообщениеSMS.ОтправлятьВТранслите     = Данные.ОтправлятьВТранслите;
	ДокументСообщениеSMS.ДатаКогдаОтправить       = Данные.ДатаРассылки;
	ДокументСообщениеSMS.ДатаАктуальностиОтправки = Данные.ДатаАктуальности;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Если Данные.Свойство("Комментарий") Тогда
			ДокументСообщениеSMS.Комментарий = Данные.Комментарий;
		КонецЕсли;
	Иначе
		ДокументСообщениеSMS.Комментарий = КомментарийДляСообщенияПоРассылке(Данные);
	КонецЕсли;
	
КонецПроцедуры

Функция КомментарийДляСообщенияПоРассылке(Данные)

	ТекстКомментария = НСтр("ru='Создано по рассылке ""%1"" № %2 от %3.';uk='Створено по розсилці ""%1"" № %2 від %3.'");
	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Данные.Тема,
	                                                                           Данные.Номер,
	                                                                           Данные.Дата);
	
	Возврат ТекстКомментария
	
КонецФункции

Функция РассылкаПерсонализирована(Данные)
	
	ШаблонСообщения = ШаблонСообщенияРассылки(Данные);
	
	Возврат СтрНайти(ШаблонСообщения, "[ПредставлениеАдресата]") > 0;
	
КонецФункции

Функция ШаблонСообщенияРассылки(Данные)

	ШаблонСообщения = "";
	
	Если Данные.ПредназначенаДляЭлектронныхПисем Тогда
		
		Если Данные.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			ШаблонСообщения = Данные.ТекстПисьмаHTML;
		Иначе
			ШаблонСообщения = Данные.ТекстПисьма;
		КонецЕсли;
		
	Иначе
		ШаблонСообщения = Данные.ТекстSMS;
	КонецЕсли;
	
	Возврат ШаблонСообщения;

КонецФункции 

#КонецОбласти

#Область Прочее

Функция ТаблицыОтличаются(Таблица1, Таблица2)

	Если Таблица1.Количество() <> Таблица2.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Таблица1.Колонки.Количество() <> Таблица2.Колонки.Количество() Тогда
		Возврат Истина
	КонецЕсли;
	
	Для ИндСтрока = 0 По Таблица1.Количество() - 1 Цикл
		Для ИндКолонка = 0 По Таблица1.Колонки.Количество() - 1 Цикл
		
			Если Таблица1[ИндСтрока][ИндКолонка] <> Таблица2[ИндСтрока][ИндКолонка] Тогда
				Возврат Истина;
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Процедура ЗаписьВОчередьПоТипуСобытия(ТипСобытияОповещения, ИсточникОповещения, Подписчик, ДатаОтправки, ДатаАктуальности)
	
	МассивВидовОповещений = РассылкиИОповещенияКлиентамПовтИсп.ДействующиеВидыОповещенийПоТипуСобытия(ТипСобытияОповещения);
	
	Для Каждого ВидОповещения Из МассивВидовОповещений Цикл
			
			РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ВыполнитьЗаписьВРегистр(ВидОповещения,
			                                                                             Подписчик,
			                                                                             ИсточникОповещения,
			                                                                             ДатаОтправки,
			                                                                             ДатаАктуальности);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗапятуюЕслиНеПустойТекст(Строка)

	Строка = Строка + ?(ПустаяСтрока(Строка), "", ", ");

КонецПроцедуры

Процедура ДобавитьПодписчиковПоОтбору(АдресВоВременномХранилище,
	                                  ГруппаРассылокИОповещений,
	                                  ПредназначенаДляSMS,
	                                  ПредназначенаДляЭлектронныхПисем) Экспорт
	
	ТаблицаПартнеров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ТаблицаПартнеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ТаблицаПартнеров.Партнер,
	|	ТаблицаПартнеров.ВидКИДляПисем,
	|	ТаблицаПартнеров.ВидКИТелефон
	|ПОМЕСТИТЬ ПодобранныеПартнеры
	|ИЗ
	|	&ТаблицаПартнеров КАК ТаблицаПартнеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодобранныеПартнеры.Партнер,
	|	ПодобранныеПартнеры.ВидКИДляПисем,
	|	ПодобранныеПартнеры.ВидКИТелефон,
	|	ЕСТЬNULL(ПодпискиНаРассылкиИОповещенияКлиентам.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодпискиНаРассылкиИОповещенияКлиентам.ПустаяСсылка)) КАК Подписка,
	|	ЕСТЬNULL(ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует, ЛОЖЬ) КАК ПодпискаДействует
	|ИЗ
	|	ПодобранныеПартнеры КАК ПодобранныеПартнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
	|		ПО ПодобранныеПартнеры.Партнер = ПодпискиНаРассылкиИОповещенияКлиентам.Владелец
	|			И (ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = &ГруппаРассылокИОповещений)
	|			И (НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ТаблицаПартнеров", ТаблицаПартнеров);
	Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", ГруппаРассылокИОповещений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Подписка.Пустая() Тогда
			
			ПодпискаОбъект = Справочники.ПодпискиНаРассылкиИОповещенияКлиентам.СоздатьЭлемент();
			ПодпискаОбъект.Владелец = Выборка.Партнер;
			ПодпискаОбъект.ГруппаРассылокИОповещений = ГруппаРассылокИОповещений;
			ПодпискаОбъект.ОтправлятьПартнеру = Истина;
			
			Если ПредназначенаДляSMS Тогда
				ПодпискаОбъект.ВидКИПартнераДляSMS = Выборка.ВидКИТелефон;
			КонецЕсли;
			Если ПредназначенаДляЭлектронныхПисем Тогда
				ПодпискаОбъект.ВидКИПартнераДляПисем = Выборка.ВидКИДляПисем;
			КонецЕсли;
			
		Иначе
			
			Если Выборка.ПодпискаДействует Тогда
				Продолжить
			КонецЕсли;
			
			ПодпискаОбъект = Выборка.Подписка.ПолучитьОбъект();
			
		КонецЕсли;
		
		ПодпискаОбъект.ПодпискаДействует  = Истина;
		ПодпискаОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

Функция ТекстОбъединить()
	
	Возврат "
		|
		|ОБЪЕДИНИТЬ
		|";
	
	КонецФункции

#КонецОбласти

#КонецОбласти





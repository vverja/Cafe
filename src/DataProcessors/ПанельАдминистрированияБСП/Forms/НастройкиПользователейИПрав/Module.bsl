#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	РежимРаботы 				 = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",            Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты",         Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	РежимРаботы.Вставить("БазоваяВерсия",                        ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	РежимРаботы.Вставить("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	Элементы.ГруппаОграничиватьДоступНаУровнеЗаписей.Видимость 		= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаИспользоватьГруппыДоступаПартнеров.Видимость 	= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаИспользоватьГруппыДоступаНоменклатуры.Видимость 	= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаИспользоватьГруппыДоступаФизЛиц.Видимость 		=
		НЕ РежимРаботы.БазоваяВерсия И РежимРаботы.СоставНабораКонстантФормы.Свойство("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица");
	Элементы.НастройкаВнешнихПользователей.Видимость				= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаКопированиеНастроекПользователей.Видимость 		= НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаОчисткаНастроекПользователей.Видимость			= РежимРаботы.БазоваяВерсия;
	Элементы.ГруппаПерсональныеНастройки.Видимость					= РежимРаботы.БазоваяВерсия;
	
	Если РежимРаботы.БазоваяВерсия Тогда
		Элементы.ГруппаРаботаСНастройкамиПользователей2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	Если РежимРаботы.БазоваяВерсия Тогда
		ЭтаФорма.Заголовок 				   = НСтр("ru='Настройки пользователей';uk='Настройки користувачів'");
		ЭтаФорма.АвтоЗаголовок 			   = Ложь;
		Элементы.ОписаниеРаздела.Заголовок =
			НСтр("ru='Администрирование пользователей, управление пользовательскими настройками.';uk='Адміністрування користувачів, управління настройками користувачів.'");
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	      ЭтотОбъект, "ИспользоватьГруппыДоступаПартнеров",
	      НСтр("ru='Группы доступа контрагентов';uk='Групи доступу контрагентів'"), РежимРаботы.ИспользоватьПартнеровКакКонтрагентов);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	      ЭтотОбъект, "ПояснениеИспользоватьГруппыДоступаПартнеров",
	      НСтр("ru='Деление контрагентов на группы, по которым можно назначать пользователям права на добавление (изменение), просмотр контрагентов и всех документов по этим контрагентам.';uk='Поділ контрагентів на групи, за якими можна призначати користувачам права на додавання (редагування), перегляд контрагентів і всіх документів за цим контрагентам.'"),
	      РежимРаботы.ИспользоватьПартнеровКакКонтрагентов);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	      ЭтотОбъект, "ОткрытьГруппыДоступаПартнеров",
	      НСтр("ru='Группы доступа контрагентов';uk='Групи доступу контрагентів'"), РежимРаботы.ИспользоватьПартнеровКакКонтрагентов);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	      ЭтотОбъект, "ПояснениеОткрытьГруппыДоступаПартнеров",
	      НСтр("ru='Создание групп доступа контрагентов.';uk='Створення груп доступу контрагентів.'"), РежимРаботы.ИспользоватьПартнеровКакКонтрагентов);
	
	// СтандартныеПодсистемы.Пользователи
	Если Не Пользователи.ОбщиеНастройкиВходаИспользуются() Тогда
		Элементы.ГруппаНастройкиВхода.Видимость = Ложь;
		Элементы.ГруппыПользователейИНастройкиВхода.Группировка
			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГоризонтальныйОтступ2.Видимость = Ложь;
		Элементы.ГруппаНастройкиВходаВнешнихПользователей.Видимость = Ложь;
		Элементы.ИспользованиеВнешнихПользователейИНастройкиВхода.Группировка
			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	 Или СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 Или ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		
		Элементы.НастройкаВнешнихПользователей.Видимость = Ложь;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 Или ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		
		Элементы.ИспользоватьГруппыПользователей.Доступность = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УпрощенныйИнтерфейс = УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа();
	Элементы.ГруппыДоступа.Видимость       = НЕ УпрощенныйИнтерфейс;
	Элементы.ПрофилиГруппДоступа.Видимость = НЕ РежимРаботы.БазоваяВерсия;
	Элементы.ГруппыПользователей.Видимость = НЕ УпрощенныйИнтерфейс;
	
	Если ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.ОграничиватьДоступНаУровнеЗаписей.Доступность = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// СтандартныеПодсистемы.УправлениеДоступом
&НаКлиенте
Процедура ИспользоватьГруппыПользователейПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.УправлениеДоступом
&НаКлиенте
Процедура ОграничиватьДоступНаУровнеЗаписейПриИзменении(Элемент)
	
	Если НаборКонстант.ОграничиватьДоступНаУровнеЗаписей Тогда
		
		ТекстВопроса =
			НСтр("ru='Включить ограничение доступа на уровне записей?
                       |
                       |Потребуется заполнение данных, которое будет выполняться частями
                       |регламентным заданием ""Заполнение данных для ограничения доступа""
                       |(ход выполнения в журнале регистрации).
                       |
                       |Выполнение может сильно замедлить работу программы и выполняться
                       |от нескольких секунд до многих часов (в зависимости от объема данных).'
                       |;uk='Включити обмеження доступу на рівні записів?
                       |
                       |Потрібно заповнення даних, яке буде виконуватися частинами
                       |регламентним завданням ""Заповнення даних для обмеження доступу""
                       |(хід виконання в журналі реєстрації).
                       |
                       |Виконання може сильно уповільнити роботу програми і виконуватися
                       |від декількох секунд до багатьох годин (в залежності від обсягу даних).'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.Пользователи
&НаКлиенте
Процедура ИспользоватьВнешнихПользователейПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьВнешнихПользователей Тогда
		
		ТекстВопроса =
			НСтр("ru='Разрешить доступ внешним пользователям?
                       |
                       |При входе в программу список выбора пользователей станет пустым
                       |(реквизит ""Показывать в списке выбора"" в карточках всех
                       | пользователей будет очищен и скрыт).'
                       |;uk='Дозволити доступ зовнішнім користувачам?
                       |
                       |При вході в програму список вибору користувачів стане порожнім
                       |(реквізит ""Показувати в списку вибору"" в картках усіх
                       |користувачів буде очищено і прихований).'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ИспользоватьВнешнихПользователейПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстВопроса =
			НСтр("ru='Запретить доступ внешним пользователям?
                       |
                       |Реквизит ""Вход в программу разрешен"" будет
                       |очищен в карточках всех внешних пользователей.'
                       |;uk='Заборонити доступ зовнішнім користувачам?
                       |
                       |Реквізит ""Вхід в програму дозволено"" буде
                       |очищений в картках усіх зовнішніх користувачів.'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ИспользоватьВнешнихПользователейПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Пользователи

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Пользователи
&НаКлиенте
Процедура СправочникВнешниеПользователи(Команда)
	ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВходаПользователей(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВходаВнешнихПользователей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьНастройкиВнешнихПользователей", Истина);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Пользователи

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	МассивИменКонстант = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Для Каждого КонстантаИмя Из МассивИменКонстант Цикл
		Если КонстантаИмя <> "" Тогда
			Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
&НаКлиенте
Процедура ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.ОграничиватьДоступНаУровнеЗаписей = Ложь;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.Пользователи
&НаКлиенте
Процедура ИспользоватьВнешнихПользователейПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.ИспользоватьВнешнихПользователей = Ложь;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Пользователи

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	МассивИменКонстант = Новый Массив;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	НачатьТранзакцию();
	Попытка
		
		КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
		МассивИменКонстант.Добавить(КонстантаИмя);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат МассивИменКонстант;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		ТекущееЗначение  = КонстантаМенеджер.Получить();
		
		Если ТекущееЗначение <> КонстантаЗначение Тогда
			Попытка
				КонстантаМенеджер.Установить(КонстантаЗначение);
			Исключение
				НаборКонстант[КонстантаИмя] = ТекущееЗначение;
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнешнихПользователей" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ОграничиватьДоступНаУровнеЗаписей" Тогда
		
		Если Не НаборКонстант.ИспользоватьГруппыДоступаПартнеров 
			  И НаборКонстант.ИспользоватьВнешнихПользователей 
			  И НаборКонстант.ОграничиватьДоступНаУровнеЗаписей Тогда
			
			Константы.ИспользоватьГруппыДоступаПартнеров.Установить(Истина);
		КонецЕсли;	
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность("НаборКонстант.ИспользоватьГруппыДоступаПартнеров");
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	// СтандартныеПодсистемы.Пользователи
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьВнешнихПользователей" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьВнешниеПользователи.Доступность         = НаборКонстант.ИспользоватьВнешнихПользователей;
		Элементы.НастройкиВходаВнешнихПользователей.Доступность = НаборКонстант.ИспользоватьВнешнихПользователей;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Пользователи
	
	Если РеквизитПутьКДанным = "НаборКонстант.ОграничиватьДоступНаУровнеЗаписей" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.ИспользоватьГруппыДоступаПартнеров.Доступность    = НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		Элементы.ИспользоватьГруппыДоступаНоменклатуры.Доступность = НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		
		УстановитьДоступность("НаборКонстант.ИспользоватьГруппыДоступаПартнеров");
		УстановитьДоступность("НаборКонстант.ИспользоватьГруппыДоступаНоменклатуры");
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьГруппыДоступаПартнеров" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьГруппыДоступаПартнеров.Доступность = НаборКонстант.ИспользоватьГруппыДоступаПартнеров;
		Элементы.ГруппаИспользоватьГруппыДоступаПартнеров.Доступность = НЕ РежимРаботы.БазоваяВерсия
			И НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		Элементы.ГруппаИспользоватьГруппыДоступаПартнеровЛево.Доступность = НЕ НаборКонстант.ИспользоватьВнешнихПользователей;
		Элементы.ГруппаКомментарийИспользоватьГруппыДоступаПартнеров.Видимость = НЕ РежимРаботы.БазоваяВерсия
			И НаборКонстант.ОграничиватьДоступНаУровнеЗаписей И НаборКонстант.ИспользоватьВнешнихПользователей;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьГруппыДоступаНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьГруппыДоступаНоменклатуры.Доступность = НаборКонстант.ИспользоватьГруппыДоступаНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
	 ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
	 		И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
	 			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Пользователи

&НаКлиенте
Процедура ИспользоватьГруппыДоступаНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГруппыДоступаПартнеровПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьДоступНаУровнеЗаписейФизическиеЛицаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Пользователи

&НаКлиенте
Процедура ОткрытьГруппыДоступаНоменклатуры(Команда)
	ОткрытьФорму("Справочник.ГруппыДоступаНоменклатуры.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыДоступаПартнеров(Команда)
	ОткрытьФорму("Справочник.ГруппыДоступаПартнеров.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыДоступаФизЛиц(Команда)
	ОткрытьФорму("Справочник.ГруппыДоступаФизическихЛиц.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОткрытияФормПриНачалеРаботыСистемы(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиОткрытияФормПриНачалеРаботыСистемы.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

#КонецОбласти
